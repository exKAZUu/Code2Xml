using Code2Xml.Core.Generators.ANTLRv3;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g 2014-11-01 20:38:37

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Text;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  Code2Xml.Core.Generators.ANTLRv3.Php 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class PhpLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int Abstract=4;
	public const int Ampersand=5;
	public const int And=6;
	public const int ArrayAssign=7;
	public const int ArrayType=8;
	public const int As=9;
	public const int AsignmentOperator=10;
	public const int Asterisk=11;
	public const int Bang=12;
	public const int BodyString=13;
	public const int BodyStringRest=14;
	public const int BodyStringRestShortTag=15;
	public const int BoolType=16;
	public const int BooleanType=17;
	public const int Break=18;
	public const int Case=19;
	public const int Catch=20;
	public const int Class=21;
	public const int ClassMember=22;
	public const int Clone=23;
	public const int CloseCurlyBracket=24;
	public const int CloseRoundBracket=25;
	public const int CloseSquareBracket=26;
	public const int Colon=27;
	public const int Comma=28;
	public const int ComparisionOperator=29;
	public const int Const=30;
	public const int Continue=31;
	public const int DNum=32;
	public const int Decimal=33;
	public const int Default=34;
	public const int Die=35;
	public const int Digits=36;
	public const int Do=37;
	public const int Dot=38;
	public const int DoubleQuotedString=39;
	public const int DoubleType=40;
	public const int Echo=41;
	public const int Else=42;
	public const int ElseIf=43;
	public const int Empty=44;
	public const int Eol=45;
	public const int EqualityOperator=46;
	public const int Equals=47;
	public const int EscapeCharector=48;
	public const int Eval=49;
	public const int Exit=50;
	public const int Exponent_DNum=51;
	public const int Extends=52;
	public const int False=53;
	public const int Final=54;
	public const int Finally=55;
	public const int FloatType=56;
	public const int For=57;
	public const int Foreach=58;
	public const int Forwardslash=59;
	public const int Function=60;
	public const int Global=61;
	public const int Goto=62;
	public const int HaltCompiler=63;
	public const int Hat=64;
	public const int HereDoc=65;
	public const int HereDocContents=66;
	public const int Hexadecimal=67;
	public const int If=68;
	public const int Implements=69;
	public const int Include=70;
	public const int IncludeOnce=71;
	public const int IncrementOperator=72;
	public const int InstanceMember=73;
	public const int Instanceof=74;
	public const int IntType=75;
	public const int Integer=76;
	public const int IntegerType=77;
	public const int Interface=78;
	public const int Isset=79;
	public const int List=80;
	public const int LogicalAnd=81;
	public const int LogicalOr=82;
	public const int Minus=83;
	public const int MultilineComment=84;
	public const int Namespace=85;
	public const int New=86;
	public const int Null=87;
	public const int OP=88;
	public const int ObjectType=89;
	public const int Octal=90;
	public const int OpenCurlyBracket=91;
	public const int OpenRoundBracket=92;
	public const int OpenSquareBracket=93;
	public const int Or=94;
	public const int Percent=95;
	public const int Pipe=96;
	public const int Plus=97;
	public const int Print=98;
	public const int Private=99;
	public const int Protected=100;
	public const int Public=101;
	public const int QuestionMark=102;
	public const int Real=103;
	public const int RealType=104;
	public const int Require=105;
	public const int RequireOnce=106;
	public const int Return=107;
	public const int SemiColon=108;
	public const int ShiftOperator=109;
	public const int SingleQuotedString=110;
	public const int SinglelineComment=111;
	public const int Static=112;
	public const int StringType=113;
	public const int SuppressWarnings=114;
	public const int Switch=115;
	public const int Throw=116;
	public const int Tilde=117;
	public const int True=118;
	public const int Try=119;
	public const int UnixComment=120;
	public const int UnquotedString=121;
	public const int UnquotedStringBody=122;
	public const int UnsetType=123;
	public const int Use=124;
	public const int Var=125;
	public const int VariableName=126;
	public const int While=127;
	public const int WhiteSpace=128;
	public const int Xor=129;
	public const int T__130=130;
	public const int T__131=131;

		public bool AllowShortOpenTag { get; set; }

		// Handle the first token, which will always be a BodyString.
		public override IToken NextToken(){
			//The following code was pulled out from base.NextToken()
			if (input.index() == 0) {
				try {
					state.token = null;
					state.channel = DefaultTokenChannel;
					state.tokenStartCharIndex = input.index();
					state.tokenStartCharPositionInLine = input.getCharPositionInLine();
					state.tokenStartLine = input.getLine();
					state.text = null;
					state.backtracking = 0;
					mBodyStringRest();
					state.type = BodyString;
					Emit();
					return state.token;
				} catch (NoViableAltException nva) {
					ReportError(nva);
					Recover(nva); // throw out current char and try again
				} catch (RecognitionException re) {
					ReportError(re);
					// match() routine has already called recover()
				}
			}
			return base.NextToken();
		}


	// delegates
	// delegators

	public PhpLexer()
	{
		OnCreated();
	}

	public PhpLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public PhpLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_Ampersand();
	partial void LeaveRule_Ampersand();

	// $ANTLR start "Ampersand"
	[GrammarRule("Ampersand")]
	private void mAmpersand()
	{
		EnterRule_Ampersand();
		EnterRule("Ampersand", 1);
		TraceIn("Ampersand", 1);
		try
		{
			int _type = Ampersand;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:43:11: ( '&' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:43:13: '&'
			{
			DebugLocation(43, 13);
			Match('&'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Ampersand", 1);
			LeaveRule("Ampersand", 1);
			LeaveRule_Ampersand();
		}
	}
	// $ANTLR end "Ampersand"

	partial void EnterRule_ArrayAssign();
	partial void LeaveRule_ArrayAssign();

	// $ANTLR start "ArrayAssign"
	[GrammarRule("ArrayAssign")]
	private void mArrayAssign()
	{
		EnterRule_ArrayAssign();
		EnterRule("ArrayAssign", 2);
		TraceIn("ArrayAssign", 2);
		try
		{
			int _type = ArrayAssign;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:44:13: ( '=>' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:44:15: '=>'
			{
			DebugLocation(44, 15);
			Match("=>"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ArrayAssign", 2);
			LeaveRule("ArrayAssign", 2);
			LeaveRule_ArrayAssign();
		}
	}
	// $ANTLR end "ArrayAssign"

	partial void EnterRule_Asterisk();
	partial void LeaveRule_Asterisk();

	// $ANTLR start "Asterisk"
	[GrammarRule("Asterisk")]
	private void mAsterisk()
	{
		EnterRule_Asterisk();
		EnterRule("Asterisk", 3);
		TraceIn("Asterisk", 3);
		try
		{
			int _type = Asterisk;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:45:10: ( '*' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:45:12: '*'
			{
			DebugLocation(45, 12);
			Match('*'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Asterisk", 3);
			LeaveRule("Asterisk", 3);
			LeaveRule_Asterisk();
		}
	}
	// $ANTLR end "Asterisk"

	partial void EnterRule_Bang();
	partial void LeaveRule_Bang();

	// $ANTLR start "Bang"
	[GrammarRule("Bang")]
	private void mBang()
	{
		EnterRule_Bang();
		EnterRule("Bang", 4);
		TraceIn("Bang", 4);
		try
		{
			int _type = Bang;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:46:6: ( '!' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:46:8: '!'
			{
			DebugLocation(46, 8);
			Match('!'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Bang", 4);
			LeaveRule("Bang", 4);
			LeaveRule_Bang();
		}
	}
	// $ANTLR end "Bang"

	partial void EnterRule_ClassMember();
	partial void LeaveRule_ClassMember();

	// $ANTLR start "ClassMember"
	[GrammarRule("ClassMember")]
	private void mClassMember()
	{
		EnterRule_ClassMember();
		EnterRule("ClassMember", 5);
		TraceIn("ClassMember", 5);
		try
		{
			int _type = ClassMember;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:47:13: ( '::' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:47:15: '::'
			{
			DebugLocation(47, 15);
			Match("::"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ClassMember", 5);
			LeaveRule("ClassMember", 5);
			LeaveRule_ClassMember();
		}
	}
	// $ANTLR end "ClassMember"

	partial void EnterRule_CloseCurlyBracket();
	partial void LeaveRule_CloseCurlyBracket();

	// $ANTLR start "CloseCurlyBracket"
	[GrammarRule("CloseCurlyBracket")]
	private void mCloseCurlyBracket()
	{
		EnterRule_CloseCurlyBracket();
		EnterRule("CloseCurlyBracket", 6);
		TraceIn("CloseCurlyBracket", 6);
		try
		{
			int _type = CloseCurlyBracket;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:48:19: ( '}' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:48:21: '}'
			{
			DebugLocation(48, 21);
			Match('}'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CloseCurlyBracket", 6);
			LeaveRule("CloseCurlyBracket", 6);
			LeaveRule_CloseCurlyBracket();
		}
	}
	// $ANTLR end "CloseCurlyBracket"

	partial void EnterRule_CloseRoundBracket();
	partial void LeaveRule_CloseRoundBracket();

	// $ANTLR start "CloseRoundBracket"
	[GrammarRule("CloseRoundBracket")]
	private void mCloseRoundBracket()
	{
		EnterRule_CloseRoundBracket();
		EnterRule("CloseRoundBracket", 7);
		TraceIn("CloseRoundBracket", 7);
		try
		{
			int _type = CloseRoundBracket;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:49:19: ( ')' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:49:21: ')'
			{
			DebugLocation(49, 21);
			Match(')'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CloseRoundBracket", 7);
			LeaveRule("CloseRoundBracket", 7);
			LeaveRule_CloseRoundBracket();
		}
	}
	// $ANTLR end "CloseRoundBracket"

	partial void EnterRule_CloseSquareBracket();
	partial void LeaveRule_CloseSquareBracket();

	// $ANTLR start "CloseSquareBracket"
	[GrammarRule("CloseSquareBracket")]
	private void mCloseSquareBracket()
	{
		EnterRule_CloseSquareBracket();
		EnterRule("CloseSquareBracket", 8);
		TraceIn("CloseSquareBracket", 8);
		try
		{
			int _type = CloseSquareBracket;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:50:20: ( ']' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:50:22: ']'
			{
			DebugLocation(50, 22);
			Match(']'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CloseSquareBracket", 8);
			LeaveRule("CloseSquareBracket", 8);
			LeaveRule_CloseSquareBracket();
		}
	}
	// $ANTLR end "CloseSquareBracket"

	partial void EnterRule_Colon();
	partial void LeaveRule_Colon();

	// $ANTLR start "Colon"
	[GrammarRule("Colon")]
	private void mColon()
	{
		EnterRule_Colon();
		EnterRule("Colon", 9);
		TraceIn("Colon", 9);
		try
		{
			int _type = Colon;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:51:7: ( ':' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:51:9: ':'
			{
			DebugLocation(51, 9);
			Match(':'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Colon", 9);
			LeaveRule("Colon", 9);
			LeaveRule_Colon();
		}
	}
	// $ANTLR end "Colon"

	partial void EnterRule_Comma();
	partial void LeaveRule_Comma();

	// $ANTLR start "Comma"
	[GrammarRule("Comma")]
	private void mComma()
	{
		EnterRule_Comma();
		EnterRule("Comma", 10);
		TraceIn("Comma", 10);
		try
		{
			int _type = Comma;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:52:7: ( ',' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:52:9: ','
			{
			DebugLocation(52, 9);
			Match(','); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Comma", 10);
			LeaveRule("Comma", 10);
			LeaveRule_Comma();
		}
	}
	// $ANTLR end "Comma"

	partial void EnterRule_Dot();
	partial void LeaveRule_Dot();

	// $ANTLR start "Dot"
	[GrammarRule("Dot")]
	private void mDot()
	{
		EnterRule_Dot();
		EnterRule("Dot", 11);
		TraceIn("Dot", 11);
		try
		{
			int _type = Dot;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:53:5: ( '.' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:53:7: '.'
			{
			DebugLocation(53, 7);
			Match('.'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Dot", 11);
			LeaveRule("Dot", 11);
			LeaveRule_Dot();
		}
	}
	// $ANTLR end "Dot"

	partial void EnterRule_Equals();
	partial void LeaveRule_Equals();

	// $ANTLR start "Equals"
	[GrammarRule("Equals")]
	private void mEquals()
	{
		EnterRule_Equals();
		EnterRule("Equals", 12);
		TraceIn("Equals", 12);
		try
		{
			int _type = Equals;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:54:8: ( '=' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:54:10: '='
			{
			DebugLocation(54, 10);
			Match('='); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Equals", 12);
			LeaveRule("Equals", 12);
			LeaveRule_Equals();
		}
	}
	// $ANTLR end "Equals"

	partial void EnterRule_Forwardslash();
	partial void LeaveRule_Forwardslash();

	// $ANTLR start "Forwardslash"
	[GrammarRule("Forwardslash")]
	private void mForwardslash()
	{
		EnterRule_Forwardslash();
		EnterRule("Forwardslash", 13);
		TraceIn("Forwardslash", 13);
		try
		{
			int _type = Forwardslash;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:55:14: ( '/' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:55:16: '/'
			{
			DebugLocation(55, 16);
			Match('/'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Forwardslash", 13);
			LeaveRule("Forwardslash", 13);
			LeaveRule_Forwardslash();
		}
	}
	// $ANTLR end "Forwardslash"

	partial void EnterRule_Hat();
	partial void LeaveRule_Hat();

	// $ANTLR start "Hat"
	[GrammarRule("Hat")]
	private void mHat()
	{
		EnterRule_Hat();
		EnterRule("Hat", 14);
		TraceIn("Hat", 14);
		try
		{
			int _type = Hat;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:56:5: ( '^' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:56:7: '^'
			{
			DebugLocation(56, 7);
			Match('^'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Hat", 14);
			LeaveRule("Hat", 14);
			LeaveRule_Hat();
		}
	}
	// $ANTLR end "Hat"

	partial void EnterRule_InstanceMember();
	partial void LeaveRule_InstanceMember();

	// $ANTLR start "InstanceMember"
	[GrammarRule("InstanceMember")]
	private void mInstanceMember()
	{
		EnterRule_InstanceMember();
		EnterRule("InstanceMember", 15);
		TraceIn("InstanceMember", 15);
		try
		{
			int _type = InstanceMember;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:57:16: ( '->' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:57:18: '->'
			{
			DebugLocation(57, 18);
			Match("->"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("InstanceMember", 15);
			LeaveRule("InstanceMember", 15);
			LeaveRule_InstanceMember();
		}
	}
	// $ANTLR end "InstanceMember"

	partial void EnterRule_LogicalAnd();
	partial void LeaveRule_LogicalAnd();

	// $ANTLR start "LogicalAnd"
	[GrammarRule("LogicalAnd")]
	private void mLogicalAnd()
	{
		EnterRule_LogicalAnd();
		EnterRule("LogicalAnd", 16);
		TraceIn("LogicalAnd", 16);
		try
		{
			int _type = LogicalAnd;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:58:12: ( '&&' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:58:14: '&&'
			{
			DebugLocation(58, 14);
			Match("&&"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LogicalAnd", 16);
			LeaveRule("LogicalAnd", 16);
			LeaveRule_LogicalAnd();
		}
	}
	// $ANTLR end "LogicalAnd"

	partial void EnterRule_LogicalOr();
	partial void LeaveRule_LogicalOr();

	// $ANTLR start "LogicalOr"
	[GrammarRule("LogicalOr")]
	private void mLogicalOr()
	{
		EnterRule_LogicalOr();
		EnterRule("LogicalOr", 17);
		TraceIn("LogicalOr", 17);
		try
		{
			int _type = LogicalOr;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:59:11: ( '||' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:59:13: '||'
			{
			DebugLocation(59, 13);
			Match("||"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LogicalOr", 17);
			LeaveRule("LogicalOr", 17);
			LeaveRule_LogicalOr();
		}
	}
	// $ANTLR end "LogicalOr"

	partial void EnterRule_Minus();
	partial void LeaveRule_Minus();

	// $ANTLR start "Minus"
	[GrammarRule("Minus")]
	private void mMinus()
	{
		EnterRule_Minus();
		EnterRule("Minus", 18);
		TraceIn("Minus", 18);
		try
		{
			int _type = Minus;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:60:7: ( '-' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:60:9: '-'
			{
			DebugLocation(60, 9);
			Match('-'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Minus", 18);
			LeaveRule("Minus", 18);
			LeaveRule_Minus();
		}
	}
	// $ANTLR end "Minus"

	partial void EnterRule_OpenCurlyBracket();
	partial void LeaveRule_OpenCurlyBracket();

	// $ANTLR start "OpenCurlyBracket"
	[GrammarRule("OpenCurlyBracket")]
	private void mOpenCurlyBracket()
	{
		EnterRule_OpenCurlyBracket();
		EnterRule("OpenCurlyBracket", 19);
		TraceIn("OpenCurlyBracket", 19);
		try
		{
			int _type = OpenCurlyBracket;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:61:18: ( '{' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:61:20: '{'
			{
			DebugLocation(61, 20);
			Match('{'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OpenCurlyBracket", 19);
			LeaveRule("OpenCurlyBracket", 19);
			LeaveRule_OpenCurlyBracket();
		}
	}
	// $ANTLR end "OpenCurlyBracket"

	partial void EnterRule_OpenRoundBracket();
	partial void LeaveRule_OpenRoundBracket();

	// $ANTLR start "OpenRoundBracket"
	[GrammarRule("OpenRoundBracket")]
	private void mOpenRoundBracket()
	{
		EnterRule_OpenRoundBracket();
		EnterRule("OpenRoundBracket", 20);
		TraceIn("OpenRoundBracket", 20);
		try
		{
			int _type = OpenRoundBracket;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:62:18: ( '(' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:62:20: '('
			{
			DebugLocation(62, 20);
			Match('('); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OpenRoundBracket", 20);
			LeaveRule("OpenRoundBracket", 20);
			LeaveRule_OpenRoundBracket();
		}
	}
	// $ANTLR end "OpenRoundBracket"

	partial void EnterRule_OpenSquareBracket();
	partial void LeaveRule_OpenSquareBracket();

	// $ANTLR start "OpenSquareBracket"
	[GrammarRule("OpenSquareBracket")]
	private void mOpenSquareBracket()
	{
		EnterRule_OpenSquareBracket();
		EnterRule("OpenSquareBracket", 21);
		TraceIn("OpenSquareBracket", 21);
		try
		{
			int _type = OpenSquareBracket;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:63:19: ( '[' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:63:21: '['
			{
			DebugLocation(63, 21);
			Match('['); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OpenSquareBracket", 21);
			LeaveRule("OpenSquareBracket", 21);
			LeaveRule_OpenSquareBracket();
		}
	}
	// $ANTLR end "OpenSquareBracket"

	partial void EnterRule_Percent();
	partial void LeaveRule_Percent();

	// $ANTLR start "Percent"
	[GrammarRule("Percent")]
	private void mPercent()
	{
		EnterRule_Percent();
		EnterRule("Percent", 22);
		TraceIn("Percent", 22);
		try
		{
			int _type = Percent;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:64:9: ( '%' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:64:11: '%'
			{
			DebugLocation(64, 11);
			Match('%'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Percent", 22);
			LeaveRule("Percent", 22);
			LeaveRule_Percent();
		}
	}
	// $ANTLR end "Percent"

	partial void EnterRule_Pipe();
	partial void LeaveRule_Pipe();

	// $ANTLR start "Pipe"
	[GrammarRule("Pipe")]
	private void mPipe()
	{
		EnterRule_Pipe();
		EnterRule("Pipe", 23);
		TraceIn("Pipe", 23);
		try
		{
			int _type = Pipe;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:65:6: ( '|' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:65:8: '|'
			{
			DebugLocation(65, 8);
			Match('|'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Pipe", 23);
			LeaveRule("Pipe", 23);
			LeaveRule_Pipe();
		}
	}
	// $ANTLR end "Pipe"

	partial void EnterRule_Plus();
	partial void LeaveRule_Plus();

	// $ANTLR start "Plus"
	[GrammarRule("Plus")]
	private void mPlus()
	{
		EnterRule_Plus();
		EnterRule("Plus", 24);
		TraceIn("Plus", 24);
		try
		{
			int _type = Plus;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:66:6: ( '+' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:66:8: '+'
			{
			DebugLocation(66, 8);
			Match('+'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Plus", 24);
			LeaveRule("Plus", 24);
			LeaveRule_Plus();
		}
	}
	// $ANTLR end "Plus"

	partial void EnterRule_QuestionMark();
	partial void LeaveRule_QuestionMark();

	// $ANTLR start "QuestionMark"
	[GrammarRule("QuestionMark")]
	private void mQuestionMark()
	{
		EnterRule_QuestionMark();
		EnterRule("QuestionMark", 25);
		TraceIn("QuestionMark", 25);
		try
		{
			int _type = QuestionMark;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:67:14: ( '?' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:67:16: '?'
			{
			DebugLocation(67, 16);
			Match('?'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("QuestionMark", 25);
			LeaveRule("QuestionMark", 25);
			LeaveRule_QuestionMark();
		}
	}
	// $ANTLR end "QuestionMark"

	partial void EnterRule_SemiColon();
	partial void LeaveRule_SemiColon();

	// $ANTLR start "SemiColon"
	[GrammarRule("SemiColon")]
	private void mSemiColon()
	{
		EnterRule_SemiColon();
		EnterRule("SemiColon", 26);
		TraceIn("SemiColon", 26);
		try
		{
			int _type = SemiColon;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:68:11: ( ';' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:68:13: ';'
			{
			DebugLocation(68, 13);
			Match(';'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SemiColon", 26);
			LeaveRule("SemiColon", 26);
			LeaveRule_SemiColon();
		}
	}
	// $ANTLR end "SemiColon"

	partial void EnterRule_SuppressWarnings();
	partial void LeaveRule_SuppressWarnings();

	// $ANTLR start "SuppressWarnings"
	[GrammarRule("SuppressWarnings")]
	private void mSuppressWarnings()
	{
		EnterRule_SuppressWarnings();
		EnterRule("SuppressWarnings", 27);
		TraceIn("SuppressWarnings", 27);
		try
		{
			int _type = SuppressWarnings;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:69:18: ( '@' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:69:20: '@'
			{
			DebugLocation(69, 20);
			Match('@'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SuppressWarnings", 27);
			LeaveRule("SuppressWarnings", 27);
			LeaveRule_SuppressWarnings();
		}
	}
	// $ANTLR end "SuppressWarnings"

	partial void EnterRule_Tilde();
	partial void LeaveRule_Tilde();

	// $ANTLR start "Tilde"
	[GrammarRule("Tilde")]
	private void mTilde()
	{
		EnterRule_Tilde();
		EnterRule("Tilde", 28);
		TraceIn("Tilde", 28);
		try
		{
			int _type = Tilde;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:70:7: ( '~' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:70:9: '~'
			{
			DebugLocation(70, 9);
			Match('~'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Tilde", 28);
			LeaveRule("Tilde", 28);
			LeaveRule_Tilde();
		}
	}
	// $ANTLR end "Tilde"

	partial void EnterRule_T__130();
	partial void LeaveRule_T__130();

	// $ANTLR start "T__130"
	[GrammarRule("T__130")]
	private void mT__130()
	{
		EnterRule_T__130();
		EnterRule("T__130", 29);
		TraceIn("T__130", 29);
		try
		{
			int _type = T__130;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:71:8: ( '$' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:71:10: '$'
			{
			DebugLocation(71, 10);
			Match('$'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__130", 29);
			LeaveRule("T__130", 29);
			LeaveRule_T__130();
		}
	}
	// $ANTLR end "T__130"

	partial void EnterRule_T__131();
	partial void LeaveRule_T__131();

	// $ANTLR start "T__131"
	[GrammarRule("T__131")]
	private void mT__131()
	{
		EnterRule_T__131();
		EnterRule("T__131", 30);
		TraceIn("T__131", 30);
		try
		{
			int _type = T__131;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:72:8: ( '\\\\' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:72:10: '\\\\'
			{
			DebugLocation(72, 10);
			Match('\\'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__131", 30);
			LeaveRule("T__131", 30);
			LeaveRule_T__131();
		}
	}
	// $ANTLR end "T__131"

	partial void EnterRule_OP();
	partial void LeaveRule_OP();

	// $ANTLR start "OP"
	[GrammarRule("OP")]
	private void mOP()
	{
		EnterRule_OP();
		EnterRule("OP", 31);
		TraceIn("OP", 31);
		try
		{
			int _type = OP;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:383:4: ( ':=' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:383:6: ':='
			{
			DebugLocation(383, 6);
			Match(":="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OP", 31);
			LeaveRule("OP", 31);
			LeaveRule_OP();
		}
	}
	// $ANTLR end "OP"

	partial void EnterRule_BodyString();
	partial void LeaveRule_BodyString();

	// $ANTLR start "BodyString"
	[GrammarRule("BodyString")]
	private void mBodyString()
	{
		EnterRule_BodyString();
		EnterRule("BodyString", 32);
		TraceIn("BodyString", 32);
		try
		{
			int _type = BodyString;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:527:2: ( '?>' BodyStringRest )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:527:4: '?>' BodyStringRest
			{
			DebugLocation(527, 4);
			Match("?>"); if (state.failed) return;

			DebugLocation(527, 9);
			mBodyStringRest(); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BodyString", 32);
			LeaveRule("BodyString", 32);
			LeaveRule_BodyString();
		}
	}
	// $ANTLR end "BodyString"

	partial void EnterRule_BodyStringRest();
	partial void LeaveRule_BodyStringRest();

	// $ANTLR start "BodyStringRest"
	[GrammarRule("BodyStringRest")]
	private void mBodyStringRest()
	{
		EnterRule_BodyStringRest();
		EnterRule("BodyStringRest", 33);
		TraceIn("BodyStringRest", 33);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:533:2: ({...}? => BodyStringRestShortTag | ( ( '<' ~ '?' )=> '<' |~ '<' )* ( '<?' ( 'php' | '=' ) )? )
			int alt4=2;
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1=='<'))
			{
				int LA4_2 = input.LA(2);

				if (((AllowShortOpenTag)))
				{
					alt4 = 1;
				}
				else if ((true))
				{
					alt4 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 4, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if (((LA4_1>='\u0000' && LA4_1<=';')||(LA4_1>='=' && LA4_1<='\uFFFF')))
			{
				int LA4_2 = input.LA(2);

				if (((AllowShortOpenTag)))
				{
					alt4 = 1;
				}
				else if ((true))
				{
					alt4 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 4, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if (((AllowShortOpenTag)))
			{
				alt4 = 1;
			}
			else if ((true))
			{
				alt4 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:533:4: {...}? => BodyStringRestShortTag
				{
				DebugLocation(533, 4);
				if (!((AllowShortOpenTag)))
				{
					if (state.backtracking>0) {state.failed=true; return;}
					throw new FailedPredicateException(input, "BodyStringRest", "AllowShortOpenTag");
				}
				DebugLocation(533, 27);
				mBodyStringRestShortTag(); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:534:4: ( ( '<' ~ '?' )=> '<' |~ '<' )* ( '<?' ( 'php' | '=' ) )?
				{
				DebugLocation(534, 4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:534:4: ( ( '<' ~ '?' )=> '<' |~ '<' )*
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=3;
					try { DebugEnterDecision(1, false);
					int LA1_1 = input.LA(1);

					if ((LA1_1=='<'))
					{
						int LA1_2 = input.LA(2);

						if ((LA1_2=='?'))
						{
							int LA1_3 = input.LA(3);

							if ((LA1_3=='p'))
							{
								int LA1_4 = input.LA(4);

								if ((LA1_4=='h'))
								{
									int LA1_5 = input.LA(5);

									if ((LA1_5=='p'))
									{
										int LA1_6 = input.LA(6);

										if ((EvaluatePredicate(synpred1_Php_fragment)))
										{
											alt1 = 1;
										}


									}
									else if ((LA1_5=='<') && (EvaluatePredicate(synpred1_Php_fragment)))
									{
										alt1 = 1;
									}
									else if (((LA1_5>='\u0000' && LA1_5<=';')||(LA1_5>='=' && LA1_5<='o')||(LA1_5>='q' && LA1_5<='\uFFFF')) && (EvaluatePredicate(synpred1_Php_fragment)))
									{
										alt1 = 1;
									}

									else
									{
										alt1 = 1;
									}


								}
								else if ((LA1_4=='<') && (EvaluatePredicate(synpred1_Php_fragment)))
								{
									alt1 = 1;
								}
								else if (((LA1_4>='\u0000' && LA1_4<=';')||(LA1_4>='=' && LA1_4<='g')||(LA1_4>='i' && LA1_4<='\uFFFF')) && (EvaluatePredicate(synpred1_Php_fragment)))
								{
									alt1 = 1;
								}

								else
								{
									alt1 = 1;
								}


							}
							else if ((LA1_3=='='))
							{
								int LA1_4 = input.LA(4);

								if ((EvaluatePredicate(synpred1_Php_fragment)))
								{
									alt1 = 1;
								}


							}
							else if ((LA1_3=='<') && (EvaluatePredicate(synpred1_Php_fragment)))
							{
								alt1 = 1;
							}
							else if (((LA1_3>='\u0000' && LA1_3<=';')||(LA1_3>='>' && LA1_3<='o')||(LA1_3>='q' && LA1_3<='\uFFFF')) && (EvaluatePredicate(synpred1_Php_fragment)))
							{
								alt1 = 1;
							}

							else
							{
								alt1 = 1;
							}


						}
						else if ((LA1_2=='<') && (EvaluatePredicate(synpred1_Php_fragment)))
						{
							alt1 = 1;
						}
						else if (((LA1_2>='\u0000' && LA1_2<=';')||(LA1_2>='=' && LA1_2<='>')||(LA1_2>='@' && LA1_2<='\uFFFF')) && (EvaluatePredicate(synpred1_Php_fragment)))
						{
							alt1 = 1;
						}

						else
						{
							alt1 = 1;
						}


					}
					else if (((LA1_1>='\u0000' && LA1_1<=';')||(LA1_1>='=' && LA1_1<='\uFFFF')))
					{
						alt1 = 2;
					}


					} finally { DebugExitDecision(1); }
					switch ( alt1 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:534:5: ( '<' ~ '?' )=> '<'
						{
						DebugLocation(534, 19);
						Match('<'); if (state.failed) return;

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:534:25: ~ '<'
						{
						DebugLocation(534, 25);
						input.Consume();
						state.failed=false;

						}
						break;

					default:
						goto loop1;
					}
				}

				loop1:
					;

				} finally { DebugExitSubRule(1); }

				DebugLocation(534, 33);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:534:33: ( '<?' ( 'php' | '=' ) )?
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1=='<'))
				{
					alt3 = 1;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:534:34: '<?' ( 'php' | '=' )
					{
					DebugLocation(534, 34);
					Match("<?"); if (state.failed) return;

					DebugLocation(534, 39);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:534:39: ( 'php' | '=' )
					int alt2=2;
					try { DebugEnterSubRule(2);
					try { DebugEnterDecision(2, false);
					int LA2_1 = input.LA(1);

					if ((LA2_1=='p'))
					{
						alt2 = 1;
					}
					else if ((LA2_1=='='))
					{
						alt2 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(2); }
					switch (alt2)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:534:40: 'php'
						{
						DebugLocation(534, 40);
						Match("php"); if (state.failed) return;


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:534:46: '='
						{
						DebugLocation(534, 46);
						Match('='); if (state.failed) return;

						}
						break;

					}
					} finally { DebugExitSubRule(2); }


					}
					break;

				}
				} finally { DebugExitSubRule(3); }


				}
				break;

			}
		}
		finally
		{
			TraceOut("BodyStringRest", 33);
			LeaveRule("BodyStringRest", 33);
			LeaveRule_BodyStringRest();
		}
	}
	// $ANTLR end "BodyStringRest"

	partial void EnterRule_BodyStringRestShortTag();
	partial void LeaveRule_BodyStringRestShortTag();

	// $ANTLR start "BodyStringRestShortTag"
	[GrammarRule("BodyStringRestShortTag")]
	private void mBodyStringRestShortTag()
	{
		EnterRule_BodyStringRestShortTag();
		EnterRule("BodyStringRestShortTag", 34);
		TraceIn("BodyStringRestShortTag", 34);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:539:2: ( ( ( '<' ~ '?' )=> '<' |~ '<' )* ( '<?' ( 'php' | '=' )? )? )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:539:4: ( ( '<' ~ '?' )=> '<' |~ '<' )* ( '<?' ( 'php' | '=' )? )?
			{
			DebugLocation(539, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:539:4: ( ( '<' ~ '?' )=> '<' |~ '<' )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=3;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1=='<'))
				{
					int LA5_2 = input.LA(2);

					if ((LA5_2=='?'))
					{
						int LA5_3 = input.LA(3);

						if ((EvaluatePredicate(synpred2_Php_fragment)))
						{
							alt5 = 1;
						}


					}
					else if ((LA5_2=='<') && (EvaluatePredicate(synpred2_Php_fragment)))
					{
						alt5 = 1;
					}
					else if (((LA5_2>='\u0000' && LA5_2<=';')||(LA5_2>='=' && LA5_2<='>')||(LA5_2>='@' && LA5_2<='\uFFFF')) && (EvaluatePredicate(synpred2_Php_fragment)))
					{
						alt5 = 1;
					}

					else
					{
						alt5 = 1;
					}


				}
				else if (((LA5_1>='\u0000' && LA5_1<=';')||(LA5_1>='=' && LA5_1<='\uFFFF')))
				{
					alt5 = 2;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:539:5: ( '<' ~ '?' )=> '<'
					{
					DebugLocation(539, 19);
					Match('<'); if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:539:25: ~ '<'
					{
					DebugLocation(539, 25);
					input.Consume();
					state.failed=false;

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(539, 33);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:539:33: ( '<?' ( 'php' | '=' )? )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_1 = input.LA(1);

			if ((LA7_1=='<'))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:539:34: '<?' ( 'php' | '=' )?
				{
				DebugLocation(539, 34);
				Match("<?"); if (state.failed) return;

				DebugLocation(539, 39);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:539:39: ( 'php' | '=' )?
				int alt6=3;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1=='p'))
				{
					alt6 = 1;
				}
				else if ((LA6_1=='='))
				{
					alt6 = 2;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:539:40: 'php'
					{
					DebugLocation(539, 40);
					Match("php"); if (state.failed) return;


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:539:46: '='
					{
					DebugLocation(539, 46);
					Match('='); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(6); }


				}
				break;

			}
			} finally { DebugExitSubRule(7); }


			}

		}
		finally
		{
			TraceOut("BodyStringRestShortTag", 34);
			LeaveRule("BodyStringRestShortTag", 34);
			LeaveRule_BodyStringRestShortTag();
		}
	}
	// $ANTLR end "BodyStringRestShortTag"

	partial void EnterRule_MultilineComment();
	partial void LeaveRule_MultilineComment();

	// $ANTLR start "MultilineComment"
	[GrammarRule("MultilineComment")]
	private void mMultilineComment()
	{
		EnterRule_MultilineComment();
		EnterRule("MultilineComment", 35);
		TraceIn("MultilineComment", 35);
		try
		{
			int _type = MultilineComment;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:544:2: ( '/*' ( ( '*' ~ '/' )=> '*' |~ '*' )* '*/' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:544:4: '/*' ( ( '*' ~ '/' )=> '*' |~ '*' )* '*/'
			{
			DebugLocation(544, 4);
			Match("/*"); if (state.failed) return;

			DebugLocation(544, 9);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:544:9: ( ( '*' ~ '/' )=> '*' |~ '*' )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=3;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1=='*'))
				{
					int LA8_2 = input.LA(2);

					if ((LA8_2=='/'))
					{
						int LA8_3 = input.LA(3);

						if ((LA8_3=='*') && (EvaluatePredicate(synpred3_Php_fragment)))
						{
							alt8 = 1;
						}
						else if (((LA8_3>='\u0000' && LA8_3<=')')||(LA8_3>='+' && LA8_3<='\uFFFF')) && (EvaluatePredicate(synpred3_Php_fragment)))
						{
							alt8 = 1;
						}


					}
					else if ((LA8_2=='*') && (EvaluatePredicate(synpred3_Php_fragment)))
					{
						alt8 = 1;
					}
					else if (((LA8_2>='\u0000' && LA8_2<=')')||(LA8_2>='+' && LA8_2<='.')||(LA8_2>='0' && LA8_2<='\uFFFF')) && (EvaluatePredicate(synpred3_Php_fragment)))
					{
						alt8 = 1;
					}


				}
				else if (((LA8_1>='\u0000' && LA8_1<=')')||(LA8_1>='+' && LA8_1<='\uFFFF')))
				{
					alt8 = 2;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:544:10: ( '*' ~ '/' )=> '*'
					{
					DebugLocation(544, 23);
					Match('*'); if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:544:29: ~ '*'
					{
					DebugLocation(544, 29);
					input.Consume();
					state.failed=false;

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(544, 37);
			Match("*/"); if (state.failed) return;

			DebugLocation(544, 42);
			if (state.backtracking == 0)
			{
				_channel=Hidden;
			}

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MultilineComment", 35);
			LeaveRule("MultilineComment", 35);
			LeaveRule_MultilineComment();
		}
	}
	// $ANTLR end "MultilineComment"

	partial void EnterRule_SinglelineComment();
	partial void LeaveRule_SinglelineComment();

	// $ANTLR start "SinglelineComment"
	[GrammarRule("SinglelineComment")]
	private void mSinglelineComment()
	{
		EnterRule_SinglelineComment();
		EnterRule("SinglelineComment", 36);
		TraceIn("SinglelineComment", 36);
		try
		{
			int _type = SinglelineComment;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:548:2: ( '//' ( ( '?' ~ '>' )=> '?' |~ ( '\\n' | '?' ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:548:4: '//' ( ( '?' ~ '>' )=> '?' |~ ( '\\n' | '?' ) )*
			{
			DebugLocation(548, 4);
			Match("//"); if (state.failed) return;

			DebugLocation(548, 10);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:548:10: ( ( '?' ~ '>' )=> '?' |~ ( '\\n' | '?' ) )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=3;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1=='?') && (EvaluatePredicate(synpred4_Php_fragment)))
				{
					alt9 = 1;
				}
				else if (((LA9_1>='\u0000' && LA9_1<='\t')||(LA9_1>='\u000B' && LA9_1<='>')||(LA9_1>='@' && LA9_1<='\uFFFF')))
				{
					alt9 = 2;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:548:11: ( '?' ~ '>' )=> '?'
					{
					DebugLocation(548, 23);
					Match('?'); if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:548:29: ~ ( '\\n' | '?' )
					{
					DebugLocation(548, 29);
					input.Consume();
					state.failed=false;

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(548, 43);
			if (state.backtracking == 0)
			{
				_channel=Hidden;
			}

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SinglelineComment", 36);
			LeaveRule("SinglelineComment", 36);
			LeaveRule_SinglelineComment();
		}
	}
	// $ANTLR end "SinglelineComment"

	partial void EnterRule_UnixComment();
	partial void LeaveRule_UnixComment();

	// $ANTLR start "UnixComment"
	[GrammarRule("UnixComment")]
	private void mUnixComment()
	{
		EnterRule_UnixComment();
		EnterRule("UnixComment", 37);
		TraceIn("UnixComment", 37);
		try
		{
			int _type = UnixComment;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:552:2: ( '#' ( ( '?' ~ '>' )=> '?' |~ ( '\\n' | '?' ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:552:4: '#' ( ( '?' ~ '>' )=> '?' |~ ( '\\n' | '?' ) )*
			{
			DebugLocation(552, 4);
			Match('#'); if (state.failed) return;
			DebugLocation(552, 8);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:552:8: ( ( '?' ~ '>' )=> '?' |~ ( '\\n' | '?' ) )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=3;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1=='?') && (EvaluatePredicate(synpred5_Php_fragment)))
				{
					alt10 = 1;
				}
				else if (((LA10_1>='\u0000' && LA10_1<='\t')||(LA10_1>='\u000B' && LA10_1<='>')||(LA10_1>='@' && LA10_1<='\uFFFF')))
				{
					alt10 = 2;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:552:9: ( '?' ~ '>' )=> '?'
					{
					DebugLocation(552, 21);
					Match('?'); if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:552:27: ~ ( '\\n' | '?' )
					{
					DebugLocation(552, 27);
					input.Consume();
					state.failed=false;

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(552, 41);
			if (state.backtracking == 0)
			{
				_channel=Hidden;
			}

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("UnixComment", 37);
			LeaveRule("UnixComment", 37);
			LeaveRule_UnixComment();
		}
	}
	// $ANTLR end "UnixComment"

	partial void EnterRule_IntType();
	partial void LeaveRule_IntType();

	// $ANTLR start "IntType"
	[GrammarRule("IntType")]
	private void mIntType()
	{
		EnterRule_IntType();
		EnterRule("IntType", 38);
		TraceIn("IntType", 38);
		try
		{
			int _type = IntType;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:556:2: ( ( 'i' | 'I' ) ( 'n' | 'N' ) ( 't' | 'T' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:556:4: ( 'i' | 'I' ) ( 'n' | 'N' ) ( 't' | 'T' )
			{
			DebugLocation(556, 4);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(556, 13);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(556, 22);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IntType", 38);
			LeaveRule("IntType", 38);
			LeaveRule_IntType();
		}
	}
	// $ANTLR end "IntType"

	partial void EnterRule_IntegerType();
	partial void LeaveRule_IntegerType();

	// $ANTLR start "IntegerType"
	[GrammarRule("IntegerType")]
	private void mIntegerType()
	{
		EnterRule_IntegerType();
		EnterRule("IntegerType", 39);
		TraceIn("IntegerType", 39);
		try
		{
			int _type = IntegerType;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:560:2: ( ( 'i' | 'I' ) ( 'n' | 'N' ) ( 't' | 'T' ) ( 'e' | 'E' ) ( 'g' | 'G' ) ( 'e' | 'E' ) ( 'r' | 'R' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:560:4: ( 'i' | 'I' ) ( 'n' | 'N' ) ( 't' | 'T' ) ( 'e' | 'E' ) ( 'g' | 'G' ) ( 'e' | 'E' ) ( 'r' | 'R' )
			{
			DebugLocation(560, 4);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(560, 13);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(560, 22);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(560, 31);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(560, 40);
			if (input.LA(1)=='G'||input.LA(1)=='g')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(560, 49);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(560, 58);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IntegerType", 39);
			LeaveRule("IntegerType", 39);
			LeaveRule_IntegerType();
		}
	}
	// $ANTLR end "IntegerType"

	partial void EnterRule_BoolType();
	partial void LeaveRule_BoolType();

	// $ANTLR start "BoolType"
	[GrammarRule("BoolType")]
	private void mBoolType()
	{
		EnterRule_BoolType();
		EnterRule("BoolType", 40);
		TraceIn("BoolType", 40);
		try
		{
			int _type = BoolType;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:564:2: ( ( 'b' | 'B' ) ( 'o' | 'O' ) ( 'o' | 'O' ) ( 'l' | 'L' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:564:4: ( 'b' | 'B' ) ( 'o' | 'O' ) ( 'o' | 'O' ) ( 'l' | 'L' )
			{
			DebugLocation(564, 4);
			if (input.LA(1)=='B'||input.LA(1)=='b')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(564, 13);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(564, 22);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(564, 31);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BoolType", 40);
			LeaveRule("BoolType", 40);
			LeaveRule_BoolType();
		}
	}
	// $ANTLR end "BoolType"

	partial void EnterRule_BooleanType();
	partial void LeaveRule_BooleanType();

	// $ANTLR start "BooleanType"
	[GrammarRule("BooleanType")]
	private void mBooleanType()
	{
		EnterRule_BooleanType();
		EnterRule("BooleanType", 41);
		TraceIn("BooleanType", 41);
		try
		{
			int _type = BooleanType;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:568:2: ( ( 'b' | 'B' ) ( 'o' | 'O' ) ( 'o' | 'O' ) ( 'l' | 'L' ) ( 'e' | 'E' ) ( 'a' | 'A' ) ( 'n' | 'N' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:568:4: ( 'b' | 'B' ) ( 'o' | 'O' ) ( 'o' | 'O' ) ( 'l' | 'L' ) ( 'e' | 'E' ) ( 'a' | 'A' ) ( 'n' | 'N' )
			{
			DebugLocation(568, 4);
			if (input.LA(1)=='B'||input.LA(1)=='b')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(568, 13);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(568, 22);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(568, 31);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(568, 40);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(568, 49);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(568, 58);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BooleanType", 41);
			LeaveRule("BooleanType", 41);
			LeaveRule_BooleanType();
		}
	}
	// $ANTLR end "BooleanType"

	partial void EnterRule_FloatType();
	partial void LeaveRule_FloatType();

	// $ANTLR start "FloatType"
	[GrammarRule("FloatType")]
	private void mFloatType()
	{
		EnterRule_FloatType();
		EnterRule("FloatType", 42);
		TraceIn("FloatType", 42);
		try
		{
			int _type = FloatType;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:572:2: ( ( 'f' | 'F' ) ( 'l' | 'L' ) ( 'o' | 'O' ) ( 'a' | 'A' ) ( 't' | 'T' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:572:4: ( 'f' | 'F' ) ( 'l' | 'L' ) ( 'o' | 'O' ) ( 'a' | 'A' ) ( 't' | 'T' )
			{
			DebugLocation(572, 4);
			if (input.LA(1)=='F'||input.LA(1)=='f')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(572, 13);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(572, 22);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(572, 31);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(572, 40);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FloatType", 42);
			LeaveRule("FloatType", 42);
			LeaveRule_FloatType();
		}
	}
	// $ANTLR end "FloatType"

	partial void EnterRule_DoubleType();
	partial void LeaveRule_DoubleType();

	// $ANTLR start "DoubleType"
	[GrammarRule("DoubleType")]
	private void mDoubleType()
	{
		EnterRule_DoubleType();
		EnterRule("DoubleType", 43);
		TraceIn("DoubleType", 43);
		try
		{
			int _type = DoubleType;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:576:2: ( ( 'd' | 'D' ) ( 'o' | 'O' ) ( 'u' | 'U' ) ( 'b' | 'B' ) ( 'l' | 'L' ) ( 'e' | 'E' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:576:4: ( 'd' | 'D' ) ( 'o' | 'O' ) ( 'u' | 'U' ) ( 'b' | 'B' ) ( 'l' | 'L' ) ( 'e' | 'E' )
			{
			DebugLocation(576, 4);
			if (input.LA(1)=='D'||input.LA(1)=='d')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(576, 13);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(576, 22);
			if (input.LA(1)=='U'||input.LA(1)=='u')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(576, 31);
			if (input.LA(1)=='B'||input.LA(1)=='b')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(576, 40);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(576, 49);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DoubleType", 43);
			LeaveRule("DoubleType", 43);
			LeaveRule_DoubleType();
		}
	}
	// $ANTLR end "DoubleType"

	partial void EnterRule_RealType();
	partial void LeaveRule_RealType();

	// $ANTLR start "RealType"
	[GrammarRule("RealType")]
	private void mRealType()
	{
		EnterRule_RealType();
		EnterRule("RealType", 44);
		TraceIn("RealType", 44);
		try
		{
			int _type = RealType;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:580:2: ( ( 'r' | 'R' ) ( 'e' | 'E' ) ( 'a' | 'A' ) ( 'l' | 'L' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:580:4: ( 'r' | 'R' ) ( 'e' | 'E' ) ( 'a' | 'A' ) ( 'l' | 'L' )
			{
			DebugLocation(580, 4);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(580, 13);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(580, 22);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(580, 31);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RealType", 44);
			LeaveRule("RealType", 44);
			LeaveRule_RealType();
		}
	}
	// $ANTLR end "RealType"

	partial void EnterRule_StringType();
	partial void LeaveRule_StringType();

	// $ANTLR start "StringType"
	[GrammarRule("StringType")]
	private void mStringType()
	{
		EnterRule_StringType();
		EnterRule("StringType", 45);
		TraceIn("StringType", 45);
		try
		{
			int _type = StringType;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:584:2: ( ( 's' | 'S' ) ( 't' | 'T' ) ( 'r' | 'R' ) ( 'i' | 'I' ) ( 'n' | 'N' ) ( 'g' | 'G' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:584:4: ( 's' | 'S' ) ( 't' | 'T' ) ( 'r' | 'R' ) ( 'i' | 'I' ) ( 'n' | 'N' ) ( 'g' | 'G' )
			{
			DebugLocation(584, 4);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(584, 13);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(584, 22);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(584, 31);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(584, 40);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(584, 49);
			if (input.LA(1)=='G'||input.LA(1)=='g')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("StringType", 45);
			LeaveRule("StringType", 45);
			LeaveRule_StringType();
		}
	}
	// $ANTLR end "StringType"

	partial void EnterRule_ObjectType();
	partial void LeaveRule_ObjectType();

	// $ANTLR start "ObjectType"
	[GrammarRule("ObjectType")]
	private void mObjectType()
	{
		EnterRule_ObjectType();
		EnterRule("ObjectType", 46);
		TraceIn("ObjectType", 46);
		try
		{
			int _type = ObjectType;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:588:2: ( ( 'o' | 'O' ) ( 'b' | 'B' ) ( 'j' | 'J' ) ( 'e' | 'E' ) ( 'c' | 'C' ) ( 't' | 'T' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:588:4: ( 'o' | 'O' ) ( 'b' | 'B' ) ( 'j' | 'J' ) ( 'e' | 'E' ) ( 'c' | 'C' ) ( 't' | 'T' )
			{
			DebugLocation(588, 4);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(588, 13);
			if (input.LA(1)=='B'||input.LA(1)=='b')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(588, 22);
			if (input.LA(1)=='J'||input.LA(1)=='j')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(588, 31);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(588, 40);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(588, 49);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ObjectType", 46);
			LeaveRule("ObjectType", 46);
			LeaveRule_ObjectType();
		}
	}
	// $ANTLR end "ObjectType"

	partial void EnterRule_UnsetType();
	partial void LeaveRule_UnsetType();

	// $ANTLR start "UnsetType"
	[GrammarRule("UnsetType")]
	private void mUnsetType()
	{
		EnterRule_UnsetType();
		EnterRule("UnsetType", 47);
		TraceIn("UnsetType", 47);
		try
		{
			int _type = UnsetType;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:592:2: ( ( 'u' | 'U' ) ( 'n' | 'N' ) ( 's' | 'S' ) ( 'e' | 'E' ) ( 't' | 'T' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:592:4: ( 'u' | 'U' ) ( 'n' | 'N' ) ( 's' | 'S' ) ( 'e' | 'E' ) ( 't' | 'T' )
			{
			DebugLocation(592, 4);
			if (input.LA(1)=='U'||input.LA(1)=='u')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(592, 13);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(592, 22);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(592, 31);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(592, 40);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("UnsetType", 47);
			LeaveRule("UnsetType", 47);
			LeaveRule_UnsetType();
		}
	}
	// $ANTLR end "UnsetType"

	partial void EnterRule_ArrayType();
	partial void LeaveRule_ArrayType();

	// $ANTLR start "ArrayType"
	[GrammarRule("ArrayType")]
	private void mArrayType()
	{
		EnterRule_ArrayType();
		EnterRule("ArrayType", 48);
		TraceIn("ArrayType", 48);
		try
		{
			int _type = ArrayType;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:596:2: ( ( 'a' | 'A' ) ( 'r' | 'R' ) ( 'r' | 'R' ) ( 'a' | 'A' ) ( 'y' | 'Y' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:596:4: ( 'a' | 'A' ) ( 'r' | 'R' ) ( 'r' | 'R' ) ( 'a' | 'A' ) ( 'y' | 'Y' )
			{
			DebugLocation(596, 4);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(596, 13);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(596, 22);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(596, 31);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(596, 40);
			if (input.LA(1)=='Y'||input.LA(1)=='y')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ArrayType", 48);
			LeaveRule("ArrayType", 48);
			LeaveRule_ArrayType();
		}
	}
	// $ANTLR end "ArrayType"

	partial void EnterRule_New();
	partial void LeaveRule_New();

	// $ANTLR start "New"
	[GrammarRule("New")]
	private void mNew()
	{
		EnterRule_New();
		EnterRule("New", 49);
		TraceIn("New", 49);
		try
		{
			int _type = New;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:599:5: ( ( 'n' | 'N' ) ( 'e' | 'E' ) ( 'w' | 'W' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:599:7: ( 'n' | 'N' ) ( 'e' | 'E' ) ( 'w' | 'W' )
			{
			DebugLocation(599, 7);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(599, 16);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(599, 25);
			if (input.LA(1)=='W'||input.LA(1)=='w')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("New", 49);
			LeaveRule("New", 49);
			LeaveRule_New();
		}
	}
	// $ANTLR end "New"

	partial void EnterRule_Clone();
	partial void LeaveRule_Clone();

	// $ANTLR start "Clone"
	[GrammarRule("Clone")]
	private void mClone()
	{
		EnterRule_Clone();
		EnterRule("Clone", 50);
		TraceIn("Clone", 50);
		try
		{
			int _type = Clone;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:600:7: ( ( 'c' | 'C' ) ( 'l' | 'L' ) ( 'o' | 'O' ) ( 'n' | 'N' ) ( 'e' | 'E' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:600:9: ( 'c' | 'C' ) ( 'l' | 'L' ) ( 'o' | 'O' ) ( 'n' | 'N' ) ( 'e' | 'E' )
			{
			DebugLocation(600, 9);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(600, 18);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(600, 27);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(600, 36);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(600, 45);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Clone", 50);
			LeaveRule("Clone", 50);
			LeaveRule_Clone();
		}
	}
	// $ANTLR end "Clone"

	partial void EnterRule_Echo();
	partial void LeaveRule_Echo();

	// $ANTLR start "Echo"
	[GrammarRule("Echo")]
	private void mEcho()
	{
		EnterRule_Echo();
		EnterRule("Echo", 51);
		TraceIn("Echo", 51);
		try
		{
			int _type = Echo;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:601:6: ( ( 'e' | 'E' ) ( 'c' | 'C' ) ( 'h' | 'H' ) ( 'o' | 'O' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:601:8: ( 'e' | 'E' ) ( 'c' | 'C' ) ( 'h' | 'H' ) ( 'o' | 'O' )
			{
			DebugLocation(601, 8);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(601, 17);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(601, 26);
			if (input.LA(1)=='H'||input.LA(1)=='h')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(601, 35);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Echo", 51);
			LeaveRule("Echo", 51);
			LeaveRule_Echo();
		}
	}
	// $ANTLR end "Echo"

	partial void EnterRule_Print();
	partial void LeaveRule_Print();

	// $ANTLR start "Print"
	[GrammarRule("Print")]
	private void mPrint()
	{
		EnterRule_Print();
		EnterRule("Print", 52);
		TraceIn("Print", 52);
		try
		{
			int _type = Print;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:602:7: ( ( 'p' | 'P' ) ( 'r' | 'R' ) ( 'i' | 'I' ) ( 'n' | 'N' ) ( 't' | 'T' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:602:9: ( 'p' | 'P' ) ( 'r' | 'R' ) ( 'i' | 'I' ) ( 'n' | 'N' ) ( 't' | 'T' )
			{
			DebugLocation(602, 9);
			if (input.LA(1)=='P'||input.LA(1)=='p')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(602, 18);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(602, 27);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(602, 36);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(602, 45);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Print", 52);
			LeaveRule("Print", 52);
			LeaveRule_Print();
		}
	}
	// $ANTLR end "Print"

	partial void EnterRule_If();
	partial void LeaveRule_If();

	// $ANTLR start "If"
	[GrammarRule("If")]
	private void mIf()
	{
		EnterRule_If();
		EnterRule("If", 53);
		TraceIn("If", 53);
		try
		{
			int _type = If;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:603:4: ( ( 'i' | 'I' ) ( 'f' | 'F' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:603:6: ( 'i' | 'I' ) ( 'f' | 'F' )
			{
			DebugLocation(603, 6);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(603, 15);
			if (input.LA(1)=='F'||input.LA(1)=='f')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("If", 53);
			LeaveRule("If", 53);
			LeaveRule_If();
		}
	}
	// $ANTLR end "If"

	partial void EnterRule_Else();
	partial void LeaveRule_Else();

	// $ANTLR start "Else"
	[GrammarRule("Else")]
	private void mElse()
	{
		EnterRule_Else();
		EnterRule("Else", 54);
		TraceIn("Else", 54);
		try
		{
			int _type = Else;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:604:6: ( ( 'e' | 'E' ) ( 'l' | 'L' ) ( 's' | 'S' ) ( 'e' | 'E' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:604:8: ( 'e' | 'E' ) ( 'l' | 'L' ) ( 's' | 'S' ) ( 'e' | 'E' )
			{
			DebugLocation(604, 8);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(604, 17);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(604, 26);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(604, 35);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Else", 54);
			LeaveRule("Else", 54);
			LeaveRule_Else();
		}
	}
	// $ANTLR end "Else"

	partial void EnterRule_ElseIf();
	partial void LeaveRule_ElseIf();

	// $ANTLR start "ElseIf"
	[GrammarRule("ElseIf")]
	private void mElseIf()
	{
		EnterRule_ElseIf();
		EnterRule("ElseIf", 55);
		TraceIn("ElseIf", 55);
		try
		{
			int _type = ElseIf;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:605:8: ( ( 'e' | 'E' ) ( 'l' | 'L' ) ( 's' | 'S' ) ( 'e' | 'E' ) ( 'i' | 'I' ) ( 'f' | 'F' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:605:10: ( 'e' | 'E' ) ( 'l' | 'L' ) ( 's' | 'S' ) ( 'e' | 'E' ) ( 'i' | 'I' ) ( 'f' | 'F' )
			{
			DebugLocation(605, 10);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(605, 19);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(605, 28);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(605, 37);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(605, 46);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(605, 55);
			if (input.LA(1)=='F'||input.LA(1)=='f')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ElseIf", 55);
			LeaveRule("ElseIf", 55);
			LeaveRule_ElseIf();
		}
	}
	// $ANTLR end "ElseIf"

	partial void EnterRule_For();
	partial void LeaveRule_For();

	// $ANTLR start "For"
	[GrammarRule("For")]
	private void mFor()
	{
		EnterRule_For();
		EnterRule("For", 56);
		TraceIn("For", 56);
		try
		{
			int _type = For;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:606:5: ( ( 'f' | 'F' ) ( 'o' | 'O' ) ( 'r' | 'R' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:606:7: ( 'f' | 'F' ) ( 'o' | 'O' ) ( 'r' | 'R' )
			{
			DebugLocation(606, 7);
			if (input.LA(1)=='F'||input.LA(1)=='f')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(606, 16);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(606, 25);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("For", 56);
			LeaveRule("For", 56);
			LeaveRule_For();
		}
	}
	// $ANTLR end "For"

	partial void EnterRule_Foreach();
	partial void LeaveRule_Foreach();

	// $ANTLR start "Foreach"
	[GrammarRule("Foreach")]
	private void mForeach()
	{
		EnterRule_Foreach();
		EnterRule("Foreach", 57);
		TraceIn("Foreach", 57);
		try
		{
			int _type = Foreach;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:607:9: ( ( 'f' | 'F' ) ( 'o' | 'O' ) ( 'r' | 'R' ) ( 'e' | 'E' ) ( 'a' | 'A' ) ( 'c' | 'C' ) ( 'h' | 'H' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:607:11: ( 'f' | 'F' ) ( 'o' | 'O' ) ( 'r' | 'R' ) ( 'e' | 'E' ) ( 'a' | 'A' ) ( 'c' | 'C' ) ( 'h' | 'H' )
			{
			DebugLocation(607, 11);
			if (input.LA(1)=='F'||input.LA(1)=='f')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(607, 20);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(607, 29);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(607, 38);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(607, 47);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(607, 56);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(607, 65);
			if (input.LA(1)=='H'||input.LA(1)=='h')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Foreach", 57);
			LeaveRule("Foreach", 57);
			LeaveRule_Foreach();
		}
	}
	// $ANTLR end "Foreach"

	partial void EnterRule_While();
	partial void LeaveRule_While();

	// $ANTLR start "While"
	[GrammarRule("While")]
	private void mWhile()
	{
		EnterRule_While();
		EnterRule("While", 58);
		TraceIn("While", 58);
		try
		{
			int _type = While;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:608:7: ( ( 'w' | 'W' ) ( 'h' | 'H' ) ( 'i' | 'I' ) ( 'l' | 'L' ) ( 'e' | 'E' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:608:9: ( 'w' | 'W' ) ( 'h' | 'H' ) ( 'i' | 'I' ) ( 'l' | 'L' ) ( 'e' | 'E' )
			{
			DebugLocation(608, 9);
			if (input.LA(1)=='W'||input.LA(1)=='w')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(608, 18);
			if (input.LA(1)=='H'||input.LA(1)=='h')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(608, 27);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(608, 36);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(608, 45);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("While", 58);
			LeaveRule("While", 58);
			LeaveRule_While();
		}
	}
	// $ANTLR end "While"

	partial void EnterRule_Do();
	partial void LeaveRule_Do();

	// $ANTLR start "Do"
	[GrammarRule("Do")]
	private void mDo()
	{
		EnterRule_Do();
		EnterRule("Do", 59);
		TraceIn("Do", 59);
		try
		{
			int _type = Do;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:609:4: ( ( 'd' | 'D' ) ( 'o' | 'O' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:609:6: ( 'd' | 'D' ) ( 'o' | 'O' )
			{
			DebugLocation(609, 6);
			if (input.LA(1)=='D'||input.LA(1)=='d')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(609, 15);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Do", 59);
			LeaveRule("Do", 59);
			LeaveRule_Do();
		}
	}
	// $ANTLR end "Do"

	partial void EnterRule_Try();
	partial void LeaveRule_Try();

	// $ANTLR start "Try"
	[GrammarRule("Try")]
	private void mTry()
	{
		EnterRule_Try();
		EnterRule("Try", 60);
		TraceIn("Try", 60);
		try
		{
			int _type = Try;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:610:5: ( ( 't' | 'T' ) ( 'r' | 'R' ) ( 'y' | 'Y' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:610:7: ( 't' | 'T' ) ( 'r' | 'R' ) ( 'y' | 'Y' )
			{
			DebugLocation(610, 7);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(610, 16);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(610, 25);
			if (input.LA(1)=='Y'||input.LA(1)=='y')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Try", 60);
			LeaveRule("Try", 60);
			LeaveRule_Try();
		}
	}
	// $ANTLR end "Try"

	partial void EnterRule_Catch();
	partial void LeaveRule_Catch();

	// $ANTLR start "Catch"
	[GrammarRule("Catch")]
	private void mCatch()
	{
		EnterRule_Catch();
		EnterRule("Catch", 61);
		TraceIn("Catch", 61);
		try
		{
			int _type = Catch;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:611:7: ( ( 'c' | 'C' ) ( 'a' | 'A' ) ( 't' | 'T' ) ( 'c' | 'C' ) ( 'h' | 'H' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:611:9: ( 'c' | 'C' ) ( 'a' | 'A' ) ( 't' | 'T' ) ( 'c' | 'C' ) ( 'h' | 'H' )
			{
			DebugLocation(611, 9);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(611, 18);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(611, 27);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(611, 36);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(611, 45);
			if (input.LA(1)=='H'||input.LA(1)=='h')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Catch", 61);
			LeaveRule("Catch", 61);
			LeaveRule_Catch();
		}
	}
	// $ANTLR end "Catch"

	partial void EnterRule_Finally();
	partial void LeaveRule_Finally();

	// $ANTLR start "Finally"
	[GrammarRule("Finally")]
	private void mFinally()
	{
		EnterRule_Finally();
		EnterRule("Finally", 62);
		TraceIn("Finally", 62);
		try
		{
			int _type = Finally;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:612:9: ( ( 'f' | 'F' ) ( 'i' | 'I' ) ( 'n' | 'N' ) ( 'a' | 'A' ) ( 'l' | 'L' ) ( 'l' | 'L' ) ( 'y' | 'Y' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:612:11: ( 'f' | 'F' ) ( 'i' | 'I' ) ( 'n' | 'N' ) ( 'a' | 'A' ) ( 'l' | 'L' ) ( 'l' | 'L' ) ( 'y' | 'Y' )
			{
			DebugLocation(612, 11);
			if (input.LA(1)=='F'||input.LA(1)=='f')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(612, 20);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(612, 29);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(612, 38);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(612, 47);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(612, 56);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(612, 65);
			if (input.LA(1)=='Y'||input.LA(1)=='y')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Finally", 62);
			LeaveRule("Finally", 62);
			LeaveRule_Finally();
		}
	}
	// $ANTLR end "Finally"

	partial void EnterRule_Switch();
	partial void LeaveRule_Switch();

	// $ANTLR start "Switch"
	[GrammarRule("Switch")]
	private void mSwitch()
	{
		EnterRule_Switch();
		EnterRule("Switch", 63);
		TraceIn("Switch", 63);
		try
		{
			int _type = Switch;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:613:8: ( ( 's' | 'S' ) ( 'w' | 'W' ) ( 'i' | 'I' ) ( 't' | 'T' ) ( 'c' | 'C' ) ( 'h' | 'H' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:613:10: ( 's' | 'S' ) ( 'w' | 'W' ) ( 'i' | 'I' ) ( 't' | 'T' ) ( 'c' | 'C' ) ( 'h' | 'H' )
			{
			DebugLocation(613, 10);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(613, 19);
			if (input.LA(1)=='W'||input.LA(1)=='w')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(613, 28);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(613, 37);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(613, 46);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(613, 55);
			if (input.LA(1)=='H'||input.LA(1)=='h')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Switch", 63);
			LeaveRule("Switch", 63);
			LeaveRule_Switch();
		}
	}
	// $ANTLR end "Switch"

	partial void EnterRule_Case();
	partial void LeaveRule_Case();

	// $ANTLR start "Case"
	[GrammarRule("Case")]
	private void mCase()
	{
		EnterRule_Case();
		EnterRule("Case", 64);
		TraceIn("Case", 64);
		try
		{
			int _type = Case;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:614:6: ( ( 'c' | 'C' ) ( 'a' | 'A' ) ( 's' | 'S' ) ( 'e' | 'E' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:614:8: ( 'c' | 'C' ) ( 'a' | 'A' ) ( 's' | 'S' ) ( 'e' | 'E' )
			{
			DebugLocation(614, 8);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(614, 17);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(614, 26);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(614, 35);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Case", 64);
			LeaveRule("Case", 64);
			LeaveRule_Case();
		}
	}
	// $ANTLR end "Case"

	partial void EnterRule_Default();
	partial void LeaveRule_Default();

	// $ANTLR start "Default"
	[GrammarRule("Default")]
	private void mDefault()
	{
		EnterRule_Default();
		EnterRule("Default", 65);
		TraceIn("Default", 65);
		try
		{
			int _type = Default;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:615:9: ( ( 'd' | 'D' ) ( 'e' | 'E' ) ( 'f' | 'F' ) ( 'a' | 'A' ) ( 'u' | 'U' ) ( 'l' | 'L' ) ( 't' | 'T' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:615:11: ( 'd' | 'D' ) ( 'e' | 'E' ) ( 'f' | 'F' ) ( 'a' | 'A' ) ( 'u' | 'U' ) ( 'l' | 'L' ) ( 't' | 'T' )
			{
			DebugLocation(615, 11);
			if (input.LA(1)=='D'||input.LA(1)=='d')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(615, 20);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(615, 29);
			if (input.LA(1)=='F'||input.LA(1)=='f')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(615, 38);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(615, 47);
			if (input.LA(1)=='U'||input.LA(1)=='u')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(615, 56);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(615, 65);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Default", 65);
			LeaveRule("Default", 65);
			LeaveRule_Default();
		}
	}
	// $ANTLR end "Default"

	partial void EnterRule_Namespace();
	partial void LeaveRule_Namespace();

	// $ANTLR start "Namespace"
	[GrammarRule("Namespace")]
	private void mNamespace()
	{
		EnterRule_Namespace();
		EnterRule("Namespace", 66);
		TraceIn("Namespace", 66);
		try
		{
			int _type = Namespace;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:616:11: ( ( 'n' | 'N' ) ( 'a' | 'A' ) ( 'm' | 'M' ) ( 'e' | 'E' ) ( 's' | 'S' ) ( 'p' | 'P' ) ( 'a' | 'A' ) ( 'c' | 'C' ) ( 'e' | 'E' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:616:13: ( 'n' | 'N' ) ( 'a' | 'A' ) ( 'm' | 'M' ) ( 'e' | 'E' ) ( 's' | 'S' ) ( 'p' | 'P' ) ( 'a' | 'A' ) ( 'c' | 'C' ) ( 'e' | 'E' )
			{
			DebugLocation(616, 13);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(616, 22);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(616, 31);
			if (input.LA(1)=='M'||input.LA(1)=='m')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(616, 40);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(616, 49);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(616, 58);
			if (input.LA(1)=='P'||input.LA(1)=='p')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(616, 67);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(616, 76);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(616, 85);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Namespace", 66);
			LeaveRule("Namespace", 66);
			LeaveRule_Namespace();
		}
	}
	// $ANTLR end "Namespace"

	partial void EnterRule_Function();
	partial void LeaveRule_Function();

	// $ANTLR start "Function"
	[GrammarRule("Function")]
	private void mFunction()
	{
		EnterRule_Function();
		EnterRule("Function", 67);
		TraceIn("Function", 67);
		try
		{
			int _type = Function;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:617:10: ( ( 'f' | 'F' ) ( 'u' | 'U' ) ( 'n' | 'N' ) ( 'c' | 'C' ) ( 't' | 'T' ) ( 'i' | 'I' ) ( 'o' | 'O' ) ( 'n' | 'N' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:617:12: ( 'f' | 'F' ) ( 'u' | 'U' ) ( 'n' | 'N' ) ( 'c' | 'C' ) ( 't' | 'T' ) ( 'i' | 'I' ) ( 'o' | 'O' ) ( 'n' | 'N' )
			{
			DebugLocation(617, 12);
			if (input.LA(1)=='F'||input.LA(1)=='f')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(617, 21);
			if (input.LA(1)=='U'||input.LA(1)=='u')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(617, 30);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(617, 39);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(617, 48);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(617, 57);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(617, 66);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(617, 75);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Function", 67);
			LeaveRule("Function", 67);
			LeaveRule_Function();
		}
	}
	// $ANTLR end "Function"

	partial void EnterRule_Break();
	partial void LeaveRule_Break();

	// $ANTLR start "Break"
	[GrammarRule("Break")]
	private void mBreak()
	{
		EnterRule_Break();
		EnterRule("Break", 68);
		TraceIn("Break", 68);
		try
		{
			int _type = Break;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:618:7: ( ( 'b' | 'B' ) ( 'r' | 'R' ) ( 'e' | 'E' ) ( 'a' | 'A' ) ( 'k' | 'K' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:618:9: ( 'b' | 'B' ) ( 'r' | 'R' ) ( 'e' | 'E' ) ( 'a' | 'A' ) ( 'k' | 'K' )
			{
			DebugLocation(618, 9);
			if (input.LA(1)=='B'||input.LA(1)=='b')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(618, 18);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(618, 27);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(618, 36);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(618, 45);
			if (input.LA(1)=='K'||input.LA(1)=='k')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Break", 68);
			LeaveRule("Break", 68);
			LeaveRule_Break();
		}
	}
	// $ANTLR end "Break"

	partial void EnterRule_Continue();
	partial void LeaveRule_Continue();

	// $ANTLR start "Continue"
	[GrammarRule("Continue")]
	private void mContinue()
	{
		EnterRule_Continue();
		EnterRule("Continue", 69);
		TraceIn("Continue", 69);
		try
		{
			int _type = Continue;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:619:10: ( ( 'c' | 'C' ) ( 'o' | 'O' ) ( 'n' | 'N' ) ( 't' | 'T' ) ( 'i' | 'I' ) ( 'n' | 'N' ) ( 'u' | 'U' ) ( 'e' | 'E' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:619:12: ( 'c' | 'C' ) ( 'o' | 'O' ) ( 'n' | 'N' ) ( 't' | 'T' ) ( 'i' | 'I' ) ( 'n' | 'N' ) ( 'u' | 'U' ) ( 'e' | 'E' )
			{
			DebugLocation(619, 12);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(619, 21);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(619, 30);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(619, 39);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(619, 48);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(619, 57);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(619, 66);
			if (input.LA(1)=='U'||input.LA(1)=='u')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(619, 75);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Continue", 69);
			LeaveRule("Continue", 69);
			LeaveRule_Continue();
		}
	}
	// $ANTLR end "Continue"

	partial void EnterRule_Goto();
	partial void LeaveRule_Goto();

	// $ANTLR start "Goto"
	[GrammarRule("Goto")]
	private void mGoto()
	{
		EnterRule_Goto();
		EnterRule("Goto", 70);
		TraceIn("Goto", 70);
		try
		{
			int _type = Goto;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:620:6: ( ( 'g' | 'G' ) ( 'o' | 'O' ) ( 't' | 'T' ) ( 'o' | 'O' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:620:8: ( 'g' | 'G' ) ( 'o' | 'O' ) ( 't' | 'T' ) ( 'o' | 'O' )
			{
			DebugLocation(620, 8);
			if (input.LA(1)=='G'||input.LA(1)=='g')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(620, 17);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(620, 26);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(620, 35);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Goto", 70);
			LeaveRule("Goto", 70);
			LeaveRule_Goto();
		}
	}
	// $ANTLR end "Goto"

	partial void EnterRule_Return();
	partial void LeaveRule_Return();

	// $ANTLR start "Return"
	[GrammarRule("Return")]
	private void mReturn()
	{
		EnterRule_Return();
		EnterRule("Return", 71);
		TraceIn("Return", 71);
		try
		{
			int _type = Return;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:621:8: ( ( 'r' | 'R' ) ( 'e' | 'E' ) ( 't' | 'T' ) ( 'u' | 'U' ) ( 'r' | 'R' ) ( 'n' | 'N' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:621:10: ( 'r' | 'R' ) ( 'e' | 'E' ) ( 't' | 'T' ) ( 'u' | 'U' ) ( 'r' | 'R' ) ( 'n' | 'N' )
			{
			DebugLocation(621, 10);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(621, 19);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(621, 28);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(621, 37);
			if (input.LA(1)=='U'||input.LA(1)=='u')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(621, 46);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(621, 55);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Return", 71);
			LeaveRule("Return", 71);
			LeaveRule_Return();
		}
	}
	// $ANTLR end "Return"

	partial void EnterRule_Throw();
	partial void LeaveRule_Throw();

	// $ANTLR start "Throw"
	[GrammarRule("Throw")]
	private void mThrow()
	{
		EnterRule_Throw();
		EnterRule("Throw", 72);
		TraceIn("Throw", 72);
		try
		{
			int _type = Throw;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:622:7: ( ( 't' | 'T' ) ( 'h' | 'H' ) ( 'r' | 'R' ) ( 'o' | 'O' ) ( 'w' | 'W' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:622:9: ( 't' | 'T' ) ( 'h' | 'H' ) ( 'r' | 'R' ) ( 'o' | 'O' ) ( 'w' | 'W' )
			{
			DebugLocation(622, 9);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(622, 18);
			if (input.LA(1)=='H'||input.LA(1)=='h')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(622, 27);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(622, 36);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(622, 45);
			if (input.LA(1)=='W'||input.LA(1)=='w')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Throw", 72);
			LeaveRule("Throw", 72);
			LeaveRule_Throw();
		}
	}
	// $ANTLR end "Throw"

	partial void EnterRule_Global();
	partial void LeaveRule_Global();

	// $ANTLR start "Global"
	[GrammarRule("Global")]
	private void mGlobal()
	{
		EnterRule_Global();
		EnterRule("Global", 73);
		TraceIn("Global", 73);
		try
		{
			int _type = Global;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:623:8: ( ( 'g' | 'G' ) ( 'l' | 'L' ) ( 'o' | 'O' ) ( 'b' | 'B' ) ( 'a' | 'A' ) ( 'l' | 'L' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:623:10: ( 'g' | 'G' ) ( 'l' | 'L' ) ( 'o' | 'O' ) ( 'b' | 'B' ) ( 'a' | 'A' ) ( 'l' | 'L' )
			{
			DebugLocation(623, 10);
			if (input.LA(1)=='G'||input.LA(1)=='g')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(623, 19);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(623, 28);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(623, 37);
			if (input.LA(1)=='B'||input.LA(1)=='b')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(623, 46);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(623, 55);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Global", 73);
			LeaveRule("Global", 73);
			LeaveRule_Global();
		}
	}
	// $ANTLR end "Global"

	partial void EnterRule_Static();
	partial void LeaveRule_Static();

	// $ANTLR start "Static"
	[GrammarRule("Static")]
	private void mStatic()
	{
		EnterRule_Static();
		EnterRule("Static", 74);
		TraceIn("Static", 74);
		try
		{
			int _type = Static;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:624:8: ( ( 's' | 'S' ) ( 't' | 'T' ) ( 'a' | 'A' ) ( 't' | 'T' ) ( 'i' | 'I' ) ( 'c' | 'C' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:624:10: ( 's' | 'S' ) ( 't' | 'T' ) ( 'a' | 'A' ) ( 't' | 'T' ) ( 'i' | 'I' ) ( 'c' | 'C' )
			{
			DebugLocation(624, 10);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(624, 19);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(624, 28);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(624, 37);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(624, 46);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(624, 55);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Static", 74);
			LeaveRule("Static", 74);
			LeaveRule_Static();
		}
	}
	// $ANTLR end "Static"

	partial void EnterRule_And();
	partial void LeaveRule_And();

	// $ANTLR start "And"
	[GrammarRule("And")]
	private void mAnd()
	{
		EnterRule_And();
		EnterRule("And", 75);
		TraceIn("And", 75);
		try
		{
			int _type = And;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:625:5: ( ( 'a' | 'A' ) ( 'n' | 'N' ) ( 'd' | 'D' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:625:7: ( 'a' | 'A' ) ( 'n' | 'N' ) ( 'd' | 'D' )
			{
			DebugLocation(625, 7);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(625, 16);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(625, 25);
			if (input.LA(1)=='D'||input.LA(1)=='d')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("And", 75);
			LeaveRule("And", 75);
			LeaveRule_And();
		}
	}
	// $ANTLR end "And"

	partial void EnterRule_Or();
	partial void LeaveRule_Or();

	// $ANTLR start "Or"
	[GrammarRule("Or")]
	private void mOr()
	{
		EnterRule_Or();
		EnterRule("Or", 76);
		TraceIn("Or", 76);
		try
		{
			int _type = Or;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:626:4: ( ( 'o' | 'O' ) ( 'r' | 'R' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:626:6: ( 'o' | 'O' ) ( 'r' | 'R' )
			{
			DebugLocation(626, 6);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(626, 15);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Or", 76);
			LeaveRule("Or", 76);
			LeaveRule_Or();
		}
	}
	// $ANTLR end "Or"

	partial void EnterRule_Xor();
	partial void LeaveRule_Xor();

	// $ANTLR start "Xor"
	[GrammarRule("Xor")]
	private void mXor()
	{
		EnterRule_Xor();
		EnterRule("Xor", 77);
		TraceIn("Xor", 77);
		try
		{
			int _type = Xor;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:627:5: ( ( 'x' | 'X' ) ( 'o' | 'O' ) ( 'r' | 'R' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:627:7: ( 'x' | 'X' ) ( 'o' | 'O' ) ( 'r' | 'R' )
			{
			DebugLocation(627, 7);
			if (input.LA(1)=='X'||input.LA(1)=='x')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(627, 16);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(627, 25);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Xor", 77);
			LeaveRule("Xor", 77);
			LeaveRule_Xor();
		}
	}
	// $ANTLR end "Xor"

	partial void EnterRule_Instanceof();
	partial void LeaveRule_Instanceof();

	// $ANTLR start "Instanceof"
	[GrammarRule("Instanceof")]
	private void mInstanceof()
	{
		EnterRule_Instanceof();
		EnterRule("Instanceof", 78);
		TraceIn("Instanceof", 78);
		try
		{
			int _type = Instanceof;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:628:12: ( ( 'i' | 'I' ) ( 'n' | 'N' ) ( 's' | 'S' ) ( 't' | 'T' ) ( 'a' | 'A' ) ( 'n' | 'N' ) ( 'c' | 'C' ) ( 'e' | 'E' ) ( 'o' | 'O' ) ( 'f' | 'F' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:628:14: ( 'i' | 'I' ) ( 'n' | 'N' ) ( 's' | 'S' ) ( 't' | 'T' ) ( 'a' | 'A' ) ( 'n' | 'N' ) ( 'c' | 'C' ) ( 'e' | 'E' ) ( 'o' | 'O' ) ( 'f' | 'F' )
			{
			DebugLocation(628, 14);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(628, 23);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(628, 32);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(628, 41);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(628, 50);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(628, 59);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(628, 68);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(628, 77);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(628, 86);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(628, 95);
			if (input.LA(1)=='F'||input.LA(1)=='f')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Instanceof", 78);
			LeaveRule("Instanceof", 78);
			LeaveRule_Instanceof();
		}
	}
	// $ANTLR end "Instanceof"

	partial void EnterRule_Null();
	partial void LeaveRule_Null();

	// $ANTLR start "Null"
	[GrammarRule("Null")]
	private void mNull()
	{
		EnterRule_Null();
		EnterRule("Null", 79);
		TraceIn("Null", 79);
		try
		{
			int _type = Null;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:629:6: ( ( 'n' | 'N' ) ( 'u' | 'U' ) ( 'l' | 'L' ) ( 'l' | 'L' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:629:8: ( 'n' | 'N' ) ( 'u' | 'U' ) ( 'l' | 'L' ) ( 'l' | 'L' )
			{
			DebugLocation(629, 8);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(629, 17);
			if (input.LA(1)=='U'||input.LA(1)=='u')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(629, 26);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(629, 35);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Null", 79);
			LeaveRule("Null", 79);
			LeaveRule_Null();
		}
	}
	// $ANTLR end "Null"

	partial void EnterRule_List();
	partial void LeaveRule_List();

	// $ANTLR start "List"
	[GrammarRule("List")]
	private void mList()
	{
		EnterRule_List();
		EnterRule("List", 80);
		TraceIn("List", 80);
		try
		{
			int _type = List;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:630:6: ( ( 'l' | 'L' ) ( 'i' | 'I' ) ( 's' | 'S' ) ( 't' | 'T' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:630:8: ( 'l' | 'L' ) ( 'i' | 'I' ) ( 's' | 'S' ) ( 't' | 'T' )
			{
			DebugLocation(630, 8);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(630, 17);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(630, 26);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(630, 35);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("List", 80);
			LeaveRule("List", 80);
			LeaveRule_List();
		}
	}
	// $ANTLR end "List"

	partial void EnterRule_Class();
	partial void LeaveRule_Class();

	// $ANTLR start "Class"
	[GrammarRule("Class")]
	private void mClass()
	{
		EnterRule_Class();
		EnterRule("Class", 81);
		TraceIn("Class", 81);
		try
		{
			int _type = Class;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:631:7: ( ( 'c' | 'C' ) ( 'l' | 'L' ) ( 'a' | 'A' ) ( 's' | 'S' ) ( 's' | 'S' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:631:9: ( 'c' | 'C' ) ( 'l' | 'L' ) ( 'a' | 'A' ) ( 's' | 'S' ) ( 's' | 'S' )
			{
			DebugLocation(631, 9);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(631, 18);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(631, 27);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(631, 36);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(631, 45);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Class", 81);
			LeaveRule("Class", 81);
			LeaveRule_Class();
		}
	}
	// $ANTLR end "Class"

	partial void EnterRule_Interface();
	partial void LeaveRule_Interface();

	// $ANTLR start "Interface"
	[GrammarRule("Interface")]
	private void mInterface()
	{
		EnterRule_Interface();
		EnterRule("Interface", 82);
		TraceIn("Interface", 82);
		try
		{
			int _type = Interface;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:632:11: ( ( 'i' | 'I' ) ( 'n' | 'N' ) ( 't' | 'T' ) ( 'e' | 'E' ) ( 'r' | 'R' ) ( 'f' | 'F' ) ( 'a' | 'A' ) ( 'c' | 'C' ) ( 'e' | 'E' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:632:13: ( 'i' | 'I' ) ( 'n' | 'N' ) ( 't' | 'T' ) ( 'e' | 'E' ) ( 'r' | 'R' ) ( 'f' | 'F' ) ( 'a' | 'A' ) ( 'c' | 'C' ) ( 'e' | 'E' )
			{
			DebugLocation(632, 13);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(632, 22);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(632, 31);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(632, 40);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(632, 49);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(632, 58);
			if (input.LA(1)=='F'||input.LA(1)=='f')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(632, 67);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(632, 76);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(632, 85);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Interface", 82);
			LeaveRule("Interface", 82);
			LeaveRule_Interface();
		}
	}
	// $ANTLR end "Interface"

	partial void EnterRule_Extends();
	partial void LeaveRule_Extends();

	// $ANTLR start "Extends"
	[GrammarRule("Extends")]
	private void mExtends()
	{
		EnterRule_Extends();
		EnterRule("Extends", 83);
		TraceIn("Extends", 83);
		try
		{
			int _type = Extends;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:633:9: ( ( 'e' | 'E' ) ( 'x' | 'X' ) ( 't' | 'T' ) ( 'e' | 'E' ) ( 'n' | 'N' ) ( 'd' | 'D' ) ( 's' | 'S' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:633:11: ( 'e' | 'E' ) ( 'x' | 'X' ) ( 't' | 'T' ) ( 'e' | 'E' ) ( 'n' | 'N' ) ( 'd' | 'D' ) ( 's' | 'S' )
			{
			DebugLocation(633, 11);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(633, 20);
			if (input.LA(1)=='X'||input.LA(1)=='x')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(633, 29);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(633, 38);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(633, 47);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(633, 56);
			if (input.LA(1)=='D'||input.LA(1)=='d')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(633, 65);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Extends", 83);
			LeaveRule("Extends", 83);
			LeaveRule_Extends();
		}
	}
	// $ANTLR end "Extends"

	partial void EnterRule_Implements();
	partial void LeaveRule_Implements();

	// $ANTLR start "Implements"
	[GrammarRule("Implements")]
	private void mImplements()
	{
		EnterRule_Implements();
		EnterRule("Implements", 84);
		TraceIn("Implements", 84);
		try
		{
			int _type = Implements;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:634:12: ( ( 'i' | 'I' ) ( 'm' | 'M' ) ( 'p' | 'P' ) ( 'l' | 'L' ) ( 'e' | 'E' ) ( 'm' | 'M' ) ( 'e' | 'E' ) ( 'n' | 'N' ) ( 't' | 'T' ) ( 's' | 'S' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:634:14: ( 'i' | 'I' ) ( 'm' | 'M' ) ( 'p' | 'P' ) ( 'l' | 'L' ) ( 'e' | 'E' ) ( 'm' | 'M' ) ( 'e' | 'E' ) ( 'n' | 'N' ) ( 't' | 'T' ) ( 's' | 'S' )
			{
			DebugLocation(634, 14);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(634, 23);
			if (input.LA(1)=='M'||input.LA(1)=='m')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(634, 32);
			if (input.LA(1)=='P'||input.LA(1)=='p')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(634, 41);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(634, 50);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(634, 59);
			if (input.LA(1)=='M'||input.LA(1)=='m')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(634, 68);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(634, 77);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(634, 86);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(634, 95);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Implements", 84);
			LeaveRule("Implements", 84);
			LeaveRule_Implements();
		}
	}
	// $ANTLR end "Implements"

	partial void EnterRule_Final();
	partial void LeaveRule_Final();

	// $ANTLR start "Final"
	[GrammarRule("Final")]
	private void mFinal()
	{
		EnterRule_Final();
		EnterRule("Final", 85);
		TraceIn("Final", 85);
		try
		{
			int _type = Final;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:635:7: ( ( 'f' | 'F' ) ( 'i' | 'I' ) ( 'n' | 'N' ) ( 'a' | 'A' ) ( 'l' | 'L' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:635:9: ( 'f' | 'F' ) ( 'i' | 'I' ) ( 'n' | 'N' ) ( 'a' | 'A' ) ( 'l' | 'L' )
			{
			DebugLocation(635, 9);
			if (input.LA(1)=='F'||input.LA(1)=='f')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(635, 18);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(635, 27);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(635, 36);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(635, 45);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Final", 85);
			LeaveRule("Final", 85);
			LeaveRule_Final();
		}
	}
	// $ANTLR end "Final"

	partial void EnterRule_Abstract();
	partial void LeaveRule_Abstract();

	// $ANTLR start "Abstract"
	[GrammarRule("Abstract")]
	private void mAbstract()
	{
		EnterRule_Abstract();
		EnterRule("Abstract", 86);
		TraceIn("Abstract", 86);
		try
		{
			int _type = Abstract;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:636:10: ( ( 'a' | 'A' ) ( 'b' | 'B' ) ( 's' | 'S' ) ( 't' | 'T' ) ( 'r' | 'R' ) ( 'a' | 'A' ) ( 'c' | 'C' ) ( 't' | 'T' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:636:12: ( 'a' | 'A' ) ( 'b' | 'B' ) ( 's' | 'S' ) ( 't' | 'T' ) ( 'r' | 'R' ) ( 'a' | 'A' ) ( 'c' | 'C' ) ( 't' | 'T' )
			{
			DebugLocation(636, 12);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(636, 21);
			if (input.LA(1)=='B'||input.LA(1)=='b')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(636, 30);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(636, 39);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(636, 48);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(636, 57);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(636, 66);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(636, 75);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Abstract", 86);
			LeaveRule("Abstract", 86);
			LeaveRule_Abstract();
		}
	}
	// $ANTLR end "Abstract"

	partial void EnterRule_Var();
	partial void LeaveRule_Var();

	// $ANTLR start "Var"
	[GrammarRule("Var")]
	private void mVar()
	{
		EnterRule_Var();
		EnterRule("Var", 87);
		TraceIn("Var", 87);
		try
		{
			int _type = Var;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:637:5: ( ( 'v' | 'V' ) ( 'a' | 'A' ) ( 'r' | 'R' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:637:7: ( 'v' | 'V' ) ( 'a' | 'A' ) ( 'r' | 'R' )
			{
			DebugLocation(637, 7);
			if (input.LA(1)=='V'||input.LA(1)=='v')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(637, 16);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(637, 25);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Var", 87);
			LeaveRule("Var", 87);
			LeaveRule_Var();
		}
	}
	// $ANTLR end "Var"

	partial void EnterRule_Const();
	partial void LeaveRule_Const();

	// $ANTLR start "Const"
	[GrammarRule("Const")]
	private void mConst()
	{
		EnterRule_Const();
		EnterRule("Const", 88);
		TraceIn("Const", 88);
		try
		{
			int _type = Const;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:638:7: ( ( 'c' | 'C' ) ( 'o' | 'O' ) ( 'n' | 'N' ) ( 's' | 'S' ) ( 't' | 'T' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:638:9: ( 'c' | 'C' ) ( 'o' | 'O' ) ( 'n' | 'N' ) ( 's' | 'S' ) ( 't' | 'T' )
			{
			DebugLocation(638, 9);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(638, 18);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(638, 27);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(638, 36);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(638, 45);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Const", 88);
			LeaveRule("Const", 88);
			LeaveRule_Const();
		}
	}
	// $ANTLR end "Const"

	partial void EnterRule_As();
	partial void LeaveRule_As();

	// $ANTLR start "As"
	[GrammarRule("As")]
	private void mAs()
	{
		EnterRule_As();
		EnterRule("As", 89);
		TraceIn("As", 89);
		try
		{
			int _type = As;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:639:4: ( ( 'a' | 'A' ) ( 's' | 'S' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:639:6: ( 'a' | 'A' ) ( 's' | 'S' )
			{
			DebugLocation(639, 6);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(639, 15);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("As", 89);
			LeaveRule("As", 89);
			LeaveRule_As();
		}
	}
	// $ANTLR end "As"

	partial void EnterRule_Use();
	partial void LeaveRule_Use();

	// $ANTLR start "Use"
	[GrammarRule("Use")]
	private void mUse()
	{
		EnterRule_Use();
		EnterRule("Use", 90);
		TraceIn("Use", 90);
		try
		{
			int _type = Use;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:640:5: ( ( 'u' | 'U' ) ( 's' | 'S' ) ( 'e' | 'E' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:640:7: ( 'u' | 'U' ) ( 's' | 'S' ) ( 'e' | 'E' )
			{
			DebugLocation(640, 7);
			if (input.LA(1)=='U'||input.LA(1)=='u')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(640, 16);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(640, 25);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Use", 90);
			LeaveRule("Use", 90);
			LeaveRule_Use();
		}
	}
	// $ANTLR end "Use"

	partial void EnterRule_Require();
	partial void LeaveRule_Require();

	// $ANTLR start "Require"
	[GrammarRule("Require")]
	private void mRequire()
	{
		EnterRule_Require();
		EnterRule("Require", 91);
		TraceIn("Require", 91);
		try
		{
			int _type = Require;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:642:9: ( ( 'r' | 'R' ) ( 'e' | 'E' ) ( 'q' | 'Q' ) ( 'u' | 'U' ) ( 'i' | 'I' ) ( 'r' | 'R' ) ( 'e' | 'E' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:642:11: ( 'r' | 'R' ) ( 'e' | 'E' ) ( 'q' | 'Q' ) ( 'u' | 'U' ) ( 'i' | 'I' ) ( 'r' | 'R' ) ( 'e' | 'E' )
			{
			DebugLocation(642, 11);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(642, 20);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(642, 29);
			if (input.LA(1)=='Q'||input.LA(1)=='q')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(642, 38);
			if (input.LA(1)=='U'||input.LA(1)=='u')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(642, 47);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(642, 56);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(642, 65);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Require", 91);
			LeaveRule("Require", 91);
			LeaveRule_Require();
		}
	}
	// $ANTLR end "Require"

	partial void EnterRule_RequireOnce();
	partial void LeaveRule_RequireOnce();

	// $ANTLR start "RequireOnce"
	[GrammarRule("RequireOnce")]
	private void mRequireOnce()
	{
		EnterRule_RequireOnce();
		EnterRule("RequireOnce", 92);
		TraceIn("RequireOnce", 92);
		try
		{
			int _type = RequireOnce;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:643:13: ( ( 'r' | 'R' ) ( 'e' | 'E' ) ( 'q' | 'Q' ) ( 'u' | 'U' ) ( 'i' | 'I' ) ( 'r' | 'R' ) ( 'e' | 'E' ) '_' ( 'o' | 'O' ) ( 'n' | 'N' ) ( 'c' | 'C' ) ( 'e' | 'E' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:643:15: ( 'r' | 'R' ) ( 'e' | 'E' ) ( 'q' | 'Q' ) ( 'u' | 'U' ) ( 'i' | 'I' ) ( 'r' | 'R' ) ( 'e' | 'E' ) '_' ( 'o' | 'O' ) ( 'n' | 'N' ) ( 'c' | 'C' ) ( 'e' | 'E' )
			{
			DebugLocation(643, 15);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(643, 24);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(643, 33);
			if (input.LA(1)=='Q'||input.LA(1)=='q')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(643, 42);
			if (input.LA(1)=='U'||input.LA(1)=='u')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(643, 51);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(643, 60);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(643, 69);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(643, 78);
			Match('_'); if (state.failed) return;
			DebugLocation(643, 81);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(643, 90);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(643, 99);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(643, 108);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RequireOnce", 92);
			LeaveRule("RequireOnce", 92);
			LeaveRule_RequireOnce();
		}
	}
	// $ANTLR end "RequireOnce"

	partial void EnterRule_Include();
	partial void LeaveRule_Include();

	// $ANTLR start "Include"
	[GrammarRule("Include")]
	private void mInclude()
	{
		EnterRule_Include();
		EnterRule("Include", 93);
		TraceIn("Include", 93);
		try
		{
			int _type = Include;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:644:9: ( ( 'i' | 'I' ) ( 'n' | 'N' ) ( 'c' | 'C' ) ( 'l' | 'L' ) ( 'u' | 'U' ) ( 'd' | 'D' ) ( 'e' | 'E' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:644:11: ( 'i' | 'I' ) ( 'n' | 'N' ) ( 'c' | 'C' ) ( 'l' | 'L' ) ( 'u' | 'U' ) ( 'd' | 'D' ) ( 'e' | 'E' )
			{
			DebugLocation(644, 11);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(644, 20);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(644, 29);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(644, 38);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(644, 47);
			if (input.LA(1)=='U'||input.LA(1)=='u')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(644, 56);
			if (input.LA(1)=='D'||input.LA(1)=='d')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(644, 65);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Include", 93);
			LeaveRule("Include", 93);
			LeaveRule_Include();
		}
	}
	// $ANTLR end "Include"

	partial void EnterRule_IncludeOnce();
	partial void LeaveRule_IncludeOnce();

	// $ANTLR start "IncludeOnce"
	[GrammarRule("IncludeOnce")]
	private void mIncludeOnce()
	{
		EnterRule_IncludeOnce();
		EnterRule("IncludeOnce", 94);
		TraceIn("IncludeOnce", 94);
		try
		{
			int _type = IncludeOnce;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:645:13: ( ( 'i' | 'I' ) ( 'n' | 'N' ) ( 'c' | 'C' ) ( 'l' | 'L' ) ( 'u' | 'U' ) ( 'd' | 'D' ) ( 'e' | 'E' ) '_' ( 'o' | 'O' ) ( 'n' | 'N' ) ( 'c' | 'C' ) ( 'e' | 'E' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:645:15: ( 'i' | 'I' ) ( 'n' | 'N' ) ( 'c' | 'C' ) ( 'l' | 'L' ) ( 'u' | 'U' ) ( 'd' | 'D' ) ( 'e' | 'E' ) '_' ( 'o' | 'O' ) ( 'n' | 'N' ) ( 'c' | 'C' ) ( 'e' | 'E' )
			{
			DebugLocation(645, 15);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(645, 24);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(645, 33);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(645, 42);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(645, 51);
			if (input.LA(1)=='U'||input.LA(1)=='u')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(645, 60);
			if (input.LA(1)=='D'||input.LA(1)=='d')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(645, 69);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(645, 78);
			Match('_'); if (state.failed) return;
			DebugLocation(645, 81);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(645, 90);
			if (input.LA(1)=='N'||input.LA(1)=='n')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(645, 99);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(645, 108);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IncludeOnce", 94);
			LeaveRule("IncludeOnce", 94);
			LeaveRule_IncludeOnce();
		}
	}
	// $ANTLR end "IncludeOnce"

	partial void EnterRule_Public();
	partial void LeaveRule_Public();

	// $ANTLR start "Public"
	[GrammarRule("Public")]
	private void mPublic()
	{
		EnterRule_Public();
		EnterRule("Public", 95);
		TraceIn("Public", 95);
		try
		{
			int _type = Public;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:646:8: ( ( 'p' | 'P' ) ( 'u' | 'U' ) ( 'b' | 'B' ) ( 'l' | 'L' ) ( 'i' | 'I' ) ( 'c' | 'C' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:646:10: ( 'p' | 'P' ) ( 'u' | 'U' ) ( 'b' | 'B' ) ( 'l' | 'L' ) ( 'i' | 'I' ) ( 'c' | 'C' )
			{
			DebugLocation(646, 10);
			if (input.LA(1)=='P'||input.LA(1)=='p')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(646, 19);
			if (input.LA(1)=='U'||input.LA(1)=='u')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(646, 28);
			if (input.LA(1)=='B'||input.LA(1)=='b')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(646, 37);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(646, 46);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(646, 55);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Public", 95);
			LeaveRule("Public", 95);
			LeaveRule_Public();
		}
	}
	// $ANTLR end "Public"

	partial void EnterRule_Private();
	partial void LeaveRule_Private();

	// $ANTLR start "Private"
	[GrammarRule("Private")]
	private void mPrivate()
	{
		EnterRule_Private();
		EnterRule("Private", 96);
		TraceIn("Private", 96);
		try
		{
			int _type = Private;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:647:9: ( ( 'p' | 'P' ) ( 'r' | 'R' ) ( 'i' | 'I' ) ( 'v' | 'V' ) ( 'a' | 'A' ) ( 't' | 'T' ) ( 'e' | 'E' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:647:11: ( 'p' | 'P' ) ( 'r' | 'R' ) ( 'i' | 'I' ) ( 'v' | 'V' ) ( 'a' | 'A' ) ( 't' | 'T' ) ( 'e' | 'E' )
			{
			DebugLocation(647, 11);
			if (input.LA(1)=='P'||input.LA(1)=='p')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(647, 20);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(647, 29);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(647, 38);
			if (input.LA(1)=='V'||input.LA(1)=='v')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(647, 47);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(647, 56);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(647, 65);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Private", 96);
			LeaveRule("Private", 96);
			LeaveRule_Private();
		}
	}
	// $ANTLR end "Private"

	partial void EnterRule_Protected();
	partial void LeaveRule_Protected();

	// $ANTLR start "Protected"
	[GrammarRule("Protected")]
	private void mProtected()
	{
		EnterRule_Protected();
		EnterRule("Protected", 97);
		TraceIn("Protected", 97);
		try
		{
			int _type = Protected;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:648:11: ( ( 'p' | 'P' ) ( 'r' | 'R' ) ( 'o' | 'O' ) ( 't' | 'T' ) ( 'e' | 'E' ) ( 'c' | 'C' ) ( 't' | 'T' ) ( 'e' | 'E' ) ( 'd' | 'D' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:648:13: ( 'p' | 'P' ) ( 'r' | 'R' ) ( 'o' | 'O' ) ( 't' | 'T' ) ( 'e' | 'E' ) ( 'c' | 'C' ) ( 't' | 'T' ) ( 'e' | 'E' ) ( 'd' | 'D' )
			{
			DebugLocation(648, 13);
			if (input.LA(1)=='P'||input.LA(1)=='p')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(648, 22);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(648, 31);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(648, 40);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(648, 49);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(648, 58);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(648, 67);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(648, 76);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(648, 85);
			if (input.LA(1)=='D'||input.LA(1)=='d')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Protected", 97);
			LeaveRule("Protected", 97);
			LeaveRule_Protected();
		}
	}
	// $ANTLR end "Protected"

	partial void EnterRule_True();
	partial void LeaveRule_True();

	// $ANTLR start "True"
	[GrammarRule("True")]
	private void mTrue()
	{
		EnterRule_True();
		EnterRule("True", 98);
		TraceIn("True", 98);
		try
		{
			int _type = True;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:649:6: ( ( 't' | 'T' ) ( 'r' | 'R' ) ( 'u' | 'U' ) ( 'e' | 'E' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:649:8: ( 't' | 'T' ) ( 'r' | 'R' ) ( 'u' | 'U' ) ( 'e' | 'E' )
			{
			DebugLocation(649, 8);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(649, 17);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(649, 26);
			if (input.LA(1)=='U'||input.LA(1)=='u')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(649, 35);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("True", 98);
			LeaveRule("True", 98);
			LeaveRule_True();
		}
	}
	// $ANTLR end "True"

	partial void EnterRule_False();
	partial void LeaveRule_False();

	// $ANTLR start "False"
	[GrammarRule("False")]
	private void mFalse()
	{
		EnterRule_False();
		EnterRule("False", 99);
		TraceIn("False", 99);
		try
		{
			int _type = False;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:650:7: ( ( 'f' | 'F' ) ( 'a' | 'A' ) ( 'l' | 'L' ) ( 's' | 'S' ) ( 'e' | 'E' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:650:9: ( 'f' | 'F' ) ( 'a' | 'A' ) ( 'l' | 'L' ) ( 's' | 'S' ) ( 'e' | 'E' )
			{
			DebugLocation(650, 9);
			if (input.LA(1)=='F'||input.LA(1)=='f')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(650, 18);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(650, 27);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(650, 36);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(650, 45);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("False", 99);
			LeaveRule("False", 99);
			LeaveRule_False();
		}
	}
	// $ANTLR end "False"

	partial void EnterRule_HaltCompiler();
	partial void LeaveRule_HaltCompiler();

	// $ANTLR start "HaltCompiler"
	[GrammarRule("HaltCompiler")]
	private void mHaltCompiler()
	{
		EnterRule_HaltCompiler();
		EnterRule("HaltCompiler", 100);
		TraceIn("HaltCompiler", 100);
		try
		{
			int _type = HaltCompiler;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:651:14: ( '_' '_' ( 'h' | 'H' ) ( 'a' | 'A' ) ( 'l' | 'L' ) ( 't' | 'T' ) '_' ( 'c' | 'C' ) ( 'o' | 'O' ) ( 'm' | 'M' ) ( 'p' | 'P' ) ( 'i' | 'I' ) ( 'l' | 'L' ) ( 'e' | 'E' ) ( 'r' | 'R' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:651:16: '_' '_' ( 'h' | 'H' ) ( 'a' | 'A' ) ( 'l' | 'L' ) ( 't' | 'T' ) '_' ( 'c' | 'C' ) ( 'o' | 'O' ) ( 'm' | 'M' ) ( 'p' | 'P' ) ( 'i' | 'I' ) ( 'l' | 'L' ) ( 'e' | 'E' ) ( 'r' | 'R' )
			{
			DebugLocation(651, 16);
			Match('_'); if (state.failed) return;
			DebugLocation(651, 19);
			Match('_'); if (state.failed) return;
			DebugLocation(651, 22);
			if (input.LA(1)=='H'||input.LA(1)=='h')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(651, 31);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(651, 40);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(651, 49);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(651, 58);
			Match('_'); if (state.failed) return;
			DebugLocation(651, 61);
			if (input.LA(1)=='C'||input.LA(1)=='c')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(651, 70);
			if (input.LA(1)=='O'||input.LA(1)=='o')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(651, 79);
			if (input.LA(1)=='M'||input.LA(1)=='m')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(651, 88);
			if (input.LA(1)=='P'||input.LA(1)=='p')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(651, 97);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(651, 106);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(651, 115);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(651, 124);
			if (input.LA(1)=='R'||input.LA(1)=='r')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("HaltCompiler", 100);
			LeaveRule("HaltCompiler", 100);
			LeaveRule_HaltCompiler();
		}
	}
	// $ANTLR end "HaltCompiler"

	partial void EnterRule_Die();
	partial void LeaveRule_Die();

	// $ANTLR start "Die"
	[GrammarRule("Die")]
	private void mDie()
	{
		EnterRule_Die();
		EnterRule("Die", 101);
		TraceIn("Die", 101);
		try
		{
			int _type = Die;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:652:5: ( ( 'd' | 'D' ) ( 'i' | 'I' ) ( 'e' | 'E' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:652:7: ( 'd' | 'D' ) ( 'i' | 'I' ) ( 'e' | 'E' )
			{
			DebugLocation(652, 7);
			if (input.LA(1)=='D'||input.LA(1)=='d')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(652, 16);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(652, 25);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Die", 101);
			LeaveRule("Die", 101);
			LeaveRule_Die();
		}
	}
	// $ANTLR end "Die"

	partial void EnterRule_Empty();
	partial void LeaveRule_Empty();

	// $ANTLR start "Empty"
	[GrammarRule("Empty")]
	private void mEmpty()
	{
		EnterRule_Empty();
		EnterRule("Empty", 102);
		TraceIn("Empty", 102);
		try
		{
			int _type = Empty;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:653:7: ( ( 'e' | 'E' ) ( 'm' | 'M' ) ( 'p' | 'P' ) ( 't' | 'T' ) ( 'y' | 'Y' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:653:9: ( 'e' | 'E' ) ( 'm' | 'M' ) ( 'p' | 'P' ) ( 't' | 'T' ) ( 'y' | 'Y' )
			{
			DebugLocation(653, 9);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(653, 18);
			if (input.LA(1)=='M'||input.LA(1)=='m')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(653, 27);
			if (input.LA(1)=='P'||input.LA(1)=='p')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(653, 36);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(653, 45);
			if (input.LA(1)=='Y'||input.LA(1)=='y')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Empty", 102);
			LeaveRule("Empty", 102);
			LeaveRule_Empty();
		}
	}
	// $ANTLR end "Empty"

	partial void EnterRule_Exit();
	partial void LeaveRule_Exit();

	// $ANTLR start "Exit"
	[GrammarRule("Exit")]
	private void mExit()
	{
		EnterRule_Exit();
		EnterRule("Exit", 103);
		TraceIn("Exit", 103);
		try
		{
			int _type = Exit;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:654:6: ( ( 'e' | 'E' ) ( 'x' | 'X' ) ( 'i' | 'I' ) ( 't' | 'T' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:654:8: ( 'e' | 'E' ) ( 'x' | 'X' ) ( 'i' | 'I' ) ( 't' | 'T' )
			{
			DebugLocation(654, 8);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(654, 17);
			if (input.LA(1)=='X'||input.LA(1)=='x')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(654, 26);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(654, 35);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Exit", 103);
			LeaveRule("Exit", 103);
			LeaveRule_Exit();
		}
	}
	// $ANTLR end "Exit"

	partial void EnterRule_Eval();
	partial void LeaveRule_Eval();

	// $ANTLR start "Eval"
	[GrammarRule("Eval")]
	private void mEval()
	{
		EnterRule_Eval();
		EnterRule("Eval", 104);
		TraceIn("Eval", 104);
		try
		{
			int _type = Eval;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:655:6: ( ( 'e' | 'E' ) ( 'v' | 'V' ) ( 'a' | 'A' ) ( 'l' | 'L' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:655:8: ( 'e' | 'E' ) ( 'v' | 'V' ) ( 'a' | 'A' ) ( 'l' | 'L' )
			{
			DebugLocation(655, 8);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(655, 17);
			if (input.LA(1)=='V'||input.LA(1)=='v')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(655, 26);
			if (input.LA(1)=='A'||input.LA(1)=='a')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(655, 35);
			if (input.LA(1)=='L'||input.LA(1)=='l')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Eval", 104);
			LeaveRule("Eval", 104);
			LeaveRule_Eval();
		}
	}
	// $ANTLR end "Eval"

	partial void EnterRule_Isset();
	partial void LeaveRule_Isset();

	// $ANTLR start "Isset"
	[GrammarRule("Isset")]
	private void mIsset()
	{
		EnterRule_Isset();
		EnterRule("Isset", 105);
		TraceIn("Isset", 105);
		try
		{
			int _type = Isset;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:656:7: ( ( 'i' | 'I' ) ( 's' | 'S' ) ( 's' | 'S' ) ( 'e' | 'E' ) ( 't' | 'T' ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:656:9: ( 'i' | 'I' ) ( 's' | 'S' ) ( 's' | 'S' ) ( 'e' | 'E' ) ( 't' | 'T' )
			{
			DebugLocation(656, 9);
			if (input.LA(1)=='I'||input.LA(1)=='i')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(656, 18);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(656, 27);
			if (input.LA(1)=='S'||input.LA(1)=='s')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(656, 36);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(656, 45);
			if (input.LA(1)=='T'||input.LA(1)=='t')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Isset", 105);
			LeaveRule("Isset", 105);
			LeaveRule_Isset();
		}
	}
	// $ANTLR end "Isset"

	partial void EnterRule_Decimal();
	partial void LeaveRule_Decimal();

	// $ANTLR start "Decimal"
	[GrammarRule("Decimal")]
	private void mDecimal()
	{
		EnterRule_Decimal();
		EnterRule("Decimal", 106);
		TraceIn("Decimal", 106);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:661:2: ( ( '1' .. '9' ( '0' .. '9' )* ) | '0' )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if (((LA12_1>='1' && LA12_1<='9')))
			{
				alt12 = 1;
			}
			else if ((LA12_1=='0'))
			{
				alt12 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:661:3: ( '1' .. '9' ( '0' .. '9' )* )
				{
				DebugLocation(661, 3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:661:3: ( '1' .. '9' ( '0' .. '9' )* )
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:661:4: '1' .. '9' ( '0' .. '9' )*
				{
				DebugLocation(661, 7);
				MatchRange('1','9'); if (state.failed) return;
				DebugLocation(661, 13);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:661:13: ( '0' .. '9' )*
				try { DebugEnterSubRule(11);
				while (true)
				{
					int alt11=2;
					try { DebugEnterDecision(11, false);
					int LA11_1 = input.LA(1);

					if (((LA11_1>='0' && LA11_1<='9')))
					{
						alt11 = 1;
					}


					} finally { DebugExitDecision(11); }
					switch ( alt11 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:
						{
						DebugLocation(661, 13);
						input.Consume();
						state.failed=false;

						}
						break;

					default:
						goto loop11;
					}
				}

				loop11:
					;

				} finally { DebugExitSubRule(11); }


				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:661:26: '0'
				{
				DebugLocation(661, 26);
				Match('0'); if (state.failed) return;

				}
				break;

			}
		}
		finally
		{
			TraceOut("Decimal", 106);
			LeaveRule("Decimal", 106);
			LeaveRule_Decimal();
		}
	}
	// $ANTLR end "Decimal"

	partial void EnterRule_Hexadecimal();
	partial void LeaveRule_Hexadecimal();

	// $ANTLR start "Hexadecimal"
	[GrammarRule("Hexadecimal")]
	private void mHexadecimal()
	{
		EnterRule_Hexadecimal();
		EnterRule("Hexadecimal", 107);
		TraceIn("Hexadecimal", 107);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:665:2: ( '0' ( 'x' | 'X' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:665:4: '0' ( 'x' | 'X' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+
			{
			DebugLocation(665, 4);
			Match('0'); if (state.failed) return;
			DebugLocation(665, 7);
			if (input.LA(1)=='X'||input.LA(1)=='x')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(665, 16);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:665:16: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_1 = input.LA(1);

				if (((LA13_1>='0' && LA13_1<='9')||(LA13_1>='A' && LA13_1<='F')||(LA13_1>='a' && LA13_1<='f')))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:
					{
					DebugLocation(665, 16);
					input.Consume();
					state.failed=false;

					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

		}
		finally
		{
			TraceOut("Hexadecimal", 107);
			LeaveRule("Hexadecimal", 107);
			LeaveRule_Hexadecimal();
		}
	}
	// $ANTLR end "Hexadecimal"

	partial void EnterRule_Octal();
	partial void LeaveRule_Octal();

	// $ANTLR start "Octal"
	[GrammarRule("Octal")]
	private void mOctal()
	{
		EnterRule_Octal();
		EnterRule("Octal", 108);
		TraceIn("Octal", 108);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:670:2: ( '0' ( '0' .. '7' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:670:4: '0' ( '0' .. '7' )+
			{
			DebugLocation(670, 4);
			Match('0'); if (state.failed) return;
			DebugLocation(670, 7);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:670:7: ( '0' .. '7' )+
			int cnt14=0;
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if (((LA14_1>='0' && LA14_1<='7')))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:
					{
					DebugLocation(670, 7);
					input.Consume();
					state.failed=false;

					}
					break;

				default:
					if (cnt14 >= 1)
						goto loop14;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee14 = new EarlyExitException( 14, input );
					DebugRecognitionException(eee14);
					throw eee14;
				}
				cnt14++;
			}
			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

		}
		finally
		{
			TraceOut("Octal", 108);
			LeaveRule("Octal", 108);
			LeaveRule_Octal();
		}
	}
	// $ANTLR end "Octal"

	partial void EnterRule_Integer();
	partial void LeaveRule_Integer();

	// $ANTLR start "Integer"
	[GrammarRule("Integer")]
	private void mInteger()
	{
		EnterRule_Integer();
		EnterRule("Integer", 109);
		TraceIn("Integer", 109);
		try
		{
			int _type = Integer;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:672:2: ( Octal | Decimal | Hexadecimal )
			int alt15=3;
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1=='0'))
			{
				switch (input.LA(2))
				{
				case 'X':
				case 'x':
					{
					alt15 = 3;
					}
					break;
				case '0':
				case '1':
				case '2':
				case '3':
				case '4':
				case '5':
				case '6':
				case '7':
					{
					alt15 = 1;
					}
					break;
				default:
					alt15=2;
					break;

				}

			}
			else if (((LA15_1>='1' && LA15_1<='9')))
			{
				alt15 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:672:3: Octal
				{
				DebugLocation(672, 3);
				mOctal(); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:672:9: Decimal
				{
				DebugLocation(672, 9);
				mDecimal(); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:672:17: Hexadecimal
				{
				DebugLocation(672, 17);
				mHexadecimal(); if (state.failed) return;

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Integer", 109);
			LeaveRule("Integer", 109);
			LeaveRule_Integer();
		}
	}
	// $ANTLR end "Integer"

	partial void EnterRule_Digits();
	partial void LeaveRule_Digits();

	// $ANTLR start "Digits"
	[GrammarRule("Digits")]
	private void mDigits()
	{
		EnterRule_Digits();
		EnterRule("Digits", 110);
		TraceIn("Digits", 110);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:678:2: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:678:4: ( '0' .. '9' )+
			{
			DebugLocation(678, 7);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:678:7: ( '0' .. '9' )+
			int cnt16=0;
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if (((LA16_1>='0' && LA16_1<='9')))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:
					{
					DebugLocation(678, 7);
					input.Consume();
					state.failed=false;

					}
					break;

				default:
					if (cnt16 >= 1)
						goto loop16;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee16 = new EarlyExitException( 16, input );
					DebugRecognitionException(eee16);
					throw eee16;
				}
				cnt16++;
			}
			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

		}
		finally
		{
			TraceOut("Digits", 110);
			LeaveRule("Digits", 110);
			LeaveRule_Digits();
		}
	}
	// $ANTLR end "Digits"

	partial void EnterRule_DNum();
	partial void LeaveRule_DNum();

	// $ANTLR start "DNum"
	[GrammarRule("DNum")]
	private void mDNum()
	{
		EnterRule_DNum();
		EnterRule("DNum", 111);
		TraceIn("DNum", 111);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:683:2: ( ( ( '.' Digits )=> ( '.' Digits ) | ( Digits '.' ( Digits )? ) ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:683:3: ( ( '.' Digits )=> ( '.' Digits ) | ( Digits '.' ( Digits )? ) )
			{
			DebugLocation(683, 3);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:683:3: ( ( '.' Digits )=> ( '.' Digits ) | ( Digits '.' ( Digits )? ) )
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_1 = input.LA(1);

			if ((LA18_1=='.') && (EvaluatePredicate(synpred6_Php_fragment)))
			{
				alt18 = 1;
			}
			else if (((LA18_1>='0' && LA18_1<='9')))
			{
				alt18 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:683:4: ( '.' Digits )=> ( '.' Digits )
				{
				DebugLocation(683, 18);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:683:18: ( '.' Digits )
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:683:19: '.' Digits
				{
				DebugLocation(683, 19);
				Match('.'); if (state.failed) return;
				DebugLocation(683, 23);
				mDigits(); if (state.failed) return;

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:683:31: ( Digits '.' ( Digits )? )
				{
				DebugLocation(683, 31);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:683:31: ( Digits '.' ( Digits )? )
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:683:32: Digits '.' ( Digits )?
				{
				DebugLocation(683, 32);
				mDigits(); if (state.failed) return;
				DebugLocation(683, 39);
				Match('.'); if (state.failed) return;
				DebugLocation(683, 43);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:683:43: ( Digits )?
				int alt17=2;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if (((LA17_1>='0' && LA17_1<='9')))
				{
					alt17 = 1;
				}
				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:683:43: Digits
					{
					DebugLocation(683, 43);
					mDigits(); if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				}


				}
				break;

			}
			} finally { DebugExitSubRule(18); }


			}

		}
		finally
		{
			TraceOut("DNum", 111);
			LeaveRule("DNum", 111);
			LeaveRule_DNum();
		}
	}
	// $ANTLR end "DNum"

	partial void EnterRule_Exponent_DNum();
	partial void LeaveRule_Exponent_DNum();

	// $ANTLR start "Exponent_DNum"
	[GrammarRule("Exponent_DNum")]
	private void mExponent_DNum()
	{
		EnterRule_Exponent_DNum();
		EnterRule("Exponent_DNum", 112);
		TraceIn("Exponent_DNum", 112);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:688:2: ( ( ( Digits | DNum ) ( 'e' | 'E' ) ( '+' '-' )? Digits ) )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:688:3: ( ( Digits | DNum ) ( 'e' | 'E' ) ( '+' '-' )? Digits )
			{
			DebugLocation(688, 3);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:688:3: ( ( Digits | DNum ) ( 'e' | 'E' ) ( '+' '-' )? Digits )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:688:4: ( Digits | DNum ) ( 'e' | 'E' ) ( '+' '-' )? Digits
			{
			DebugLocation(688, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:688:4: ( Digits | DNum )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			try
			{
				alt19 = dfa19.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:688:5: Digits
				{
				DebugLocation(688, 5);
				mDigits(); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:688:12: DNum
				{
				DebugLocation(688, 12);
				mDNum(); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(19); }

			DebugLocation(688, 17);
			input.Consume();
			state.failed=false;
			DebugLocation(688, 26);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:688:26: ( '+' '-' )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_1 = input.LA(1);

			if ((LA20_1=='+'))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:688:27: '+' '-'
				{
				DebugLocation(688, 27);
				Match('+'); if (state.failed) return;
				DebugLocation(688, 30);
				Match('-'); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(688, 35);
			mDigits(); if (state.failed) return;

			}


			}

		}
		finally
		{
			TraceOut("Exponent_DNum", 112);
			LeaveRule("Exponent_DNum", 112);
			LeaveRule_Exponent_DNum();
		}
	}
	// $ANTLR end "Exponent_DNum"

	partial void EnterRule_Real();
	partial void LeaveRule_Real();

	// $ANTLR start "Real"
	[GrammarRule("Real")]
	private void mReal()
	{
		EnterRule_Real();
		EnterRule("Real", 113);
		TraceIn("Real", 113);
		try
		{
			int _type = Real;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:691:2: ( DNum | Exponent_DNum )
			int alt21=2;
			try { DebugEnterDecision(21, false);
			try
			{
				alt21 = dfa21.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:691:4: DNum
				{
				DebugLocation(691, 4);
				mDNum(); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:691:9: Exponent_DNum
				{
				DebugLocation(691, 9);
				mExponent_DNum(); if (state.failed) return;

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Real", 113);
			LeaveRule("Real", 113);
			LeaveRule_Real();
		}
	}
	// $ANTLR end "Real"

	partial void EnterRule_SingleQuotedString();
	partial void LeaveRule_SingleQuotedString();

	// $ANTLR start "SingleQuotedString"
	[GrammarRule("SingleQuotedString")]
	private void mSingleQuotedString()
	{
		EnterRule_SingleQuotedString();
		EnterRule("SingleQuotedString", 114);
		TraceIn("SingleQuotedString", 114);
		try
		{
			int _type = SingleQuotedString;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:695:2: ( '\\'' ( ( '\\\\' '\\'' )=> '\\\\' '\\'' | ( '\\\\' '\\\\' )=> '\\\\' '\\\\' | '\\\\' |~ ( '\\'' | '\\\\' ) )* '\\'' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:695:4: '\\'' ( ( '\\\\' '\\'' )=> '\\\\' '\\'' | ( '\\\\' '\\\\' )=> '\\\\' '\\\\' | '\\\\' |~ ( '\\'' | '\\\\' ) )* '\\''
			{
			DebugLocation(695, 4);
			Match('\''); if (state.failed) return;
			DebugLocation(695, 9);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:695:9: ( ( '\\\\' '\\'' )=> '\\\\' '\\'' | ( '\\\\' '\\\\' )=> '\\\\' '\\\\' | '\\\\' |~ ( '\\'' | '\\\\' ) )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=5;
				try { DebugEnterDecision(22, false);
				int LA22_1 = input.LA(1);

				if ((LA22_1=='\\'))
				{
					int LA22_2 = input.LA(2);

					if ((LA22_2=='\''))
					{
						int LA22_3 = input.LA(3);

						if ((LA22_3=='\'') && (EvaluatePredicate(synpred7_Php_fragment)))
						{
							alt22 = 1;
						}
						else if ((LA22_3=='\\') && (EvaluatePredicate(synpred7_Php_fragment)))
						{
							alt22 = 1;
						}
						else if (((LA22_3>='\u0000' && LA22_3<='&')||(LA22_3>='(' && LA22_3<='[')||(LA22_3>=']' && LA22_3<='\uFFFF')) && (EvaluatePredicate(synpred7_Php_fragment)))
						{
							alt22 = 1;
						}

						else
						{
							alt22 = 3;
						}


					}
					else if ((LA22_2=='\\'))
					{
						int LA22_3 = input.LA(3);

						if ((EvaluatePredicate(synpred8_Php_fragment)))
						{
							alt22 = 2;
						}
						else if ((true))
						{
							alt22 = 3;
						}


					}
					else if (((LA22_2>='\u0000' && LA22_2<='&')||(LA22_2>='(' && LA22_2<='[')||(LA22_2>=']' && LA22_2<='\uFFFF')))
					{
						alt22 = 3;
					}


				}
				else if (((LA22_1>='\u0000' && LA22_1<='&')||(LA22_1>='(' && LA22_1<='[')||(LA22_1>=']' && LA22_1<='\uFFFF')))
				{
					alt22 = 4;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:695:10: ( '\\\\' '\\'' )=> '\\\\' '\\''
					{
					DebugLocation(695, 23);
					Match('\\'); if (state.failed) return;
					DebugLocation(695, 28);
					Match('\''); if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:696:6: ( '\\\\' '\\\\' )=> '\\\\' '\\\\'
					{
					DebugLocation(696, 19);
					Match('\\'); if (state.failed) return;
					DebugLocation(696, 24);
					Match('\\'); if (state.failed) return;

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:697:6: '\\\\'
					{
					DebugLocation(697, 6);
					Match('\\'); if (state.failed) return;

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:697:13: ~ ( '\\'' | '\\\\' )
					{
					DebugLocation(697, 13);
					input.Consume();
					state.failed=false;

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }

			DebugLocation(698, 4);
			Match('\''); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SingleQuotedString", 114);
			LeaveRule("SingleQuotedString", 114);
			LeaveRule_SingleQuotedString();
		}
	}
	// $ANTLR end "SingleQuotedString"

	partial void EnterRule_EscapeCharector();
	partial void LeaveRule_EscapeCharector();

	// $ANTLR start "EscapeCharector"
	[GrammarRule("EscapeCharector")]
	private void mEscapeCharector()
	{
		EnterRule_EscapeCharector();
		EnterRule("EscapeCharector", 115);
		TraceIn("EscapeCharector", 115);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:704:2: ( 'n' | 'r' | 't' | '\\\\' | '$' | '\"' | Digits | 'x' )
			int alt23=8;
			try { DebugEnterDecision(23, false);
			switch (input.LA(1))
			{
			case 'n':
				{
				alt23 = 1;
				}
				break;
			case 'r':
				{
				alt23 = 2;
				}
				break;
			case 't':
				{
				alt23 = 3;
				}
				break;
			case '\\':
				{
				alt23 = 4;
				}
				break;
			case '$':
				{
				alt23 = 5;
				}
				break;
			case '\"':
				{
				alt23 = 6;
				}
				break;
			case '0':
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				{
				alt23 = 7;
				}
				break;
			case 'x':
				{
				alt23 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 23, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:704:4: 'n'
				{
				DebugLocation(704, 4);
				Match('n'); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:704:10: 'r'
				{
				DebugLocation(704, 10);
				Match('r'); if (state.failed) return;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:704:16: 't'
				{
				DebugLocation(704, 16);
				Match('t'); if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:704:22: '\\\\'
				{
				DebugLocation(704, 22);
				Match('\\'); if (state.failed) return;

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:704:29: '$'
				{
				DebugLocation(704, 29);
				Match('$'); if (state.failed) return;

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:704:35: '\"'
				{
				DebugLocation(704, 35);
				Match('\"'); if (state.failed) return;

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:704:41: Digits
				{
				DebugLocation(704, 41);
				mDigits(); if (state.failed) return;

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:704:50: 'x'
				{
				DebugLocation(704, 50);
				Match('x'); if (state.failed) return;

				}
				break;

			}
		}
		finally
		{
			TraceOut("EscapeCharector", 115);
			LeaveRule("EscapeCharector", 115);
			LeaveRule_EscapeCharector();
		}
	}
	// $ANTLR end "EscapeCharector"

	partial void EnterRule_DoubleQuotedString();
	partial void LeaveRule_DoubleQuotedString();

	// $ANTLR start "DoubleQuotedString"
	[GrammarRule("DoubleQuotedString")]
	private void mDoubleQuotedString()
	{
		EnterRule_DoubleQuotedString();
		EnterRule("DoubleQuotedString", 116);
		TraceIn("DoubleQuotedString", 116);
		try
		{
			int _type = DoubleQuotedString;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:707:2: ( '\"' ( ( '\\\\' EscapeCharector )=> '\\\\' EscapeCharector | '\\\\' |~ ( '\\\\' | '\"' ) )* '\"' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:707:4: '\"' ( ( '\\\\' EscapeCharector )=> '\\\\' EscapeCharector | '\\\\' |~ ( '\\\\' | '\"' ) )* '\"'
			{
			DebugLocation(707, 4);
			Match('\"'); if (state.failed) return;
			DebugLocation(707, 9);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:707:9: ( ( '\\\\' EscapeCharector )=> '\\\\' EscapeCharector | '\\\\' |~ ( '\\\\' | '\"' ) )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=4;
				try { DebugEnterDecision(24, false);
				int LA24_1 = input.LA(1);

				if ((LA24_1=='\\'))
				{
					int LA24_2 = input.LA(2);

					if ((LA24_2=='n'))
					{
						int LA24_3 = input.LA(3);

						if ((EvaluatePredicate(synpred9_Php_fragment)))
						{
							alt24 = 1;
						}
						else if ((true))
						{
							alt24 = 2;
						}


					}
					else if ((LA24_2=='r'))
					{
						int LA24_3 = input.LA(3);

						if ((EvaluatePredicate(synpred9_Php_fragment)))
						{
							alt24 = 1;
						}
						else if ((true))
						{
							alt24 = 2;
						}


					}
					else if ((LA24_2=='t'))
					{
						int LA24_3 = input.LA(3);

						if ((EvaluatePredicate(synpred9_Php_fragment)))
						{
							alt24 = 1;
						}
						else if ((true))
						{
							alt24 = 2;
						}


					}
					else if ((LA24_2=='\\'))
					{
						int LA24_3 = input.LA(3);

						if ((EvaluatePredicate(synpred9_Php_fragment)))
						{
							alt24 = 1;
						}
						else if ((true))
						{
							alt24 = 2;
						}


					}
					else if ((LA24_2=='$'))
					{
						int LA24_3 = input.LA(3);

						if ((EvaluatePredicate(synpred9_Php_fragment)))
						{
							alt24 = 1;
						}
						else if ((true))
						{
							alt24 = 2;
						}


					}
					else if ((LA24_2=='\"'))
					{
						int LA24_3 = input.LA(3);

						if ((LA24_3=='\"') && (EvaluatePredicate(synpred9_Php_fragment)))
						{
							alt24 = 1;
						}
						else if ((LA24_3=='\\') && (EvaluatePredicate(synpred9_Php_fragment)))
						{
							alt24 = 1;
						}
						else if (((LA24_3>='\u0000' && LA24_3<='!')||(LA24_3>='#' && LA24_3<='[')||(LA24_3>=']' && LA24_3<='\uFFFF')) && (EvaluatePredicate(synpred9_Php_fragment)))
						{
							alt24 = 1;
						}

						else
						{
							alt24 = 2;
						}


					}
					else if (((LA24_2>='0' && LA24_2<='9')))
					{
						int LA24_3 = input.LA(3);

						if ((EvaluatePredicate(synpred9_Php_fragment)))
						{
							alt24 = 1;
						}
						else if ((true))
						{
							alt24 = 2;
						}


					}
					else if ((LA24_2=='x'))
					{
						int LA24_3 = input.LA(3);

						if ((EvaluatePredicate(synpred9_Php_fragment)))
						{
							alt24 = 1;
						}
						else if ((true))
						{
							alt24 = 2;
						}


					}
					else if (((LA24_2>='\u0000' && LA24_2<='!')||LA24_2=='#'||(LA24_2>='%' && LA24_2<='/')||(LA24_2>=':' && LA24_2<='[')||(LA24_2>=']' && LA24_2<='m')||(LA24_2>='o' && LA24_2<='q')||LA24_2=='s'||(LA24_2>='u' && LA24_2<='w')||(LA24_2>='y' && LA24_2<='\uFFFF')))
					{
						alt24 = 2;
					}


				}
				else if (((LA24_1>='\u0000' && LA24_1<='!')||(LA24_1>='#' && LA24_1<='[')||(LA24_1>=']' && LA24_1<='\uFFFF')))
				{
					alt24 = 3;
				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:707:11: ( '\\\\' EscapeCharector )=> '\\\\' EscapeCharector
					{
					DebugLocation(707, 36);
					Match('\\'); if (state.failed) return;
					DebugLocation(707, 41);
					mEscapeCharector(); if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:708:4: '\\\\'
					{
					DebugLocation(708, 4);
					Match('\\'); if (state.failed) return;

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:709:4: ~ ( '\\\\' | '\"' )
					{
					DebugLocation(709, 4);
					input.Consume();
					state.failed=false;

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }

			DebugLocation(710, 4);
			Match('\"'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DoubleQuotedString", 116);
			LeaveRule("DoubleQuotedString", 116);
			LeaveRule_DoubleQuotedString();
		}
	}
	// $ANTLR end "DoubleQuotedString"

	partial void EnterRule_HereDoc();
	partial void LeaveRule_HereDoc();

	// $ANTLR start "HereDoc"
	[GrammarRule("HereDoc")]
	private void mHereDoc()
	{
		EnterRule_HereDoc();
		EnterRule("HereDoc", 117);
		TraceIn("HereDoc", 117);
		try
		{
			int _type = HereDoc;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:714:2: ( '<<<' HereDocContents )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:714:4: '<<<' HereDocContents
			{
			DebugLocation(714, 4);
			Match("<<<"); if (state.failed) return;

			DebugLocation(714, 10);
			mHereDocContents(); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("HereDoc", 117);
			LeaveRule("HereDoc", 117);
			LeaveRule_HereDoc();
		}
	}
	// $ANTLR end "HereDoc"

	partial void EnterRule_VariableName();
	partial void LeaveRule_VariableName();

	// $ANTLR start "VariableName"
	[GrammarRule("VariableName")]
	private void mVariableName()
	{
		EnterRule_VariableName();
		EnterRule("VariableName", 118);
		TraceIn("VariableName", 118);
		try
		{
			int _type = VariableName;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:719:2: ( '$' UnquotedStringBody )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:719:4: '$' UnquotedStringBody
			{
			DebugLocation(719, 4);
			Match('$'); if (state.failed) return;
			DebugLocation(719, 8);
			mUnquotedStringBody(); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("VariableName", 118);
			LeaveRule("VariableName", 118);
			LeaveRule_VariableName();
		}
	}
	// $ANTLR end "VariableName"

	partial void EnterRule_UnquotedString();
	partial void LeaveRule_UnquotedString();

	// $ANTLR start "UnquotedString"
	[GrammarRule("UnquotedString")]
	private void mUnquotedString()
	{
		EnterRule_UnquotedString();
		EnterRule("UnquotedString", 119);
		TraceIn("UnquotedString", 119);
		try
		{
			int _type = UnquotedString;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:724:4: ( UnquotedStringBody )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:724:6: UnquotedStringBody
			{
			DebugLocation(724, 6);
			mUnquotedStringBody(); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("UnquotedString", 119);
			LeaveRule("UnquotedString", 119);
			LeaveRule_UnquotedString();
		}
	}
	// $ANTLR end "UnquotedString"

	partial void EnterRule_UnquotedStringBody();
	partial void LeaveRule_UnquotedStringBody();

	// $ANTLR start "UnquotedStringBody"
	[GrammarRule("UnquotedStringBody")]
	private void mUnquotedStringBody()
	{
		EnterRule_UnquotedStringBody();
		EnterRule("UnquotedStringBody", 120);
		TraceIn("UnquotedStringBody", 120);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:730:4: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:730:6: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			{
			DebugLocation(730, 6);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(730, 35);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:730:35: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if (((LA25_1>='0' && LA25_1<='9')||(LA25_1>='A' && LA25_1<='Z')||LA25_1=='_'||(LA25_1>='a' && LA25_1<='z')))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:
					{
					DebugLocation(730, 35);
					input.Consume();
					state.failed=false;

					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }


			}

		}
		finally
		{
			TraceOut("UnquotedStringBody", 120);
			LeaveRule("UnquotedStringBody", 120);
			LeaveRule_UnquotedStringBody();
		}
	}
	// $ANTLR end "UnquotedStringBody"

	partial void EnterRule_HereDocContents();
	partial void LeaveRule_HereDocContents();

	// $ANTLR start "HereDocContents"
	[GrammarRule("HereDocContents")]
	private void mHereDocContents()
	{
		EnterRule_HereDocContents();
		EnterRule("HereDocContents", 121);
		TraceIn("HereDocContents", 121);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:736:2: ()
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:736:4: 
			{
			DebugLocation(736, 4);
			if (state.backtracking == 0)
			{

						// Please see also Code2Xml.Languages.ANTLRv3.Core.ExtensionForParser
						var sb = new StringBuilder();
						while (input.LA(1) != '\n') {
							sb.append((char)input.LA(1));
							input.consume();
						}
						input.consume();
						var hereDocName = sb.toString().TrimEnd();
						var hdnl = hereDocName.length();
						while (true) {
							var matchEnd = true;
							for (int i = 0; i < hdnl; i++) {
								if (input.LA(1) != hereDocName.charAt(i)) {
									matchEnd = false;
									break;
								}
								input.consume();
							}
							if (matchEnd == false) {
								while (input.LA(1) != '\n') {
									input.consume();
								}
								input.consume();
							} else {
								break;
							}
						}
					
			}

			}

		}
		finally
		{
			TraceOut("HereDocContents", 121);
			LeaveRule("HereDocContents", 121);
			LeaveRule_HereDocContents();
		}
	}
	// $ANTLR end "HereDocContents"

	partial void EnterRule_AsignmentOperator();
	partial void LeaveRule_AsignmentOperator();

	// $ANTLR start "AsignmentOperator"
	[GrammarRule("AsignmentOperator")]
	private void mAsignmentOperator()
	{
		EnterRule_AsignmentOperator();
		EnterRule("AsignmentOperator", 122);
		TraceIn("AsignmentOperator", 122);
		try
		{
			int _type = AsignmentOperator;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:767:2: ( '+=' | '-=' | '*=' | '/=' | '.=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' )
			int alt26=11;
			try { DebugEnterDecision(26, false);
			switch (input.LA(1))
			{
			case '+':
				{
				alt26 = 1;
				}
				break;
			case '-':
				{
				alt26 = 2;
				}
				break;
			case '*':
				{
				alt26 = 3;
				}
				break;
			case '/':
				{
				alt26 = 4;
				}
				break;
			case '.':
				{
				alt26 = 5;
				}
				break;
			case '%':
				{
				alt26 = 6;
				}
				break;
			case '&':
				{
				alt26 = 7;
				}
				break;
			case '|':
				{
				alt26 = 8;
				}
				break;
			case '^':
				{
				alt26 = 9;
				}
				break;
			case '<':
				{
				alt26 = 10;
				}
				break;
			case '>':
				{
				alt26 = 11;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 26, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:767:4: '+='
				{
				DebugLocation(767, 4);
				Match("+="); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:767:9: '-='
				{
				DebugLocation(767, 9);
				Match("-="); if (state.failed) return;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:767:14: '*='
				{
				DebugLocation(767, 14);
				Match("*="); if (state.failed) return;


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:767:19: '/='
				{
				DebugLocation(767, 19);
				Match("/="); if (state.failed) return;


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:767:24: '.='
				{
				DebugLocation(767, 24);
				Match(".="); if (state.failed) return;


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:767:29: '%='
				{
				DebugLocation(767, 29);
				Match("%="); if (state.failed) return;


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:767:34: '&='
				{
				DebugLocation(767, 34);
				Match("&="); if (state.failed) return;


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:767:39: '|='
				{
				DebugLocation(767, 39);
				Match("|="); if (state.failed) return;


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:767:44: '^='
				{
				DebugLocation(767, 44);
				Match("^="); if (state.failed) return;


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:767:49: '<<='
				{
				DebugLocation(767, 49);
				Match("<<="); if (state.failed) return;


				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:767:55: '>>='
				{
				DebugLocation(767, 55);
				Match(">>="); if (state.failed) return;


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AsignmentOperator", 122);
			LeaveRule("AsignmentOperator", 122);
			LeaveRule_AsignmentOperator();
		}
	}
	// $ANTLR end "AsignmentOperator"

	partial void EnterRule_EqualityOperator();
	partial void LeaveRule_EqualityOperator();

	// $ANTLR start "EqualityOperator"
	[GrammarRule("EqualityOperator")]
	private void mEqualityOperator()
	{
		EnterRule_EqualityOperator();
		EnterRule("EqualityOperator", 123);
		TraceIn("EqualityOperator", 123);
		try
		{
			int _type = EqualityOperator;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:771:2: ( '==' | '!=' | '===' | '!==' )
			int alt27=4;
			try { DebugEnterDecision(27, false);
			int LA27_1 = input.LA(1);

			if ((LA27_1=='='))
			{
				int LA27_2 = input.LA(2);

				if ((LA27_2=='='))
				{
					int LA27_3 = input.LA(3);

					if ((LA27_3=='='))
					{
						alt27 = 3;
					}
					else
					{
						alt27 = 1;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 27, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA27_1=='!'))
			{
				int LA27_2 = input.LA(2);

				if ((LA27_2=='='))
				{
					int LA27_3 = input.LA(3);

					if ((LA27_3=='='))
					{
						alt27 = 4;
					}
					else
					{
						alt27 = 2;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae = new NoViableAltException("", 27, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 27, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:771:4: '=='
				{
				DebugLocation(771, 4);
				Match("=="); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:771:11: '!='
				{
				DebugLocation(771, 11);
				Match("!="); if (state.failed) return;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:771:18: '==='
				{
				DebugLocation(771, 18);
				Match("==="); if (state.failed) return;


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:771:26: '!=='
				{
				DebugLocation(771, 26);
				Match("!=="); if (state.failed) return;


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EqualityOperator", 123);
			LeaveRule("EqualityOperator", 123);
			LeaveRule_EqualityOperator();
		}
	}
	// $ANTLR end "EqualityOperator"

	partial void EnterRule_ComparisionOperator();
	partial void LeaveRule_ComparisionOperator();

	// $ANTLR start "ComparisionOperator"
	[GrammarRule("ComparisionOperator")]
	private void mComparisionOperator()
	{
		EnterRule_ComparisionOperator();
		EnterRule("ComparisionOperator", 124);
		TraceIn("ComparisionOperator", 124);
		try
		{
			int _type = ComparisionOperator;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:775:2: ( '<' | '<=' | '>' | '>=' | '<>' )
			int alt28=5;
			try { DebugEnterDecision(28, false);
			int LA28_1 = input.LA(1);

			if ((LA28_1=='<'))
			{
				switch (input.LA(2))
				{
				case '=':
					{
					alt28 = 2;
					}
					break;
				case '>':
					{
					alt28 = 5;
					}
					break;
				default:
					alt28=1;
					break;

				}

			}
			else if ((LA28_1=='>'))
			{
				int LA28_2 = input.LA(2);

				if ((LA28_2=='='))
				{
					alt28 = 4;
				}
				else
				{
					alt28 = 3;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 28, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:775:4: '<'
				{
				DebugLocation(775, 4);
				Match('<'); if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:775:10: '<='
				{
				DebugLocation(775, 10);
				Match("<="); if (state.failed) return;


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:775:17: '>'
				{
				DebugLocation(775, 17);
				Match('>'); if (state.failed) return;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:775:23: '>='
				{
				DebugLocation(775, 23);
				Match(">="); if (state.failed) return;


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:775:30: '<>'
				{
				DebugLocation(775, 30);
				Match("<>"); if (state.failed) return;


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ComparisionOperator", 124);
			LeaveRule("ComparisionOperator", 124);
			LeaveRule_ComparisionOperator();
		}
	}
	// $ANTLR end "ComparisionOperator"

	partial void EnterRule_ShiftOperator();
	partial void LeaveRule_ShiftOperator();

	// $ANTLR start "ShiftOperator"
	[GrammarRule("ShiftOperator")]
	private void mShiftOperator()
	{
		EnterRule_ShiftOperator();
		EnterRule("ShiftOperator", 125);
		TraceIn("ShiftOperator", 125);
		try
		{
			int _type = ShiftOperator;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:779:2: ( '<<' | '>>' )
			int alt29=2;
			try { DebugEnterDecision(29, false);
			int LA29_1 = input.LA(1);

			if ((LA29_1=='<'))
			{
				alt29 = 1;
			}
			else if ((LA29_1=='>'))
			{
				alt29 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 29, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:779:4: '<<'
				{
				DebugLocation(779, 4);
				Match("<<"); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:779:11: '>>'
				{
				DebugLocation(779, 11);
				Match(">>"); if (state.failed) return;


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ShiftOperator", 125);
			LeaveRule("ShiftOperator", 125);
			LeaveRule_ShiftOperator();
		}
	}
	// $ANTLR end "ShiftOperator"

	partial void EnterRule_IncrementOperator();
	partial void LeaveRule_IncrementOperator();

	// $ANTLR start "IncrementOperator"
	[GrammarRule("IncrementOperator")]
	private void mIncrementOperator()
	{
		EnterRule_IncrementOperator();
		EnterRule("IncrementOperator", 126);
		TraceIn("IncrementOperator", 126);
		try
		{
			int _type = IncrementOperator;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:783:2: ( '--' | '++' )
			int alt30=2;
			try { DebugEnterDecision(30, false);
			int LA30_1 = input.LA(1);

			if ((LA30_1=='-'))
			{
				alt30 = 1;
			}
			else if ((LA30_1=='+'))
			{
				alt30 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 30, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:783:4: '--'
				{
				DebugLocation(783, 4);
				Match("--"); if (state.failed) return;


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:783:9: '++'
				{
				DebugLocation(783, 9);
				Match("++"); if (state.failed) return;


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IncrementOperator", 126);
			LeaveRule("IncrementOperator", 126);
			LeaveRule_IncrementOperator();
		}
	}
	// $ANTLR end "IncrementOperator"

	partial void EnterRule_Eol();
	partial void LeaveRule_Eol();

	// $ANTLR start "Eol"
	[GrammarRule("Eol")]
	private void mEol()
	{
		EnterRule_Eol();
		EnterRule("Eol", 127);
		TraceIn("Eol", 127);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:788:5: ( '\\n' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:788:7: '\\n'
			{
			DebugLocation(788, 7);
			Match('\n'); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("Eol", 127);
			LeaveRule("Eol", 127);
			LeaveRule_Eol();
		}
	}
	// $ANTLR end "Eol"

	partial void EnterRule_WhiteSpace();
	partial void LeaveRule_WhiteSpace();

	// $ANTLR start "WhiteSpace"
	[GrammarRule("WhiteSpace")]
	private void mWhiteSpace()
	{
		EnterRule_WhiteSpace();
		EnterRule("WhiteSpace", 128);
		TraceIn("WhiteSpace", 128);
		try
		{
			int _type = WhiteSpace;
			int _channel = DefaultTokenChannel;

				_channel=Hidden;

			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:794:2: ( ( ' ' | '\\t' | '\\n' | '\\r' )* )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:794:4: ( ' ' | '\\t' | '\\n' | '\\r' )*
			{
			DebugLocation(794, 4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:794:4: ( ' ' | '\\t' | '\\n' | '\\r' )*
			try { DebugEnterSubRule(31);
			while (true)
			{
				int alt31=2;
				try { DebugEnterDecision(31, false);
				int LA31_1 = input.LA(1);

				if (((LA31_1>='\t' && LA31_1<='\n')||LA31_1=='\r'||LA31_1==' '))
				{
					alt31 = 1;
				}


				} finally { DebugExitDecision(31); }
				switch ( alt31 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:
					{
					DebugLocation(794, 4);
					input.Consume();
					state.failed=false;

					}
					break;

				default:
					goto loop31;
				}
			}

			loop31:
				;

			} finally { DebugExitSubRule(31); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WhiteSpace", 128);
			LeaveRule("WhiteSpace", 128);
			LeaveRule_WhiteSpace();
		}
	}
	// $ANTLR end "WhiteSpace"

	public override void mTokens()
	{
		// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:8: ( Ampersand | ArrayAssign | Asterisk | Bang | ClassMember | CloseCurlyBracket | CloseRoundBracket | CloseSquareBracket | Colon | Comma | Dot | Equals | Forwardslash | Hat | InstanceMember | LogicalAnd | LogicalOr | Minus | OpenCurlyBracket | OpenRoundBracket | OpenSquareBracket | Percent | Pipe | Plus | QuestionMark | SemiColon | SuppressWarnings | Tilde | T__130 | T__131 | OP | BodyString | MultilineComment | SinglelineComment | UnixComment | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType | UnsetType | ArrayType | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Final | Abstract | Var | Const | As | Use | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Integer | Real | SingleQuotedString | DoubleQuotedString | HereDoc | VariableName | UnquotedString | AsignmentOperator | EqualityOperator | ComparisionOperator | ShiftOperator | IncrementOperator | WhiteSpace )
		int alt32=116;
		try { DebugEnterDecision(32, false);
		try
		{
			alt32 = dfa32.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(32); }
		switch (alt32)
		{
		case 1:
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:10: Ampersand
			{
			DebugLocation(1, 10);
			mAmpersand(); if (state.failed) return;

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:20: ArrayAssign
			{
			DebugLocation(1, 20);
			mArrayAssign(); if (state.failed) return;

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:32: Asterisk
			{
			DebugLocation(1, 32);
			mAsterisk(); if (state.failed) return;

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:41: Bang
			{
			DebugLocation(1, 41);
			mBang(); if (state.failed) return;

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:46: ClassMember
			{
			DebugLocation(1, 46);
			mClassMember(); if (state.failed) return;

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:58: CloseCurlyBracket
			{
			DebugLocation(1, 58);
			mCloseCurlyBracket(); if (state.failed) return;

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:76: CloseRoundBracket
			{
			DebugLocation(1, 76);
			mCloseRoundBracket(); if (state.failed) return;

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:94: CloseSquareBracket
			{
			DebugLocation(1, 94);
			mCloseSquareBracket(); if (state.failed) return;

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:113: Colon
			{
			DebugLocation(1, 113);
			mColon(); if (state.failed) return;

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:119: Comma
			{
			DebugLocation(1, 119);
			mComma(); if (state.failed) return;

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:125: Dot
			{
			DebugLocation(1, 125);
			mDot(); if (state.failed) return;

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:129: Equals
			{
			DebugLocation(1, 129);
			mEquals(); if (state.failed) return;

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:136: Forwardslash
			{
			DebugLocation(1, 136);
			mForwardslash(); if (state.failed) return;

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:149: Hat
			{
			DebugLocation(1, 149);
			mHat(); if (state.failed) return;

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:153: InstanceMember
			{
			DebugLocation(1, 153);
			mInstanceMember(); if (state.failed) return;

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:168: LogicalAnd
			{
			DebugLocation(1, 168);
			mLogicalAnd(); if (state.failed) return;

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:179: LogicalOr
			{
			DebugLocation(1, 179);
			mLogicalOr(); if (state.failed) return;

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:189: Minus
			{
			DebugLocation(1, 189);
			mMinus(); if (state.failed) return;

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:195: OpenCurlyBracket
			{
			DebugLocation(1, 195);
			mOpenCurlyBracket(); if (state.failed) return;

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:212: OpenRoundBracket
			{
			DebugLocation(1, 212);
			mOpenRoundBracket(); if (state.failed) return;

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:229: OpenSquareBracket
			{
			DebugLocation(1, 229);
			mOpenSquareBracket(); if (state.failed) return;

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:247: Percent
			{
			DebugLocation(1, 247);
			mPercent(); if (state.failed) return;

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:255: Pipe
			{
			DebugLocation(1, 255);
			mPipe(); if (state.failed) return;

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:260: Plus
			{
			DebugLocation(1, 260);
			mPlus(); if (state.failed) return;

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:265: QuestionMark
			{
			DebugLocation(1, 265);
			mQuestionMark(); if (state.failed) return;

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:278: SemiColon
			{
			DebugLocation(1, 278);
			mSemiColon(); if (state.failed) return;

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:288: SuppressWarnings
			{
			DebugLocation(1, 288);
			mSuppressWarnings(); if (state.failed) return;

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:305: Tilde
			{
			DebugLocation(1, 305);
			mTilde(); if (state.failed) return;

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:311: T__130
			{
			DebugLocation(1, 311);
			mT__130(); if (state.failed) return;

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:318: T__131
			{
			DebugLocation(1, 318);
			mT__131(); if (state.failed) return;

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:325: OP
			{
			DebugLocation(1, 325);
			mOP(); if (state.failed) return;

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:328: BodyString
			{
			DebugLocation(1, 328);
			mBodyString(); if (state.failed) return;

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:339: MultilineComment
			{
			DebugLocation(1, 339);
			mMultilineComment(); if (state.failed) return;

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:356: SinglelineComment
			{
			DebugLocation(1, 356);
			mSinglelineComment(); if (state.failed) return;

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:374: UnixComment
			{
			DebugLocation(1, 374);
			mUnixComment(); if (state.failed) return;

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:386: IntType
			{
			DebugLocation(1, 386);
			mIntType(); if (state.failed) return;

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:394: IntegerType
			{
			DebugLocation(1, 394);
			mIntegerType(); if (state.failed) return;

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:406: BoolType
			{
			DebugLocation(1, 406);
			mBoolType(); if (state.failed) return;

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:415: BooleanType
			{
			DebugLocation(1, 415);
			mBooleanType(); if (state.failed) return;

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:427: FloatType
			{
			DebugLocation(1, 427);
			mFloatType(); if (state.failed) return;

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:437: DoubleType
			{
			DebugLocation(1, 437);
			mDoubleType(); if (state.failed) return;

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:448: RealType
			{
			DebugLocation(1, 448);
			mRealType(); if (state.failed) return;

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:457: StringType
			{
			DebugLocation(1, 457);
			mStringType(); if (state.failed) return;

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:468: ObjectType
			{
			DebugLocation(1, 468);
			mObjectType(); if (state.failed) return;

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:479: UnsetType
			{
			DebugLocation(1, 479);
			mUnsetType(); if (state.failed) return;

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:489: ArrayType
			{
			DebugLocation(1, 489);
			mArrayType(); if (state.failed) return;

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:499: New
			{
			DebugLocation(1, 499);
			mNew(); if (state.failed) return;

			}
			break;
		case 48:
			DebugEnterAlt(48);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:503: Clone
			{
			DebugLocation(1, 503);
			mClone(); if (state.failed) return;

			}
			break;
		case 49:
			DebugEnterAlt(49);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:509: Echo
			{
			DebugLocation(1, 509);
			mEcho(); if (state.failed) return;

			}
			break;
		case 50:
			DebugEnterAlt(50);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:514: Print
			{
			DebugLocation(1, 514);
			mPrint(); if (state.failed) return;

			}
			break;
		case 51:
			DebugEnterAlt(51);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:520: If
			{
			DebugLocation(1, 520);
			mIf(); if (state.failed) return;

			}
			break;
		case 52:
			DebugEnterAlt(52);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:523: Else
			{
			DebugLocation(1, 523);
			mElse(); if (state.failed) return;

			}
			break;
		case 53:
			DebugEnterAlt(53);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:528: ElseIf
			{
			DebugLocation(1, 528);
			mElseIf(); if (state.failed) return;

			}
			break;
		case 54:
			DebugEnterAlt(54);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:535: For
			{
			DebugLocation(1, 535);
			mFor(); if (state.failed) return;

			}
			break;
		case 55:
			DebugEnterAlt(55);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:539: Foreach
			{
			DebugLocation(1, 539);
			mForeach(); if (state.failed) return;

			}
			break;
		case 56:
			DebugEnterAlt(56);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:547: While
			{
			DebugLocation(1, 547);
			mWhile(); if (state.failed) return;

			}
			break;
		case 57:
			DebugEnterAlt(57);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:553: Do
			{
			DebugLocation(1, 553);
			mDo(); if (state.failed) return;

			}
			break;
		case 58:
			DebugEnterAlt(58);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:556: Try
			{
			DebugLocation(1, 556);
			mTry(); if (state.failed) return;

			}
			break;
		case 59:
			DebugEnterAlt(59);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:560: Catch
			{
			DebugLocation(1, 560);
			mCatch(); if (state.failed) return;

			}
			break;
		case 60:
			DebugEnterAlt(60);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:566: Finally
			{
			DebugLocation(1, 566);
			mFinally(); if (state.failed) return;

			}
			break;
		case 61:
			DebugEnterAlt(61);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:574: Switch
			{
			DebugLocation(1, 574);
			mSwitch(); if (state.failed) return;

			}
			break;
		case 62:
			DebugEnterAlt(62);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:581: Case
			{
			DebugLocation(1, 581);
			mCase(); if (state.failed) return;

			}
			break;
		case 63:
			DebugEnterAlt(63);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:586: Default
			{
			DebugLocation(1, 586);
			mDefault(); if (state.failed) return;

			}
			break;
		case 64:
			DebugEnterAlt(64);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:594: Namespace
			{
			DebugLocation(1, 594);
			mNamespace(); if (state.failed) return;

			}
			break;
		case 65:
			DebugEnterAlt(65);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:604: Function
			{
			DebugLocation(1, 604);
			mFunction(); if (state.failed) return;

			}
			break;
		case 66:
			DebugEnterAlt(66);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:613: Break
			{
			DebugLocation(1, 613);
			mBreak(); if (state.failed) return;

			}
			break;
		case 67:
			DebugEnterAlt(67);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:619: Continue
			{
			DebugLocation(1, 619);
			mContinue(); if (state.failed) return;

			}
			break;
		case 68:
			DebugEnterAlt(68);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:628: Goto
			{
			DebugLocation(1, 628);
			mGoto(); if (state.failed) return;

			}
			break;
		case 69:
			DebugEnterAlt(69);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:633: Return
			{
			DebugLocation(1, 633);
			mReturn(); if (state.failed) return;

			}
			break;
		case 70:
			DebugEnterAlt(70);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:640: Throw
			{
			DebugLocation(1, 640);
			mThrow(); if (state.failed) return;

			}
			break;
		case 71:
			DebugEnterAlt(71);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:646: Global
			{
			DebugLocation(1, 646);
			mGlobal(); if (state.failed) return;

			}
			break;
		case 72:
			DebugEnterAlt(72);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:653: Static
			{
			DebugLocation(1, 653);
			mStatic(); if (state.failed) return;

			}
			break;
		case 73:
			DebugEnterAlt(73);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:660: And
			{
			DebugLocation(1, 660);
			mAnd(); if (state.failed) return;

			}
			break;
		case 74:
			DebugEnterAlt(74);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:664: Or
			{
			DebugLocation(1, 664);
			mOr(); if (state.failed) return;

			}
			break;
		case 75:
			DebugEnterAlt(75);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:667: Xor
			{
			DebugLocation(1, 667);
			mXor(); if (state.failed) return;

			}
			break;
		case 76:
			DebugEnterAlt(76);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:671: Instanceof
			{
			DebugLocation(1, 671);
			mInstanceof(); if (state.failed) return;

			}
			break;
		case 77:
			DebugEnterAlt(77);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:682: Null
			{
			DebugLocation(1, 682);
			mNull(); if (state.failed) return;

			}
			break;
		case 78:
			DebugEnterAlt(78);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:687: List
			{
			DebugLocation(1, 687);
			mList(); if (state.failed) return;

			}
			break;
		case 79:
			DebugEnterAlt(79);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:692: Class
			{
			DebugLocation(1, 692);
			mClass(); if (state.failed) return;

			}
			break;
		case 80:
			DebugEnterAlt(80);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:698: Interface
			{
			DebugLocation(1, 698);
			mInterface(); if (state.failed) return;

			}
			break;
		case 81:
			DebugEnterAlt(81);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:708: Extends
			{
			DebugLocation(1, 708);
			mExtends(); if (state.failed) return;

			}
			break;
		case 82:
			DebugEnterAlt(82);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:716: Implements
			{
			DebugLocation(1, 716);
			mImplements(); if (state.failed) return;

			}
			break;
		case 83:
			DebugEnterAlt(83);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:727: Final
			{
			DebugLocation(1, 727);
			mFinal(); if (state.failed) return;

			}
			break;
		case 84:
			DebugEnterAlt(84);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:733: Abstract
			{
			DebugLocation(1, 733);
			mAbstract(); if (state.failed) return;

			}
			break;
		case 85:
			DebugEnterAlt(85);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:742: Var
			{
			DebugLocation(1, 742);
			mVar(); if (state.failed) return;

			}
			break;
		case 86:
			DebugEnterAlt(86);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:746: Const
			{
			DebugLocation(1, 746);
			mConst(); if (state.failed) return;

			}
			break;
		case 87:
			DebugEnterAlt(87);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:752: As
			{
			DebugLocation(1, 752);
			mAs(); if (state.failed) return;

			}
			break;
		case 88:
			DebugEnterAlt(88);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:755: Use
			{
			DebugLocation(1, 755);
			mUse(); if (state.failed) return;

			}
			break;
		case 89:
			DebugEnterAlt(89);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:759: Require
			{
			DebugLocation(1, 759);
			mRequire(); if (state.failed) return;

			}
			break;
		case 90:
			DebugEnterAlt(90);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:767: RequireOnce
			{
			DebugLocation(1, 767);
			mRequireOnce(); if (state.failed) return;

			}
			break;
		case 91:
			DebugEnterAlt(91);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:779: Include
			{
			DebugLocation(1, 779);
			mInclude(); if (state.failed) return;

			}
			break;
		case 92:
			DebugEnterAlt(92);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:787: IncludeOnce
			{
			DebugLocation(1, 787);
			mIncludeOnce(); if (state.failed) return;

			}
			break;
		case 93:
			DebugEnterAlt(93);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:799: Public
			{
			DebugLocation(1, 799);
			mPublic(); if (state.failed) return;

			}
			break;
		case 94:
			DebugEnterAlt(94);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:806: Private
			{
			DebugLocation(1, 806);
			mPrivate(); if (state.failed) return;

			}
			break;
		case 95:
			DebugEnterAlt(95);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:814: Protected
			{
			DebugLocation(1, 814);
			mProtected(); if (state.failed) return;

			}
			break;
		case 96:
			DebugEnterAlt(96);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:824: True
			{
			DebugLocation(1, 824);
			mTrue(); if (state.failed) return;

			}
			break;
		case 97:
			DebugEnterAlt(97);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:829: False
			{
			DebugLocation(1, 829);
			mFalse(); if (state.failed) return;

			}
			break;
		case 98:
			DebugEnterAlt(98);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:835: HaltCompiler
			{
			DebugLocation(1, 835);
			mHaltCompiler(); if (state.failed) return;

			}
			break;
		case 99:
			DebugEnterAlt(99);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:848: Die
			{
			DebugLocation(1, 848);
			mDie(); if (state.failed) return;

			}
			break;
		case 100:
			DebugEnterAlt(100);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:852: Empty
			{
			DebugLocation(1, 852);
			mEmpty(); if (state.failed) return;

			}
			break;
		case 101:
			DebugEnterAlt(101);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:858: Exit
			{
			DebugLocation(1, 858);
			mExit(); if (state.failed) return;

			}
			break;
		case 102:
			DebugEnterAlt(102);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:863: Eval
			{
			DebugLocation(1, 863);
			mEval(); if (state.failed) return;

			}
			break;
		case 103:
			DebugEnterAlt(103);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:868: Isset
			{
			DebugLocation(1, 868);
			mIsset(); if (state.failed) return;

			}
			break;
		case 104:
			DebugEnterAlt(104);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:874: Integer
			{
			DebugLocation(1, 874);
			mInteger(); if (state.failed) return;

			}
			break;
		case 105:
			DebugEnterAlt(105);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:882: Real
			{
			DebugLocation(1, 882);
			mReal(); if (state.failed) return;

			}
			break;
		case 106:
			DebugEnterAlt(106);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:887: SingleQuotedString
			{
			DebugLocation(1, 887);
			mSingleQuotedString(); if (state.failed) return;

			}
			break;
		case 107:
			DebugEnterAlt(107);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:906: DoubleQuotedString
			{
			DebugLocation(1, 906);
			mDoubleQuotedString(); if (state.failed) return;

			}
			break;
		case 108:
			DebugEnterAlt(108);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:925: HereDoc
			{
			DebugLocation(1, 925);
			mHereDoc(); if (state.failed) return;

			}
			break;
		case 109:
			DebugEnterAlt(109);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:933: VariableName
			{
			DebugLocation(1, 933);
			mVariableName(); if (state.failed) return;

			}
			break;
		case 110:
			DebugEnterAlt(110);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:946: UnquotedString
			{
			DebugLocation(1, 946);
			mUnquotedString(); if (state.failed) return;

			}
			break;
		case 111:
			DebugEnterAlt(111);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:961: AsignmentOperator
			{
			DebugLocation(1, 961);
			mAsignmentOperator(); if (state.failed) return;

			}
			break;
		case 112:
			DebugEnterAlt(112);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:979: EqualityOperator
			{
			DebugLocation(1, 979);
			mEqualityOperator(); if (state.failed) return;

			}
			break;
		case 113:
			DebugEnterAlt(113);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:996: ComparisionOperator
			{
			DebugLocation(1, 996);
			mComparisionOperator(); if (state.failed) return;

			}
			break;
		case 114:
			DebugEnterAlt(114);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:1016: ShiftOperator
			{
			DebugLocation(1, 1016);
			mShiftOperator(); if (state.failed) return;

			}
			break;
		case 115:
			DebugEnterAlt(115);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:1030: IncrementOperator
			{
			DebugLocation(1, 1030);
			mIncrementOperator(); if (state.failed) return;

			}
			break;
		case 116:
			DebugEnterAlt(116);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:1:1048: WhiteSpace
			{
			DebugLocation(1, 1048);
			mWhiteSpace(); if (state.failed) return;

			}
			break;

		}

	}

	partial void EnterRule_synpred1_Php_fragment();
	partial void LeaveRule_synpred1_Php_fragment();

	// $ANTLR start synpred1_Php
	private void synpred1_Php_fragment()
	{
		EnterRule_synpred1_Php_fragment();
		EnterRule("synpred1_Php_fragment", 130);
		TraceIn("synpred1_Php_fragment", 130);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:534:5: ( '<' ~ '?' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:534:6: '<' ~ '?'
			{
			DebugLocation(534, 6);
			Match('<'); if (state.failed) return;
			DebugLocation(534, 10);
			if ((input.LA(1)>='\u0000' && input.LA(1)<='>')||(input.LA(1)>='@' && input.LA(1)<='\uFFFF'))
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred1_Php_fragment", 130);
			LeaveRule("synpred1_Php_fragment", 130);
			LeaveRule_synpred1_Php_fragment();
		}
	}
	// $ANTLR end synpred1_Php

	partial void EnterRule_synpred2_Php_fragment();
	partial void LeaveRule_synpred2_Php_fragment();

	// $ANTLR start synpred2_Php
	private void synpred2_Php_fragment()
	{
		EnterRule_synpred2_Php_fragment();
		EnterRule("synpred2_Php_fragment", 131);
		TraceIn("synpred2_Php_fragment", 131);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:539:5: ( '<' ~ '?' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:539:6: '<' ~ '?'
			{
			DebugLocation(539, 6);
			Match('<'); if (state.failed) return;
			DebugLocation(539, 10);
			if ((input.LA(1)>='\u0000' && input.LA(1)<='>')||(input.LA(1)>='@' && input.LA(1)<='\uFFFF'))
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred2_Php_fragment", 131);
			LeaveRule("synpred2_Php_fragment", 131);
			LeaveRule_synpred2_Php_fragment();
		}
	}
	// $ANTLR end synpred2_Php

	partial void EnterRule_synpred3_Php_fragment();
	partial void LeaveRule_synpred3_Php_fragment();

	// $ANTLR start synpred3_Php
	private void synpred3_Php_fragment()
	{
		EnterRule_synpred3_Php_fragment();
		EnterRule("synpred3_Php_fragment", 132);
		TraceIn("synpred3_Php_fragment", 132);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:544:10: ( '*' ~ '/' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:544:11: '*' ~ '/'
			{
			DebugLocation(544, 11);
			Match('*'); if (state.failed) return;
			DebugLocation(544, 15);
			if ((input.LA(1)>='\u0000' && input.LA(1)<='.')||(input.LA(1)>='0' && input.LA(1)<='\uFFFF'))
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred3_Php_fragment", 132);
			LeaveRule("synpred3_Php_fragment", 132);
			LeaveRule_synpred3_Php_fragment();
		}
	}
	// $ANTLR end synpred3_Php

	partial void EnterRule_synpred4_Php_fragment();
	partial void LeaveRule_synpred4_Php_fragment();

	// $ANTLR start synpred4_Php
	private void synpred4_Php_fragment()
	{
		EnterRule_synpred4_Php_fragment();
		EnterRule("synpred4_Php_fragment", 133);
		TraceIn("synpred4_Php_fragment", 133);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:548:11: ( '?' ~ '>' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:548:12: '?' ~ '>'
			{
			DebugLocation(548, 12);
			Match('?'); if (state.failed) return;
			DebugLocation(548, 16);
			if ((input.LA(1)>='\u0000' && input.LA(1)<='=')||(input.LA(1)>='?' && input.LA(1)<='\uFFFF'))
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred4_Php_fragment", 133);
			LeaveRule("synpred4_Php_fragment", 133);
			LeaveRule_synpred4_Php_fragment();
		}
	}
	// $ANTLR end synpred4_Php

	partial void EnterRule_synpred5_Php_fragment();
	partial void LeaveRule_synpred5_Php_fragment();

	// $ANTLR start synpred5_Php
	private void synpred5_Php_fragment()
	{
		EnterRule_synpred5_Php_fragment();
		EnterRule("synpred5_Php_fragment", 134);
		TraceIn("synpred5_Php_fragment", 134);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:552:9: ( '?' ~ '>' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:552:10: '?' ~ '>'
			{
			DebugLocation(552, 10);
			Match('?'); if (state.failed) return;
			DebugLocation(552, 14);
			if ((input.LA(1)>='\u0000' && input.LA(1)<='=')||(input.LA(1)>='?' && input.LA(1)<='\uFFFF'))
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred5_Php_fragment", 134);
			LeaveRule("synpred5_Php_fragment", 134);
			LeaveRule_synpred5_Php_fragment();
		}
	}
	// $ANTLR end synpred5_Php

	partial void EnterRule_synpred6_Php_fragment();
	partial void LeaveRule_synpred6_Php_fragment();

	// $ANTLR start synpred6_Php
	private void synpred6_Php_fragment()
	{
		EnterRule_synpred6_Php_fragment();
		EnterRule("synpred6_Php_fragment", 135);
		TraceIn("synpred6_Php_fragment", 135);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:683:4: ( '.' Digits )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:683:5: '.' Digits
			{
			DebugLocation(683, 5);
			Match('.'); if (state.failed) return;
			DebugLocation(683, 9);
			mDigits(); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred6_Php_fragment", 135);
			LeaveRule("synpred6_Php_fragment", 135);
			LeaveRule_synpred6_Php_fragment();
		}
	}
	// $ANTLR end synpred6_Php

	partial void EnterRule_synpred7_Php_fragment();
	partial void LeaveRule_synpred7_Php_fragment();

	// $ANTLR start synpred7_Php
	private void synpred7_Php_fragment()
	{
		EnterRule_synpred7_Php_fragment();
		EnterRule("synpred7_Php_fragment", 136);
		TraceIn("synpred7_Php_fragment", 136);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:695:10: ( '\\\\' '\\'' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:695:11: '\\\\' '\\''
			{
			DebugLocation(695, 11);
			Match('\\'); if (state.failed) return;
			DebugLocation(695, 16);
			Match('\''); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred7_Php_fragment", 136);
			LeaveRule("synpred7_Php_fragment", 136);
			LeaveRule_synpred7_Php_fragment();
		}
	}
	// $ANTLR end synpred7_Php

	partial void EnterRule_synpred8_Php_fragment();
	partial void LeaveRule_synpred8_Php_fragment();

	// $ANTLR start synpred8_Php
	private void synpred8_Php_fragment()
	{
		EnterRule_synpred8_Php_fragment();
		EnterRule("synpred8_Php_fragment", 137);
		TraceIn("synpred8_Php_fragment", 137);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:696:6: ( '\\\\' '\\\\' )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:696:7: '\\\\' '\\\\'
			{
			DebugLocation(696, 7);
			Match('\\'); if (state.failed) return;
			DebugLocation(696, 12);
			Match('\\'); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred8_Php_fragment", 137);
			LeaveRule("synpred8_Php_fragment", 137);
			LeaveRule_synpred8_Php_fragment();
		}
	}
	// $ANTLR end synpred8_Php

	partial void EnterRule_synpred9_Php_fragment();
	partial void LeaveRule_synpred9_Php_fragment();

	// $ANTLR start synpred9_Php
	private void synpred9_Php_fragment()
	{
		EnterRule_synpred9_Php_fragment();
		EnterRule("synpred9_Php_fragment", 138);
		TraceIn("synpred9_Php_fragment", 138);
		try
		{
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:707:11: ( '\\\\' EscapeCharector )
			DebugEnterAlt(1);
			// C:\\Users\\exKAZUu\\Projects\\Code2Xml\\Code2Xml.Core\\Generators\\ANTLRv3\\Php\\Php.g:707:12: '\\\\' EscapeCharector
			{
			DebugLocation(707, 12);
			Match('\\'); if (state.failed) return;
			DebugLocation(707, 17);
			mEscapeCharector(); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred9_Php_fragment", 138);
			LeaveRule("synpred9_Php_fragment", 138);
			LeaveRule_synpred9_Php_fragment();
		}
	}
	// $ANTLR end synpred9_Php

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	DFA19 dfa19;
	DFA21 dfa21;
	DFA32 dfa32;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa19 = new DFA19(this);
		dfa21 = new DFA21(this);
		dfa32 = new DFA32(this);
	}

	private class DFA19 : DFA
	{
		private const string DFA19_eotS =
			"\x4\xFFFF";
		private const string DFA19_eofS =
			"\x4\xFFFF";
		private const string DFA19_minS =
			"\x2\x2E\x2\xFFFF";
		private const string DFA19_maxS =
			"\x1\x39\x1\x65\x2\xFFFF";
		private const string DFA19_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA19_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA19_transitionS =
			{
				"\x1\x2\x1\xFFFF\xA\x1",
				"\x1\x2\x1\xFFFF\xA\x1\xB\xFFFF\x1\x3\x1F\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA19_eot = DFA.UnpackEncodedString(DFA19_eotS);
		private static readonly short[] DFA19_eof = DFA.UnpackEncodedString(DFA19_eofS);
		private static readonly char[] DFA19_min = DFA.UnpackEncodedStringToUnsignedChars(DFA19_minS);
		private static readonly char[] DFA19_max = DFA.UnpackEncodedStringToUnsignedChars(DFA19_maxS);
		private static readonly short[] DFA19_accept = DFA.UnpackEncodedString(DFA19_acceptS);
		private static readonly short[] DFA19_special = DFA.UnpackEncodedString(DFA19_specialS);
		private static readonly short[][] DFA19_transition;

		static DFA19()
		{
			int numStates = DFA19_transitionS.Length;
			DFA19_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA19_transition[i] = DFA.UnpackEncodedString(DFA19_transitionS[i]);
			}
		}

		public DFA19( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 19;
			this.eot = DFA19_eot;
			this.eof = DFA19_eof;
			this.min = DFA19_min;
			this.max = DFA19_max;
			this.accept = DFA19_accept;
			this.special = DFA19_special;
			this.transition = DFA19_transition;
		}

		public override string Description { get { return "688:4: ( Digits | DNum )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA21 : DFA
	{
		private const string DFA21_eotS =
			"\x3\xFFFF\x2\x6\x2\xFFFF\x1\x6";
		private const string DFA21_eofS =
			"\x8\xFFFF";
		private const string DFA21_minS =
			"\x1\x2E\x1\x30\x1\x2E\x2\x30\x2\xFFFF\x1\x30";
		private const string DFA21_maxS =
			"\x2\x39\x3\x65\x2\xFFFF\x1\x65";
		private const string DFA21_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1\x1\xFFFF";
		private const string DFA21_specialS =
			"\x8\xFFFF}>";
		private static readonly string[] DFA21_transitionS =
			{
				"\x1\x1\x1\xFFFF\xA\x2",
				"\xA\x3",
				"\x1\x4\x1\xFFFF\xA\x2\xB\xFFFF\x1\x5\x1F\xFFFF\x1\x5",
				"\xA\x3\xB\xFFFF\x1\x5\x1F\xFFFF\x1\x5",
				"\xA\x7\xB\xFFFF\x1\x5\x1F\xFFFF\x1\x5",
				"",
				"",
				"\xA\x7\xB\xFFFF\x1\x5\x1F\xFFFF\x1\x5"
			};

		private static readonly short[] DFA21_eot = DFA.UnpackEncodedString(DFA21_eotS);
		private static readonly short[] DFA21_eof = DFA.UnpackEncodedString(DFA21_eofS);
		private static readonly char[] DFA21_min = DFA.UnpackEncodedStringToUnsignedChars(DFA21_minS);
		private static readonly char[] DFA21_max = DFA.UnpackEncodedStringToUnsignedChars(DFA21_maxS);
		private static readonly short[] DFA21_accept = DFA.UnpackEncodedString(DFA21_acceptS);
		private static readonly short[] DFA21_special = DFA.UnpackEncodedString(DFA21_specialS);
		private static readonly short[][] DFA21_transition;

		static DFA21()
		{
			int numStates = DFA21_transitionS.Length;
			DFA21_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA21_transition[i] = DFA.UnpackEncodedString(DFA21_transitionS[i]);
			}
		}

		public DFA21( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 21;
			this.eot = DFA21_eot;
			this.eof = DFA21_eof;
			this.min = DFA21_min;
			this.max = DFA21_max;
			this.accept = DFA21_accept;
			this.special = DFA21_special;
			this.transition = DFA21_transition;
		}

		public override string Description { get { return "690:1: Real : ( DNum | Exponent_DNum );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA32 : DFA
	{
		private const string DFA32_eotS =
			"\x1\x36\x1\x39\x1\x3C\x1\x3D\x1\x3E\x1\x41\x4\xFFFF\x1\x42\x1\x46\x1"+
			"\x47\x1\x4A\x1\x4C\x3\xFFFF\x1\x4D\x1\x4E\x1\x50\x3\xFFFF\x1\x51\x2\xFFFF"+
			"\x14\x34\x2\x82\x2\xFFFF\x1\x86\x1\xFFFF\x1\x86\x1D\xFFFF\x1\x34\x1\x8B"+
			"\x9\x34\x1\x96\x6\x34\x1\xA0\x5\x34\x1\xA6\x16\x34\x1\xFFFF\x2\x82\x1"+
			"\xC3\x1\xFFFF\x1\xC3\x1\xC5\x2\x34\x1\xFFFF\x5\x34\x1\xCE\x4\x34\x1\xFFFF"+
			"\x1\x34\x1\xD4\x7\x34\x1\xFFFF\x1\x34\x1\xDD\x1\x34\x1\xDF\x1\x34\x1"+
			"\xFFFF\x1\xE1\x11\x34\x1\xF5\x4\x34\x1\xFA\x1\x34\x1\xFC\x1\x34\x2\xFFFF"+
			"\x1\x34\x1\xFFFF\x4\x34\x1\x105\x3\x34\x1\xFFFF\x5\x34\x1\xFFFF\x1\x10E"+
			"\x7\x34\x1\xFFFF\x1\x34\x1\xFFFF\x1\x34\x1\xFFFF\x1\x34\x1\x119\x3\x34"+
			"\x1\x11D\x2\x34\x1\x120\x1\x122\x1\x34\x1\x124\x1\x34\x1\x126\x5\x34"+
			"\x1\xFFFF\x1\x12C\x1\x34\x1\x12E\x1\x34\x1\xFFFF\x1\x130\x1\xFFFF\x6"+
			"\x34\x1\x137\x1\x34\x1\xFFFF\x1\x139\x1\x13A\x1\x34\x1\x13D\x1\x34\x1"+
			"\x13F\x2\x34\x1\xFFFF\x6\x34\x1\x148\x1\x149\x2\x34\x1\xFFFF\x1\x14C"+
			"\x1\x14D\x1\x14E\x1\xFFFF\x1\x34\x1\x150\x1\xFFFF\x1\x34\x1\xFFFF\x1"+
			"\x34\x1\xFFFF\x1\x153\x1\xFFFF\x1\x154\x3\x34\x1\x158\x1\xFFFF\x1\x159"+
			"\x1\xFFFF\x1\x34\x1\xFFFF\x6\x34\x1\xFFFF\x1\x34\x2\xFFFF\x2\x34\x1\xFFFF"+
			"\x1\x34\x1\xFFFF\x1\x165\x1\x34\x1\x167\x1\x34\x1\x169\x1\x16A\x1\x16B"+
			"\x1\x16C\x2\xFFFF\x2\x34\x3\xFFFF\x1\x34\x1\xFFFF\x1\x170\x1\x34\x2\xFFFF"+
			"\x2\x34\x1\x174\x2\xFFFF\x1\x175\x1\x34\x1\x177\x2\x34\x1\x17B\x1\x34"+
			"\x1\x17D\x1\x17E\x1\x17F\x1\x34\x1\xFFFF\x1\x181\x1\xFFFF\x1\x183\x4"+
			"\xFFFF\x3\x34\x1\xFFFF\x1\x187\x1\x188\x1\x34\x2\xFFFF\x1\x34\x1\xFFFF"+
			"\x3\x34\x1\xFFFF\x1\x34\x3\xFFFF\x1\x18F\x1\xFFFF\x1\x34\x1\xFFFF\x1"+
			"\x191\x1\x34\x1\x193\x2\xFFFF\x2\x34\x1\x196\x3\x34\x1\xFFFF\x1\x34\x1"+
			"\xFFFF\x1\x19B\x1\xFFFF\x1\x19C\x1\x34\x1\xFFFF\x1\x19E\x1\x34\x1\x1A0"+
			"\x1\x34\x2\xFFFF\x1\x34\x1\xFFFF\x1\x34\x1\xFFFF\x2\x34\x1\x1A6\x1\x1A7"+
			"\x1\x34\x2\xFFFF\x2\x34\x1\x1AB\x1\xFFFF";
		private const string DFA32_eofS =
			"\x1AC\xFFFF";
		private const string DFA32_minS =
			"\x1\x21\x1\x26\x3\x3D\x1\x3A\x4\xFFFF\x1\x30\x1\x2A\x1\x3D\x1\x2D\x1"+
			"\x3D\x3\xFFFF\x1\x3D\x1\x2B\x1\x3E\x3\xFFFF\x1\x41\x2\xFFFF\x1\x46\x1"+
			"\x4F\x1\x41\x2\x45\x1\x54\x1\x42\x1\x4E\x1\x42\x2\x41\x1\x43\x1\x52\x2"+
			"\x48\x1\x4C\x1\x4F\x1\x49\x1\x41\x1\x5F\x2\x2E\x2\xFFFF\x1\x3C\x1\xFFFF"+
			"\x1\x3E\x1D\xFFFF\x1\x43\x1\x30\x1\x50\x1\x53\x1\x4F\x1\x45\x1\x4F\x1"+
			"\x52\x2\x4E\x1\x4C\x1\x30\x1\x46\x1\x45\x2\x41\x1\x49\x1\x4A\x1\x30\x1"+
			"\x53\x1\x45\x1\x52\x1\x44\x1\x53\x1\x30\x1\x57\x1\x4D\x1\x4C\x1\x41\x1"+
			"\x53\x1\x4E\x1\x48\x1\x53\x1\x49\x1\x50\x1\x41\x1\x49\x1\x42\x1\x49\x1"+
			"\x55\x1\x52\x1\x54\x1\x4F\x1\x52\x1\x53\x1\x52\x1\x48\x1\xFFFF\x2\x2E"+
			"\x1\x3C\x1\xFFFF\x1\x3D\x1\x30\x1\x54\x1\x4C\x1\xFFFF\x1\x4C\x1\x45\x1"+
			"\x4C\x2\x41\x1\x30\x1\x41\x1\x43\x1\x53\x1\x42\x1\xFFFF\x1\x41\x1\x30"+
			"\x1\x4C\x2\x55\x1\x49\x2\x54\x1\x45\x1\xFFFF\x1\x45\x1\x30\x1\x41\x1"+
			"\x30\x1\x54\x1\xFFFF\x1\x30\x1\x45\x1\x4C\x1\x4E\x1\x53\x1\x43\x1\x45"+
			"\x1\x53\x1\x4F\x2\x45\x2\x54\x1\x4C\x1\x4E\x1\x54\x2\x4C\x1\x30\x1\x45"+
			"\x2\x4F\x1\x42\x1\x30\x1\x54\x1\x30\x1\x41\x2\xFFFF\x1\x47\x1\xFFFF\x1"+
			"\x41\x1\x55\x1\x45\x1\x54\x1\x30\x1\x4B\x1\x54\x1\x41\x1\xFFFF\x1\x4C"+
			"\x1\x54\x1\x45\x1\x4C\x1\x55\x1\xFFFF\x1\x30\x1\x52\x1\x49\x1\x4E\x1"+
			"\x49\x2\x43\x1\x54\x1\xFFFF\x1\x59\x1\xFFFF\x1\x52\x1\xFFFF\x1\x53\x1"+
			"\x30\x1\x45\x1\x53\x1\x48\x1\x30\x1\x49\x1\x54\x2\x30\x1\x4E\x1\x30\x1"+
			"\x59\x1\x30\x1\x54\x1\x41\x1\x45\x1\x49\x1\x45\x1\xFFFF\x1\x30\x1\x57"+
			"\x1\x30\x1\x41\x1\xFFFF\x1\x30\x1\xFFFF\x1\x4C\x1\x45\x1\x46\x1\x4E\x1"+
			"\x44\x1\x4D\x1\x30\x1\x41\x1\xFFFF\x2\x30\x1\x43\x1\x30\x1\x49\x1\x30"+
			"\x1\x45\x1\x4C\x1\xFFFF\x1\x4E\x1\x52\x1\x47\x1\x43\x1\x48\x1\x54\x2"+
			"\x30\x1\x41\x1\x50\x1\xFFFF\x3\x30\x1\xFFFF\x1\x4E\x1\x30\x1\xFFFF\x1"+
			"\x46\x1\xFFFF\x1\x44\x1\xFFFF\x1\x30\x1\xFFFF\x1\x30\x1\x54\x2\x43\x1"+
			"\x30\x1\xFFFF\x1\x30\x1\xFFFF\x1\x4C\x1\xFFFF\x1\x54\x1\x52\x1\x41\x1"+
			"\x43\x2\x45\x1\xFFFF\x1\x4E\x2\xFFFF\x1\x48\x1\x59\x1\xFFFF\x1\x4F\x1"+
			"\xFFFF\x1\x30\x1\x54\x1\x30\x1\x45\x4\x30\x2\xFFFF\x1\x43\x1\x41\x3\xFFFF"+
			"\x1\x55\x1\xFFFF\x1\x30\x1\x53\x2\xFFFF\x1\x45\x1\x54\x1\x30\x2\xFFFF"+
			"\x1\x30\x1\x5F\x1\x30\x1\x43\x1\x45\x1\x30\x1\x4E\x3\x30\x1\x4E\x1\xFFFF"+
			"\x1\x30\x1\xFFFF\x1\x30\x4\xFFFF\x1\x54\x1\x43\x1\x45\x1\xFFFF\x2\x30"+
			"\x1\x45\x2\xFFFF\x1\x43\x1\xFFFF\x1\x45\x2\x4F\x1\xFFFF\x1\x54\x3\xFFFF"+
			"\x1\x30\x1\xFFFF\x1\x4F\x1\xFFFF\x1\x30\x1\x45\x1\x30\x2\xFFFF\x1\x44"+
			"\x1\x4F\x1\x30\x1\x46\x1\x4E\x1\x53\x1\xFFFF\x1\x4E\x1\xFFFF\x1\x30\x1"+
			"\xFFFF\x1\x30\x1\x4D\x1\xFFFF\x1\x30\x1\x43\x1\x30\x1\x43\x2\xFFFF\x1"+
			"\x50\x1\xFFFF\x1\x45\x1\xFFFF\x1\x45\x1\x49\x2\x30\x1\x4C\x2\xFFFF\x1"+
			"\x45\x1\x52\x1\x30\x1\xFFFF";
		private const string DFA32_maxS =
			"\x1\x7E\x1\x3D\x1\x3E\x3\x3D\x4\xFFFF\x3\x3D\x1\x3E\x1\x7C\x3\xFFFF\x2"+
			"\x3D\x1\x3E\x3\xFFFF\x1\x7A\x2\xFFFF\x1\x73\x1\x72\x1\x75\x1\x6F\x1\x65"+
			"\x1\x77\x1\x72\x2\x73\x1\x75\x1\x6F\x1\x78\x1\x75\x1\x68\x1\x72\x2\x6F"+
			"\x1\x69\x1\x61\x1\x5F\x2\x65\x2\xFFFF\x1\x3C\x1\xFFFF\x1\x3E\x1D\xFFFF"+
			"\x1\x74\x1\x7A\x1\x70\x1\x73\x1\x6F\x1\x65\x1\x6F\x1\x72\x2\x6E\x1\x6C"+
			"\x1\x7A\x1\x66\x1\x65\x1\x74\x1\x72\x1\x69\x1\x6A\x1\x7A\x1\x73\x1\x65"+
			"\x1\x72\x1\x64\x1\x73\x1\x7A\x1\x77\x1\x6D\x1\x6C\x1\x6F\x1\x74\x1\x6E"+
			"\x1\x68\x1\x73\x1\x74\x1\x70\x1\x61\x1\x6F\x1\x62\x1\x69\x1\x79\x1\x72"+
			"\x1\x74\x1\x6F\x1\x72\x1\x73\x1\x72\x1\x68\x1\xFFFF\x2\x65\x1\x3D\x1"+
			"\xFFFF\x1\x3D\x1\x7A\x1\x74\x1\x6C\x1\xFFFF\x1\x6C\x1\x65\x1\x6C\x2\x61"+
			"\x1\x7A\x1\x61\x1\x63\x1\x73\x1\x62\x1\xFFFF\x1\x61\x1\x7A\x1\x6C\x2"+
			"\x75\x1\x69\x2\x74\x1\x65\x1\xFFFF\x1\x65\x1\x7A\x1\x61\x1\x7A\x1\x74"+
			"\x1\xFFFF\x1\x7A\x1\x65\x1\x6C\x1\x6E\x1\x73\x1\x63\x1\x65\x1\x74\x1"+
			"\x6F\x2\x65\x2\x74\x1\x6C\x1\x76\x1\x74\x2\x6C\x1\x7A\x1\x65\x2\x6F\x1"+
			"\x62\x1\x7A\x1\x74\x1\x7A\x1\x61\x2\xFFFF\x1\x72\x1\xFFFF\x1\x61\x1\x75"+
			"\x1\x65\x1\x74\x1\x7A\x1\x6B\x1\x74\x1\x61\x1\xFFFF\x1\x6C\x1\x74\x1"+
			"\x65\x1\x6C\x1\x75\x1\xFFFF\x1\x7A\x1\x72\x1\x69\x1\x6E\x1\x69\x2\x63"+
			"\x1\x74\x1\xFFFF\x1\x79\x1\xFFFF\x1\x72\x1\xFFFF\x1\x73\x1\x7A\x1\x65"+
			"\x1\x73\x1\x68\x1\x7A\x1\x69\x1\x74\x2\x7A\x1\x6E\x1\x7A\x1\x79\x1\x7A"+
			"\x1\x74\x1\x61\x1\x65\x1\x69\x1\x65\x1\xFFFF\x1\x7A\x1\x77\x1\x7A\x1"+
			"\x61\x1\xFFFF\x1\x7A\x1\xFFFF\x1\x6C\x1\x65\x1\x66\x1\x6E\x1\x64\x1\x6D"+
			"\x1\x7A\x1\x61\x1\xFFFF\x2\x7A\x1\x63\x1\x7A\x1\x69\x1\x7A\x1\x65\x1"+
			"\x6C\x1\xFFFF\x1\x6E\x1\x72\x1\x67\x1\x63\x1\x68\x1\x74\x2\x7A\x1\x61"+
			"\x1\x70\x1\xFFFF\x3\x7A\x1\xFFFF\x1\x6E\x1\x7A\x1\xFFFF\x1\x66\x1\xFFFF"+
			"\x1\x64\x1\xFFFF\x1\x7A\x1\xFFFF\x1\x7A\x1\x74\x2\x63\x1\x7A\x1\xFFFF"+
			"\x1\x7A\x1\xFFFF\x1\x6C\x1\xFFFF\x1\x74\x1\x72\x1\x61\x1\x63\x2\x65\x1"+
			"\xFFFF\x1\x6E\x2\xFFFF\x1\x68\x1\x79\x1\xFFFF\x1\x6F\x1\xFFFF\x1\x7A"+
			"\x1\x74\x1\x7A\x1\x65\x4\x7A\x2\xFFFF\x1\x63\x1\x61\x3\xFFFF\x1\x75\x1"+
			"\xFFFF\x1\x7A\x1\x73\x2\xFFFF\x1\x65\x1\x74\x1\x7A\x2\xFFFF\x1\x7A\x1"+
			"\x5F\x1\x7A\x1\x63\x1\x65\x1\x7A\x1\x6E\x3\x7A\x1\x6E\x1\xFFFF\x1\x7A"+
			"\x1\xFFFF\x1\x7A\x4\xFFFF\x1\x74\x1\x63\x1\x65\x1\xFFFF\x2\x7A\x1\x65"+
			"\x2\xFFFF\x1\x63\x1\xFFFF\x1\x65\x2\x6F\x1\xFFFF\x1\x74\x3\xFFFF\x1\x7A"+
			"\x1\xFFFF\x1\x6F\x1\xFFFF\x1\x7A\x1\x65\x1\x7A\x2\xFFFF\x1\x64\x1\x6F"+
			"\x1\x7A\x1\x66\x1\x6E\x1\x73\x1\xFFFF\x1\x6E\x1\xFFFF\x1\x7A\x1\xFFFF"+
			"\x1\x7A\x1\x6D\x1\xFFFF\x1\x7A\x1\x63\x1\x7A\x1\x63\x2\xFFFF\x1\x70\x1"+
			"\xFFFF\x1\x65\x1\xFFFF\x1\x65\x1\x69\x2\x7A\x1\x6C\x2\xFFFF\x1\x65\x1"+
			"\x72\x1\x7A\x1\xFFFF";
		private const string DFA32_acceptS =
			"\x6\xFFFF\x1\x6\x1\x7\x1\x8\x1\xA\x5\xFFFF\x1\x13\x1\x14\x1\x15\x3\xFFFF"+
			"\x1\x1A\x1\x1B\x1\x1C\x1\xFFFF\x1\x1E\x1\x23\x16\xFFFF\x1\x6A\x1\x6B"+
			"\x1\xFFFF\x1\x6E\x1\xFFFF\x1\x74\x1\x10\x1\x6F\x1\x1\x1\x2\x1\x70\x1"+
			"\xC\x1\x3\x1\x4\x1\x5\x1\x1F\x1\x9\x1\xB\x1\x69\x1\x21\x1\x22\x1\xD\x1"+
			"\xE\x1\xF\x1\x73\x1\x12\x1\x11\x1\x17\x1\x16\x1\x18\x1\x20\x1\x19\x1"+
			"\x1D\x1\x6D\x2F\xFFFF\x1\x68\x3\xFFFF\x1\x71\x4\xFFFF\x1\x33\xA\xFFFF"+
			"\x1\x39\x9\xFFFF\x1\x4A\x5\xFFFF\x1\x57\x1B\xFFFF\x1\x6C\x1\x72\x1\xFFFF"+
			"\x1\x24\x8\xFFFF\x1\x36\x5\xFFFF\x1\x63\x8\xFFFF\x1\x58\x1\xFFFF\x1\x49"+
			"\x1\xFFFF\x1\x2F\x13\xFFFF\x1\x3A\x4\xFFFF\x1\x4B\x1\xFFFF\x1\x55\x8"+
			"\xFFFF\x1\x26\x8\xFFFF\x1\x2A\xA\xFFFF\x1\x4D\x3\xFFFF\x1\x3E\x2\xFFFF"+
			"\x1\x31\x1\xFFFF\x1\x34\x1\xFFFF\x1\x65\x1\xFFFF\x1\x66\x5\xFFFF\x1\x60"+
			"\x1\xFFFF\x1\x44\x1\xFFFF\x1\x4E\x6\xFFFF\x1\x67\x1\xFFFF\x1\x42\x1\x28"+
			"\x2\xFFFF\x1\x53\x1\xFFFF\x1\x61\x8\xFFFF\x1\x2D\x1\x2E\x2\xFFFF\x1\x30"+
			"\x1\x4F\x1\x3B\x1\xFFFF\x1\x56\x2\xFFFF\x1\x64\x1\x32\x3\xFFFF\x1\x38"+
			"\x1\x46\xB\xFFFF\x1\x29\x1\xFFFF\x1\x45\x1\xFFFF\x1\x2B\x1\x48\x1\x3D"+
			"\x1\x2C\x3\xFFFF\x1\x35\x3\xFFFF\x1\x5D\x1\x47\x1\xFFFF\x1\x25\x3\xFFFF"+
			"\x1\x5B\x1\xFFFF\x1\x27\x1\x37\x1\x3C\x1\xFFFF\x1\x3F\x1\xFFFF\x1\x59"+
			"\x3\xFFFF\x1\x51\x1\x5E\x6\xFFFF\x1\x41\x1\xFFFF\x1\x54\x1\xFFFF\x1\x43"+
			"\x2\xFFFF\x1\x50\x4\xFFFF\x1\x40\x1\x5F\x1\xFFFF\x1\x4C\x1\xFFFF\x1\x52"+
			"\x5\xFFFF\x1\x5C\x1\x5A\x3\xFFFF\x1\x62";
		private const string DFA32_specialS =
			"\x1AC\xFFFF}>";
		private static readonly string[] DFA32_transitionS =
			{
				"\x1\x4\x1\x32\x1\x1A\x1\x18\x1\x12\x1\x1\x1\x31\x1\x10\x1\x7\x1\x3\x1"+
				"\x13\x1\x9\x1\xD\x1\xA\x1\xB\x1\x2F\x9\x30\x1\x5\x1\x15\x1\x33\x1\x2"+
				"\x1\x35\x1\x14\x1\x16\x1\x23\x1\x1C\x1\x25\x1\x1E\x1\x26\x1\x1D\x1\x2A"+
				"\x1\x34\x1\x1B\x2\x34\x1\x2C\x1\x34\x1\x24\x1\x21\x1\x27\x1\x34\x1\x1F"+
				"\x1\x20\x1\x29\x1\x22\x1\x2D\x1\x28\x1\x2B\x2\x34\x1\x11\x1\x19\x1\x8"+
				"\x1\xC\x1\x2E\x1\xFFFF\x1\x23\x1\x1C\x1\x25\x1\x1E\x1\x26\x1\x1D\x1"+
				"\x2A\x1\x34\x1\x1B\x2\x34\x1\x2C\x1\x34\x1\x24\x1\x21\x1\x27\x1\x34"+
				"\x1\x1F\x1\x20\x1\x29\x1\x22\x1\x2D\x1\x28\x1\x2B\x2\x34\x1\xF\x1\xE"+
				"\x1\x6\x1\x17",
				"\x1\x37\x16\xFFFF\x1\x38",
				"\x1\x3B\x1\x3A",
				"\x1\x38",
				"\x1\x3B",
				"\x1\x3F\x2\xFFFF\x1\x40",
				"",
				"",
				"",
				"",
				"\xA\x43\x3\xFFFF\x1\x38",
				"\x1\x44\x4\xFFFF\x1\x45\xD\xFFFF\x1\x38",
				"\x1\x38",
				"\x1\x49\xF\xFFFF\x1\x38\x1\x48",
				"\x1\x38\x3E\xFFFF\x1\x4B",
				"",
				"",
				"",
				"\x1\x38",
				"\x1\x49\x11\xFFFF\x1\x38",
				"\x1\x4F",
				"",
				"",
				"",
				"\x1A\x52\x4\xFFFF\x1\x52\x1\xFFFF\x1A\x52",
				"",
				"",
				"\x1\x54\x6\xFFFF\x1\x55\x1\x53\x4\xFFFF\x1\x56\x12\xFFFF\x1\x54\x6\xFFFF"+
				"\x1\x55\x1\x53\x4\xFFFF\x1\x56",
				"\x1\x57\x2\xFFFF\x1\x58\x1C\xFFFF\x1\x57\x2\xFFFF\x1\x58",
				"\x1\x5D\x7\xFFFF\x1\x5B\x2\xFFFF\x1\x59\x2\xFFFF\x1\x5A\x5\xFFFF\x1"+
				"\x5C\xB\xFFFF\x1\x5D\x7\xFFFF\x1\x5B\x2\xFFFF\x1\x59\x2\xFFFF\x1\x5A"+
				"\x5\xFFFF\x1\x5C",
				"\x1\x5F\x3\xFFFF\x1\x60\x5\xFFFF\x1\x5E\x15\xFFFF\x1\x5F\x3\xFFFF\x1"+
				"\x60\x5\xFFFF\x1\x5E",
				"\x1\x61\x1F\xFFFF\x1\x61",
				"\x1\x62\x2\xFFFF\x1\x63\x1C\xFFFF\x1\x62\x2\xFFFF\x1\x63",
				"\x1\x64\xF\xFFFF\x1\x65\xF\xFFFF\x1\x64\xF\xFFFF\x1\x65",
				"\x1\x66\x4\xFFFF\x1\x67\x1A\xFFFF\x1\x66\x4\xFFFF\x1\x67",
				"\x1\x6A\xB\xFFFF\x1\x69\x3\xFFFF\x1\x68\x1\x6B\xE\xFFFF\x1\x6A\xB\xFFFF"+
				"\x1\x69\x3\xFFFF\x1\x68\x1\x6B",
				"\x1\x6D\x3\xFFFF\x1\x6C\xF\xFFFF\x1\x6E\xB\xFFFF\x1\x6D\x3\xFFFF\x1"+
				"\x6C\xF\xFFFF\x1\x6E",
				"\x1\x70\xA\xFFFF\x1\x6F\x2\xFFFF\x1\x71\x11\xFFFF\x1\x70\xA\xFFFF\x1"+
				"\x6F\x2\xFFFF\x1\x71",
				"\x1\x72\x8\xFFFF\x1\x73\x1\x75\x8\xFFFF\x1\x76\x1\xFFFF\x1\x74\xA\xFFFF"+
				"\x1\x72\x8\xFFFF\x1\x73\x1\x75\x8\xFFFF\x1\x76\x1\xFFFF\x1\x74",
				"\x1\x77\x2\xFFFF\x1\x78\x1C\xFFFF\x1\x77\x2\xFFFF\x1\x78",
				"\x1\x79\x1F\xFFFF\x1\x79",
				"\x1\x7B\x9\xFFFF\x1\x7A\x15\xFFFF\x1\x7B\x9\xFFFF\x1\x7A",
				"\x1\x7D\x2\xFFFF\x1\x7C\x1C\xFFFF\x1\x7D\x2\xFFFF\x1\x7C",
				"\x1\x7E\x1F\xFFFF\x1\x7E",
				"\x1\x7F\x1F\xFFFF\x1\x7F",
				"\x1\x80\x1F\xFFFF\x1\x80",
				"\x1\x81",
				"\x1\x43\x1\xFFFF\x8\x83\x2\x43\xB\xFFFF\x1\x43\x1F\xFFFF\x1\x43",
				"\x1\x43\x1\xFFFF\xA\x84\xB\xFFFF\x1\x43\x1F\xFFFF\x1\x43",
				"",
				"",
				"\x1\x85",
				"",
				"\x1\x87",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x8A\xF\xFFFF\x1\x89\x1\x88\xE\xFFFF\x1\x8A\xF\xFFFF\x1\x89\x1\x88",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x8C\x1F\xFFFF\x1\x8C",
				"\x1\x8D\x1F\xFFFF\x1\x8D",
				"\x1\x8E\x1F\xFFFF\x1\x8E",
				"\x1\x8F\x1F\xFFFF\x1\x8F",
				"\x1\x90\x1F\xFFFF\x1\x90",
				"\x1\x91\x1F\xFFFF\x1\x91",
				"\x1\x92\x1F\xFFFF\x1\x92",
				"\x1\x93\x1F\xFFFF\x1\x93",
				"\x1\x94\x1F\xFFFF\x1\x94",
				"\xA\x34\x7\xFFFF\x14\x34\x1\x95\x5\x34\x4\xFFFF\x1\x34\x1\xFFFF\x14"+
				"\x34\x1\x95\x5\x34",
				"\x1\x97\x1F\xFFFF\x1\x97",
				"\x1\x98\x1F\xFFFF\x1\x98",
				"\x1\x99\xF\xFFFF\x1\x9B\x2\xFFFF\x1\x9A\xC\xFFFF\x1\x99\xF\xFFFF\x1"+
				"\x9B\x2\xFFFF\x1\x9A",
				"\x1\x9D\x10\xFFFF\x1\x9C\xE\xFFFF\x1\x9D\x10\xFFFF\x1\x9C",
				"\x1\x9E\x1F\xFFFF\x1\x9E",
				"\x1\x9F\x1F\xFFFF\x1\x9F",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\xA1\x1F\xFFFF\x1\xA1",
				"\x1\xA2\x1F\xFFFF\x1\xA2",
				"\x1\xA3\x1F\xFFFF\x1\xA3",
				"\x1\xA4\x1F\xFFFF\x1\xA4",
				"\x1\xA5\x1F\xFFFF\x1\xA5",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\xA7\x1F\xFFFF\x1\xA7",
				"\x1\xA8\x1F\xFFFF\x1\xA8",
				"\x1\xA9\x1F\xFFFF\x1\xA9",
				"\x1\xAB\xD\xFFFF\x1\xAA\x11\xFFFF\x1\xAB\xD\xFFFF\x1\xAA",
				"\x1\xAD\x1\xAC\x1E\xFFFF\x1\xAD\x1\xAC",
				"\x1\xAE\x1F\xFFFF\x1\xAE",
				"\x1\xAF\x1F\xFFFF\x1\xAF",
				"\x1\xB0\x1F\xFFFF\x1\xB0",
				"\x1\xB2\xA\xFFFF\x1\xB1\x14\xFFFF\x1\xB2\xA\xFFFF\x1\xB1",
				"\x1\xB3\x1F\xFFFF\x1\xB3",
				"\x1\xB4\x1F\xFFFF\x1\xB4",
				"\x1\xB5\x5\xFFFF\x1\xB6\x19\xFFFF\x1\xB5\x5\xFFFF\x1\xB6",
				"\x1\xB7\x1F\xFFFF\x1\xB7",
				"\x1\xB8\x1F\xFFFF\x1\xB8",
				"\x1\xBA\x3\xFFFF\x1\xB9\x1B\xFFFF\x1\xBA\x3\xFFFF\x1\xB9",
				"\x1\xBB\x1F\xFFFF\x1\xBB",
				"\x1\xBC\x1F\xFFFF\x1\xBC",
				"\x1\xBD\x1F\xFFFF\x1\xBD",
				"\x1\xBE\x1F\xFFFF\x1\xBE",
				"\x1\xBF\x1F\xFFFF\x1\xBF",
				"\x1\xC0\x1F\xFFFF\x1\xC0",
				"\x1\xC1\x1F\xFFFF\x1\xC1",
				"",
				"\x1\x43\x1\xFFFF\x8\x83\x2\x43\xB\xFFFF\x1\x43\x1F\xFFFF\x1\x43",
				"\x1\x43\x1\xFFFF\xA\x84\xB\xFFFF\x1\x43\x1F\xFFFF\x1\x43",
				"\x1\xC2\x1\x38",
				"",
				"\x1\x38",
				"\xA\x34\x7\xFFFF\x4\x34\x1\xC4\x15\x34\x4\xFFFF\x1\x34\x1\xFFFF\x4\x34"+
				"\x1\xC4\x15\x34",
				"\x1\xC6\x1F\xFFFF\x1\xC6",
				"\x1\xC7\x1F\xFFFF\x1\xC7",
				"",
				"\x1\xC8\x1F\xFFFF\x1\xC8",
				"\x1\xC9\x1F\xFFFF\x1\xC9",
				"\x1\xCA\x1F\xFFFF\x1\xCA",
				"\x1\xCB\x1F\xFFFF\x1\xCB",
				"\x1\xCC\x1F\xFFFF\x1\xCC",
				"\xA\x34\x7\xFFFF\x4\x34\x1\xCD\x15\x34\x4\xFFFF\x1\x34\x1\xFFFF\x4\x34"+
				"\x1\xCD\x15\x34",
				"\x1\xCF\x1F\xFFFF\x1\xCF",
				"\x1\xD0\x1F\xFFFF\x1\xD0",
				"\x1\xD1\x1F\xFFFF\x1\xD1",
				"\x1\xD2\x1F\xFFFF\x1\xD2",
				"",
				"\x1\xD3\x1F\xFFFF\x1\xD3",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\xD5\x1F\xFFFF\x1\xD5",
				"\x1\xD6\x1F\xFFFF\x1\xD6",
				"\x1\xD7\x1F\xFFFF\x1\xD7",
				"\x1\xD8\x1F\xFFFF\x1\xD8",
				"\x1\xD9\x1F\xFFFF\x1\xD9",
				"\x1\xDA\x1F\xFFFF\x1\xDA",
				"\x1\xDB\x1F\xFFFF\x1\xDB",
				"",
				"\x1\xDC\x1F\xFFFF\x1\xDC",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\xDE\x1F\xFFFF\x1\xDE",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\xE0\x1F\xFFFF\x1\xE0",
				"",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\xE2\x1F\xFFFF\x1\xE2",
				"\x1\xE3\x1F\xFFFF\x1\xE3",
				"\x1\xE4\x1F\xFFFF\x1\xE4",
				"\x1\xE5\x1F\xFFFF\x1\xE5",
				"\x1\xE6\x1F\xFFFF\x1\xE6",
				"\x1\xE7\x1F\xFFFF\x1\xE7",
				"\x1\xE9\x1\xE8\x1E\xFFFF\x1\xE9\x1\xE8",
				"\x1\xEA\x1F\xFFFF\x1\xEA",
				"\x1\xEB\x1F\xFFFF\x1\xEB",
				"\x1\xEC\x1F\xFFFF\x1\xEC",
				"\x1\xED\x1F\xFFFF\x1\xED",
				"\x1\xEE\x1F\xFFFF\x1\xEE",
				"\x1\xEF\x1F\xFFFF\x1\xEF",
				"\x1\xF0\x7\xFFFF\x1\xF1\x17\xFFFF\x1\xF0\x7\xFFFF\x1\xF1",
				"\x1\xF2\x1F\xFFFF\x1\xF2",
				"\x1\xF3\x1F\xFFFF\x1\xF3",
				"\x1\xF4\x1F\xFFFF\x1\xF4",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\xF6\x1F\xFFFF\x1\xF6",
				"\x1\xF7\x1F\xFFFF\x1\xF7",
				"\x1\xF8\x1F\xFFFF\x1\xF8",
				"\x1\xF9\x1F\xFFFF\x1\xF9",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\xFB\x1F\xFFFF\x1\xFB",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\xFD\x1F\xFFFF\x1\xFD",
				"",
				"",
				"\x1\xFE\xA\xFFFF\x1\xFF\x14\xFFFF\x1\xFE\xA\xFFFF\x1\xFF",
				"",
				"\x1\x100\x1F\xFFFF\x1\x100",
				"\x1\x101\x1F\xFFFF\x1\x101",
				"\x1\x102\x1F\xFFFF\x1\x102",
				"\x1\x103\x1F\xFFFF\x1\x103",
				"\xA\x34\x7\xFFFF\x4\x34\x1\x104\x15\x34\x4\xFFFF\x1\x34\x1\xFFFF\x4"+
				"\x34\x1\x104\x15\x34",
				"\x1\x106\x1F\xFFFF\x1\x106",
				"\x1\x107\x1F\xFFFF\x1\x107",
				"\x1\x108\x1F\xFFFF\x1\x108",
				"",
				"\x1\x109\x1F\xFFFF\x1\x109",
				"\x1\x10A\x1F\xFFFF\x1\x10A",
				"\x1\x10B\x1F\xFFFF\x1\x10B",
				"\x1\x10C\x1F\xFFFF\x1\x10C",
				"\x1\x10D\x1F\xFFFF\x1\x10D",
				"",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x10F\x1F\xFFFF\x1\x10F",
				"\x1\x110\x1F\xFFFF\x1\x110",
				"\x1\x111\x1F\xFFFF\x1\x111",
				"\x1\x112\x1F\xFFFF\x1\x112",
				"\x1\x113\x1F\xFFFF\x1\x113",
				"\x1\x114\x1F\xFFFF\x1\x114",
				"\x1\x115\x1F\xFFFF\x1\x115",
				"",
				"\x1\x116\x1F\xFFFF\x1\x116",
				"",
				"\x1\x117\x1F\xFFFF\x1\x117",
				"",
				"\x1\x118\x1F\xFFFF\x1\x118",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x11A\x1F\xFFFF\x1\x11A",
				"\x1\x11B\x1F\xFFFF\x1\x11B",
				"\x1\x11C\x1F\xFFFF\x1\x11C",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x11E\x1F\xFFFF\x1\x11E",
				"\x1\x11F\x1F\xFFFF\x1\x11F",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\xA\x34\x7\xFFFF\x8\x34\x1\x121\x11\x34\x4\xFFFF\x1\x34\x1\xFFFF\x8"+
				"\x34\x1\x121\x11\x34",
				"\x1\x123\x1F\xFFFF\x1\x123",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x125\x1F\xFFFF\x1\x125",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x127\x1F\xFFFF\x1\x127",
				"\x1\x128\x1F\xFFFF\x1\x128",
				"\x1\x129\x1F\xFFFF\x1\x129",
				"\x1\x12A\x1F\xFFFF\x1\x12A",
				"\x1\x12B\x1F\xFFFF\x1\x12B",
				"",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x12D\x1F\xFFFF\x1\x12D",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x12F\x1F\xFFFF\x1\x12F",
				"",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"",
				"\x1\x131\x1F\xFFFF\x1\x131",
				"\x1\x132\x1F\xFFFF\x1\x132",
				"\x1\x133\x1F\xFFFF\x1\x133",
				"\x1\x134\x1F\xFFFF\x1\x134",
				"\x1\x135\x1F\xFFFF\x1\x135",
				"\x1\x136\x1F\xFFFF\x1\x136",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x138\x1F\xFFFF\x1\x138",
				"",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x13B\x1F\xFFFF\x1\x13B",
				"\xA\x34\x7\xFFFF\xB\x34\x1\x13C\xE\x34\x4\xFFFF\x1\x34\x1\xFFFF\xB\x34"+
				"\x1\x13C\xE\x34",
				"\x1\x13E\x1F\xFFFF\x1\x13E",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x140\x1F\xFFFF\x1\x140",
				"\x1\x141\x1F\xFFFF\x1\x141",
				"",
				"\x1\x142\x1F\xFFFF\x1\x142",
				"\x1\x143\x1F\xFFFF\x1\x143",
				"\x1\x144\x1F\xFFFF\x1\x144",
				"\x1\x145\x1F\xFFFF\x1\x145",
				"\x1\x146\x1F\xFFFF\x1\x146",
				"\x1\x147\x1F\xFFFF\x1\x147",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x14A\x1F\xFFFF\x1\x14A",
				"\x1\x14B\x1F\xFFFF\x1\x14B",
				"",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"",
				"\x1\x14F\x1F\xFFFF\x1\x14F",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"",
				"\x1\x151\x1F\xFFFF\x1\x151",
				"",
				"\x1\x152\x1F\xFFFF\x1\x152",
				"",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x155\x1F\xFFFF\x1\x155",
				"\x1\x156\x1F\xFFFF\x1\x156",
				"\x1\x157\x1F\xFFFF\x1\x157",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"",
				"\x1\x15A\x1F\xFFFF\x1\x15A",
				"",
				"\x1\x15B\x1F\xFFFF\x1\x15B",
				"\x1\x15C\x1F\xFFFF\x1\x15C",
				"\x1\x15D\x1F\xFFFF\x1\x15D",
				"\x1\x15E\x1F\xFFFF\x1\x15E",
				"\x1\x15F\x1F\xFFFF\x1\x15F",
				"\x1\x160\x1F\xFFFF\x1\x160",
				"",
				"\x1\x161\x1F\xFFFF\x1\x161",
				"",
				"",
				"\x1\x162\x1F\xFFFF\x1\x162",
				"\x1\x163\x1F\xFFFF\x1\x163",
				"",
				"\x1\x164\x1F\xFFFF\x1\x164",
				"",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x166\x1F\xFFFF\x1\x166",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x168\x1F\xFFFF\x1\x168",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"",
				"",
				"\x1\x16D\x1F\xFFFF\x1\x16D",
				"\x1\x16E\x1F\xFFFF\x1\x16E",
				"",
				"",
				"",
				"\x1\x16F\x1F\xFFFF\x1\x16F",
				"",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x171\x1F\xFFFF\x1\x171",
				"",
				"",
				"\x1\x172\x1F\xFFFF\x1\x172",
				"\x1\x173\x1F\xFFFF\x1\x173",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"",
				"",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x176",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x178\x1F\xFFFF\x1\x178",
				"\x1\x179\x1F\xFFFF\x1\x179",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x17A\x1\xFFFF\x1A\x34",
				"\x1\x17C\x1F\xFFFF\x1\x17C",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x180\x1F\xFFFF\x1\x180",
				"",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x182\x1\xFFFF\x1A\x34",
				"",
				"",
				"",
				"",
				"\x1\x184\x1F\xFFFF\x1\x184",
				"\x1\x185\x1F\xFFFF\x1\x185",
				"\x1\x186\x1F\xFFFF\x1\x186",
				"",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x189\x1F\xFFFF\x1\x189",
				"",
				"",
				"\x1\x18A\x1F\xFFFF\x1\x18A",
				"",
				"\x1\x18B\x1F\xFFFF\x1\x18B",
				"\x1\x18C\x1F\xFFFF\x1\x18C",
				"\x1\x18D\x1F\xFFFF\x1\x18D",
				"",
				"\x1\x18E\x1F\xFFFF\x1\x18E",
				"",
				"",
				"",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"",
				"\x1\x190\x1F\xFFFF\x1\x190",
				"",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x192\x1F\xFFFF\x1\x192",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"",
				"",
				"\x1\x194\x1F\xFFFF\x1\x194",
				"\x1\x195\x1F\xFFFF\x1\x195",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x197\x1F\xFFFF\x1\x197",
				"\x1\x198\x1F\xFFFF\x1\x198",
				"\x1\x199\x1F\xFFFF\x1\x199",
				"",
				"\x1\x19A\x1F\xFFFF\x1\x19A",
				"",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x19D\x1F\xFFFF\x1\x19D",
				"",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x19F\x1F\xFFFF\x1\x19F",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x1A1\x1F\xFFFF\x1\x1A1",
				"",
				"",
				"\x1\x1A2\x1F\xFFFF\x1\x1A2",
				"",
				"\x1\x1A3\x1F\xFFFF\x1\x1A3",
				"",
				"\x1\x1A4\x1F\xFFFF\x1\x1A4",
				"\x1\x1A5\x1F\xFFFF\x1\x1A5",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				"\x1\x1A8\x1F\xFFFF\x1\x1A8",
				"",
				"",
				"\x1\x1A9\x1F\xFFFF\x1\x1A9",
				"\x1\x1AA\x1F\xFFFF\x1\x1AA",
				"\xA\x34\x7\xFFFF\x1A\x34\x4\xFFFF\x1\x34\x1\xFFFF\x1A\x34",
				""
			};

		private static readonly short[] DFA32_eot = DFA.UnpackEncodedString(DFA32_eotS);
		private static readonly short[] DFA32_eof = DFA.UnpackEncodedString(DFA32_eofS);
		private static readonly char[] DFA32_min = DFA.UnpackEncodedStringToUnsignedChars(DFA32_minS);
		private static readonly char[] DFA32_max = DFA.UnpackEncodedStringToUnsignedChars(DFA32_maxS);
		private static readonly short[] DFA32_accept = DFA.UnpackEncodedString(DFA32_acceptS);
		private static readonly short[] DFA32_special = DFA.UnpackEncodedString(DFA32_specialS);
		private static readonly short[][] DFA32_transition;

		static DFA32()
		{
			int numStates = DFA32_transitionS.Length;
			DFA32_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA32_transition[i] = DFA.UnpackEncodedString(DFA32_transitionS[i]);
			}
		}

		public DFA32( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 32;
			this.eot = DFA32_eot;
			this.eof = DFA32_eof;
			this.min = DFA32_min;
			this.max = DFA32_max;
			this.accept = DFA32_accept;
			this.special = DFA32_special;
			this.transition = DFA32_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( Ampersand | ArrayAssign | Asterisk | Bang | ClassMember | CloseCurlyBracket | CloseRoundBracket | CloseSquareBracket | Colon | Comma | Dot | Equals | Forwardslash | Hat | InstanceMember | LogicalAnd | LogicalOr | Minus | OpenCurlyBracket | OpenRoundBracket | OpenSquareBracket | Percent | Pipe | Plus | QuestionMark | SemiColon | SuppressWarnings | Tilde | T__130 | T__131 | OP | BodyString | MultilineComment | SinglelineComment | UnixComment | IntType | IntegerType | BoolType | BooleanType | FloatType | DoubleType | RealType | StringType | ObjectType | UnsetType | ArrayType | New | Clone | Echo | Print | If | Else | ElseIf | For | Foreach | While | Do | Try | Catch | Finally | Switch | Case | Default | Namespace | Function | Break | Continue | Goto | Return | Throw | Global | Static | And | Or | Xor | Instanceof | Null | List | Class | Interface | Extends | Implements | Final | Abstract | Var | Const | As | Use | Require | RequireOnce | Include | IncludeOnce | Public | Private | Protected | True | False | HaltCompiler | Die | Empty | Exit | Eval | Isset | Integer | Real | SingleQuotedString | DoubleQuotedString | HereDoc | VariableName | UnquotedString | AsignmentOperator | EqualityOperator | ComparisionOperator | ShiftOperator | IncrementOperator | WhiteSpace );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion

}

} // namespace  Code2Xml.Core.Generators.ANTLRv3.Php 
