using Code2Xml.Core.Antlr;
using System;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C.g 2012-08-03 16:19:55

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;
/** ANSI C ANTLR v3 grammar

Translated from Jutta Degener's 1995 ANSI C yacc grammar by Terence Parr
July 2006.  The lexical rules were taken from the Java grammar.

Jutta says: "In 1985, Jeff Lee published his Yacc grammar (which
is accompanied by a matching Lex specification) for the April 30, 1985 draft
version of the ANSI C standard.  Tom Stockfisch reposted it to net.sources in
1987; that original, as mentioned in the answer to question 17.25 of the
comp.lang.c FAQ, can be ftp'ed from ftp.uu.net,
   file usenet/net.sources/ansi.c.grammar.Z.
I intend to keep this version as close to the current C Standard grammar as
possible; please let me know if you discover discrepancies. Jutta Degener, 1995"

Generally speaking, you need symbol table info to parse C; typedefs
define types and then IDENTIFIERS are either types or plain IDs.  I'm doing
the min necessary here tracking only type names.  This is a good example
of the global scope (called Symbols).  Every rule that declares its usage
of Symbols pushes a new copy on the stack effectively creating a new
symbol scope.  Also note rule declaration declares a rule scope that
lets any invoked rule see isTypedef boolean.  It's much easier than
passing that info down as parameters.  Very clean.  Rule
direct_declarator can then easily determine whether the IDENTIFIER
should be declared as a type name.

I have only tested this on a single file, though it is 3500 lines.

This grammar requires ANTLR v3.0.1 or higher.

Terence Parr
July 2006
*/
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class CParser : Antlr.Runtime.Parser, IAntlrParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "CHARACTER_LITERAL", "COMMENT", "DECIMAL_LITERAL", "EscapeSequence", "Exponent", "FLOATING_POINT_LITERAL", "FloatTypeSuffix", "HEX_LITERAL", "HexDigit", "IDENTIFIER", "IntegerTypeSuffix", "LETTER", "LINE_COMMAND", "LINE_COMMENT", "OCTAL_LITERAL", "OctalEscape", "STRING_LITERAL", "UnicodeEscape", "WS", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'.'", "'...'", "'/'", "'/='", "':'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'['", "']'", "'^'", "'^='", "'__alignof__'", "'__attribute__'", "'__builtin_offsetof'", "'__builtin_va_arg'", "'__builtin_va_list'", "'__extension__'", "'__inline'", "'__inline__'", "'__restrict__'", "'auto'", "'break'", "'case'", "'char'", "'const'", "'continue'", "'default'", "'do'", "'double'", "'else'", "'enum'", "'extern'", "'float'", "'for'", "'goto'", "'if'", "'inline'", "'int'", "'long'", "'register'", "'restrict'", "'return'", "'short'", "'signed'", "'sizeof'", "'static'", "'struct'", "'switch'", "'typedef'", "'typeof'", "'union'", "'unsigned'", "'void'", "'volatile'", "'while'", "'{'", "'|'", "'|='", "'||'", "'}'", "'~'"
	};
	public const int EOF=-1;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int CHARACTER_LITERAL=4;
	public const int COMMENT=5;
	public const int DECIMAL_LITERAL=6;
	public const int EscapeSequence=7;
	public const int Exponent=8;
	public const int FLOATING_POINT_LITERAL=9;
	public const int FloatTypeSuffix=10;
	public const int HEX_LITERAL=11;
	public const int HexDigit=12;
	public const int IDENTIFIER=13;
	public const int IntegerTypeSuffix=14;
	public const int LETTER=15;
	public const int LINE_COMMAND=16;
	public const int LINE_COMMENT=17;
	public const int OCTAL_LITERAL=18;
	public const int OctalEscape=19;
	public const int STRING_LITERAL=20;
	public const int UnicodeEscape=21;
	public const int WS=22;

	protected sealed partial class Symbols_scope
	{
		public // only track types in order to get parser working
			HashSet<string> types;

		public Symbols_scope(CParser grammar) { OnCreated(grammar); }
		partial void OnCreated(CParser grammar);
	}
	partial void Symbols_scopeInit( Symbols_scope scope );
	partial void Symbols_scopeAfter( Symbols_scope scope );
	protected readonly ListStack<Symbols_scope> Symbols_stack = new ListStack<Symbols_scope>();

	public CParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public CParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[279+1];


		XmlTreeAdaptor treeAdaptor = default(XmlTreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new XmlTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref XmlTreeAdaptor adaptor);

	private XmlTreeAdaptor adaptor;

	public XmlTreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return CParser.tokenNames; } }
	public override string GrammarFileName { get { return "C.g"; } }


		boolean isTypeName(String name) {
			for (int i = Symbols_stack.size()-1; i>=0; i--) {
				Symbols_scope scope = (Symbols_scope)Symbols_stack.get(i);
				if ( scope.types.contains(name) ) {
					return true;
				}
			}
			return false;
		}


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_translation_unit();
	partial void LeaveRule_translation_unit();

	// $ANTLR start "translation_unit"
	// C.g:59:1: translation_unit : ( external_declaration )+ ;
	[GrammarRule("translation_unit")]
	public XAstParserRuleReturnScope translation_unit()
	{
		EnterRule_translation_unit();
		EnterRule("translation_unit", 1);
		var retval = new XAstParserRuleReturnScope("translation_unit");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int translation_unit_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope external_declaration1 = default(XAstParserRuleReturnScope);


		  Symbols_stack.Peek().types =  new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "translation_unit");
		DebugLocation(59, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// C.g:64:2: ( ( external_declaration )+ )
			DebugEnterAlt(1);
			// C.g:64:4: ( external_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(64, 4);
			// C.g:64:4: ( external_declaration )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==IDENTIFIER||LA1_0==30||LA1_0==32||LA1_0==64||(LA1_0>=67 && LA1_0<=72)||(LA1_0>=75 && LA1_0<=76)||LA1_0==80||(LA1_0>=82 && LA1_0<=84)||(LA1_0>=88 && LA1_0<=92)||(LA1_0>=94 && LA1_0<=95)||(LA1_0>=97 && LA1_0<=98)||(LA1_0>=100 && LA1_0<=105)))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:64:4: external_declaration
					{
					DebugLocation(64, 4);
					PushFollow(Follow._external_declaration_in_translation_unit71);
					external_declaration1=external_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, external_declaration1.Tree, external_declaration1, retval);

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("translation_unit", 1);
			LeaveRule("translation_unit", 1);
			LeaveRule_translation_unit();
			if (state.backtracking > 0) { Memoize(input, 1, translation_unit_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(65, 1);
		} finally { DebugExitRule(GrammarFileName, "translation_unit"); }
		return retval;

	}
	// $ANTLR end "translation_unit"

	partial void EnterRule_external_declaration();
	partial void LeaveRule_external_declaration();

	// $ANTLR start "external_declaration"
	// C.g:81:1: external_declaration options {k=1; } : ( ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition | declaration );
	[GrammarRule("external_declaration")]
	public XAstParserRuleReturnScope external_declaration()
	{
		EnterRule_external_declaration();
		EnterRule("external_declaration", 2);
		var retval = new XAstParserRuleReturnScope("external_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int external_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope function_definition2 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declaration3 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "external_declaration");
		DebugLocation(81, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// C.g:83:2: ( ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition | declaration )
			int alt2=2;
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0==72||LA2_0==83||LA2_0==91||LA2_0==97))
			{
				int LA2_1 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==104))
			{
				int LA2_2 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==75))
			{
				int LA2_3 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==94))
			{
				int LA2_4 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==89))
			{
				int LA2_5 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==90))
			{
				int LA2_6 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==84))
			{
				int LA2_7 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==80))
			{
				int LA2_8 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==95))
			{
				int LA2_9 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==103))
			{
				int LA2_10 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 10, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==98||LA2_0==102))
			{
				int LA2_11 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==82))
			{
				int LA2_12 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 12, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==IDENTIFIER))
			{
				int LA2_13 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if (((isTypeName(input.LT(1).getText()))))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 13, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==101))
			{
				int LA2_14 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 14, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==71||LA2_0==76||LA2_0==92||LA2_0==105))
			{
				int LA2_15 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 15, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==67||(LA2_0>=69 && LA2_0<=70)||LA2_0==88))
			{
				int LA2_16 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 16, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==64))
			{
				int LA2_17 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 17, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==68))
			{
				int LA2_18 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 18, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==32) && (EvaluatePredicate(synpred4_C_fragment)))
			{
				alt2 = 1;
			}
			else if ((LA2_0==30) && (EvaluatePredicate(synpred4_C_fragment)))
			{
				alt2 = 1;
			}
			else if ((LA2_0==100))
			{
				alt2 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:83:4: ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(83, 62);
				PushFollow(Follow._function_definition_in_external_declaration107);
				function_definition2=function_definition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, function_definition2.Tree, function_definition2, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:84:4: declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(84, 4);
				PushFollow(Follow._declaration_in_external_declaration112);
				declaration3=declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration3.Tree, declaration3, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("external_declaration", 2);
			LeaveRule("external_declaration", 2);
			LeaveRule_external_declaration();
			if (state.backtracking > 0) { Memoize(input, 2, external_declaration_StartIndex); }

		}
		DebugLocation(85, 1);
		} finally { DebugExitRule(GrammarFileName, "external_declaration"); }
		return retval;

	}
	// $ANTLR end "external_declaration"

	partial void EnterRule_function_definition();
	partial void LeaveRule_function_definition();

	// $ANTLR start "function_definition"
	// C.g:87:1: function_definition : ( declaration_specifiers )? declarator ( ( declaration )+ compound_statement | compound_statement ) ;
	[GrammarRule("function_definition")]
	public XAstParserRuleReturnScope function_definition()
	{
		EnterRule_function_definition();
		EnterRule("function_definition", 3);
		var retval = new XAstParserRuleReturnScope("function_definition");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int function_definition_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope declaration_specifiers4 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator5 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declaration6 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope compound_statement7 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope compound_statement8 = default(XAstParserRuleReturnScope);


		  Symbols_stack.Peek().types =  new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "function_definition");
		DebugLocation(87, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// C.g:92:2: ( ( declaration_specifiers )? declarator ( ( declaration )+ compound_statement | compound_statement ) )
			DebugEnterAlt(1);
			// C.g:92:4: ( declaration_specifiers )? declarator ( ( declaration )+ compound_statement | compound_statement )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(92, 4);
			// C.g:92:4: ( declaration_specifiers )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0==64||(LA3_0>=67 && LA3_0<=72)||(LA3_0>=75 && LA3_0<=76)||LA3_0==80||(LA3_0>=82 && LA3_0<=84)||(LA3_0>=88 && LA3_0<=92)||(LA3_0>=94 && LA3_0<=95)||(LA3_0>=97 && LA3_0<=98)||(LA3_0>=101 && LA3_0<=105)))
			{
				alt3 = 1;
			}
			else if ((LA3_0==IDENTIFIER))
			{
				switch (input.LA(2))
				{
				case 32:
					{
					alt3 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA3_22 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 30:
					{
					int LA3_23 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 72:
				case 83:
				case 91:
				case 97:
					{
					int LA3_24 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 104:
					{
					int LA3_25 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 75:
					{
					int LA3_26 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 94:
					{
					int LA3_27 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 89:
					{
					int LA3_28 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 90:
					{
					int LA3_29 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 84:
					{
					int LA3_30 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 80:
					{
					int LA3_31 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 95:
					{
					int LA3_32 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 103:
					{
					int LA3_33 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 98:
				case 102:
					{
					int LA3_34 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 82:
					{
					int LA3_35 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 101:
					{
					int LA3_36 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 71:
				case 76:
				case 92:
				case 105:
					{
					int LA3_37 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 67:
				case 69:
				case 70:
				case 88:
					{
					int LA3_38 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 64:
					{
					int LA3_39 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 68:
					{
					int LA3_40 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				}

			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:92:4: declaration_specifiers
				{
				DebugLocation(92, 4);
				PushFollow(Follow._declaration_specifiers_in_function_definition134);
				declaration_specifiers4=declaration_specifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers4.Tree, declaration_specifiers4, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(92, 28);
			PushFollow(Follow._declarator_in_function_definition137);
			declarator5=declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, declarator5.Tree, declarator5, retval);
			DebugLocation(93, 3);
			// C.g:93:3: ( ( declaration )+ compound_statement | compound_statement )
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0==IDENTIFIER||LA5_0==64||(LA5_0>=67 && LA5_0<=72)||(LA5_0>=75 && LA5_0<=76)||LA5_0==80||(LA5_0>=82 && LA5_0<=84)||(LA5_0>=88 && LA5_0<=92)||(LA5_0>=94 && LA5_0<=95)||(LA5_0>=97 && LA5_0<=98)||(LA5_0>=100 && LA5_0<=105)))
			{
				alt5 = 1;
			}
			else if ((LA5_0==107))
			{
				alt5 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:93:5: ( declaration )+ compound_statement
				{
				DebugLocation(93, 5);
				// C.g:93:5: ( declaration )+
				int cnt4=0;
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if ((LA4_0==IDENTIFIER||LA4_0==64||(LA4_0>=67 && LA4_0<=72)||(LA4_0>=75 && LA4_0<=76)||LA4_0==80||(LA4_0>=82 && LA4_0<=84)||(LA4_0>=88 && LA4_0<=92)||(LA4_0>=94 && LA4_0<=95)||(LA4_0>=97 && LA4_0<=98)||(LA4_0>=100 && LA4_0<=105)))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:93:5: declaration
						{
						DebugLocation(93, 5);
						PushFollow(Follow._declaration_in_function_definition143);
						declaration6=declaration();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, declaration6.Tree, declaration6, retval);

						}
						break;

					default:
						if (cnt4 >= 1)
							goto loop4;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee4 = new EarlyExitException( 4, input );
						DebugRecognitionException(eee4);
						throw eee4;
					}
					cnt4++;
				}
				loop4:
					;

				} finally { DebugExitSubRule(4); }

				DebugLocation(93, 18);
				PushFollow(Follow._compound_statement_in_function_definition146);
				compound_statement7=compound_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, compound_statement7.Tree, compound_statement7, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:94:5: compound_statement
				{
				DebugLocation(94, 5);
				PushFollow(Follow._compound_statement_in_function_definition153);
				compound_statement8=compound_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, compound_statement8.Tree, compound_statement8, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function_definition", 3);
			LeaveRule("function_definition", 3);
			LeaveRule_function_definition();
			if (state.backtracking > 0) { Memoize(input, 3, function_definition_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(96, 1);
		} finally { DebugExitRule(GrammarFileName, "function_definition"); }
		return retval;

	}
	// $ANTLR end "function_definition"

	protected sealed partial class declaration_scope
	{
		public boolean isTypedef;

		public declaration_scope(CParser grammar) { OnCreated(grammar); }
		partial void OnCreated(CParser grammar);
	}
	partial void declaration_scopeInit( declaration_scope scope );
	partial void declaration_scopeAfter( declaration_scope scope );
	protected readonly ListStack<declaration_scope> declaration_stack = new ListStack<declaration_scope>();

	partial void EnterRule_declaration();
	partial void LeaveRule_declaration();

	// $ANTLR start "declaration"
	// C.g:98:1: declaration : ( ( gcc_extension_specifier )? 'typedef' ( declaration_specifiers )? init_declarator_list ';' | declaration_specifiers ( init_declarator_list )? ';' );
	[GrammarRule("declaration")]
	public XAstParserRuleReturnScope declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 4);
		var retval = new XAstParserRuleReturnScope("declaration");
		declaration_stack.Push(new declaration_scope(this));declaration_scopeInit(declaration_stack.Peek());
		
		retval.Start = (IToken)input.LT(1);
		int declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal10 = default(IToken);
		IToken char_literal13 = default(IToken);
		IToken char_literal16 = default(IToken);
		XAstParserRuleReturnScope gcc_extension_specifier9 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declaration_specifiers11 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope init_declarator_list12 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declaration_specifiers14 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope init_declarator_list15 = default(XAstParserRuleReturnScope);

		object string_literal10_tree = default(object);
		object char_literal13_tree = default(object);
		object char_literal16_tree = default(object);

		  declaration_stack.Peek().isTypedef =  false;

		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(98, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// C.g:105:2: ( ( gcc_extension_specifier )? 'typedef' ( declaration_specifiers )? init_declarator_list ';' | declaration_specifiers ( init_declarator_list )? ';' )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case 68:
				{
				int LA9_1 = input.LA(2);

				if ((LA9_1==100))
				{
					alt9 = 1;
				}
				else if ((LA9_1==IDENTIFIER||LA9_1==30||LA9_1==32||LA9_1==47||LA9_1==64||(LA9_1>=67 && LA9_1<=72)||(LA9_1>=75 && LA9_1<=76)||LA9_1==80||(LA9_1>=82 && LA9_1<=84)||(LA9_1>=88 && LA9_1<=92)||(LA9_1>=94 && LA9_1<=95)||(LA9_1>=97 && LA9_1<=98)||(LA9_1>=101 && LA9_1<=105)))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 100:
				{
				alt9 = 1;
				}
				break;
			case IDENTIFIER:
			case 64:
			case 67:
			case 69:
			case 70:
			case 71:
			case 72:
			case 75:
			case 76:
			case 80:
			case 82:
			case 83:
			case 84:
			case 88:
			case 89:
			case 90:
			case 91:
			case 92:
			case 94:
			case 95:
			case 97:
			case 98:
			case 101:
			case 102:
			case 103:
			case 104:
			case 105:
				{
				alt9 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:105:4: ( gcc_extension_specifier )? 'typedef' ( declaration_specifiers )? init_declarator_list ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(105, 4);
				// C.g:105:4: ( gcc_extension_specifier )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==68))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:105:4: gcc_extension_specifier
					{
					DebugLocation(105, 4);
					PushFollow(Follow._gcc_extension_specifier_in_declaration181);
					gcc_extension_specifier9=gcc_extension_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_extension_specifier9.Tree, gcc_extension_specifier9, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(105, 29);
				string_literal10=(IToken)Match(input,100,Follow._100_in_declaration184); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal10_tree = (object)adaptor.Create(string_literal10, retval);
				adaptor.AddChild(root_0, string_literal10_tree);
				}
				DebugLocation(105, 39);
				// C.g:105:39: ( declaration_specifiers )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==64||(LA7_0>=67 && LA7_0<=72)||(LA7_0>=75 && LA7_0<=76)||LA7_0==80||(LA7_0>=82 && LA7_0<=84)||(LA7_0>=88 && LA7_0<=92)||(LA7_0>=94 && LA7_0<=95)||(LA7_0>=97 && LA7_0<=98)||(LA7_0>=101 && LA7_0<=105)))
				{
					alt7 = 1;
				}
				else if ((LA7_0==IDENTIFIER))
				{
					switch (input.LA(2))
					{
					case IDENTIFIER:
					case 32:
					case 67:
					case 68:
					case 69:
					case 70:
					case 71:
					case 72:
					case 75:
					case 76:
					case 80:
					case 82:
					case 83:
					case 84:
					case 88:
					case 89:
					case 90:
					case 91:
					case 92:
					case 94:
					case 95:
					case 97:
					case 98:
					case 101:
					case 102:
					case 103:
					case 104:
					case 105:
						{
						alt7 = 1;
						}
						break;
					case 30:
						{
						int LA7_23 = input.LA(3);

						if ((((EvaluatePredicate(synpred9_C_fragment)&&EvaluatePredicate(synpred9_C_fragment))&&(isTypeName(input.LT(1).getText())))))
						{
							alt7 = 1;
						}
						}
						break;
					case 64:
						{
						int LA7_39 = input.LA(3);

						if ((((EvaluatePredicate(synpred9_C_fragment)&&EvaluatePredicate(synpred9_C_fragment))&&(isTypeName(input.LT(1).getText())))))
						{
							alt7 = 1;
						}
						}
						break;
					}

				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:105:39: declaration_specifiers
					{
					DebugLocation(105, 39);
					PushFollow(Follow._declaration_specifiers_in_declaration186);
					declaration_specifiers11=declaration_specifiers();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers11.Tree, declaration_specifiers11, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(105, 63);
				if (state.backtracking == 0)
				{
					declaration_stack.Peek().isTypedef = true;
				}
				DebugLocation(106, 4);
				PushFollow(Follow._init_declarator_list_in_declaration196);
				init_declarator_list12=init_declarator_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator_list12.Tree, init_declarator_list12, retval);
				DebugLocation(106, 25);
				char_literal13=(IToken)Match(input,47,Follow._47_in_declaration198); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal13_tree = (object)adaptor.Create(char_literal13, retval);
				adaptor.AddChild(root_0, char_literal13_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:107:4: declaration_specifiers ( init_declarator_list )? ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(107, 4);
				PushFollow(Follow._declaration_specifiers_in_declaration204);
				declaration_specifiers14=declaration_specifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers14.Tree, declaration_specifiers14, retval);
				DebugLocation(107, 27);
				// C.g:107:27: ( init_declarator_list )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==IDENTIFIER||LA8_0==30||LA8_0==32))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:107:27: init_declarator_list
					{
					DebugLocation(107, 27);
					PushFollow(Follow._init_declarator_list_in_declaration206);
					init_declarator_list15=init_declarator_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator_list15.Tree, init_declarator_list15, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(107, 49);
				char_literal16=(IToken)Match(input,47,Follow._47_in_declaration209); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal16_tree = (object)adaptor.Create(char_literal16, retval);
				adaptor.AddChild(root_0, char_literal16_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 4);
			LeaveRule("declaration", 4);
			LeaveRule_declaration();
			if (state.backtracking > 0) { Memoize(input, 4, declaration_StartIndex); }

			declaration_scopeAfter(declaration_stack.Peek());declaration_stack.Pop();
		}
		DebugLocation(108, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"

	partial void EnterRule_declaration_specifiers();
	partial void LeaveRule_declaration_specifiers();

	// $ANTLR start "declaration_specifiers"
	// C.g:110:1: declaration_specifiers : ( storage_class_specifier | type_specifier | type_qualifier | gcc_function_specifier | gcc_declaration_specifier )+ ;
	[GrammarRule("declaration_specifiers")]
	public XAstParserRuleReturnScope declaration_specifiers()
	{
		EnterRule_declaration_specifiers();
		EnterRule("declaration_specifiers", 5);
		var retval = new XAstParserRuleReturnScope("declaration_specifiers");
		
		retval.Start = (IToken)input.LT(1);
		int declaration_specifiers_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope storage_class_specifier17 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_specifier18 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_qualifier19 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_function_specifier20 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_declaration_specifier21 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "declaration_specifiers");
		DebugLocation(110, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// C.g:111:2: ( ( storage_class_specifier | type_specifier | type_qualifier | gcc_function_specifier | gcc_declaration_specifier )+ )
			DebugEnterAlt(1);
			// C.g:111:6: ( storage_class_specifier | type_specifier | type_qualifier | gcc_function_specifier | gcc_declaration_specifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(111, 6);
			// C.g:111:6: ( storage_class_specifier | type_specifier | type_qualifier | gcc_function_specifier | gcc_declaration_specifier )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=6;
				try { DebugEnterDecision(10, false);
				switch (input.LA(1))
				{
				case IDENTIFIER:
					{
					int LA10_2 = input.LA(2);

					if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred13_C_fragment))))
					{
						alt10 = 2;
					}


					}
					break;
				case 72:
				case 83:
				case 91:
				case 97:
					{
					alt10 = 1;
					}
					break;
				case 75:
				case 80:
				case 82:
				case 84:
				case 89:
				case 90:
				case 94:
				case 95:
				case 98:
				case 101:
				case 102:
				case 103:
				case 104:
					{
					alt10 = 2;
					}
					break;
				case 71:
				case 76:
				case 92:
				case 105:
					{
					alt10 = 3;
					}
					break;
				case 67:
				case 69:
				case 70:
				case 88:
					{
					alt10 = 4;
					}
					break;
				case 64:
				case 68:
					{
					alt10 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:111:10: storage_class_specifier
					{
					DebugLocation(111, 10);
					PushFollow(Follow._storage_class_specifier_in_declaration_specifiers226);
					storage_class_specifier17=storage_class_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, storage_class_specifier17.Tree, storage_class_specifier17, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:112:7: type_specifier
					{
					DebugLocation(112, 7);
					PushFollow(Follow._type_specifier_in_declaration_specifiers234);
					type_specifier18=type_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_specifier18.Tree, type_specifier18, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C.g:113:7: type_qualifier
					{
					DebugLocation(113, 7);
					PushFollow(Follow._type_qualifier_in_declaration_specifiers242);
					type_qualifier19=type_qualifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier19.Tree, type_qualifier19, retval);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C.g:114:7: gcc_function_specifier
					{
					DebugLocation(114, 7);
					PushFollow(Follow._gcc_function_specifier_in_declaration_specifiers250);
					gcc_function_specifier20=gcc_function_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_function_specifier20.Tree, gcc_function_specifier20, retval);

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// C.g:115:7: gcc_declaration_specifier
					{
					DebugLocation(115, 7);
					PushFollow(Follow._gcc_declaration_specifier_in_declaration_specifiers258);
					gcc_declaration_specifier21=gcc_declaration_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_declaration_specifier21.Tree, gcc_declaration_specifier21, retval);

					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration_specifiers", 5);
			LeaveRule("declaration_specifiers", 5);
			LeaveRule_declaration_specifiers();
			if (state.backtracking > 0) { Memoize(input, 5, declaration_specifiers_StartIndex); }

		}
		DebugLocation(117, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration_specifiers"); }
		return retval;

	}
	// $ANTLR end "declaration_specifiers"

	partial void EnterRule_init_declarator_list();
	partial void LeaveRule_init_declarator_list();

	// $ANTLR start "init_declarator_list"
	// C.g:119:1: init_declarator_list : init_declarator ( ',' init_declarator )* ;
	[GrammarRule("init_declarator_list")]
	public XAstParserRuleReturnScope init_declarator_list()
	{
		EnterRule_init_declarator_list();
		EnterRule("init_declarator_list", 6);
		var retval = new XAstParserRuleReturnScope("init_declarator_list");
		
		retval.Start = (IToken)input.LT(1);
		int init_declarator_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal23 = default(IToken);
		XAstParserRuleReturnScope init_declarator22 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope init_declarator24 = default(XAstParserRuleReturnScope);

		object char_literal23_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "init_declarator_list");
		DebugLocation(119, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// C.g:120:2: ( init_declarator ( ',' init_declarator )* )
			DebugEnterAlt(1);
			// C.g:120:4: init_declarator ( ',' init_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(120, 4);
			PushFollow(Follow._init_declarator_in_init_declarator_list274);
			init_declarator22=init_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator22.Tree, init_declarator22, retval);
			DebugLocation(120, 20);
			// C.g:120:20: ( ',' init_declarator )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==37))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:120:21: ',' init_declarator
					{
					DebugLocation(120, 21);
					char_literal23=(IToken)Match(input,37,Follow._37_in_init_declarator_list277); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal23_tree = (object)adaptor.Create(char_literal23, retval);
					adaptor.AddChild(root_0, char_literal23_tree);
					}
					DebugLocation(120, 25);
					PushFollow(Follow._init_declarator_in_init_declarator_list279);
					init_declarator24=init_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator24.Tree, init_declarator24, retval);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("init_declarator_list", 6);
			LeaveRule("init_declarator_list", 6);
			LeaveRule_init_declarator_list();
			if (state.backtracking > 0) { Memoize(input, 6, init_declarator_list_StartIndex); }

		}
		DebugLocation(121, 1);
		} finally { DebugExitRule(GrammarFileName, "init_declarator_list"); }
		return retval;

	}
	// $ANTLR end "init_declarator_list"

	partial void EnterRule_init_declarator();
	partial void LeaveRule_init_declarator();

	// $ANTLR start "init_declarator"
	// C.g:123:1: init_declarator : declarator ( '=' initializer )? ;
	[GrammarRule("init_declarator")]
	public XAstParserRuleReturnScope init_declarator()
	{
		EnterRule_init_declarator();
		EnterRule("init_declarator", 7);
		var retval = new XAstParserRuleReturnScope("init_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int init_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal26 = default(IToken);
		XAstParserRuleReturnScope declarator25 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope initializer27 = default(XAstParserRuleReturnScope);

		object char_literal26_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "init_declarator");
		DebugLocation(123, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// C.g:124:2: ( declarator ( '=' initializer )? )
			DebugEnterAlt(1);
			// C.g:124:4: declarator ( '=' initializer )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(124, 4);
			PushFollow(Follow._declarator_in_init_declarator292);
			declarator25=declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, declarator25.Tree, declarator25, retval);
			DebugLocation(124, 15);
			// C.g:124:15: ( '=' initializer )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0==52))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:124:16: '=' initializer
				{
				DebugLocation(124, 16);
				char_literal26=(IToken)Match(input,52,Follow._52_in_init_declarator295); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal26_tree = (object)adaptor.Create(char_literal26, retval);
				adaptor.AddChild(root_0, char_literal26_tree);
				}
				DebugLocation(124, 20);
				PushFollow(Follow._initializer_in_init_declarator297);
				initializer27=initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, initializer27.Tree, initializer27, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("init_declarator", 7);
			LeaveRule("init_declarator", 7);
			LeaveRule_init_declarator();
			if (state.backtracking > 0) { Memoize(input, 7, init_declarator_StartIndex); }

		}
		DebugLocation(125, 1);
		} finally { DebugExitRule(GrammarFileName, "init_declarator"); }
		return retval;

	}
	// $ANTLR end "init_declarator"

	partial void EnterRule_storage_class_specifier();
	partial void LeaveRule_storage_class_specifier();

	// $ANTLR start "storage_class_specifier"
	// C.g:127:1: storage_class_specifier : ( 'extern' | 'static' | 'auto' | 'register' );
	[GrammarRule("storage_class_specifier")]
	public XAstParserRuleReturnScope storage_class_specifier()
	{
		EnterRule_storage_class_specifier();
		EnterRule("storage_class_specifier", 8);
		var retval = new XAstParserRuleReturnScope("storage_class_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int storage_class_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set28 = default(IToken);

		object set28_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "storage_class_specifier");
		DebugLocation(127, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// C.g:128:2: ( 'extern' | 'static' | 'auto' | 'register' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(128, 2);

			set28=(IToken)input.LT(1);
			if (input.LA(1)==72||input.LA(1)==83||input.LA(1)==91||input.LA(1)==97)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set28, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("storage_class_specifier", 8);
			LeaveRule("storage_class_specifier", 8);
			LeaveRule_storage_class_specifier();
			if (state.backtracking > 0) { Memoize(input, 8, storage_class_specifier_StartIndex); }

		}
		DebugLocation(132, 1);
		} finally { DebugExitRule(GrammarFileName, "storage_class_specifier"); }
		return retval;

	}
	// $ANTLR end "storage_class_specifier"

	partial void EnterRule_type_specifier();
	partial void LeaveRule_type_specifier();

	// $ANTLR start "type_specifier"
	// C.g:134:1: type_specifier : ( 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | struct_or_union_specifier | enum_specifier | type_id | gcc_typeof );
	[GrammarRule("type_specifier")]
	public XAstParserRuleReturnScope type_specifier()
	{
		EnterRule_type_specifier();
		EnterRule("type_specifier", 9);
		var retval = new XAstParserRuleReturnScope("type_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int type_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal29 = default(IToken);
		IToken string_literal30 = default(IToken);
		IToken string_literal31 = default(IToken);
		IToken string_literal32 = default(IToken);
		IToken string_literal33 = default(IToken);
		IToken string_literal34 = default(IToken);
		IToken string_literal35 = default(IToken);
		IToken string_literal36 = default(IToken);
		IToken string_literal37 = default(IToken);
		XAstParserRuleReturnScope struct_or_union_specifier38 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enum_specifier39 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_id40 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_typeof41 = default(XAstParserRuleReturnScope);

		object string_literal29_tree = default(object);
		object string_literal30_tree = default(object);
		object string_literal31_tree = default(object);
		object string_literal32_tree = default(object);
		object string_literal33_tree = default(object);
		object string_literal34_tree = default(object);
		object string_literal35_tree = default(object);
		object string_literal36_tree = default(object);
		object string_literal37_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_specifier");
		DebugLocation(134, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// C.g:135:2: ( 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | struct_or_union_specifier | enum_specifier | type_id | gcc_typeof )
			int alt13=13;
			try { DebugEnterDecision(13, false);
			switch (input.LA(1))
			{
			case 104:
				{
				alt13 = 1;
				}
				break;
			case 75:
				{
				alt13 = 2;
				}
				break;
			case 94:
				{
				alt13 = 3;
				}
				break;
			case 89:
				{
				alt13 = 4;
				}
				break;
			case 90:
				{
				alt13 = 5;
				}
				break;
			case 84:
				{
				alt13 = 6;
				}
				break;
			case 80:
				{
				alt13 = 7;
				}
				break;
			case 95:
				{
				alt13 = 8;
				}
				break;
			case 103:
				{
				alt13 = 9;
				}
				break;
			case 98:
			case 102:
				{
				alt13 = 10;
				}
				break;
			case 82:
				{
				alt13 = 11;
				}
				break;
			case IDENTIFIER:
				{
				alt13 = 12;
				}
				break;
			case 101:
				{
				alt13 = 13;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:135:4: 'void'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(135, 4);
				string_literal29=(IToken)Match(input,104,Follow._104_in_type_specifier336); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal29_tree = (object)adaptor.Create(string_literal29, retval);
				adaptor.AddChild(root_0, string_literal29_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:136:4: 'char'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(136, 4);
				string_literal30=(IToken)Match(input,75,Follow._75_in_type_specifier341); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal30_tree = (object)adaptor.Create(string_literal30, retval);
				adaptor.AddChild(root_0, string_literal30_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:137:4: 'short'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(137, 4);
				string_literal31=(IToken)Match(input,94,Follow._94_in_type_specifier346); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal31_tree = (object)adaptor.Create(string_literal31, retval);
				adaptor.AddChild(root_0, string_literal31_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:138:4: 'int'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(138, 4);
				string_literal32=(IToken)Match(input,89,Follow._89_in_type_specifier351); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal32_tree = (object)adaptor.Create(string_literal32, retval);
				adaptor.AddChild(root_0, string_literal32_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:139:4: 'long'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(139, 4);
				string_literal33=(IToken)Match(input,90,Follow._90_in_type_specifier356); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal33_tree = (object)adaptor.Create(string_literal33, retval);
				adaptor.AddChild(root_0, string_literal33_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:140:4: 'float'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(140, 4);
				string_literal34=(IToken)Match(input,84,Follow._84_in_type_specifier361); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal34_tree = (object)adaptor.Create(string_literal34, retval);
				adaptor.AddChild(root_0, string_literal34_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C.g:141:4: 'double'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(141, 4);
				string_literal35=(IToken)Match(input,80,Follow._80_in_type_specifier366); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal35_tree = (object)adaptor.Create(string_literal35, retval);
				adaptor.AddChild(root_0, string_literal35_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C.g:142:4: 'signed'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(142, 4);
				string_literal36=(IToken)Match(input,95,Follow._95_in_type_specifier371); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal36_tree = (object)adaptor.Create(string_literal36, retval);
				adaptor.AddChild(root_0, string_literal36_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C.g:143:4: 'unsigned'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(143, 4);
				string_literal37=(IToken)Match(input,103,Follow._103_in_type_specifier376); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal37_tree = (object)adaptor.Create(string_literal37, retval);
				adaptor.AddChild(root_0, string_literal37_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C.g:144:4: struct_or_union_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(144, 4);
				PushFollow(Follow._struct_or_union_specifier_in_type_specifier381);
				struct_or_union_specifier38=struct_or_union_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_or_union_specifier38.Tree, struct_or_union_specifier38, retval);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C.g:145:4: enum_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(145, 4);
				PushFollow(Follow._enum_specifier_in_type_specifier386);
				enum_specifier39=enum_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_specifier39.Tree, enum_specifier39, retval);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C.g:146:4: type_id
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(146, 4);
				PushFollow(Follow._type_id_in_type_specifier391);
				type_id40=type_id();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_id40.Tree, type_id40, retval);

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C.g:147:4: gcc_typeof
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(147, 4);
				PushFollow(Follow._gcc_typeof_in_type_specifier396);
				gcc_typeof41=gcc_typeof();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_typeof41.Tree, gcc_typeof41, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_specifier", 9);
			LeaveRule("type_specifier", 9);
			LeaveRule_type_specifier();
			if (state.backtracking > 0) { Memoize(input, 9, type_specifier_StartIndex); }

		}
		DebugLocation(148, 1);
		} finally { DebugExitRule(GrammarFileName, "type_specifier"); }
		return retval;

	}
	// $ANTLR end "type_specifier"

	partial void EnterRule_type_id();
	partial void LeaveRule_type_id();

	// $ANTLR start "type_id"
	// C.g:150:1: type_id :{...}? IDENTIFIER ;
	[GrammarRule("type_id")]
	public XAstParserRuleReturnScope type_id()
	{
		EnterRule_type_id();
		EnterRule("type_id", 10);
		var retval = new XAstParserRuleReturnScope("type_id");
		
		retval.Start = (IToken)input.LT(1);
		int type_id_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER42 = default(IToken);

		object IDENTIFIER42_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_id");
		DebugLocation(150, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// C.g:151:2: ({...}? IDENTIFIER )
			DebugEnterAlt(1);
			// C.g:151:6: {...}? IDENTIFIER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(151, 6);
			if (!((isTypeName(input.LT(1).getText()))))
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "type_id", "isTypeName(input.LT(1).getText())");
			}
			DebugLocation(151, 43);
			IDENTIFIER42=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_type_id411), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER42_tree = (object)adaptor.Create(IDENTIFIER42, retval);
			adaptor.AddChild(root_0, IDENTIFIER42_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_id", 10);
			LeaveRule("type_id", 10);
			LeaveRule_type_id();
			if (state.backtracking > 0) { Memoize(input, 10, type_id_StartIndex); }

		}
		DebugLocation(153, 1);
		} finally { DebugExitRule(GrammarFileName, "type_id"); }
		return retval;

	}
	// $ANTLR end "type_id"

	partial void EnterRule_struct_or_union_specifier();
	partial void LeaveRule_struct_or_union_specifier();

	// $ANTLR start "struct_or_union_specifier"
	// C.g:155:1: struct_or_union_specifier options {k=3; } : ( struct_or_union ( gcc_attribute_list )? ( IDENTIFIER )? '{' struct_declaration_list '}' | struct_or_union ( gcc_attribute_list )? IDENTIFIER );
	[GrammarRule("struct_or_union_specifier")]
	public XAstParserRuleReturnScope struct_or_union_specifier()
	{
		EnterRule_struct_or_union_specifier();
		EnterRule("struct_or_union_specifier", 11);
		var retval = new XAstParserRuleReturnScope("struct_or_union_specifier");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int struct_or_union_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER45 = default(IToken);
		IToken char_literal46 = default(IToken);
		IToken char_literal48 = default(IToken);
		IToken IDENTIFIER51 = default(IToken);
		XAstParserRuleReturnScope struct_or_union43 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute_list44 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declaration_list47 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_or_union49 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute_list50 = default(XAstParserRuleReturnScope);

		object IDENTIFIER45_tree = default(object);
		object char_literal46_tree = default(object);
		object char_literal48_tree = default(object);
		object IDENTIFIER51_tree = default(object);

		  Symbols_stack.Peek().types =  new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "struct_or_union_specifier");
		DebugLocation(155, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// C.g:161:2: ( struct_or_union ( gcc_attribute_list )? ( IDENTIFIER )? '{' struct_declaration_list '}' | struct_or_union ( gcc_attribute_list )? IDENTIFIER )
			int alt17=2;
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==98||LA17_0==102))
			{
				switch (input.LA(2))
				{
				case 64:
					{
					int LA17_2 = input.LA(3);

					if ((LA17_2==30))
					{
						int LA17_5 = input.LA(4);

						if ((EvaluatePredicate(synpred36_C_fragment)))
						{
							alt17 = 1;
						}
						else if ((true))
						{
							alt17 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 17, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 17, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENTIFIER:
					{
					int LA17_3 = input.LA(3);

					if ((LA17_3==107))
					{
						alt17 = 1;
					}
					else if ((LA17_3==EOF||LA17_3==IDENTIFIER||(LA17_3>=30 && LA17_3<=32)||LA17_3==37||(LA17_3>=46 && LA17_3<=47)||LA17_3==59||LA17_3==64||(LA17_3>=67 && LA17_3<=72)||(LA17_3>=75 && LA17_3<=76)||LA17_3==80||(LA17_3>=82 && LA17_3<=84)||(LA17_3>=88 && LA17_3<=92)||(LA17_3>=94 && LA17_3<=95)||(LA17_3>=97 && LA17_3<=98)||(LA17_3>=101 && LA17_3<=105)))
					{
						alt17 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 17, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 107:
					{
					alt17 = 1;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 17, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:161:4: struct_or_union ( gcc_attribute_list )? ( IDENTIFIER )? '{' struct_declaration_list '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(161, 4);
				PushFollow(Follow._struct_or_union_in_struct_or_union_specifier441);
				struct_or_union43=struct_or_union();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_or_union43.Tree, struct_or_union43, retval);
				DebugLocation(161, 20);
				// C.g:161:20: ( gcc_attribute_list )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==64))
				{
					alt14 = 1;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:161:20: gcc_attribute_list
					{
					DebugLocation(161, 20);
					PushFollow(Follow._gcc_attribute_list_in_struct_or_union_specifier443);
					gcc_attribute_list44=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list44.Tree, gcc_attribute_list44, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(14); }

				DebugLocation(161, 40);
				// C.g:161:40: ( IDENTIFIER )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==IDENTIFIER))
				{
					alt15 = 1;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:161:40: IDENTIFIER
					{
					DebugLocation(161, 40);
					IDENTIFIER45=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_struct_or_union_specifier446), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER45_tree = (object)adaptor.Create(IDENTIFIER45, retval);
					adaptor.AddChild(root_0, IDENTIFIER45_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(15); }

				DebugLocation(161, 52);
				char_literal46=(IToken)Match(input,107,Follow._107_in_struct_or_union_specifier449); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal46_tree = (object)adaptor.Create(char_literal46, retval);
				adaptor.AddChild(root_0, char_literal46_tree);
				}
				DebugLocation(161, 56);
				PushFollow(Follow._struct_declaration_list_in_struct_or_union_specifier451);
				struct_declaration_list47=struct_declaration_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration_list47.Tree, struct_declaration_list47, retval);
				DebugLocation(161, 80);
				char_literal48=(IToken)Match(input,111,Follow._111_in_struct_or_union_specifier453); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal48_tree = (object)adaptor.Create(char_literal48, retval);
				adaptor.AddChild(root_0, char_literal48_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:162:4: struct_or_union ( gcc_attribute_list )? IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(162, 4);
				PushFollow(Follow._struct_or_union_in_struct_or_union_specifier458);
				struct_or_union49=struct_or_union();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_or_union49.Tree, struct_or_union49, retval);
				DebugLocation(162, 20);
				// C.g:162:20: ( gcc_attribute_list )?
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==64))
				{
					alt16 = 1;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:162:20: gcc_attribute_list
					{
					DebugLocation(162, 20);
					PushFollow(Follow._gcc_attribute_list_in_struct_or_union_specifier460);
					gcc_attribute_list50=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list50.Tree, gcc_attribute_list50, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(16); }

				DebugLocation(162, 40);
				IDENTIFIER51=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_struct_or_union_specifier463), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER51_tree = (object)adaptor.Create(IDENTIFIER51, retval);
				adaptor.AddChild(root_0, IDENTIFIER51_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_or_union_specifier", 11);
			LeaveRule("struct_or_union_specifier", 11);
			LeaveRule_struct_or_union_specifier();
			if (state.backtracking > 0) { Memoize(input, 11, struct_or_union_specifier_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(163, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_or_union_specifier"); }
		return retval;

	}
	// $ANTLR end "struct_or_union_specifier"

	partial void EnterRule_struct_or_union();
	partial void LeaveRule_struct_or_union();

	// $ANTLR start "struct_or_union"
	// C.g:165:1: struct_or_union : ( 'struct' | 'union' );
	[GrammarRule("struct_or_union")]
	public XAstParserRuleReturnScope struct_or_union()
	{
		EnterRule_struct_or_union();
		EnterRule("struct_or_union", 12);
		var retval = new XAstParserRuleReturnScope("struct_or_union");
		
		retval.Start = (IToken)input.LT(1);
		int struct_or_union_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set52 = default(IToken);

		object set52_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_or_union");
		DebugLocation(165, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// C.g:166:2: ( 'struct' | 'union' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(166, 2);

			set52=(IToken)input.LT(1);
			if (input.LA(1)==98||input.LA(1)==102)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set52, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_or_union", 12);
			LeaveRule("struct_or_union", 12);
			LeaveRule_struct_or_union();
			if (state.backtracking > 0) { Memoize(input, 12, struct_or_union_StartIndex); }

		}
		DebugLocation(168, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_or_union"); }
		return retval;

	}
	// $ANTLR end "struct_or_union"

	partial void EnterRule_struct_declaration_list();
	partial void LeaveRule_struct_declaration_list();

	// $ANTLR start "struct_declaration_list"
	// C.g:170:1: struct_declaration_list : ( struct_declaration )+ ;
	[GrammarRule("struct_declaration_list")]
	public XAstParserRuleReturnScope struct_declaration_list()
	{
		EnterRule_struct_declaration_list();
		EnterRule("struct_declaration_list", 13);
		var retval = new XAstParserRuleReturnScope("struct_declaration_list");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declaration_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope struct_declaration53 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "struct_declaration_list");
		DebugLocation(170, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// C.g:171:2: ( ( struct_declaration )+ )
			DebugEnterAlt(1);
			// C.g:171:4: ( struct_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(171, 4);
			// C.g:171:4: ( struct_declaration )+
			int cnt18=0;
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==IDENTIFIER||LA18_0==47||LA18_0==64||LA18_0==68||LA18_0==71||(LA18_0>=75 && LA18_0<=76)||LA18_0==80||LA18_0==82||LA18_0==84||(LA18_0>=89 && LA18_0<=90)||LA18_0==92||(LA18_0>=94 && LA18_0<=95)||LA18_0==98||(LA18_0>=101 && LA18_0<=105)))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:171:4: struct_declaration
					{
					DebugLocation(171, 4);
					PushFollow(Follow._struct_declaration_in_struct_declaration_list490);
					struct_declaration53=struct_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration53.Tree, struct_declaration53, retval);

					}
					break;

				default:
					if (cnt18 >= 1)
						goto loop18;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee18 = new EarlyExitException( 18, input );
					DebugRecognitionException(eee18);
					throw eee18;
				}
				cnt18++;
			}
			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declaration_list", 13);
			LeaveRule("struct_declaration_list", 13);
			LeaveRule_struct_declaration_list();
			if (state.backtracking > 0) { Memoize(input, 13, struct_declaration_list_StartIndex); }

		}
		DebugLocation(172, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_declaration_list"); }
		return retval;

	}
	// $ANTLR end "struct_declaration_list"

	partial void EnterRule_struct_declaration();
	partial void LeaveRule_struct_declaration();

	// $ANTLR start "struct_declaration"
	// C.g:174:1: struct_declaration : ( specifier_qualifier_list struct_declarator_list ';' | ';' );
	[GrammarRule("struct_declaration")]
	public XAstParserRuleReturnScope struct_declaration()
	{
		EnterRule_struct_declaration();
		EnterRule("struct_declaration", 14);
		var retval = new XAstParserRuleReturnScope("struct_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal56 = default(IToken);
		IToken char_literal57 = default(IToken);
		XAstParserRuleReturnScope specifier_qualifier_list54 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declarator_list55 = default(XAstParserRuleReturnScope);

		object char_literal56_tree = default(object);
		object char_literal57_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_declaration");
		DebugLocation(174, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// C.g:175:2: ( specifier_qualifier_list struct_declarator_list ';' | ';' )
			int alt19=2;
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==IDENTIFIER||LA19_0==64||LA19_0==68||LA19_0==71||(LA19_0>=75 && LA19_0<=76)||LA19_0==80||LA19_0==82||LA19_0==84||(LA19_0>=89 && LA19_0<=90)||LA19_0==92||(LA19_0>=94 && LA19_0<=95)||LA19_0==98||(LA19_0>=101 && LA19_0<=105)))
			{
				alt19 = 1;
			}
			else if ((LA19_0==47))
			{
				alt19 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:175:4: specifier_qualifier_list struct_declarator_list ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(175, 4);
				PushFollow(Follow._specifier_qualifier_list_in_struct_declaration502);
				specifier_qualifier_list54=specifier_qualifier_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, specifier_qualifier_list54.Tree, specifier_qualifier_list54, retval);
				DebugLocation(175, 29);
				PushFollow(Follow._struct_declarator_list_in_struct_declaration504);
				struct_declarator_list55=struct_declarator_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declarator_list55.Tree, struct_declarator_list55, retval);
				DebugLocation(175, 52);
				char_literal56=(IToken)Match(input,47,Follow._47_in_struct_declaration506); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal56_tree = (object)adaptor.Create(char_literal56, retval);
				adaptor.AddChild(root_0, char_literal56_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:176:4: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(176, 4);
				char_literal57=(IToken)Match(input,47,Follow._47_in_struct_declaration511); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal57_tree = (object)adaptor.Create(char_literal57, retval);
				adaptor.AddChild(root_0, char_literal57_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declaration", 14);
			LeaveRule("struct_declaration", 14);
			LeaveRule_struct_declaration();
			if (state.backtracking > 0) { Memoize(input, 14, struct_declaration_StartIndex); }

		}
		DebugLocation(177, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_declaration"); }
		return retval;

	}
	// $ANTLR end "struct_declaration"

	partial void EnterRule_specifier_qualifier_list();
	partial void LeaveRule_specifier_qualifier_list();

	// $ANTLR start "specifier_qualifier_list"
	// C.g:179:1: specifier_qualifier_list : ( type_qualifier | type_specifier | gcc_declaration_specifier )+ ;
	[GrammarRule("specifier_qualifier_list")]
	public XAstParserRuleReturnScope specifier_qualifier_list()
	{
		EnterRule_specifier_qualifier_list();
		EnterRule("specifier_qualifier_list", 15);
		var retval = new XAstParserRuleReturnScope("specifier_qualifier_list");
		
		retval.Start = (IToken)input.LT(1);
		int specifier_qualifier_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope type_qualifier58 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_specifier59 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_declaration_specifier60 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "specifier_qualifier_list");
		DebugLocation(179, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// C.g:180:2: ( ( type_qualifier | type_specifier | gcc_declaration_specifier )+ )
			DebugEnterAlt(1);
			// C.g:180:4: ( type_qualifier | type_specifier | gcc_declaration_specifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(180, 4);
			// C.g:180:4: ( type_qualifier | type_specifier | gcc_declaration_specifier )+
			int cnt20=0;
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=4;
				try { DebugEnterDecision(20, false);
				switch (input.LA(1))
				{
				case IDENTIFIER:
					{
					int LA20_2 = input.LA(2);

					if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred42_C_fragment))))
					{
						alt20 = 2;
					}


					}
					break;
				case 71:
				case 76:
				case 92:
				case 105:
					{
					alt20 = 1;
					}
					break;
				case 75:
				case 80:
				case 82:
				case 84:
				case 89:
				case 90:
				case 94:
				case 95:
				case 98:
				case 101:
				case 102:
				case 103:
				case 104:
					{
					alt20 = 2;
					}
					break;
				case 64:
				case 68:
					{
					alt20 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:180:6: type_qualifier
					{
					DebugLocation(180, 6);
					PushFollow(Follow._type_qualifier_in_specifier_qualifier_list525);
					type_qualifier58=type_qualifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier58.Tree, type_qualifier58, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:180:23: type_specifier
					{
					DebugLocation(180, 23);
					PushFollow(Follow._type_specifier_in_specifier_qualifier_list529);
					type_specifier59=type_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_specifier59.Tree, type_specifier59, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C.g:180:40: gcc_declaration_specifier
					{
					DebugLocation(180, 40);
					PushFollow(Follow._gcc_declaration_specifier_in_specifier_qualifier_list533);
					gcc_declaration_specifier60=gcc_declaration_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_declaration_specifier60.Tree, gcc_declaration_specifier60, retval);

					}
					break;

				default:
					if (cnt20 >= 1)
						goto loop20;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee20 = new EarlyExitException( 20, input );
					DebugRecognitionException(eee20);
					throw eee20;
				}
				cnt20++;
			}
			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("specifier_qualifier_list", 15);
			LeaveRule("specifier_qualifier_list", 15);
			LeaveRule_specifier_qualifier_list();
			if (state.backtracking > 0) { Memoize(input, 15, specifier_qualifier_list_StartIndex); }

		}
		DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "specifier_qualifier_list"); }
		return retval;

	}
	// $ANTLR end "specifier_qualifier_list"

	partial void EnterRule_struct_declarator_list();
	partial void LeaveRule_struct_declarator_list();

	// $ANTLR start "struct_declarator_list"
	// C.g:183:1: struct_declarator_list : struct_declarator ( ',' struct_declarator )* ;
	[GrammarRule("struct_declarator_list")]
	public XAstParserRuleReturnScope struct_declarator_list()
	{
		EnterRule_struct_declarator_list();
		EnterRule("struct_declarator_list", 16);
		var retval = new XAstParserRuleReturnScope("struct_declarator_list");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declarator_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal62 = default(IToken);
		XAstParserRuleReturnScope struct_declarator61 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declarator63 = default(XAstParserRuleReturnScope);

		object char_literal62_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_declarator_list");
		DebugLocation(183, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// C.g:184:2: ( struct_declarator ( ',' struct_declarator )* )
			DebugEnterAlt(1);
			// C.g:184:4: struct_declarator ( ',' struct_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(184, 4);
			PushFollow(Follow._struct_declarator_in_struct_declarator_list546);
			struct_declarator61=struct_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declarator61.Tree, struct_declarator61, retval);
			DebugLocation(184, 22);
			// C.g:184:22: ( ',' struct_declarator )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==37))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:184:23: ',' struct_declarator
					{
					DebugLocation(184, 23);
					char_literal62=(IToken)Match(input,37,Follow._37_in_struct_declarator_list549); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal62_tree = (object)adaptor.Create(char_literal62, retval);
					adaptor.AddChild(root_0, char_literal62_tree);
					}
					DebugLocation(184, 27);
					PushFollow(Follow._struct_declarator_in_struct_declarator_list551);
					struct_declarator63=struct_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declarator63.Tree, struct_declarator63, retval);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declarator_list", 16);
			LeaveRule("struct_declarator_list", 16);
			LeaveRule_struct_declarator_list();
			if (state.backtracking > 0) { Memoize(input, 16, struct_declarator_list_StartIndex); }

		}
		DebugLocation(185, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_declarator_list"); }
		return retval;

	}
	// $ANTLR end "struct_declarator_list"

	partial void EnterRule_struct_declarator();
	partial void LeaveRule_struct_declarator();

	// $ANTLR start "struct_declarator"
	// C.g:187:1: struct_declarator : ( declarator | ( declarator )? ':' constant_expression ( gcc_attribute_list )? );
	[GrammarRule("struct_declarator")]
	public XAstParserRuleReturnScope struct_declarator()
	{
		EnterRule_struct_declarator();
		EnterRule("struct_declarator", 17);
		var retval = new XAstParserRuleReturnScope("struct_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal66 = default(IToken);
		XAstParserRuleReturnScope declarator64 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator65 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression67 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute_list68 = default(XAstParserRuleReturnScope);

		object char_literal66_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_declarator");
		DebugLocation(187, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// C.g:188:2: ( declarator | ( declarator )? ':' constant_expression ( gcc_attribute_list )? )
			int alt24=2;
			try { DebugEnterDecision(24, false);
			switch (input.LA(1))
			{
			case 32:
				{
				switch (input.LA(2))
				{
				case 71:
				case 76:
				case 92:
				case 105:
					{
					int LA24_5 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 5, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 64:
					{
					int LA24_6 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 6, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENTIFIER:
					{
					int LA24_7 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 7, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 30:
					{
					int LA24_8 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 8, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 32:
					{
					int LA24_9 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 9, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case EOF:
				case 37:
				case 47:
					{
					alt24 = 1;
					}
					break;
				case 46:
					{
					alt24 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case IDENTIFIER:
				{
				switch (input.LA(2))
				{
				case 59:
					{
					int LA24_14 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 14, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 30:
					{
					int LA24_15 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 15, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 64:
					{
					int LA24_16 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 16, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case EOF:
				case 37:
				case 47:
					{
					alt24 = 1;
					}
					break;
				case 46:
					{
					alt24 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 30:
				{
				switch (input.LA(2))
				{
				case 64:
					{
					int LA24_21 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 21, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 32:
					{
					int LA24_22 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 22, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENTIFIER:
					{
					int LA24_23 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 23, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 30:
					{
					int LA24_24 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 24, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 46:
				{
				alt24 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:188:4: declarator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(188, 4);
				PushFollow(Follow._declarator_in_struct_declarator564);
				declarator64=declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declarator64.Tree, declarator64, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:189:4: ( declarator )? ':' constant_expression ( gcc_attribute_list )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(189, 4);
				// C.g:189:4: ( declarator )?
				int alt22=2;
				try { DebugEnterSubRule(22);
				try { DebugEnterDecision(22, false);
				int LA22_0 = input.LA(1);

				if ((LA22_0==IDENTIFIER||LA22_0==30||LA22_0==32))
				{
					alt22 = 1;
				}
				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:189:4: declarator
					{
					DebugLocation(189, 4);
					PushFollow(Follow._declarator_in_struct_declarator569);
					declarator65=declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declarator65.Tree, declarator65, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(22); }

				DebugLocation(189, 16);
				char_literal66=(IToken)Match(input,46,Follow._46_in_struct_declarator572); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal66_tree = (object)adaptor.Create(char_literal66, retval);
				adaptor.AddChild(root_0, char_literal66_tree);
				}
				DebugLocation(189, 20);
				PushFollow(Follow._constant_expression_in_struct_declarator574);
				constant_expression67=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression67.Tree, constant_expression67, retval);
				DebugLocation(189, 40);
				// C.g:189:40: ( gcc_attribute_list )?
				int alt23=2;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, false);
				int LA23_0 = input.LA(1);

				if ((LA23_0==64))
				{
					alt23 = 1;
				}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:189:40: gcc_attribute_list
					{
					DebugLocation(189, 40);
					PushFollow(Follow._gcc_attribute_list_in_struct_declarator576);
					gcc_attribute_list68=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list68.Tree, gcc_attribute_list68, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(23); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declarator", 17);
			LeaveRule("struct_declarator", 17);
			LeaveRule_struct_declarator();
			if (state.backtracking > 0) { Memoize(input, 17, struct_declarator_StartIndex); }

		}
		DebugLocation(190, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_declarator"); }
		return retval;

	}
	// $ANTLR end "struct_declarator"

	partial void EnterRule_enum_specifier();
	partial void LeaveRule_enum_specifier();

	// $ANTLR start "enum_specifier"
	// C.g:192:1: enum_specifier options {k=4; } : ( 'enum' ( gcc_attribute_list )? ( IDENTIFIER )? '{' enumerator_list '}' | 'enum' ( gcc_attribute_list )? IDENTIFIER );
	[GrammarRule("enum_specifier")]
	public XAstParserRuleReturnScope enum_specifier()
	{
		EnterRule_enum_specifier();
		EnterRule("enum_specifier", 18);
		var retval = new XAstParserRuleReturnScope("enum_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int enum_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal69 = default(IToken);
		IToken IDENTIFIER71 = default(IToken);
		IToken char_literal72 = default(IToken);
		IToken char_literal74 = default(IToken);
		IToken string_literal75 = default(IToken);
		IToken IDENTIFIER77 = default(IToken);
		XAstParserRuleReturnScope gcc_attribute_list70 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enumerator_list73 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute_list76 = default(XAstParserRuleReturnScope);

		object string_literal69_tree = default(object);
		object IDENTIFIER71_tree = default(object);
		object char_literal72_tree = default(object);
		object char_literal74_tree = default(object);
		object string_literal75_tree = default(object);
		object IDENTIFIER77_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enum_specifier");
		DebugLocation(192, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// C.g:194:2: ( 'enum' ( gcc_attribute_list )? ( IDENTIFIER )? '{' enumerator_list '}' | 'enum' ( gcc_attribute_list )? IDENTIFIER )
			int alt28=2;
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==82))
			{
				switch (input.LA(2))
				{
				case 64:
					{
					int LA28_2 = input.LA(3);

					if ((LA28_2==30))
					{
						int LA28_5 = input.LA(4);

						if ((LA28_5==30))
						{
							int LA28_33 = input.LA(5);

							if ((EvaluatePredicate(synpred50_C_fragment)))
							{
								alt28 = 1;
							}
							else if ((true))
							{
								alt28 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 28, 33, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 28, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 28, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENTIFIER:
					{
					int LA28_3 = input.LA(3);

					if ((LA28_3==107))
					{
						alt28 = 1;
					}
					else if ((LA28_3==EOF||LA28_3==IDENTIFIER||(LA28_3>=30 && LA28_3<=32)||LA28_3==37||(LA28_3>=46 && LA28_3<=47)||LA28_3==59||LA28_3==64||(LA28_3>=67 && LA28_3<=72)||(LA28_3>=75 && LA28_3<=76)||LA28_3==80||(LA28_3>=82 && LA28_3<=84)||(LA28_3>=88 && LA28_3<=92)||(LA28_3>=94 && LA28_3<=95)||(LA28_3>=97 && LA28_3<=98)||(LA28_3>=101 && LA28_3<=105)))
					{
						alt28 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 28, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 107:
					{
					alt28 = 1;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 28, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 28, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:194:4: 'enum' ( gcc_attribute_list )? ( IDENTIFIER )? '{' enumerator_list '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(194, 4);
				string_literal69=(IToken)Match(input,82,Follow._82_in_enum_specifier595); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal69_tree = (object)adaptor.Create(string_literal69, retval);
				adaptor.AddChild(root_0, string_literal69_tree);
				}
				DebugLocation(194, 11);
				// C.g:194:11: ( gcc_attribute_list )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==64))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:194:11: gcc_attribute_list
					{
					DebugLocation(194, 11);
					PushFollow(Follow._gcc_attribute_list_in_enum_specifier597);
					gcc_attribute_list70=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list70.Tree, gcc_attribute_list70, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(25); }

				DebugLocation(194, 31);
				// C.g:194:31: ( IDENTIFIER )?
				int alt26=2;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==IDENTIFIER))
				{
					alt26 = 1;
				}
				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:194:31: IDENTIFIER
					{
					DebugLocation(194, 31);
					IDENTIFIER71=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enum_specifier600), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER71_tree = (object)adaptor.Create(IDENTIFIER71, retval);
					adaptor.AddChild(root_0, IDENTIFIER71_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(26); }

				DebugLocation(194, 43);
				char_literal72=(IToken)Match(input,107,Follow._107_in_enum_specifier603); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal72_tree = (object)adaptor.Create(char_literal72, retval);
				adaptor.AddChild(root_0, char_literal72_tree);
				}
				DebugLocation(194, 47);
				PushFollow(Follow._enumerator_list_in_enum_specifier605);
				enumerator_list73=enumerator_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator_list73.Tree, enumerator_list73, retval);
				DebugLocation(194, 63);
				char_literal74=(IToken)Match(input,111,Follow._111_in_enum_specifier607); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal74_tree = (object)adaptor.Create(char_literal74, retval);
				adaptor.AddChild(root_0, char_literal74_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:195:4: 'enum' ( gcc_attribute_list )? IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(195, 4);
				string_literal75=(IToken)Match(input,82,Follow._82_in_enum_specifier612); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal75_tree = (object)adaptor.Create(string_literal75, retval);
				adaptor.AddChild(root_0, string_literal75_tree);
				}
				DebugLocation(195, 11);
				// C.g:195:11: ( gcc_attribute_list )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if ((LA27_0==64))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:195:11: gcc_attribute_list
					{
					DebugLocation(195, 11);
					PushFollow(Follow._gcc_attribute_list_in_enum_specifier614);
					gcc_attribute_list76=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list76.Tree, gcc_attribute_list76, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(195, 31);
				IDENTIFIER77=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enum_specifier617), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER77_tree = (object)adaptor.Create(IDENTIFIER77, retval);
				adaptor.AddChild(root_0, IDENTIFIER77_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_specifier", 18);
			LeaveRule("enum_specifier", 18);
			LeaveRule_enum_specifier();
			if (state.backtracking > 0) { Memoize(input, 18, enum_specifier_StartIndex); }

		}
		DebugLocation(196, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_specifier"); }
		return retval;

	}
	// $ANTLR end "enum_specifier"

	partial void EnterRule_enumerator_list();
	partial void LeaveRule_enumerator_list();

	// $ANTLR start "enumerator_list"
	// C.g:198:1: enumerator_list : enumerator ( ',' enumerator )* ;
	[GrammarRule("enumerator_list")]
	public XAstParserRuleReturnScope enumerator_list()
	{
		EnterRule_enumerator_list();
		EnterRule("enumerator_list", 19);
		var retval = new XAstParserRuleReturnScope("enumerator_list");
		
		retval.Start = (IToken)input.LT(1);
		int enumerator_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal79 = default(IToken);
		XAstParserRuleReturnScope enumerator78 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enumerator80 = default(XAstParserRuleReturnScope);

		object char_literal79_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumerator_list");
		DebugLocation(198, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// C.g:199:2: ( enumerator ( ',' enumerator )* )
			DebugEnterAlt(1);
			// C.g:199:4: enumerator ( ',' enumerator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(199, 4);
			PushFollow(Follow._enumerator_in_enumerator_list628);
			enumerator78=enumerator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator78.Tree, enumerator78, retval);
			DebugLocation(199, 15);
			// C.g:199:15: ( ',' enumerator )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==37))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:199:16: ',' enumerator
					{
					DebugLocation(199, 16);
					char_literal79=(IToken)Match(input,37,Follow._37_in_enumerator_list631); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal79_tree = (object)adaptor.Create(char_literal79, retval);
					adaptor.AddChild(root_0, char_literal79_tree);
					}
					DebugLocation(199, 20);
					PushFollow(Follow._enumerator_in_enumerator_list633);
					enumerator80=enumerator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator80.Tree, enumerator80, retval);

					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumerator_list", 19);
			LeaveRule("enumerator_list", 19);
			LeaveRule_enumerator_list();
			if (state.backtracking > 0) { Memoize(input, 19, enumerator_list_StartIndex); }

		}
		DebugLocation(200, 1);
		} finally { DebugExitRule(GrammarFileName, "enumerator_list"); }
		return retval;

	}
	// $ANTLR end "enumerator_list"

	partial void EnterRule_enumerator();
	partial void LeaveRule_enumerator();

	// $ANTLR start "enumerator"
	// C.g:202:1: enumerator : IDENTIFIER ( '=' constant_expression )? ;
	[GrammarRule("enumerator")]
	public XAstParserRuleReturnScope enumerator()
	{
		EnterRule_enumerator();
		EnterRule("enumerator", 20);
		var retval = new XAstParserRuleReturnScope("enumerator");
		
		retval.Start = (IToken)input.LT(1);
		int enumerator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER81 = default(IToken);
		IToken char_literal82 = default(IToken);
		XAstParserRuleReturnScope constant_expression83 = default(XAstParserRuleReturnScope);

		object IDENTIFIER81_tree = default(object);
		object char_literal82_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumerator");
		DebugLocation(202, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// C.g:203:2: ( IDENTIFIER ( '=' constant_expression )? )
			DebugEnterAlt(1);
			// C.g:203:4: IDENTIFIER ( '=' constant_expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(203, 4);
			IDENTIFIER81=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enumerator646), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER81_tree = (object)adaptor.Create(IDENTIFIER81, retval);
			adaptor.AddChild(root_0, IDENTIFIER81_tree);
			}
			DebugLocation(203, 15);
			// C.g:203:15: ( '=' constant_expression )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==52))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:203:16: '=' constant_expression
				{
				DebugLocation(203, 16);
				char_literal82=(IToken)Match(input,52,Follow._52_in_enumerator649); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal82_tree = (object)adaptor.Create(char_literal82, retval);
				adaptor.AddChild(root_0, char_literal82_tree);
				}
				DebugLocation(203, 20);
				PushFollow(Follow._constant_expression_in_enumerator651);
				constant_expression83=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression83.Tree, constant_expression83, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumerator", 20);
			LeaveRule("enumerator", 20);
			LeaveRule_enumerator();
			if (state.backtracking > 0) { Memoize(input, 20, enumerator_StartIndex); }

		}
		DebugLocation(204, 1);
		} finally { DebugExitRule(GrammarFileName, "enumerator"); }
		return retval;

	}
	// $ANTLR end "enumerator"

	partial void EnterRule_type_qualifier();
	partial void LeaveRule_type_qualifier();

	// $ANTLR start "type_qualifier"
	// C.g:206:1: type_qualifier : ( 'const' | 'volatile' | 'restrict' | '__restrict__' );
	[GrammarRule("type_qualifier")]
	public XAstParserRuleReturnScope type_qualifier()
	{
		EnterRule_type_qualifier();
		EnterRule("type_qualifier", 21);
		var retval = new XAstParserRuleReturnScope("type_qualifier");
		
		retval.Start = (IToken)input.LT(1);
		int type_qualifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set84 = default(IToken);

		object set84_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_qualifier");
		DebugLocation(206, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// C.g:207:2: ( 'const' | 'volatile' | 'restrict' | '__restrict__' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(207, 2);

			set84=(IToken)input.LT(1);
			if (input.LA(1)==71||input.LA(1)==76||input.LA(1)==92||input.LA(1)==105)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set84, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_qualifier", 21);
			LeaveRule("type_qualifier", 21);
			LeaveRule_type_qualifier();
			if (state.backtracking > 0) { Memoize(input, 21, type_qualifier_StartIndex); }

		}
		DebugLocation(211, 1);
		} finally { DebugExitRule(GrammarFileName, "type_qualifier"); }
		return retval;

	}
	// $ANTLR end "type_qualifier"

	partial void EnterRule_declarator();
	partial void LeaveRule_declarator();

	// $ANTLR start "declarator"
	// C.g:213:1: declarator : ( ( pointer )? direct_declarator ( gcc_attribute_list )? | pointer );
	[GrammarRule("declarator")]
	public XAstParserRuleReturnScope declarator()
	{
		EnterRule_declarator();
		EnterRule("declarator", 22);
		var retval = new XAstParserRuleReturnScope("declarator");
		
		retval.Start = (IToken)input.LT(1);
		int declarator_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope pointer85 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope direct_declarator86 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute_list87 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope pointer88 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "declarator");
		DebugLocation(213, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// C.g:214:2: ( ( pointer )? direct_declarator ( gcc_attribute_list )? | pointer )
			int alt33=2;
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==32))
			{
				int LA33_1 = input.LA(2);

				if ((EvaluatePredicate(synpred59_C_fragment)))
				{
					alt33 = 1;
				}
				else if ((true))
				{
					alt33 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 33, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA33_0==IDENTIFIER||LA33_0==30))
			{
				alt33 = 1;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 33, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:214:4: ( pointer )? direct_declarator ( gcc_attribute_list )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(214, 4);
				// C.g:214:4: ( pointer )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				int LA31_0 = input.LA(1);

				if ((LA31_0==32))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:214:4: pointer
					{
					DebugLocation(214, 4);
					PushFollow(Follow._pointer_in_declarator698);
					pointer85=pointer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, pointer85.Tree, pointer85, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(31); }

				DebugLocation(214, 13);
				PushFollow(Follow._direct_declarator_in_declarator701);
				direct_declarator86=direct_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, direct_declarator86.Tree, direct_declarator86, retval);
				DebugLocation(214, 31);
				// C.g:214:31: ( gcc_attribute_list )?
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, false);
				int LA32_0 = input.LA(1);

				if ((LA32_0==64))
				{
					int LA32_1 = input.LA(2);

					if ((LA32_1==30))
					{
						int LA32_30 = input.LA(3);

						if ((EvaluatePredicate(synpred58_C_fragment)))
						{
							alt32 = 1;
						}
					}
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:214:31: gcc_attribute_list
					{
					DebugLocation(214, 31);
					PushFollow(Follow._gcc_attribute_list_in_declarator703);
					gcc_attribute_list87=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list87.Tree, gcc_attribute_list87, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(32); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:215:4: pointer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(215, 4);
				PushFollow(Follow._pointer_in_declarator709);
				pointer88=pointer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pointer88.Tree, pointer88, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declarator", 22);
			LeaveRule("declarator", 22);
			LeaveRule_declarator();
			if (state.backtracking > 0) { Memoize(input, 22, declarator_StartIndex); }

		}
		DebugLocation(216, 1);
		} finally { DebugExitRule(GrammarFileName, "declarator"); }
		return retval;

	}
	// $ANTLR end "declarator"

	partial void EnterRule_direct_declarator();
	partial void LeaveRule_direct_declarator();

	// $ANTLR start "direct_declarator"
	// C.g:218:1: direct_declarator : ( IDENTIFIER | '(' ( gcc_attribute_list )? declarator ')' ) ( declarator_suffix )* ;
	[GrammarRule("direct_declarator")]
	public XAstParserRuleReturnScope direct_declarator()
	{
		EnterRule_direct_declarator();
		EnterRule("direct_declarator", 23);
		var retval = new XAstParserRuleReturnScope("direct_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int direct_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER89 = default(IToken);
		IToken char_literal90 = default(IToken);
		IToken char_literal93 = default(IToken);
		XAstParserRuleReturnScope gcc_attribute_list91 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator92 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator_suffix94 = default(XAstParserRuleReturnScope);

		object IDENTIFIER89_tree = default(object);
		object char_literal90_tree = default(object);
		object char_literal93_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "direct_declarator");
		DebugLocation(218, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// C.g:219:2: ( ( IDENTIFIER | '(' ( gcc_attribute_list )? declarator ')' ) ( declarator_suffix )* )
			DebugEnterAlt(1);
			// C.g:219:6: ( IDENTIFIER | '(' ( gcc_attribute_list )? declarator ')' ) ( declarator_suffix )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(219, 6);
			// C.g:219:6: ( IDENTIFIER | '(' ( gcc_attribute_list )? declarator ')' )
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==IDENTIFIER))
			{
				alt35 = 1;
			}
			else if ((LA35_0==30))
			{
				alt35 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:219:8: IDENTIFIER
				{
				DebugLocation(219, 8);
				IDENTIFIER89=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_direct_declarator724), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER89_tree = (object)adaptor.Create(IDENTIFIER89, retval);
				adaptor.AddChild(root_0, IDENTIFIER89_tree);
				}
				DebugLocation(220, 4);
				if (state.backtracking == 0)
				{

								if (declaration_stack.size()>0&&declaration_stack.Peek().isTypedef) {
									Symbols_stack.Peek().types.add((IDENTIFIER89!=null?IDENTIFIER89.Text:null));
									
								}
								
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:226:5: '(' ( gcc_attribute_list )? declarator ')'
				{
				DebugLocation(226, 5);
				char_literal90=(IToken)Match(input,30,Follow._30_in_direct_declarator735); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal90_tree = (object)adaptor.Create(char_literal90, retval);
				adaptor.AddChild(root_0, char_literal90_tree);
				}
				DebugLocation(226, 9);
				// C.g:226:9: ( gcc_attribute_list )?
				int alt34=2;
				try { DebugEnterSubRule(34);
				try { DebugEnterDecision(34, false);
				int LA34_0 = input.LA(1);

				if ((LA34_0==64))
				{
					alt34 = 1;
				}
				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:226:9: gcc_attribute_list
					{
					DebugLocation(226, 9);
					PushFollow(Follow._gcc_attribute_list_in_direct_declarator737);
					gcc_attribute_list91=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list91.Tree, gcc_attribute_list91, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(34); }

				DebugLocation(226, 29);
				PushFollow(Follow._declarator_in_direct_declarator740);
				declarator92=declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declarator92.Tree, declarator92, retval);
				DebugLocation(226, 40);
				char_literal93=(IToken)Match(input,31,Follow._31_in_direct_declarator742); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal93_tree = (object)adaptor.Create(char_literal93, retval);
				adaptor.AddChild(root_0, char_literal93_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(35); }

			DebugLocation(228, 3);
			// C.g:228:3: ( declarator_suffix )*
			try { DebugEnterSubRule(36);
			while (true)
			{
				int alt36=2;
				try { DebugEnterDecision(36, false);
				try
				{
					alt36 = dfa36.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(36); }
				switch ( alt36 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:228:3: declarator_suffix
					{
					DebugLocation(228, 3);
					PushFollow(Follow._declarator_suffix_in_direct_declarator750);
					declarator_suffix94=declarator_suffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declarator_suffix94.Tree, declarator_suffix94, retval);

					}
					break;

				default:
					goto loop36;
				}
			}

			loop36:
				;

			} finally { DebugExitSubRule(36); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("direct_declarator", 23);
			LeaveRule("direct_declarator", 23);
			LeaveRule_direct_declarator();
			if (state.backtracking > 0) { Memoize(input, 23, direct_declarator_StartIndex); }

		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "direct_declarator"); }
		return retval;

	}
	// $ANTLR end "direct_declarator"

	partial void EnterRule_declarator_suffix();
	partial void LeaveRule_declarator_suffix();

	// $ANTLR start "declarator_suffix"
	// C.g:231:1: declarator_suffix : ( '[' constant_expression ']' | '[' ']' | '(' parameter_type_list ')' | '(' identifier_list ')' | '(' ')' );
	[GrammarRule("declarator_suffix")]
	public XAstParserRuleReturnScope declarator_suffix()
	{
		EnterRule_declarator_suffix();
		EnterRule("declarator_suffix", 24);
		var retval = new XAstParserRuleReturnScope("declarator_suffix");
		
		retval.Start = (IToken)input.LT(1);
		int declarator_suffix_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal95 = default(IToken);
		IToken char_literal97 = default(IToken);
		IToken char_literal98 = default(IToken);
		IToken char_literal99 = default(IToken);
		IToken char_literal100 = default(IToken);
		IToken char_literal102 = default(IToken);
		IToken char_literal103 = default(IToken);
		IToken char_literal105 = default(IToken);
		IToken char_literal106 = default(IToken);
		IToken char_literal107 = default(IToken);
		XAstParserRuleReturnScope constant_expression96 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope parameter_type_list101 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier_list104 = default(XAstParserRuleReturnScope);

		object char_literal95_tree = default(object);
		object char_literal97_tree = default(object);
		object char_literal98_tree = default(object);
		object char_literal99_tree = default(object);
		object char_literal100_tree = default(object);
		object char_literal102_tree = default(object);
		object char_literal103_tree = default(object);
		object char_literal105_tree = default(object);
		object char_literal106_tree = default(object);
		object char_literal107_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "declarator_suffix");
		DebugLocation(231, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// C.g:232:2: ( '[' constant_expression ']' | '[' ']' | '(' parameter_type_list ')' | '(' identifier_list ')' | '(' ')' )
			int alt37=5;
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==59))
			{
				int LA37_1 = input.LA(2);

				if ((LA37_1==60))
				{
					alt37 = 2;
				}
				else if ((LA37_1==CHARACTER_LITERAL||LA37_1==DECIMAL_LITERAL||LA37_1==FLOATING_POINT_LITERAL||LA37_1==HEX_LITERAL||LA37_1==IDENTIFIER||LA37_1==OCTAL_LITERAL||LA37_1==STRING_LITERAL||LA37_1==23||LA37_1==28||LA37_1==30||LA37_1==32||(LA37_1>=34 && LA37_1<=35)||(LA37_1>=38 && LA37_1<=39)||LA37_1==63||(LA37_1>=65 && LA37_1<=66)||LA37_1==68||LA37_1==96||LA37_1==112))
				{
					alt37 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 37, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA37_0==30))
			{
				switch (input.LA(2))
				{
				case 31:
					{
					alt37 = 5;
					}
					break;
				case 64:
				case 67:
				case 68:
				case 69:
				case 70:
				case 71:
				case 72:
				case 75:
				case 76:
				case 80:
				case 82:
				case 83:
				case 84:
				case 88:
				case 89:
				case 90:
				case 91:
				case 92:
				case 94:
				case 95:
				case 97:
				case 98:
				case 101:
				case 102:
				case 103:
				case 104:
				case 105:
					{
					alt37 = 3;
					}
					break;
				case IDENTIFIER:
					{
					int LA37_33 = input.LA(3);

					if ((EvaluatePredicate(synpred65_C_fragment)))
					{
						alt37 = 3;
					}
					else if ((EvaluatePredicate(synpred66_C_fragment)))
					{
						alt37 = 4;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 37, 33, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 37, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:232:6: '[' constant_expression ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(232, 6);
				char_literal95=(IToken)Match(input,59,Follow._59_in_declarator_suffix764); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal95_tree = (object)adaptor.Create(char_literal95, retval);
				adaptor.AddChild(root_0, char_literal95_tree);
				}
				DebugLocation(232, 10);
				PushFollow(Follow._constant_expression_in_declarator_suffix766);
				constant_expression96=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression96.Tree, constant_expression96, retval);
				DebugLocation(232, 30);
				char_literal97=(IToken)Match(input,60,Follow._60_in_declarator_suffix768); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal97_tree = (object)adaptor.Create(char_literal97, retval);
				adaptor.AddChild(root_0, char_literal97_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:233:6: '[' ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(233, 6);
				char_literal98=(IToken)Match(input,59,Follow._59_in_declarator_suffix775); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal98_tree = (object)adaptor.Create(char_literal98, retval);
				adaptor.AddChild(root_0, char_literal98_tree);
				}
				DebugLocation(233, 10);
				char_literal99=(IToken)Match(input,60,Follow._60_in_declarator_suffix777); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal99_tree = (object)adaptor.Create(char_literal99, retval);
				adaptor.AddChild(root_0, char_literal99_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:234:6: '(' parameter_type_list ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(234, 6);
				char_literal100=(IToken)Match(input,30,Follow._30_in_declarator_suffix784); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal100_tree = (object)adaptor.Create(char_literal100, retval);
				adaptor.AddChild(root_0, char_literal100_tree);
				}
				DebugLocation(234, 10);
				PushFollow(Follow._parameter_type_list_in_declarator_suffix786);
				parameter_type_list101=parameter_type_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_type_list101.Tree, parameter_type_list101, retval);
				DebugLocation(234, 30);
				char_literal102=(IToken)Match(input,31,Follow._31_in_declarator_suffix788); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal102_tree = (object)adaptor.Create(char_literal102, retval);
				adaptor.AddChild(root_0, char_literal102_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:235:6: '(' identifier_list ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(235, 6);
				char_literal103=(IToken)Match(input,30,Follow._30_in_declarator_suffix795); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal103_tree = (object)adaptor.Create(char_literal103, retval);
				adaptor.AddChild(root_0, char_literal103_tree);
				}
				DebugLocation(235, 10);
				PushFollow(Follow._identifier_list_in_declarator_suffix797);
				identifier_list104=identifier_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier_list104.Tree, identifier_list104, retval);
				DebugLocation(235, 26);
				char_literal105=(IToken)Match(input,31,Follow._31_in_declarator_suffix799); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal105_tree = (object)adaptor.Create(char_literal105, retval);
				adaptor.AddChild(root_0, char_literal105_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:236:6: '(' ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(236, 6);
				char_literal106=(IToken)Match(input,30,Follow._30_in_declarator_suffix806); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal106_tree = (object)adaptor.Create(char_literal106, retval);
				adaptor.AddChild(root_0, char_literal106_tree);
				}
				DebugLocation(236, 10);
				char_literal107=(IToken)Match(input,31,Follow._31_in_declarator_suffix808); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal107_tree = (object)adaptor.Create(char_literal107, retval);
				adaptor.AddChild(root_0, char_literal107_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declarator_suffix", 24);
			LeaveRule("declarator_suffix", 24);
			LeaveRule_declarator_suffix();
			if (state.backtracking > 0) { Memoize(input, 24, declarator_suffix_StartIndex); }

		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "declarator_suffix"); }
		return retval;

	}
	// $ANTLR end "declarator_suffix"

	partial void EnterRule_pointer();
	partial void LeaveRule_pointer();

	// $ANTLR start "pointer"
	// C.g:239:1: pointer : ( '*' ( type_qualifier | gcc_attribute )* )+ ;
	[GrammarRule("pointer")]
	public XAstParserRuleReturnScope pointer()
	{
		EnterRule_pointer();
		EnterRule("pointer", 25);
		var retval = new XAstParserRuleReturnScope("pointer");
		
		retval.Start = (IToken)input.LT(1);
		int pointer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal108 = default(IToken);
		XAstParserRuleReturnScope type_qualifier109 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute110 = default(XAstParserRuleReturnScope);

		object char_literal108_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "pointer");
		DebugLocation(239, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// C.g:240:2: ( ( '*' ( type_qualifier | gcc_attribute )* )+ )
			DebugEnterAlt(1);
			// C.g:240:4: ( '*' ( type_qualifier | gcc_attribute )* )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(240, 4);
			// C.g:240:4: ( '*' ( type_qualifier | gcc_attribute )* )+
			int cnt39=0;
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, false);
				try
				{
					alt39 = dfa39.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:240:5: '*' ( type_qualifier | gcc_attribute )*
					{
					DebugLocation(240, 5);
					char_literal108=(IToken)Match(input,32,Follow._32_in_pointer822); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal108_tree = (object)adaptor.Create(char_literal108, retval);
					adaptor.AddChild(root_0, char_literal108_tree);
					}
					DebugLocation(240, 9);
					// C.g:240:9: ( type_qualifier | gcc_attribute )*
					try { DebugEnterSubRule(38);
					while (true)
					{
						int alt38=3;
						try { DebugEnterDecision(38, false);
						try
						{
							alt38 = dfa38.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(38); }
						switch ( alt38 )
						{
						case 1:
							DebugEnterAlt(1);
							// C.g:240:10: type_qualifier
							{
							DebugLocation(240, 10);
							PushFollow(Follow._type_qualifier_in_pointer825);
							type_qualifier109=type_qualifier();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier109.Tree, type_qualifier109, retval);

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C.g:240:27: gcc_attribute
							{
							DebugLocation(240, 27);
							PushFollow(Follow._gcc_attribute_in_pointer829);
							gcc_attribute110=gcc_attribute();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute110.Tree, gcc_attribute110, retval);

							}
							break;

						default:
							goto loop38;
						}
					}

					loop38:
						;

					} finally { DebugExitSubRule(38); }


					}
					break;

				default:
					if (cnt39 >= 1)
						goto loop39;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee39 = new EarlyExitException( 39, input );
					DebugRecognitionException(eee39);
					throw eee39;
				}
				cnt39++;
			}
			loop39:
				;

			} finally { DebugExitSubRule(39); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pointer", 25);
			LeaveRule("pointer", 25);
			LeaveRule_pointer();
			if (state.backtracking > 0) { Memoize(input, 25, pointer_StartIndex); }

		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "pointer"); }
		return retval;

	}
	// $ANTLR end "pointer"

	partial void EnterRule_parameter_type_list();
	partial void LeaveRule_parameter_type_list();

	// $ANTLR start "parameter_type_list"
	// C.g:243:1: parameter_type_list : parameter_list ( ',' '...' )? ;
	[GrammarRule("parameter_type_list")]
	public XAstParserRuleReturnScope parameter_type_list()
	{
		EnterRule_parameter_type_list();
		EnterRule("parameter_type_list", 26);
		var retval = new XAstParserRuleReturnScope("parameter_type_list");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_type_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal112 = default(IToken);
		IToken string_literal113 = default(IToken);
		XAstParserRuleReturnScope parameter_list111 = default(XAstParserRuleReturnScope);

		object char_literal112_tree = default(object);
		object string_literal113_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parameter_type_list");
		DebugLocation(243, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// C.g:244:2: ( parameter_list ( ',' '...' )? )
			DebugEnterAlt(1);
			// C.g:244:4: parameter_list ( ',' '...' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(244, 4);
			PushFollow(Follow._parameter_list_in_parameter_type_list844);
			parameter_list111=parameter_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_list111.Tree, parameter_list111, retval);
			DebugLocation(244, 19);
			// C.g:244:19: ( ',' '...' )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==37))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:244:20: ',' '...'
				{
				DebugLocation(244, 20);
				char_literal112=(IToken)Match(input,37,Follow._37_in_parameter_type_list847); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal112_tree = (object)adaptor.Create(char_literal112, retval);
				adaptor.AddChild(root_0, char_literal112_tree);
				}
				DebugLocation(244, 24);
				string_literal113=(IToken)Match(input,43,Follow._43_in_parameter_type_list849); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal113_tree = (object)adaptor.Create(string_literal113, retval);
				adaptor.AddChild(root_0, string_literal113_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(40); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_type_list", 26);
			LeaveRule("parameter_type_list", 26);
			LeaveRule_parameter_type_list();
			if (state.backtracking > 0) { Memoize(input, 26, parameter_type_list_StartIndex); }

		}
		DebugLocation(245, 1);
		} finally { DebugExitRule(GrammarFileName, "parameter_type_list"); }
		return retval;

	}
	// $ANTLR end "parameter_type_list"

	partial void EnterRule_parameter_list();
	partial void LeaveRule_parameter_list();

	// $ANTLR start "parameter_list"
	// C.g:247:1: parameter_list : parameter_declaration ( ',' parameter_declaration )* ;
	[GrammarRule("parameter_list")]
	public XAstParserRuleReturnScope parameter_list()
	{
		EnterRule_parameter_list();
		EnterRule("parameter_list", 27);
		var retval = new XAstParserRuleReturnScope("parameter_list");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal115 = default(IToken);
		XAstParserRuleReturnScope parameter_declaration114 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope parameter_declaration116 = default(XAstParserRuleReturnScope);

		object char_literal115_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parameter_list");
		DebugLocation(247, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// C.g:248:2: ( parameter_declaration ( ',' parameter_declaration )* )
			DebugEnterAlt(1);
			// C.g:248:4: parameter_declaration ( ',' parameter_declaration )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(248, 4);
			PushFollow(Follow._parameter_declaration_in_parameter_list862);
			parameter_declaration114=parameter_declaration();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_declaration114.Tree, parameter_declaration114, retval);
			DebugLocation(248, 26);
			// C.g:248:26: ( ',' parameter_declaration )*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==37))
				{
					int LA41_1 = input.LA(2);

					if ((LA41_1==IDENTIFIER||LA41_1==64||(LA41_1>=67 && LA41_1<=72)||(LA41_1>=75 && LA41_1<=76)||LA41_1==80||(LA41_1>=82 && LA41_1<=84)||(LA41_1>=88 && LA41_1<=92)||(LA41_1>=94 && LA41_1<=95)||(LA41_1>=97 && LA41_1<=98)||(LA41_1>=101 && LA41_1<=105)))
					{
						alt41 = 1;
					}


				}


				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:248:27: ',' parameter_declaration
					{
					DebugLocation(248, 27);
					char_literal115=(IToken)Match(input,37,Follow._37_in_parameter_list865); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal115_tree = (object)adaptor.Create(char_literal115, retval);
					adaptor.AddChild(root_0, char_literal115_tree);
					}
					DebugLocation(248, 31);
					PushFollow(Follow._parameter_declaration_in_parameter_list867);
					parameter_declaration116=parameter_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_declaration116.Tree, parameter_declaration116, retval);

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_list", 27);
			LeaveRule("parameter_list", 27);
			LeaveRule_parameter_list();
			if (state.backtracking > 0) { Memoize(input, 27, parameter_list_StartIndex); }

		}
		DebugLocation(249, 1);
		} finally { DebugExitRule(GrammarFileName, "parameter_list"); }
		return retval;

	}
	// $ANTLR end "parameter_list"

	partial void EnterRule_parameter_declaration();
	partial void LeaveRule_parameter_declaration();

	// $ANTLR start "parameter_declaration"
	// C.g:251:1: parameter_declaration : declaration_specifiers ( declarator | abstract_declarator )* ;
	[GrammarRule("parameter_declaration")]
	public XAstParserRuleReturnScope parameter_declaration()
	{
		EnterRule_parameter_declaration();
		EnterRule("parameter_declaration", 28);
		var retval = new XAstParserRuleReturnScope("parameter_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope declaration_specifiers117 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator118 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator119 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "parameter_declaration");
		DebugLocation(251, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// C.g:252:2: ( declaration_specifiers ( declarator | abstract_declarator )* )
			DebugEnterAlt(1);
			// C.g:252:4: declaration_specifiers ( declarator | abstract_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(252, 4);
			PushFollow(Follow._declaration_specifiers_in_parameter_declaration880);
			declaration_specifiers117=declaration_specifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers117.Tree, declaration_specifiers117, retval);
			DebugLocation(252, 27);
			// C.g:252:27: ( declarator | abstract_declarator )*
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=3;
				try { DebugEnterDecision(42, false);
				switch (input.LA(1))
				{
				case 32:
					{
					int LA42_4 = input.LA(2);

					if ((EvaluatePredicate(synpred72_C_fragment)))
					{
						alt42 = 1;
					}
					else if ((EvaluatePredicate(synpred73_C_fragment)))
					{
						alt42 = 2;
					}


					}
					break;
				case IDENTIFIER:
					{
					alt42 = 1;
					}
					break;
				case 30:
					{
					switch (input.LA(2))
					{
					case 64:
						{
						int LA42_17 = input.LA(3);

						if ((EvaluatePredicate(synpred72_C_fragment)))
						{
							alt42 = 1;
						}
						else if ((EvaluatePredicate(synpred73_C_fragment)))
						{
							alt42 = 2;
						}


						}
						break;
					case 32:
						{
						int LA42_18 = input.LA(3);

						if ((EvaluatePredicate(synpred72_C_fragment)))
						{
							alt42 = 1;
						}
						else if ((EvaluatePredicate(synpred73_C_fragment)))
						{
							alt42 = 2;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA42_19 = input.LA(3);

						if ((EvaluatePredicate(synpred72_C_fragment)))
						{
							alt42 = 1;
						}
						else if ((EvaluatePredicate(synpred73_C_fragment)))
						{
							alt42 = 2;
						}


						}
						break;
					case 30:
						{
						int LA42_20 = input.LA(3);

						if ((EvaluatePredicate(synpred72_C_fragment)))
						{
							alt42 = 1;
						}
						else if ((EvaluatePredicate(synpred73_C_fragment)))
						{
							alt42 = 2;
						}


						}
						break;
					case 31:
					case 59:
					case 67:
					case 68:
					case 69:
					case 70:
					case 71:
					case 72:
					case 75:
					case 76:
					case 80:
					case 82:
					case 83:
					case 84:
					case 88:
					case 89:
					case 90:
					case 91:
					case 92:
					case 94:
					case 95:
					case 97:
					case 98:
					case 101:
					case 102:
					case 103:
					case 104:
					case 105:
						{
						alt42 = 2;
						}
						break;
					}

					}
					break;
				case 59:
					{
					alt42 = 2;
					}
					break;
				}

				} finally { DebugExitDecision(42); }
				switch ( alt42 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:252:28: declarator
					{
					DebugLocation(252, 28);
					PushFollow(Follow._declarator_in_parameter_declaration883);
					declarator118=declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declarator118.Tree, declarator118, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:252:39: abstract_declarator
					{
					DebugLocation(252, 39);
					PushFollow(Follow._abstract_declarator_in_parameter_declaration885);
					abstract_declarator119=abstract_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator119.Tree, abstract_declarator119, retval);

					}
					break;

				default:
					goto loop42;
				}
			}

			loop42:
				;

			} finally { DebugExitSubRule(42); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_declaration", 28);
			LeaveRule("parameter_declaration", 28);
			LeaveRule_parameter_declaration();
			if (state.backtracking > 0) { Memoize(input, 28, parameter_declaration_StartIndex); }

		}
		DebugLocation(253, 1);
		} finally { DebugExitRule(GrammarFileName, "parameter_declaration"); }
		return retval;

	}
	// $ANTLR end "parameter_declaration"

	partial void EnterRule_identifier_list();
	partial void LeaveRule_identifier_list();

	// $ANTLR start "identifier_list"
	// C.g:255:1: identifier_list : IDENTIFIER ( ',' IDENTIFIER )* ;
	[GrammarRule("identifier_list")]
	public XAstParserRuleReturnScope identifier_list()
	{
		EnterRule_identifier_list();
		EnterRule("identifier_list", 29);
		var retval = new XAstParserRuleReturnScope("identifier_list");
		
		retval.Start = (IToken)input.LT(1);
		int identifier_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER120 = default(IToken);
		IToken char_literal121 = default(IToken);
		IToken IDENTIFIER122 = default(IToken);

		object IDENTIFIER120_tree = default(object);
		object char_literal121_tree = default(object);
		object IDENTIFIER122_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "identifier_list");
		DebugLocation(255, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// C.g:256:2: ( IDENTIFIER ( ',' IDENTIFIER )* )
			DebugEnterAlt(1);
			// C.g:256:4: IDENTIFIER ( ',' IDENTIFIER )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(256, 4);
			IDENTIFIER120=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifier_list898), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER120_tree = (object)adaptor.Create(IDENTIFIER120, retval);
			adaptor.AddChild(root_0, IDENTIFIER120_tree);
			}
			DebugLocation(256, 15);
			// C.g:256:15: ( ',' IDENTIFIER )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==37))
				{
					alt43 = 1;
				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:256:16: ',' IDENTIFIER
					{
					DebugLocation(256, 16);
					char_literal121=(IToken)Match(input,37,Follow._37_in_identifier_list901); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal121_tree = (object)adaptor.Create(char_literal121, retval);
					adaptor.AddChild(root_0, char_literal121_tree);
					}
					DebugLocation(256, 20);
					IDENTIFIER122=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifier_list903), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER122_tree = (object)adaptor.Create(IDENTIFIER122, retval);
					adaptor.AddChild(root_0, IDENTIFIER122_tree);
					}

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("identifier_list", 29);
			LeaveRule("identifier_list", 29);
			LeaveRule_identifier_list();
			if (state.backtracking > 0) { Memoize(input, 29, identifier_list_StartIndex); }

		}
		DebugLocation(257, 1);
		} finally { DebugExitRule(GrammarFileName, "identifier_list"); }
		return retval;

	}
	// $ANTLR end "identifier_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// C.g:259:1: type_name : specifier_qualifier_list ( abstract_declarator )? ;
	[GrammarRule("type_name")]
	public XAstParserRuleReturnScope type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 30);
		var retval = new XAstParserRuleReturnScope("type_name");
		
		retval.Start = (IToken)input.LT(1);
		int type_name_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope specifier_qualifier_list123 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator124 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(259, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// C.g:260:2: ( specifier_qualifier_list ( abstract_declarator )? )
			DebugEnterAlt(1);
			// C.g:260:4: specifier_qualifier_list ( abstract_declarator )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(260, 4);
			PushFollow(Follow._specifier_qualifier_list_in_type_name916);
			specifier_qualifier_list123=specifier_qualifier_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, specifier_qualifier_list123.Tree, specifier_qualifier_list123, retval);
			DebugLocation(260, 29);
			// C.g:260:29: ( abstract_declarator )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==30||LA44_0==32||LA44_0==59))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:260:29: abstract_declarator
				{
				DebugLocation(260, 29);
				PushFollow(Follow._abstract_declarator_in_type_name918);
				abstract_declarator124=abstract_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator124.Tree, abstract_declarator124, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 30);
			LeaveRule("type_name", 30);
			LeaveRule_type_name();
			if (state.backtracking > 0) { Memoize(input, 30, type_name_StartIndex); }

		}
		DebugLocation(261, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_abstract_declarator();
	partial void LeaveRule_abstract_declarator();

	// $ANTLR start "abstract_declarator"
	// C.g:263:1: abstract_declarator : ( pointer | ( pointer )? direct_abstract_declarator ( gcc_attribute_list )? );
	[GrammarRule("abstract_declarator")]
	public XAstParserRuleReturnScope abstract_declarator()
	{
		EnterRule_abstract_declarator();
		EnterRule("abstract_declarator", 31);
		var retval = new XAstParserRuleReturnScope("abstract_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int abstract_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope pointer125 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope pointer126 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope direct_abstract_declarator127 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute_list128 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "abstract_declarator");
		DebugLocation(263, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// C.g:264:2: ( pointer | ( pointer )? direct_abstract_declarator ( gcc_attribute_list )? )
			int alt47=2;
			try { DebugEnterDecision(47, false);
			int LA47_0 = input.LA(1);

			if ((LA47_0==32))
			{
				int LA47_1 = input.LA(2);

				if ((EvaluatePredicate(synpred76_C_fragment)))
				{
					alt47 = 1;
				}
				else if ((true))
				{
					alt47 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 47, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA47_0==30||LA47_0==59))
			{
				alt47 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 47, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:264:4: pointer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(264, 4);
				PushFollow(Follow._pointer_in_abstract_declarator930);
				pointer125=pointer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pointer125.Tree, pointer125, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:265:4: ( pointer )? direct_abstract_declarator ( gcc_attribute_list )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(265, 4);
				// C.g:265:4: ( pointer )?
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==32))
				{
					alt45 = 1;
				}
				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:265:4: pointer
					{
					DebugLocation(265, 4);
					PushFollow(Follow._pointer_in_abstract_declarator935);
					pointer126=pointer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, pointer126.Tree, pointer126, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(45); }

				DebugLocation(265, 13);
				PushFollow(Follow._direct_abstract_declarator_in_abstract_declarator938);
				direct_abstract_declarator127=direct_abstract_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, direct_abstract_declarator127.Tree, direct_abstract_declarator127, retval);
				DebugLocation(265, 40);
				// C.g:265:40: ( gcc_attribute_list )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==64))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:265:40: gcc_attribute_list
					{
					DebugLocation(265, 40);
					PushFollow(Follow._gcc_attribute_list_in_abstract_declarator940);
					gcc_attribute_list128=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list128.Tree, gcc_attribute_list128, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(46); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("abstract_declarator", 31);
			LeaveRule("abstract_declarator", 31);
			LeaveRule_abstract_declarator();
			if (state.backtracking > 0) { Memoize(input, 31, abstract_declarator_StartIndex); }

		}
		DebugLocation(266, 1);
		} finally { DebugExitRule(GrammarFileName, "abstract_declarator"); }
		return retval;

	}
	// $ANTLR end "abstract_declarator"

	partial void EnterRule_direct_abstract_declarator();
	partial void LeaveRule_direct_abstract_declarator();

	// $ANTLR start "direct_abstract_declarator"
	// C.g:268:1: direct_abstract_declarator : ( '(' ( gcc_attribute_list )? abstract_declarator ')' | abstract_declarator_suffix ) ( abstract_declarator_suffix )* ;
	[GrammarRule("direct_abstract_declarator")]
	public XAstParserRuleReturnScope direct_abstract_declarator()
	{
		EnterRule_direct_abstract_declarator();
		EnterRule("direct_abstract_declarator", 32);
		var retval = new XAstParserRuleReturnScope("direct_abstract_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int direct_abstract_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal129 = default(IToken);
		IToken char_literal132 = default(IToken);
		XAstParserRuleReturnScope gcc_attribute_list130 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator131 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator_suffix133 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator_suffix134 = default(XAstParserRuleReturnScope);

		object char_literal129_tree = default(object);
		object char_literal132_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "direct_abstract_declarator");
		DebugLocation(268, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// C.g:269:2: ( ( '(' ( gcc_attribute_list )? abstract_declarator ')' | abstract_declarator_suffix ) ( abstract_declarator_suffix )* )
			DebugEnterAlt(1);
			// C.g:269:4: ( '(' ( gcc_attribute_list )? abstract_declarator ')' | abstract_declarator_suffix ) ( abstract_declarator_suffix )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(269, 4);
			// C.g:269:4: ( '(' ( gcc_attribute_list )? abstract_declarator ')' | abstract_declarator_suffix )
			int alt49=2;
			try { DebugEnterSubRule(49);
			try { DebugEnterDecision(49, false);
			int LA49_0 = input.LA(1);

			if ((LA49_0==30))
			{
				switch (input.LA(2))
				{
				case 64:
					{
					int LA49_3 = input.LA(3);

					if ((EvaluatePredicate(synpred80_C_fragment)))
					{
						alt49 = 1;
					}
					else if ((true))
					{
						alt49 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 49, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 30:
				case 32:
				case 59:
					{
					alt49 = 1;
					}
					break;
				case IDENTIFIER:
				case 31:
				case 67:
				case 68:
				case 69:
				case 70:
				case 71:
				case 72:
				case 75:
				case 76:
				case 80:
				case 82:
				case 83:
				case 84:
				case 88:
				case 89:
				case 90:
				case 91:
				case 92:
				case 94:
				case 95:
				case 97:
				case 98:
				case 101:
				case 102:
				case 103:
				case 104:
				case 105:
					{
					alt49 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 49, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA49_0==59))
			{
				alt49 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 49, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:269:6: '(' ( gcc_attribute_list )? abstract_declarator ')'
				{
				DebugLocation(269, 6);
				char_literal129=(IToken)Match(input,30,Follow._30_in_direct_abstract_declarator954); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal129_tree = (object)adaptor.Create(char_literal129, retval);
				adaptor.AddChild(root_0, char_literal129_tree);
				}
				DebugLocation(269, 10);
				// C.g:269:10: ( gcc_attribute_list )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if ((LA48_0==64))
				{
					alt48 = 1;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:269:10: gcc_attribute_list
					{
					DebugLocation(269, 10);
					PushFollow(Follow._gcc_attribute_list_in_direct_abstract_declarator956);
					gcc_attribute_list130=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list130.Tree, gcc_attribute_list130, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(48); }

				DebugLocation(269, 30);
				PushFollow(Follow._abstract_declarator_in_direct_abstract_declarator959);
				abstract_declarator131=abstract_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator131.Tree, abstract_declarator131, retval);
				DebugLocation(269, 50);
				char_literal132=(IToken)Match(input,31,Follow._31_in_direct_abstract_declarator961); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal132_tree = (object)adaptor.Create(char_literal132, retval);
				adaptor.AddChild(root_0, char_literal132_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:269:56: abstract_declarator_suffix
				{
				DebugLocation(269, 56);
				PushFollow(Follow._abstract_declarator_suffix_in_direct_abstract_declarator965);
				abstract_declarator_suffix133=abstract_declarator_suffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator_suffix133.Tree, abstract_declarator_suffix133, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(49); }

			DebugLocation(269, 85);
			// C.g:269:85: ( abstract_declarator_suffix )*
			try { DebugEnterSubRule(50);
			while (true)
			{
				int alt50=2;
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==30))
				{
					switch (input.LA(2))
					{
					case 64:
						{
						int LA50_9 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA50_11 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 72:
					case 83:
					case 91:
					case 97:
						{
						int LA50_14 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 104:
						{
						int LA50_15 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 75:
						{
						int LA50_16 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 94:
						{
						int LA50_17 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 89:
						{
						int LA50_18 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 90:
						{
						int LA50_19 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 84:
						{
						int LA50_20 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 80:
						{
						int LA50_21 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 95:
						{
						int LA50_22 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 103:
						{
						int LA50_23 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 98:
					case 102:
						{
						int LA50_24 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 82:
						{
						int LA50_25 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 101:
						{
						int LA50_26 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 71:
					case 76:
					case 92:
					case 105:
						{
						int LA50_27 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 67:
					case 69:
					case 70:
					case 88:
						{
						int LA50_28 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 68:
						{
						int LA50_29 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 31:
						{
						int LA50_30 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					}

				}
				else if ((LA50_0==59))
				{
					switch (input.LA(2))
					{
					case 71:
					case 76:
					case 92:
					case 105:
						{
						int LA50_31 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 64:
						{
						int LA50_32 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 30:
						{
						int LA50_33 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA50_34 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case HEX_LITERAL:
						{
						int LA50_35 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case OCTAL_LITERAL:
						{
						int LA50_36 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case DECIMAL_LITERAL:
						{
						int LA50_37 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case CHARACTER_LITERAL:
						{
						int LA50_38 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case STRING_LITERAL:
						{
						int LA50_39 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case FLOATING_POINT_LITERAL:
						{
						int LA50_40 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 66:
						{
						int LA50_41 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 65:
						{
						int LA50_42 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 35:
						{
						int LA50_43 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 39:
						{
						int LA50_44 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 32:
						{
						int LA50_45 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 96:
						{
						int LA50_46 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 63:
						{
						int LA50_47 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 68:
						{
						int LA50_48 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 60:
						{
						int LA50_49 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					case 23:
					case 28:
					case 34:
					case 38:
					case 112:
						{
						int LA50_50 = input.LA(3);

						if ((EvaluatePredicate(synpred81_C_fragment)))
						{
							alt50 = 1;
						}


						}
						break;
					}

				}


				} finally { DebugExitDecision(50); }
				switch ( alt50 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:269:85: abstract_declarator_suffix
					{
					DebugLocation(269, 85);
					PushFollow(Follow._abstract_declarator_suffix_in_direct_abstract_declarator969);
					abstract_declarator_suffix134=abstract_declarator_suffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator_suffix134.Tree, abstract_declarator_suffix134, retval);

					}
					break;

				default:
					goto loop50;
				}
			}

			loop50:
				;

			} finally { DebugExitSubRule(50); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("direct_abstract_declarator", 32);
			LeaveRule("direct_abstract_declarator", 32);
			LeaveRule_direct_abstract_declarator();
			if (state.backtracking > 0) { Memoize(input, 32, direct_abstract_declarator_StartIndex); }

		}
		DebugLocation(270, 1);
		} finally { DebugExitRule(GrammarFileName, "direct_abstract_declarator"); }
		return retval;

	}
	// $ANTLR end "direct_abstract_declarator"

	partial void EnterRule_abstract_declarator_suffix();
	partial void LeaveRule_abstract_declarator_suffix();

	// $ANTLR start "abstract_declarator_suffix"
	// C.g:272:1: abstract_declarator_suffix : ( '[' ( gcc_array_type_modifier )* ( constant_expression )? ']' | '[' ( gcc_array_type_modifier )* '*' ']' | '(' ( parameter_type_list )? ')' );
	[GrammarRule("abstract_declarator_suffix")]
	public XAstParserRuleReturnScope abstract_declarator_suffix()
	{
		EnterRule_abstract_declarator_suffix();
		EnterRule("abstract_declarator_suffix", 33);
		var retval = new XAstParserRuleReturnScope("abstract_declarator_suffix");
		
		retval.Start = (IToken)input.LT(1);
		int abstract_declarator_suffix_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal135 = default(IToken);
		IToken char_literal138 = default(IToken);
		IToken char_literal139 = default(IToken);
		IToken char_literal141 = default(IToken);
		IToken char_literal142 = default(IToken);
		IToken char_literal143 = default(IToken);
		IToken char_literal145 = default(IToken);
		XAstParserRuleReturnScope gcc_array_type_modifier136 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression137 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_array_type_modifier140 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope parameter_type_list144 = default(XAstParserRuleReturnScope);

		object char_literal135_tree = default(object);
		object char_literal138_tree = default(object);
		object char_literal139_tree = default(object);
		object char_literal141_tree = default(object);
		object char_literal142_tree = default(object);
		object char_literal143_tree = default(object);
		object char_literal145_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "abstract_declarator_suffix");
		DebugLocation(272, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// C.g:273:2: ( '[' ( gcc_array_type_modifier )* ( constant_expression )? ']' | '[' ( gcc_array_type_modifier )* '*' ']' | '(' ( parameter_type_list )? ')' )
			int alt55=3;
			try { DebugEnterDecision(55, false);
			int LA55_0 = input.LA(1);

			if ((LA55_0==59))
			{
				switch (input.LA(2))
				{
				case 71:
				case 76:
				case 92:
				case 105:
					{
					int LA55_3 = input.LA(3);

					if ((EvaluatePredicate(synpred84_C_fragment)))
					{
						alt55 = 1;
					}
					else if ((EvaluatePredicate(synpred86_C_fragment)))
					{
						alt55 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 55, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 64:
					{
					int LA55_4 = input.LA(3);

					if ((EvaluatePredicate(synpred84_C_fragment)))
					{
						alt55 = 1;
					}
					else if ((EvaluatePredicate(synpred86_C_fragment)))
					{
						alt55 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 55, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case CHARACTER_LITERAL:
				case DECIMAL_LITERAL:
				case FLOATING_POINT_LITERAL:
				case HEX_LITERAL:
				case IDENTIFIER:
				case OCTAL_LITERAL:
				case STRING_LITERAL:
				case 23:
				case 28:
				case 30:
				case 34:
				case 35:
				case 38:
				case 39:
				case 60:
				case 63:
				case 65:
				case 66:
				case 68:
				case 96:
				case 112:
					{
					alt55 = 1;
					}
					break;
				case 32:
					{
					int LA55_17 = input.LA(3);

					if ((EvaluatePredicate(synpred84_C_fragment)))
					{
						alt55 = 1;
					}
					else if ((EvaluatePredicate(synpred86_C_fragment)))
					{
						alt55 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 55, 17, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 55, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA55_0==30))
			{
				alt55 = 3;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 55, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:273:4: '[' ( gcc_array_type_modifier )* ( constant_expression )? ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(273, 4);
				char_literal135=(IToken)Match(input,59,Follow._59_in_abstract_declarator_suffix981); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal135_tree = (object)adaptor.Create(char_literal135, retval);
				adaptor.AddChild(root_0, char_literal135_tree);
				}
				DebugLocation(273, 8);
				// C.g:273:8: ( gcc_array_type_modifier )*
				try { DebugEnterSubRule(51);
				while (true)
				{
					int alt51=2;
					try { DebugEnterDecision(51, false);
					int LA51_0 = input.LA(1);

					if ((LA51_0==64||LA51_0==71||LA51_0==76||LA51_0==92||LA51_0==105))
					{
						alt51 = 1;
					}


					} finally { DebugExitDecision(51); }
					switch ( alt51 )
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:273:8: gcc_array_type_modifier
						{
						DebugLocation(273, 8);
						PushFollow(Follow._gcc_array_type_modifier_in_abstract_declarator_suffix983);
						gcc_array_type_modifier136=gcc_array_type_modifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_array_type_modifier136.Tree, gcc_array_type_modifier136, retval);

						}
						break;

					default:
						goto loop51;
					}
				}

				loop51:
					;

				} finally { DebugExitSubRule(51); }

				DebugLocation(273, 33);
				// C.g:273:33: ( constant_expression )?
				int alt52=2;
				try { DebugEnterSubRule(52);
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if ((LA52_0==CHARACTER_LITERAL||LA52_0==DECIMAL_LITERAL||LA52_0==FLOATING_POINT_LITERAL||LA52_0==HEX_LITERAL||LA52_0==IDENTIFIER||LA52_0==OCTAL_LITERAL||LA52_0==STRING_LITERAL||LA52_0==23||LA52_0==28||LA52_0==30||LA52_0==32||(LA52_0>=34 && LA52_0<=35)||(LA52_0>=38 && LA52_0<=39)||LA52_0==63||(LA52_0>=65 && LA52_0<=66)||LA52_0==68||LA52_0==96||LA52_0==112))
				{
					alt52 = 1;
				}
				} finally { DebugExitDecision(52); }
				switch (alt52)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:273:33: constant_expression
					{
					DebugLocation(273, 33);
					PushFollow(Follow._constant_expression_in_abstract_declarator_suffix986);
					constant_expression137=constant_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression137.Tree, constant_expression137, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(52); }

				DebugLocation(273, 54);
				char_literal138=(IToken)Match(input,60,Follow._60_in_abstract_declarator_suffix989); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal138_tree = (object)adaptor.Create(char_literal138, retval);
				adaptor.AddChild(root_0, char_literal138_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:274:4: '[' ( gcc_array_type_modifier )* '*' ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(274, 4);
				char_literal139=(IToken)Match(input,59,Follow._59_in_abstract_declarator_suffix994); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal139_tree = (object)adaptor.Create(char_literal139, retval);
				adaptor.AddChild(root_0, char_literal139_tree);
				}
				DebugLocation(274, 8);
				// C.g:274:8: ( gcc_array_type_modifier )*
				try { DebugEnterSubRule(53);
				while (true)
				{
					int alt53=2;
					try { DebugEnterDecision(53, false);
					int LA53_0 = input.LA(1);

					if ((LA53_0==64||LA53_0==71||LA53_0==76||LA53_0==92||LA53_0==105))
					{
						alt53 = 1;
					}


					} finally { DebugExitDecision(53); }
					switch ( alt53 )
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:274:8: gcc_array_type_modifier
						{
						DebugLocation(274, 8);
						PushFollow(Follow._gcc_array_type_modifier_in_abstract_declarator_suffix996);
						gcc_array_type_modifier140=gcc_array_type_modifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_array_type_modifier140.Tree, gcc_array_type_modifier140, retval);

						}
						break;

					default:
						goto loop53;
					}
				}

				loop53:
					;

				} finally { DebugExitSubRule(53); }

				DebugLocation(274, 33);
				char_literal141=(IToken)Match(input,32,Follow._32_in_abstract_declarator_suffix999); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal141_tree = (object)adaptor.Create(char_literal141, retval);
				adaptor.AddChild(root_0, char_literal141_tree);
				}
				DebugLocation(274, 37);
				char_literal142=(IToken)Match(input,60,Follow._60_in_abstract_declarator_suffix1001); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal142_tree = (object)adaptor.Create(char_literal142, retval);
				adaptor.AddChild(root_0, char_literal142_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:275:4: '(' ( parameter_type_list )? ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(275, 4);
				char_literal143=(IToken)Match(input,30,Follow._30_in_abstract_declarator_suffix1006); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal143_tree = (object)adaptor.Create(char_literal143, retval);
				adaptor.AddChild(root_0, char_literal143_tree);
				}
				DebugLocation(275, 8);
				// C.g:275:8: ( parameter_type_list )?
				int alt54=2;
				try { DebugEnterSubRule(54);
				try { DebugEnterDecision(54, false);
				int LA54_0 = input.LA(1);

				if ((LA54_0==IDENTIFIER||LA54_0==64||(LA54_0>=67 && LA54_0<=72)||(LA54_0>=75 && LA54_0<=76)||LA54_0==80||(LA54_0>=82 && LA54_0<=84)||(LA54_0>=88 && LA54_0<=92)||(LA54_0>=94 && LA54_0<=95)||(LA54_0>=97 && LA54_0<=98)||(LA54_0>=101 && LA54_0<=105)))
				{
					alt54 = 1;
				}
				} finally { DebugExitDecision(54); }
				switch (alt54)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:275:8: parameter_type_list
					{
					DebugLocation(275, 8);
					PushFollow(Follow._parameter_type_list_in_abstract_declarator_suffix1008);
					parameter_type_list144=parameter_type_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_type_list144.Tree, parameter_type_list144, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(54); }

				DebugLocation(275, 29);
				char_literal145=(IToken)Match(input,31,Follow._31_in_abstract_declarator_suffix1011); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal145_tree = (object)adaptor.Create(char_literal145, retval);
				adaptor.AddChild(root_0, char_literal145_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("abstract_declarator_suffix", 33);
			LeaveRule("abstract_declarator_suffix", 33);
			LeaveRule_abstract_declarator_suffix();
			if (state.backtracking > 0) { Memoize(input, 33, abstract_declarator_suffix_StartIndex); }

		}
		DebugLocation(276, 1);
		} finally { DebugExitRule(GrammarFileName, "abstract_declarator_suffix"); }
		return retval;

	}
	// $ANTLR end "abstract_declarator_suffix"

	partial void EnterRule_initializer();
	partial void LeaveRule_initializer();

	// $ANTLR start "initializer"
	// C.g:278:1: initializer : ( assignment_expression | '{' initializer_list ( ',' )? '}' );
	[GrammarRule("initializer")]
	public XAstParserRuleReturnScope initializer()
	{
		EnterRule_initializer();
		EnterRule("initializer", 34);
		var retval = new XAstParserRuleReturnScope("initializer");
		
		retval.Start = (IToken)input.LT(1);
		int initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal147 = default(IToken);
		IToken char_literal149 = default(IToken);
		IToken char_literal150 = default(IToken);
		XAstParserRuleReturnScope assignment_expression146 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope initializer_list148 = default(XAstParserRuleReturnScope);

		object char_literal147_tree = default(object);
		object char_literal149_tree = default(object);
		object char_literal150_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "initializer");
		DebugLocation(278, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// C.g:279:2: ( assignment_expression | '{' initializer_list ( ',' )? '}' )
			int alt57=2;
			try { DebugEnterDecision(57, false);
			int LA57_0 = input.LA(1);

			if ((LA57_0==CHARACTER_LITERAL||LA57_0==DECIMAL_LITERAL||LA57_0==FLOATING_POINT_LITERAL||LA57_0==HEX_LITERAL||LA57_0==IDENTIFIER||LA57_0==OCTAL_LITERAL||LA57_0==STRING_LITERAL||LA57_0==23||LA57_0==28||LA57_0==30||LA57_0==32||(LA57_0>=34 && LA57_0<=35)||(LA57_0>=38 && LA57_0<=39)||LA57_0==63||(LA57_0>=65 && LA57_0<=66)||LA57_0==68||LA57_0==96||LA57_0==112))
			{
				alt57 = 1;
			}
			else if ((LA57_0==107))
			{
				alt57 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:279:4: assignment_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(279, 4);
				PushFollow(Follow._assignment_expression_in_initializer1023);
				assignment_expression146=assignment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression146.Tree, assignment_expression146, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:280:4: '{' initializer_list ( ',' )? '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(280, 4);
				char_literal147=(IToken)Match(input,107,Follow._107_in_initializer1028); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal147_tree = (object)adaptor.Create(char_literal147, retval);
				adaptor.AddChild(root_0, char_literal147_tree);
				}
				DebugLocation(280, 8);
				PushFollow(Follow._initializer_list_in_initializer1030);
				initializer_list148=initializer_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, initializer_list148.Tree, initializer_list148, retval);
				DebugLocation(280, 25);
				// C.g:280:25: ( ',' )?
				int alt56=2;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==37))
				{
					alt56 = 1;
				}
				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:280:25: ','
					{
					DebugLocation(280, 25);
					char_literal149=(IToken)Match(input,37,Follow._37_in_initializer1032); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal149_tree = (object)adaptor.Create(char_literal149, retval);
					adaptor.AddChild(root_0, char_literal149_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(56); }

				DebugLocation(280, 30);
				char_literal150=(IToken)Match(input,111,Follow._111_in_initializer1035); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal150_tree = (object)adaptor.Create(char_literal150, retval);
				adaptor.AddChild(root_0, char_literal150_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("initializer", 34);
			LeaveRule("initializer", 34);
			LeaveRule_initializer();
			if (state.backtracking > 0) { Memoize(input, 34, initializer_StartIndex); }

		}
		DebugLocation(281, 1);
		} finally { DebugExitRule(GrammarFileName, "initializer"); }
		return retval;

	}
	// $ANTLR end "initializer"

	partial void EnterRule_initializer_list();
	partial void LeaveRule_initializer_list();

	// $ANTLR start "initializer_list"
	// C.g:283:1: initializer_list : initializer ( ',' initializer )* ;
	[GrammarRule("initializer_list")]
	public XAstParserRuleReturnScope initializer_list()
	{
		EnterRule_initializer_list();
		EnterRule("initializer_list", 35);
		var retval = new XAstParserRuleReturnScope("initializer_list");
		
		retval.Start = (IToken)input.LT(1);
		int initializer_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal152 = default(IToken);
		XAstParserRuleReturnScope initializer151 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope initializer153 = default(XAstParserRuleReturnScope);

		object char_literal152_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "initializer_list");
		DebugLocation(283, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// C.g:284:2: ( initializer ( ',' initializer )* )
			DebugEnterAlt(1);
			// C.g:284:4: initializer ( ',' initializer )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(284, 4);
			PushFollow(Follow._initializer_in_initializer_list1046);
			initializer151=initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, initializer151.Tree, initializer151, retval);
			DebugLocation(284, 16);
			// C.g:284:16: ( ',' initializer )*
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, false);
				int LA58_0 = input.LA(1);

				if ((LA58_0==37))
				{
					int LA58_1 = input.LA(2);

					if ((LA58_1==CHARACTER_LITERAL||LA58_1==DECIMAL_LITERAL||LA58_1==FLOATING_POINT_LITERAL||LA58_1==HEX_LITERAL||LA58_1==IDENTIFIER||LA58_1==OCTAL_LITERAL||LA58_1==STRING_LITERAL||LA58_1==23||LA58_1==28||LA58_1==30||LA58_1==32||(LA58_1>=34 && LA58_1<=35)||(LA58_1>=38 && LA58_1<=39)||LA58_1==63||(LA58_1>=65 && LA58_1<=66)||LA58_1==68||LA58_1==96||LA58_1==107||LA58_1==112))
					{
						alt58 = 1;
					}


				}


				} finally { DebugExitDecision(58); }
				switch ( alt58 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:284:17: ',' initializer
					{
					DebugLocation(284, 17);
					char_literal152=(IToken)Match(input,37,Follow._37_in_initializer_list1049); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal152_tree = (object)adaptor.Create(char_literal152, retval);
					adaptor.AddChild(root_0, char_literal152_tree);
					}
					DebugLocation(284, 21);
					PushFollow(Follow._initializer_in_initializer_list1051);
					initializer153=initializer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, initializer153.Tree, initializer153, retval);

					}
					break;

				default:
					goto loop58;
				}
			}

			loop58:
				;

			} finally { DebugExitSubRule(58); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("initializer_list", 35);
			LeaveRule("initializer_list", 35);
			LeaveRule_initializer_list();
			if (state.backtracking > 0) { Memoize(input, 35, initializer_list_StartIndex); }

		}
		DebugLocation(285, 1);
		} finally { DebugExitRule(GrammarFileName, "initializer_list"); }
		return retval;

	}
	// $ANTLR end "initializer_list"

	partial void EnterRule_argument_expression_list();
	partial void LeaveRule_argument_expression_list();

	// $ANTLR start "argument_expression_list"
	// C.g:289:1: argument_expression_list : assignment_expression ( ',' assignment_expression )* ;
	[GrammarRule("argument_expression_list")]
	public XAstParserRuleReturnScope argument_expression_list()
	{
		EnterRule_argument_expression_list();
		EnterRule("argument_expression_list", 36);
		var retval = new XAstParserRuleReturnScope("argument_expression_list");
		
		retval.Start = (IToken)input.LT(1);
		int argument_expression_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal155 = default(IToken);
		XAstParserRuleReturnScope assignment_expression154 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression156 = default(XAstParserRuleReturnScope);

		object char_literal155_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "argument_expression_list");
		DebugLocation(289, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// C.g:290:2: ( assignment_expression ( ',' assignment_expression )* )
			DebugEnterAlt(1);
			// C.g:290:6: assignment_expression ( ',' assignment_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(290, 6);
			PushFollow(Follow._assignment_expression_in_argument_expression_list1068);
			assignment_expression154=assignment_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression154.Tree, assignment_expression154, retval);
			DebugLocation(290, 28);
			// C.g:290:28: ( ',' assignment_expression )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if ((LA59_0==37))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:290:29: ',' assignment_expression
					{
					DebugLocation(290, 29);
					char_literal155=(IToken)Match(input,37,Follow._37_in_argument_expression_list1071); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal155_tree = (object)adaptor.Create(char_literal155, retval);
					adaptor.AddChild(root_0, char_literal155_tree);
					}
					DebugLocation(290, 33);
					PushFollow(Follow._assignment_expression_in_argument_expression_list1073);
					assignment_expression156=assignment_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression156.Tree, assignment_expression156, retval);

					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("argument_expression_list", 36);
			LeaveRule("argument_expression_list", 36);
			LeaveRule_argument_expression_list();
			if (state.backtracking > 0) { Memoize(input, 36, argument_expression_list_StartIndex); }

		}
		DebugLocation(291, 1);
		} finally { DebugExitRule(GrammarFileName, "argument_expression_list"); }
		return retval;

	}
	// $ANTLR end "argument_expression_list"

	partial void EnterRule_additive_expression();
	partial void LeaveRule_additive_expression();

	// $ANTLR start "additive_expression"
	// C.g:293:1: additive_expression : ( multiplicative_expression ) ( '+' multiplicative_expression | '-' multiplicative_expression )* ;
	[GrammarRule("additive_expression")]
	public XAstParserRuleReturnScope additive_expression()
	{
		EnterRule_additive_expression();
		EnterRule("additive_expression", 37);
		var retval = new XAstParserRuleReturnScope("additive_expression");
		
		retval.Start = (IToken)input.LT(1);
		int additive_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal158 = default(IToken);
		IToken char_literal160 = default(IToken);
		XAstParserRuleReturnScope multiplicative_expression157 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope multiplicative_expression159 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope multiplicative_expression161 = default(XAstParserRuleReturnScope);

		object char_literal158_tree = default(object);
		object char_literal160_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "additive_expression");
		DebugLocation(293, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// C.g:294:2: ( ( multiplicative_expression ) ( '+' multiplicative_expression | '-' multiplicative_expression )* )
			DebugEnterAlt(1);
			// C.g:294:4: ( multiplicative_expression ) ( '+' multiplicative_expression | '-' multiplicative_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(294, 4);
			// C.g:294:4: ( multiplicative_expression )
			DebugEnterAlt(1);
			// C.g:294:5: multiplicative_expression
			{
			DebugLocation(294, 5);
			PushFollow(Follow._multiplicative_expression_in_additive_expression1087);
			multiplicative_expression157=multiplicative_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression157.Tree, multiplicative_expression157, retval);

			}

			DebugLocation(294, 32);
			// C.g:294:32: ( '+' multiplicative_expression | '-' multiplicative_expression )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=3;
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if ((LA60_0==34))
				{
					alt60 = 1;
				}
				else if ((LA60_0==38))
				{
					alt60 = 2;
				}


				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:294:33: '+' multiplicative_expression
					{
					DebugLocation(294, 33);
					char_literal158=(IToken)Match(input,34,Follow._34_in_additive_expression1091); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal158_tree = (object)adaptor.Create(char_literal158, retval);
					adaptor.AddChild(root_0, char_literal158_tree);
					}
					DebugLocation(294, 37);
					PushFollow(Follow._multiplicative_expression_in_additive_expression1093);
					multiplicative_expression159=multiplicative_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression159.Tree, multiplicative_expression159, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:294:65: '-' multiplicative_expression
					{
					DebugLocation(294, 65);
					char_literal160=(IToken)Match(input,38,Follow._38_in_additive_expression1097); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal160_tree = (object)adaptor.Create(char_literal160, retval);
					adaptor.AddChild(root_0, char_literal160_tree);
					}
					DebugLocation(294, 69);
					PushFollow(Follow._multiplicative_expression_in_additive_expression1099);
					multiplicative_expression161=multiplicative_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression161.Tree, multiplicative_expression161, retval);

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additive_expression", 37);
			LeaveRule("additive_expression", 37);
			LeaveRule_additive_expression();
			if (state.backtracking > 0) { Memoize(input, 37, additive_expression_StartIndex); }

		}
		DebugLocation(295, 1);
		} finally { DebugExitRule(GrammarFileName, "additive_expression"); }
		return retval;

	}
	// $ANTLR end "additive_expression"

	partial void EnterRule_multiplicative_expression();
	partial void LeaveRule_multiplicative_expression();

	// $ANTLR start "multiplicative_expression"
	// C.g:297:1: multiplicative_expression : ( cast_expression ) ( '*' cast_expression | '/' cast_expression | '%' cast_expression )* ;
	[GrammarRule("multiplicative_expression")]
	public XAstParserRuleReturnScope multiplicative_expression()
	{
		EnterRule_multiplicative_expression();
		EnterRule("multiplicative_expression", 38);
		var retval = new XAstParserRuleReturnScope("multiplicative_expression");
		
		retval.Start = (IToken)input.LT(1);
		int multiplicative_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal163 = default(IToken);
		IToken char_literal165 = default(IToken);
		IToken char_literal167 = default(IToken);
		XAstParserRuleReturnScope cast_expression162 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression164 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression166 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression168 = default(XAstParserRuleReturnScope);

		object char_literal163_tree = default(object);
		object char_literal165_tree = default(object);
		object char_literal167_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "multiplicative_expression");
		DebugLocation(297, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// C.g:298:2: ( ( cast_expression ) ( '*' cast_expression | '/' cast_expression | '%' cast_expression )* )
			DebugEnterAlt(1);
			// C.g:298:4: ( cast_expression ) ( '*' cast_expression | '/' cast_expression | '%' cast_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(298, 4);
			// C.g:298:4: ( cast_expression )
			DebugEnterAlt(1);
			// C.g:298:5: cast_expression
			{
			DebugLocation(298, 5);
			PushFollow(Follow._cast_expression_in_multiplicative_expression1113);
			cast_expression162=cast_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression162.Tree, cast_expression162, retval);

			}

			DebugLocation(298, 22);
			// C.g:298:22: ( '*' cast_expression | '/' cast_expression | '%' cast_expression )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=4;
				try { DebugEnterDecision(61, false);
				switch (input.LA(1))
				{
				case 32:
					{
					alt61 = 1;
					}
					break;
				case 44:
					{
					alt61 = 2;
					}
					break;
				case 25:
					{
					alt61 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:298:23: '*' cast_expression
					{
					DebugLocation(298, 23);
					char_literal163=(IToken)Match(input,32,Follow._32_in_multiplicative_expression1117); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal163_tree = (object)adaptor.Create(char_literal163, retval);
					adaptor.AddChild(root_0, char_literal163_tree);
					}
					DebugLocation(298, 27);
					PushFollow(Follow._cast_expression_in_multiplicative_expression1119);
					cast_expression164=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression164.Tree, cast_expression164, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:298:45: '/' cast_expression
					{
					DebugLocation(298, 45);
					char_literal165=(IToken)Match(input,44,Follow._44_in_multiplicative_expression1123); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal165_tree = (object)adaptor.Create(char_literal165, retval);
					adaptor.AddChild(root_0, char_literal165_tree);
					}
					DebugLocation(298, 49);
					PushFollow(Follow._cast_expression_in_multiplicative_expression1125);
					cast_expression166=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression166.Tree, cast_expression166, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C.g:298:67: '%' cast_expression
					{
					DebugLocation(298, 67);
					char_literal167=(IToken)Match(input,25,Follow._25_in_multiplicative_expression1129); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal167_tree = (object)adaptor.Create(char_literal167, retval);
					adaptor.AddChild(root_0, char_literal167_tree);
					}
					DebugLocation(298, 71);
					PushFollow(Follow._cast_expression_in_multiplicative_expression1131);
					cast_expression168=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression168.Tree, cast_expression168, retval);

					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicative_expression", 38);
			LeaveRule("multiplicative_expression", 38);
			LeaveRule_multiplicative_expression();
			if (state.backtracking > 0) { Memoize(input, 38, multiplicative_expression_StartIndex); }

		}
		DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicative_expression"); }
		return retval;

	}
	// $ANTLR end "multiplicative_expression"

	partial void EnterRule_cast_expression();
	partial void LeaveRule_cast_expression();

	// $ANTLR start "cast_expression"
	// C.g:301:1: cast_expression : ( '(' type_name ')' cast_expression | unary_expression );
	[GrammarRule("cast_expression")]
	public XAstParserRuleReturnScope cast_expression()
	{
		EnterRule_cast_expression();
		EnterRule("cast_expression", 39);
		var retval = new XAstParserRuleReturnScope("cast_expression");
		
		retval.Start = (IToken)input.LT(1);
		int cast_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal169 = default(IToken);
		IToken char_literal171 = default(IToken);
		XAstParserRuleReturnScope type_name170 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression172 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression173 = default(XAstParserRuleReturnScope);

		object char_literal169_tree = default(object);
		object char_literal171_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "cast_expression");
		DebugLocation(301, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// C.g:302:2: ( '(' type_name ')' cast_expression | unary_expression )
			int alt62=2;
			try { DebugEnterDecision(62, false);
			int LA62_0 = input.LA(1);

			if ((LA62_0==30))
			{
				switch (input.LA(2))
				{
				case 64:
				case 71:
				case 75:
				case 76:
				case 80:
				case 82:
				case 84:
				case 89:
				case 90:
				case 92:
				case 94:
				case 95:
				case 98:
				case 101:
				case 102:
				case 103:
				case 104:
				case 105:
					{
					alt62 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA62_29 = input.LA(3);

					if ((EvaluatePredicate(synpred97_C_fragment)))
					{
						alt62 = 1;
					}
					else if ((true))
					{
						alt62 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 62, 29, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 68:
					{
					int LA62_32 = input.LA(3);

					if ((EvaluatePredicate(synpred97_C_fragment)))
					{
						alt62 = 1;
					}
					else if ((true))
					{
						alt62 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 62, 32, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case CHARACTER_LITERAL:
				case DECIMAL_LITERAL:
				case FLOATING_POINT_LITERAL:
				case HEX_LITERAL:
				case OCTAL_LITERAL:
				case STRING_LITERAL:
				case 23:
				case 28:
				case 30:
				case 32:
				case 34:
				case 35:
				case 38:
				case 39:
				case 63:
				case 65:
				case 66:
				case 96:
				case 107:
				case 112:
					{
					alt62 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 62, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA62_0==CHARACTER_LITERAL||LA62_0==DECIMAL_LITERAL||LA62_0==FLOATING_POINT_LITERAL||LA62_0==HEX_LITERAL||LA62_0==IDENTIFIER||LA62_0==OCTAL_LITERAL||LA62_0==STRING_LITERAL||LA62_0==23||LA62_0==28||LA62_0==32||(LA62_0>=34 && LA62_0<=35)||(LA62_0>=38 && LA62_0<=39)||LA62_0==63||(LA62_0>=65 && LA62_0<=66)||LA62_0==68||LA62_0==96||LA62_0==112))
			{
				alt62 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:302:4: '(' type_name ')' cast_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(302, 4);
				char_literal169=(IToken)Match(input,30,Follow._30_in_cast_expression1144); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal169_tree = (object)adaptor.Create(char_literal169, retval);
				adaptor.AddChild(root_0, char_literal169_tree);
				}
				DebugLocation(302, 8);
				PushFollow(Follow._type_name_in_cast_expression1146);
				type_name170=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_name170.Tree, type_name170, retval);
				DebugLocation(302, 18);
				char_literal171=(IToken)Match(input,31,Follow._31_in_cast_expression1148); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal171_tree = (object)adaptor.Create(char_literal171, retval);
				adaptor.AddChild(root_0, char_literal171_tree);
				}
				DebugLocation(302, 22);
				PushFollow(Follow._cast_expression_in_cast_expression1150);
				cast_expression172=cast_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression172.Tree, cast_expression172, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:303:4: unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(303, 4);
				PushFollow(Follow._unary_expression_in_cast_expression1155);
				unary_expression173=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression173.Tree, unary_expression173, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expression", 39);
			LeaveRule("cast_expression", 39);
			LeaveRule_cast_expression();
			if (state.backtracking > 0) { Memoize(input, 39, cast_expression_StartIndex); }

		}
		DebugLocation(304, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expression"); }
		return retval;

	}
	// $ANTLR end "cast_expression"

	partial void EnterRule_unary_expression();
	partial void LeaveRule_unary_expression();

	// $ANTLR start "unary_expression"
	// C.g:306:1: unary_expression : ( postfix_expression | '++' unary_expression | '--' unary_expression | unary_operator cast_expression | 'sizeof' unary_expression | 'sizeof' '(' type_name ')' | '__alignof__' unary_expression | '__alignof__' '(' type_name ')' | gcc_extension_specifier cast_expression );
	[GrammarRule("unary_expression")]
	public XAstParserRuleReturnScope unary_expression()
	{
		EnterRule_unary_expression();
		EnterRule("unary_expression", 40);
		var retval = new XAstParserRuleReturnScope("unary_expression");
		
		retval.Start = (IToken)input.LT(1);
		int unary_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal175 = default(IToken);
		IToken string_literal177 = default(IToken);
		IToken string_literal181 = default(IToken);
		IToken string_literal183 = default(IToken);
		IToken char_literal184 = default(IToken);
		IToken char_literal186 = default(IToken);
		IToken string_literal187 = default(IToken);
		IToken string_literal189 = default(IToken);
		IToken char_literal190 = default(IToken);
		IToken char_literal192 = default(IToken);
		XAstParserRuleReturnScope postfix_expression174 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression176 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression178 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_operator179 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression180 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression182 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name185 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression188 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name191 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_extension_specifier193 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression194 = default(XAstParserRuleReturnScope);

		object string_literal175_tree = default(object);
		object string_literal177_tree = default(object);
		object string_literal181_tree = default(object);
		object string_literal183_tree = default(object);
		object char_literal184_tree = default(object);
		object char_literal186_tree = default(object);
		object string_literal187_tree = default(object);
		object string_literal189_tree = default(object);
		object char_literal190_tree = default(object);
		object char_literal192_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unary_expression");
		DebugLocation(306, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// C.g:307:2: ( postfix_expression | '++' unary_expression | '--' unary_expression | unary_operator cast_expression | 'sizeof' unary_expression | 'sizeof' '(' type_name ')' | '__alignof__' unary_expression | '__alignof__' '(' type_name ')' | gcc_extension_specifier cast_expression )
			int alt63=9;
			try { DebugEnterDecision(63, false);
			switch (input.LA(1))
			{
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENTIFIER:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
			case 30:
			case 65:
			case 66:
				{
				alt63 = 1;
				}
				break;
			case 35:
				{
				alt63 = 2;
				}
				break;
			case 39:
				{
				alt63 = 3;
				}
				break;
			case 23:
			case 28:
			case 32:
			case 34:
			case 38:
			case 112:
				{
				alt63 = 4;
				}
				break;
			case 96:
				{
				int LA63_14 = input.LA(2);

				if ((LA63_14==30))
				{
					int LA63_17 = input.LA(3);

					if ((EvaluatePredicate(synpred102_C_fragment)))
					{
						alt63 = 5;
					}
					else if ((EvaluatePredicate(synpred103_C_fragment)))
					{
						alt63 = 6;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 63, 17, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA63_14==CHARACTER_LITERAL||LA63_14==DECIMAL_LITERAL||LA63_14==FLOATING_POINT_LITERAL||LA63_14==HEX_LITERAL||LA63_14==IDENTIFIER||LA63_14==OCTAL_LITERAL||LA63_14==STRING_LITERAL||LA63_14==23||LA63_14==28||LA63_14==32||(LA63_14>=34 && LA63_14<=35)||(LA63_14>=38 && LA63_14<=39)||LA63_14==63||(LA63_14>=65 && LA63_14<=66)||LA63_14==68||LA63_14==96||LA63_14==112))
				{
					alt63 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 14, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 63:
				{
				int LA63_15 = input.LA(2);

				if ((LA63_15==30))
				{
					int LA63_33 = input.LA(3);

					if ((EvaluatePredicate(synpred104_C_fragment)))
					{
						alt63 = 7;
					}
					else if ((EvaluatePredicate(synpred105_C_fragment)))
					{
						alt63 = 8;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 63, 33, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA63_15==CHARACTER_LITERAL||LA63_15==DECIMAL_LITERAL||LA63_15==FLOATING_POINT_LITERAL||LA63_15==HEX_LITERAL||LA63_15==IDENTIFIER||LA63_15==OCTAL_LITERAL||LA63_15==STRING_LITERAL||LA63_15==23||LA63_15==28||LA63_15==32||(LA63_15>=34 && LA63_15<=35)||(LA63_15>=38 && LA63_15<=39)||LA63_15==63||(LA63_15>=65 && LA63_15<=66)||LA63_15==68||LA63_15==96||LA63_15==112))
				{
					alt63 = 7;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 15, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 68:
				{
				alt63 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:307:4: postfix_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(307, 4);
				PushFollow(Follow._postfix_expression_in_unary_expression1166);
				postfix_expression174=postfix_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, postfix_expression174.Tree, postfix_expression174, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:308:4: '++' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(308, 4);
				string_literal175=(IToken)Match(input,35,Follow._35_in_unary_expression1171); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal175_tree = (object)adaptor.Create(string_literal175, retval);
				adaptor.AddChild(root_0, string_literal175_tree);
				}
				DebugLocation(308, 9);
				PushFollow(Follow._unary_expression_in_unary_expression1173);
				unary_expression176=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression176.Tree, unary_expression176, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:309:4: '--' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(309, 4);
				string_literal177=(IToken)Match(input,39,Follow._39_in_unary_expression1178); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal177_tree = (object)adaptor.Create(string_literal177, retval);
				adaptor.AddChild(root_0, string_literal177_tree);
				}
				DebugLocation(309, 9);
				PushFollow(Follow._unary_expression_in_unary_expression1180);
				unary_expression178=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression178.Tree, unary_expression178, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:310:4: unary_operator cast_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(310, 4);
				PushFollow(Follow._unary_operator_in_unary_expression1185);
				unary_operator179=unary_operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_operator179.Tree, unary_operator179, retval);
				DebugLocation(310, 19);
				PushFollow(Follow._cast_expression_in_unary_expression1187);
				cast_expression180=cast_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression180.Tree, cast_expression180, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:311:4: 'sizeof' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(311, 4);
				string_literal181=(IToken)Match(input,96,Follow._96_in_unary_expression1192); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal181_tree = (object)adaptor.Create(string_literal181, retval);
				adaptor.AddChild(root_0, string_literal181_tree);
				}
				DebugLocation(311, 13);
				PushFollow(Follow._unary_expression_in_unary_expression1194);
				unary_expression182=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression182.Tree, unary_expression182, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:312:4: 'sizeof' '(' type_name ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(312, 4);
				string_literal183=(IToken)Match(input,96,Follow._96_in_unary_expression1199); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal183_tree = (object)adaptor.Create(string_literal183, retval);
				adaptor.AddChild(root_0, string_literal183_tree);
				}
				DebugLocation(312, 13);
				char_literal184=(IToken)Match(input,30,Follow._30_in_unary_expression1201); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal184_tree = (object)adaptor.Create(char_literal184, retval);
				adaptor.AddChild(root_0, char_literal184_tree);
				}
				DebugLocation(312, 17);
				PushFollow(Follow._type_name_in_unary_expression1203);
				type_name185=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_name185.Tree, type_name185, retval);
				DebugLocation(312, 27);
				char_literal186=(IToken)Match(input,31,Follow._31_in_unary_expression1205); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal186_tree = (object)adaptor.Create(char_literal186, retval);
				adaptor.AddChild(root_0, char_literal186_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C.g:314:4: '__alignof__' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(314, 4);
				string_literal187=(IToken)Match(input,63,Follow._63_in_unary_expression1212); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal187_tree = (object)adaptor.Create(string_literal187, retval);
				adaptor.AddChild(root_0, string_literal187_tree);
				}
				DebugLocation(314, 18);
				PushFollow(Follow._unary_expression_in_unary_expression1214);
				unary_expression188=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression188.Tree, unary_expression188, retval);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C.g:315:4: '__alignof__' '(' type_name ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(315, 4);
				string_literal189=(IToken)Match(input,63,Follow._63_in_unary_expression1219); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal189_tree = (object)adaptor.Create(string_literal189, retval);
				adaptor.AddChild(root_0, string_literal189_tree);
				}
				DebugLocation(315, 18);
				char_literal190=(IToken)Match(input,30,Follow._30_in_unary_expression1221); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal190_tree = (object)adaptor.Create(char_literal190, retval);
				adaptor.AddChild(root_0, char_literal190_tree);
				}
				DebugLocation(315, 22);
				PushFollow(Follow._type_name_in_unary_expression1223);
				type_name191=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_name191.Tree, type_name191, retval);
				DebugLocation(315, 32);
				char_literal192=(IToken)Match(input,31,Follow._31_in_unary_expression1225); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal192_tree = (object)adaptor.Create(char_literal192, retval);
				adaptor.AddChild(root_0, char_literal192_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C.g:316:4: gcc_extension_specifier cast_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(316, 4);
				PushFollow(Follow._gcc_extension_specifier_in_unary_expression1230);
				gcc_extension_specifier193=gcc_extension_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_extension_specifier193.Tree, gcc_extension_specifier193, retval);
				DebugLocation(316, 28);
				PushFollow(Follow._cast_expression_in_unary_expression1232);
				cast_expression194=cast_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression194.Tree, cast_expression194, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_expression", 40);
			LeaveRule("unary_expression", 40);
			LeaveRule_unary_expression();
			if (state.backtracking > 0) { Memoize(input, 40, unary_expression_StartIndex); }

		}
		DebugLocation(317, 1);
		} finally { DebugExitRule(GrammarFileName, "unary_expression"); }
		return retval;

	}
	// $ANTLR end "unary_expression"

	partial void EnterRule_postfix_expression();
	partial void LeaveRule_postfix_expression();

	// $ANTLR start "postfix_expression"
	// C.g:319:1: postfix_expression : ( primary_expression ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )* | gcc_builtin_va_arg | gcc_builtin_offsetof );
	[GrammarRule("postfix_expression")]
	public XAstParserRuleReturnScope postfix_expression()
	{
		EnterRule_postfix_expression();
		EnterRule("postfix_expression", 41);
		var retval = new XAstParserRuleReturnScope("postfix_expression");
		
		retval.Start = (IToken)input.LT(1);
		int postfix_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal196 = default(IToken);
		IToken char_literal198 = default(IToken);
		IToken char_literal199 = default(IToken);
		IToken char_literal200 = default(IToken);
		IToken char_literal201 = default(IToken);
		IToken char_literal203 = default(IToken);
		IToken char_literal204 = default(IToken);
		IToken IDENTIFIER205 = default(IToken);
		IToken string_literal206 = default(IToken);
		IToken IDENTIFIER207 = default(IToken);
		IToken string_literal208 = default(IToken);
		IToken string_literal209 = default(IToken);
		XAstParserRuleReturnScope primary_expression195 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression197 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope argument_expression_list202 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_builtin_va_arg210 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_builtin_offsetof211 = default(XAstParserRuleReturnScope);

		object char_literal196_tree = default(object);
		object char_literal198_tree = default(object);
		object char_literal199_tree = default(object);
		object char_literal200_tree = default(object);
		object char_literal201_tree = default(object);
		object char_literal203_tree = default(object);
		object char_literal204_tree = default(object);
		object IDENTIFIER205_tree = default(object);
		object string_literal206_tree = default(object);
		object IDENTIFIER207_tree = default(object);
		object string_literal208_tree = default(object);
		object string_literal209_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "postfix_expression");
		DebugLocation(319, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// C.g:320:2: ( primary_expression ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )* | gcc_builtin_va_arg | gcc_builtin_offsetof )
			int alt65=3;
			try { DebugEnterDecision(65, false);
			switch (input.LA(1))
			{
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENTIFIER:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
			case 30:
				{
				alt65 = 1;
				}
				break;
			case 66:
				{
				alt65 = 2;
				}
				break;
			case 65:
				{
				alt65 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 65, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:320:6: primary_expression ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(320, 6);
				PushFollow(Follow._primary_expression_in_postfix_expression1245);
				primary_expression195=primary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression195.Tree, primary_expression195, retval);
				DebugLocation(321, 3);
				// C.g:321:3: ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )*
				try { DebugEnterSubRule(64);
				while (true)
				{
					int alt64=8;
					try { DebugEnterDecision(64, false);
					switch (input.LA(1))
					{
					case 59:
						{
						alt64 = 1;
						}
						break;
					case 30:
						{
						int LA64_25 = input.LA(2);

						if ((LA64_25==31))
						{
							alt64 = 2;
						}
						else if ((LA64_25==CHARACTER_LITERAL||LA64_25==DECIMAL_LITERAL||LA64_25==FLOATING_POINT_LITERAL||LA64_25==HEX_LITERAL||LA64_25==IDENTIFIER||LA64_25==OCTAL_LITERAL||LA64_25==STRING_LITERAL||LA64_25==23||LA64_25==28||LA64_25==30||LA64_25==32||(LA64_25>=34 && LA64_25<=35)||(LA64_25>=38 && LA64_25<=39)||LA64_25==63||(LA64_25>=65 && LA64_25<=66)||LA64_25==68||LA64_25==96||LA64_25==112))
						{
							alt64 = 3;
						}


						}
						break;
					case 42:
						{
						alt64 = 4;
						}
						break;
					case 41:
						{
						alt64 = 5;
						}
						break;
					case 35:
						{
						alt64 = 6;
						}
						break;
					case 39:
						{
						alt64 = 7;
						}
						break;
					}

					} finally { DebugExitDecision(64); }
					switch ( alt64 )
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:321:7: '[' expression ']'
						{
						DebugLocation(321, 7);
						char_literal196=(IToken)Match(input,59,Follow._59_in_postfix_expression1253); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal196_tree = (object)adaptor.Create(char_literal196, retval);
						adaptor.AddChild(root_0, char_literal196_tree);
						}
						DebugLocation(321, 11);
						PushFollow(Follow._expression_in_postfix_expression1255);
						expression197=expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, expression197.Tree, expression197, retval);
						DebugLocation(321, 22);
						char_literal198=(IToken)Match(input,60,Follow._60_in_postfix_expression1257); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal198_tree = (object)adaptor.Create(char_literal198, retval);
						adaptor.AddChild(root_0, char_literal198_tree);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C.g:322:7: '(' ')'
						{
						DebugLocation(322, 7);
						char_literal199=(IToken)Match(input,30,Follow._30_in_postfix_expression1265); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal199_tree = (object)adaptor.Create(char_literal199, retval);
						adaptor.AddChild(root_0, char_literal199_tree);
						}
						DebugLocation(322, 11);
						char_literal200=(IToken)Match(input,31,Follow._31_in_postfix_expression1267); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal200_tree = (object)adaptor.Create(char_literal200, retval);
						adaptor.AddChild(root_0, char_literal200_tree);
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C.g:323:7: '(' argument_expression_list ')'
						{
						DebugLocation(323, 7);
						char_literal201=(IToken)Match(input,30,Follow._30_in_postfix_expression1275); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal201_tree = (object)adaptor.Create(char_literal201, retval);
						adaptor.AddChild(root_0, char_literal201_tree);
						}
						DebugLocation(323, 11);
						PushFollow(Follow._argument_expression_list_in_postfix_expression1277);
						argument_expression_list202=argument_expression_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, argument_expression_list202.Tree, argument_expression_list202, retval);
						DebugLocation(323, 36);
						char_literal203=(IToken)Match(input,31,Follow._31_in_postfix_expression1279); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal203_tree = (object)adaptor.Create(char_literal203, retval);
						adaptor.AddChild(root_0, char_literal203_tree);
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C.g:324:7: '.' IDENTIFIER
						{
						DebugLocation(324, 7);
						char_literal204=(IToken)Match(input,42,Follow._42_in_postfix_expression1287); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal204_tree = (object)adaptor.Create(char_literal204, retval);
						adaptor.AddChild(root_0, char_literal204_tree);
						}
						DebugLocation(324, 11);
						IDENTIFIER205=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_postfix_expression1289), "IDENTIFIER"); if (state.failed) return retval;
						if (state.backtracking == 0) {
						IDENTIFIER205_tree = (object)adaptor.Create(IDENTIFIER205, retval);
						adaptor.AddChild(root_0, IDENTIFIER205_tree);
						}

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C.g:325:7: '->' IDENTIFIER
						{
						DebugLocation(325, 7);
						string_literal206=(IToken)Match(input,41,Follow._41_in_postfix_expression1297); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal206_tree = (object)adaptor.Create(string_literal206, retval);
						adaptor.AddChild(root_0, string_literal206_tree);
						}
						DebugLocation(325, 12);
						IDENTIFIER207=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_postfix_expression1299), "IDENTIFIER"); if (state.failed) return retval;
						if (state.backtracking == 0) {
						IDENTIFIER207_tree = (object)adaptor.Create(IDENTIFIER207, retval);
						adaptor.AddChild(root_0, IDENTIFIER207_tree);
						}

						}
						break;
					case 6:
						DebugEnterAlt(6);
						// C.g:326:7: '++'
						{
						DebugLocation(326, 7);
						string_literal208=(IToken)Match(input,35,Follow._35_in_postfix_expression1307); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal208_tree = (object)adaptor.Create(string_literal208, retval);
						adaptor.AddChild(root_0, string_literal208_tree);
						}

						}
						break;
					case 7:
						DebugEnterAlt(7);
						// C.g:327:7: '--'
						{
						DebugLocation(327, 7);
						string_literal209=(IToken)Match(input,39,Follow._39_in_postfix_expression1315); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal209_tree = (object)adaptor.Create(string_literal209, retval);
						adaptor.AddChild(root_0, string_literal209_tree);
						}

						}
						break;

					default:
						goto loop64;
					}
				}

				loop64:
					;

				} finally { DebugExitSubRule(64); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:329:4: gcc_builtin_va_arg
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(329, 4);
				PushFollow(Follow._gcc_builtin_va_arg_in_postfix_expression1325);
				gcc_builtin_va_arg210=gcc_builtin_va_arg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_builtin_va_arg210.Tree, gcc_builtin_va_arg210, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:330:4: gcc_builtin_offsetof
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(330, 4);
				PushFollow(Follow._gcc_builtin_offsetof_in_postfix_expression1330);
				gcc_builtin_offsetof211=gcc_builtin_offsetof();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_builtin_offsetof211.Tree, gcc_builtin_offsetof211, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("postfix_expression", 41);
			LeaveRule("postfix_expression", 41);
			LeaveRule_postfix_expression();
			if (state.backtracking > 0) { Memoize(input, 41, postfix_expression_StartIndex); }

		}
		DebugLocation(331, 1);
		} finally { DebugExitRule(GrammarFileName, "postfix_expression"); }
		return retval;

	}
	// $ANTLR end "postfix_expression"

	partial void EnterRule_unary_operator();
	partial void LeaveRule_unary_operator();

	// $ANTLR start "unary_operator"
	// C.g:333:1: unary_operator : ( '&' | '*' | '+' | '-' | '~' | '!' );
	[GrammarRule("unary_operator")]
	public XAstParserRuleReturnScope unary_operator()
	{
		EnterRule_unary_operator();
		EnterRule("unary_operator", 42);
		var retval = new XAstParserRuleReturnScope("unary_operator");
		
		retval.Start = (IToken)input.LT(1);
		int unary_operator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set212 = default(IToken);

		object set212_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unary_operator");
		DebugLocation(333, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// C.g:334:2: ( '&' | '*' | '+' | '-' | '~' | '!' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(334, 2);

			set212=(IToken)input.LT(1);
			if (input.LA(1)==23||input.LA(1)==28||input.LA(1)==32||input.LA(1)==34||input.LA(1)==38||input.LA(1)==112)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set212, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_operator", 42);
			LeaveRule("unary_operator", 42);
			LeaveRule_unary_operator();
			if (state.backtracking > 0) { Memoize(input, 42, unary_operator_StartIndex); }

		}
		DebugLocation(340, 1);
		} finally { DebugExitRule(GrammarFileName, "unary_operator"); }
		return retval;

	}
	// $ANTLR end "unary_operator"

	partial void EnterRule_primary_expression();
	partial void LeaveRule_primary_expression();

	// $ANTLR start "primary_expression"
	// C.g:342:1: primary_expression : ( IDENTIFIER | constant | '(' expression ')' | gcc_statement_expression );
	[GrammarRule("primary_expression")]
	public XAstParserRuleReturnScope primary_expression()
	{
		EnterRule_primary_expression();
		EnterRule("primary_expression", 43);
		var retval = new XAstParserRuleReturnScope("primary_expression");
		
		retval.Start = (IToken)input.LT(1);
		int primary_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER213 = default(IToken);
		IToken char_literal215 = default(IToken);
		IToken char_literal217 = default(IToken);
		XAstParserRuleReturnScope constant214 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression216 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_statement_expression218 = default(XAstParserRuleReturnScope);

		object IDENTIFIER213_tree = default(object);
		object char_literal215_tree = default(object);
		object char_literal217_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primary_expression");
		DebugLocation(342, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// C.g:343:2: ( IDENTIFIER | constant | '(' expression ')' | gcc_statement_expression )
			int alt66=4;
			try { DebugEnterDecision(66, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				alt66 = 1;
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
				{
				alt66 = 2;
				}
				break;
			case 30:
				{
				int LA66_8 = input.LA(2);

				if ((LA66_8==CHARACTER_LITERAL||LA66_8==DECIMAL_LITERAL||LA66_8==FLOATING_POINT_LITERAL||LA66_8==HEX_LITERAL||LA66_8==IDENTIFIER||LA66_8==OCTAL_LITERAL||LA66_8==STRING_LITERAL||LA66_8==23||LA66_8==28||LA66_8==30||LA66_8==32||(LA66_8>=34 && LA66_8<=35)||(LA66_8>=38 && LA66_8<=39)||LA66_8==63||(LA66_8>=65 && LA66_8<=66)||LA66_8==68||LA66_8==96||LA66_8==112))
				{
					alt66 = 3;
				}
				else if ((LA66_8==107))
				{
					alt66 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 66, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:343:4: IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(343, 4);
				IDENTIFIER213=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primary_expression1377), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER213_tree = (object)adaptor.Create(IDENTIFIER213, retval);
				adaptor.AddChild(root_0, IDENTIFIER213_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:344:4: constant
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(344, 4);
				PushFollow(Follow._constant_in_primary_expression1382);
				constant214=constant();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant214.Tree, constant214, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:345:4: '(' expression ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(345, 4);
				char_literal215=(IToken)Match(input,30,Follow._30_in_primary_expression1387); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal215_tree = (object)adaptor.Create(char_literal215, retval);
				adaptor.AddChild(root_0, char_literal215_tree);
				}
				DebugLocation(345, 8);
				PushFollow(Follow._expression_in_primary_expression1389);
				expression216=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression216.Tree, expression216, retval);
				DebugLocation(345, 19);
				char_literal217=(IToken)Match(input,31,Follow._31_in_primary_expression1391); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal217_tree = (object)adaptor.Create(char_literal217, retval);
				adaptor.AddChild(root_0, char_literal217_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:346:4: gcc_statement_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(346, 4);
				PushFollow(Follow._gcc_statement_expression_in_primary_expression1396);
				gcc_statement_expression218=gcc_statement_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_statement_expression218.Tree, gcc_statement_expression218, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_expression", 43);
			LeaveRule("primary_expression", 43);
			LeaveRule_primary_expression();
			if (state.backtracking > 0) { Memoize(input, 43, primary_expression_StartIndex); }

		}
		DebugLocation(347, 1);
		} finally { DebugExitRule(GrammarFileName, "primary_expression"); }
		return retval;

	}
	// $ANTLR end "primary_expression"

	partial void EnterRule_constant();
	partial void LeaveRule_constant();

	// $ANTLR start "constant"
	// C.g:349:1: constant : ( hex_literal | octal_literal | decimal_literal | character_literal | string_literal | floating_point_literal );
	[GrammarRule("constant")]
	public XAstParserRuleReturnScope constant()
	{
		EnterRule_constant();
		EnterRule("constant", 44);
		var retval = new XAstParserRuleReturnScope("constant");
		
		retval.Start = (IToken)input.LT(1);
		int constant_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope hex_literal219 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope octal_literal220 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope decimal_literal221 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope character_literal222 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope string_literal223 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope floating_point_literal224 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(349, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// C.g:350:2: ( hex_literal | octal_literal | decimal_literal | character_literal | string_literal | floating_point_literal )
			int alt67=6;
			try { DebugEnterDecision(67, false);
			switch (input.LA(1))
			{
			case HEX_LITERAL:
				{
				alt67 = 1;
				}
				break;
			case OCTAL_LITERAL:
				{
				alt67 = 2;
				}
				break;
			case DECIMAL_LITERAL:
				{
				alt67 = 3;
				}
				break;
			case CHARACTER_LITERAL:
				{
				alt67 = 4;
				}
				break;
			case STRING_LITERAL:
				{
				alt67 = 5;
				}
				break;
			case FLOATING_POINT_LITERAL:
				{
				alt67 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:350:6: hex_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(350, 6);
				PushFollow(Follow._hex_literal_in_constant1409);
				hex_literal219=hex_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, hex_literal219.Tree, hex_literal219, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:351:6: octal_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(351, 6);
				PushFollow(Follow._octal_literal_in_constant1416);
				octal_literal220=octal_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, octal_literal220.Tree, octal_literal220, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:352:6: decimal_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(352, 6);
				PushFollow(Follow._decimal_literal_in_constant1423);
				decimal_literal221=decimal_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, decimal_literal221.Tree, decimal_literal221, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:353:6: character_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(353, 6);
				PushFollow(Follow._character_literal_in_constant1430);
				character_literal222=character_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, character_literal222.Tree, character_literal222, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:354:6: string_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(354, 6);
				PushFollow(Follow._string_literal_in_constant1437);
				string_literal223=string_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, string_literal223.Tree, string_literal223, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:355:6: floating_point_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(355, 6);
				PushFollow(Follow._floating_point_literal_in_constant1444);
				floating_point_literal224=floating_point_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, floating_point_literal224.Tree, floating_point_literal224, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant", 44);
			LeaveRule("constant", 44);
			LeaveRule_constant();
			if (state.backtracking > 0) { Memoize(input, 44, constant_StartIndex); }

		}
		DebugLocation(356, 1);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"

	partial void EnterRule_hex_literal();
	partial void LeaveRule_hex_literal();

	// $ANTLR start "hex_literal"
	// C.g:358:1: hex_literal : HEX_LITERAL ;
	[GrammarRule("hex_literal")]
	public XAstParserRuleReturnScope hex_literal()
	{
		EnterRule_hex_literal();
		EnterRule("hex_literal", 45);
		var retval = new XAstParserRuleReturnScope("hex_literal");
		
		retval.Start = (IToken)input.LT(1);
		int hex_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken HEX_LITERAL225 = default(IToken);

		object HEX_LITERAL225_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "hex_literal");
		DebugLocation(358, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// C.g:359:2: ( HEX_LITERAL )
			DebugEnterAlt(1);
			// C.g:359:4: HEX_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(359, 4);
			HEX_LITERAL225=(IToken)new XToken((IToken)Match(input,HEX_LITERAL,Follow._HEX_LITERAL_in_hex_literal1455), "HEX_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			HEX_LITERAL225_tree = (object)adaptor.Create(HEX_LITERAL225, retval);
			adaptor.AddChild(root_0, HEX_LITERAL225_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("hex_literal", 45);
			LeaveRule("hex_literal", 45);
			LeaveRule_hex_literal();
			if (state.backtracking > 0) { Memoize(input, 45, hex_literal_StartIndex); }

		}
		DebugLocation(360, 1);
		} finally { DebugExitRule(GrammarFileName, "hex_literal"); }
		return retval;

	}
	// $ANTLR end "hex_literal"

	partial void EnterRule_octal_literal();
	partial void LeaveRule_octal_literal();

	// $ANTLR start "octal_literal"
	// C.g:362:1: octal_literal : OCTAL_LITERAL ;
	[GrammarRule("octal_literal")]
	public XAstParserRuleReturnScope octal_literal()
	{
		EnterRule_octal_literal();
		EnterRule("octal_literal", 46);
		var retval = new XAstParserRuleReturnScope("octal_literal");
		
		retval.Start = (IToken)input.LT(1);
		int octal_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OCTAL_LITERAL226 = default(IToken);

		object OCTAL_LITERAL226_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "octal_literal");
		DebugLocation(362, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// C.g:363:2: ( OCTAL_LITERAL )
			DebugEnterAlt(1);
			// C.g:363:4: OCTAL_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(363, 4);
			OCTAL_LITERAL226=(IToken)new XToken((IToken)Match(input,OCTAL_LITERAL,Follow._OCTAL_LITERAL_in_octal_literal1466), "OCTAL_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OCTAL_LITERAL226_tree = (object)adaptor.Create(OCTAL_LITERAL226, retval);
			adaptor.AddChild(root_0, OCTAL_LITERAL226_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("octal_literal", 46);
			LeaveRule("octal_literal", 46);
			LeaveRule_octal_literal();
			if (state.backtracking > 0) { Memoize(input, 46, octal_literal_StartIndex); }

		}
		DebugLocation(364, 1);
		} finally { DebugExitRule(GrammarFileName, "octal_literal"); }
		return retval;

	}
	// $ANTLR end "octal_literal"

	partial void EnterRule_decimal_literal();
	partial void LeaveRule_decimal_literal();

	// $ANTLR start "decimal_literal"
	// C.g:366:1: decimal_literal : DECIMAL_LITERAL ;
	[GrammarRule("decimal_literal")]
	public XAstParserRuleReturnScope decimal_literal()
	{
		EnterRule_decimal_literal();
		EnterRule("decimal_literal", 47);
		var retval = new XAstParserRuleReturnScope("decimal_literal");
		
		retval.Start = (IToken)input.LT(1);
		int decimal_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken DECIMAL_LITERAL227 = default(IToken);

		object DECIMAL_LITERAL227_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "decimal_literal");
		DebugLocation(366, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// C.g:367:2: ( DECIMAL_LITERAL )
			DebugEnterAlt(1);
			// C.g:367:4: DECIMAL_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(367, 4);
			DECIMAL_LITERAL227=(IToken)new XToken((IToken)Match(input,DECIMAL_LITERAL,Follow._DECIMAL_LITERAL_in_decimal_literal1477), "DECIMAL_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DECIMAL_LITERAL227_tree = (object)adaptor.Create(DECIMAL_LITERAL227, retval);
			adaptor.AddChild(root_0, DECIMAL_LITERAL227_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("decimal_literal", 47);
			LeaveRule("decimal_literal", 47);
			LeaveRule_decimal_literal();
			if (state.backtracking > 0) { Memoize(input, 47, decimal_literal_StartIndex); }

		}
		DebugLocation(368, 1);
		} finally { DebugExitRule(GrammarFileName, "decimal_literal"); }
		return retval;

	}
	// $ANTLR end "decimal_literal"

	partial void EnterRule_character_literal();
	partial void LeaveRule_character_literal();

	// $ANTLR start "character_literal"
	// C.g:370:1: character_literal : CHARACTER_LITERAL ;
	[GrammarRule("character_literal")]
	public XAstParserRuleReturnScope character_literal()
	{
		EnterRule_character_literal();
		EnterRule("character_literal", 48);
		var retval = new XAstParserRuleReturnScope("character_literal");
		
		retval.Start = (IToken)input.LT(1);
		int character_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken CHARACTER_LITERAL228 = default(IToken);

		object CHARACTER_LITERAL228_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "character_literal");
		DebugLocation(370, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// C.g:371:2: ( CHARACTER_LITERAL )
			DebugEnterAlt(1);
			// C.g:371:4: CHARACTER_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(371, 4);
			CHARACTER_LITERAL228=(IToken)new XToken((IToken)Match(input,CHARACTER_LITERAL,Follow._CHARACTER_LITERAL_in_character_literal1488), "CHARACTER_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CHARACTER_LITERAL228_tree = (object)adaptor.Create(CHARACTER_LITERAL228, retval);
			adaptor.AddChild(root_0, CHARACTER_LITERAL228_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("character_literal", 48);
			LeaveRule("character_literal", 48);
			LeaveRule_character_literal();
			if (state.backtracking > 0) { Memoize(input, 48, character_literal_StartIndex); }

		}
		DebugLocation(372, 1);
		} finally { DebugExitRule(GrammarFileName, "character_literal"); }
		return retval;

	}
	// $ANTLR end "character_literal"

	partial void EnterRule_string_literal();
	partial void LeaveRule_string_literal();

	// $ANTLR start "string_literal"
	// C.g:374:1: string_literal : STRING_LITERAL ;
	[GrammarRule("string_literal")]
	public XAstParserRuleReturnScope string_literal()
	{
		EnterRule_string_literal();
		EnterRule("string_literal", 49);
		var retval = new XAstParserRuleReturnScope("string_literal");
		
		retval.Start = (IToken)input.LT(1);
		int string_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken STRING_LITERAL229 = default(IToken);

		object STRING_LITERAL229_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "string_literal");
		DebugLocation(374, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// C.g:375:2: ( STRING_LITERAL )
			DebugEnterAlt(1);
			// C.g:375:4: STRING_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(375, 4);
			STRING_LITERAL229=(IToken)new XToken((IToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_string_literal1499), "STRING_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING_LITERAL229_tree = (object)adaptor.Create(STRING_LITERAL229, retval);
			adaptor.AddChild(root_0, STRING_LITERAL229_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("string_literal", 49);
			LeaveRule("string_literal", 49);
			LeaveRule_string_literal();
			if (state.backtracking > 0) { Memoize(input, 49, string_literal_StartIndex); }

		}
		DebugLocation(376, 1);
		} finally { DebugExitRule(GrammarFileName, "string_literal"); }
		return retval;

	}
	// $ANTLR end "string_literal"

	partial void EnterRule_floating_point_literal();
	partial void LeaveRule_floating_point_literal();

	// $ANTLR start "floating_point_literal"
	// C.g:378:1: floating_point_literal : FLOATING_POINT_LITERAL ;
	[GrammarRule("floating_point_literal")]
	public XAstParserRuleReturnScope floating_point_literal()
	{
		EnterRule_floating_point_literal();
		EnterRule("floating_point_literal", 50);
		var retval = new XAstParserRuleReturnScope("floating_point_literal");
		
		retval.Start = (IToken)input.LT(1);
		int floating_point_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken FLOATING_POINT_LITERAL230 = default(IToken);

		object FLOATING_POINT_LITERAL230_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "floating_point_literal");
		DebugLocation(378, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// C.g:379:2: ( FLOATING_POINT_LITERAL )
			DebugEnterAlt(1);
			// C.g:379:4: FLOATING_POINT_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(379, 4);
			FLOATING_POINT_LITERAL230=(IToken)new XToken((IToken)Match(input,FLOATING_POINT_LITERAL,Follow._FLOATING_POINT_LITERAL_in_floating_point_literal1510), "FLOATING_POINT_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			FLOATING_POINT_LITERAL230_tree = (object)adaptor.Create(FLOATING_POINT_LITERAL230, retval);
			adaptor.AddChild(root_0, FLOATING_POINT_LITERAL230_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("floating_point_literal", 50);
			LeaveRule("floating_point_literal", 50);
			LeaveRule_floating_point_literal();
			if (state.backtracking > 0) { Memoize(input, 50, floating_point_literal_StartIndex); }

		}
		DebugLocation(380, 1);
		} finally { DebugExitRule(GrammarFileName, "floating_point_literal"); }
		return retval;

	}
	// $ANTLR end "floating_point_literal"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();

	// $ANTLR start "expression"
	// C.g:384:1: expression : assignment_expression ( ',' assignment_expression )* ;
	[GrammarRule("expression")]
	public XAstParserRuleReturnScope expression()
	{
		EnterRule_expression();
		EnterRule("expression", 51);
		var retval = new XAstParserRuleReturnScope("expression");
		
		retval.Start = (IToken)input.LT(1);
		int expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal232 = default(IToken);
		XAstParserRuleReturnScope assignment_expression231 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression233 = default(XAstParserRuleReturnScope);

		object char_literal232_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(384, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// C.g:385:2: ( assignment_expression ( ',' assignment_expression )* )
			DebugEnterAlt(1);
			// C.g:385:4: assignment_expression ( ',' assignment_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(385, 4);
			PushFollow(Follow._assignment_expression_in_expression1523);
			assignment_expression231=assignment_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression231.Tree, assignment_expression231, retval);
			DebugLocation(385, 26);
			// C.g:385:26: ( ',' assignment_expression )*
			try { DebugEnterSubRule(68);
			while (true)
			{
				int alt68=2;
				try { DebugEnterDecision(68, false);
				int LA68_0 = input.LA(1);

				if ((LA68_0==37))
				{
					alt68 = 1;
				}


				} finally { DebugExitDecision(68); }
				switch ( alt68 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:385:27: ',' assignment_expression
					{
					DebugLocation(385, 27);
					char_literal232=(IToken)Match(input,37,Follow._37_in_expression1526); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal232_tree = (object)adaptor.Create(char_literal232, retval);
					adaptor.AddChild(root_0, char_literal232_tree);
					}
					DebugLocation(385, 31);
					PushFollow(Follow._assignment_expression_in_expression1528);
					assignment_expression233=assignment_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression233.Tree, assignment_expression233, retval);

					}
					break;

				default:
					goto loop68;
				}
			}

			loop68:
				;

			} finally { DebugExitSubRule(68); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 51);
			LeaveRule("expression", 51);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 51, expression_StartIndex); }

		}
		DebugLocation(386, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_constant_expression();
	partial void LeaveRule_constant_expression();

	// $ANTLR start "constant_expression"
	// C.g:388:1: constant_expression : conditional_expression ;
	[GrammarRule("constant_expression")]
	public XAstParserRuleReturnScope constant_expression()
	{
		EnterRule_constant_expression();
		EnterRule("constant_expression", 52);
		var retval = new XAstParserRuleReturnScope("constant_expression");
		
		retval.Start = (IToken)input.LT(1);
		int constant_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope conditional_expression234 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "constant_expression");
		DebugLocation(388, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// C.g:389:2: ( conditional_expression )
			DebugEnterAlt(1);
			// C.g:389:4: conditional_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(389, 4);
			PushFollow(Follow._conditional_expression_in_constant_expression1541);
			conditional_expression234=conditional_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression234.Tree, conditional_expression234, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant_expression", 52);
			LeaveRule("constant_expression", 52);
			LeaveRule_constant_expression();
			if (state.backtracking > 0) { Memoize(input, 52, constant_expression_StartIndex); }

		}
		DebugLocation(390, 1);
		} finally { DebugExitRule(GrammarFileName, "constant_expression"); }
		return retval;

	}
	// $ANTLR end "constant_expression"

	partial void EnterRule_assignment_expression();
	partial void LeaveRule_assignment_expression();

	// $ANTLR start "assignment_expression"
	// C.g:392:1: assignment_expression : ( lvalue assignment_operator assignment_expression | conditional_expression );
	[GrammarRule("assignment_expression")]
	public XAstParserRuleReturnScope assignment_expression()
	{
		EnterRule_assignment_expression();
		EnterRule("assignment_expression", 53);
		var retval = new XAstParserRuleReturnScope("assignment_expression");
		
		retval.Start = (IToken)input.LT(1);
		int assignment_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope lvalue235 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_operator236 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression237 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conditional_expression238 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "assignment_expression");
		DebugLocation(392, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// C.g:393:2: ( lvalue assignment_operator assignment_expression | conditional_expression )
			int alt69=2;
			try { DebugEnterDecision(69, false);
			try
			{
				alt69 = dfa69.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:393:4: lvalue assignment_operator assignment_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(393, 4);
				PushFollow(Follow._lvalue_in_assignment_expression1552);
				lvalue235=lvalue();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue235.Tree, lvalue235, retval);
				DebugLocation(393, 11);
				PushFollow(Follow._assignment_operator_in_assignment_expression1554);
				assignment_operator236=assignment_operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_operator236.Tree, assignment_operator236, retval);
				DebugLocation(393, 31);
				PushFollow(Follow._assignment_expression_in_assignment_expression1556);
				assignment_expression237=assignment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression237.Tree, assignment_expression237, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:394:4: conditional_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 4);
				PushFollow(Follow._conditional_expression_in_assignment_expression1561);
				conditional_expression238=conditional_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression238.Tree, conditional_expression238, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment_expression", 53);
			LeaveRule("assignment_expression", 53);
			LeaveRule_assignment_expression();
			if (state.backtracking > 0) { Memoize(input, 53, assignment_expression_StartIndex); }

		}
		DebugLocation(395, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment_expression"); }
		return retval;

	}
	// $ANTLR end "assignment_expression"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// C.g:397:1: lvalue : unary_expression ;
	[GrammarRule("lvalue")]
	public XAstParserRuleReturnScope lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 54);
		var retval = new XAstParserRuleReturnScope("lvalue");
		
		retval.Start = (IToken)input.LT(1);
		int lvalue_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope unary_expression239 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(397, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// C.g:398:2: ( unary_expression )
			DebugEnterAlt(1);
			// C.g:398:4: unary_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(398, 4);
			PushFollow(Follow._unary_expression_in_lvalue1573);
			unary_expression239=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression239.Tree, unary_expression239, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 54);
			LeaveRule("lvalue", 54);
			LeaveRule_lvalue();
			if (state.backtracking > 0) { Memoize(input, 54, lvalue_StartIndex); }

		}
		DebugLocation(399, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_assignment_operator();
	partial void LeaveRule_assignment_operator();

	// $ANTLR start "assignment_operator"
	// C.g:401:1: assignment_operator : ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' );
	[GrammarRule("assignment_operator")]
	public XAstParserRuleReturnScope assignment_operator()
	{
		EnterRule_assignment_operator();
		EnterRule("assignment_operator", 55);
		var retval = new XAstParserRuleReturnScope("assignment_operator");
		
		retval.Start = (IToken)input.LT(1);
		int assignment_operator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set240 = default(IToken);

		object set240_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assignment_operator");
		DebugLocation(401, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// C.g:402:2: ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(402, 2);

			set240=(IToken)input.LT(1);
			if (input.LA(1)==26||input.LA(1)==29||input.LA(1)==33||input.LA(1)==36||input.LA(1)==40||input.LA(1)==45||input.LA(1)==50||input.LA(1)==52||input.LA(1)==57||input.LA(1)==62||input.LA(1)==109)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set240, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment_operator", 55);
			LeaveRule("assignment_operator", 55);
			LeaveRule_assignment_operator();
			if (state.backtracking > 0) { Memoize(input, 55, assignment_operator_StartIndex); }

		}
		DebugLocation(413, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment_operator"); }
		return retval;

	}
	// $ANTLR end "assignment_operator"

	partial void EnterRule_conditional_expression();
	partial void LeaveRule_conditional_expression();

	// $ANTLR start "conditional_expression"
	// C.g:415:1: conditional_expression : ( logical_or_expression ( '?' expression ':' conditional_expression )? | logical_or_expression '?' ':' conditional_expression );
	[GrammarRule("conditional_expression")]
	public XAstParserRuleReturnScope conditional_expression()
	{
		EnterRule_conditional_expression();
		EnterRule("conditional_expression", 56);
		var retval = new XAstParserRuleReturnScope("conditional_expression");
		
		retval.Start = (IToken)input.LT(1);
		int conditional_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal242 = default(IToken);
		IToken char_literal244 = default(IToken);
		IToken char_literal247 = default(IToken);
		IToken char_literal248 = default(IToken);
		XAstParserRuleReturnScope logical_or_expression241 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression243 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conditional_expression245 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope logical_or_expression246 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conditional_expression249 = default(XAstParserRuleReturnScope);

		object char_literal242_tree = default(object);
		object char_literal244_tree = default(object);
		object char_literal247_tree = default(object);
		object char_literal248_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditional_expression");
		DebugLocation(415, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// C.g:416:2: ( logical_or_expression ( '?' expression ':' conditional_expression )? | logical_or_expression '?' ':' conditional_expression )
			int alt71=2;
			try { DebugEnterDecision(71, false);
			try
			{
				alt71 = dfa71.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:416:4: logical_or_expression ( '?' expression ':' conditional_expression )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(416, 4);
				PushFollow(Follow._logical_or_expression_in_conditional_expression1645);
				logical_or_expression241=logical_or_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logical_or_expression241.Tree, logical_or_expression241, retval);
				DebugLocation(416, 26);
				// C.g:416:26: ( '?' expression ':' conditional_expression )?
				int alt70=2;
				try { DebugEnterSubRule(70);
				try { DebugEnterDecision(70, false);
				int LA70_0 = input.LA(1);

				if ((LA70_0==58))
				{
					alt70 = 1;
				}
				} finally { DebugExitDecision(70); }
				switch (alt70)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:416:27: '?' expression ':' conditional_expression
					{
					DebugLocation(416, 27);
					char_literal242=(IToken)Match(input,58,Follow._58_in_conditional_expression1648); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal242_tree = (object)adaptor.Create(char_literal242, retval);
					adaptor.AddChild(root_0, char_literal242_tree);
					}
					DebugLocation(416, 31);
					PushFollow(Follow._expression_in_conditional_expression1650);
					expression243=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression243.Tree, expression243, retval);
					DebugLocation(416, 42);
					char_literal244=(IToken)Match(input,46,Follow._46_in_conditional_expression1652); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal244_tree = (object)adaptor.Create(char_literal244, retval);
					adaptor.AddChild(root_0, char_literal244_tree);
					}
					DebugLocation(416, 46);
					PushFollow(Follow._conditional_expression_in_conditional_expression1654);
					conditional_expression245=conditional_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression245.Tree, conditional_expression245, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(70); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:418:4: logical_or_expression '?' ':' conditional_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(418, 4);
				PushFollow(Follow._logical_or_expression_in_conditional_expression1663);
				logical_or_expression246=logical_or_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logical_or_expression246.Tree, logical_or_expression246, retval);
				DebugLocation(418, 26);
				char_literal247=(IToken)Match(input,58,Follow._58_in_conditional_expression1665); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal247_tree = (object)adaptor.Create(char_literal247, retval);
				adaptor.AddChild(root_0, char_literal247_tree);
				}
				DebugLocation(418, 30);
				char_literal248=(IToken)Match(input,46,Follow._46_in_conditional_expression1667); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal248_tree = (object)adaptor.Create(char_literal248, retval);
				adaptor.AddChild(root_0, char_literal248_tree);
				}
				DebugLocation(418, 34);
				PushFollow(Follow._conditional_expression_in_conditional_expression1669);
				conditional_expression249=conditional_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression249.Tree, conditional_expression249, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditional_expression", 56);
			LeaveRule("conditional_expression", 56);
			LeaveRule_conditional_expression();
			if (state.backtracking > 0) { Memoize(input, 56, conditional_expression_StartIndex); }

		}
		DebugLocation(419, 1);
		} finally { DebugExitRule(GrammarFileName, "conditional_expression"); }
		return retval;

	}
	// $ANTLR end "conditional_expression"

	partial void EnterRule_logical_or_expression();
	partial void LeaveRule_logical_or_expression();

	// $ANTLR start "logical_or_expression"
	// C.g:421:1: logical_or_expression : logical_and_expression ( '||' logical_and_expression )* ;
	[GrammarRule("logical_or_expression")]
	public XAstParserRuleReturnScope logical_or_expression()
	{
		EnterRule_logical_or_expression();
		EnterRule("logical_or_expression", 57);
		var retval = new XAstParserRuleReturnScope("logical_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int logical_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal251 = default(IToken);
		XAstParserRuleReturnScope logical_and_expression250 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope logical_and_expression252 = default(XAstParserRuleReturnScope);

		object string_literal251_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logical_or_expression");
		DebugLocation(421, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// C.g:422:2: ( logical_and_expression ( '||' logical_and_expression )* )
			DebugEnterAlt(1);
			// C.g:422:4: logical_and_expression ( '||' logical_and_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(422, 4);
			PushFollow(Follow._logical_and_expression_in_logical_or_expression1680);
			logical_and_expression250=logical_and_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logical_and_expression250.Tree, logical_and_expression250, retval);
			DebugLocation(422, 27);
			// C.g:422:27: ( '||' logical_and_expression )*
			try { DebugEnterSubRule(72);
			while (true)
			{
				int alt72=2;
				try { DebugEnterDecision(72, false);
				int LA72_0 = input.LA(1);

				if ((LA72_0==110))
				{
					alt72 = 1;
				}


				} finally { DebugExitDecision(72); }
				switch ( alt72 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:422:28: '||' logical_and_expression
					{
					DebugLocation(422, 28);
					string_literal251=(IToken)Match(input,110,Follow._110_in_logical_or_expression1683); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal251_tree = (object)adaptor.Create(string_literal251, retval);
					adaptor.AddChild(root_0, string_literal251_tree);
					}
					DebugLocation(422, 33);
					PushFollow(Follow._logical_and_expression_in_logical_or_expression1685);
					logical_and_expression252=logical_and_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logical_and_expression252.Tree, logical_and_expression252, retval);

					}
					break;

				default:
					goto loop72;
				}
			}

			loop72:
				;

			} finally { DebugExitSubRule(72); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logical_or_expression", 57);
			LeaveRule("logical_or_expression", 57);
			LeaveRule_logical_or_expression();
			if (state.backtracking > 0) { Memoize(input, 57, logical_or_expression_StartIndex); }

		}
		DebugLocation(423, 1);
		} finally { DebugExitRule(GrammarFileName, "logical_or_expression"); }
		return retval;

	}
	// $ANTLR end "logical_or_expression"

	partial void EnterRule_logical_and_expression();
	partial void LeaveRule_logical_and_expression();

	// $ANTLR start "logical_and_expression"
	// C.g:425:1: logical_and_expression : inclusive_or_expression ( '&&' inclusive_or_expression )* ;
	[GrammarRule("logical_and_expression")]
	public XAstParserRuleReturnScope logical_and_expression()
	{
		EnterRule_logical_and_expression();
		EnterRule("logical_and_expression", 58);
		var retval = new XAstParserRuleReturnScope("logical_and_expression");
		
		retval.Start = (IToken)input.LT(1);
		int logical_and_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal254 = default(IToken);
		XAstParserRuleReturnScope inclusive_or_expression253 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope inclusive_or_expression255 = default(XAstParserRuleReturnScope);

		object string_literal254_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logical_and_expression");
		DebugLocation(425, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// C.g:426:2: ( inclusive_or_expression ( '&&' inclusive_or_expression )* )
			DebugEnterAlt(1);
			// C.g:426:4: inclusive_or_expression ( '&&' inclusive_or_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(426, 4);
			PushFollow(Follow._inclusive_or_expression_in_logical_and_expression1698);
			inclusive_or_expression253=inclusive_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, inclusive_or_expression253.Tree, inclusive_or_expression253, retval);
			DebugLocation(426, 28);
			// C.g:426:28: ( '&&' inclusive_or_expression )*
			try { DebugEnterSubRule(73);
			while (true)
			{
				int alt73=2;
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==27))
				{
					alt73 = 1;
				}


				} finally { DebugExitDecision(73); }
				switch ( alt73 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:426:29: '&&' inclusive_or_expression
					{
					DebugLocation(426, 29);
					string_literal254=(IToken)Match(input,27,Follow._27_in_logical_and_expression1701); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal254_tree = (object)adaptor.Create(string_literal254, retval);
					adaptor.AddChild(root_0, string_literal254_tree);
					}
					DebugLocation(426, 34);
					PushFollow(Follow._inclusive_or_expression_in_logical_and_expression1703);
					inclusive_or_expression255=inclusive_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, inclusive_or_expression255.Tree, inclusive_or_expression255, retval);

					}
					break;

				default:
					goto loop73;
				}
			}

			loop73:
				;

			} finally { DebugExitSubRule(73); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logical_and_expression", 58);
			LeaveRule("logical_and_expression", 58);
			LeaveRule_logical_and_expression();
			if (state.backtracking > 0) { Memoize(input, 58, logical_and_expression_StartIndex); }

		}
		DebugLocation(427, 1);
		} finally { DebugExitRule(GrammarFileName, "logical_and_expression"); }
		return retval;

	}
	// $ANTLR end "logical_and_expression"

	partial void EnterRule_inclusive_or_expression();
	partial void LeaveRule_inclusive_or_expression();

	// $ANTLR start "inclusive_or_expression"
	// C.g:429:1: inclusive_or_expression : exclusive_or_expression ( '|' exclusive_or_expression )* ;
	[GrammarRule("inclusive_or_expression")]
	public XAstParserRuleReturnScope inclusive_or_expression()
	{
		EnterRule_inclusive_or_expression();
		EnterRule("inclusive_or_expression", 59);
		var retval = new XAstParserRuleReturnScope("inclusive_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int inclusive_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal257 = default(IToken);
		XAstParserRuleReturnScope exclusive_or_expression256 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope exclusive_or_expression258 = default(XAstParserRuleReturnScope);

		object char_literal257_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "inclusive_or_expression");
		DebugLocation(429, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// C.g:430:2: ( exclusive_or_expression ( '|' exclusive_or_expression )* )
			DebugEnterAlt(1);
			// C.g:430:4: exclusive_or_expression ( '|' exclusive_or_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(430, 4);
			PushFollow(Follow._exclusive_or_expression_in_inclusive_or_expression1716);
			exclusive_or_expression256=exclusive_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, exclusive_or_expression256.Tree, exclusive_or_expression256, retval);
			DebugLocation(430, 28);
			// C.g:430:28: ( '|' exclusive_or_expression )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==108))
				{
					alt74 = 1;
				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:430:29: '|' exclusive_or_expression
					{
					DebugLocation(430, 29);
					char_literal257=(IToken)Match(input,108,Follow._108_in_inclusive_or_expression1719); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal257_tree = (object)adaptor.Create(char_literal257, retval);
					adaptor.AddChild(root_0, char_literal257_tree);
					}
					DebugLocation(430, 33);
					PushFollow(Follow._exclusive_or_expression_in_inclusive_or_expression1721);
					exclusive_or_expression258=exclusive_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, exclusive_or_expression258.Tree, exclusive_or_expression258, retval);

					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inclusive_or_expression", 59);
			LeaveRule("inclusive_or_expression", 59);
			LeaveRule_inclusive_or_expression();
			if (state.backtracking > 0) { Memoize(input, 59, inclusive_or_expression_StartIndex); }

		}
		DebugLocation(431, 1);
		} finally { DebugExitRule(GrammarFileName, "inclusive_or_expression"); }
		return retval;

	}
	// $ANTLR end "inclusive_or_expression"

	partial void EnterRule_exclusive_or_expression();
	partial void LeaveRule_exclusive_or_expression();

	// $ANTLR start "exclusive_or_expression"
	// C.g:433:1: exclusive_or_expression : and_expression ( '^' and_expression )* ;
	[GrammarRule("exclusive_or_expression")]
	public XAstParserRuleReturnScope exclusive_or_expression()
	{
		EnterRule_exclusive_or_expression();
		EnterRule("exclusive_or_expression", 60);
		var retval = new XAstParserRuleReturnScope("exclusive_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int exclusive_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal260 = default(IToken);
		XAstParserRuleReturnScope and_expression259 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope and_expression261 = default(XAstParserRuleReturnScope);

		object char_literal260_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "exclusive_or_expression");
		DebugLocation(433, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// C.g:434:2: ( and_expression ( '^' and_expression )* )
			DebugEnterAlt(1);
			// C.g:434:4: and_expression ( '^' and_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(434, 4);
			PushFollow(Follow._and_expression_in_exclusive_or_expression1734);
			and_expression259=and_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, and_expression259.Tree, and_expression259, retval);
			DebugLocation(434, 19);
			// C.g:434:19: ( '^' and_expression )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_0 = input.LA(1);

				if ((LA75_0==61))
				{
					alt75 = 1;
				}


				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:434:20: '^' and_expression
					{
					DebugLocation(434, 20);
					char_literal260=(IToken)Match(input,61,Follow._61_in_exclusive_or_expression1737); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal260_tree = (object)adaptor.Create(char_literal260, retval);
					adaptor.AddChild(root_0, char_literal260_tree);
					}
					DebugLocation(434, 24);
					PushFollow(Follow._and_expression_in_exclusive_or_expression1739);
					and_expression261=and_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, and_expression261.Tree, and_expression261, retval);

					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exclusive_or_expression", 60);
			LeaveRule("exclusive_or_expression", 60);
			LeaveRule_exclusive_or_expression();
			if (state.backtracking > 0) { Memoize(input, 60, exclusive_or_expression_StartIndex); }

		}
		DebugLocation(435, 1);
		} finally { DebugExitRule(GrammarFileName, "exclusive_or_expression"); }
		return retval;

	}
	// $ANTLR end "exclusive_or_expression"

	partial void EnterRule_and_expression();
	partial void LeaveRule_and_expression();

	// $ANTLR start "and_expression"
	// C.g:437:1: and_expression : equality_expression ( '&' equality_expression )* ;
	[GrammarRule("and_expression")]
	public XAstParserRuleReturnScope and_expression()
	{
		EnterRule_and_expression();
		EnterRule("and_expression", 61);
		var retval = new XAstParserRuleReturnScope("and_expression");
		
		retval.Start = (IToken)input.LT(1);
		int and_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal263 = default(IToken);
		XAstParserRuleReturnScope equality_expression262 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope equality_expression264 = default(XAstParserRuleReturnScope);

		object char_literal263_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "and_expression");
		DebugLocation(437, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// C.g:438:2: ( equality_expression ( '&' equality_expression )* )
			DebugEnterAlt(1);
			// C.g:438:4: equality_expression ( '&' equality_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(438, 4);
			PushFollow(Follow._equality_expression_in_and_expression1752);
			equality_expression262=equality_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equality_expression262.Tree, equality_expression262, retval);
			DebugLocation(438, 24);
			// C.g:438:24: ( '&' equality_expression )*
			try { DebugEnterSubRule(76);
			while (true)
			{
				int alt76=2;
				try { DebugEnterDecision(76, false);
				int LA76_0 = input.LA(1);

				if ((LA76_0==28))
				{
					alt76 = 1;
				}


				} finally { DebugExitDecision(76); }
				switch ( alt76 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:438:25: '&' equality_expression
					{
					DebugLocation(438, 25);
					char_literal263=(IToken)Match(input,28,Follow._28_in_and_expression1755); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal263_tree = (object)adaptor.Create(char_literal263, retval);
					adaptor.AddChild(root_0, char_literal263_tree);
					}
					DebugLocation(438, 29);
					PushFollow(Follow._equality_expression_in_and_expression1757);
					equality_expression264=equality_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equality_expression264.Tree, equality_expression264, retval);

					}
					break;

				default:
					goto loop76;
				}
			}

			loop76:
				;

			} finally { DebugExitSubRule(76); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expression", 61);
			LeaveRule("and_expression", 61);
			LeaveRule_and_expression();
			if (state.backtracking > 0) { Memoize(input, 61, and_expression_StartIndex); }

		}
		DebugLocation(439, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expression"); }
		return retval;

	}
	// $ANTLR end "and_expression"

	partial void EnterRule_equality_expression();
	partial void LeaveRule_equality_expression();

	// $ANTLR start "equality_expression"
	// C.g:440:1: equality_expression : relational_expression ( ( '==' | '!=' ) relational_expression )* ;
	[GrammarRule("equality_expression")]
	public XAstParserRuleReturnScope equality_expression()
	{
		EnterRule_equality_expression();
		EnterRule("equality_expression", 62);
		var retval = new XAstParserRuleReturnScope("equality_expression");
		
		retval.Start = (IToken)input.LT(1);
		int equality_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set266 = default(IToken);
		XAstParserRuleReturnScope relational_expression265 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope relational_expression267 = default(XAstParserRuleReturnScope);

		object set266_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "equality_expression");
		DebugLocation(440, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// C.g:441:2: ( relational_expression ( ( '==' | '!=' ) relational_expression )* )
			DebugEnterAlt(1);
			// C.g:441:4: relational_expression ( ( '==' | '!=' ) relational_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(441, 4);
			PushFollow(Follow._relational_expression_in_equality_expression1769);
			relational_expression265=relational_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, relational_expression265.Tree, relational_expression265, retval);
			DebugLocation(441, 26);
			// C.g:441:26: ( ( '==' | '!=' ) relational_expression )*
			try { DebugEnterSubRule(77);
			while (true)
			{
				int alt77=2;
				try { DebugEnterDecision(77, false);
				int LA77_0 = input.LA(1);

				if ((LA77_0==24||LA77_0==53))
				{
					alt77 = 1;
				}


				} finally { DebugExitDecision(77); }
				switch ( alt77 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:441:27: ( '==' | '!=' ) relational_expression
					{
					DebugLocation(441, 27);

					set266=(IToken)input.LT(1);
					if (input.LA(1)==24||input.LA(1)==53)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set266, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(441, 39);
					PushFollow(Follow._relational_expression_in_equality_expression1778);
					relational_expression267=relational_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, relational_expression267.Tree, relational_expression267, retval);

					}
					break;

				default:
					goto loop77;
				}
			}

			loop77:
				;

			} finally { DebugExitSubRule(77); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equality_expression", 62);
			LeaveRule("equality_expression", 62);
			LeaveRule_equality_expression();
			if (state.backtracking > 0) { Memoize(input, 62, equality_expression_StartIndex); }

		}
		DebugLocation(442, 1);
		} finally { DebugExitRule(GrammarFileName, "equality_expression"); }
		return retval;

	}
	// $ANTLR end "equality_expression"

	partial void EnterRule_relational_expression();
	partial void LeaveRule_relational_expression();

	// $ANTLR start "relational_expression"
	// C.g:444:1: relational_expression : shift_expression ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* ;
	[GrammarRule("relational_expression")]
	public XAstParserRuleReturnScope relational_expression()
	{
		EnterRule_relational_expression();
		EnterRule("relational_expression", 63);
		var retval = new XAstParserRuleReturnScope("relational_expression");
		
		retval.Start = (IToken)input.LT(1);
		int relational_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set269 = default(IToken);
		XAstParserRuleReturnScope shift_expression268 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope shift_expression270 = default(XAstParserRuleReturnScope);

		object set269_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "relational_expression");
		DebugLocation(444, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// C.g:445:2: ( shift_expression ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* )
			DebugEnterAlt(1);
			// C.g:445:4: shift_expression ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(445, 4);
			PushFollow(Follow._shift_expression_in_relational_expression1791);
			shift_expression268=shift_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expression268.Tree, shift_expression268, retval);
			DebugLocation(445, 21);
			// C.g:445:21: ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=2;
				try { DebugEnterDecision(78, false);
				int LA78_0 = input.LA(1);

				if ((LA78_0==48||LA78_0==51||(LA78_0>=54 && LA78_0<=55)))
				{
					alt78 = 1;
				}


				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:445:22: ( '<' | '>' | '<=' | '>=' ) shift_expression
					{
					DebugLocation(445, 22);

					set269=(IToken)input.LT(1);
					if (input.LA(1)==48||input.LA(1)==51||(input.LA(1)>=54 && input.LA(1)<=55))
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set269, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(445, 42);
					PushFollow(Follow._shift_expression_in_relational_expression1804);
					shift_expression270=shift_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expression270.Tree, shift_expression270, retval);

					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relational_expression", 63);
			LeaveRule("relational_expression", 63);
			LeaveRule_relational_expression();
			if (state.backtracking > 0) { Memoize(input, 63, relational_expression_StartIndex); }

		}
		DebugLocation(446, 1);
		} finally { DebugExitRule(GrammarFileName, "relational_expression"); }
		return retval;

	}
	// $ANTLR end "relational_expression"

	partial void EnterRule_shift_expression();
	partial void LeaveRule_shift_expression();

	// $ANTLR start "shift_expression"
	// C.g:448:1: shift_expression : additive_expression ( ( '<<' | '>>' ) additive_expression )* ;
	[GrammarRule("shift_expression")]
	public XAstParserRuleReturnScope shift_expression()
	{
		EnterRule_shift_expression();
		EnterRule("shift_expression", 64);
		var retval = new XAstParserRuleReturnScope("shift_expression");
		
		retval.Start = (IToken)input.LT(1);
		int shift_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set272 = default(IToken);
		XAstParserRuleReturnScope additive_expression271 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope additive_expression273 = default(XAstParserRuleReturnScope);

		object set272_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "shift_expression");
		DebugLocation(448, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// C.g:449:2: ( additive_expression ( ( '<<' | '>>' ) additive_expression )* )
			DebugEnterAlt(1);
			// C.g:449:4: additive_expression ( ( '<<' | '>>' ) additive_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(449, 4);
			PushFollow(Follow._additive_expression_in_shift_expression1817);
			additive_expression271=additive_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, additive_expression271.Tree, additive_expression271, retval);
			DebugLocation(449, 24);
			// C.g:449:24: ( ( '<<' | '>>' ) additive_expression )*
			try { DebugEnterSubRule(79);
			while (true)
			{
				int alt79=2;
				try { DebugEnterDecision(79, false);
				int LA79_0 = input.LA(1);

				if ((LA79_0==49||LA79_0==56))
				{
					alt79 = 1;
				}


				} finally { DebugExitDecision(79); }
				switch ( alt79 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:449:25: ( '<<' | '>>' ) additive_expression
					{
					DebugLocation(449, 25);

					set272=(IToken)input.LT(1);
					if (input.LA(1)==49||input.LA(1)==56)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set272, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(449, 37);
					PushFollow(Follow._additive_expression_in_shift_expression1826);
					additive_expression273=additive_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, additive_expression273.Tree, additive_expression273, retval);

					}
					break;

				default:
					goto loop79;
				}
			}

			loop79:
				;

			} finally { DebugExitSubRule(79); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expression", 64);
			LeaveRule("shift_expression", 64);
			LeaveRule_shift_expression();
			if (state.backtracking > 0) { Memoize(input, 64, shift_expression_StartIndex); }

		}
		DebugLocation(450, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expression"); }
		return retval;

	}
	// $ANTLR end "shift_expression"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// C.g:454:1: statement : ( labeled_statement | compound_statement | expression_statement | selection_statement | iteration_statement | jump_statement );
	[GrammarRule("statement")]
	public XAstParserRuleReturnScope statement()
	{
		EnterRule_statement();
		EnterRule("statement", 65);
		var retval = new XAstParserRuleReturnScope("statement");
		
		retval.Start = (IToken)input.LT(1);
		int statement_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope labeled_statement274 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope compound_statement275 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_statement276 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope selection_statement277 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope iteration_statement278 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope jump_statement279 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(454, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// C.g:455:2: ( labeled_statement | compound_statement | expression_statement | selection_statement | iteration_statement | jump_statement )
			int alt80=6;
			try { DebugEnterDecision(80, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				int LA80_1 = input.LA(2);

				if ((LA80_1==46))
				{
					alt80 = 1;
				}
				else if (((LA80_1>=24 && LA80_1<=30)||(LA80_1>=32 && LA80_1<=42)||(LA80_1>=44 && LA80_1<=45)||(LA80_1>=47 && LA80_1<=59)||(LA80_1>=61 && LA80_1<=62)||(LA80_1>=108 && LA80_1<=110)))
				{
					alt80 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 80, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 74:
			case 78:
				{
				alt80 = 1;
				}
				break;
			case 107:
				{
				alt80 = 2;
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
			case 23:
			case 28:
			case 30:
			case 32:
			case 34:
			case 35:
			case 38:
			case 39:
			case 47:
			case 63:
			case 65:
			case 66:
			case 68:
			case 96:
			case 112:
				{
				alt80 = 3;
				}
				break;
			case 87:
			case 99:
				{
				alt80 = 4;
				}
				break;
			case 79:
			case 85:
			case 106:
				{
				alt80 = 5;
				}
				break;
			case 73:
			case 77:
			case 86:
			case 93:
				{
				alt80 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 80, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:455:4: labeled_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(455, 4);
				PushFollow(Follow._labeled_statement_in_statement1841);
				labeled_statement274=labeled_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, labeled_statement274.Tree, labeled_statement274, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:456:4: compound_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(456, 4);
				PushFollow(Follow._compound_statement_in_statement1846);
				compound_statement275=compound_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, compound_statement275.Tree, compound_statement275, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:457:4: expression_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(457, 4);
				PushFollow(Follow._expression_statement_in_statement1851);
				expression_statement276=expression_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_statement276.Tree, expression_statement276, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:458:4: selection_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(458, 4);
				PushFollow(Follow._selection_statement_in_statement1856);
				selection_statement277=selection_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selection_statement277.Tree, selection_statement277, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:459:4: iteration_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(459, 4);
				PushFollow(Follow._iteration_statement_in_statement1861);
				iteration_statement278=iteration_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, iteration_statement278.Tree, iteration_statement278, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:460:4: jump_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(460, 4);
				PushFollow(Follow._jump_statement_in_statement1866);
				jump_statement279=jump_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, jump_statement279.Tree, jump_statement279, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 65);
			LeaveRule("statement", 65);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 65, statement_StartIndex); }

		}
		DebugLocation(461, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_labeled_statement();
	partial void LeaveRule_labeled_statement();

	// $ANTLR start "labeled_statement"
	// C.g:463:1: labeled_statement : ( IDENTIFIER ':' statement | 'case' constant_expression ':' statement | 'default' ':' statement );
	[GrammarRule("labeled_statement")]
	public XAstParserRuleReturnScope labeled_statement()
	{
		EnterRule_labeled_statement();
		EnterRule("labeled_statement", 66);
		var retval = new XAstParserRuleReturnScope("labeled_statement");
		
		retval.Start = (IToken)input.LT(1);
		int labeled_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER280 = default(IToken);
		IToken char_literal281 = default(IToken);
		IToken string_literal283 = default(IToken);
		IToken char_literal285 = default(IToken);
		IToken string_literal287 = default(IToken);
		IToken char_literal288 = default(IToken);
		XAstParserRuleReturnScope statement282 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression284 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement286 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement289 = default(XAstParserRuleReturnScope);

		object IDENTIFIER280_tree = default(object);
		object char_literal281_tree = default(object);
		object string_literal283_tree = default(object);
		object char_literal285_tree = default(object);
		object string_literal287_tree = default(object);
		object char_literal288_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "labeled_statement");
		DebugLocation(463, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }

			// C.g:464:2: ( IDENTIFIER ':' statement | 'case' constant_expression ':' statement | 'default' ':' statement )
			int alt81=3;
			try { DebugEnterDecision(81, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				alt81 = 1;
				}
				break;
			case 74:
				{
				alt81 = 2;
				}
				break;
			case 78:
				{
				alt81 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 81, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:464:4: IDENTIFIER ':' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(464, 4);
				IDENTIFIER280=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_labeled_statement1877), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER280_tree = (object)adaptor.Create(IDENTIFIER280, retval);
				adaptor.AddChild(root_0, IDENTIFIER280_tree);
				}
				DebugLocation(464, 15);
				char_literal281=(IToken)Match(input,46,Follow._46_in_labeled_statement1879); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal281_tree = (object)adaptor.Create(char_literal281, retval);
				adaptor.AddChild(root_0, char_literal281_tree);
				}
				DebugLocation(464, 19);
				PushFollow(Follow._statement_in_labeled_statement1881);
				statement282=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement282.Tree, statement282, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:465:4: 'case' constant_expression ':' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(465, 4);
				string_literal283=(IToken)Match(input,74,Follow._74_in_labeled_statement1886); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal283_tree = (object)adaptor.Create(string_literal283, retval);
				adaptor.AddChild(root_0, string_literal283_tree);
				}
				DebugLocation(465, 11);
				PushFollow(Follow._constant_expression_in_labeled_statement1888);
				constant_expression284=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression284.Tree, constant_expression284, retval);
				DebugLocation(465, 31);
				char_literal285=(IToken)Match(input,46,Follow._46_in_labeled_statement1890); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal285_tree = (object)adaptor.Create(char_literal285, retval);
				adaptor.AddChild(root_0, char_literal285_tree);
				}
				DebugLocation(465, 35);
				PushFollow(Follow._statement_in_labeled_statement1892);
				statement286=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement286.Tree, statement286, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:466:4: 'default' ':' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(466, 4);
				string_literal287=(IToken)Match(input,78,Follow._78_in_labeled_statement1897); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal287_tree = (object)adaptor.Create(string_literal287, retval);
				adaptor.AddChild(root_0, string_literal287_tree);
				}
				DebugLocation(466, 14);
				char_literal288=(IToken)Match(input,46,Follow._46_in_labeled_statement1899); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal288_tree = (object)adaptor.Create(char_literal288, retval);
				adaptor.AddChild(root_0, char_literal288_tree);
				}
				DebugLocation(466, 18);
				PushFollow(Follow._statement_in_labeled_statement1901);
				statement289=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement289.Tree, statement289, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("labeled_statement", 66);
			LeaveRule("labeled_statement", 66);
			LeaveRule_labeled_statement();
			if (state.backtracking > 0) { Memoize(input, 66, labeled_statement_StartIndex); }

		}
		DebugLocation(467, 1);
		} finally { DebugExitRule(GrammarFileName, "labeled_statement"); }
		return retval;

	}
	// $ANTLR end "labeled_statement"

	partial void EnterRule_compound_statement();
	partial void LeaveRule_compound_statement();

	// $ANTLR start "compound_statement"
	// C.g:469:1: compound_statement : '{' ( declaration )* ( statement_list )? '}' ;
	[GrammarRule("compound_statement")]
	public XAstParserRuleReturnScope compound_statement()
	{
		EnterRule_compound_statement();
		EnterRule("compound_statement", 67);
		var retval = new XAstParserRuleReturnScope("compound_statement");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int compound_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal290 = default(IToken);
		IToken char_literal293 = default(IToken);
		XAstParserRuleReturnScope declaration291 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement_list292 = default(XAstParserRuleReturnScope);

		object char_literal290_tree = default(object);
		object char_literal293_tree = default(object);

		  Symbols_stack.Peek().types =  new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "compound_statement");
		DebugLocation(469, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return retval; }

			// C.g:474:2: ( '{' ( declaration )* ( statement_list )? '}' )
			DebugEnterAlt(1);
			// C.g:474:4: '{' ( declaration )* ( statement_list )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(474, 4);
			char_literal290=(IToken)Match(input,107,Follow._107_in_compound_statement1923); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal290_tree = (object)adaptor.Create(char_literal290, retval);
			adaptor.AddChild(root_0, char_literal290_tree);
			}
			DebugLocation(474, 8);
			// C.g:474:8: ( declaration )*
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, false);
				try
				{
					alt82 = dfa82.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(82); }
				switch ( alt82 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:474:8: declaration
					{
					DebugLocation(474, 8);
					PushFollow(Follow._declaration_in_compound_statement1925);
					declaration291=declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declaration291.Tree, declaration291, retval);

					}
					break;

				default:
					goto loop82;
				}
			}

			loop82:
				;

			} finally { DebugExitSubRule(82); }

			DebugLocation(474, 21);
			// C.g:474:21: ( statement_list )?
			int alt83=2;
			try { DebugEnterSubRule(83);
			try { DebugEnterDecision(83, false);
			int LA83_0 = input.LA(1);

			if ((LA83_0==CHARACTER_LITERAL||LA83_0==DECIMAL_LITERAL||LA83_0==FLOATING_POINT_LITERAL||LA83_0==HEX_LITERAL||LA83_0==IDENTIFIER||LA83_0==OCTAL_LITERAL||LA83_0==STRING_LITERAL||LA83_0==23||LA83_0==28||LA83_0==30||LA83_0==32||(LA83_0>=34 && LA83_0<=35)||(LA83_0>=38 && LA83_0<=39)||LA83_0==47||LA83_0==63||(LA83_0>=65 && LA83_0<=66)||LA83_0==68||(LA83_0>=73 && LA83_0<=74)||(LA83_0>=77 && LA83_0<=79)||(LA83_0>=85 && LA83_0<=87)||LA83_0==93||LA83_0==96||LA83_0==99||(LA83_0>=106 && LA83_0<=107)||LA83_0==112))
			{
				alt83 = 1;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:474:21: statement_list
				{
				DebugLocation(474, 21);
				PushFollow(Follow._statement_list_in_compound_statement1928);
				statement_list292=statement_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement_list292.Tree, statement_list292, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(83); }

			DebugLocation(474, 37);
			char_literal293=(IToken)Match(input,111,Follow._111_in_compound_statement1931); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal293_tree = (object)adaptor.Create(char_literal293, retval);
			adaptor.AddChild(root_0, char_literal293_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("compound_statement", 67);
			LeaveRule("compound_statement", 67);
			LeaveRule_compound_statement();
			if (state.backtracking > 0) { Memoize(input, 67, compound_statement_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(475, 1);
		} finally { DebugExitRule(GrammarFileName, "compound_statement"); }
		return retval;

	}
	// $ANTLR end "compound_statement"

	partial void EnterRule_statement_list();
	partial void LeaveRule_statement_list();

	// $ANTLR start "statement_list"
	// C.g:477:1: statement_list : ( statement )+ ;
	[GrammarRule("statement_list")]
	public XAstParserRuleReturnScope statement_list()
	{
		EnterRule_statement_list();
		EnterRule("statement_list", 68);
		var retval = new XAstParserRuleReturnScope("statement_list");
		
		retval.Start = (IToken)input.LT(1);
		int statement_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope statement294 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "statement_list");
		DebugLocation(477, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return retval; }

			// C.g:478:2: ( ( statement )+ )
			DebugEnterAlt(1);
			// C.g:478:4: ( statement )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(478, 4);
			// C.g:478:4: ( statement )+
			int cnt84=0;
			try { DebugEnterSubRule(84);
			while (true)
			{
				int alt84=2;
				try { DebugEnterDecision(84, false);
				int LA84_0 = input.LA(1);

				if ((LA84_0==CHARACTER_LITERAL||LA84_0==DECIMAL_LITERAL||LA84_0==FLOATING_POINT_LITERAL||LA84_0==HEX_LITERAL||LA84_0==IDENTIFIER||LA84_0==OCTAL_LITERAL||LA84_0==STRING_LITERAL||LA84_0==23||LA84_0==28||LA84_0==30||LA84_0==32||(LA84_0>=34 && LA84_0<=35)||(LA84_0>=38 && LA84_0<=39)||LA84_0==47||LA84_0==63||(LA84_0>=65 && LA84_0<=66)||LA84_0==68||(LA84_0>=73 && LA84_0<=74)||(LA84_0>=77 && LA84_0<=79)||(LA84_0>=85 && LA84_0<=87)||LA84_0==93||LA84_0==96||LA84_0==99||(LA84_0>=106 && LA84_0<=107)||LA84_0==112))
				{
					alt84 = 1;
				}


				} finally { DebugExitDecision(84); }
				switch (alt84)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:478:4: statement
					{
					DebugLocation(478, 4);
					PushFollow(Follow._statement_in_statement_list1942);
					statement294=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement294.Tree, statement294, retval);

					}
					break;

				default:
					if (cnt84 >= 1)
						goto loop84;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee84 = new EarlyExitException( 84, input );
					DebugRecognitionException(eee84);
					throw eee84;
				}
				cnt84++;
			}
			loop84:
				;

			} finally { DebugExitSubRule(84); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement_list", 68);
			LeaveRule("statement_list", 68);
			LeaveRule_statement_list();
			if (state.backtracking > 0) { Memoize(input, 68, statement_list_StartIndex); }

		}
		DebugLocation(479, 1);
		} finally { DebugExitRule(GrammarFileName, "statement_list"); }
		return retval;

	}
	// $ANTLR end "statement_list"

	partial void EnterRule_expression_statement();
	partial void LeaveRule_expression_statement();

	// $ANTLR start "expression_statement"
	// C.g:481:1: expression_statement : ( ';' | expression ';' );
	[GrammarRule("expression_statement")]
	public XAstParserRuleReturnScope expression_statement()
	{
		EnterRule_expression_statement();
		EnterRule("expression_statement", 69);
		var retval = new XAstParserRuleReturnScope("expression_statement");
		
		retval.Start = (IToken)input.LT(1);
		int expression_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal295 = default(IToken);
		IToken char_literal297 = default(IToken);
		XAstParserRuleReturnScope expression296 = default(XAstParserRuleReturnScope);

		object char_literal295_tree = default(object);
		object char_literal297_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expression_statement");
		DebugLocation(481, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return retval; }

			// C.g:482:2: ( ';' | expression ';' )
			int alt85=2;
			try { DebugEnterDecision(85, false);
			int LA85_0 = input.LA(1);

			if ((LA85_0==47))
			{
				alt85 = 1;
			}
			else if ((LA85_0==CHARACTER_LITERAL||LA85_0==DECIMAL_LITERAL||LA85_0==FLOATING_POINT_LITERAL||LA85_0==HEX_LITERAL||LA85_0==IDENTIFIER||LA85_0==OCTAL_LITERAL||LA85_0==STRING_LITERAL||LA85_0==23||LA85_0==28||LA85_0==30||LA85_0==32||(LA85_0>=34 && LA85_0<=35)||(LA85_0>=38 && LA85_0<=39)||LA85_0==63||(LA85_0>=65 && LA85_0<=66)||LA85_0==68||LA85_0==96||LA85_0==112))
			{
				alt85 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 85, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:482:4: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(482, 4);
				char_literal295=(IToken)Match(input,47,Follow._47_in_expression_statement1954); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal295_tree = (object)adaptor.Create(char_literal295, retval);
				adaptor.AddChild(root_0, char_literal295_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:483:4: expression ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(483, 4);
				PushFollow(Follow._expression_in_expression_statement1959);
				expression296=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression296.Tree, expression296, retval);
				DebugLocation(483, 15);
				char_literal297=(IToken)Match(input,47,Follow._47_in_expression_statement1961); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal297_tree = (object)adaptor.Create(char_literal297, retval);
				adaptor.AddChild(root_0, char_literal297_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_statement", 69);
			LeaveRule("expression_statement", 69);
			LeaveRule_expression_statement();
			if (state.backtracking > 0) { Memoize(input, 69, expression_statement_StartIndex); }

		}
		DebugLocation(484, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_statement"); }
		return retval;

	}
	// $ANTLR end "expression_statement"

	partial void EnterRule_selection_statement();
	partial void LeaveRule_selection_statement();

	// $ANTLR start "selection_statement"
	// C.g:486:1: selection_statement : ( 'if' '(' expression ')' statement ( options {k=1; backtrack=false; } : 'else' statement )? | 'switch' '(' expression ')' statement );
	[GrammarRule("selection_statement")]
	public XAstParserRuleReturnScope selection_statement()
	{
		EnterRule_selection_statement();
		EnterRule("selection_statement", 70);
		var retval = new XAstParserRuleReturnScope("selection_statement");
		
		retval.Start = (IToken)input.LT(1);
		int selection_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal298 = default(IToken);
		IToken char_literal299 = default(IToken);
		IToken char_literal301 = default(IToken);
		IToken string_literal303 = default(IToken);
		IToken string_literal305 = default(IToken);
		IToken char_literal306 = default(IToken);
		IToken char_literal308 = default(IToken);
		XAstParserRuleReturnScope expression300 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement302 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement304 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression307 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement309 = default(XAstParserRuleReturnScope);

		object string_literal298_tree = default(object);
		object char_literal299_tree = default(object);
		object char_literal301_tree = default(object);
		object string_literal303_tree = default(object);
		object string_literal305_tree = default(object);
		object char_literal306_tree = default(object);
		object char_literal308_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "selection_statement");
		DebugLocation(486, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return retval; }

			// C.g:487:2: ( 'if' '(' expression ')' statement ( options {k=1; backtrack=false; } : 'else' statement )? | 'switch' '(' expression ')' statement )
			int alt87=2;
			try { DebugEnterDecision(87, false);
			int LA87_0 = input.LA(1);

			if ((LA87_0==87))
			{
				alt87 = 1;
			}
			else if ((LA87_0==99))
			{
				alt87 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 87, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:487:4: 'if' '(' expression ')' statement ( options {k=1; backtrack=false; } : 'else' statement )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(487, 4);
				string_literal298=(IToken)Match(input,87,Follow._87_in_selection_statement1972); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal298_tree = (object)adaptor.Create(string_literal298, retval);
				adaptor.AddChild(root_0, string_literal298_tree);
				}
				DebugLocation(487, 9);
				char_literal299=(IToken)Match(input,30,Follow._30_in_selection_statement1974); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal299_tree = (object)adaptor.Create(char_literal299, retval);
				adaptor.AddChild(root_0, char_literal299_tree);
				}
				DebugLocation(487, 13);
				PushFollow(Follow._expression_in_selection_statement1976);
				expression300=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression300.Tree, expression300, retval);
				DebugLocation(487, 24);
				char_literal301=(IToken)Match(input,31,Follow._31_in_selection_statement1978); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal301_tree = (object)adaptor.Create(char_literal301, retval);
				adaptor.AddChild(root_0, char_literal301_tree);
				}
				DebugLocation(487, 28);
				PushFollow(Follow._statement_in_selection_statement1980);
				statement302=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement302.Tree, statement302, retval);
				DebugLocation(487, 38);
				// C.g:487:38: ( options {k=1; backtrack=false; } : 'else' statement )?
				int alt86=2;
				try { DebugEnterSubRule(86);
				try { DebugEnterDecision(86, false);
				int LA86_0 = input.LA(1);

				if ((LA86_0==81))
				{
					int LA86_1 = input.LA(2);

					if ((true))
					{
						alt86 = 1;
					}
				}
				} finally { DebugExitDecision(86); }
				switch (alt86)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:487:71: 'else' statement
					{
					DebugLocation(487, 71);
					string_literal303=(IToken)Match(input,81,Follow._81_in_selection_statement1995); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal303_tree = (object)adaptor.Create(string_literal303, retval);
					adaptor.AddChild(root_0, string_literal303_tree);
					}
					DebugLocation(487, 78);
					PushFollow(Follow._statement_in_selection_statement1997);
					statement304=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement304.Tree, statement304, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(86); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:488:4: 'switch' '(' expression ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(488, 4);
				string_literal305=(IToken)Match(input,99,Follow._99_in_selection_statement2004); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal305_tree = (object)adaptor.Create(string_literal305, retval);
				adaptor.AddChild(root_0, string_literal305_tree);
				}
				DebugLocation(488, 13);
				char_literal306=(IToken)Match(input,30,Follow._30_in_selection_statement2006); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal306_tree = (object)adaptor.Create(char_literal306, retval);
				adaptor.AddChild(root_0, char_literal306_tree);
				}
				DebugLocation(488, 17);
				PushFollow(Follow._expression_in_selection_statement2008);
				expression307=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression307.Tree, expression307, retval);
				DebugLocation(488, 28);
				char_literal308=(IToken)Match(input,31,Follow._31_in_selection_statement2010); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal308_tree = (object)adaptor.Create(char_literal308, retval);
				adaptor.AddChild(root_0, char_literal308_tree);
				}
				DebugLocation(488, 32);
				PushFollow(Follow._statement_in_selection_statement2012);
				statement309=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement309.Tree, statement309, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selection_statement", 70);
			LeaveRule("selection_statement", 70);
			LeaveRule_selection_statement();
			if (state.backtracking > 0) { Memoize(input, 70, selection_statement_StartIndex); }

		}
		DebugLocation(489, 1);
		} finally { DebugExitRule(GrammarFileName, "selection_statement"); }
		return retval;

	}
	// $ANTLR end "selection_statement"

	partial void EnterRule_iteration_statement();
	partial void LeaveRule_iteration_statement();

	// $ANTLR start "iteration_statement"
	// C.g:491:1: iteration_statement : ( 'while' '(' expression ')' statement | 'do' statement 'while' '(' expression ')' ';' | 'for' '(' expression_statement expression_statement ( expression )? ')' statement );
	[GrammarRule("iteration_statement")]
	public XAstParserRuleReturnScope iteration_statement()
	{
		EnterRule_iteration_statement();
		EnterRule("iteration_statement", 71);
		var retval = new XAstParserRuleReturnScope("iteration_statement");
		
		retval.Start = (IToken)input.LT(1);
		int iteration_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal310 = default(IToken);
		IToken char_literal311 = default(IToken);
		IToken char_literal313 = default(IToken);
		IToken string_literal315 = default(IToken);
		IToken string_literal317 = default(IToken);
		IToken char_literal318 = default(IToken);
		IToken char_literal320 = default(IToken);
		IToken char_literal321 = default(IToken);
		IToken string_literal322 = default(IToken);
		IToken char_literal323 = default(IToken);
		IToken char_literal327 = default(IToken);
		XAstParserRuleReturnScope expression312 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement314 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement316 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression319 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_statement324 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_statement325 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression326 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement328 = default(XAstParserRuleReturnScope);

		object string_literal310_tree = default(object);
		object char_literal311_tree = default(object);
		object char_literal313_tree = default(object);
		object string_literal315_tree = default(object);
		object string_literal317_tree = default(object);
		object char_literal318_tree = default(object);
		object char_literal320_tree = default(object);
		object char_literal321_tree = default(object);
		object string_literal322_tree = default(object);
		object char_literal323_tree = default(object);
		object char_literal327_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "iteration_statement");
		DebugLocation(491, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return retval; }

			// C.g:492:2: ( 'while' '(' expression ')' statement | 'do' statement 'while' '(' expression ')' ';' | 'for' '(' expression_statement expression_statement ( expression )? ')' statement )
			int alt89=3;
			try { DebugEnterDecision(89, false);
			switch (input.LA(1))
			{
			case 106:
				{
				alt89 = 1;
				}
				break;
			case 79:
				{
				alt89 = 2;
				}
				break;
			case 85:
				{
				alt89 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(89); }
			switch (alt89)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:492:4: 'while' '(' expression ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(492, 4);
				string_literal310=(IToken)Match(input,106,Follow._106_in_iteration_statement2023); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal310_tree = (object)adaptor.Create(string_literal310, retval);
				adaptor.AddChild(root_0, string_literal310_tree);
				}
				DebugLocation(492, 12);
				char_literal311=(IToken)Match(input,30,Follow._30_in_iteration_statement2025); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal311_tree = (object)adaptor.Create(char_literal311, retval);
				adaptor.AddChild(root_0, char_literal311_tree);
				}
				DebugLocation(492, 16);
				PushFollow(Follow._expression_in_iteration_statement2027);
				expression312=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression312.Tree, expression312, retval);
				DebugLocation(492, 27);
				char_literal313=(IToken)Match(input,31,Follow._31_in_iteration_statement2029); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal313_tree = (object)adaptor.Create(char_literal313, retval);
				adaptor.AddChild(root_0, char_literal313_tree);
				}
				DebugLocation(492, 31);
				PushFollow(Follow._statement_in_iteration_statement2031);
				statement314=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement314.Tree, statement314, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:493:4: 'do' statement 'while' '(' expression ')' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(493, 4);
				string_literal315=(IToken)Match(input,79,Follow._79_in_iteration_statement2036); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal315_tree = (object)adaptor.Create(string_literal315, retval);
				adaptor.AddChild(root_0, string_literal315_tree);
				}
				DebugLocation(493, 9);
				PushFollow(Follow._statement_in_iteration_statement2038);
				statement316=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement316.Tree, statement316, retval);
				DebugLocation(493, 19);
				string_literal317=(IToken)Match(input,106,Follow._106_in_iteration_statement2040); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal317_tree = (object)adaptor.Create(string_literal317, retval);
				adaptor.AddChild(root_0, string_literal317_tree);
				}
				DebugLocation(493, 27);
				char_literal318=(IToken)Match(input,30,Follow._30_in_iteration_statement2042); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal318_tree = (object)adaptor.Create(char_literal318, retval);
				adaptor.AddChild(root_0, char_literal318_tree);
				}
				DebugLocation(493, 31);
				PushFollow(Follow._expression_in_iteration_statement2044);
				expression319=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression319.Tree, expression319, retval);
				DebugLocation(493, 42);
				char_literal320=(IToken)Match(input,31,Follow._31_in_iteration_statement2046); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal320_tree = (object)adaptor.Create(char_literal320, retval);
				adaptor.AddChild(root_0, char_literal320_tree);
				}
				DebugLocation(493, 46);
				char_literal321=(IToken)Match(input,47,Follow._47_in_iteration_statement2048); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal321_tree = (object)adaptor.Create(char_literal321, retval);
				adaptor.AddChild(root_0, char_literal321_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:494:4: 'for' '(' expression_statement expression_statement ( expression )? ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(494, 4);
				string_literal322=(IToken)Match(input,85,Follow._85_in_iteration_statement2053); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal322_tree = (object)adaptor.Create(string_literal322, retval);
				adaptor.AddChild(root_0, string_literal322_tree);
				}
				DebugLocation(494, 10);
				char_literal323=(IToken)Match(input,30,Follow._30_in_iteration_statement2055); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal323_tree = (object)adaptor.Create(char_literal323, retval);
				adaptor.AddChild(root_0, char_literal323_tree);
				}
				DebugLocation(494, 14);
				PushFollow(Follow._expression_statement_in_iteration_statement2057);
				expression_statement324=expression_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_statement324.Tree, expression_statement324, retval);
				DebugLocation(494, 35);
				PushFollow(Follow._expression_statement_in_iteration_statement2059);
				expression_statement325=expression_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_statement325.Tree, expression_statement325, retval);
				DebugLocation(494, 56);
				// C.g:494:56: ( expression )?
				int alt88=2;
				try { DebugEnterSubRule(88);
				try { DebugEnterDecision(88, false);
				int LA88_0 = input.LA(1);

				if ((LA88_0==CHARACTER_LITERAL||LA88_0==DECIMAL_LITERAL||LA88_0==FLOATING_POINT_LITERAL||LA88_0==HEX_LITERAL||LA88_0==IDENTIFIER||LA88_0==OCTAL_LITERAL||LA88_0==STRING_LITERAL||LA88_0==23||LA88_0==28||LA88_0==30||LA88_0==32||(LA88_0>=34 && LA88_0<=35)||(LA88_0>=38 && LA88_0<=39)||LA88_0==63||(LA88_0>=65 && LA88_0<=66)||LA88_0==68||LA88_0==96||LA88_0==112))
				{
					alt88 = 1;
				}
				} finally { DebugExitDecision(88); }
				switch (alt88)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:494:56: expression
					{
					DebugLocation(494, 56);
					PushFollow(Follow._expression_in_iteration_statement2061);
					expression326=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression326.Tree, expression326, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(88); }

				DebugLocation(494, 68);
				char_literal327=(IToken)Match(input,31,Follow._31_in_iteration_statement2064); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal327_tree = (object)adaptor.Create(char_literal327, retval);
				adaptor.AddChild(root_0, char_literal327_tree);
				}
				DebugLocation(494, 72);
				PushFollow(Follow._statement_in_iteration_statement2066);
				statement328=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement328.Tree, statement328, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("iteration_statement", 71);
			LeaveRule("iteration_statement", 71);
			LeaveRule_iteration_statement();
			if (state.backtracking > 0) { Memoize(input, 71, iteration_statement_StartIndex); }

		}
		DebugLocation(495, 1);
		} finally { DebugExitRule(GrammarFileName, "iteration_statement"); }
		return retval;

	}
	// $ANTLR end "iteration_statement"

	partial void EnterRule_jump_statement();
	partial void LeaveRule_jump_statement();

	// $ANTLR start "jump_statement"
	// C.g:497:1: jump_statement : ( 'goto' IDENTIFIER ';' | 'continue' ';' | 'break' ';' | 'return' ';' | 'return' expression ';' );
	[GrammarRule("jump_statement")]
	public XAstParserRuleReturnScope jump_statement()
	{
		EnterRule_jump_statement();
		EnterRule("jump_statement", 72);
		var retval = new XAstParserRuleReturnScope("jump_statement");
		
		retval.Start = (IToken)input.LT(1);
		int jump_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal329 = default(IToken);
		IToken IDENTIFIER330 = default(IToken);
		IToken char_literal331 = default(IToken);
		IToken string_literal332 = default(IToken);
		IToken char_literal333 = default(IToken);
		IToken string_literal334 = default(IToken);
		IToken char_literal335 = default(IToken);
		IToken string_literal336 = default(IToken);
		IToken char_literal337 = default(IToken);
		IToken string_literal338 = default(IToken);
		IToken char_literal340 = default(IToken);
		XAstParserRuleReturnScope expression339 = default(XAstParserRuleReturnScope);

		object string_literal329_tree = default(object);
		object IDENTIFIER330_tree = default(object);
		object char_literal331_tree = default(object);
		object string_literal332_tree = default(object);
		object char_literal333_tree = default(object);
		object string_literal334_tree = default(object);
		object char_literal335_tree = default(object);
		object string_literal336_tree = default(object);
		object char_literal337_tree = default(object);
		object string_literal338_tree = default(object);
		object char_literal340_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "jump_statement");
		DebugLocation(497, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return retval; }

			// C.g:498:2: ( 'goto' IDENTIFIER ';' | 'continue' ';' | 'break' ';' | 'return' ';' | 'return' expression ';' )
			int alt90=5;
			try { DebugEnterDecision(90, false);
			switch (input.LA(1))
			{
			case 86:
				{
				alt90 = 1;
				}
				break;
			case 77:
				{
				alt90 = 2;
				}
				break;
			case 73:
				{
				alt90 = 3;
				}
				break;
			case 93:
				{
				int LA90_4 = input.LA(2);

				if ((LA90_4==47))
				{
					alt90 = 4;
				}
				else if ((LA90_4==CHARACTER_LITERAL||LA90_4==DECIMAL_LITERAL||LA90_4==FLOATING_POINT_LITERAL||LA90_4==HEX_LITERAL||LA90_4==IDENTIFIER||LA90_4==OCTAL_LITERAL||LA90_4==STRING_LITERAL||LA90_4==23||LA90_4==28||LA90_4==30||LA90_4==32||(LA90_4>=34 && LA90_4<=35)||(LA90_4>=38 && LA90_4<=39)||LA90_4==63||(LA90_4>=65 && LA90_4<=66)||LA90_4==68||LA90_4==96||LA90_4==112))
				{
					alt90 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:498:4: 'goto' IDENTIFIER ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(498, 4);
				string_literal329=(IToken)Match(input,86,Follow._86_in_jump_statement2077); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal329_tree = (object)adaptor.Create(string_literal329, retval);
				adaptor.AddChild(root_0, string_literal329_tree);
				}
				DebugLocation(498, 11);
				IDENTIFIER330=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_jump_statement2079), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER330_tree = (object)adaptor.Create(IDENTIFIER330, retval);
				adaptor.AddChild(root_0, IDENTIFIER330_tree);
				}
				DebugLocation(498, 22);
				char_literal331=(IToken)Match(input,47,Follow._47_in_jump_statement2081); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal331_tree = (object)adaptor.Create(char_literal331, retval);
				adaptor.AddChild(root_0, char_literal331_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:499:4: 'continue' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(499, 4);
				string_literal332=(IToken)Match(input,77,Follow._77_in_jump_statement2086); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal332_tree = (object)adaptor.Create(string_literal332, retval);
				adaptor.AddChild(root_0, string_literal332_tree);
				}
				DebugLocation(499, 15);
				char_literal333=(IToken)Match(input,47,Follow._47_in_jump_statement2088); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal333_tree = (object)adaptor.Create(char_literal333, retval);
				adaptor.AddChild(root_0, char_literal333_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:500:4: 'break' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(500, 4);
				string_literal334=(IToken)Match(input,73,Follow._73_in_jump_statement2093); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal334_tree = (object)adaptor.Create(string_literal334, retval);
				adaptor.AddChild(root_0, string_literal334_tree);
				}
				DebugLocation(500, 12);
				char_literal335=(IToken)Match(input,47,Follow._47_in_jump_statement2095); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal335_tree = (object)adaptor.Create(char_literal335, retval);
				adaptor.AddChild(root_0, char_literal335_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:501:4: 'return' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(501, 4);
				string_literal336=(IToken)Match(input,93,Follow._93_in_jump_statement2100); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal336_tree = (object)adaptor.Create(string_literal336, retval);
				adaptor.AddChild(root_0, string_literal336_tree);
				}
				DebugLocation(501, 13);
				char_literal337=(IToken)Match(input,47,Follow._47_in_jump_statement2102); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal337_tree = (object)adaptor.Create(char_literal337, retval);
				adaptor.AddChild(root_0, char_literal337_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:502:4: 'return' expression ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(502, 4);
				string_literal338=(IToken)Match(input,93,Follow._93_in_jump_statement2107); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal338_tree = (object)adaptor.Create(string_literal338, retval);
				adaptor.AddChild(root_0, string_literal338_tree);
				}
				DebugLocation(502, 13);
				PushFollow(Follow._expression_in_jump_statement2109);
				expression339=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression339.Tree, expression339, retval);
				DebugLocation(502, 24);
				char_literal340=(IToken)Match(input,47,Follow._47_in_jump_statement2111); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal340_tree = (object)adaptor.Create(char_literal340, retval);
				adaptor.AddChild(root_0, char_literal340_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("jump_statement", 72);
			LeaveRule("jump_statement", 72);
			LeaveRule_jump_statement();
			if (state.backtracking > 0) { Memoize(input, 72, jump_statement_StartIndex); }

		}
		DebugLocation(503, 1);
		} finally { DebugExitRule(GrammarFileName, "jump_statement"); }
		return retval;

	}
	// $ANTLR end "jump_statement"

	partial void EnterRule_gcc_function_specifier();
	partial void LeaveRule_gcc_function_specifier();

	// $ANTLR start "gcc_function_specifier"
	// C.g:507:1: gcc_function_specifier : ( 'inline' | '__inline__' | '__inline' | '__builtin_va_list' );
	[GrammarRule("gcc_function_specifier")]
	public XAstParserRuleReturnScope gcc_function_specifier()
	{
		EnterRule_gcc_function_specifier();
		EnterRule("gcc_function_specifier", 73);
		var retval = new XAstParserRuleReturnScope("gcc_function_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_function_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set341 = default(IToken);

		object set341_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_function_specifier");
		DebugLocation(507, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return retval; }

			// C.g:508:2: ( 'inline' | '__inline__' | '__inline' | '__builtin_va_list' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(508, 2);

			set341=(IToken)input.LT(1);
			if (input.LA(1)==67||(input.LA(1)>=69 && input.LA(1)<=70)||input.LA(1)==88)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set341, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_function_specifier", 73);
			LeaveRule("gcc_function_specifier", 73);
			LeaveRule_gcc_function_specifier();
			if (state.backtracking > 0) { Memoize(input, 73, gcc_function_specifier_StartIndex); }

		}
		DebugLocation(512, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_function_specifier"); }
		return retval;

	}
	// $ANTLR end "gcc_function_specifier"

	partial void EnterRule_gcc_extension_specifier();
	partial void LeaveRule_gcc_extension_specifier();

	// $ANTLR start "gcc_extension_specifier"
	// C.g:514:1: gcc_extension_specifier : '__extension__' ;
	[GrammarRule("gcc_extension_specifier")]
	public XAstParserRuleReturnScope gcc_extension_specifier()
	{
		EnterRule_gcc_extension_specifier();
		EnterRule("gcc_extension_specifier", 74);
		var retval = new XAstParserRuleReturnScope("gcc_extension_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_extension_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal342 = default(IToken);

		object string_literal342_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_extension_specifier");
		DebugLocation(514, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return retval; }

			// C.g:515:2: ( '__extension__' )
			DebugEnterAlt(1);
			// C.g:515:4: '__extension__'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(515, 4);
			string_literal342=(IToken)Match(input,68,Follow._68_in_gcc_extension_specifier2150); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal342_tree = (object)adaptor.Create(string_literal342, retval);
			adaptor.AddChild(root_0, string_literal342_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_extension_specifier", 74);
			LeaveRule("gcc_extension_specifier", 74);
			LeaveRule_gcc_extension_specifier();
			if (state.backtracking > 0) { Memoize(input, 74, gcc_extension_specifier_StartIndex); }

		}
		DebugLocation(516, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_extension_specifier"); }
		return retval;

	}
	// $ANTLR end "gcc_extension_specifier"

	partial void EnterRule_gcc_declaration_specifier();
	partial void LeaveRule_gcc_declaration_specifier();

	// $ANTLR start "gcc_declaration_specifier"
	// C.g:518:1: gcc_declaration_specifier : ( gcc_attribute | gcc_extension_specifier );
	[GrammarRule("gcc_declaration_specifier")]
	public XAstParserRuleReturnScope gcc_declaration_specifier()
	{
		EnterRule_gcc_declaration_specifier();
		EnterRule("gcc_declaration_specifier", 75);
		var retval = new XAstParserRuleReturnScope("gcc_declaration_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_declaration_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope gcc_attribute343 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_extension_specifier344 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "gcc_declaration_specifier");
		DebugLocation(518, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 75)) { return retval; }

			// C.g:519:2: ( gcc_attribute | gcc_extension_specifier )
			int alt91=2;
			try { DebugEnterDecision(91, false);
			int LA91_0 = input.LA(1);

			if ((LA91_0==64))
			{
				alt91 = 1;
			}
			else if ((LA91_0==68))
			{
				alt91 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 91, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(91); }
			switch (alt91)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:519:4: gcc_attribute
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(519, 4);
				PushFollow(Follow._gcc_attribute_in_gcc_declaration_specifier2161);
				gcc_attribute343=gcc_attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute343.Tree, gcc_attribute343, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:520:4: gcc_extension_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(520, 4);
				PushFollow(Follow._gcc_extension_specifier_in_gcc_declaration_specifier2166);
				gcc_extension_specifier344=gcc_extension_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_extension_specifier344.Tree, gcc_extension_specifier344, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_declaration_specifier", 75);
			LeaveRule("gcc_declaration_specifier", 75);
			LeaveRule_gcc_declaration_specifier();
			if (state.backtracking > 0) { Memoize(input, 75, gcc_declaration_specifier_StartIndex); }

		}
		DebugLocation(521, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_declaration_specifier"); }
		return retval;

	}
	// $ANTLR end "gcc_declaration_specifier"

	partial void EnterRule_gcc_attribute_list();
	partial void LeaveRule_gcc_attribute_list();

	// $ANTLR start "gcc_attribute_list"
	// C.g:523:1: gcc_attribute_list : ( gcc_attribute )+ ;
	[GrammarRule("gcc_attribute_list")]
	public XAstParserRuleReturnScope gcc_attribute_list()
	{
		EnterRule_gcc_attribute_list();
		EnterRule("gcc_attribute_list", 76);
		var retval = new XAstParserRuleReturnScope("gcc_attribute_list");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_attribute_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope gcc_attribute345 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "gcc_attribute_list");
		DebugLocation(523, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 76)) { return retval; }

			// C.g:524:2: ( ( gcc_attribute )+ )
			DebugEnterAlt(1);
			// C.g:524:4: ( gcc_attribute )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(524, 4);
			// C.g:524:4: ( gcc_attribute )+
			int cnt92=0;
			try { DebugEnterSubRule(92);
			while (true)
			{
				int alt92=2;
				try { DebugEnterDecision(92, false);
				int LA92_0 = input.LA(1);

				if ((LA92_0==64))
				{
					int LA92_23 = input.LA(2);

					if ((LA92_23==30))
					{
						int LA92_30 = input.LA(3);

						if ((EvaluatePredicate(synpred178_C_fragment)))
						{
							alt92 = 1;
						}


					}


				}


				} finally { DebugExitDecision(92); }
				switch (alt92)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:524:4: gcc_attribute
					{
					DebugLocation(524, 4);
					PushFollow(Follow._gcc_attribute_in_gcc_attribute_list2177);
					gcc_attribute345=gcc_attribute();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute345.Tree, gcc_attribute345, retval);

					}
					break;

				default:
					if (cnt92 >= 1)
						goto loop92;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee92 = new EarlyExitException( 92, input );
					DebugRecognitionException(eee92);
					throw eee92;
				}
				cnt92++;
			}
			loop92:
				;

			} finally { DebugExitSubRule(92); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_attribute_list", 76);
			LeaveRule("gcc_attribute_list", 76);
			LeaveRule_gcc_attribute_list();
			if (state.backtracking > 0) { Memoize(input, 76, gcc_attribute_list_StartIndex); }

		}
		DebugLocation(525, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_attribute_list"); }
		return retval;

	}
	// $ANTLR end "gcc_attribute_list"

	partial void EnterRule_gcc_attribute();
	partial void LeaveRule_gcc_attribute();

	// $ANTLR start "gcc_attribute"
	// C.g:527:1: gcc_attribute : '__attribute__' '(' '(' gcc_attribute_parameter_list ')' ')' ;
	[GrammarRule("gcc_attribute")]
	public XAstParserRuleReturnScope gcc_attribute()
	{
		EnterRule_gcc_attribute();
		EnterRule("gcc_attribute", 77);
		var retval = new XAstParserRuleReturnScope("gcc_attribute");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_attribute_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal346 = default(IToken);
		IToken char_literal347 = default(IToken);
		IToken char_literal348 = default(IToken);
		IToken char_literal350 = default(IToken);
		IToken char_literal351 = default(IToken);
		XAstParserRuleReturnScope gcc_attribute_parameter_list349 = default(XAstParserRuleReturnScope);

		object string_literal346_tree = default(object);
		object char_literal347_tree = default(object);
		object char_literal348_tree = default(object);
		object char_literal350_tree = default(object);
		object char_literal351_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_attribute");
		DebugLocation(527, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 77)) { return retval; }

			// C.g:528:2: ( '__attribute__' '(' '(' gcc_attribute_parameter_list ')' ')' )
			DebugEnterAlt(1);
			// C.g:528:4: '__attribute__' '(' '(' gcc_attribute_parameter_list ')' ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(528, 4);
			string_literal346=(IToken)Match(input,64,Follow._64_in_gcc_attribute2189); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal346_tree = (object)adaptor.Create(string_literal346, retval);
			adaptor.AddChild(root_0, string_literal346_tree);
			}
			DebugLocation(528, 20);
			char_literal347=(IToken)Match(input,30,Follow._30_in_gcc_attribute2191); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal347_tree = (object)adaptor.Create(char_literal347, retval);
			adaptor.AddChild(root_0, char_literal347_tree);
			}
			DebugLocation(528, 24);
			char_literal348=(IToken)Match(input,30,Follow._30_in_gcc_attribute2193); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal348_tree = (object)adaptor.Create(char_literal348, retval);
			adaptor.AddChild(root_0, char_literal348_tree);
			}
			DebugLocation(528, 28);
			PushFollow(Follow._gcc_attribute_parameter_list_in_gcc_attribute2195);
			gcc_attribute_parameter_list349=gcc_attribute_parameter_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_parameter_list349.Tree, gcc_attribute_parameter_list349, retval);
			DebugLocation(528, 57);
			char_literal350=(IToken)Match(input,31,Follow._31_in_gcc_attribute2197); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal350_tree = (object)adaptor.Create(char_literal350, retval);
			adaptor.AddChild(root_0, char_literal350_tree);
			}
			DebugLocation(528, 61);
			char_literal351=(IToken)Match(input,31,Follow._31_in_gcc_attribute2199); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal351_tree = (object)adaptor.Create(char_literal351, retval);
			adaptor.AddChild(root_0, char_literal351_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_attribute", 77);
			LeaveRule("gcc_attribute", 77);
			LeaveRule_gcc_attribute();
			if (state.backtracking > 0) { Memoize(input, 77, gcc_attribute_StartIndex); }

		}
		DebugLocation(529, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_attribute"); }
		return retval;

	}
	// $ANTLR end "gcc_attribute"

	partial void EnterRule_gcc_attribute_parameter_list();
	partial void LeaveRule_gcc_attribute_parameter_list();

	// $ANTLR start "gcc_attribute_parameter_list"
	// C.g:531:1: gcc_attribute_parameter_list : gcc_attribute_parameter ( ',' gcc_attribute_parameter )* ;
	[GrammarRule("gcc_attribute_parameter_list")]
	public XAstParserRuleReturnScope gcc_attribute_parameter_list()
	{
		EnterRule_gcc_attribute_parameter_list();
		EnterRule("gcc_attribute_parameter_list", 78);
		var retval = new XAstParserRuleReturnScope("gcc_attribute_parameter_list");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_attribute_parameter_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal353 = default(IToken);
		XAstParserRuleReturnScope gcc_attribute_parameter352 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute_parameter354 = default(XAstParserRuleReturnScope);

		object char_literal353_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_attribute_parameter_list");
		DebugLocation(531, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 78)) { return retval; }

			// C.g:532:2: ( gcc_attribute_parameter ( ',' gcc_attribute_parameter )* )
			DebugEnterAlt(1);
			// C.g:532:4: gcc_attribute_parameter ( ',' gcc_attribute_parameter )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(532, 4);
			PushFollow(Follow._gcc_attribute_parameter_in_gcc_attribute_parameter_list2210);
			gcc_attribute_parameter352=gcc_attribute_parameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_parameter352.Tree, gcc_attribute_parameter352, retval);
			DebugLocation(532, 28);
			// C.g:532:28: ( ',' gcc_attribute_parameter )*
			try { DebugEnterSubRule(93);
			while (true)
			{
				int alt93=2;
				try { DebugEnterDecision(93, false);
				int LA93_0 = input.LA(1);

				if ((LA93_0==37))
				{
					alt93 = 1;
				}


				} finally { DebugExitDecision(93); }
				switch ( alt93 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:532:29: ',' gcc_attribute_parameter
					{
					DebugLocation(532, 29);
					char_literal353=(IToken)Match(input,37,Follow._37_in_gcc_attribute_parameter_list2213); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal353_tree = (object)adaptor.Create(char_literal353, retval);
					adaptor.AddChild(root_0, char_literal353_tree);
					}
					DebugLocation(532, 33);
					PushFollow(Follow._gcc_attribute_parameter_in_gcc_attribute_parameter_list2215);
					gcc_attribute_parameter354=gcc_attribute_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_parameter354.Tree, gcc_attribute_parameter354, retval);

					}
					break;

				default:
					goto loop93;
				}
			}

			loop93:
				;

			} finally { DebugExitSubRule(93); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_attribute_parameter_list", 78);
			LeaveRule("gcc_attribute_parameter_list", 78);
			LeaveRule_gcc_attribute_parameter_list();
			if (state.backtracking > 0) { Memoize(input, 78, gcc_attribute_parameter_list_StartIndex); }

		}
		DebugLocation(533, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_attribute_parameter_list"); }
		return retval;

	}
	// $ANTLR end "gcc_attribute_parameter_list"

	partial void EnterRule_gcc_attribute_parameter();
	partial void LeaveRule_gcc_attribute_parameter();

	// $ANTLR start "gcc_attribute_parameter"
	// C.g:535:1: gcc_attribute_parameter : ( gcc_attribute_name | gcc_attribute_name ( '(' ( assignment_expression ( ',' assignment_expression )* )? ')' )? );
	[GrammarRule("gcc_attribute_parameter")]
	public XAstParserRuleReturnScope gcc_attribute_parameter()
	{
		EnterRule_gcc_attribute_parameter();
		EnterRule("gcc_attribute_parameter", 79);
		var retval = new XAstParserRuleReturnScope("gcc_attribute_parameter");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_attribute_parameter_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal357 = default(IToken);
		IToken char_literal359 = default(IToken);
		IToken char_literal361 = default(IToken);
		XAstParserRuleReturnScope gcc_attribute_name355 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute_name356 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression358 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression360 = default(XAstParserRuleReturnScope);

		object char_literal357_tree = default(object);
		object char_literal359_tree = default(object);
		object char_literal361_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_attribute_parameter");
		DebugLocation(535, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 79)) { return retval; }

			// C.g:536:2: ( gcc_attribute_name | gcc_attribute_name ( '(' ( assignment_expression ( ',' assignment_expression )* )? ')' )? )
			int alt97=2;
			try { DebugEnterDecision(97, false);
			try
			{
				alt97 = dfa97.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:536:4: gcc_attribute_name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(536, 4);
				PushFollow(Follow._gcc_attribute_name_in_gcc_attribute_parameter2228);
				gcc_attribute_name355=gcc_attribute_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_name355.Tree, gcc_attribute_name355, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:537:4: gcc_attribute_name ( '(' ( assignment_expression ( ',' assignment_expression )* )? ')' )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(537, 4);
				PushFollow(Follow._gcc_attribute_name_in_gcc_attribute_parameter2233);
				gcc_attribute_name356=gcc_attribute_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_name356.Tree, gcc_attribute_name356, retval);
				DebugLocation(537, 23);
				// C.g:537:23: ( '(' ( assignment_expression ( ',' assignment_expression )* )? ')' )?
				int alt96=2;
				try { DebugEnterSubRule(96);
				try { DebugEnterDecision(96, false);
				int LA96_0 = input.LA(1);

				if ((LA96_0==30))
				{
					alt96 = 1;
				}
				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:537:25: '(' ( assignment_expression ( ',' assignment_expression )* )? ')'
					{
					DebugLocation(537, 25);
					char_literal357=(IToken)Match(input,30,Follow._30_in_gcc_attribute_parameter2237); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal357_tree = (object)adaptor.Create(char_literal357, retval);
					adaptor.AddChild(root_0, char_literal357_tree);
					}
					DebugLocation(537, 29);
					// C.g:537:29: ( assignment_expression ( ',' assignment_expression )* )?
					int alt95=2;
					try { DebugEnterSubRule(95);
					try { DebugEnterDecision(95, false);
					int LA95_0 = input.LA(1);

					if ((LA95_0==CHARACTER_LITERAL||LA95_0==DECIMAL_LITERAL||LA95_0==FLOATING_POINT_LITERAL||LA95_0==HEX_LITERAL||LA95_0==IDENTIFIER||LA95_0==OCTAL_LITERAL||LA95_0==STRING_LITERAL||LA95_0==23||LA95_0==28||LA95_0==30||LA95_0==32||(LA95_0>=34 && LA95_0<=35)||(LA95_0>=38 && LA95_0<=39)||LA95_0==63||(LA95_0>=65 && LA95_0<=66)||LA95_0==68||LA95_0==96||LA95_0==112))
					{
						alt95 = 1;
					}
					} finally { DebugExitDecision(95); }
					switch (alt95)
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:537:30: assignment_expression ( ',' assignment_expression )*
						{
						DebugLocation(537, 30);
						PushFollow(Follow._assignment_expression_in_gcc_attribute_parameter2240);
						assignment_expression358=assignment_expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression358.Tree, assignment_expression358, retval);
						DebugLocation(537, 52);
						// C.g:537:52: ( ',' assignment_expression )*
						try { DebugEnterSubRule(94);
						while (true)
						{
							int alt94=2;
							try { DebugEnterDecision(94, false);
							int LA94_0 = input.LA(1);

							if ((LA94_0==37))
							{
								alt94 = 1;
							}


							} finally { DebugExitDecision(94); }
							switch ( alt94 )
							{
							case 1:
								DebugEnterAlt(1);
								// C.g:537:53: ',' assignment_expression
								{
								DebugLocation(537, 53);
								char_literal359=(IToken)Match(input,37,Follow._37_in_gcc_attribute_parameter2243); if (state.failed) return retval;
								if (state.backtracking == 0) {
								char_literal359_tree = (object)adaptor.Create(char_literal359, retval);
								adaptor.AddChild(root_0, char_literal359_tree);
								}
								DebugLocation(537, 57);
								PushFollow(Follow._assignment_expression_in_gcc_attribute_parameter2245);
								assignment_expression360=assignment_expression();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression360.Tree, assignment_expression360, retval);

								}
								break;

							default:
								goto loop94;
							}
						}

						loop94:
							;

						} finally { DebugExitSubRule(94); }


						}
						break;

					}
					} finally { DebugExitSubRule(95); }

					DebugLocation(537, 83);
					char_literal361=(IToken)Match(input,31,Follow._31_in_gcc_attribute_parameter2251); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal361_tree = (object)adaptor.Create(char_literal361, retval);
					adaptor.AddChild(root_0, char_literal361_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(96); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_attribute_parameter", 79);
			LeaveRule("gcc_attribute_parameter", 79);
			LeaveRule_gcc_attribute_parameter();
			if (state.backtracking > 0) { Memoize(input, 79, gcc_attribute_parameter_StartIndex); }

		}
		DebugLocation(538, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_attribute_parameter"); }
		return retval;

	}
	// $ANTLR end "gcc_attribute_parameter"

	partial void EnterRule_gcc_attribute_name();
	partial void LeaveRule_gcc_attribute_name();

	// $ANTLR start "gcc_attribute_name"
	// C.g:540:1: gcc_attribute_name : ( IDENTIFIER | storage_class_specifier | type_specifier | type_qualifier | gcc_function_specifier );
	[GrammarRule("gcc_attribute_name")]
	public XAstParserRuleReturnScope gcc_attribute_name()
	{
		EnterRule_gcc_attribute_name();
		EnterRule("gcc_attribute_name", 80);
		var retval = new XAstParserRuleReturnScope("gcc_attribute_name");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_attribute_name_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER362 = default(IToken);
		XAstParserRuleReturnScope storage_class_specifier363 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_specifier364 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_qualifier365 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_function_specifier366 = default(XAstParserRuleReturnScope);

		object IDENTIFIER362_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_attribute_name");
		DebugLocation(540, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 80)) { return retval; }

			// C.g:541:2: ( IDENTIFIER | storage_class_specifier | type_specifier | type_qualifier | gcc_function_specifier )
			int alt98=5;
			try { DebugEnterDecision(98, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				int LA98_1 = input.LA(2);

				if ((EvaluatePredicate(synpred184_C_fragment)))
				{
					alt98 = 1;
				}
				else if ((((EvaluatePredicate(synpred186_C_fragment)&&EvaluatePredicate(synpred186_C_fragment))&&(isTypeName(input.LT(1).getText())))))
				{
					alt98 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 98, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 72:
			case 83:
			case 91:
			case 97:
				{
				alt98 = 2;
				}
				break;
			case 75:
			case 80:
			case 82:
			case 84:
			case 89:
			case 90:
			case 94:
			case 95:
			case 98:
			case 101:
			case 102:
			case 103:
			case 104:
				{
				alt98 = 3;
				}
				break;
			case 71:
			case 76:
			case 92:
			case 105:
				{
				alt98 = 4;
				}
				break;
			case 67:
			case 69:
			case 70:
			case 88:
				{
				alt98 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 98, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:541:4: IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(541, 4);
				IDENTIFIER362=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_gcc_attribute_name2265), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER362_tree = (object)adaptor.Create(IDENTIFIER362, retval);
				adaptor.AddChild(root_0, IDENTIFIER362_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:542:4: storage_class_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(542, 4);
				PushFollow(Follow._storage_class_specifier_in_gcc_attribute_name2270);
				storage_class_specifier363=storage_class_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, storage_class_specifier363.Tree, storage_class_specifier363, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:543:4: type_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(543, 4);
				PushFollow(Follow._type_specifier_in_gcc_attribute_name2275);
				type_specifier364=type_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_specifier364.Tree, type_specifier364, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:544:4: type_qualifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(544, 4);
				PushFollow(Follow._type_qualifier_in_gcc_attribute_name2280);
				type_qualifier365=type_qualifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier365.Tree, type_qualifier365, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:545:4: gcc_function_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(545, 4);
				PushFollow(Follow._gcc_function_specifier_in_gcc_attribute_name2285);
				gcc_function_specifier366=gcc_function_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_function_specifier366.Tree, gcc_function_specifier366, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_attribute_name", 80);
			LeaveRule("gcc_attribute_name", 80);
			LeaveRule_gcc_attribute_name();
			if (state.backtracking > 0) { Memoize(input, 80, gcc_attribute_name_StartIndex); }

		}
		DebugLocation(546, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_attribute_name"); }
		return retval;

	}
	// $ANTLR end "gcc_attribute_name"

	partial void EnterRule_gcc_statement_expression();
	partial void LeaveRule_gcc_statement_expression();

	// $ANTLR start "gcc_statement_expression"
	// C.g:548:1: gcc_statement_expression : '(' compound_statement ')' ;
	[GrammarRule("gcc_statement_expression")]
	public XAstParserRuleReturnScope gcc_statement_expression()
	{
		EnterRule_gcc_statement_expression();
		EnterRule("gcc_statement_expression", 81);
		var retval = new XAstParserRuleReturnScope("gcc_statement_expression");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_statement_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal367 = default(IToken);
		IToken char_literal369 = default(IToken);
		XAstParserRuleReturnScope compound_statement368 = default(XAstParserRuleReturnScope);

		object char_literal367_tree = default(object);
		object char_literal369_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_statement_expression");
		DebugLocation(548, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 81)) { return retval; }

			// C.g:549:2: ( '(' compound_statement ')' )
			DebugEnterAlt(1);
			// C.g:549:4: '(' compound_statement ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(549, 4);
			char_literal367=(IToken)Match(input,30,Follow._30_in_gcc_statement_expression2296); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal367_tree = (object)adaptor.Create(char_literal367, retval);
			adaptor.AddChild(root_0, char_literal367_tree);
			}
			DebugLocation(549, 8);
			PushFollow(Follow._compound_statement_in_gcc_statement_expression2298);
			compound_statement368=compound_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, compound_statement368.Tree, compound_statement368, retval);
			DebugLocation(549, 27);
			char_literal369=(IToken)Match(input,31,Follow._31_in_gcc_statement_expression2300); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal369_tree = (object)adaptor.Create(char_literal369, retval);
			adaptor.AddChild(root_0, char_literal369_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_statement_expression", 81);
			LeaveRule("gcc_statement_expression", 81);
			LeaveRule_gcc_statement_expression();
			if (state.backtracking > 0) { Memoize(input, 81, gcc_statement_expression_StartIndex); }

		}
		DebugLocation(550, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_statement_expression"); }
		return retval;

	}
	// $ANTLR end "gcc_statement_expression"

	partial void EnterRule_gcc_array_type_modifier_list();
	partial void LeaveRule_gcc_array_type_modifier_list();

	// $ANTLR start "gcc_array_type_modifier_list"
	// C.g:552:1: gcc_array_type_modifier_list : ( gcc_array_type_modifier )+ ;
	[GrammarRule("gcc_array_type_modifier_list")]
	public XAstParserRuleReturnScope gcc_array_type_modifier_list()
	{
		EnterRule_gcc_array_type_modifier_list();
		EnterRule("gcc_array_type_modifier_list", 82);
		var retval = new XAstParserRuleReturnScope("gcc_array_type_modifier_list");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_array_type_modifier_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope gcc_array_type_modifier370 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "gcc_array_type_modifier_list");
		DebugLocation(552, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 82)) { return retval; }

			// C.g:553:2: ( ( gcc_array_type_modifier )+ )
			DebugEnterAlt(1);
			// C.g:553:4: ( gcc_array_type_modifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(553, 4);
			// C.g:553:4: ( gcc_array_type_modifier )+
			int cnt99=0;
			try { DebugEnterSubRule(99);
			while (true)
			{
				int alt99=2;
				try { DebugEnterDecision(99, false);
				int LA99_0 = input.LA(1);

				if ((LA99_0==64||LA99_0==71||LA99_0==76||LA99_0==92||LA99_0==105))
				{
					alt99 = 1;
				}


				} finally { DebugExitDecision(99); }
				switch (alt99)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:553:4: gcc_array_type_modifier
					{
					DebugLocation(553, 4);
					PushFollow(Follow._gcc_array_type_modifier_in_gcc_array_type_modifier_list2311);
					gcc_array_type_modifier370=gcc_array_type_modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_array_type_modifier370.Tree, gcc_array_type_modifier370, retval);

					}
					break;

				default:
					if (cnt99 >= 1)
						goto loop99;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee99 = new EarlyExitException( 99, input );
					DebugRecognitionException(eee99);
					throw eee99;
				}
				cnt99++;
			}
			loop99:
				;

			} finally { DebugExitSubRule(99); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_array_type_modifier_list", 82);
			LeaveRule("gcc_array_type_modifier_list", 82);
			LeaveRule_gcc_array_type_modifier_list();
			if (state.backtracking > 0) { Memoize(input, 82, gcc_array_type_modifier_list_StartIndex); }

		}
		DebugLocation(554, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_array_type_modifier_list"); }
		return retval;

	}
	// $ANTLR end "gcc_array_type_modifier_list"

	partial void EnterRule_gcc_array_type_modifier();
	partial void LeaveRule_gcc_array_type_modifier();

	// $ANTLR start "gcc_array_type_modifier"
	// C.g:556:1: gcc_array_type_modifier : ( type_qualifier | gcc_attribute );
	[GrammarRule("gcc_array_type_modifier")]
	public XAstParserRuleReturnScope gcc_array_type_modifier()
	{
		EnterRule_gcc_array_type_modifier();
		EnterRule("gcc_array_type_modifier", 83);
		var retval = new XAstParserRuleReturnScope("gcc_array_type_modifier");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_array_type_modifier_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope type_qualifier371 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute372 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "gcc_array_type_modifier");
		DebugLocation(556, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 83)) { return retval; }

			// C.g:557:2: ( type_qualifier | gcc_attribute )
			int alt100=2;
			try { DebugEnterDecision(100, false);
			int LA100_0 = input.LA(1);

			if ((LA100_0==71||LA100_0==76||LA100_0==92||LA100_0==105))
			{
				alt100 = 1;
			}
			else if ((LA100_0==64))
			{
				alt100 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 100, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(100); }
			switch (alt100)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:557:4: type_qualifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(557, 4);
				PushFollow(Follow._type_qualifier_in_gcc_array_type_modifier2323);
				type_qualifier371=type_qualifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier371.Tree, type_qualifier371, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:558:4: gcc_attribute
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(558, 4);
				PushFollow(Follow._gcc_attribute_in_gcc_array_type_modifier2328);
				gcc_attribute372=gcc_attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute372.Tree, gcc_attribute372, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_array_type_modifier", 83);
			LeaveRule("gcc_array_type_modifier", 83);
			LeaveRule_gcc_array_type_modifier();
			if (state.backtracking > 0) { Memoize(input, 83, gcc_array_type_modifier_StartIndex); }

		}
		DebugLocation(559, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_array_type_modifier"); }
		return retval;

	}
	// $ANTLR end "gcc_array_type_modifier"

	partial void EnterRule_gcc_builtin_va_arg();
	partial void LeaveRule_gcc_builtin_va_arg();

	// $ANTLR start "gcc_builtin_va_arg"
	// C.g:561:1: gcc_builtin_va_arg : '__builtin_va_arg' '(' assignment_expression ',' type_name ')' ;
	[GrammarRule("gcc_builtin_va_arg")]
	public XAstParserRuleReturnScope gcc_builtin_va_arg()
	{
		EnterRule_gcc_builtin_va_arg();
		EnterRule("gcc_builtin_va_arg", 84);
		var retval = new XAstParserRuleReturnScope("gcc_builtin_va_arg");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_builtin_va_arg_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal373 = default(IToken);
		IToken char_literal374 = default(IToken);
		IToken char_literal376 = default(IToken);
		IToken char_literal378 = default(IToken);
		XAstParserRuleReturnScope assignment_expression375 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name377 = default(XAstParserRuleReturnScope);

		object string_literal373_tree = default(object);
		object char_literal374_tree = default(object);
		object char_literal376_tree = default(object);
		object char_literal378_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_builtin_va_arg");
		DebugLocation(561, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 84)) { return retval; }

			// C.g:562:2: ( '__builtin_va_arg' '(' assignment_expression ',' type_name ')' )
			DebugEnterAlt(1);
			// C.g:562:4: '__builtin_va_arg' '(' assignment_expression ',' type_name ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(562, 4);
			string_literal373=(IToken)Match(input,66,Follow._66_in_gcc_builtin_va_arg2339); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal373_tree = (object)adaptor.Create(string_literal373, retval);
			adaptor.AddChild(root_0, string_literal373_tree);
			}
			DebugLocation(562, 23);
			char_literal374=(IToken)Match(input,30,Follow._30_in_gcc_builtin_va_arg2341); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal374_tree = (object)adaptor.Create(char_literal374, retval);
			adaptor.AddChild(root_0, char_literal374_tree);
			}
			DebugLocation(562, 27);
			PushFollow(Follow._assignment_expression_in_gcc_builtin_va_arg2343);
			assignment_expression375=assignment_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression375.Tree, assignment_expression375, retval);
			DebugLocation(562, 49);
			char_literal376=(IToken)Match(input,37,Follow._37_in_gcc_builtin_va_arg2345); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal376_tree = (object)adaptor.Create(char_literal376, retval);
			adaptor.AddChild(root_0, char_literal376_tree);
			}
			DebugLocation(562, 53);
			PushFollow(Follow._type_name_in_gcc_builtin_va_arg2347);
			type_name377=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name377.Tree, type_name377, retval);
			DebugLocation(562, 63);
			char_literal378=(IToken)Match(input,31,Follow._31_in_gcc_builtin_va_arg2349); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal378_tree = (object)adaptor.Create(char_literal378, retval);
			adaptor.AddChild(root_0, char_literal378_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_builtin_va_arg", 84);
			LeaveRule("gcc_builtin_va_arg", 84);
			LeaveRule_gcc_builtin_va_arg();
			if (state.backtracking > 0) { Memoize(input, 84, gcc_builtin_va_arg_StartIndex); }

		}
		DebugLocation(563, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_builtin_va_arg"); }
		return retval;

	}
	// $ANTLR end "gcc_builtin_va_arg"

	partial void EnterRule_gcc_typeof();
	partial void LeaveRule_gcc_typeof();

	// $ANTLR start "gcc_typeof"
	// C.g:565:1: gcc_typeof : 'typeof' '(' ( type_name | assignment_expression ) ')' ;
	[GrammarRule("gcc_typeof")]
	public XAstParserRuleReturnScope gcc_typeof()
	{
		EnterRule_gcc_typeof();
		EnterRule("gcc_typeof", 85);
		var retval = new XAstParserRuleReturnScope("gcc_typeof");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_typeof_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal379 = default(IToken);
		IToken char_literal380 = default(IToken);
		IToken char_literal383 = default(IToken);
		XAstParserRuleReturnScope type_name381 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression382 = default(XAstParserRuleReturnScope);

		object string_literal379_tree = default(object);
		object char_literal380_tree = default(object);
		object char_literal383_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_typeof");
		DebugLocation(565, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 85)) { return retval; }

			// C.g:566:2: ( 'typeof' '(' ( type_name | assignment_expression ) ')' )
			DebugEnterAlt(1);
			// C.g:566:4: 'typeof' '(' ( type_name | assignment_expression ) ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(566, 4);
			string_literal379=(IToken)Match(input,101,Follow._101_in_gcc_typeof2360); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal379_tree = (object)adaptor.Create(string_literal379, retval);
			adaptor.AddChild(root_0, string_literal379_tree);
			}
			DebugLocation(566, 13);
			char_literal380=(IToken)Match(input,30,Follow._30_in_gcc_typeof2362); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal380_tree = (object)adaptor.Create(char_literal380, retval);
			adaptor.AddChild(root_0, char_literal380_tree);
			}
			DebugLocation(566, 17);
			// C.g:566:17: ( type_name | assignment_expression )
			int alt101=2;
			try { DebugEnterSubRule(101);
			try { DebugEnterDecision(101, false);
			try
			{
				alt101 = dfa101.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:566:19: type_name
				{
				DebugLocation(566, 19);
				PushFollow(Follow._type_name_in_gcc_typeof2366);
				type_name381=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_name381.Tree, type_name381, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:566:31: assignment_expression
				{
				DebugLocation(566, 31);
				PushFollow(Follow._assignment_expression_in_gcc_typeof2370);
				assignment_expression382=assignment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression382.Tree, assignment_expression382, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(101); }

			DebugLocation(566, 55);
			char_literal383=(IToken)Match(input,31,Follow._31_in_gcc_typeof2374); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal383_tree = (object)adaptor.Create(char_literal383, retval);
			adaptor.AddChild(root_0, char_literal383_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_typeof", 85);
			LeaveRule("gcc_typeof", 85);
			LeaveRule_gcc_typeof();
			if (state.backtracking > 0) { Memoize(input, 85, gcc_typeof_StartIndex); }

		}
		DebugLocation(567, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_typeof"); }
		return retval;

	}
	// $ANTLR end "gcc_typeof"

	partial void EnterRule_gcc_builtin_offsetof();
	partial void LeaveRule_gcc_builtin_offsetof();

	// $ANTLR start "gcc_builtin_offsetof"
	// C.g:569:1: gcc_builtin_offsetof : '__builtin_offsetof' '(' type_name ',' offsetof_member_designator ')' ;
	[GrammarRule("gcc_builtin_offsetof")]
	public XAstParserRuleReturnScope gcc_builtin_offsetof()
	{
		EnterRule_gcc_builtin_offsetof();
		EnterRule("gcc_builtin_offsetof", 86);
		var retval = new XAstParserRuleReturnScope("gcc_builtin_offsetof");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_builtin_offsetof_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal384 = default(IToken);
		IToken char_literal385 = default(IToken);
		IToken char_literal387 = default(IToken);
		IToken char_literal389 = default(IToken);
		XAstParserRuleReturnScope type_name386 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope offsetof_member_designator388 = default(XAstParserRuleReturnScope);

		object string_literal384_tree = default(object);
		object char_literal385_tree = default(object);
		object char_literal387_tree = default(object);
		object char_literal389_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_builtin_offsetof");
		DebugLocation(569, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 86)) { return retval; }

			// C.g:570:2: ( '__builtin_offsetof' '(' type_name ',' offsetof_member_designator ')' )
			DebugEnterAlt(1);
			// C.g:570:4: '__builtin_offsetof' '(' type_name ',' offsetof_member_designator ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(570, 4);
			string_literal384=(IToken)Match(input,65,Follow._65_in_gcc_builtin_offsetof2385); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal384_tree = (object)adaptor.Create(string_literal384, retval);
			adaptor.AddChild(root_0, string_literal384_tree);
			}
			DebugLocation(570, 25);
			char_literal385=(IToken)Match(input,30,Follow._30_in_gcc_builtin_offsetof2387); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal385_tree = (object)adaptor.Create(char_literal385, retval);
			adaptor.AddChild(root_0, char_literal385_tree);
			}
			DebugLocation(570, 29);
			PushFollow(Follow._type_name_in_gcc_builtin_offsetof2389);
			type_name386=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name386.Tree, type_name386, retval);
			DebugLocation(570, 39);
			char_literal387=(IToken)Match(input,37,Follow._37_in_gcc_builtin_offsetof2391); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal387_tree = (object)adaptor.Create(char_literal387, retval);
			adaptor.AddChild(root_0, char_literal387_tree);
			}
			DebugLocation(570, 43);
			PushFollow(Follow._offsetof_member_designator_in_gcc_builtin_offsetof2393);
			offsetof_member_designator388=offsetof_member_designator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, offsetof_member_designator388.Tree, offsetof_member_designator388, retval);
			DebugLocation(570, 70);
			char_literal389=(IToken)Match(input,31,Follow._31_in_gcc_builtin_offsetof2395); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal389_tree = (object)adaptor.Create(char_literal389, retval);
			adaptor.AddChild(root_0, char_literal389_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_builtin_offsetof", 86);
			LeaveRule("gcc_builtin_offsetof", 86);
			LeaveRule_gcc_builtin_offsetof();
			if (state.backtracking > 0) { Memoize(input, 86, gcc_builtin_offsetof_StartIndex); }

		}
		DebugLocation(571, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_builtin_offsetof"); }
		return retval;

	}
	// $ANTLR end "gcc_builtin_offsetof"

	partial void EnterRule_offsetof_member_designator();
	partial void LeaveRule_offsetof_member_designator();

	// $ANTLR start "offsetof_member_designator"
	// C.g:573:1: offsetof_member_designator : IDENTIFIER ( '.' IDENTIFIER | '[' expression ']' )* ;
	[GrammarRule("offsetof_member_designator")]
	public XAstParserRuleReturnScope offsetof_member_designator()
	{
		EnterRule_offsetof_member_designator();
		EnterRule("offsetof_member_designator", 87);
		var retval = new XAstParserRuleReturnScope("offsetof_member_designator");
		
		retval.Start = (IToken)input.LT(1);
		int offsetof_member_designator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER390 = default(IToken);
		IToken char_literal391 = default(IToken);
		IToken IDENTIFIER392 = default(IToken);
		IToken char_literal393 = default(IToken);
		IToken char_literal395 = default(IToken);
		XAstParserRuleReturnScope expression394 = default(XAstParserRuleReturnScope);

		object IDENTIFIER390_tree = default(object);
		object char_literal391_tree = default(object);
		object IDENTIFIER392_tree = default(object);
		object char_literal393_tree = default(object);
		object char_literal395_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "offsetof_member_designator");
		DebugLocation(573, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 87)) { return retval; }

			// C.g:574:2: ( IDENTIFIER ( '.' IDENTIFIER | '[' expression ']' )* )
			DebugEnterAlt(1);
			// C.g:574:4: IDENTIFIER ( '.' IDENTIFIER | '[' expression ']' )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(574, 4);
			IDENTIFIER390=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_offsetof_member_designator2408), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER390_tree = (object)adaptor.Create(IDENTIFIER390, retval);
			adaptor.AddChild(root_0, IDENTIFIER390_tree);
			}
			DebugLocation(574, 15);
			// C.g:574:15: ( '.' IDENTIFIER | '[' expression ']' )*
			try { DebugEnterSubRule(102);
			while (true)
			{
				int alt102=3;
				try { DebugEnterDecision(102, false);
				int LA102_0 = input.LA(1);

				if ((LA102_0==42))
				{
					alt102 = 1;
				}
				else if ((LA102_0==59))
				{
					alt102 = 2;
				}


				} finally { DebugExitDecision(102); }
				switch ( alt102 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:574:16: '.' IDENTIFIER
					{
					DebugLocation(574, 16);
					char_literal391=(IToken)Match(input,42,Follow._42_in_offsetof_member_designator2411); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal391_tree = (object)adaptor.Create(char_literal391, retval);
					adaptor.AddChild(root_0, char_literal391_tree);
					}
					DebugLocation(574, 20);
					IDENTIFIER392=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_offsetof_member_designator2413), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER392_tree = (object)adaptor.Create(IDENTIFIER392, retval);
					adaptor.AddChild(root_0, IDENTIFIER392_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:574:33: '[' expression ']'
					{
					DebugLocation(574, 33);
					char_literal393=(IToken)Match(input,59,Follow._59_in_offsetof_member_designator2417); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal393_tree = (object)adaptor.Create(char_literal393, retval);
					adaptor.AddChild(root_0, char_literal393_tree);
					}
					DebugLocation(574, 37);
					PushFollow(Follow._expression_in_offsetof_member_designator2419);
					expression394=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression394.Tree, expression394, retval);
					DebugLocation(574, 48);
					char_literal395=(IToken)Match(input,60,Follow._60_in_offsetof_member_designator2421); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal395_tree = (object)adaptor.Create(char_literal395, retval);
					adaptor.AddChild(root_0, char_literal395_tree);
					}

					}
					break;

				default:
					goto loop102;
				}
			}

			loop102:
				;

			} finally { DebugExitSubRule(102); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("offsetof_member_designator", 87);
			LeaveRule("offsetof_member_designator", 87);
			LeaveRule_offsetof_member_designator();
			if (state.backtracking > 0) { Memoize(input, 87, offsetof_member_designator_StartIndex); }

		}
		DebugLocation(575, 1);
		} finally { DebugExitRule(GrammarFileName, "offsetof_member_designator"); }
		return retval;

	}
	// $ANTLR end "offsetof_member_designator"

	partial void EnterRule_synpred2_C_fragment();
	partial void LeaveRule_synpred2_C_fragment();

	// $ANTLR start synpred2_C
	public void synpred2_C_fragment()
	{
		EnterRule_synpred2_C_fragment();
		EnterRule("synpred2_C_fragment", 89);
		var retval = new XAstParserRuleReturnScope("synpred2_C_fragment");
		try
		{
			// C.g:83:6: ( declaration_specifiers )
			DebugEnterAlt(1);
			// C.g:83:6: declaration_specifiers
			{
			DebugLocation(83, 6);
			PushFollow(Follow._declaration_specifiers_in_synpred2_C94);
			declaration_specifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_C_fragment", 89);
			LeaveRule("synpred2_C_fragment", 89);
			LeaveRule_synpred2_C_fragment();
		}
	}
	// $ANTLR end synpred2_C

	partial void EnterRule_synpred4_C_fragment();
	partial void LeaveRule_synpred4_C_fragment();

	// $ANTLR start synpred4_C
	public void synpred4_C_fragment()
	{
		EnterRule_synpred4_C_fragment();
		EnterRule("synpred4_C_fragment", 91);
		var retval = new XAstParserRuleReturnScope("synpred4_C_fragment");
		try
		{
			// C.g:83:4: ( ( declaration_specifiers )? declarator ( declaration )* '{' )
			DebugEnterAlt(1);
			// C.g:83:6: ( declaration_specifiers )? declarator ( declaration )* '{'
			{
			DebugLocation(83, 6);
			// C.g:83:6: ( declaration_specifiers )?
			int alt103=2;
			try { DebugEnterSubRule(103);
			try { DebugEnterDecision(103, false);
			int LA103_0 = input.LA(1);

			if ((LA103_0==64||(LA103_0>=67 && LA103_0<=72)||(LA103_0>=75 && LA103_0<=76)||LA103_0==80||(LA103_0>=82 && LA103_0<=84)||(LA103_0>=88 && LA103_0<=92)||(LA103_0>=94 && LA103_0<=95)||(LA103_0>=97 && LA103_0<=98)||(LA103_0>=101 && LA103_0<=105)))
			{
				alt103 = 1;
			}
			else if ((LA103_0==IDENTIFIER))
			{
				switch (input.LA(2))
				{
				case 32:
					{
					alt103 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA103_22 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt103 = 1;
					}
					}
					break;
				case 30:
					{
					int LA103_23 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt103 = 1;
					}
					}
					break;
				case 72:
				case 83:
				case 91:
				case 97:
					{
					int LA103_24 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt103 = 1;
					}
					}
					break;
				case 104:
					{
					int LA103_25 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt103 = 1;
					}
					}
					break;
				case 75:
					{
					int LA103_26 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt103 = 1;
					}
					}
					break;
				case 94:
					{
					int LA103_27 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt103 = 1;
					}
					}
					break;
				case 89:
					{
					int LA103_28 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt103 = 1;
					}
					}
					break;
				case 90:
					{
					int LA103_29 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt103 = 1;
					}
					}
					break;
				case 84:
					{
					int LA103_30 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt103 = 1;
					}
					}
					break;
				case 80:
					{
					int LA103_31 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt103 = 1;
					}
					}
					break;
				case 95:
					{
					int LA103_32 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt103 = 1;
					}
					}
					break;
				case 103:
					{
					int LA103_33 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt103 = 1;
					}
					}
					break;
				case 98:
				case 102:
					{
					int LA103_34 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt103 = 1;
					}
					}
					break;
				case 82:
					{
					int LA103_35 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt103 = 1;
					}
					}
					break;
				case 101:
					{
					int LA103_36 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt103 = 1;
					}
					}
					break;
				case 71:
				case 76:
				case 92:
				case 105:
					{
					int LA103_37 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt103 = 1;
					}
					}
					break;
				case 67:
				case 69:
				case 70:
				case 88:
					{
					int LA103_38 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt103 = 1;
					}
					}
					break;
				case 64:
					{
					int LA103_39 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt103 = 1;
					}
					}
					break;
				case 68:
					{
					int LA103_40 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt103 = 1;
					}
					}
					break;
				}

			}
			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:83:6: declaration_specifiers
				{
				DebugLocation(83, 6);
				PushFollow(Follow._declaration_specifiers_in_synpred4_C94);
				declaration_specifiers();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(103); }

			DebugLocation(83, 30);
			PushFollow(Follow._declarator_in_synpred4_C97);
			declarator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(83, 41);
			// C.g:83:41: ( declaration )*
			try { DebugEnterSubRule(104);
			while (true)
			{
				int alt104=2;
				try { DebugEnterDecision(104, false);
				int LA104_0 = input.LA(1);

				if ((LA104_0==IDENTIFIER||LA104_0==64||(LA104_0>=67 && LA104_0<=72)||(LA104_0>=75 && LA104_0<=76)||LA104_0==80||(LA104_0>=82 && LA104_0<=84)||(LA104_0>=88 && LA104_0<=92)||(LA104_0>=94 && LA104_0<=95)||(LA104_0>=97 && LA104_0<=98)||(LA104_0>=100 && LA104_0<=105)))
				{
					alt104 = 1;
				}


				} finally { DebugExitDecision(104); }
				switch ( alt104 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:83:41: declaration
					{
					DebugLocation(83, 41);
					PushFollow(Follow._declaration_in_synpred4_C99);
					declaration();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop104;
				}
			}

			loop104:
				;

			} finally { DebugExitSubRule(104); }

			DebugLocation(83, 54);
			Match(input,107,Follow._107_in_synpred4_C102); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred4_C_fragment", 91);
			LeaveRule("synpred4_C_fragment", 91);
			LeaveRule_synpred4_C_fragment();
		}
	}
	// $ANTLR end synpred4_C

	partial void EnterRule_synpred5_C_fragment();
	partial void LeaveRule_synpred5_C_fragment();

	// $ANTLR start synpred5_C
	public void synpred5_C_fragment()
	{
		EnterRule_synpred5_C_fragment();
		EnterRule("synpred5_C_fragment", 92);
		var retval = new XAstParserRuleReturnScope("synpred5_C_fragment");
		try
		{
			// C.g:92:4: ( declaration_specifiers )
			DebugEnterAlt(1);
			// C.g:92:4: declaration_specifiers
			{
			DebugLocation(92, 4);
			PushFollow(Follow._declaration_specifiers_in_synpred5_C134);
			declaration_specifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred5_C_fragment", 92);
			LeaveRule("synpred5_C_fragment", 92);
			LeaveRule_synpred5_C_fragment();
		}
	}
	// $ANTLR end synpred5_C

	partial void EnterRule_synpred9_C_fragment();
	partial void LeaveRule_synpred9_C_fragment();

	// $ANTLR start synpred9_C
	public void synpred9_C_fragment()
	{
		EnterRule_synpred9_C_fragment();
		EnterRule("synpred9_C_fragment", 96);
		var retval = new XAstParserRuleReturnScope("synpred9_C_fragment");
		try
		{
			// C.g:105:39: ( declaration_specifiers )
			DebugEnterAlt(1);
			// C.g:105:39: declaration_specifiers
			{
			DebugLocation(105, 39);
			PushFollow(Follow._declaration_specifiers_in_synpred9_C186);
			declaration_specifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred9_C_fragment", 96);
			LeaveRule("synpred9_C_fragment", 96);
			LeaveRule_synpred9_C_fragment();
		}
	}
	// $ANTLR end synpred9_C

	partial void EnterRule_synpred13_C_fragment();
	partial void LeaveRule_synpred13_C_fragment();

	// $ANTLR start synpred13_C
	public void synpred13_C_fragment()
	{
		EnterRule_synpred13_C_fragment();
		EnterRule("synpred13_C_fragment", 100);
		var retval = new XAstParserRuleReturnScope("synpred13_C_fragment");
		try
		{
			// C.g:112:7: ( type_specifier )
			DebugEnterAlt(1);
			// C.g:112:7: type_specifier
			{
			DebugLocation(112, 7);
			PushFollow(Follow._type_specifier_in_synpred13_C234);
			type_specifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred13_C_fragment", 100);
			LeaveRule("synpred13_C_fragment", 100);
			LeaveRule_synpred13_C_fragment();
		}
	}
	// $ANTLR end synpred13_C

	partial void EnterRule_synpred36_C_fragment();
	partial void LeaveRule_synpred36_C_fragment();

	// $ANTLR start synpred36_C
	public void synpred36_C_fragment()
	{
		EnterRule_synpred36_C_fragment();
		EnterRule("synpred36_C_fragment", 123);
		var retval = new XAstParserRuleReturnScope("synpred36_C_fragment");
		try
		{
			// C.g:161:4: ( struct_or_union ( gcc_attribute_list )? ( IDENTIFIER )? '{' struct_declaration_list '}' )
			DebugEnterAlt(1);
			// C.g:161:4: struct_or_union ( gcc_attribute_list )? ( IDENTIFIER )? '{' struct_declaration_list '}'
			{
			DebugLocation(161, 4);
			PushFollow(Follow._struct_or_union_in_synpred36_C441);
			struct_or_union();
			PopFollow();
			if (state.failed) return;
			DebugLocation(161, 20);
			// C.g:161:20: ( gcc_attribute_list )?
			int alt108=2;
			try { DebugEnterSubRule(108);
			try { DebugEnterDecision(108, false);
			int LA108_0 = input.LA(1);

			if ((LA108_0==64))
			{
				alt108 = 1;
			}
			} finally { DebugExitDecision(108); }
			switch (alt108)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:161:20: gcc_attribute_list
				{
				DebugLocation(161, 20);
				PushFollow(Follow._gcc_attribute_list_in_synpred36_C443);
				gcc_attribute_list();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(108); }

			DebugLocation(161, 40);
			// C.g:161:40: ( IDENTIFIER )?
			int alt109=2;
			try { DebugEnterSubRule(109);
			try { DebugEnterDecision(109, false);
			int LA109_0 = input.LA(1);

			if ((LA109_0==IDENTIFIER))
			{
				alt109 = 1;
			}
			} finally { DebugExitDecision(109); }
			switch (alt109)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:161:40: IDENTIFIER
				{
				DebugLocation(161, 40);
				new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred36_C446), "IDENTIFIER"); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(109); }

			DebugLocation(161, 52);
			Match(input,107,Follow._107_in_synpred36_C449); if (state.failed) return;
			DebugLocation(161, 56);
			PushFollow(Follow._struct_declaration_list_in_synpred36_C451);
			struct_declaration_list();
			PopFollow();
			if (state.failed) return;
			DebugLocation(161, 80);
			Match(input,111,Follow._111_in_synpred36_C453); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred36_C_fragment", 123);
			LeaveRule("synpred36_C_fragment", 123);
			LeaveRule_synpred36_C_fragment();
		}
	}
	// $ANTLR end synpred36_C

	partial void EnterRule_synpred42_C_fragment();
	partial void LeaveRule_synpred42_C_fragment();

	// $ANTLR start synpred42_C
	public void synpred42_C_fragment()
	{
		EnterRule_synpred42_C_fragment();
		EnterRule("synpred42_C_fragment", 129);
		var retval = new XAstParserRuleReturnScope("synpred42_C_fragment");
		try
		{
			// C.g:180:23: ( type_specifier )
			DebugEnterAlt(1);
			// C.g:180:23: type_specifier
			{
			DebugLocation(180, 23);
			PushFollow(Follow._type_specifier_in_synpred42_C529);
			type_specifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred42_C_fragment", 129);
			LeaveRule("synpred42_C_fragment", 129);
			LeaveRule_synpred42_C_fragment();
		}
	}
	// $ANTLR end synpred42_C

	partial void EnterRule_synpred45_C_fragment();
	partial void LeaveRule_synpred45_C_fragment();

	// $ANTLR start synpred45_C
	public void synpred45_C_fragment()
	{
		EnterRule_synpred45_C_fragment();
		EnterRule("synpred45_C_fragment", 132);
		var retval = new XAstParserRuleReturnScope("synpred45_C_fragment");
		try
		{
			// C.g:188:4: ( declarator )
			DebugEnterAlt(1);
			// C.g:188:4: declarator
			{
			DebugLocation(188, 4);
			PushFollow(Follow._declarator_in_synpred45_C564);
			declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred45_C_fragment", 132);
			LeaveRule("synpred45_C_fragment", 132);
			LeaveRule_synpred45_C_fragment();
		}
	}
	// $ANTLR end synpred45_C

	partial void EnterRule_synpred50_C_fragment();
	partial void LeaveRule_synpred50_C_fragment();

	// $ANTLR start synpred50_C
	public void synpred50_C_fragment()
	{
		EnterRule_synpred50_C_fragment();
		EnterRule("synpred50_C_fragment", 137);
		var retval = new XAstParserRuleReturnScope("synpred50_C_fragment");
		try
		{
			// C.g:194:4: ( 'enum' ( gcc_attribute_list )? ( IDENTIFIER )? '{' enumerator_list '}' )
			DebugEnterAlt(1);
			// C.g:194:4: 'enum' ( gcc_attribute_list )? ( IDENTIFIER )? '{' enumerator_list '}'
			{
			DebugLocation(194, 4);
			Match(input,82,Follow._82_in_synpred50_C595); if (state.failed) return;
			DebugLocation(194, 11);
			// C.g:194:11: ( gcc_attribute_list )?
			int alt110=2;
			try { DebugEnterSubRule(110);
			try { DebugEnterDecision(110, false);
			int LA110_0 = input.LA(1);

			if ((LA110_0==64))
			{
				alt110 = 1;
			}
			} finally { DebugExitDecision(110); }
			switch (alt110)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:194:11: gcc_attribute_list
				{
				DebugLocation(194, 11);
				PushFollow(Follow._gcc_attribute_list_in_synpred50_C597);
				gcc_attribute_list();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(110); }

			DebugLocation(194, 31);
			// C.g:194:31: ( IDENTIFIER )?
			int alt111=2;
			try { DebugEnterSubRule(111);
			try { DebugEnterDecision(111, false);
			int LA111_0 = input.LA(1);

			if ((LA111_0==IDENTIFIER))
			{
				alt111 = 1;
			}
			} finally { DebugExitDecision(111); }
			switch (alt111)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:194:31: IDENTIFIER
				{
				DebugLocation(194, 31);
				new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred50_C600), "IDENTIFIER"); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(111); }

			DebugLocation(194, 43);
			Match(input,107,Follow._107_in_synpred50_C603); if (state.failed) return;
			DebugLocation(194, 47);
			PushFollow(Follow._enumerator_list_in_synpred50_C605);
			enumerator_list();
			PopFollow();
			if (state.failed) return;
			DebugLocation(194, 63);
			Match(input,111,Follow._111_in_synpred50_C607); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred50_C_fragment", 137);
			LeaveRule("synpred50_C_fragment", 137);
			LeaveRule_synpred50_C_fragment();
		}
	}
	// $ANTLR end synpred50_C

	partial void EnterRule_synpred58_C_fragment();
	partial void LeaveRule_synpred58_C_fragment();

	// $ANTLR start synpred58_C
	public void synpred58_C_fragment()
	{
		EnterRule_synpred58_C_fragment();
		EnterRule("synpred58_C_fragment", 145);
		var retval = new XAstParserRuleReturnScope("synpred58_C_fragment");
		try
		{
			// C.g:214:31: ( gcc_attribute_list )
			DebugEnterAlt(1);
			// C.g:214:31: gcc_attribute_list
			{
			DebugLocation(214, 31);
			PushFollow(Follow._gcc_attribute_list_in_synpred58_C703);
			gcc_attribute_list();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred58_C_fragment", 145);
			LeaveRule("synpred58_C_fragment", 145);
			LeaveRule_synpred58_C_fragment();
		}
	}
	// $ANTLR end synpred58_C

	partial void EnterRule_synpred59_C_fragment();
	partial void LeaveRule_synpred59_C_fragment();

	// $ANTLR start synpred59_C
	public void synpred59_C_fragment()
	{
		EnterRule_synpred59_C_fragment();
		EnterRule("synpred59_C_fragment", 146);
		var retval = new XAstParserRuleReturnScope("synpred59_C_fragment");
		try
		{
			// C.g:214:4: ( ( pointer )? direct_declarator ( gcc_attribute_list )? )
			DebugEnterAlt(1);
			// C.g:214:4: ( pointer )? direct_declarator ( gcc_attribute_list )?
			{
			DebugLocation(214, 4);
			// C.g:214:4: ( pointer )?
			int alt112=2;
			try { DebugEnterSubRule(112);
			try { DebugEnterDecision(112, false);
			int LA112_0 = input.LA(1);

			if ((LA112_0==32))
			{
				alt112 = 1;
			}
			} finally { DebugExitDecision(112); }
			switch (alt112)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:214:4: pointer
				{
				DebugLocation(214, 4);
				PushFollow(Follow._pointer_in_synpred59_C698);
				pointer();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(112); }

			DebugLocation(214, 13);
			PushFollow(Follow._direct_declarator_in_synpred59_C701);
			direct_declarator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(214, 31);
			// C.g:214:31: ( gcc_attribute_list )?
			int alt113=2;
			try { DebugEnterSubRule(113);
			try { DebugEnterDecision(113, false);
			int LA113_0 = input.LA(1);

			if ((LA113_0==64))
			{
				alt113 = 1;
			}
			} finally { DebugExitDecision(113); }
			switch (alt113)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:214:31: gcc_attribute_list
				{
				DebugLocation(214, 31);
				PushFollow(Follow._gcc_attribute_list_in_synpred59_C703);
				gcc_attribute_list();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(113); }


			}

		}
		finally
		{
			TraceOut("synpred59_C_fragment", 146);
			LeaveRule("synpred59_C_fragment", 146);
			LeaveRule_synpred59_C_fragment();
		}
	}
	// $ANTLR end synpred59_C

	partial void EnterRule_synpred62_C_fragment();
	partial void LeaveRule_synpred62_C_fragment();

	// $ANTLR start synpred62_C
	public void synpred62_C_fragment()
	{
		EnterRule_synpred62_C_fragment();
		EnterRule("synpred62_C_fragment", 149);
		var retval = new XAstParserRuleReturnScope("synpred62_C_fragment");
		try
		{
			// C.g:228:3: ( declarator_suffix )
			DebugEnterAlt(1);
			// C.g:228:3: declarator_suffix
			{
			DebugLocation(228, 3);
			PushFollow(Follow._declarator_suffix_in_synpred62_C750);
			declarator_suffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred62_C_fragment", 149);
			LeaveRule("synpred62_C_fragment", 149);
			LeaveRule_synpred62_C_fragment();
		}
	}
	// $ANTLR end synpred62_C

	partial void EnterRule_synpred65_C_fragment();
	partial void LeaveRule_synpred65_C_fragment();

	// $ANTLR start synpred65_C
	public void synpred65_C_fragment()
	{
		EnterRule_synpred65_C_fragment();
		EnterRule("synpred65_C_fragment", 152);
		var retval = new XAstParserRuleReturnScope("synpred65_C_fragment");
		try
		{
			// C.g:234:6: ( '(' parameter_type_list ')' )
			DebugEnterAlt(1);
			// C.g:234:6: '(' parameter_type_list ')'
			{
			DebugLocation(234, 6);
			Match(input,30,Follow._30_in_synpred65_C784); if (state.failed) return;
			DebugLocation(234, 10);
			PushFollow(Follow._parameter_type_list_in_synpred65_C786);
			parameter_type_list();
			PopFollow();
			if (state.failed) return;
			DebugLocation(234, 30);
			Match(input,31,Follow._31_in_synpred65_C788); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred65_C_fragment", 152);
			LeaveRule("synpred65_C_fragment", 152);
			LeaveRule_synpred65_C_fragment();
		}
	}
	// $ANTLR end synpred65_C

	partial void EnterRule_synpred66_C_fragment();
	partial void LeaveRule_synpred66_C_fragment();

	// $ANTLR start synpred66_C
	public void synpred66_C_fragment()
	{
		EnterRule_synpred66_C_fragment();
		EnterRule("synpred66_C_fragment", 153);
		var retval = new XAstParserRuleReturnScope("synpred66_C_fragment");
		try
		{
			// C.g:235:6: ( '(' identifier_list ')' )
			DebugEnterAlt(1);
			// C.g:235:6: '(' identifier_list ')'
			{
			DebugLocation(235, 6);
			Match(input,30,Follow._30_in_synpred66_C795); if (state.failed) return;
			DebugLocation(235, 10);
			PushFollow(Follow._identifier_list_in_synpred66_C797);
			identifier_list();
			PopFollow();
			if (state.failed) return;
			DebugLocation(235, 26);
			Match(input,31,Follow._31_in_synpred66_C799); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred66_C_fragment", 153);
			LeaveRule("synpred66_C_fragment", 153);
			LeaveRule_synpred66_C_fragment();
		}
	}
	// $ANTLR end synpred66_C

	partial void EnterRule_synpred67_C_fragment();
	partial void LeaveRule_synpred67_C_fragment();

	// $ANTLR start synpred67_C
	public void synpred67_C_fragment()
	{
		EnterRule_synpred67_C_fragment();
		EnterRule("synpred67_C_fragment", 154);
		var retval = new XAstParserRuleReturnScope("synpred67_C_fragment");
		try
		{
			// C.g:240:10: ( type_qualifier )
			DebugEnterAlt(1);
			// C.g:240:10: type_qualifier
			{
			DebugLocation(240, 10);
			PushFollow(Follow._type_qualifier_in_synpred67_C825);
			type_qualifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred67_C_fragment", 154);
			LeaveRule("synpred67_C_fragment", 154);
			LeaveRule_synpred67_C_fragment();
		}
	}
	// $ANTLR end synpred67_C

	partial void EnterRule_synpred68_C_fragment();
	partial void LeaveRule_synpred68_C_fragment();

	// $ANTLR start synpred68_C
	public void synpred68_C_fragment()
	{
		EnterRule_synpred68_C_fragment();
		EnterRule("synpred68_C_fragment", 155);
		var retval = new XAstParserRuleReturnScope("synpred68_C_fragment");
		try
		{
			// C.g:240:27: ( gcc_attribute )
			DebugEnterAlt(1);
			// C.g:240:27: gcc_attribute
			{
			DebugLocation(240, 27);
			PushFollow(Follow._gcc_attribute_in_synpred68_C829);
			gcc_attribute();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred68_C_fragment", 155);
			LeaveRule("synpred68_C_fragment", 155);
			LeaveRule_synpred68_C_fragment();
		}
	}
	// $ANTLR end synpred68_C

	partial void EnterRule_synpred69_C_fragment();
	partial void LeaveRule_synpred69_C_fragment();

	// $ANTLR start synpred69_C
	public void synpred69_C_fragment()
	{
		EnterRule_synpred69_C_fragment();
		EnterRule("synpred69_C_fragment", 156);
		var retval = new XAstParserRuleReturnScope("synpred69_C_fragment");
		try
		{
			// C.g:240:5: ( '*' ( type_qualifier | gcc_attribute )* )
			DebugEnterAlt(1);
			// C.g:240:5: '*' ( type_qualifier | gcc_attribute )*
			{
			DebugLocation(240, 5);
			Match(input,32,Follow._32_in_synpred69_C822); if (state.failed) return;
			DebugLocation(240, 9);
			// C.g:240:9: ( type_qualifier | gcc_attribute )*
			try { DebugEnterSubRule(114);
			while (true)
			{
				int alt114=3;
				try { DebugEnterDecision(114, false);
				int LA114_0 = input.LA(1);

				if ((LA114_0==71||LA114_0==76||LA114_0==92||LA114_0==105))
				{
					alt114 = 1;
				}
				else if ((LA114_0==64))
				{
					alt114 = 2;
				}


				} finally { DebugExitDecision(114); }
				switch ( alt114 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:240:10: type_qualifier
					{
					DebugLocation(240, 10);
					PushFollow(Follow._type_qualifier_in_synpred69_C825);
					type_qualifier();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:240:27: gcc_attribute
					{
					DebugLocation(240, 27);
					PushFollow(Follow._gcc_attribute_in_synpred69_C829);
					gcc_attribute();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop114;
				}
			}

			loop114:
				;

			} finally { DebugExitSubRule(114); }


			}

		}
		finally
		{
			TraceOut("synpred69_C_fragment", 156);
			LeaveRule("synpred69_C_fragment", 156);
			LeaveRule_synpred69_C_fragment();
		}
	}
	// $ANTLR end synpred69_C

	partial void EnterRule_synpred72_C_fragment();
	partial void LeaveRule_synpred72_C_fragment();

	// $ANTLR start synpred72_C
	public void synpred72_C_fragment()
	{
		EnterRule_synpred72_C_fragment();
		EnterRule("synpred72_C_fragment", 159);
		var retval = new XAstParserRuleReturnScope("synpred72_C_fragment");
		try
		{
			// C.g:252:28: ( declarator )
			DebugEnterAlt(1);
			// C.g:252:28: declarator
			{
			DebugLocation(252, 28);
			PushFollow(Follow._declarator_in_synpred72_C883);
			declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred72_C_fragment", 159);
			LeaveRule("synpred72_C_fragment", 159);
			LeaveRule_synpred72_C_fragment();
		}
	}
	// $ANTLR end synpred72_C

	partial void EnterRule_synpred73_C_fragment();
	partial void LeaveRule_synpred73_C_fragment();

	// $ANTLR start synpred73_C
	public void synpred73_C_fragment()
	{
		EnterRule_synpred73_C_fragment();
		EnterRule("synpred73_C_fragment", 160);
		var retval = new XAstParserRuleReturnScope("synpred73_C_fragment");
		try
		{
			// C.g:252:39: ( abstract_declarator )
			DebugEnterAlt(1);
			// C.g:252:39: abstract_declarator
			{
			DebugLocation(252, 39);
			PushFollow(Follow._abstract_declarator_in_synpred73_C885);
			abstract_declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred73_C_fragment", 160);
			LeaveRule("synpred73_C_fragment", 160);
			LeaveRule_synpred73_C_fragment();
		}
	}
	// $ANTLR end synpred73_C

	partial void EnterRule_synpred76_C_fragment();
	partial void LeaveRule_synpred76_C_fragment();

	// $ANTLR start synpred76_C
	public void synpred76_C_fragment()
	{
		EnterRule_synpred76_C_fragment();
		EnterRule("synpred76_C_fragment", 163);
		var retval = new XAstParserRuleReturnScope("synpred76_C_fragment");
		try
		{
			// C.g:264:4: ( pointer )
			DebugEnterAlt(1);
			// C.g:264:4: pointer
			{
			DebugLocation(264, 4);
			PushFollow(Follow._pointer_in_synpred76_C930);
			pointer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred76_C_fragment", 163);
			LeaveRule("synpred76_C_fragment", 163);
			LeaveRule_synpred76_C_fragment();
		}
	}
	// $ANTLR end synpred76_C

	partial void EnterRule_synpred80_C_fragment();
	partial void LeaveRule_synpred80_C_fragment();

	// $ANTLR start synpred80_C
	public void synpred80_C_fragment()
	{
		EnterRule_synpred80_C_fragment();
		EnterRule("synpred80_C_fragment", 167);
		var retval = new XAstParserRuleReturnScope("synpred80_C_fragment");
		try
		{
			// C.g:269:6: ( '(' ( gcc_attribute_list )? abstract_declarator ')' )
			DebugEnterAlt(1);
			// C.g:269:6: '(' ( gcc_attribute_list )? abstract_declarator ')'
			{
			DebugLocation(269, 6);
			Match(input,30,Follow._30_in_synpred80_C954); if (state.failed) return;
			DebugLocation(269, 10);
			// C.g:269:10: ( gcc_attribute_list )?
			int alt115=2;
			try { DebugEnterSubRule(115);
			try { DebugEnterDecision(115, false);
			int LA115_0 = input.LA(1);

			if ((LA115_0==64))
			{
				alt115 = 1;
			}
			} finally { DebugExitDecision(115); }
			switch (alt115)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:269:10: gcc_attribute_list
				{
				DebugLocation(269, 10);
				PushFollow(Follow._gcc_attribute_list_in_synpred80_C956);
				gcc_attribute_list();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(115); }

			DebugLocation(269, 30);
			PushFollow(Follow._abstract_declarator_in_synpred80_C959);
			abstract_declarator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(269, 50);
			Match(input,31,Follow._31_in_synpred80_C961); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred80_C_fragment", 167);
			LeaveRule("synpred80_C_fragment", 167);
			LeaveRule_synpred80_C_fragment();
		}
	}
	// $ANTLR end synpred80_C

	partial void EnterRule_synpred81_C_fragment();
	partial void LeaveRule_synpred81_C_fragment();

	// $ANTLR start synpred81_C
	public void synpred81_C_fragment()
	{
		EnterRule_synpred81_C_fragment();
		EnterRule("synpred81_C_fragment", 168);
		var retval = new XAstParserRuleReturnScope("synpred81_C_fragment");
		try
		{
			// C.g:269:85: ( abstract_declarator_suffix )
			DebugEnterAlt(1);
			// C.g:269:85: abstract_declarator_suffix
			{
			DebugLocation(269, 85);
			PushFollow(Follow._abstract_declarator_suffix_in_synpred81_C969);
			abstract_declarator_suffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred81_C_fragment", 168);
			LeaveRule("synpred81_C_fragment", 168);
			LeaveRule_synpred81_C_fragment();
		}
	}
	// $ANTLR end synpred81_C

	partial void EnterRule_synpred84_C_fragment();
	partial void LeaveRule_synpred84_C_fragment();

	// $ANTLR start synpred84_C
	public void synpred84_C_fragment()
	{
		EnterRule_synpred84_C_fragment();
		EnterRule("synpred84_C_fragment", 171);
		var retval = new XAstParserRuleReturnScope("synpred84_C_fragment");
		try
		{
			// C.g:273:4: ( '[' ( gcc_array_type_modifier )* ( constant_expression )? ']' )
			DebugEnterAlt(1);
			// C.g:273:4: '[' ( gcc_array_type_modifier )* ( constant_expression )? ']'
			{
			DebugLocation(273, 4);
			Match(input,59,Follow._59_in_synpred84_C981); if (state.failed) return;
			DebugLocation(273, 8);
			// C.g:273:8: ( gcc_array_type_modifier )*
			try { DebugEnterSubRule(116);
			while (true)
			{
				int alt116=2;
				try { DebugEnterDecision(116, false);
				int LA116_0 = input.LA(1);

				if ((LA116_0==64||LA116_0==71||LA116_0==76||LA116_0==92||LA116_0==105))
				{
					alt116 = 1;
				}


				} finally { DebugExitDecision(116); }
				switch ( alt116 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:273:8: gcc_array_type_modifier
					{
					DebugLocation(273, 8);
					PushFollow(Follow._gcc_array_type_modifier_in_synpred84_C983);
					gcc_array_type_modifier();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop116;
				}
			}

			loop116:
				;

			} finally { DebugExitSubRule(116); }

			DebugLocation(273, 33);
			// C.g:273:33: ( constant_expression )?
			int alt117=2;
			try { DebugEnterSubRule(117);
			try { DebugEnterDecision(117, false);
			int LA117_0 = input.LA(1);

			if ((LA117_0==CHARACTER_LITERAL||LA117_0==DECIMAL_LITERAL||LA117_0==FLOATING_POINT_LITERAL||LA117_0==HEX_LITERAL||LA117_0==IDENTIFIER||LA117_0==OCTAL_LITERAL||LA117_0==STRING_LITERAL||LA117_0==23||LA117_0==28||LA117_0==30||LA117_0==32||(LA117_0>=34 && LA117_0<=35)||(LA117_0>=38 && LA117_0<=39)||LA117_0==63||(LA117_0>=65 && LA117_0<=66)||LA117_0==68||LA117_0==96||LA117_0==112))
			{
				alt117 = 1;
			}
			} finally { DebugExitDecision(117); }
			switch (alt117)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:273:33: constant_expression
				{
				DebugLocation(273, 33);
				PushFollow(Follow._constant_expression_in_synpred84_C986);
				constant_expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(117); }

			DebugLocation(273, 54);
			Match(input,60,Follow._60_in_synpred84_C989); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred84_C_fragment", 171);
			LeaveRule("synpred84_C_fragment", 171);
			LeaveRule_synpred84_C_fragment();
		}
	}
	// $ANTLR end synpred84_C

	partial void EnterRule_synpred86_C_fragment();
	partial void LeaveRule_synpred86_C_fragment();

	// $ANTLR start synpred86_C
	public void synpred86_C_fragment()
	{
		EnterRule_synpred86_C_fragment();
		EnterRule("synpred86_C_fragment", 173);
		var retval = new XAstParserRuleReturnScope("synpred86_C_fragment");
		try
		{
			// C.g:274:4: ( '[' ( gcc_array_type_modifier )* '*' ']' )
			DebugEnterAlt(1);
			// C.g:274:4: '[' ( gcc_array_type_modifier )* '*' ']'
			{
			DebugLocation(274, 4);
			Match(input,59,Follow._59_in_synpred86_C994); if (state.failed) return;
			DebugLocation(274, 8);
			// C.g:274:8: ( gcc_array_type_modifier )*
			try { DebugEnterSubRule(118);
			while (true)
			{
				int alt118=2;
				try { DebugEnterDecision(118, false);
				int LA118_0 = input.LA(1);

				if ((LA118_0==64||LA118_0==71||LA118_0==76||LA118_0==92||LA118_0==105))
				{
					alt118 = 1;
				}


				} finally { DebugExitDecision(118); }
				switch ( alt118 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:274:8: gcc_array_type_modifier
					{
					DebugLocation(274, 8);
					PushFollow(Follow._gcc_array_type_modifier_in_synpred86_C996);
					gcc_array_type_modifier();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop118;
				}
			}

			loop118:
				;

			} finally { DebugExitSubRule(118); }

			DebugLocation(274, 33);
			Match(input,32,Follow._32_in_synpred86_C999); if (state.failed) return;
			DebugLocation(274, 37);
			Match(input,60,Follow._60_in_synpred86_C1001); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred86_C_fragment", 173);
			LeaveRule("synpred86_C_fragment", 173);
			LeaveRule_synpred86_C_fragment();
		}
	}
	// $ANTLR end synpred86_C

	partial void EnterRule_synpred97_C_fragment();
	partial void LeaveRule_synpred97_C_fragment();

	// $ANTLR start synpred97_C
	public void synpred97_C_fragment()
	{
		EnterRule_synpred97_C_fragment();
		EnterRule("synpred97_C_fragment", 184);
		var retval = new XAstParserRuleReturnScope("synpred97_C_fragment");
		try
		{
			// C.g:302:4: ( '(' type_name ')' cast_expression )
			DebugEnterAlt(1);
			// C.g:302:4: '(' type_name ')' cast_expression
			{
			DebugLocation(302, 4);
			Match(input,30,Follow._30_in_synpred97_C1144); if (state.failed) return;
			DebugLocation(302, 8);
			PushFollow(Follow._type_name_in_synpred97_C1146);
			type_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(302, 18);
			Match(input,31,Follow._31_in_synpred97_C1148); if (state.failed) return;
			DebugLocation(302, 22);
			PushFollow(Follow._cast_expression_in_synpred97_C1150);
			cast_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred97_C_fragment", 184);
			LeaveRule("synpred97_C_fragment", 184);
			LeaveRule_synpred97_C_fragment();
		}
	}
	// $ANTLR end synpred97_C

	partial void EnterRule_synpred102_C_fragment();
	partial void LeaveRule_synpred102_C_fragment();

	// $ANTLR start synpred102_C
	public void synpred102_C_fragment()
	{
		EnterRule_synpred102_C_fragment();
		EnterRule("synpred102_C_fragment", 189);
		var retval = new XAstParserRuleReturnScope("synpred102_C_fragment");
		try
		{
			// C.g:311:4: ( 'sizeof' unary_expression )
			DebugEnterAlt(1);
			// C.g:311:4: 'sizeof' unary_expression
			{
			DebugLocation(311, 4);
			Match(input,96,Follow._96_in_synpred102_C1192); if (state.failed) return;
			DebugLocation(311, 13);
			PushFollow(Follow._unary_expression_in_synpred102_C1194);
			unary_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred102_C_fragment", 189);
			LeaveRule("synpred102_C_fragment", 189);
			LeaveRule_synpred102_C_fragment();
		}
	}
	// $ANTLR end synpred102_C

	partial void EnterRule_synpred103_C_fragment();
	partial void LeaveRule_synpred103_C_fragment();

	// $ANTLR start synpred103_C
	public void synpred103_C_fragment()
	{
		EnterRule_synpred103_C_fragment();
		EnterRule("synpred103_C_fragment", 190);
		var retval = new XAstParserRuleReturnScope("synpred103_C_fragment");
		try
		{
			// C.g:312:4: ( 'sizeof' '(' type_name ')' )
			DebugEnterAlt(1);
			// C.g:312:4: 'sizeof' '(' type_name ')'
			{
			DebugLocation(312, 4);
			Match(input,96,Follow._96_in_synpred103_C1199); if (state.failed) return;
			DebugLocation(312, 13);
			Match(input,30,Follow._30_in_synpred103_C1201); if (state.failed) return;
			DebugLocation(312, 17);
			PushFollow(Follow._type_name_in_synpred103_C1203);
			type_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(312, 27);
			Match(input,31,Follow._31_in_synpred103_C1205); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred103_C_fragment", 190);
			LeaveRule("synpred103_C_fragment", 190);
			LeaveRule_synpred103_C_fragment();
		}
	}
	// $ANTLR end synpred103_C

	partial void EnterRule_synpred104_C_fragment();
	partial void LeaveRule_synpred104_C_fragment();

	// $ANTLR start synpred104_C
	public void synpred104_C_fragment()
	{
		EnterRule_synpred104_C_fragment();
		EnterRule("synpred104_C_fragment", 191);
		var retval = new XAstParserRuleReturnScope("synpred104_C_fragment");
		try
		{
			// C.g:314:4: ( '__alignof__' unary_expression )
			DebugEnterAlt(1);
			// C.g:314:4: '__alignof__' unary_expression
			{
			DebugLocation(314, 4);
			Match(input,63,Follow._63_in_synpred104_C1212); if (state.failed) return;
			DebugLocation(314, 18);
			PushFollow(Follow._unary_expression_in_synpred104_C1214);
			unary_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred104_C_fragment", 191);
			LeaveRule("synpred104_C_fragment", 191);
			LeaveRule_synpred104_C_fragment();
		}
	}
	// $ANTLR end synpred104_C

	partial void EnterRule_synpred105_C_fragment();
	partial void LeaveRule_synpred105_C_fragment();

	// $ANTLR start synpred105_C
	public void synpred105_C_fragment()
	{
		EnterRule_synpred105_C_fragment();
		EnterRule("synpred105_C_fragment", 192);
		var retval = new XAstParserRuleReturnScope("synpred105_C_fragment");
		try
		{
			// C.g:315:4: ( '__alignof__' '(' type_name ')' )
			DebugEnterAlt(1);
			// C.g:315:4: '__alignof__' '(' type_name ')'
			{
			DebugLocation(315, 4);
			Match(input,63,Follow._63_in_synpred105_C1219); if (state.failed) return;
			DebugLocation(315, 18);
			Match(input,30,Follow._30_in_synpred105_C1221); if (state.failed) return;
			DebugLocation(315, 22);
			PushFollow(Follow._type_name_in_synpred105_C1223);
			type_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(315, 32);
			Match(input,31,Follow._31_in_synpred105_C1225); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred105_C_fragment", 192);
			LeaveRule("synpred105_C_fragment", 192);
			LeaveRule_synpred105_C_fragment();
		}
	}
	// $ANTLR end synpred105_C

	partial void EnterRule_synpred129_C_fragment();
	partial void LeaveRule_synpred129_C_fragment();

	// $ANTLR start synpred129_C
	public void synpred129_C_fragment()
	{
		EnterRule_synpred129_C_fragment();
		EnterRule("synpred129_C_fragment", 216);
		var retval = new XAstParserRuleReturnScope("synpred129_C_fragment");
		try
		{
			// C.g:393:4: ( lvalue assignment_operator assignment_expression )
			DebugEnterAlt(1);
			// C.g:393:4: lvalue assignment_operator assignment_expression
			{
			DebugLocation(393, 4);
			PushFollow(Follow._lvalue_in_synpred129_C1552);
			lvalue();
			PopFollow();
			if (state.failed) return;
			DebugLocation(393, 11);
			PushFollow(Follow._assignment_operator_in_synpred129_C1554);
			assignment_operator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(393, 31);
			PushFollow(Follow._assignment_expression_in_synpred129_C1556);
			assignment_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred129_C_fragment", 216);
			LeaveRule("synpred129_C_fragment", 216);
			LeaveRule_synpred129_C_fragment();
		}
	}
	// $ANTLR end synpred129_C

	partial void EnterRule_synpred141_C_fragment();
	partial void LeaveRule_synpred141_C_fragment();

	// $ANTLR start synpred141_C
	public void synpred141_C_fragment()
	{
		EnterRule_synpred141_C_fragment();
		EnterRule("synpred141_C_fragment", 228);
		var retval = new XAstParserRuleReturnScope("synpred141_C_fragment");
		try
		{
			// C.g:416:4: ( logical_or_expression ( '?' expression ':' conditional_expression )? )
			DebugEnterAlt(1);
			// C.g:416:4: logical_or_expression ( '?' expression ':' conditional_expression )?
			{
			DebugLocation(416, 4);
			PushFollow(Follow._logical_or_expression_in_synpred141_C1645);
			logical_or_expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(416, 26);
			// C.g:416:26: ( '?' expression ':' conditional_expression )?
			int alt120=2;
			try { DebugEnterSubRule(120);
			try { DebugEnterDecision(120, false);
			int LA120_0 = input.LA(1);

			if ((LA120_0==58))
			{
				alt120 = 1;
			}
			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:416:27: '?' expression ':' conditional_expression
				{
				DebugLocation(416, 27);
				Match(input,58,Follow._58_in_synpred141_C1648); if (state.failed) return;
				DebugLocation(416, 31);
				PushFollow(Follow._expression_in_synpred141_C1650);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(416, 42);
				Match(input,46,Follow._46_in_synpred141_C1652); if (state.failed) return;
				DebugLocation(416, 46);
				PushFollow(Follow._conditional_expression_in_synpred141_C1654);
				conditional_expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(120); }


			}

		}
		finally
		{
			TraceOut("synpred141_C_fragment", 228);
			LeaveRule("synpred141_C_fragment", 228);
			LeaveRule_synpred141_C_fragment();
		}
	}
	// $ANTLR end synpred141_C

	partial void EnterRule_synpred162_C_fragment();
	partial void LeaveRule_synpred162_C_fragment();

	// $ANTLR start synpred162_C
	public void synpred162_C_fragment()
	{
		EnterRule_synpred162_C_fragment();
		EnterRule("synpred162_C_fragment", 249);
		var retval = new XAstParserRuleReturnScope("synpred162_C_fragment");
		try
		{
			// C.g:474:8: ( declaration )
			DebugEnterAlt(1);
			// C.g:474:8: declaration
			{
			DebugLocation(474, 8);
			PushFollow(Follow._declaration_in_synpred162_C1925);
			declaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred162_C_fragment", 249);
			LeaveRule("synpred162_C_fragment", 249);
			LeaveRule_synpred162_C_fragment();
		}
	}
	// $ANTLR end synpred162_C

	partial void EnterRule_synpred178_C_fragment();
	partial void LeaveRule_synpred178_C_fragment();

	// $ANTLR start synpred178_C
	public void synpred178_C_fragment()
	{
		EnterRule_synpred178_C_fragment();
		EnterRule("synpred178_C_fragment", 265);
		var retval = new XAstParserRuleReturnScope("synpred178_C_fragment");
		try
		{
			// C.g:524:4: ( gcc_attribute )
			DebugEnterAlt(1);
			// C.g:524:4: gcc_attribute
			{
			DebugLocation(524, 4);
			PushFollow(Follow._gcc_attribute_in_synpred178_C2177);
			gcc_attribute();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred178_C_fragment", 265);
			LeaveRule("synpred178_C_fragment", 265);
			LeaveRule_synpred178_C_fragment();
		}
	}
	// $ANTLR end synpred178_C

	partial void EnterRule_synpred180_C_fragment();
	partial void LeaveRule_synpred180_C_fragment();

	// $ANTLR start synpred180_C
	public void synpred180_C_fragment()
	{
		EnterRule_synpred180_C_fragment();
		EnterRule("synpred180_C_fragment", 267);
		var retval = new XAstParserRuleReturnScope("synpred180_C_fragment");
		try
		{
			// C.g:536:4: ( gcc_attribute_name )
			DebugEnterAlt(1);
			// C.g:536:4: gcc_attribute_name
			{
			DebugLocation(536, 4);
			PushFollow(Follow._gcc_attribute_name_in_synpred180_C2228);
			gcc_attribute_name();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred180_C_fragment", 267);
			LeaveRule("synpred180_C_fragment", 267);
			LeaveRule_synpred180_C_fragment();
		}
	}
	// $ANTLR end synpred180_C

	partial void EnterRule_synpred184_C_fragment();
	partial void LeaveRule_synpred184_C_fragment();

	// $ANTLR start synpred184_C
	public void synpred184_C_fragment()
	{
		EnterRule_synpred184_C_fragment();
		EnterRule("synpred184_C_fragment", 271);
		var retval = new XAstParserRuleReturnScope("synpred184_C_fragment");
		try
		{
			// C.g:541:4: ( IDENTIFIER )
			DebugEnterAlt(1);
			// C.g:541:4: IDENTIFIER
			{
			DebugLocation(541, 4);
			new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred184_C2265), "IDENTIFIER"); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred184_C_fragment", 271);
			LeaveRule("synpred184_C_fragment", 271);
			LeaveRule_synpred184_C_fragment();
		}
	}
	// $ANTLR end synpred184_C

	partial void EnterRule_synpred186_C_fragment();
	partial void LeaveRule_synpred186_C_fragment();

	// $ANTLR start synpred186_C
	public void synpred186_C_fragment()
	{
		EnterRule_synpred186_C_fragment();
		EnterRule("synpred186_C_fragment", 273);
		var retval = new XAstParserRuleReturnScope("synpred186_C_fragment");
		try
		{
			// C.g:543:4: ( type_specifier )
			DebugEnterAlt(1);
			// C.g:543:4: type_specifier
			{
			DebugLocation(543, 4);
			PushFollow(Follow._type_specifier_in_synpred186_C2275);
			type_specifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred186_C_fragment", 273);
			LeaveRule("synpred186_C_fragment", 273);
			LeaveRule_synpred186_C_fragment();
		}
	}
	// $ANTLR end synpred186_C

	partial void EnterRule_synpred190_C_fragment();
	partial void LeaveRule_synpred190_C_fragment();

	// $ANTLR start synpred190_C
	public void synpred190_C_fragment()
	{
		EnterRule_synpred190_C_fragment();
		EnterRule("synpred190_C_fragment", 277);
		var retval = new XAstParserRuleReturnScope("synpred190_C_fragment");
		try
		{
			// C.g:566:19: ( type_name )
			DebugEnterAlt(1);
			// C.g:566:19: type_name
			{
			DebugLocation(566, 19);
			PushFollow(Follow._type_name_in_synpred190_C2366);
			type_name();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred190_C_fragment", 277);
			LeaveRule("synpred190_C_fragment", 277);
			LeaveRule_synpred190_C_fragment();
		}
	}
	// $ANTLR end synpred190_C
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA36 dfa36;
	private DFA39 dfa39;
	private DFA38 dfa38;
	private DFA69 dfa69;
	private DFA71 dfa71;
	private DFA82 dfa82;
	private DFA97 dfa97;
	private DFA101 dfa101;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa36 = new DFA36( this, SpecialStateTransition36 );
		dfa39 = new DFA39( this, SpecialStateTransition39 );
		dfa38 = new DFA38( this, SpecialStateTransition38 );
		dfa69 = new DFA69( this, SpecialStateTransition69 );
		dfa71 = new DFA71( this, SpecialStateTransition71 );
		dfa82 = new DFA82( this, SpecialStateTransition82 );
		dfa97 = new DFA97( this, SpecialStateTransition97 );
		dfa101 = new DFA101( this, SpecialStateTransition101 );
	}

	private class DFA36 : DFA
	{
		private const string DFA36_eotS =
			"\x49\xFFFF";
		private const string DFA36_eofS =
			"\x1\x1\x48\xFFFF";
		private const string DFA36_minS =
			"\x1\xD\x1B\xFFFF\x1\xD\x1\x4\x2\x0\x1\xFFFF\x1\x0\x2\xFFFF\x11\x0\x2"+
			"\xFFFF\x11\x0\x1\xFFFF";
		private const string DFA36_maxS =
			"\x1\x6B\x1B\xFFFF\x1\x69\x1\x70\x2\x0\x1\xFFFF\x1\x0\x2\xFFFF\x11\x0"+
			"\x2\xFFFF\x11\x0\x1\xFFFF";
		private const string DFA36_acceptS =
			"\x1\xFFFF\x1\x2\x46\xFFFF\x1\x1";
		private const string DFA36_specialS =
			"\x1E\xFFFF\x1\x0\x1\x1\x1\xFFFF\x1\x2\x2\xFFFF\x1\x3\x1\x4\x1\x5\x1\x6"+
			"\x1\x7\x1\x8\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11"+
			"\x1\x12\x1\x13\x2\xFFFF\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1"+
			"\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1"+
			"\x24\x1\xFFFF}>";
		private static readonly string[] DFA36_transitionS =
			{
				"\x1\x1\x10\xFFFF\x1\x1C\x2\x1\x4\xFFFF\x1\x1\x8\xFFFF\x2\x1\x4\xFFFF"+
				"\x1\x1\x6\xFFFF\x1\x1D\x4\xFFFF\x1\x1\x2\xFFFF\x6\x1\x2\xFFFF\x2\x1"+
				"\x3\xFFFF\x1\x1\x1\xFFFF\x3\x1\x3\xFFFF\x5\x1\x1\xFFFF\x2\x1\x1\xFFFF"+
				"\x2\x1\x1\xFFFF\x6\x1\x1\xFFFF\x1\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x21\x10\xFFFF\x1\x1\x1\x1E\x1\x1\x1A\xFFFF\x1\x1\x4\xFFFF\x1\x1F"+
				"\x2\xFFFF\x1\x32\x1\x33\x2\x32\x1\x31\x1\x24\x2\xFFFF\x1\x26\x1\x31"+
				"\x3\xFFFF\x1\x2B\x1\xFFFF\x1\x2F\x1\x24\x1\x2A\x3\xFFFF\x1\x32\x1\x28"+
				"\x1\x29\x1\x24\x1\x31\x1\xFFFF\x1\x27\x1\x2C\x1\xFFFF\x1\x24\x1\x2E"+
				"\x2\xFFFF\x1\x30\x1\x2E\x1\x2D\x1\x25\x1\x31",
				"\x1\x3C\x1\xFFFF\x1\x3B\x2\xFFFF\x1\x3E\x1\xFFFF\x1\x39\x1\xFFFF\x1"+
				"\x38\x4\xFFFF\x1\x3A\x1\xFFFF\x1\x3D\x2\xFFFF\x1\x47\x4\xFFFF\x1\x47"+
				"\x1\xFFFF\x1\x37\x1\xFFFF\x1\x43\x1\xFFFF\x1\x47\x1\x41\x2\xFFFF\x1"+
				"\x47\x1\x42\x14\xFFFF\x1\x34\x2\xFFFF\x1\x45\x1\x1\x1\x40\x1\x3F\x1"+
				"\xFFFF\x1\x46\x2\xFFFF\x1\x1\x4\xFFFF\x1\x1\xF\xFFFF\x1\x1\x3\xFFFF"+
				"\x1\x44\x8\xFFFF\x1\x1\x6\xFFFF\x1\x47",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA36_eot = DFA.UnpackEncodedString(DFA36_eotS);
		private static readonly short[] DFA36_eof = DFA.UnpackEncodedString(DFA36_eofS);
		private static readonly char[] DFA36_min = DFA.UnpackEncodedStringToUnsignedChars(DFA36_minS);
		private static readonly char[] DFA36_max = DFA.UnpackEncodedStringToUnsignedChars(DFA36_maxS);
		private static readonly short[] DFA36_accept = DFA.UnpackEncodedString(DFA36_acceptS);
		private static readonly short[] DFA36_special = DFA.UnpackEncodedString(DFA36_specialS);
		private static readonly short[][] DFA36_transition;

		static DFA36()
		{
			int numStates = DFA36_transitionS.Length;
			DFA36_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA36_transition[i] = DFA.UnpackEncodedString(DFA36_transitionS[i]);
			}
		}

		public DFA36( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 36;
			this.eot = DFA36_eot;
			this.eof = DFA36_eof;
			this.min = DFA36_min;
			this.max = DFA36_max;
			this.accept = DFA36_accept;
			this.special = DFA36_special;
			this.transition = DFA36_transition;
		}

		public override string Description { get { return "()* loopback of 228:3: ( declarator_suffix )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition36(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA36_30 = input.LA(1);


				int index36_30 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_30);
				if (s >= 0) return s;
				break;

			case 1:
				int LA36_31 = input.LA(1);


				int index36_31 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_31);
				if (s >= 0) return s;
				break;

			case 2:
				int LA36_33 = input.LA(1);


				int index36_33 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_33);
				if (s >= 0) return s;
				break;

			case 3:
				int LA36_36 = input.LA(1);


				int index36_36 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_36);
				if (s >= 0) return s;
				break;

			case 4:
				int LA36_37 = input.LA(1);


				int index36_37 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_37);
				if (s >= 0) return s;
				break;

			case 5:
				int LA36_38 = input.LA(1);


				int index36_38 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_38);
				if (s >= 0) return s;
				break;

			case 6:
				int LA36_39 = input.LA(1);


				int index36_39 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_39);
				if (s >= 0) return s;
				break;

			case 7:
				int LA36_40 = input.LA(1);


				int index36_40 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_40);
				if (s >= 0) return s;
				break;

			case 8:
				int LA36_41 = input.LA(1);


				int index36_41 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_41);
				if (s >= 0) return s;
				break;

			case 9:
				int LA36_42 = input.LA(1);


				int index36_42 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_42);
				if (s >= 0) return s;
				break;

			case 10:
				int LA36_43 = input.LA(1);


				int index36_43 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_43);
				if (s >= 0) return s;
				break;

			case 11:
				int LA36_44 = input.LA(1);


				int index36_44 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_44);
				if (s >= 0) return s;
				break;

			case 12:
				int LA36_45 = input.LA(1);


				int index36_45 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_45);
				if (s >= 0) return s;
				break;

			case 13:
				int LA36_46 = input.LA(1);


				int index36_46 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_46);
				if (s >= 0) return s;
				break;

			case 14:
				int LA36_47 = input.LA(1);


				int index36_47 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_47);
				if (s >= 0) return s;
				break;

			case 15:
				int LA36_48 = input.LA(1);


				int index36_48 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_48);
				if (s >= 0) return s;
				break;

			case 16:
				int LA36_49 = input.LA(1);


				int index36_49 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_49);
				if (s >= 0) return s;
				break;

			case 17:
				int LA36_50 = input.LA(1);


				int index36_50 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_50);
				if (s >= 0) return s;
				break;

			case 18:
				int LA36_51 = input.LA(1);


				int index36_51 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_51);
				if (s >= 0) return s;
				break;

			case 19:
				int LA36_52 = input.LA(1);


				int index36_52 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_52);
				if (s >= 0) return s;
				break;

			case 20:
				int LA36_55 = input.LA(1);


				int index36_55 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_55);
				if (s >= 0) return s;
				break;

			case 21:
				int LA36_56 = input.LA(1);


				int index36_56 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_56);
				if (s >= 0) return s;
				break;

			case 22:
				int LA36_57 = input.LA(1);


				int index36_57 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_57);
				if (s >= 0) return s;
				break;

			case 23:
				int LA36_58 = input.LA(1);


				int index36_58 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_58);
				if (s >= 0) return s;
				break;

			case 24:
				int LA36_59 = input.LA(1);


				int index36_59 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_59);
				if (s >= 0) return s;
				break;

			case 25:
				int LA36_60 = input.LA(1);


				int index36_60 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_60);
				if (s >= 0) return s;
				break;

			case 26:
				int LA36_61 = input.LA(1);


				int index36_61 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_61);
				if (s >= 0) return s;
				break;

			case 27:
				int LA36_62 = input.LA(1);


				int index36_62 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_62);
				if (s >= 0) return s;
				break;

			case 28:
				int LA36_63 = input.LA(1);


				int index36_63 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_63);
				if (s >= 0) return s;
				break;

			case 29:
				int LA36_64 = input.LA(1);


				int index36_64 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_64);
				if (s >= 0) return s;
				break;

			case 30:
				int LA36_65 = input.LA(1);


				int index36_65 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_65);
				if (s >= 0) return s;
				break;

			case 31:
				int LA36_66 = input.LA(1);


				int index36_66 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_66);
				if (s >= 0) return s;
				break;

			case 32:
				int LA36_67 = input.LA(1);


				int index36_67 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_67);
				if (s >= 0) return s;
				break;

			case 33:
				int LA36_68 = input.LA(1);


				int index36_68 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_68);
				if (s >= 0) return s;
				break;

			case 34:
				int LA36_69 = input.LA(1);


				int index36_69 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_69);
				if (s >= 0) return s;
				break;

			case 35:
				int LA36_70 = input.LA(1);


				int index36_70 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_70);
				if (s >= 0) return s;
				break;

			case 36:
				int LA36_71 = input.LA(1);


				int index36_71 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 72;}

				else if ((true)) {s = 1;}


				input.Seek(index36_71);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 36, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA39 : DFA
	{
		private const string DFA39_eotS =
			"\x3C\xFFFF";
		private const string DFA39_eofS =
			"\x1\x1\x3B\xFFFF";
		private const string DFA39_minS =
			"\x1\xD\x1B\xFFFF\x1\x0\x1F\xFFFF";
		private const string DFA39_maxS =
			"\x1\x6B\x1B\xFFFF\x1\x0\x1F\xFFFF";
		private const string DFA39_acceptS =
			"\x1\xFFFF\x1\x2\x39\xFFFF\x1\x1";
		private const string DFA39_specialS =
			"\x1C\xFFFF\x1\x0\x1F\xFFFF}>";
		private static readonly string[] DFA39_transitionS =
			{
				"\x1\x1\x10\xFFFF\x2\x1\x1\x1C\x4\xFFFF\x1\x1\x8\xFFFF\x2\x1\x4\xFFFF"+
				"\x1\x1\x6\xFFFF\x1\x1\x4\xFFFF\x1\x1\x2\xFFFF\x6\x1\x2\xFFFF\x2\x1\x3"+
				"\xFFFF\x1\x1\x1\xFFFF\x3\x1\x3\xFFFF\x5\x1\x1\xFFFF\x2\x1\x1\xFFFF\x2"+
				"\x1\x1\xFFFF\x6\x1\x1\xFFFF\x1\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA39_eot = DFA.UnpackEncodedString(DFA39_eotS);
		private static readonly short[] DFA39_eof = DFA.UnpackEncodedString(DFA39_eofS);
		private static readonly char[] DFA39_min = DFA.UnpackEncodedStringToUnsignedChars(DFA39_minS);
		private static readonly char[] DFA39_max = DFA.UnpackEncodedStringToUnsignedChars(DFA39_maxS);
		private static readonly short[] DFA39_accept = DFA.UnpackEncodedString(DFA39_acceptS);
		private static readonly short[] DFA39_special = DFA.UnpackEncodedString(DFA39_specialS);
		private static readonly short[][] DFA39_transition;

		static DFA39()
		{
			int numStates = DFA39_transitionS.Length;
			DFA39_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA39_transition[i] = DFA.UnpackEncodedString(DFA39_transitionS[i]);
			}
		}

		public DFA39( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 39;
			this.eot = DFA39_eot;
			this.eof = DFA39_eof;
			this.min = DFA39_min;
			this.max = DFA39_max;
			this.accept = DFA39_accept;
			this.special = DFA39_special;
			this.transition = DFA39_transition;
		}

		public override string Description { get { return "()+ loopback of 240:4: ( '*' ( type_qualifier | gcc_attribute )* )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition39(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA39_28 = input.LA(1);


				int index39_28 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred69_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index39_28);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 39, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA38 : DFA
	{
		private const string DFA38_eotS =
			"\x3E\xFFFF";
		private const string DFA38_eofS =
			"\x1\x1\x3D\xFFFF";
		private const string DFA38_minS =
			"\x1\xD\x11\xFFFF\x1\x0\x1\xFFFF\x1\x1E\x27\xFFFF\x1\x0\x1\xFFFF";
		private const string DFA38_maxS =
			"\x1\x6B\x11\xFFFF\x1\x0\x1\xFFFF\x1\x1E\x27\xFFFF\x1\x0\x1\xFFFF";
		private const string DFA38_acceptS =
			"\x1\xFFFF\x1\x3\x39\xFFFF\x1\x1\x1\xFFFF\x1\x2";
		private const string DFA38_specialS =
			"\x12\xFFFF\x1\x0\x29\xFFFF\x1\x1\x1\xFFFF}>";
		private static readonly string[] DFA38_transitionS =
			{
				"\x1\x1\x10\xFFFF\x3\x1\x4\xFFFF\x1\x1\x8\xFFFF\x2\x1\x4\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x1\x4\xFFFF\x1\x14\x2\xFFFF\x4\x1\x1\x12\x1\x1\x2\xFFFF"+
				"\x1\x1\x1\x12\x3\xFFFF\x1\x1\x1\xFFFF\x3\x1\x3\xFFFF\x4\x1\x1\x12\x1"+
				"\xFFFF\x2\x1\x1\xFFFF\x2\x1\x1\xFFFF\x5\x1\x1\x12\x1\xFFFF\x1\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"\x1\x3C",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA38_eot = DFA.UnpackEncodedString(DFA38_eotS);
		private static readonly short[] DFA38_eof = DFA.UnpackEncodedString(DFA38_eofS);
		private static readonly char[] DFA38_min = DFA.UnpackEncodedStringToUnsignedChars(DFA38_minS);
		private static readonly char[] DFA38_max = DFA.UnpackEncodedStringToUnsignedChars(DFA38_maxS);
		private static readonly short[] DFA38_accept = DFA.UnpackEncodedString(DFA38_acceptS);
		private static readonly short[] DFA38_special = DFA.UnpackEncodedString(DFA38_specialS);
		private static readonly short[][] DFA38_transition;

		static DFA38()
		{
			int numStates = DFA38_transitionS.Length;
			DFA38_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA38_transition[i] = DFA.UnpackEncodedString(DFA38_transitionS[i]);
			}
		}

		public DFA38( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 38;
			this.eot = DFA38_eot;
			this.eof = DFA38_eof;
			this.min = DFA38_min;
			this.max = DFA38_max;
			this.accept = DFA38_accept;
			this.special = DFA38_special;
			this.transition = DFA38_transition;
		}

		public override string Description { get { return "()* loopback of 240:9: ( type_qualifier | gcc_attribute )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition38(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA38_18 = input.LA(1);


				int index38_18 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred67_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index38_18);
				if (s >= 0) return s;
				break;

			case 1:
				int LA38_60 = input.LA(1);


				int index38_60 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 61;}

				else if ((true)) {s = 1;}


				input.Seek(index38_60);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 38, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA69 : DFA
	{
		private const string DFA69_eotS =
			"\x156\xFFFF";
		private const string DFA69_eofS =
			"\x1\xFFFF\x7\x18\x14E\xFFFF";
		private const string DFA69_minS =
			"\x1\x4\x7\x18\x1\x4\x2\x1E\x6\x4\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0"+
			"\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16"+
			"\xFFFF\x11\x0\xE\xFFFF\x62\x0";
		private const string DFA69_maxS =
			"\x1\x70\x7\x6F\x1\x70\x2\x1E\x6\x70\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6"+
			"\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16"+
			"\xFFFF\x11\x0\xE\xFFFF\x62\x0";
		private const string DFA69_acceptS =
			"\x17\xFFFF\x1\x1\x1\x2\x13D\xFFFF";
		private const string DFA69_specialS =
			"\x11\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x16\xFFFF\x1\x6\x1\x7"+
			"\x1\x8\x1\x9\x1\xA\x1\xB\x16\xFFFF\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1"+
			"\x11\x16\xFFFF\x1\x12\x1\x13\x1\x14\x1\x15\x1\x16\x1\x17\x16\xFFFF\x1"+
			"\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x16\xFFFF\x1\x1E\x1\x1F\x1\x20"+
			"\x1\x21\x1\x22\x1\x23\x16\xFFFF\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28\x1"+
			"\x29\x16\xFFFF\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31"+
			"\x1\x32\x1\x33\x1\x34\x1\x35\x1\x36\x1\x37\x1\x38\x1\x39\x1\x3A\xE\xFFFF"+
			"\x1\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x1\x40\x1\x41\x1\x42\x1\x43\x1\x44"+
			"\x1\x45\x1\x46\x1\x47\x1\x48\x1\x49\x1\x4A\x1\x4B\x1\x4C\x1\x4D\x1\x4E"+
			"\x1\x4F\x1\x50\x1\x51\x1\x52\x1\x53\x1\x54\x1\x55\x1\x56\x1\x57\x1\x58"+
			"\x1\x59\x1\x5A\x1\x5B\x1\x5C\x1\x5D\x1\x5E\x1\x5F\x1\x60\x1\x61\x1\x62"+
			"\x1\x63\x1\x64\x1\x65\x1\x66\x1\x67\x1\x68\x1\x69\x1\x6A\x1\x6B\x1\x6C"+
			"\x1\x6D\x1\x6E\x1\x6F\x1\x70\x1\x71\x1\x72\x1\x73\x1\x74\x1\x75\x1\x76"+
			"\x1\x77\x1\x78\x1\x79\x1\x7A\x1\x7B\x1\x7C\x1\x7D\x1\x7E\x1\x7F\x1\x80"+
			"\x1\x81\x1\x82\x1\x83\x1\x84\x1\x85\x1\x86\x1\x87\x1\x88\x1\x89\x1\x8A"+
			"\x1\x8B\x1\x8C\x1\x8D\x1\x8E\x1\x8F\x1\x90\x1\x91\x1\x92\x1\x93\x1\x94"+
			"\x1\x95\x1\x96\x1\x97\x1\x98\x1\x99\x1\x9A\x1\x9B\x1\x9C}>";
		private static readonly string[] DFA69_transitionS =
			{
				"\x1\x5\x1\xFFFF\x1\x4\x2\xFFFF\x1\x7\x1\xFFFF\x1\x2\x1\xFFFF\x1\x1\x4"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x6\x2\xFFFF\x1\xD\x4\xFFFF\x1\xD\x1\xFFFF\x1"+
				"\x8\x1\xFFFF\x1\xD\x1\xFFFF\x1\xD\x1\xB\x2\xFFFF\x1\xD\x1\xC\x17\xFFFF"+
				"\x1\xF\x1\xFFFF\x1\xA\x1\x9\x1\xFFFF\x1\x10\x1B\xFFFF\x1\xE\xF\xFFFF"+
				"\x1\xD",
				"\x2\x18\x1\x17\x2\x18\x1\x17\x1\x12\x2\x18\x1\x17\x1\x18\x1\x15\x1"+
				"\x17\x2\x18\x1\x16\x1\x17\x1\x14\x1\x13\x1\xFFFF\x1\x18\x1\x17\x4\x18"+
				"\x1\x17\x1\x18\x1\x17\x4\x18\x1\x17\x1\x18\x1\x11\x2\x18\x1\x17\x2D"+
				"\xFFFF\x1\x18\x1\x17\x2\x18",
				"\x2\x18\x1\x17\x2\x18\x1\x17\x1\x2E\x2\x18\x1\x17\x1\x18\x1\x31\x1"+
				"\x17\x2\x18\x1\x32\x1\x17\x1\x30\x1\x2F\x1\xFFFF\x1\x18\x1\x17\x4\x18"+
				"\x1\x17\x1\x18\x1\x17\x4\x18\x1\x17\x1\x18\x1\x2D\x2\x18\x1\x17\x2D"+
				"\xFFFF\x1\x18\x1\x17\x2\x18",
				"\x2\x18\x1\x17\x2\x18\x1\x17\x1\x4A\x2\x18\x1\x17\x1\x18\x1\x4D\x1"+
				"\x17\x2\x18\x1\x4E\x1\x17\x1\x4C\x1\x4B\x1\xFFFF\x1\x18\x1\x17\x4\x18"+
				"\x1\x17\x1\x18\x1\x17\x4\x18\x1\x17\x1\x18\x1\x49\x2\x18\x1\x17\x2D"+
				"\xFFFF\x1\x18\x1\x17\x2\x18",
				"\x2\x18\x1\x17\x2\x18\x1\x17\x1\x66\x2\x18\x1\x17\x1\x18\x1\x69\x1"+
				"\x17\x2\x18\x1\x6A\x1\x17\x1\x68\x1\x67\x1\xFFFF\x1\x18\x1\x17\x4\x18"+
				"\x1\x17\x1\x18\x1\x17\x4\x18\x1\x17\x1\x18\x1\x65\x2\x18\x1\x17\x2D"+
				"\xFFFF\x1\x18\x1\x17\x2\x18",
				"\x2\x18\x1\x17\x2\x18\x1\x17\x1\x82\x2\x18\x1\x17\x1\x18\x1\x85\x1"+
				"\x17\x2\x18\x1\x86\x1\x17\x1\x84\x1\x83\x1\xFFFF\x1\x18\x1\x17\x4\x18"+
				"\x1\x17\x1\x18\x1\x17\x4\x18\x1\x17\x1\x18\x1\x81\x2\x18\x1\x17\x2D"+
				"\xFFFF\x1\x18\x1\x17\x2\x18",
				"\x2\x18\x1\x17\x2\x18\x1\x17\x1\x9E\x2\x18\x1\x17\x1\x18\x1\xA1\x1"+
				"\x17\x2\x18\x1\xA2\x1\x17\x1\xA0\x1\x9F\x1\xFFFF\x1\x18\x1\x17\x4\x18"+
				"\x1\x17\x1\x18\x1\x17\x4\x18\x1\x17\x1\x18\x1\x9D\x2\x18\x1\x17\x2D"+
				"\xFFFF\x1\x18\x1\x17\x2\x18",
				"\x2\x18\x1\x17\x2\x18\x1\x17\x1\xBA\x2\x18\x1\x17\x1\x18\x1\xBD\x1"+
				"\x17\x2\x18\x1\xBE\x1\x17\x1\xBC\x1\xBB\x1\xFFFF\x1\x18\x1\x17\x4\x18"+
				"\x1\x17\x1\x18\x1\x17\x4\x18\x1\x17\x1\x18\x1\xB9\x2\x18\x1\x17\x2D"+
				"\xFFFF\x1\x18\x1\x17\x2\x18",
				"\x1\xD9\x1\xFFFF\x1\xD8\x2\xFFFF\x1\xDB\x1\xFFFF\x1\xD6\x1\xFFFF\x1"+
				"\xD5\x4\xFFFF\x1\xD7\x1\xFFFF\x1\xDA\x2\xFFFF\x1\xE1\x4\xFFFF\x1\xE1"+
				"\x1\xFFFF\x1\xDC\x1\xFFFF\x1\xE1\x1\xFFFF\x1\xE1\x1\xDF\x2\xFFFF\x1"+
				"\xE1\x1\xE0\x17\xFFFF\x1\xE3\x1\x18\x1\xDE\x1\xDD\x1\xFFFF\x1\xE4\x2"+
				"\xFFFF\x1\x18\x3\xFFFF\x2\x18\x3\xFFFF\x1\x18\x1\xFFFF\x1\x18\x1\xFFFF"+
				"\x1\x18\x4\xFFFF\x2\x18\x1\xFFFF\x1\x18\x1\xFFFF\x2\x18\x1\xE2\x1\xFFFF"+
				"\x1\x18\x2\xFFFF\x5\x18\x1\xFFFF\x1\xE5\x4\xFFFF\x1\xE1",
				"\x1\xF4",
				"\x1\xF5",
				"\x1\xFA\x1\xFFFF\x1\xF9\x2\xFFFF\x1\xFC\x1\xFFFF\x1\xF7\x1\xFFFF\x1"+
				"\xF6\x4\xFFFF\x1\xF8\x1\xFFFF\x1\xFB\x2\xFFFF\x1\x102\x4\xFFFF\x1\x102"+
				"\x1\xFFFF\x1\xFD\x1\xFFFF\x1\x102\x1\xFFFF\x1\x102\x1\x100\x2\xFFFF"+
				"\x1\x102\x1\x101\x17\xFFFF\x1\x104\x1\xFFFF\x1\xFF\x1\xFE\x1\xFFFF\x1"+
				"\x105\x1B\xFFFF\x1\x103\xF\xFFFF\x1\x102",
				"\x1\x10A\x1\xFFFF\x1\x109\x2\xFFFF\x1\x10C\x1\xFFFF\x1\x107\x1\xFFFF"+
				"\x1\x106\x4\xFFFF\x1\x108\x1\xFFFF\x1\x10B\x2\xFFFF\x1\x112\x4\xFFFF"+
				"\x1\x112\x1\xFFFF\x1\x10D\x1\xFFFF\x1\x112\x1\xFFFF\x1\x112\x1\x110"+
				"\x2\xFFFF\x1\x112\x1\x111\x17\xFFFF\x1\x114\x1\xFFFF\x1\x10F\x1\x10E"+
				"\x1\xFFFF\x1\x115\x1B\xFFFF\x1\x113\xF\xFFFF\x1\x112",
				"\x1\x11B\x1\xFFFF\x1\x11A\x2\xFFFF\x1\x11D\x1\xFFFF\x1\x118\x1\xFFFF"+
				"\x1\x117\x4\xFFFF\x1\x119\x1\xFFFF\x1\x11C\x2\xFFFF\x1\x122\x4\xFFFF"+
				"\x1\x122\x1\xFFFF\x1\x116\x1\xFFFF\x1\x122\x1\xFFFF\x1\x122\x1\x120"+
				"\x2\xFFFF\x1\x122\x1\x121\x17\xFFFF\x1\x124\x1\xFFFF\x1\x11F\x1\x11E"+
				"\x1\xFFFF\x1\x125\x1B\xFFFF\x1\x123\xF\xFFFF\x1\x122",
				"\x1\x12B\x1\xFFFF\x1\x12A\x2\xFFFF\x1\x12D\x1\xFFFF\x1\x128\x1\xFFFF"+
				"\x1\x127\x4\xFFFF\x1\x129\x1\xFFFF\x1\x12C\x2\xFFFF\x1\x132\x4\xFFFF"+
				"\x1\x132\x1\xFFFF\x1\x126\x1\xFFFF\x1\x132\x1\xFFFF\x1\x132\x1\x130"+
				"\x2\xFFFF\x1\x132\x1\x131\x17\xFFFF\x1\x134\x1\xFFFF\x1\x12F\x1\x12E"+
				"\x1\xFFFF\x1\x135\x1B\xFFFF\x1\x133\xF\xFFFF\x1\x132",
				"\x1\x13B\x1\xFFFF\x1\x13A\x2\xFFFF\x1\x13D\x1\xFFFF\x1\x138\x1\xFFFF"+
				"\x1\x137\x4\xFFFF\x1\x139\x1\xFFFF\x1\x13C\x2\xFFFF\x1\x142\x4\xFFFF"+
				"\x1\x142\x1\xFFFF\x1\x136\x1\xFFFF\x1\x142\x1\xFFFF\x1\x142\x1\x140"+
				"\x2\xFFFF\x1\x142\x1\x141\x17\xFFFF\x1\x144\x1\xFFFF\x1\x13F\x1\x13E"+
				"\x1\xFFFF\x1\x145\x1B\xFFFF\x1\x143\xF\xFFFF\x1\x142",
				"\x1\x14B\x1\xFFFF\x1\x14A\x2\xFFFF\x1\x14D\x1\xFFFF\x1\x148\x1\xFFFF"+
				"\x1\x147\x4\xFFFF\x1\x149\x1\xFFFF\x1\x14C\x2\xFFFF\x1\x152\x4\xFFFF"+
				"\x1\x152\x1\xFFFF\x1\x146\x1\xFFFF\x1\x152\x1\xFFFF\x1\x152\x1\x150"+
				"\x2\xFFFF\x1\x152\x1\x151\x17\xFFFF\x1\x154\x1\xFFFF\x1\x14F\x1\x14E"+
				"\x1\xFFFF\x1\x155\x1B\xFFFF\x1\x153\xF\xFFFF\x1\x152",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA69_eot = DFA.UnpackEncodedString(DFA69_eotS);
		private static readonly short[] DFA69_eof = DFA.UnpackEncodedString(DFA69_eofS);
		private static readonly char[] DFA69_min = DFA.UnpackEncodedStringToUnsignedChars(DFA69_minS);
		private static readonly char[] DFA69_max = DFA.UnpackEncodedStringToUnsignedChars(DFA69_maxS);
		private static readonly short[] DFA69_accept = DFA.UnpackEncodedString(DFA69_acceptS);
		private static readonly short[] DFA69_special = DFA.UnpackEncodedString(DFA69_specialS);
		private static readonly short[][] DFA69_transition;

		static DFA69()
		{
			int numStates = DFA69_transitionS.Length;
			DFA69_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA69_transition[i] = DFA.UnpackEncodedString(DFA69_transitionS[i]);
			}
		}

		public DFA69( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 69;
			this.eot = DFA69_eot;
			this.eof = DFA69_eof;
			this.min = DFA69_min;
			this.max = DFA69_max;
			this.accept = DFA69_accept;
			this.special = DFA69_special;
			this.transition = DFA69_transition;
		}

		public override string Description { get { return "392:1: assignment_expression : ( lvalue assignment_operator assignment_expression | conditional_expression );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition69(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA69_17 = input.LA(1);


				int index69_17 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_17);
				if (s >= 0) return s;
				break;

			case 1:
				int LA69_18 = input.LA(1);


				int index69_18 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_18);
				if (s >= 0) return s;
				break;

			case 2:
				int LA69_19 = input.LA(1);


				int index69_19 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_19);
				if (s >= 0) return s;
				break;

			case 3:
				int LA69_20 = input.LA(1);


				int index69_20 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_20);
				if (s >= 0) return s;
				break;

			case 4:
				int LA69_21 = input.LA(1);


				int index69_21 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_21);
				if (s >= 0) return s;
				break;

			case 5:
				int LA69_22 = input.LA(1);


				int index69_22 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_22);
				if (s >= 0) return s;
				break;

			case 6:
				int LA69_45 = input.LA(1);


				int index69_45 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_45);
				if (s >= 0) return s;
				break;

			case 7:
				int LA69_46 = input.LA(1);


				int index69_46 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_46);
				if (s >= 0) return s;
				break;

			case 8:
				int LA69_47 = input.LA(1);


				int index69_47 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_47);
				if (s >= 0) return s;
				break;

			case 9:
				int LA69_48 = input.LA(1);


				int index69_48 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_48);
				if (s >= 0) return s;
				break;

			case 10:
				int LA69_49 = input.LA(1);


				int index69_49 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_49);
				if (s >= 0) return s;
				break;

			case 11:
				int LA69_50 = input.LA(1);


				int index69_50 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_50);
				if (s >= 0) return s;
				break;

			case 12:
				int LA69_73 = input.LA(1);


				int index69_73 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_73);
				if (s >= 0) return s;
				break;

			case 13:
				int LA69_74 = input.LA(1);


				int index69_74 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_74);
				if (s >= 0) return s;
				break;

			case 14:
				int LA69_75 = input.LA(1);


				int index69_75 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_75);
				if (s >= 0) return s;
				break;

			case 15:
				int LA69_76 = input.LA(1);


				int index69_76 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_76);
				if (s >= 0) return s;
				break;

			case 16:
				int LA69_77 = input.LA(1);


				int index69_77 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_77);
				if (s >= 0) return s;
				break;

			case 17:
				int LA69_78 = input.LA(1);


				int index69_78 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_78);
				if (s >= 0) return s;
				break;

			case 18:
				int LA69_101 = input.LA(1);


				int index69_101 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_101);
				if (s >= 0) return s;
				break;

			case 19:
				int LA69_102 = input.LA(1);


				int index69_102 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_102);
				if (s >= 0) return s;
				break;

			case 20:
				int LA69_103 = input.LA(1);


				int index69_103 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_103);
				if (s >= 0) return s;
				break;

			case 21:
				int LA69_104 = input.LA(1);


				int index69_104 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_104);
				if (s >= 0) return s;
				break;

			case 22:
				int LA69_105 = input.LA(1);


				int index69_105 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_105);
				if (s >= 0) return s;
				break;

			case 23:
				int LA69_106 = input.LA(1);


				int index69_106 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_106);
				if (s >= 0) return s;
				break;

			case 24:
				int LA69_129 = input.LA(1);


				int index69_129 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_129);
				if (s >= 0) return s;
				break;

			case 25:
				int LA69_130 = input.LA(1);


				int index69_130 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_130);
				if (s >= 0) return s;
				break;

			case 26:
				int LA69_131 = input.LA(1);


				int index69_131 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_131);
				if (s >= 0) return s;
				break;

			case 27:
				int LA69_132 = input.LA(1);


				int index69_132 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_132);
				if (s >= 0) return s;
				break;

			case 28:
				int LA69_133 = input.LA(1);


				int index69_133 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_133);
				if (s >= 0) return s;
				break;

			case 29:
				int LA69_134 = input.LA(1);


				int index69_134 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_134);
				if (s >= 0) return s;
				break;

			case 30:
				int LA69_157 = input.LA(1);


				int index69_157 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_157);
				if (s >= 0) return s;
				break;

			case 31:
				int LA69_158 = input.LA(1);


				int index69_158 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_158);
				if (s >= 0) return s;
				break;

			case 32:
				int LA69_159 = input.LA(1);


				int index69_159 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_159);
				if (s >= 0) return s;
				break;

			case 33:
				int LA69_160 = input.LA(1);


				int index69_160 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_160);
				if (s >= 0) return s;
				break;

			case 34:
				int LA69_161 = input.LA(1);


				int index69_161 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_161);
				if (s >= 0) return s;
				break;

			case 35:
				int LA69_162 = input.LA(1);


				int index69_162 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_162);
				if (s >= 0) return s;
				break;

			case 36:
				int LA69_185 = input.LA(1);


				int index69_185 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_185);
				if (s >= 0) return s;
				break;

			case 37:
				int LA69_186 = input.LA(1);


				int index69_186 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_186);
				if (s >= 0) return s;
				break;

			case 38:
				int LA69_187 = input.LA(1);


				int index69_187 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_187);
				if (s >= 0) return s;
				break;

			case 39:
				int LA69_188 = input.LA(1);


				int index69_188 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_188);
				if (s >= 0) return s;
				break;

			case 40:
				int LA69_189 = input.LA(1);


				int index69_189 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_189);
				if (s >= 0) return s;
				break;

			case 41:
				int LA69_190 = input.LA(1);


				int index69_190 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_190);
				if (s >= 0) return s;
				break;

			case 42:
				int LA69_213 = input.LA(1);


				int index69_213 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_213);
				if (s >= 0) return s;
				break;

			case 43:
				int LA69_214 = input.LA(1);


				int index69_214 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_214);
				if (s >= 0) return s;
				break;

			case 44:
				int LA69_215 = input.LA(1);


				int index69_215 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_215);
				if (s >= 0) return s;
				break;

			case 45:
				int LA69_216 = input.LA(1);


				int index69_216 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_216);
				if (s >= 0) return s;
				break;

			case 46:
				int LA69_217 = input.LA(1);


				int index69_217 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_217);
				if (s >= 0) return s;
				break;

			case 47:
				int LA69_218 = input.LA(1);


				int index69_218 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_218);
				if (s >= 0) return s;
				break;

			case 48:
				int LA69_219 = input.LA(1);


				int index69_219 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_219);
				if (s >= 0) return s;
				break;

			case 49:
				int LA69_220 = input.LA(1);


				int index69_220 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_220);
				if (s >= 0) return s;
				break;

			case 50:
				int LA69_221 = input.LA(1);


				int index69_221 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_221);
				if (s >= 0) return s;
				break;

			case 51:
				int LA69_222 = input.LA(1);


				int index69_222 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_222);
				if (s >= 0) return s;
				break;

			case 52:
				int LA69_223 = input.LA(1);


				int index69_223 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_223);
				if (s >= 0) return s;
				break;

			case 53:
				int LA69_224 = input.LA(1);


				int index69_224 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_224);
				if (s >= 0) return s;
				break;

			case 54:
				int LA69_225 = input.LA(1);


				int index69_225 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_225);
				if (s >= 0) return s;
				break;

			case 55:
				int LA69_226 = input.LA(1);


				int index69_226 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_226);
				if (s >= 0) return s;
				break;

			case 56:
				int LA69_227 = input.LA(1);


				int index69_227 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_227);
				if (s >= 0) return s;
				break;

			case 57:
				int LA69_228 = input.LA(1);


				int index69_228 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_228);
				if (s >= 0) return s;
				break;

			case 58:
				int LA69_229 = input.LA(1);


				int index69_229 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_229);
				if (s >= 0) return s;
				break;

			case 59:
				int LA69_244 = input.LA(1);


				int index69_244 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_244);
				if (s >= 0) return s;
				break;

			case 60:
				int LA69_245 = input.LA(1);


				int index69_245 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_245);
				if (s >= 0) return s;
				break;

			case 61:
				int LA69_246 = input.LA(1);


				int index69_246 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_246);
				if (s >= 0) return s;
				break;

			case 62:
				int LA69_247 = input.LA(1);


				int index69_247 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_247);
				if (s >= 0) return s;
				break;

			case 63:
				int LA69_248 = input.LA(1);


				int index69_248 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_248);
				if (s >= 0) return s;
				break;

			case 64:
				int LA69_249 = input.LA(1);


				int index69_249 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_249);
				if (s >= 0) return s;
				break;

			case 65:
				int LA69_250 = input.LA(1);


				int index69_250 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_250);
				if (s >= 0) return s;
				break;

			case 66:
				int LA69_251 = input.LA(1);


				int index69_251 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_251);
				if (s >= 0) return s;
				break;

			case 67:
				int LA69_252 = input.LA(1);


				int index69_252 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_252);
				if (s >= 0) return s;
				break;

			case 68:
				int LA69_253 = input.LA(1);


				int index69_253 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_253);
				if (s >= 0) return s;
				break;

			case 69:
				int LA69_254 = input.LA(1);


				int index69_254 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_254);
				if (s >= 0) return s;
				break;

			case 70:
				int LA69_255 = input.LA(1);


				int index69_255 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_255);
				if (s >= 0) return s;
				break;

			case 71:
				int LA69_256 = input.LA(1);


				int index69_256 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_256);
				if (s >= 0) return s;
				break;

			case 72:
				int LA69_257 = input.LA(1);


				int index69_257 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_257);
				if (s >= 0) return s;
				break;

			case 73:
				int LA69_258 = input.LA(1);


				int index69_258 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_258);
				if (s >= 0) return s;
				break;

			case 74:
				int LA69_259 = input.LA(1);


				int index69_259 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_259);
				if (s >= 0) return s;
				break;

			case 75:
				int LA69_260 = input.LA(1);


				int index69_260 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_260);
				if (s >= 0) return s;
				break;

			case 76:
				int LA69_261 = input.LA(1);


				int index69_261 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_261);
				if (s >= 0) return s;
				break;

			case 77:
				int LA69_262 = input.LA(1);


				int index69_262 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_262);
				if (s >= 0) return s;
				break;

			case 78:
				int LA69_263 = input.LA(1);


				int index69_263 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_263);
				if (s >= 0) return s;
				break;

			case 79:
				int LA69_264 = input.LA(1);


				int index69_264 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_264);
				if (s >= 0) return s;
				break;

			case 80:
				int LA69_265 = input.LA(1);


				int index69_265 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_265);
				if (s >= 0) return s;
				break;

			case 81:
				int LA69_266 = input.LA(1);


				int index69_266 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_266);
				if (s >= 0) return s;
				break;

			case 82:
				int LA69_267 = input.LA(1);


				int index69_267 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_267);
				if (s >= 0) return s;
				break;

			case 83:
				int LA69_268 = input.LA(1);


				int index69_268 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_268);
				if (s >= 0) return s;
				break;

			case 84:
				int LA69_269 = input.LA(1);


				int index69_269 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_269);
				if (s >= 0) return s;
				break;

			case 85:
				int LA69_270 = input.LA(1);


				int index69_270 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_270);
				if (s >= 0) return s;
				break;

			case 86:
				int LA69_271 = input.LA(1);


				int index69_271 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_271);
				if (s >= 0) return s;
				break;

			case 87:
				int LA69_272 = input.LA(1);


				int index69_272 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_272);
				if (s >= 0) return s;
				break;

			case 88:
				int LA69_273 = input.LA(1);


				int index69_273 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_273);
				if (s >= 0) return s;
				break;

			case 89:
				int LA69_274 = input.LA(1);


				int index69_274 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_274);
				if (s >= 0) return s;
				break;

			case 90:
				int LA69_275 = input.LA(1);


				int index69_275 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_275);
				if (s >= 0) return s;
				break;

			case 91:
				int LA69_276 = input.LA(1);


				int index69_276 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_276);
				if (s >= 0) return s;
				break;

			case 92:
				int LA69_277 = input.LA(1);


				int index69_277 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_277);
				if (s >= 0) return s;
				break;

			case 93:
				int LA69_278 = input.LA(1);


				int index69_278 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_278);
				if (s >= 0) return s;
				break;

			case 94:
				int LA69_279 = input.LA(1);


				int index69_279 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_279);
				if (s >= 0) return s;
				break;

			case 95:
				int LA69_280 = input.LA(1);


				int index69_280 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_280);
				if (s >= 0) return s;
				break;

			case 96:
				int LA69_281 = input.LA(1);


				int index69_281 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_281);
				if (s >= 0) return s;
				break;

			case 97:
				int LA69_282 = input.LA(1);


				int index69_282 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_282);
				if (s >= 0) return s;
				break;

			case 98:
				int LA69_283 = input.LA(1);


				int index69_283 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_283);
				if (s >= 0) return s;
				break;

			case 99:
				int LA69_284 = input.LA(1);


				int index69_284 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_284);
				if (s >= 0) return s;
				break;

			case 100:
				int LA69_285 = input.LA(1);


				int index69_285 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_285);
				if (s >= 0) return s;
				break;

			case 101:
				int LA69_286 = input.LA(1);


				int index69_286 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_286);
				if (s >= 0) return s;
				break;

			case 102:
				int LA69_287 = input.LA(1);


				int index69_287 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_287);
				if (s >= 0) return s;
				break;

			case 103:
				int LA69_288 = input.LA(1);


				int index69_288 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_288);
				if (s >= 0) return s;
				break;

			case 104:
				int LA69_289 = input.LA(1);


				int index69_289 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_289);
				if (s >= 0) return s;
				break;

			case 105:
				int LA69_290 = input.LA(1);


				int index69_290 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_290);
				if (s >= 0) return s;
				break;

			case 106:
				int LA69_291 = input.LA(1);


				int index69_291 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_291);
				if (s >= 0) return s;
				break;

			case 107:
				int LA69_292 = input.LA(1);


				int index69_292 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_292);
				if (s >= 0) return s;
				break;

			case 108:
				int LA69_293 = input.LA(1);


				int index69_293 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_293);
				if (s >= 0) return s;
				break;

			case 109:
				int LA69_294 = input.LA(1);


				int index69_294 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_294);
				if (s >= 0) return s;
				break;

			case 110:
				int LA69_295 = input.LA(1);


				int index69_295 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_295);
				if (s >= 0) return s;
				break;

			case 111:
				int LA69_296 = input.LA(1);


				int index69_296 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_296);
				if (s >= 0) return s;
				break;

			case 112:
				int LA69_297 = input.LA(1);


				int index69_297 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_297);
				if (s >= 0) return s;
				break;

			case 113:
				int LA69_298 = input.LA(1);


				int index69_298 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_298);
				if (s >= 0) return s;
				break;

			case 114:
				int LA69_299 = input.LA(1);


				int index69_299 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_299);
				if (s >= 0) return s;
				break;

			case 115:
				int LA69_300 = input.LA(1);


				int index69_300 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_300);
				if (s >= 0) return s;
				break;

			case 116:
				int LA69_301 = input.LA(1);


				int index69_301 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_301);
				if (s >= 0) return s;
				break;

			case 117:
				int LA69_302 = input.LA(1);


				int index69_302 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_302);
				if (s >= 0) return s;
				break;

			case 118:
				int LA69_303 = input.LA(1);


				int index69_303 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_303);
				if (s >= 0) return s;
				break;

			case 119:
				int LA69_304 = input.LA(1);


				int index69_304 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_304);
				if (s >= 0) return s;
				break;

			case 120:
				int LA69_305 = input.LA(1);


				int index69_305 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_305);
				if (s >= 0) return s;
				break;

			case 121:
				int LA69_306 = input.LA(1);


				int index69_306 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_306);
				if (s >= 0) return s;
				break;

			case 122:
				int LA69_307 = input.LA(1);


				int index69_307 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_307);
				if (s >= 0) return s;
				break;

			case 123:
				int LA69_308 = input.LA(1);


				int index69_308 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_308);
				if (s >= 0) return s;
				break;

			case 124:
				int LA69_309 = input.LA(1);


				int index69_309 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_309);
				if (s >= 0) return s;
				break;

			case 125:
				int LA69_310 = input.LA(1);


				int index69_310 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_310);
				if (s >= 0) return s;
				break;

			case 126:
				int LA69_311 = input.LA(1);


				int index69_311 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_311);
				if (s >= 0) return s;
				break;

			case 127:
				int LA69_312 = input.LA(1);


				int index69_312 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_312);
				if (s >= 0) return s;
				break;

			case 128:
				int LA69_313 = input.LA(1);


				int index69_313 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_313);
				if (s >= 0) return s;
				break;

			case 129:
				int LA69_314 = input.LA(1);


				int index69_314 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_314);
				if (s >= 0) return s;
				break;

			case 130:
				int LA69_315 = input.LA(1);


				int index69_315 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_315);
				if (s >= 0) return s;
				break;

			case 131:
				int LA69_316 = input.LA(1);


				int index69_316 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_316);
				if (s >= 0) return s;
				break;

			case 132:
				int LA69_317 = input.LA(1);


				int index69_317 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_317);
				if (s >= 0) return s;
				break;

			case 133:
				int LA69_318 = input.LA(1);


				int index69_318 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_318);
				if (s >= 0) return s;
				break;

			case 134:
				int LA69_319 = input.LA(1);


				int index69_319 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_319);
				if (s >= 0) return s;
				break;

			case 135:
				int LA69_320 = input.LA(1);


				int index69_320 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_320);
				if (s >= 0) return s;
				break;

			case 136:
				int LA69_321 = input.LA(1);


				int index69_321 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_321);
				if (s >= 0) return s;
				break;

			case 137:
				int LA69_322 = input.LA(1);


				int index69_322 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_322);
				if (s >= 0) return s;
				break;

			case 138:
				int LA69_323 = input.LA(1);


				int index69_323 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_323);
				if (s >= 0) return s;
				break;

			case 139:
				int LA69_324 = input.LA(1);


				int index69_324 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_324);
				if (s >= 0) return s;
				break;

			case 140:
				int LA69_325 = input.LA(1);


				int index69_325 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_325);
				if (s >= 0) return s;
				break;

			case 141:
				int LA69_326 = input.LA(1);


				int index69_326 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_326);
				if (s >= 0) return s;
				break;

			case 142:
				int LA69_327 = input.LA(1);


				int index69_327 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_327);
				if (s >= 0) return s;
				break;

			case 143:
				int LA69_328 = input.LA(1);


				int index69_328 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_328);
				if (s >= 0) return s;
				break;

			case 144:
				int LA69_329 = input.LA(1);


				int index69_329 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_329);
				if (s >= 0) return s;
				break;

			case 145:
				int LA69_330 = input.LA(1);


				int index69_330 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_330);
				if (s >= 0) return s;
				break;

			case 146:
				int LA69_331 = input.LA(1);


				int index69_331 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_331);
				if (s >= 0) return s;
				break;

			case 147:
				int LA69_332 = input.LA(1);


				int index69_332 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_332);
				if (s >= 0) return s;
				break;

			case 148:
				int LA69_333 = input.LA(1);


				int index69_333 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_333);
				if (s >= 0) return s;
				break;

			case 149:
				int LA69_334 = input.LA(1);


				int index69_334 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_334);
				if (s >= 0) return s;
				break;

			case 150:
				int LA69_335 = input.LA(1);


				int index69_335 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_335);
				if (s >= 0) return s;
				break;

			case 151:
				int LA69_336 = input.LA(1);


				int index69_336 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_336);
				if (s >= 0) return s;
				break;

			case 152:
				int LA69_337 = input.LA(1);


				int index69_337 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_337);
				if (s >= 0) return s;
				break;

			case 153:
				int LA69_338 = input.LA(1);


				int index69_338 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_338);
				if (s >= 0) return s;
				break;

			case 154:
				int LA69_339 = input.LA(1);


				int index69_339 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_339);
				if (s >= 0) return s;
				break;

			case 155:
				int LA69_340 = input.LA(1);


				int index69_340 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_340);
				if (s >= 0) return s;
				break;

			case 156:
				int LA69_341 = input.LA(1);


				int index69_341 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred129_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index69_341);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 69, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA71 : DFA
	{
		private const string DFA71_eotS =
			"\x157\xFFFF";
		private const string DFA71_eofS =
			"\x2\xFFFF\x7\x44\x14E\xFFFF";
		private const string DFA71_minS =
			"\x2\x4\x7\x18\x2\x1E\x6\x4\x33\x0\x8\xFFFF\x14\x0\x8\xFFFF\x14\x0\x8"+
			"\xFFFF\x14\x0\x8\xFFFF\x14\x0\x8\xFFFF\x14\x0\x8\xFFFF\x14\x0\x8\xFFFF"+
			"\x62\x0\x1\xFFFF";
		private const string DFA71_maxS =
			"\x2\x70\x7\x6F\x2\x1E\x6\x70\x33\x0\x8\xFFFF\x14\x0\x8\xFFFF\x14\x0\x8"+
			"\xFFFF\x14\x0\x8\xFFFF\x14\x0\x8\xFFFF\x14\x0\x8\xFFFF\x14\x0\x8\xFFFF"+
			"\x62\x0\x1\xFFFF";
		private const string DFA71_acceptS =
			"\x44\xFFFF\x1\x1\x111\xFFFF\x1\x2";
		private const string DFA71_specialS =
			"\x11\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14"+
			"\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E"+
			"\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28"+
			"\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1\x32"+
			"\x8\xFFFF\x1\x33\x1\x34\x1\x35\x1\x36\x1\x37\x1\x38\x1\x39\x1\x3A\x1"+
			"\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x1\x40\x1\x41\x1\x42\x1\x43\x1\x44\x1"+
			"\x45\x1\x46\x8\xFFFF\x1\x47\x1\x48\x1\x49\x1\x4A\x1\x4B\x1\x4C\x1\x4D"+
			"\x1\x4E\x1\x4F\x1\x50\x1\x51\x1\x52\x1\x53\x1\x54\x1\x55\x1\x56\x1\x57"+
			"\x1\x58\x1\x59\x1\x5A\x8\xFFFF\x1\x5B\x1\x5C\x1\x5D\x1\x5E\x1\x5F\x1"+
			"\x60\x1\x61\x1\x62\x1\x63\x1\x64\x1\x65\x1\x66\x1\x67\x1\x68\x1\x69\x1"+
			"\x6A\x1\x6B\x1\x6C\x1\x6D\x1\x6E\x8\xFFFF\x1\x6F\x1\x70\x1\x71\x1\x72"+
			"\x1\x73\x1\x74\x1\x75\x1\x76\x1\x77\x1\x78\x1\x79\x1\x7A\x1\x7B\x1\x7C"+
			"\x1\x7D\x1\x7E\x1\x7F\x1\x80\x1\x81\x1\x82\x8\xFFFF\x1\x83\x1\x84\x1"+
			"\x85\x1\x86\x1\x87\x1\x88\x1\x89\x1\x8A\x1\x8B\x1\x8C\x1\x8D\x1\x8E\x1"+
			"\x8F\x1\x90\x1\x91\x1\x92\x1\x93\x1\x94\x1\x95\x1\x96\x8\xFFFF\x1\x97"+
			"\x1\x98\x1\x99\x1\x9A\x1\x9B\x1\x9C\x1\x9D\x1\x9E\x1\x9F\x1\xA0\x1\xA1"+
			"\x1\xA2\x1\xA3\x1\xA4\x1\xA5\x1\xA6\x1\xA7\x1\xA8\x1\xA9\x1\xAA\x8\xFFFF"+
			"\x1\xAB\x1\xAC\x1\xAD\x1\xAE\x1\xAF\x1\xB0\x1\xB1\x1\xB2\x1\xB3\x1\xB4"+
			"\x1\xB5\x1\xB6\x1\xB7\x1\xB8\x1\xB9\x1\xBA\x1\xBB\x1\xBC\x1\xBD\x1\xBE"+
			"\x1\xBF\x1\xC0\x1\xC1\x1\xC2\x1\xC3\x1\xC4\x1\xC5\x1\xC6\x1\xC7\x1\xC8"+
			"\x1\xC9\x1\xCA\x1\xCB\x1\xCC\x1\xCD\x1\xCE\x1\xCF\x1\xD0\x1\xD1\x1\xD2"+
			"\x1\xD3\x1\xD4\x1\xD5\x1\xD6\x1\xD7\x1\xD8\x1\xD9\x1\xDA\x1\xDB\x1\xDC"+
			"\x1\xDD\x1\xDE\x1\xDF\x1\xE0\x1\xE1\x1\xE2\x1\xE3\x1\xE4\x1\xE5\x1\xE6"+
			"\x1\xE7\x1\xE8\x1\xE9\x1\xEA\x1\xEB\x1\xEC\x1\xED\x1\xEE\x1\xEF\x1\xF0"+
			"\x1\xF1\x1\xF2\x1\xF3\x1\xF4\x1\xF5\x1\xF6\x1\xF7\x1\xF8\x1\xF9\x1\xFA"+
			"\x1\xFB\x1\xFC\x1\xFD\x1\xFE\x1\xFF\x1\x100\x1\x101\x1\x102\x1\x103\x1"+
			"\x104\x1\x105\x1\x106\x1\x107\x1\x108\x1\x109\x1\x10A\x1\x10B\x1\x10C"+
			"\x1\xFFFF}>";
		private static readonly string[] DFA71_transitionS =
			{
				"\x1\x6\x1\xFFFF\x1\x5\x2\xFFFF\x1\x8\x1\xFFFF\x1\x3\x1\xFFFF\x1\x2\x4"+
				"\xFFFF\x1\x4\x1\xFFFF\x1\x7\x2\xFFFF\x1\xD\x4\xFFFF\x1\xD\x1\xFFFF\x1"+
				"\x1\x1\xFFFF\x1\xD\x1\xFFFF\x1\xD\x1\xB\x2\xFFFF\x1\xD\x1\xC\x17\xFFFF"+
				"\x1\xF\x1\xFFFF\x1\xA\x1\x9\x1\xFFFF\x1\x10\x1B\xFFFF\x1\xE\xF\xFFFF"+
				"\x1\xD",
				"\x1\x24\x1\xFFFF\x1\x23\x2\xFFFF\x1\x26\x1\xFFFF\x1\x21\x1\xFFFF\x1"+
				"\x1D\x4\xFFFF\x1\x22\x1\xFFFF\x1\x25\x2\xFFFF\x1\x2C\x4\xFFFF\x1\x2C"+
				"\x1\xFFFF\x1\x27\x1\xFFFF\x1\x2C\x1\xFFFF\x1\x2C\x1\x2A\x2\xFFFF\x1"+
				"\x2C\x1\x2B\x17\xFFFF\x1\x2E\x1\x1F\x1\x29\x1\x28\x1\xFFFF\x1\x20\x2"+
				"\xFFFF\x1\x11\x3\xFFFF\x1\x13\x1\x11\x3\xFFFF\x1\x18\x1\xFFFF\x1\x1C"+
				"\x1\xFFFF\x1\x17\x4\xFFFF\x1\x15\x1\x16\x1\xFFFF\x1\x11\x1\xFFFF\x1"+
				"\x14\x1\x19\x1\x2D\x1\xFFFF\x1\x1B\x2\xFFFF\x1\x1E\x1\x1B\x1\x1A\x1"+
				"\x12\x1\x11\x1\xFFFF\x1\x2F\x4\xFFFF\x1\x2C",
				"\x1\x3D\x1\x38\x1\xFFFF\x1\x41\x1\x3E\x1\xFFFF\x1\x31\x1\x44\x1\x36"+
				"\x1\xFFFF\x1\x39\x1\x34\x1\xFFFF\x1\x44\x1\x3A\x1\x35\x1\xFFFF\x1\x33"+
				"\x1\x32\x1\xFFFF\x1\x37\x1\xFFFF\x2\x44\x1\x3C\x1\x3B\x1\xFFFF\x1\x3C"+
				"\x1\xFFFF\x1\x3D\x2\x3C\x1\x3B\x1\xFFFF\x1\x43\x1\x30\x1\x44\x1\x3F"+
				"\x2\xFFFF\x1\x44\x2B\xFFFF\x1\x40\x1\xFFFF\x1\x42\x1\x44",
				"\x1\x59\x1\x54\x1\xFFFF\x1\x5D\x1\x5A\x1\xFFFF\x1\x4D\x1\x44\x1\x52"+
				"\x1\xFFFF\x1\x55\x1\x50\x1\xFFFF\x1\x44\x1\x56\x1\x51\x1\xFFFF\x1\x4F"+
				"\x1\x4E\x1\xFFFF\x1\x53\x1\xFFFF\x2\x44\x1\x58\x1\x57\x1\xFFFF\x1\x58"+
				"\x1\xFFFF\x1\x59\x2\x58\x1\x57\x1\xFFFF\x1\x5F\x1\x4C\x1\x44\x1\x5B"+
				"\x2\xFFFF\x1\x44\x2B\xFFFF\x1\x5C\x1\xFFFF\x1\x5E\x1\x44",
				"\x1\x75\x1\x70\x1\xFFFF\x1\x79\x1\x76\x1\xFFFF\x1\x69\x1\x44\x1\x6E"+
				"\x1\xFFFF\x1\x71\x1\x6C\x1\xFFFF\x1\x44\x1\x72\x1\x6D\x1\xFFFF\x1\x6B"+
				"\x1\x6A\x1\xFFFF\x1\x6F\x1\xFFFF\x2\x44\x1\x74\x1\x73\x1\xFFFF\x1\x74"+
				"\x1\xFFFF\x1\x75\x2\x74\x1\x73\x1\xFFFF\x1\x7B\x1\x68\x1\x44\x1\x77"+
				"\x2\xFFFF\x1\x44\x2B\xFFFF\x1\x78\x1\xFFFF\x1\x7A\x1\x44",
				"\x1\x91\x1\x8C\x1\xFFFF\x1\x95\x1\x92\x1\xFFFF\x1\x85\x1\x44\x1\x8A"+
				"\x1\xFFFF\x1\x8D\x1\x88\x1\xFFFF\x1\x44\x1\x8E\x1\x89\x1\xFFFF\x1\x87"+
				"\x1\x86\x1\xFFFF\x1\x8B\x1\xFFFF\x2\x44\x1\x90\x1\x8F\x1\xFFFF\x1\x90"+
				"\x1\xFFFF\x1\x91\x2\x90\x1\x8F\x1\xFFFF\x1\x97\x1\x84\x1\x44\x1\x93"+
				"\x2\xFFFF\x1\x44\x2B\xFFFF\x1\x94\x1\xFFFF\x1\x96\x1\x44",
				"\x1\xAD\x1\xA8\x1\xFFFF\x1\xB1\x1\xAE\x1\xFFFF\x1\xA1\x1\x44\x1\xA6"+
				"\x1\xFFFF\x1\xA9\x1\xA4\x1\xFFFF\x1\x44\x1\xAA\x1\xA5\x1\xFFFF\x1\xA3"+
				"\x1\xA2\x1\xFFFF\x1\xA7\x1\xFFFF\x2\x44\x1\xAC\x1\xAB\x1\xFFFF\x1\xAC"+
				"\x1\xFFFF\x1\xAD\x2\xAC\x1\xAB\x1\xFFFF\x1\xB3\x1\xA0\x1\x44\x1\xAF"+
				"\x2\xFFFF\x1\x44\x2B\xFFFF\x1\xB0\x1\xFFFF\x1\xB2\x1\x44",
				"\x1\xC9\x1\xC4\x1\xFFFF\x1\xCD\x1\xCA\x1\xFFFF\x1\xBD\x1\x44\x1\xC2"+
				"\x1\xFFFF\x1\xC5\x1\xC0\x1\xFFFF\x1\x44\x1\xC6\x1\xC1\x1\xFFFF\x1\xBF"+
				"\x1\xBE\x1\xFFFF\x1\xC3\x1\xFFFF\x2\x44\x1\xC8\x1\xC7\x1\xFFFF\x1\xC8"+
				"\x1\xFFFF\x1\xC9\x2\xC8\x1\xC7\x1\xFFFF\x1\xCF\x1\xBC\x1\x44\x1\xCB"+
				"\x2\xFFFF\x1\x44\x2B\xFFFF\x1\xCC\x1\xFFFF\x1\xCE\x1\x44",
				"\x1\xE5\x1\xE0\x1\xFFFF\x1\xE9\x1\xE6\x1\xFFFF\x1\xD9\x1\x44\x1\xDE"+
				"\x1\xFFFF\x1\xE1\x1\xDC\x1\xFFFF\x1\x44\x1\xE2\x1\xDD\x1\xFFFF\x1\xDB"+
				"\x1\xDA\x1\xFFFF\x1\xDF\x1\xFFFF\x2\x44\x1\xE4\x1\xE3\x1\xFFFF\x1\xE4"+
				"\x1\xFFFF\x1\xE5\x2\xE4\x1\xE3\x1\xFFFF\x1\xEB\x1\xD8\x1\x44\x1\xE7"+
				"\x2\xFFFF\x1\x44\x2B\xFFFF\x1\xE8\x1\xFFFF\x1\xEA\x1\x44",
				"\x1\xF4",
				"\x1\xF5",
				"\x1\xFA\x1\xFFFF\x1\xF9\x2\xFFFF\x1\xFC\x1\xFFFF\x1\xF7\x1\xFFFF\x1"+
				"\xF6\x4\xFFFF\x1\xF8\x1\xFFFF\x1\xFB\x2\xFFFF\x1\x102\x4\xFFFF\x1\x102"+
				"\x1\xFFFF\x1\xFD\x1\xFFFF\x1\x102\x1\xFFFF\x1\x102\x1\x100\x2\xFFFF"+
				"\x1\x102\x1\x101\x17\xFFFF\x1\x104\x1\xFFFF\x1\xFF\x1\xFE\x1\xFFFF\x1"+
				"\x105\x1B\xFFFF\x1\x103\xF\xFFFF\x1\x102",
				"\x1\x10A\x1\xFFFF\x1\x109\x2\xFFFF\x1\x10C\x1\xFFFF\x1\x107\x1\xFFFF"+
				"\x1\x106\x4\xFFFF\x1\x108\x1\xFFFF\x1\x10B\x2\xFFFF\x1\x112\x4\xFFFF"+
				"\x1\x112\x1\xFFFF\x1\x10D\x1\xFFFF\x1\x112\x1\xFFFF\x1\x112\x1\x110"+
				"\x2\xFFFF\x1\x112\x1\x111\x17\xFFFF\x1\x114\x1\xFFFF\x1\x10F\x1\x10E"+
				"\x1\xFFFF\x1\x115\x1B\xFFFF\x1\x113\xF\xFFFF\x1\x112",
				"\x1\x11B\x1\xFFFF\x1\x11A\x2\xFFFF\x1\x11D\x1\xFFFF\x1\x118\x1\xFFFF"+
				"\x1\x117\x4\xFFFF\x1\x119\x1\xFFFF\x1\x11C\x2\xFFFF\x1\x122\x4\xFFFF"+
				"\x1\x122\x1\xFFFF\x1\x116\x1\xFFFF\x1\x122\x1\xFFFF\x1\x122\x1\x120"+
				"\x2\xFFFF\x1\x122\x1\x121\x17\xFFFF\x1\x124\x1\xFFFF\x1\x11F\x1\x11E"+
				"\x1\xFFFF\x1\x125\x1B\xFFFF\x1\x123\xF\xFFFF\x1\x122",
				"\x1\x12B\x1\xFFFF\x1\x12A\x2\xFFFF\x1\x12D\x1\xFFFF\x1\x128\x1\xFFFF"+
				"\x1\x127\x4\xFFFF\x1\x129\x1\xFFFF\x1\x12C\x2\xFFFF\x1\x132\x4\xFFFF"+
				"\x1\x132\x1\xFFFF\x1\x126\x1\xFFFF\x1\x132\x1\xFFFF\x1\x132\x1\x130"+
				"\x2\xFFFF\x1\x132\x1\x131\x17\xFFFF\x1\x134\x1\xFFFF\x1\x12F\x1\x12E"+
				"\x1\xFFFF\x1\x135\x1B\xFFFF\x1\x133\xF\xFFFF\x1\x132",
				"\x1\x13B\x1\xFFFF\x1\x13A\x2\xFFFF\x1\x13D\x1\xFFFF\x1\x138\x1\xFFFF"+
				"\x1\x137\x4\xFFFF\x1\x139\x1\xFFFF\x1\x13C\x2\xFFFF\x1\x142\x4\xFFFF"+
				"\x1\x142\x1\xFFFF\x1\x136\x1\xFFFF\x1\x142\x1\xFFFF\x1\x142\x1\x140"+
				"\x2\xFFFF\x1\x142\x1\x141\x17\xFFFF\x1\x144\x1\xFFFF\x1\x13F\x1\x13E"+
				"\x1\xFFFF\x1\x145\x1B\xFFFF\x1\x143\xF\xFFFF\x1\x142",
				"\x1\x14B\x1\xFFFF\x1\x14A\x2\xFFFF\x1\x14D\x1\xFFFF\x1\x148\x1\xFFFF"+
				"\x1\x147\x4\xFFFF\x1\x149\x1\xFFFF\x1\x14C\x2\xFFFF\x1\x152\x4\xFFFF"+
				"\x1\x152\x1\xFFFF\x1\x146\x1\xFFFF\x1\x152\x1\xFFFF\x1\x152\x1\x150"+
				"\x2\xFFFF\x1\x152\x1\x151\x17\xFFFF\x1\x154\x1\xFFFF\x1\x14F\x1\x14E"+
				"\x1\xFFFF\x1\x155\x1B\xFFFF\x1\x153\xF\xFFFF\x1\x152",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA71_eot = DFA.UnpackEncodedString(DFA71_eotS);
		private static readonly short[] DFA71_eof = DFA.UnpackEncodedString(DFA71_eofS);
		private static readonly char[] DFA71_min = DFA.UnpackEncodedStringToUnsignedChars(DFA71_minS);
		private static readonly char[] DFA71_max = DFA.UnpackEncodedStringToUnsignedChars(DFA71_maxS);
		private static readonly short[] DFA71_accept = DFA.UnpackEncodedString(DFA71_acceptS);
		private static readonly short[] DFA71_special = DFA.UnpackEncodedString(DFA71_specialS);
		private static readonly short[][] DFA71_transition;

		static DFA71()
		{
			int numStates = DFA71_transitionS.Length;
			DFA71_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA71_transition[i] = DFA.UnpackEncodedString(DFA71_transitionS[i]);
			}
		}

		public DFA71( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 71;
			this.eot = DFA71_eot;
			this.eof = DFA71_eof;
			this.min = DFA71_min;
			this.max = DFA71_max;
			this.accept = DFA71_accept;
			this.special = DFA71_special;
			this.transition = DFA71_transition;
		}

		public override string Description { get { return "415:1: conditional_expression : ( logical_or_expression ( '?' expression ':' conditional_expression )? | logical_or_expression '?' ':' conditional_expression );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition71(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA71_17 = input.LA(1);


				int index71_17 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_17);
				if (s >= 0) return s;
				break;

			case 1:
				int LA71_18 = input.LA(1);


				int index71_18 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_18);
				if (s >= 0) return s;
				break;

			case 2:
				int LA71_19 = input.LA(1);


				int index71_19 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_19);
				if (s >= 0) return s;
				break;

			case 3:
				int LA71_20 = input.LA(1);


				int index71_20 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_20);
				if (s >= 0) return s;
				break;

			case 4:
				int LA71_21 = input.LA(1);


				int index71_21 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_21);
				if (s >= 0) return s;
				break;

			case 5:
				int LA71_22 = input.LA(1);


				int index71_22 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_22);
				if (s >= 0) return s;
				break;

			case 6:
				int LA71_23 = input.LA(1);


				int index71_23 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_23);
				if (s >= 0) return s;
				break;

			case 7:
				int LA71_24 = input.LA(1);


				int index71_24 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_24);
				if (s >= 0) return s;
				break;

			case 8:
				int LA71_25 = input.LA(1);


				int index71_25 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_25);
				if (s >= 0) return s;
				break;

			case 9:
				int LA71_26 = input.LA(1);


				int index71_26 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_26);
				if (s >= 0) return s;
				break;

			case 10:
				int LA71_27 = input.LA(1);


				int index71_27 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_27);
				if (s >= 0) return s;
				break;

			case 11:
				int LA71_28 = input.LA(1);


				int index71_28 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_28);
				if (s >= 0) return s;
				break;

			case 12:
				int LA71_29 = input.LA(1);


				int index71_29 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_29);
				if (s >= 0) return s;
				break;

			case 13:
				int LA71_30 = input.LA(1);


				int index71_30 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_30);
				if (s >= 0) return s;
				break;

			case 14:
				int LA71_31 = input.LA(1);


				int index71_31 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_31);
				if (s >= 0) return s;
				break;

			case 15:
				int LA71_32 = input.LA(1);


				int index71_32 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_32);
				if (s >= 0) return s;
				break;

			case 16:
				int LA71_33 = input.LA(1);


				int index71_33 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_33);
				if (s >= 0) return s;
				break;

			case 17:
				int LA71_34 = input.LA(1);


				int index71_34 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_34);
				if (s >= 0) return s;
				break;

			case 18:
				int LA71_35 = input.LA(1);


				int index71_35 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_35);
				if (s >= 0) return s;
				break;

			case 19:
				int LA71_36 = input.LA(1);


				int index71_36 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_36);
				if (s >= 0) return s;
				break;

			case 20:
				int LA71_37 = input.LA(1);


				int index71_37 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_37);
				if (s >= 0) return s;
				break;

			case 21:
				int LA71_38 = input.LA(1);


				int index71_38 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_38);
				if (s >= 0) return s;
				break;

			case 22:
				int LA71_39 = input.LA(1);


				int index71_39 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_39);
				if (s >= 0) return s;
				break;

			case 23:
				int LA71_40 = input.LA(1);


				int index71_40 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_40);
				if (s >= 0) return s;
				break;

			case 24:
				int LA71_41 = input.LA(1);


				int index71_41 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_41);
				if (s >= 0) return s;
				break;

			case 25:
				int LA71_42 = input.LA(1);


				int index71_42 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_42);
				if (s >= 0) return s;
				break;

			case 26:
				int LA71_43 = input.LA(1);


				int index71_43 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_43);
				if (s >= 0) return s;
				break;

			case 27:
				int LA71_44 = input.LA(1);


				int index71_44 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_44);
				if (s >= 0) return s;
				break;

			case 28:
				int LA71_45 = input.LA(1);


				int index71_45 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_45);
				if (s >= 0) return s;
				break;

			case 29:
				int LA71_46 = input.LA(1);


				int index71_46 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_46);
				if (s >= 0) return s;
				break;

			case 30:
				int LA71_47 = input.LA(1);


				int index71_47 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_47);
				if (s >= 0) return s;
				break;

			case 31:
				int LA71_48 = input.LA(1);


				int index71_48 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_48);
				if (s >= 0) return s;
				break;

			case 32:
				int LA71_49 = input.LA(1);


				int index71_49 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_49);
				if (s >= 0) return s;
				break;

			case 33:
				int LA71_50 = input.LA(1);


				int index71_50 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_50);
				if (s >= 0) return s;
				break;

			case 34:
				int LA71_51 = input.LA(1);


				int index71_51 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_51);
				if (s >= 0) return s;
				break;

			case 35:
				int LA71_52 = input.LA(1);


				int index71_52 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_52);
				if (s >= 0) return s;
				break;

			case 36:
				int LA71_53 = input.LA(1);


				int index71_53 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_53);
				if (s >= 0) return s;
				break;

			case 37:
				int LA71_54 = input.LA(1);


				int index71_54 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_54);
				if (s >= 0) return s;
				break;

			case 38:
				int LA71_55 = input.LA(1);


				int index71_55 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_55);
				if (s >= 0) return s;
				break;

			case 39:
				int LA71_56 = input.LA(1);


				int index71_56 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_56);
				if (s >= 0) return s;
				break;

			case 40:
				int LA71_57 = input.LA(1);


				int index71_57 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_57);
				if (s >= 0) return s;
				break;

			case 41:
				int LA71_58 = input.LA(1);


				int index71_58 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_58);
				if (s >= 0) return s;
				break;

			case 42:
				int LA71_59 = input.LA(1);


				int index71_59 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_59);
				if (s >= 0) return s;
				break;

			case 43:
				int LA71_60 = input.LA(1);


				int index71_60 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_60);
				if (s >= 0) return s;
				break;

			case 44:
				int LA71_61 = input.LA(1);


				int index71_61 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_61);
				if (s >= 0) return s;
				break;

			case 45:
				int LA71_62 = input.LA(1);


				int index71_62 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_62);
				if (s >= 0) return s;
				break;

			case 46:
				int LA71_63 = input.LA(1);


				int index71_63 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_63);
				if (s >= 0) return s;
				break;

			case 47:
				int LA71_64 = input.LA(1);


				int index71_64 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_64);
				if (s >= 0) return s;
				break;

			case 48:
				int LA71_65 = input.LA(1);


				int index71_65 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_65);
				if (s >= 0) return s;
				break;

			case 49:
				int LA71_66 = input.LA(1);


				int index71_66 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_66);
				if (s >= 0) return s;
				break;

			case 50:
				int LA71_67 = input.LA(1);


				int index71_67 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_67);
				if (s >= 0) return s;
				break;

			case 51:
				int LA71_76 = input.LA(1);


				int index71_76 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_76);
				if (s >= 0) return s;
				break;

			case 52:
				int LA71_77 = input.LA(1);


				int index71_77 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_77);
				if (s >= 0) return s;
				break;

			case 53:
				int LA71_78 = input.LA(1);


				int index71_78 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_78);
				if (s >= 0) return s;
				break;

			case 54:
				int LA71_79 = input.LA(1);


				int index71_79 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_79);
				if (s >= 0) return s;
				break;

			case 55:
				int LA71_80 = input.LA(1);


				int index71_80 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_80);
				if (s >= 0) return s;
				break;

			case 56:
				int LA71_81 = input.LA(1);


				int index71_81 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_81);
				if (s >= 0) return s;
				break;

			case 57:
				int LA71_82 = input.LA(1);


				int index71_82 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_82);
				if (s >= 0) return s;
				break;

			case 58:
				int LA71_83 = input.LA(1);


				int index71_83 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_83);
				if (s >= 0) return s;
				break;

			case 59:
				int LA71_84 = input.LA(1);


				int index71_84 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_84);
				if (s >= 0) return s;
				break;

			case 60:
				int LA71_85 = input.LA(1);


				int index71_85 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_85);
				if (s >= 0) return s;
				break;

			case 61:
				int LA71_86 = input.LA(1);


				int index71_86 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_86);
				if (s >= 0) return s;
				break;

			case 62:
				int LA71_87 = input.LA(1);


				int index71_87 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_87);
				if (s >= 0) return s;
				break;

			case 63:
				int LA71_88 = input.LA(1);


				int index71_88 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_88);
				if (s >= 0) return s;
				break;

			case 64:
				int LA71_89 = input.LA(1);


				int index71_89 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_89);
				if (s >= 0) return s;
				break;

			case 65:
				int LA71_90 = input.LA(1);


				int index71_90 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_90);
				if (s >= 0) return s;
				break;

			case 66:
				int LA71_91 = input.LA(1);


				int index71_91 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_91);
				if (s >= 0) return s;
				break;

			case 67:
				int LA71_92 = input.LA(1);


				int index71_92 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_92);
				if (s >= 0) return s;
				break;

			case 68:
				int LA71_93 = input.LA(1);


				int index71_93 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_93);
				if (s >= 0) return s;
				break;

			case 69:
				int LA71_94 = input.LA(1);


				int index71_94 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_94);
				if (s >= 0) return s;
				break;

			case 70:
				int LA71_95 = input.LA(1);


				int index71_95 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_95);
				if (s >= 0) return s;
				break;

			case 71:
				int LA71_104 = input.LA(1);


				int index71_104 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_104);
				if (s >= 0) return s;
				break;

			case 72:
				int LA71_105 = input.LA(1);


				int index71_105 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_105);
				if (s >= 0) return s;
				break;

			case 73:
				int LA71_106 = input.LA(1);


				int index71_106 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_106);
				if (s >= 0) return s;
				break;

			case 74:
				int LA71_107 = input.LA(1);


				int index71_107 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_107);
				if (s >= 0) return s;
				break;

			case 75:
				int LA71_108 = input.LA(1);


				int index71_108 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_108);
				if (s >= 0) return s;
				break;

			case 76:
				int LA71_109 = input.LA(1);


				int index71_109 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_109);
				if (s >= 0) return s;
				break;

			case 77:
				int LA71_110 = input.LA(1);


				int index71_110 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_110);
				if (s >= 0) return s;
				break;

			case 78:
				int LA71_111 = input.LA(1);


				int index71_111 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_111);
				if (s >= 0) return s;
				break;

			case 79:
				int LA71_112 = input.LA(1);


				int index71_112 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_112);
				if (s >= 0) return s;
				break;

			case 80:
				int LA71_113 = input.LA(1);


				int index71_113 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_113);
				if (s >= 0) return s;
				break;

			case 81:
				int LA71_114 = input.LA(1);


				int index71_114 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_114);
				if (s >= 0) return s;
				break;

			case 82:
				int LA71_115 = input.LA(1);


				int index71_115 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_115);
				if (s >= 0) return s;
				break;

			case 83:
				int LA71_116 = input.LA(1);


				int index71_116 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_116);
				if (s >= 0) return s;
				break;

			case 84:
				int LA71_117 = input.LA(1);


				int index71_117 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_117);
				if (s >= 0) return s;
				break;

			case 85:
				int LA71_118 = input.LA(1);


				int index71_118 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_118);
				if (s >= 0) return s;
				break;

			case 86:
				int LA71_119 = input.LA(1);


				int index71_119 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_119);
				if (s >= 0) return s;
				break;

			case 87:
				int LA71_120 = input.LA(1);


				int index71_120 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_120);
				if (s >= 0) return s;
				break;

			case 88:
				int LA71_121 = input.LA(1);


				int index71_121 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_121);
				if (s >= 0) return s;
				break;

			case 89:
				int LA71_122 = input.LA(1);


				int index71_122 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_122);
				if (s >= 0) return s;
				break;

			case 90:
				int LA71_123 = input.LA(1);


				int index71_123 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_123);
				if (s >= 0) return s;
				break;

			case 91:
				int LA71_132 = input.LA(1);


				int index71_132 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_132);
				if (s >= 0) return s;
				break;

			case 92:
				int LA71_133 = input.LA(1);


				int index71_133 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_133);
				if (s >= 0) return s;
				break;

			case 93:
				int LA71_134 = input.LA(1);


				int index71_134 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_134);
				if (s >= 0) return s;
				break;

			case 94:
				int LA71_135 = input.LA(1);


				int index71_135 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_135);
				if (s >= 0) return s;
				break;

			case 95:
				int LA71_136 = input.LA(1);


				int index71_136 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_136);
				if (s >= 0) return s;
				break;

			case 96:
				int LA71_137 = input.LA(1);


				int index71_137 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_137);
				if (s >= 0) return s;
				break;

			case 97:
				int LA71_138 = input.LA(1);


				int index71_138 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_138);
				if (s >= 0) return s;
				break;

			case 98:
				int LA71_139 = input.LA(1);


				int index71_139 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_139);
				if (s >= 0) return s;
				break;

			case 99:
				int LA71_140 = input.LA(1);


				int index71_140 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_140);
				if (s >= 0) return s;
				break;

			case 100:
				int LA71_141 = input.LA(1);


				int index71_141 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_141);
				if (s >= 0) return s;
				break;

			case 101:
				int LA71_142 = input.LA(1);


				int index71_142 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_142);
				if (s >= 0) return s;
				break;

			case 102:
				int LA71_143 = input.LA(1);


				int index71_143 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_143);
				if (s >= 0) return s;
				break;

			case 103:
				int LA71_144 = input.LA(1);


				int index71_144 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_144);
				if (s >= 0) return s;
				break;

			case 104:
				int LA71_145 = input.LA(1);


				int index71_145 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_145);
				if (s >= 0) return s;
				break;

			case 105:
				int LA71_146 = input.LA(1);


				int index71_146 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_146);
				if (s >= 0) return s;
				break;

			case 106:
				int LA71_147 = input.LA(1);


				int index71_147 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_147);
				if (s >= 0) return s;
				break;

			case 107:
				int LA71_148 = input.LA(1);


				int index71_148 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_148);
				if (s >= 0) return s;
				break;

			case 108:
				int LA71_149 = input.LA(1);


				int index71_149 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_149);
				if (s >= 0) return s;
				break;

			case 109:
				int LA71_150 = input.LA(1);


				int index71_150 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_150);
				if (s >= 0) return s;
				break;

			case 110:
				int LA71_151 = input.LA(1);


				int index71_151 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_151);
				if (s >= 0) return s;
				break;

			case 111:
				int LA71_160 = input.LA(1);


				int index71_160 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_160);
				if (s >= 0) return s;
				break;

			case 112:
				int LA71_161 = input.LA(1);


				int index71_161 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_161);
				if (s >= 0) return s;
				break;

			case 113:
				int LA71_162 = input.LA(1);


				int index71_162 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_162);
				if (s >= 0) return s;
				break;

			case 114:
				int LA71_163 = input.LA(1);


				int index71_163 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_163);
				if (s >= 0) return s;
				break;

			case 115:
				int LA71_164 = input.LA(1);


				int index71_164 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_164);
				if (s >= 0) return s;
				break;

			case 116:
				int LA71_165 = input.LA(1);


				int index71_165 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_165);
				if (s >= 0) return s;
				break;

			case 117:
				int LA71_166 = input.LA(1);


				int index71_166 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_166);
				if (s >= 0) return s;
				break;

			case 118:
				int LA71_167 = input.LA(1);


				int index71_167 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_167);
				if (s >= 0) return s;
				break;

			case 119:
				int LA71_168 = input.LA(1);


				int index71_168 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_168);
				if (s >= 0) return s;
				break;

			case 120:
				int LA71_169 = input.LA(1);


				int index71_169 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_169);
				if (s >= 0) return s;
				break;

			case 121:
				int LA71_170 = input.LA(1);


				int index71_170 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_170);
				if (s >= 0) return s;
				break;

			case 122:
				int LA71_171 = input.LA(1);


				int index71_171 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_171);
				if (s >= 0) return s;
				break;

			case 123:
				int LA71_172 = input.LA(1);


				int index71_172 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_172);
				if (s >= 0) return s;
				break;

			case 124:
				int LA71_173 = input.LA(1);


				int index71_173 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_173);
				if (s >= 0) return s;
				break;

			case 125:
				int LA71_174 = input.LA(1);


				int index71_174 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_174);
				if (s >= 0) return s;
				break;

			case 126:
				int LA71_175 = input.LA(1);


				int index71_175 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_175);
				if (s >= 0) return s;
				break;

			case 127:
				int LA71_176 = input.LA(1);


				int index71_176 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_176);
				if (s >= 0) return s;
				break;

			case 128:
				int LA71_177 = input.LA(1);


				int index71_177 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_177);
				if (s >= 0) return s;
				break;

			case 129:
				int LA71_178 = input.LA(1);


				int index71_178 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_178);
				if (s >= 0) return s;
				break;

			case 130:
				int LA71_179 = input.LA(1);


				int index71_179 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_179);
				if (s >= 0) return s;
				break;

			case 131:
				int LA71_188 = input.LA(1);


				int index71_188 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_188);
				if (s >= 0) return s;
				break;

			case 132:
				int LA71_189 = input.LA(1);


				int index71_189 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_189);
				if (s >= 0) return s;
				break;

			case 133:
				int LA71_190 = input.LA(1);


				int index71_190 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_190);
				if (s >= 0) return s;
				break;

			case 134:
				int LA71_191 = input.LA(1);


				int index71_191 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_191);
				if (s >= 0) return s;
				break;

			case 135:
				int LA71_192 = input.LA(1);


				int index71_192 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_192);
				if (s >= 0) return s;
				break;

			case 136:
				int LA71_193 = input.LA(1);


				int index71_193 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_193);
				if (s >= 0) return s;
				break;

			case 137:
				int LA71_194 = input.LA(1);


				int index71_194 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_194);
				if (s >= 0) return s;
				break;

			case 138:
				int LA71_195 = input.LA(1);


				int index71_195 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_195);
				if (s >= 0) return s;
				break;

			case 139:
				int LA71_196 = input.LA(1);


				int index71_196 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_196);
				if (s >= 0) return s;
				break;

			case 140:
				int LA71_197 = input.LA(1);


				int index71_197 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_197);
				if (s >= 0) return s;
				break;

			case 141:
				int LA71_198 = input.LA(1);


				int index71_198 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_198);
				if (s >= 0) return s;
				break;

			case 142:
				int LA71_199 = input.LA(1);


				int index71_199 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_199);
				if (s >= 0) return s;
				break;

			case 143:
				int LA71_200 = input.LA(1);


				int index71_200 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_200);
				if (s >= 0) return s;
				break;

			case 144:
				int LA71_201 = input.LA(1);


				int index71_201 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_201);
				if (s >= 0) return s;
				break;

			case 145:
				int LA71_202 = input.LA(1);


				int index71_202 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_202);
				if (s >= 0) return s;
				break;

			case 146:
				int LA71_203 = input.LA(1);


				int index71_203 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_203);
				if (s >= 0) return s;
				break;

			case 147:
				int LA71_204 = input.LA(1);


				int index71_204 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_204);
				if (s >= 0) return s;
				break;

			case 148:
				int LA71_205 = input.LA(1);


				int index71_205 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_205);
				if (s >= 0) return s;
				break;

			case 149:
				int LA71_206 = input.LA(1);


				int index71_206 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_206);
				if (s >= 0) return s;
				break;

			case 150:
				int LA71_207 = input.LA(1);


				int index71_207 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_207);
				if (s >= 0) return s;
				break;

			case 151:
				int LA71_216 = input.LA(1);


				int index71_216 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_216);
				if (s >= 0) return s;
				break;

			case 152:
				int LA71_217 = input.LA(1);


				int index71_217 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_217);
				if (s >= 0) return s;
				break;

			case 153:
				int LA71_218 = input.LA(1);


				int index71_218 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_218);
				if (s >= 0) return s;
				break;

			case 154:
				int LA71_219 = input.LA(1);


				int index71_219 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_219);
				if (s >= 0) return s;
				break;

			case 155:
				int LA71_220 = input.LA(1);


				int index71_220 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_220);
				if (s >= 0) return s;
				break;

			case 156:
				int LA71_221 = input.LA(1);


				int index71_221 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_221);
				if (s >= 0) return s;
				break;

			case 157:
				int LA71_222 = input.LA(1);


				int index71_222 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_222);
				if (s >= 0) return s;
				break;

			case 158:
				int LA71_223 = input.LA(1);


				int index71_223 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_223);
				if (s >= 0) return s;
				break;

			case 159:
				int LA71_224 = input.LA(1);


				int index71_224 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_224);
				if (s >= 0) return s;
				break;

			case 160:
				int LA71_225 = input.LA(1);


				int index71_225 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_225);
				if (s >= 0) return s;
				break;

			case 161:
				int LA71_226 = input.LA(1);


				int index71_226 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_226);
				if (s >= 0) return s;
				break;

			case 162:
				int LA71_227 = input.LA(1);


				int index71_227 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_227);
				if (s >= 0) return s;
				break;

			case 163:
				int LA71_228 = input.LA(1);


				int index71_228 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_228);
				if (s >= 0) return s;
				break;

			case 164:
				int LA71_229 = input.LA(1);


				int index71_229 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_229);
				if (s >= 0) return s;
				break;

			case 165:
				int LA71_230 = input.LA(1);


				int index71_230 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_230);
				if (s >= 0) return s;
				break;

			case 166:
				int LA71_231 = input.LA(1);


				int index71_231 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_231);
				if (s >= 0) return s;
				break;

			case 167:
				int LA71_232 = input.LA(1);


				int index71_232 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_232);
				if (s >= 0) return s;
				break;

			case 168:
				int LA71_233 = input.LA(1);


				int index71_233 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_233);
				if (s >= 0) return s;
				break;

			case 169:
				int LA71_234 = input.LA(1);


				int index71_234 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_234);
				if (s >= 0) return s;
				break;

			case 170:
				int LA71_235 = input.LA(1);


				int index71_235 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_235);
				if (s >= 0) return s;
				break;

			case 171:
				int LA71_244 = input.LA(1);


				int index71_244 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_244);
				if (s >= 0) return s;
				break;

			case 172:
				int LA71_245 = input.LA(1);


				int index71_245 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_245);
				if (s >= 0) return s;
				break;

			case 173:
				int LA71_246 = input.LA(1);


				int index71_246 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_246);
				if (s >= 0) return s;
				break;

			case 174:
				int LA71_247 = input.LA(1);


				int index71_247 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_247);
				if (s >= 0) return s;
				break;

			case 175:
				int LA71_248 = input.LA(1);


				int index71_248 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_248);
				if (s >= 0) return s;
				break;

			case 176:
				int LA71_249 = input.LA(1);


				int index71_249 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_249);
				if (s >= 0) return s;
				break;

			case 177:
				int LA71_250 = input.LA(1);


				int index71_250 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_250);
				if (s >= 0) return s;
				break;

			case 178:
				int LA71_251 = input.LA(1);


				int index71_251 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_251);
				if (s >= 0) return s;
				break;

			case 179:
				int LA71_252 = input.LA(1);


				int index71_252 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_252);
				if (s >= 0) return s;
				break;

			case 180:
				int LA71_253 = input.LA(1);


				int index71_253 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_253);
				if (s >= 0) return s;
				break;

			case 181:
				int LA71_254 = input.LA(1);


				int index71_254 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_254);
				if (s >= 0) return s;
				break;

			case 182:
				int LA71_255 = input.LA(1);


				int index71_255 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_255);
				if (s >= 0) return s;
				break;

			case 183:
				int LA71_256 = input.LA(1);


				int index71_256 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_256);
				if (s >= 0) return s;
				break;

			case 184:
				int LA71_257 = input.LA(1);


				int index71_257 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_257);
				if (s >= 0) return s;
				break;

			case 185:
				int LA71_258 = input.LA(1);


				int index71_258 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_258);
				if (s >= 0) return s;
				break;

			case 186:
				int LA71_259 = input.LA(1);


				int index71_259 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_259);
				if (s >= 0) return s;
				break;

			case 187:
				int LA71_260 = input.LA(1);


				int index71_260 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_260);
				if (s >= 0) return s;
				break;

			case 188:
				int LA71_261 = input.LA(1);


				int index71_261 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_261);
				if (s >= 0) return s;
				break;

			case 189:
				int LA71_262 = input.LA(1);


				int index71_262 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_262);
				if (s >= 0) return s;
				break;

			case 190:
				int LA71_263 = input.LA(1);


				int index71_263 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_263);
				if (s >= 0) return s;
				break;

			case 191:
				int LA71_264 = input.LA(1);


				int index71_264 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_264);
				if (s >= 0) return s;
				break;

			case 192:
				int LA71_265 = input.LA(1);


				int index71_265 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_265);
				if (s >= 0) return s;
				break;

			case 193:
				int LA71_266 = input.LA(1);


				int index71_266 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_266);
				if (s >= 0) return s;
				break;

			case 194:
				int LA71_267 = input.LA(1);


				int index71_267 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_267);
				if (s >= 0) return s;
				break;

			case 195:
				int LA71_268 = input.LA(1);


				int index71_268 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_268);
				if (s >= 0) return s;
				break;

			case 196:
				int LA71_269 = input.LA(1);


				int index71_269 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_269);
				if (s >= 0) return s;
				break;

			case 197:
				int LA71_270 = input.LA(1);


				int index71_270 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_270);
				if (s >= 0) return s;
				break;

			case 198:
				int LA71_271 = input.LA(1);


				int index71_271 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_271);
				if (s >= 0) return s;
				break;

			case 199:
				int LA71_272 = input.LA(1);


				int index71_272 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_272);
				if (s >= 0) return s;
				break;

			case 200:
				int LA71_273 = input.LA(1);


				int index71_273 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_273);
				if (s >= 0) return s;
				break;

			case 201:
				int LA71_274 = input.LA(1);


				int index71_274 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_274);
				if (s >= 0) return s;
				break;

			case 202:
				int LA71_275 = input.LA(1);


				int index71_275 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_275);
				if (s >= 0) return s;
				break;

			case 203:
				int LA71_276 = input.LA(1);


				int index71_276 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_276);
				if (s >= 0) return s;
				break;

			case 204:
				int LA71_277 = input.LA(1);


				int index71_277 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_277);
				if (s >= 0) return s;
				break;

			case 205:
				int LA71_278 = input.LA(1);


				int index71_278 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_278);
				if (s >= 0) return s;
				break;

			case 206:
				int LA71_279 = input.LA(1);


				int index71_279 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_279);
				if (s >= 0) return s;
				break;

			case 207:
				int LA71_280 = input.LA(1);


				int index71_280 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_280);
				if (s >= 0) return s;
				break;

			case 208:
				int LA71_281 = input.LA(1);


				int index71_281 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_281);
				if (s >= 0) return s;
				break;

			case 209:
				int LA71_282 = input.LA(1);


				int index71_282 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_282);
				if (s >= 0) return s;
				break;

			case 210:
				int LA71_283 = input.LA(1);


				int index71_283 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_283);
				if (s >= 0) return s;
				break;

			case 211:
				int LA71_284 = input.LA(1);


				int index71_284 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_284);
				if (s >= 0) return s;
				break;

			case 212:
				int LA71_285 = input.LA(1);


				int index71_285 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_285);
				if (s >= 0) return s;
				break;

			case 213:
				int LA71_286 = input.LA(1);


				int index71_286 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_286);
				if (s >= 0) return s;
				break;

			case 214:
				int LA71_287 = input.LA(1);


				int index71_287 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_287);
				if (s >= 0) return s;
				break;

			case 215:
				int LA71_288 = input.LA(1);


				int index71_288 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_288);
				if (s >= 0) return s;
				break;

			case 216:
				int LA71_289 = input.LA(1);


				int index71_289 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_289);
				if (s >= 0) return s;
				break;

			case 217:
				int LA71_290 = input.LA(1);


				int index71_290 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_290);
				if (s >= 0) return s;
				break;

			case 218:
				int LA71_291 = input.LA(1);


				int index71_291 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_291);
				if (s >= 0) return s;
				break;

			case 219:
				int LA71_292 = input.LA(1);


				int index71_292 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_292);
				if (s >= 0) return s;
				break;

			case 220:
				int LA71_293 = input.LA(1);


				int index71_293 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_293);
				if (s >= 0) return s;
				break;

			case 221:
				int LA71_294 = input.LA(1);


				int index71_294 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_294);
				if (s >= 0) return s;
				break;

			case 222:
				int LA71_295 = input.LA(1);


				int index71_295 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_295);
				if (s >= 0) return s;
				break;

			case 223:
				int LA71_296 = input.LA(1);


				int index71_296 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_296);
				if (s >= 0) return s;
				break;

			case 224:
				int LA71_297 = input.LA(1);


				int index71_297 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_297);
				if (s >= 0) return s;
				break;

			case 225:
				int LA71_298 = input.LA(1);


				int index71_298 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_298);
				if (s >= 0) return s;
				break;

			case 226:
				int LA71_299 = input.LA(1);


				int index71_299 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_299);
				if (s >= 0) return s;
				break;

			case 227:
				int LA71_300 = input.LA(1);


				int index71_300 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_300);
				if (s >= 0) return s;
				break;

			case 228:
				int LA71_301 = input.LA(1);


				int index71_301 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_301);
				if (s >= 0) return s;
				break;

			case 229:
				int LA71_302 = input.LA(1);


				int index71_302 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_302);
				if (s >= 0) return s;
				break;

			case 230:
				int LA71_303 = input.LA(1);


				int index71_303 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_303);
				if (s >= 0) return s;
				break;

			case 231:
				int LA71_304 = input.LA(1);


				int index71_304 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_304);
				if (s >= 0) return s;
				break;

			case 232:
				int LA71_305 = input.LA(1);


				int index71_305 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_305);
				if (s >= 0) return s;
				break;

			case 233:
				int LA71_306 = input.LA(1);


				int index71_306 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_306);
				if (s >= 0) return s;
				break;

			case 234:
				int LA71_307 = input.LA(1);


				int index71_307 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_307);
				if (s >= 0) return s;
				break;

			case 235:
				int LA71_308 = input.LA(1);


				int index71_308 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_308);
				if (s >= 0) return s;
				break;

			case 236:
				int LA71_309 = input.LA(1);


				int index71_309 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_309);
				if (s >= 0) return s;
				break;

			case 237:
				int LA71_310 = input.LA(1);


				int index71_310 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_310);
				if (s >= 0) return s;
				break;

			case 238:
				int LA71_311 = input.LA(1);


				int index71_311 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_311);
				if (s >= 0) return s;
				break;

			case 239:
				int LA71_312 = input.LA(1);


				int index71_312 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_312);
				if (s >= 0) return s;
				break;

			case 240:
				int LA71_313 = input.LA(1);


				int index71_313 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_313);
				if (s >= 0) return s;
				break;

			case 241:
				int LA71_314 = input.LA(1);


				int index71_314 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_314);
				if (s >= 0) return s;
				break;

			case 242:
				int LA71_315 = input.LA(1);


				int index71_315 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_315);
				if (s >= 0) return s;
				break;

			case 243:
				int LA71_316 = input.LA(1);


				int index71_316 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_316);
				if (s >= 0) return s;
				break;

			case 244:
				int LA71_317 = input.LA(1);


				int index71_317 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_317);
				if (s >= 0) return s;
				break;

			case 245:
				int LA71_318 = input.LA(1);


				int index71_318 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_318);
				if (s >= 0) return s;
				break;

			case 246:
				int LA71_319 = input.LA(1);


				int index71_319 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_319);
				if (s >= 0) return s;
				break;

			case 247:
				int LA71_320 = input.LA(1);


				int index71_320 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_320);
				if (s >= 0) return s;
				break;

			case 248:
				int LA71_321 = input.LA(1);


				int index71_321 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_321);
				if (s >= 0) return s;
				break;

			case 249:
				int LA71_322 = input.LA(1);


				int index71_322 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_322);
				if (s >= 0) return s;
				break;

			case 250:
				int LA71_323 = input.LA(1);


				int index71_323 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_323);
				if (s >= 0) return s;
				break;

			case 251:
				int LA71_324 = input.LA(1);


				int index71_324 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_324);
				if (s >= 0) return s;
				break;

			case 252:
				int LA71_325 = input.LA(1);


				int index71_325 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_325);
				if (s >= 0) return s;
				break;

			case 253:
				int LA71_326 = input.LA(1);


				int index71_326 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_326);
				if (s >= 0) return s;
				break;

			case 254:
				int LA71_327 = input.LA(1);


				int index71_327 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_327);
				if (s >= 0) return s;
				break;

			case 255:
				int LA71_328 = input.LA(1);


				int index71_328 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_328);
				if (s >= 0) return s;
				break;

			case 256:
				int LA71_329 = input.LA(1);


				int index71_329 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_329);
				if (s >= 0) return s;
				break;

			case 257:
				int LA71_330 = input.LA(1);


				int index71_330 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_330);
				if (s >= 0) return s;
				break;

			case 258:
				int LA71_331 = input.LA(1);


				int index71_331 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_331);
				if (s >= 0) return s;
				break;

			case 259:
				int LA71_332 = input.LA(1);


				int index71_332 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_332);
				if (s >= 0) return s;
				break;

			case 260:
				int LA71_333 = input.LA(1);


				int index71_333 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_333);
				if (s >= 0) return s;
				break;

			case 261:
				int LA71_334 = input.LA(1);


				int index71_334 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_334);
				if (s >= 0) return s;
				break;

			case 262:
				int LA71_335 = input.LA(1);


				int index71_335 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_335);
				if (s >= 0) return s;
				break;

			case 263:
				int LA71_336 = input.LA(1);


				int index71_336 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_336);
				if (s >= 0) return s;
				break;

			case 264:
				int LA71_337 = input.LA(1);


				int index71_337 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_337);
				if (s >= 0) return s;
				break;

			case 265:
				int LA71_338 = input.LA(1);


				int index71_338 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_338);
				if (s >= 0) return s;
				break;

			case 266:
				int LA71_339 = input.LA(1);


				int index71_339 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_339);
				if (s >= 0) return s;
				break;

			case 267:
				int LA71_340 = input.LA(1);


				int index71_340 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_340);
				if (s >= 0) return s;
				break;

			case 268:
				int LA71_341 = input.LA(1);


				int index71_341 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred141_C_fragment))) {s = 68;}

				else if ((true)) {s = 342;}


				input.Seek(index71_341);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 71, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA82 : DFA
	{
		private const string DFA82_eotS =
			"\x7D\xFFFF";
		private const string DFA82_eofS =
			"\x7D\xFFFF";
		private const string DFA82_minS =
			"\x1\x4\x1\xD\x12\xFFFF\x1\x4\x1D\xFFFF\x1\x0\x5\xFFFF\x1\x0\xE\xFFFF"+
			"\x1\x0\x12\xFFFF\x2\x0\xA\xFFFF\x1\x0\x2\xFFFF\x1\x0\x13\xFFFF";
		private const string DFA82_maxS =
			"\x1\x70\x1\x6E\x12\xFFFF\x1\x70\x1D\xFFFF\x1\x0\x5\xFFFF\x1\x0\xE\xFFFF"+
			"\x1\x0\x12\xFFFF\x2\x0\xA\xFFFF\x1\x0\x2\xFFFF\x1\x0\x13\xFFFF";
		private const string DFA82_acceptS =
			"\x2\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x5D\xFFFF";
		private const string DFA82_specialS =
			"\x32\xFFFF\x1\x0\x5\xFFFF\x1\x1\xE\xFFFF\x1\x2\x12\xFFFF\x1\x3\x1\x4"+
			"\xA\xFFFF\x1\x5\x2\xFFFF\x1\x6\x13\xFFFF}>";
		private static readonly string[] DFA82_transitionS =
			{
				"\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x1\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1"+
				"\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x7\xFFFF\x1\x2\xF\xFFFF"+
				"\x1\x2\x1\x1F\x2\x2\x1\x1F\x1\x14\x4\x1F\x2\x2\x2\x1F\x3\x2\x1\x1F\x1"+
				"\xFFFF\x3\x1F\x3\x2\x5\x1F\x1\x2\x2\x1F\x1\x2\x2\x1F\x1\x2\x6\x1F\x2"+
				"\x2\x3\xFFFF\x2\x2",
				"\x1\x1F\xA\xFFFF\x6\x2\x1\x32\x1\xFFFF\x1\x38\xA\x2\x1\xFFFF\x3\x2"+
				"\x1\x47\xC\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x1F\x2\xFFFF\x6\x1F\x2\xFFFF"+
				"\x2\x1F\x3\xFFFF\x1\x1F\x1\xFFFF\x3\x1F\x3\xFFFF\x5\x1F\x1\xFFFF\x2"+
				"\x1F\x1\xFFFF\x2\x1F\x2\xFFFF\x5\x1F\x2\xFFFF\x3\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x5B"+
				"\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF"+
				"\x1\x5A\x1\xFFFF\x1\x66\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x7\xFFFF\x1\x1F"+
				"\xF\xFFFF\x1\x2\x1\x1F\x2\x2\x1\x1F\x1\x69\x4\x1F\x2\xFFFF\x2\x1F\x3"+
				"\xFFFF\x1\x1F\x1\xFFFF\x3\x1F\x3\xFFFF\x5\x1F\x1\xFFFF\x2\x1F\x1\x2"+
				"\x2\x1F\x1\xFFFF\x6\x1F\x6\xFFFF\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA82_eot = DFA.UnpackEncodedString(DFA82_eotS);
		private static readonly short[] DFA82_eof = DFA.UnpackEncodedString(DFA82_eofS);
		private static readonly char[] DFA82_min = DFA.UnpackEncodedStringToUnsignedChars(DFA82_minS);
		private static readonly char[] DFA82_max = DFA.UnpackEncodedStringToUnsignedChars(DFA82_maxS);
		private static readonly short[] DFA82_accept = DFA.UnpackEncodedString(DFA82_acceptS);
		private static readonly short[] DFA82_special = DFA.UnpackEncodedString(DFA82_specialS);
		private static readonly short[][] DFA82_transition;

		static DFA82()
		{
			int numStates = DFA82_transitionS.Length;
			DFA82_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA82_transition[i] = DFA.UnpackEncodedString(DFA82_transitionS[i]);
			}
		}

		public DFA82( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 82;
			this.eot = DFA82_eot;
			this.eof = DFA82_eof;
			this.min = DFA82_min;
			this.max = DFA82_max;
			this.accept = DFA82_accept;
			this.special = DFA82_special;
			this.transition = DFA82_transition;
		}

		public override string Description { get { return "()* loopback of 474:8: ( declaration )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition82(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA82_50 = input.LA(1);


				int index82_50 = input.Index;
				input.Rewind();
				s = -1;
				if ((((EvaluatePredicate(synpred162_C_fragment)&&EvaluatePredicate(synpred162_C_fragment))&&(isTypeName(input.LT(1).getText()))))) {s = 31;}

				else if ((true)) {s = 2;}


				input.Seek(index82_50);
				if (s >= 0) return s;
				break;

			case 1:
				int LA82_56 = input.LA(1);


				int index82_56 = input.Index;
				input.Rewind();
				s = -1;
				if ((((EvaluatePredicate(synpred162_C_fragment)&&EvaluatePredicate(synpred162_C_fragment))&&(isTypeName(input.LT(1).getText()))))) {s = 31;}

				else if ((true)) {s = 2;}


				input.Seek(index82_56);
				if (s >= 0) return s;
				break;

			case 2:
				int LA82_71 = input.LA(1);


				int index82_71 = input.Index;
				input.Rewind();
				s = -1;
				if ((((EvaluatePredicate(synpred162_C_fragment)&&EvaluatePredicate(synpred162_C_fragment))&&(isTypeName(input.LT(1).getText()))))) {s = 31;}

				else if ((true)) {s = 2;}


				input.Seek(index82_71);
				if (s >= 0) return s;
				break;

			case 3:
				int LA82_90 = input.LA(1);


				int index82_90 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred162_C_fragment))) {s = 31;}

				else if ((true)) {s = 2;}


				input.Seek(index82_90);
				if (s >= 0) return s;
				break;

			case 4:
				int LA82_91 = input.LA(1);


				int index82_91 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred162_C_fragment))) {s = 31;}

				else if ((true)) {s = 2;}


				input.Seek(index82_91);
				if (s >= 0) return s;
				break;

			case 5:
				int LA82_102 = input.LA(1);


				int index82_102 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred162_C_fragment))) {s = 31;}

				else if ((true)) {s = 2;}


				input.Seek(index82_102);
				if (s >= 0) return s;
				break;

			case 6:
				int LA82_105 = input.LA(1);


				int index82_105 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred162_C_fragment))) {s = 31;}

				else if ((true)) {s = 2;}


				input.Seek(index82_105);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 82, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA97 : DFA
	{
		private const string DFA97_eotS =
			"\x4E\xFFFF";
		private const string DFA97_eofS =
			"\x4E\xFFFF";
		private const string DFA97_minS =
			"\x1\xD\xB\x0\x2\xD\x1\x1E\x2\x0\x2E\xFFFF\x7\x0\x8\xFFFF";
		private const string DFA97_maxS =
			"\x1\x69\xB\x0\x2\x6B\x1\x1E\x2\x0\x2E\xFFFF\x7\x0\x8\xFFFF";
		private const string DFA97_acceptS =
			"\x15\xFFFF\x1\x1\x1\x2\x37\xFFFF";
		private const string DFA97_specialS =
			"\x1\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x3\xFFFF\x1\xB\x1\xC\x2E\xFFFF\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11"+
			"\x1\x12\x1\x13\x8\xFFFF}>";
		private static readonly string[] DFA97_transitionS =
			{
				"\x1\x1\x35\xFFFF\x1\x10\x1\xFFFF\x2\x10\x1\xF\x1\x2\x2\xFFFF\x1\x4\x1"+
				"\xF\x3\xFFFF\x1\x9\x1\xFFFF\x1\xD\x1\x2\x1\x8\x3\xFFFF\x1\x10\x1\x6"+
				"\x1\x7\x1\x2\x1\xF\x1\xFFFF\x1\x5\x1\xA\x1\xFFFF\x1\x2\x1\xC\x2\xFFFF"+
				"\x1\xE\x1\xC\x1\xB\x1\x3\x1\xF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\x40\x32\xFFFF\x1\x3F\x2A\xFFFF\x1\x41",
				"\x1\x43\x32\xFFFF\x1\x42\x2A\xFFFF\x1\x44",
				"\x1\x45",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA97_eot = DFA.UnpackEncodedString(DFA97_eotS);
		private static readonly short[] DFA97_eof = DFA.UnpackEncodedString(DFA97_eofS);
		private static readonly char[] DFA97_min = DFA.UnpackEncodedStringToUnsignedChars(DFA97_minS);
		private static readonly char[] DFA97_max = DFA.UnpackEncodedStringToUnsignedChars(DFA97_maxS);
		private static readonly short[] DFA97_accept = DFA.UnpackEncodedString(DFA97_acceptS);
		private static readonly short[] DFA97_special = DFA.UnpackEncodedString(DFA97_specialS);
		private static readonly short[][] DFA97_transition;

		static DFA97()
		{
			int numStates = DFA97_transitionS.Length;
			DFA97_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA97_transition[i] = DFA.UnpackEncodedString(DFA97_transitionS[i]);
			}
		}

		public DFA97( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 97;
			this.eot = DFA97_eot;
			this.eof = DFA97_eof;
			this.min = DFA97_min;
			this.max = DFA97_max;
			this.accept = DFA97_accept;
			this.special = DFA97_special;
			this.transition = DFA97_transition;
		}

		public override string Description { get { return "535:1: gcc_attribute_parameter : ( gcc_attribute_name | gcc_attribute_name ( '(' ( assignment_expression ( ',' assignment_expression )* )? ')' )? );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition97(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA97_1 = input.LA(1);


				int index97_1 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred180_C_fragment))) {s = 21;}

				else if ((true)) {s = 22;}


				input.Seek(index97_1);
				if (s >= 0) return s;
				break;

			case 1:
				int LA97_2 = input.LA(1);


				int index97_2 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred180_C_fragment))) {s = 21;}

				else if ((true)) {s = 22;}


				input.Seek(index97_2);
				if (s >= 0) return s;
				break;

			case 2:
				int LA97_3 = input.LA(1);


				int index97_3 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred180_C_fragment))) {s = 21;}

				else if ((true)) {s = 22;}


				input.Seek(index97_3);
				if (s >= 0) return s;
				break;

			case 3:
				int LA97_4 = input.LA(1);


				int index97_4 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred180_C_fragment))) {s = 21;}

				else if ((true)) {s = 22;}


				input.Seek(index97_4);
				if (s >= 0) return s;
				break;

			case 4:
				int LA97_5 = input.LA(1);


				int index97_5 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred180_C_fragment))) {s = 21;}

				else if ((true)) {s = 22;}


				input.Seek(index97_5);
				if (s >= 0) return s;
				break;

			case 5:
				int LA97_6 = input.LA(1);


				int index97_6 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred180_C_fragment))) {s = 21;}

				else if ((true)) {s = 22;}


				input.Seek(index97_6);
				if (s >= 0) return s;
				break;

			case 6:
				int LA97_7 = input.LA(1);


				int index97_7 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred180_C_fragment))) {s = 21;}

				else if ((true)) {s = 22;}


				input.Seek(index97_7);
				if (s >= 0) return s;
				break;

			case 7:
				int LA97_8 = input.LA(1);


				int index97_8 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred180_C_fragment))) {s = 21;}

				else if ((true)) {s = 22;}


				input.Seek(index97_8);
				if (s >= 0) return s;
				break;

			case 8:
				int LA97_9 = input.LA(1);


				int index97_9 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred180_C_fragment))) {s = 21;}

				else if ((true)) {s = 22;}


				input.Seek(index97_9);
				if (s >= 0) return s;
				break;

			case 9:
				int LA97_10 = input.LA(1);


				int index97_10 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred180_C_fragment))) {s = 21;}

				else if ((true)) {s = 22;}


				input.Seek(index97_10);
				if (s >= 0) return s;
				break;

			case 10:
				int LA97_11 = input.LA(1);


				int index97_11 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred180_C_fragment))) {s = 21;}

				else if ((true)) {s = 22;}


				input.Seek(index97_11);
				if (s >= 0) return s;
				break;

			case 11:
				int LA97_15 = input.LA(1);


				int index97_15 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred180_C_fragment))) {s = 21;}

				else if ((true)) {s = 22;}


				input.Seek(index97_15);
				if (s >= 0) return s;
				break;

			case 12:
				int LA97_16 = input.LA(1);


				int index97_16 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred180_C_fragment))) {s = 21;}

				else if ((true)) {s = 22;}


				input.Seek(index97_16);
				if (s >= 0) return s;
				break;

			case 13:
				int LA97_63 = input.LA(1);


				int index97_63 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred180_C_fragment))) {s = 21;}

				else if ((true)) {s = 22;}


				input.Seek(index97_63);
				if (s >= 0) return s;
				break;

			case 14:
				int LA97_64 = input.LA(1);


				int index97_64 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred180_C_fragment))) {s = 21;}

				else if ((true)) {s = 22;}


				input.Seek(index97_64);
				if (s >= 0) return s;
				break;

			case 15:
				int LA97_65 = input.LA(1);


				int index97_65 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred180_C_fragment))) {s = 21;}

				else if ((true)) {s = 22;}


				input.Seek(index97_65);
				if (s >= 0) return s;
				break;

			case 16:
				int LA97_66 = input.LA(1);


				int index97_66 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred180_C_fragment))) {s = 21;}

				else if ((true)) {s = 22;}


				input.Seek(index97_66);
				if (s >= 0) return s;
				break;

			case 17:
				int LA97_67 = input.LA(1);


				int index97_67 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred180_C_fragment))) {s = 21;}

				else if ((true)) {s = 22;}


				input.Seek(index97_67);
				if (s >= 0) return s;
				break;

			case 18:
				int LA97_68 = input.LA(1);


				int index97_68 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred180_C_fragment))) {s = 21;}

				else if ((true)) {s = 22;}


				input.Seek(index97_68);
				if (s >= 0) return s;
				break;

			case 19:
				int LA97_69 = input.LA(1);


				int index97_69 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred180_C_fragment))) {s = 21;}

				else if ((true)) {s = 22;}


				input.Seek(index97_69);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 97, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA101 : DFA
	{
		private const string DFA101_eotS =
			"\x66\xFFFF";
		private const string DFA101_eofS =
			"\x66\xFFFF";
		private const string DFA101_minS =
			"\x1\x4\xC\xFFFF\x1\x0\x2\xFFFF\x1\x4\x34\xFFFF\x2\x0\xE\xFFFF\x1\x0\x2"+
			"\xFFFF\x1\x0\xD\xFFFF";
		private const string DFA101_maxS =
			"\x1\x70\xC\xFFFF\x1\x0\x2\xFFFF\x1\x70\x34\xFFFF\x2\x0\xE\xFFFF\x1\x0"+
			"\x2\xFFFF\x1\x0\xD\xFFFF";
		private const string DFA101_acceptS =
			"\x1\xFFFF\x1\x1\xF\xFFFF\x1\x2\x54\xFFFF";
		private const string DFA101_specialS =
			"\xD\xFFFF\x1\x0\x37\xFFFF\x1\x1\x1\x2\xE\xFFFF\x1\x3\x2\xFFFF\x1\x4\xD"+
			"\xFFFF}>";
		private static readonly string[] DFA101_transitionS =
			{
				"\x1\x11\x1\xFFFF\x1\x11\x2\xFFFF\x1\x11\x1\xFFFF\x1\x11\x1\xFFFF\x1"+
				"\xD\x4\xFFFF\x1\x11\x1\xFFFF\x1\x11\x2\xFFFF\x1\x11\x4\xFFFF\x1\x11"+
				"\x1\xFFFF\x1\x11\x1\xFFFF\x1\x11\x1\xFFFF\x2\x11\x2\xFFFF\x2\x11\x17"+
				"\xFFFF\x1\x11\x1\x1\x2\x11\x1\xFFFF\x1\x10\x2\xFFFF\x1\x1\x3\xFFFF\x2"+
				"\x1\x3\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1\x4\xFFFF\x2\x1\x1\xFFFF"+
				"\x1\x1\x1\xFFFF\x2\x1\x1\x11\x1\xFFFF\x1\x1\x2\xFFFF\x5\x1\x6\xFFFF"+
				"\x1\x11",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"\x1\x11\x1\xFFFF\x1\x11\x2\xFFFF\x1\x11\x1\xFFFF\x1\x11\x1\xFFFF\x1"+
				"\x55\x4\xFFFF\x1\x11\x1\xFFFF\x1\x11\x2\xFFFF\x1\x11\x4\xFFFF\x1\x11"+
				"\x1\xFFFF\x1\x46\x1\x1\x1\x45\x1\xFFFF\x2\x11\x2\xFFFF\x2\x11\x13\xFFFF"+
				"\x1\x1\x3\xFFFF\x1\x11\x1\x1\x2\x11\x1\xFFFF\x1\x58\x2\xFFFF\x1\x1\x3"+
				"\xFFFF\x2\x1\x3\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1\x4\xFFFF\x2"+
				"\x1\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1\x1\x11\x1\xFFFF\x1\x1\x2\xFFFF\x5"+
				"\x1\x6\xFFFF\x1\x11",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA101_eot = DFA.UnpackEncodedString(DFA101_eotS);
		private static readonly short[] DFA101_eof = DFA.UnpackEncodedString(DFA101_eofS);
		private static readonly char[] DFA101_min = DFA.UnpackEncodedStringToUnsignedChars(DFA101_minS);
		private static readonly char[] DFA101_max = DFA.UnpackEncodedStringToUnsignedChars(DFA101_maxS);
		private static readonly short[] DFA101_accept = DFA.UnpackEncodedString(DFA101_acceptS);
		private static readonly short[] DFA101_special = DFA.UnpackEncodedString(DFA101_specialS);
		private static readonly short[][] DFA101_transition;

		static DFA101()
		{
			int numStates = DFA101_transitionS.Length;
			DFA101_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA101_transition[i] = DFA.UnpackEncodedString(DFA101_transitionS[i]);
			}
		}

		public DFA101( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 101;
			this.eot = DFA101_eot;
			this.eof = DFA101_eof;
			this.min = DFA101_min;
			this.max = DFA101_max;
			this.accept = DFA101_accept;
			this.special = DFA101_special;
			this.transition = DFA101_transition;
		}

		public override string Description { get { return "566:17: ( type_name | assignment_expression )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition101(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA101_13 = input.LA(1);


				int index101_13 = input.Index;
				input.Rewind();
				s = -1;
				if ((((EvaluatePredicate(synpred190_C_fragment)&&EvaluatePredicate(synpred190_C_fragment))&&(isTypeName(input.LT(1).getText()))))) {s = 1;}

				else if ((true)) {s = 17;}


				input.Seek(index101_13);
				if (s >= 0) return s;
				break;

			case 1:
				int LA101_69 = input.LA(1);


				int index101_69 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred190_C_fragment))) {s = 1;}

				else if ((true)) {s = 17;}


				input.Seek(index101_69);
				if (s >= 0) return s;
				break;

			case 2:
				int LA101_70 = input.LA(1);


				int index101_70 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred190_C_fragment))) {s = 1;}

				else if ((true)) {s = 17;}


				input.Seek(index101_70);
				if (s >= 0) return s;
				break;

			case 3:
				int LA101_85 = input.LA(1);


				int index101_85 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred190_C_fragment))) {s = 1;}

				else if ((true)) {s = 17;}


				input.Seek(index101_85);
				if (s >= 0) return s;
				break;

			case 4:
				int LA101_88 = input.LA(1);


				int index101_88 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred190_C_fragment))) {s = 1;}

				else if ((true)) {s = 17;}


				input.Seek(index101_88);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 101, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _external_declaration_in_translation_unit71 = new BitSet(new ulong[]{0x140002002UL,0x3F6DF1D19F9UL});
		public static readonly BitSet _function_definition_in_external_declaration107 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_external_declaration112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_function_definition134 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _declarator_in_function_definition137 = new BitSet(new ulong[]{0x2000UL,0xBF6DF1D19F9UL});
		public static readonly BitSet _declaration_in_function_definition143 = new BitSet(new ulong[]{0x2000UL,0xBF6DF1D19F9UL});
		public static readonly BitSet _compound_statement_in_function_definition146 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _compound_statement_in_function_definition153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_extension_specifier_in_declaration181 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _100_in_declaration184 = new BitSet(new ulong[]{0x140002000UL,0x3E6DF1D19F9UL});
		public static readonly BitSet _declaration_specifiers_in_declaration186 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _init_declarator_list_in_declaration196 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_declaration198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_declaration204 = new BitSet(new ulong[]{0x800140002000UL});
		public static readonly BitSet _init_declarator_list_in_declaration206 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_declaration209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _storage_class_specifier_in_declaration_specifiers226 = new BitSet(new ulong[]{0x2002UL,0x3E6DF1D19F9UL});
		public static readonly BitSet _type_specifier_in_declaration_specifiers234 = new BitSet(new ulong[]{0x2002UL,0x3E6DF1D19F9UL});
		public static readonly BitSet _type_qualifier_in_declaration_specifiers242 = new BitSet(new ulong[]{0x2002UL,0x3E6DF1D19F9UL});
		public static readonly BitSet _gcc_function_specifier_in_declaration_specifiers250 = new BitSet(new ulong[]{0x2002UL,0x3E6DF1D19F9UL});
		public static readonly BitSet _gcc_declaration_specifier_in_declaration_specifiers258 = new BitSet(new ulong[]{0x2002UL,0x3E6DF1D19F9UL});
		public static readonly BitSet _init_declarator_in_init_declarator_list274 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_init_declarator_list277 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _init_declarator_in_init_declarator_list279 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _declarator_in_init_declarator292 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _52_in_init_declarator295 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1080100000016UL});
		public static readonly BitSet _initializer_in_init_declarator297 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_type_specifier336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _75_in_type_specifier341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _94_in_type_specifier346 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _89_in_type_specifier351 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_type_specifier356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _84_in_type_specifier361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _80_in_type_specifier366 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _95_in_type_specifier371 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_type_specifier376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_or_union_specifier_in_type_specifier381 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_specifier_in_type_specifier386 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_id_in_type_specifier391 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_typeof_in_type_specifier396 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_type_id411 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_or_union_in_struct_or_union_specifier441 = new BitSet(new ulong[]{0x2000UL,0x80000000001UL});
		public static readonly BitSet _gcc_attribute_list_in_struct_or_union_specifier443 = new BitSet(new ulong[]{0x2000UL,0x80000000000UL});
		public static readonly BitSet _IDENTIFIER_in_struct_or_union_specifier446 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _107_in_struct_or_union_specifier449 = new BitSet(new ulong[]{0x800000002000UL,0x3E4D6151891UL});
		public static readonly BitSet _struct_declaration_list_in_struct_or_union_specifier451 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _111_in_struct_or_union_specifier453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_or_union_in_struct_or_union_specifier458 = new BitSet(new ulong[]{0x2000UL,0x1UL});
		public static readonly BitSet _gcc_attribute_list_in_struct_or_union_specifier460 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_struct_or_union_specifier463 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_struct_declaration_list490 = new BitSet(new ulong[]{0x800000002002UL,0x3E4D6151891UL});
		public static readonly BitSet _specifier_qualifier_list_in_struct_declaration502 = new BitSet(new ulong[]{0x400140002000UL});
		public static readonly BitSet _struct_declarator_list_in_struct_declaration504 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_struct_declaration506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _47_in_struct_declaration511 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_qualifier_in_specifier_qualifier_list525 = new BitSet(new ulong[]{0x2002UL,0x3E4D6151891UL});
		public static readonly BitSet _type_specifier_in_specifier_qualifier_list529 = new BitSet(new ulong[]{0x2002UL,0x3E4D6151891UL});
		public static readonly BitSet _gcc_declaration_specifier_in_specifier_qualifier_list533 = new BitSet(new ulong[]{0x2002UL,0x3E4D6151891UL});
		public static readonly BitSet _struct_declarator_in_struct_declarator_list546 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_struct_declarator_list549 = new BitSet(new ulong[]{0x400140002000UL});
		public static readonly BitSet _struct_declarator_in_struct_declarator_list551 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _declarator_in_struct_declarator564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declarator_in_struct_declarator569 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_struct_declarator572 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _constant_expression_in_struct_declarator574 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _gcc_attribute_list_in_struct_declarator576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_enum_specifier595 = new BitSet(new ulong[]{0x2000UL,0x80000000001UL});
		public static readonly BitSet _gcc_attribute_list_in_enum_specifier597 = new BitSet(new ulong[]{0x2000UL,0x80000000000UL});
		public static readonly BitSet _IDENTIFIER_in_enum_specifier600 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _107_in_enum_specifier603 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _enumerator_list_in_enum_specifier605 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _111_in_enum_specifier607 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_enum_specifier612 = new BitSet(new ulong[]{0x2000UL,0x1UL});
		public static readonly BitSet _gcc_attribute_list_in_enum_specifier614 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_enum_specifier617 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumerator_in_enumerator_list628 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_enumerator_list631 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _enumerator_in_enumerator_list633 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _IDENTIFIER_in_enumerator646 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _52_in_enumerator649 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _constant_expression_in_enumerator651 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_declarator698 = new BitSet(new ulong[]{0x40002000UL});
		public static readonly BitSet _direct_declarator_in_declarator701 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _gcc_attribute_list_in_declarator703 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_declarator709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_direct_declarator724 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _30_in_direct_declarator735 = new BitSet(new ulong[]{0x140002000UL,0x1UL});
		public static readonly BitSet _gcc_attribute_list_in_direct_declarator737 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _declarator_in_direct_declarator740 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_direct_declarator742 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _declarator_suffix_in_direct_declarator750 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _59_in_declarator_suffix764 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _constant_expression_in_declarator_suffix766 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_declarator_suffix768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_declarator_suffix775 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_declarator_suffix777 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_declarator_suffix784 = new BitSet(new ulong[]{0x2000UL,0x3E6DF1D19F9UL});
		public static readonly BitSet _parameter_type_list_in_declarator_suffix786 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_declarator_suffix788 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_declarator_suffix795 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _identifier_list_in_declarator_suffix797 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_declarator_suffix799 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_declarator_suffix806 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_declarator_suffix808 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_pointer822 = new BitSet(new ulong[]{0x100000002UL,0x20010001081UL});
		public static readonly BitSet _type_qualifier_in_pointer825 = new BitSet(new ulong[]{0x100000002UL,0x20010001081UL});
		public static readonly BitSet _gcc_attribute_in_pointer829 = new BitSet(new ulong[]{0x100000002UL,0x20010001081UL});
		public static readonly BitSet _parameter_list_in_parameter_type_list844 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_parameter_type_list847 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _43_in_parameter_type_list849 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameter_declaration_in_parameter_list862 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_parameter_list865 = new BitSet(new ulong[]{0x2000UL,0x3E6DF1D19F9UL});
		public static readonly BitSet _parameter_declaration_in_parameter_list867 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _declaration_specifiers_in_parameter_declaration880 = new BitSet(new ulong[]{0x800000140002002UL});
		public static readonly BitSet _declarator_in_parameter_declaration883 = new BitSet(new ulong[]{0x800000140002002UL});
		public static readonly BitSet _abstract_declarator_in_parameter_declaration885 = new BitSet(new ulong[]{0x800000140002002UL});
		public static readonly BitSet _IDENTIFIER_in_identifier_list898 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_identifier_list901 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_identifier_list903 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _specifier_qualifier_list_in_type_name916 = new BitSet(new ulong[]{0x800000140000002UL});
		public static readonly BitSet _abstract_declarator_in_type_name918 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_abstract_declarator930 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_abstract_declarator935 = new BitSet(new ulong[]{0x800000040000000UL});
		public static readonly BitSet _direct_abstract_declarator_in_abstract_declarator938 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _gcc_attribute_list_in_abstract_declarator940 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_direct_abstract_declarator954 = new BitSet(new ulong[]{0x800000140000000UL,0x1UL});
		public static readonly BitSet _gcc_attribute_list_in_direct_abstract_declarator956 = new BitSet(new ulong[]{0x800000140000000UL});
		public static readonly BitSet _abstract_declarator_in_direct_abstract_declarator959 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_direct_abstract_declarator961 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _abstract_declarator_suffix_in_direct_abstract_declarator965 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _abstract_declarator_suffix_in_direct_abstract_declarator969 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _59_in_abstract_declarator_suffix981 = new BitSet(new ulong[]{0x900000CD50942A50UL,0x1020110001097UL});
		public static readonly BitSet _gcc_array_type_modifier_in_abstract_declarator_suffix983 = new BitSet(new ulong[]{0x900000CD50942A50UL,0x1020110001097UL});
		public static readonly BitSet _constant_expression_in_abstract_declarator_suffix986 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_abstract_declarator_suffix989 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_abstract_declarator_suffix994 = new BitSet(new ulong[]{0x100000000UL,0x20010001081UL});
		public static readonly BitSet _gcc_array_type_modifier_in_abstract_declarator_suffix996 = new BitSet(new ulong[]{0x100000000UL,0x20010001081UL});
		public static readonly BitSet _32_in_abstract_declarator_suffix999 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_abstract_declarator_suffix1001 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_abstract_declarator_suffix1006 = new BitSet(new ulong[]{0x80002000UL,0x3E6DF1D19F9UL});
		public static readonly BitSet _parameter_type_list_in_abstract_declarator_suffix1008 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_abstract_declarator_suffix1011 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignment_expression_in_initializer1023 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_initializer1028 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1080100000016UL});
		public static readonly BitSet _initializer_list_in_initializer1030 = new BitSet(new ulong[]{0x2000000000UL,0x800000000000UL});
		public static readonly BitSet _37_in_initializer1032 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _111_in_initializer1035 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _initializer_in_initializer_list1046 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_initializer_list1049 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1080100000016UL});
		public static readonly BitSet _initializer_in_initializer_list1051 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _assignment_expression_in_argument_expression_list1068 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_argument_expression_list1071 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _assignment_expression_in_argument_expression_list1073 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression1087 = new BitSet(new ulong[]{0x4400000002UL});
		public static readonly BitSet _34_in_additive_expression1091 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression1093 = new BitSet(new ulong[]{0x4400000002UL});
		public static readonly BitSet _38_in_additive_expression1097 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression1099 = new BitSet(new ulong[]{0x4400000002UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1113 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _32_in_multiplicative_expression1117 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1119 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _44_in_multiplicative_expression1123 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1125 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _25_in_multiplicative_expression1129 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1131 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _30_in_cast_expression1144 = new BitSet(new ulong[]{0x2000UL,0x3E4D6151891UL});
		public static readonly BitSet _type_name_in_cast_expression1146 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_cast_expression1148 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _cast_expression_in_cast_expression1150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expression_in_cast_expression1155 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _postfix_expression_in_unary_expression1166 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _35_in_unary_expression1171 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _unary_expression_in_unary_expression1173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _39_in_unary_expression1178 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _unary_expression_in_unary_expression1180 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_operator_in_unary_expression1185 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _cast_expression_in_unary_expression1187 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _96_in_unary_expression1192 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _unary_expression_in_unary_expression1194 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _96_in_unary_expression1199 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_unary_expression1201 = new BitSet(new ulong[]{0x2000UL,0x3E4D6151891UL});
		public static readonly BitSet _type_name_in_unary_expression1203 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_unary_expression1205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_unary_expression1212 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _unary_expression_in_unary_expression1214 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_unary_expression1219 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_unary_expression1221 = new BitSet(new ulong[]{0x2000UL,0x3E4D6151891UL});
		public static readonly BitSet _type_name_in_unary_expression1223 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_unary_expression1225 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_extension_specifier_in_unary_expression1230 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _cast_expression_in_unary_expression1232 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_expression_in_postfix_expression1245 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _59_in_postfix_expression1253 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _expression_in_postfix_expression1255 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_postfix_expression1257 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _30_in_postfix_expression1265 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_postfix_expression1267 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _30_in_postfix_expression1275 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _argument_expression_list_in_postfix_expression1277 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_postfix_expression1279 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _42_in_postfix_expression1287 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_postfix_expression1289 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _41_in_postfix_expression1297 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_postfix_expression1299 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _35_in_postfix_expression1307 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _39_in_postfix_expression1315 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _gcc_builtin_va_arg_in_postfix_expression1325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_builtin_offsetof_in_postfix_expression1330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_primary_expression1377 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_in_primary_expression1382 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_primary_expression1387 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _expression_in_primary_expression1389 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_primary_expression1391 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_statement_expression_in_primary_expression1396 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _hex_literal_in_constant1409 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _octal_literal_in_constant1416 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _decimal_literal_in_constant1423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _character_literal_in_constant1430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_literal_in_constant1437 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _floating_point_literal_in_constant1444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HEX_LITERAL_in_hex_literal1455 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OCTAL_LITERAL_in_octal_literal1466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECIMAL_LITERAL_in_decimal_literal1477 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHARACTER_LITERAL_in_character_literal1488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_string_literal1499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLOATING_POINT_LITERAL_in_floating_point_literal1510 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignment_expression_in_expression1523 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_expression1526 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _assignment_expression_in_expression1528 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _conditional_expression_in_constant_expression1541 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_assignment_expression1552 = new BitSet(new ulong[]{0x4214211224000000UL,0x200000000000UL});
		public static readonly BitSet _assignment_operator_in_assignment_expression1554 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _assignment_expression_in_assignment_expression1556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditional_expression_in_assignment_expression1561 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expression_in_lvalue1573 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logical_or_expression_in_conditional_expression1645 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _58_in_conditional_expression1648 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _expression_in_conditional_expression1650 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_conditional_expression1652 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _conditional_expression_in_conditional_expression1654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logical_or_expression_in_conditional_expression1663 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_conditional_expression1665 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_conditional_expression1667 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _conditional_expression_in_conditional_expression1669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logical_and_expression_in_logical_or_expression1680 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _110_in_logical_or_expression1683 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _logical_and_expression_in_logical_or_expression1685 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _inclusive_or_expression_in_logical_and_expression1698 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _27_in_logical_and_expression1701 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _inclusive_or_expression_in_logical_and_expression1703 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _exclusive_or_expression_in_inclusive_or_expression1716 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _108_in_inclusive_or_expression1719 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _exclusive_or_expression_in_inclusive_or_expression1721 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _and_expression_in_exclusive_or_expression1734 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _61_in_exclusive_or_expression1737 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _and_expression_in_exclusive_or_expression1739 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _equality_expression_in_and_expression1752 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _28_in_and_expression1755 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _equality_expression_in_and_expression1757 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _relational_expression_in_equality_expression1769 = new BitSet(new ulong[]{0x20000001000002UL});
		public static readonly BitSet _set_in_equality_expression1772 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _relational_expression_in_equality_expression1778 = new BitSet(new ulong[]{0x20000001000002UL});
		public static readonly BitSet _shift_expression_in_relational_expression1791 = new BitSet(new ulong[]{0xC9000000000002UL});
		public static readonly BitSet _set_in_relational_expression1794 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _shift_expression_in_relational_expression1804 = new BitSet(new ulong[]{0xC9000000000002UL});
		public static readonly BitSet _additive_expression_in_shift_expression1817 = new BitSet(new ulong[]{0x102000000000002UL});
		public static readonly BitSet _set_in_shift_expression1820 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _additive_expression_in_shift_expression1826 = new BitSet(new ulong[]{0x102000000000002UL});
		public static readonly BitSet _labeled_statement_in_statement1841 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _compound_statement_in_statement1846 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_statement_in_statement1851 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selection_statement_in_statement1856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _iteration_statement_in_statement1861 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _jump_statement_in_statement1866 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_labeled_statement1877 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_labeled_statement1879 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x10C0920E0E616UL});
		public static readonly BitSet _statement_in_labeled_statement1881 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _74_in_labeled_statement1886 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _constant_expression_in_labeled_statement1888 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_labeled_statement1890 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x10C0920E0E616UL});
		public static readonly BitSet _statement_in_labeled_statement1892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _78_in_labeled_statement1897 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_labeled_statement1899 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x10C0920E0E616UL});
		public static readonly BitSet _statement_in_labeled_statement1901 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_compound_statement1923 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x18FFFFFFDFFFFUL});
		public static readonly BitSet _declaration_in_compound_statement1925 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x18FFFFFFDFFFFUL});
		public static readonly BitSet _statement_list_in_compound_statement1928 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _111_in_compound_statement1931 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_statement_list1942 = new BitSet(new ulong[]{0x800080CD50942A52UL,0x10C0920E0E616UL});
		public static readonly BitSet _47_in_expression_statement1954 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_statement1959 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_expression_statement1961 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _87_in_selection_statement1972 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_selection_statement1974 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _expression_in_selection_statement1976 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_selection_statement1978 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x10C0920E0E616UL});
		public static readonly BitSet _statement_in_selection_statement1980 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _81_in_selection_statement1995 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x10C0920E0E616UL});
		public static readonly BitSet _statement_in_selection_statement1997 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _99_in_selection_statement2004 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_selection_statement2006 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _expression_in_selection_statement2008 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_selection_statement2010 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x10C0920E0E616UL});
		public static readonly BitSet _statement_in_selection_statement2012 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _106_in_iteration_statement2023 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_iteration_statement2025 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _expression_in_iteration_statement2027 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_iteration_statement2029 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x10C0920E0E616UL});
		public static readonly BitSet _statement_in_iteration_statement2031 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_iteration_statement2036 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x10C0920E0E616UL});
		public static readonly BitSet _statement_in_iteration_statement2038 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _106_in_iteration_statement2040 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_iteration_statement2042 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _expression_in_iteration_statement2044 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_iteration_statement2046 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_iteration_statement2048 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _85_in_iteration_statement2053 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_iteration_statement2055 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _expression_statement_in_iteration_statement2057 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _expression_statement_in_iteration_statement2059 = new BitSet(new ulong[]{0x800000CDD0942A50UL,0x1000100000016UL});
		public static readonly BitSet _expression_in_iteration_statement2061 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_iteration_statement2064 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x10C0920E0E616UL});
		public static readonly BitSet _statement_in_iteration_statement2066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_jump_statement2077 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_jump_statement2079 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _77_in_jump_statement2086 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2088 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _73_in_jump_statement2093 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2095 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_jump_statement2100 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2102 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_jump_statement2107 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _expression_in_jump_statement2109 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2111 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_gcc_extension_specifier2150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_in_gcc_declaration_specifier2161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_extension_specifier_in_gcc_declaration_specifier2166 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_in_gcc_attribute_list2177 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _64_in_gcc_attribute2189 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_gcc_attribute2191 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_gcc_attribute2193 = new BitSet(new ulong[]{0x2000UL,0x3E6DF1D19E8UL});
		public static readonly BitSet _gcc_attribute_parameter_list_in_gcc_attribute2195 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_gcc_attribute2197 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_gcc_attribute2199 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_parameter_in_gcc_attribute_parameter_list2210 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_gcc_attribute_parameter_list2213 = new BitSet(new ulong[]{0x2000UL,0x3E6DF1D19E8UL});
		public static readonly BitSet _gcc_attribute_parameter_in_gcc_attribute_parameter_list2215 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _gcc_attribute_name_in_gcc_attribute_parameter2228 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_name_in_gcc_attribute_parameter2233 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _30_in_gcc_attribute_parameter2237 = new BitSet(new ulong[]{0x800000CDD0942A50UL,0x1000100000016UL});
		public static readonly BitSet _assignment_expression_in_gcc_attribute_parameter2240 = new BitSet(new ulong[]{0x2080000000UL});
		public static readonly BitSet _37_in_gcc_attribute_parameter2243 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _assignment_expression_in_gcc_attribute_parameter2245 = new BitSet(new ulong[]{0x2080000000UL});
		public static readonly BitSet _31_in_gcc_attribute_parameter2251 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_gcc_attribute_name2265 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _storage_class_specifier_in_gcc_attribute_name2270 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_specifier_in_gcc_attribute_name2275 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_qualifier_in_gcc_attribute_name2280 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_function_specifier_in_gcc_attribute_name2285 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_gcc_statement_expression2296 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _compound_statement_in_gcc_statement_expression2298 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_gcc_statement_expression2300 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_array_type_modifier_in_gcc_array_type_modifier_list2311 = new BitSet(new ulong[]{0x2UL,0x20010001081UL});
		public static readonly BitSet _type_qualifier_in_gcc_array_type_modifier2323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_in_gcc_array_type_modifier2328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _66_in_gcc_builtin_va_arg2339 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_gcc_builtin_va_arg2341 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _assignment_expression_in_gcc_builtin_va_arg2343 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _37_in_gcc_builtin_va_arg2345 = new BitSet(new ulong[]{0x2000UL,0x3E4D6151891UL});
		public static readonly BitSet _type_name_in_gcc_builtin_va_arg2347 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_gcc_builtin_va_arg2349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _101_in_gcc_typeof2360 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_gcc_typeof2362 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x103E5D6151897UL});
		public static readonly BitSet _type_name_in_gcc_typeof2366 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _assignment_expression_in_gcc_typeof2370 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_gcc_typeof2374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _65_in_gcc_builtin_offsetof2385 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_gcc_builtin_offsetof2387 = new BitSet(new ulong[]{0x2000UL,0x3E4D6151891UL});
		public static readonly BitSet _type_name_in_gcc_builtin_offsetof2389 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _37_in_gcc_builtin_offsetof2391 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _offsetof_member_designator_in_gcc_builtin_offsetof2393 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_gcc_builtin_offsetof2395 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_offsetof_member_designator2408 = new BitSet(new ulong[]{0x800040000000002UL});
		public static readonly BitSet _42_in_offsetof_member_designator2411 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_offsetof_member_designator2413 = new BitSet(new ulong[]{0x800040000000002UL});
		public static readonly BitSet _59_in_offsetof_member_designator2417 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _expression_in_offsetof_member_designator2419 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_offsetof_member_designator2421 = new BitSet(new ulong[]{0x800040000000002UL});
		public static readonly BitSet _declaration_specifiers_in_synpred2_C94 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred4_C94 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _declarator_in_synpred4_C97 = new BitSet(new ulong[]{0x2000UL,0xBF6DF1D19F9UL});
		public static readonly BitSet _declaration_in_synpred4_C99 = new BitSet(new ulong[]{0x2000UL,0xBF6DF1D19F9UL});
		public static readonly BitSet _107_in_synpred4_C102 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred5_C134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred9_C186 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_specifier_in_synpred13_C234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_or_union_in_synpred36_C441 = new BitSet(new ulong[]{0x2000UL,0x80000000001UL});
		public static readonly BitSet _gcc_attribute_list_in_synpred36_C443 = new BitSet(new ulong[]{0x2000UL,0x80000000000UL});
		public static readonly BitSet _IDENTIFIER_in_synpred36_C446 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _107_in_synpred36_C449 = new BitSet(new ulong[]{0x800000002000UL,0x3E4D6151891UL});
		public static readonly BitSet _struct_declaration_list_in_synpred36_C451 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _111_in_synpred36_C453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_specifier_in_synpred42_C529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declarator_in_synpred45_C564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_synpred50_C595 = new BitSet(new ulong[]{0x2000UL,0x80000000001UL});
		public static readonly BitSet _gcc_attribute_list_in_synpred50_C597 = new BitSet(new ulong[]{0x2000UL,0x80000000000UL});
		public static readonly BitSet _IDENTIFIER_in_synpred50_C600 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _107_in_synpred50_C603 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _enumerator_list_in_synpred50_C605 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _111_in_synpred50_C607 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_list_in_synpred58_C703 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_synpred59_C698 = new BitSet(new ulong[]{0x40002000UL});
		public static readonly BitSet _direct_declarator_in_synpred59_C701 = new BitSet(new ulong[]{0x2UL,0x1UL});
		public static readonly BitSet _gcc_attribute_list_in_synpred59_C703 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declarator_suffix_in_synpred62_C750 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred65_C784 = new BitSet(new ulong[]{0x2000UL,0x3E6DF1D19F9UL});
		public static readonly BitSet _parameter_type_list_in_synpred65_C786 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred65_C788 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred66_C795 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _identifier_list_in_synpred66_C797 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred66_C799 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_qualifier_in_synpred67_C825 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_in_synpred68_C829 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_synpred69_C822 = new BitSet(new ulong[]{0x2UL,0x20010001081UL});
		public static readonly BitSet _type_qualifier_in_synpred69_C825 = new BitSet(new ulong[]{0x2UL,0x20010001081UL});
		public static readonly BitSet _gcc_attribute_in_synpred69_C829 = new BitSet(new ulong[]{0x2UL,0x20010001081UL});
		public static readonly BitSet _declarator_in_synpred72_C883 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _abstract_declarator_in_synpred73_C885 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_synpred76_C930 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred80_C954 = new BitSet(new ulong[]{0x800000140000000UL,0x1UL});
		public static readonly BitSet _gcc_attribute_list_in_synpred80_C956 = new BitSet(new ulong[]{0x800000140000000UL});
		public static readonly BitSet _abstract_declarator_in_synpred80_C959 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred80_C961 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _abstract_declarator_suffix_in_synpred81_C969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_synpred84_C981 = new BitSet(new ulong[]{0x900000CD50942A50UL,0x1020110001097UL});
		public static readonly BitSet _gcc_array_type_modifier_in_synpred84_C983 = new BitSet(new ulong[]{0x900000CD50942A50UL,0x1020110001097UL});
		public static readonly BitSet _constant_expression_in_synpred84_C986 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_synpred84_C989 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_synpred86_C994 = new BitSet(new ulong[]{0x100000000UL,0x20010001081UL});
		public static readonly BitSet _gcc_array_type_modifier_in_synpred86_C996 = new BitSet(new ulong[]{0x100000000UL,0x20010001081UL});
		public static readonly BitSet _32_in_synpred86_C999 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_synpred86_C1001 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred97_C1144 = new BitSet(new ulong[]{0x2000UL,0x3E4D6151891UL});
		public static readonly BitSet _type_name_in_synpred97_C1146 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred97_C1148 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _cast_expression_in_synpred97_C1150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _96_in_synpred102_C1192 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _unary_expression_in_synpred102_C1194 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _96_in_synpred103_C1199 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_synpred103_C1201 = new BitSet(new ulong[]{0x2000UL,0x3E4D6151891UL});
		public static readonly BitSet _type_name_in_synpred103_C1203 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred103_C1205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_synpred104_C1212 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _unary_expression_in_synpred104_C1214 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_synpred105_C1219 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_synpred105_C1221 = new BitSet(new ulong[]{0x2000UL,0x3E4D6151891UL});
		public static readonly BitSet _type_name_in_synpred105_C1223 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred105_C1225 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_synpred129_C1552 = new BitSet(new ulong[]{0x4214211224000000UL,0x200000000000UL});
		public static readonly BitSet _assignment_operator_in_synpred129_C1554 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _assignment_expression_in_synpred129_C1556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logical_or_expression_in_synpred141_C1645 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _58_in_synpred141_C1648 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _expression_in_synpred141_C1650 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_synpred141_C1652 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x1000100000016UL});
		public static readonly BitSet _conditional_expression_in_synpred141_C1654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_synpred162_C1925 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_in_synpred178_C2177 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_name_in_synpred180_C2228 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_synpred184_C2265 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_specifier_in_synpred186_C2275 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_synpred190_C2366 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
