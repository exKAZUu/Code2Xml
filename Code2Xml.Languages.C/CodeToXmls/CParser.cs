using Code2Xml.Core.Antlr;
using System;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C.g 2012-07-25 15:58:38

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;
/** ANSI C ANTLR v3 grammar

Translated from Jutta Degener's 1995 ANSI C yacc grammar by Terence Parr
July 2006.  The lexical rules were taken from the Java grammar.

Jutta says: "In 1985, Jeff Lee published his Yacc grammar (which
is accompanied by a matching Lex specification) for the April 30, 1985 draft
version of the ANSI C standard.  Tom Stockfisch reposted it to net.sources in
1987; that original, as mentioned in the answer to question 17.25 of the
comp.lang.c FAQ, can be ftp'ed from ftp.uu.net,
   file usenet/net.sources/ansi.c.grammar.Z.
I intend to keep this version as close to the current C Standard grammar as
possible; please let me know if you discover discrepancies. Jutta Degener, 1995"

Generally speaking, you need symbol table info to parse C; typedefs
define types and then IDENTIFIERS are either types or plain IDs.  I'm doing
the min necessary here tracking only type names.  This is a good example
of the global scope (called Symbols).  Every rule that declares its usage
of Symbols pushes a new copy on the stack effectively creating a new
symbol scope.  Also note rule declaration declares a rule scope that
lets any invoked rule see isTypedef boolean.  It's much easier than
passing that info down as parameters.  Very clean.  Rule
direct_declarator can then easily determine whether the IDENTIFIER
should be declared as a type name.

I have only tested this on a single file, though it is 3500 lines.

This grammar requires ANTLR v3.0.1 or higher.

Terence Parr
July 2006
*/
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class CParser : Antlr.Runtime.Parser, IAntlrParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "CHARACTER_LITERAL", "COMMENT", "DECIMAL_LITERAL", "EscapeSequence", "Exponent", "FLOATING_POINT_LITERAL", "FloatTypeSuffix", "HEX_LITERAL", "HexDigit", "IDENTIFIER", "IntegerTypeSuffix", "LETTER", "LINE_COMMAND", "LINE_COMMENT", "OCTAL_LITERAL", "OctalEscape", "STRING_LITERAL", "UnicodeEscape", "WS", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'.'", "'...'", "'/'", "'/='", "':'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'['", "']'", "'^'", "'^='", "'__builtin_va_list'", "'__extension__'", "'auto'", "'break'", "'case'", "'char'", "'const'", "'continue'", "'default'", "'do'", "'double'", "'else'", "'enum'", "'extern'", "'float'", "'for'", "'goto'", "'if'", "'int'", "'long'", "'register'", "'return'", "'short'", "'signed'", "'sizeof'", "'static'", "'struct'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "'while'", "'{'", "'|'", "'|='", "'||'", "'}'", "'~'"
	};
	public const int EOF=-1;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int CHARACTER_LITERAL=4;
	public const int COMMENT=5;
	public const int DECIMAL_LITERAL=6;
	public const int EscapeSequence=7;
	public const int Exponent=8;
	public const int FLOATING_POINT_LITERAL=9;
	public const int FloatTypeSuffix=10;
	public const int HEX_LITERAL=11;
	public const int HexDigit=12;
	public const int IDENTIFIER=13;
	public const int IntegerTypeSuffix=14;
	public const int LETTER=15;
	public const int LINE_COMMAND=16;
	public const int LINE_COMMENT=17;
	public const int OCTAL_LITERAL=18;
	public const int OctalEscape=19;
	public const int STRING_LITERAL=20;
	public const int UnicodeEscape=21;
	public const int WS=22;

	protected sealed partial class Symbols_scope
	{
		public HashSet<string> types;

		public Symbols_scope(CParser grammar) { OnCreated(grammar); }
		partial void OnCreated(CParser grammar);
	}
	partial void Symbols_scopeInit( Symbols_scope scope );
	partial void Symbols_scopeAfter( Symbols_scope scope );
	protected readonly ListStack<Symbols_scope> Symbols_stack = new ListStack<Symbols_scope>();

	public CParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public CParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[222+1];


		XmlTreeAdaptor treeAdaptor = default(XmlTreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new XmlTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref XmlTreeAdaptor adaptor);

	private XmlTreeAdaptor adaptor;

	public XmlTreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return CParser.tokenNames; } }
	public override string GrammarFileName { get { return "C.g"; } }


		boolean isTypeName(String name) {
			for (int i = Symbols_stack.size()-1; i>=0; i--) {
				Symbols_scope scope = (Symbols_scope)Symbols_stack.get(i);
				if ( scope.types.contains(name) ) {
					return true;
				}
			}
			return false;
		}


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_translation_unit();
	partial void LeaveRule_translation_unit();

	// $ANTLR start "translation_unit"
	// C.g:58:1: translation_unit : ( external_declaration )+ ;
	[GrammarRule("translation_unit")]
	public XAstParserRuleReturnScope translation_unit()
	{
		EnterRule_translation_unit();
		EnterRule("translation_unit", 1);
		var retval = new XAstParserRuleReturnScope("translation_unit");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int translation_unit_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope external_declaration1 = default(XAstParserRuleReturnScope);


		  Symbols_stack.Peek().types =  new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "translation_unit");
		DebugLocation(58, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// C.g:63:2: ( ( external_declaration )+ )
			DebugEnterAlt(1);
			// C.g:63:4: ( external_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(63, 4);
			// C.g:63:4: ( external_declaration )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==IDENTIFIER||LA1_0==30||LA1_0==32||(LA1_0>=63 && LA1_0<=65)||(LA1_0>=68 && LA1_0<=69)||LA1_0==73||(LA1_0>=75 && LA1_0<=77)||(LA1_0>=81 && LA1_0<=83)||(LA1_0>=85 && LA1_0<=86)||(LA1_0>=88 && LA1_0<=89)||(LA1_0>=91 && LA1_0<=95)))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:63:4: external_declaration
					{
					DebugLocation(63, 4);
					PushFollow(Follow._external_declaration_in_translation_unit71);
					external_declaration1=external_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, external_declaration1.Tree, external_declaration1, retval);

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("translation_unit", 1);
			LeaveRule("translation_unit", 1);
			LeaveRule_translation_unit();
			if (state.backtracking > 0) { Memoize(input, 1, translation_unit_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(64, 1);
		} finally { DebugExitRule(GrammarFileName, "translation_unit"); }
		return retval;

	}
	// $ANTLR end "translation_unit"

	partial void EnterRule_external_declaration();
	partial void LeaveRule_external_declaration();

	// $ANTLR start "external_declaration"
	// C.g:80:1: external_declaration options {k=1; } : ( ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition | declaration );
	[GrammarRule("external_declaration")]
	public XAstParserRuleReturnScope external_declaration()
	{
		EnterRule_external_declaration();
		EnterRule("external_declaration", 2);
		var retval = new XAstParserRuleReturnScope("external_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int external_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope function_definition2 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declaration3 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "external_declaration");
		DebugLocation(80, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// C.g:82:2: ( ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition | declaration )
			int alt2=2;
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0==65||LA2_0==76||LA2_0==83||LA2_0==88))
			{
				int LA2_1 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==94))
			{
				int LA2_2 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==68))
			{
				int LA2_3 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==85))
			{
				int LA2_4 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==81))
			{
				int LA2_5 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==82))
			{
				int LA2_6 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==77))
			{
				int LA2_7 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==73))
			{
				int LA2_8 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==86))
			{
				int LA2_9 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==93))
			{
				int LA2_10 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 10, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==63))
			{
				int LA2_11 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==89||LA2_0==92))
			{
				int LA2_12 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 12, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==75))
			{
				int LA2_13 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 13, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==IDENTIFIER))
			{
				int LA2_14 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if (((isTypeName(input.LT(1).getText()))))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 14, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==64))
			{
				int LA2_15 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 15, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==32) && (EvaluatePredicate(synpred4_C_fragment)))
			{
				alt2 = 1;
			}
			else if ((LA2_0==30) && (EvaluatePredicate(synpred4_C_fragment)))
			{
				alt2 = 1;
			}
			else if ((LA2_0==69||LA2_0==95))
			{
				int LA2_18 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 18, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==91))
			{
				alt2 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:82:4: ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(82, 62);
				PushFollow(Follow._function_definition_in_external_declaration107);
				function_definition2=function_definition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, function_definition2.Tree, function_definition2, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:83:4: declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(83, 4);
				PushFollow(Follow._declaration_in_external_declaration112);
				declaration3=declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration3.Tree, declaration3, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("external_declaration", 2);
			LeaveRule("external_declaration", 2);
			LeaveRule_external_declaration();
			if (state.backtracking > 0) { Memoize(input, 2, external_declaration_StartIndex); }

		}
		DebugLocation(84, 1);
		} finally { DebugExitRule(GrammarFileName, "external_declaration"); }
		return retval;

	}
	// $ANTLR end "external_declaration"

	partial void EnterRule_function_definition();
	partial void LeaveRule_function_definition();

	// $ANTLR start "function_definition"
	// C.g:86:1: function_definition : ( declaration_specifiers )? declarator ( ( declaration )+ compound_statement | compound_statement ) ;
	[GrammarRule("function_definition")]
	public XAstParserRuleReturnScope function_definition()
	{
		EnterRule_function_definition();
		EnterRule("function_definition", 3);
		var retval = new XAstParserRuleReturnScope("function_definition");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int function_definition_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope declaration_specifiers4 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator5 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declaration6 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope compound_statement7 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope compound_statement8 = default(XAstParserRuleReturnScope);


		  Symbols_stack.Peek().types =  new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "function_definition");
		DebugLocation(86, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// C.g:91:2: ( ( declaration_specifiers )? declarator ( ( declaration )+ compound_statement | compound_statement ) )
			DebugEnterAlt(1);
			// C.g:91:4: ( declaration_specifiers )? declarator ( ( declaration )+ compound_statement | compound_statement )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(91, 4);
			// C.g:91:4: ( declaration_specifiers )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if (((LA3_0>=63 && LA3_0<=65)||(LA3_0>=68 && LA3_0<=69)||LA3_0==73||(LA3_0>=75 && LA3_0<=77)||(LA3_0>=81 && LA3_0<=83)||(LA3_0>=85 && LA3_0<=86)||(LA3_0>=88 && LA3_0<=89)||(LA3_0>=92 && LA3_0<=95)))
			{
				alt3 = 1;
			}
			else if ((LA3_0==IDENTIFIER))
			{
				switch (input.LA(2))
				{
				case 32:
					{
					alt3 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA3_19 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 30:
					{
					int LA3_20 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 65:
				case 76:
				case 83:
				case 88:
					{
					int LA3_21 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 94:
					{
					int LA3_22 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 68:
					{
					int LA3_23 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 85:
					{
					int LA3_24 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 81:
					{
					int LA3_25 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 82:
					{
					int LA3_26 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 77:
					{
					int LA3_27 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 73:
					{
					int LA3_28 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 86:
					{
					int LA3_29 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 93:
					{
					int LA3_30 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 63:
					{
					int LA3_31 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 89:
				case 92:
					{
					int LA3_32 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 75:
					{
					int LA3_33 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 64:
					{
					int LA3_34 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 69:
				case 95:
					{
					int LA3_36 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				}

			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:91:4: declaration_specifiers
				{
				DebugLocation(91, 4);
				PushFollow(Follow._declaration_specifiers_in_function_definition134);
				declaration_specifiers4=declaration_specifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers4.Tree, declaration_specifiers4, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(91, 28);
			PushFollow(Follow._declarator_in_function_definition137);
			declarator5=declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, declarator5.Tree, declarator5, retval);
			DebugLocation(92, 3);
			// C.g:92:3: ( ( declaration )+ compound_statement | compound_statement )
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0==IDENTIFIER||(LA5_0>=63 && LA5_0<=65)||(LA5_0>=68 && LA5_0<=69)||LA5_0==73||(LA5_0>=75 && LA5_0<=77)||(LA5_0>=81 && LA5_0<=83)||(LA5_0>=85 && LA5_0<=86)||(LA5_0>=88 && LA5_0<=89)||(LA5_0>=91 && LA5_0<=95)))
			{
				alt5 = 1;
			}
			else if ((LA5_0==97))
			{
				alt5 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:92:5: ( declaration )+ compound_statement
				{
				DebugLocation(92, 5);
				// C.g:92:5: ( declaration )+
				int cnt4=0;
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if ((LA4_0==IDENTIFIER||(LA4_0>=63 && LA4_0<=65)||(LA4_0>=68 && LA4_0<=69)||LA4_0==73||(LA4_0>=75 && LA4_0<=77)||(LA4_0>=81 && LA4_0<=83)||(LA4_0>=85 && LA4_0<=86)||(LA4_0>=88 && LA4_0<=89)||(LA4_0>=91 && LA4_0<=95)))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:92:5: declaration
						{
						DebugLocation(92, 5);
						PushFollow(Follow._declaration_in_function_definition143);
						declaration6=declaration();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, declaration6.Tree, declaration6, retval);

						}
						break;

					default:
						if (cnt4 >= 1)
							goto loop4;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee4 = new EarlyExitException( 4, input );
						DebugRecognitionException(eee4);
						throw eee4;
					}
					cnt4++;
				}
				loop4:
					;

				} finally { DebugExitSubRule(4); }

				DebugLocation(92, 18);
				PushFollow(Follow._compound_statement_in_function_definition146);
				compound_statement7=compound_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, compound_statement7.Tree, compound_statement7, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:93:5: compound_statement
				{
				DebugLocation(93, 5);
				PushFollow(Follow._compound_statement_in_function_definition153);
				compound_statement8=compound_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, compound_statement8.Tree, compound_statement8, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function_definition", 3);
			LeaveRule("function_definition", 3);
			LeaveRule_function_definition();
			if (state.backtracking > 0) { Memoize(input, 3, function_definition_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(95, 1);
		} finally { DebugExitRule(GrammarFileName, "function_definition"); }
		return retval;

	}
	// $ANTLR end "function_definition"

	protected sealed partial class declaration_scope
	{
		public boolean isTypedef;

		public declaration_scope(CParser grammar) { OnCreated(grammar); }
		partial void OnCreated(CParser grammar);
	}
	partial void declaration_scopeInit( declaration_scope scope );
	partial void declaration_scopeAfter( declaration_scope scope );
	protected readonly ListStack<declaration_scope> declaration_stack = new ListStack<declaration_scope>();

	partial void EnterRule_declaration();
	partial void LeaveRule_declaration();

	// $ANTLR start "declaration"
	// C.g:97:1: declaration : ( ( '__extension__' )? 'typedef' ( declaration_specifiers )? init_declarator_list ';' | declaration_specifiers ( init_declarator_list )? ';' );
	[GrammarRule("declaration")]
	public XAstParserRuleReturnScope declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 4);
		var retval = new XAstParserRuleReturnScope("declaration");
		declaration_stack.Push(new declaration_scope(this));declaration_scopeInit(declaration_stack.Peek());
		
		retval.Start = (IToken)input.LT(1);
		int declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal9 = default(IToken);
		IToken string_literal10 = default(IToken);
		IToken char_literal13 = default(IToken);
		IToken char_literal16 = default(IToken);
		XAstParserRuleReturnScope declaration_specifiers11 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope init_declarator_list12 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declaration_specifiers14 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope init_declarator_list15 = default(XAstParserRuleReturnScope);

		object string_literal9_tree = default(object);
		object string_literal10_tree = default(object);
		object char_literal13_tree = default(object);
		object char_literal16_tree = default(object);

		  declaration_stack.Peek().isTypedef =  false;

		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(97, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// C.g:104:2: ( ( '__extension__' )? 'typedef' ( declaration_specifiers )? init_declarator_list ';' | declaration_specifiers ( init_declarator_list )? ';' )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case 64:
				{
				int LA9_1 = input.LA(2);

				if ((LA9_1==91))
				{
					alt9 = 1;
				}
				else if ((LA9_1==IDENTIFIER||LA9_1==30||LA9_1==32||LA9_1==47||(LA9_1>=63 && LA9_1<=65)||(LA9_1>=68 && LA9_1<=69)||LA9_1==73||(LA9_1>=75 && LA9_1<=77)||(LA9_1>=81 && LA9_1<=83)||(LA9_1>=85 && LA9_1<=86)||(LA9_1>=88 && LA9_1<=89)||(LA9_1>=92 && LA9_1<=95)))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 91:
				{
				alt9 = 1;
				}
				break;
			case IDENTIFIER:
			case 63:
			case 65:
			case 68:
			case 69:
			case 73:
			case 75:
			case 76:
			case 77:
			case 81:
			case 82:
			case 83:
			case 85:
			case 86:
			case 88:
			case 89:
			case 92:
			case 93:
			case 94:
			case 95:
				{
				alt9 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:104:4: ( '__extension__' )? 'typedef' ( declaration_specifiers )? init_declarator_list ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(104, 4);
				// C.g:104:4: ( '__extension__' )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==64))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:104:4: '__extension__'
					{
					DebugLocation(104, 4);
					string_literal9=(IToken)Match(input,64,Follow._64_in_declaration181); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal9_tree = (object)adaptor.Create(string_literal9, retval);
					adaptor.AddChild(root_0, string_literal9_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(104, 21);
				string_literal10=(IToken)Match(input,91,Follow._91_in_declaration184); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal10_tree = (object)adaptor.Create(string_literal10, retval);
				adaptor.AddChild(root_0, string_literal10_tree);
				}
				DebugLocation(104, 31);
				// C.g:104:31: ( declaration_specifiers )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if (((LA7_0>=63 && LA7_0<=65)||(LA7_0>=68 && LA7_0<=69)||LA7_0==73||(LA7_0>=75 && LA7_0<=77)||(LA7_0>=81 && LA7_0<=83)||(LA7_0>=85 && LA7_0<=86)||(LA7_0>=88 && LA7_0<=89)||(LA7_0>=92 && LA7_0<=95)))
				{
					alt7 = 1;
				}
				else if ((LA7_0==IDENTIFIER))
				{
					int LA7_14 = input.LA(2);

					if ((LA7_14==IDENTIFIER||LA7_14==32||(LA7_14>=63 && LA7_14<=65)||(LA7_14>=68 && LA7_14<=69)||LA7_14==73||(LA7_14>=75 && LA7_14<=77)||(LA7_14>=81 && LA7_14<=83)||(LA7_14>=85 && LA7_14<=86)||(LA7_14>=88 && LA7_14<=89)||(LA7_14>=92 && LA7_14<=95)))
					{
						alt7 = 1;
					}
					else if ((LA7_14==30))
					{
						int LA7_20 = input.LA(3);

						if ((((EvaluatePredicate(synpred9_C_fragment)&&EvaluatePredicate(synpred9_C_fragment))&&(isTypeName(input.LT(1).getText())))))
						{
							alt7 = 1;
						}
					}
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:104:31: declaration_specifiers
					{
					DebugLocation(104, 31);
					PushFollow(Follow._declaration_specifiers_in_declaration186);
					declaration_specifiers11=declaration_specifiers();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers11.Tree, declaration_specifiers11, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(104, 55);
				if (state.backtracking == 0)
				{
					declaration_stack.Peek().isTypedef = true;
				}
				DebugLocation(105, 4);
				PushFollow(Follow._init_declarator_list_in_declaration196);
				init_declarator_list12=init_declarator_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator_list12.Tree, init_declarator_list12, retval);
				DebugLocation(105, 25);
				char_literal13=(IToken)Match(input,47,Follow._47_in_declaration198); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal13_tree = (object)adaptor.Create(char_literal13, retval);
				adaptor.AddChild(root_0, char_literal13_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:106:4: declaration_specifiers ( init_declarator_list )? ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(106, 4);
				PushFollow(Follow._declaration_specifiers_in_declaration204);
				declaration_specifiers14=declaration_specifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers14.Tree, declaration_specifiers14, retval);
				DebugLocation(106, 27);
				// C.g:106:27: ( init_declarator_list )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==IDENTIFIER||LA8_0==30||LA8_0==32))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:106:27: init_declarator_list
					{
					DebugLocation(106, 27);
					PushFollow(Follow._init_declarator_list_in_declaration206);
					init_declarator_list15=init_declarator_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator_list15.Tree, init_declarator_list15, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(106, 49);
				char_literal16=(IToken)Match(input,47,Follow._47_in_declaration209); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal16_tree = (object)adaptor.Create(char_literal16, retval);
				adaptor.AddChild(root_0, char_literal16_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 4);
			LeaveRule("declaration", 4);
			LeaveRule_declaration();
			if (state.backtracking > 0) { Memoize(input, 4, declaration_StartIndex); }

			declaration_scopeAfter(declaration_stack.Peek());declaration_stack.Pop();
		}
		DebugLocation(107, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"

	partial void EnterRule_declaration_specifiers();
	partial void LeaveRule_declaration_specifiers();

	// $ANTLR start "declaration_specifiers"
	// C.g:109:1: declaration_specifiers : ( storage_class_specifier | type_specifier | type_qualifier )+ ;
	[GrammarRule("declaration_specifiers")]
	public XAstParserRuleReturnScope declaration_specifiers()
	{
		EnterRule_declaration_specifiers();
		EnterRule("declaration_specifiers", 5);
		var retval = new XAstParserRuleReturnScope("declaration_specifiers");
		
		retval.Start = (IToken)input.LT(1);
		int declaration_specifiers_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope storage_class_specifier17 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_specifier18 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_qualifier19 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "declaration_specifiers");
		DebugLocation(109, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// C.g:110:2: ( ( storage_class_specifier | type_specifier | type_qualifier )+ )
			DebugEnterAlt(1);
			// C.g:110:6: ( storage_class_specifier | type_specifier | type_qualifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(110, 6);
			// C.g:110:6: ( storage_class_specifier | type_specifier | type_qualifier )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=4;
				try { DebugEnterDecision(10, false);
				switch (input.LA(1))
				{
				case IDENTIFIER:
					{
					int LA10_2 = input.LA(2);

					if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred13_C_fragment))))
					{
						alt10 = 2;
					}


					}
					break;
				case 65:
				case 76:
				case 83:
				case 88:
					{
					alt10 = 1;
					}
					break;
				case 63:
				case 68:
				case 73:
				case 75:
				case 77:
				case 81:
				case 82:
				case 85:
				case 86:
				case 89:
				case 92:
				case 93:
				case 94:
					{
					alt10 = 2;
					}
					break;
				case 64:
				case 69:
				case 95:
					{
					alt10 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:110:10: storage_class_specifier
					{
					DebugLocation(110, 10);
					PushFollow(Follow._storage_class_specifier_in_declaration_specifiers226);
					storage_class_specifier17=storage_class_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, storage_class_specifier17.Tree, storage_class_specifier17, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:111:7: type_specifier
					{
					DebugLocation(111, 7);
					PushFollow(Follow._type_specifier_in_declaration_specifiers234);
					type_specifier18=type_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_specifier18.Tree, type_specifier18, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C.g:112:7: type_qualifier
					{
					DebugLocation(112, 7);
					PushFollow(Follow._type_qualifier_in_declaration_specifiers242);
					type_qualifier19=type_qualifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier19.Tree, type_qualifier19, retval);

					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration_specifiers", 5);
			LeaveRule("declaration_specifiers", 5);
			LeaveRule_declaration_specifiers();
			if (state.backtracking > 0) { Memoize(input, 5, declaration_specifiers_StartIndex); }

		}
		DebugLocation(114, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration_specifiers"); }
		return retval;

	}
	// $ANTLR end "declaration_specifiers"

	partial void EnterRule_init_declarator_list();
	partial void LeaveRule_init_declarator_list();

	// $ANTLR start "init_declarator_list"
	// C.g:116:1: init_declarator_list : init_declarator ( ',' init_declarator )* ;
	[GrammarRule("init_declarator_list")]
	public XAstParserRuleReturnScope init_declarator_list()
	{
		EnterRule_init_declarator_list();
		EnterRule("init_declarator_list", 6);
		var retval = new XAstParserRuleReturnScope("init_declarator_list");
		
		retval.Start = (IToken)input.LT(1);
		int init_declarator_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal21 = default(IToken);
		XAstParserRuleReturnScope init_declarator20 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope init_declarator22 = default(XAstParserRuleReturnScope);

		object char_literal21_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "init_declarator_list");
		DebugLocation(116, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// C.g:117:2: ( init_declarator ( ',' init_declarator )* )
			DebugEnterAlt(1);
			// C.g:117:4: init_declarator ( ',' init_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(117, 4);
			PushFollow(Follow._init_declarator_in_init_declarator_list258);
			init_declarator20=init_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator20.Tree, init_declarator20, retval);
			DebugLocation(117, 20);
			// C.g:117:20: ( ',' init_declarator )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==37))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:117:21: ',' init_declarator
					{
					DebugLocation(117, 21);
					char_literal21=(IToken)Match(input,37,Follow._37_in_init_declarator_list261); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal21_tree = (object)adaptor.Create(char_literal21, retval);
					adaptor.AddChild(root_0, char_literal21_tree);
					}
					DebugLocation(117, 25);
					PushFollow(Follow._init_declarator_in_init_declarator_list263);
					init_declarator22=init_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator22.Tree, init_declarator22, retval);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("init_declarator_list", 6);
			LeaveRule("init_declarator_list", 6);
			LeaveRule_init_declarator_list();
			if (state.backtracking > 0) { Memoize(input, 6, init_declarator_list_StartIndex); }

		}
		DebugLocation(118, 1);
		} finally { DebugExitRule(GrammarFileName, "init_declarator_list"); }
		return retval;

	}
	// $ANTLR end "init_declarator_list"

	partial void EnterRule_init_declarator();
	partial void LeaveRule_init_declarator();

	// $ANTLR start "init_declarator"
	// C.g:120:1: init_declarator : declarator ( '=' initializer )? ;
	[GrammarRule("init_declarator")]
	public XAstParserRuleReturnScope init_declarator()
	{
		EnterRule_init_declarator();
		EnterRule("init_declarator", 7);
		var retval = new XAstParserRuleReturnScope("init_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int init_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal24 = default(IToken);
		XAstParserRuleReturnScope declarator23 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope initializer25 = default(XAstParserRuleReturnScope);

		object char_literal24_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "init_declarator");
		DebugLocation(120, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// C.g:121:2: ( declarator ( '=' initializer )? )
			DebugEnterAlt(1);
			// C.g:121:4: declarator ( '=' initializer )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(121, 4);
			PushFollow(Follow._declarator_in_init_declarator276);
			declarator23=declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, declarator23.Tree, declarator23, retval);
			DebugLocation(121, 15);
			// C.g:121:15: ( '=' initializer )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0==52))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:121:16: '=' initializer
				{
				DebugLocation(121, 16);
				char_literal24=(IToken)Match(input,52,Follow._52_in_init_declarator279); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal24_tree = (object)adaptor.Create(char_literal24, retval);
				adaptor.AddChild(root_0, char_literal24_tree);
				}
				DebugLocation(121, 20);
				PushFollow(Follow._initializer_in_init_declarator281);
				initializer25=initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, initializer25.Tree, initializer25, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("init_declarator", 7);
			LeaveRule("init_declarator", 7);
			LeaveRule_init_declarator();
			if (state.backtracking > 0) { Memoize(input, 7, init_declarator_StartIndex); }

		}
		DebugLocation(122, 1);
		} finally { DebugExitRule(GrammarFileName, "init_declarator"); }
		return retval;

	}
	// $ANTLR end "init_declarator"

	partial void EnterRule_storage_class_specifier();
	partial void LeaveRule_storage_class_specifier();

	// $ANTLR start "storage_class_specifier"
	// C.g:124:1: storage_class_specifier : ( 'extern' | 'static' | 'auto' | 'register' );
	[GrammarRule("storage_class_specifier")]
	public XAstParserRuleReturnScope storage_class_specifier()
	{
		EnterRule_storage_class_specifier();
		EnterRule("storage_class_specifier", 8);
		var retval = new XAstParserRuleReturnScope("storage_class_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int storage_class_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set26 = default(IToken);

		object set26_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "storage_class_specifier");
		DebugLocation(124, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// C.g:125:2: ( 'extern' | 'static' | 'auto' | 'register' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(125, 2);

			set26=(IToken)input.LT(1);
			if (input.LA(1)==65||input.LA(1)==76||input.LA(1)==83||input.LA(1)==88)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set26, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("storage_class_specifier", 8);
			LeaveRule("storage_class_specifier", 8);
			LeaveRule_storage_class_specifier();
			if (state.backtracking > 0) { Memoize(input, 8, storage_class_specifier_StartIndex); }

		}
		DebugLocation(129, 1);
		} finally { DebugExitRule(GrammarFileName, "storage_class_specifier"); }
		return retval;

	}
	// $ANTLR end "storage_class_specifier"

	partial void EnterRule_type_specifier();
	partial void LeaveRule_type_specifier();

	// $ANTLR start "type_specifier"
	// C.g:131:1: type_specifier : ( 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | '__builtin_va_list' | struct_or_union_specifier | enum_specifier | type_id );
	[GrammarRule("type_specifier")]
	public XAstParserRuleReturnScope type_specifier()
	{
		EnterRule_type_specifier();
		EnterRule("type_specifier", 9);
		var retval = new XAstParserRuleReturnScope("type_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int type_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal27 = default(IToken);
		IToken string_literal28 = default(IToken);
		IToken string_literal29 = default(IToken);
		IToken string_literal30 = default(IToken);
		IToken string_literal31 = default(IToken);
		IToken string_literal32 = default(IToken);
		IToken string_literal33 = default(IToken);
		IToken string_literal34 = default(IToken);
		IToken string_literal35 = default(IToken);
		IToken string_literal36 = default(IToken);
		XAstParserRuleReturnScope struct_or_union_specifier37 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enum_specifier38 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_id39 = default(XAstParserRuleReturnScope);

		object string_literal27_tree = default(object);
		object string_literal28_tree = default(object);
		object string_literal29_tree = default(object);
		object string_literal30_tree = default(object);
		object string_literal31_tree = default(object);
		object string_literal32_tree = default(object);
		object string_literal33_tree = default(object);
		object string_literal34_tree = default(object);
		object string_literal35_tree = default(object);
		object string_literal36_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_specifier");
		DebugLocation(131, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// C.g:132:2: ( 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | '__builtin_va_list' | struct_or_union_specifier | enum_specifier | type_id )
			int alt13=13;
			try { DebugEnterDecision(13, false);
			switch (input.LA(1))
			{
			case 94:
				{
				alt13 = 1;
				}
				break;
			case 68:
				{
				alt13 = 2;
				}
				break;
			case 85:
				{
				alt13 = 3;
				}
				break;
			case 81:
				{
				alt13 = 4;
				}
				break;
			case 82:
				{
				alt13 = 5;
				}
				break;
			case 77:
				{
				alt13 = 6;
				}
				break;
			case 73:
				{
				alt13 = 7;
				}
				break;
			case 86:
				{
				alt13 = 8;
				}
				break;
			case 93:
				{
				alt13 = 9;
				}
				break;
			case 63:
				{
				alt13 = 10;
				}
				break;
			case 89:
			case 92:
				{
				alt13 = 11;
				}
				break;
			case 75:
				{
				alt13 = 12;
				}
				break;
			case IDENTIFIER:
				{
				alt13 = 13;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:132:4: 'void'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(132, 4);
				string_literal27=(IToken)Match(input,94,Follow._94_in_type_specifier320); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal27_tree = (object)adaptor.Create(string_literal27, retval);
				adaptor.AddChild(root_0, string_literal27_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:133:4: 'char'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(133, 4);
				string_literal28=(IToken)Match(input,68,Follow._68_in_type_specifier325); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal28_tree = (object)adaptor.Create(string_literal28, retval);
				adaptor.AddChild(root_0, string_literal28_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:134:4: 'short'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(134, 4);
				string_literal29=(IToken)Match(input,85,Follow._85_in_type_specifier330); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal29_tree = (object)adaptor.Create(string_literal29, retval);
				adaptor.AddChild(root_0, string_literal29_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:135:4: 'int'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(135, 4);
				string_literal30=(IToken)Match(input,81,Follow._81_in_type_specifier335); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal30_tree = (object)adaptor.Create(string_literal30, retval);
				adaptor.AddChild(root_0, string_literal30_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:136:4: 'long'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(136, 4);
				string_literal31=(IToken)Match(input,82,Follow._82_in_type_specifier340); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal31_tree = (object)adaptor.Create(string_literal31, retval);
				adaptor.AddChild(root_0, string_literal31_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:137:4: 'float'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(137, 4);
				string_literal32=(IToken)Match(input,77,Follow._77_in_type_specifier345); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal32_tree = (object)adaptor.Create(string_literal32, retval);
				adaptor.AddChild(root_0, string_literal32_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C.g:138:4: 'double'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(138, 4);
				string_literal33=(IToken)Match(input,73,Follow._73_in_type_specifier350); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal33_tree = (object)adaptor.Create(string_literal33, retval);
				adaptor.AddChild(root_0, string_literal33_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C.g:139:4: 'signed'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(139, 4);
				string_literal34=(IToken)Match(input,86,Follow._86_in_type_specifier355); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal34_tree = (object)adaptor.Create(string_literal34, retval);
				adaptor.AddChild(root_0, string_literal34_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C.g:140:4: 'unsigned'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(140, 4);
				string_literal35=(IToken)Match(input,93,Follow._93_in_type_specifier360); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal35_tree = (object)adaptor.Create(string_literal35, retval);
				adaptor.AddChild(root_0, string_literal35_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C.g:141:4: '__builtin_va_list'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(141, 4);
				string_literal36=(IToken)Match(input,63,Follow._63_in_type_specifier365); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal36_tree = (object)adaptor.Create(string_literal36, retval);
				adaptor.AddChild(root_0, string_literal36_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C.g:142:4: struct_or_union_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(142, 4);
				PushFollow(Follow._struct_or_union_specifier_in_type_specifier372);
				struct_or_union_specifier37=struct_or_union_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_or_union_specifier37.Tree, struct_or_union_specifier37, retval);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C.g:143:4: enum_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(143, 4);
				PushFollow(Follow._enum_specifier_in_type_specifier377);
				enum_specifier38=enum_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_specifier38.Tree, enum_specifier38, retval);

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C.g:144:4: type_id
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(144, 4);
				PushFollow(Follow._type_id_in_type_specifier382);
				type_id39=type_id();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_id39.Tree, type_id39, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_specifier", 9);
			LeaveRule("type_specifier", 9);
			LeaveRule_type_specifier();
			if (state.backtracking > 0) { Memoize(input, 9, type_specifier_StartIndex); }

		}
		DebugLocation(145, 1);
		} finally { DebugExitRule(GrammarFileName, "type_specifier"); }
		return retval;

	}
	// $ANTLR end "type_specifier"

	partial void EnterRule_type_id();
	partial void LeaveRule_type_id();

	// $ANTLR start "type_id"
	// C.g:147:1: type_id :{...}? IDENTIFIER ;
	[GrammarRule("type_id")]
	public XAstParserRuleReturnScope type_id()
	{
		EnterRule_type_id();
		EnterRule("type_id", 10);
		var retval = new XAstParserRuleReturnScope("type_id");
		
		retval.Start = (IToken)input.LT(1);
		int type_id_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER40 = default(IToken);

		object IDENTIFIER40_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_id");
		DebugLocation(147, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// C.g:148:2: ({...}? IDENTIFIER )
			DebugEnterAlt(1);
			// C.g:148:6: {...}? IDENTIFIER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(148, 6);
			if (!((isTypeName(input.LT(1).getText()))))
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "type_id", "isTypeName(input.LT(1).getText())");
			}
			DebugLocation(148, 43);
			IDENTIFIER40=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_type_id397), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER40_tree = (object)adaptor.Create(IDENTIFIER40, retval);
			adaptor.AddChild(root_0, IDENTIFIER40_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_id", 10);
			LeaveRule("type_id", 10);
			LeaveRule_type_id();
			if (state.backtracking > 0) { Memoize(input, 10, type_id_StartIndex); }

		}
		DebugLocation(150, 1);
		} finally { DebugExitRule(GrammarFileName, "type_id"); }
		return retval;

	}
	// $ANTLR end "type_id"

	partial void EnterRule_struct_or_union_specifier();
	partial void LeaveRule_struct_or_union_specifier();

	// $ANTLR start "struct_or_union_specifier"
	// C.g:152:1: struct_or_union_specifier options {k=3; } : ( struct_or_union ( IDENTIFIER )? '{' struct_declaration_list '}' | struct_or_union IDENTIFIER );
	[GrammarRule("struct_or_union_specifier")]
	public XAstParserRuleReturnScope struct_or_union_specifier()
	{
		EnterRule_struct_or_union_specifier();
		EnterRule("struct_or_union_specifier", 11);
		var retval = new XAstParserRuleReturnScope("struct_or_union_specifier");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int struct_or_union_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER42 = default(IToken);
		IToken char_literal43 = default(IToken);
		IToken char_literal45 = default(IToken);
		IToken IDENTIFIER47 = default(IToken);
		XAstParserRuleReturnScope struct_or_union41 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declaration_list44 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_or_union46 = default(XAstParserRuleReturnScope);

		object IDENTIFIER42_tree = default(object);
		object char_literal43_tree = default(object);
		object char_literal45_tree = default(object);
		object IDENTIFIER47_tree = default(object);

		  Symbols_stack.Peek().types =  new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "struct_or_union_specifier");
		DebugLocation(152, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// C.g:158:2: ( struct_or_union ( IDENTIFIER )? '{' struct_declaration_list '}' | struct_or_union IDENTIFIER )
			int alt15=2;
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==89||LA15_0==92))
			{
				int LA15_1 = input.LA(2);

				if ((LA15_1==IDENTIFIER))
				{
					int LA15_2 = input.LA(3);

					if ((LA15_2==97))
					{
						alt15 = 1;
					}
					else if ((LA15_2==EOF||LA15_2==IDENTIFIER||(LA15_2>=30 && LA15_2<=32)||LA15_2==37||(LA15_2>=46 && LA15_2<=47)||LA15_2==59||(LA15_2>=63 && LA15_2<=65)||(LA15_2>=68 && LA15_2<=69)||LA15_2==73||(LA15_2>=75 && LA15_2<=77)||(LA15_2>=81 && LA15_2<=83)||(LA15_2>=85 && LA15_2<=86)||(LA15_2>=88 && LA15_2<=89)||(LA15_2>=92 && LA15_2<=95)))
					{
						alt15 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 15, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA15_1==97))
				{
					alt15 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:158:4: struct_or_union ( IDENTIFIER )? '{' struct_declaration_list '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(158, 4);
				PushFollow(Follow._struct_or_union_in_struct_or_union_specifier427);
				struct_or_union41=struct_or_union();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_or_union41.Tree, struct_or_union41, retval);
				DebugLocation(158, 20);
				// C.g:158:20: ( IDENTIFIER )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==IDENTIFIER))
				{
					alt14 = 1;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:158:20: IDENTIFIER
					{
					DebugLocation(158, 20);
					IDENTIFIER42=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_struct_or_union_specifier429), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER42_tree = (object)adaptor.Create(IDENTIFIER42, retval);
					adaptor.AddChild(root_0, IDENTIFIER42_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(14); }

				DebugLocation(158, 32);
				char_literal43=(IToken)Match(input,97,Follow._97_in_struct_or_union_specifier432); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal43_tree = (object)adaptor.Create(char_literal43, retval);
				adaptor.AddChild(root_0, char_literal43_tree);
				}
				DebugLocation(158, 36);
				PushFollow(Follow._struct_declaration_list_in_struct_or_union_specifier434);
				struct_declaration_list44=struct_declaration_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration_list44.Tree, struct_declaration_list44, retval);
				DebugLocation(158, 60);
				char_literal45=(IToken)Match(input,101,Follow._101_in_struct_or_union_specifier436); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal45_tree = (object)adaptor.Create(char_literal45, retval);
				adaptor.AddChild(root_0, char_literal45_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:159:4: struct_or_union IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(159, 4);
				PushFollow(Follow._struct_or_union_in_struct_or_union_specifier441);
				struct_or_union46=struct_or_union();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_or_union46.Tree, struct_or_union46, retval);
				DebugLocation(159, 20);
				IDENTIFIER47=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_struct_or_union_specifier443), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER47_tree = (object)adaptor.Create(IDENTIFIER47, retval);
				adaptor.AddChild(root_0, IDENTIFIER47_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_or_union_specifier", 11);
			LeaveRule("struct_or_union_specifier", 11);
			LeaveRule_struct_or_union_specifier();
			if (state.backtracking > 0) { Memoize(input, 11, struct_or_union_specifier_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(160, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_or_union_specifier"); }
		return retval;

	}
	// $ANTLR end "struct_or_union_specifier"

	partial void EnterRule_struct_or_union();
	partial void LeaveRule_struct_or_union();

	// $ANTLR start "struct_or_union"
	// C.g:162:1: struct_or_union : ( 'struct' | 'union' );
	[GrammarRule("struct_or_union")]
	public XAstParserRuleReturnScope struct_or_union()
	{
		EnterRule_struct_or_union();
		EnterRule("struct_or_union", 12);
		var retval = new XAstParserRuleReturnScope("struct_or_union");
		
		retval.Start = (IToken)input.LT(1);
		int struct_or_union_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set48 = default(IToken);

		object set48_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_or_union");
		DebugLocation(162, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// C.g:163:2: ( 'struct' | 'union' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(163, 2);

			set48=(IToken)input.LT(1);
			if (input.LA(1)==89||input.LA(1)==92)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set48, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_or_union", 12);
			LeaveRule("struct_or_union", 12);
			LeaveRule_struct_or_union();
			if (state.backtracking > 0) { Memoize(input, 12, struct_or_union_StartIndex); }

		}
		DebugLocation(165, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_or_union"); }
		return retval;

	}
	// $ANTLR end "struct_or_union"

	partial void EnterRule_struct_declaration_list();
	partial void LeaveRule_struct_declaration_list();

	// $ANTLR start "struct_declaration_list"
	// C.g:167:1: struct_declaration_list : ( struct_declaration )+ ;
	[GrammarRule("struct_declaration_list")]
	public XAstParserRuleReturnScope struct_declaration_list()
	{
		EnterRule_struct_declaration_list();
		EnterRule("struct_declaration_list", 13);
		var retval = new XAstParserRuleReturnScope("struct_declaration_list");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declaration_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope struct_declaration49 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "struct_declaration_list");
		DebugLocation(167, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// C.g:168:2: ( ( struct_declaration )+ )
			DebugEnterAlt(1);
			// C.g:168:4: ( struct_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(168, 4);
			// C.g:168:4: ( struct_declaration )+
			int cnt16=0;
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==IDENTIFIER||(LA16_0>=63 && LA16_0<=64)||(LA16_0>=68 && LA16_0<=69)||LA16_0==73||LA16_0==75||LA16_0==77||(LA16_0>=81 && LA16_0<=82)||(LA16_0>=85 && LA16_0<=86)||LA16_0==89||(LA16_0>=92 && LA16_0<=95)))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:168:4: struct_declaration
					{
					DebugLocation(168, 4);
					PushFollow(Follow._struct_declaration_in_struct_declaration_list470);
					struct_declaration49=struct_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration49.Tree, struct_declaration49, retval);

					}
					break;

				default:
					if (cnt16 >= 1)
						goto loop16;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee16 = new EarlyExitException( 16, input );
					DebugRecognitionException(eee16);
					throw eee16;
				}
				cnt16++;
			}
			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declaration_list", 13);
			LeaveRule("struct_declaration_list", 13);
			LeaveRule_struct_declaration_list();
			if (state.backtracking > 0) { Memoize(input, 13, struct_declaration_list_StartIndex); }

		}
		DebugLocation(169, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_declaration_list"); }
		return retval;

	}
	// $ANTLR end "struct_declaration_list"

	partial void EnterRule_struct_declaration();
	partial void LeaveRule_struct_declaration();

	// $ANTLR start "struct_declaration"
	// C.g:171:1: struct_declaration : specifier_qualifier_list struct_declarator_list ';' ;
	[GrammarRule("struct_declaration")]
	public XAstParserRuleReturnScope struct_declaration()
	{
		EnterRule_struct_declaration();
		EnterRule("struct_declaration", 14);
		var retval = new XAstParserRuleReturnScope("struct_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal52 = default(IToken);
		XAstParserRuleReturnScope specifier_qualifier_list50 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declarator_list51 = default(XAstParserRuleReturnScope);

		object char_literal52_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_declaration");
		DebugLocation(171, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// C.g:172:2: ( specifier_qualifier_list struct_declarator_list ';' )
			DebugEnterAlt(1);
			// C.g:172:4: specifier_qualifier_list struct_declarator_list ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(172, 4);
			PushFollow(Follow._specifier_qualifier_list_in_struct_declaration482);
			specifier_qualifier_list50=specifier_qualifier_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, specifier_qualifier_list50.Tree, specifier_qualifier_list50, retval);
			DebugLocation(172, 29);
			PushFollow(Follow._struct_declarator_list_in_struct_declaration484);
			struct_declarator_list51=struct_declarator_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declarator_list51.Tree, struct_declarator_list51, retval);
			DebugLocation(172, 52);
			char_literal52=(IToken)Match(input,47,Follow._47_in_struct_declaration486); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal52_tree = (object)adaptor.Create(char_literal52, retval);
			adaptor.AddChild(root_0, char_literal52_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declaration", 14);
			LeaveRule("struct_declaration", 14);
			LeaveRule_struct_declaration();
			if (state.backtracking > 0) { Memoize(input, 14, struct_declaration_StartIndex); }

		}
		DebugLocation(173, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_declaration"); }
		return retval;

	}
	// $ANTLR end "struct_declaration"

	partial void EnterRule_specifier_qualifier_list();
	partial void LeaveRule_specifier_qualifier_list();

	// $ANTLR start "specifier_qualifier_list"
	// C.g:175:1: specifier_qualifier_list : ( type_qualifier | type_specifier )+ ;
	[GrammarRule("specifier_qualifier_list")]
	public XAstParserRuleReturnScope specifier_qualifier_list()
	{
		EnterRule_specifier_qualifier_list();
		EnterRule("specifier_qualifier_list", 15);
		var retval = new XAstParserRuleReturnScope("specifier_qualifier_list");
		
		retval.Start = (IToken)input.LT(1);
		int specifier_qualifier_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope type_qualifier53 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_specifier54 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "specifier_qualifier_list");
		DebugLocation(175, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// C.g:176:2: ( ( type_qualifier | type_specifier )+ )
			DebugEnterAlt(1);
			// C.g:176:4: ( type_qualifier | type_specifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(176, 4);
			// C.g:176:4: ( type_qualifier | type_specifier )+
			int cnt17=0;
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=3;
				try { DebugEnterDecision(17, false);
				switch (input.LA(1))
				{
				case IDENTIFIER:
					{
					switch (input.LA(2))
					{
					case 59:
						{
						int LA17_20 = input.LA(3);

						if ((((EvaluatePredicate(synpred37_C_fragment)&&EvaluatePredicate(synpred37_C_fragment))&&(isTypeName(input.LT(1).getText())))))
						{
							alt17 = 2;
						}


						}
						break;
					case 30:
						{
						int LA17_21 = input.LA(3);

						if ((((EvaluatePredicate(synpred37_C_fragment)&&EvaluatePredicate(synpred37_C_fragment))&&(isTypeName(input.LT(1).getText())))))
						{
							alt17 = 2;
						}


						}
						break;
					case 46:
						{
						int LA17_22 = input.LA(3);

						if ((((EvaluatePredicate(synpred37_C_fragment)&&EvaluatePredicate(synpred37_C_fragment))&&(isTypeName(input.LT(1).getText())))))
						{
							alt17 = 2;
						}


						}
						break;
					case IDENTIFIER:
					case 31:
					case 32:
					case 63:
					case 64:
					case 68:
					case 69:
					case 73:
					case 75:
					case 77:
					case 81:
					case 82:
					case 85:
					case 86:
					case 89:
					case 92:
					case 93:
					case 94:
					case 95:
						{
						alt17 = 2;
						}
						break;
					}

					}
					break;
				case 64:
				case 69:
				case 95:
					{
					alt17 = 1;
					}
					break;
				case 63:
				case 68:
				case 73:
				case 75:
				case 77:
				case 81:
				case 82:
				case 85:
				case 86:
				case 89:
				case 92:
				case 93:
				case 94:
					{
					alt17 = 2;
					}
					break;
				}

				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:176:6: type_qualifier
					{
					DebugLocation(176, 6);
					PushFollow(Follow._type_qualifier_in_specifier_qualifier_list499);
					type_qualifier53=type_qualifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier53.Tree, type_qualifier53, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:176:23: type_specifier
					{
					DebugLocation(176, 23);
					PushFollow(Follow._type_specifier_in_specifier_qualifier_list503);
					type_specifier54=type_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_specifier54.Tree, type_specifier54, retval);

					}
					break;

				default:
					if (cnt17 >= 1)
						goto loop17;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee17 = new EarlyExitException( 17, input );
					DebugRecognitionException(eee17);
					throw eee17;
				}
				cnt17++;
			}
			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("specifier_qualifier_list", 15);
			LeaveRule("specifier_qualifier_list", 15);
			LeaveRule_specifier_qualifier_list();
			if (state.backtracking > 0) { Memoize(input, 15, specifier_qualifier_list_StartIndex); }

		}
		DebugLocation(177, 1);
		} finally { DebugExitRule(GrammarFileName, "specifier_qualifier_list"); }
		return retval;

	}
	// $ANTLR end "specifier_qualifier_list"

	partial void EnterRule_struct_declarator_list();
	partial void LeaveRule_struct_declarator_list();

	// $ANTLR start "struct_declarator_list"
	// C.g:179:1: struct_declarator_list : struct_declarator ( ',' struct_declarator )* ;
	[GrammarRule("struct_declarator_list")]
	public XAstParserRuleReturnScope struct_declarator_list()
	{
		EnterRule_struct_declarator_list();
		EnterRule("struct_declarator_list", 16);
		var retval = new XAstParserRuleReturnScope("struct_declarator_list");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declarator_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal56 = default(IToken);
		XAstParserRuleReturnScope struct_declarator55 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declarator57 = default(XAstParserRuleReturnScope);

		object char_literal56_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_declarator_list");
		DebugLocation(179, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// C.g:180:2: ( struct_declarator ( ',' struct_declarator )* )
			DebugEnterAlt(1);
			// C.g:180:4: struct_declarator ( ',' struct_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(180, 4);
			PushFollow(Follow._struct_declarator_in_struct_declarator_list517);
			struct_declarator55=struct_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declarator55.Tree, struct_declarator55, retval);
			DebugLocation(180, 22);
			// C.g:180:22: ( ',' struct_declarator )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==37))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:180:23: ',' struct_declarator
					{
					DebugLocation(180, 23);
					char_literal56=(IToken)Match(input,37,Follow._37_in_struct_declarator_list520); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal56_tree = (object)adaptor.Create(char_literal56, retval);
					adaptor.AddChild(root_0, char_literal56_tree);
					}
					DebugLocation(180, 27);
					PushFollow(Follow._struct_declarator_in_struct_declarator_list522);
					struct_declarator57=struct_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declarator57.Tree, struct_declarator57, retval);

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declarator_list", 16);
			LeaveRule("struct_declarator_list", 16);
			LeaveRule_struct_declarator_list();
			if (state.backtracking > 0) { Memoize(input, 16, struct_declarator_list_StartIndex); }

		}
		DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_declarator_list"); }
		return retval;

	}
	// $ANTLR end "struct_declarator_list"

	partial void EnterRule_struct_declarator();
	partial void LeaveRule_struct_declarator();

	// $ANTLR start "struct_declarator"
	// C.g:183:1: struct_declarator : ( declarator ( ':' constant_expression )? | ':' constant_expression );
	[GrammarRule("struct_declarator")]
	public XAstParserRuleReturnScope struct_declarator()
	{
		EnterRule_struct_declarator();
		EnterRule("struct_declarator", 17);
		var retval = new XAstParserRuleReturnScope("struct_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal59 = default(IToken);
		IToken char_literal61 = default(IToken);
		XAstParserRuleReturnScope declarator58 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression60 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression62 = default(XAstParserRuleReturnScope);

		object char_literal59_tree = default(object);
		object char_literal61_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_declarator");
		DebugLocation(183, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// C.g:184:2: ( declarator ( ':' constant_expression )? | ':' constant_expression )
			int alt20=2;
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==IDENTIFIER||LA20_0==30||LA20_0==32))
			{
				alt20 = 1;
			}
			else if ((LA20_0==46))
			{
				alt20 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:184:4: declarator ( ':' constant_expression )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(184, 4);
				PushFollow(Follow._declarator_in_struct_declarator535);
				declarator58=declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declarator58.Tree, declarator58, retval);
				DebugLocation(184, 15);
				// C.g:184:15: ( ':' constant_expression )?
				int alt19=2;
				try { DebugEnterSubRule(19);
				try { DebugEnterDecision(19, false);
				int LA19_0 = input.LA(1);

				if ((LA19_0==46))
				{
					alt19 = 1;
				}
				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:184:16: ':' constant_expression
					{
					DebugLocation(184, 16);
					char_literal59=(IToken)Match(input,46,Follow._46_in_struct_declarator538); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal59_tree = (object)adaptor.Create(char_literal59, retval);
					adaptor.AddChild(root_0, char_literal59_tree);
					}
					DebugLocation(184, 20);
					PushFollow(Follow._constant_expression_in_struct_declarator540);
					constant_expression60=constant_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression60.Tree, constant_expression60, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(19); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:185:4: ':' constant_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(185, 4);
				char_literal61=(IToken)Match(input,46,Follow._46_in_struct_declarator547); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal61_tree = (object)adaptor.Create(char_literal61, retval);
				adaptor.AddChild(root_0, char_literal61_tree);
				}
				DebugLocation(185, 8);
				PushFollow(Follow._constant_expression_in_struct_declarator549);
				constant_expression62=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression62.Tree, constant_expression62, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declarator", 17);
			LeaveRule("struct_declarator", 17);
			LeaveRule_struct_declarator();
			if (state.backtracking > 0) { Memoize(input, 17, struct_declarator_StartIndex); }

		}
		DebugLocation(186, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_declarator"); }
		return retval;

	}
	// $ANTLR end "struct_declarator"

	partial void EnterRule_enum_specifier();
	partial void LeaveRule_enum_specifier();

	// $ANTLR start "enum_specifier"
	// C.g:188:1: enum_specifier options {k=3; } : ( 'enum' '{' enumerator_list '}' | 'enum' IDENTIFIER '{' enumerator_list '}' | 'enum' IDENTIFIER );
	[GrammarRule("enum_specifier")]
	public XAstParserRuleReturnScope enum_specifier()
	{
		EnterRule_enum_specifier();
		EnterRule("enum_specifier", 18);
		var retval = new XAstParserRuleReturnScope("enum_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int enum_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal63 = default(IToken);
		IToken char_literal64 = default(IToken);
		IToken char_literal66 = default(IToken);
		IToken string_literal67 = default(IToken);
		IToken IDENTIFIER68 = default(IToken);
		IToken char_literal69 = default(IToken);
		IToken char_literal71 = default(IToken);
		IToken string_literal72 = default(IToken);
		IToken IDENTIFIER73 = default(IToken);
		XAstParserRuleReturnScope enumerator_list65 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enumerator_list70 = default(XAstParserRuleReturnScope);

		object string_literal63_tree = default(object);
		object char_literal64_tree = default(object);
		object char_literal66_tree = default(object);
		object string_literal67_tree = default(object);
		object IDENTIFIER68_tree = default(object);
		object char_literal69_tree = default(object);
		object char_literal71_tree = default(object);
		object string_literal72_tree = default(object);
		object IDENTIFIER73_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enum_specifier");
		DebugLocation(188, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// C.g:190:2: ( 'enum' '{' enumerator_list '}' | 'enum' IDENTIFIER '{' enumerator_list '}' | 'enum' IDENTIFIER )
			int alt21=3;
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==75))
			{
				int LA21_1 = input.LA(2);

				if ((LA21_1==97))
				{
					alt21 = 1;
				}
				else if ((LA21_1==IDENTIFIER))
				{
					int LA21_3 = input.LA(3);

					if ((LA21_3==97))
					{
						alt21 = 2;
					}
					else if ((LA21_3==EOF||LA21_3==IDENTIFIER||(LA21_3>=30 && LA21_3<=32)||LA21_3==37||(LA21_3>=46 && LA21_3<=47)||LA21_3==59||(LA21_3>=63 && LA21_3<=65)||(LA21_3>=68 && LA21_3<=69)||LA21_3==73||(LA21_3>=75 && LA21_3<=77)||(LA21_3>=81 && LA21_3<=83)||(LA21_3>=85 && LA21_3<=86)||(LA21_3>=88 && LA21_3<=89)||(LA21_3>=92 && LA21_3<=95)))
					{
						alt21 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 21, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:190:4: 'enum' '{' enumerator_list '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(190, 4);
				string_literal63=(IToken)Match(input,75,Follow._75_in_enum_specifier567); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal63_tree = (object)adaptor.Create(string_literal63, retval);
				adaptor.AddChild(root_0, string_literal63_tree);
				}
				DebugLocation(190, 11);
				char_literal64=(IToken)Match(input,97,Follow._97_in_enum_specifier569); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal64_tree = (object)adaptor.Create(char_literal64, retval);
				adaptor.AddChild(root_0, char_literal64_tree);
				}
				DebugLocation(190, 15);
				PushFollow(Follow._enumerator_list_in_enum_specifier571);
				enumerator_list65=enumerator_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator_list65.Tree, enumerator_list65, retval);
				DebugLocation(190, 31);
				char_literal66=(IToken)Match(input,101,Follow._101_in_enum_specifier573); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal66_tree = (object)adaptor.Create(char_literal66, retval);
				adaptor.AddChild(root_0, char_literal66_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:191:4: 'enum' IDENTIFIER '{' enumerator_list '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(191, 4);
				string_literal67=(IToken)Match(input,75,Follow._75_in_enum_specifier578); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal67_tree = (object)adaptor.Create(string_literal67, retval);
				adaptor.AddChild(root_0, string_literal67_tree);
				}
				DebugLocation(191, 11);
				IDENTIFIER68=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enum_specifier580), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER68_tree = (object)adaptor.Create(IDENTIFIER68, retval);
				adaptor.AddChild(root_0, IDENTIFIER68_tree);
				}
				DebugLocation(191, 22);
				char_literal69=(IToken)Match(input,97,Follow._97_in_enum_specifier582); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal69_tree = (object)adaptor.Create(char_literal69, retval);
				adaptor.AddChild(root_0, char_literal69_tree);
				}
				DebugLocation(191, 26);
				PushFollow(Follow._enumerator_list_in_enum_specifier584);
				enumerator_list70=enumerator_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator_list70.Tree, enumerator_list70, retval);
				DebugLocation(191, 42);
				char_literal71=(IToken)Match(input,101,Follow._101_in_enum_specifier586); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal71_tree = (object)adaptor.Create(char_literal71, retval);
				adaptor.AddChild(root_0, char_literal71_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:192:4: 'enum' IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(192, 4);
				string_literal72=(IToken)Match(input,75,Follow._75_in_enum_specifier591); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal72_tree = (object)adaptor.Create(string_literal72, retval);
				adaptor.AddChild(root_0, string_literal72_tree);
				}
				DebugLocation(192, 11);
				IDENTIFIER73=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enum_specifier593), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER73_tree = (object)adaptor.Create(IDENTIFIER73, retval);
				adaptor.AddChild(root_0, IDENTIFIER73_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_specifier", 18);
			LeaveRule("enum_specifier", 18);
			LeaveRule_enum_specifier();
			if (state.backtracking > 0) { Memoize(input, 18, enum_specifier_StartIndex); }

		}
		DebugLocation(193, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_specifier"); }
		return retval;

	}
	// $ANTLR end "enum_specifier"

	partial void EnterRule_enumerator_list();
	partial void LeaveRule_enumerator_list();

	// $ANTLR start "enumerator_list"
	// C.g:195:1: enumerator_list : enumerator ( ',' enumerator )* ;
	[GrammarRule("enumerator_list")]
	public XAstParserRuleReturnScope enumerator_list()
	{
		EnterRule_enumerator_list();
		EnterRule("enumerator_list", 19);
		var retval = new XAstParserRuleReturnScope("enumerator_list");
		
		retval.Start = (IToken)input.LT(1);
		int enumerator_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal75 = default(IToken);
		XAstParserRuleReturnScope enumerator74 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enumerator76 = default(XAstParserRuleReturnScope);

		object char_literal75_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumerator_list");
		DebugLocation(195, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// C.g:196:2: ( enumerator ( ',' enumerator )* )
			DebugEnterAlt(1);
			// C.g:196:4: enumerator ( ',' enumerator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(196, 4);
			PushFollow(Follow._enumerator_in_enumerator_list604);
			enumerator74=enumerator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator74.Tree, enumerator74, retval);
			DebugLocation(196, 15);
			// C.g:196:15: ( ',' enumerator )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_0 = input.LA(1);

				if ((LA22_0==37))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:196:16: ',' enumerator
					{
					DebugLocation(196, 16);
					char_literal75=(IToken)Match(input,37,Follow._37_in_enumerator_list607); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal75_tree = (object)adaptor.Create(char_literal75, retval);
					adaptor.AddChild(root_0, char_literal75_tree);
					}
					DebugLocation(196, 20);
					PushFollow(Follow._enumerator_in_enumerator_list609);
					enumerator76=enumerator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator76.Tree, enumerator76, retval);

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumerator_list", 19);
			LeaveRule("enumerator_list", 19);
			LeaveRule_enumerator_list();
			if (state.backtracking > 0) { Memoize(input, 19, enumerator_list_StartIndex); }

		}
		DebugLocation(197, 1);
		} finally { DebugExitRule(GrammarFileName, "enumerator_list"); }
		return retval;

	}
	// $ANTLR end "enumerator_list"

	partial void EnterRule_enumerator();
	partial void LeaveRule_enumerator();

	// $ANTLR start "enumerator"
	// C.g:199:1: enumerator : IDENTIFIER ( '=' constant_expression )? ;
	[GrammarRule("enumerator")]
	public XAstParserRuleReturnScope enumerator()
	{
		EnterRule_enumerator();
		EnterRule("enumerator", 20);
		var retval = new XAstParserRuleReturnScope("enumerator");
		
		retval.Start = (IToken)input.LT(1);
		int enumerator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER77 = default(IToken);
		IToken char_literal78 = default(IToken);
		XAstParserRuleReturnScope constant_expression79 = default(XAstParserRuleReturnScope);

		object IDENTIFIER77_tree = default(object);
		object char_literal78_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumerator");
		DebugLocation(199, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// C.g:200:2: ( IDENTIFIER ( '=' constant_expression )? )
			DebugEnterAlt(1);
			// C.g:200:4: IDENTIFIER ( '=' constant_expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(200, 4);
			IDENTIFIER77=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enumerator622), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER77_tree = (object)adaptor.Create(IDENTIFIER77, retval);
			adaptor.AddChild(root_0, IDENTIFIER77_tree);
			}
			DebugLocation(200, 15);
			// C.g:200:15: ( '=' constant_expression )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==52))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:200:16: '=' constant_expression
				{
				DebugLocation(200, 16);
				char_literal78=(IToken)Match(input,52,Follow._52_in_enumerator625); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal78_tree = (object)adaptor.Create(char_literal78, retval);
				adaptor.AddChild(root_0, char_literal78_tree);
				}
				DebugLocation(200, 20);
				PushFollow(Follow._constant_expression_in_enumerator627);
				constant_expression79=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression79.Tree, constant_expression79, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumerator", 20);
			LeaveRule("enumerator", 20);
			LeaveRule_enumerator();
			if (state.backtracking > 0) { Memoize(input, 20, enumerator_StartIndex); }

		}
		DebugLocation(201, 1);
		} finally { DebugExitRule(GrammarFileName, "enumerator"); }
		return retval;

	}
	// $ANTLR end "enumerator"

	partial void EnterRule_type_qualifier();
	partial void LeaveRule_type_qualifier();

	// $ANTLR start "type_qualifier"
	// C.g:203:1: type_qualifier : ( 'const' | 'volatile' | '__extension__' );
	[GrammarRule("type_qualifier")]
	public XAstParserRuleReturnScope type_qualifier()
	{
		EnterRule_type_qualifier();
		EnterRule("type_qualifier", 21);
		var retval = new XAstParserRuleReturnScope("type_qualifier");
		
		retval.Start = (IToken)input.LT(1);
		int type_qualifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set80 = default(IToken);

		object set80_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_qualifier");
		DebugLocation(203, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// C.g:204:2: ( 'const' | 'volatile' | '__extension__' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(204, 2);

			set80=(IToken)input.LT(1);
			if (input.LA(1)==64||input.LA(1)==69||input.LA(1)==95)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set80, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_qualifier", 21);
			LeaveRule("type_qualifier", 21);
			LeaveRule_type_qualifier();
			if (state.backtracking > 0) { Memoize(input, 21, type_qualifier_StartIndex); }

		}
		DebugLocation(207, 1);
		} finally { DebugExitRule(GrammarFileName, "type_qualifier"); }
		return retval;

	}
	// $ANTLR end "type_qualifier"

	partial void EnterRule_declarator();
	partial void LeaveRule_declarator();

	// $ANTLR start "declarator"
	// C.g:209:1: declarator : ( ( pointer )? direct_declarator | pointer );
	[GrammarRule("declarator")]
	public XAstParserRuleReturnScope declarator()
	{
		EnterRule_declarator();
		EnterRule("declarator", 22);
		var retval = new XAstParserRuleReturnScope("declarator");
		
		retval.Start = (IToken)input.LT(1);
		int declarator_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope pointer81 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope direct_declarator82 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope pointer83 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "declarator");
		DebugLocation(209, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// C.g:210:2: ( ( pointer )? direct_declarator | pointer )
			int alt25=2;
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==32))
			{
				int LA25_1 = input.LA(2);

				if ((EvaluatePredicate(synpred48_C_fragment)))
				{
					alt25 = 1;
				}
				else if ((true))
				{
					alt25 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 25, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA25_0==IDENTIFIER||LA25_0==30))
			{
				alt25 = 1;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:210:4: ( pointer )? direct_declarator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(210, 4);
				// C.g:210:4: ( pointer )?
				int alt24=2;
				try { DebugEnterSubRule(24);
				try { DebugEnterDecision(24, false);
				int LA24_0 = input.LA(1);

				if ((LA24_0==32))
				{
					alt24 = 1;
				}
				} finally { DebugExitDecision(24); }
				switch (alt24)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:210:4: pointer
					{
					DebugLocation(210, 4);
					PushFollow(Follow._pointer_in_declarator663);
					pointer81=pointer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, pointer81.Tree, pointer81, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(24); }

				DebugLocation(210, 13);
				PushFollow(Follow._direct_declarator_in_declarator666);
				direct_declarator82=direct_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, direct_declarator82.Tree, direct_declarator82, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:211:4: pointer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(211, 4);
				PushFollow(Follow._pointer_in_declarator671);
				pointer83=pointer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pointer83.Tree, pointer83, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declarator", 22);
			LeaveRule("declarator", 22);
			LeaveRule_declarator();
			if (state.backtracking > 0) { Memoize(input, 22, declarator_StartIndex); }

		}
		DebugLocation(212, 1);
		} finally { DebugExitRule(GrammarFileName, "declarator"); }
		return retval;

	}
	// $ANTLR end "declarator"

	partial void EnterRule_direct_declarator();
	partial void LeaveRule_direct_declarator();

	// $ANTLR start "direct_declarator"
	// C.g:214:1: direct_declarator : ( IDENTIFIER | '(' declarator ')' ) ( declarator_suffix )* ;
	[GrammarRule("direct_declarator")]
	public XAstParserRuleReturnScope direct_declarator()
	{
		EnterRule_direct_declarator();
		EnterRule("direct_declarator", 23);
		var retval = new XAstParserRuleReturnScope("direct_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int direct_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER84 = default(IToken);
		IToken char_literal85 = default(IToken);
		IToken char_literal87 = default(IToken);
		XAstParserRuleReturnScope declarator86 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator_suffix88 = default(XAstParserRuleReturnScope);

		object IDENTIFIER84_tree = default(object);
		object char_literal85_tree = default(object);
		object char_literal87_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "direct_declarator");
		DebugLocation(214, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// C.g:215:2: ( ( IDENTIFIER | '(' declarator ')' ) ( declarator_suffix )* )
			DebugEnterAlt(1);
			// C.g:215:6: ( IDENTIFIER | '(' declarator ')' ) ( declarator_suffix )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(215, 6);
			// C.g:215:6: ( IDENTIFIER | '(' declarator ')' )
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==IDENTIFIER))
			{
				alt26 = 1;
			}
			else if ((LA26_0==30))
			{
				alt26 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:215:8: IDENTIFIER
				{
				DebugLocation(215, 8);
				IDENTIFIER84=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_direct_declarator686), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER84_tree = (object)adaptor.Create(IDENTIFIER84, retval);
				adaptor.AddChild(root_0, IDENTIFIER84_tree);
				}
				DebugLocation(216, 4);
				if (state.backtracking == 0)
				{

								if (declaration_stack.size()>0&&declaration_stack.Peek().isTypedef) {
									Symbols_stack.Peek().types.add((IDENTIFIER84!=null?IDENTIFIER84.Text:null));
									
								}
								
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:222:5: '(' declarator ')'
				{
				DebugLocation(222, 5);
				char_literal85=(IToken)Match(input,30,Follow._30_in_direct_declarator697); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal85_tree = (object)adaptor.Create(char_literal85, retval);
				adaptor.AddChild(root_0, char_literal85_tree);
				}
				DebugLocation(222, 9);
				PushFollow(Follow._declarator_in_direct_declarator699);
				declarator86=declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declarator86.Tree, declarator86, retval);
				DebugLocation(222, 20);
				char_literal87=(IToken)Match(input,31,Follow._31_in_direct_declarator701); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal87_tree = (object)adaptor.Create(char_literal87, retval);
				adaptor.AddChild(root_0, char_literal87_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(224, 3);
			// C.g:224:3: ( declarator_suffix )*
			try { DebugEnterSubRule(27);
			while (true)
			{
				int alt27=2;
				try { DebugEnterDecision(27, false);
				try
				{
					alt27 = dfa27.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(27); }
				switch ( alt27 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:224:3: declarator_suffix
					{
					DebugLocation(224, 3);
					PushFollow(Follow._declarator_suffix_in_direct_declarator709);
					declarator_suffix88=declarator_suffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declarator_suffix88.Tree, declarator_suffix88, retval);

					}
					break;

				default:
					goto loop27;
				}
			}

			loop27:
				;

			} finally { DebugExitSubRule(27); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("direct_declarator", 23);
			LeaveRule("direct_declarator", 23);
			LeaveRule_direct_declarator();
			if (state.backtracking > 0) { Memoize(input, 23, direct_declarator_StartIndex); }

		}
		DebugLocation(225, 1);
		} finally { DebugExitRule(GrammarFileName, "direct_declarator"); }
		return retval;

	}
	// $ANTLR end "direct_declarator"

	partial void EnterRule_declarator_suffix();
	partial void LeaveRule_declarator_suffix();

	// $ANTLR start "declarator_suffix"
	// C.g:227:1: declarator_suffix : ( '[' constant_expression ']' | '[' ']' | '(' parameter_type_list ')' | '(' identifier_list ')' | '(' ')' );
	[GrammarRule("declarator_suffix")]
	public XAstParserRuleReturnScope declarator_suffix()
	{
		EnterRule_declarator_suffix();
		EnterRule("declarator_suffix", 24);
		var retval = new XAstParserRuleReturnScope("declarator_suffix");
		
		retval.Start = (IToken)input.LT(1);
		int declarator_suffix_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal89 = default(IToken);
		IToken char_literal91 = default(IToken);
		IToken char_literal92 = default(IToken);
		IToken char_literal93 = default(IToken);
		IToken char_literal94 = default(IToken);
		IToken char_literal96 = default(IToken);
		IToken char_literal97 = default(IToken);
		IToken char_literal99 = default(IToken);
		IToken char_literal100 = default(IToken);
		IToken char_literal101 = default(IToken);
		XAstParserRuleReturnScope constant_expression90 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope parameter_type_list95 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier_list98 = default(XAstParserRuleReturnScope);

		object char_literal89_tree = default(object);
		object char_literal91_tree = default(object);
		object char_literal92_tree = default(object);
		object char_literal93_tree = default(object);
		object char_literal94_tree = default(object);
		object char_literal96_tree = default(object);
		object char_literal97_tree = default(object);
		object char_literal99_tree = default(object);
		object char_literal100_tree = default(object);
		object char_literal101_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "declarator_suffix");
		DebugLocation(227, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// C.g:228:2: ( '[' constant_expression ']' | '[' ']' | '(' parameter_type_list ')' | '(' identifier_list ')' | '(' ')' )
			int alt28=5;
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==59))
			{
				int LA28_1 = input.LA(2);

				if ((LA28_1==60))
				{
					alt28 = 2;
				}
				else if ((LA28_1==CHARACTER_LITERAL||LA28_1==DECIMAL_LITERAL||LA28_1==FLOATING_POINT_LITERAL||LA28_1==HEX_LITERAL||LA28_1==IDENTIFIER||LA28_1==OCTAL_LITERAL||LA28_1==STRING_LITERAL||LA28_1==23||LA28_1==28||LA28_1==30||LA28_1==32||(LA28_1>=34 && LA28_1<=35)||(LA28_1>=38 && LA28_1<=39)||LA28_1==87||LA28_1==102))
				{
					alt28 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 28, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA28_0==30))
			{
				switch (input.LA(2))
				{
				case 31:
					{
					alt28 = 5;
					}
					break;
				case 63:
				case 64:
				case 65:
				case 68:
				case 69:
				case 73:
				case 75:
				case 76:
				case 77:
				case 81:
				case 82:
				case 83:
				case 85:
				case 86:
				case 88:
				case 89:
				case 92:
				case 93:
				case 94:
				case 95:
					{
					alt28 = 3;
					}
					break;
				case IDENTIFIER:
					{
					int LA28_30 = input.LA(3);

					if ((EvaluatePredicate(synpred53_C_fragment)))
					{
						alt28 = 3;
					}
					else if ((EvaluatePredicate(synpred54_C_fragment)))
					{
						alt28 = 4;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 28, 30, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 28, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 28, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:228:6: '[' constant_expression ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(228, 6);
				char_literal89=(IToken)Match(input,59,Follow._59_in_declarator_suffix723); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal89_tree = (object)adaptor.Create(char_literal89, retval);
				adaptor.AddChild(root_0, char_literal89_tree);
				}
				DebugLocation(228, 10);
				PushFollow(Follow._constant_expression_in_declarator_suffix725);
				constant_expression90=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression90.Tree, constant_expression90, retval);
				DebugLocation(228, 30);
				char_literal91=(IToken)Match(input,60,Follow._60_in_declarator_suffix727); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal91_tree = (object)adaptor.Create(char_literal91, retval);
				adaptor.AddChild(root_0, char_literal91_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:229:6: '[' ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(229, 6);
				char_literal92=(IToken)Match(input,59,Follow._59_in_declarator_suffix734); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal92_tree = (object)adaptor.Create(char_literal92, retval);
				adaptor.AddChild(root_0, char_literal92_tree);
				}
				DebugLocation(229, 10);
				char_literal93=(IToken)Match(input,60,Follow._60_in_declarator_suffix736); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal93_tree = (object)adaptor.Create(char_literal93, retval);
				adaptor.AddChild(root_0, char_literal93_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:230:6: '(' parameter_type_list ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(230, 6);
				char_literal94=(IToken)Match(input,30,Follow._30_in_declarator_suffix743); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal94_tree = (object)adaptor.Create(char_literal94, retval);
				adaptor.AddChild(root_0, char_literal94_tree);
				}
				DebugLocation(230, 10);
				PushFollow(Follow._parameter_type_list_in_declarator_suffix745);
				parameter_type_list95=parameter_type_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_type_list95.Tree, parameter_type_list95, retval);
				DebugLocation(230, 30);
				char_literal96=(IToken)Match(input,31,Follow._31_in_declarator_suffix747); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal96_tree = (object)adaptor.Create(char_literal96, retval);
				adaptor.AddChild(root_0, char_literal96_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:231:6: '(' identifier_list ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(231, 6);
				char_literal97=(IToken)Match(input,30,Follow._30_in_declarator_suffix754); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal97_tree = (object)adaptor.Create(char_literal97, retval);
				adaptor.AddChild(root_0, char_literal97_tree);
				}
				DebugLocation(231, 10);
				PushFollow(Follow._identifier_list_in_declarator_suffix756);
				identifier_list98=identifier_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier_list98.Tree, identifier_list98, retval);
				DebugLocation(231, 26);
				char_literal99=(IToken)Match(input,31,Follow._31_in_declarator_suffix758); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal99_tree = (object)adaptor.Create(char_literal99, retval);
				adaptor.AddChild(root_0, char_literal99_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:232:6: '(' ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(232, 6);
				char_literal100=(IToken)Match(input,30,Follow._30_in_declarator_suffix765); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal100_tree = (object)adaptor.Create(char_literal100, retval);
				adaptor.AddChild(root_0, char_literal100_tree);
				}
				DebugLocation(232, 10);
				char_literal101=(IToken)Match(input,31,Follow._31_in_declarator_suffix767); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal101_tree = (object)adaptor.Create(char_literal101, retval);
				adaptor.AddChild(root_0, char_literal101_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declarator_suffix", 24);
			LeaveRule("declarator_suffix", 24);
			LeaveRule_declarator_suffix();
			if (state.backtracking > 0) { Memoize(input, 24, declarator_suffix_StartIndex); }

		}
		DebugLocation(233, 1);
		} finally { DebugExitRule(GrammarFileName, "declarator_suffix"); }
		return retval;

	}
	// $ANTLR end "declarator_suffix"

	partial void EnterRule_pointer();
	partial void LeaveRule_pointer();

	// $ANTLR start "pointer"
	// C.g:235:1: pointer : ( '*' ( type_qualifier )+ ( pointer )? | '*' pointer | '*' );
	[GrammarRule("pointer")]
	public XAstParserRuleReturnScope pointer()
	{
		EnterRule_pointer();
		EnterRule("pointer", 25);
		var retval = new XAstParserRuleReturnScope("pointer");
		
		retval.Start = (IToken)input.LT(1);
		int pointer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal102 = default(IToken);
		IToken char_literal105 = default(IToken);
		IToken char_literal107 = default(IToken);
		XAstParserRuleReturnScope type_qualifier103 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope pointer104 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope pointer106 = default(XAstParserRuleReturnScope);

		object char_literal102_tree = default(object);
		object char_literal105_tree = default(object);
		object char_literal107_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "pointer");
		DebugLocation(235, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// C.g:236:2: ( '*' ( type_qualifier )+ ( pointer )? | '*' pointer | '*' )
			int alt31=3;
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==32))
			{
				switch (input.LA(2))
				{
				case 64:
					{
					int LA31_2 = input.LA(3);

					if ((EvaluatePredicate(synpred57_C_fragment)))
					{
						alt31 = 1;
					}
					else if ((true))
					{
						alt31 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 31, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 32:
					{
					int LA31_3 = input.LA(3);

					if ((EvaluatePredicate(synpred58_C_fragment)))
					{
						alt31 = 2;
					}
					else if ((true))
					{
						alt31 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 31, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case EOF:
				case IDENTIFIER:
				case 30:
				case 31:
				case 37:
				case 46:
				case 47:
				case 52:
				case 59:
				case 63:
				case 65:
				case 68:
				case 73:
				case 75:
				case 76:
				case 77:
				case 81:
				case 82:
				case 83:
				case 85:
				case 86:
				case 88:
				case 89:
				case 91:
				case 92:
				case 93:
				case 94:
				case 97:
					{
					alt31 = 3;
					}
					break;
				case 69:
				case 95:
					{
					int LA31_6 = input.LA(3);

					if ((EvaluatePredicate(synpred57_C_fragment)))
					{
						alt31 = 1;
					}
					else if ((true))
					{
						alt31 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 31, 6, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 31, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 31, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:236:4: '*' ( type_qualifier )+ ( pointer )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(236, 4);
				char_literal102=(IToken)Match(input,32,Follow._32_in_pointer778); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal102_tree = (object)adaptor.Create(char_literal102, retval);
				adaptor.AddChild(root_0, char_literal102_tree);
				}
				DebugLocation(236, 8);
				// C.g:236:8: ( type_qualifier )+
				int cnt29=0;
				try { DebugEnterSubRule(29);
				while (true)
				{
					int alt29=2;
					try { DebugEnterDecision(29, false);
					try
					{
						alt29 = dfa29.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(29); }
					switch (alt29)
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:236:8: type_qualifier
						{
						DebugLocation(236, 8);
						PushFollow(Follow._type_qualifier_in_pointer780);
						type_qualifier103=type_qualifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier103.Tree, type_qualifier103, retval);

						}
						break;

					default:
						if (cnt29 >= 1)
							goto loop29;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee29 = new EarlyExitException( 29, input );
						DebugRecognitionException(eee29);
						throw eee29;
					}
					cnt29++;
				}
				loop29:
					;

				} finally { DebugExitSubRule(29); }

				DebugLocation(236, 24);
				// C.g:236:24: ( pointer )?
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if ((LA30_0==32))
				{
					int LA30_1 = input.LA(2);

					if ((EvaluatePredicate(synpred56_C_fragment)))
					{
						alt30 = 1;
					}
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:236:24: pointer
					{
					DebugLocation(236, 24);
					PushFollow(Follow._pointer_in_pointer783);
					pointer104=pointer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, pointer104.Tree, pointer104, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(30); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:237:4: '*' pointer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(237, 4);
				char_literal105=(IToken)Match(input,32,Follow._32_in_pointer789); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal105_tree = (object)adaptor.Create(char_literal105, retval);
				adaptor.AddChild(root_0, char_literal105_tree);
				}
				DebugLocation(237, 8);
				PushFollow(Follow._pointer_in_pointer791);
				pointer106=pointer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pointer106.Tree, pointer106, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:238:4: '*'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(238, 4);
				char_literal107=(IToken)Match(input,32,Follow._32_in_pointer796); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal107_tree = (object)adaptor.Create(char_literal107, retval);
				adaptor.AddChild(root_0, char_literal107_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pointer", 25);
			LeaveRule("pointer", 25);
			LeaveRule_pointer();
			if (state.backtracking > 0) { Memoize(input, 25, pointer_StartIndex); }

		}
		DebugLocation(239, 1);
		} finally { DebugExitRule(GrammarFileName, "pointer"); }
		return retval;

	}
	// $ANTLR end "pointer"

	partial void EnterRule_parameter_type_list();
	partial void LeaveRule_parameter_type_list();

	// $ANTLR start "parameter_type_list"
	// C.g:241:1: parameter_type_list : parameter_list ( ',' '...' )? ;
	[GrammarRule("parameter_type_list")]
	public XAstParserRuleReturnScope parameter_type_list()
	{
		EnterRule_parameter_type_list();
		EnterRule("parameter_type_list", 26);
		var retval = new XAstParserRuleReturnScope("parameter_type_list");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_type_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal109 = default(IToken);
		IToken string_literal110 = default(IToken);
		XAstParserRuleReturnScope parameter_list108 = default(XAstParserRuleReturnScope);

		object char_literal109_tree = default(object);
		object string_literal110_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parameter_type_list");
		DebugLocation(241, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// C.g:242:2: ( parameter_list ( ',' '...' )? )
			DebugEnterAlt(1);
			// C.g:242:4: parameter_list ( ',' '...' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(242, 4);
			PushFollow(Follow._parameter_list_in_parameter_type_list807);
			parameter_list108=parameter_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_list108.Tree, parameter_list108, retval);
			DebugLocation(242, 19);
			// C.g:242:19: ( ',' '...' )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==37))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:242:20: ',' '...'
				{
				DebugLocation(242, 20);
				char_literal109=(IToken)Match(input,37,Follow._37_in_parameter_type_list810); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal109_tree = (object)adaptor.Create(char_literal109, retval);
				adaptor.AddChild(root_0, char_literal109_tree);
				}
				DebugLocation(242, 24);
				string_literal110=(IToken)Match(input,43,Follow._43_in_parameter_type_list812); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal110_tree = (object)adaptor.Create(string_literal110, retval);
				adaptor.AddChild(root_0, string_literal110_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(32); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_type_list", 26);
			LeaveRule("parameter_type_list", 26);
			LeaveRule_parameter_type_list();
			if (state.backtracking > 0) { Memoize(input, 26, parameter_type_list_StartIndex); }

		}
		DebugLocation(243, 1);
		} finally { DebugExitRule(GrammarFileName, "parameter_type_list"); }
		return retval;

	}
	// $ANTLR end "parameter_type_list"

	partial void EnterRule_parameter_list();
	partial void LeaveRule_parameter_list();

	// $ANTLR start "parameter_list"
	// C.g:245:1: parameter_list : parameter_declaration ( ',' parameter_declaration )* ;
	[GrammarRule("parameter_list")]
	public XAstParserRuleReturnScope parameter_list()
	{
		EnterRule_parameter_list();
		EnterRule("parameter_list", 27);
		var retval = new XAstParserRuleReturnScope("parameter_list");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal112 = default(IToken);
		XAstParserRuleReturnScope parameter_declaration111 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope parameter_declaration113 = default(XAstParserRuleReturnScope);

		object char_literal112_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parameter_list");
		DebugLocation(245, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// C.g:246:2: ( parameter_declaration ( ',' parameter_declaration )* )
			DebugEnterAlt(1);
			// C.g:246:4: parameter_declaration ( ',' parameter_declaration )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(246, 4);
			PushFollow(Follow._parameter_declaration_in_parameter_list825);
			parameter_declaration111=parameter_declaration();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_declaration111.Tree, parameter_declaration111, retval);
			DebugLocation(246, 26);
			// C.g:246:26: ( ',' parameter_declaration )*
			try { DebugEnterSubRule(33);
			while (true)
			{
				int alt33=2;
				try { DebugEnterDecision(33, false);
				int LA33_0 = input.LA(1);

				if ((LA33_0==37))
				{
					int LA33_1 = input.LA(2);

					if ((LA33_1==IDENTIFIER||(LA33_1>=63 && LA33_1<=65)||(LA33_1>=68 && LA33_1<=69)||LA33_1==73||(LA33_1>=75 && LA33_1<=77)||(LA33_1>=81 && LA33_1<=83)||(LA33_1>=85 && LA33_1<=86)||(LA33_1>=88 && LA33_1<=89)||(LA33_1>=92 && LA33_1<=95)))
					{
						alt33 = 1;
					}


				}


				} finally { DebugExitDecision(33); }
				switch ( alt33 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:246:27: ',' parameter_declaration
					{
					DebugLocation(246, 27);
					char_literal112=(IToken)Match(input,37,Follow._37_in_parameter_list828); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal112_tree = (object)adaptor.Create(char_literal112, retval);
					adaptor.AddChild(root_0, char_literal112_tree);
					}
					DebugLocation(246, 31);
					PushFollow(Follow._parameter_declaration_in_parameter_list830);
					parameter_declaration113=parameter_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_declaration113.Tree, parameter_declaration113, retval);

					}
					break;

				default:
					goto loop33;
				}
			}

			loop33:
				;

			} finally { DebugExitSubRule(33); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_list", 27);
			LeaveRule("parameter_list", 27);
			LeaveRule_parameter_list();
			if (state.backtracking > 0) { Memoize(input, 27, parameter_list_StartIndex); }

		}
		DebugLocation(247, 1);
		} finally { DebugExitRule(GrammarFileName, "parameter_list"); }
		return retval;

	}
	// $ANTLR end "parameter_list"

	partial void EnterRule_parameter_declaration();
	partial void LeaveRule_parameter_declaration();

	// $ANTLR start "parameter_declaration"
	// C.g:249:1: parameter_declaration : declaration_specifiers ( declarator | abstract_declarator )* ;
	[GrammarRule("parameter_declaration")]
	public XAstParserRuleReturnScope parameter_declaration()
	{
		EnterRule_parameter_declaration();
		EnterRule("parameter_declaration", 28);
		var retval = new XAstParserRuleReturnScope("parameter_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope declaration_specifiers114 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator115 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator116 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "parameter_declaration");
		DebugLocation(249, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// C.g:250:2: ( declaration_specifiers ( declarator | abstract_declarator )* )
			DebugEnterAlt(1);
			// C.g:250:4: declaration_specifiers ( declarator | abstract_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(250, 4);
			PushFollow(Follow._declaration_specifiers_in_parameter_declaration843);
			declaration_specifiers114=declaration_specifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers114.Tree, declaration_specifiers114, retval);
			DebugLocation(250, 27);
			// C.g:250:27: ( declarator | abstract_declarator )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=3;
				try { DebugEnterDecision(34, false);
				switch (input.LA(1))
				{
				case 32:
					{
					int LA34_4 = input.LA(2);

					if ((EvaluatePredicate(synpred61_C_fragment)))
					{
						alt34 = 1;
					}
					else if ((EvaluatePredicate(synpred62_C_fragment)))
					{
						alt34 = 2;
					}


					}
					break;
				case IDENTIFIER:
					{
					alt34 = 1;
					}
					break;
				case 30:
					{
					switch (input.LA(2))
					{
					case 31:
					case 59:
					case 63:
					case 64:
					case 65:
					case 68:
					case 69:
					case 73:
					case 75:
					case 76:
					case 77:
					case 81:
					case 82:
					case 83:
					case 85:
					case 86:
					case 88:
					case 89:
					case 92:
					case 93:
					case 94:
					case 95:
						{
						alt34 = 2;
						}
						break;
					case 32:
						{
						int LA34_17 = input.LA(3);

						if ((EvaluatePredicate(synpred61_C_fragment)))
						{
							alt34 = 1;
						}
						else if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt34 = 2;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA34_18 = input.LA(3);

						if ((EvaluatePredicate(synpred61_C_fragment)))
						{
							alt34 = 1;
						}
						else if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt34 = 2;
						}


						}
						break;
					case 30:
						{
						int LA34_19 = input.LA(3);

						if ((EvaluatePredicate(synpred61_C_fragment)))
						{
							alt34 = 1;
						}
						else if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt34 = 2;
						}


						}
						break;
					}

					}
					break;
				case 59:
					{
					alt34 = 2;
					}
					break;
				}

				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:250:28: declarator
					{
					DebugLocation(250, 28);
					PushFollow(Follow._declarator_in_parameter_declaration846);
					declarator115=declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declarator115.Tree, declarator115, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:250:39: abstract_declarator
					{
					DebugLocation(250, 39);
					PushFollow(Follow._abstract_declarator_in_parameter_declaration848);
					abstract_declarator116=abstract_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator116.Tree, abstract_declarator116, retval);

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_declaration", 28);
			LeaveRule("parameter_declaration", 28);
			LeaveRule_parameter_declaration();
			if (state.backtracking > 0) { Memoize(input, 28, parameter_declaration_StartIndex); }

		}
		DebugLocation(251, 1);
		} finally { DebugExitRule(GrammarFileName, "parameter_declaration"); }
		return retval;

	}
	// $ANTLR end "parameter_declaration"

	partial void EnterRule_identifier_list();
	partial void LeaveRule_identifier_list();

	// $ANTLR start "identifier_list"
	// C.g:253:1: identifier_list : IDENTIFIER ( ',' IDENTIFIER )* ;
	[GrammarRule("identifier_list")]
	public XAstParserRuleReturnScope identifier_list()
	{
		EnterRule_identifier_list();
		EnterRule("identifier_list", 29);
		var retval = new XAstParserRuleReturnScope("identifier_list");
		
		retval.Start = (IToken)input.LT(1);
		int identifier_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER117 = default(IToken);
		IToken char_literal118 = default(IToken);
		IToken IDENTIFIER119 = default(IToken);

		object IDENTIFIER117_tree = default(object);
		object char_literal118_tree = default(object);
		object IDENTIFIER119_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "identifier_list");
		DebugLocation(253, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// C.g:254:2: ( IDENTIFIER ( ',' IDENTIFIER )* )
			DebugEnterAlt(1);
			// C.g:254:4: IDENTIFIER ( ',' IDENTIFIER )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(254, 4);
			IDENTIFIER117=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifier_list861), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER117_tree = (object)adaptor.Create(IDENTIFIER117, retval);
			adaptor.AddChild(root_0, IDENTIFIER117_tree);
			}
			DebugLocation(254, 15);
			// C.g:254:15: ( ',' IDENTIFIER )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				int LA35_0 = input.LA(1);

				if ((LA35_0==37))
				{
					alt35 = 1;
				}


				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:254:16: ',' IDENTIFIER
					{
					DebugLocation(254, 16);
					char_literal118=(IToken)Match(input,37,Follow._37_in_identifier_list864); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal118_tree = (object)adaptor.Create(char_literal118, retval);
					adaptor.AddChild(root_0, char_literal118_tree);
					}
					DebugLocation(254, 20);
					IDENTIFIER119=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifier_list866), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER119_tree = (object)adaptor.Create(IDENTIFIER119, retval);
					adaptor.AddChild(root_0, IDENTIFIER119_tree);
					}

					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("identifier_list", 29);
			LeaveRule("identifier_list", 29);
			LeaveRule_identifier_list();
			if (state.backtracking > 0) { Memoize(input, 29, identifier_list_StartIndex); }

		}
		DebugLocation(255, 1);
		} finally { DebugExitRule(GrammarFileName, "identifier_list"); }
		return retval;

	}
	// $ANTLR end "identifier_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// C.g:257:1: type_name : specifier_qualifier_list ( abstract_declarator )? ;
	[GrammarRule("type_name")]
	public XAstParserRuleReturnScope type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 30);
		var retval = new XAstParserRuleReturnScope("type_name");
		
		retval.Start = (IToken)input.LT(1);
		int type_name_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope specifier_qualifier_list120 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator121 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(257, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// C.g:258:2: ( specifier_qualifier_list ( abstract_declarator )? )
			DebugEnterAlt(1);
			// C.g:258:4: specifier_qualifier_list ( abstract_declarator )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(258, 4);
			PushFollow(Follow._specifier_qualifier_list_in_type_name879);
			specifier_qualifier_list120=specifier_qualifier_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, specifier_qualifier_list120.Tree, specifier_qualifier_list120, retval);
			DebugLocation(258, 29);
			// C.g:258:29: ( abstract_declarator )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==30||LA36_0==32||LA36_0==59))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:258:29: abstract_declarator
				{
				DebugLocation(258, 29);
				PushFollow(Follow._abstract_declarator_in_type_name881);
				abstract_declarator121=abstract_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator121.Tree, abstract_declarator121, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(36); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 30);
			LeaveRule("type_name", 30);
			LeaveRule_type_name();
			if (state.backtracking > 0) { Memoize(input, 30, type_name_StartIndex); }

		}
		DebugLocation(259, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_abstract_declarator();
	partial void LeaveRule_abstract_declarator();

	// $ANTLR start "abstract_declarator"
	// C.g:261:1: abstract_declarator : ( pointer ( direct_abstract_declarator )? | direct_abstract_declarator );
	[GrammarRule("abstract_declarator")]
	public XAstParserRuleReturnScope abstract_declarator()
	{
		EnterRule_abstract_declarator();
		EnterRule("abstract_declarator", 31);
		var retval = new XAstParserRuleReturnScope("abstract_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int abstract_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope pointer122 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope direct_abstract_declarator123 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope direct_abstract_declarator124 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "abstract_declarator");
		DebugLocation(261, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// C.g:262:2: ( pointer ( direct_abstract_declarator )? | direct_abstract_declarator )
			int alt38=2;
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==32))
			{
				alt38 = 1;
			}
			else if ((LA38_0==30||LA38_0==59))
			{
				alt38 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:262:4: pointer ( direct_abstract_declarator )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(262, 4);
				PushFollow(Follow._pointer_in_abstract_declarator893);
				pointer122=pointer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pointer122.Tree, pointer122, retval);
				DebugLocation(262, 12);
				// C.g:262:12: ( direct_abstract_declarator )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==30))
				{
					switch (input.LA(2))
					{
					case 31:
						{
						int LA37_8 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case 32:
						{
						int LA37_9 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case 30:
						{
						int LA37_10 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case 59:
						{
						int LA37_11 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case 65:
					case 76:
					case 83:
					case 88:
						{
						int LA37_12 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case 94:
						{
						int LA37_13 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case 68:
						{
						int LA37_14 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case 85:
						{
						int LA37_15 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case 81:
						{
						int LA37_16 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case 82:
						{
						int LA37_17 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case 77:
						{
						int LA37_18 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case 73:
						{
						int LA37_19 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case 86:
						{
						int LA37_20 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case 93:
						{
						int LA37_21 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case 63:
						{
						int LA37_22 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case 89:
					case 92:
						{
						int LA37_23 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case 75:
						{
						int LA37_24 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case IDENTIFIER:
						{
						int LA37_25 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case 64:
					case 69:
					case 95:
						{
						int LA37_26 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					}

				}
				else if ((LA37_0==59))
				{
					switch (input.LA(2))
					{
					case 60:
						{
						int LA37_27 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case 30:
						{
						int LA37_28 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case IDENTIFIER:
						{
						int LA37_29 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case HEX_LITERAL:
						{
						int LA37_30 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case OCTAL_LITERAL:
						{
						int LA37_31 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case DECIMAL_LITERAL:
						{
						int LA37_32 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case CHARACTER_LITERAL:
						{
						int LA37_33 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case STRING_LITERAL:
						{
						int LA37_34 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case FLOATING_POINT_LITERAL:
						{
						int LA37_35 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case 35:
						{
						int LA37_36 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case 39:
						{
						int LA37_37 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case 23:
					case 28:
					case 32:
					case 34:
					case 38:
					case 102:
						{
						int LA37_38 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					case 87:
						{
						int LA37_39 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt37 = 1;
						}
						}
						break;
					}

				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:262:12: direct_abstract_declarator
					{
					DebugLocation(262, 12);
					PushFollow(Follow._direct_abstract_declarator_in_abstract_declarator895);
					direct_abstract_declarator123=direct_abstract_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, direct_abstract_declarator123.Tree, direct_abstract_declarator123, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(37); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:263:4: direct_abstract_declarator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(263, 4);
				PushFollow(Follow._direct_abstract_declarator_in_abstract_declarator901);
				direct_abstract_declarator124=direct_abstract_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, direct_abstract_declarator124.Tree, direct_abstract_declarator124, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("abstract_declarator", 31);
			LeaveRule("abstract_declarator", 31);
			LeaveRule_abstract_declarator();
			if (state.backtracking > 0) { Memoize(input, 31, abstract_declarator_StartIndex); }

		}
		DebugLocation(264, 1);
		} finally { DebugExitRule(GrammarFileName, "abstract_declarator"); }
		return retval;

	}
	// $ANTLR end "abstract_declarator"

	partial void EnterRule_direct_abstract_declarator();
	partial void LeaveRule_direct_abstract_declarator();

	// $ANTLR start "direct_abstract_declarator"
	// C.g:266:1: direct_abstract_declarator : ( '(' abstract_declarator ')' | abstract_declarator_suffix ) ( abstract_declarator_suffix )* ;
	[GrammarRule("direct_abstract_declarator")]
	public XAstParserRuleReturnScope direct_abstract_declarator()
	{
		EnterRule_direct_abstract_declarator();
		EnterRule("direct_abstract_declarator", 32);
		var retval = new XAstParserRuleReturnScope("direct_abstract_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int direct_abstract_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal125 = default(IToken);
		IToken char_literal127 = default(IToken);
		XAstParserRuleReturnScope abstract_declarator126 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator_suffix128 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator_suffix129 = default(XAstParserRuleReturnScope);

		object char_literal125_tree = default(object);
		object char_literal127_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "direct_abstract_declarator");
		DebugLocation(266, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// C.g:267:2: ( ( '(' abstract_declarator ')' | abstract_declarator_suffix ) ( abstract_declarator_suffix )* )
			DebugEnterAlt(1);
			// C.g:267:4: ( '(' abstract_declarator ')' | abstract_declarator_suffix ) ( abstract_declarator_suffix )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(267, 4);
			// C.g:267:4: ( '(' abstract_declarator ')' | abstract_declarator_suffix )
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==30))
			{
				int LA39_1 = input.LA(2);

				if ((LA39_1==IDENTIFIER||LA39_1==31||(LA39_1>=63 && LA39_1<=65)||(LA39_1>=68 && LA39_1<=69)||LA39_1==73||(LA39_1>=75 && LA39_1<=77)||(LA39_1>=81 && LA39_1<=83)||(LA39_1>=85 && LA39_1<=86)||(LA39_1>=88 && LA39_1<=89)||(LA39_1>=92 && LA39_1<=95)))
				{
					alt39 = 2;
				}
				else if ((LA39_1==30||LA39_1==32||LA39_1==59))
				{
					alt39 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA39_0==59))
			{
				alt39 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:267:6: '(' abstract_declarator ')'
				{
				DebugLocation(267, 6);
				char_literal125=(IToken)Match(input,30,Follow._30_in_direct_abstract_declarator914); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal125_tree = (object)adaptor.Create(char_literal125, retval);
				adaptor.AddChild(root_0, char_literal125_tree);
				}
				DebugLocation(267, 10);
				PushFollow(Follow._abstract_declarator_in_direct_abstract_declarator916);
				abstract_declarator126=abstract_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator126.Tree, abstract_declarator126, retval);
				DebugLocation(267, 30);
				char_literal127=(IToken)Match(input,31,Follow._31_in_direct_abstract_declarator918); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal127_tree = (object)adaptor.Create(char_literal127, retval);
				adaptor.AddChild(root_0, char_literal127_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:267:36: abstract_declarator_suffix
				{
				DebugLocation(267, 36);
				PushFollow(Follow._abstract_declarator_suffix_in_direct_abstract_declarator922);
				abstract_declarator_suffix128=abstract_declarator_suffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator_suffix128.Tree, abstract_declarator_suffix128, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(267, 65);
			// C.g:267:65: ( abstract_declarator_suffix )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if ((LA40_0==30))
				{
					switch (input.LA(2))
					{
					case 31:
						{
						int LA40_8 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA40_10 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case 65:
					case 76:
					case 83:
					case 88:
						{
						int LA40_13 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case 94:
						{
						int LA40_14 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case 68:
						{
						int LA40_15 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case 85:
						{
						int LA40_16 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case 81:
						{
						int LA40_17 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case 82:
						{
						int LA40_18 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case 77:
						{
						int LA40_19 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case 73:
						{
						int LA40_20 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case 86:
						{
						int LA40_21 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case 93:
						{
						int LA40_22 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case 63:
						{
						int LA40_23 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case 89:
					case 92:
						{
						int LA40_24 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case 75:
						{
						int LA40_25 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case 64:
					case 69:
					case 95:
						{
						int LA40_26 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					}

				}
				else if ((LA40_0==59))
				{
					switch (input.LA(2))
					{
					case 60:
						{
						int LA40_27 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case 30:
						{
						int LA40_28 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA40_29 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case HEX_LITERAL:
						{
						int LA40_30 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case OCTAL_LITERAL:
						{
						int LA40_31 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case DECIMAL_LITERAL:
						{
						int LA40_32 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case CHARACTER_LITERAL:
						{
						int LA40_33 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case STRING_LITERAL:
						{
						int LA40_34 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case FLOATING_POINT_LITERAL:
						{
						int LA40_35 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case 35:
						{
						int LA40_36 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case 39:
						{
						int LA40_37 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case 23:
					case 28:
					case 32:
					case 34:
					case 38:
					case 102:
						{
						int LA40_38 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					case 87:
						{
						int LA40_39 = input.LA(3);

						if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt40 = 1;
						}


						}
						break;
					}

				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:267:65: abstract_declarator_suffix
					{
					DebugLocation(267, 65);
					PushFollow(Follow._abstract_declarator_suffix_in_direct_abstract_declarator926);
					abstract_declarator_suffix129=abstract_declarator_suffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator_suffix129.Tree, abstract_declarator_suffix129, retval);

					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("direct_abstract_declarator", 32);
			LeaveRule("direct_abstract_declarator", 32);
			LeaveRule_direct_abstract_declarator();
			if (state.backtracking > 0) { Memoize(input, 32, direct_abstract_declarator_StartIndex); }

		}
		DebugLocation(268, 1);
		} finally { DebugExitRule(GrammarFileName, "direct_abstract_declarator"); }
		return retval;

	}
	// $ANTLR end "direct_abstract_declarator"

	partial void EnterRule_abstract_declarator_suffix();
	partial void LeaveRule_abstract_declarator_suffix();

	// $ANTLR start "abstract_declarator_suffix"
	// C.g:270:1: abstract_declarator_suffix : ( '[' ']' | '[' constant_expression ']' | '(' ')' | '(' parameter_type_list ')' );
	[GrammarRule("abstract_declarator_suffix")]
	public XAstParserRuleReturnScope abstract_declarator_suffix()
	{
		EnterRule_abstract_declarator_suffix();
		EnterRule("abstract_declarator_suffix", 33);
		var retval = new XAstParserRuleReturnScope("abstract_declarator_suffix");
		
		retval.Start = (IToken)input.LT(1);
		int abstract_declarator_suffix_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal130 = default(IToken);
		IToken char_literal131 = default(IToken);
		IToken char_literal132 = default(IToken);
		IToken char_literal134 = default(IToken);
		IToken char_literal135 = default(IToken);
		IToken char_literal136 = default(IToken);
		IToken char_literal137 = default(IToken);
		IToken char_literal139 = default(IToken);
		XAstParserRuleReturnScope constant_expression133 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope parameter_type_list138 = default(XAstParserRuleReturnScope);

		object char_literal130_tree = default(object);
		object char_literal131_tree = default(object);
		object char_literal132_tree = default(object);
		object char_literal134_tree = default(object);
		object char_literal135_tree = default(object);
		object char_literal136_tree = default(object);
		object char_literal137_tree = default(object);
		object char_literal139_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "abstract_declarator_suffix");
		DebugLocation(270, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// C.g:271:2: ( '[' ']' | '[' constant_expression ']' | '(' ')' | '(' parameter_type_list ')' )
			int alt41=4;
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==59))
			{
				int LA41_1 = input.LA(2);

				if ((LA41_1==60))
				{
					alt41 = 1;
				}
				else if ((LA41_1==CHARACTER_LITERAL||LA41_1==DECIMAL_LITERAL||LA41_1==FLOATING_POINT_LITERAL||LA41_1==HEX_LITERAL||LA41_1==IDENTIFIER||LA41_1==OCTAL_LITERAL||LA41_1==STRING_LITERAL||LA41_1==23||LA41_1==28||LA41_1==30||LA41_1==32||(LA41_1>=34 && LA41_1<=35)||(LA41_1>=38 && LA41_1<=39)||LA41_1==87||LA41_1==102))
				{
					alt41 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 41, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA41_0==30))
			{
				int LA41_2 = input.LA(2);

				if ((LA41_2==31))
				{
					alt41 = 3;
				}
				else if ((LA41_2==IDENTIFIER||(LA41_2>=63 && LA41_2<=65)||(LA41_2>=68 && LA41_2<=69)||LA41_2==73||(LA41_2>=75 && LA41_2<=77)||(LA41_2>=81 && LA41_2<=83)||(LA41_2>=85 && LA41_2<=86)||(LA41_2>=88 && LA41_2<=89)||(LA41_2>=92 && LA41_2<=95)))
				{
					alt41 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 41, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 41, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:271:4: '[' ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(271, 4);
				char_literal130=(IToken)Match(input,59,Follow._59_in_abstract_declarator_suffix938); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal130_tree = (object)adaptor.Create(char_literal130, retval);
				adaptor.AddChild(root_0, char_literal130_tree);
				}
				DebugLocation(271, 8);
				char_literal131=(IToken)Match(input,60,Follow._60_in_abstract_declarator_suffix940); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal131_tree = (object)adaptor.Create(char_literal131, retval);
				adaptor.AddChild(root_0, char_literal131_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:272:4: '[' constant_expression ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(272, 4);
				char_literal132=(IToken)Match(input,59,Follow._59_in_abstract_declarator_suffix945); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal132_tree = (object)adaptor.Create(char_literal132, retval);
				adaptor.AddChild(root_0, char_literal132_tree);
				}
				DebugLocation(272, 8);
				PushFollow(Follow._constant_expression_in_abstract_declarator_suffix947);
				constant_expression133=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression133.Tree, constant_expression133, retval);
				DebugLocation(272, 28);
				char_literal134=(IToken)Match(input,60,Follow._60_in_abstract_declarator_suffix949); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal134_tree = (object)adaptor.Create(char_literal134, retval);
				adaptor.AddChild(root_0, char_literal134_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:273:4: '(' ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(273, 4);
				char_literal135=(IToken)Match(input,30,Follow._30_in_abstract_declarator_suffix954); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal135_tree = (object)adaptor.Create(char_literal135, retval);
				adaptor.AddChild(root_0, char_literal135_tree);
				}
				DebugLocation(273, 8);
				char_literal136=(IToken)Match(input,31,Follow._31_in_abstract_declarator_suffix956); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal136_tree = (object)adaptor.Create(char_literal136, retval);
				adaptor.AddChild(root_0, char_literal136_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:274:4: '(' parameter_type_list ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(274, 4);
				char_literal137=(IToken)Match(input,30,Follow._30_in_abstract_declarator_suffix961); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal137_tree = (object)adaptor.Create(char_literal137, retval);
				adaptor.AddChild(root_0, char_literal137_tree);
				}
				DebugLocation(274, 8);
				PushFollow(Follow._parameter_type_list_in_abstract_declarator_suffix963);
				parameter_type_list138=parameter_type_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_type_list138.Tree, parameter_type_list138, retval);
				DebugLocation(274, 28);
				char_literal139=(IToken)Match(input,31,Follow._31_in_abstract_declarator_suffix965); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal139_tree = (object)adaptor.Create(char_literal139, retval);
				adaptor.AddChild(root_0, char_literal139_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("abstract_declarator_suffix", 33);
			LeaveRule("abstract_declarator_suffix", 33);
			LeaveRule_abstract_declarator_suffix();
			if (state.backtracking > 0) { Memoize(input, 33, abstract_declarator_suffix_StartIndex); }

		}
		DebugLocation(275, 1);
		} finally { DebugExitRule(GrammarFileName, "abstract_declarator_suffix"); }
		return retval;

	}
	// $ANTLR end "abstract_declarator_suffix"

	partial void EnterRule_initializer();
	partial void LeaveRule_initializer();

	// $ANTLR start "initializer"
	// C.g:277:1: initializer : ( assignment_expression | '{' initializer_list ( ',' )? '}' );
	[GrammarRule("initializer")]
	public XAstParserRuleReturnScope initializer()
	{
		EnterRule_initializer();
		EnterRule("initializer", 34);
		var retval = new XAstParserRuleReturnScope("initializer");
		
		retval.Start = (IToken)input.LT(1);
		int initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal141 = default(IToken);
		IToken char_literal143 = default(IToken);
		IToken char_literal144 = default(IToken);
		XAstParserRuleReturnScope assignment_expression140 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope initializer_list142 = default(XAstParserRuleReturnScope);

		object char_literal141_tree = default(object);
		object char_literal143_tree = default(object);
		object char_literal144_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "initializer");
		DebugLocation(277, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// C.g:278:2: ( assignment_expression | '{' initializer_list ( ',' )? '}' )
			int alt43=2;
			try { DebugEnterDecision(43, false);
			int LA43_0 = input.LA(1);

			if ((LA43_0==CHARACTER_LITERAL||LA43_0==DECIMAL_LITERAL||LA43_0==FLOATING_POINT_LITERAL||LA43_0==HEX_LITERAL||LA43_0==IDENTIFIER||LA43_0==OCTAL_LITERAL||LA43_0==STRING_LITERAL||LA43_0==23||LA43_0==28||LA43_0==30||LA43_0==32||(LA43_0>=34 && LA43_0<=35)||(LA43_0>=38 && LA43_0<=39)||LA43_0==87||LA43_0==102))
			{
				alt43 = 1;
			}
			else if ((LA43_0==97))
			{
				alt43 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 43, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:278:4: assignment_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(278, 4);
				PushFollow(Follow._assignment_expression_in_initializer977);
				assignment_expression140=assignment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression140.Tree, assignment_expression140, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:279:4: '{' initializer_list ( ',' )? '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(279, 4);
				char_literal141=(IToken)Match(input,97,Follow._97_in_initializer982); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal141_tree = (object)adaptor.Create(char_literal141, retval);
				adaptor.AddChild(root_0, char_literal141_tree);
				}
				DebugLocation(279, 8);
				PushFollow(Follow._initializer_list_in_initializer984);
				initializer_list142=initializer_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, initializer_list142.Tree, initializer_list142, retval);
				DebugLocation(279, 25);
				// C.g:279:25: ( ',' )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				int LA42_0 = input.LA(1);

				if ((LA42_0==37))
				{
					alt42 = 1;
				}
				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:279:25: ','
					{
					DebugLocation(279, 25);
					char_literal143=(IToken)Match(input,37,Follow._37_in_initializer986); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal143_tree = (object)adaptor.Create(char_literal143, retval);
					adaptor.AddChild(root_0, char_literal143_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(42); }

				DebugLocation(279, 30);
				char_literal144=(IToken)Match(input,101,Follow._101_in_initializer989); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal144_tree = (object)adaptor.Create(char_literal144, retval);
				adaptor.AddChild(root_0, char_literal144_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("initializer", 34);
			LeaveRule("initializer", 34);
			LeaveRule_initializer();
			if (state.backtracking > 0) { Memoize(input, 34, initializer_StartIndex); }

		}
		DebugLocation(280, 1);
		} finally { DebugExitRule(GrammarFileName, "initializer"); }
		return retval;

	}
	// $ANTLR end "initializer"

	partial void EnterRule_initializer_list();
	partial void LeaveRule_initializer_list();

	// $ANTLR start "initializer_list"
	// C.g:282:1: initializer_list : initializer ( ',' initializer )* ;
	[GrammarRule("initializer_list")]
	public XAstParserRuleReturnScope initializer_list()
	{
		EnterRule_initializer_list();
		EnterRule("initializer_list", 35);
		var retval = new XAstParserRuleReturnScope("initializer_list");
		
		retval.Start = (IToken)input.LT(1);
		int initializer_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal146 = default(IToken);
		XAstParserRuleReturnScope initializer145 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope initializer147 = default(XAstParserRuleReturnScope);

		object char_literal146_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "initializer_list");
		DebugLocation(282, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// C.g:283:2: ( initializer ( ',' initializer )* )
			DebugEnterAlt(1);
			// C.g:283:4: initializer ( ',' initializer )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(283, 4);
			PushFollow(Follow._initializer_in_initializer_list1000);
			initializer145=initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, initializer145.Tree, initializer145, retval);
			DebugLocation(283, 16);
			// C.g:283:16: ( ',' initializer )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==37))
				{
					int LA44_1 = input.LA(2);

					if ((LA44_1==CHARACTER_LITERAL||LA44_1==DECIMAL_LITERAL||LA44_1==FLOATING_POINT_LITERAL||LA44_1==HEX_LITERAL||LA44_1==IDENTIFIER||LA44_1==OCTAL_LITERAL||LA44_1==STRING_LITERAL||LA44_1==23||LA44_1==28||LA44_1==30||LA44_1==32||(LA44_1>=34 && LA44_1<=35)||(LA44_1>=38 && LA44_1<=39)||LA44_1==87||LA44_1==97||LA44_1==102))
					{
						alt44 = 1;
					}


				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:283:17: ',' initializer
					{
					DebugLocation(283, 17);
					char_literal146=(IToken)Match(input,37,Follow._37_in_initializer_list1003); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal146_tree = (object)adaptor.Create(char_literal146, retval);
					adaptor.AddChild(root_0, char_literal146_tree);
					}
					DebugLocation(283, 21);
					PushFollow(Follow._initializer_in_initializer_list1005);
					initializer147=initializer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, initializer147.Tree, initializer147, retval);

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("initializer_list", 35);
			LeaveRule("initializer_list", 35);
			LeaveRule_initializer_list();
			if (state.backtracking > 0) { Memoize(input, 35, initializer_list_StartIndex); }

		}
		DebugLocation(284, 1);
		} finally { DebugExitRule(GrammarFileName, "initializer_list"); }
		return retval;

	}
	// $ANTLR end "initializer_list"

	partial void EnterRule_argument_expression_list();
	partial void LeaveRule_argument_expression_list();

	// $ANTLR start "argument_expression_list"
	// C.g:288:1: argument_expression_list : assignment_expression ( ',' assignment_expression )* ;
	[GrammarRule("argument_expression_list")]
	public XAstParserRuleReturnScope argument_expression_list()
	{
		EnterRule_argument_expression_list();
		EnterRule("argument_expression_list", 36);
		var retval = new XAstParserRuleReturnScope("argument_expression_list");
		
		retval.Start = (IToken)input.LT(1);
		int argument_expression_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal149 = default(IToken);
		XAstParserRuleReturnScope assignment_expression148 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression150 = default(XAstParserRuleReturnScope);

		object char_literal149_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "argument_expression_list");
		DebugLocation(288, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// C.g:289:2: ( assignment_expression ( ',' assignment_expression )* )
			DebugEnterAlt(1);
			// C.g:289:6: assignment_expression ( ',' assignment_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(289, 6);
			PushFollow(Follow._assignment_expression_in_argument_expression_list1022);
			assignment_expression148=assignment_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression148.Tree, assignment_expression148, retval);
			DebugLocation(289, 28);
			// C.g:289:28: ( ',' assignment_expression )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==37))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:289:29: ',' assignment_expression
					{
					DebugLocation(289, 29);
					char_literal149=(IToken)Match(input,37,Follow._37_in_argument_expression_list1025); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal149_tree = (object)adaptor.Create(char_literal149, retval);
					adaptor.AddChild(root_0, char_literal149_tree);
					}
					DebugLocation(289, 33);
					PushFollow(Follow._assignment_expression_in_argument_expression_list1027);
					assignment_expression150=assignment_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression150.Tree, assignment_expression150, retval);

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("argument_expression_list", 36);
			LeaveRule("argument_expression_list", 36);
			LeaveRule_argument_expression_list();
			if (state.backtracking > 0) { Memoize(input, 36, argument_expression_list_StartIndex); }

		}
		DebugLocation(290, 1);
		} finally { DebugExitRule(GrammarFileName, "argument_expression_list"); }
		return retval;

	}
	// $ANTLR end "argument_expression_list"

	partial void EnterRule_additive_expression();
	partial void LeaveRule_additive_expression();

	// $ANTLR start "additive_expression"
	// C.g:292:1: additive_expression : ( multiplicative_expression ) ( '+' multiplicative_expression | '-' multiplicative_expression )* ;
	[GrammarRule("additive_expression")]
	public XAstParserRuleReturnScope additive_expression()
	{
		EnterRule_additive_expression();
		EnterRule("additive_expression", 37);
		var retval = new XAstParserRuleReturnScope("additive_expression");
		
		retval.Start = (IToken)input.LT(1);
		int additive_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal152 = default(IToken);
		IToken char_literal154 = default(IToken);
		XAstParserRuleReturnScope multiplicative_expression151 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope multiplicative_expression153 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope multiplicative_expression155 = default(XAstParserRuleReturnScope);

		object char_literal152_tree = default(object);
		object char_literal154_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "additive_expression");
		DebugLocation(292, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// C.g:293:2: ( ( multiplicative_expression ) ( '+' multiplicative_expression | '-' multiplicative_expression )* )
			DebugEnterAlt(1);
			// C.g:293:4: ( multiplicative_expression ) ( '+' multiplicative_expression | '-' multiplicative_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(293, 4);
			// C.g:293:4: ( multiplicative_expression )
			DebugEnterAlt(1);
			// C.g:293:5: multiplicative_expression
			{
			DebugLocation(293, 5);
			PushFollow(Follow._multiplicative_expression_in_additive_expression1041);
			multiplicative_expression151=multiplicative_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression151.Tree, multiplicative_expression151, retval);

			}

			DebugLocation(293, 32);
			// C.g:293:32: ( '+' multiplicative_expression | '-' multiplicative_expression )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=3;
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==34))
				{
					alt46 = 1;
				}
				else if ((LA46_0==38))
				{
					alt46 = 2;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:293:33: '+' multiplicative_expression
					{
					DebugLocation(293, 33);
					char_literal152=(IToken)Match(input,34,Follow._34_in_additive_expression1045); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal152_tree = (object)adaptor.Create(char_literal152, retval);
					adaptor.AddChild(root_0, char_literal152_tree);
					}
					DebugLocation(293, 37);
					PushFollow(Follow._multiplicative_expression_in_additive_expression1047);
					multiplicative_expression153=multiplicative_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression153.Tree, multiplicative_expression153, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:293:65: '-' multiplicative_expression
					{
					DebugLocation(293, 65);
					char_literal154=(IToken)Match(input,38,Follow._38_in_additive_expression1051); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal154_tree = (object)adaptor.Create(char_literal154, retval);
					adaptor.AddChild(root_0, char_literal154_tree);
					}
					DebugLocation(293, 69);
					PushFollow(Follow._multiplicative_expression_in_additive_expression1053);
					multiplicative_expression155=multiplicative_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression155.Tree, multiplicative_expression155, retval);

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additive_expression", 37);
			LeaveRule("additive_expression", 37);
			LeaveRule_additive_expression();
			if (state.backtracking > 0) { Memoize(input, 37, additive_expression_StartIndex); }

		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "additive_expression"); }
		return retval;

	}
	// $ANTLR end "additive_expression"

	partial void EnterRule_multiplicative_expression();
	partial void LeaveRule_multiplicative_expression();

	// $ANTLR start "multiplicative_expression"
	// C.g:296:1: multiplicative_expression : ( cast_expression ) ( '*' cast_expression | '/' cast_expression | '%' cast_expression )* ;
	[GrammarRule("multiplicative_expression")]
	public XAstParserRuleReturnScope multiplicative_expression()
	{
		EnterRule_multiplicative_expression();
		EnterRule("multiplicative_expression", 38);
		var retval = new XAstParserRuleReturnScope("multiplicative_expression");
		
		retval.Start = (IToken)input.LT(1);
		int multiplicative_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal157 = default(IToken);
		IToken char_literal159 = default(IToken);
		IToken char_literal161 = default(IToken);
		XAstParserRuleReturnScope cast_expression156 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression158 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression160 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression162 = default(XAstParserRuleReturnScope);

		object char_literal157_tree = default(object);
		object char_literal159_tree = default(object);
		object char_literal161_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "multiplicative_expression");
		DebugLocation(296, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// C.g:297:2: ( ( cast_expression ) ( '*' cast_expression | '/' cast_expression | '%' cast_expression )* )
			DebugEnterAlt(1);
			// C.g:297:4: ( cast_expression ) ( '*' cast_expression | '/' cast_expression | '%' cast_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(297, 4);
			// C.g:297:4: ( cast_expression )
			DebugEnterAlt(1);
			// C.g:297:5: cast_expression
			{
			DebugLocation(297, 5);
			PushFollow(Follow._cast_expression_in_multiplicative_expression1067);
			cast_expression156=cast_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression156.Tree, cast_expression156, retval);

			}

			DebugLocation(297, 22);
			// C.g:297:22: ( '*' cast_expression | '/' cast_expression | '%' cast_expression )*
			try { DebugEnterSubRule(47);
			while (true)
			{
				int alt47=4;
				try { DebugEnterDecision(47, false);
				switch (input.LA(1))
				{
				case 32:
					{
					alt47 = 1;
					}
					break;
				case 44:
					{
					alt47 = 2;
					}
					break;
				case 25:
					{
					alt47 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(47); }
				switch ( alt47 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:297:23: '*' cast_expression
					{
					DebugLocation(297, 23);
					char_literal157=(IToken)Match(input,32,Follow._32_in_multiplicative_expression1071); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal157_tree = (object)adaptor.Create(char_literal157, retval);
					adaptor.AddChild(root_0, char_literal157_tree);
					}
					DebugLocation(297, 27);
					PushFollow(Follow._cast_expression_in_multiplicative_expression1073);
					cast_expression158=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression158.Tree, cast_expression158, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:297:45: '/' cast_expression
					{
					DebugLocation(297, 45);
					char_literal159=(IToken)Match(input,44,Follow._44_in_multiplicative_expression1077); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal159_tree = (object)adaptor.Create(char_literal159, retval);
					adaptor.AddChild(root_0, char_literal159_tree);
					}
					DebugLocation(297, 49);
					PushFollow(Follow._cast_expression_in_multiplicative_expression1079);
					cast_expression160=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression160.Tree, cast_expression160, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C.g:297:67: '%' cast_expression
					{
					DebugLocation(297, 67);
					char_literal161=(IToken)Match(input,25,Follow._25_in_multiplicative_expression1083); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal161_tree = (object)adaptor.Create(char_literal161, retval);
					adaptor.AddChild(root_0, char_literal161_tree);
					}
					DebugLocation(297, 71);
					PushFollow(Follow._cast_expression_in_multiplicative_expression1085);
					cast_expression162=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression162.Tree, cast_expression162, retval);

					}
					break;

				default:
					goto loop47;
				}
			}

			loop47:
				;

			} finally { DebugExitSubRule(47); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicative_expression", 38);
			LeaveRule("multiplicative_expression", 38);
			LeaveRule_multiplicative_expression();
			if (state.backtracking > 0) { Memoize(input, 38, multiplicative_expression_StartIndex); }

		}
		DebugLocation(298, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicative_expression"); }
		return retval;

	}
	// $ANTLR end "multiplicative_expression"

	partial void EnterRule_cast_expression();
	partial void LeaveRule_cast_expression();

	// $ANTLR start "cast_expression"
	// C.g:300:1: cast_expression : ( '(' type_name ')' cast_expression | unary_expression );
	[GrammarRule("cast_expression")]
	public XAstParserRuleReturnScope cast_expression()
	{
		EnterRule_cast_expression();
		EnterRule("cast_expression", 39);
		var retval = new XAstParserRuleReturnScope("cast_expression");
		
		retval.Start = (IToken)input.LT(1);
		int cast_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal163 = default(IToken);
		IToken char_literal165 = default(IToken);
		XAstParserRuleReturnScope type_name164 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression166 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression167 = default(XAstParserRuleReturnScope);

		object char_literal163_tree = default(object);
		object char_literal165_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "cast_expression");
		DebugLocation(300, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// C.g:301:2: ( '(' type_name ')' cast_expression | unary_expression )
			int alt48=2;
			try { DebugEnterDecision(48, false);
			int LA48_0 = input.LA(1);

			if ((LA48_0==30))
			{
				switch (input.LA(2))
				{
				case 63:
				case 64:
				case 68:
				case 69:
				case 73:
				case 75:
				case 77:
				case 81:
				case 82:
				case 85:
				case 86:
				case 89:
				case 92:
				case 93:
				case 94:
				case 95:
					{
					alt48 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA48_26 = input.LA(3);

					if ((EvaluatePredicate(synpred81_C_fragment)))
					{
						alt48 = 1;
					}
					else if ((true))
					{
						alt48 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 48, 26, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case CHARACTER_LITERAL:
				case DECIMAL_LITERAL:
				case FLOATING_POINT_LITERAL:
				case HEX_LITERAL:
				case OCTAL_LITERAL:
				case STRING_LITERAL:
				case 23:
				case 28:
				case 30:
				case 32:
				case 34:
				case 35:
				case 38:
				case 39:
				case 87:
				case 102:
					{
					alt48 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 48, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA48_0==CHARACTER_LITERAL||LA48_0==DECIMAL_LITERAL||LA48_0==FLOATING_POINT_LITERAL||LA48_0==HEX_LITERAL||LA48_0==IDENTIFIER||LA48_0==OCTAL_LITERAL||LA48_0==STRING_LITERAL||LA48_0==23||LA48_0==28||LA48_0==32||(LA48_0>=34 && LA48_0<=35)||(LA48_0>=38 && LA48_0<=39)||LA48_0==87||LA48_0==102))
			{
				alt48 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:301:4: '(' type_name ')' cast_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(301, 4);
				char_literal163=(IToken)Match(input,30,Follow._30_in_cast_expression1098); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal163_tree = (object)adaptor.Create(char_literal163, retval);
				adaptor.AddChild(root_0, char_literal163_tree);
				}
				DebugLocation(301, 8);
				PushFollow(Follow._type_name_in_cast_expression1100);
				type_name164=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_name164.Tree, type_name164, retval);
				DebugLocation(301, 18);
				char_literal165=(IToken)Match(input,31,Follow._31_in_cast_expression1102); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal165_tree = (object)adaptor.Create(char_literal165, retval);
				adaptor.AddChild(root_0, char_literal165_tree);
				}
				DebugLocation(301, 22);
				PushFollow(Follow._cast_expression_in_cast_expression1104);
				cast_expression166=cast_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression166.Tree, cast_expression166, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:302:4: unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(302, 4);
				PushFollow(Follow._unary_expression_in_cast_expression1109);
				unary_expression167=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression167.Tree, unary_expression167, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expression", 39);
			LeaveRule("cast_expression", 39);
			LeaveRule_cast_expression();
			if (state.backtracking > 0) { Memoize(input, 39, cast_expression_StartIndex); }

		}
		DebugLocation(303, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expression"); }
		return retval;

	}
	// $ANTLR end "cast_expression"

	partial void EnterRule_unary_expression();
	partial void LeaveRule_unary_expression();

	// $ANTLR start "unary_expression"
	// C.g:305:1: unary_expression : ( postfix_expression | '++' unary_expression | '--' unary_expression | unary_operator cast_expression | 'sizeof' unary_expression | 'sizeof' '(' type_name ')' );
	[GrammarRule("unary_expression")]
	public XAstParserRuleReturnScope unary_expression()
	{
		EnterRule_unary_expression();
		EnterRule("unary_expression", 40);
		var retval = new XAstParserRuleReturnScope("unary_expression");
		
		retval.Start = (IToken)input.LT(1);
		int unary_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal169 = default(IToken);
		IToken string_literal171 = default(IToken);
		IToken string_literal175 = default(IToken);
		IToken string_literal177 = default(IToken);
		IToken char_literal178 = default(IToken);
		IToken char_literal180 = default(IToken);
		XAstParserRuleReturnScope postfix_expression168 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression170 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression172 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_operator173 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression174 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression176 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name179 = default(XAstParserRuleReturnScope);

		object string_literal169_tree = default(object);
		object string_literal171_tree = default(object);
		object string_literal175_tree = default(object);
		object string_literal177_tree = default(object);
		object char_literal178_tree = default(object);
		object char_literal180_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unary_expression");
		DebugLocation(305, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// C.g:306:2: ( postfix_expression | '++' unary_expression | '--' unary_expression | unary_operator cast_expression | 'sizeof' unary_expression | 'sizeof' '(' type_name ')' )
			int alt49=6;
			try { DebugEnterDecision(49, false);
			switch (input.LA(1))
			{
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENTIFIER:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
			case 30:
				{
				alt49 = 1;
				}
				break;
			case 35:
				{
				alt49 = 2;
				}
				break;
			case 39:
				{
				alt49 = 3;
				}
				break;
			case 23:
			case 28:
			case 32:
			case 34:
			case 38:
			case 102:
				{
				alt49 = 4;
				}
				break;
			case 87:
				{
				int LA49_12 = input.LA(2);

				if ((LA49_12==30))
				{
					int LA49_13 = input.LA(3);

					if ((EvaluatePredicate(synpred86_C_fragment)))
					{
						alt49 = 5;
					}
					else if ((true))
					{
						alt49 = 6;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 49, 13, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA49_12==CHARACTER_LITERAL||LA49_12==DECIMAL_LITERAL||LA49_12==FLOATING_POINT_LITERAL||LA49_12==HEX_LITERAL||LA49_12==IDENTIFIER||LA49_12==OCTAL_LITERAL||LA49_12==STRING_LITERAL||LA49_12==23||LA49_12==28||LA49_12==32||(LA49_12>=34 && LA49_12<=35)||(LA49_12>=38 && LA49_12<=39)||LA49_12==87||LA49_12==102))
				{
					alt49 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 12, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:306:4: postfix_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(306, 4);
				PushFollow(Follow._postfix_expression_in_unary_expression1120);
				postfix_expression168=postfix_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, postfix_expression168.Tree, postfix_expression168, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:307:4: '++' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(307, 4);
				string_literal169=(IToken)Match(input,35,Follow._35_in_unary_expression1125); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal169_tree = (object)adaptor.Create(string_literal169, retval);
				adaptor.AddChild(root_0, string_literal169_tree);
				}
				DebugLocation(307, 9);
				PushFollow(Follow._unary_expression_in_unary_expression1127);
				unary_expression170=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression170.Tree, unary_expression170, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:308:4: '--' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(308, 4);
				string_literal171=(IToken)Match(input,39,Follow._39_in_unary_expression1132); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal171_tree = (object)adaptor.Create(string_literal171, retval);
				adaptor.AddChild(root_0, string_literal171_tree);
				}
				DebugLocation(308, 9);
				PushFollow(Follow._unary_expression_in_unary_expression1134);
				unary_expression172=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression172.Tree, unary_expression172, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:309:4: unary_operator cast_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(309, 4);
				PushFollow(Follow._unary_operator_in_unary_expression1139);
				unary_operator173=unary_operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_operator173.Tree, unary_operator173, retval);
				DebugLocation(309, 19);
				PushFollow(Follow._cast_expression_in_unary_expression1141);
				cast_expression174=cast_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression174.Tree, cast_expression174, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:310:4: 'sizeof' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(310, 4);
				string_literal175=(IToken)Match(input,87,Follow._87_in_unary_expression1146); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal175_tree = (object)adaptor.Create(string_literal175, retval);
				adaptor.AddChild(root_0, string_literal175_tree);
				}
				DebugLocation(310, 13);
				PushFollow(Follow._unary_expression_in_unary_expression1148);
				unary_expression176=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression176.Tree, unary_expression176, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:311:4: 'sizeof' '(' type_name ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(311, 4);
				string_literal177=(IToken)Match(input,87,Follow._87_in_unary_expression1153); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal177_tree = (object)adaptor.Create(string_literal177, retval);
				adaptor.AddChild(root_0, string_literal177_tree);
				}
				DebugLocation(311, 13);
				char_literal178=(IToken)Match(input,30,Follow._30_in_unary_expression1155); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal178_tree = (object)adaptor.Create(char_literal178, retval);
				adaptor.AddChild(root_0, char_literal178_tree);
				}
				DebugLocation(311, 17);
				PushFollow(Follow._type_name_in_unary_expression1157);
				type_name179=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_name179.Tree, type_name179, retval);
				DebugLocation(311, 27);
				char_literal180=(IToken)Match(input,31,Follow._31_in_unary_expression1159); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal180_tree = (object)adaptor.Create(char_literal180, retval);
				adaptor.AddChild(root_0, char_literal180_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_expression", 40);
			LeaveRule("unary_expression", 40);
			LeaveRule_unary_expression();
			if (state.backtracking > 0) { Memoize(input, 40, unary_expression_StartIndex); }

		}
		DebugLocation(312, 1);
		} finally { DebugExitRule(GrammarFileName, "unary_expression"); }
		return retval;

	}
	// $ANTLR end "unary_expression"

	partial void EnterRule_postfix_expression();
	partial void LeaveRule_postfix_expression();

	// $ANTLR start "postfix_expression"
	// C.g:314:1: postfix_expression : primary_expression ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )* ;
	[GrammarRule("postfix_expression")]
	public XAstParserRuleReturnScope postfix_expression()
	{
		EnterRule_postfix_expression();
		EnterRule("postfix_expression", 41);
		var retval = new XAstParserRuleReturnScope("postfix_expression");
		
		retval.Start = (IToken)input.LT(1);
		int postfix_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal182 = default(IToken);
		IToken char_literal184 = default(IToken);
		IToken char_literal185 = default(IToken);
		IToken char_literal186 = default(IToken);
		IToken char_literal187 = default(IToken);
		IToken char_literal189 = default(IToken);
		IToken char_literal190 = default(IToken);
		IToken IDENTIFIER191 = default(IToken);
		IToken string_literal192 = default(IToken);
		IToken IDENTIFIER193 = default(IToken);
		IToken string_literal194 = default(IToken);
		IToken string_literal195 = default(IToken);
		XAstParserRuleReturnScope primary_expression181 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression183 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope argument_expression_list188 = default(XAstParserRuleReturnScope);

		object char_literal182_tree = default(object);
		object char_literal184_tree = default(object);
		object char_literal185_tree = default(object);
		object char_literal186_tree = default(object);
		object char_literal187_tree = default(object);
		object char_literal189_tree = default(object);
		object char_literal190_tree = default(object);
		object IDENTIFIER191_tree = default(object);
		object string_literal192_tree = default(object);
		object IDENTIFIER193_tree = default(object);
		object string_literal194_tree = default(object);
		object string_literal195_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "postfix_expression");
		DebugLocation(314, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// C.g:315:2: ( primary_expression ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )* )
			DebugEnterAlt(1);
			// C.g:315:6: primary_expression ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(315, 6);
			PushFollow(Follow._primary_expression_in_postfix_expression1172);
			primary_expression181=primary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression181.Tree, primary_expression181, retval);
			DebugLocation(316, 3);
			// C.g:316:3: ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )*
			try { DebugEnterSubRule(50);
			while (true)
			{
				int alt50=8;
				try { DebugEnterDecision(50, false);
				switch (input.LA(1))
				{
				case 59:
					{
					alt50 = 1;
					}
					break;
				case 30:
					{
					int LA50_24 = input.LA(2);

					if ((LA50_24==31))
					{
						alt50 = 2;
					}
					else if ((LA50_24==CHARACTER_LITERAL||LA50_24==DECIMAL_LITERAL||LA50_24==FLOATING_POINT_LITERAL||LA50_24==HEX_LITERAL||LA50_24==IDENTIFIER||LA50_24==OCTAL_LITERAL||LA50_24==STRING_LITERAL||LA50_24==23||LA50_24==28||LA50_24==30||LA50_24==32||(LA50_24>=34 && LA50_24<=35)||(LA50_24>=38 && LA50_24<=39)||LA50_24==87||LA50_24==102))
					{
						alt50 = 3;
					}


					}
					break;
				case 42:
					{
					alt50 = 4;
					}
					break;
				case 41:
					{
					alt50 = 5;
					}
					break;
				case 35:
					{
					alt50 = 6;
					}
					break;
				case 39:
					{
					alt50 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(50); }
				switch ( alt50 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:316:7: '[' expression ']'
					{
					DebugLocation(316, 7);
					char_literal182=(IToken)Match(input,59,Follow._59_in_postfix_expression1180); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal182_tree = (object)adaptor.Create(char_literal182, retval);
					adaptor.AddChild(root_0, char_literal182_tree);
					}
					DebugLocation(316, 11);
					PushFollow(Follow._expression_in_postfix_expression1182);
					expression183=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression183.Tree, expression183, retval);
					DebugLocation(316, 22);
					char_literal184=(IToken)Match(input,60,Follow._60_in_postfix_expression1184); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal184_tree = (object)adaptor.Create(char_literal184, retval);
					adaptor.AddChild(root_0, char_literal184_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:317:7: '(' ')'
					{
					DebugLocation(317, 7);
					char_literal185=(IToken)Match(input,30,Follow._30_in_postfix_expression1192); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal185_tree = (object)adaptor.Create(char_literal185, retval);
					adaptor.AddChild(root_0, char_literal185_tree);
					}
					DebugLocation(317, 11);
					char_literal186=(IToken)Match(input,31,Follow._31_in_postfix_expression1194); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal186_tree = (object)adaptor.Create(char_literal186, retval);
					adaptor.AddChild(root_0, char_literal186_tree);
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C.g:318:7: '(' argument_expression_list ')'
					{
					DebugLocation(318, 7);
					char_literal187=(IToken)Match(input,30,Follow._30_in_postfix_expression1202); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal187_tree = (object)adaptor.Create(char_literal187, retval);
					adaptor.AddChild(root_0, char_literal187_tree);
					}
					DebugLocation(318, 11);
					PushFollow(Follow._argument_expression_list_in_postfix_expression1204);
					argument_expression_list188=argument_expression_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, argument_expression_list188.Tree, argument_expression_list188, retval);
					DebugLocation(318, 36);
					char_literal189=(IToken)Match(input,31,Follow._31_in_postfix_expression1206); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal189_tree = (object)adaptor.Create(char_literal189, retval);
					adaptor.AddChild(root_0, char_literal189_tree);
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C.g:319:7: '.' IDENTIFIER
					{
					DebugLocation(319, 7);
					char_literal190=(IToken)Match(input,42,Follow._42_in_postfix_expression1214); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal190_tree = (object)adaptor.Create(char_literal190, retval);
					adaptor.AddChild(root_0, char_literal190_tree);
					}
					DebugLocation(319, 11);
					IDENTIFIER191=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_postfix_expression1216), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER191_tree = (object)adaptor.Create(IDENTIFIER191, retval);
					adaptor.AddChild(root_0, IDENTIFIER191_tree);
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// C.g:320:7: '->' IDENTIFIER
					{
					DebugLocation(320, 7);
					string_literal192=(IToken)Match(input,41,Follow._41_in_postfix_expression1224); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal192_tree = (object)adaptor.Create(string_literal192, retval);
					adaptor.AddChild(root_0, string_literal192_tree);
					}
					DebugLocation(320, 12);
					IDENTIFIER193=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_postfix_expression1226), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER193_tree = (object)adaptor.Create(IDENTIFIER193, retval);
					adaptor.AddChild(root_0, IDENTIFIER193_tree);
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// C.g:321:7: '++'
					{
					DebugLocation(321, 7);
					string_literal194=(IToken)Match(input,35,Follow._35_in_postfix_expression1234); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal194_tree = (object)adaptor.Create(string_literal194, retval);
					adaptor.AddChild(root_0, string_literal194_tree);
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// C.g:322:7: '--'
					{
					DebugLocation(322, 7);
					string_literal195=(IToken)Match(input,39,Follow._39_in_postfix_expression1242); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal195_tree = (object)adaptor.Create(string_literal195, retval);
					adaptor.AddChild(root_0, string_literal195_tree);
					}

					}
					break;

				default:
					goto loop50;
				}
			}

			loop50:
				;

			} finally { DebugExitSubRule(50); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("postfix_expression", 41);
			LeaveRule("postfix_expression", 41);
			LeaveRule_postfix_expression();
			if (state.backtracking > 0) { Memoize(input, 41, postfix_expression_StartIndex); }

		}
		DebugLocation(324, 1);
		} finally { DebugExitRule(GrammarFileName, "postfix_expression"); }
		return retval;

	}
	// $ANTLR end "postfix_expression"

	partial void EnterRule_unary_operator();
	partial void LeaveRule_unary_operator();

	// $ANTLR start "unary_operator"
	// C.g:326:1: unary_operator : ( '&' | '*' | '+' | '-' | '~' | '!' );
	[GrammarRule("unary_operator")]
	public XAstParserRuleReturnScope unary_operator()
	{
		EnterRule_unary_operator();
		EnterRule("unary_operator", 42);
		var retval = new XAstParserRuleReturnScope("unary_operator");
		
		retval.Start = (IToken)input.LT(1);
		int unary_operator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set196 = default(IToken);

		object set196_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unary_operator");
		DebugLocation(326, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// C.g:327:2: ( '&' | '*' | '+' | '-' | '~' | '!' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(327, 2);

			set196=(IToken)input.LT(1);
			if (input.LA(1)==23||input.LA(1)==28||input.LA(1)==32||input.LA(1)==34||input.LA(1)==38||input.LA(1)==102)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set196, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_operator", 42);
			LeaveRule("unary_operator", 42);
			LeaveRule_unary_operator();
			if (state.backtracking > 0) { Memoize(input, 42, unary_operator_StartIndex); }

		}
		DebugLocation(333, 1);
		} finally { DebugExitRule(GrammarFileName, "unary_operator"); }
		return retval;

	}
	// $ANTLR end "unary_operator"

	partial void EnterRule_primary_expression();
	partial void LeaveRule_primary_expression();

	// $ANTLR start "primary_expression"
	// C.g:335:1: primary_expression : ( IDENTIFIER | constant | '(' expression ')' );
	[GrammarRule("primary_expression")]
	public XAstParserRuleReturnScope primary_expression()
	{
		EnterRule_primary_expression();
		EnterRule("primary_expression", 43);
		var retval = new XAstParserRuleReturnScope("primary_expression");
		
		retval.Start = (IToken)input.LT(1);
		int primary_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER197 = default(IToken);
		IToken char_literal199 = default(IToken);
		IToken char_literal201 = default(IToken);
		XAstParserRuleReturnScope constant198 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression200 = default(XAstParserRuleReturnScope);

		object IDENTIFIER197_tree = default(object);
		object char_literal199_tree = default(object);
		object char_literal201_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primary_expression");
		DebugLocation(335, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// C.g:336:2: ( IDENTIFIER | constant | '(' expression ')' )
			int alt51=3;
			try { DebugEnterDecision(51, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				alt51 = 1;
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
				{
				alt51 = 2;
				}
				break;
			case 30:
				{
				alt51 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:336:4: IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(336, 4);
				IDENTIFIER197=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primary_expression1294), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER197_tree = (object)adaptor.Create(IDENTIFIER197, retval);
				adaptor.AddChild(root_0, IDENTIFIER197_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:337:4: constant
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(337, 4);
				PushFollow(Follow._constant_in_primary_expression1299);
				constant198=constant();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant198.Tree, constant198, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:338:4: '(' expression ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(338, 4);
				char_literal199=(IToken)Match(input,30,Follow._30_in_primary_expression1304); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal199_tree = (object)adaptor.Create(char_literal199, retval);
				adaptor.AddChild(root_0, char_literal199_tree);
				}
				DebugLocation(338, 8);
				PushFollow(Follow._expression_in_primary_expression1306);
				expression200=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression200.Tree, expression200, retval);
				DebugLocation(338, 19);
				char_literal201=(IToken)Match(input,31,Follow._31_in_primary_expression1308); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal201_tree = (object)adaptor.Create(char_literal201, retval);
				adaptor.AddChild(root_0, char_literal201_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_expression", 43);
			LeaveRule("primary_expression", 43);
			LeaveRule_primary_expression();
			if (state.backtracking > 0) { Memoize(input, 43, primary_expression_StartIndex); }

		}
		DebugLocation(339, 1);
		} finally { DebugExitRule(GrammarFileName, "primary_expression"); }
		return retval;

	}
	// $ANTLR end "primary_expression"

	partial void EnterRule_constant();
	partial void LeaveRule_constant();

	// $ANTLR start "constant"
	// C.g:341:1: constant : ( hex_literal | octal_literal | decimal_literal | character_literal | string_literal | floating_point_literal );
	[GrammarRule("constant")]
	public XAstParserRuleReturnScope constant()
	{
		EnterRule_constant();
		EnterRule("constant", 44);
		var retval = new XAstParserRuleReturnScope("constant");
		
		retval.Start = (IToken)input.LT(1);
		int constant_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope hex_literal202 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope octal_literal203 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope decimal_literal204 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope character_literal205 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope string_literal206 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope floating_point_literal207 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(341, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// C.g:342:2: ( hex_literal | octal_literal | decimal_literal | character_literal | string_literal | floating_point_literal )
			int alt52=6;
			try { DebugEnterDecision(52, false);
			switch (input.LA(1))
			{
			case HEX_LITERAL:
				{
				alt52 = 1;
				}
				break;
			case OCTAL_LITERAL:
				{
				alt52 = 2;
				}
				break;
			case DECIMAL_LITERAL:
				{
				alt52 = 3;
				}
				break;
			case CHARACTER_LITERAL:
				{
				alt52 = 4;
				}
				break;
			case STRING_LITERAL:
				{
				alt52 = 5;
				}
				break;
			case FLOATING_POINT_LITERAL:
				{
				alt52 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 52, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:342:6: hex_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(342, 6);
				PushFollow(Follow._hex_literal_in_constant1321);
				hex_literal202=hex_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, hex_literal202.Tree, hex_literal202, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:343:6: octal_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(343, 6);
				PushFollow(Follow._octal_literal_in_constant1328);
				octal_literal203=octal_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, octal_literal203.Tree, octal_literal203, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:344:6: decimal_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(344, 6);
				PushFollow(Follow._decimal_literal_in_constant1335);
				decimal_literal204=decimal_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, decimal_literal204.Tree, decimal_literal204, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:345:6: character_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(345, 6);
				PushFollow(Follow._character_literal_in_constant1342);
				character_literal205=character_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, character_literal205.Tree, character_literal205, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:346:6: string_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(346, 6);
				PushFollow(Follow._string_literal_in_constant1349);
				string_literal206=string_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, string_literal206.Tree, string_literal206, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:347:6: floating_point_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(347, 6);
				PushFollow(Follow._floating_point_literal_in_constant1356);
				floating_point_literal207=floating_point_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, floating_point_literal207.Tree, floating_point_literal207, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant", 44);
			LeaveRule("constant", 44);
			LeaveRule_constant();
			if (state.backtracking > 0) { Memoize(input, 44, constant_StartIndex); }

		}
		DebugLocation(348, 1);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"

	partial void EnterRule_hex_literal();
	partial void LeaveRule_hex_literal();

	// $ANTLR start "hex_literal"
	// C.g:350:1: hex_literal : HEX_LITERAL ;
	[GrammarRule("hex_literal")]
	public XAstParserRuleReturnScope hex_literal()
	{
		EnterRule_hex_literal();
		EnterRule("hex_literal", 45);
		var retval = new XAstParserRuleReturnScope("hex_literal");
		
		retval.Start = (IToken)input.LT(1);
		int hex_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken HEX_LITERAL208 = default(IToken);

		object HEX_LITERAL208_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "hex_literal");
		DebugLocation(350, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// C.g:351:2: ( HEX_LITERAL )
			DebugEnterAlt(1);
			// C.g:351:4: HEX_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(351, 4);
			HEX_LITERAL208=(IToken)new XToken((IToken)Match(input,HEX_LITERAL,Follow._HEX_LITERAL_in_hex_literal1367), "HEX_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			HEX_LITERAL208_tree = (object)adaptor.Create(HEX_LITERAL208, retval);
			adaptor.AddChild(root_0, HEX_LITERAL208_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("hex_literal", 45);
			LeaveRule("hex_literal", 45);
			LeaveRule_hex_literal();
			if (state.backtracking > 0) { Memoize(input, 45, hex_literal_StartIndex); }

		}
		DebugLocation(352, 1);
		} finally { DebugExitRule(GrammarFileName, "hex_literal"); }
		return retval;

	}
	// $ANTLR end "hex_literal"

	partial void EnterRule_octal_literal();
	partial void LeaveRule_octal_literal();

	// $ANTLR start "octal_literal"
	// C.g:354:1: octal_literal : OCTAL_LITERAL ;
	[GrammarRule("octal_literal")]
	public XAstParserRuleReturnScope octal_literal()
	{
		EnterRule_octal_literal();
		EnterRule("octal_literal", 46);
		var retval = new XAstParserRuleReturnScope("octal_literal");
		
		retval.Start = (IToken)input.LT(1);
		int octal_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OCTAL_LITERAL209 = default(IToken);

		object OCTAL_LITERAL209_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "octal_literal");
		DebugLocation(354, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// C.g:355:2: ( OCTAL_LITERAL )
			DebugEnterAlt(1);
			// C.g:355:4: OCTAL_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(355, 4);
			OCTAL_LITERAL209=(IToken)new XToken((IToken)Match(input,OCTAL_LITERAL,Follow._OCTAL_LITERAL_in_octal_literal1378), "OCTAL_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OCTAL_LITERAL209_tree = (object)adaptor.Create(OCTAL_LITERAL209, retval);
			adaptor.AddChild(root_0, OCTAL_LITERAL209_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("octal_literal", 46);
			LeaveRule("octal_literal", 46);
			LeaveRule_octal_literal();
			if (state.backtracking > 0) { Memoize(input, 46, octal_literal_StartIndex); }

		}
		DebugLocation(356, 1);
		} finally { DebugExitRule(GrammarFileName, "octal_literal"); }
		return retval;

	}
	// $ANTLR end "octal_literal"

	partial void EnterRule_decimal_literal();
	partial void LeaveRule_decimal_literal();

	// $ANTLR start "decimal_literal"
	// C.g:358:1: decimal_literal : DECIMAL_LITERAL ;
	[GrammarRule("decimal_literal")]
	public XAstParserRuleReturnScope decimal_literal()
	{
		EnterRule_decimal_literal();
		EnterRule("decimal_literal", 47);
		var retval = new XAstParserRuleReturnScope("decimal_literal");
		
		retval.Start = (IToken)input.LT(1);
		int decimal_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken DECIMAL_LITERAL210 = default(IToken);

		object DECIMAL_LITERAL210_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "decimal_literal");
		DebugLocation(358, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// C.g:359:2: ( DECIMAL_LITERAL )
			DebugEnterAlt(1);
			// C.g:359:4: DECIMAL_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(359, 4);
			DECIMAL_LITERAL210=(IToken)new XToken((IToken)Match(input,DECIMAL_LITERAL,Follow._DECIMAL_LITERAL_in_decimal_literal1389), "DECIMAL_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DECIMAL_LITERAL210_tree = (object)adaptor.Create(DECIMAL_LITERAL210, retval);
			adaptor.AddChild(root_0, DECIMAL_LITERAL210_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("decimal_literal", 47);
			LeaveRule("decimal_literal", 47);
			LeaveRule_decimal_literal();
			if (state.backtracking > 0) { Memoize(input, 47, decimal_literal_StartIndex); }

		}
		DebugLocation(360, 1);
		} finally { DebugExitRule(GrammarFileName, "decimal_literal"); }
		return retval;

	}
	// $ANTLR end "decimal_literal"

	partial void EnterRule_character_literal();
	partial void LeaveRule_character_literal();

	// $ANTLR start "character_literal"
	// C.g:362:1: character_literal : CHARACTER_LITERAL ;
	[GrammarRule("character_literal")]
	public XAstParserRuleReturnScope character_literal()
	{
		EnterRule_character_literal();
		EnterRule("character_literal", 48);
		var retval = new XAstParserRuleReturnScope("character_literal");
		
		retval.Start = (IToken)input.LT(1);
		int character_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken CHARACTER_LITERAL211 = default(IToken);

		object CHARACTER_LITERAL211_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "character_literal");
		DebugLocation(362, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// C.g:363:2: ( CHARACTER_LITERAL )
			DebugEnterAlt(1);
			// C.g:363:4: CHARACTER_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(363, 4);
			CHARACTER_LITERAL211=(IToken)new XToken((IToken)Match(input,CHARACTER_LITERAL,Follow._CHARACTER_LITERAL_in_character_literal1400), "CHARACTER_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CHARACTER_LITERAL211_tree = (object)adaptor.Create(CHARACTER_LITERAL211, retval);
			adaptor.AddChild(root_0, CHARACTER_LITERAL211_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("character_literal", 48);
			LeaveRule("character_literal", 48);
			LeaveRule_character_literal();
			if (state.backtracking > 0) { Memoize(input, 48, character_literal_StartIndex); }

		}
		DebugLocation(364, 1);
		} finally { DebugExitRule(GrammarFileName, "character_literal"); }
		return retval;

	}
	// $ANTLR end "character_literal"

	partial void EnterRule_string_literal();
	partial void LeaveRule_string_literal();

	// $ANTLR start "string_literal"
	// C.g:366:1: string_literal : STRING_LITERAL ;
	[GrammarRule("string_literal")]
	public XAstParserRuleReturnScope string_literal()
	{
		EnterRule_string_literal();
		EnterRule("string_literal", 49);
		var retval = new XAstParserRuleReturnScope("string_literal");
		
		retval.Start = (IToken)input.LT(1);
		int string_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken STRING_LITERAL212 = default(IToken);

		object STRING_LITERAL212_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "string_literal");
		DebugLocation(366, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// C.g:367:2: ( STRING_LITERAL )
			DebugEnterAlt(1);
			// C.g:367:4: STRING_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(367, 4);
			STRING_LITERAL212=(IToken)new XToken((IToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_string_literal1411), "STRING_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING_LITERAL212_tree = (object)adaptor.Create(STRING_LITERAL212, retval);
			adaptor.AddChild(root_0, STRING_LITERAL212_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("string_literal", 49);
			LeaveRule("string_literal", 49);
			LeaveRule_string_literal();
			if (state.backtracking > 0) { Memoize(input, 49, string_literal_StartIndex); }

		}
		DebugLocation(368, 1);
		} finally { DebugExitRule(GrammarFileName, "string_literal"); }
		return retval;

	}
	// $ANTLR end "string_literal"

	partial void EnterRule_floating_point_literal();
	partial void LeaveRule_floating_point_literal();

	// $ANTLR start "floating_point_literal"
	// C.g:370:1: floating_point_literal : FLOATING_POINT_LITERAL ;
	[GrammarRule("floating_point_literal")]
	public XAstParserRuleReturnScope floating_point_literal()
	{
		EnterRule_floating_point_literal();
		EnterRule("floating_point_literal", 50);
		var retval = new XAstParserRuleReturnScope("floating_point_literal");
		
		retval.Start = (IToken)input.LT(1);
		int floating_point_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken FLOATING_POINT_LITERAL213 = default(IToken);

		object FLOATING_POINT_LITERAL213_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "floating_point_literal");
		DebugLocation(370, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// C.g:371:2: ( FLOATING_POINT_LITERAL )
			DebugEnterAlt(1);
			// C.g:371:4: FLOATING_POINT_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(371, 4);
			FLOATING_POINT_LITERAL213=(IToken)new XToken((IToken)Match(input,FLOATING_POINT_LITERAL,Follow._FLOATING_POINT_LITERAL_in_floating_point_literal1422), "FLOATING_POINT_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			FLOATING_POINT_LITERAL213_tree = (object)adaptor.Create(FLOATING_POINT_LITERAL213, retval);
			adaptor.AddChild(root_0, FLOATING_POINT_LITERAL213_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("floating_point_literal", 50);
			LeaveRule("floating_point_literal", 50);
			LeaveRule_floating_point_literal();
			if (state.backtracking > 0) { Memoize(input, 50, floating_point_literal_StartIndex); }

		}
		DebugLocation(372, 1);
		} finally { DebugExitRule(GrammarFileName, "floating_point_literal"); }
		return retval;

	}
	// $ANTLR end "floating_point_literal"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();

	// $ANTLR start "expression"
	// C.g:376:1: expression : assignment_expression ( ',' assignment_expression )* ;
	[GrammarRule("expression")]
	public XAstParserRuleReturnScope expression()
	{
		EnterRule_expression();
		EnterRule("expression", 51);
		var retval = new XAstParserRuleReturnScope("expression");
		
		retval.Start = (IToken)input.LT(1);
		int expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal215 = default(IToken);
		XAstParserRuleReturnScope assignment_expression214 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression216 = default(XAstParserRuleReturnScope);

		object char_literal215_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(376, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// C.g:377:2: ( assignment_expression ( ',' assignment_expression )* )
			DebugEnterAlt(1);
			// C.g:377:4: assignment_expression ( ',' assignment_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(377, 4);
			PushFollow(Follow._assignment_expression_in_expression1435);
			assignment_expression214=assignment_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression214.Tree, assignment_expression214, retval);
			DebugLocation(377, 26);
			// C.g:377:26: ( ',' assignment_expression )*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==37))
				{
					alt53 = 1;
				}


				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:377:27: ',' assignment_expression
					{
					DebugLocation(377, 27);
					char_literal215=(IToken)Match(input,37,Follow._37_in_expression1438); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal215_tree = (object)adaptor.Create(char_literal215, retval);
					adaptor.AddChild(root_0, char_literal215_tree);
					}
					DebugLocation(377, 31);
					PushFollow(Follow._assignment_expression_in_expression1440);
					assignment_expression216=assignment_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression216.Tree, assignment_expression216, retval);

					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 51);
			LeaveRule("expression", 51);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 51, expression_StartIndex); }

		}
		DebugLocation(378, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_constant_expression();
	partial void LeaveRule_constant_expression();

	// $ANTLR start "constant_expression"
	// C.g:380:1: constant_expression : conditional_expression ;
	[GrammarRule("constant_expression")]
	public XAstParserRuleReturnScope constant_expression()
	{
		EnterRule_constant_expression();
		EnterRule("constant_expression", 52);
		var retval = new XAstParserRuleReturnScope("constant_expression");
		
		retval.Start = (IToken)input.LT(1);
		int constant_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope conditional_expression217 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "constant_expression");
		DebugLocation(380, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// C.g:381:2: ( conditional_expression )
			DebugEnterAlt(1);
			// C.g:381:4: conditional_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(381, 4);
			PushFollow(Follow._conditional_expression_in_constant_expression1453);
			conditional_expression217=conditional_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression217.Tree, conditional_expression217, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant_expression", 52);
			LeaveRule("constant_expression", 52);
			LeaveRule_constant_expression();
			if (state.backtracking > 0) { Memoize(input, 52, constant_expression_StartIndex); }

		}
		DebugLocation(382, 1);
		} finally { DebugExitRule(GrammarFileName, "constant_expression"); }
		return retval;

	}
	// $ANTLR end "constant_expression"

	partial void EnterRule_assignment_expression();
	partial void LeaveRule_assignment_expression();

	// $ANTLR start "assignment_expression"
	// C.g:384:1: assignment_expression : ( lvalue assignment_operator assignment_expression | conditional_expression );
	[GrammarRule("assignment_expression")]
	public XAstParserRuleReturnScope assignment_expression()
	{
		EnterRule_assignment_expression();
		EnterRule("assignment_expression", 53);
		var retval = new XAstParserRuleReturnScope("assignment_expression");
		
		retval.Start = (IToken)input.LT(1);
		int assignment_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope lvalue218 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_operator219 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression220 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conditional_expression221 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "assignment_expression");
		DebugLocation(384, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// C.g:385:2: ( lvalue assignment_operator assignment_expression | conditional_expression )
			int alt54=2;
			try { DebugEnterDecision(54, false);
			try
			{
				alt54 = dfa54.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:385:4: lvalue assignment_operator assignment_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(385, 4);
				PushFollow(Follow._lvalue_in_assignment_expression1464);
				lvalue218=lvalue();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue218.Tree, lvalue218, retval);
				DebugLocation(385, 11);
				PushFollow(Follow._assignment_operator_in_assignment_expression1466);
				assignment_operator219=assignment_operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_operator219.Tree, assignment_operator219, retval);
				DebugLocation(385, 31);
				PushFollow(Follow._assignment_expression_in_assignment_expression1468);
				assignment_expression220=assignment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression220.Tree, assignment_expression220, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:386:4: conditional_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(386, 4);
				PushFollow(Follow._conditional_expression_in_assignment_expression1473);
				conditional_expression221=conditional_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression221.Tree, conditional_expression221, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment_expression", 53);
			LeaveRule("assignment_expression", 53);
			LeaveRule_assignment_expression();
			if (state.backtracking > 0) { Memoize(input, 53, assignment_expression_StartIndex); }

		}
		DebugLocation(387, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment_expression"); }
		return retval;

	}
	// $ANTLR end "assignment_expression"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// C.g:389:1: lvalue : unary_expression ;
	[GrammarRule("lvalue")]
	public XAstParserRuleReturnScope lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 54);
		var retval = new XAstParserRuleReturnScope("lvalue");
		
		retval.Start = (IToken)input.LT(1);
		int lvalue_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope unary_expression222 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(389, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// C.g:390:2: ( unary_expression )
			DebugEnterAlt(1);
			// C.g:390:4: unary_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(390, 4);
			PushFollow(Follow._unary_expression_in_lvalue1485);
			unary_expression222=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression222.Tree, unary_expression222, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 54);
			LeaveRule("lvalue", 54);
			LeaveRule_lvalue();
			if (state.backtracking > 0) { Memoize(input, 54, lvalue_StartIndex); }

		}
		DebugLocation(391, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_assignment_operator();
	partial void LeaveRule_assignment_operator();

	// $ANTLR start "assignment_operator"
	// C.g:393:1: assignment_operator : ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' );
	[GrammarRule("assignment_operator")]
	public XAstParserRuleReturnScope assignment_operator()
	{
		EnterRule_assignment_operator();
		EnterRule("assignment_operator", 55);
		var retval = new XAstParserRuleReturnScope("assignment_operator");
		
		retval.Start = (IToken)input.LT(1);
		int assignment_operator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set223 = default(IToken);

		object set223_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assignment_operator");
		DebugLocation(393, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// C.g:394:2: ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(394, 2);

			set223=(IToken)input.LT(1);
			if (input.LA(1)==26||input.LA(1)==29||input.LA(1)==33||input.LA(1)==36||input.LA(1)==40||input.LA(1)==45||input.LA(1)==50||input.LA(1)==52||input.LA(1)==57||input.LA(1)==62||input.LA(1)==99)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set223, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment_operator", 55);
			LeaveRule("assignment_operator", 55);
			LeaveRule_assignment_operator();
			if (state.backtracking > 0) { Memoize(input, 55, assignment_operator_StartIndex); }

		}
		DebugLocation(405, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment_operator"); }
		return retval;

	}
	// $ANTLR end "assignment_operator"

	partial void EnterRule_conditional_expression();
	partial void LeaveRule_conditional_expression();

	// $ANTLR start "conditional_expression"
	// C.g:407:1: conditional_expression : logical_or_expression ( '?' expression ':' conditional_expression )? ;
	[GrammarRule("conditional_expression")]
	public XAstParserRuleReturnScope conditional_expression()
	{
		EnterRule_conditional_expression();
		EnterRule("conditional_expression", 56);
		var retval = new XAstParserRuleReturnScope("conditional_expression");
		
		retval.Start = (IToken)input.LT(1);
		int conditional_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal225 = default(IToken);
		IToken char_literal227 = default(IToken);
		XAstParserRuleReturnScope logical_or_expression224 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression226 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conditional_expression228 = default(XAstParserRuleReturnScope);

		object char_literal225_tree = default(object);
		object char_literal227_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditional_expression");
		DebugLocation(407, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// C.g:408:2: ( logical_or_expression ( '?' expression ':' conditional_expression )? )
			DebugEnterAlt(1);
			// C.g:408:4: logical_or_expression ( '?' expression ':' conditional_expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(408, 4);
			PushFollow(Follow._logical_or_expression_in_conditional_expression1557);
			logical_or_expression224=logical_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logical_or_expression224.Tree, logical_or_expression224, retval);
			DebugLocation(408, 26);
			// C.g:408:26: ( '?' expression ':' conditional_expression )?
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			int LA55_0 = input.LA(1);

			if ((LA55_0==58))
			{
				alt55 = 1;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:408:27: '?' expression ':' conditional_expression
				{
				DebugLocation(408, 27);
				char_literal225=(IToken)Match(input,58,Follow._58_in_conditional_expression1560); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal225_tree = (object)adaptor.Create(char_literal225, retval);
				adaptor.AddChild(root_0, char_literal225_tree);
				}
				DebugLocation(408, 31);
				PushFollow(Follow._expression_in_conditional_expression1562);
				expression226=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression226.Tree, expression226, retval);
				DebugLocation(408, 42);
				char_literal227=(IToken)Match(input,46,Follow._46_in_conditional_expression1564); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal227_tree = (object)adaptor.Create(char_literal227, retval);
				adaptor.AddChild(root_0, char_literal227_tree);
				}
				DebugLocation(408, 46);
				PushFollow(Follow._conditional_expression_in_conditional_expression1566);
				conditional_expression228=conditional_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression228.Tree, conditional_expression228, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(55); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditional_expression", 56);
			LeaveRule("conditional_expression", 56);
			LeaveRule_conditional_expression();
			if (state.backtracking > 0) { Memoize(input, 56, conditional_expression_StartIndex); }

		}
		DebugLocation(409, 1);
		} finally { DebugExitRule(GrammarFileName, "conditional_expression"); }
		return retval;

	}
	// $ANTLR end "conditional_expression"

	partial void EnterRule_logical_or_expression();
	partial void LeaveRule_logical_or_expression();

	// $ANTLR start "logical_or_expression"
	// C.g:411:1: logical_or_expression : logical_and_expression ( '||' logical_and_expression )* ;
	[GrammarRule("logical_or_expression")]
	public XAstParserRuleReturnScope logical_or_expression()
	{
		EnterRule_logical_or_expression();
		EnterRule("logical_or_expression", 57);
		var retval = new XAstParserRuleReturnScope("logical_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int logical_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal230 = default(IToken);
		XAstParserRuleReturnScope logical_and_expression229 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope logical_and_expression231 = default(XAstParserRuleReturnScope);

		object string_literal230_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logical_or_expression");
		DebugLocation(411, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// C.g:412:2: ( logical_and_expression ( '||' logical_and_expression )* )
			DebugEnterAlt(1);
			// C.g:412:4: logical_and_expression ( '||' logical_and_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(412, 4);
			PushFollow(Follow._logical_and_expression_in_logical_or_expression1579);
			logical_and_expression229=logical_and_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logical_and_expression229.Tree, logical_and_expression229, retval);
			DebugLocation(412, 27);
			// C.g:412:27: ( '||' logical_and_expression )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==100))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:412:28: '||' logical_and_expression
					{
					DebugLocation(412, 28);
					string_literal230=(IToken)Match(input,100,Follow._100_in_logical_or_expression1582); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal230_tree = (object)adaptor.Create(string_literal230, retval);
					adaptor.AddChild(root_0, string_literal230_tree);
					}
					DebugLocation(412, 33);
					PushFollow(Follow._logical_and_expression_in_logical_or_expression1584);
					logical_and_expression231=logical_and_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logical_and_expression231.Tree, logical_and_expression231, retval);

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logical_or_expression", 57);
			LeaveRule("logical_or_expression", 57);
			LeaveRule_logical_or_expression();
			if (state.backtracking > 0) { Memoize(input, 57, logical_or_expression_StartIndex); }

		}
		DebugLocation(413, 1);
		} finally { DebugExitRule(GrammarFileName, "logical_or_expression"); }
		return retval;

	}
	// $ANTLR end "logical_or_expression"

	partial void EnterRule_logical_and_expression();
	partial void LeaveRule_logical_and_expression();

	// $ANTLR start "logical_and_expression"
	// C.g:415:1: logical_and_expression : inclusive_or_expression ( '&&' inclusive_or_expression )* ;
	[GrammarRule("logical_and_expression")]
	public XAstParserRuleReturnScope logical_and_expression()
	{
		EnterRule_logical_and_expression();
		EnterRule("logical_and_expression", 58);
		var retval = new XAstParserRuleReturnScope("logical_and_expression");
		
		retval.Start = (IToken)input.LT(1);
		int logical_and_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal233 = default(IToken);
		XAstParserRuleReturnScope inclusive_or_expression232 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope inclusive_or_expression234 = default(XAstParserRuleReturnScope);

		object string_literal233_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logical_and_expression");
		DebugLocation(415, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// C.g:416:2: ( inclusive_or_expression ( '&&' inclusive_or_expression )* )
			DebugEnterAlt(1);
			// C.g:416:4: inclusive_or_expression ( '&&' inclusive_or_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(416, 4);
			PushFollow(Follow._inclusive_or_expression_in_logical_and_expression1597);
			inclusive_or_expression232=inclusive_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, inclusive_or_expression232.Tree, inclusive_or_expression232, retval);
			DebugLocation(416, 28);
			// C.g:416:28: ( '&&' inclusive_or_expression )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if ((LA57_0==27))
				{
					alt57 = 1;
				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:416:29: '&&' inclusive_or_expression
					{
					DebugLocation(416, 29);
					string_literal233=(IToken)Match(input,27,Follow._27_in_logical_and_expression1600); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal233_tree = (object)adaptor.Create(string_literal233, retval);
					adaptor.AddChild(root_0, string_literal233_tree);
					}
					DebugLocation(416, 34);
					PushFollow(Follow._inclusive_or_expression_in_logical_and_expression1602);
					inclusive_or_expression234=inclusive_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, inclusive_or_expression234.Tree, inclusive_or_expression234, retval);

					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logical_and_expression", 58);
			LeaveRule("logical_and_expression", 58);
			LeaveRule_logical_and_expression();
			if (state.backtracking > 0) { Memoize(input, 58, logical_and_expression_StartIndex); }

		}
		DebugLocation(417, 1);
		} finally { DebugExitRule(GrammarFileName, "logical_and_expression"); }
		return retval;

	}
	// $ANTLR end "logical_and_expression"

	partial void EnterRule_inclusive_or_expression();
	partial void LeaveRule_inclusive_or_expression();

	// $ANTLR start "inclusive_or_expression"
	// C.g:419:1: inclusive_or_expression : exclusive_or_expression ( '|' exclusive_or_expression )* ;
	[GrammarRule("inclusive_or_expression")]
	public XAstParserRuleReturnScope inclusive_or_expression()
	{
		EnterRule_inclusive_or_expression();
		EnterRule("inclusive_or_expression", 59);
		var retval = new XAstParserRuleReturnScope("inclusive_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int inclusive_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal236 = default(IToken);
		XAstParserRuleReturnScope exclusive_or_expression235 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope exclusive_or_expression237 = default(XAstParserRuleReturnScope);

		object char_literal236_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "inclusive_or_expression");
		DebugLocation(419, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// C.g:420:2: ( exclusive_or_expression ( '|' exclusive_or_expression )* )
			DebugEnterAlt(1);
			// C.g:420:4: exclusive_or_expression ( '|' exclusive_or_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(420, 4);
			PushFollow(Follow._exclusive_or_expression_in_inclusive_or_expression1615);
			exclusive_or_expression235=exclusive_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, exclusive_or_expression235.Tree, exclusive_or_expression235, retval);
			DebugLocation(420, 28);
			// C.g:420:28: ( '|' exclusive_or_expression )*
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, false);
				int LA58_0 = input.LA(1);

				if ((LA58_0==98))
				{
					alt58 = 1;
				}


				} finally { DebugExitDecision(58); }
				switch ( alt58 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:420:29: '|' exclusive_or_expression
					{
					DebugLocation(420, 29);
					char_literal236=(IToken)Match(input,98,Follow._98_in_inclusive_or_expression1618); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal236_tree = (object)adaptor.Create(char_literal236, retval);
					adaptor.AddChild(root_0, char_literal236_tree);
					}
					DebugLocation(420, 33);
					PushFollow(Follow._exclusive_or_expression_in_inclusive_or_expression1620);
					exclusive_or_expression237=exclusive_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, exclusive_or_expression237.Tree, exclusive_or_expression237, retval);

					}
					break;

				default:
					goto loop58;
				}
			}

			loop58:
				;

			} finally { DebugExitSubRule(58); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inclusive_or_expression", 59);
			LeaveRule("inclusive_or_expression", 59);
			LeaveRule_inclusive_or_expression();
			if (state.backtracking > 0) { Memoize(input, 59, inclusive_or_expression_StartIndex); }

		}
		DebugLocation(421, 1);
		} finally { DebugExitRule(GrammarFileName, "inclusive_or_expression"); }
		return retval;

	}
	// $ANTLR end "inclusive_or_expression"

	partial void EnterRule_exclusive_or_expression();
	partial void LeaveRule_exclusive_or_expression();

	// $ANTLR start "exclusive_or_expression"
	// C.g:423:1: exclusive_or_expression : and_expression ( '^' and_expression )* ;
	[GrammarRule("exclusive_or_expression")]
	public XAstParserRuleReturnScope exclusive_or_expression()
	{
		EnterRule_exclusive_or_expression();
		EnterRule("exclusive_or_expression", 60);
		var retval = new XAstParserRuleReturnScope("exclusive_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int exclusive_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal239 = default(IToken);
		XAstParserRuleReturnScope and_expression238 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope and_expression240 = default(XAstParserRuleReturnScope);

		object char_literal239_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "exclusive_or_expression");
		DebugLocation(423, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// C.g:424:2: ( and_expression ( '^' and_expression )* )
			DebugEnterAlt(1);
			// C.g:424:4: and_expression ( '^' and_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(424, 4);
			PushFollow(Follow._and_expression_in_exclusive_or_expression1633);
			and_expression238=and_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, and_expression238.Tree, and_expression238, retval);
			DebugLocation(424, 19);
			// C.g:424:19: ( '^' and_expression )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if ((LA59_0==61))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:424:20: '^' and_expression
					{
					DebugLocation(424, 20);
					char_literal239=(IToken)Match(input,61,Follow._61_in_exclusive_or_expression1636); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal239_tree = (object)adaptor.Create(char_literal239, retval);
					adaptor.AddChild(root_0, char_literal239_tree);
					}
					DebugLocation(424, 24);
					PushFollow(Follow._and_expression_in_exclusive_or_expression1638);
					and_expression240=and_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, and_expression240.Tree, and_expression240, retval);

					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exclusive_or_expression", 60);
			LeaveRule("exclusive_or_expression", 60);
			LeaveRule_exclusive_or_expression();
			if (state.backtracking > 0) { Memoize(input, 60, exclusive_or_expression_StartIndex); }

		}
		DebugLocation(425, 1);
		} finally { DebugExitRule(GrammarFileName, "exclusive_or_expression"); }
		return retval;

	}
	// $ANTLR end "exclusive_or_expression"

	partial void EnterRule_and_expression();
	partial void LeaveRule_and_expression();

	// $ANTLR start "and_expression"
	// C.g:427:1: and_expression : equality_expression ( '&' equality_expression )* ;
	[GrammarRule("and_expression")]
	public XAstParserRuleReturnScope and_expression()
	{
		EnterRule_and_expression();
		EnterRule("and_expression", 61);
		var retval = new XAstParserRuleReturnScope("and_expression");
		
		retval.Start = (IToken)input.LT(1);
		int and_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal242 = default(IToken);
		XAstParserRuleReturnScope equality_expression241 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope equality_expression243 = default(XAstParserRuleReturnScope);

		object char_literal242_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "and_expression");
		DebugLocation(427, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// C.g:428:2: ( equality_expression ( '&' equality_expression )* )
			DebugEnterAlt(1);
			// C.g:428:4: equality_expression ( '&' equality_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(428, 4);
			PushFollow(Follow._equality_expression_in_and_expression1651);
			equality_expression241=equality_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equality_expression241.Tree, equality_expression241, retval);
			DebugLocation(428, 24);
			// C.g:428:24: ( '&' equality_expression )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=2;
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if ((LA60_0==28))
				{
					alt60 = 1;
				}


				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:428:25: '&' equality_expression
					{
					DebugLocation(428, 25);
					char_literal242=(IToken)Match(input,28,Follow._28_in_and_expression1654); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal242_tree = (object)adaptor.Create(char_literal242, retval);
					adaptor.AddChild(root_0, char_literal242_tree);
					}
					DebugLocation(428, 29);
					PushFollow(Follow._equality_expression_in_and_expression1656);
					equality_expression243=equality_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equality_expression243.Tree, equality_expression243, retval);

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expression", 61);
			LeaveRule("and_expression", 61);
			LeaveRule_and_expression();
			if (state.backtracking > 0) { Memoize(input, 61, and_expression_StartIndex); }

		}
		DebugLocation(429, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expression"); }
		return retval;

	}
	// $ANTLR end "and_expression"

	partial void EnterRule_equality_expression();
	partial void LeaveRule_equality_expression();

	// $ANTLR start "equality_expression"
	// C.g:430:1: equality_expression : relational_expression ( ( '==' | '!=' ) relational_expression )* ;
	[GrammarRule("equality_expression")]
	public XAstParserRuleReturnScope equality_expression()
	{
		EnterRule_equality_expression();
		EnterRule("equality_expression", 62);
		var retval = new XAstParserRuleReturnScope("equality_expression");
		
		retval.Start = (IToken)input.LT(1);
		int equality_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set245 = default(IToken);
		XAstParserRuleReturnScope relational_expression244 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope relational_expression246 = default(XAstParserRuleReturnScope);

		object set245_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "equality_expression");
		DebugLocation(430, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// C.g:431:2: ( relational_expression ( ( '==' | '!=' ) relational_expression )* )
			DebugEnterAlt(1);
			// C.g:431:4: relational_expression ( ( '==' | '!=' ) relational_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(431, 4);
			PushFollow(Follow._relational_expression_in_equality_expression1668);
			relational_expression244=relational_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, relational_expression244.Tree, relational_expression244, retval);
			DebugLocation(431, 26);
			// C.g:431:26: ( ( '==' | '!=' ) relational_expression )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==24||LA61_0==53))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:431:27: ( '==' | '!=' ) relational_expression
					{
					DebugLocation(431, 27);

					set245=(IToken)input.LT(1);
					if (input.LA(1)==24||input.LA(1)==53)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set245, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(431, 39);
					PushFollow(Follow._relational_expression_in_equality_expression1677);
					relational_expression246=relational_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, relational_expression246.Tree, relational_expression246, retval);

					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equality_expression", 62);
			LeaveRule("equality_expression", 62);
			LeaveRule_equality_expression();
			if (state.backtracking > 0) { Memoize(input, 62, equality_expression_StartIndex); }

		}
		DebugLocation(432, 1);
		} finally { DebugExitRule(GrammarFileName, "equality_expression"); }
		return retval;

	}
	// $ANTLR end "equality_expression"

	partial void EnterRule_relational_expression();
	partial void LeaveRule_relational_expression();

	// $ANTLR start "relational_expression"
	// C.g:434:1: relational_expression : shift_expression ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* ;
	[GrammarRule("relational_expression")]
	public XAstParserRuleReturnScope relational_expression()
	{
		EnterRule_relational_expression();
		EnterRule("relational_expression", 63);
		var retval = new XAstParserRuleReturnScope("relational_expression");
		
		retval.Start = (IToken)input.LT(1);
		int relational_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set248 = default(IToken);
		XAstParserRuleReturnScope shift_expression247 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope shift_expression249 = default(XAstParserRuleReturnScope);

		object set248_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "relational_expression");
		DebugLocation(434, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// C.g:435:2: ( shift_expression ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* )
			DebugEnterAlt(1);
			// C.g:435:4: shift_expression ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(435, 4);
			PushFollow(Follow._shift_expression_in_relational_expression1690);
			shift_expression247=shift_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expression247.Tree, shift_expression247, retval);
			DebugLocation(435, 21);
			// C.g:435:21: ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=2;
				try { DebugEnterDecision(62, false);
				int LA62_0 = input.LA(1);

				if ((LA62_0==48||LA62_0==51||(LA62_0>=54 && LA62_0<=55)))
				{
					alt62 = 1;
				}


				} finally { DebugExitDecision(62); }
				switch ( alt62 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:435:22: ( '<' | '>' | '<=' | '>=' ) shift_expression
					{
					DebugLocation(435, 22);

					set248=(IToken)input.LT(1);
					if (input.LA(1)==48||input.LA(1)==51||(input.LA(1)>=54 && input.LA(1)<=55))
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set248, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(435, 42);
					PushFollow(Follow._shift_expression_in_relational_expression1703);
					shift_expression249=shift_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expression249.Tree, shift_expression249, retval);

					}
					break;

				default:
					goto loop62;
				}
			}

			loop62:
				;

			} finally { DebugExitSubRule(62); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relational_expression", 63);
			LeaveRule("relational_expression", 63);
			LeaveRule_relational_expression();
			if (state.backtracking > 0) { Memoize(input, 63, relational_expression_StartIndex); }

		}
		DebugLocation(436, 1);
		} finally { DebugExitRule(GrammarFileName, "relational_expression"); }
		return retval;

	}
	// $ANTLR end "relational_expression"

	partial void EnterRule_shift_expression();
	partial void LeaveRule_shift_expression();

	// $ANTLR start "shift_expression"
	// C.g:438:1: shift_expression : additive_expression ( ( '<<' | '>>' ) additive_expression )* ;
	[GrammarRule("shift_expression")]
	public XAstParserRuleReturnScope shift_expression()
	{
		EnterRule_shift_expression();
		EnterRule("shift_expression", 64);
		var retval = new XAstParserRuleReturnScope("shift_expression");
		
		retval.Start = (IToken)input.LT(1);
		int shift_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set251 = default(IToken);
		XAstParserRuleReturnScope additive_expression250 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope additive_expression252 = default(XAstParserRuleReturnScope);

		object set251_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "shift_expression");
		DebugLocation(438, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// C.g:439:2: ( additive_expression ( ( '<<' | '>>' ) additive_expression )* )
			DebugEnterAlt(1);
			// C.g:439:4: additive_expression ( ( '<<' | '>>' ) additive_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(439, 4);
			PushFollow(Follow._additive_expression_in_shift_expression1716);
			additive_expression250=additive_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, additive_expression250.Tree, additive_expression250, retval);
			DebugLocation(439, 24);
			// C.g:439:24: ( ( '<<' | '>>' ) additive_expression )*
			try { DebugEnterSubRule(63);
			while (true)
			{
				int alt63=2;
				try { DebugEnterDecision(63, false);
				int LA63_0 = input.LA(1);

				if ((LA63_0==49||LA63_0==56))
				{
					alt63 = 1;
				}


				} finally { DebugExitDecision(63); }
				switch ( alt63 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:439:25: ( '<<' | '>>' ) additive_expression
					{
					DebugLocation(439, 25);

					set251=(IToken)input.LT(1);
					if (input.LA(1)==49||input.LA(1)==56)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set251, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(439, 37);
					PushFollow(Follow._additive_expression_in_shift_expression1725);
					additive_expression252=additive_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, additive_expression252.Tree, additive_expression252, retval);

					}
					break;

				default:
					goto loop63;
				}
			}

			loop63:
				;

			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expression", 64);
			LeaveRule("shift_expression", 64);
			LeaveRule_shift_expression();
			if (state.backtracking > 0) { Memoize(input, 64, shift_expression_StartIndex); }

		}
		DebugLocation(440, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expression"); }
		return retval;

	}
	// $ANTLR end "shift_expression"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// C.g:444:1: statement : ( labeled_statement | compound_statement | expression_statement | selection_statement | iteration_statement | jump_statement );
	[GrammarRule("statement")]
	public XAstParserRuleReturnScope statement()
	{
		EnterRule_statement();
		EnterRule("statement", 65);
		var retval = new XAstParserRuleReturnScope("statement");
		
		retval.Start = (IToken)input.LT(1);
		int statement_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope labeled_statement253 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope compound_statement254 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_statement255 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope selection_statement256 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope iteration_statement257 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope jump_statement258 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(444, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// C.g:445:2: ( labeled_statement | compound_statement | expression_statement | selection_statement | iteration_statement | jump_statement )
			int alt64=6;
			try { DebugEnterDecision(64, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				int LA64_1 = input.LA(2);

				if ((LA64_1==46))
				{
					alt64 = 1;
				}
				else if (((LA64_1>=24 && LA64_1<=30)||(LA64_1>=32 && LA64_1<=42)||(LA64_1>=44 && LA64_1<=45)||(LA64_1>=47 && LA64_1<=59)||(LA64_1>=61 && LA64_1<=62)||(LA64_1>=98 && LA64_1<=100)))
				{
					alt64 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 64, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 67:
			case 71:
				{
				alt64 = 1;
				}
				break;
			case 97:
				{
				alt64 = 2;
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
			case 23:
			case 28:
			case 30:
			case 32:
			case 34:
			case 35:
			case 38:
			case 39:
			case 47:
			case 87:
			case 102:
				{
				alt64 = 3;
				}
				break;
			case 80:
			case 90:
				{
				alt64 = 4;
				}
				break;
			case 72:
			case 78:
			case 96:
				{
				alt64 = 5;
				}
				break;
			case 66:
			case 70:
			case 79:
			case 84:
				{
				alt64 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 64, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:445:4: labeled_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(445, 4);
				PushFollow(Follow._labeled_statement_in_statement1740);
				labeled_statement253=labeled_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, labeled_statement253.Tree, labeled_statement253, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:446:4: compound_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(446, 4);
				PushFollow(Follow._compound_statement_in_statement1745);
				compound_statement254=compound_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, compound_statement254.Tree, compound_statement254, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:447:4: expression_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(447, 4);
				PushFollow(Follow._expression_statement_in_statement1750);
				expression_statement255=expression_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_statement255.Tree, expression_statement255, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:448:4: selection_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(448, 4);
				PushFollow(Follow._selection_statement_in_statement1755);
				selection_statement256=selection_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selection_statement256.Tree, selection_statement256, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:449:4: iteration_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(449, 4);
				PushFollow(Follow._iteration_statement_in_statement1760);
				iteration_statement257=iteration_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, iteration_statement257.Tree, iteration_statement257, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:450:4: jump_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(450, 4);
				PushFollow(Follow._jump_statement_in_statement1765);
				jump_statement258=jump_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, jump_statement258.Tree, jump_statement258, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 65);
			LeaveRule("statement", 65);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 65, statement_StartIndex); }

		}
		DebugLocation(451, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_labeled_statement();
	partial void LeaveRule_labeled_statement();

	// $ANTLR start "labeled_statement"
	// C.g:453:1: labeled_statement : ( IDENTIFIER ':' statement | 'case' constant_expression ':' statement | 'default' ':' statement );
	[GrammarRule("labeled_statement")]
	public XAstParserRuleReturnScope labeled_statement()
	{
		EnterRule_labeled_statement();
		EnterRule("labeled_statement", 66);
		var retval = new XAstParserRuleReturnScope("labeled_statement");
		
		retval.Start = (IToken)input.LT(1);
		int labeled_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER259 = default(IToken);
		IToken char_literal260 = default(IToken);
		IToken string_literal262 = default(IToken);
		IToken char_literal264 = default(IToken);
		IToken string_literal266 = default(IToken);
		IToken char_literal267 = default(IToken);
		XAstParserRuleReturnScope statement261 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression263 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement265 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement268 = default(XAstParserRuleReturnScope);

		object IDENTIFIER259_tree = default(object);
		object char_literal260_tree = default(object);
		object string_literal262_tree = default(object);
		object char_literal264_tree = default(object);
		object string_literal266_tree = default(object);
		object char_literal267_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "labeled_statement");
		DebugLocation(453, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }

			// C.g:454:2: ( IDENTIFIER ':' statement | 'case' constant_expression ':' statement | 'default' ':' statement )
			int alt65=3;
			try { DebugEnterDecision(65, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				alt65 = 1;
				}
				break;
			case 67:
				{
				alt65 = 2;
				}
				break;
			case 71:
				{
				alt65 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 65, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:454:4: IDENTIFIER ':' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(454, 4);
				IDENTIFIER259=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_labeled_statement1776), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER259_tree = (object)adaptor.Create(IDENTIFIER259, retval);
				adaptor.AddChild(root_0, IDENTIFIER259_tree);
				}
				DebugLocation(454, 15);
				char_literal260=(IToken)Match(input,46,Follow._46_in_labeled_statement1778); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal260_tree = (object)adaptor.Create(char_literal260, retval);
				adaptor.AddChild(root_0, char_literal260_tree);
				}
				DebugLocation(454, 19);
				PushFollow(Follow._statement_in_labeled_statement1780);
				statement261=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement261.Tree, statement261, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:455:4: 'case' constant_expression ':' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(455, 4);
				string_literal262=(IToken)Match(input,67,Follow._67_in_labeled_statement1785); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal262_tree = (object)adaptor.Create(string_literal262, retval);
				adaptor.AddChild(root_0, string_literal262_tree);
				}
				DebugLocation(455, 11);
				PushFollow(Follow._constant_expression_in_labeled_statement1787);
				constant_expression263=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression263.Tree, constant_expression263, retval);
				DebugLocation(455, 31);
				char_literal264=(IToken)Match(input,46,Follow._46_in_labeled_statement1789); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal264_tree = (object)adaptor.Create(char_literal264, retval);
				adaptor.AddChild(root_0, char_literal264_tree);
				}
				DebugLocation(455, 35);
				PushFollow(Follow._statement_in_labeled_statement1791);
				statement265=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement265.Tree, statement265, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:456:4: 'default' ':' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(456, 4);
				string_literal266=(IToken)Match(input,71,Follow._71_in_labeled_statement1796); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal266_tree = (object)adaptor.Create(string_literal266, retval);
				adaptor.AddChild(root_0, string_literal266_tree);
				}
				DebugLocation(456, 14);
				char_literal267=(IToken)Match(input,46,Follow._46_in_labeled_statement1798); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal267_tree = (object)adaptor.Create(char_literal267, retval);
				adaptor.AddChild(root_0, char_literal267_tree);
				}
				DebugLocation(456, 18);
				PushFollow(Follow._statement_in_labeled_statement1800);
				statement268=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement268.Tree, statement268, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("labeled_statement", 66);
			LeaveRule("labeled_statement", 66);
			LeaveRule_labeled_statement();
			if (state.backtracking > 0) { Memoize(input, 66, labeled_statement_StartIndex); }

		}
		DebugLocation(457, 1);
		} finally { DebugExitRule(GrammarFileName, "labeled_statement"); }
		return retval;

	}
	// $ANTLR end "labeled_statement"

	partial void EnterRule_compound_statement();
	partial void LeaveRule_compound_statement();

	// $ANTLR start "compound_statement"
	// C.g:459:1: compound_statement : '{' ( declaration )* ( statement_list )? '}' ;
	[GrammarRule("compound_statement")]
	public XAstParserRuleReturnScope compound_statement()
	{
		EnterRule_compound_statement();
		EnterRule("compound_statement", 67);
		var retval = new XAstParserRuleReturnScope("compound_statement");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int compound_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal269 = default(IToken);
		IToken char_literal272 = default(IToken);
		XAstParserRuleReturnScope declaration270 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement_list271 = default(XAstParserRuleReturnScope);

		object char_literal269_tree = default(object);
		object char_literal272_tree = default(object);

		  Symbols_stack.Peek().types =  new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "compound_statement");
		DebugLocation(459, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return retval; }

			// C.g:464:2: ( '{' ( declaration )* ( statement_list )? '}' )
			DebugEnterAlt(1);
			// C.g:464:4: '{' ( declaration )* ( statement_list )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(464, 4);
			char_literal269=(IToken)Match(input,97,Follow._97_in_compound_statement1822); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal269_tree = (object)adaptor.Create(char_literal269, retval);
			adaptor.AddChild(root_0, char_literal269_tree);
			}
			DebugLocation(464, 8);
			// C.g:464:8: ( declaration )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, false);
				try
				{
					alt66 = dfa66.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:464:8: declaration
					{
					DebugLocation(464, 8);
					PushFollow(Follow._declaration_in_compound_statement1824);
					declaration270=declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declaration270.Tree, declaration270, retval);

					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }

			DebugLocation(464, 21);
			// C.g:464:21: ( statement_list )?
			int alt67=2;
			try { DebugEnterSubRule(67);
			try { DebugEnterDecision(67, false);
			int LA67_0 = input.LA(1);

			if ((LA67_0==CHARACTER_LITERAL||LA67_0==DECIMAL_LITERAL||LA67_0==FLOATING_POINT_LITERAL||LA67_0==HEX_LITERAL||LA67_0==IDENTIFIER||LA67_0==OCTAL_LITERAL||LA67_0==STRING_LITERAL||LA67_0==23||LA67_0==28||LA67_0==30||LA67_0==32||(LA67_0>=34 && LA67_0<=35)||(LA67_0>=38 && LA67_0<=39)||LA67_0==47||(LA67_0>=66 && LA67_0<=67)||(LA67_0>=70 && LA67_0<=72)||(LA67_0>=78 && LA67_0<=80)||LA67_0==84||LA67_0==87||LA67_0==90||(LA67_0>=96 && LA67_0<=97)||LA67_0==102))
			{
				alt67 = 1;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:464:21: statement_list
				{
				DebugLocation(464, 21);
				PushFollow(Follow._statement_list_in_compound_statement1827);
				statement_list271=statement_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement_list271.Tree, statement_list271, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(67); }

			DebugLocation(464, 37);
			char_literal272=(IToken)Match(input,101,Follow._101_in_compound_statement1830); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal272_tree = (object)adaptor.Create(char_literal272, retval);
			adaptor.AddChild(root_0, char_literal272_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("compound_statement", 67);
			LeaveRule("compound_statement", 67);
			LeaveRule_compound_statement();
			if (state.backtracking > 0) { Memoize(input, 67, compound_statement_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(465, 1);
		} finally { DebugExitRule(GrammarFileName, "compound_statement"); }
		return retval;

	}
	// $ANTLR end "compound_statement"

	partial void EnterRule_statement_list();
	partial void LeaveRule_statement_list();

	// $ANTLR start "statement_list"
	// C.g:467:1: statement_list : ( statement )+ ;
	[GrammarRule("statement_list")]
	public XAstParserRuleReturnScope statement_list()
	{
		EnterRule_statement_list();
		EnterRule("statement_list", 68);
		var retval = new XAstParserRuleReturnScope("statement_list");
		
		retval.Start = (IToken)input.LT(1);
		int statement_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope statement273 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "statement_list");
		DebugLocation(467, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return retval; }

			// C.g:468:2: ( ( statement )+ )
			DebugEnterAlt(1);
			// C.g:468:4: ( statement )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(468, 4);
			// C.g:468:4: ( statement )+
			int cnt68=0;
			try { DebugEnterSubRule(68);
			while (true)
			{
				int alt68=2;
				try { DebugEnterDecision(68, false);
				int LA68_0 = input.LA(1);

				if ((LA68_0==CHARACTER_LITERAL||LA68_0==DECIMAL_LITERAL||LA68_0==FLOATING_POINT_LITERAL||LA68_0==HEX_LITERAL||LA68_0==IDENTIFIER||LA68_0==OCTAL_LITERAL||LA68_0==STRING_LITERAL||LA68_0==23||LA68_0==28||LA68_0==30||LA68_0==32||(LA68_0>=34 && LA68_0<=35)||(LA68_0>=38 && LA68_0<=39)||LA68_0==47||(LA68_0>=66 && LA68_0<=67)||(LA68_0>=70 && LA68_0<=72)||(LA68_0>=78 && LA68_0<=80)||LA68_0==84||LA68_0==87||LA68_0==90||(LA68_0>=96 && LA68_0<=97)||LA68_0==102))
				{
					alt68 = 1;
				}


				} finally { DebugExitDecision(68); }
				switch (alt68)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:468:4: statement
					{
					DebugLocation(468, 4);
					PushFollow(Follow._statement_in_statement_list1841);
					statement273=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement273.Tree, statement273, retval);

					}
					break;

				default:
					if (cnt68 >= 1)
						goto loop68;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee68 = new EarlyExitException( 68, input );
					DebugRecognitionException(eee68);
					throw eee68;
				}
				cnt68++;
			}
			loop68:
				;

			} finally { DebugExitSubRule(68); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement_list", 68);
			LeaveRule("statement_list", 68);
			LeaveRule_statement_list();
			if (state.backtracking > 0) { Memoize(input, 68, statement_list_StartIndex); }

		}
		DebugLocation(469, 1);
		} finally { DebugExitRule(GrammarFileName, "statement_list"); }
		return retval;

	}
	// $ANTLR end "statement_list"

	partial void EnterRule_expression_statement();
	partial void LeaveRule_expression_statement();

	// $ANTLR start "expression_statement"
	// C.g:471:1: expression_statement : ( ';' | expression ';' );
	[GrammarRule("expression_statement")]
	public XAstParserRuleReturnScope expression_statement()
	{
		EnterRule_expression_statement();
		EnterRule("expression_statement", 69);
		var retval = new XAstParserRuleReturnScope("expression_statement");
		
		retval.Start = (IToken)input.LT(1);
		int expression_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal274 = default(IToken);
		IToken char_literal276 = default(IToken);
		XAstParserRuleReturnScope expression275 = default(XAstParserRuleReturnScope);

		object char_literal274_tree = default(object);
		object char_literal276_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expression_statement");
		DebugLocation(471, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return retval; }

			// C.g:472:2: ( ';' | expression ';' )
			int alt69=2;
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==47))
			{
				alt69 = 1;
			}
			else if ((LA69_0==CHARACTER_LITERAL||LA69_0==DECIMAL_LITERAL||LA69_0==FLOATING_POINT_LITERAL||LA69_0==HEX_LITERAL||LA69_0==IDENTIFIER||LA69_0==OCTAL_LITERAL||LA69_0==STRING_LITERAL||LA69_0==23||LA69_0==28||LA69_0==30||LA69_0==32||(LA69_0>=34 && LA69_0<=35)||(LA69_0>=38 && LA69_0<=39)||LA69_0==87||LA69_0==102))
			{
				alt69 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 69, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:472:4: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(472, 4);
				char_literal274=(IToken)Match(input,47,Follow._47_in_expression_statement1853); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal274_tree = (object)adaptor.Create(char_literal274, retval);
				adaptor.AddChild(root_0, char_literal274_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:473:4: expression ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(473, 4);
				PushFollow(Follow._expression_in_expression_statement1858);
				expression275=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression275.Tree, expression275, retval);
				DebugLocation(473, 15);
				char_literal276=(IToken)Match(input,47,Follow._47_in_expression_statement1860); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal276_tree = (object)adaptor.Create(char_literal276, retval);
				adaptor.AddChild(root_0, char_literal276_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_statement", 69);
			LeaveRule("expression_statement", 69);
			LeaveRule_expression_statement();
			if (state.backtracking > 0) { Memoize(input, 69, expression_statement_StartIndex); }

		}
		DebugLocation(474, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_statement"); }
		return retval;

	}
	// $ANTLR end "expression_statement"

	partial void EnterRule_selection_statement();
	partial void LeaveRule_selection_statement();

	// $ANTLR start "selection_statement"
	// C.g:476:1: selection_statement : ( 'if' '(' expression ')' statement ( options {k=1; backtrack=false; } : 'else' statement )? | 'switch' '(' expression ')' statement );
	[GrammarRule("selection_statement")]
	public XAstParserRuleReturnScope selection_statement()
	{
		EnterRule_selection_statement();
		EnterRule("selection_statement", 70);
		var retval = new XAstParserRuleReturnScope("selection_statement");
		
		retval.Start = (IToken)input.LT(1);
		int selection_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal277 = default(IToken);
		IToken char_literal278 = default(IToken);
		IToken char_literal280 = default(IToken);
		IToken string_literal282 = default(IToken);
		IToken string_literal284 = default(IToken);
		IToken char_literal285 = default(IToken);
		IToken char_literal287 = default(IToken);
		XAstParserRuleReturnScope expression279 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement281 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement283 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression286 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement288 = default(XAstParserRuleReturnScope);

		object string_literal277_tree = default(object);
		object char_literal278_tree = default(object);
		object char_literal280_tree = default(object);
		object string_literal282_tree = default(object);
		object string_literal284_tree = default(object);
		object char_literal285_tree = default(object);
		object char_literal287_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "selection_statement");
		DebugLocation(476, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return retval; }

			// C.g:477:2: ( 'if' '(' expression ')' statement ( options {k=1; backtrack=false; } : 'else' statement )? | 'switch' '(' expression ')' statement )
			int alt71=2;
			try { DebugEnterDecision(71, false);
			int LA71_0 = input.LA(1);

			if ((LA71_0==80))
			{
				alt71 = 1;
			}
			else if ((LA71_0==90))
			{
				alt71 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:477:4: 'if' '(' expression ')' statement ( options {k=1; backtrack=false; } : 'else' statement )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(477, 4);
				string_literal277=(IToken)Match(input,80,Follow._80_in_selection_statement1871); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal277_tree = (object)adaptor.Create(string_literal277, retval);
				adaptor.AddChild(root_0, string_literal277_tree);
				}
				DebugLocation(477, 9);
				char_literal278=(IToken)Match(input,30,Follow._30_in_selection_statement1873); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal278_tree = (object)adaptor.Create(char_literal278, retval);
				adaptor.AddChild(root_0, char_literal278_tree);
				}
				DebugLocation(477, 13);
				PushFollow(Follow._expression_in_selection_statement1875);
				expression279=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression279.Tree, expression279, retval);
				DebugLocation(477, 24);
				char_literal280=(IToken)Match(input,31,Follow._31_in_selection_statement1877); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal280_tree = (object)adaptor.Create(char_literal280, retval);
				adaptor.AddChild(root_0, char_literal280_tree);
				}
				DebugLocation(477, 28);
				PushFollow(Follow._statement_in_selection_statement1879);
				statement281=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement281.Tree, statement281, retval);
				DebugLocation(477, 38);
				// C.g:477:38: ( options {k=1; backtrack=false; } : 'else' statement )?
				int alt70=2;
				try { DebugEnterSubRule(70);
				try { DebugEnterDecision(70, false);
				int LA70_0 = input.LA(1);

				if ((LA70_0==74))
				{
					int LA70_1 = input.LA(2);

					if ((true))
					{
						alt70 = 1;
					}
				}
				} finally { DebugExitDecision(70); }
				switch (alt70)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:477:71: 'else' statement
					{
					DebugLocation(477, 71);
					string_literal282=(IToken)Match(input,74,Follow._74_in_selection_statement1894); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal282_tree = (object)adaptor.Create(string_literal282, retval);
					adaptor.AddChild(root_0, string_literal282_tree);
					}
					DebugLocation(477, 78);
					PushFollow(Follow._statement_in_selection_statement1896);
					statement283=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement283.Tree, statement283, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(70); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:478:4: 'switch' '(' expression ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(478, 4);
				string_literal284=(IToken)Match(input,90,Follow._90_in_selection_statement1903); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal284_tree = (object)adaptor.Create(string_literal284, retval);
				adaptor.AddChild(root_0, string_literal284_tree);
				}
				DebugLocation(478, 13);
				char_literal285=(IToken)Match(input,30,Follow._30_in_selection_statement1905); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal285_tree = (object)adaptor.Create(char_literal285, retval);
				adaptor.AddChild(root_0, char_literal285_tree);
				}
				DebugLocation(478, 17);
				PushFollow(Follow._expression_in_selection_statement1907);
				expression286=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression286.Tree, expression286, retval);
				DebugLocation(478, 28);
				char_literal287=(IToken)Match(input,31,Follow._31_in_selection_statement1909); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal287_tree = (object)adaptor.Create(char_literal287, retval);
				adaptor.AddChild(root_0, char_literal287_tree);
				}
				DebugLocation(478, 32);
				PushFollow(Follow._statement_in_selection_statement1911);
				statement288=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement288.Tree, statement288, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selection_statement", 70);
			LeaveRule("selection_statement", 70);
			LeaveRule_selection_statement();
			if (state.backtracking > 0) { Memoize(input, 70, selection_statement_StartIndex); }

		}
		DebugLocation(479, 1);
		} finally { DebugExitRule(GrammarFileName, "selection_statement"); }
		return retval;

	}
	// $ANTLR end "selection_statement"

	partial void EnterRule_iteration_statement();
	partial void LeaveRule_iteration_statement();

	// $ANTLR start "iteration_statement"
	// C.g:481:1: iteration_statement : ( 'while' '(' expression ')' statement | 'do' statement 'while' '(' expression ')' ';' | 'for' '(' expression_statement expression_statement ( expression )? ')' statement );
	[GrammarRule("iteration_statement")]
	public XAstParserRuleReturnScope iteration_statement()
	{
		EnterRule_iteration_statement();
		EnterRule("iteration_statement", 71);
		var retval = new XAstParserRuleReturnScope("iteration_statement");
		
		retval.Start = (IToken)input.LT(1);
		int iteration_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal289 = default(IToken);
		IToken char_literal290 = default(IToken);
		IToken char_literal292 = default(IToken);
		IToken string_literal294 = default(IToken);
		IToken string_literal296 = default(IToken);
		IToken char_literal297 = default(IToken);
		IToken char_literal299 = default(IToken);
		IToken char_literal300 = default(IToken);
		IToken string_literal301 = default(IToken);
		IToken char_literal302 = default(IToken);
		IToken char_literal306 = default(IToken);
		XAstParserRuleReturnScope expression291 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement293 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement295 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression298 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_statement303 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_statement304 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression305 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement307 = default(XAstParserRuleReturnScope);

		object string_literal289_tree = default(object);
		object char_literal290_tree = default(object);
		object char_literal292_tree = default(object);
		object string_literal294_tree = default(object);
		object string_literal296_tree = default(object);
		object char_literal297_tree = default(object);
		object char_literal299_tree = default(object);
		object char_literal300_tree = default(object);
		object string_literal301_tree = default(object);
		object char_literal302_tree = default(object);
		object char_literal306_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "iteration_statement");
		DebugLocation(481, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return retval; }

			// C.g:482:2: ( 'while' '(' expression ')' statement | 'do' statement 'while' '(' expression ')' ';' | 'for' '(' expression_statement expression_statement ( expression )? ')' statement )
			int alt73=3;
			try { DebugEnterDecision(73, false);
			switch (input.LA(1))
			{
			case 96:
				{
				alt73 = 1;
				}
				break;
			case 72:
				{
				alt73 = 2;
				}
				break;
			case 78:
				{
				alt73 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 73, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:482:4: 'while' '(' expression ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(482, 4);
				string_literal289=(IToken)Match(input,96,Follow._96_in_iteration_statement1922); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal289_tree = (object)adaptor.Create(string_literal289, retval);
				adaptor.AddChild(root_0, string_literal289_tree);
				}
				DebugLocation(482, 12);
				char_literal290=(IToken)Match(input,30,Follow._30_in_iteration_statement1924); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal290_tree = (object)adaptor.Create(char_literal290, retval);
				adaptor.AddChild(root_0, char_literal290_tree);
				}
				DebugLocation(482, 16);
				PushFollow(Follow._expression_in_iteration_statement1926);
				expression291=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression291.Tree, expression291, retval);
				DebugLocation(482, 27);
				char_literal292=(IToken)Match(input,31,Follow._31_in_iteration_statement1928); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal292_tree = (object)adaptor.Create(char_literal292, retval);
				adaptor.AddChild(root_0, char_literal292_tree);
				}
				DebugLocation(482, 31);
				PushFollow(Follow._statement_in_iteration_statement1930);
				statement293=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement293.Tree, statement293, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:483:4: 'do' statement 'while' '(' expression ')' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(483, 4);
				string_literal294=(IToken)Match(input,72,Follow._72_in_iteration_statement1935); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal294_tree = (object)adaptor.Create(string_literal294, retval);
				adaptor.AddChild(root_0, string_literal294_tree);
				}
				DebugLocation(483, 9);
				PushFollow(Follow._statement_in_iteration_statement1937);
				statement295=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement295.Tree, statement295, retval);
				DebugLocation(483, 19);
				string_literal296=(IToken)Match(input,96,Follow._96_in_iteration_statement1939); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal296_tree = (object)adaptor.Create(string_literal296, retval);
				adaptor.AddChild(root_0, string_literal296_tree);
				}
				DebugLocation(483, 27);
				char_literal297=(IToken)Match(input,30,Follow._30_in_iteration_statement1941); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal297_tree = (object)adaptor.Create(char_literal297, retval);
				adaptor.AddChild(root_0, char_literal297_tree);
				}
				DebugLocation(483, 31);
				PushFollow(Follow._expression_in_iteration_statement1943);
				expression298=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression298.Tree, expression298, retval);
				DebugLocation(483, 42);
				char_literal299=(IToken)Match(input,31,Follow._31_in_iteration_statement1945); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal299_tree = (object)adaptor.Create(char_literal299, retval);
				adaptor.AddChild(root_0, char_literal299_tree);
				}
				DebugLocation(483, 46);
				char_literal300=(IToken)Match(input,47,Follow._47_in_iteration_statement1947); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal300_tree = (object)adaptor.Create(char_literal300, retval);
				adaptor.AddChild(root_0, char_literal300_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:484:4: 'for' '(' expression_statement expression_statement ( expression )? ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(484, 4);
				string_literal301=(IToken)Match(input,78,Follow._78_in_iteration_statement1952); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal301_tree = (object)adaptor.Create(string_literal301, retval);
				adaptor.AddChild(root_0, string_literal301_tree);
				}
				DebugLocation(484, 10);
				char_literal302=(IToken)Match(input,30,Follow._30_in_iteration_statement1954); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal302_tree = (object)adaptor.Create(char_literal302, retval);
				adaptor.AddChild(root_0, char_literal302_tree);
				}
				DebugLocation(484, 14);
				PushFollow(Follow._expression_statement_in_iteration_statement1956);
				expression_statement303=expression_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_statement303.Tree, expression_statement303, retval);
				DebugLocation(484, 35);
				PushFollow(Follow._expression_statement_in_iteration_statement1958);
				expression_statement304=expression_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_statement304.Tree, expression_statement304, retval);
				DebugLocation(484, 56);
				// C.g:484:56: ( expression )?
				int alt72=2;
				try { DebugEnterSubRule(72);
				try { DebugEnterDecision(72, false);
				int LA72_0 = input.LA(1);

				if ((LA72_0==CHARACTER_LITERAL||LA72_0==DECIMAL_LITERAL||LA72_0==FLOATING_POINT_LITERAL||LA72_0==HEX_LITERAL||LA72_0==IDENTIFIER||LA72_0==OCTAL_LITERAL||LA72_0==STRING_LITERAL||LA72_0==23||LA72_0==28||LA72_0==30||LA72_0==32||(LA72_0>=34 && LA72_0<=35)||(LA72_0>=38 && LA72_0<=39)||LA72_0==87||LA72_0==102))
				{
					alt72 = 1;
				}
				} finally { DebugExitDecision(72); }
				switch (alt72)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:484:56: expression
					{
					DebugLocation(484, 56);
					PushFollow(Follow._expression_in_iteration_statement1960);
					expression305=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression305.Tree, expression305, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(72); }

				DebugLocation(484, 68);
				char_literal306=(IToken)Match(input,31,Follow._31_in_iteration_statement1963); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal306_tree = (object)adaptor.Create(char_literal306, retval);
				adaptor.AddChild(root_0, char_literal306_tree);
				}
				DebugLocation(484, 72);
				PushFollow(Follow._statement_in_iteration_statement1965);
				statement307=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement307.Tree, statement307, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("iteration_statement", 71);
			LeaveRule("iteration_statement", 71);
			LeaveRule_iteration_statement();
			if (state.backtracking > 0) { Memoize(input, 71, iteration_statement_StartIndex); }

		}
		DebugLocation(485, 1);
		} finally { DebugExitRule(GrammarFileName, "iteration_statement"); }
		return retval;

	}
	// $ANTLR end "iteration_statement"

	partial void EnterRule_jump_statement();
	partial void LeaveRule_jump_statement();

	// $ANTLR start "jump_statement"
	// C.g:487:1: jump_statement : ( 'goto' IDENTIFIER ';' | 'continue' ';' | 'break' ';' | 'return' ';' | 'return' expression ';' );
	[GrammarRule("jump_statement")]
	public XAstParserRuleReturnScope jump_statement()
	{
		EnterRule_jump_statement();
		EnterRule("jump_statement", 72);
		var retval = new XAstParserRuleReturnScope("jump_statement");
		
		retval.Start = (IToken)input.LT(1);
		int jump_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal308 = default(IToken);
		IToken IDENTIFIER309 = default(IToken);
		IToken char_literal310 = default(IToken);
		IToken string_literal311 = default(IToken);
		IToken char_literal312 = default(IToken);
		IToken string_literal313 = default(IToken);
		IToken char_literal314 = default(IToken);
		IToken string_literal315 = default(IToken);
		IToken char_literal316 = default(IToken);
		IToken string_literal317 = default(IToken);
		IToken char_literal319 = default(IToken);
		XAstParserRuleReturnScope expression318 = default(XAstParserRuleReturnScope);

		object string_literal308_tree = default(object);
		object IDENTIFIER309_tree = default(object);
		object char_literal310_tree = default(object);
		object string_literal311_tree = default(object);
		object char_literal312_tree = default(object);
		object string_literal313_tree = default(object);
		object char_literal314_tree = default(object);
		object string_literal315_tree = default(object);
		object char_literal316_tree = default(object);
		object string_literal317_tree = default(object);
		object char_literal319_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "jump_statement");
		DebugLocation(487, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return retval; }

			// C.g:488:2: ( 'goto' IDENTIFIER ';' | 'continue' ';' | 'break' ';' | 'return' ';' | 'return' expression ';' )
			int alt74=5;
			try { DebugEnterDecision(74, false);
			switch (input.LA(1))
			{
			case 79:
				{
				alt74 = 1;
				}
				break;
			case 70:
				{
				alt74 = 2;
				}
				break;
			case 66:
				{
				alt74 = 3;
				}
				break;
			case 84:
				{
				int LA74_4 = input.LA(2);

				if ((LA74_4==47))
				{
					alt74 = 4;
				}
				else if ((LA74_4==CHARACTER_LITERAL||LA74_4==DECIMAL_LITERAL||LA74_4==FLOATING_POINT_LITERAL||LA74_4==HEX_LITERAL||LA74_4==IDENTIFIER||LA74_4==OCTAL_LITERAL||LA74_4==STRING_LITERAL||LA74_4==23||LA74_4==28||LA74_4==30||LA74_4==32||(LA74_4>=34 && LA74_4<=35)||(LA74_4>=38 && LA74_4<=39)||LA74_4==87||LA74_4==102))
				{
					alt74 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:488:4: 'goto' IDENTIFIER ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(488, 4);
				string_literal308=(IToken)Match(input,79,Follow._79_in_jump_statement1976); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal308_tree = (object)adaptor.Create(string_literal308, retval);
				adaptor.AddChild(root_0, string_literal308_tree);
				}
				DebugLocation(488, 11);
				IDENTIFIER309=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_jump_statement1978), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER309_tree = (object)adaptor.Create(IDENTIFIER309, retval);
				adaptor.AddChild(root_0, IDENTIFIER309_tree);
				}
				DebugLocation(488, 22);
				char_literal310=(IToken)Match(input,47,Follow._47_in_jump_statement1980); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal310_tree = (object)adaptor.Create(char_literal310, retval);
				adaptor.AddChild(root_0, char_literal310_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:489:4: 'continue' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(489, 4);
				string_literal311=(IToken)Match(input,70,Follow._70_in_jump_statement1985); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal311_tree = (object)adaptor.Create(string_literal311, retval);
				adaptor.AddChild(root_0, string_literal311_tree);
				}
				DebugLocation(489, 15);
				char_literal312=(IToken)Match(input,47,Follow._47_in_jump_statement1987); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal312_tree = (object)adaptor.Create(char_literal312, retval);
				adaptor.AddChild(root_0, char_literal312_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:490:4: 'break' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(490, 4);
				string_literal313=(IToken)Match(input,66,Follow._66_in_jump_statement1992); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal313_tree = (object)adaptor.Create(string_literal313, retval);
				adaptor.AddChild(root_0, string_literal313_tree);
				}
				DebugLocation(490, 12);
				char_literal314=(IToken)Match(input,47,Follow._47_in_jump_statement1994); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal314_tree = (object)adaptor.Create(char_literal314, retval);
				adaptor.AddChild(root_0, char_literal314_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:491:4: 'return' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(491, 4);
				string_literal315=(IToken)Match(input,84,Follow._84_in_jump_statement1999); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal315_tree = (object)adaptor.Create(string_literal315, retval);
				adaptor.AddChild(root_0, string_literal315_tree);
				}
				DebugLocation(491, 13);
				char_literal316=(IToken)Match(input,47,Follow._47_in_jump_statement2001); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal316_tree = (object)adaptor.Create(char_literal316, retval);
				adaptor.AddChild(root_0, char_literal316_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:492:4: 'return' expression ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(492, 4);
				string_literal317=(IToken)Match(input,84,Follow._84_in_jump_statement2006); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal317_tree = (object)adaptor.Create(string_literal317, retval);
				adaptor.AddChild(root_0, string_literal317_tree);
				}
				DebugLocation(492, 13);
				PushFollow(Follow._expression_in_jump_statement2008);
				expression318=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression318.Tree, expression318, retval);
				DebugLocation(492, 24);
				char_literal319=(IToken)Match(input,47,Follow._47_in_jump_statement2010); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal319_tree = (object)adaptor.Create(char_literal319, retval);
				adaptor.AddChild(root_0, char_literal319_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("jump_statement", 72);
			LeaveRule("jump_statement", 72);
			LeaveRule_jump_statement();
			if (state.backtracking > 0) { Memoize(input, 72, jump_statement_StartIndex); }

		}
		DebugLocation(493, 1);
		} finally { DebugExitRule(GrammarFileName, "jump_statement"); }
		return retval;

	}
	// $ANTLR end "jump_statement"

	partial void EnterRule_synpred2_C_fragment();
	partial void LeaveRule_synpred2_C_fragment();

	// $ANTLR start synpred2_C
	public void synpred2_C_fragment()
	{
		EnterRule_synpred2_C_fragment();
		EnterRule("synpred2_C_fragment", 74);
		var retval = new XAstParserRuleReturnScope("synpred2_C_fragment");
		try
		{
			// C.g:82:6: ( declaration_specifiers )
			DebugEnterAlt(1);
			// C.g:82:6: declaration_specifiers
			{
			DebugLocation(82, 6);
			PushFollow(Follow._declaration_specifiers_in_synpred2_C94);
			declaration_specifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_C_fragment", 74);
			LeaveRule("synpred2_C_fragment", 74);
			LeaveRule_synpred2_C_fragment();
		}
	}
	// $ANTLR end synpred2_C

	partial void EnterRule_synpred4_C_fragment();
	partial void LeaveRule_synpred4_C_fragment();

	// $ANTLR start synpred4_C
	public void synpred4_C_fragment()
	{
		EnterRule_synpred4_C_fragment();
		EnterRule("synpred4_C_fragment", 76);
		var retval = new XAstParserRuleReturnScope("synpred4_C_fragment");
		try
		{
			// C.g:82:4: ( ( declaration_specifiers )? declarator ( declaration )* '{' )
			DebugEnterAlt(1);
			// C.g:82:6: ( declaration_specifiers )? declarator ( declaration )* '{'
			{
			DebugLocation(82, 6);
			// C.g:82:6: ( declaration_specifiers )?
			int alt75=2;
			try { DebugEnterSubRule(75);
			try { DebugEnterDecision(75, false);
			int LA75_0 = input.LA(1);

			if (((LA75_0>=63 && LA75_0<=65)||(LA75_0>=68 && LA75_0<=69)||LA75_0==73||(LA75_0>=75 && LA75_0<=77)||(LA75_0>=81 && LA75_0<=83)||(LA75_0>=85 && LA75_0<=86)||(LA75_0>=88 && LA75_0<=89)||(LA75_0>=92 && LA75_0<=95)))
			{
				alt75 = 1;
			}
			else if ((LA75_0==IDENTIFIER))
			{
				switch (input.LA(2))
				{
				case 32:
					{
					alt75 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA75_19 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt75 = 1;
					}
					}
					break;
				case 30:
					{
					int LA75_20 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt75 = 1;
					}
					}
					break;
				case 65:
				case 76:
				case 83:
				case 88:
					{
					int LA75_21 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt75 = 1;
					}
					}
					break;
				case 94:
					{
					int LA75_22 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt75 = 1;
					}
					}
					break;
				case 68:
					{
					int LA75_23 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt75 = 1;
					}
					}
					break;
				case 85:
					{
					int LA75_24 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt75 = 1;
					}
					}
					break;
				case 81:
					{
					int LA75_25 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt75 = 1;
					}
					}
					break;
				case 82:
					{
					int LA75_26 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt75 = 1;
					}
					}
					break;
				case 77:
					{
					int LA75_27 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt75 = 1;
					}
					}
					break;
				case 73:
					{
					int LA75_28 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt75 = 1;
					}
					}
					break;
				case 86:
					{
					int LA75_29 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt75 = 1;
					}
					}
					break;
				case 93:
					{
					int LA75_30 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt75 = 1;
					}
					}
					break;
				case 63:
					{
					int LA75_31 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt75 = 1;
					}
					}
					break;
				case 89:
				case 92:
					{
					int LA75_32 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt75 = 1;
					}
					}
					break;
				case 75:
					{
					int LA75_33 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt75 = 1;
					}
					}
					break;
				case 64:
					{
					int LA75_34 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt75 = 1;
					}
					}
					break;
				case 69:
				case 95:
					{
					int LA75_36 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt75 = 1;
					}
					}
					break;
				}

			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:82:6: declaration_specifiers
				{
				DebugLocation(82, 6);
				PushFollow(Follow._declaration_specifiers_in_synpred4_C94);
				declaration_specifiers();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(75); }

			DebugLocation(82, 30);
			PushFollow(Follow._declarator_in_synpred4_C97);
			declarator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(82, 41);
			// C.g:82:41: ( declaration )*
			try { DebugEnterSubRule(76);
			while (true)
			{
				int alt76=2;
				try { DebugEnterDecision(76, false);
				int LA76_0 = input.LA(1);

				if ((LA76_0==IDENTIFIER||(LA76_0>=63 && LA76_0<=65)||(LA76_0>=68 && LA76_0<=69)||LA76_0==73||(LA76_0>=75 && LA76_0<=77)||(LA76_0>=81 && LA76_0<=83)||(LA76_0>=85 && LA76_0<=86)||(LA76_0>=88 && LA76_0<=89)||(LA76_0>=91 && LA76_0<=95)))
				{
					alt76 = 1;
				}


				} finally { DebugExitDecision(76); }
				switch ( alt76 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:82:41: declaration
					{
					DebugLocation(82, 41);
					PushFollow(Follow._declaration_in_synpred4_C99);
					declaration();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop76;
				}
			}

			loop76:
				;

			} finally { DebugExitSubRule(76); }

			DebugLocation(82, 54);
			Match(input,97,Follow._97_in_synpred4_C102); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred4_C_fragment", 76);
			LeaveRule("synpred4_C_fragment", 76);
			LeaveRule_synpred4_C_fragment();
		}
	}
	// $ANTLR end synpred4_C

	partial void EnterRule_synpred5_C_fragment();
	partial void LeaveRule_synpred5_C_fragment();

	// $ANTLR start synpred5_C
	public void synpred5_C_fragment()
	{
		EnterRule_synpred5_C_fragment();
		EnterRule("synpred5_C_fragment", 77);
		var retval = new XAstParserRuleReturnScope("synpred5_C_fragment");
		try
		{
			// C.g:91:4: ( declaration_specifiers )
			DebugEnterAlt(1);
			// C.g:91:4: declaration_specifiers
			{
			DebugLocation(91, 4);
			PushFollow(Follow._declaration_specifiers_in_synpred5_C134);
			declaration_specifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred5_C_fragment", 77);
			LeaveRule("synpred5_C_fragment", 77);
			LeaveRule_synpred5_C_fragment();
		}
	}
	// $ANTLR end synpred5_C

	partial void EnterRule_synpred9_C_fragment();
	partial void LeaveRule_synpred9_C_fragment();

	// $ANTLR start synpred9_C
	public void synpred9_C_fragment()
	{
		EnterRule_synpred9_C_fragment();
		EnterRule("synpred9_C_fragment", 81);
		var retval = new XAstParserRuleReturnScope("synpred9_C_fragment");
		try
		{
			// C.g:104:31: ( declaration_specifiers )
			DebugEnterAlt(1);
			// C.g:104:31: declaration_specifiers
			{
			DebugLocation(104, 31);
			PushFollow(Follow._declaration_specifiers_in_synpred9_C186);
			declaration_specifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred9_C_fragment", 81);
			LeaveRule("synpred9_C_fragment", 81);
			LeaveRule_synpred9_C_fragment();
		}
	}
	// $ANTLR end synpred9_C

	partial void EnterRule_synpred13_C_fragment();
	partial void LeaveRule_synpred13_C_fragment();

	// $ANTLR start synpred13_C
	public void synpred13_C_fragment()
	{
		EnterRule_synpred13_C_fragment();
		EnterRule("synpred13_C_fragment", 85);
		var retval = new XAstParserRuleReturnScope("synpred13_C_fragment");
		try
		{
			// C.g:111:7: ( type_specifier )
			DebugEnterAlt(1);
			// C.g:111:7: type_specifier
			{
			DebugLocation(111, 7);
			PushFollow(Follow._type_specifier_in_synpred13_C234);
			type_specifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred13_C_fragment", 85);
			LeaveRule("synpred13_C_fragment", 85);
			LeaveRule_synpred13_C_fragment();
		}
	}
	// $ANTLR end synpred13_C

	partial void EnterRule_synpred37_C_fragment();
	partial void LeaveRule_synpred37_C_fragment();

	// $ANTLR start synpred37_C
	public void synpred37_C_fragment()
	{
		EnterRule_synpred37_C_fragment();
		EnterRule("synpred37_C_fragment", 109);
		var retval = new XAstParserRuleReturnScope("synpred37_C_fragment");
		try
		{
			// C.g:176:23: ( type_specifier )
			DebugEnterAlt(1);
			// C.g:176:23: type_specifier
			{
			DebugLocation(176, 23);
			PushFollow(Follow._type_specifier_in_synpred37_C503);
			type_specifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred37_C_fragment", 109);
			LeaveRule("synpred37_C_fragment", 109);
			LeaveRule_synpred37_C_fragment();
		}
	}
	// $ANTLR end synpred37_C

	partial void EnterRule_synpred48_C_fragment();
	partial void LeaveRule_synpred48_C_fragment();

	// $ANTLR start synpred48_C
	public void synpred48_C_fragment()
	{
		EnterRule_synpred48_C_fragment();
		EnterRule("synpred48_C_fragment", 120);
		var retval = new XAstParserRuleReturnScope("synpred48_C_fragment");
		try
		{
			// C.g:210:4: ( ( pointer )? direct_declarator )
			DebugEnterAlt(1);
			// C.g:210:4: ( pointer )? direct_declarator
			{
			DebugLocation(210, 4);
			// C.g:210:4: ( pointer )?
			int alt82=2;
			try { DebugEnterSubRule(82);
			try { DebugEnterDecision(82, false);
			int LA82_0 = input.LA(1);

			if ((LA82_0==32))
			{
				alt82 = 1;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:210:4: pointer
				{
				DebugLocation(210, 4);
				PushFollow(Follow._pointer_in_synpred48_C663);
				pointer();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(82); }

			DebugLocation(210, 13);
			PushFollow(Follow._direct_declarator_in_synpred48_C666);
			direct_declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred48_C_fragment", 120);
			LeaveRule("synpred48_C_fragment", 120);
			LeaveRule_synpred48_C_fragment();
		}
	}
	// $ANTLR end synpred48_C

	partial void EnterRule_synpred50_C_fragment();
	partial void LeaveRule_synpred50_C_fragment();

	// $ANTLR start synpred50_C
	public void synpred50_C_fragment()
	{
		EnterRule_synpred50_C_fragment();
		EnterRule("synpred50_C_fragment", 122);
		var retval = new XAstParserRuleReturnScope("synpred50_C_fragment");
		try
		{
			// C.g:224:3: ( declarator_suffix )
			DebugEnterAlt(1);
			// C.g:224:3: declarator_suffix
			{
			DebugLocation(224, 3);
			PushFollow(Follow._declarator_suffix_in_synpred50_C709);
			declarator_suffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred50_C_fragment", 122);
			LeaveRule("synpred50_C_fragment", 122);
			LeaveRule_synpred50_C_fragment();
		}
	}
	// $ANTLR end synpred50_C

	partial void EnterRule_synpred53_C_fragment();
	partial void LeaveRule_synpred53_C_fragment();

	// $ANTLR start synpred53_C
	public void synpred53_C_fragment()
	{
		EnterRule_synpred53_C_fragment();
		EnterRule("synpred53_C_fragment", 125);
		var retval = new XAstParserRuleReturnScope("synpred53_C_fragment");
		try
		{
			// C.g:230:6: ( '(' parameter_type_list ')' )
			DebugEnterAlt(1);
			// C.g:230:6: '(' parameter_type_list ')'
			{
			DebugLocation(230, 6);
			Match(input,30,Follow._30_in_synpred53_C743); if (state.failed) return;
			DebugLocation(230, 10);
			PushFollow(Follow._parameter_type_list_in_synpred53_C745);
			parameter_type_list();
			PopFollow();
			if (state.failed) return;
			DebugLocation(230, 30);
			Match(input,31,Follow._31_in_synpred53_C747); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred53_C_fragment", 125);
			LeaveRule("synpred53_C_fragment", 125);
			LeaveRule_synpred53_C_fragment();
		}
	}
	// $ANTLR end synpred53_C

	partial void EnterRule_synpred54_C_fragment();
	partial void LeaveRule_synpred54_C_fragment();

	// $ANTLR start synpred54_C
	public void synpred54_C_fragment()
	{
		EnterRule_synpred54_C_fragment();
		EnterRule("synpred54_C_fragment", 126);
		var retval = new XAstParserRuleReturnScope("synpred54_C_fragment");
		try
		{
			// C.g:231:6: ( '(' identifier_list ')' )
			DebugEnterAlt(1);
			// C.g:231:6: '(' identifier_list ')'
			{
			DebugLocation(231, 6);
			Match(input,30,Follow._30_in_synpred54_C754); if (state.failed) return;
			DebugLocation(231, 10);
			PushFollow(Follow._identifier_list_in_synpred54_C756);
			identifier_list();
			PopFollow();
			if (state.failed) return;
			DebugLocation(231, 26);
			Match(input,31,Follow._31_in_synpred54_C758); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred54_C_fragment", 126);
			LeaveRule("synpred54_C_fragment", 126);
			LeaveRule_synpred54_C_fragment();
		}
	}
	// $ANTLR end synpred54_C

	partial void EnterRule_synpred55_C_fragment();
	partial void LeaveRule_synpred55_C_fragment();

	// $ANTLR start synpred55_C
	public void synpred55_C_fragment()
	{
		EnterRule_synpred55_C_fragment();
		EnterRule("synpred55_C_fragment", 127);
		var retval = new XAstParserRuleReturnScope("synpred55_C_fragment");
		try
		{
			// C.g:236:8: ( type_qualifier )
			DebugEnterAlt(1);
			// C.g:236:8: type_qualifier
			{
			DebugLocation(236, 8);
			PushFollow(Follow._type_qualifier_in_synpred55_C780);
			type_qualifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred55_C_fragment", 127);
			LeaveRule("synpred55_C_fragment", 127);
			LeaveRule_synpred55_C_fragment();
		}
	}
	// $ANTLR end synpred55_C

	partial void EnterRule_synpred56_C_fragment();
	partial void LeaveRule_synpred56_C_fragment();

	// $ANTLR start synpred56_C
	public void synpred56_C_fragment()
	{
		EnterRule_synpred56_C_fragment();
		EnterRule("synpred56_C_fragment", 128);
		var retval = new XAstParserRuleReturnScope("synpred56_C_fragment");
		try
		{
			// C.g:236:24: ( pointer )
			DebugEnterAlt(1);
			// C.g:236:24: pointer
			{
			DebugLocation(236, 24);
			PushFollow(Follow._pointer_in_synpred56_C783);
			pointer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred56_C_fragment", 128);
			LeaveRule("synpred56_C_fragment", 128);
			LeaveRule_synpred56_C_fragment();
		}
	}
	// $ANTLR end synpred56_C

	partial void EnterRule_synpred57_C_fragment();
	partial void LeaveRule_synpred57_C_fragment();

	// $ANTLR start synpred57_C
	public void synpred57_C_fragment()
	{
		EnterRule_synpred57_C_fragment();
		EnterRule("synpred57_C_fragment", 129);
		var retval = new XAstParserRuleReturnScope("synpred57_C_fragment");
		try
		{
			// C.g:236:4: ( '*' ( type_qualifier )+ ( pointer )? )
			DebugEnterAlt(1);
			// C.g:236:4: '*' ( type_qualifier )+ ( pointer )?
			{
			DebugLocation(236, 4);
			Match(input,32,Follow._32_in_synpred57_C778); if (state.failed) return;
			DebugLocation(236, 8);
			// C.g:236:8: ( type_qualifier )+
			int cnt83=0;
			try { DebugEnterSubRule(83);
			while (true)
			{
				int alt83=2;
				try { DebugEnterDecision(83, false);
				int LA83_0 = input.LA(1);

				if ((LA83_0==64||LA83_0==69||LA83_0==95))
				{
					alt83 = 1;
				}


				} finally { DebugExitDecision(83); }
				switch (alt83)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:236:8: type_qualifier
					{
					DebugLocation(236, 8);
					PushFollow(Follow._type_qualifier_in_synpred57_C780);
					type_qualifier();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt83 >= 1)
						goto loop83;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee83 = new EarlyExitException( 83, input );
					DebugRecognitionException(eee83);
					throw eee83;
				}
				cnt83++;
			}
			loop83:
				;

			} finally { DebugExitSubRule(83); }

			DebugLocation(236, 24);
			// C.g:236:24: ( pointer )?
			int alt84=2;
			try { DebugEnterSubRule(84);
			try { DebugEnterDecision(84, false);
			int LA84_0 = input.LA(1);

			if ((LA84_0==32))
			{
				alt84 = 1;
			}
			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:236:24: pointer
				{
				DebugLocation(236, 24);
				PushFollow(Follow._pointer_in_synpred57_C783);
				pointer();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(84); }


			}

		}
		finally
		{
			TraceOut("synpred57_C_fragment", 129);
			LeaveRule("synpred57_C_fragment", 129);
			LeaveRule_synpred57_C_fragment();
		}
	}
	// $ANTLR end synpred57_C

	partial void EnterRule_synpred58_C_fragment();
	partial void LeaveRule_synpred58_C_fragment();

	// $ANTLR start synpred58_C
	public void synpred58_C_fragment()
	{
		EnterRule_synpred58_C_fragment();
		EnterRule("synpred58_C_fragment", 130);
		var retval = new XAstParserRuleReturnScope("synpred58_C_fragment");
		try
		{
			// C.g:237:4: ( '*' pointer )
			DebugEnterAlt(1);
			// C.g:237:4: '*' pointer
			{
			DebugLocation(237, 4);
			Match(input,32,Follow._32_in_synpred58_C789); if (state.failed) return;
			DebugLocation(237, 8);
			PushFollow(Follow._pointer_in_synpred58_C791);
			pointer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred58_C_fragment", 130);
			LeaveRule("synpred58_C_fragment", 130);
			LeaveRule_synpred58_C_fragment();
		}
	}
	// $ANTLR end synpred58_C

	partial void EnterRule_synpred61_C_fragment();
	partial void LeaveRule_synpred61_C_fragment();

	// $ANTLR start synpred61_C
	public void synpred61_C_fragment()
	{
		EnterRule_synpred61_C_fragment();
		EnterRule("synpred61_C_fragment", 133);
		var retval = new XAstParserRuleReturnScope("synpred61_C_fragment");
		try
		{
			// C.g:250:28: ( declarator )
			DebugEnterAlt(1);
			// C.g:250:28: declarator
			{
			DebugLocation(250, 28);
			PushFollow(Follow._declarator_in_synpred61_C846);
			declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred61_C_fragment", 133);
			LeaveRule("synpred61_C_fragment", 133);
			LeaveRule_synpred61_C_fragment();
		}
	}
	// $ANTLR end synpred61_C

	partial void EnterRule_synpred62_C_fragment();
	partial void LeaveRule_synpred62_C_fragment();

	// $ANTLR start synpred62_C
	public void synpred62_C_fragment()
	{
		EnterRule_synpred62_C_fragment();
		EnterRule("synpred62_C_fragment", 134);
		var retval = new XAstParserRuleReturnScope("synpred62_C_fragment");
		try
		{
			// C.g:250:39: ( abstract_declarator )
			DebugEnterAlt(1);
			// C.g:250:39: abstract_declarator
			{
			DebugLocation(250, 39);
			PushFollow(Follow._abstract_declarator_in_synpred62_C848);
			abstract_declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred62_C_fragment", 134);
			LeaveRule("synpred62_C_fragment", 134);
			LeaveRule_synpred62_C_fragment();
		}
	}
	// $ANTLR end synpred62_C

	partial void EnterRule_synpred65_C_fragment();
	partial void LeaveRule_synpred65_C_fragment();

	// $ANTLR start synpred65_C
	public void synpred65_C_fragment()
	{
		EnterRule_synpred65_C_fragment();
		EnterRule("synpred65_C_fragment", 137);
		var retval = new XAstParserRuleReturnScope("synpred65_C_fragment");
		try
		{
			// C.g:262:12: ( direct_abstract_declarator )
			DebugEnterAlt(1);
			// C.g:262:12: direct_abstract_declarator
			{
			DebugLocation(262, 12);
			PushFollow(Follow._direct_abstract_declarator_in_synpred65_C895);
			direct_abstract_declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred65_C_fragment", 137);
			LeaveRule("synpred65_C_fragment", 137);
			LeaveRule_synpred65_C_fragment();
		}
	}
	// $ANTLR end synpred65_C

	partial void EnterRule_synpred68_C_fragment();
	partial void LeaveRule_synpred68_C_fragment();

	// $ANTLR start synpred68_C
	public void synpred68_C_fragment()
	{
		EnterRule_synpred68_C_fragment();
		EnterRule("synpred68_C_fragment", 140);
		var retval = new XAstParserRuleReturnScope("synpred68_C_fragment");
		try
		{
			// C.g:267:65: ( abstract_declarator_suffix )
			DebugEnterAlt(1);
			// C.g:267:65: abstract_declarator_suffix
			{
			DebugLocation(267, 65);
			PushFollow(Follow._abstract_declarator_suffix_in_synpred68_C926);
			abstract_declarator_suffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred68_C_fragment", 140);
			LeaveRule("synpred68_C_fragment", 140);
			LeaveRule_synpred68_C_fragment();
		}
	}
	// $ANTLR end synpred68_C

	partial void EnterRule_synpred81_C_fragment();
	partial void LeaveRule_synpred81_C_fragment();

	// $ANTLR start synpred81_C
	public void synpred81_C_fragment()
	{
		EnterRule_synpred81_C_fragment();
		EnterRule("synpred81_C_fragment", 153);
		var retval = new XAstParserRuleReturnScope("synpred81_C_fragment");
		try
		{
			// C.g:301:4: ( '(' type_name ')' cast_expression )
			DebugEnterAlt(1);
			// C.g:301:4: '(' type_name ')' cast_expression
			{
			DebugLocation(301, 4);
			Match(input,30,Follow._30_in_synpred81_C1098); if (state.failed) return;
			DebugLocation(301, 8);
			PushFollow(Follow._type_name_in_synpred81_C1100);
			type_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(301, 18);
			Match(input,31,Follow._31_in_synpred81_C1102); if (state.failed) return;
			DebugLocation(301, 22);
			PushFollow(Follow._cast_expression_in_synpred81_C1104);
			cast_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred81_C_fragment", 153);
			LeaveRule("synpred81_C_fragment", 153);
			LeaveRule_synpred81_C_fragment();
		}
	}
	// $ANTLR end synpred81_C

	partial void EnterRule_synpred86_C_fragment();
	partial void LeaveRule_synpred86_C_fragment();

	// $ANTLR start synpred86_C
	public void synpred86_C_fragment()
	{
		EnterRule_synpred86_C_fragment();
		EnterRule("synpred86_C_fragment", 158);
		var retval = new XAstParserRuleReturnScope("synpred86_C_fragment");
		try
		{
			// C.g:310:4: ( 'sizeof' unary_expression )
			DebugEnterAlt(1);
			// C.g:310:4: 'sizeof' unary_expression
			{
			DebugLocation(310, 4);
			Match(input,87,Follow._87_in_synpred86_C1146); if (state.failed) return;
			DebugLocation(310, 13);
			PushFollow(Follow._unary_expression_in_synpred86_C1148);
			unary_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred86_C_fragment", 158);
			LeaveRule("synpred86_C_fragment", 158);
			LeaveRule_synpred86_C_fragment();
		}
	}
	// $ANTLR end synpred86_C

	partial void EnterRule_synpred107_C_fragment();
	partial void LeaveRule_synpred107_C_fragment();

	// $ANTLR start synpred107_C
	public void synpred107_C_fragment()
	{
		EnterRule_synpred107_C_fragment();
		EnterRule("synpred107_C_fragment", 179);
		var retval = new XAstParserRuleReturnScope("synpred107_C_fragment");
		try
		{
			// C.g:385:4: ( lvalue assignment_operator assignment_expression )
			DebugEnterAlt(1);
			// C.g:385:4: lvalue assignment_operator assignment_expression
			{
			DebugLocation(385, 4);
			PushFollow(Follow._lvalue_in_synpred107_C1464);
			lvalue();
			PopFollow();
			if (state.failed) return;
			DebugLocation(385, 11);
			PushFollow(Follow._assignment_operator_in_synpred107_C1466);
			assignment_operator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(385, 31);
			PushFollow(Follow._assignment_expression_in_synpred107_C1468);
			assignment_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred107_C_fragment", 179);
			LeaveRule("synpred107_C_fragment", 179);
			LeaveRule_synpred107_C_fragment();
		}
	}
	// $ANTLR end synpred107_C

	partial void EnterRule_synpred139_C_fragment();
	partial void LeaveRule_synpred139_C_fragment();

	// $ANTLR start synpred139_C
	public void synpred139_C_fragment()
	{
		EnterRule_synpred139_C_fragment();
		EnterRule("synpred139_C_fragment", 211);
		var retval = new XAstParserRuleReturnScope("synpred139_C_fragment");
		try
		{
			// C.g:464:8: ( declaration )
			DebugEnterAlt(1);
			// C.g:464:8: declaration
			{
			DebugLocation(464, 8);
			PushFollow(Follow._declaration_in_synpred139_C1824);
			declaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred139_C_fragment", 211);
			LeaveRule("synpred139_C_fragment", 211);
			LeaveRule_synpred139_C_fragment();
		}
	}
	// $ANTLR end synpred139_C
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA27 dfa27;
	private DFA29 dfa29;
	private DFA54 dfa54;
	private DFA66 dfa66;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa27 = new DFA27( this, SpecialStateTransition27 );
		dfa29 = new DFA29( this, SpecialStateTransition29 );
		dfa54 = new DFA54( this, SpecialStateTransition54 );
		dfa66 = new DFA66( this, SpecialStateTransition66 );
	}

	private class DFA27 : DFA
	{
		private const string DFA27_eotS =
			"\x3D\xFFFF";
		private const string DFA27_eofS =
			"\x1\x1\x3C\xFFFF";
		private const string DFA27_minS =
			"\x1\xD\x19\xFFFF\x1\xD\x1\x4\x1\x0\x1\xFFFF\x1\x0\x2\xFFFF\x1B\x0\x1"+
			"\xFFFF";
		private const string DFA27_maxS =
			"\x1\x61\x19\xFFFF\x1\x5F\x1\x66\x1\x0\x1\xFFFF\x1\x0\x2\xFFFF\x1B\x0"+
			"\x1\xFFFF";
		private const string DFA27_acceptS =
			"\x1\xFFFF\x1\x2\x3A\xFFFF\x1\x1";
		private const string DFA27_specialS =
			"\x1C\xFFFF\x1\x0\x1\xFFFF\x1\x1\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6"+
			"\x1\x7\x1\x8\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11"+
			"\x1\x12\x1\x13\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B"+
			"\x1\x1C\x1\xFFFF}>";
		private static readonly string[] DFA27_transitionS =
			{
				"\x1\x1\x10\xFFFF\x1\x1A\x2\x1\x4\xFFFF\x1\x1\x8\xFFFF\x2\x1\x4\xFFFF"+
				"\x1\x1\x6\xFFFF\x1\x1B\x3\xFFFF\x3\x1\x2\xFFFF\x2\x1\x3\xFFFF\x1\x1"+
				"\x1\xFFFF\x3\x1\x3\xFFFF\x3\x1\x1\xFFFF\x2\x1\x1\xFFFF\x2\x1\x1\xFFFF"+
				"\x5\x1\x1\xFFFF\x1\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x1E\x10\xFFFF\x1\x1\x1\x1C\x1\x1\x1A\xFFFF\x1\x1\x3\xFFFF\x1\x2B"+
				"\x1\x2E\x1\x21\x2\xFFFF\x1\x23\x1\x2E\x3\xFFFF\x1\x28\x1\xFFFF\x1\x2D"+
				"\x1\x21\x1\x27\x3\xFFFF\x1\x25\x1\x26\x1\x21\x1\xFFFF\x1\x24\x1\x29"+
				"\x1\xFFFF\x1\x21\x1\x2C\x2\xFFFF\x1\x2C\x1\x2A\x1\x22\x1\x2E",
				"\x1\x35\x1\xFFFF\x1\x34\x2\xFFFF\x1\x37\x1\xFFFF\x1\x32\x1\xFFFF\x1"+
				"\x31\x4\xFFFF\x1\x33\x1\xFFFF\x1\x36\x2\xFFFF\x1\x3A\x4\xFFFF\x1\x3A"+
				"\x1\xFFFF\x1\x30\x1\xFFFF\x1\x3A\x1\xFFFF\x1\x3A\x1\x38\x2\xFFFF\x1"+
				"\x3A\x1\x39\x14\xFFFF\x1\x2F\x1A\xFFFF\x1\x3B\xE\xFFFF\x1\x3A",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA27_eot = DFA.UnpackEncodedString(DFA27_eotS);
		private static readonly short[] DFA27_eof = DFA.UnpackEncodedString(DFA27_eofS);
		private static readonly char[] DFA27_min = DFA.UnpackEncodedStringToUnsignedChars(DFA27_minS);
		private static readonly char[] DFA27_max = DFA.UnpackEncodedStringToUnsignedChars(DFA27_maxS);
		private static readonly short[] DFA27_accept = DFA.UnpackEncodedString(DFA27_acceptS);
		private static readonly short[] DFA27_special = DFA.UnpackEncodedString(DFA27_specialS);
		private static readonly short[][] DFA27_transition;

		static DFA27()
		{
			int numStates = DFA27_transitionS.Length;
			DFA27_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA27_transition[i] = DFA.UnpackEncodedString(DFA27_transitionS[i]);
			}
		}

		public DFA27( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 27;
			this.eot = DFA27_eot;
			this.eof = DFA27_eof;
			this.min = DFA27_min;
			this.max = DFA27_max;
			this.accept = DFA27_accept;
			this.special = DFA27_special;
			this.transition = DFA27_transition;
		}

		public override string Description { get { return "()* loopback of 224:3: ( declarator_suffix )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition27(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA27_28 = input.LA(1);


				int index27_28 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_28);
				if (s >= 0) return s;
				break;

			case 1:
				int LA27_30 = input.LA(1);


				int index27_30 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_30);
				if (s >= 0) return s;
				break;

			case 2:
				int LA27_33 = input.LA(1);


				int index27_33 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_33);
				if (s >= 0) return s;
				break;

			case 3:
				int LA27_34 = input.LA(1);


				int index27_34 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_34);
				if (s >= 0) return s;
				break;

			case 4:
				int LA27_35 = input.LA(1);


				int index27_35 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_35);
				if (s >= 0) return s;
				break;

			case 5:
				int LA27_36 = input.LA(1);


				int index27_36 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_36);
				if (s >= 0) return s;
				break;

			case 6:
				int LA27_37 = input.LA(1);


				int index27_37 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_37);
				if (s >= 0) return s;
				break;

			case 7:
				int LA27_38 = input.LA(1);


				int index27_38 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_38);
				if (s >= 0) return s;
				break;

			case 8:
				int LA27_39 = input.LA(1);


				int index27_39 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_39);
				if (s >= 0) return s;
				break;

			case 9:
				int LA27_40 = input.LA(1);


				int index27_40 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_40);
				if (s >= 0) return s;
				break;

			case 10:
				int LA27_41 = input.LA(1);


				int index27_41 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_41);
				if (s >= 0) return s;
				break;

			case 11:
				int LA27_42 = input.LA(1);


				int index27_42 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_42);
				if (s >= 0) return s;
				break;

			case 12:
				int LA27_43 = input.LA(1);


				int index27_43 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_43);
				if (s >= 0) return s;
				break;

			case 13:
				int LA27_44 = input.LA(1);


				int index27_44 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_44);
				if (s >= 0) return s;
				break;

			case 14:
				int LA27_45 = input.LA(1);


				int index27_45 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_45);
				if (s >= 0) return s;
				break;

			case 15:
				int LA27_46 = input.LA(1);


				int index27_46 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_46);
				if (s >= 0) return s;
				break;

			case 16:
				int LA27_47 = input.LA(1);


				int index27_47 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_47);
				if (s >= 0) return s;
				break;

			case 17:
				int LA27_48 = input.LA(1);


				int index27_48 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_48);
				if (s >= 0) return s;
				break;

			case 18:
				int LA27_49 = input.LA(1);


				int index27_49 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_49);
				if (s >= 0) return s;
				break;

			case 19:
				int LA27_50 = input.LA(1);


				int index27_50 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_50);
				if (s >= 0) return s;
				break;

			case 20:
				int LA27_51 = input.LA(1);


				int index27_51 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_51);
				if (s >= 0) return s;
				break;

			case 21:
				int LA27_52 = input.LA(1);


				int index27_52 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_52);
				if (s >= 0) return s;
				break;

			case 22:
				int LA27_53 = input.LA(1);


				int index27_53 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_53);
				if (s >= 0) return s;
				break;

			case 23:
				int LA27_54 = input.LA(1);


				int index27_54 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_54);
				if (s >= 0) return s;
				break;

			case 24:
				int LA27_55 = input.LA(1);


				int index27_55 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_55);
				if (s >= 0) return s;
				break;

			case 25:
				int LA27_56 = input.LA(1);


				int index27_56 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_56);
				if (s >= 0) return s;
				break;

			case 26:
				int LA27_57 = input.LA(1);


				int index27_57 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_57);
				if (s >= 0) return s;
				break;

			case 27:
				int LA27_58 = input.LA(1);


				int index27_58 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_58);
				if (s >= 0) return s;
				break;

			case 28:
				int LA27_59 = input.LA(1);


				int index27_59 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred50_C_fragment))) {s = 60;}

				else if ((true)) {s = 1;}


				input.Seek(index27_59);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 27, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA29 : DFA
	{
		private const string DFA29_eotS =
			"\x53\xFFFF";
		private const string DFA29_eofS =
			"\x1\x1\x52\xFFFF";
		private const string DFA29_minS =
			"\x1\xD\x3\xFFFF\x1\x0\xE\xFFFF\x1\x0\x3F\xFFFF";
		private const string DFA29_maxS =
			"\x1\x61\x3\xFFFF\x1\x0\xE\xFFFF\x1\x0\x3F\xFFFF";
		private const string DFA29_acceptS =
			"\x1\xFFFF\x1\x2\x35\xFFFF\x1\x1\x1B\xFFFF";
		private const string DFA29_specialS =
			"\x4\xFFFF\x1\x0\xE\xFFFF\x1\x1\x3F\xFFFF}>";
		private static readonly string[] DFA29_transitionS =
			{
				"\x1\x1\x10\xFFFF\x3\x1\x4\xFFFF\x1\x1\x8\xFFFF\x2\x1\x4\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x1\x3\xFFFF\x1\x1\x1\x4\x1\x1\x2\xFFFF\x1\x1\x1\x13\x3"+
				"\xFFFF\x1\x1\x1\xFFFF\x3\x1\x3\xFFFF\x3\x1\x1\xFFFF\x2\x1\x1\xFFFF\x2"+
				"\x1\x1\xFFFF\x4\x1\x1\x13\x1\xFFFF\x1\x1",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA29_eot = DFA.UnpackEncodedString(DFA29_eotS);
		private static readonly short[] DFA29_eof = DFA.UnpackEncodedString(DFA29_eofS);
		private static readonly char[] DFA29_min = DFA.UnpackEncodedStringToUnsignedChars(DFA29_minS);
		private static readonly char[] DFA29_max = DFA.UnpackEncodedStringToUnsignedChars(DFA29_maxS);
		private static readonly short[] DFA29_accept = DFA.UnpackEncodedString(DFA29_acceptS);
		private static readonly short[] DFA29_special = DFA.UnpackEncodedString(DFA29_specialS);
		private static readonly short[][] DFA29_transition;

		static DFA29()
		{
			int numStates = DFA29_transitionS.Length;
			DFA29_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA29_transition[i] = DFA.UnpackEncodedString(DFA29_transitionS[i]);
			}
		}

		public DFA29( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 29;
			this.eot = DFA29_eot;
			this.eof = DFA29_eof;
			this.min = DFA29_min;
			this.max = DFA29_max;
			this.accept = DFA29_accept;
			this.special = DFA29_special;
			this.transition = DFA29_transition;
		}

		public override string Description { get { return "()+ loopback of 236:8: ( type_qualifier )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition29(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA29_4 = input.LA(1);


				int index29_4 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred55_C_fragment))) {s = 55;}

				else if ((true)) {s = 1;}


				input.Seek(index29_4);
				if (s >= 0) return s;
				break;

			case 1:
				int LA29_19 = input.LA(1);


				int index29_19 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred55_C_fragment))) {s = 55;}

				else if ((true)) {s = 1;}


				input.Seek(index29_19);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 29, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA54 : DFA
	{
		private const string DFA54_eotS =
			"\x11A\xFFFF";
		private const string DFA54_eofS =
			"\x1\xFFFF\x7\x14\x112\xFFFF";
		private const string DFA54_minS =
			"\x1\x4\x7\x18\x5\x4\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6"+
			"\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\xC\x0\xD"+
			"\xFFFF\x30\x0";
		private const string DFA54_maxS =
			"\x1\x66\x7\x65\x5\x66\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF"+
			"\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\xC\x0"+
			"\xD\xFFFF\x30\x0";
		private const string DFA54_acceptS =
			"\x13\xFFFF\x1\x1\x1\x2\x105\xFFFF";
		private const string DFA54_specialS =
			"\xD\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x16\xFFFF\x1\x6\x1\x7\x1"+
			"\x8\x1\x9\x1\xA\x1\xB\x16\xFFFF\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11"+
			"\x16\xFFFF\x1\x12\x1\x13\x1\x14\x1\x15\x1\x16\x1\x17\x16\xFFFF\x1\x18"+
			"\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x16\xFFFF\x1\x1E\x1\x1F\x1\x20\x1"+
			"\x21\x1\x22\x1\x23\x16\xFFFF\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28\x1\x29"+
			"\x16\xFFFF\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1"+
			"\x32\x1\x33\x1\x34\x1\x35\xD\xFFFF\x1\x36\x1\x37\x1\x38\x1\x39\x1\x3A"+
			"\x1\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x1\x40\x1\x41\x1\x42\x1\x43\x1\x44"+
			"\x1\x45\x1\x46\x1\x47\x1\x48\x1\x49\x1\x4A\x1\x4B\x1\x4C\x1\x4D\x1\x4E"+
			"\x1\x4F\x1\x50\x1\x51\x1\x52\x1\x53\x1\x54\x1\x55\x1\x56\x1\x57\x1\x58"+
			"\x1\x59\x1\x5A\x1\x5B\x1\x5C\x1\x5D\x1\x5E\x1\x5F\x1\x60\x1\x61\x1\x62"+
			"\x1\x63\x1\x64\x1\x65}>";
		private static readonly string[] DFA54_transitionS =
			{
				"\x1\x5\x1\xFFFF\x1\x4\x2\xFFFF\x1\x7\x1\xFFFF\x1\x2\x1\xFFFF\x1\x1\x4"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x6\x2\xFFFF\x1\xB\x4\xFFFF\x1\xB\x1\xFFFF\x1"+
				"\x8\x1\xFFFF\x1\xB\x1\xFFFF\x1\xB\x1\x9\x2\xFFFF\x1\xB\x1\xA\x2F\xFFFF"+
				"\x1\xC\xE\xFFFF\x1\xB",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\xE\x2\x14\x1\x13\x1\x14\x1\x11\x1\x13"+
				"\x2\x14\x1\x12\x1\x13\x1\x10\x1\xF\x1\xFFFF\x1\x14\x1\x13\x4\x14\x1"+
				"\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\xD\x2\x14\x1\x13\x23\xFFFF"+
				"\x1\x14\x1\x13\x2\x14",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\x2A\x2\x14\x1\x13\x1\x14\x1\x2D\x1"+
				"\x13\x2\x14\x1\x2E\x1\x13\x1\x2C\x1\x2B\x1\xFFFF\x1\x14\x1\x13\x4\x14"+
				"\x1\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\x29\x2\x14\x1\x13\x23"+
				"\xFFFF\x1\x14\x1\x13\x2\x14",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\x46\x2\x14\x1\x13\x1\x14\x1\x49\x1"+
				"\x13\x2\x14\x1\x4A\x1\x13\x1\x48\x1\x47\x1\xFFFF\x1\x14\x1\x13\x4\x14"+
				"\x1\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\x45\x2\x14\x1\x13\x23"+
				"\xFFFF\x1\x14\x1\x13\x2\x14",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\x62\x2\x14\x1\x13\x1\x14\x1\x65\x1"+
				"\x13\x2\x14\x1\x66\x1\x13\x1\x64\x1\x63\x1\xFFFF\x1\x14\x1\x13\x4\x14"+
				"\x1\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\x61\x2\x14\x1\x13\x23"+
				"\xFFFF\x1\x14\x1\x13\x2\x14",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\x7E\x2\x14\x1\x13\x1\x14\x1\x81\x1"+
				"\x13\x2\x14\x1\x82\x1\x13\x1\x80\x1\x7F\x1\xFFFF\x1\x14\x1\x13\x4\x14"+
				"\x1\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\x7D\x2\x14\x1\x13\x23"+
				"\xFFFF\x1\x14\x1\x13\x2\x14",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\x9A\x2\x14\x1\x13\x1\x14\x1\x9D\x1"+
				"\x13\x2\x14\x1\x9E\x1\x13\x1\x9C\x1\x9B\x1\xFFFF\x1\x14\x1\x13\x4\x14"+
				"\x1\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\x99\x2\x14\x1\x13\x23"+
				"\xFFFF\x1\x14\x1\x13\x2\x14",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\xB6\x2\x14\x1\x13\x1\x14\x1\xB9\x1"+
				"\x13\x2\x14\x1\xBA\x1\x13\x1\xB8\x1\xB7\x1\xFFFF\x1\x14\x1\x13\x4\x14"+
				"\x1\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\xB5\x2\x14\x1\x13\x23"+
				"\xFFFF\x1\x14\x1\x13\x2\x14",
				"\x1\xD5\x1\xFFFF\x1\xD4\x2\xFFFF\x1\xD7\x1\xFFFF\x1\xD2\x1\xFFFF\x1"+
				"\xD1\x4\xFFFF\x1\xD3\x1\xFFFF\x1\xD6\x2\xFFFF\x1\xDB\x4\xFFFF\x1\xDB"+
				"\x1\xFFFF\x1\xD8\x1\xFFFF\x1\xDB\x1\xFFFF\x1\xDB\x1\xD9\x2\xFFFF\x1"+
				"\xDB\x1\xDA\x17\xFFFF\x2\x14\x3\xFFFF\x2\x14\x3\xFFFF\x1\x14\x1\xFFFF"+
				"\x1\x14\x1\xFFFF\x1\x14\x3\xFFFF\x2\x14\x2\xFFFF\x2\x14\x1\xDC\x1\xFFFF"+
				"\x1\x14\x2\xFFFF\x4\x14\x6\xFFFF\x1\xDB",
				"\x1\xEE\x1\xFFFF\x1\xED\x2\xFFFF\x1\xF0\x1\xFFFF\x1\xEB\x1\xFFFF\x1"+
				"\xEA\x4\xFFFF\x1\xEC\x1\xFFFF\x1\xEF\x2\xFFFF\x1\xF4\x4\xFFFF\x1\xF4"+
				"\x1\xFFFF\x1\xF1\x1\xFFFF\x1\xF4\x1\xFFFF\x1\xF4\x1\xF2\x2\xFFFF\x1"+
				"\xF4\x1\xF3\x2F\xFFFF\x1\xF5\xE\xFFFF\x1\xF4",
				"\x1\xFA\x1\xFFFF\x1\xF9\x2\xFFFF\x1\xFC\x1\xFFFF\x1\xF7\x1\xFFFF\x1"+
				"\xF6\x4\xFFFF\x1\xF8\x1\xFFFF\x1\xFB\x2\xFFFF\x1\x100\x4\xFFFF\x1\x100"+
				"\x1\xFFFF\x1\xFD\x1\xFFFF\x1\x100\x1\xFFFF\x1\x100\x1\xFE\x2\xFFFF\x1"+
				"\x100\x1\xFF\x2F\xFFFF\x1\x101\xE\xFFFF\x1\x100",
				"\x1\x107\x1\xFFFF\x1\x106\x2\xFFFF\x1\x109\x1\xFFFF\x1\x104\x1\xFFFF"+
				"\x1\x103\x4\xFFFF\x1\x105\x1\xFFFF\x1\x108\x2\xFFFF\x1\x10C\x4\xFFFF"+
				"\x1\x10C\x1\xFFFF\x1\x102\x1\xFFFF\x1\x10C\x1\xFFFF\x1\x10C\x1\x10A"+
				"\x2\xFFFF\x1\x10C\x1\x10B\x2F\xFFFF\x1\x10D\xE\xFFFF\x1\x10C",
				"\x1\x113\x1\xFFFF\x1\x112\x2\xFFFF\x1\x115\x1\xFFFF\x1\x110\x1\xFFFF"+
				"\x1\x10F\x4\xFFFF\x1\x111\x1\xFFFF\x1\x114\x2\xFFFF\x1\x118\x4\xFFFF"+
				"\x1\x118\x1\xFFFF\x1\x10E\x1\xFFFF\x1\x118\x1\xFFFF\x1\x118\x1\x116"+
				"\x2\xFFFF\x1\x118\x1\x117\x2F\xFFFF\x1\x119\xE\xFFFF\x1\x118",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA54_eot = DFA.UnpackEncodedString(DFA54_eotS);
		private static readonly short[] DFA54_eof = DFA.UnpackEncodedString(DFA54_eofS);
		private static readonly char[] DFA54_min = DFA.UnpackEncodedStringToUnsignedChars(DFA54_minS);
		private static readonly char[] DFA54_max = DFA.UnpackEncodedStringToUnsignedChars(DFA54_maxS);
		private static readonly short[] DFA54_accept = DFA.UnpackEncodedString(DFA54_acceptS);
		private static readonly short[] DFA54_special = DFA.UnpackEncodedString(DFA54_specialS);
		private static readonly short[][] DFA54_transition;

		static DFA54()
		{
			int numStates = DFA54_transitionS.Length;
			DFA54_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA54_transition[i] = DFA.UnpackEncodedString(DFA54_transitionS[i]);
			}
		}

		public DFA54( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 54;
			this.eot = DFA54_eot;
			this.eof = DFA54_eof;
			this.min = DFA54_min;
			this.max = DFA54_max;
			this.accept = DFA54_accept;
			this.special = DFA54_special;
			this.transition = DFA54_transition;
		}

		public override string Description { get { return "384:1: assignment_expression : ( lvalue assignment_operator assignment_expression | conditional_expression );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition54(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA54_13 = input.LA(1);


				int index54_13 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_13);
				if (s >= 0) return s;
				break;

			case 1:
				int LA54_14 = input.LA(1);


				int index54_14 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_14);
				if (s >= 0) return s;
				break;

			case 2:
				int LA54_15 = input.LA(1);


				int index54_15 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_15);
				if (s >= 0) return s;
				break;

			case 3:
				int LA54_16 = input.LA(1);


				int index54_16 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_16);
				if (s >= 0) return s;
				break;

			case 4:
				int LA54_17 = input.LA(1);


				int index54_17 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_17);
				if (s >= 0) return s;
				break;

			case 5:
				int LA54_18 = input.LA(1);


				int index54_18 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_18);
				if (s >= 0) return s;
				break;

			case 6:
				int LA54_41 = input.LA(1);


				int index54_41 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_41);
				if (s >= 0) return s;
				break;

			case 7:
				int LA54_42 = input.LA(1);


				int index54_42 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_42);
				if (s >= 0) return s;
				break;

			case 8:
				int LA54_43 = input.LA(1);


				int index54_43 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_43);
				if (s >= 0) return s;
				break;

			case 9:
				int LA54_44 = input.LA(1);


				int index54_44 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_44);
				if (s >= 0) return s;
				break;

			case 10:
				int LA54_45 = input.LA(1);


				int index54_45 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_45);
				if (s >= 0) return s;
				break;

			case 11:
				int LA54_46 = input.LA(1);


				int index54_46 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_46);
				if (s >= 0) return s;
				break;

			case 12:
				int LA54_69 = input.LA(1);


				int index54_69 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_69);
				if (s >= 0) return s;
				break;

			case 13:
				int LA54_70 = input.LA(1);


				int index54_70 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_70);
				if (s >= 0) return s;
				break;

			case 14:
				int LA54_71 = input.LA(1);


				int index54_71 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_71);
				if (s >= 0) return s;
				break;

			case 15:
				int LA54_72 = input.LA(1);


				int index54_72 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_72);
				if (s >= 0) return s;
				break;

			case 16:
				int LA54_73 = input.LA(1);


				int index54_73 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_73);
				if (s >= 0) return s;
				break;

			case 17:
				int LA54_74 = input.LA(1);


				int index54_74 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_74);
				if (s >= 0) return s;
				break;

			case 18:
				int LA54_97 = input.LA(1);


				int index54_97 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_97);
				if (s >= 0) return s;
				break;

			case 19:
				int LA54_98 = input.LA(1);


				int index54_98 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_98);
				if (s >= 0) return s;
				break;

			case 20:
				int LA54_99 = input.LA(1);


				int index54_99 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_99);
				if (s >= 0) return s;
				break;

			case 21:
				int LA54_100 = input.LA(1);


				int index54_100 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_100);
				if (s >= 0) return s;
				break;

			case 22:
				int LA54_101 = input.LA(1);


				int index54_101 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_101);
				if (s >= 0) return s;
				break;

			case 23:
				int LA54_102 = input.LA(1);


				int index54_102 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_102);
				if (s >= 0) return s;
				break;

			case 24:
				int LA54_125 = input.LA(1);


				int index54_125 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_125);
				if (s >= 0) return s;
				break;

			case 25:
				int LA54_126 = input.LA(1);


				int index54_126 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_126);
				if (s >= 0) return s;
				break;

			case 26:
				int LA54_127 = input.LA(1);


				int index54_127 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_127);
				if (s >= 0) return s;
				break;

			case 27:
				int LA54_128 = input.LA(1);


				int index54_128 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_128);
				if (s >= 0) return s;
				break;

			case 28:
				int LA54_129 = input.LA(1);


				int index54_129 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_129);
				if (s >= 0) return s;
				break;

			case 29:
				int LA54_130 = input.LA(1);


				int index54_130 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_130);
				if (s >= 0) return s;
				break;

			case 30:
				int LA54_153 = input.LA(1);


				int index54_153 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_153);
				if (s >= 0) return s;
				break;

			case 31:
				int LA54_154 = input.LA(1);


				int index54_154 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_154);
				if (s >= 0) return s;
				break;

			case 32:
				int LA54_155 = input.LA(1);


				int index54_155 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_155);
				if (s >= 0) return s;
				break;

			case 33:
				int LA54_156 = input.LA(1);


				int index54_156 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_156);
				if (s >= 0) return s;
				break;

			case 34:
				int LA54_157 = input.LA(1);


				int index54_157 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_157);
				if (s >= 0) return s;
				break;

			case 35:
				int LA54_158 = input.LA(1);


				int index54_158 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_158);
				if (s >= 0) return s;
				break;

			case 36:
				int LA54_181 = input.LA(1);


				int index54_181 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_181);
				if (s >= 0) return s;
				break;

			case 37:
				int LA54_182 = input.LA(1);


				int index54_182 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_182);
				if (s >= 0) return s;
				break;

			case 38:
				int LA54_183 = input.LA(1);


				int index54_183 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_183);
				if (s >= 0) return s;
				break;

			case 39:
				int LA54_184 = input.LA(1);


				int index54_184 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_184);
				if (s >= 0) return s;
				break;

			case 40:
				int LA54_185 = input.LA(1);


				int index54_185 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_185);
				if (s >= 0) return s;
				break;

			case 41:
				int LA54_186 = input.LA(1);


				int index54_186 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_186);
				if (s >= 0) return s;
				break;

			case 42:
				int LA54_209 = input.LA(1);


				int index54_209 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_209);
				if (s >= 0) return s;
				break;

			case 43:
				int LA54_210 = input.LA(1);


				int index54_210 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_210);
				if (s >= 0) return s;
				break;

			case 44:
				int LA54_211 = input.LA(1);


				int index54_211 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_211);
				if (s >= 0) return s;
				break;

			case 45:
				int LA54_212 = input.LA(1);


				int index54_212 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_212);
				if (s >= 0) return s;
				break;

			case 46:
				int LA54_213 = input.LA(1);


				int index54_213 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_213);
				if (s >= 0) return s;
				break;

			case 47:
				int LA54_214 = input.LA(1);


				int index54_214 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_214);
				if (s >= 0) return s;
				break;

			case 48:
				int LA54_215 = input.LA(1);


				int index54_215 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_215);
				if (s >= 0) return s;
				break;

			case 49:
				int LA54_216 = input.LA(1);


				int index54_216 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_216);
				if (s >= 0) return s;
				break;

			case 50:
				int LA54_217 = input.LA(1);


				int index54_217 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_217);
				if (s >= 0) return s;
				break;

			case 51:
				int LA54_218 = input.LA(1);


				int index54_218 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_218);
				if (s >= 0) return s;
				break;

			case 52:
				int LA54_219 = input.LA(1);


				int index54_219 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_219);
				if (s >= 0) return s;
				break;

			case 53:
				int LA54_220 = input.LA(1);


				int index54_220 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_220);
				if (s >= 0) return s;
				break;

			case 54:
				int LA54_234 = input.LA(1);


				int index54_234 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_234);
				if (s >= 0) return s;
				break;

			case 55:
				int LA54_235 = input.LA(1);


				int index54_235 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_235);
				if (s >= 0) return s;
				break;

			case 56:
				int LA54_236 = input.LA(1);


				int index54_236 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_236);
				if (s >= 0) return s;
				break;

			case 57:
				int LA54_237 = input.LA(1);


				int index54_237 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_237);
				if (s >= 0) return s;
				break;

			case 58:
				int LA54_238 = input.LA(1);


				int index54_238 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_238);
				if (s >= 0) return s;
				break;

			case 59:
				int LA54_239 = input.LA(1);


				int index54_239 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_239);
				if (s >= 0) return s;
				break;

			case 60:
				int LA54_240 = input.LA(1);


				int index54_240 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_240);
				if (s >= 0) return s;
				break;

			case 61:
				int LA54_241 = input.LA(1);


				int index54_241 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_241);
				if (s >= 0) return s;
				break;

			case 62:
				int LA54_242 = input.LA(1);


				int index54_242 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_242);
				if (s >= 0) return s;
				break;

			case 63:
				int LA54_243 = input.LA(1);


				int index54_243 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_243);
				if (s >= 0) return s;
				break;

			case 64:
				int LA54_244 = input.LA(1);


				int index54_244 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_244);
				if (s >= 0) return s;
				break;

			case 65:
				int LA54_245 = input.LA(1);


				int index54_245 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_245);
				if (s >= 0) return s;
				break;

			case 66:
				int LA54_246 = input.LA(1);


				int index54_246 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_246);
				if (s >= 0) return s;
				break;

			case 67:
				int LA54_247 = input.LA(1);


				int index54_247 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_247);
				if (s >= 0) return s;
				break;

			case 68:
				int LA54_248 = input.LA(1);


				int index54_248 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_248);
				if (s >= 0) return s;
				break;

			case 69:
				int LA54_249 = input.LA(1);


				int index54_249 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_249);
				if (s >= 0) return s;
				break;

			case 70:
				int LA54_250 = input.LA(1);


				int index54_250 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_250);
				if (s >= 0) return s;
				break;

			case 71:
				int LA54_251 = input.LA(1);


				int index54_251 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_251);
				if (s >= 0) return s;
				break;

			case 72:
				int LA54_252 = input.LA(1);


				int index54_252 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_252);
				if (s >= 0) return s;
				break;

			case 73:
				int LA54_253 = input.LA(1);


				int index54_253 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_253);
				if (s >= 0) return s;
				break;

			case 74:
				int LA54_254 = input.LA(1);


				int index54_254 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_254);
				if (s >= 0) return s;
				break;

			case 75:
				int LA54_255 = input.LA(1);


				int index54_255 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_255);
				if (s >= 0) return s;
				break;

			case 76:
				int LA54_256 = input.LA(1);


				int index54_256 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_256);
				if (s >= 0) return s;
				break;

			case 77:
				int LA54_257 = input.LA(1);


				int index54_257 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_257);
				if (s >= 0) return s;
				break;

			case 78:
				int LA54_258 = input.LA(1);


				int index54_258 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_258);
				if (s >= 0) return s;
				break;

			case 79:
				int LA54_259 = input.LA(1);


				int index54_259 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_259);
				if (s >= 0) return s;
				break;

			case 80:
				int LA54_260 = input.LA(1);


				int index54_260 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_260);
				if (s >= 0) return s;
				break;

			case 81:
				int LA54_261 = input.LA(1);


				int index54_261 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_261);
				if (s >= 0) return s;
				break;

			case 82:
				int LA54_262 = input.LA(1);


				int index54_262 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_262);
				if (s >= 0) return s;
				break;

			case 83:
				int LA54_263 = input.LA(1);


				int index54_263 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_263);
				if (s >= 0) return s;
				break;

			case 84:
				int LA54_264 = input.LA(1);


				int index54_264 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_264);
				if (s >= 0) return s;
				break;

			case 85:
				int LA54_265 = input.LA(1);


				int index54_265 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_265);
				if (s >= 0) return s;
				break;

			case 86:
				int LA54_266 = input.LA(1);


				int index54_266 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_266);
				if (s >= 0) return s;
				break;

			case 87:
				int LA54_267 = input.LA(1);


				int index54_267 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_267);
				if (s >= 0) return s;
				break;

			case 88:
				int LA54_268 = input.LA(1);


				int index54_268 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_268);
				if (s >= 0) return s;
				break;

			case 89:
				int LA54_269 = input.LA(1);


				int index54_269 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_269);
				if (s >= 0) return s;
				break;

			case 90:
				int LA54_270 = input.LA(1);


				int index54_270 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_270);
				if (s >= 0) return s;
				break;

			case 91:
				int LA54_271 = input.LA(1);


				int index54_271 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_271);
				if (s >= 0) return s;
				break;

			case 92:
				int LA54_272 = input.LA(1);


				int index54_272 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_272);
				if (s >= 0) return s;
				break;

			case 93:
				int LA54_273 = input.LA(1);


				int index54_273 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_273);
				if (s >= 0) return s;
				break;

			case 94:
				int LA54_274 = input.LA(1);


				int index54_274 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_274);
				if (s >= 0) return s;
				break;

			case 95:
				int LA54_275 = input.LA(1);


				int index54_275 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_275);
				if (s >= 0) return s;
				break;

			case 96:
				int LA54_276 = input.LA(1);


				int index54_276 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_276);
				if (s >= 0) return s;
				break;

			case 97:
				int LA54_277 = input.LA(1);


				int index54_277 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_277);
				if (s >= 0) return s;
				break;

			case 98:
				int LA54_278 = input.LA(1);


				int index54_278 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_278);
				if (s >= 0) return s;
				break;

			case 99:
				int LA54_279 = input.LA(1);


				int index54_279 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_279);
				if (s >= 0) return s;
				break;

			case 100:
				int LA54_280 = input.LA(1);


				int index54_280 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_280);
				if (s >= 0) return s;
				break;

			case 101:
				int LA54_281 = input.LA(1);


				int index54_281 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred107_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index54_281);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 54, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA66 : DFA
	{
		private const string DFA66_eotS =
			"\x52\xFFFF";
		private const string DFA66_eofS =
			"\x52\xFFFF";
		private const string DFA66_minS =
			"\x1\x4\x1\xD\x2B\xFFFF\x1\x0\x5\xFFFF\x1\x0\xE\xFFFF\x1\x0\xF\xFFFF";
		private const string DFA66_maxS =
			"\x1\x66\x1\x64\x2B\xFFFF\x1\x0\x5\xFFFF\x1\x0\xE\xFFFF\x1\x0\xF\xFFFF";
		private const string DFA66_acceptS =
			"\x2\xFFFF\x1\x2\x18\xFFFF\x1\x1\x36\xFFFF";
		private const string DFA66_specialS =
			"\x2D\xFFFF\x1\x0\x5\xFFFF\x1\x1\xE\xFFFF\x1\x2\xF\xFFFF}>";
		private static readonly string[] DFA66_transitionS =
			{
				"\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x1\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1"+
				"\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x7\xFFFF\x1\x2\xF\xFFFF"+
				"\x3\x1B\x2\x2\x2\x1B\x3\x2\x1\x1B\x1\xFFFF\x3\x1B\x3\x2\x3\x1B\x1\x2"+
				"\x2\x1B\x1\x2\x2\x1B\x1\x2\x5\x1B\x2\x2\x3\xFFFF\x2\x2",
				"\x1\x1B\xA\xFFFF\x6\x2\x1\x2D\x1\xFFFF\x1\x33\xA\x2\x1\xFFFF\x3\x2"+
				"\x1\x42\xC\x2\x1\xFFFF\x2\x2\x3\x1B\x2\xFFFF\x2\x1B\x3\xFFFF\x1\x1B"+
				"\x1\xFFFF\x3\x1B\x3\xFFFF\x3\x1B\x1\xFFFF\x2\x1B\x1\xFFFF\x2\x1B\x2"+
				"\xFFFF\x4\x1B\x2\xFFFF\x3\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA66_eot = DFA.UnpackEncodedString(DFA66_eotS);
		private static readonly short[] DFA66_eof = DFA.UnpackEncodedString(DFA66_eofS);
		private static readonly char[] DFA66_min = DFA.UnpackEncodedStringToUnsignedChars(DFA66_minS);
		private static readonly char[] DFA66_max = DFA.UnpackEncodedStringToUnsignedChars(DFA66_maxS);
		private static readonly short[] DFA66_accept = DFA.UnpackEncodedString(DFA66_acceptS);
		private static readonly short[] DFA66_special = DFA.UnpackEncodedString(DFA66_specialS);
		private static readonly short[][] DFA66_transition;

		static DFA66()
		{
			int numStates = DFA66_transitionS.Length;
			DFA66_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA66_transition[i] = DFA.UnpackEncodedString(DFA66_transitionS[i]);
			}
		}

		public DFA66( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 66;
			this.eot = DFA66_eot;
			this.eof = DFA66_eof;
			this.min = DFA66_min;
			this.max = DFA66_max;
			this.accept = DFA66_accept;
			this.special = DFA66_special;
			this.transition = DFA66_transition;
		}

		public override string Description { get { return "()* loopback of 464:8: ( declaration )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition66(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA66_45 = input.LA(1);


				int index66_45 = input.Index;
				input.Rewind();
				s = -1;
				if ((((EvaluatePredicate(synpred139_C_fragment)&&EvaluatePredicate(synpred139_C_fragment))&&(isTypeName(input.LT(1).getText()))))) {s = 27;}

				else if ((true)) {s = 2;}


				input.Seek(index66_45);
				if (s >= 0) return s;
				break;

			case 1:
				int LA66_51 = input.LA(1);


				int index66_51 = input.Index;
				input.Rewind();
				s = -1;
				if ((((EvaluatePredicate(synpred139_C_fragment)&&EvaluatePredicate(synpred139_C_fragment))&&(isTypeName(input.LT(1).getText()))))) {s = 27;}

				else if ((true)) {s = 2;}


				input.Seek(index66_51);
				if (s >= 0) return s;
				break;

			case 2:
				int LA66_66 = input.LA(1);


				int index66_66 = input.Index;
				input.Rewind();
				s = -1;
				if ((((EvaluatePredicate(synpred139_C_fragment)&&EvaluatePredicate(synpred139_C_fragment))&&(isTypeName(input.LT(1).getText()))))) {s = 27;}

				else if ((true)) {s = 2;}


				input.Seek(index66_66);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 66, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _external_declaration_in_translation_unit71 = new BitSet(new ulong[]{0x8000000140002002UL,0xFB6E3A33UL});
		public static readonly BitSet _function_definition_in_external_declaration107 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_external_declaration112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_function_definition134 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _declarator_in_function_definition137 = new BitSet(new ulong[]{0x8000000000002000UL,0x2FB6E3A33UL});
		public static readonly BitSet _declaration_in_function_definition143 = new BitSet(new ulong[]{0x8000000000002000UL,0x2FB6E3A33UL});
		public static readonly BitSet _compound_statement_in_function_definition146 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _compound_statement_in_function_definition153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_declaration181 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_declaration184 = new BitSet(new ulong[]{0x8000000140002000UL,0xF36E3A33UL});
		public static readonly BitSet _declaration_specifiers_in_declaration186 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _init_declarator_list_in_declaration196 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_declaration198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_declaration204 = new BitSet(new ulong[]{0x800140002000UL});
		public static readonly BitSet _init_declarator_list_in_declaration206 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_declaration209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _storage_class_specifier_in_declaration_specifiers226 = new BitSet(new ulong[]{0x8000000000002002UL,0xF36E3A33UL});
		public static readonly BitSet _type_specifier_in_declaration_specifiers234 = new BitSet(new ulong[]{0x8000000000002002UL,0xF36E3A33UL});
		public static readonly BitSet _type_qualifier_in_declaration_specifiers242 = new BitSet(new ulong[]{0x8000000000002002UL,0xF36E3A33UL});
		public static readonly BitSet _init_declarator_in_init_declarator_list258 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_init_declarator_list261 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _init_declarator_in_init_declarator_list263 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _declarator_in_init_declarator276 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _52_in_init_declarator279 = new BitSet(new ulong[]{0xCD50942A50UL,0x4200800000UL});
		public static readonly BitSet _initializer_in_init_declarator281 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _94_in_type_specifier320 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_type_specifier325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _85_in_type_specifier330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_type_specifier335 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_type_specifier340 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _77_in_type_specifier345 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _73_in_type_specifier350 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_type_specifier355 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_type_specifier360 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_type_specifier365 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_or_union_specifier_in_type_specifier372 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_specifier_in_type_specifier377 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_id_in_type_specifier382 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_type_id397 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_or_union_in_struct_or_union_specifier427 = new BitSet(new ulong[]{0x2000UL,0x200000000UL});
		public static readonly BitSet _IDENTIFIER_in_struct_or_union_specifier429 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _97_in_struct_or_union_specifier432 = new BitSet(new ulong[]{0x8000000000002000UL,0xF2662A31UL});
		public static readonly BitSet _struct_declaration_list_in_struct_or_union_specifier434 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _101_in_struct_or_union_specifier436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_or_union_in_struct_or_union_specifier441 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_struct_or_union_specifier443 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_struct_declaration_list470 = new BitSet(new ulong[]{0x8000000000002002UL,0xF2662A31UL});
		public static readonly BitSet _specifier_qualifier_list_in_struct_declaration482 = new BitSet(new ulong[]{0x400140002000UL});
		public static readonly BitSet _struct_declarator_list_in_struct_declaration484 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_struct_declaration486 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_qualifier_in_specifier_qualifier_list499 = new BitSet(new ulong[]{0x8000000000002002UL,0xF2662A31UL});
		public static readonly BitSet _type_specifier_in_specifier_qualifier_list503 = new BitSet(new ulong[]{0x8000000000002002UL,0xF2662A31UL});
		public static readonly BitSet _struct_declarator_in_struct_declarator_list517 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_struct_declarator_list520 = new BitSet(new ulong[]{0x400140002000UL});
		public static readonly BitSet _struct_declarator_in_struct_declarator_list522 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _declarator_in_struct_declarator535 = new BitSet(new ulong[]{0x400000000002UL});
		public static readonly BitSet _46_in_struct_declarator538 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _constant_expression_in_struct_declarator540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _46_in_struct_declarator547 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _constant_expression_in_struct_declarator549 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _75_in_enum_specifier567 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _97_in_enum_specifier569 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _enumerator_list_in_enum_specifier571 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _101_in_enum_specifier573 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _75_in_enum_specifier578 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_enum_specifier580 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _97_in_enum_specifier582 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _enumerator_list_in_enum_specifier584 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _101_in_enum_specifier586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _75_in_enum_specifier591 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_enum_specifier593 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumerator_in_enumerator_list604 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_enumerator_list607 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _enumerator_in_enumerator_list609 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _IDENTIFIER_in_enumerator622 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _52_in_enumerator625 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _constant_expression_in_enumerator627 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_declarator663 = new BitSet(new ulong[]{0x40002000UL});
		public static readonly BitSet _direct_declarator_in_declarator666 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_declarator671 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_direct_declarator686 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _30_in_direct_declarator697 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _declarator_in_direct_declarator699 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_direct_declarator701 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _declarator_suffix_in_direct_declarator709 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _59_in_declarator_suffix723 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _constant_expression_in_declarator_suffix725 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_declarator_suffix727 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_declarator_suffix734 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_declarator_suffix736 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_declarator_suffix743 = new BitSet(new ulong[]{0x8000000000002000UL,0xF36E3A33UL});
		public static readonly BitSet _parameter_type_list_in_declarator_suffix745 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_declarator_suffix747 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_declarator_suffix754 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _identifier_list_in_declarator_suffix756 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_declarator_suffix758 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_declarator_suffix765 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_declarator_suffix767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_pointer778 = new BitSet(new ulong[]{0x0UL,0x80000021UL});
		public static readonly BitSet _type_qualifier_in_pointer780 = new BitSet(new ulong[]{0x100000002UL,0x80000021UL});
		public static readonly BitSet _pointer_in_pointer783 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_pointer789 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _pointer_in_pointer791 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_pointer796 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameter_list_in_parameter_type_list807 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_parameter_type_list810 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _43_in_parameter_type_list812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameter_declaration_in_parameter_list825 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_parameter_list828 = new BitSet(new ulong[]{0x8000000000002000UL,0xF36E3A33UL});
		public static readonly BitSet _parameter_declaration_in_parameter_list830 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _declaration_specifiers_in_parameter_declaration843 = new BitSet(new ulong[]{0x800000140002002UL});
		public static readonly BitSet _declarator_in_parameter_declaration846 = new BitSet(new ulong[]{0x800000140002002UL});
		public static readonly BitSet _abstract_declarator_in_parameter_declaration848 = new BitSet(new ulong[]{0x800000140002002UL});
		public static readonly BitSet _IDENTIFIER_in_identifier_list861 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_identifier_list864 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_identifier_list866 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _specifier_qualifier_list_in_type_name879 = new BitSet(new ulong[]{0x800000140000002UL});
		public static readonly BitSet _abstract_declarator_in_type_name881 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_abstract_declarator893 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _direct_abstract_declarator_in_abstract_declarator895 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _direct_abstract_declarator_in_abstract_declarator901 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_direct_abstract_declarator914 = new BitSet(new ulong[]{0x800000140000000UL});
		public static readonly BitSet _abstract_declarator_in_direct_abstract_declarator916 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_direct_abstract_declarator918 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _abstract_declarator_suffix_in_direct_abstract_declarator922 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _abstract_declarator_suffix_in_direct_abstract_declarator926 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _59_in_abstract_declarator_suffix938 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_abstract_declarator_suffix940 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_abstract_declarator_suffix945 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _constant_expression_in_abstract_declarator_suffix947 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_abstract_declarator_suffix949 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_abstract_declarator_suffix954 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_abstract_declarator_suffix956 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_abstract_declarator_suffix961 = new BitSet(new ulong[]{0x8000000000002000UL,0xF36E3A33UL});
		public static readonly BitSet _parameter_type_list_in_abstract_declarator_suffix963 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_abstract_declarator_suffix965 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignment_expression_in_initializer977 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _97_in_initializer982 = new BitSet(new ulong[]{0xCD50942A50UL,0x4200800000UL});
		public static readonly BitSet _initializer_list_in_initializer984 = new BitSet(new ulong[]{0x2000000000UL,0x2000000000UL});
		public static readonly BitSet _37_in_initializer986 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _101_in_initializer989 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _initializer_in_initializer_list1000 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_initializer_list1003 = new BitSet(new ulong[]{0xCD50942A50UL,0x4200800000UL});
		public static readonly BitSet _initializer_in_initializer_list1005 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _assignment_expression_in_argument_expression_list1022 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_argument_expression_list1025 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _assignment_expression_in_argument_expression_list1027 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression1041 = new BitSet(new ulong[]{0x4400000002UL});
		public static readonly BitSet _34_in_additive_expression1045 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression1047 = new BitSet(new ulong[]{0x4400000002UL});
		public static readonly BitSet _38_in_additive_expression1051 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression1053 = new BitSet(new ulong[]{0x4400000002UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1067 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _32_in_multiplicative_expression1071 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1073 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _44_in_multiplicative_expression1077 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1079 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _25_in_multiplicative_expression1083 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1085 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _30_in_cast_expression1098 = new BitSet(new ulong[]{0x8000000000002000UL,0xF2662A31UL});
		public static readonly BitSet _type_name_in_cast_expression1100 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_cast_expression1102 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _cast_expression_in_cast_expression1104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expression_in_cast_expression1109 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _postfix_expression_in_unary_expression1120 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _35_in_unary_expression1125 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _unary_expression_in_unary_expression1127 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _39_in_unary_expression1132 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _unary_expression_in_unary_expression1134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_operator_in_unary_expression1139 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _cast_expression_in_unary_expression1141 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _87_in_unary_expression1146 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _unary_expression_in_unary_expression1148 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _87_in_unary_expression1153 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_unary_expression1155 = new BitSet(new ulong[]{0x8000000000002000UL,0xF2662A31UL});
		public static readonly BitSet _type_name_in_unary_expression1157 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_unary_expression1159 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_expression_in_postfix_expression1172 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _59_in_postfix_expression1180 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _expression_in_postfix_expression1182 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_postfix_expression1184 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _30_in_postfix_expression1192 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_postfix_expression1194 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _30_in_postfix_expression1202 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _argument_expression_list_in_postfix_expression1204 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_postfix_expression1206 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _42_in_postfix_expression1214 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_postfix_expression1216 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _41_in_postfix_expression1224 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_postfix_expression1226 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _35_in_postfix_expression1234 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _39_in_postfix_expression1242 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _IDENTIFIER_in_primary_expression1294 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_in_primary_expression1299 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_primary_expression1304 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _expression_in_primary_expression1306 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_primary_expression1308 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _hex_literal_in_constant1321 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _octal_literal_in_constant1328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _decimal_literal_in_constant1335 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _character_literal_in_constant1342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_literal_in_constant1349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _floating_point_literal_in_constant1356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HEX_LITERAL_in_hex_literal1367 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OCTAL_LITERAL_in_octal_literal1378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECIMAL_LITERAL_in_decimal_literal1389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHARACTER_LITERAL_in_character_literal1400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_string_literal1411 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLOATING_POINT_LITERAL_in_floating_point_literal1422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignment_expression_in_expression1435 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_expression1438 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _assignment_expression_in_expression1440 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _conditional_expression_in_constant_expression1453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_assignment_expression1464 = new BitSet(new ulong[]{0x4214211224000000UL,0x800000000UL});
		public static readonly BitSet _assignment_operator_in_assignment_expression1466 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _assignment_expression_in_assignment_expression1468 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditional_expression_in_assignment_expression1473 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expression_in_lvalue1485 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logical_or_expression_in_conditional_expression1557 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _58_in_conditional_expression1560 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _expression_in_conditional_expression1562 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_conditional_expression1564 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _conditional_expression_in_conditional_expression1566 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logical_and_expression_in_logical_or_expression1579 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _100_in_logical_or_expression1582 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _logical_and_expression_in_logical_or_expression1584 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _inclusive_or_expression_in_logical_and_expression1597 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _27_in_logical_and_expression1600 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _inclusive_or_expression_in_logical_and_expression1602 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _exclusive_or_expression_in_inclusive_or_expression1615 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _98_in_inclusive_or_expression1618 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _exclusive_or_expression_in_inclusive_or_expression1620 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _and_expression_in_exclusive_or_expression1633 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _61_in_exclusive_or_expression1636 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _and_expression_in_exclusive_or_expression1638 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _equality_expression_in_and_expression1651 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _28_in_and_expression1654 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _equality_expression_in_and_expression1656 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _relational_expression_in_equality_expression1668 = new BitSet(new ulong[]{0x20000001000002UL});
		public static readonly BitSet _set_in_equality_expression1671 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _relational_expression_in_equality_expression1677 = new BitSet(new ulong[]{0x20000001000002UL});
		public static readonly BitSet _shift_expression_in_relational_expression1690 = new BitSet(new ulong[]{0xC9000000000002UL});
		public static readonly BitSet _set_in_relational_expression1693 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _shift_expression_in_relational_expression1703 = new BitSet(new ulong[]{0xC9000000000002UL});
		public static readonly BitSet _additive_expression_in_shift_expression1716 = new BitSet(new ulong[]{0x102000000000002UL});
		public static readonly BitSet _set_in_shift_expression1719 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _additive_expression_in_shift_expression1725 = new BitSet(new ulong[]{0x102000000000002UL});
		public static readonly BitSet _labeled_statement_in_statement1740 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _compound_statement_in_statement1745 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_statement_in_statement1750 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selection_statement_in_statement1755 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _iteration_statement_in_statement1760 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _jump_statement_in_statement1765 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_labeled_statement1776 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_labeled_statement1778 = new BitSet(new ulong[]{0x80CD50942A50UL,0x430491C1CCUL});
		public static readonly BitSet _statement_in_labeled_statement1780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _67_in_labeled_statement1785 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _constant_expression_in_labeled_statement1787 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_labeled_statement1789 = new BitSet(new ulong[]{0x80CD50942A50UL,0x430491C1CCUL});
		public static readonly BitSet _statement_in_labeled_statement1791 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_labeled_statement1796 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_labeled_statement1798 = new BitSet(new ulong[]{0x80CD50942A50UL,0x430491C1CCUL});
		public static readonly BitSet _statement_in_labeled_statement1800 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _97_in_compound_statement1822 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x63FFFFFBFFUL});
		public static readonly BitSet _declaration_in_compound_statement1824 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x63FFFFFBFFUL});
		public static readonly BitSet _statement_list_in_compound_statement1827 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _101_in_compound_statement1830 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_statement_list1841 = new BitSet(new ulong[]{0x80CD50942A52UL,0x430491C1CCUL});
		public static readonly BitSet _47_in_expression_statement1853 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_statement1858 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_expression_statement1860 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _80_in_selection_statement1871 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_selection_statement1873 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _expression_in_selection_statement1875 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_selection_statement1877 = new BitSet(new ulong[]{0x80CD50942A50UL,0x430491C1CCUL});
		public static readonly BitSet _statement_in_selection_statement1879 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_selection_statement1894 = new BitSet(new ulong[]{0x80CD50942A50UL,0x430491C1CCUL});
		public static readonly BitSet _statement_in_selection_statement1896 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_selection_statement1903 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_selection_statement1905 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _expression_in_selection_statement1907 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_selection_statement1909 = new BitSet(new ulong[]{0x80CD50942A50UL,0x430491C1CCUL});
		public static readonly BitSet _statement_in_selection_statement1911 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _96_in_iteration_statement1922 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_iteration_statement1924 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _expression_in_iteration_statement1926 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_iteration_statement1928 = new BitSet(new ulong[]{0x80CD50942A50UL,0x430491C1CCUL});
		public static readonly BitSet _statement_in_iteration_statement1930 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _72_in_iteration_statement1935 = new BitSet(new ulong[]{0x80CD50942A50UL,0x430491C1CCUL});
		public static readonly BitSet _statement_in_iteration_statement1937 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _96_in_iteration_statement1939 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_iteration_statement1941 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _expression_in_iteration_statement1943 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_iteration_statement1945 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_iteration_statement1947 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _78_in_iteration_statement1952 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_iteration_statement1954 = new BitSet(new ulong[]{0x80CD50942A50UL,0x4000800000UL});
		public static readonly BitSet _expression_statement_in_iteration_statement1956 = new BitSet(new ulong[]{0x80CD50942A50UL,0x4000800000UL});
		public static readonly BitSet _expression_statement_in_iteration_statement1958 = new BitSet(new ulong[]{0xCDD0942A50UL,0x4000800000UL});
		public static readonly BitSet _expression_in_iteration_statement1960 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_iteration_statement1963 = new BitSet(new ulong[]{0x80CD50942A50UL,0x430491C1CCUL});
		public static readonly BitSet _statement_in_iteration_statement1965 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_jump_statement1976 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_jump_statement1978 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement1980 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _70_in_jump_statement1985 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement1987 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _66_in_jump_statement1992 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement1994 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _84_in_jump_statement1999 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2001 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _84_in_jump_statement2006 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _expression_in_jump_statement2008 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2010 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred2_C94 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred4_C94 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _declarator_in_synpred4_C97 = new BitSet(new ulong[]{0x8000000000002000UL,0x2FB6E3A33UL});
		public static readonly BitSet _declaration_in_synpred4_C99 = new BitSet(new ulong[]{0x8000000000002000UL,0x2FB6E3A33UL});
		public static readonly BitSet _97_in_synpred4_C102 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred5_C134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred9_C186 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_specifier_in_synpred13_C234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_specifier_in_synpred37_C503 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_synpred48_C663 = new BitSet(new ulong[]{0x40002000UL});
		public static readonly BitSet _direct_declarator_in_synpred48_C666 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declarator_suffix_in_synpred50_C709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred53_C743 = new BitSet(new ulong[]{0x8000000000002000UL,0xF36E3A33UL});
		public static readonly BitSet _parameter_type_list_in_synpred53_C745 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred53_C747 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred54_C754 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _identifier_list_in_synpred54_C756 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred54_C758 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_qualifier_in_synpred55_C780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_synpred56_C783 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_synpred57_C778 = new BitSet(new ulong[]{0x0UL,0x80000021UL});
		public static readonly BitSet _type_qualifier_in_synpred57_C780 = new BitSet(new ulong[]{0x100000002UL,0x80000021UL});
		public static readonly BitSet _pointer_in_synpred57_C783 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_synpred58_C789 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _pointer_in_synpred58_C791 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declarator_in_synpred61_C846 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _abstract_declarator_in_synpred62_C848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _direct_abstract_declarator_in_synpred65_C895 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _abstract_declarator_suffix_in_synpred68_C926 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred81_C1098 = new BitSet(new ulong[]{0x8000000000002000UL,0xF2662A31UL});
		public static readonly BitSet _type_name_in_synpred81_C1100 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred81_C1102 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _cast_expression_in_synpred81_C1104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _87_in_synpred86_C1146 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _unary_expression_in_synpred86_C1148 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_synpred107_C1464 = new BitSet(new ulong[]{0x4214211224000000UL,0x800000000UL});
		public static readonly BitSet _assignment_operator_in_synpred107_C1466 = new BitSet(new ulong[]{0xCD50942A50UL,0x4000800000UL});
		public static readonly BitSet _assignment_expression_in_synpred107_C1468 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_synpred139_C1824 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
