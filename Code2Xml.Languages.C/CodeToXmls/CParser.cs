using Code2Xml.Core.Antlr;
using System;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C.g 2012-07-31 10:18:48

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;
/** ANSI C ANTLR v3 grammar

Translated from Jutta Degener's 1995 ANSI C yacc grammar by Terence Parr
July 2006.  The lexical rules were taken from the Java grammar.

Jutta says: "In 1985, Jeff Lee published his Yacc grammar (which
is accompanied by a matching Lex specification) for the April 30, 1985 draft
version of the ANSI C standard.  Tom Stockfisch reposted it to net.sources in
1987; that original, as mentioned in the answer to question 17.25 of the
comp.lang.c FAQ, can be ftp'ed from ftp.uu.net,
   file usenet/net.sources/ansi.c.grammar.Z.
I intend to keep this version as close to the current C Standard grammar as
possible; please let me know if you discover discrepancies. Jutta Degener, 1995"

Generally speaking, you need symbol table info to parse C; typedefs
define types and then IDENTIFIERS are either types or plain IDs.  I'm doing
the min necessary here tracking only type names.  This is a good example
of the global scope (called Symbols).  Every rule that declares its usage
of Symbols pushes a new copy on the stack effectively creating a new
symbol scope.  Also note rule declaration declares a rule scope that
lets any invoked rule see isTypedef boolean.  It's much easier than
passing that info down as parameters.  Very clean.  Rule
direct_declarator can then easily determine whether the IDENTIFIER
should be declared as a type name.

I have only tested this on a single file, though it is 3500 lines.

This grammar requires ANTLR v3.0.1 or higher.

Terence Parr
July 2006
*/
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class CParser : Antlr.Runtime.Parser, IAntlrParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "CHARACTER_LITERAL", "COMMENT", "DECIMAL_LITERAL", "EscapeSequence", "Exponent", "FLOATING_POINT_LITERAL", "FloatTypeSuffix", "HEX_LITERAL", "HexDigit", "IDENTIFIER", "IntegerTypeSuffix", "LETTER", "LINE_COMMAND", "LINE_COMMENT", "OCTAL_LITERAL", "OctalEscape", "STRING_LITERAL", "UnicodeEscape", "WS", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'.'", "'...'", "'/'", "'/='", "':'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'['", "']'", "'^'", "'^='", "'__attribute__'", "'__builtin_va_list'", "'__extension__'", "'__inline'", "'__inline__'", "'auto'", "'break'", "'case'", "'char'", "'const'", "'continue'", "'default'", "'do'", "'double'", "'else'", "'enum'", "'extern'", "'float'", "'for'", "'goto'", "'if'", "'int'", "'long'", "'register'", "'return'", "'short'", "'signed'", "'sizeof'", "'static'", "'struct'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "'while'", "'{'", "'|'", "'|='", "'||'", "'}'", "'~'"
	};
	public const int EOF=-1;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int CHARACTER_LITERAL=4;
	public const int COMMENT=5;
	public const int DECIMAL_LITERAL=6;
	public const int EscapeSequence=7;
	public const int Exponent=8;
	public const int FLOATING_POINT_LITERAL=9;
	public const int FloatTypeSuffix=10;
	public const int HEX_LITERAL=11;
	public const int HexDigit=12;
	public const int IDENTIFIER=13;
	public const int IntegerTypeSuffix=14;
	public const int LETTER=15;
	public const int LINE_COMMAND=16;
	public const int LINE_COMMENT=17;
	public const int OCTAL_LITERAL=18;
	public const int OctalEscape=19;
	public const int STRING_LITERAL=20;
	public const int UnicodeEscape=21;
	public const int WS=22;

	protected sealed partial class Symbols_scope
	{
		public HashSet<string> types;

		public Symbols_scope(CParser grammar) { OnCreated(grammar); }
		partial void OnCreated(CParser grammar);
	}
	partial void Symbols_scopeInit( Symbols_scope scope );
	partial void Symbols_scopeAfter( Symbols_scope scope );
	protected readonly ListStack<Symbols_scope> Symbols_stack = new ListStack<Symbols_scope>();

	public CParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public CParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[230+1];


		XmlTreeAdaptor treeAdaptor = default(XmlTreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new XmlTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref XmlTreeAdaptor adaptor);

	private XmlTreeAdaptor adaptor;

	public XmlTreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return CParser.tokenNames; } }
	public override string GrammarFileName { get { return "C.g"; } }


		boolean isTypeName(String name) {
			for (int i = Symbols_stack.size()-1; i>=0; i--) {
				Symbols_scope scope = (Symbols_scope)Symbols_stack.get(i);
				if ( scope.types.contains(name) ) {
					return true;
				}
			}
			return false;
		}


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_translation_unit();
	partial void LeaveRule_translation_unit();

	// $ANTLR start "translation_unit"
	// C.g:58:1: translation_unit : ( external_declaration )+ ;
	[GrammarRule("translation_unit")]
	public XAstParserRuleReturnScope translation_unit()
	{
		EnterRule_translation_unit();
		EnterRule("translation_unit", 1);
		var retval = new XAstParserRuleReturnScope("translation_unit");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int translation_unit_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope external_declaration1 = default(XAstParserRuleReturnScope);


		  Symbols_stack.Peek().types =  new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "translation_unit");
		DebugLocation(58, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// C.g:63:2: ( ( external_declaration )+ )
			DebugEnterAlt(1);
			// C.g:63:4: ( external_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(63, 4);
			// C.g:63:4: ( external_declaration )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==IDENTIFIER||LA1_0==30||LA1_0==32||(LA1_0>=63 && LA1_0<=68)||(LA1_0>=71 && LA1_0<=72)||LA1_0==76||(LA1_0>=78 && LA1_0<=80)||(LA1_0>=84 && LA1_0<=86)||(LA1_0>=88 && LA1_0<=89)||(LA1_0>=91 && LA1_0<=92)||(LA1_0>=94 && LA1_0<=98)))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:63:4: external_declaration
					{
					DebugLocation(63, 4);
					PushFollow(Follow._external_declaration_in_translation_unit71);
					external_declaration1=external_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, external_declaration1.Tree, external_declaration1, retval);

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("translation_unit", 1);
			LeaveRule("translation_unit", 1);
			LeaveRule_translation_unit();
			if (state.backtracking > 0) { Memoize(input, 1, translation_unit_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(64, 1);
		} finally { DebugExitRule(GrammarFileName, "translation_unit"); }
		return retval;

	}
	// $ANTLR end "translation_unit"

	partial void EnterRule_external_declaration();
	partial void LeaveRule_external_declaration();

	// $ANTLR start "external_declaration"
	// C.g:80:1: external_declaration options {k=1; } : ( ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition | declaration );
	[GrammarRule("external_declaration")]
	public XAstParserRuleReturnScope external_declaration()
	{
		EnterRule_external_declaration();
		EnterRule("external_declaration", 2);
		var retval = new XAstParserRuleReturnScope("external_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int external_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope function_definition2 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declaration3 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "external_declaration");
		DebugLocation(80, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// C.g:82:2: ( ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition | declaration )
			int alt2=2;
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0==68||LA2_0==79||LA2_0==86||LA2_0==91))
			{
				int LA2_1 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==97))
			{
				int LA2_2 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==71))
			{
				int LA2_3 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==88))
			{
				int LA2_4 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==84))
			{
				int LA2_5 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==85))
			{
				int LA2_6 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==80))
			{
				int LA2_7 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==76))
			{
				int LA2_8 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==89))
			{
				int LA2_9 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==96))
			{
				int LA2_10 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 10, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==92||LA2_0==95))
			{
				int LA2_11 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==78))
			{
				int LA2_12 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 12, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==IDENTIFIER))
			{
				int LA2_13 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if (((isTypeName(input.LT(1).getText()))))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 13, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==65))
			{
				int LA2_14 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 14, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==64))
			{
				int LA2_15 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 15, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==66))
			{
				int LA2_16 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 16, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==63))
			{
				int LA2_17 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 17, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==67))
			{
				int LA2_18 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 18, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==32) && (EvaluatePredicate(synpred4_C_fragment)))
			{
				alt2 = 1;
			}
			else if ((LA2_0==30) && (EvaluatePredicate(synpred4_C_fragment)))
			{
				alt2 = 1;
			}
			else if ((LA2_0==72||LA2_0==98))
			{
				int LA2_21 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 21, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==94))
			{
				alt2 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:82:4: ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(82, 62);
				PushFollow(Follow._function_definition_in_external_declaration107);
				function_definition2=function_definition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, function_definition2.Tree, function_definition2, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:83:4: declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(83, 4);
				PushFollow(Follow._declaration_in_external_declaration112);
				declaration3=declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration3.Tree, declaration3, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("external_declaration", 2);
			LeaveRule("external_declaration", 2);
			LeaveRule_external_declaration();
			if (state.backtracking > 0) { Memoize(input, 2, external_declaration_StartIndex); }

		}
		DebugLocation(84, 1);
		} finally { DebugExitRule(GrammarFileName, "external_declaration"); }
		return retval;

	}
	// $ANTLR end "external_declaration"

	partial void EnterRule_function_definition();
	partial void LeaveRule_function_definition();

	// $ANTLR start "function_definition"
	// C.g:86:1: function_definition : ( declaration_specifiers )? declarator ( ( declaration )+ compound_statement | compound_statement ) ;
	[GrammarRule("function_definition")]
	public XAstParserRuleReturnScope function_definition()
	{
		EnterRule_function_definition();
		EnterRule("function_definition", 3);
		var retval = new XAstParserRuleReturnScope("function_definition");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int function_definition_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope declaration_specifiers4 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator5 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declaration6 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope compound_statement7 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope compound_statement8 = default(XAstParserRuleReturnScope);


		  Symbols_stack.Peek().types =  new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "function_definition");
		DebugLocation(86, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// C.g:91:2: ( ( declaration_specifiers )? declarator ( ( declaration )+ compound_statement | compound_statement ) )
			DebugEnterAlt(1);
			// C.g:91:4: ( declaration_specifiers )? declarator ( ( declaration )+ compound_statement | compound_statement )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(91, 4);
			// C.g:91:4: ( declaration_specifiers )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if (((LA3_0>=63 && LA3_0<=68)||(LA3_0>=71 && LA3_0<=72)||LA3_0==76||(LA3_0>=78 && LA3_0<=80)||(LA3_0>=84 && LA3_0<=86)||(LA3_0>=88 && LA3_0<=89)||(LA3_0>=91 && LA3_0<=92)||(LA3_0>=95 && LA3_0<=98)))
			{
				alt3 = 1;
			}
			else if ((LA3_0==IDENTIFIER))
			{
				switch (input.LA(2))
				{
				case 32:
					{
					alt3 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA3_22 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 30:
					{
					int LA3_23 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 68:
				case 79:
				case 86:
				case 91:
					{
					int LA3_24 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 97:
					{
					int LA3_25 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 71:
					{
					int LA3_26 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 88:
					{
					int LA3_27 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 84:
					{
					int LA3_28 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 85:
					{
					int LA3_29 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 80:
					{
					int LA3_30 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 76:
					{
					int LA3_31 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 89:
					{
					int LA3_32 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 96:
					{
					int LA3_33 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 92:
				case 95:
					{
					int LA3_34 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 78:
					{
					int LA3_35 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 65:
					{
					int LA3_36 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 64:
					{
					int LA3_37 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 66:
					{
					int LA3_38 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 63:
					{
					int LA3_39 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 67:
					{
					int LA3_40 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 72:
				case 98:
					{
					int LA3_42 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				}

			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:91:4: declaration_specifiers
				{
				DebugLocation(91, 4);
				PushFollow(Follow._declaration_specifiers_in_function_definition134);
				declaration_specifiers4=declaration_specifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers4.Tree, declaration_specifiers4, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(91, 28);
			PushFollow(Follow._declarator_in_function_definition137);
			declarator5=declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, declarator5.Tree, declarator5, retval);
			DebugLocation(92, 3);
			// C.g:92:3: ( ( declaration )+ compound_statement | compound_statement )
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0==IDENTIFIER||(LA5_0>=63 && LA5_0<=68)||(LA5_0>=71 && LA5_0<=72)||LA5_0==76||(LA5_0>=78 && LA5_0<=80)||(LA5_0>=84 && LA5_0<=86)||(LA5_0>=88 && LA5_0<=89)||(LA5_0>=91 && LA5_0<=92)||(LA5_0>=94 && LA5_0<=98)))
			{
				alt5 = 1;
			}
			else if ((LA5_0==100))
			{
				alt5 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:92:5: ( declaration )+ compound_statement
				{
				DebugLocation(92, 5);
				// C.g:92:5: ( declaration )+
				int cnt4=0;
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if ((LA4_0==IDENTIFIER||(LA4_0>=63 && LA4_0<=68)||(LA4_0>=71 && LA4_0<=72)||LA4_0==76||(LA4_0>=78 && LA4_0<=80)||(LA4_0>=84 && LA4_0<=86)||(LA4_0>=88 && LA4_0<=89)||(LA4_0>=91 && LA4_0<=92)||(LA4_0>=94 && LA4_0<=98)))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:92:5: declaration
						{
						DebugLocation(92, 5);
						PushFollow(Follow._declaration_in_function_definition143);
						declaration6=declaration();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, declaration6.Tree, declaration6, retval);

						}
						break;

					default:
						if (cnt4 >= 1)
							goto loop4;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee4 = new EarlyExitException( 4, input );
						DebugRecognitionException(eee4);
						throw eee4;
					}
					cnt4++;
				}
				loop4:
					;

				} finally { DebugExitSubRule(4); }

				DebugLocation(92, 18);
				PushFollow(Follow._compound_statement_in_function_definition146);
				compound_statement7=compound_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, compound_statement7.Tree, compound_statement7, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:93:5: compound_statement
				{
				DebugLocation(93, 5);
				PushFollow(Follow._compound_statement_in_function_definition153);
				compound_statement8=compound_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, compound_statement8.Tree, compound_statement8, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function_definition", 3);
			LeaveRule("function_definition", 3);
			LeaveRule_function_definition();
			if (state.backtracking > 0) { Memoize(input, 3, function_definition_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(95, 1);
		} finally { DebugExitRule(GrammarFileName, "function_definition"); }
		return retval;

	}
	// $ANTLR end "function_definition"

	protected sealed partial class declaration_scope
	{
		public boolean isTypedef;

		public declaration_scope(CParser grammar) { OnCreated(grammar); }
		partial void OnCreated(CParser grammar);
	}
	partial void declaration_scopeInit( declaration_scope scope );
	partial void declaration_scopeAfter( declaration_scope scope );
	protected readonly ListStack<declaration_scope> declaration_stack = new ListStack<declaration_scope>();

	partial void EnterRule_declaration();
	partial void LeaveRule_declaration();

	// $ANTLR start "declaration"
	// C.g:97:1: declaration : ( ( '__extension__' )? 'typedef' ( declaration_specifiers )? init_declarator_list ';' | declaration_specifiers ( init_declarator_list )? ';' );
	[GrammarRule("declaration")]
	public XAstParserRuleReturnScope declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 4);
		var retval = new XAstParserRuleReturnScope("declaration");
		declaration_stack.Push(new declaration_scope(this));declaration_scopeInit(declaration_stack.Peek());
		
		retval.Start = (IToken)input.LT(1);
		int declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal9 = default(IToken);
		IToken string_literal10 = default(IToken);
		IToken char_literal13 = default(IToken);
		IToken char_literal16 = default(IToken);
		XAstParserRuleReturnScope declaration_specifiers11 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope init_declarator_list12 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declaration_specifiers14 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope init_declarator_list15 = default(XAstParserRuleReturnScope);

		object string_literal9_tree = default(object);
		object string_literal10_tree = default(object);
		object char_literal13_tree = default(object);
		object char_literal16_tree = default(object);

		  declaration_stack.Peek().isTypedef =  false;

		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(97, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// C.g:104:2: ( ( '__extension__' )? 'typedef' ( declaration_specifiers )? init_declarator_list ';' | declaration_specifiers ( init_declarator_list )? ';' )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case 65:
				{
				int LA9_1 = input.LA(2);

				if ((LA9_1==94))
				{
					alt9 = 1;
				}
				else if ((LA9_1==IDENTIFIER||LA9_1==30||LA9_1==32||LA9_1==47||(LA9_1>=63 && LA9_1<=68)||(LA9_1>=71 && LA9_1<=72)||LA9_1==76||(LA9_1>=78 && LA9_1<=80)||(LA9_1>=84 && LA9_1<=86)||(LA9_1>=88 && LA9_1<=89)||(LA9_1>=91 && LA9_1<=92)||(LA9_1>=95 && LA9_1<=98)))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 94:
				{
				alt9 = 1;
				}
				break;
			case IDENTIFIER:
			case 63:
			case 64:
			case 66:
			case 67:
			case 68:
			case 71:
			case 72:
			case 76:
			case 78:
			case 79:
			case 80:
			case 84:
			case 85:
			case 86:
			case 88:
			case 89:
			case 91:
			case 92:
			case 95:
			case 96:
			case 97:
			case 98:
				{
				alt9 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:104:4: ( '__extension__' )? 'typedef' ( declaration_specifiers )? init_declarator_list ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(104, 4);
				// C.g:104:4: ( '__extension__' )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==65))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:104:4: '__extension__'
					{
					DebugLocation(104, 4);
					string_literal9=(IToken)Match(input,65,Follow._65_in_declaration181); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal9_tree = (object)adaptor.Create(string_literal9, retval);
					adaptor.AddChild(root_0, string_literal9_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(104, 21);
				string_literal10=(IToken)Match(input,94,Follow._94_in_declaration184); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal10_tree = (object)adaptor.Create(string_literal10, retval);
				adaptor.AddChild(root_0, string_literal10_tree);
				}
				DebugLocation(104, 31);
				// C.g:104:31: ( declaration_specifiers )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if (((LA7_0>=63 && LA7_0<=68)||(LA7_0>=71 && LA7_0<=72)||LA7_0==76||(LA7_0>=78 && LA7_0<=80)||(LA7_0>=84 && LA7_0<=86)||(LA7_0>=88 && LA7_0<=89)||(LA7_0>=91 && LA7_0<=92)||(LA7_0>=95 && LA7_0<=98)))
				{
					alt7 = 1;
				}
				else if ((LA7_0==IDENTIFIER))
				{
					int LA7_13 = input.LA(2);

					if ((LA7_13==IDENTIFIER||LA7_13==32||(LA7_13>=63 && LA7_13<=68)||(LA7_13>=71 && LA7_13<=72)||LA7_13==76||(LA7_13>=78 && LA7_13<=80)||(LA7_13>=84 && LA7_13<=86)||(LA7_13>=88 && LA7_13<=89)||(LA7_13>=91 && LA7_13<=92)||(LA7_13>=95 && LA7_13<=98)))
					{
						alt7 = 1;
					}
					else if ((LA7_13==30))
					{
						int LA7_23 = input.LA(3);

						if ((((EvaluatePredicate(synpred9_C_fragment)&&EvaluatePredicate(synpred9_C_fragment))&&(isTypeName(input.LT(1).getText())))))
						{
							alt7 = 1;
						}
					}
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:104:31: declaration_specifiers
					{
					DebugLocation(104, 31);
					PushFollow(Follow._declaration_specifiers_in_declaration186);
					declaration_specifiers11=declaration_specifiers();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers11.Tree, declaration_specifiers11, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(104, 55);
				if (state.backtracking == 0)
				{
					declaration_stack.Peek().isTypedef = true;
				}
				DebugLocation(105, 4);
				PushFollow(Follow._init_declarator_list_in_declaration196);
				init_declarator_list12=init_declarator_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator_list12.Tree, init_declarator_list12, retval);
				DebugLocation(105, 25);
				char_literal13=(IToken)Match(input,47,Follow._47_in_declaration198); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal13_tree = (object)adaptor.Create(char_literal13, retval);
				adaptor.AddChild(root_0, char_literal13_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:106:4: declaration_specifiers ( init_declarator_list )? ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(106, 4);
				PushFollow(Follow._declaration_specifiers_in_declaration204);
				declaration_specifiers14=declaration_specifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers14.Tree, declaration_specifiers14, retval);
				DebugLocation(106, 27);
				// C.g:106:27: ( init_declarator_list )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==IDENTIFIER||LA8_0==30||LA8_0==32))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:106:27: init_declarator_list
					{
					DebugLocation(106, 27);
					PushFollow(Follow._init_declarator_list_in_declaration206);
					init_declarator_list15=init_declarator_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator_list15.Tree, init_declarator_list15, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(106, 49);
				char_literal16=(IToken)Match(input,47,Follow._47_in_declaration209); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal16_tree = (object)adaptor.Create(char_literal16, retval);
				adaptor.AddChild(root_0, char_literal16_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 4);
			LeaveRule("declaration", 4);
			LeaveRule_declaration();
			if (state.backtracking > 0) { Memoize(input, 4, declaration_StartIndex); }

			declaration_scopeAfter(declaration_stack.Peek());declaration_stack.Pop();
		}
		DebugLocation(107, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"

	partial void EnterRule_declaration_specifiers();
	partial void LeaveRule_declaration_specifiers();

	// $ANTLR start "declaration_specifiers"
	// C.g:109:1: declaration_specifiers : ( storage_class_specifier | type_specifier | type_qualifier | gcc_qualifier )+ ;
	[GrammarRule("declaration_specifiers")]
	public XAstParserRuleReturnScope declaration_specifiers()
	{
		EnterRule_declaration_specifiers();
		EnterRule("declaration_specifiers", 5);
		var retval = new XAstParserRuleReturnScope("declaration_specifiers");
		
		retval.Start = (IToken)input.LT(1);
		int declaration_specifiers_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope storage_class_specifier17 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_specifier18 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_qualifier19 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_qualifier20 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "declaration_specifiers");
		DebugLocation(109, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// C.g:110:2: ( ( storage_class_specifier | type_specifier | type_qualifier | gcc_qualifier )+ )
			DebugEnterAlt(1);
			// C.g:110:6: ( storage_class_specifier | type_specifier | type_qualifier | gcc_qualifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(110, 6);
			// C.g:110:6: ( storage_class_specifier | type_specifier | type_qualifier | gcc_qualifier )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=5;
				try { DebugEnterDecision(10, false);
				switch (input.LA(1))
				{
				case IDENTIFIER:
					{
					int LA10_2 = input.LA(2);

					if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred13_C_fragment))))
					{
						alt10 = 2;
					}


					}
					break;
				case 68:
				case 79:
				case 86:
				case 91:
					{
					alt10 = 1;
					}
					break;
				case 71:
				case 76:
				case 78:
				case 80:
				case 84:
				case 85:
				case 88:
				case 89:
				case 92:
				case 95:
				case 96:
				case 97:
					{
					alt10 = 2;
					}
					break;
				case 65:
				case 72:
				case 98:
					{
					alt10 = 3;
					}
					break;
				case 63:
				case 64:
				case 66:
				case 67:
					{
					alt10 = 4;
					}
					break;
				}

				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:110:10: storage_class_specifier
					{
					DebugLocation(110, 10);
					PushFollow(Follow._storage_class_specifier_in_declaration_specifiers226);
					storage_class_specifier17=storage_class_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, storage_class_specifier17.Tree, storage_class_specifier17, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:111:7: type_specifier
					{
					DebugLocation(111, 7);
					PushFollow(Follow._type_specifier_in_declaration_specifiers234);
					type_specifier18=type_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_specifier18.Tree, type_specifier18, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C.g:112:7: type_qualifier
					{
					DebugLocation(112, 7);
					PushFollow(Follow._type_qualifier_in_declaration_specifiers242);
					type_qualifier19=type_qualifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier19.Tree, type_qualifier19, retval);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C.g:113:7: gcc_qualifier
					{
					DebugLocation(113, 7);
					PushFollow(Follow._gcc_qualifier_in_declaration_specifiers250);
					gcc_qualifier20=gcc_qualifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_qualifier20.Tree, gcc_qualifier20, retval);

					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration_specifiers", 5);
			LeaveRule("declaration_specifiers", 5);
			LeaveRule_declaration_specifiers();
			if (state.backtracking > 0) { Memoize(input, 5, declaration_specifiers_StartIndex); }

		}
		DebugLocation(115, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration_specifiers"); }
		return retval;

	}
	// $ANTLR end "declaration_specifiers"

	partial void EnterRule_init_declarator_list();
	partial void LeaveRule_init_declarator_list();

	// $ANTLR start "init_declarator_list"
	// C.g:117:1: init_declarator_list : init_declarator ( ',' init_declarator )* ;
	[GrammarRule("init_declarator_list")]
	public XAstParserRuleReturnScope init_declarator_list()
	{
		EnterRule_init_declarator_list();
		EnterRule("init_declarator_list", 6);
		var retval = new XAstParserRuleReturnScope("init_declarator_list");
		
		retval.Start = (IToken)input.LT(1);
		int init_declarator_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal22 = default(IToken);
		XAstParserRuleReturnScope init_declarator21 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope init_declarator23 = default(XAstParserRuleReturnScope);

		object char_literal22_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "init_declarator_list");
		DebugLocation(117, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// C.g:118:2: ( init_declarator ( ',' init_declarator )* )
			DebugEnterAlt(1);
			// C.g:118:4: init_declarator ( ',' init_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(118, 4);
			PushFollow(Follow._init_declarator_in_init_declarator_list266);
			init_declarator21=init_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator21.Tree, init_declarator21, retval);
			DebugLocation(118, 20);
			// C.g:118:20: ( ',' init_declarator )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==37))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:118:21: ',' init_declarator
					{
					DebugLocation(118, 21);
					char_literal22=(IToken)Match(input,37,Follow._37_in_init_declarator_list269); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal22_tree = (object)adaptor.Create(char_literal22, retval);
					adaptor.AddChild(root_0, char_literal22_tree);
					}
					DebugLocation(118, 25);
					PushFollow(Follow._init_declarator_in_init_declarator_list271);
					init_declarator23=init_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator23.Tree, init_declarator23, retval);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("init_declarator_list", 6);
			LeaveRule("init_declarator_list", 6);
			LeaveRule_init_declarator_list();
			if (state.backtracking > 0) { Memoize(input, 6, init_declarator_list_StartIndex); }

		}
		DebugLocation(119, 1);
		} finally { DebugExitRule(GrammarFileName, "init_declarator_list"); }
		return retval;

	}
	// $ANTLR end "init_declarator_list"

	partial void EnterRule_init_declarator();
	partial void LeaveRule_init_declarator();

	// $ANTLR start "init_declarator"
	// C.g:121:1: init_declarator : declarator ( '=' initializer )? ;
	[GrammarRule("init_declarator")]
	public XAstParserRuleReturnScope init_declarator()
	{
		EnterRule_init_declarator();
		EnterRule("init_declarator", 7);
		var retval = new XAstParserRuleReturnScope("init_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int init_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal25 = default(IToken);
		XAstParserRuleReturnScope declarator24 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope initializer26 = default(XAstParserRuleReturnScope);

		object char_literal25_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "init_declarator");
		DebugLocation(121, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// C.g:122:2: ( declarator ( '=' initializer )? )
			DebugEnterAlt(1);
			// C.g:122:4: declarator ( '=' initializer )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(122, 4);
			PushFollow(Follow._declarator_in_init_declarator284);
			declarator24=declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, declarator24.Tree, declarator24, retval);
			DebugLocation(122, 15);
			// C.g:122:15: ( '=' initializer )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0==52))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:122:16: '=' initializer
				{
				DebugLocation(122, 16);
				char_literal25=(IToken)Match(input,52,Follow._52_in_init_declarator287); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal25_tree = (object)adaptor.Create(char_literal25, retval);
				adaptor.AddChild(root_0, char_literal25_tree);
				}
				DebugLocation(122, 20);
				PushFollow(Follow._initializer_in_init_declarator289);
				initializer26=initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, initializer26.Tree, initializer26, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("init_declarator", 7);
			LeaveRule("init_declarator", 7);
			LeaveRule_init_declarator();
			if (state.backtracking > 0) { Memoize(input, 7, init_declarator_StartIndex); }

		}
		DebugLocation(123, 1);
		} finally { DebugExitRule(GrammarFileName, "init_declarator"); }
		return retval;

	}
	// $ANTLR end "init_declarator"

	partial void EnterRule_storage_class_specifier();
	partial void LeaveRule_storage_class_specifier();

	// $ANTLR start "storage_class_specifier"
	// C.g:125:1: storage_class_specifier : ( 'extern' | 'static' | 'auto' | 'register' );
	[GrammarRule("storage_class_specifier")]
	public XAstParserRuleReturnScope storage_class_specifier()
	{
		EnterRule_storage_class_specifier();
		EnterRule("storage_class_specifier", 8);
		var retval = new XAstParserRuleReturnScope("storage_class_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int storage_class_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set27 = default(IToken);

		object set27_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "storage_class_specifier");
		DebugLocation(125, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// C.g:126:2: ( 'extern' | 'static' | 'auto' | 'register' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(126, 2);

			set27=(IToken)input.LT(1);
			if (input.LA(1)==68||input.LA(1)==79||input.LA(1)==86||input.LA(1)==91)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set27, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("storage_class_specifier", 8);
			LeaveRule("storage_class_specifier", 8);
			LeaveRule_storage_class_specifier();
			if (state.backtracking > 0) { Memoize(input, 8, storage_class_specifier_StartIndex); }

		}
		DebugLocation(130, 1);
		} finally { DebugExitRule(GrammarFileName, "storage_class_specifier"); }
		return retval;

	}
	// $ANTLR end "storage_class_specifier"

	partial void EnterRule_type_specifier();
	partial void LeaveRule_type_specifier();

	// $ANTLR start "type_specifier"
	// C.g:132:1: type_specifier : ( 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | struct_or_union_specifier | enum_specifier | type_id );
	[GrammarRule("type_specifier")]
	public XAstParserRuleReturnScope type_specifier()
	{
		EnterRule_type_specifier();
		EnterRule("type_specifier", 9);
		var retval = new XAstParserRuleReturnScope("type_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int type_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal28 = default(IToken);
		IToken string_literal29 = default(IToken);
		IToken string_literal30 = default(IToken);
		IToken string_literal31 = default(IToken);
		IToken string_literal32 = default(IToken);
		IToken string_literal33 = default(IToken);
		IToken string_literal34 = default(IToken);
		IToken string_literal35 = default(IToken);
		IToken string_literal36 = default(IToken);
		XAstParserRuleReturnScope struct_or_union_specifier37 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enum_specifier38 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_id39 = default(XAstParserRuleReturnScope);

		object string_literal28_tree = default(object);
		object string_literal29_tree = default(object);
		object string_literal30_tree = default(object);
		object string_literal31_tree = default(object);
		object string_literal32_tree = default(object);
		object string_literal33_tree = default(object);
		object string_literal34_tree = default(object);
		object string_literal35_tree = default(object);
		object string_literal36_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_specifier");
		DebugLocation(132, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// C.g:133:2: ( 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | struct_or_union_specifier | enum_specifier | type_id )
			int alt13=12;
			try { DebugEnterDecision(13, false);
			switch (input.LA(1))
			{
			case 97:
				{
				alt13 = 1;
				}
				break;
			case 71:
				{
				alt13 = 2;
				}
				break;
			case 88:
				{
				alt13 = 3;
				}
				break;
			case 84:
				{
				alt13 = 4;
				}
				break;
			case 85:
				{
				alt13 = 5;
				}
				break;
			case 80:
				{
				alt13 = 6;
				}
				break;
			case 76:
				{
				alt13 = 7;
				}
				break;
			case 89:
				{
				alt13 = 8;
				}
				break;
			case 96:
				{
				alt13 = 9;
				}
				break;
			case 92:
			case 95:
				{
				alt13 = 10;
				}
				break;
			case 78:
				{
				alt13 = 11;
				}
				break;
			case IDENTIFIER:
				{
				alt13 = 12;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:133:4: 'void'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(133, 4);
				string_literal28=(IToken)Match(input,97,Follow._97_in_type_specifier328); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal28_tree = (object)adaptor.Create(string_literal28, retval);
				adaptor.AddChild(root_0, string_literal28_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:134:4: 'char'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(134, 4);
				string_literal29=(IToken)Match(input,71,Follow._71_in_type_specifier333); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal29_tree = (object)adaptor.Create(string_literal29, retval);
				adaptor.AddChild(root_0, string_literal29_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:135:4: 'short'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(135, 4);
				string_literal30=(IToken)Match(input,88,Follow._88_in_type_specifier338); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal30_tree = (object)adaptor.Create(string_literal30, retval);
				adaptor.AddChild(root_0, string_literal30_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:136:4: 'int'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(136, 4);
				string_literal31=(IToken)Match(input,84,Follow._84_in_type_specifier343); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal31_tree = (object)adaptor.Create(string_literal31, retval);
				adaptor.AddChild(root_0, string_literal31_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:137:4: 'long'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(137, 4);
				string_literal32=(IToken)Match(input,85,Follow._85_in_type_specifier348); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal32_tree = (object)adaptor.Create(string_literal32, retval);
				adaptor.AddChild(root_0, string_literal32_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:138:4: 'float'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(138, 4);
				string_literal33=(IToken)Match(input,80,Follow._80_in_type_specifier353); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal33_tree = (object)adaptor.Create(string_literal33, retval);
				adaptor.AddChild(root_0, string_literal33_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C.g:139:4: 'double'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(139, 4);
				string_literal34=(IToken)Match(input,76,Follow._76_in_type_specifier358); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal34_tree = (object)adaptor.Create(string_literal34, retval);
				adaptor.AddChild(root_0, string_literal34_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C.g:140:4: 'signed'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(140, 4);
				string_literal35=(IToken)Match(input,89,Follow._89_in_type_specifier363); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal35_tree = (object)adaptor.Create(string_literal35, retval);
				adaptor.AddChild(root_0, string_literal35_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C.g:141:4: 'unsigned'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(141, 4);
				string_literal36=(IToken)Match(input,96,Follow._96_in_type_specifier368); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal36_tree = (object)adaptor.Create(string_literal36, retval);
				adaptor.AddChild(root_0, string_literal36_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C.g:142:4: struct_or_union_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(142, 4);
				PushFollow(Follow._struct_or_union_specifier_in_type_specifier373);
				struct_or_union_specifier37=struct_or_union_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_or_union_specifier37.Tree, struct_or_union_specifier37, retval);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C.g:143:4: enum_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(143, 4);
				PushFollow(Follow._enum_specifier_in_type_specifier378);
				enum_specifier38=enum_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_specifier38.Tree, enum_specifier38, retval);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C.g:144:4: type_id
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(144, 4);
				PushFollow(Follow._type_id_in_type_specifier383);
				type_id39=type_id();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_id39.Tree, type_id39, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_specifier", 9);
			LeaveRule("type_specifier", 9);
			LeaveRule_type_specifier();
			if (state.backtracking > 0) { Memoize(input, 9, type_specifier_StartIndex); }

		}
		DebugLocation(145, 1);
		} finally { DebugExitRule(GrammarFileName, "type_specifier"); }
		return retval;

	}
	// $ANTLR end "type_specifier"

	partial void EnterRule_gcc_qualifier();
	partial void LeaveRule_gcc_qualifier();

	// $ANTLR start "gcc_qualifier"
	// C.g:147:1: gcc_qualifier : ( '__builtin_va_list' | '__inline' | '__attribute__' '(' '(' attribute_value ( ',' attribute_value )* ')' ')' | '__inline__' );
	[GrammarRule("gcc_qualifier")]
	public XAstParserRuleReturnScope gcc_qualifier()
	{
		EnterRule_gcc_qualifier();
		EnterRule("gcc_qualifier", 10);
		var retval = new XAstParserRuleReturnScope("gcc_qualifier");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_qualifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal40 = default(IToken);
		IToken string_literal41 = default(IToken);
		IToken string_literal42 = default(IToken);
		IToken char_literal43 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken char_literal46 = default(IToken);
		IToken char_literal48 = default(IToken);
		IToken char_literal49 = default(IToken);
		IToken string_literal50 = default(IToken);
		XAstParserRuleReturnScope attribute_value45 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attribute_value47 = default(XAstParserRuleReturnScope);

		object string_literal40_tree = default(object);
		object string_literal41_tree = default(object);
		object string_literal42_tree = default(object);
		object char_literal43_tree = default(object);
		object char_literal44_tree = default(object);
		object char_literal46_tree = default(object);
		object char_literal48_tree = default(object);
		object char_literal49_tree = default(object);
		object string_literal50_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_qualifier");
		DebugLocation(147, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// C.g:148:2: ( '__builtin_va_list' | '__inline' | '__attribute__' '(' '(' attribute_value ( ',' attribute_value )* ')' ')' | '__inline__' )
			int alt15=4;
			try { DebugEnterDecision(15, false);
			switch (input.LA(1))
			{
			case 64:
				{
				alt15 = 1;
				}
				break;
			case 66:
				{
				alt15 = 2;
				}
				break;
			case 63:
				{
				alt15 = 3;
				}
				break;
			case 67:
				{
				alt15 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:148:4: '__builtin_va_list'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(148, 4);
				string_literal40=(IToken)Match(input,64,Follow._64_in_gcc_qualifier413); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal40_tree = (object)adaptor.Create(string_literal40, retval);
				adaptor.AddChild(root_0, string_literal40_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:149:4: '__inline'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(149, 4);
				string_literal41=(IToken)Match(input,66,Follow._66_in_gcc_qualifier418); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal41_tree = (object)adaptor.Create(string_literal41, retval);
				adaptor.AddChild(root_0, string_literal41_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:150:4: '__attribute__' '(' '(' attribute_value ( ',' attribute_value )* ')' ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(150, 4);
				string_literal42=(IToken)Match(input,63,Follow._63_in_gcc_qualifier423); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal42_tree = (object)adaptor.Create(string_literal42, retval);
				adaptor.AddChild(root_0, string_literal42_tree);
				}
				DebugLocation(150, 20);
				char_literal43=(IToken)Match(input,30,Follow._30_in_gcc_qualifier425); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal43_tree = (object)adaptor.Create(char_literal43, retval);
				adaptor.AddChild(root_0, char_literal43_tree);
				}
				DebugLocation(150, 24);
				char_literal44=(IToken)Match(input,30,Follow._30_in_gcc_qualifier427); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal44_tree = (object)adaptor.Create(char_literal44, retval);
				adaptor.AddChild(root_0, char_literal44_tree);
				}
				DebugLocation(150, 28);
				PushFollow(Follow._attribute_value_in_gcc_qualifier429);
				attribute_value45=attribute_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_value45.Tree, attribute_value45, retval);
				DebugLocation(150, 44);
				// C.g:150:44: ( ',' attribute_value )*
				try { DebugEnterSubRule(14);
				while (true)
				{
					int alt14=2;
					try { DebugEnterDecision(14, false);
					int LA14_0 = input.LA(1);

					if ((LA14_0==37))
					{
						alt14 = 1;
					}


					} finally { DebugExitDecision(14); }
					switch ( alt14 )
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:150:45: ',' attribute_value
						{
						DebugLocation(150, 45);
						char_literal46=(IToken)Match(input,37,Follow._37_in_gcc_qualifier432); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal46_tree = (object)adaptor.Create(char_literal46, retval);
						adaptor.AddChild(root_0, char_literal46_tree);
						}
						DebugLocation(150, 49);
						PushFollow(Follow._attribute_value_in_gcc_qualifier434);
						attribute_value47=attribute_value();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_value47.Tree, attribute_value47, retval);

						}
						break;

					default:
						goto loop14;
					}
				}

				loop14:
					;

				} finally { DebugExitSubRule(14); }

				DebugLocation(150, 67);
				char_literal48=(IToken)Match(input,31,Follow._31_in_gcc_qualifier438); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal48_tree = (object)adaptor.Create(char_literal48, retval);
				adaptor.AddChild(root_0, char_literal48_tree);
				}
				DebugLocation(150, 71);
				char_literal49=(IToken)Match(input,31,Follow._31_in_gcc_qualifier440); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal49_tree = (object)adaptor.Create(char_literal49, retval);
				adaptor.AddChild(root_0, char_literal49_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:151:4: '__inline__'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(151, 4);
				string_literal50=(IToken)Match(input,67,Follow._67_in_gcc_qualifier445); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal50_tree = (object)adaptor.Create(string_literal50, retval);
				adaptor.AddChild(root_0, string_literal50_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_qualifier", 10);
			LeaveRule("gcc_qualifier", 10);
			LeaveRule_gcc_qualifier();
			if (state.backtracking > 0) { Memoize(input, 10, gcc_qualifier_StartIndex); }

		}
		DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_qualifier"); }
		return retval;

	}
	// $ANTLR end "gcc_qualifier"

	partial void EnterRule_attribute_value();
	partial void LeaveRule_attribute_value();

	// $ANTLR start "attribute_value"
	// C.g:154:1: attribute_value : IDENTIFIER ( '(' constant ( ',' constant )* ')' )? ;
	[GrammarRule("attribute_value")]
	public XAstParserRuleReturnScope attribute_value()
	{
		EnterRule_attribute_value();
		EnterRule("attribute_value", 11);
		var retval = new XAstParserRuleReturnScope("attribute_value");
		
		retval.Start = (IToken)input.LT(1);
		int attribute_value_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER51 = default(IToken);
		IToken char_literal52 = default(IToken);
		IToken char_literal54 = default(IToken);
		IToken char_literal56 = default(IToken);
		XAstParserRuleReturnScope constant53 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant55 = default(XAstParserRuleReturnScope);

		object IDENTIFIER51_tree = default(object);
		object char_literal52_tree = default(object);
		object char_literal54_tree = default(object);
		object char_literal56_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "attribute_value");
		DebugLocation(154, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// C.g:155:2: ( IDENTIFIER ( '(' constant ( ',' constant )* ')' )? )
			DebugEnterAlt(1);
			// C.g:155:4: IDENTIFIER ( '(' constant ( ',' constant )* ')' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(155, 4);
			IDENTIFIER51=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_attribute_value473), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER51_tree = (object)adaptor.Create(IDENTIFIER51, retval);
			adaptor.AddChild(root_0, IDENTIFIER51_tree);
			}
			DebugLocation(155, 15);
			// C.g:155:15: ( '(' constant ( ',' constant )* ')' )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==30))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:155:17: '(' constant ( ',' constant )* ')'
				{
				DebugLocation(155, 17);
				char_literal52=(IToken)Match(input,30,Follow._30_in_attribute_value477); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal52_tree = (object)adaptor.Create(char_literal52, retval);
				adaptor.AddChild(root_0, char_literal52_tree);
				}
				DebugLocation(155, 21);
				PushFollow(Follow._constant_in_attribute_value479);
				constant53=constant();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant53.Tree, constant53, retval);
				DebugLocation(155, 30);
				// C.g:155:30: ( ',' constant )*
				try { DebugEnterSubRule(16);
				while (true)
				{
					int alt16=2;
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==37))
					{
						alt16 = 1;
					}


					} finally { DebugExitDecision(16); }
					switch ( alt16 )
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:155:31: ',' constant
						{
						DebugLocation(155, 31);
						char_literal54=(IToken)Match(input,37,Follow._37_in_attribute_value482); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal54_tree = (object)adaptor.Create(char_literal54, retval);
						adaptor.AddChild(root_0, char_literal54_tree);
						}
						DebugLocation(155, 35);
						PushFollow(Follow._constant_in_attribute_value484);
						constant55=constant();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, constant55.Tree, constant55, retval);

						}
						break;

					default:
						goto loop16;
					}
				}

				loop16:
					;

				} finally { DebugExitSubRule(16); }

				DebugLocation(155, 46);
				char_literal56=(IToken)Match(input,31,Follow._31_in_attribute_value488); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal56_tree = (object)adaptor.Create(char_literal56, retval);
				adaptor.AddChild(root_0, char_literal56_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(17); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_value", 11);
			LeaveRule("attribute_value", 11);
			LeaveRule_attribute_value();
			if (state.backtracking > 0) { Memoize(input, 11, attribute_value_StartIndex); }

		}
		DebugLocation(156, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_value"); }
		return retval;

	}
	// $ANTLR end "attribute_value"

	partial void EnterRule_type_id();
	partial void LeaveRule_type_id();

	// $ANTLR start "type_id"
	// C.g:158:1: type_id :{...}? IDENTIFIER ;
	[GrammarRule("type_id")]
	public XAstParserRuleReturnScope type_id()
	{
		EnterRule_type_id();
		EnterRule("type_id", 12);
		var retval = new XAstParserRuleReturnScope("type_id");
		
		retval.Start = (IToken)input.LT(1);
		int type_id_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER57 = default(IToken);

		object IDENTIFIER57_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_id");
		DebugLocation(158, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// C.g:159:2: ({...}? IDENTIFIER )
			DebugEnterAlt(1);
			// C.g:159:6: {...}? IDENTIFIER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(159, 6);
			if (!((isTypeName(input.LT(1).getText()))))
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "type_id", "isTypeName(input.LT(1).getText())");
			}
			DebugLocation(159, 43);
			IDENTIFIER57=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_type_id506), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER57_tree = (object)adaptor.Create(IDENTIFIER57, retval);
			adaptor.AddChild(root_0, IDENTIFIER57_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_id", 12);
			LeaveRule("type_id", 12);
			LeaveRule_type_id();
			if (state.backtracking > 0) { Memoize(input, 12, type_id_StartIndex); }

		}
		DebugLocation(161, 1);
		} finally { DebugExitRule(GrammarFileName, "type_id"); }
		return retval;

	}
	// $ANTLR end "type_id"

	partial void EnterRule_struct_or_union_specifier();
	partial void LeaveRule_struct_or_union_specifier();

	// $ANTLR start "struct_or_union_specifier"
	// C.g:163:1: struct_or_union_specifier options {k=3; } : ( struct_or_union ( IDENTIFIER )? '{' struct_declaration_list '}' | struct_or_union IDENTIFIER );
	[GrammarRule("struct_or_union_specifier")]
	public XAstParserRuleReturnScope struct_or_union_specifier()
	{
		EnterRule_struct_or_union_specifier();
		EnterRule("struct_or_union_specifier", 13);
		var retval = new XAstParserRuleReturnScope("struct_or_union_specifier");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int struct_or_union_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER59 = default(IToken);
		IToken char_literal60 = default(IToken);
		IToken char_literal62 = default(IToken);
		IToken IDENTIFIER64 = default(IToken);
		XAstParserRuleReturnScope struct_or_union58 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declaration_list61 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_or_union63 = default(XAstParserRuleReturnScope);

		object IDENTIFIER59_tree = default(object);
		object char_literal60_tree = default(object);
		object char_literal62_tree = default(object);
		object IDENTIFIER64_tree = default(object);

		  Symbols_stack.Peek().types =  new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "struct_or_union_specifier");
		DebugLocation(163, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// C.g:169:2: ( struct_or_union ( IDENTIFIER )? '{' struct_declaration_list '}' | struct_or_union IDENTIFIER )
			int alt19=2;
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==92||LA19_0==95))
			{
				int LA19_1 = input.LA(2);

				if ((LA19_1==IDENTIFIER))
				{
					int LA19_2 = input.LA(3);

					if ((LA19_2==100))
					{
						alt19 = 1;
					}
					else if ((LA19_2==EOF||LA19_2==IDENTIFIER||(LA19_2>=30 && LA19_2<=32)||LA19_2==37||(LA19_2>=46 && LA19_2<=47)||LA19_2==59||(LA19_2>=63 && LA19_2<=68)||(LA19_2>=71 && LA19_2<=72)||LA19_2==76||(LA19_2>=78 && LA19_2<=80)||(LA19_2>=84 && LA19_2<=86)||(LA19_2>=88 && LA19_2<=89)||(LA19_2>=91 && LA19_2<=92)||(LA19_2>=95 && LA19_2<=98)))
					{
						alt19 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 19, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA19_1==100))
				{
					alt19 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 19, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:169:4: struct_or_union ( IDENTIFIER )? '{' struct_declaration_list '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(169, 4);
				PushFollow(Follow._struct_or_union_in_struct_or_union_specifier536);
				struct_or_union58=struct_or_union();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_or_union58.Tree, struct_or_union58, retval);
				DebugLocation(169, 20);
				// C.g:169:20: ( IDENTIFIER )?
				int alt18=2;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==IDENTIFIER))
				{
					alt18 = 1;
				}
				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:169:20: IDENTIFIER
					{
					DebugLocation(169, 20);
					IDENTIFIER59=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_struct_or_union_specifier538), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER59_tree = (object)adaptor.Create(IDENTIFIER59, retval);
					adaptor.AddChild(root_0, IDENTIFIER59_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(18); }

				DebugLocation(169, 32);
				char_literal60=(IToken)Match(input,100,Follow._100_in_struct_or_union_specifier541); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal60_tree = (object)adaptor.Create(char_literal60, retval);
				adaptor.AddChild(root_0, char_literal60_tree);
				}
				DebugLocation(169, 36);
				PushFollow(Follow._struct_declaration_list_in_struct_or_union_specifier543);
				struct_declaration_list61=struct_declaration_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration_list61.Tree, struct_declaration_list61, retval);
				DebugLocation(169, 60);
				char_literal62=(IToken)Match(input,104,Follow._104_in_struct_or_union_specifier545); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal62_tree = (object)adaptor.Create(char_literal62, retval);
				adaptor.AddChild(root_0, char_literal62_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:170:4: struct_or_union IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(170, 4);
				PushFollow(Follow._struct_or_union_in_struct_or_union_specifier550);
				struct_or_union63=struct_or_union();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_or_union63.Tree, struct_or_union63, retval);
				DebugLocation(170, 20);
				IDENTIFIER64=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_struct_or_union_specifier552), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER64_tree = (object)adaptor.Create(IDENTIFIER64, retval);
				adaptor.AddChild(root_0, IDENTIFIER64_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_or_union_specifier", 13);
			LeaveRule("struct_or_union_specifier", 13);
			LeaveRule_struct_or_union_specifier();
			if (state.backtracking > 0) { Memoize(input, 13, struct_or_union_specifier_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(171, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_or_union_specifier"); }
		return retval;

	}
	// $ANTLR end "struct_or_union_specifier"

	partial void EnterRule_struct_or_union();
	partial void LeaveRule_struct_or_union();

	// $ANTLR start "struct_or_union"
	// C.g:173:1: struct_or_union : ( 'struct' | 'union' );
	[GrammarRule("struct_or_union")]
	public XAstParserRuleReturnScope struct_or_union()
	{
		EnterRule_struct_or_union();
		EnterRule("struct_or_union", 14);
		var retval = new XAstParserRuleReturnScope("struct_or_union");
		
		retval.Start = (IToken)input.LT(1);
		int struct_or_union_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set65 = default(IToken);

		object set65_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_or_union");
		DebugLocation(173, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// C.g:174:2: ( 'struct' | 'union' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(174, 2);

			set65=(IToken)input.LT(1);
			if (input.LA(1)==92||input.LA(1)==95)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set65, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_or_union", 14);
			LeaveRule("struct_or_union", 14);
			LeaveRule_struct_or_union();
			if (state.backtracking > 0) { Memoize(input, 14, struct_or_union_StartIndex); }

		}
		DebugLocation(176, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_or_union"); }
		return retval;

	}
	// $ANTLR end "struct_or_union"

	partial void EnterRule_struct_declaration_list();
	partial void LeaveRule_struct_declaration_list();

	// $ANTLR start "struct_declaration_list"
	// C.g:178:1: struct_declaration_list : ( struct_declaration )+ ;
	[GrammarRule("struct_declaration_list")]
	public XAstParserRuleReturnScope struct_declaration_list()
	{
		EnterRule_struct_declaration_list();
		EnterRule("struct_declaration_list", 15);
		var retval = new XAstParserRuleReturnScope("struct_declaration_list");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declaration_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope struct_declaration66 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "struct_declaration_list");
		DebugLocation(178, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// C.g:179:2: ( ( struct_declaration )+ )
			DebugEnterAlt(1);
			// C.g:179:4: ( struct_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(179, 4);
			// C.g:179:4: ( struct_declaration )+
			int cnt20=0;
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_0 = input.LA(1);

				if ((LA20_0==IDENTIFIER||LA20_0==65||(LA20_0>=71 && LA20_0<=72)||LA20_0==76||LA20_0==78||LA20_0==80||(LA20_0>=84 && LA20_0<=85)||(LA20_0>=88 && LA20_0<=89)||LA20_0==92||(LA20_0>=95 && LA20_0<=98)))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:179:4: struct_declaration
					{
					DebugLocation(179, 4);
					PushFollow(Follow._struct_declaration_in_struct_declaration_list579);
					struct_declaration66=struct_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration66.Tree, struct_declaration66, retval);

					}
					break;

				default:
					if (cnt20 >= 1)
						goto loop20;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee20 = new EarlyExitException( 20, input );
					DebugRecognitionException(eee20);
					throw eee20;
				}
				cnt20++;
			}
			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declaration_list", 15);
			LeaveRule("struct_declaration_list", 15);
			LeaveRule_struct_declaration_list();
			if (state.backtracking > 0) { Memoize(input, 15, struct_declaration_list_StartIndex); }

		}
		DebugLocation(180, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_declaration_list"); }
		return retval;

	}
	// $ANTLR end "struct_declaration_list"

	partial void EnterRule_struct_declaration();
	partial void LeaveRule_struct_declaration();

	// $ANTLR start "struct_declaration"
	// C.g:182:1: struct_declaration : specifier_qualifier_list struct_declarator_list ';' ;
	[GrammarRule("struct_declaration")]
	public XAstParserRuleReturnScope struct_declaration()
	{
		EnterRule_struct_declaration();
		EnterRule("struct_declaration", 16);
		var retval = new XAstParserRuleReturnScope("struct_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal69 = default(IToken);
		XAstParserRuleReturnScope specifier_qualifier_list67 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declarator_list68 = default(XAstParserRuleReturnScope);

		object char_literal69_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_declaration");
		DebugLocation(182, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// C.g:183:2: ( specifier_qualifier_list struct_declarator_list ';' )
			DebugEnterAlt(1);
			// C.g:183:4: specifier_qualifier_list struct_declarator_list ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(183, 4);
			PushFollow(Follow._specifier_qualifier_list_in_struct_declaration591);
			specifier_qualifier_list67=specifier_qualifier_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, specifier_qualifier_list67.Tree, specifier_qualifier_list67, retval);
			DebugLocation(183, 29);
			PushFollow(Follow._struct_declarator_list_in_struct_declaration593);
			struct_declarator_list68=struct_declarator_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declarator_list68.Tree, struct_declarator_list68, retval);
			DebugLocation(183, 52);
			char_literal69=(IToken)Match(input,47,Follow._47_in_struct_declaration595); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal69_tree = (object)adaptor.Create(char_literal69, retval);
			adaptor.AddChild(root_0, char_literal69_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declaration", 16);
			LeaveRule("struct_declaration", 16);
			LeaveRule_struct_declaration();
			if (state.backtracking > 0) { Memoize(input, 16, struct_declaration_StartIndex); }

		}
		DebugLocation(184, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_declaration"); }
		return retval;

	}
	// $ANTLR end "struct_declaration"

	partial void EnterRule_specifier_qualifier_list();
	partial void LeaveRule_specifier_qualifier_list();

	// $ANTLR start "specifier_qualifier_list"
	// C.g:186:1: specifier_qualifier_list : ( type_qualifier | type_specifier )+ ;
	[GrammarRule("specifier_qualifier_list")]
	public XAstParserRuleReturnScope specifier_qualifier_list()
	{
		EnterRule_specifier_qualifier_list();
		EnterRule("specifier_qualifier_list", 17);
		var retval = new XAstParserRuleReturnScope("specifier_qualifier_list");
		
		retval.Start = (IToken)input.LT(1);
		int specifier_qualifier_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope type_qualifier70 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_specifier71 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "specifier_qualifier_list");
		DebugLocation(186, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// C.g:187:2: ( ( type_qualifier | type_specifier )+ )
			DebugEnterAlt(1);
			// C.g:187:4: ( type_qualifier | type_specifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(187, 4);
			// C.g:187:4: ( type_qualifier | type_specifier )+
			int cnt21=0;
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=3;
				try { DebugEnterDecision(21, false);
				switch (input.LA(1))
				{
				case IDENTIFIER:
					{
					switch (input.LA(2))
					{
					case 59:
						{
						int LA21_19 = input.LA(3);

						if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred43_C_fragment))))
						{
							alt21 = 2;
						}


						}
						break;
					case 30:
						{
						int LA21_20 = input.LA(3);

						if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred43_C_fragment))))
						{
							alt21 = 2;
						}


						}
						break;
					case 46:
						{
						int LA21_21 = input.LA(3);

						if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred43_C_fragment))))
						{
							alt21 = 2;
						}


						}
						break;
					case IDENTIFIER:
					case 31:
					case 32:
					case 65:
					case 71:
					case 72:
					case 76:
					case 78:
					case 80:
					case 84:
					case 85:
					case 88:
					case 89:
					case 92:
					case 95:
					case 96:
					case 97:
					case 98:
						{
						alt21 = 2;
						}
						break;
					}

					}
					break;
				case 65:
				case 72:
				case 98:
					{
					alt21 = 1;
					}
					break;
				case 71:
				case 76:
				case 78:
				case 80:
				case 84:
				case 85:
				case 88:
				case 89:
				case 92:
				case 95:
				case 96:
				case 97:
					{
					alt21 = 2;
					}
					break;
				}

				} finally { DebugExitDecision(21); }
				switch (alt21)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:187:6: type_qualifier
					{
					DebugLocation(187, 6);
					PushFollow(Follow._type_qualifier_in_specifier_qualifier_list608);
					type_qualifier70=type_qualifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier70.Tree, type_qualifier70, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:187:23: type_specifier
					{
					DebugLocation(187, 23);
					PushFollow(Follow._type_specifier_in_specifier_qualifier_list612);
					type_specifier71=type_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_specifier71.Tree, type_specifier71, retval);

					}
					break;

				default:
					if (cnt21 >= 1)
						goto loop21;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee21 = new EarlyExitException( 21, input );
					DebugRecognitionException(eee21);
					throw eee21;
				}
				cnt21++;
			}
			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("specifier_qualifier_list", 17);
			LeaveRule("specifier_qualifier_list", 17);
			LeaveRule_specifier_qualifier_list();
			if (state.backtracking > 0) { Memoize(input, 17, specifier_qualifier_list_StartIndex); }

		}
		DebugLocation(188, 1);
		} finally { DebugExitRule(GrammarFileName, "specifier_qualifier_list"); }
		return retval;

	}
	// $ANTLR end "specifier_qualifier_list"

	partial void EnterRule_struct_declarator_list();
	partial void LeaveRule_struct_declarator_list();

	// $ANTLR start "struct_declarator_list"
	// C.g:190:1: struct_declarator_list : struct_declarator ( ',' struct_declarator )* ;
	[GrammarRule("struct_declarator_list")]
	public XAstParserRuleReturnScope struct_declarator_list()
	{
		EnterRule_struct_declarator_list();
		EnterRule("struct_declarator_list", 18);
		var retval = new XAstParserRuleReturnScope("struct_declarator_list");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declarator_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal73 = default(IToken);
		XAstParserRuleReturnScope struct_declarator72 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declarator74 = default(XAstParserRuleReturnScope);

		object char_literal73_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_declarator_list");
		DebugLocation(190, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// C.g:191:2: ( struct_declarator ( ',' struct_declarator )* )
			DebugEnterAlt(1);
			// C.g:191:4: struct_declarator ( ',' struct_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(191, 4);
			PushFollow(Follow._struct_declarator_in_struct_declarator_list626);
			struct_declarator72=struct_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declarator72.Tree, struct_declarator72, retval);
			DebugLocation(191, 22);
			// C.g:191:22: ( ',' struct_declarator )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_0 = input.LA(1);

				if ((LA22_0==37))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:191:23: ',' struct_declarator
					{
					DebugLocation(191, 23);
					char_literal73=(IToken)Match(input,37,Follow._37_in_struct_declarator_list629); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal73_tree = (object)adaptor.Create(char_literal73, retval);
					adaptor.AddChild(root_0, char_literal73_tree);
					}
					DebugLocation(191, 27);
					PushFollow(Follow._struct_declarator_in_struct_declarator_list631);
					struct_declarator74=struct_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declarator74.Tree, struct_declarator74, retval);

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declarator_list", 18);
			LeaveRule("struct_declarator_list", 18);
			LeaveRule_struct_declarator_list();
			if (state.backtracking > 0) { Memoize(input, 18, struct_declarator_list_StartIndex); }

		}
		DebugLocation(192, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_declarator_list"); }
		return retval;

	}
	// $ANTLR end "struct_declarator_list"

	partial void EnterRule_struct_declarator();
	partial void LeaveRule_struct_declarator();

	// $ANTLR start "struct_declarator"
	// C.g:194:1: struct_declarator : ( declarator ( ':' constant_expression )? | ':' constant_expression );
	[GrammarRule("struct_declarator")]
	public XAstParserRuleReturnScope struct_declarator()
	{
		EnterRule_struct_declarator();
		EnterRule("struct_declarator", 19);
		var retval = new XAstParserRuleReturnScope("struct_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal76 = default(IToken);
		IToken char_literal78 = default(IToken);
		XAstParserRuleReturnScope declarator75 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression77 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression79 = default(XAstParserRuleReturnScope);

		object char_literal76_tree = default(object);
		object char_literal78_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_declarator");
		DebugLocation(194, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// C.g:195:2: ( declarator ( ':' constant_expression )? | ':' constant_expression )
			int alt24=2;
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==IDENTIFIER||LA24_0==30||LA24_0==32))
			{
				alt24 = 1;
			}
			else if ((LA24_0==46))
			{
				alt24 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:195:4: declarator ( ':' constant_expression )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(195, 4);
				PushFollow(Follow._declarator_in_struct_declarator644);
				declarator75=declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declarator75.Tree, declarator75, retval);
				DebugLocation(195, 15);
				// C.g:195:15: ( ':' constant_expression )?
				int alt23=2;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, false);
				int LA23_0 = input.LA(1);

				if ((LA23_0==46))
				{
					alt23 = 1;
				}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:195:16: ':' constant_expression
					{
					DebugLocation(195, 16);
					char_literal76=(IToken)Match(input,46,Follow._46_in_struct_declarator647); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal76_tree = (object)adaptor.Create(char_literal76, retval);
					adaptor.AddChild(root_0, char_literal76_tree);
					}
					DebugLocation(195, 20);
					PushFollow(Follow._constant_expression_in_struct_declarator649);
					constant_expression77=constant_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression77.Tree, constant_expression77, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(23); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:196:4: ':' constant_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(196, 4);
				char_literal78=(IToken)Match(input,46,Follow._46_in_struct_declarator656); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal78_tree = (object)adaptor.Create(char_literal78, retval);
				adaptor.AddChild(root_0, char_literal78_tree);
				}
				DebugLocation(196, 8);
				PushFollow(Follow._constant_expression_in_struct_declarator658);
				constant_expression79=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression79.Tree, constant_expression79, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declarator", 19);
			LeaveRule("struct_declarator", 19);
			LeaveRule_struct_declarator();
			if (state.backtracking > 0) { Memoize(input, 19, struct_declarator_StartIndex); }

		}
		DebugLocation(197, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_declarator"); }
		return retval;

	}
	// $ANTLR end "struct_declarator"

	partial void EnterRule_enum_specifier();
	partial void LeaveRule_enum_specifier();

	// $ANTLR start "enum_specifier"
	// C.g:199:1: enum_specifier options {k=3; } : ( 'enum' '{' enumerator_list '}' | 'enum' IDENTIFIER '{' enumerator_list '}' | 'enum' IDENTIFIER );
	[GrammarRule("enum_specifier")]
	public XAstParserRuleReturnScope enum_specifier()
	{
		EnterRule_enum_specifier();
		EnterRule("enum_specifier", 20);
		var retval = new XAstParserRuleReturnScope("enum_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int enum_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal80 = default(IToken);
		IToken char_literal81 = default(IToken);
		IToken char_literal83 = default(IToken);
		IToken string_literal84 = default(IToken);
		IToken IDENTIFIER85 = default(IToken);
		IToken char_literal86 = default(IToken);
		IToken char_literal88 = default(IToken);
		IToken string_literal89 = default(IToken);
		IToken IDENTIFIER90 = default(IToken);
		XAstParserRuleReturnScope enumerator_list82 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enumerator_list87 = default(XAstParserRuleReturnScope);

		object string_literal80_tree = default(object);
		object char_literal81_tree = default(object);
		object char_literal83_tree = default(object);
		object string_literal84_tree = default(object);
		object IDENTIFIER85_tree = default(object);
		object char_literal86_tree = default(object);
		object char_literal88_tree = default(object);
		object string_literal89_tree = default(object);
		object IDENTIFIER90_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enum_specifier");
		DebugLocation(199, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// C.g:201:2: ( 'enum' '{' enumerator_list '}' | 'enum' IDENTIFIER '{' enumerator_list '}' | 'enum' IDENTIFIER )
			int alt25=3;
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==78))
			{
				int LA25_1 = input.LA(2);

				if ((LA25_1==100))
				{
					alt25 = 1;
				}
				else if ((LA25_1==IDENTIFIER))
				{
					int LA25_3 = input.LA(3);

					if ((LA25_3==100))
					{
						alt25 = 2;
					}
					else if ((LA25_3==EOF||LA25_3==IDENTIFIER||(LA25_3>=30 && LA25_3<=32)||LA25_3==37||(LA25_3>=46 && LA25_3<=47)||LA25_3==59||(LA25_3>=63 && LA25_3<=68)||(LA25_3>=71 && LA25_3<=72)||LA25_3==76||(LA25_3>=78 && LA25_3<=80)||(LA25_3>=84 && LA25_3<=86)||(LA25_3>=88 && LA25_3<=89)||(LA25_3>=91 && LA25_3<=92)||(LA25_3>=95 && LA25_3<=98)))
					{
						alt25 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 25, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 25, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:201:4: 'enum' '{' enumerator_list '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(201, 4);
				string_literal80=(IToken)Match(input,78,Follow._78_in_enum_specifier676); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal80_tree = (object)adaptor.Create(string_literal80, retval);
				adaptor.AddChild(root_0, string_literal80_tree);
				}
				DebugLocation(201, 11);
				char_literal81=(IToken)Match(input,100,Follow._100_in_enum_specifier678); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal81_tree = (object)adaptor.Create(char_literal81, retval);
				adaptor.AddChild(root_0, char_literal81_tree);
				}
				DebugLocation(201, 15);
				PushFollow(Follow._enumerator_list_in_enum_specifier680);
				enumerator_list82=enumerator_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator_list82.Tree, enumerator_list82, retval);
				DebugLocation(201, 31);
				char_literal83=(IToken)Match(input,104,Follow._104_in_enum_specifier682); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal83_tree = (object)adaptor.Create(char_literal83, retval);
				adaptor.AddChild(root_0, char_literal83_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:202:4: 'enum' IDENTIFIER '{' enumerator_list '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(202, 4);
				string_literal84=(IToken)Match(input,78,Follow._78_in_enum_specifier687); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal84_tree = (object)adaptor.Create(string_literal84, retval);
				adaptor.AddChild(root_0, string_literal84_tree);
				}
				DebugLocation(202, 11);
				IDENTIFIER85=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enum_specifier689), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER85_tree = (object)adaptor.Create(IDENTIFIER85, retval);
				adaptor.AddChild(root_0, IDENTIFIER85_tree);
				}
				DebugLocation(202, 22);
				char_literal86=(IToken)Match(input,100,Follow._100_in_enum_specifier691); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal86_tree = (object)adaptor.Create(char_literal86, retval);
				adaptor.AddChild(root_0, char_literal86_tree);
				}
				DebugLocation(202, 26);
				PushFollow(Follow._enumerator_list_in_enum_specifier693);
				enumerator_list87=enumerator_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator_list87.Tree, enumerator_list87, retval);
				DebugLocation(202, 42);
				char_literal88=(IToken)Match(input,104,Follow._104_in_enum_specifier695); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal88_tree = (object)adaptor.Create(char_literal88, retval);
				adaptor.AddChild(root_0, char_literal88_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:203:4: 'enum' IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(203, 4);
				string_literal89=(IToken)Match(input,78,Follow._78_in_enum_specifier700); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal89_tree = (object)adaptor.Create(string_literal89, retval);
				adaptor.AddChild(root_0, string_literal89_tree);
				}
				DebugLocation(203, 11);
				IDENTIFIER90=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enum_specifier702), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER90_tree = (object)adaptor.Create(IDENTIFIER90, retval);
				adaptor.AddChild(root_0, IDENTIFIER90_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_specifier", 20);
			LeaveRule("enum_specifier", 20);
			LeaveRule_enum_specifier();
			if (state.backtracking > 0) { Memoize(input, 20, enum_specifier_StartIndex); }

		}
		DebugLocation(204, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_specifier"); }
		return retval;

	}
	// $ANTLR end "enum_specifier"

	partial void EnterRule_enumerator_list();
	partial void LeaveRule_enumerator_list();

	// $ANTLR start "enumerator_list"
	// C.g:206:1: enumerator_list : enumerator ( ',' enumerator )* ;
	[GrammarRule("enumerator_list")]
	public XAstParserRuleReturnScope enumerator_list()
	{
		EnterRule_enumerator_list();
		EnterRule("enumerator_list", 21);
		var retval = new XAstParserRuleReturnScope("enumerator_list");
		
		retval.Start = (IToken)input.LT(1);
		int enumerator_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal92 = default(IToken);
		XAstParserRuleReturnScope enumerator91 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enumerator93 = default(XAstParserRuleReturnScope);

		object char_literal92_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumerator_list");
		DebugLocation(206, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// C.g:207:2: ( enumerator ( ',' enumerator )* )
			DebugEnterAlt(1);
			// C.g:207:4: enumerator ( ',' enumerator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(207, 4);
			PushFollow(Follow._enumerator_in_enumerator_list713);
			enumerator91=enumerator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator91.Tree, enumerator91, retval);
			DebugLocation(207, 15);
			// C.g:207:15: ( ',' enumerator )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==37))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:207:16: ',' enumerator
					{
					DebugLocation(207, 16);
					char_literal92=(IToken)Match(input,37,Follow._37_in_enumerator_list716); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal92_tree = (object)adaptor.Create(char_literal92, retval);
					adaptor.AddChild(root_0, char_literal92_tree);
					}
					DebugLocation(207, 20);
					PushFollow(Follow._enumerator_in_enumerator_list718);
					enumerator93=enumerator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator93.Tree, enumerator93, retval);

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumerator_list", 21);
			LeaveRule("enumerator_list", 21);
			LeaveRule_enumerator_list();
			if (state.backtracking > 0) { Memoize(input, 21, enumerator_list_StartIndex); }

		}
		DebugLocation(208, 1);
		} finally { DebugExitRule(GrammarFileName, "enumerator_list"); }
		return retval;

	}
	// $ANTLR end "enumerator_list"

	partial void EnterRule_enumerator();
	partial void LeaveRule_enumerator();

	// $ANTLR start "enumerator"
	// C.g:210:1: enumerator : IDENTIFIER ( '=' constant_expression )? ;
	[GrammarRule("enumerator")]
	public XAstParserRuleReturnScope enumerator()
	{
		EnterRule_enumerator();
		EnterRule("enumerator", 22);
		var retval = new XAstParserRuleReturnScope("enumerator");
		
		retval.Start = (IToken)input.LT(1);
		int enumerator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER94 = default(IToken);
		IToken char_literal95 = default(IToken);
		XAstParserRuleReturnScope constant_expression96 = default(XAstParserRuleReturnScope);

		object IDENTIFIER94_tree = default(object);
		object char_literal95_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumerator");
		DebugLocation(210, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// C.g:211:2: ( IDENTIFIER ( '=' constant_expression )? )
			DebugEnterAlt(1);
			// C.g:211:4: IDENTIFIER ( '=' constant_expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(211, 4);
			IDENTIFIER94=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enumerator731), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER94_tree = (object)adaptor.Create(IDENTIFIER94, retval);
			adaptor.AddChild(root_0, IDENTIFIER94_tree);
			}
			DebugLocation(211, 15);
			// C.g:211:15: ( '=' constant_expression )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==52))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:211:16: '=' constant_expression
				{
				DebugLocation(211, 16);
				char_literal95=(IToken)Match(input,52,Follow._52_in_enumerator734); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal95_tree = (object)adaptor.Create(char_literal95, retval);
				adaptor.AddChild(root_0, char_literal95_tree);
				}
				DebugLocation(211, 20);
				PushFollow(Follow._constant_expression_in_enumerator736);
				constant_expression96=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression96.Tree, constant_expression96, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumerator", 22);
			LeaveRule("enumerator", 22);
			LeaveRule_enumerator();
			if (state.backtracking > 0) { Memoize(input, 22, enumerator_StartIndex); }

		}
		DebugLocation(212, 1);
		} finally { DebugExitRule(GrammarFileName, "enumerator"); }
		return retval;

	}
	// $ANTLR end "enumerator"

	partial void EnterRule_type_qualifier();
	partial void LeaveRule_type_qualifier();

	// $ANTLR start "type_qualifier"
	// C.g:214:1: type_qualifier : ( 'const' | 'volatile' | '__extension__' );
	[GrammarRule("type_qualifier")]
	public XAstParserRuleReturnScope type_qualifier()
	{
		EnterRule_type_qualifier();
		EnterRule("type_qualifier", 23);
		var retval = new XAstParserRuleReturnScope("type_qualifier");
		
		retval.Start = (IToken)input.LT(1);
		int type_qualifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set97 = default(IToken);

		object set97_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_qualifier");
		DebugLocation(214, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// C.g:215:2: ( 'const' | 'volatile' | '__extension__' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(215, 2);

			set97=(IToken)input.LT(1);
			if (input.LA(1)==65||input.LA(1)==72||input.LA(1)==98)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set97, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_qualifier", 23);
			LeaveRule("type_qualifier", 23);
			LeaveRule_type_qualifier();
			if (state.backtracking > 0) { Memoize(input, 23, type_qualifier_StartIndex); }

		}
		DebugLocation(218, 1);
		} finally { DebugExitRule(GrammarFileName, "type_qualifier"); }
		return retval;

	}
	// $ANTLR end "type_qualifier"

	partial void EnterRule_declarator();
	partial void LeaveRule_declarator();

	// $ANTLR start "declarator"
	// C.g:220:1: declarator : ( ( pointer )? direct_declarator | pointer );
	[GrammarRule("declarator")]
	public XAstParserRuleReturnScope declarator()
	{
		EnterRule_declarator();
		EnterRule("declarator", 24);
		var retval = new XAstParserRuleReturnScope("declarator");
		
		retval.Start = (IToken)input.LT(1);
		int declarator_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope pointer98 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope direct_declarator99 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope pointer100 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "declarator");
		DebugLocation(220, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// C.g:221:2: ( ( pointer )? direct_declarator | pointer )
			int alt29=2;
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==32))
			{
				int LA29_1 = input.LA(2);

				if ((EvaluatePredicate(synpred54_C_fragment)))
				{
					alt29 = 1;
				}
				else if ((true))
				{
					alt29 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 29, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA29_0==IDENTIFIER||LA29_0==30))
			{
				alt29 = 1;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 29, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:221:4: ( pointer )? direct_declarator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(221, 4);
				// C.g:221:4: ( pointer )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==32))
				{
					alt28 = 1;
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:221:4: pointer
					{
					DebugLocation(221, 4);
					PushFollow(Follow._pointer_in_declarator772);
					pointer98=pointer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, pointer98.Tree, pointer98, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(28); }

				DebugLocation(221, 13);
				PushFollow(Follow._direct_declarator_in_declarator775);
				direct_declarator99=direct_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, direct_declarator99.Tree, direct_declarator99, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:222:4: pointer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(222, 4);
				PushFollow(Follow._pointer_in_declarator780);
				pointer100=pointer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pointer100.Tree, pointer100, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declarator", 24);
			LeaveRule("declarator", 24);
			LeaveRule_declarator();
			if (state.backtracking > 0) { Memoize(input, 24, declarator_StartIndex); }

		}
		DebugLocation(223, 1);
		} finally { DebugExitRule(GrammarFileName, "declarator"); }
		return retval;

	}
	// $ANTLR end "declarator"

	partial void EnterRule_direct_declarator();
	partial void LeaveRule_direct_declarator();

	// $ANTLR start "direct_declarator"
	// C.g:225:1: direct_declarator : ( IDENTIFIER | '(' declarator ')' ) ( declarator_suffix )* ;
	[GrammarRule("direct_declarator")]
	public XAstParserRuleReturnScope direct_declarator()
	{
		EnterRule_direct_declarator();
		EnterRule("direct_declarator", 25);
		var retval = new XAstParserRuleReturnScope("direct_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int direct_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER101 = default(IToken);
		IToken char_literal102 = default(IToken);
		IToken char_literal104 = default(IToken);
		XAstParserRuleReturnScope declarator103 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator_suffix105 = default(XAstParserRuleReturnScope);

		object IDENTIFIER101_tree = default(object);
		object char_literal102_tree = default(object);
		object char_literal104_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "direct_declarator");
		DebugLocation(225, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// C.g:226:2: ( ( IDENTIFIER | '(' declarator ')' ) ( declarator_suffix )* )
			DebugEnterAlt(1);
			// C.g:226:6: ( IDENTIFIER | '(' declarator ')' ) ( declarator_suffix )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(226, 6);
			// C.g:226:6: ( IDENTIFIER | '(' declarator ')' )
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==IDENTIFIER))
			{
				alt30 = 1;
			}
			else if ((LA30_0==30))
			{
				alt30 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:226:8: IDENTIFIER
				{
				DebugLocation(226, 8);
				IDENTIFIER101=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_direct_declarator795), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER101_tree = (object)adaptor.Create(IDENTIFIER101, retval);
				adaptor.AddChild(root_0, IDENTIFIER101_tree);
				}
				DebugLocation(227, 4);
				if (state.backtracking == 0)
				{

								if (declaration_stack.size()>0&&declaration_stack.Peek().isTypedef) {
									Symbols_stack.Peek().types.add((IDENTIFIER101!=null?IDENTIFIER101.Text:null));
									
								}
								
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:233:5: '(' declarator ')'
				{
				DebugLocation(233, 5);
				char_literal102=(IToken)Match(input,30,Follow._30_in_direct_declarator806); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal102_tree = (object)adaptor.Create(char_literal102, retval);
				adaptor.AddChild(root_0, char_literal102_tree);
				}
				DebugLocation(233, 9);
				PushFollow(Follow._declarator_in_direct_declarator808);
				declarator103=declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declarator103.Tree, declarator103, retval);
				DebugLocation(233, 20);
				char_literal104=(IToken)Match(input,31,Follow._31_in_direct_declarator810); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal104_tree = (object)adaptor.Create(char_literal104, retval);
				adaptor.AddChild(root_0, char_literal104_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(235, 3);
			// C.g:235:3: ( declarator_suffix )*
			try { DebugEnterSubRule(31);
			while (true)
			{
				int alt31=2;
				try { DebugEnterDecision(31, false);
				try
				{
					alt31 = dfa31.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(31); }
				switch ( alt31 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:235:3: declarator_suffix
					{
					DebugLocation(235, 3);
					PushFollow(Follow._declarator_suffix_in_direct_declarator818);
					declarator_suffix105=declarator_suffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declarator_suffix105.Tree, declarator_suffix105, retval);

					}
					break;

				default:
					goto loop31;
				}
			}

			loop31:
				;

			} finally { DebugExitSubRule(31); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("direct_declarator", 25);
			LeaveRule("direct_declarator", 25);
			LeaveRule_direct_declarator();
			if (state.backtracking > 0) { Memoize(input, 25, direct_declarator_StartIndex); }

		}
		DebugLocation(236, 1);
		} finally { DebugExitRule(GrammarFileName, "direct_declarator"); }
		return retval;

	}
	// $ANTLR end "direct_declarator"

	partial void EnterRule_declarator_suffix();
	partial void LeaveRule_declarator_suffix();

	// $ANTLR start "declarator_suffix"
	// C.g:238:1: declarator_suffix : ( '[' constant_expression ']' | '[' ']' | '(' parameter_type_list ')' | '(' identifier_list ')' | '(' ')' );
	[GrammarRule("declarator_suffix")]
	public XAstParserRuleReturnScope declarator_suffix()
	{
		EnterRule_declarator_suffix();
		EnterRule("declarator_suffix", 26);
		var retval = new XAstParserRuleReturnScope("declarator_suffix");
		
		retval.Start = (IToken)input.LT(1);
		int declarator_suffix_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal106 = default(IToken);
		IToken char_literal108 = default(IToken);
		IToken char_literal109 = default(IToken);
		IToken char_literal110 = default(IToken);
		IToken char_literal111 = default(IToken);
		IToken char_literal113 = default(IToken);
		IToken char_literal114 = default(IToken);
		IToken char_literal116 = default(IToken);
		IToken char_literal117 = default(IToken);
		IToken char_literal118 = default(IToken);
		XAstParserRuleReturnScope constant_expression107 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope parameter_type_list112 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier_list115 = default(XAstParserRuleReturnScope);

		object char_literal106_tree = default(object);
		object char_literal108_tree = default(object);
		object char_literal109_tree = default(object);
		object char_literal110_tree = default(object);
		object char_literal111_tree = default(object);
		object char_literal113_tree = default(object);
		object char_literal114_tree = default(object);
		object char_literal116_tree = default(object);
		object char_literal117_tree = default(object);
		object char_literal118_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "declarator_suffix");
		DebugLocation(238, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// C.g:239:2: ( '[' constant_expression ']' | '[' ']' | '(' parameter_type_list ')' | '(' identifier_list ')' | '(' ')' )
			int alt32=5;
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==59))
			{
				int LA32_1 = input.LA(2);

				if ((LA32_1==60))
				{
					alt32 = 2;
				}
				else if ((LA32_1==CHARACTER_LITERAL||LA32_1==DECIMAL_LITERAL||LA32_1==FLOATING_POINT_LITERAL||LA32_1==HEX_LITERAL||LA32_1==IDENTIFIER||LA32_1==OCTAL_LITERAL||LA32_1==STRING_LITERAL||LA32_1==23||LA32_1==28||LA32_1==30||LA32_1==32||(LA32_1>=34 && LA32_1<=35)||(LA32_1>=38 && LA32_1<=39)||LA32_1==90||LA32_1==105))
				{
					alt32 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 32, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA32_0==30))
			{
				switch (input.LA(2))
				{
				case 31:
					{
					alt32 = 5;
					}
					break;
				case 63:
				case 64:
				case 65:
				case 66:
				case 67:
				case 68:
				case 71:
				case 72:
				case 76:
				case 78:
				case 79:
				case 80:
				case 84:
				case 85:
				case 86:
				case 88:
				case 89:
				case 91:
				case 92:
				case 95:
				case 96:
				case 97:
				case 98:
					{
					alt32 = 3;
					}
					break;
				case IDENTIFIER:
					{
					int LA32_29 = input.LA(3);

					if ((EvaluatePredicate(synpred59_C_fragment)))
					{
						alt32 = 3;
					}
					else if ((EvaluatePredicate(synpred60_C_fragment)))
					{
						alt32 = 4;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 32, 29, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 32, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 32, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:239:6: '[' constant_expression ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(239, 6);
				char_literal106=(IToken)Match(input,59,Follow._59_in_declarator_suffix832); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal106_tree = (object)adaptor.Create(char_literal106, retval);
				adaptor.AddChild(root_0, char_literal106_tree);
				}
				DebugLocation(239, 10);
				PushFollow(Follow._constant_expression_in_declarator_suffix834);
				constant_expression107=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression107.Tree, constant_expression107, retval);
				DebugLocation(239, 30);
				char_literal108=(IToken)Match(input,60,Follow._60_in_declarator_suffix836); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal108_tree = (object)adaptor.Create(char_literal108, retval);
				adaptor.AddChild(root_0, char_literal108_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:240:6: '[' ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(240, 6);
				char_literal109=(IToken)Match(input,59,Follow._59_in_declarator_suffix843); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal109_tree = (object)adaptor.Create(char_literal109, retval);
				adaptor.AddChild(root_0, char_literal109_tree);
				}
				DebugLocation(240, 10);
				char_literal110=(IToken)Match(input,60,Follow._60_in_declarator_suffix845); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal110_tree = (object)adaptor.Create(char_literal110, retval);
				adaptor.AddChild(root_0, char_literal110_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:241:6: '(' parameter_type_list ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(241, 6);
				char_literal111=(IToken)Match(input,30,Follow._30_in_declarator_suffix852); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal111_tree = (object)adaptor.Create(char_literal111, retval);
				adaptor.AddChild(root_0, char_literal111_tree);
				}
				DebugLocation(241, 10);
				PushFollow(Follow._parameter_type_list_in_declarator_suffix854);
				parameter_type_list112=parameter_type_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_type_list112.Tree, parameter_type_list112, retval);
				DebugLocation(241, 30);
				char_literal113=(IToken)Match(input,31,Follow._31_in_declarator_suffix856); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal113_tree = (object)adaptor.Create(char_literal113, retval);
				adaptor.AddChild(root_0, char_literal113_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:242:6: '(' identifier_list ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(242, 6);
				char_literal114=(IToken)Match(input,30,Follow._30_in_declarator_suffix863); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal114_tree = (object)adaptor.Create(char_literal114, retval);
				adaptor.AddChild(root_0, char_literal114_tree);
				}
				DebugLocation(242, 10);
				PushFollow(Follow._identifier_list_in_declarator_suffix865);
				identifier_list115=identifier_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier_list115.Tree, identifier_list115, retval);
				DebugLocation(242, 26);
				char_literal116=(IToken)Match(input,31,Follow._31_in_declarator_suffix867); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal116_tree = (object)adaptor.Create(char_literal116, retval);
				adaptor.AddChild(root_0, char_literal116_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:243:6: '(' ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(243, 6);
				char_literal117=(IToken)Match(input,30,Follow._30_in_declarator_suffix874); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal117_tree = (object)adaptor.Create(char_literal117, retval);
				adaptor.AddChild(root_0, char_literal117_tree);
				}
				DebugLocation(243, 10);
				char_literal118=(IToken)Match(input,31,Follow._31_in_declarator_suffix876); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal118_tree = (object)adaptor.Create(char_literal118, retval);
				adaptor.AddChild(root_0, char_literal118_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declarator_suffix", 26);
			LeaveRule("declarator_suffix", 26);
			LeaveRule_declarator_suffix();
			if (state.backtracking > 0) { Memoize(input, 26, declarator_suffix_StartIndex); }

		}
		DebugLocation(244, 1);
		} finally { DebugExitRule(GrammarFileName, "declarator_suffix"); }
		return retval;

	}
	// $ANTLR end "declarator_suffix"

	partial void EnterRule_pointer();
	partial void LeaveRule_pointer();

	// $ANTLR start "pointer"
	// C.g:246:1: pointer : ( '*' ( type_qualifier )+ ( pointer )? | '*' pointer | '*' );
	[GrammarRule("pointer")]
	public XAstParserRuleReturnScope pointer()
	{
		EnterRule_pointer();
		EnterRule("pointer", 27);
		var retval = new XAstParserRuleReturnScope("pointer");
		
		retval.Start = (IToken)input.LT(1);
		int pointer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal119 = default(IToken);
		IToken char_literal122 = default(IToken);
		IToken char_literal124 = default(IToken);
		XAstParserRuleReturnScope type_qualifier120 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope pointer121 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope pointer123 = default(XAstParserRuleReturnScope);

		object char_literal119_tree = default(object);
		object char_literal122_tree = default(object);
		object char_literal124_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "pointer");
		DebugLocation(246, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// C.g:247:2: ( '*' ( type_qualifier )+ ( pointer )? | '*' pointer | '*' )
			int alt35=3;
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==32))
			{
				switch (input.LA(2))
				{
				case 65:
					{
					int LA35_2 = input.LA(3);

					if ((EvaluatePredicate(synpred63_C_fragment)))
					{
						alt35 = 1;
					}
					else if ((true))
					{
						alt35 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 35, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 32:
					{
					int LA35_3 = input.LA(3);

					if ((EvaluatePredicate(synpred64_C_fragment)))
					{
						alt35 = 2;
					}
					else if ((true))
					{
						alt35 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 35, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case EOF:
				case IDENTIFIER:
				case 30:
				case 31:
				case 37:
				case 46:
				case 47:
				case 52:
				case 59:
				case 63:
				case 64:
				case 66:
				case 67:
				case 68:
				case 71:
				case 76:
				case 78:
				case 79:
				case 80:
				case 84:
				case 85:
				case 86:
				case 88:
				case 89:
				case 91:
				case 92:
				case 94:
				case 95:
				case 96:
				case 97:
				case 100:
					{
					alt35 = 3;
					}
					break;
				case 72:
				case 98:
					{
					int LA35_6 = input.LA(3);

					if ((EvaluatePredicate(synpred63_C_fragment)))
					{
						alt35 = 1;
					}
					else if ((true))
					{
						alt35 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 35, 6, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 35, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:247:4: '*' ( type_qualifier )+ ( pointer )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(247, 4);
				char_literal119=(IToken)Match(input,32,Follow._32_in_pointer887); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal119_tree = (object)adaptor.Create(char_literal119, retval);
				adaptor.AddChild(root_0, char_literal119_tree);
				}
				DebugLocation(247, 8);
				// C.g:247:8: ( type_qualifier )+
				int cnt33=0;
				try { DebugEnterSubRule(33);
				while (true)
				{
					int alt33=2;
					try { DebugEnterDecision(33, false);
					try
					{
						alt33 = dfa33.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(33); }
					switch (alt33)
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:247:8: type_qualifier
						{
						DebugLocation(247, 8);
						PushFollow(Follow._type_qualifier_in_pointer889);
						type_qualifier120=type_qualifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier120.Tree, type_qualifier120, retval);

						}
						break;

					default:
						if (cnt33 >= 1)
							goto loop33;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee33 = new EarlyExitException( 33, input );
						DebugRecognitionException(eee33);
						throw eee33;
					}
					cnt33++;
				}
				loop33:
					;

				} finally { DebugExitSubRule(33); }

				DebugLocation(247, 24);
				// C.g:247:24: ( pointer )?
				int alt34=2;
				try { DebugEnterSubRule(34);
				try { DebugEnterDecision(34, false);
				try
				{
					alt34 = dfa34.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:247:24: pointer
					{
					DebugLocation(247, 24);
					PushFollow(Follow._pointer_in_pointer892);
					pointer121=pointer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, pointer121.Tree, pointer121, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(34); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:248:4: '*' pointer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(248, 4);
				char_literal122=(IToken)Match(input,32,Follow._32_in_pointer898); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal122_tree = (object)adaptor.Create(char_literal122, retval);
				adaptor.AddChild(root_0, char_literal122_tree);
				}
				DebugLocation(248, 8);
				PushFollow(Follow._pointer_in_pointer900);
				pointer123=pointer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pointer123.Tree, pointer123, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:249:4: '*'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(249, 4);
				char_literal124=(IToken)Match(input,32,Follow._32_in_pointer905); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal124_tree = (object)adaptor.Create(char_literal124, retval);
				adaptor.AddChild(root_0, char_literal124_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pointer", 27);
			LeaveRule("pointer", 27);
			LeaveRule_pointer();
			if (state.backtracking > 0) { Memoize(input, 27, pointer_StartIndex); }

		}
		DebugLocation(250, 1);
		} finally { DebugExitRule(GrammarFileName, "pointer"); }
		return retval;

	}
	// $ANTLR end "pointer"

	partial void EnterRule_parameter_type_list();
	partial void LeaveRule_parameter_type_list();

	// $ANTLR start "parameter_type_list"
	// C.g:252:1: parameter_type_list : parameter_list ( ',' '...' )? ;
	[GrammarRule("parameter_type_list")]
	public XAstParserRuleReturnScope parameter_type_list()
	{
		EnterRule_parameter_type_list();
		EnterRule("parameter_type_list", 28);
		var retval = new XAstParserRuleReturnScope("parameter_type_list");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_type_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal126 = default(IToken);
		IToken string_literal127 = default(IToken);
		XAstParserRuleReturnScope parameter_list125 = default(XAstParserRuleReturnScope);

		object char_literal126_tree = default(object);
		object string_literal127_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parameter_type_list");
		DebugLocation(252, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// C.g:253:2: ( parameter_list ( ',' '...' )? )
			DebugEnterAlt(1);
			// C.g:253:4: parameter_list ( ',' '...' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(253, 4);
			PushFollow(Follow._parameter_list_in_parameter_type_list916);
			parameter_list125=parameter_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_list125.Tree, parameter_list125, retval);
			DebugLocation(253, 19);
			// C.g:253:19: ( ',' '...' )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==37))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:253:20: ',' '...'
				{
				DebugLocation(253, 20);
				char_literal126=(IToken)Match(input,37,Follow._37_in_parameter_type_list919); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal126_tree = (object)adaptor.Create(char_literal126, retval);
				adaptor.AddChild(root_0, char_literal126_tree);
				}
				DebugLocation(253, 24);
				string_literal127=(IToken)Match(input,43,Follow._43_in_parameter_type_list921); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal127_tree = (object)adaptor.Create(string_literal127, retval);
				adaptor.AddChild(root_0, string_literal127_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(36); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_type_list", 28);
			LeaveRule("parameter_type_list", 28);
			LeaveRule_parameter_type_list();
			if (state.backtracking > 0) { Memoize(input, 28, parameter_type_list_StartIndex); }

		}
		DebugLocation(254, 1);
		} finally { DebugExitRule(GrammarFileName, "parameter_type_list"); }
		return retval;

	}
	// $ANTLR end "parameter_type_list"

	partial void EnterRule_parameter_list();
	partial void LeaveRule_parameter_list();

	// $ANTLR start "parameter_list"
	// C.g:256:1: parameter_list : parameter_declaration ( ',' parameter_declaration )* ;
	[GrammarRule("parameter_list")]
	public XAstParserRuleReturnScope parameter_list()
	{
		EnterRule_parameter_list();
		EnterRule("parameter_list", 29);
		var retval = new XAstParserRuleReturnScope("parameter_list");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal129 = default(IToken);
		XAstParserRuleReturnScope parameter_declaration128 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope parameter_declaration130 = default(XAstParserRuleReturnScope);

		object char_literal129_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parameter_list");
		DebugLocation(256, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// C.g:257:2: ( parameter_declaration ( ',' parameter_declaration )* )
			DebugEnterAlt(1);
			// C.g:257:4: parameter_declaration ( ',' parameter_declaration )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(257, 4);
			PushFollow(Follow._parameter_declaration_in_parameter_list934);
			parameter_declaration128=parameter_declaration();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_declaration128.Tree, parameter_declaration128, retval);
			DebugLocation(257, 26);
			// C.g:257:26: ( ',' parameter_declaration )*
			try { DebugEnterSubRule(37);
			while (true)
			{
				int alt37=2;
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==37))
				{
					int LA37_1 = input.LA(2);

					if ((LA37_1==IDENTIFIER||(LA37_1>=63 && LA37_1<=68)||(LA37_1>=71 && LA37_1<=72)||LA37_1==76||(LA37_1>=78 && LA37_1<=80)||(LA37_1>=84 && LA37_1<=86)||(LA37_1>=88 && LA37_1<=89)||(LA37_1>=91 && LA37_1<=92)||(LA37_1>=95 && LA37_1<=98)))
					{
						alt37 = 1;
					}


				}


				} finally { DebugExitDecision(37); }
				switch ( alt37 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:257:27: ',' parameter_declaration
					{
					DebugLocation(257, 27);
					char_literal129=(IToken)Match(input,37,Follow._37_in_parameter_list937); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal129_tree = (object)adaptor.Create(char_literal129, retval);
					adaptor.AddChild(root_0, char_literal129_tree);
					}
					DebugLocation(257, 31);
					PushFollow(Follow._parameter_declaration_in_parameter_list939);
					parameter_declaration130=parameter_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_declaration130.Tree, parameter_declaration130, retval);

					}
					break;

				default:
					goto loop37;
				}
			}

			loop37:
				;

			} finally { DebugExitSubRule(37); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_list", 29);
			LeaveRule("parameter_list", 29);
			LeaveRule_parameter_list();
			if (state.backtracking > 0) { Memoize(input, 29, parameter_list_StartIndex); }

		}
		DebugLocation(258, 1);
		} finally { DebugExitRule(GrammarFileName, "parameter_list"); }
		return retval;

	}
	// $ANTLR end "parameter_list"

	partial void EnterRule_parameter_declaration();
	partial void LeaveRule_parameter_declaration();

	// $ANTLR start "parameter_declaration"
	// C.g:260:1: parameter_declaration : declaration_specifiers ( declarator | abstract_declarator )* ;
	[GrammarRule("parameter_declaration")]
	public XAstParserRuleReturnScope parameter_declaration()
	{
		EnterRule_parameter_declaration();
		EnterRule("parameter_declaration", 30);
		var retval = new XAstParserRuleReturnScope("parameter_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope declaration_specifiers131 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator132 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator133 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "parameter_declaration");
		DebugLocation(260, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// C.g:261:2: ( declaration_specifiers ( declarator | abstract_declarator )* )
			DebugEnterAlt(1);
			// C.g:261:4: declaration_specifiers ( declarator | abstract_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(261, 4);
			PushFollow(Follow._declaration_specifiers_in_parameter_declaration952);
			declaration_specifiers131=declaration_specifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers131.Tree, declaration_specifiers131, retval);
			DebugLocation(261, 27);
			// C.g:261:27: ( declarator | abstract_declarator )*
			try { DebugEnterSubRule(38);
			while (true)
			{
				int alt38=3;
				try { DebugEnterDecision(38, false);
				switch (input.LA(1))
				{
				case 32:
					{
					int LA38_4 = input.LA(2);

					if ((EvaluatePredicate(synpred67_C_fragment)))
					{
						alt38 = 1;
					}
					else if ((EvaluatePredicate(synpred68_C_fragment)))
					{
						alt38 = 2;
					}


					}
					break;
				case IDENTIFIER:
					{
					alt38 = 1;
					}
					break;
				case 30:
					{
					switch (input.LA(2))
					{
					case 31:
					case 59:
					case 63:
					case 64:
					case 65:
					case 66:
					case 67:
					case 68:
					case 71:
					case 72:
					case 76:
					case 78:
					case 79:
					case 80:
					case 84:
					case 85:
					case 86:
					case 88:
					case 89:
					case 91:
					case 92:
					case 95:
					case 96:
					case 97:
					case 98:
						{
						alt38 = 2;
						}
						break;
					case 32:
						{
						int LA38_17 = input.LA(3);

						if ((EvaluatePredicate(synpred67_C_fragment)))
						{
							alt38 = 1;
						}
						else if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt38 = 2;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA38_18 = input.LA(3);

						if ((EvaluatePredicate(synpred67_C_fragment)))
						{
							alt38 = 1;
						}
						else if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt38 = 2;
						}


						}
						break;
					case 30:
						{
						int LA38_19 = input.LA(3);

						if ((EvaluatePredicate(synpred67_C_fragment)))
						{
							alt38 = 1;
						}
						else if ((EvaluatePredicate(synpred68_C_fragment)))
						{
							alt38 = 2;
						}


						}
						break;
					}

					}
					break;
				case 59:
					{
					alt38 = 2;
					}
					break;
				}

				} finally { DebugExitDecision(38); }
				switch ( alt38 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:261:28: declarator
					{
					DebugLocation(261, 28);
					PushFollow(Follow._declarator_in_parameter_declaration955);
					declarator132=declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declarator132.Tree, declarator132, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:261:39: abstract_declarator
					{
					DebugLocation(261, 39);
					PushFollow(Follow._abstract_declarator_in_parameter_declaration957);
					abstract_declarator133=abstract_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator133.Tree, abstract_declarator133, retval);

					}
					break;

				default:
					goto loop38;
				}
			}

			loop38:
				;

			} finally { DebugExitSubRule(38); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_declaration", 30);
			LeaveRule("parameter_declaration", 30);
			LeaveRule_parameter_declaration();
			if (state.backtracking > 0) { Memoize(input, 30, parameter_declaration_StartIndex); }

		}
		DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "parameter_declaration"); }
		return retval;

	}
	// $ANTLR end "parameter_declaration"

	partial void EnterRule_identifier_list();
	partial void LeaveRule_identifier_list();

	// $ANTLR start "identifier_list"
	// C.g:264:1: identifier_list : IDENTIFIER ( ',' IDENTIFIER )* ;
	[GrammarRule("identifier_list")]
	public XAstParserRuleReturnScope identifier_list()
	{
		EnterRule_identifier_list();
		EnterRule("identifier_list", 31);
		var retval = new XAstParserRuleReturnScope("identifier_list");
		
		retval.Start = (IToken)input.LT(1);
		int identifier_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER134 = default(IToken);
		IToken char_literal135 = default(IToken);
		IToken IDENTIFIER136 = default(IToken);

		object IDENTIFIER134_tree = default(object);
		object char_literal135_tree = default(object);
		object IDENTIFIER136_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "identifier_list");
		DebugLocation(264, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// C.g:265:2: ( IDENTIFIER ( ',' IDENTIFIER )* )
			DebugEnterAlt(1);
			// C.g:265:4: IDENTIFIER ( ',' IDENTIFIER )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(265, 4);
			IDENTIFIER134=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifier_list970), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER134_tree = (object)adaptor.Create(IDENTIFIER134, retval);
			adaptor.AddChild(root_0, IDENTIFIER134_tree);
			}
			DebugLocation(265, 15);
			// C.g:265:15: ( ',' IDENTIFIER )*
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==37))
				{
					alt39 = 1;
				}


				} finally { DebugExitDecision(39); }
				switch ( alt39 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:265:16: ',' IDENTIFIER
					{
					DebugLocation(265, 16);
					char_literal135=(IToken)Match(input,37,Follow._37_in_identifier_list973); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal135_tree = (object)adaptor.Create(char_literal135, retval);
					adaptor.AddChild(root_0, char_literal135_tree);
					}
					DebugLocation(265, 20);
					IDENTIFIER136=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifier_list975), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER136_tree = (object)adaptor.Create(IDENTIFIER136, retval);
					adaptor.AddChild(root_0, IDENTIFIER136_tree);
					}

					}
					break;

				default:
					goto loop39;
				}
			}

			loop39:
				;

			} finally { DebugExitSubRule(39); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("identifier_list", 31);
			LeaveRule("identifier_list", 31);
			LeaveRule_identifier_list();
			if (state.backtracking > 0) { Memoize(input, 31, identifier_list_StartIndex); }

		}
		DebugLocation(266, 1);
		} finally { DebugExitRule(GrammarFileName, "identifier_list"); }
		return retval;

	}
	// $ANTLR end "identifier_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// C.g:268:1: type_name : specifier_qualifier_list ( abstract_declarator )? ;
	[GrammarRule("type_name")]
	public XAstParserRuleReturnScope type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 32);
		var retval = new XAstParserRuleReturnScope("type_name");
		
		retval.Start = (IToken)input.LT(1);
		int type_name_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope specifier_qualifier_list137 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator138 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(268, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// C.g:269:2: ( specifier_qualifier_list ( abstract_declarator )? )
			DebugEnterAlt(1);
			// C.g:269:4: specifier_qualifier_list ( abstract_declarator )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(269, 4);
			PushFollow(Follow._specifier_qualifier_list_in_type_name988);
			specifier_qualifier_list137=specifier_qualifier_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, specifier_qualifier_list137.Tree, specifier_qualifier_list137, retval);
			DebugLocation(269, 29);
			// C.g:269:29: ( abstract_declarator )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==30||LA40_0==32||LA40_0==59))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:269:29: abstract_declarator
				{
				DebugLocation(269, 29);
				PushFollow(Follow._abstract_declarator_in_type_name990);
				abstract_declarator138=abstract_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator138.Tree, abstract_declarator138, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(40); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 32);
			LeaveRule("type_name", 32);
			LeaveRule_type_name();
			if (state.backtracking > 0) { Memoize(input, 32, type_name_StartIndex); }

		}
		DebugLocation(270, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_abstract_declarator();
	partial void LeaveRule_abstract_declarator();

	// $ANTLR start "abstract_declarator"
	// C.g:272:1: abstract_declarator : ( pointer ( direct_abstract_declarator )? | direct_abstract_declarator );
	[GrammarRule("abstract_declarator")]
	public XAstParserRuleReturnScope abstract_declarator()
	{
		EnterRule_abstract_declarator();
		EnterRule("abstract_declarator", 33);
		var retval = new XAstParserRuleReturnScope("abstract_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int abstract_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope pointer139 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope direct_abstract_declarator140 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope direct_abstract_declarator141 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "abstract_declarator");
		DebugLocation(272, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// C.g:273:2: ( pointer ( direct_abstract_declarator )? | direct_abstract_declarator )
			int alt42=2;
			try { DebugEnterDecision(42, false);
			int LA42_0 = input.LA(1);

			if ((LA42_0==32))
			{
				alt42 = 1;
			}
			else if ((LA42_0==30||LA42_0==59))
			{
				alt42 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 42, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:273:4: pointer ( direct_abstract_declarator )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(273, 4);
				PushFollow(Follow._pointer_in_abstract_declarator1002);
				pointer139=pointer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pointer139.Tree, pointer139, retval);
				DebugLocation(273, 12);
				// C.g:273:12: ( direct_abstract_declarator )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==30))
				{
					switch (input.LA(2))
					{
					case 31:
						{
						int LA41_8 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 32:
						{
						int LA41_9 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 30:
						{
						int LA41_10 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 59:
						{
						int LA41_11 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 68:
					case 79:
					case 86:
					case 91:
						{
						int LA41_12 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 97:
						{
						int LA41_13 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 71:
						{
						int LA41_14 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 88:
						{
						int LA41_15 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 84:
						{
						int LA41_16 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 85:
						{
						int LA41_17 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 80:
						{
						int LA41_18 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 76:
						{
						int LA41_19 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 89:
						{
						int LA41_20 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 96:
						{
						int LA41_21 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 92:
					case 95:
						{
						int LA41_22 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 78:
						{
						int LA41_23 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case IDENTIFIER:
						{
						int LA41_24 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 65:
					case 72:
					case 98:
						{
						int LA41_25 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 64:
						{
						int LA41_26 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 66:
						{
						int LA41_27 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 63:
						{
						int LA41_28 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 67:
						{
						int LA41_29 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					}

				}
				else if ((LA41_0==59))
				{
					switch (input.LA(2))
					{
					case 60:
						{
						int LA41_30 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 30:
						{
						int LA41_31 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case IDENTIFIER:
						{
						int LA41_32 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case HEX_LITERAL:
						{
						int LA41_33 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case OCTAL_LITERAL:
						{
						int LA41_34 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case DECIMAL_LITERAL:
						{
						int LA41_35 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case CHARACTER_LITERAL:
						{
						int LA41_36 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case STRING_LITERAL:
						{
						int LA41_37 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case FLOATING_POINT_LITERAL:
						{
						int LA41_38 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 35:
						{
						int LA41_39 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 39:
						{
						int LA41_40 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 23:
					case 28:
					case 32:
					case 34:
					case 38:
					case 105:
						{
						int LA41_41 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					case 90:
						{
						int LA41_42 = input.LA(3);

						if ((EvaluatePredicate(synpred71_C_fragment)))
						{
							alt41 = 1;
						}
						}
						break;
					}

				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:273:12: direct_abstract_declarator
					{
					DebugLocation(273, 12);
					PushFollow(Follow._direct_abstract_declarator_in_abstract_declarator1004);
					direct_abstract_declarator140=direct_abstract_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, direct_abstract_declarator140.Tree, direct_abstract_declarator140, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(41); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:274:4: direct_abstract_declarator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(274, 4);
				PushFollow(Follow._direct_abstract_declarator_in_abstract_declarator1010);
				direct_abstract_declarator141=direct_abstract_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, direct_abstract_declarator141.Tree, direct_abstract_declarator141, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("abstract_declarator", 33);
			LeaveRule("abstract_declarator", 33);
			LeaveRule_abstract_declarator();
			if (state.backtracking > 0) { Memoize(input, 33, abstract_declarator_StartIndex); }

		}
		DebugLocation(275, 1);
		} finally { DebugExitRule(GrammarFileName, "abstract_declarator"); }
		return retval;

	}
	// $ANTLR end "abstract_declarator"

	partial void EnterRule_direct_abstract_declarator();
	partial void LeaveRule_direct_abstract_declarator();

	// $ANTLR start "direct_abstract_declarator"
	// C.g:277:1: direct_abstract_declarator : ( '(' abstract_declarator ')' | abstract_declarator_suffix ) ( abstract_declarator_suffix )* ;
	[GrammarRule("direct_abstract_declarator")]
	public XAstParserRuleReturnScope direct_abstract_declarator()
	{
		EnterRule_direct_abstract_declarator();
		EnterRule("direct_abstract_declarator", 34);
		var retval = new XAstParserRuleReturnScope("direct_abstract_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int direct_abstract_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal142 = default(IToken);
		IToken char_literal144 = default(IToken);
		XAstParserRuleReturnScope abstract_declarator143 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator_suffix145 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator_suffix146 = default(XAstParserRuleReturnScope);

		object char_literal142_tree = default(object);
		object char_literal144_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "direct_abstract_declarator");
		DebugLocation(277, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// C.g:278:2: ( ( '(' abstract_declarator ')' | abstract_declarator_suffix ) ( abstract_declarator_suffix )* )
			DebugEnterAlt(1);
			// C.g:278:4: ( '(' abstract_declarator ')' | abstract_declarator_suffix ) ( abstract_declarator_suffix )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(278, 4);
			// C.g:278:4: ( '(' abstract_declarator ')' | abstract_declarator_suffix )
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, false);
			int LA43_0 = input.LA(1);

			if ((LA43_0==30))
			{
				int LA43_1 = input.LA(2);

				if ((LA43_1==IDENTIFIER||LA43_1==31||(LA43_1>=63 && LA43_1<=68)||(LA43_1>=71 && LA43_1<=72)||LA43_1==76||(LA43_1>=78 && LA43_1<=80)||(LA43_1>=84 && LA43_1<=86)||(LA43_1>=88 && LA43_1<=89)||(LA43_1>=91 && LA43_1<=92)||(LA43_1>=95 && LA43_1<=98)))
				{
					alt43 = 2;
				}
				else if ((LA43_1==30||LA43_1==32||LA43_1==59))
				{
					alt43 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 43, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA43_0==59))
			{
				alt43 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 43, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:278:6: '(' abstract_declarator ')'
				{
				DebugLocation(278, 6);
				char_literal142=(IToken)Match(input,30,Follow._30_in_direct_abstract_declarator1023); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal142_tree = (object)adaptor.Create(char_literal142, retval);
				adaptor.AddChild(root_0, char_literal142_tree);
				}
				DebugLocation(278, 10);
				PushFollow(Follow._abstract_declarator_in_direct_abstract_declarator1025);
				abstract_declarator143=abstract_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator143.Tree, abstract_declarator143, retval);
				DebugLocation(278, 30);
				char_literal144=(IToken)Match(input,31,Follow._31_in_direct_abstract_declarator1027); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal144_tree = (object)adaptor.Create(char_literal144, retval);
				adaptor.AddChild(root_0, char_literal144_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:278:36: abstract_declarator_suffix
				{
				DebugLocation(278, 36);
				PushFollow(Follow._abstract_declarator_suffix_in_direct_abstract_declarator1031);
				abstract_declarator_suffix145=abstract_declarator_suffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator_suffix145.Tree, abstract_declarator_suffix145, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(43); }

			DebugLocation(278, 65);
			// C.g:278:65: ( abstract_declarator_suffix )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==30))
				{
					switch (input.LA(2))
					{
					case 31:
						{
						int LA44_8 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA44_10 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case 68:
					case 79:
					case 86:
					case 91:
						{
						int LA44_13 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case 97:
						{
						int LA44_14 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case 71:
						{
						int LA44_15 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case 88:
						{
						int LA44_16 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case 84:
						{
						int LA44_17 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case 85:
						{
						int LA44_18 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case 80:
						{
						int LA44_19 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case 76:
						{
						int LA44_20 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case 89:
						{
						int LA44_21 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case 96:
						{
						int LA44_22 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case 92:
					case 95:
						{
						int LA44_23 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case 78:
						{
						int LA44_24 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case 65:
					case 72:
					case 98:
						{
						int LA44_25 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case 64:
						{
						int LA44_26 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case 66:
						{
						int LA44_27 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case 63:
						{
						int LA44_28 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case 67:
						{
						int LA44_29 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					}

				}
				else if ((LA44_0==59))
				{
					switch (input.LA(2))
					{
					case 60:
						{
						int LA44_30 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case 30:
						{
						int LA44_31 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA44_32 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case HEX_LITERAL:
						{
						int LA44_33 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case OCTAL_LITERAL:
						{
						int LA44_34 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case DECIMAL_LITERAL:
						{
						int LA44_35 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case CHARACTER_LITERAL:
						{
						int LA44_36 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case STRING_LITERAL:
						{
						int LA44_37 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case FLOATING_POINT_LITERAL:
						{
						int LA44_38 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case 35:
						{
						int LA44_39 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case 39:
						{
						int LA44_40 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case 23:
					case 28:
					case 32:
					case 34:
					case 38:
					case 105:
						{
						int LA44_41 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					case 90:
						{
						int LA44_42 = input.LA(3);

						if ((EvaluatePredicate(synpred74_C_fragment)))
						{
							alt44 = 1;
						}


						}
						break;
					}

				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:278:65: abstract_declarator_suffix
					{
					DebugLocation(278, 65);
					PushFollow(Follow._abstract_declarator_suffix_in_direct_abstract_declarator1035);
					abstract_declarator_suffix146=abstract_declarator_suffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator_suffix146.Tree, abstract_declarator_suffix146, retval);

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("direct_abstract_declarator", 34);
			LeaveRule("direct_abstract_declarator", 34);
			LeaveRule_direct_abstract_declarator();
			if (state.backtracking > 0) { Memoize(input, 34, direct_abstract_declarator_StartIndex); }

		}
		DebugLocation(279, 1);
		} finally { DebugExitRule(GrammarFileName, "direct_abstract_declarator"); }
		return retval;

	}
	// $ANTLR end "direct_abstract_declarator"

	partial void EnterRule_abstract_declarator_suffix();
	partial void LeaveRule_abstract_declarator_suffix();

	// $ANTLR start "abstract_declarator_suffix"
	// C.g:281:1: abstract_declarator_suffix : ( '[' ']' | '[' constant_expression ']' | '(' ')' | '(' parameter_type_list ')' );
	[GrammarRule("abstract_declarator_suffix")]
	public XAstParserRuleReturnScope abstract_declarator_suffix()
	{
		EnterRule_abstract_declarator_suffix();
		EnterRule("abstract_declarator_suffix", 35);
		var retval = new XAstParserRuleReturnScope("abstract_declarator_suffix");
		
		retval.Start = (IToken)input.LT(1);
		int abstract_declarator_suffix_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal147 = default(IToken);
		IToken char_literal148 = default(IToken);
		IToken char_literal149 = default(IToken);
		IToken char_literal151 = default(IToken);
		IToken char_literal152 = default(IToken);
		IToken char_literal153 = default(IToken);
		IToken char_literal154 = default(IToken);
		IToken char_literal156 = default(IToken);
		XAstParserRuleReturnScope constant_expression150 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope parameter_type_list155 = default(XAstParserRuleReturnScope);

		object char_literal147_tree = default(object);
		object char_literal148_tree = default(object);
		object char_literal149_tree = default(object);
		object char_literal151_tree = default(object);
		object char_literal152_tree = default(object);
		object char_literal153_tree = default(object);
		object char_literal154_tree = default(object);
		object char_literal156_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "abstract_declarator_suffix");
		DebugLocation(281, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// C.g:282:2: ( '[' ']' | '[' constant_expression ']' | '(' ')' | '(' parameter_type_list ')' )
			int alt45=4;
			try { DebugEnterDecision(45, false);
			int LA45_0 = input.LA(1);

			if ((LA45_0==59))
			{
				int LA45_1 = input.LA(2);

				if ((LA45_1==60))
				{
					alt45 = 1;
				}
				else if ((LA45_1==CHARACTER_LITERAL||LA45_1==DECIMAL_LITERAL||LA45_1==FLOATING_POINT_LITERAL||LA45_1==HEX_LITERAL||LA45_1==IDENTIFIER||LA45_1==OCTAL_LITERAL||LA45_1==STRING_LITERAL||LA45_1==23||LA45_1==28||LA45_1==30||LA45_1==32||(LA45_1>=34 && LA45_1<=35)||(LA45_1>=38 && LA45_1<=39)||LA45_1==90||LA45_1==105))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA45_0==30))
			{
				int LA45_2 = input.LA(2);

				if ((LA45_2==31))
				{
					alt45 = 3;
				}
				else if ((LA45_2==IDENTIFIER||(LA45_2>=63 && LA45_2<=68)||(LA45_2>=71 && LA45_2<=72)||LA45_2==76||(LA45_2>=78 && LA45_2<=80)||(LA45_2>=84 && LA45_2<=86)||(LA45_2>=88 && LA45_2<=89)||(LA45_2>=91 && LA45_2<=92)||(LA45_2>=95 && LA45_2<=98)))
				{
					alt45 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 45, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:282:4: '[' ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(282, 4);
				char_literal147=(IToken)Match(input,59,Follow._59_in_abstract_declarator_suffix1047); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal147_tree = (object)adaptor.Create(char_literal147, retval);
				adaptor.AddChild(root_0, char_literal147_tree);
				}
				DebugLocation(282, 8);
				char_literal148=(IToken)Match(input,60,Follow._60_in_abstract_declarator_suffix1049); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal148_tree = (object)adaptor.Create(char_literal148, retval);
				adaptor.AddChild(root_0, char_literal148_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:283:4: '[' constant_expression ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(283, 4);
				char_literal149=(IToken)Match(input,59,Follow._59_in_abstract_declarator_suffix1054); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal149_tree = (object)adaptor.Create(char_literal149, retval);
				adaptor.AddChild(root_0, char_literal149_tree);
				}
				DebugLocation(283, 8);
				PushFollow(Follow._constant_expression_in_abstract_declarator_suffix1056);
				constant_expression150=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression150.Tree, constant_expression150, retval);
				DebugLocation(283, 28);
				char_literal151=(IToken)Match(input,60,Follow._60_in_abstract_declarator_suffix1058); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal151_tree = (object)adaptor.Create(char_literal151, retval);
				adaptor.AddChild(root_0, char_literal151_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:284:4: '(' ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(284, 4);
				char_literal152=(IToken)Match(input,30,Follow._30_in_abstract_declarator_suffix1063); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal152_tree = (object)adaptor.Create(char_literal152, retval);
				adaptor.AddChild(root_0, char_literal152_tree);
				}
				DebugLocation(284, 8);
				char_literal153=(IToken)Match(input,31,Follow._31_in_abstract_declarator_suffix1065); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal153_tree = (object)adaptor.Create(char_literal153, retval);
				adaptor.AddChild(root_0, char_literal153_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:285:4: '(' parameter_type_list ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(285, 4);
				char_literal154=(IToken)Match(input,30,Follow._30_in_abstract_declarator_suffix1070); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal154_tree = (object)adaptor.Create(char_literal154, retval);
				adaptor.AddChild(root_0, char_literal154_tree);
				}
				DebugLocation(285, 8);
				PushFollow(Follow._parameter_type_list_in_abstract_declarator_suffix1072);
				parameter_type_list155=parameter_type_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_type_list155.Tree, parameter_type_list155, retval);
				DebugLocation(285, 28);
				char_literal156=(IToken)Match(input,31,Follow._31_in_abstract_declarator_suffix1074); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal156_tree = (object)adaptor.Create(char_literal156, retval);
				adaptor.AddChild(root_0, char_literal156_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("abstract_declarator_suffix", 35);
			LeaveRule("abstract_declarator_suffix", 35);
			LeaveRule_abstract_declarator_suffix();
			if (state.backtracking > 0) { Memoize(input, 35, abstract_declarator_suffix_StartIndex); }

		}
		DebugLocation(286, 1);
		} finally { DebugExitRule(GrammarFileName, "abstract_declarator_suffix"); }
		return retval;

	}
	// $ANTLR end "abstract_declarator_suffix"

	partial void EnterRule_initializer();
	partial void LeaveRule_initializer();

	// $ANTLR start "initializer"
	// C.g:288:1: initializer : ( assignment_expression | '{' initializer_list ( ',' )? '}' );
	[GrammarRule("initializer")]
	public XAstParserRuleReturnScope initializer()
	{
		EnterRule_initializer();
		EnterRule("initializer", 36);
		var retval = new XAstParserRuleReturnScope("initializer");
		
		retval.Start = (IToken)input.LT(1);
		int initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal158 = default(IToken);
		IToken char_literal160 = default(IToken);
		IToken char_literal161 = default(IToken);
		XAstParserRuleReturnScope assignment_expression157 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope initializer_list159 = default(XAstParserRuleReturnScope);

		object char_literal158_tree = default(object);
		object char_literal160_tree = default(object);
		object char_literal161_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "initializer");
		DebugLocation(288, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// C.g:289:2: ( assignment_expression | '{' initializer_list ( ',' )? '}' )
			int alt47=2;
			try { DebugEnterDecision(47, false);
			int LA47_0 = input.LA(1);

			if ((LA47_0==CHARACTER_LITERAL||LA47_0==DECIMAL_LITERAL||LA47_0==FLOATING_POINT_LITERAL||LA47_0==HEX_LITERAL||LA47_0==IDENTIFIER||LA47_0==OCTAL_LITERAL||LA47_0==STRING_LITERAL||LA47_0==23||LA47_0==28||LA47_0==30||LA47_0==32||(LA47_0>=34 && LA47_0<=35)||(LA47_0>=38 && LA47_0<=39)||LA47_0==90||LA47_0==105))
			{
				alt47 = 1;
			}
			else if ((LA47_0==100))
			{
				alt47 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 47, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:289:4: assignment_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(289, 4);
				PushFollow(Follow._assignment_expression_in_initializer1086);
				assignment_expression157=assignment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression157.Tree, assignment_expression157, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:290:4: '{' initializer_list ( ',' )? '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(290, 4);
				char_literal158=(IToken)Match(input,100,Follow._100_in_initializer1091); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal158_tree = (object)adaptor.Create(char_literal158, retval);
				adaptor.AddChild(root_0, char_literal158_tree);
				}
				DebugLocation(290, 8);
				PushFollow(Follow._initializer_list_in_initializer1093);
				initializer_list159=initializer_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, initializer_list159.Tree, initializer_list159, retval);
				DebugLocation(290, 25);
				// C.g:290:25: ( ',' )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==37))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:290:25: ','
					{
					DebugLocation(290, 25);
					char_literal160=(IToken)Match(input,37,Follow._37_in_initializer1095); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal160_tree = (object)adaptor.Create(char_literal160, retval);
					adaptor.AddChild(root_0, char_literal160_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(46); }

				DebugLocation(290, 30);
				char_literal161=(IToken)Match(input,104,Follow._104_in_initializer1098); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal161_tree = (object)adaptor.Create(char_literal161, retval);
				adaptor.AddChild(root_0, char_literal161_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("initializer", 36);
			LeaveRule("initializer", 36);
			LeaveRule_initializer();
			if (state.backtracking > 0) { Memoize(input, 36, initializer_StartIndex); }

		}
		DebugLocation(291, 1);
		} finally { DebugExitRule(GrammarFileName, "initializer"); }
		return retval;

	}
	// $ANTLR end "initializer"

	partial void EnterRule_initializer_list();
	partial void LeaveRule_initializer_list();

	// $ANTLR start "initializer_list"
	// C.g:293:1: initializer_list : initializer ( ',' initializer )* ;
	[GrammarRule("initializer_list")]
	public XAstParserRuleReturnScope initializer_list()
	{
		EnterRule_initializer_list();
		EnterRule("initializer_list", 37);
		var retval = new XAstParserRuleReturnScope("initializer_list");
		
		retval.Start = (IToken)input.LT(1);
		int initializer_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal163 = default(IToken);
		XAstParserRuleReturnScope initializer162 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope initializer164 = default(XAstParserRuleReturnScope);

		object char_literal163_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "initializer_list");
		DebugLocation(293, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// C.g:294:2: ( initializer ( ',' initializer )* )
			DebugEnterAlt(1);
			// C.g:294:4: initializer ( ',' initializer )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(294, 4);
			PushFollow(Follow._initializer_in_initializer_list1109);
			initializer162=initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, initializer162.Tree, initializer162, retval);
			DebugLocation(294, 16);
			// C.g:294:16: ( ',' initializer )*
			try { DebugEnterSubRule(48);
			while (true)
			{
				int alt48=2;
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if ((LA48_0==37))
				{
					int LA48_1 = input.LA(2);

					if ((LA48_1==CHARACTER_LITERAL||LA48_1==DECIMAL_LITERAL||LA48_1==FLOATING_POINT_LITERAL||LA48_1==HEX_LITERAL||LA48_1==IDENTIFIER||LA48_1==OCTAL_LITERAL||LA48_1==STRING_LITERAL||LA48_1==23||LA48_1==28||LA48_1==30||LA48_1==32||(LA48_1>=34 && LA48_1<=35)||(LA48_1>=38 && LA48_1<=39)||LA48_1==90||LA48_1==100||LA48_1==105))
					{
						alt48 = 1;
					}


				}


				} finally { DebugExitDecision(48); }
				switch ( alt48 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:294:17: ',' initializer
					{
					DebugLocation(294, 17);
					char_literal163=(IToken)Match(input,37,Follow._37_in_initializer_list1112); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal163_tree = (object)adaptor.Create(char_literal163, retval);
					adaptor.AddChild(root_0, char_literal163_tree);
					}
					DebugLocation(294, 21);
					PushFollow(Follow._initializer_in_initializer_list1114);
					initializer164=initializer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, initializer164.Tree, initializer164, retval);

					}
					break;

				default:
					goto loop48;
				}
			}

			loop48:
				;

			} finally { DebugExitSubRule(48); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("initializer_list", 37);
			LeaveRule("initializer_list", 37);
			LeaveRule_initializer_list();
			if (state.backtracking > 0) { Memoize(input, 37, initializer_list_StartIndex); }

		}
		DebugLocation(295, 1);
		} finally { DebugExitRule(GrammarFileName, "initializer_list"); }
		return retval;

	}
	// $ANTLR end "initializer_list"

	partial void EnterRule_argument_expression_list();
	partial void LeaveRule_argument_expression_list();

	// $ANTLR start "argument_expression_list"
	// C.g:299:1: argument_expression_list : assignment_expression ( ',' assignment_expression )* ;
	[GrammarRule("argument_expression_list")]
	public XAstParserRuleReturnScope argument_expression_list()
	{
		EnterRule_argument_expression_list();
		EnterRule("argument_expression_list", 38);
		var retval = new XAstParserRuleReturnScope("argument_expression_list");
		
		retval.Start = (IToken)input.LT(1);
		int argument_expression_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal166 = default(IToken);
		XAstParserRuleReturnScope assignment_expression165 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression167 = default(XAstParserRuleReturnScope);

		object char_literal166_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "argument_expression_list");
		DebugLocation(299, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// C.g:300:2: ( assignment_expression ( ',' assignment_expression )* )
			DebugEnterAlt(1);
			// C.g:300:6: assignment_expression ( ',' assignment_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(300, 6);
			PushFollow(Follow._assignment_expression_in_argument_expression_list1131);
			assignment_expression165=assignment_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression165.Tree, assignment_expression165, retval);
			DebugLocation(300, 28);
			// C.g:300:28: ( ',' assignment_expression )*
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				int LA49_0 = input.LA(1);

				if ((LA49_0==37))
				{
					alt49 = 1;
				}


				} finally { DebugExitDecision(49); }
				switch ( alt49 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:300:29: ',' assignment_expression
					{
					DebugLocation(300, 29);
					char_literal166=(IToken)Match(input,37,Follow._37_in_argument_expression_list1134); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal166_tree = (object)adaptor.Create(char_literal166, retval);
					adaptor.AddChild(root_0, char_literal166_tree);
					}
					DebugLocation(300, 33);
					PushFollow(Follow._assignment_expression_in_argument_expression_list1136);
					assignment_expression167=assignment_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression167.Tree, assignment_expression167, retval);

					}
					break;

				default:
					goto loop49;
				}
			}

			loop49:
				;

			} finally { DebugExitSubRule(49); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("argument_expression_list", 38);
			LeaveRule("argument_expression_list", 38);
			LeaveRule_argument_expression_list();
			if (state.backtracking > 0) { Memoize(input, 38, argument_expression_list_StartIndex); }

		}
		DebugLocation(301, 1);
		} finally { DebugExitRule(GrammarFileName, "argument_expression_list"); }
		return retval;

	}
	// $ANTLR end "argument_expression_list"

	partial void EnterRule_additive_expression();
	partial void LeaveRule_additive_expression();

	// $ANTLR start "additive_expression"
	// C.g:303:1: additive_expression : ( multiplicative_expression ) ( '+' multiplicative_expression | '-' multiplicative_expression )* ;
	[GrammarRule("additive_expression")]
	public XAstParserRuleReturnScope additive_expression()
	{
		EnterRule_additive_expression();
		EnterRule("additive_expression", 39);
		var retval = new XAstParserRuleReturnScope("additive_expression");
		
		retval.Start = (IToken)input.LT(1);
		int additive_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal169 = default(IToken);
		IToken char_literal171 = default(IToken);
		XAstParserRuleReturnScope multiplicative_expression168 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope multiplicative_expression170 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope multiplicative_expression172 = default(XAstParserRuleReturnScope);

		object char_literal169_tree = default(object);
		object char_literal171_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "additive_expression");
		DebugLocation(303, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// C.g:304:2: ( ( multiplicative_expression ) ( '+' multiplicative_expression | '-' multiplicative_expression )* )
			DebugEnterAlt(1);
			// C.g:304:4: ( multiplicative_expression ) ( '+' multiplicative_expression | '-' multiplicative_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(304, 4);
			// C.g:304:4: ( multiplicative_expression )
			DebugEnterAlt(1);
			// C.g:304:5: multiplicative_expression
			{
			DebugLocation(304, 5);
			PushFollow(Follow._multiplicative_expression_in_additive_expression1150);
			multiplicative_expression168=multiplicative_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression168.Tree, multiplicative_expression168, retval);

			}

			DebugLocation(304, 32);
			// C.g:304:32: ( '+' multiplicative_expression | '-' multiplicative_expression )*
			try { DebugEnterSubRule(50);
			while (true)
			{
				int alt50=3;
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==34))
				{
					alt50 = 1;
				}
				else if ((LA50_0==38))
				{
					alt50 = 2;
				}


				} finally { DebugExitDecision(50); }
				switch ( alt50 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:304:33: '+' multiplicative_expression
					{
					DebugLocation(304, 33);
					char_literal169=(IToken)Match(input,34,Follow._34_in_additive_expression1154); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal169_tree = (object)adaptor.Create(char_literal169, retval);
					adaptor.AddChild(root_0, char_literal169_tree);
					}
					DebugLocation(304, 37);
					PushFollow(Follow._multiplicative_expression_in_additive_expression1156);
					multiplicative_expression170=multiplicative_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression170.Tree, multiplicative_expression170, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:304:65: '-' multiplicative_expression
					{
					DebugLocation(304, 65);
					char_literal171=(IToken)Match(input,38,Follow._38_in_additive_expression1160); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal171_tree = (object)adaptor.Create(char_literal171, retval);
					adaptor.AddChild(root_0, char_literal171_tree);
					}
					DebugLocation(304, 69);
					PushFollow(Follow._multiplicative_expression_in_additive_expression1162);
					multiplicative_expression172=multiplicative_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression172.Tree, multiplicative_expression172, retval);

					}
					break;

				default:
					goto loop50;
				}
			}

			loop50:
				;

			} finally { DebugExitSubRule(50); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additive_expression", 39);
			LeaveRule("additive_expression", 39);
			LeaveRule_additive_expression();
			if (state.backtracking > 0) { Memoize(input, 39, additive_expression_StartIndex); }

		}
		DebugLocation(305, 1);
		} finally { DebugExitRule(GrammarFileName, "additive_expression"); }
		return retval;

	}
	// $ANTLR end "additive_expression"

	partial void EnterRule_multiplicative_expression();
	partial void LeaveRule_multiplicative_expression();

	// $ANTLR start "multiplicative_expression"
	// C.g:307:1: multiplicative_expression : ( cast_expression ) ( '*' cast_expression | '/' cast_expression | '%' cast_expression )* ;
	[GrammarRule("multiplicative_expression")]
	public XAstParserRuleReturnScope multiplicative_expression()
	{
		EnterRule_multiplicative_expression();
		EnterRule("multiplicative_expression", 40);
		var retval = new XAstParserRuleReturnScope("multiplicative_expression");
		
		retval.Start = (IToken)input.LT(1);
		int multiplicative_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal174 = default(IToken);
		IToken char_literal176 = default(IToken);
		IToken char_literal178 = default(IToken);
		XAstParserRuleReturnScope cast_expression173 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression175 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression177 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression179 = default(XAstParserRuleReturnScope);

		object char_literal174_tree = default(object);
		object char_literal176_tree = default(object);
		object char_literal178_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "multiplicative_expression");
		DebugLocation(307, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// C.g:308:2: ( ( cast_expression ) ( '*' cast_expression | '/' cast_expression | '%' cast_expression )* )
			DebugEnterAlt(1);
			// C.g:308:4: ( cast_expression ) ( '*' cast_expression | '/' cast_expression | '%' cast_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(308, 4);
			// C.g:308:4: ( cast_expression )
			DebugEnterAlt(1);
			// C.g:308:5: cast_expression
			{
			DebugLocation(308, 5);
			PushFollow(Follow._cast_expression_in_multiplicative_expression1176);
			cast_expression173=cast_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression173.Tree, cast_expression173, retval);

			}

			DebugLocation(308, 22);
			// C.g:308:22: ( '*' cast_expression | '/' cast_expression | '%' cast_expression )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=4;
				try { DebugEnterDecision(51, false);
				switch (input.LA(1))
				{
				case 32:
					{
					alt51 = 1;
					}
					break;
				case 44:
					{
					alt51 = 2;
					}
					break;
				case 25:
					{
					alt51 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:308:23: '*' cast_expression
					{
					DebugLocation(308, 23);
					char_literal174=(IToken)Match(input,32,Follow._32_in_multiplicative_expression1180); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal174_tree = (object)adaptor.Create(char_literal174, retval);
					adaptor.AddChild(root_0, char_literal174_tree);
					}
					DebugLocation(308, 27);
					PushFollow(Follow._cast_expression_in_multiplicative_expression1182);
					cast_expression175=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression175.Tree, cast_expression175, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:308:45: '/' cast_expression
					{
					DebugLocation(308, 45);
					char_literal176=(IToken)Match(input,44,Follow._44_in_multiplicative_expression1186); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal176_tree = (object)adaptor.Create(char_literal176, retval);
					adaptor.AddChild(root_0, char_literal176_tree);
					}
					DebugLocation(308, 49);
					PushFollow(Follow._cast_expression_in_multiplicative_expression1188);
					cast_expression177=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression177.Tree, cast_expression177, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C.g:308:67: '%' cast_expression
					{
					DebugLocation(308, 67);
					char_literal178=(IToken)Match(input,25,Follow._25_in_multiplicative_expression1192); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal178_tree = (object)adaptor.Create(char_literal178, retval);
					adaptor.AddChild(root_0, char_literal178_tree);
					}
					DebugLocation(308, 71);
					PushFollow(Follow._cast_expression_in_multiplicative_expression1194);
					cast_expression179=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression179.Tree, cast_expression179, retval);

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicative_expression", 40);
			LeaveRule("multiplicative_expression", 40);
			LeaveRule_multiplicative_expression();
			if (state.backtracking > 0) { Memoize(input, 40, multiplicative_expression_StartIndex); }

		}
		DebugLocation(309, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicative_expression"); }
		return retval;

	}
	// $ANTLR end "multiplicative_expression"

	partial void EnterRule_cast_expression();
	partial void LeaveRule_cast_expression();

	// $ANTLR start "cast_expression"
	// C.g:311:1: cast_expression : ( '(' type_name ')' cast_expression | unary_expression );
	[GrammarRule("cast_expression")]
	public XAstParserRuleReturnScope cast_expression()
	{
		EnterRule_cast_expression();
		EnterRule("cast_expression", 41);
		var retval = new XAstParserRuleReturnScope("cast_expression");
		
		retval.Start = (IToken)input.LT(1);
		int cast_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal180 = default(IToken);
		IToken char_literal182 = default(IToken);
		XAstParserRuleReturnScope type_name181 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression183 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression184 = default(XAstParserRuleReturnScope);

		object char_literal180_tree = default(object);
		object char_literal182_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "cast_expression");
		DebugLocation(311, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// C.g:312:2: ( '(' type_name ')' cast_expression | unary_expression )
			int alt52=2;
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==30))
			{
				switch (input.LA(2))
				{
				case 65:
				case 71:
				case 72:
				case 76:
				case 78:
				case 80:
				case 84:
				case 85:
				case 88:
				case 89:
				case 92:
				case 95:
				case 96:
				case 97:
				case 98:
					{
					alt52 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA52_25 = input.LA(3);

					if ((EvaluatePredicate(synpred87_C_fragment)))
					{
						alt52 = 1;
					}
					else if ((true))
					{
						alt52 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 52, 25, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case CHARACTER_LITERAL:
				case DECIMAL_LITERAL:
				case FLOATING_POINT_LITERAL:
				case HEX_LITERAL:
				case OCTAL_LITERAL:
				case STRING_LITERAL:
				case 23:
				case 28:
				case 30:
				case 32:
				case 34:
				case 35:
				case 38:
				case 39:
				case 90:
				case 105:
					{
					alt52 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 52, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA52_0==CHARACTER_LITERAL||LA52_0==DECIMAL_LITERAL||LA52_0==FLOATING_POINT_LITERAL||LA52_0==HEX_LITERAL||LA52_0==IDENTIFIER||LA52_0==OCTAL_LITERAL||LA52_0==STRING_LITERAL||LA52_0==23||LA52_0==28||LA52_0==32||(LA52_0>=34 && LA52_0<=35)||(LA52_0>=38 && LA52_0<=39)||LA52_0==90||LA52_0==105))
			{
				alt52 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 52, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:312:4: '(' type_name ')' cast_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(312, 4);
				char_literal180=(IToken)Match(input,30,Follow._30_in_cast_expression1207); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal180_tree = (object)adaptor.Create(char_literal180, retval);
				adaptor.AddChild(root_0, char_literal180_tree);
				}
				DebugLocation(312, 8);
				PushFollow(Follow._type_name_in_cast_expression1209);
				type_name181=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_name181.Tree, type_name181, retval);
				DebugLocation(312, 18);
				char_literal182=(IToken)Match(input,31,Follow._31_in_cast_expression1211); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal182_tree = (object)adaptor.Create(char_literal182, retval);
				adaptor.AddChild(root_0, char_literal182_tree);
				}
				DebugLocation(312, 22);
				PushFollow(Follow._cast_expression_in_cast_expression1213);
				cast_expression183=cast_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression183.Tree, cast_expression183, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:313:4: unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(313, 4);
				PushFollow(Follow._unary_expression_in_cast_expression1218);
				unary_expression184=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression184.Tree, unary_expression184, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expression", 41);
			LeaveRule("cast_expression", 41);
			LeaveRule_cast_expression();
			if (state.backtracking > 0) { Memoize(input, 41, cast_expression_StartIndex); }

		}
		DebugLocation(314, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expression"); }
		return retval;

	}
	// $ANTLR end "cast_expression"

	partial void EnterRule_unary_expression();
	partial void LeaveRule_unary_expression();

	// $ANTLR start "unary_expression"
	// C.g:316:1: unary_expression : ( postfix_expression | '++' unary_expression | '--' unary_expression | unary_operator cast_expression | 'sizeof' unary_expression | 'sizeof' '(' type_name ')' );
	[GrammarRule("unary_expression")]
	public XAstParserRuleReturnScope unary_expression()
	{
		EnterRule_unary_expression();
		EnterRule("unary_expression", 42);
		var retval = new XAstParserRuleReturnScope("unary_expression");
		
		retval.Start = (IToken)input.LT(1);
		int unary_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal186 = default(IToken);
		IToken string_literal188 = default(IToken);
		IToken string_literal192 = default(IToken);
		IToken string_literal194 = default(IToken);
		IToken char_literal195 = default(IToken);
		IToken char_literal197 = default(IToken);
		XAstParserRuleReturnScope postfix_expression185 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression187 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression189 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_operator190 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression191 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression193 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name196 = default(XAstParserRuleReturnScope);

		object string_literal186_tree = default(object);
		object string_literal188_tree = default(object);
		object string_literal192_tree = default(object);
		object string_literal194_tree = default(object);
		object char_literal195_tree = default(object);
		object char_literal197_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unary_expression");
		DebugLocation(316, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// C.g:317:2: ( postfix_expression | '++' unary_expression | '--' unary_expression | unary_operator cast_expression | 'sizeof' unary_expression | 'sizeof' '(' type_name ')' )
			int alt53=6;
			try { DebugEnterDecision(53, false);
			switch (input.LA(1))
			{
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENTIFIER:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
			case 30:
				{
				alt53 = 1;
				}
				break;
			case 35:
				{
				alt53 = 2;
				}
				break;
			case 39:
				{
				alt53 = 3;
				}
				break;
			case 23:
			case 28:
			case 32:
			case 34:
			case 38:
			case 105:
				{
				alt53 = 4;
				}
				break;
			case 90:
				{
				int LA53_12 = input.LA(2);

				if ((LA53_12==30))
				{
					int LA53_13 = input.LA(3);

					if ((EvaluatePredicate(synpred92_C_fragment)))
					{
						alt53 = 5;
					}
					else if ((true))
					{
						alt53 = 6;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 53, 13, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA53_12==CHARACTER_LITERAL||LA53_12==DECIMAL_LITERAL||LA53_12==FLOATING_POINT_LITERAL||LA53_12==HEX_LITERAL||LA53_12==IDENTIFIER||LA53_12==OCTAL_LITERAL||LA53_12==STRING_LITERAL||LA53_12==23||LA53_12==28||LA53_12==32||(LA53_12>=34 && LA53_12<=35)||(LA53_12>=38 && LA53_12<=39)||LA53_12==90||LA53_12==105))
				{
					alt53 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 12, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:317:4: postfix_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(317, 4);
				PushFollow(Follow._postfix_expression_in_unary_expression1229);
				postfix_expression185=postfix_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, postfix_expression185.Tree, postfix_expression185, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:318:4: '++' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(318, 4);
				string_literal186=(IToken)Match(input,35,Follow._35_in_unary_expression1234); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal186_tree = (object)adaptor.Create(string_literal186, retval);
				adaptor.AddChild(root_0, string_literal186_tree);
				}
				DebugLocation(318, 9);
				PushFollow(Follow._unary_expression_in_unary_expression1236);
				unary_expression187=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression187.Tree, unary_expression187, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:319:4: '--' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(319, 4);
				string_literal188=(IToken)Match(input,39,Follow._39_in_unary_expression1241); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal188_tree = (object)adaptor.Create(string_literal188, retval);
				adaptor.AddChild(root_0, string_literal188_tree);
				}
				DebugLocation(319, 9);
				PushFollow(Follow._unary_expression_in_unary_expression1243);
				unary_expression189=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression189.Tree, unary_expression189, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:320:4: unary_operator cast_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(320, 4);
				PushFollow(Follow._unary_operator_in_unary_expression1248);
				unary_operator190=unary_operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_operator190.Tree, unary_operator190, retval);
				DebugLocation(320, 19);
				PushFollow(Follow._cast_expression_in_unary_expression1250);
				cast_expression191=cast_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression191.Tree, cast_expression191, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:321:4: 'sizeof' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(321, 4);
				string_literal192=(IToken)Match(input,90,Follow._90_in_unary_expression1255); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal192_tree = (object)adaptor.Create(string_literal192, retval);
				adaptor.AddChild(root_0, string_literal192_tree);
				}
				DebugLocation(321, 13);
				PushFollow(Follow._unary_expression_in_unary_expression1257);
				unary_expression193=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression193.Tree, unary_expression193, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:322:4: 'sizeof' '(' type_name ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(322, 4);
				string_literal194=(IToken)Match(input,90,Follow._90_in_unary_expression1262); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal194_tree = (object)adaptor.Create(string_literal194, retval);
				adaptor.AddChild(root_0, string_literal194_tree);
				}
				DebugLocation(322, 13);
				char_literal195=(IToken)Match(input,30,Follow._30_in_unary_expression1264); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal195_tree = (object)adaptor.Create(char_literal195, retval);
				adaptor.AddChild(root_0, char_literal195_tree);
				}
				DebugLocation(322, 17);
				PushFollow(Follow._type_name_in_unary_expression1266);
				type_name196=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_name196.Tree, type_name196, retval);
				DebugLocation(322, 27);
				char_literal197=(IToken)Match(input,31,Follow._31_in_unary_expression1268); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal197_tree = (object)adaptor.Create(char_literal197, retval);
				adaptor.AddChild(root_0, char_literal197_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_expression", 42);
			LeaveRule("unary_expression", 42);
			LeaveRule_unary_expression();
			if (state.backtracking > 0) { Memoize(input, 42, unary_expression_StartIndex); }

		}
		DebugLocation(323, 1);
		} finally { DebugExitRule(GrammarFileName, "unary_expression"); }
		return retval;

	}
	// $ANTLR end "unary_expression"

	partial void EnterRule_postfix_expression();
	partial void LeaveRule_postfix_expression();

	// $ANTLR start "postfix_expression"
	// C.g:325:1: postfix_expression : primary_expression ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )* ;
	[GrammarRule("postfix_expression")]
	public XAstParserRuleReturnScope postfix_expression()
	{
		EnterRule_postfix_expression();
		EnterRule("postfix_expression", 43);
		var retval = new XAstParserRuleReturnScope("postfix_expression");
		
		retval.Start = (IToken)input.LT(1);
		int postfix_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal199 = default(IToken);
		IToken char_literal201 = default(IToken);
		IToken char_literal202 = default(IToken);
		IToken char_literal203 = default(IToken);
		IToken char_literal204 = default(IToken);
		IToken char_literal206 = default(IToken);
		IToken char_literal207 = default(IToken);
		IToken IDENTIFIER208 = default(IToken);
		IToken string_literal209 = default(IToken);
		IToken IDENTIFIER210 = default(IToken);
		IToken string_literal211 = default(IToken);
		IToken string_literal212 = default(IToken);
		XAstParserRuleReturnScope primary_expression198 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression200 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope argument_expression_list205 = default(XAstParserRuleReturnScope);

		object char_literal199_tree = default(object);
		object char_literal201_tree = default(object);
		object char_literal202_tree = default(object);
		object char_literal203_tree = default(object);
		object char_literal204_tree = default(object);
		object char_literal206_tree = default(object);
		object char_literal207_tree = default(object);
		object IDENTIFIER208_tree = default(object);
		object string_literal209_tree = default(object);
		object IDENTIFIER210_tree = default(object);
		object string_literal211_tree = default(object);
		object string_literal212_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "postfix_expression");
		DebugLocation(325, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// C.g:326:2: ( primary_expression ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )* )
			DebugEnterAlt(1);
			// C.g:326:6: primary_expression ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(326, 6);
			PushFollow(Follow._primary_expression_in_postfix_expression1281);
			primary_expression198=primary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression198.Tree, primary_expression198, retval);
			DebugLocation(327, 3);
			// C.g:327:3: ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )*
			try { DebugEnterSubRule(54);
			while (true)
			{
				int alt54=8;
				try { DebugEnterDecision(54, false);
				switch (input.LA(1))
				{
				case 59:
					{
					alt54 = 1;
					}
					break;
				case 30:
					{
					int LA54_24 = input.LA(2);

					if ((LA54_24==31))
					{
						alt54 = 2;
					}
					else if ((LA54_24==CHARACTER_LITERAL||LA54_24==DECIMAL_LITERAL||LA54_24==FLOATING_POINT_LITERAL||LA54_24==HEX_LITERAL||LA54_24==IDENTIFIER||LA54_24==OCTAL_LITERAL||LA54_24==STRING_LITERAL||LA54_24==23||LA54_24==28||LA54_24==30||LA54_24==32||(LA54_24>=34 && LA54_24<=35)||(LA54_24>=38 && LA54_24<=39)||LA54_24==90||LA54_24==105))
					{
						alt54 = 3;
					}


					}
					break;
				case 42:
					{
					alt54 = 4;
					}
					break;
				case 41:
					{
					alt54 = 5;
					}
					break;
				case 35:
					{
					alt54 = 6;
					}
					break;
				case 39:
					{
					alt54 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(54); }
				switch ( alt54 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:327:7: '[' expression ']'
					{
					DebugLocation(327, 7);
					char_literal199=(IToken)Match(input,59,Follow._59_in_postfix_expression1289); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal199_tree = (object)adaptor.Create(char_literal199, retval);
					adaptor.AddChild(root_0, char_literal199_tree);
					}
					DebugLocation(327, 11);
					PushFollow(Follow._expression_in_postfix_expression1291);
					expression200=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression200.Tree, expression200, retval);
					DebugLocation(327, 22);
					char_literal201=(IToken)Match(input,60,Follow._60_in_postfix_expression1293); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal201_tree = (object)adaptor.Create(char_literal201, retval);
					adaptor.AddChild(root_0, char_literal201_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:328:7: '(' ')'
					{
					DebugLocation(328, 7);
					char_literal202=(IToken)Match(input,30,Follow._30_in_postfix_expression1301); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal202_tree = (object)adaptor.Create(char_literal202, retval);
					adaptor.AddChild(root_0, char_literal202_tree);
					}
					DebugLocation(328, 11);
					char_literal203=(IToken)Match(input,31,Follow._31_in_postfix_expression1303); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal203_tree = (object)adaptor.Create(char_literal203, retval);
					adaptor.AddChild(root_0, char_literal203_tree);
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C.g:329:7: '(' argument_expression_list ')'
					{
					DebugLocation(329, 7);
					char_literal204=(IToken)Match(input,30,Follow._30_in_postfix_expression1311); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal204_tree = (object)adaptor.Create(char_literal204, retval);
					adaptor.AddChild(root_0, char_literal204_tree);
					}
					DebugLocation(329, 11);
					PushFollow(Follow._argument_expression_list_in_postfix_expression1313);
					argument_expression_list205=argument_expression_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, argument_expression_list205.Tree, argument_expression_list205, retval);
					DebugLocation(329, 36);
					char_literal206=(IToken)Match(input,31,Follow._31_in_postfix_expression1315); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal206_tree = (object)adaptor.Create(char_literal206, retval);
					adaptor.AddChild(root_0, char_literal206_tree);
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C.g:330:7: '.' IDENTIFIER
					{
					DebugLocation(330, 7);
					char_literal207=(IToken)Match(input,42,Follow._42_in_postfix_expression1323); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal207_tree = (object)adaptor.Create(char_literal207, retval);
					adaptor.AddChild(root_0, char_literal207_tree);
					}
					DebugLocation(330, 11);
					IDENTIFIER208=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_postfix_expression1325), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER208_tree = (object)adaptor.Create(IDENTIFIER208, retval);
					adaptor.AddChild(root_0, IDENTIFIER208_tree);
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// C.g:331:7: '->' IDENTIFIER
					{
					DebugLocation(331, 7);
					string_literal209=(IToken)Match(input,41,Follow._41_in_postfix_expression1333); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal209_tree = (object)adaptor.Create(string_literal209, retval);
					adaptor.AddChild(root_0, string_literal209_tree);
					}
					DebugLocation(331, 12);
					IDENTIFIER210=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_postfix_expression1335), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER210_tree = (object)adaptor.Create(IDENTIFIER210, retval);
					adaptor.AddChild(root_0, IDENTIFIER210_tree);
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// C.g:332:7: '++'
					{
					DebugLocation(332, 7);
					string_literal211=(IToken)Match(input,35,Follow._35_in_postfix_expression1343); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal211_tree = (object)adaptor.Create(string_literal211, retval);
					adaptor.AddChild(root_0, string_literal211_tree);
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// C.g:333:7: '--'
					{
					DebugLocation(333, 7);
					string_literal212=(IToken)Match(input,39,Follow._39_in_postfix_expression1351); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal212_tree = (object)adaptor.Create(string_literal212, retval);
					adaptor.AddChild(root_0, string_literal212_tree);
					}

					}
					break;

				default:
					goto loop54;
				}
			}

			loop54:
				;

			} finally { DebugExitSubRule(54); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("postfix_expression", 43);
			LeaveRule("postfix_expression", 43);
			LeaveRule_postfix_expression();
			if (state.backtracking > 0) { Memoize(input, 43, postfix_expression_StartIndex); }

		}
		DebugLocation(335, 1);
		} finally { DebugExitRule(GrammarFileName, "postfix_expression"); }
		return retval;

	}
	// $ANTLR end "postfix_expression"

	partial void EnterRule_unary_operator();
	partial void LeaveRule_unary_operator();

	// $ANTLR start "unary_operator"
	// C.g:337:1: unary_operator : ( '&' | '*' | '+' | '-' | '~' | '!' );
	[GrammarRule("unary_operator")]
	public XAstParserRuleReturnScope unary_operator()
	{
		EnterRule_unary_operator();
		EnterRule("unary_operator", 44);
		var retval = new XAstParserRuleReturnScope("unary_operator");
		
		retval.Start = (IToken)input.LT(1);
		int unary_operator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set213 = default(IToken);

		object set213_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unary_operator");
		DebugLocation(337, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// C.g:338:2: ( '&' | '*' | '+' | '-' | '~' | '!' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(338, 2);

			set213=(IToken)input.LT(1);
			if (input.LA(1)==23||input.LA(1)==28||input.LA(1)==32||input.LA(1)==34||input.LA(1)==38||input.LA(1)==105)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set213, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_operator", 44);
			LeaveRule("unary_operator", 44);
			LeaveRule_unary_operator();
			if (state.backtracking > 0) { Memoize(input, 44, unary_operator_StartIndex); }

		}
		DebugLocation(344, 1);
		} finally { DebugExitRule(GrammarFileName, "unary_operator"); }
		return retval;

	}
	// $ANTLR end "unary_operator"

	partial void EnterRule_primary_expression();
	partial void LeaveRule_primary_expression();

	// $ANTLR start "primary_expression"
	// C.g:346:1: primary_expression : ( IDENTIFIER | constant | '(' expression ')' );
	[GrammarRule("primary_expression")]
	public XAstParserRuleReturnScope primary_expression()
	{
		EnterRule_primary_expression();
		EnterRule("primary_expression", 45);
		var retval = new XAstParserRuleReturnScope("primary_expression");
		
		retval.Start = (IToken)input.LT(1);
		int primary_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER214 = default(IToken);
		IToken char_literal216 = default(IToken);
		IToken char_literal218 = default(IToken);
		XAstParserRuleReturnScope constant215 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression217 = default(XAstParserRuleReturnScope);

		object IDENTIFIER214_tree = default(object);
		object char_literal216_tree = default(object);
		object char_literal218_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primary_expression");
		DebugLocation(346, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// C.g:347:2: ( IDENTIFIER | constant | '(' expression ')' )
			int alt55=3;
			try { DebugEnterDecision(55, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				alt55 = 1;
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
				{
				alt55 = 2;
				}
				break;
			case 30:
				{
				alt55 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:347:4: IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(347, 4);
				IDENTIFIER214=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primary_expression1403), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER214_tree = (object)adaptor.Create(IDENTIFIER214, retval);
				adaptor.AddChild(root_0, IDENTIFIER214_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:348:4: constant
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(348, 4);
				PushFollow(Follow._constant_in_primary_expression1408);
				constant215=constant();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant215.Tree, constant215, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:349:4: '(' expression ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(349, 4);
				char_literal216=(IToken)Match(input,30,Follow._30_in_primary_expression1413); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal216_tree = (object)adaptor.Create(char_literal216, retval);
				adaptor.AddChild(root_0, char_literal216_tree);
				}
				DebugLocation(349, 8);
				PushFollow(Follow._expression_in_primary_expression1415);
				expression217=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression217.Tree, expression217, retval);
				DebugLocation(349, 19);
				char_literal218=(IToken)Match(input,31,Follow._31_in_primary_expression1417); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal218_tree = (object)adaptor.Create(char_literal218, retval);
				adaptor.AddChild(root_0, char_literal218_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_expression", 45);
			LeaveRule("primary_expression", 45);
			LeaveRule_primary_expression();
			if (state.backtracking > 0) { Memoize(input, 45, primary_expression_StartIndex); }

		}
		DebugLocation(350, 1);
		} finally { DebugExitRule(GrammarFileName, "primary_expression"); }
		return retval;

	}
	// $ANTLR end "primary_expression"

	partial void EnterRule_constant();
	partial void LeaveRule_constant();

	// $ANTLR start "constant"
	// C.g:352:1: constant : ( hex_literal | octal_literal | decimal_literal | character_literal | string_literal | floating_point_literal );
	[GrammarRule("constant")]
	public XAstParserRuleReturnScope constant()
	{
		EnterRule_constant();
		EnterRule("constant", 46);
		var retval = new XAstParserRuleReturnScope("constant");
		
		retval.Start = (IToken)input.LT(1);
		int constant_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope hex_literal219 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope octal_literal220 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope decimal_literal221 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope character_literal222 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope string_literal223 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope floating_point_literal224 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(352, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// C.g:353:2: ( hex_literal | octal_literal | decimal_literal | character_literal | string_literal | floating_point_literal )
			int alt56=6;
			try { DebugEnterDecision(56, false);
			switch (input.LA(1))
			{
			case HEX_LITERAL:
				{
				alt56 = 1;
				}
				break;
			case OCTAL_LITERAL:
				{
				alt56 = 2;
				}
				break;
			case DECIMAL_LITERAL:
				{
				alt56 = 3;
				}
				break;
			case CHARACTER_LITERAL:
				{
				alt56 = 4;
				}
				break;
			case STRING_LITERAL:
				{
				alt56 = 5;
				}
				break;
			case FLOATING_POINT_LITERAL:
				{
				alt56 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:353:6: hex_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(353, 6);
				PushFollow(Follow._hex_literal_in_constant1430);
				hex_literal219=hex_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, hex_literal219.Tree, hex_literal219, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:354:6: octal_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(354, 6);
				PushFollow(Follow._octal_literal_in_constant1437);
				octal_literal220=octal_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, octal_literal220.Tree, octal_literal220, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:355:6: decimal_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(355, 6);
				PushFollow(Follow._decimal_literal_in_constant1444);
				decimal_literal221=decimal_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, decimal_literal221.Tree, decimal_literal221, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:356:6: character_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(356, 6);
				PushFollow(Follow._character_literal_in_constant1451);
				character_literal222=character_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, character_literal222.Tree, character_literal222, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:357:6: string_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(357, 6);
				PushFollow(Follow._string_literal_in_constant1458);
				string_literal223=string_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, string_literal223.Tree, string_literal223, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:358:6: floating_point_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(358, 6);
				PushFollow(Follow._floating_point_literal_in_constant1465);
				floating_point_literal224=floating_point_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, floating_point_literal224.Tree, floating_point_literal224, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant", 46);
			LeaveRule("constant", 46);
			LeaveRule_constant();
			if (state.backtracking > 0) { Memoize(input, 46, constant_StartIndex); }

		}
		DebugLocation(359, 1);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"

	partial void EnterRule_hex_literal();
	partial void LeaveRule_hex_literal();

	// $ANTLR start "hex_literal"
	// C.g:361:1: hex_literal : HEX_LITERAL ;
	[GrammarRule("hex_literal")]
	public XAstParserRuleReturnScope hex_literal()
	{
		EnterRule_hex_literal();
		EnterRule("hex_literal", 47);
		var retval = new XAstParserRuleReturnScope("hex_literal");
		
		retval.Start = (IToken)input.LT(1);
		int hex_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken HEX_LITERAL225 = default(IToken);

		object HEX_LITERAL225_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "hex_literal");
		DebugLocation(361, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// C.g:362:2: ( HEX_LITERAL )
			DebugEnterAlt(1);
			// C.g:362:4: HEX_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(362, 4);
			HEX_LITERAL225=(IToken)new XToken((IToken)Match(input,HEX_LITERAL,Follow._HEX_LITERAL_in_hex_literal1476), "HEX_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			HEX_LITERAL225_tree = (object)adaptor.Create(HEX_LITERAL225, retval);
			adaptor.AddChild(root_0, HEX_LITERAL225_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("hex_literal", 47);
			LeaveRule("hex_literal", 47);
			LeaveRule_hex_literal();
			if (state.backtracking > 0) { Memoize(input, 47, hex_literal_StartIndex); }

		}
		DebugLocation(363, 1);
		} finally { DebugExitRule(GrammarFileName, "hex_literal"); }
		return retval;

	}
	// $ANTLR end "hex_literal"

	partial void EnterRule_octal_literal();
	partial void LeaveRule_octal_literal();

	// $ANTLR start "octal_literal"
	// C.g:365:1: octal_literal : OCTAL_LITERAL ;
	[GrammarRule("octal_literal")]
	public XAstParserRuleReturnScope octal_literal()
	{
		EnterRule_octal_literal();
		EnterRule("octal_literal", 48);
		var retval = new XAstParserRuleReturnScope("octal_literal");
		
		retval.Start = (IToken)input.LT(1);
		int octal_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OCTAL_LITERAL226 = default(IToken);

		object OCTAL_LITERAL226_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "octal_literal");
		DebugLocation(365, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// C.g:366:2: ( OCTAL_LITERAL )
			DebugEnterAlt(1);
			// C.g:366:4: OCTAL_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(366, 4);
			OCTAL_LITERAL226=(IToken)new XToken((IToken)Match(input,OCTAL_LITERAL,Follow._OCTAL_LITERAL_in_octal_literal1487), "OCTAL_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OCTAL_LITERAL226_tree = (object)adaptor.Create(OCTAL_LITERAL226, retval);
			adaptor.AddChild(root_0, OCTAL_LITERAL226_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("octal_literal", 48);
			LeaveRule("octal_literal", 48);
			LeaveRule_octal_literal();
			if (state.backtracking > 0) { Memoize(input, 48, octal_literal_StartIndex); }

		}
		DebugLocation(367, 1);
		} finally { DebugExitRule(GrammarFileName, "octal_literal"); }
		return retval;

	}
	// $ANTLR end "octal_literal"

	partial void EnterRule_decimal_literal();
	partial void LeaveRule_decimal_literal();

	// $ANTLR start "decimal_literal"
	// C.g:369:1: decimal_literal : DECIMAL_LITERAL ;
	[GrammarRule("decimal_literal")]
	public XAstParserRuleReturnScope decimal_literal()
	{
		EnterRule_decimal_literal();
		EnterRule("decimal_literal", 49);
		var retval = new XAstParserRuleReturnScope("decimal_literal");
		
		retval.Start = (IToken)input.LT(1);
		int decimal_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken DECIMAL_LITERAL227 = default(IToken);

		object DECIMAL_LITERAL227_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "decimal_literal");
		DebugLocation(369, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// C.g:370:2: ( DECIMAL_LITERAL )
			DebugEnterAlt(1);
			// C.g:370:4: DECIMAL_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(370, 4);
			DECIMAL_LITERAL227=(IToken)new XToken((IToken)Match(input,DECIMAL_LITERAL,Follow._DECIMAL_LITERAL_in_decimal_literal1498), "DECIMAL_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DECIMAL_LITERAL227_tree = (object)adaptor.Create(DECIMAL_LITERAL227, retval);
			adaptor.AddChild(root_0, DECIMAL_LITERAL227_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("decimal_literal", 49);
			LeaveRule("decimal_literal", 49);
			LeaveRule_decimal_literal();
			if (state.backtracking > 0) { Memoize(input, 49, decimal_literal_StartIndex); }

		}
		DebugLocation(371, 1);
		} finally { DebugExitRule(GrammarFileName, "decimal_literal"); }
		return retval;

	}
	// $ANTLR end "decimal_literal"

	partial void EnterRule_character_literal();
	partial void LeaveRule_character_literal();

	// $ANTLR start "character_literal"
	// C.g:373:1: character_literal : CHARACTER_LITERAL ;
	[GrammarRule("character_literal")]
	public XAstParserRuleReturnScope character_literal()
	{
		EnterRule_character_literal();
		EnterRule("character_literal", 50);
		var retval = new XAstParserRuleReturnScope("character_literal");
		
		retval.Start = (IToken)input.LT(1);
		int character_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken CHARACTER_LITERAL228 = default(IToken);

		object CHARACTER_LITERAL228_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "character_literal");
		DebugLocation(373, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// C.g:374:2: ( CHARACTER_LITERAL )
			DebugEnterAlt(1);
			// C.g:374:4: CHARACTER_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(374, 4);
			CHARACTER_LITERAL228=(IToken)new XToken((IToken)Match(input,CHARACTER_LITERAL,Follow._CHARACTER_LITERAL_in_character_literal1509), "CHARACTER_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CHARACTER_LITERAL228_tree = (object)adaptor.Create(CHARACTER_LITERAL228, retval);
			adaptor.AddChild(root_0, CHARACTER_LITERAL228_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("character_literal", 50);
			LeaveRule("character_literal", 50);
			LeaveRule_character_literal();
			if (state.backtracking > 0) { Memoize(input, 50, character_literal_StartIndex); }

		}
		DebugLocation(375, 1);
		} finally { DebugExitRule(GrammarFileName, "character_literal"); }
		return retval;

	}
	// $ANTLR end "character_literal"

	partial void EnterRule_string_literal();
	partial void LeaveRule_string_literal();

	// $ANTLR start "string_literal"
	// C.g:377:1: string_literal : STRING_LITERAL ;
	[GrammarRule("string_literal")]
	public XAstParserRuleReturnScope string_literal()
	{
		EnterRule_string_literal();
		EnterRule("string_literal", 51);
		var retval = new XAstParserRuleReturnScope("string_literal");
		
		retval.Start = (IToken)input.LT(1);
		int string_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken STRING_LITERAL229 = default(IToken);

		object STRING_LITERAL229_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "string_literal");
		DebugLocation(377, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// C.g:378:2: ( STRING_LITERAL )
			DebugEnterAlt(1);
			// C.g:378:4: STRING_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(378, 4);
			STRING_LITERAL229=(IToken)new XToken((IToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_string_literal1520), "STRING_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING_LITERAL229_tree = (object)adaptor.Create(STRING_LITERAL229, retval);
			adaptor.AddChild(root_0, STRING_LITERAL229_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("string_literal", 51);
			LeaveRule("string_literal", 51);
			LeaveRule_string_literal();
			if (state.backtracking > 0) { Memoize(input, 51, string_literal_StartIndex); }

		}
		DebugLocation(379, 1);
		} finally { DebugExitRule(GrammarFileName, "string_literal"); }
		return retval;

	}
	// $ANTLR end "string_literal"

	partial void EnterRule_floating_point_literal();
	partial void LeaveRule_floating_point_literal();

	// $ANTLR start "floating_point_literal"
	// C.g:381:1: floating_point_literal : FLOATING_POINT_LITERAL ;
	[GrammarRule("floating_point_literal")]
	public XAstParserRuleReturnScope floating_point_literal()
	{
		EnterRule_floating_point_literal();
		EnterRule("floating_point_literal", 52);
		var retval = new XAstParserRuleReturnScope("floating_point_literal");
		
		retval.Start = (IToken)input.LT(1);
		int floating_point_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken FLOATING_POINT_LITERAL230 = default(IToken);

		object FLOATING_POINT_LITERAL230_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "floating_point_literal");
		DebugLocation(381, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// C.g:382:2: ( FLOATING_POINT_LITERAL )
			DebugEnterAlt(1);
			// C.g:382:4: FLOATING_POINT_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(382, 4);
			FLOATING_POINT_LITERAL230=(IToken)new XToken((IToken)Match(input,FLOATING_POINT_LITERAL,Follow._FLOATING_POINT_LITERAL_in_floating_point_literal1531), "FLOATING_POINT_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			FLOATING_POINT_LITERAL230_tree = (object)adaptor.Create(FLOATING_POINT_LITERAL230, retval);
			adaptor.AddChild(root_0, FLOATING_POINT_LITERAL230_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("floating_point_literal", 52);
			LeaveRule("floating_point_literal", 52);
			LeaveRule_floating_point_literal();
			if (state.backtracking > 0) { Memoize(input, 52, floating_point_literal_StartIndex); }

		}
		DebugLocation(383, 1);
		} finally { DebugExitRule(GrammarFileName, "floating_point_literal"); }
		return retval;

	}
	// $ANTLR end "floating_point_literal"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();

	// $ANTLR start "expression"
	// C.g:387:1: expression : assignment_expression ( ',' assignment_expression )* ;
	[GrammarRule("expression")]
	public XAstParserRuleReturnScope expression()
	{
		EnterRule_expression();
		EnterRule("expression", 53);
		var retval = new XAstParserRuleReturnScope("expression");
		
		retval.Start = (IToken)input.LT(1);
		int expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal232 = default(IToken);
		XAstParserRuleReturnScope assignment_expression231 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression233 = default(XAstParserRuleReturnScope);

		object char_literal232_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(387, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// C.g:388:2: ( assignment_expression ( ',' assignment_expression )* )
			DebugEnterAlt(1);
			// C.g:388:4: assignment_expression ( ',' assignment_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(388, 4);
			PushFollow(Follow._assignment_expression_in_expression1544);
			assignment_expression231=assignment_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression231.Tree, assignment_expression231, retval);
			DebugLocation(388, 26);
			// C.g:388:26: ( ',' assignment_expression )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if ((LA57_0==37))
				{
					alt57 = 1;
				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:388:27: ',' assignment_expression
					{
					DebugLocation(388, 27);
					char_literal232=(IToken)Match(input,37,Follow._37_in_expression1547); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal232_tree = (object)adaptor.Create(char_literal232, retval);
					adaptor.AddChild(root_0, char_literal232_tree);
					}
					DebugLocation(388, 31);
					PushFollow(Follow._assignment_expression_in_expression1549);
					assignment_expression233=assignment_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression233.Tree, assignment_expression233, retval);

					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 53);
			LeaveRule("expression", 53);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 53, expression_StartIndex); }

		}
		DebugLocation(389, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_constant_expression();
	partial void LeaveRule_constant_expression();

	// $ANTLR start "constant_expression"
	// C.g:391:1: constant_expression : conditional_expression ;
	[GrammarRule("constant_expression")]
	public XAstParserRuleReturnScope constant_expression()
	{
		EnterRule_constant_expression();
		EnterRule("constant_expression", 54);
		var retval = new XAstParserRuleReturnScope("constant_expression");
		
		retval.Start = (IToken)input.LT(1);
		int constant_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope conditional_expression234 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "constant_expression");
		DebugLocation(391, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// C.g:392:2: ( conditional_expression )
			DebugEnterAlt(1);
			// C.g:392:4: conditional_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(392, 4);
			PushFollow(Follow._conditional_expression_in_constant_expression1562);
			conditional_expression234=conditional_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression234.Tree, conditional_expression234, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant_expression", 54);
			LeaveRule("constant_expression", 54);
			LeaveRule_constant_expression();
			if (state.backtracking > 0) { Memoize(input, 54, constant_expression_StartIndex); }

		}
		DebugLocation(393, 1);
		} finally { DebugExitRule(GrammarFileName, "constant_expression"); }
		return retval;

	}
	// $ANTLR end "constant_expression"

	partial void EnterRule_assignment_expression();
	partial void LeaveRule_assignment_expression();

	// $ANTLR start "assignment_expression"
	// C.g:395:1: assignment_expression : ( lvalue assignment_operator assignment_expression | conditional_expression );
	[GrammarRule("assignment_expression")]
	public XAstParserRuleReturnScope assignment_expression()
	{
		EnterRule_assignment_expression();
		EnterRule("assignment_expression", 55);
		var retval = new XAstParserRuleReturnScope("assignment_expression");
		
		retval.Start = (IToken)input.LT(1);
		int assignment_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope lvalue235 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_operator236 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression237 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conditional_expression238 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "assignment_expression");
		DebugLocation(395, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// C.g:396:2: ( lvalue assignment_operator assignment_expression | conditional_expression )
			int alt58=2;
			try { DebugEnterDecision(58, false);
			try
			{
				alt58 = dfa58.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:396:4: lvalue assignment_operator assignment_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(396, 4);
				PushFollow(Follow._lvalue_in_assignment_expression1573);
				lvalue235=lvalue();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue235.Tree, lvalue235, retval);
				DebugLocation(396, 11);
				PushFollow(Follow._assignment_operator_in_assignment_expression1575);
				assignment_operator236=assignment_operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_operator236.Tree, assignment_operator236, retval);
				DebugLocation(396, 31);
				PushFollow(Follow._assignment_expression_in_assignment_expression1577);
				assignment_expression237=assignment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression237.Tree, assignment_expression237, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:397:4: conditional_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(397, 4);
				PushFollow(Follow._conditional_expression_in_assignment_expression1582);
				conditional_expression238=conditional_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression238.Tree, conditional_expression238, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment_expression", 55);
			LeaveRule("assignment_expression", 55);
			LeaveRule_assignment_expression();
			if (state.backtracking > 0) { Memoize(input, 55, assignment_expression_StartIndex); }

		}
		DebugLocation(398, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment_expression"); }
		return retval;

	}
	// $ANTLR end "assignment_expression"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// C.g:400:1: lvalue : unary_expression ;
	[GrammarRule("lvalue")]
	public XAstParserRuleReturnScope lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 56);
		var retval = new XAstParserRuleReturnScope("lvalue");
		
		retval.Start = (IToken)input.LT(1);
		int lvalue_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope unary_expression239 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(400, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// C.g:401:2: ( unary_expression )
			DebugEnterAlt(1);
			// C.g:401:4: unary_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(401, 4);
			PushFollow(Follow._unary_expression_in_lvalue1594);
			unary_expression239=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression239.Tree, unary_expression239, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 56);
			LeaveRule("lvalue", 56);
			LeaveRule_lvalue();
			if (state.backtracking > 0) { Memoize(input, 56, lvalue_StartIndex); }

		}
		DebugLocation(402, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_assignment_operator();
	partial void LeaveRule_assignment_operator();

	// $ANTLR start "assignment_operator"
	// C.g:404:1: assignment_operator : ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' );
	[GrammarRule("assignment_operator")]
	public XAstParserRuleReturnScope assignment_operator()
	{
		EnterRule_assignment_operator();
		EnterRule("assignment_operator", 57);
		var retval = new XAstParserRuleReturnScope("assignment_operator");
		
		retval.Start = (IToken)input.LT(1);
		int assignment_operator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set240 = default(IToken);

		object set240_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assignment_operator");
		DebugLocation(404, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// C.g:405:2: ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(405, 2);

			set240=(IToken)input.LT(1);
			if (input.LA(1)==26||input.LA(1)==29||input.LA(1)==33||input.LA(1)==36||input.LA(1)==40||input.LA(1)==45||input.LA(1)==50||input.LA(1)==52||input.LA(1)==57||input.LA(1)==62||input.LA(1)==102)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set240, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment_operator", 57);
			LeaveRule("assignment_operator", 57);
			LeaveRule_assignment_operator();
			if (state.backtracking > 0) { Memoize(input, 57, assignment_operator_StartIndex); }

		}
		DebugLocation(416, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment_operator"); }
		return retval;

	}
	// $ANTLR end "assignment_operator"

	partial void EnterRule_conditional_expression();
	partial void LeaveRule_conditional_expression();

	// $ANTLR start "conditional_expression"
	// C.g:418:1: conditional_expression : logical_or_expression ( '?' expression ':' conditional_expression )? ;
	[GrammarRule("conditional_expression")]
	public XAstParserRuleReturnScope conditional_expression()
	{
		EnterRule_conditional_expression();
		EnterRule("conditional_expression", 58);
		var retval = new XAstParserRuleReturnScope("conditional_expression");
		
		retval.Start = (IToken)input.LT(1);
		int conditional_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal242 = default(IToken);
		IToken char_literal244 = default(IToken);
		XAstParserRuleReturnScope logical_or_expression241 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression243 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conditional_expression245 = default(XAstParserRuleReturnScope);

		object char_literal242_tree = default(object);
		object char_literal244_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditional_expression");
		DebugLocation(418, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// C.g:419:2: ( logical_or_expression ( '?' expression ':' conditional_expression )? )
			DebugEnterAlt(1);
			// C.g:419:4: logical_or_expression ( '?' expression ':' conditional_expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(419, 4);
			PushFollow(Follow._logical_or_expression_in_conditional_expression1666);
			logical_or_expression241=logical_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logical_or_expression241.Tree, logical_or_expression241, retval);
			DebugLocation(419, 26);
			// C.g:419:26: ( '?' expression ':' conditional_expression )?
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, false);
			int LA59_0 = input.LA(1);

			if ((LA59_0==58))
			{
				alt59 = 1;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:419:27: '?' expression ':' conditional_expression
				{
				DebugLocation(419, 27);
				char_literal242=(IToken)Match(input,58,Follow._58_in_conditional_expression1669); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal242_tree = (object)adaptor.Create(char_literal242, retval);
				adaptor.AddChild(root_0, char_literal242_tree);
				}
				DebugLocation(419, 31);
				PushFollow(Follow._expression_in_conditional_expression1671);
				expression243=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression243.Tree, expression243, retval);
				DebugLocation(419, 42);
				char_literal244=(IToken)Match(input,46,Follow._46_in_conditional_expression1673); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal244_tree = (object)adaptor.Create(char_literal244, retval);
				adaptor.AddChild(root_0, char_literal244_tree);
				}
				DebugLocation(419, 46);
				PushFollow(Follow._conditional_expression_in_conditional_expression1675);
				conditional_expression245=conditional_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression245.Tree, conditional_expression245, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(59); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditional_expression", 58);
			LeaveRule("conditional_expression", 58);
			LeaveRule_conditional_expression();
			if (state.backtracking > 0) { Memoize(input, 58, conditional_expression_StartIndex); }

		}
		DebugLocation(420, 1);
		} finally { DebugExitRule(GrammarFileName, "conditional_expression"); }
		return retval;

	}
	// $ANTLR end "conditional_expression"

	partial void EnterRule_logical_or_expression();
	partial void LeaveRule_logical_or_expression();

	// $ANTLR start "logical_or_expression"
	// C.g:422:1: logical_or_expression : logical_and_expression ( '||' logical_and_expression )* ;
	[GrammarRule("logical_or_expression")]
	public XAstParserRuleReturnScope logical_or_expression()
	{
		EnterRule_logical_or_expression();
		EnterRule("logical_or_expression", 59);
		var retval = new XAstParserRuleReturnScope("logical_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int logical_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal247 = default(IToken);
		XAstParserRuleReturnScope logical_and_expression246 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope logical_and_expression248 = default(XAstParserRuleReturnScope);

		object string_literal247_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logical_or_expression");
		DebugLocation(422, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// C.g:423:2: ( logical_and_expression ( '||' logical_and_expression )* )
			DebugEnterAlt(1);
			// C.g:423:4: logical_and_expression ( '||' logical_and_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(423, 4);
			PushFollow(Follow._logical_and_expression_in_logical_or_expression1688);
			logical_and_expression246=logical_and_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logical_and_expression246.Tree, logical_and_expression246, retval);
			DebugLocation(423, 27);
			// C.g:423:27: ( '||' logical_and_expression )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=2;
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if ((LA60_0==103))
				{
					alt60 = 1;
				}


				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:423:28: '||' logical_and_expression
					{
					DebugLocation(423, 28);
					string_literal247=(IToken)Match(input,103,Follow._103_in_logical_or_expression1691); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal247_tree = (object)adaptor.Create(string_literal247, retval);
					adaptor.AddChild(root_0, string_literal247_tree);
					}
					DebugLocation(423, 33);
					PushFollow(Follow._logical_and_expression_in_logical_or_expression1693);
					logical_and_expression248=logical_and_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logical_and_expression248.Tree, logical_and_expression248, retval);

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logical_or_expression", 59);
			LeaveRule("logical_or_expression", 59);
			LeaveRule_logical_or_expression();
			if (state.backtracking > 0) { Memoize(input, 59, logical_or_expression_StartIndex); }

		}
		DebugLocation(424, 1);
		} finally { DebugExitRule(GrammarFileName, "logical_or_expression"); }
		return retval;

	}
	// $ANTLR end "logical_or_expression"

	partial void EnterRule_logical_and_expression();
	partial void LeaveRule_logical_and_expression();

	// $ANTLR start "logical_and_expression"
	// C.g:426:1: logical_and_expression : inclusive_or_expression ( '&&' inclusive_or_expression )* ;
	[GrammarRule("logical_and_expression")]
	public XAstParserRuleReturnScope logical_and_expression()
	{
		EnterRule_logical_and_expression();
		EnterRule("logical_and_expression", 60);
		var retval = new XAstParserRuleReturnScope("logical_and_expression");
		
		retval.Start = (IToken)input.LT(1);
		int logical_and_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal250 = default(IToken);
		XAstParserRuleReturnScope inclusive_or_expression249 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope inclusive_or_expression251 = default(XAstParserRuleReturnScope);

		object string_literal250_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logical_and_expression");
		DebugLocation(426, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// C.g:427:2: ( inclusive_or_expression ( '&&' inclusive_or_expression )* )
			DebugEnterAlt(1);
			// C.g:427:4: inclusive_or_expression ( '&&' inclusive_or_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(427, 4);
			PushFollow(Follow._inclusive_or_expression_in_logical_and_expression1706);
			inclusive_or_expression249=inclusive_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, inclusive_or_expression249.Tree, inclusive_or_expression249, retval);
			DebugLocation(427, 28);
			// C.g:427:28: ( '&&' inclusive_or_expression )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==27))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:427:29: '&&' inclusive_or_expression
					{
					DebugLocation(427, 29);
					string_literal250=(IToken)Match(input,27,Follow._27_in_logical_and_expression1709); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal250_tree = (object)adaptor.Create(string_literal250, retval);
					adaptor.AddChild(root_0, string_literal250_tree);
					}
					DebugLocation(427, 34);
					PushFollow(Follow._inclusive_or_expression_in_logical_and_expression1711);
					inclusive_or_expression251=inclusive_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, inclusive_or_expression251.Tree, inclusive_or_expression251, retval);

					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logical_and_expression", 60);
			LeaveRule("logical_and_expression", 60);
			LeaveRule_logical_and_expression();
			if (state.backtracking > 0) { Memoize(input, 60, logical_and_expression_StartIndex); }

		}
		DebugLocation(428, 1);
		} finally { DebugExitRule(GrammarFileName, "logical_and_expression"); }
		return retval;

	}
	// $ANTLR end "logical_and_expression"

	partial void EnterRule_inclusive_or_expression();
	partial void LeaveRule_inclusive_or_expression();

	// $ANTLR start "inclusive_or_expression"
	// C.g:430:1: inclusive_or_expression : exclusive_or_expression ( '|' exclusive_or_expression )* ;
	[GrammarRule("inclusive_or_expression")]
	public XAstParserRuleReturnScope inclusive_or_expression()
	{
		EnterRule_inclusive_or_expression();
		EnterRule("inclusive_or_expression", 61);
		var retval = new XAstParserRuleReturnScope("inclusive_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int inclusive_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal253 = default(IToken);
		XAstParserRuleReturnScope exclusive_or_expression252 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope exclusive_or_expression254 = default(XAstParserRuleReturnScope);

		object char_literal253_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "inclusive_or_expression");
		DebugLocation(430, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// C.g:431:2: ( exclusive_or_expression ( '|' exclusive_or_expression )* )
			DebugEnterAlt(1);
			// C.g:431:4: exclusive_or_expression ( '|' exclusive_or_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(431, 4);
			PushFollow(Follow._exclusive_or_expression_in_inclusive_or_expression1724);
			exclusive_or_expression252=exclusive_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, exclusive_or_expression252.Tree, exclusive_or_expression252, retval);
			DebugLocation(431, 28);
			// C.g:431:28: ( '|' exclusive_or_expression )*
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=2;
				try { DebugEnterDecision(62, false);
				int LA62_0 = input.LA(1);

				if ((LA62_0==101))
				{
					alt62 = 1;
				}


				} finally { DebugExitDecision(62); }
				switch ( alt62 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:431:29: '|' exclusive_or_expression
					{
					DebugLocation(431, 29);
					char_literal253=(IToken)Match(input,101,Follow._101_in_inclusive_or_expression1727); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal253_tree = (object)adaptor.Create(char_literal253, retval);
					adaptor.AddChild(root_0, char_literal253_tree);
					}
					DebugLocation(431, 33);
					PushFollow(Follow._exclusive_or_expression_in_inclusive_or_expression1729);
					exclusive_or_expression254=exclusive_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, exclusive_or_expression254.Tree, exclusive_or_expression254, retval);

					}
					break;

				default:
					goto loop62;
				}
			}

			loop62:
				;

			} finally { DebugExitSubRule(62); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inclusive_or_expression", 61);
			LeaveRule("inclusive_or_expression", 61);
			LeaveRule_inclusive_or_expression();
			if (state.backtracking > 0) { Memoize(input, 61, inclusive_or_expression_StartIndex); }

		}
		DebugLocation(432, 1);
		} finally { DebugExitRule(GrammarFileName, "inclusive_or_expression"); }
		return retval;

	}
	// $ANTLR end "inclusive_or_expression"

	partial void EnterRule_exclusive_or_expression();
	partial void LeaveRule_exclusive_or_expression();

	// $ANTLR start "exclusive_or_expression"
	// C.g:434:1: exclusive_or_expression : and_expression ( '^' and_expression )* ;
	[GrammarRule("exclusive_or_expression")]
	public XAstParserRuleReturnScope exclusive_or_expression()
	{
		EnterRule_exclusive_or_expression();
		EnterRule("exclusive_or_expression", 62);
		var retval = new XAstParserRuleReturnScope("exclusive_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int exclusive_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal256 = default(IToken);
		XAstParserRuleReturnScope and_expression255 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope and_expression257 = default(XAstParserRuleReturnScope);

		object char_literal256_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "exclusive_or_expression");
		DebugLocation(434, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// C.g:435:2: ( and_expression ( '^' and_expression )* )
			DebugEnterAlt(1);
			// C.g:435:4: and_expression ( '^' and_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(435, 4);
			PushFollow(Follow._and_expression_in_exclusive_or_expression1742);
			and_expression255=and_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, and_expression255.Tree, and_expression255, retval);
			DebugLocation(435, 19);
			// C.g:435:19: ( '^' and_expression )*
			try { DebugEnterSubRule(63);
			while (true)
			{
				int alt63=2;
				try { DebugEnterDecision(63, false);
				int LA63_0 = input.LA(1);

				if ((LA63_0==61))
				{
					alt63 = 1;
				}


				} finally { DebugExitDecision(63); }
				switch ( alt63 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:435:20: '^' and_expression
					{
					DebugLocation(435, 20);
					char_literal256=(IToken)Match(input,61,Follow._61_in_exclusive_or_expression1745); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal256_tree = (object)adaptor.Create(char_literal256, retval);
					adaptor.AddChild(root_0, char_literal256_tree);
					}
					DebugLocation(435, 24);
					PushFollow(Follow._and_expression_in_exclusive_or_expression1747);
					and_expression257=and_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, and_expression257.Tree, and_expression257, retval);

					}
					break;

				default:
					goto loop63;
				}
			}

			loop63:
				;

			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exclusive_or_expression", 62);
			LeaveRule("exclusive_or_expression", 62);
			LeaveRule_exclusive_or_expression();
			if (state.backtracking > 0) { Memoize(input, 62, exclusive_or_expression_StartIndex); }

		}
		DebugLocation(436, 1);
		} finally { DebugExitRule(GrammarFileName, "exclusive_or_expression"); }
		return retval;

	}
	// $ANTLR end "exclusive_or_expression"

	partial void EnterRule_and_expression();
	partial void LeaveRule_and_expression();

	// $ANTLR start "and_expression"
	// C.g:438:1: and_expression : equality_expression ( '&' equality_expression )* ;
	[GrammarRule("and_expression")]
	public XAstParserRuleReturnScope and_expression()
	{
		EnterRule_and_expression();
		EnterRule("and_expression", 63);
		var retval = new XAstParserRuleReturnScope("and_expression");
		
		retval.Start = (IToken)input.LT(1);
		int and_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal259 = default(IToken);
		XAstParserRuleReturnScope equality_expression258 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope equality_expression260 = default(XAstParserRuleReturnScope);

		object char_literal259_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "and_expression");
		DebugLocation(438, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// C.g:439:2: ( equality_expression ( '&' equality_expression )* )
			DebugEnterAlt(1);
			// C.g:439:4: equality_expression ( '&' equality_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(439, 4);
			PushFollow(Follow._equality_expression_in_and_expression1760);
			equality_expression258=equality_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equality_expression258.Tree, equality_expression258, retval);
			DebugLocation(439, 24);
			// C.g:439:24: ( '&' equality_expression )*
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, false);
				int LA64_0 = input.LA(1);

				if ((LA64_0==28))
				{
					alt64 = 1;
				}


				} finally { DebugExitDecision(64); }
				switch ( alt64 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:439:25: '&' equality_expression
					{
					DebugLocation(439, 25);
					char_literal259=(IToken)Match(input,28,Follow._28_in_and_expression1763); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal259_tree = (object)adaptor.Create(char_literal259, retval);
					adaptor.AddChild(root_0, char_literal259_tree);
					}
					DebugLocation(439, 29);
					PushFollow(Follow._equality_expression_in_and_expression1765);
					equality_expression260=equality_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equality_expression260.Tree, equality_expression260, retval);

					}
					break;

				default:
					goto loop64;
				}
			}

			loop64:
				;

			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expression", 63);
			LeaveRule("and_expression", 63);
			LeaveRule_and_expression();
			if (state.backtracking > 0) { Memoize(input, 63, and_expression_StartIndex); }

		}
		DebugLocation(440, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expression"); }
		return retval;

	}
	// $ANTLR end "and_expression"

	partial void EnterRule_equality_expression();
	partial void LeaveRule_equality_expression();

	// $ANTLR start "equality_expression"
	// C.g:441:1: equality_expression : relational_expression ( ( '==' | '!=' ) relational_expression )* ;
	[GrammarRule("equality_expression")]
	public XAstParserRuleReturnScope equality_expression()
	{
		EnterRule_equality_expression();
		EnterRule("equality_expression", 64);
		var retval = new XAstParserRuleReturnScope("equality_expression");
		
		retval.Start = (IToken)input.LT(1);
		int equality_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set262 = default(IToken);
		XAstParserRuleReturnScope relational_expression261 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope relational_expression263 = default(XAstParserRuleReturnScope);

		object set262_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "equality_expression");
		DebugLocation(441, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// C.g:442:2: ( relational_expression ( ( '==' | '!=' ) relational_expression )* )
			DebugEnterAlt(1);
			// C.g:442:4: relational_expression ( ( '==' | '!=' ) relational_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(442, 4);
			PushFollow(Follow._relational_expression_in_equality_expression1777);
			relational_expression261=relational_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, relational_expression261.Tree, relational_expression261, retval);
			DebugLocation(442, 26);
			// C.g:442:26: ( ( '==' | '!=' ) relational_expression )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, false);
				int LA65_0 = input.LA(1);

				if ((LA65_0==24||LA65_0==53))
				{
					alt65 = 1;
				}


				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:442:27: ( '==' | '!=' ) relational_expression
					{
					DebugLocation(442, 27);

					set262=(IToken)input.LT(1);
					if (input.LA(1)==24||input.LA(1)==53)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set262, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(442, 39);
					PushFollow(Follow._relational_expression_in_equality_expression1786);
					relational_expression263=relational_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, relational_expression263.Tree, relational_expression263, retval);

					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equality_expression", 64);
			LeaveRule("equality_expression", 64);
			LeaveRule_equality_expression();
			if (state.backtracking > 0) { Memoize(input, 64, equality_expression_StartIndex); }

		}
		DebugLocation(443, 1);
		} finally { DebugExitRule(GrammarFileName, "equality_expression"); }
		return retval;

	}
	// $ANTLR end "equality_expression"

	partial void EnterRule_relational_expression();
	partial void LeaveRule_relational_expression();

	// $ANTLR start "relational_expression"
	// C.g:445:1: relational_expression : shift_expression ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* ;
	[GrammarRule("relational_expression")]
	public XAstParserRuleReturnScope relational_expression()
	{
		EnterRule_relational_expression();
		EnterRule("relational_expression", 65);
		var retval = new XAstParserRuleReturnScope("relational_expression");
		
		retval.Start = (IToken)input.LT(1);
		int relational_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set265 = default(IToken);
		XAstParserRuleReturnScope shift_expression264 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope shift_expression266 = default(XAstParserRuleReturnScope);

		object set265_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "relational_expression");
		DebugLocation(445, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// C.g:446:2: ( shift_expression ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* )
			DebugEnterAlt(1);
			// C.g:446:4: shift_expression ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(446, 4);
			PushFollow(Follow._shift_expression_in_relational_expression1799);
			shift_expression264=shift_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expression264.Tree, shift_expression264, retval);
			DebugLocation(446, 21);
			// C.g:446:21: ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, false);
				int LA66_0 = input.LA(1);

				if ((LA66_0==48||LA66_0==51||(LA66_0>=54 && LA66_0<=55)))
				{
					alt66 = 1;
				}


				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:446:22: ( '<' | '>' | '<=' | '>=' ) shift_expression
					{
					DebugLocation(446, 22);

					set265=(IToken)input.LT(1);
					if (input.LA(1)==48||input.LA(1)==51||(input.LA(1)>=54 && input.LA(1)<=55))
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set265, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(446, 42);
					PushFollow(Follow._shift_expression_in_relational_expression1812);
					shift_expression266=shift_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expression266.Tree, shift_expression266, retval);

					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relational_expression", 65);
			LeaveRule("relational_expression", 65);
			LeaveRule_relational_expression();
			if (state.backtracking > 0) { Memoize(input, 65, relational_expression_StartIndex); }

		}
		DebugLocation(447, 1);
		} finally { DebugExitRule(GrammarFileName, "relational_expression"); }
		return retval;

	}
	// $ANTLR end "relational_expression"

	partial void EnterRule_shift_expression();
	partial void LeaveRule_shift_expression();

	// $ANTLR start "shift_expression"
	// C.g:449:1: shift_expression : additive_expression ( ( '<<' | '>>' ) additive_expression )* ;
	[GrammarRule("shift_expression")]
	public XAstParserRuleReturnScope shift_expression()
	{
		EnterRule_shift_expression();
		EnterRule("shift_expression", 66);
		var retval = new XAstParserRuleReturnScope("shift_expression");
		
		retval.Start = (IToken)input.LT(1);
		int shift_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set268 = default(IToken);
		XAstParserRuleReturnScope additive_expression267 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope additive_expression269 = default(XAstParserRuleReturnScope);

		object set268_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "shift_expression");
		DebugLocation(449, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }

			// C.g:450:2: ( additive_expression ( ( '<<' | '>>' ) additive_expression )* )
			DebugEnterAlt(1);
			// C.g:450:4: additive_expression ( ( '<<' | '>>' ) additive_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(450, 4);
			PushFollow(Follow._additive_expression_in_shift_expression1825);
			additive_expression267=additive_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, additive_expression267.Tree, additive_expression267, retval);
			DebugLocation(450, 24);
			// C.g:450:24: ( ( '<<' | '>>' ) additive_expression )*
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if ((LA67_0==49||LA67_0==56))
				{
					alt67 = 1;
				}


				} finally { DebugExitDecision(67); }
				switch ( alt67 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:450:25: ( '<<' | '>>' ) additive_expression
					{
					DebugLocation(450, 25);

					set268=(IToken)input.LT(1);
					if (input.LA(1)==49||input.LA(1)==56)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set268, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(450, 37);
					PushFollow(Follow._additive_expression_in_shift_expression1834);
					additive_expression269=additive_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, additive_expression269.Tree, additive_expression269, retval);

					}
					break;

				default:
					goto loop67;
				}
			}

			loop67:
				;

			} finally { DebugExitSubRule(67); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expression", 66);
			LeaveRule("shift_expression", 66);
			LeaveRule_shift_expression();
			if (state.backtracking > 0) { Memoize(input, 66, shift_expression_StartIndex); }

		}
		DebugLocation(451, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expression"); }
		return retval;

	}
	// $ANTLR end "shift_expression"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// C.g:455:1: statement : ( labeled_statement | compound_statement | expression_statement | selection_statement | iteration_statement | jump_statement );
	[GrammarRule("statement")]
	public XAstParserRuleReturnScope statement()
	{
		EnterRule_statement();
		EnterRule("statement", 67);
		var retval = new XAstParserRuleReturnScope("statement");
		
		retval.Start = (IToken)input.LT(1);
		int statement_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope labeled_statement270 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope compound_statement271 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_statement272 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope selection_statement273 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope iteration_statement274 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope jump_statement275 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(455, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return retval; }

			// C.g:456:2: ( labeled_statement | compound_statement | expression_statement | selection_statement | iteration_statement | jump_statement )
			int alt68=6;
			try { DebugEnterDecision(68, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				int LA68_1 = input.LA(2);

				if ((LA68_1==46))
				{
					alt68 = 1;
				}
				else if (((LA68_1>=24 && LA68_1<=30)||(LA68_1>=32 && LA68_1<=42)||(LA68_1>=44 && LA68_1<=45)||(LA68_1>=47 && LA68_1<=59)||(LA68_1>=61 && LA68_1<=62)||(LA68_1>=101 && LA68_1<=103)))
				{
					alt68 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 68, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 70:
			case 74:
				{
				alt68 = 1;
				}
				break;
			case 100:
				{
				alt68 = 2;
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
			case 23:
			case 28:
			case 30:
			case 32:
			case 34:
			case 35:
			case 38:
			case 39:
			case 47:
			case 90:
			case 105:
				{
				alt68 = 3;
				}
				break;
			case 83:
			case 93:
				{
				alt68 = 4;
				}
				break;
			case 75:
			case 81:
			case 99:
				{
				alt68 = 5;
				}
				break;
			case 69:
			case 73:
			case 82:
			case 87:
				{
				alt68 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:456:4: labeled_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(456, 4);
				PushFollow(Follow._labeled_statement_in_statement1849);
				labeled_statement270=labeled_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, labeled_statement270.Tree, labeled_statement270, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:457:4: compound_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(457, 4);
				PushFollow(Follow._compound_statement_in_statement1854);
				compound_statement271=compound_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, compound_statement271.Tree, compound_statement271, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:458:4: expression_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(458, 4);
				PushFollow(Follow._expression_statement_in_statement1859);
				expression_statement272=expression_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_statement272.Tree, expression_statement272, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:459:4: selection_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(459, 4);
				PushFollow(Follow._selection_statement_in_statement1864);
				selection_statement273=selection_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selection_statement273.Tree, selection_statement273, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:460:4: iteration_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(460, 4);
				PushFollow(Follow._iteration_statement_in_statement1869);
				iteration_statement274=iteration_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, iteration_statement274.Tree, iteration_statement274, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:461:4: jump_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(461, 4);
				PushFollow(Follow._jump_statement_in_statement1874);
				jump_statement275=jump_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, jump_statement275.Tree, jump_statement275, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 67);
			LeaveRule("statement", 67);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 67, statement_StartIndex); }

		}
		DebugLocation(462, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_labeled_statement();
	partial void LeaveRule_labeled_statement();

	// $ANTLR start "labeled_statement"
	// C.g:464:1: labeled_statement : ( IDENTIFIER ':' statement | 'case' constant_expression ':' statement | 'default' ':' statement );
	[GrammarRule("labeled_statement")]
	public XAstParserRuleReturnScope labeled_statement()
	{
		EnterRule_labeled_statement();
		EnterRule("labeled_statement", 68);
		var retval = new XAstParserRuleReturnScope("labeled_statement");
		
		retval.Start = (IToken)input.LT(1);
		int labeled_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER276 = default(IToken);
		IToken char_literal277 = default(IToken);
		IToken string_literal279 = default(IToken);
		IToken char_literal281 = default(IToken);
		IToken string_literal283 = default(IToken);
		IToken char_literal284 = default(IToken);
		XAstParserRuleReturnScope statement278 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression280 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement282 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement285 = default(XAstParserRuleReturnScope);

		object IDENTIFIER276_tree = default(object);
		object char_literal277_tree = default(object);
		object string_literal279_tree = default(object);
		object char_literal281_tree = default(object);
		object string_literal283_tree = default(object);
		object char_literal284_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "labeled_statement");
		DebugLocation(464, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return retval; }

			// C.g:465:2: ( IDENTIFIER ':' statement | 'case' constant_expression ':' statement | 'default' ':' statement )
			int alt69=3;
			try { DebugEnterDecision(69, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				alt69 = 1;
				}
				break;
			case 70:
				{
				alt69 = 2;
				}
				break;
			case 74:
				{
				alt69 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 69, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:465:4: IDENTIFIER ':' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(465, 4);
				IDENTIFIER276=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_labeled_statement1885), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER276_tree = (object)adaptor.Create(IDENTIFIER276, retval);
				adaptor.AddChild(root_0, IDENTIFIER276_tree);
				}
				DebugLocation(465, 15);
				char_literal277=(IToken)Match(input,46,Follow._46_in_labeled_statement1887); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal277_tree = (object)adaptor.Create(char_literal277, retval);
				adaptor.AddChild(root_0, char_literal277_tree);
				}
				DebugLocation(465, 19);
				PushFollow(Follow._statement_in_labeled_statement1889);
				statement278=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement278.Tree, statement278, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:466:4: 'case' constant_expression ':' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(466, 4);
				string_literal279=(IToken)Match(input,70,Follow._70_in_labeled_statement1894); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal279_tree = (object)adaptor.Create(string_literal279, retval);
				adaptor.AddChild(root_0, string_literal279_tree);
				}
				DebugLocation(466, 11);
				PushFollow(Follow._constant_expression_in_labeled_statement1896);
				constant_expression280=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression280.Tree, constant_expression280, retval);
				DebugLocation(466, 31);
				char_literal281=(IToken)Match(input,46,Follow._46_in_labeled_statement1898); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal281_tree = (object)adaptor.Create(char_literal281, retval);
				adaptor.AddChild(root_0, char_literal281_tree);
				}
				DebugLocation(466, 35);
				PushFollow(Follow._statement_in_labeled_statement1900);
				statement282=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement282.Tree, statement282, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:467:4: 'default' ':' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(467, 4);
				string_literal283=(IToken)Match(input,74,Follow._74_in_labeled_statement1905); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal283_tree = (object)adaptor.Create(string_literal283, retval);
				adaptor.AddChild(root_0, string_literal283_tree);
				}
				DebugLocation(467, 14);
				char_literal284=(IToken)Match(input,46,Follow._46_in_labeled_statement1907); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal284_tree = (object)adaptor.Create(char_literal284, retval);
				adaptor.AddChild(root_0, char_literal284_tree);
				}
				DebugLocation(467, 18);
				PushFollow(Follow._statement_in_labeled_statement1909);
				statement285=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement285.Tree, statement285, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("labeled_statement", 68);
			LeaveRule("labeled_statement", 68);
			LeaveRule_labeled_statement();
			if (state.backtracking > 0) { Memoize(input, 68, labeled_statement_StartIndex); }

		}
		DebugLocation(468, 1);
		} finally { DebugExitRule(GrammarFileName, "labeled_statement"); }
		return retval;

	}
	// $ANTLR end "labeled_statement"

	partial void EnterRule_compound_statement();
	partial void LeaveRule_compound_statement();

	// $ANTLR start "compound_statement"
	// C.g:470:1: compound_statement : '{' ( declaration )* ( statement_list )? '}' ;
	[GrammarRule("compound_statement")]
	public XAstParserRuleReturnScope compound_statement()
	{
		EnterRule_compound_statement();
		EnterRule("compound_statement", 69);
		var retval = new XAstParserRuleReturnScope("compound_statement");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int compound_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal286 = default(IToken);
		IToken char_literal289 = default(IToken);
		XAstParserRuleReturnScope declaration287 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement_list288 = default(XAstParserRuleReturnScope);

		object char_literal286_tree = default(object);
		object char_literal289_tree = default(object);

		  Symbols_stack.Peek().types =  new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "compound_statement");
		DebugLocation(470, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return retval; }

			// C.g:475:2: ( '{' ( declaration )* ( statement_list )? '}' )
			DebugEnterAlt(1);
			// C.g:475:4: '{' ( declaration )* ( statement_list )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(475, 4);
			char_literal286=(IToken)Match(input,100,Follow._100_in_compound_statement1931); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal286_tree = (object)adaptor.Create(char_literal286, retval);
			adaptor.AddChild(root_0, char_literal286_tree);
			}
			DebugLocation(475, 8);
			// C.g:475:8: ( declaration )*
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=2;
				try { DebugEnterDecision(70, false);
				try
				{
					alt70 = dfa70.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(70); }
				switch ( alt70 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:475:8: declaration
					{
					DebugLocation(475, 8);
					PushFollow(Follow._declaration_in_compound_statement1933);
					declaration287=declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declaration287.Tree, declaration287, retval);

					}
					break;

				default:
					goto loop70;
				}
			}

			loop70:
				;

			} finally { DebugExitSubRule(70); }

			DebugLocation(475, 21);
			// C.g:475:21: ( statement_list )?
			int alt71=2;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			int LA71_0 = input.LA(1);

			if ((LA71_0==CHARACTER_LITERAL||LA71_0==DECIMAL_LITERAL||LA71_0==FLOATING_POINT_LITERAL||LA71_0==HEX_LITERAL||LA71_0==IDENTIFIER||LA71_0==OCTAL_LITERAL||LA71_0==STRING_LITERAL||LA71_0==23||LA71_0==28||LA71_0==30||LA71_0==32||(LA71_0>=34 && LA71_0<=35)||(LA71_0>=38 && LA71_0<=39)||LA71_0==47||(LA71_0>=69 && LA71_0<=70)||(LA71_0>=73 && LA71_0<=75)||(LA71_0>=81 && LA71_0<=83)||LA71_0==87||LA71_0==90||LA71_0==93||(LA71_0>=99 && LA71_0<=100)||LA71_0==105))
			{
				alt71 = 1;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:475:21: statement_list
				{
				DebugLocation(475, 21);
				PushFollow(Follow._statement_list_in_compound_statement1936);
				statement_list288=statement_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement_list288.Tree, statement_list288, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(71); }

			DebugLocation(475, 37);
			char_literal289=(IToken)Match(input,104,Follow._104_in_compound_statement1939); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal289_tree = (object)adaptor.Create(char_literal289, retval);
			adaptor.AddChild(root_0, char_literal289_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("compound_statement", 69);
			LeaveRule("compound_statement", 69);
			LeaveRule_compound_statement();
			if (state.backtracking > 0) { Memoize(input, 69, compound_statement_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(476, 1);
		} finally { DebugExitRule(GrammarFileName, "compound_statement"); }
		return retval;

	}
	// $ANTLR end "compound_statement"

	partial void EnterRule_statement_list();
	partial void LeaveRule_statement_list();

	// $ANTLR start "statement_list"
	// C.g:478:1: statement_list : ( statement )+ ;
	[GrammarRule("statement_list")]
	public XAstParserRuleReturnScope statement_list()
	{
		EnterRule_statement_list();
		EnterRule("statement_list", 70);
		var retval = new XAstParserRuleReturnScope("statement_list");
		
		retval.Start = (IToken)input.LT(1);
		int statement_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope statement290 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "statement_list");
		DebugLocation(478, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return retval; }

			// C.g:479:2: ( ( statement )+ )
			DebugEnterAlt(1);
			// C.g:479:4: ( statement )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(479, 4);
			// C.g:479:4: ( statement )+
			int cnt72=0;
			try { DebugEnterSubRule(72);
			while (true)
			{
				int alt72=2;
				try { DebugEnterDecision(72, false);
				int LA72_0 = input.LA(1);

				if ((LA72_0==CHARACTER_LITERAL||LA72_0==DECIMAL_LITERAL||LA72_0==FLOATING_POINT_LITERAL||LA72_0==HEX_LITERAL||LA72_0==IDENTIFIER||LA72_0==OCTAL_LITERAL||LA72_0==STRING_LITERAL||LA72_0==23||LA72_0==28||LA72_0==30||LA72_0==32||(LA72_0>=34 && LA72_0<=35)||(LA72_0>=38 && LA72_0<=39)||LA72_0==47||(LA72_0>=69 && LA72_0<=70)||(LA72_0>=73 && LA72_0<=75)||(LA72_0>=81 && LA72_0<=83)||LA72_0==87||LA72_0==90||LA72_0==93||(LA72_0>=99 && LA72_0<=100)||LA72_0==105))
				{
					alt72 = 1;
				}


				} finally { DebugExitDecision(72); }
				switch (alt72)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:479:4: statement
					{
					DebugLocation(479, 4);
					PushFollow(Follow._statement_in_statement_list1950);
					statement290=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement290.Tree, statement290, retval);

					}
					break;

				default:
					if (cnt72 >= 1)
						goto loop72;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee72 = new EarlyExitException( 72, input );
					DebugRecognitionException(eee72);
					throw eee72;
				}
				cnt72++;
			}
			loop72:
				;

			} finally { DebugExitSubRule(72); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement_list", 70);
			LeaveRule("statement_list", 70);
			LeaveRule_statement_list();
			if (state.backtracking > 0) { Memoize(input, 70, statement_list_StartIndex); }

		}
		DebugLocation(480, 1);
		} finally { DebugExitRule(GrammarFileName, "statement_list"); }
		return retval;

	}
	// $ANTLR end "statement_list"

	partial void EnterRule_expression_statement();
	partial void LeaveRule_expression_statement();

	// $ANTLR start "expression_statement"
	// C.g:482:1: expression_statement : ( ';' | expression ';' );
	[GrammarRule("expression_statement")]
	public XAstParserRuleReturnScope expression_statement()
	{
		EnterRule_expression_statement();
		EnterRule("expression_statement", 71);
		var retval = new XAstParserRuleReturnScope("expression_statement");
		
		retval.Start = (IToken)input.LT(1);
		int expression_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal291 = default(IToken);
		IToken char_literal293 = default(IToken);
		XAstParserRuleReturnScope expression292 = default(XAstParserRuleReturnScope);

		object char_literal291_tree = default(object);
		object char_literal293_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expression_statement");
		DebugLocation(482, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return retval; }

			// C.g:483:2: ( ';' | expression ';' )
			int alt73=2;
			try { DebugEnterDecision(73, false);
			int LA73_0 = input.LA(1);

			if ((LA73_0==47))
			{
				alt73 = 1;
			}
			else if ((LA73_0==CHARACTER_LITERAL||LA73_0==DECIMAL_LITERAL||LA73_0==FLOATING_POINT_LITERAL||LA73_0==HEX_LITERAL||LA73_0==IDENTIFIER||LA73_0==OCTAL_LITERAL||LA73_0==STRING_LITERAL||LA73_0==23||LA73_0==28||LA73_0==30||LA73_0==32||(LA73_0>=34 && LA73_0<=35)||(LA73_0>=38 && LA73_0<=39)||LA73_0==90||LA73_0==105))
			{
				alt73 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 73, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:483:4: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(483, 4);
				char_literal291=(IToken)Match(input,47,Follow._47_in_expression_statement1962); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal291_tree = (object)adaptor.Create(char_literal291, retval);
				adaptor.AddChild(root_0, char_literal291_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:484:4: expression ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(484, 4);
				PushFollow(Follow._expression_in_expression_statement1967);
				expression292=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression292.Tree, expression292, retval);
				DebugLocation(484, 15);
				char_literal293=(IToken)Match(input,47,Follow._47_in_expression_statement1969); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal293_tree = (object)adaptor.Create(char_literal293, retval);
				adaptor.AddChild(root_0, char_literal293_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_statement", 71);
			LeaveRule("expression_statement", 71);
			LeaveRule_expression_statement();
			if (state.backtracking > 0) { Memoize(input, 71, expression_statement_StartIndex); }

		}
		DebugLocation(485, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_statement"); }
		return retval;

	}
	// $ANTLR end "expression_statement"

	partial void EnterRule_selection_statement();
	partial void LeaveRule_selection_statement();

	// $ANTLR start "selection_statement"
	// C.g:487:1: selection_statement : ( 'if' '(' expression ')' statement ( options {k=1; backtrack=false; } : 'else' statement )? | 'switch' '(' expression ')' statement );
	[GrammarRule("selection_statement")]
	public XAstParserRuleReturnScope selection_statement()
	{
		EnterRule_selection_statement();
		EnterRule("selection_statement", 72);
		var retval = new XAstParserRuleReturnScope("selection_statement");
		
		retval.Start = (IToken)input.LT(1);
		int selection_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal294 = default(IToken);
		IToken char_literal295 = default(IToken);
		IToken char_literal297 = default(IToken);
		IToken string_literal299 = default(IToken);
		IToken string_literal301 = default(IToken);
		IToken char_literal302 = default(IToken);
		IToken char_literal304 = default(IToken);
		XAstParserRuleReturnScope expression296 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement298 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement300 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression303 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement305 = default(XAstParserRuleReturnScope);

		object string_literal294_tree = default(object);
		object char_literal295_tree = default(object);
		object char_literal297_tree = default(object);
		object string_literal299_tree = default(object);
		object string_literal301_tree = default(object);
		object char_literal302_tree = default(object);
		object char_literal304_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "selection_statement");
		DebugLocation(487, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return retval; }

			// C.g:488:2: ( 'if' '(' expression ')' statement ( options {k=1; backtrack=false; } : 'else' statement )? | 'switch' '(' expression ')' statement )
			int alt75=2;
			try { DebugEnterDecision(75, false);
			int LA75_0 = input.LA(1);

			if ((LA75_0==83))
			{
				alt75 = 1;
			}
			else if ((LA75_0==93))
			{
				alt75 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:488:4: 'if' '(' expression ')' statement ( options {k=1; backtrack=false; } : 'else' statement )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(488, 4);
				string_literal294=(IToken)Match(input,83,Follow._83_in_selection_statement1980); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal294_tree = (object)adaptor.Create(string_literal294, retval);
				adaptor.AddChild(root_0, string_literal294_tree);
				}
				DebugLocation(488, 9);
				char_literal295=(IToken)Match(input,30,Follow._30_in_selection_statement1982); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal295_tree = (object)adaptor.Create(char_literal295, retval);
				adaptor.AddChild(root_0, char_literal295_tree);
				}
				DebugLocation(488, 13);
				PushFollow(Follow._expression_in_selection_statement1984);
				expression296=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression296.Tree, expression296, retval);
				DebugLocation(488, 24);
				char_literal297=(IToken)Match(input,31,Follow._31_in_selection_statement1986); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal297_tree = (object)adaptor.Create(char_literal297, retval);
				adaptor.AddChild(root_0, char_literal297_tree);
				}
				DebugLocation(488, 28);
				PushFollow(Follow._statement_in_selection_statement1988);
				statement298=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement298.Tree, statement298, retval);
				DebugLocation(488, 38);
				// C.g:488:38: ( options {k=1; backtrack=false; } : 'else' statement )?
				int alt74=2;
				try { DebugEnterSubRule(74);
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==77))
				{
					int LA74_1 = input.LA(2);

					if ((true))
					{
						alt74 = 1;
					}
				}
				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:488:71: 'else' statement
					{
					DebugLocation(488, 71);
					string_literal299=(IToken)Match(input,77,Follow._77_in_selection_statement2003); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal299_tree = (object)adaptor.Create(string_literal299, retval);
					adaptor.AddChild(root_0, string_literal299_tree);
					}
					DebugLocation(488, 78);
					PushFollow(Follow._statement_in_selection_statement2005);
					statement300=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement300.Tree, statement300, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(74); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:489:4: 'switch' '(' expression ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(489, 4);
				string_literal301=(IToken)Match(input,93,Follow._93_in_selection_statement2012); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal301_tree = (object)adaptor.Create(string_literal301, retval);
				adaptor.AddChild(root_0, string_literal301_tree);
				}
				DebugLocation(489, 13);
				char_literal302=(IToken)Match(input,30,Follow._30_in_selection_statement2014); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal302_tree = (object)adaptor.Create(char_literal302, retval);
				adaptor.AddChild(root_0, char_literal302_tree);
				}
				DebugLocation(489, 17);
				PushFollow(Follow._expression_in_selection_statement2016);
				expression303=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression303.Tree, expression303, retval);
				DebugLocation(489, 28);
				char_literal304=(IToken)Match(input,31,Follow._31_in_selection_statement2018); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal304_tree = (object)adaptor.Create(char_literal304, retval);
				adaptor.AddChild(root_0, char_literal304_tree);
				}
				DebugLocation(489, 32);
				PushFollow(Follow._statement_in_selection_statement2020);
				statement305=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement305.Tree, statement305, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selection_statement", 72);
			LeaveRule("selection_statement", 72);
			LeaveRule_selection_statement();
			if (state.backtracking > 0) { Memoize(input, 72, selection_statement_StartIndex); }

		}
		DebugLocation(490, 1);
		} finally { DebugExitRule(GrammarFileName, "selection_statement"); }
		return retval;

	}
	// $ANTLR end "selection_statement"

	partial void EnterRule_iteration_statement();
	partial void LeaveRule_iteration_statement();

	// $ANTLR start "iteration_statement"
	// C.g:492:1: iteration_statement : ( 'while' '(' expression ')' statement | 'do' statement 'while' '(' expression ')' ';' | 'for' '(' expression_statement expression_statement ( expression )? ')' statement );
	[GrammarRule("iteration_statement")]
	public XAstParserRuleReturnScope iteration_statement()
	{
		EnterRule_iteration_statement();
		EnterRule("iteration_statement", 73);
		var retval = new XAstParserRuleReturnScope("iteration_statement");
		
		retval.Start = (IToken)input.LT(1);
		int iteration_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal306 = default(IToken);
		IToken char_literal307 = default(IToken);
		IToken char_literal309 = default(IToken);
		IToken string_literal311 = default(IToken);
		IToken string_literal313 = default(IToken);
		IToken char_literal314 = default(IToken);
		IToken char_literal316 = default(IToken);
		IToken char_literal317 = default(IToken);
		IToken string_literal318 = default(IToken);
		IToken char_literal319 = default(IToken);
		IToken char_literal323 = default(IToken);
		XAstParserRuleReturnScope expression308 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement310 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement312 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression315 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_statement320 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_statement321 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression322 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement324 = default(XAstParserRuleReturnScope);

		object string_literal306_tree = default(object);
		object char_literal307_tree = default(object);
		object char_literal309_tree = default(object);
		object string_literal311_tree = default(object);
		object string_literal313_tree = default(object);
		object char_literal314_tree = default(object);
		object char_literal316_tree = default(object);
		object char_literal317_tree = default(object);
		object string_literal318_tree = default(object);
		object char_literal319_tree = default(object);
		object char_literal323_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "iteration_statement");
		DebugLocation(492, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return retval; }

			// C.g:493:2: ( 'while' '(' expression ')' statement | 'do' statement 'while' '(' expression ')' ';' | 'for' '(' expression_statement expression_statement ( expression )? ')' statement )
			int alt77=3;
			try { DebugEnterDecision(77, false);
			switch (input.LA(1))
			{
			case 99:
				{
				alt77 = 1;
				}
				break;
			case 75:
				{
				alt77 = 2;
				}
				break;
			case 81:
				{
				alt77 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 77, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:493:4: 'while' '(' expression ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(493, 4);
				string_literal306=(IToken)Match(input,99,Follow._99_in_iteration_statement2031); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal306_tree = (object)adaptor.Create(string_literal306, retval);
				adaptor.AddChild(root_0, string_literal306_tree);
				}
				DebugLocation(493, 12);
				char_literal307=(IToken)Match(input,30,Follow._30_in_iteration_statement2033); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal307_tree = (object)adaptor.Create(char_literal307, retval);
				adaptor.AddChild(root_0, char_literal307_tree);
				}
				DebugLocation(493, 16);
				PushFollow(Follow._expression_in_iteration_statement2035);
				expression308=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression308.Tree, expression308, retval);
				DebugLocation(493, 27);
				char_literal309=(IToken)Match(input,31,Follow._31_in_iteration_statement2037); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal309_tree = (object)adaptor.Create(char_literal309, retval);
				adaptor.AddChild(root_0, char_literal309_tree);
				}
				DebugLocation(493, 31);
				PushFollow(Follow._statement_in_iteration_statement2039);
				statement310=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement310.Tree, statement310, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:494:4: 'do' statement 'while' '(' expression ')' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(494, 4);
				string_literal311=(IToken)Match(input,75,Follow._75_in_iteration_statement2044); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal311_tree = (object)adaptor.Create(string_literal311, retval);
				adaptor.AddChild(root_0, string_literal311_tree);
				}
				DebugLocation(494, 9);
				PushFollow(Follow._statement_in_iteration_statement2046);
				statement312=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement312.Tree, statement312, retval);
				DebugLocation(494, 19);
				string_literal313=(IToken)Match(input,99,Follow._99_in_iteration_statement2048); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal313_tree = (object)adaptor.Create(string_literal313, retval);
				adaptor.AddChild(root_0, string_literal313_tree);
				}
				DebugLocation(494, 27);
				char_literal314=(IToken)Match(input,30,Follow._30_in_iteration_statement2050); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal314_tree = (object)adaptor.Create(char_literal314, retval);
				adaptor.AddChild(root_0, char_literal314_tree);
				}
				DebugLocation(494, 31);
				PushFollow(Follow._expression_in_iteration_statement2052);
				expression315=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression315.Tree, expression315, retval);
				DebugLocation(494, 42);
				char_literal316=(IToken)Match(input,31,Follow._31_in_iteration_statement2054); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal316_tree = (object)adaptor.Create(char_literal316, retval);
				adaptor.AddChild(root_0, char_literal316_tree);
				}
				DebugLocation(494, 46);
				char_literal317=(IToken)Match(input,47,Follow._47_in_iteration_statement2056); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal317_tree = (object)adaptor.Create(char_literal317, retval);
				adaptor.AddChild(root_0, char_literal317_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:495:4: 'for' '(' expression_statement expression_statement ( expression )? ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(495, 4);
				string_literal318=(IToken)Match(input,81,Follow._81_in_iteration_statement2061); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal318_tree = (object)adaptor.Create(string_literal318, retval);
				adaptor.AddChild(root_0, string_literal318_tree);
				}
				DebugLocation(495, 10);
				char_literal319=(IToken)Match(input,30,Follow._30_in_iteration_statement2063); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal319_tree = (object)adaptor.Create(char_literal319, retval);
				adaptor.AddChild(root_0, char_literal319_tree);
				}
				DebugLocation(495, 14);
				PushFollow(Follow._expression_statement_in_iteration_statement2065);
				expression_statement320=expression_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_statement320.Tree, expression_statement320, retval);
				DebugLocation(495, 35);
				PushFollow(Follow._expression_statement_in_iteration_statement2067);
				expression_statement321=expression_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_statement321.Tree, expression_statement321, retval);
				DebugLocation(495, 56);
				// C.g:495:56: ( expression )?
				int alt76=2;
				try { DebugEnterSubRule(76);
				try { DebugEnterDecision(76, false);
				int LA76_0 = input.LA(1);

				if ((LA76_0==CHARACTER_LITERAL||LA76_0==DECIMAL_LITERAL||LA76_0==FLOATING_POINT_LITERAL||LA76_0==HEX_LITERAL||LA76_0==IDENTIFIER||LA76_0==OCTAL_LITERAL||LA76_0==STRING_LITERAL||LA76_0==23||LA76_0==28||LA76_0==30||LA76_0==32||(LA76_0>=34 && LA76_0<=35)||(LA76_0>=38 && LA76_0<=39)||LA76_0==90||LA76_0==105))
				{
					alt76 = 1;
				}
				} finally { DebugExitDecision(76); }
				switch (alt76)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:495:56: expression
					{
					DebugLocation(495, 56);
					PushFollow(Follow._expression_in_iteration_statement2069);
					expression322=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression322.Tree, expression322, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(76); }

				DebugLocation(495, 68);
				char_literal323=(IToken)Match(input,31,Follow._31_in_iteration_statement2072); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal323_tree = (object)adaptor.Create(char_literal323, retval);
				adaptor.AddChild(root_0, char_literal323_tree);
				}
				DebugLocation(495, 72);
				PushFollow(Follow._statement_in_iteration_statement2074);
				statement324=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement324.Tree, statement324, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("iteration_statement", 73);
			LeaveRule("iteration_statement", 73);
			LeaveRule_iteration_statement();
			if (state.backtracking > 0) { Memoize(input, 73, iteration_statement_StartIndex); }

		}
		DebugLocation(496, 1);
		} finally { DebugExitRule(GrammarFileName, "iteration_statement"); }
		return retval;

	}
	// $ANTLR end "iteration_statement"

	partial void EnterRule_jump_statement();
	partial void LeaveRule_jump_statement();

	// $ANTLR start "jump_statement"
	// C.g:498:1: jump_statement : ( 'goto' IDENTIFIER ';' | 'continue' ';' | 'break' ';' | 'return' ';' | 'return' expression ';' );
	[GrammarRule("jump_statement")]
	public XAstParserRuleReturnScope jump_statement()
	{
		EnterRule_jump_statement();
		EnterRule("jump_statement", 74);
		var retval = new XAstParserRuleReturnScope("jump_statement");
		
		retval.Start = (IToken)input.LT(1);
		int jump_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal325 = default(IToken);
		IToken IDENTIFIER326 = default(IToken);
		IToken char_literal327 = default(IToken);
		IToken string_literal328 = default(IToken);
		IToken char_literal329 = default(IToken);
		IToken string_literal330 = default(IToken);
		IToken char_literal331 = default(IToken);
		IToken string_literal332 = default(IToken);
		IToken char_literal333 = default(IToken);
		IToken string_literal334 = default(IToken);
		IToken char_literal336 = default(IToken);
		XAstParserRuleReturnScope expression335 = default(XAstParserRuleReturnScope);

		object string_literal325_tree = default(object);
		object IDENTIFIER326_tree = default(object);
		object char_literal327_tree = default(object);
		object string_literal328_tree = default(object);
		object char_literal329_tree = default(object);
		object string_literal330_tree = default(object);
		object char_literal331_tree = default(object);
		object string_literal332_tree = default(object);
		object char_literal333_tree = default(object);
		object string_literal334_tree = default(object);
		object char_literal336_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "jump_statement");
		DebugLocation(498, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return retval; }

			// C.g:499:2: ( 'goto' IDENTIFIER ';' | 'continue' ';' | 'break' ';' | 'return' ';' | 'return' expression ';' )
			int alt78=5;
			try { DebugEnterDecision(78, false);
			switch (input.LA(1))
			{
			case 82:
				{
				alt78 = 1;
				}
				break;
			case 73:
				{
				alt78 = 2;
				}
				break;
			case 69:
				{
				alt78 = 3;
				}
				break;
			case 87:
				{
				int LA78_4 = input.LA(2);

				if ((LA78_4==47))
				{
					alt78 = 4;
				}
				else if ((LA78_4==CHARACTER_LITERAL||LA78_4==DECIMAL_LITERAL||LA78_4==FLOATING_POINT_LITERAL||LA78_4==HEX_LITERAL||LA78_4==IDENTIFIER||LA78_4==OCTAL_LITERAL||LA78_4==STRING_LITERAL||LA78_4==23||LA78_4==28||LA78_4==30||LA78_4==32||(LA78_4>=34 && LA78_4<=35)||(LA78_4>=38 && LA78_4<=39)||LA78_4==90||LA78_4==105))
				{
					alt78 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 78, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 78, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:499:4: 'goto' IDENTIFIER ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(499, 4);
				string_literal325=(IToken)Match(input,82,Follow._82_in_jump_statement2085); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal325_tree = (object)adaptor.Create(string_literal325, retval);
				adaptor.AddChild(root_0, string_literal325_tree);
				}
				DebugLocation(499, 11);
				IDENTIFIER326=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_jump_statement2087), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER326_tree = (object)adaptor.Create(IDENTIFIER326, retval);
				adaptor.AddChild(root_0, IDENTIFIER326_tree);
				}
				DebugLocation(499, 22);
				char_literal327=(IToken)Match(input,47,Follow._47_in_jump_statement2089); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal327_tree = (object)adaptor.Create(char_literal327, retval);
				adaptor.AddChild(root_0, char_literal327_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:500:4: 'continue' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(500, 4);
				string_literal328=(IToken)Match(input,73,Follow._73_in_jump_statement2094); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal328_tree = (object)adaptor.Create(string_literal328, retval);
				adaptor.AddChild(root_0, string_literal328_tree);
				}
				DebugLocation(500, 15);
				char_literal329=(IToken)Match(input,47,Follow._47_in_jump_statement2096); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal329_tree = (object)adaptor.Create(char_literal329, retval);
				adaptor.AddChild(root_0, char_literal329_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:501:4: 'break' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(501, 4);
				string_literal330=(IToken)Match(input,69,Follow._69_in_jump_statement2101); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal330_tree = (object)adaptor.Create(string_literal330, retval);
				adaptor.AddChild(root_0, string_literal330_tree);
				}
				DebugLocation(501, 12);
				char_literal331=(IToken)Match(input,47,Follow._47_in_jump_statement2103); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal331_tree = (object)adaptor.Create(char_literal331, retval);
				adaptor.AddChild(root_0, char_literal331_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:502:4: 'return' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(502, 4);
				string_literal332=(IToken)Match(input,87,Follow._87_in_jump_statement2108); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal332_tree = (object)adaptor.Create(string_literal332, retval);
				adaptor.AddChild(root_0, string_literal332_tree);
				}
				DebugLocation(502, 13);
				char_literal333=(IToken)Match(input,47,Follow._47_in_jump_statement2110); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal333_tree = (object)adaptor.Create(char_literal333, retval);
				adaptor.AddChild(root_0, char_literal333_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:503:4: 'return' expression ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(503, 4);
				string_literal334=(IToken)Match(input,87,Follow._87_in_jump_statement2115); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal334_tree = (object)adaptor.Create(string_literal334, retval);
				adaptor.AddChild(root_0, string_literal334_tree);
				}
				DebugLocation(503, 13);
				PushFollow(Follow._expression_in_jump_statement2117);
				expression335=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression335.Tree, expression335, retval);
				DebugLocation(503, 24);
				char_literal336=(IToken)Match(input,47,Follow._47_in_jump_statement2119); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal336_tree = (object)adaptor.Create(char_literal336, retval);
				adaptor.AddChild(root_0, char_literal336_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("jump_statement", 74);
			LeaveRule("jump_statement", 74);
			LeaveRule_jump_statement();
			if (state.backtracking > 0) { Memoize(input, 74, jump_statement_StartIndex); }

		}
		DebugLocation(504, 1);
		} finally { DebugExitRule(GrammarFileName, "jump_statement"); }
		return retval;

	}
	// $ANTLR end "jump_statement"

	partial void EnterRule_synpred2_C_fragment();
	partial void LeaveRule_synpred2_C_fragment();

	// $ANTLR start synpred2_C
	public void synpred2_C_fragment()
	{
		EnterRule_synpred2_C_fragment();
		EnterRule("synpred2_C_fragment", 76);
		var retval = new XAstParserRuleReturnScope("synpred2_C_fragment");
		try
		{
			// C.g:82:6: ( declaration_specifiers )
			DebugEnterAlt(1);
			// C.g:82:6: declaration_specifiers
			{
			DebugLocation(82, 6);
			PushFollow(Follow._declaration_specifiers_in_synpred2_C94);
			declaration_specifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_C_fragment", 76);
			LeaveRule("synpred2_C_fragment", 76);
			LeaveRule_synpred2_C_fragment();
		}
	}
	// $ANTLR end synpred2_C

	partial void EnterRule_synpred4_C_fragment();
	partial void LeaveRule_synpred4_C_fragment();

	// $ANTLR start synpred4_C
	public void synpred4_C_fragment()
	{
		EnterRule_synpred4_C_fragment();
		EnterRule("synpred4_C_fragment", 78);
		var retval = new XAstParserRuleReturnScope("synpred4_C_fragment");
		try
		{
			// C.g:82:4: ( ( declaration_specifiers )? declarator ( declaration )* '{' )
			DebugEnterAlt(1);
			// C.g:82:6: ( declaration_specifiers )? declarator ( declaration )* '{'
			{
			DebugLocation(82, 6);
			// C.g:82:6: ( declaration_specifiers )?
			int alt79=2;
			try { DebugEnterSubRule(79);
			try { DebugEnterDecision(79, false);
			int LA79_0 = input.LA(1);

			if (((LA79_0>=63 && LA79_0<=68)||(LA79_0>=71 && LA79_0<=72)||LA79_0==76||(LA79_0>=78 && LA79_0<=80)||(LA79_0>=84 && LA79_0<=86)||(LA79_0>=88 && LA79_0<=89)||(LA79_0>=91 && LA79_0<=92)||(LA79_0>=95 && LA79_0<=98)))
			{
				alt79 = 1;
			}
			else if ((LA79_0==IDENTIFIER))
			{
				switch (input.LA(2))
				{
				case 32:
					{
					alt79 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA79_22 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt79 = 1;
					}
					}
					break;
				case 30:
					{
					int LA79_23 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt79 = 1;
					}
					}
					break;
				case 68:
				case 79:
				case 86:
				case 91:
					{
					int LA79_24 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt79 = 1;
					}
					}
					break;
				case 97:
					{
					int LA79_25 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt79 = 1;
					}
					}
					break;
				case 71:
					{
					int LA79_26 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt79 = 1;
					}
					}
					break;
				case 88:
					{
					int LA79_27 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt79 = 1;
					}
					}
					break;
				case 84:
					{
					int LA79_28 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt79 = 1;
					}
					}
					break;
				case 85:
					{
					int LA79_29 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt79 = 1;
					}
					}
					break;
				case 80:
					{
					int LA79_30 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt79 = 1;
					}
					}
					break;
				case 76:
					{
					int LA79_31 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt79 = 1;
					}
					}
					break;
				case 89:
					{
					int LA79_32 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt79 = 1;
					}
					}
					break;
				case 96:
					{
					int LA79_33 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt79 = 1;
					}
					}
					break;
				case 92:
				case 95:
					{
					int LA79_34 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt79 = 1;
					}
					}
					break;
				case 78:
					{
					int LA79_35 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt79 = 1;
					}
					}
					break;
				case 65:
					{
					int LA79_36 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt79 = 1;
					}
					}
					break;
				case 64:
					{
					int LA79_37 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt79 = 1;
					}
					}
					break;
				case 66:
					{
					int LA79_38 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt79 = 1;
					}
					}
					break;
				case 63:
					{
					int LA79_39 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt79 = 1;
					}
					}
					break;
				case 67:
					{
					int LA79_40 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt79 = 1;
					}
					}
					break;
				case 72:
				case 98:
					{
					int LA79_42 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt79 = 1;
					}
					}
					break;
				}

			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:82:6: declaration_specifiers
				{
				DebugLocation(82, 6);
				PushFollow(Follow._declaration_specifiers_in_synpred4_C94);
				declaration_specifiers();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(79); }

			DebugLocation(82, 30);
			PushFollow(Follow._declarator_in_synpred4_C97);
			declarator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(82, 41);
			// C.g:82:41: ( declaration )*
			try { DebugEnterSubRule(80);
			while (true)
			{
				int alt80=2;
				try { DebugEnterDecision(80, false);
				int LA80_0 = input.LA(1);

				if ((LA80_0==IDENTIFIER||(LA80_0>=63 && LA80_0<=68)||(LA80_0>=71 && LA80_0<=72)||LA80_0==76||(LA80_0>=78 && LA80_0<=80)||(LA80_0>=84 && LA80_0<=86)||(LA80_0>=88 && LA80_0<=89)||(LA80_0>=91 && LA80_0<=92)||(LA80_0>=94 && LA80_0<=98)))
				{
					alt80 = 1;
				}


				} finally { DebugExitDecision(80); }
				switch ( alt80 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:82:41: declaration
					{
					DebugLocation(82, 41);
					PushFollow(Follow._declaration_in_synpred4_C99);
					declaration();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop80;
				}
			}

			loop80:
				;

			} finally { DebugExitSubRule(80); }

			DebugLocation(82, 54);
			Match(input,100,Follow._100_in_synpred4_C102); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred4_C_fragment", 78);
			LeaveRule("synpred4_C_fragment", 78);
			LeaveRule_synpred4_C_fragment();
		}
	}
	// $ANTLR end synpred4_C

	partial void EnterRule_synpred5_C_fragment();
	partial void LeaveRule_synpred5_C_fragment();

	// $ANTLR start synpred5_C
	public void synpred5_C_fragment()
	{
		EnterRule_synpred5_C_fragment();
		EnterRule("synpred5_C_fragment", 79);
		var retval = new XAstParserRuleReturnScope("synpred5_C_fragment");
		try
		{
			// C.g:91:4: ( declaration_specifiers )
			DebugEnterAlt(1);
			// C.g:91:4: declaration_specifiers
			{
			DebugLocation(91, 4);
			PushFollow(Follow._declaration_specifiers_in_synpred5_C134);
			declaration_specifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred5_C_fragment", 79);
			LeaveRule("synpred5_C_fragment", 79);
			LeaveRule_synpred5_C_fragment();
		}
	}
	// $ANTLR end synpred5_C

	partial void EnterRule_synpred9_C_fragment();
	partial void LeaveRule_synpred9_C_fragment();

	// $ANTLR start synpred9_C
	public void synpred9_C_fragment()
	{
		EnterRule_synpred9_C_fragment();
		EnterRule("synpred9_C_fragment", 83);
		var retval = new XAstParserRuleReturnScope("synpred9_C_fragment");
		try
		{
			// C.g:104:31: ( declaration_specifiers )
			DebugEnterAlt(1);
			// C.g:104:31: declaration_specifiers
			{
			DebugLocation(104, 31);
			PushFollow(Follow._declaration_specifiers_in_synpred9_C186);
			declaration_specifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred9_C_fragment", 83);
			LeaveRule("synpred9_C_fragment", 83);
			LeaveRule_synpred9_C_fragment();
		}
	}
	// $ANTLR end synpred9_C

	partial void EnterRule_synpred13_C_fragment();
	partial void LeaveRule_synpred13_C_fragment();

	// $ANTLR start synpred13_C
	public void synpred13_C_fragment()
	{
		EnterRule_synpred13_C_fragment();
		EnterRule("synpred13_C_fragment", 87);
		var retval = new XAstParserRuleReturnScope("synpred13_C_fragment");
		try
		{
			// C.g:111:7: ( type_specifier )
			DebugEnterAlt(1);
			// C.g:111:7: type_specifier
			{
			DebugLocation(111, 7);
			PushFollow(Follow._type_specifier_in_synpred13_C234);
			type_specifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred13_C_fragment", 87);
			LeaveRule("synpred13_C_fragment", 87);
			LeaveRule_synpred13_C_fragment();
		}
	}
	// $ANTLR end synpred13_C

	partial void EnterRule_synpred43_C_fragment();
	partial void LeaveRule_synpred43_C_fragment();

	// $ANTLR start synpred43_C
	public void synpred43_C_fragment()
	{
		EnterRule_synpred43_C_fragment();
		EnterRule("synpred43_C_fragment", 117);
		var retval = new XAstParserRuleReturnScope("synpred43_C_fragment");
		try
		{
			// C.g:187:23: ( type_specifier )
			DebugEnterAlt(1);
			// C.g:187:23: type_specifier
			{
			DebugLocation(187, 23);
			PushFollow(Follow._type_specifier_in_synpred43_C612);
			type_specifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred43_C_fragment", 117);
			LeaveRule("synpred43_C_fragment", 117);
			LeaveRule_synpred43_C_fragment();
		}
	}
	// $ANTLR end synpred43_C

	partial void EnterRule_synpred54_C_fragment();
	partial void LeaveRule_synpred54_C_fragment();

	// $ANTLR start synpred54_C
	public void synpred54_C_fragment()
	{
		EnterRule_synpred54_C_fragment();
		EnterRule("synpred54_C_fragment", 128);
		var retval = new XAstParserRuleReturnScope("synpred54_C_fragment");
		try
		{
			// C.g:221:4: ( ( pointer )? direct_declarator )
			DebugEnterAlt(1);
			// C.g:221:4: ( pointer )? direct_declarator
			{
			DebugLocation(221, 4);
			// C.g:221:4: ( pointer )?
			int alt88=2;
			try { DebugEnterSubRule(88);
			try { DebugEnterDecision(88, false);
			int LA88_0 = input.LA(1);

			if ((LA88_0==32))
			{
				alt88 = 1;
			}
			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:221:4: pointer
				{
				DebugLocation(221, 4);
				PushFollow(Follow._pointer_in_synpred54_C772);
				pointer();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(88); }

			DebugLocation(221, 13);
			PushFollow(Follow._direct_declarator_in_synpred54_C775);
			direct_declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred54_C_fragment", 128);
			LeaveRule("synpred54_C_fragment", 128);
			LeaveRule_synpred54_C_fragment();
		}
	}
	// $ANTLR end synpred54_C

	partial void EnterRule_synpred56_C_fragment();
	partial void LeaveRule_synpred56_C_fragment();

	// $ANTLR start synpred56_C
	public void synpred56_C_fragment()
	{
		EnterRule_synpred56_C_fragment();
		EnterRule("synpred56_C_fragment", 130);
		var retval = new XAstParserRuleReturnScope("synpred56_C_fragment");
		try
		{
			// C.g:235:3: ( declarator_suffix )
			DebugEnterAlt(1);
			// C.g:235:3: declarator_suffix
			{
			DebugLocation(235, 3);
			PushFollow(Follow._declarator_suffix_in_synpred56_C818);
			declarator_suffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred56_C_fragment", 130);
			LeaveRule("synpred56_C_fragment", 130);
			LeaveRule_synpred56_C_fragment();
		}
	}
	// $ANTLR end synpred56_C

	partial void EnterRule_synpred59_C_fragment();
	partial void LeaveRule_synpred59_C_fragment();

	// $ANTLR start synpred59_C
	public void synpred59_C_fragment()
	{
		EnterRule_synpred59_C_fragment();
		EnterRule("synpred59_C_fragment", 133);
		var retval = new XAstParserRuleReturnScope("synpred59_C_fragment");
		try
		{
			// C.g:241:6: ( '(' parameter_type_list ')' )
			DebugEnterAlt(1);
			// C.g:241:6: '(' parameter_type_list ')'
			{
			DebugLocation(241, 6);
			Match(input,30,Follow._30_in_synpred59_C852); if (state.failed) return;
			DebugLocation(241, 10);
			PushFollow(Follow._parameter_type_list_in_synpred59_C854);
			parameter_type_list();
			PopFollow();
			if (state.failed) return;
			DebugLocation(241, 30);
			Match(input,31,Follow._31_in_synpred59_C856); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred59_C_fragment", 133);
			LeaveRule("synpred59_C_fragment", 133);
			LeaveRule_synpred59_C_fragment();
		}
	}
	// $ANTLR end synpred59_C

	partial void EnterRule_synpred60_C_fragment();
	partial void LeaveRule_synpred60_C_fragment();

	// $ANTLR start synpred60_C
	public void synpred60_C_fragment()
	{
		EnterRule_synpred60_C_fragment();
		EnterRule("synpred60_C_fragment", 134);
		var retval = new XAstParserRuleReturnScope("synpred60_C_fragment");
		try
		{
			// C.g:242:6: ( '(' identifier_list ')' )
			DebugEnterAlt(1);
			// C.g:242:6: '(' identifier_list ')'
			{
			DebugLocation(242, 6);
			Match(input,30,Follow._30_in_synpred60_C863); if (state.failed) return;
			DebugLocation(242, 10);
			PushFollow(Follow._identifier_list_in_synpred60_C865);
			identifier_list();
			PopFollow();
			if (state.failed) return;
			DebugLocation(242, 26);
			Match(input,31,Follow._31_in_synpred60_C867); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred60_C_fragment", 134);
			LeaveRule("synpred60_C_fragment", 134);
			LeaveRule_synpred60_C_fragment();
		}
	}
	// $ANTLR end synpred60_C

	partial void EnterRule_synpred61_C_fragment();
	partial void LeaveRule_synpred61_C_fragment();

	// $ANTLR start synpred61_C
	public void synpred61_C_fragment()
	{
		EnterRule_synpred61_C_fragment();
		EnterRule("synpred61_C_fragment", 135);
		var retval = new XAstParserRuleReturnScope("synpred61_C_fragment");
		try
		{
			// C.g:247:8: ( type_qualifier )
			DebugEnterAlt(1);
			// C.g:247:8: type_qualifier
			{
			DebugLocation(247, 8);
			PushFollow(Follow._type_qualifier_in_synpred61_C889);
			type_qualifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred61_C_fragment", 135);
			LeaveRule("synpred61_C_fragment", 135);
			LeaveRule_synpred61_C_fragment();
		}
	}
	// $ANTLR end synpred61_C

	partial void EnterRule_synpred62_C_fragment();
	partial void LeaveRule_synpred62_C_fragment();

	// $ANTLR start synpred62_C
	public void synpred62_C_fragment()
	{
		EnterRule_synpred62_C_fragment();
		EnterRule("synpred62_C_fragment", 136);
		var retval = new XAstParserRuleReturnScope("synpred62_C_fragment");
		try
		{
			// C.g:247:24: ( pointer )
			DebugEnterAlt(1);
			// C.g:247:24: pointer
			{
			DebugLocation(247, 24);
			PushFollow(Follow._pointer_in_synpred62_C892);
			pointer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred62_C_fragment", 136);
			LeaveRule("synpred62_C_fragment", 136);
			LeaveRule_synpred62_C_fragment();
		}
	}
	// $ANTLR end synpred62_C

	partial void EnterRule_synpred63_C_fragment();
	partial void LeaveRule_synpred63_C_fragment();

	// $ANTLR start synpred63_C
	public void synpred63_C_fragment()
	{
		EnterRule_synpred63_C_fragment();
		EnterRule("synpred63_C_fragment", 137);
		var retval = new XAstParserRuleReturnScope("synpred63_C_fragment");
		try
		{
			// C.g:247:4: ( '*' ( type_qualifier )+ ( pointer )? )
			DebugEnterAlt(1);
			// C.g:247:4: '*' ( type_qualifier )+ ( pointer )?
			{
			DebugLocation(247, 4);
			Match(input,32,Follow._32_in_synpred63_C887); if (state.failed) return;
			DebugLocation(247, 8);
			// C.g:247:8: ( type_qualifier )+
			int cnt89=0;
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==65||LA89_0==72||LA89_0==98))
				{
					alt89 = 1;
				}


				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:247:8: type_qualifier
					{
					DebugLocation(247, 8);
					PushFollow(Follow._type_qualifier_in_synpred63_C889);
					type_qualifier();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt89 >= 1)
						goto loop89;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee89 = new EarlyExitException( 89, input );
					DebugRecognitionException(eee89);
					throw eee89;
				}
				cnt89++;
			}
			loop89:
				;

			} finally { DebugExitSubRule(89); }

			DebugLocation(247, 24);
			// C.g:247:24: ( pointer )?
			int alt90=2;
			try { DebugEnterSubRule(90);
			try { DebugEnterDecision(90, false);
			int LA90_0 = input.LA(1);

			if ((LA90_0==32))
			{
				alt90 = 1;
			}
			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:247:24: pointer
				{
				DebugLocation(247, 24);
				PushFollow(Follow._pointer_in_synpred63_C892);
				pointer();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(90); }


			}

		}
		finally
		{
			TraceOut("synpred63_C_fragment", 137);
			LeaveRule("synpred63_C_fragment", 137);
			LeaveRule_synpred63_C_fragment();
		}
	}
	// $ANTLR end synpred63_C

	partial void EnterRule_synpred64_C_fragment();
	partial void LeaveRule_synpred64_C_fragment();

	// $ANTLR start synpred64_C
	public void synpred64_C_fragment()
	{
		EnterRule_synpred64_C_fragment();
		EnterRule("synpred64_C_fragment", 138);
		var retval = new XAstParserRuleReturnScope("synpred64_C_fragment");
		try
		{
			// C.g:248:4: ( '*' pointer )
			DebugEnterAlt(1);
			// C.g:248:4: '*' pointer
			{
			DebugLocation(248, 4);
			Match(input,32,Follow._32_in_synpred64_C898); if (state.failed) return;
			DebugLocation(248, 8);
			PushFollow(Follow._pointer_in_synpred64_C900);
			pointer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred64_C_fragment", 138);
			LeaveRule("synpred64_C_fragment", 138);
			LeaveRule_synpred64_C_fragment();
		}
	}
	// $ANTLR end synpred64_C

	partial void EnterRule_synpred67_C_fragment();
	partial void LeaveRule_synpred67_C_fragment();

	// $ANTLR start synpred67_C
	public void synpred67_C_fragment()
	{
		EnterRule_synpred67_C_fragment();
		EnterRule("synpred67_C_fragment", 141);
		var retval = new XAstParserRuleReturnScope("synpred67_C_fragment");
		try
		{
			// C.g:261:28: ( declarator )
			DebugEnterAlt(1);
			// C.g:261:28: declarator
			{
			DebugLocation(261, 28);
			PushFollow(Follow._declarator_in_synpred67_C955);
			declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred67_C_fragment", 141);
			LeaveRule("synpred67_C_fragment", 141);
			LeaveRule_synpred67_C_fragment();
		}
	}
	// $ANTLR end synpred67_C

	partial void EnterRule_synpred68_C_fragment();
	partial void LeaveRule_synpred68_C_fragment();

	// $ANTLR start synpred68_C
	public void synpred68_C_fragment()
	{
		EnterRule_synpred68_C_fragment();
		EnterRule("synpred68_C_fragment", 142);
		var retval = new XAstParserRuleReturnScope("synpred68_C_fragment");
		try
		{
			// C.g:261:39: ( abstract_declarator )
			DebugEnterAlt(1);
			// C.g:261:39: abstract_declarator
			{
			DebugLocation(261, 39);
			PushFollow(Follow._abstract_declarator_in_synpred68_C957);
			abstract_declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred68_C_fragment", 142);
			LeaveRule("synpred68_C_fragment", 142);
			LeaveRule_synpred68_C_fragment();
		}
	}
	// $ANTLR end synpred68_C

	partial void EnterRule_synpred71_C_fragment();
	partial void LeaveRule_synpred71_C_fragment();

	// $ANTLR start synpred71_C
	public void synpred71_C_fragment()
	{
		EnterRule_synpred71_C_fragment();
		EnterRule("synpred71_C_fragment", 145);
		var retval = new XAstParserRuleReturnScope("synpred71_C_fragment");
		try
		{
			// C.g:273:12: ( direct_abstract_declarator )
			DebugEnterAlt(1);
			// C.g:273:12: direct_abstract_declarator
			{
			DebugLocation(273, 12);
			PushFollow(Follow._direct_abstract_declarator_in_synpred71_C1004);
			direct_abstract_declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred71_C_fragment", 145);
			LeaveRule("synpred71_C_fragment", 145);
			LeaveRule_synpred71_C_fragment();
		}
	}
	// $ANTLR end synpred71_C

	partial void EnterRule_synpred74_C_fragment();
	partial void LeaveRule_synpred74_C_fragment();

	// $ANTLR start synpred74_C
	public void synpred74_C_fragment()
	{
		EnterRule_synpred74_C_fragment();
		EnterRule("synpred74_C_fragment", 148);
		var retval = new XAstParserRuleReturnScope("synpred74_C_fragment");
		try
		{
			// C.g:278:65: ( abstract_declarator_suffix )
			DebugEnterAlt(1);
			// C.g:278:65: abstract_declarator_suffix
			{
			DebugLocation(278, 65);
			PushFollow(Follow._abstract_declarator_suffix_in_synpred74_C1035);
			abstract_declarator_suffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred74_C_fragment", 148);
			LeaveRule("synpred74_C_fragment", 148);
			LeaveRule_synpred74_C_fragment();
		}
	}
	// $ANTLR end synpred74_C

	partial void EnterRule_synpred87_C_fragment();
	partial void LeaveRule_synpred87_C_fragment();

	// $ANTLR start synpred87_C
	public void synpred87_C_fragment()
	{
		EnterRule_synpred87_C_fragment();
		EnterRule("synpred87_C_fragment", 161);
		var retval = new XAstParserRuleReturnScope("synpred87_C_fragment");
		try
		{
			// C.g:312:4: ( '(' type_name ')' cast_expression )
			DebugEnterAlt(1);
			// C.g:312:4: '(' type_name ')' cast_expression
			{
			DebugLocation(312, 4);
			Match(input,30,Follow._30_in_synpred87_C1207); if (state.failed) return;
			DebugLocation(312, 8);
			PushFollow(Follow._type_name_in_synpred87_C1209);
			type_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(312, 18);
			Match(input,31,Follow._31_in_synpred87_C1211); if (state.failed) return;
			DebugLocation(312, 22);
			PushFollow(Follow._cast_expression_in_synpred87_C1213);
			cast_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred87_C_fragment", 161);
			LeaveRule("synpred87_C_fragment", 161);
			LeaveRule_synpred87_C_fragment();
		}
	}
	// $ANTLR end synpred87_C

	partial void EnterRule_synpred92_C_fragment();
	partial void LeaveRule_synpred92_C_fragment();

	// $ANTLR start synpred92_C
	public void synpred92_C_fragment()
	{
		EnterRule_synpred92_C_fragment();
		EnterRule("synpred92_C_fragment", 166);
		var retval = new XAstParserRuleReturnScope("synpred92_C_fragment");
		try
		{
			// C.g:321:4: ( 'sizeof' unary_expression )
			DebugEnterAlt(1);
			// C.g:321:4: 'sizeof' unary_expression
			{
			DebugLocation(321, 4);
			Match(input,90,Follow._90_in_synpred92_C1255); if (state.failed) return;
			DebugLocation(321, 13);
			PushFollow(Follow._unary_expression_in_synpred92_C1257);
			unary_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred92_C_fragment", 166);
			LeaveRule("synpred92_C_fragment", 166);
			LeaveRule_synpred92_C_fragment();
		}
	}
	// $ANTLR end synpred92_C

	partial void EnterRule_synpred113_C_fragment();
	partial void LeaveRule_synpred113_C_fragment();

	// $ANTLR start synpred113_C
	public void synpred113_C_fragment()
	{
		EnterRule_synpred113_C_fragment();
		EnterRule("synpred113_C_fragment", 187);
		var retval = new XAstParserRuleReturnScope("synpred113_C_fragment");
		try
		{
			// C.g:396:4: ( lvalue assignment_operator assignment_expression )
			DebugEnterAlt(1);
			// C.g:396:4: lvalue assignment_operator assignment_expression
			{
			DebugLocation(396, 4);
			PushFollow(Follow._lvalue_in_synpred113_C1573);
			lvalue();
			PopFollow();
			if (state.failed) return;
			DebugLocation(396, 11);
			PushFollow(Follow._assignment_operator_in_synpred113_C1575);
			assignment_operator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(396, 31);
			PushFollow(Follow._assignment_expression_in_synpred113_C1577);
			assignment_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred113_C_fragment", 187);
			LeaveRule("synpred113_C_fragment", 187);
			LeaveRule_synpred113_C_fragment();
		}
	}
	// $ANTLR end synpred113_C

	partial void EnterRule_synpred145_C_fragment();
	partial void LeaveRule_synpred145_C_fragment();

	// $ANTLR start synpred145_C
	public void synpred145_C_fragment()
	{
		EnterRule_synpred145_C_fragment();
		EnterRule("synpred145_C_fragment", 219);
		var retval = new XAstParserRuleReturnScope("synpred145_C_fragment");
		try
		{
			// C.g:475:8: ( declaration )
			DebugEnterAlt(1);
			// C.g:475:8: declaration
			{
			DebugLocation(475, 8);
			PushFollow(Follow._declaration_in_synpred145_C1933);
			declaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred145_C_fragment", 219);
			LeaveRule("synpred145_C_fragment", 219);
			LeaveRule_synpred145_C_fragment();
		}
	}
	// $ANTLR end synpred145_C
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA31 dfa31;
	private DFA33 dfa33;
	private DFA34 dfa34;
	private DFA58 dfa58;
	private DFA70 dfa70;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa31 = new DFA31( this, SpecialStateTransition31 );
		dfa33 = new DFA33( this, SpecialStateTransition33 );
		dfa34 = new DFA34( this, SpecialStateTransition34 );
		dfa58 = new DFA58( this, SpecialStateTransition58 );
		dfa70 = new DFA70( this, SpecialStateTransition70 );
	}

	private class DFA31 : DFA
	{
		private const string DFA31_eotS =
			"\x43\xFFFF";
		private const string DFA31_eofS =
			"\x1\x1\x42\xFFFF";
		private const string DFA31_minS =
			"\x1\xD\x1C\xFFFF\x1\xD\x1\x4\x1\x0\x1\xFFFF\x1\x0\x2\xFFFF\x1E\x0\x1"+
			"\xFFFF";
		private const string DFA31_maxS =
			"\x1\x64\x1C\xFFFF\x1\x62\x1\x69\x1\x0\x1\xFFFF\x1\x0\x2\xFFFF\x1E\x0"+
			"\x1\xFFFF";
		private const string DFA31_acceptS =
			"\x1\xFFFF\x1\x2\x40\xFFFF\x1\x1";
		private const string DFA31_specialS =
			"\x1F\xFFFF\x1\x0\x1\xFFFF\x1\x1\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6"+
			"\x1\x7\x1\x8\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11"+
			"\x1\x12\x1\x13\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B"+
			"\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1\xFFFF}>";
		private static readonly string[] DFA31_transitionS =
			{
				"\x1\x1\x10\xFFFF\x1\x1D\x2\x1\x4\xFFFF\x1\x1\x8\xFFFF\x2\x1\x4\xFFFF"+
				"\x1\x1\x6\xFFFF\x1\x1E\x3\xFFFF\x6\x1\x2\xFFFF\x2\x1\x3\xFFFF\x1\x1"+
				"\x1\xFFFF\x3\x1\x3\xFFFF\x3\x1\x1\xFFFF\x2\x1\x1\xFFFF\x2\x1\x1\xFFFF"+
				"\x5\x1\x1\xFFFF\x1\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x21\x10\xFFFF\x1\x1\x1\x1F\x1\x1\x1A\xFFFF\x1\x1\x3\xFFFF\x1\x33"+
				"\x1\x31\x1\x30\x1\x32\x1\x34\x1\x24\x2\xFFFF\x1\x26\x1\x30\x3\xFFFF"+
				"\x1\x2B\x1\xFFFF\x1\x2F\x1\x24\x1\x2A\x3\xFFFF\x1\x28\x1\x29\x1\x24"+
				"\x1\xFFFF\x1\x27\x1\x2C\x1\xFFFF\x1\x24\x1\x2E\x2\xFFFF\x1\x2E\x1\x2D"+
				"\x1\x25\x1\x30",
				"\x1\x3B\x1\xFFFF\x1\x3A\x2\xFFFF\x1\x3D\x1\xFFFF\x1\x38\x1\xFFFF\x1"+
				"\x37\x4\xFFFF\x1\x39\x1\xFFFF\x1\x3C\x2\xFFFF\x1\x40\x4\xFFFF\x1\x40"+
				"\x1\xFFFF\x1\x36\x1\xFFFF\x1\x40\x1\xFFFF\x1\x40\x1\x3E\x2\xFFFF\x1"+
				"\x40\x1\x3F\x14\xFFFF\x1\x35\x1D\xFFFF\x1\x41\xE\xFFFF\x1\x40",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA31_eot = DFA.UnpackEncodedString(DFA31_eotS);
		private static readonly short[] DFA31_eof = DFA.UnpackEncodedString(DFA31_eofS);
		private static readonly char[] DFA31_min = DFA.UnpackEncodedStringToUnsignedChars(DFA31_minS);
		private static readonly char[] DFA31_max = DFA.UnpackEncodedStringToUnsignedChars(DFA31_maxS);
		private static readonly short[] DFA31_accept = DFA.UnpackEncodedString(DFA31_acceptS);
		private static readonly short[] DFA31_special = DFA.UnpackEncodedString(DFA31_specialS);
		private static readonly short[][] DFA31_transition;

		static DFA31()
		{
			int numStates = DFA31_transitionS.Length;
			DFA31_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA31_transition[i] = DFA.UnpackEncodedString(DFA31_transitionS[i]);
			}
		}

		public DFA31( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 31;
			this.eot = DFA31_eot;
			this.eof = DFA31_eof;
			this.min = DFA31_min;
			this.max = DFA31_max;
			this.accept = DFA31_accept;
			this.special = DFA31_special;
			this.transition = DFA31_transition;
		}

		public override string Description { get { return "()* loopback of 235:3: ( declarator_suffix )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition31(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA31_31 = input.LA(1);


				int index31_31 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_31);
				if (s >= 0) return s;
				break;

			case 1:
				int LA31_33 = input.LA(1);


				int index31_33 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_33);
				if (s >= 0) return s;
				break;

			case 2:
				int LA31_36 = input.LA(1);


				int index31_36 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_36);
				if (s >= 0) return s;
				break;

			case 3:
				int LA31_37 = input.LA(1);


				int index31_37 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_37);
				if (s >= 0) return s;
				break;

			case 4:
				int LA31_38 = input.LA(1);


				int index31_38 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_38);
				if (s >= 0) return s;
				break;

			case 5:
				int LA31_39 = input.LA(1);


				int index31_39 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_39);
				if (s >= 0) return s;
				break;

			case 6:
				int LA31_40 = input.LA(1);


				int index31_40 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_40);
				if (s >= 0) return s;
				break;

			case 7:
				int LA31_41 = input.LA(1);


				int index31_41 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_41);
				if (s >= 0) return s;
				break;

			case 8:
				int LA31_42 = input.LA(1);


				int index31_42 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_42);
				if (s >= 0) return s;
				break;

			case 9:
				int LA31_43 = input.LA(1);


				int index31_43 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_43);
				if (s >= 0) return s;
				break;

			case 10:
				int LA31_44 = input.LA(1);


				int index31_44 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_44);
				if (s >= 0) return s;
				break;

			case 11:
				int LA31_45 = input.LA(1);


				int index31_45 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_45);
				if (s >= 0) return s;
				break;

			case 12:
				int LA31_46 = input.LA(1);


				int index31_46 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_46);
				if (s >= 0) return s;
				break;

			case 13:
				int LA31_47 = input.LA(1);


				int index31_47 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_47);
				if (s >= 0) return s;
				break;

			case 14:
				int LA31_48 = input.LA(1);


				int index31_48 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_48);
				if (s >= 0) return s;
				break;

			case 15:
				int LA31_49 = input.LA(1);


				int index31_49 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_49);
				if (s >= 0) return s;
				break;

			case 16:
				int LA31_50 = input.LA(1);


				int index31_50 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_50);
				if (s >= 0) return s;
				break;

			case 17:
				int LA31_51 = input.LA(1);


				int index31_51 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_51);
				if (s >= 0) return s;
				break;

			case 18:
				int LA31_52 = input.LA(1);


				int index31_52 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_52);
				if (s >= 0) return s;
				break;

			case 19:
				int LA31_53 = input.LA(1);


				int index31_53 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_53);
				if (s >= 0) return s;
				break;

			case 20:
				int LA31_54 = input.LA(1);


				int index31_54 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_54);
				if (s >= 0) return s;
				break;

			case 21:
				int LA31_55 = input.LA(1);


				int index31_55 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_55);
				if (s >= 0) return s;
				break;

			case 22:
				int LA31_56 = input.LA(1);


				int index31_56 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_56);
				if (s >= 0) return s;
				break;

			case 23:
				int LA31_57 = input.LA(1);


				int index31_57 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_57);
				if (s >= 0) return s;
				break;

			case 24:
				int LA31_58 = input.LA(1);


				int index31_58 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_58);
				if (s >= 0) return s;
				break;

			case 25:
				int LA31_59 = input.LA(1);


				int index31_59 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_59);
				if (s >= 0) return s;
				break;

			case 26:
				int LA31_60 = input.LA(1);


				int index31_60 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_60);
				if (s >= 0) return s;
				break;

			case 27:
				int LA31_61 = input.LA(1);


				int index31_61 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_61);
				if (s >= 0) return s;
				break;

			case 28:
				int LA31_62 = input.LA(1);


				int index31_62 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_62);
				if (s >= 0) return s;
				break;

			case 29:
				int LA31_63 = input.LA(1);


				int index31_63 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_63);
				if (s >= 0) return s;
				break;

			case 30:
				int LA31_64 = input.LA(1);


				int index31_64 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_64);
				if (s >= 0) return s;
				break;

			case 31:
				int LA31_65 = input.LA(1);


				int index31_65 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred56_C_fragment))) {s = 66;}

				else if ((true)) {s = 1;}


				input.Seek(index31_65);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 31, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA33 : DFA
	{
		private const string DFA33_eotS =
			"\x5C\xFFFF";
		private const string DFA33_eofS =
			"\x1\x1\x5B\xFFFF";
		private const string DFA33_minS =
			"\x1\xD\x3\xFFFF\x1\x0\xD\xFFFF\x1\x0\x49\xFFFF";
		private const string DFA33_maxS =
			"\x1\x64\x3\xFFFF\x1\x0\xD\xFFFF\x1\x0\x49\xFFFF";
		private const string DFA33_acceptS =
			"\x1\xFFFF\x1\x2\x3B\xFFFF\x1\x1\x1E\xFFFF";
		private const string DFA33_specialS =
			"\x4\xFFFF\x1\x0\xD\xFFFF\x1\x1\x49\xFFFF}>";
		private static readonly string[] DFA33_transitionS =
			{
				"\x1\x1\x10\xFFFF\x3\x1\x4\xFFFF\x1\x1\x8\xFFFF\x2\x1\x4\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x1\x3\xFFFF\x2\x1\x1\x4\x3\x1\x2\xFFFF\x1\x1\x1\x12\x3"+
				"\xFFFF\x1\x1\x1\xFFFF\x3\x1\x3\xFFFF\x3\x1\x1\xFFFF\x2\x1\x1\xFFFF\x2"+
				"\x1\x1\xFFFF\x4\x1\x1\x12\x1\xFFFF\x1\x1",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA33_eot = DFA.UnpackEncodedString(DFA33_eotS);
		private static readonly short[] DFA33_eof = DFA.UnpackEncodedString(DFA33_eofS);
		private static readonly char[] DFA33_min = DFA.UnpackEncodedStringToUnsignedChars(DFA33_minS);
		private static readonly char[] DFA33_max = DFA.UnpackEncodedStringToUnsignedChars(DFA33_maxS);
		private static readonly short[] DFA33_accept = DFA.UnpackEncodedString(DFA33_acceptS);
		private static readonly short[] DFA33_special = DFA.UnpackEncodedString(DFA33_specialS);
		private static readonly short[][] DFA33_transition;

		static DFA33()
		{
			int numStates = DFA33_transitionS.Length;
			DFA33_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA33_transition[i] = DFA.UnpackEncodedString(DFA33_transitionS[i]);
			}
		}

		public DFA33( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 33;
			this.eot = DFA33_eot;
			this.eof = DFA33_eof;
			this.min = DFA33_min;
			this.max = DFA33_max;
			this.accept = DFA33_accept;
			this.special = DFA33_special;
			this.transition = DFA33_transition;
		}

		public override string Description { get { return "()+ loopback of 247:8: ( type_qualifier )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition33(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA33_4 = input.LA(1);


				int index33_4 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred61_C_fragment))) {s = 61;}

				else if ((true)) {s = 1;}


				input.Seek(index33_4);
				if (s >= 0) return s;
				break;

			case 1:
				int LA33_18 = input.LA(1);


				int index33_18 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred61_C_fragment))) {s = 61;}

				else if ((true)) {s = 1;}


				input.Seek(index33_18);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 33, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA34 : DFA
	{
		private const string DFA34_eotS =
			"\x3E\xFFFF";
		private const string DFA34_eofS =
			"\x1\x2\x3D\xFFFF";
		private const string DFA34_minS =
			"\x1\xD\x1\x0\x3C\xFFFF";
		private const string DFA34_maxS =
			"\x1\x64\x1\x0\x3C\xFFFF";
		private const string DFA34_acceptS =
			"\x2\xFFFF\x1\x2\x3A\xFFFF\x1\x1";
		private const string DFA34_specialS =
			"\x1\xFFFF\x1\x0\x3C\xFFFF}>";
		private static readonly string[] DFA34_transitionS =
			{
				"\x1\x2\x10\xFFFF\x2\x2\x1\x1\x4\xFFFF\x1\x2\x8\xFFFF\x2\x2\x4\xFFFF"+
				"\x1\x2\x6\xFFFF\x1\x2\x3\xFFFF\x6\x2\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1"+
				"\xFFFF\x3\x2\x3\xFFFF\x3\x2\x1\xFFFF\x2\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5"+
				"\x2\x1\xFFFF\x1\x2",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA34_eot = DFA.UnpackEncodedString(DFA34_eotS);
		private static readonly short[] DFA34_eof = DFA.UnpackEncodedString(DFA34_eofS);
		private static readonly char[] DFA34_min = DFA.UnpackEncodedStringToUnsignedChars(DFA34_minS);
		private static readonly char[] DFA34_max = DFA.UnpackEncodedStringToUnsignedChars(DFA34_maxS);
		private static readonly short[] DFA34_accept = DFA.UnpackEncodedString(DFA34_acceptS);
		private static readonly short[] DFA34_special = DFA.UnpackEncodedString(DFA34_specialS);
		private static readonly short[][] DFA34_transition;

		static DFA34()
		{
			int numStates = DFA34_transitionS.Length;
			DFA34_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA34_transition[i] = DFA.UnpackEncodedString(DFA34_transitionS[i]);
			}
		}

		public DFA34( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 34;
			this.eot = DFA34_eot;
			this.eof = DFA34_eof;
			this.min = DFA34_min;
			this.max = DFA34_max;
			this.accept = DFA34_accept;
			this.special = DFA34_special;
			this.transition = DFA34_transition;
		}

		public override string Description { get { return "247:24: ( pointer )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition34(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA34_1 = input.LA(1);


				int index34_1 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred62_C_fragment))) {s = 61;}

				else if ((true)) {s = 2;}


				input.Seek(index34_1);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 34, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA58 : DFA
	{
		private const string DFA58_eotS =
			"\x119\xFFFF";
		private const string DFA58_eofS =
			"\x1\xFFFF\x7\x14\x111\xFFFF";
		private const string DFA58_minS =
			"\x1\x4\x7\x18\x5\x4\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6"+
			"\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\xC\x0\xC"+
			"\xFFFF\x30\x0";
		private const string DFA58_maxS =
			"\x1\x69\x7\x68\x5\x69\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF"+
			"\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\xC\x0"+
			"\xC\xFFFF\x30\x0";
		private const string DFA58_acceptS =
			"\x13\xFFFF\x1\x1\x1\x2\x104\xFFFF";
		private const string DFA58_specialS =
			"\xD\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x16\xFFFF\x1\x6\x1\x7\x1"+
			"\x8\x1\x9\x1\xA\x1\xB\x16\xFFFF\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11"+
			"\x16\xFFFF\x1\x12\x1\x13\x1\x14\x1\x15\x1\x16\x1\x17\x16\xFFFF\x1\x18"+
			"\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x16\xFFFF\x1\x1E\x1\x1F\x1\x20\x1"+
			"\x21\x1\x22\x1\x23\x16\xFFFF\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28\x1\x29"+
			"\x16\xFFFF\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1"+
			"\x32\x1\x33\x1\x34\x1\x35\xC\xFFFF\x1\x36\x1\x37\x1\x38\x1\x39\x1\x3A"+
			"\x1\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x1\x40\x1\x41\x1\x42\x1\x43\x1\x44"+
			"\x1\x45\x1\x46\x1\x47\x1\x48\x1\x49\x1\x4A\x1\x4B\x1\x4C\x1\x4D\x1\x4E"+
			"\x1\x4F\x1\x50\x1\x51\x1\x52\x1\x53\x1\x54\x1\x55\x1\x56\x1\x57\x1\x58"+
			"\x1\x59\x1\x5A\x1\x5B\x1\x5C\x1\x5D\x1\x5E\x1\x5F\x1\x60\x1\x61\x1\x62"+
			"\x1\x63\x1\x64\x1\x65}>";
		private static readonly string[] DFA58_transitionS =
			{
				"\x1\x5\x1\xFFFF\x1\x4\x2\xFFFF\x1\x7\x1\xFFFF\x1\x2\x1\xFFFF\x1\x1\x4"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x6\x2\xFFFF\x1\xB\x4\xFFFF\x1\xB\x1\xFFFF\x1"+
				"\x8\x1\xFFFF\x1\xB\x1\xFFFF\x1\xB\x1\x9\x2\xFFFF\x1\xB\x1\xA\x32\xFFFF"+
				"\x1\xC\xE\xFFFF\x1\xB",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\xE\x2\x14\x1\x13\x1\x14\x1\x11\x1\x13"+
				"\x2\x14\x1\x12\x1\x13\x1\x10\x1\xF\x1\xFFFF\x1\x14\x1\x13\x4\x14\x1"+
				"\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\xD\x2\x14\x1\x13\x26\xFFFF"+
				"\x1\x14\x1\x13\x2\x14",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\x2A\x2\x14\x1\x13\x1\x14\x1\x2D\x1"+
				"\x13\x2\x14\x1\x2E\x1\x13\x1\x2C\x1\x2B\x1\xFFFF\x1\x14\x1\x13\x4\x14"+
				"\x1\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\x29\x2\x14\x1\x13\x26"+
				"\xFFFF\x1\x14\x1\x13\x2\x14",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\x46\x2\x14\x1\x13\x1\x14\x1\x49\x1"+
				"\x13\x2\x14\x1\x4A\x1\x13\x1\x48\x1\x47\x1\xFFFF\x1\x14\x1\x13\x4\x14"+
				"\x1\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\x45\x2\x14\x1\x13\x26"+
				"\xFFFF\x1\x14\x1\x13\x2\x14",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\x62\x2\x14\x1\x13\x1\x14\x1\x65\x1"+
				"\x13\x2\x14\x1\x66\x1\x13\x1\x64\x1\x63\x1\xFFFF\x1\x14\x1\x13\x4\x14"+
				"\x1\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\x61\x2\x14\x1\x13\x26"+
				"\xFFFF\x1\x14\x1\x13\x2\x14",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\x7E\x2\x14\x1\x13\x1\x14\x1\x81\x1"+
				"\x13\x2\x14\x1\x82\x1\x13\x1\x80\x1\x7F\x1\xFFFF\x1\x14\x1\x13\x4\x14"+
				"\x1\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\x7D\x2\x14\x1\x13\x26"+
				"\xFFFF\x1\x14\x1\x13\x2\x14",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\x9A\x2\x14\x1\x13\x1\x14\x1\x9D\x1"+
				"\x13\x2\x14\x1\x9E\x1\x13\x1\x9C\x1\x9B\x1\xFFFF\x1\x14\x1\x13\x4\x14"+
				"\x1\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\x99\x2\x14\x1\x13\x26"+
				"\xFFFF\x1\x14\x1\x13\x2\x14",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\xB6\x2\x14\x1\x13\x1\x14\x1\xB9\x1"+
				"\x13\x2\x14\x1\xBA\x1\x13\x1\xB8\x1\xB7\x1\xFFFF\x1\x14\x1\x13\x4\x14"+
				"\x1\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\xB5\x2\x14\x1\x13\x26"+
				"\xFFFF\x1\x14\x1\x13\x2\x14",
				"\x1\xD5\x1\xFFFF\x1\xD4\x2\xFFFF\x1\xD7\x1\xFFFF\x1\xD2\x1\xFFFF\x1"+
				"\xD1\x4\xFFFF\x1\xD3\x1\xFFFF\x1\xD6\x2\xFFFF\x1\xDB\x4\xFFFF\x1\xDB"+
				"\x1\xFFFF\x1\xD8\x1\xFFFF\x1\xDB\x1\xFFFF\x1\xDB\x1\xD9\x2\xFFFF\x1"+
				"\xDB\x1\xDA\x19\xFFFF\x1\x14\x5\xFFFF\x2\x14\x3\xFFFF\x1\x14\x1\xFFFF"+
				"\x1\x14\x1\xFFFF\x1\x14\x3\xFFFF\x2\x14\x2\xFFFF\x2\x14\x1\xDC\x1\xFFFF"+
				"\x1\x14\x2\xFFFF\x4\x14\x6\xFFFF\x1\xDB",
				"\x1\xED\x1\xFFFF\x1\xEC\x2\xFFFF\x1\xEF\x1\xFFFF\x1\xEA\x1\xFFFF\x1"+
				"\xE9\x4\xFFFF\x1\xEB\x1\xFFFF\x1\xEE\x2\xFFFF\x1\xF3\x4\xFFFF\x1\xF3"+
				"\x1\xFFFF\x1\xF0\x1\xFFFF\x1\xF3\x1\xFFFF\x1\xF3\x1\xF1\x2\xFFFF\x1"+
				"\xF3\x1\xF2\x32\xFFFF\x1\xF4\xE\xFFFF\x1\xF3",
				"\x1\xF9\x1\xFFFF\x1\xF8\x2\xFFFF\x1\xFB\x1\xFFFF\x1\xF6\x1\xFFFF\x1"+
				"\xF5\x4\xFFFF\x1\xF7\x1\xFFFF\x1\xFA\x2\xFFFF\x1\xFF\x4\xFFFF\x1\xFF"+
				"\x1\xFFFF\x1\xFC\x1\xFFFF\x1\xFF\x1\xFFFF\x1\xFF\x1\xFD\x2\xFFFF\x1"+
				"\xFF\x1\xFE\x32\xFFFF\x1\x100\xE\xFFFF\x1\xFF",
				"\x1\x106\x1\xFFFF\x1\x105\x2\xFFFF\x1\x108\x1\xFFFF\x1\x103\x1\xFFFF"+
				"\x1\x102\x4\xFFFF\x1\x104\x1\xFFFF\x1\x107\x2\xFFFF\x1\x10B\x4\xFFFF"+
				"\x1\x10B\x1\xFFFF\x1\x101\x1\xFFFF\x1\x10B\x1\xFFFF\x1\x10B\x1\x109"+
				"\x2\xFFFF\x1\x10B\x1\x10A\x32\xFFFF\x1\x10C\xE\xFFFF\x1\x10B",
				"\x1\x112\x1\xFFFF\x1\x111\x2\xFFFF\x1\x114\x1\xFFFF\x1\x10F\x1\xFFFF"+
				"\x1\x10E\x4\xFFFF\x1\x110\x1\xFFFF\x1\x113\x2\xFFFF\x1\x117\x4\xFFFF"+
				"\x1\x117\x1\xFFFF\x1\x10D\x1\xFFFF\x1\x117\x1\xFFFF\x1\x117\x1\x115"+
				"\x2\xFFFF\x1\x117\x1\x116\x32\xFFFF\x1\x118\xE\xFFFF\x1\x117",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA58_eot = DFA.UnpackEncodedString(DFA58_eotS);
		private static readonly short[] DFA58_eof = DFA.UnpackEncodedString(DFA58_eofS);
		private static readonly char[] DFA58_min = DFA.UnpackEncodedStringToUnsignedChars(DFA58_minS);
		private static readonly char[] DFA58_max = DFA.UnpackEncodedStringToUnsignedChars(DFA58_maxS);
		private static readonly short[] DFA58_accept = DFA.UnpackEncodedString(DFA58_acceptS);
		private static readonly short[] DFA58_special = DFA.UnpackEncodedString(DFA58_specialS);
		private static readonly short[][] DFA58_transition;

		static DFA58()
		{
			int numStates = DFA58_transitionS.Length;
			DFA58_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA58_transition[i] = DFA.UnpackEncodedString(DFA58_transitionS[i]);
			}
		}

		public DFA58( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 58;
			this.eot = DFA58_eot;
			this.eof = DFA58_eof;
			this.min = DFA58_min;
			this.max = DFA58_max;
			this.accept = DFA58_accept;
			this.special = DFA58_special;
			this.transition = DFA58_transition;
		}

		public override string Description { get { return "395:1: assignment_expression : ( lvalue assignment_operator assignment_expression | conditional_expression );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition58(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA58_13 = input.LA(1);


				int index58_13 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_13);
				if (s >= 0) return s;
				break;

			case 1:
				int LA58_14 = input.LA(1);


				int index58_14 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_14);
				if (s >= 0) return s;
				break;

			case 2:
				int LA58_15 = input.LA(1);


				int index58_15 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_15);
				if (s >= 0) return s;
				break;

			case 3:
				int LA58_16 = input.LA(1);


				int index58_16 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_16);
				if (s >= 0) return s;
				break;

			case 4:
				int LA58_17 = input.LA(1);


				int index58_17 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_17);
				if (s >= 0) return s;
				break;

			case 5:
				int LA58_18 = input.LA(1);


				int index58_18 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_18);
				if (s >= 0) return s;
				break;

			case 6:
				int LA58_41 = input.LA(1);


				int index58_41 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_41);
				if (s >= 0) return s;
				break;

			case 7:
				int LA58_42 = input.LA(1);


				int index58_42 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_42);
				if (s >= 0) return s;
				break;

			case 8:
				int LA58_43 = input.LA(1);


				int index58_43 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_43);
				if (s >= 0) return s;
				break;

			case 9:
				int LA58_44 = input.LA(1);


				int index58_44 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_44);
				if (s >= 0) return s;
				break;

			case 10:
				int LA58_45 = input.LA(1);


				int index58_45 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_45);
				if (s >= 0) return s;
				break;

			case 11:
				int LA58_46 = input.LA(1);


				int index58_46 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_46);
				if (s >= 0) return s;
				break;

			case 12:
				int LA58_69 = input.LA(1);


				int index58_69 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_69);
				if (s >= 0) return s;
				break;

			case 13:
				int LA58_70 = input.LA(1);


				int index58_70 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_70);
				if (s >= 0) return s;
				break;

			case 14:
				int LA58_71 = input.LA(1);


				int index58_71 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_71);
				if (s >= 0) return s;
				break;

			case 15:
				int LA58_72 = input.LA(1);


				int index58_72 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_72);
				if (s >= 0) return s;
				break;

			case 16:
				int LA58_73 = input.LA(1);


				int index58_73 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_73);
				if (s >= 0) return s;
				break;

			case 17:
				int LA58_74 = input.LA(1);


				int index58_74 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_74);
				if (s >= 0) return s;
				break;

			case 18:
				int LA58_97 = input.LA(1);


				int index58_97 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_97);
				if (s >= 0) return s;
				break;

			case 19:
				int LA58_98 = input.LA(1);


				int index58_98 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_98);
				if (s >= 0) return s;
				break;

			case 20:
				int LA58_99 = input.LA(1);


				int index58_99 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_99);
				if (s >= 0) return s;
				break;

			case 21:
				int LA58_100 = input.LA(1);


				int index58_100 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_100);
				if (s >= 0) return s;
				break;

			case 22:
				int LA58_101 = input.LA(1);


				int index58_101 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_101);
				if (s >= 0) return s;
				break;

			case 23:
				int LA58_102 = input.LA(1);


				int index58_102 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_102);
				if (s >= 0) return s;
				break;

			case 24:
				int LA58_125 = input.LA(1);


				int index58_125 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_125);
				if (s >= 0) return s;
				break;

			case 25:
				int LA58_126 = input.LA(1);


				int index58_126 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_126);
				if (s >= 0) return s;
				break;

			case 26:
				int LA58_127 = input.LA(1);


				int index58_127 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_127);
				if (s >= 0) return s;
				break;

			case 27:
				int LA58_128 = input.LA(1);


				int index58_128 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_128);
				if (s >= 0) return s;
				break;

			case 28:
				int LA58_129 = input.LA(1);


				int index58_129 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_129);
				if (s >= 0) return s;
				break;

			case 29:
				int LA58_130 = input.LA(1);


				int index58_130 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_130);
				if (s >= 0) return s;
				break;

			case 30:
				int LA58_153 = input.LA(1);


				int index58_153 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_153);
				if (s >= 0) return s;
				break;

			case 31:
				int LA58_154 = input.LA(1);


				int index58_154 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_154);
				if (s >= 0) return s;
				break;

			case 32:
				int LA58_155 = input.LA(1);


				int index58_155 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_155);
				if (s >= 0) return s;
				break;

			case 33:
				int LA58_156 = input.LA(1);


				int index58_156 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_156);
				if (s >= 0) return s;
				break;

			case 34:
				int LA58_157 = input.LA(1);


				int index58_157 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_157);
				if (s >= 0) return s;
				break;

			case 35:
				int LA58_158 = input.LA(1);


				int index58_158 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_158);
				if (s >= 0) return s;
				break;

			case 36:
				int LA58_181 = input.LA(1);


				int index58_181 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_181);
				if (s >= 0) return s;
				break;

			case 37:
				int LA58_182 = input.LA(1);


				int index58_182 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_182);
				if (s >= 0) return s;
				break;

			case 38:
				int LA58_183 = input.LA(1);


				int index58_183 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_183);
				if (s >= 0) return s;
				break;

			case 39:
				int LA58_184 = input.LA(1);


				int index58_184 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_184);
				if (s >= 0) return s;
				break;

			case 40:
				int LA58_185 = input.LA(1);


				int index58_185 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_185);
				if (s >= 0) return s;
				break;

			case 41:
				int LA58_186 = input.LA(1);


				int index58_186 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_186);
				if (s >= 0) return s;
				break;

			case 42:
				int LA58_209 = input.LA(1);


				int index58_209 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_209);
				if (s >= 0) return s;
				break;

			case 43:
				int LA58_210 = input.LA(1);


				int index58_210 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_210);
				if (s >= 0) return s;
				break;

			case 44:
				int LA58_211 = input.LA(1);


				int index58_211 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_211);
				if (s >= 0) return s;
				break;

			case 45:
				int LA58_212 = input.LA(1);


				int index58_212 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_212);
				if (s >= 0) return s;
				break;

			case 46:
				int LA58_213 = input.LA(1);


				int index58_213 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_213);
				if (s >= 0) return s;
				break;

			case 47:
				int LA58_214 = input.LA(1);


				int index58_214 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_214);
				if (s >= 0) return s;
				break;

			case 48:
				int LA58_215 = input.LA(1);


				int index58_215 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_215);
				if (s >= 0) return s;
				break;

			case 49:
				int LA58_216 = input.LA(1);


				int index58_216 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_216);
				if (s >= 0) return s;
				break;

			case 50:
				int LA58_217 = input.LA(1);


				int index58_217 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_217);
				if (s >= 0) return s;
				break;

			case 51:
				int LA58_218 = input.LA(1);


				int index58_218 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_218);
				if (s >= 0) return s;
				break;

			case 52:
				int LA58_219 = input.LA(1);


				int index58_219 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_219);
				if (s >= 0) return s;
				break;

			case 53:
				int LA58_220 = input.LA(1);


				int index58_220 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_220);
				if (s >= 0) return s;
				break;

			case 54:
				int LA58_233 = input.LA(1);


				int index58_233 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_233);
				if (s >= 0) return s;
				break;

			case 55:
				int LA58_234 = input.LA(1);


				int index58_234 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_234);
				if (s >= 0) return s;
				break;

			case 56:
				int LA58_235 = input.LA(1);


				int index58_235 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_235);
				if (s >= 0) return s;
				break;

			case 57:
				int LA58_236 = input.LA(1);


				int index58_236 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_236);
				if (s >= 0) return s;
				break;

			case 58:
				int LA58_237 = input.LA(1);


				int index58_237 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_237);
				if (s >= 0) return s;
				break;

			case 59:
				int LA58_238 = input.LA(1);


				int index58_238 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_238);
				if (s >= 0) return s;
				break;

			case 60:
				int LA58_239 = input.LA(1);


				int index58_239 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_239);
				if (s >= 0) return s;
				break;

			case 61:
				int LA58_240 = input.LA(1);


				int index58_240 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_240);
				if (s >= 0) return s;
				break;

			case 62:
				int LA58_241 = input.LA(1);


				int index58_241 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_241);
				if (s >= 0) return s;
				break;

			case 63:
				int LA58_242 = input.LA(1);


				int index58_242 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_242);
				if (s >= 0) return s;
				break;

			case 64:
				int LA58_243 = input.LA(1);


				int index58_243 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_243);
				if (s >= 0) return s;
				break;

			case 65:
				int LA58_244 = input.LA(1);


				int index58_244 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_244);
				if (s >= 0) return s;
				break;

			case 66:
				int LA58_245 = input.LA(1);


				int index58_245 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_245);
				if (s >= 0) return s;
				break;

			case 67:
				int LA58_246 = input.LA(1);


				int index58_246 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_246);
				if (s >= 0) return s;
				break;

			case 68:
				int LA58_247 = input.LA(1);


				int index58_247 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_247);
				if (s >= 0) return s;
				break;

			case 69:
				int LA58_248 = input.LA(1);


				int index58_248 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_248);
				if (s >= 0) return s;
				break;

			case 70:
				int LA58_249 = input.LA(1);


				int index58_249 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_249);
				if (s >= 0) return s;
				break;

			case 71:
				int LA58_250 = input.LA(1);


				int index58_250 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_250);
				if (s >= 0) return s;
				break;

			case 72:
				int LA58_251 = input.LA(1);


				int index58_251 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_251);
				if (s >= 0) return s;
				break;

			case 73:
				int LA58_252 = input.LA(1);


				int index58_252 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_252);
				if (s >= 0) return s;
				break;

			case 74:
				int LA58_253 = input.LA(1);


				int index58_253 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_253);
				if (s >= 0) return s;
				break;

			case 75:
				int LA58_254 = input.LA(1);


				int index58_254 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_254);
				if (s >= 0) return s;
				break;

			case 76:
				int LA58_255 = input.LA(1);


				int index58_255 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_255);
				if (s >= 0) return s;
				break;

			case 77:
				int LA58_256 = input.LA(1);


				int index58_256 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_256);
				if (s >= 0) return s;
				break;

			case 78:
				int LA58_257 = input.LA(1);


				int index58_257 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_257);
				if (s >= 0) return s;
				break;

			case 79:
				int LA58_258 = input.LA(1);


				int index58_258 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_258);
				if (s >= 0) return s;
				break;

			case 80:
				int LA58_259 = input.LA(1);


				int index58_259 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_259);
				if (s >= 0) return s;
				break;

			case 81:
				int LA58_260 = input.LA(1);


				int index58_260 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_260);
				if (s >= 0) return s;
				break;

			case 82:
				int LA58_261 = input.LA(1);


				int index58_261 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_261);
				if (s >= 0) return s;
				break;

			case 83:
				int LA58_262 = input.LA(1);


				int index58_262 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_262);
				if (s >= 0) return s;
				break;

			case 84:
				int LA58_263 = input.LA(1);


				int index58_263 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_263);
				if (s >= 0) return s;
				break;

			case 85:
				int LA58_264 = input.LA(1);


				int index58_264 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_264);
				if (s >= 0) return s;
				break;

			case 86:
				int LA58_265 = input.LA(1);


				int index58_265 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_265);
				if (s >= 0) return s;
				break;

			case 87:
				int LA58_266 = input.LA(1);


				int index58_266 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_266);
				if (s >= 0) return s;
				break;

			case 88:
				int LA58_267 = input.LA(1);


				int index58_267 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_267);
				if (s >= 0) return s;
				break;

			case 89:
				int LA58_268 = input.LA(1);


				int index58_268 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_268);
				if (s >= 0) return s;
				break;

			case 90:
				int LA58_269 = input.LA(1);


				int index58_269 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_269);
				if (s >= 0) return s;
				break;

			case 91:
				int LA58_270 = input.LA(1);


				int index58_270 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_270);
				if (s >= 0) return s;
				break;

			case 92:
				int LA58_271 = input.LA(1);


				int index58_271 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_271);
				if (s >= 0) return s;
				break;

			case 93:
				int LA58_272 = input.LA(1);


				int index58_272 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_272);
				if (s >= 0) return s;
				break;

			case 94:
				int LA58_273 = input.LA(1);


				int index58_273 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_273);
				if (s >= 0) return s;
				break;

			case 95:
				int LA58_274 = input.LA(1);


				int index58_274 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_274);
				if (s >= 0) return s;
				break;

			case 96:
				int LA58_275 = input.LA(1);


				int index58_275 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_275);
				if (s >= 0) return s;
				break;

			case 97:
				int LA58_276 = input.LA(1);


				int index58_276 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_276);
				if (s >= 0) return s;
				break;

			case 98:
				int LA58_277 = input.LA(1);


				int index58_277 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_277);
				if (s >= 0) return s;
				break;

			case 99:
				int LA58_278 = input.LA(1);


				int index58_278 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_278);
				if (s >= 0) return s;
				break;

			case 100:
				int LA58_279 = input.LA(1);


				int index58_279 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_279);
				if (s >= 0) return s;
				break;

			case 101:
				int LA58_280 = input.LA(1);


				int index58_280 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred113_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index58_280);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 58, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA70 : DFA
	{
		private const string DFA70_eotS =
			"\x58\xFFFF";
		private const string DFA70_eofS =
			"\x58\xFFFF";
		private const string DFA70_minS =
			"\x1\x4\x1\xD\x2E\xFFFF\x1\x0\x5\xFFFF\x1\x0\xE\xFFFF\x1\x0\x12\xFFFF";
		private const string DFA70_maxS =
			"\x1\x69\x1\x67\x2E\xFFFF\x1\x0\x5\xFFFF\x1\x0\xE\xFFFF\x1\x0\x12\xFFFF";
		private const string DFA70_acceptS =
			"\x2\xFFFF\x1\x2\x18\xFFFF\x1\x1\x3C\xFFFF";
		private const string DFA70_specialS =
			"\x30\xFFFF\x1\x0\x5\xFFFF\x1\x1\xE\xFFFF\x1\x2\x12\xFFFF}>";
		private static readonly string[] DFA70_transitionS =
			{
				"\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x1\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1"+
				"\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x7\xFFFF\x1\x2\xF\xFFFF"+
				"\x6\x1B\x2\x2\x2\x1B\x3\x2\x1\x1B\x1\xFFFF\x3\x1B\x3\x2\x3\x1B\x1\x2"+
				"\x2\x1B\x1\x2\x2\x1B\x1\x2\x5\x1B\x2\x2\x3\xFFFF\x2\x2",
				"\x1\x1B\xA\xFFFF\x6\x2\x1\x30\x1\xFFFF\x1\x36\xA\x2\x1\xFFFF\x3\x2"+
				"\x1\x45\xC\x2\x1\xFFFF\x2\x2\x6\x1B\x2\xFFFF\x2\x1B\x3\xFFFF\x1\x1B"+
				"\x1\xFFFF\x3\x1B\x3\xFFFF\x3\x1B\x1\xFFFF\x2\x1B\x1\xFFFF\x2\x1B\x2"+
				"\xFFFF\x4\x1B\x2\xFFFF\x3\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA70_eot = DFA.UnpackEncodedString(DFA70_eotS);
		private static readonly short[] DFA70_eof = DFA.UnpackEncodedString(DFA70_eofS);
		private static readonly char[] DFA70_min = DFA.UnpackEncodedStringToUnsignedChars(DFA70_minS);
		private static readonly char[] DFA70_max = DFA.UnpackEncodedStringToUnsignedChars(DFA70_maxS);
		private static readonly short[] DFA70_accept = DFA.UnpackEncodedString(DFA70_acceptS);
		private static readonly short[] DFA70_special = DFA.UnpackEncodedString(DFA70_specialS);
		private static readonly short[][] DFA70_transition;

		static DFA70()
		{
			int numStates = DFA70_transitionS.Length;
			DFA70_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA70_transition[i] = DFA.UnpackEncodedString(DFA70_transitionS[i]);
			}
		}

		public DFA70( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 70;
			this.eot = DFA70_eot;
			this.eof = DFA70_eof;
			this.min = DFA70_min;
			this.max = DFA70_max;
			this.accept = DFA70_accept;
			this.special = DFA70_special;
			this.transition = DFA70_transition;
		}

		public override string Description { get { return "()* loopback of 475:8: ( declaration )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition70(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA70_48 = input.LA(1);


				int index70_48 = input.Index;
				input.Rewind();
				s = -1;
				if ((((EvaluatePredicate(synpred145_C_fragment)&&EvaluatePredicate(synpred145_C_fragment))&&(isTypeName(input.LT(1).getText()))))) {s = 27;}

				else if ((true)) {s = 2;}


				input.Seek(index70_48);
				if (s >= 0) return s;
				break;

			case 1:
				int LA70_54 = input.LA(1);


				int index70_54 = input.Index;
				input.Rewind();
				s = -1;
				if ((((EvaluatePredicate(synpred145_C_fragment)&&EvaluatePredicate(synpred145_C_fragment))&&(isTypeName(input.LT(1).getText()))))) {s = 27;}

				else if ((true)) {s = 2;}


				input.Seek(index70_54);
				if (s >= 0) return s;
				break;

			case 2:
				int LA70_69 = input.LA(1);


				int index70_69 = input.Index;
				input.Rewind();
				s = -1;
				if ((((EvaluatePredicate(synpred145_C_fragment)&&EvaluatePredicate(synpred145_C_fragment))&&(isTypeName(input.LT(1).getText()))))) {s = 27;}

				else if ((true)) {s = 2;}


				input.Seek(index70_69);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 70, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _external_declaration_in_translation_unit71 = new BitSet(new ulong[]{0x8000000140002002UL,0x7DB71D19FUL});
		public static readonly BitSet _function_definition_in_external_declaration107 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_external_declaration112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_function_definition134 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _declarator_in_function_definition137 = new BitSet(new ulong[]{0x8000000000002000UL,0x17DB71D19FUL});
		public static readonly BitSet _declaration_in_function_definition143 = new BitSet(new ulong[]{0x8000000000002000UL,0x17DB71D19FUL});
		public static readonly BitSet _compound_statement_in_function_definition146 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _compound_statement_in_function_definition153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _65_in_declaration181 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_declaration184 = new BitSet(new ulong[]{0x8000000140002000UL,0x79B71D19FUL});
		public static readonly BitSet _declaration_specifiers_in_declaration186 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _init_declarator_list_in_declaration196 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_declaration198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_declaration204 = new BitSet(new ulong[]{0x800140002000UL});
		public static readonly BitSet _init_declarator_list_in_declaration206 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_declaration209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _storage_class_specifier_in_declaration_specifiers226 = new BitSet(new ulong[]{0x8000000000002002UL,0x79B71D19FUL});
		public static readonly BitSet _type_specifier_in_declaration_specifiers234 = new BitSet(new ulong[]{0x8000000000002002UL,0x79B71D19FUL});
		public static readonly BitSet _type_qualifier_in_declaration_specifiers242 = new BitSet(new ulong[]{0x8000000000002002UL,0x79B71D19FUL});
		public static readonly BitSet _gcc_qualifier_in_declaration_specifiers250 = new BitSet(new ulong[]{0x8000000000002002UL,0x79B71D19FUL});
		public static readonly BitSet _init_declarator_in_init_declarator_list266 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_init_declarator_list269 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _init_declarator_in_init_declarator_list271 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _declarator_in_init_declarator284 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _52_in_init_declarator287 = new BitSet(new ulong[]{0xCD50942A50UL,0x21004000000UL});
		public static readonly BitSet _initializer_in_init_declarator289 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _97_in_type_specifier328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_type_specifier333 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_type_specifier338 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _84_in_type_specifier343 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _85_in_type_specifier348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _80_in_type_specifier353 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _76_in_type_specifier358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _89_in_type_specifier363 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _96_in_type_specifier368 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_or_union_specifier_in_type_specifier373 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_specifier_in_type_specifier378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_id_in_type_specifier383 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_gcc_qualifier413 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _66_in_gcc_qualifier418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_gcc_qualifier423 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_gcc_qualifier425 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_gcc_qualifier427 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _attribute_value_in_gcc_qualifier429 = new BitSet(new ulong[]{0x2080000000UL});
		public static readonly BitSet _37_in_gcc_qualifier432 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _attribute_value_in_gcc_qualifier434 = new BitSet(new ulong[]{0x2080000000UL});
		public static readonly BitSet _31_in_gcc_qualifier438 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_gcc_qualifier440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _67_in_gcc_qualifier445 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_attribute_value473 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _30_in_attribute_value477 = new BitSet(new ulong[]{0x140A50UL});
		public static readonly BitSet _constant_in_attribute_value479 = new BitSet(new ulong[]{0x2080000000UL});
		public static readonly BitSet _37_in_attribute_value482 = new BitSet(new ulong[]{0x140A50UL});
		public static readonly BitSet _constant_in_attribute_value484 = new BitSet(new ulong[]{0x2080000000UL});
		public static readonly BitSet _31_in_attribute_value488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_type_id506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_or_union_in_struct_or_union_specifier536 = new BitSet(new ulong[]{0x2000UL,0x1000000000UL});
		public static readonly BitSet _IDENTIFIER_in_struct_or_union_specifier538 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _100_in_struct_or_union_specifier541 = new BitSet(new ulong[]{0x2000UL,0x793315182UL});
		public static readonly BitSet _struct_declaration_list_in_struct_or_union_specifier543 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_struct_or_union_specifier545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_or_union_in_struct_or_union_specifier550 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_struct_or_union_specifier552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_struct_declaration_list579 = new BitSet(new ulong[]{0x2002UL,0x793315182UL});
		public static readonly BitSet _specifier_qualifier_list_in_struct_declaration591 = new BitSet(new ulong[]{0x400140002000UL});
		public static readonly BitSet _struct_declarator_list_in_struct_declaration593 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_struct_declaration595 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_qualifier_in_specifier_qualifier_list608 = new BitSet(new ulong[]{0x2002UL,0x793315182UL});
		public static readonly BitSet _type_specifier_in_specifier_qualifier_list612 = new BitSet(new ulong[]{0x2002UL,0x793315182UL});
		public static readonly BitSet _struct_declarator_in_struct_declarator_list626 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_struct_declarator_list629 = new BitSet(new ulong[]{0x400140002000UL});
		public static readonly BitSet _struct_declarator_in_struct_declarator_list631 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _declarator_in_struct_declarator644 = new BitSet(new ulong[]{0x400000000002UL});
		public static readonly BitSet _46_in_struct_declarator647 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _constant_expression_in_struct_declarator649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _46_in_struct_declarator656 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _constant_expression_in_struct_declarator658 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _78_in_enum_specifier676 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _100_in_enum_specifier678 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _enumerator_list_in_enum_specifier680 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_enum_specifier682 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _78_in_enum_specifier687 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_enum_specifier689 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _100_in_enum_specifier691 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _enumerator_list_in_enum_specifier693 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_enum_specifier695 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _78_in_enum_specifier700 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_enum_specifier702 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumerator_in_enumerator_list713 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_enumerator_list716 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _enumerator_in_enumerator_list718 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _IDENTIFIER_in_enumerator731 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _52_in_enumerator734 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _constant_expression_in_enumerator736 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_declarator772 = new BitSet(new ulong[]{0x40002000UL});
		public static readonly BitSet _direct_declarator_in_declarator775 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_declarator780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_direct_declarator795 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _30_in_direct_declarator806 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _declarator_in_direct_declarator808 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_direct_declarator810 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _declarator_suffix_in_direct_declarator818 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _59_in_declarator_suffix832 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _constant_expression_in_declarator_suffix834 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_declarator_suffix836 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_declarator_suffix843 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_declarator_suffix845 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_declarator_suffix852 = new BitSet(new ulong[]{0x8000000000002000UL,0x79B71D19FUL});
		public static readonly BitSet _parameter_type_list_in_declarator_suffix854 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_declarator_suffix856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_declarator_suffix863 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _identifier_list_in_declarator_suffix865 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_declarator_suffix867 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_declarator_suffix874 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_declarator_suffix876 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_pointer887 = new BitSet(new ulong[]{0x0UL,0x400000102UL});
		public static readonly BitSet _type_qualifier_in_pointer889 = new BitSet(new ulong[]{0x100000002UL,0x400000102UL});
		public static readonly BitSet _pointer_in_pointer892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_pointer898 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _pointer_in_pointer900 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_pointer905 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameter_list_in_parameter_type_list916 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_parameter_type_list919 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _43_in_parameter_type_list921 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameter_declaration_in_parameter_list934 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_parameter_list937 = new BitSet(new ulong[]{0x8000000000002000UL,0x79B71D19FUL});
		public static readonly BitSet _parameter_declaration_in_parameter_list939 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _declaration_specifiers_in_parameter_declaration952 = new BitSet(new ulong[]{0x800000140002002UL});
		public static readonly BitSet _declarator_in_parameter_declaration955 = new BitSet(new ulong[]{0x800000140002002UL});
		public static readonly BitSet _abstract_declarator_in_parameter_declaration957 = new BitSet(new ulong[]{0x800000140002002UL});
		public static readonly BitSet _IDENTIFIER_in_identifier_list970 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_identifier_list973 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_identifier_list975 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _specifier_qualifier_list_in_type_name988 = new BitSet(new ulong[]{0x800000140000002UL});
		public static readonly BitSet _abstract_declarator_in_type_name990 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_abstract_declarator1002 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _direct_abstract_declarator_in_abstract_declarator1004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _direct_abstract_declarator_in_abstract_declarator1010 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_direct_abstract_declarator1023 = new BitSet(new ulong[]{0x800000140000000UL});
		public static readonly BitSet _abstract_declarator_in_direct_abstract_declarator1025 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_direct_abstract_declarator1027 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _abstract_declarator_suffix_in_direct_abstract_declarator1031 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _abstract_declarator_suffix_in_direct_abstract_declarator1035 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _59_in_abstract_declarator_suffix1047 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_abstract_declarator_suffix1049 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_abstract_declarator_suffix1054 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _constant_expression_in_abstract_declarator_suffix1056 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_abstract_declarator_suffix1058 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_abstract_declarator_suffix1063 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_abstract_declarator_suffix1065 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_abstract_declarator_suffix1070 = new BitSet(new ulong[]{0x8000000000002000UL,0x79B71D19FUL});
		public static readonly BitSet _parameter_type_list_in_abstract_declarator_suffix1072 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_abstract_declarator_suffix1074 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignment_expression_in_initializer1086 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_initializer1091 = new BitSet(new ulong[]{0xCD50942A50UL,0x21004000000UL});
		public static readonly BitSet _initializer_list_in_initializer1093 = new BitSet(new ulong[]{0x2000000000UL,0x10000000000UL});
		public static readonly BitSet _37_in_initializer1095 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_initializer1098 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _initializer_in_initializer_list1109 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_initializer_list1112 = new BitSet(new ulong[]{0xCD50942A50UL,0x21004000000UL});
		public static readonly BitSet _initializer_in_initializer_list1114 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _assignment_expression_in_argument_expression_list1131 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_argument_expression_list1134 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _assignment_expression_in_argument_expression_list1136 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression1150 = new BitSet(new ulong[]{0x4400000002UL});
		public static readonly BitSet _34_in_additive_expression1154 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression1156 = new BitSet(new ulong[]{0x4400000002UL});
		public static readonly BitSet _38_in_additive_expression1160 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression1162 = new BitSet(new ulong[]{0x4400000002UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1176 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _32_in_multiplicative_expression1180 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1182 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _44_in_multiplicative_expression1186 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1188 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _25_in_multiplicative_expression1192 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1194 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _30_in_cast_expression1207 = new BitSet(new ulong[]{0x2000UL,0x793315182UL});
		public static readonly BitSet _type_name_in_cast_expression1209 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_cast_expression1211 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _cast_expression_in_cast_expression1213 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expression_in_cast_expression1218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _postfix_expression_in_unary_expression1229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _35_in_unary_expression1234 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _unary_expression_in_unary_expression1236 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _39_in_unary_expression1241 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _unary_expression_in_unary_expression1243 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_operator_in_unary_expression1248 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _cast_expression_in_unary_expression1250 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_unary_expression1255 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _unary_expression_in_unary_expression1257 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_unary_expression1262 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_unary_expression1264 = new BitSet(new ulong[]{0x2000UL,0x793315182UL});
		public static readonly BitSet _type_name_in_unary_expression1266 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_unary_expression1268 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_expression_in_postfix_expression1281 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _59_in_postfix_expression1289 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _expression_in_postfix_expression1291 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_postfix_expression1293 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _30_in_postfix_expression1301 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_postfix_expression1303 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _30_in_postfix_expression1311 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _argument_expression_list_in_postfix_expression1313 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_postfix_expression1315 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _42_in_postfix_expression1323 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_postfix_expression1325 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _41_in_postfix_expression1333 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_postfix_expression1335 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _35_in_postfix_expression1343 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _39_in_postfix_expression1351 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _IDENTIFIER_in_primary_expression1403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_in_primary_expression1408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_primary_expression1413 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _expression_in_primary_expression1415 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_primary_expression1417 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _hex_literal_in_constant1430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _octal_literal_in_constant1437 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _decimal_literal_in_constant1444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _character_literal_in_constant1451 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_literal_in_constant1458 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _floating_point_literal_in_constant1465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HEX_LITERAL_in_hex_literal1476 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OCTAL_LITERAL_in_octal_literal1487 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECIMAL_LITERAL_in_decimal_literal1498 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHARACTER_LITERAL_in_character_literal1509 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_string_literal1520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLOATING_POINT_LITERAL_in_floating_point_literal1531 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignment_expression_in_expression1544 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_expression1547 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _assignment_expression_in_expression1549 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _conditional_expression_in_constant_expression1562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_assignment_expression1573 = new BitSet(new ulong[]{0x4214211224000000UL,0x4000000000UL});
		public static readonly BitSet _assignment_operator_in_assignment_expression1575 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _assignment_expression_in_assignment_expression1577 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditional_expression_in_assignment_expression1582 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expression_in_lvalue1594 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logical_or_expression_in_conditional_expression1666 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _58_in_conditional_expression1669 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _expression_in_conditional_expression1671 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_conditional_expression1673 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _conditional_expression_in_conditional_expression1675 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logical_and_expression_in_logical_or_expression1688 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _103_in_logical_or_expression1691 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _logical_and_expression_in_logical_or_expression1693 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _inclusive_or_expression_in_logical_and_expression1706 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _27_in_logical_and_expression1709 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _inclusive_or_expression_in_logical_and_expression1711 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _exclusive_or_expression_in_inclusive_or_expression1724 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _101_in_inclusive_or_expression1727 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _exclusive_or_expression_in_inclusive_or_expression1729 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _and_expression_in_exclusive_or_expression1742 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _61_in_exclusive_or_expression1745 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _and_expression_in_exclusive_or_expression1747 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _equality_expression_in_and_expression1760 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _28_in_and_expression1763 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _equality_expression_in_and_expression1765 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _relational_expression_in_equality_expression1777 = new BitSet(new ulong[]{0x20000001000002UL});
		public static readonly BitSet _set_in_equality_expression1780 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _relational_expression_in_equality_expression1786 = new BitSet(new ulong[]{0x20000001000002UL});
		public static readonly BitSet _shift_expression_in_relational_expression1799 = new BitSet(new ulong[]{0xC9000000000002UL});
		public static readonly BitSet _set_in_relational_expression1802 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _shift_expression_in_relational_expression1812 = new BitSet(new ulong[]{0xC9000000000002UL});
		public static readonly BitSet _additive_expression_in_shift_expression1825 = new BitSet(new ulong[]{0x102000000000002UL});
		public static readonly BitSet _set_in_shift_expression1828 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _additive_expression_in_shift_expression1834 = new BitSet(new ulong[]{0x102000000000002UL});
		public static readonly BitSet _labeled_statement_in_statement1849 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _compound_statement_in_statement1854 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_statement_in_statement1859 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selection_statement_in_statement1864 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _iteration_statement_in_statement1869 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _jump_statement_in_statement1874 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_labeled_statement1885 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_labeled_statement1887 = new BitSet(new ulong[]{0x80CD50942A50UL,0x218248E0E60UL});
		public static readonly BitSet _statement_in_labeled_statement1889 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _70_in_labeled_statement1894 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _constant_expression_in_labeled_statement1896 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_labeled_statement1898 = new BitSet(new ulong[]{0x80CD50942A50UL,0x218248E0E60UL});
		public static readonly BitSet _statement_in_labeled_statement1900 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _74_in_labeled_statement1905 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_labeled_statement1907 = new BitSet(new ulong[]{0x80CD50942A50UL,0x218248E0E60UL});
		public static readonly BitSet _statement_in_labeled_statement1909 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_compound_statement1931 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x31FFFFFDFFFUL});
		public static readonly BitSet _declaration_in_compound_statement1933 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x31FFFFFDFFFUL});
		public static readonly BitSet _statement_list_in_compound_statement1936 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_compound_statement1939 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_statement_list1950 = new BitSet(new ulong[]{0x80CD50942A52UL,0x218248E0E60UL});
		public static readonly BitSet _47_in_expression_statement1962 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_statement1967 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_expression_statement1969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_selection_statement1980 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_selection_statement1982 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _expression_in_selection_statement1984 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_selection_statement1986 = new BitSet(new ulong[]{0x80CD50942A50UL,0x218248E0E60UL});
		public static readonly BitSet _statement_in_selection_statement1988 = new BitSet(new ulong[]{0x2UL,0x2000UL});
		public static readonly BitSet _77_in_selection_statement2003 = new BitSet(new ulong[]{0x80CD50942A50UL,0x218248E0E60UL});
		public static readonly BitSet _statement_in_selection_statement2005 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_selection_statement2012 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_selection_statement2014 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _expression_in_selection_statement2016 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_selection_statement2018 = new BitSet(new ulong[]{0x80CD50942A50UL,0x218248E0E60UL});
		public static readonly BitSet _statement_in_selection_statement2020 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _99_in_iteration_statement2031 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_iteration_statement2033 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _expression_in_iteration_statement2035 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_iteration_statement2037 = new BitSet(new ulong[]{0x80CD50942A50UL,0x218248E0E60UL});
		public static readonly BitSet _statement_in_iteration_statement2039 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _75_in_iteration_statement2044 = new BitSet(new ulong[]{0x80CD50942A50UL,0x218248E0E60UL});
		public static readonly BitSet _statement_in_iteration_statement2046 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _99_in_iteration_statement2048 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_iteration_statement2050 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _expression_in_iteration_statement2052 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_iteration_statement2054 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_iteration_statement2056 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_iteration_statement2061 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_iteration_statement2063 = new BitSet(new ulong[]{0x80CD50942A50UL,0x20004000000UL});
		public static readonly BitSet _expression_statement_in_iteration_statement2065 = new BitSet(new ulong[]{0x80CD50942A50UL,0x20004000000UL});
		public static readonly BitSet _expression_statement_in_iteration_statement2067 = new BitSet(new ulong[]{0xCDD0942A50UL,0x20004000000UL});
		public static readonly BitSet _expression_in_iteration_statement2069 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_iteration_statement2072 = new BitSet(new ulong[]{0x80CD50942A50UL,0x218248E0E60UL});
		public static readonly BitSet _statement_in_iteration_statement2074 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_jump_statement2085 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_jump_statement2087 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2089 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _73_in_jump_statement2094 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2096 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _69_in_jump_statement2101 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2103 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _87_in_jump_statement2108 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2110 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _87_in_jump_statement2115 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _expression_in_jump_statement2117 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2119 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred2_C94 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred4_C94 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _declarator_in_synpred4_C97 = new BitSet(new ulong[]{0x8000000000002000UL,0x17DB71D19FUL});
		public static readonly BitSet _declaration_in_synpred4_C99 = new BitSet(new ulong[]{0x8000000000002000UL,0x17DB71D19FUL});
		public static readonly BitSet _100_in_synpred4_C102 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred5_C134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred9_C186 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_specifier_in_synpred13_C234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_specifier_in_synpred43_C612 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_synpred54_C772 = new BitSet(new ulong[]{0x40002000UL});
		public static readonly BitSet _direct_declarator_in_synpred54_C775 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declarator_suffix_in_synpred56_C818 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred59_C852 = new BitSet(new ulong[]{0x8000000000002000UL,0x79B71D19FUL});
		public static readonly BitSet _parameter_type_list_in_synpred59_C854 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred59_C856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred60_C863 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _identifier_list_in_synpred60_C865 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred60_C867 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_qualifier_in_synpred61_C889 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_synpred62_C892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_synpred63_C887 = new BitSet(new ulong[]{0x0UL,0x400000102UL});
		public static readonly BitSet _type_qualifier_in_synpred63_C889 = new BitSet(new ulong[]{0x100000002UL,0x400000102UL});
		public static readonly BitSet _pointer_in_synpred63_C892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_synpred64_C898 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _pointer_in_synpred64_C900 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declarator_in_synpred67_C955 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _abstract_declarator_in_synpred68_C957 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _direct_abstract_declarator_in_synpred71_C1004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _abstract_declarator_suffix_in_synpred74_C1035 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred87_C1207 = new BitSet(new ulong[]{0x2000UL,0x793315182UL});
		public static readonly BitSet _type_name_in_synpred87_C1209 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred87_C1211 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _cast_expression_in_synpred87_C1213 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_synpred92_C1255 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _unary_expression_in_synpred92_C1257 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_synpred113_C1573 = new BitSet(new ulong[]{0x4214211224000000UL,0x4000000000UL});
		public static readonly BitSet _assignment_operator_in_synpred113_C1575 = new BitSet(new ulong[]{0xCD50942A50UL,0x20004000000UL});
		public static readonly BitSet _assignment_expression_in_synpred113_C1577 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_synpred145_C1933 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
