using Code2Xml.Core.Antlr;
using System;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C.g 2012-03-01 00:25:14

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;
/** ANSI C ANTLR v3 grammar

Translated from Jutta Degener's 1995 ANSI C yacc grammar by Terence Parr
July 2006.  The lexical rules were taken from the Java grammar.

Jutta says: "In 1985, Jeff Lee published his Yacc grammar (which
is accompanied by a matching Lex specification) for the April 30, 1985 draft
version of the ANSI C standard.  Tom Stockfisch reposted it to net.sources in
1987; that original, as mentioned in the answer to question 17.25 of the
comp.lang.c FAQ, can be ftp'ed from ftp.uu.net,
   file usenet/net.sources/ansi.c.grammar.Z.
I intend to keep this version as close to the current C Standard grammar as
possible; please let me know if you discover discrepancies. Jutta Degener, 1995"

Generally speaking, you need symbol table info to parse C; typedefs
define types and then IDENTIFIERS are either types or plain IDs.  I'm doing
the min necessary here tracking only type names.  This is a good example
of the global scope (called Symbols).  Every rule that declares its usage
of Symbols pushes a new copy on the stack effectively creating a new
symbol scope.  Also note rule declaration declares a rule scope that
lets any invoked rule see isTypedef boolean.  It's much easier than
passing that info down as parameters.  Very clean.  Rule
direct_declarator can then easily determine whether the IDENTIFIER
should be declared as a type name.

I have only tested this on a single file, though it is 3500 lines.

This grammar requires ANTLR v3.0.1 or higher.

Terence Parr
July 2006
*/
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class CParser : Antlr.Runtime.Parser, IAntlrParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "CHARACTER_LITERAL", "COMMENT", "DECIMAL_LITERAL", "EscapeSequence", "Exponent", "FLOATING_POINT_LITERAL", "FloatTypeSuffix", "HEX_LITERAL", "HexDigit", "IDENTIFIER", "IntegerTypeSuffix", "LETTER", "LINE_COMMAND", "LINE_COMMENT", "OCTAL_LITERAL", "OctalEscape", "STRING_LITERAL", "UnicodeEscape", "WS", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'.'", "'...'", "'/'", "'/='", "':'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'['", "']'", "'^'", "'^='", "'auto'", "'break'", "'case'", "'char'", "'const'", "'continue'", "'default'", "'do'", "'double'", "'else'", "'enum'", "'extern'", "'float'", "'for'", "'goto'", "'if'", "'int'", "'long'", "'register'", "'return'", "'short'", "'signed'", "'sizeof'", "'static'", "'struct'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "'while'", "'{'", "'|'", "'|='", "'||'", "'}'", "'~'"
	};
	public const int EOF=-1;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int CHARACTER_LITERAL=4;
	public const int COMMENT=5;
	public const int DECIMAL_LITERAL=6;
	public const int EscapeSequence=7;
	public const int Exponent=8;
	public const int FLOATING_POINT_LITERAL=9;
	public const int FloatTypeSuffix=10;
	public const int HEX_LITERAL=11;
	public const int HexDigit=12;
	public const int IDENTIFIER=13;
	public const int IntegerTypeSuffix=14;
	public const int LETTER=15;
	public const int LINE_COMMAND=16;
	public const int LINE_COMMENT=17;
	public const int OCTAL_LITERAL=18;
	public const int OctalEscape=19;
	public const int STRING_LITERAL=20;
	public const int UnicodeEscape=21;
	public const int WS=22;

	protected sealed partial class Symbols_scope
	{
		public Set types;

		public Symbols_scope(CParser grammar) { OnCreated(grammar); }
		partial void OnCreated(CParser grammar);
	}
	partial void Symbols_scopeInit( Symbols_scope scope );
	partial void Symbols_scopeAfter( Symbols_scope scope );
	protected readonly ListStack<Symbols_scope> Symbols_stack = new ListStack<Symbols_scope>();

	public CParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public CParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[219+1];


		XmlTreeAdaptor treeAdaptor = default(XmlTreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new XmlTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref XmlTreeAdaptor adaptor);

	private XmlTreeAdaptor adaptor;

	public XmlTreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return CParser.tokenNames; } }
	public override string GrammarFileName { get { return "C.g"; } }


	    boolean isTypeName(String name) {
	        for (int i = Symbols_stack.size()-1; i>=0; i--) {
	            Symbols_scope scope = (Symbols_scope)Symbols_stack.get(i);
	            if ( scope.types.contains(name) ) {
	                return true;
	            }
	        }
	        return false;
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_translation_unit();
	partial void LeaveRule_translation_unit();

	// $ANTLR start "translation_unit"
	// C.g:58:1: translation_unit : ( external_declaration )+ ;
	[GrammarRule("translation_unit")]
	public XAstParserRuleReturnScope translation_unit()
	{
		EnterRule_translation_unit();
		EnterRule("translation_unit", 1);
		var retval = new XAstParserRuleReturnScope("translation_unit");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int translation_unit_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope external_declaration1 = default(XAstParserRuleReturnScope);


		  Symbols_stack.Peek().types =  new HashSet();

		try { DebugEnterRule(GrammarFileName, "translation_unit");
		DebugLocation(58, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// C.g:63:5: ( ( external_declaration )+ )
			DebugEnterAlt(1);
			// C.g:63:7: ( external_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(63, 7);
			// C.g:63:7: ( external_declaration )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==IDENTIFIER||LA1_0==30||LA1_0==32||LA1_0==63||(LA1_0>=66 && LA1_0<=67)||LA1_0==71||(LA1_0>=73 && LA1_0<=75)||(LA1_0>=79 && LA1_0<=81)||(LA1_0>=83 && LA1_0<=84)||(LA1_0>=86 && LA1_0<=87)||(LA1_0>=89 && LA1_0<=93)))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:63:7: external_declaration
					{
					DebugLocation(63, 7);
					PushFollow(Follow._external_declaration_in_translation_unit89);
					external_declaration1=external_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, external_declaration1.Tree, external_declaration1, retval);

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("translation_unit", 1);
			LeaveRule("translation_unit", 1);
			LeaveRule_translation_unit();
			if (state.backtracking > 0) { Memoize(input, 1, translation_unit_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(64, 4);
		} finally { DebugExitRule(GrammarFileName, "translation_unit"); }
		return retval;

	}
	// $ANTLR end "translation_unit"

	partial void EnterRule_external_declaration();
	partial void LeaveRule_external_declaration();

	// $ANTLR start "external_declaration"
	// C.g:80:1: external_declaration options {k=1; } : ( ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition | declaration );
	[GrammarRule("external_declaration")]
	public XAstParserRuleReturnScope external_declaration()
	{
		EnterRule_external_declaration();
		EnterRule("external_declaration", 2);
		var retval = new XAstParserRuleReturnScope("external_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int external_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope function_definition2 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declaration3 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "external_declaration");
		DebugLocation(80, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// C.g:82:5: ( ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition | declaration )
			int alt2=2;
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0==63||LA2_0==74||LA2_0==81||LA2_0==86))
			{
				int LA2_1 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==92))
			{
				int LA2_2 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==66))
			{
				int LA2_3 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==83))
			{
				int LA2_4 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==79))
			{
				int LA2_5 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==80))
			{
				int LA2_6 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==75))
			{
				int LA2_7 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==71))
			{
				int LA2_8 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==84))
			{
				int LA2_9 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==91))
			{
				int LA2_10 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 10, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==87||LA2_0==90))
			{
				int LA2_11 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==73))
			{
				int LA2_12 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 12, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==IDENTIFIER))
			{
				int LA2_13 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if (((isTypeName(input.LT(1).getText()))))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 13, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==67||LA2_0==93))
			{
				int LA2_14 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 14, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==32) && (EvaluatePredicate(synpred4_C_fragment)))
			{
				alt2 = 1;
			}
			else if ((LA2_0==30) && (EvaluatePredicate(synpred4_C_fragment)))
			{
				alt2 = 1;
			}
			else if ((LA2_0==89))
			{
				alt2 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:82:7: ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(82, 65);
				PushFollow(Follow._function_definition_in_external_declaration131);
				function_definition2=function_definition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, function_definition2.Tree, function_definition2, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:83:7: declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(83, 7);
				PushFollow(Follow._declaration_in_external_declaration139);
				declaration3=declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration3.Tree, declaration3, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("external_declaration", 2);
			LeaveRule("external_declaration", 2);
			LeaveRule_external_declaration();
			if (state.backtracking > 0) { Memoize(input, 2, external_declaration_StartIndex); }

		}
		DebugLocation(84, 4);
		} finally { DebugExitRule(GrammarFileName, "external_declaration"); }
		return retval;

	}
	// $ANTLR end "external_declaration"

	partial void EnterRule_function_definition();
	partial void LeaveRule_function_definition();

	// $ANTLR start "function_definition"
	// C.g:86:1: function_definition : ( declaration_specifiers )? declarator ( ( declaration )+ compound_statement | compound_statement ) ;
	[GrammarRule("function_definition")]
	public XAstParserRuleReturnScope function_definition()
	{
		EnterRule_function_definition();
		EnterRule("function_definition", 3);
		var retval = new XAstParserRuleReturnScope("function_definition");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int function_definition_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope declaration_specifiers4 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator5 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declaration6 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope compound_statement7 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope compound_statement8 = default(XAstParserRuleReturnScope);


		  Symbols_stack.Peek().types =  new HashSet();

		try { DebugEnterRule(GrammarFileName, "function_definition");
		DebugLocation(86, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// C.g:91:5: ( ( declaration_specifiers )? declarator ( ( declaration )+ compound_statement | compound_statement ) )
			DebugEnterAlt(1);
			// C.g:91:7: ( declaration_specifiers )? declarator ( ( declaration )+ compound_statement | compound_statement )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(91, 7);
			// C.g:91:7: ( declaration_specifiers )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0==63||(LA3_0>=66 && LA3_0<=67)||LA3_0==71||(LA3_0>=73 && LA3_0<=75)||(LA3_0>=79 && LA3_0<=81)||(LA3_0>=83 && LA3_0<=84)||(LA3_0>=86 && LA3_0<=87)||(LA3_0>=90 && LA3_0<=93)))
			{
				alt3 = 1;
			}
			else if ((LA3_0==IDENTIFIER))
			{
				switch (input.LA(2))
				{
				case 32:
					{
					alt3 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA3_18 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 30:
					{
					int LA3_19 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 63:
				case 74:
				case 81:
				case 86:
					{
					int LA3_20 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 92:
					{
					int LA3_21 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 66:
					{
					int LA3_22 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 83:
					{
					int LA3_23 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 79:
					{
					int LA3_24 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 80:
					{
					int LA3_25 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 75:
					{
					int LA3_26 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 71:
					{
					int LA3_27 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 84:
					{
					int LA3_28 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 91:
					{
					int LA3_29 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 87:
				case 90:
					{
					int LA3_30 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 73:
					{
					int LA3_31 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 67:
				case 93:
					{
					int LA3_32 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				}

			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:91:7: declaration_specifiers
				{
				DebugLocation(91, 7);
				PushFollow(Follow._declaration_specifiers_in_function_definition167);
				declaration_specifiers4=declaration_specifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers4.Tree, declaration_specifiers4, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(91, 31);
			PushFollow(Follow._declarator_in_function_definition170);
			declarator5=declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, declarator5.Tree, declarator5, retval);
			DebugLocation(92, 9);
			// C.g:92:9: ( ( declaration )+ compound_statement | compound_statement )
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0==IDENTIFIER||LA5_0==63||(LA5_0>=66 && LA5_0<=67)||LA5_0==71||(LA5_0>=73 && LA5_0<=75)||(LA5_0>=79 && LA5_0<=81)||(LA5_0>=83 && LA5_0<=84)||(LA5_0>=86 && LA5_0<=87)||(LA5_0>=89 && LA5_0<=93)))
			{
				alt5 = 1;
			}
			else if ((LA5_0==95))
			{
				alt5 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:92:11: ( declaration )+ compound_statement
				{
				DebugLocation(92, 11);
				// C.g:92:11: ( declaration )+
				int cnt4=0;
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if ((LA4_0==IDENTIFIER||LA4_0==63||(LA4_0>=66 && LA4_0<=67)||LA4_0==71||(LA4_0>=73 && LA4_0<=75)||(LA4_0>=79 && LA4_0<=81)||(LA4_0>=83 && LA4_0<=84)||(LA4_0>=86 && LA4_0<=87)||(LA4_0>=89 && LA4_0<=93)))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:92:11: declaration
						{
						DebugLocation(92, 11);
						PushFollow(Follow._declaration_in_function_definition182);
						declaration6=declaration();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, declaration6.Tree, declaration6, retval);

						}
						break;

					default:
						if (cnt4 >= 1)
							goto loop4;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee4 = new EarlyExitException( 4, input );
						DebugRecognitionException(eee4);
						throw eee4;
					}
					cnt4++;
				}
				loop4:
					;

				} finally { DebugExitSubRule(4); }

				DebugLocation(92, 24);
				PushFollow(Follow._compound_statement_in_function_definition185);
				compound_statement7=compound_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, compound_statement7.Tree, compound_statement7, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:93:11: compound_statement
				{
				DebugLocation(93, 11);
				PushFollow(Follow._compound_statement_in_function_definition198);
				compound_statement8=compound_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, compound_statement8.Tree, compound_statement8, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function_definition", 3);
			LeaveRule("function_definition", 3);
			LeaveRule_function_definition();
			if (state.backtracking > 0) { Memoize(input, 3, function_definition_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(95, 4);
		} finally { DebugExitRule(GrammarFileName, "function_definition"); }
		return retval;

	}
	// $ANTLR end "function_definition"

	protected sealed partial class declaration_scope
	{
		public boolean isTypedef;

		public declaration_scope(CParser grammar) { OnCreated(grammar); }
		partial void OnCreated(CParser grammar);
	}
	partial void declaration_scopeInit( declaration_scope scope );
	partial void declaration_scopeAfter( declaration_scope scope );
	protected readonly ListStack<declaration_scope> declaration_stack = new ListStack<declaration_scope>();

	partial void EnterRule_declaration();
	partial void LeaveRule_declaration();

	// $ANTLR start "declaration"
	// C.g:97:1: declaration : ( 'typedef' ( declaration_specifiers )? init_declarator_list ';' | declaration_specifiers ( init_declarator_list )? ';' );
	[GrammarRule("declaration")]
	public XAstParserRuleReturnScope declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 4);
		var retval = new XAstParserRuleReturnScope("declaration");
		declaration_stack.Push(new declaration_scope(this));declaration_scopeInit(declaration_stack.Peek());
		
		retval.Start = (IToken)input.LT(1);
		int declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal9 = default(IToken);
		IToken char_literal12 = default(IToken);
		IToken char_literal15 = default(IToken);
		XAstParserRuleReturnScope declaration_specifiers10 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope init_declarator_list11 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declaration_specifiers13 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope init_declarator_list14 = default(XAstParserRuleReturnScope);

		object string_literal9_tree = default(object);
		object char_literal12_tree = default(object);
		object char_literal15_tree = default(object);

		  declaration_stack.Peek().isTypedef =  false;

		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(97, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// C.g:104:5: ( 'typedef' ( declaration_specifiers )? init_declarator_list ';' | declaration_specifiers ( init_declarator_list )? ';' )
			int alt8=2;
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0==89))
			{
				alt8 = 1;
			}
			else if ((LA8_0==IDENTIFIER||LA8_0==63||(LA8_0>=66 && LA8_0<=67)||LA8_0==71||(LA8_0>=73 && LA8_0<=75)||(LA8_0>=79 && LA8_0<=81)||(LA8_0>=83 && LA8_0<=84)||(LA8_0>=86 && LA8_0<=87)||(LA8_0>=90 && LA8_0<=93)))
			{
				alt8 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:104:7: 'typedef' ( declaration_specifiers )? init_declarator_list ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(104, 7);
				string_literal9=(IToken)Match(input,89,Follow._89_in_declaration238); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal9_tree = (object)adaptor.Create(string_literal9, retval);
				adaptor.AddChild(root_0, string_literal9_tree);
				}
				DebugLocation(104, 17);
				// C.g:104:17: ( declaration_specifiers )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==63||(LA6_0>=66 && LA6_0<=67)||LA6_0==71||(LA6_0>=73 && LA6_0<=75)||(LA6_0>=79 && LA6_0<=81)||(LA6_0>=83 && LA6_0<=84)||(LA6_0>=86 && LA6_0<=87)||(LA6_0>=90 && LA6_0<=93)))
				{
					alt6 = 1;
				}
				else if ((LA6_0==IDENTIFIER))
				{
					int LA6_13 = input.LA(2);

					if ((LA6_13==IDENTIFIER||LA6_13==32||LA6_13==63||(LA6_13>=66 && LA6_13<=67)||LA6_13==71||(LA6_13>=73 && LA6_13<=75)||(LA6_13>=79 && LA6_13<=81)||(LA6_13>=83 && LA6_13<=84)||(LA6_13>=86 && LA6_13<=87)||(LA6_13>=90 && LA6_13<=93)))
					{
						alt6 = 1;
					}
					else if ((LA6_13==30))
					{
						int LA6_19 = input.LA(3);

						if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred8_C_fragment))))
						{
							alt6 = 1;
						}
					}
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:104:17: declaration_specifiers
					{
					DebugLocation(104, 17);
					PushFollow(Follow._declaration_specifiers_in_declaration240);
					declaration_specifiers10=declaration_specifiers();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers10.Tree, declaration_specifiers10, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(104, 41);
				if (state.backtracking == 0)
				{
					declaration_stack.Peek().isTypedef = true;
				}
				DebugLocation(105, 7);
				PushFollow(Follow._init_declarator_list_in_declaration251);
				init_declarator_list11=init_declarator_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator_list11.Tree, init_declarator_list11, retval);
				DebugLocation(105, 28);
				char_literal12=(IToken)Match(input,47,Follow._47_in_declaration253); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal12_tree = (object)adaptor.Create(char_literal12, retval);
				adaptor.AddChild(root_0, char_literal12_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:106:7: declaration_specifiers ( init_declarator_list )? ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(106, 7);
				PushFollow(Follow._declaration_specifiers_in_declaration262);
				declaration_specifiers13=declaration_specifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers13.Tree, declaration_specifiers13, retval);
				DebugLocation(106, 30);
				// C.g:106:30: ( init_declarator_list )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==IDENTIFIER||LA7_0==30||LA7_0==32))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:106:30: init_declarator_list
					{
					DebugLocation(106, 30);
					PushFollow(Follow._init_declarator_list_in_declaration264);
					init_declarator_list14=init_declarator_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator_list14.Tree, init_declarator_list14, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(106, 52);
				char_literal15=(IToken)Match(input,47,Follow._47_in_declaration267); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal15_tree = (object)adaptor.Create(char_literal15, retval);
				adaptor.AddChild(root_0, char_literal15_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 4);
			LeaveRule("declaration", 4);
			LeaveRule_declaration();
			if (state.backtracking > 0) { Memoize(input, 4, declaration_StartIndex); }

			declaration_scopeAfter(declaration_stack.Peek());declaration_stack.Pop();
		}
		DebugLocation(107, 4);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"

	partial void EnterRule_declaration_specifiers();
	partial void LeaveRule_declaration_specifiers();

	// $ANTLR start "declaration_specifiers"
	// C.g:109:1: declaration_specifiers : ( storage_class_specifier | type_specifier | type_qualifier )+ ;
	[GrammarRule("declaration_specifiers")]
	public XAstParserRuleReturnScope declaration_specifiers()
	{
		EnterRule_declaration_specifiers();
		EnterRule("declaration_specifiers", 5);
		var retval = new XAstParserRuleReturnScope("declaration_specifiers");
		
		retval.Start = (IToken)input.LT(1);
		int declaration_specifiers_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope storage_class_specifier16 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_specifier17 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_qualifier18 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "declaration_specifiers");
		DebugLocation(109, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// C.g:110:5: ( ( storage_class_specifier | type_specifier | type_qualifier )+ )
			DebugEnterAlt(1);
			// C.g:110:9: ( storage_class_specifier | type_specifier | type_qualifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(110, 9);
			// C.g:110:9: ( storage_class_specifier | type_specifier | type_qualifier )+
			int cnt9=0;
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=4;
				try { DebugEnterDecision(9, false);
				switch (input.LA(1))
				{
				case IDENTIFIER:
					{
					int LA9_2 = input.LA(2);

					if ((((EvaluatePredicate(synpred12_C_fragment)&&EvaluatePredicate(synpred12_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt9 = 2;
					}


					}
					break;
				case 63:
				case 74:
				case 81:
				case 86:
					{
					alt9 = 1;
					}
					break;
				case 66:
				case 71:
				case 73:
				case 75:
				case 79:
				case 80:
				case 83:
				case 84:
				case 87:
				case 90:
				case 91:
				case 92:
					{
					alt9 = 2;
					}
					break;
				case 67:
				case 93:
					{
					alt9 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:110:13: storage_class_specifier
					{
					DebugLocation(110, 13);
					PushFollow(Follow._storage_class_specifier_in_declaration_specifiers290);
					storage_class_specifier16=storage_class_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, storage_class_specifier16.Tree, storage_class_specifier16, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:111:13: type_specifier
					{
					DebugLocation(111, 13);
					PushFollow(Follow._type_specifier_in_declaration_specifiers304);
					type_specifier17=type_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_specifier17.Tree, type_specifier17, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C.g:112:13: type_qualifier
					{
					DebugLocation(112, 13);
					PushFollow(Follow._type_qualifier_in_declaration_specifiers318);
					type_qualifier18=type_qualifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier18.Tree, type_qualifier18, retval);

					}
					break;

				default:
					if (cnt9 >= 1)
						goto loop9;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee9 = new EarlyExitException( 9, input );
					DebugRecognitionException(eee9);
					throw eee9;
				}
				cnt9++;
			}
			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration_specifiers", 5);
			LeaveRule("declaration_specifiers", 5);
			LeaveRule_declaration_specifiers();
			if (state.backtracking > 0) { Memoize(input, 5, declaration_specifiers_StartIndex); }

		}
		DebugLocation(114, 4);
		} finally { DebugExitRule(GrammarFileName, "declaration_specifiers"); }
		return retval;

	}
	// $ANTLR end "declaration_specifiers"

	partial void EnterRule_init_declarator_list();
	partial void LeaveRule_init_declarator_list();

	// $ANTLR start "init_declarator_list"
	// C.g:116:1: init_declarator_list : init_declarator ( ',' init_declarator )* ;
	[GrammarRule("init_declarator_list")]
	public XAstParserRuleReturnScope init_declarator_list()
	{
		EnterRule_init_declarator_list();
		EnterRule("init_declarator_list", 6);
		var retval = new XAstParserRuleReturnScope("init_declarator_list");
		
		retval.Start = (IToken)input.LT(1);
		int init_declarator_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal20 = default(IToken);
		XAstParserRuleReturnScope init_declarator19 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope init_declarator21 = default(XAstParserRuleReturnScope);

		object char_literal20_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "init_declarator_list");
		DebugLocation(116, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// C.g:117:5: ( init_declarator ( ',' init_declarator )* )
			DebugEnterAlt(1);
			// C.g:117:7: init_declarator ( ',' init_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(117, 7);
			PushFollow(Follow._init_declarator_in_init_declarator_list346);
			init_declarator19=init_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator19.Tree, init_declarator19, retval);
			DebugLocation(117, 23);
			// C.g:117:23: ( ',' init_declarator )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==37))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:117:24: ',' init_declarator
					{
					DebugLocation(117, 24);
					char_literal20=(IToken)Match(input,37,Follow._37_in_init_declarator_list349); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal20_tree = (object)adaptor.Create(char_literal20, retval);
					adaptor.AddChild(root_0, char_literal20_tree);
					}
					DebugLocation(117, 28);
					PushFollow(Follow._init_declarator_in_init_declarator_list351);
					init_declarator21=init_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator21.Tree, init_declarator21, retval);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("init_declarator_list", 6);
			LeaveRule("init_declarator_list", 6);
			LeaveRule_init_declarator_list();
			if (state.backtracking > 0) { Memoize(input, 6, init_declarator_list_StartIndex); }

		}
		DebugLocation(118, 4);
		} finally { DebugExitRule(GrammarFileName, "init_declarator_list"); }
		return retval;

	}
	// $ANTLR end "init_declarator_list"

	partial void EnterRule_init_declarator();
	partial void LeaveRule_init_declarator();

	// $ANTLR start "init_declarator"
	// C.g:120:1: init_declarator : declarator ( '=' initializer )? ;
	[GrammarRule("init_declarator")]
	public XAstParserRuleReturnScope init_declarator()
	{
		EnterRule_init_declarator();
		EnterRule("init_declarator", 7);
		var retval = new XAstParserRuleReturnScope("init_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int init_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal23 = default(IToken);
		XAstParserRuleReturnScope declarator22 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope initializer24 = default(XAstParserRuleReturnScope);

		object char_literal23_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "init_declarator");
		DebugLocation(120, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// C.g:121:5: ( declarator ( '=' initializer )? )
			DebugEnterAlt(1);
			// C.g:121:7: declarator ( '=' initializer )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(121, 7);
			PushFollow(Follow._declarator_in_init_declarator370);
			declarator22=declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, declarator22.Tree, declarator22, retval);
			DebugLocation(121, 18);
			// C.g:121:18: ( '=' initializer )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_0 = input.LA(1);

			if ((LA11_0==52))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:121:19: '=' initializer
				{
				DebugLocation(121, 19);
				char_literal23=(IToken)Match(input,52,Follow._52_in_init_declarator373); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal23_tree = (object)adaptor.Create(char_literal23, retval);
				adaptor.AddChild(root_0, char_literal23_tree);
				}
				DebugLocation(121, 23);
				PushFollow(Follow._initializer_in_init_declarator375);
				initializer24=initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, initializer24.Tree, initializer24, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("init_declarator", 7);
			LeaveRule("init_declarator", 7);
			LeaveRule_init_declarator();
			if (state.backtracking > 0) { Memoize(input, 7, init_declarator_StartIndex); }

		}
		DebugLocation(122, 4);
		} finally { DebugExitRule(GrammarFileName, "init_declarator"); }
		return retval;

	}
	// $ANTLR end "init_declarator"

	partial void EnterRule_storage_class_specifier();
	partial void LeaveRule_storage_class_specifier();

	// $ANTLR start "storage_class_specifier"
	// C.g:124:1: storage_class_specifier : ( 'extern' | 'static' | 'auto' | 'register' );
	[GrammarRule("storage_class_specifier")]
	public XAstParserRuleReturnScope storage_class_specifier()
	{
		EnterRule_storage_class_specifier();
		EnterRule("storage_class_specifier", 8);
		var retval = new XAstParserRuleReturnScope("storage_class_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int storage_class_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set25 = default(IToken);

		object set25_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "storage_class_specifier");
		DebugLocation(124, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// C.g:125:5: ( 'extern' | 'static' | 'auto' | 'register' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(125, 5);

			set25=(IToken)input.LT(1);
			if (input.LA(1)==63||input.LA(1)==74||input.LA(1)==81||input.LA(1)==86)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set25, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("storage_class_specifier", 8);
			LeaveRule("storage_class_specifier", 8);
			LeaveRule_storage_class_specifier();
			if (state.backtracking > 0) { Memoize(input, 8, storage_class_specifier_StartIndex); }

		}
		DebugLocation(129, 4);
		} finally { DebugExitRule(GrammarFileName, "storage_class_specifier"); }
		return retval;

	}
	// $ANTLR end "storage_class_specifier"

	partial void EnterRule_type_specifier();
	partial void LeaveRule_type_specifier();

	// $ANTLR start "type_specifier"
	// C.g:131:1: type_specifier : ( 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | struct_or_union_specifier | enum_specifier | type_id );
	[GrammarRule("type_specifier")]
	public XAstParserRuleReturnScope type_specifier()
	{
		EnterRule_type_specifier();
		EnterRule("type_specifier", 9);
		var retval = new XAstParserRuleReturnScope("type_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int type_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal26 = default(IToken);
		IToken string_literal27 = default(IToken);
		IToken string_literal28 = default(IToken);
		IToken string_literal29 = default(IToken);
		IToken string_literal30 = default(IToken);
		IToken string_literal31 = default(IToken);
		IToken string_literal32 = default(IToken);
		IToken string_literal33 = default(IToken);
		IToken string_literal34 = default(IToken);
		XAstParserRuleReturnScope struct_or_union_specifier35 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enum_specifier36 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_id37 = default(XAstParserRuleReturnScope);

		object string_literal26_tree = default(object);
		object string_literal27_tree = default(object);
		object string_literal28_tree = default(object);
		object string_literal29_tree = default(object);
		object string_literal30_tree = default(object);
		object string_literal31_tree = default(object);
		object string_literal32_tree = default(object);
		object string_literal33_tree = default(object);
		object string_literal34_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_specifier");
		DebugLocation(131, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// C.g:132:5: ( 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | struct_or_union_specifier | enum_specifier | type_id )
			int alt12=12;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case 92:
				{
				alt12 = 1;
				}
				break;
			case 66:
				{
				alt12 = 2;
				}
				break;
			case 83:
				{
				alt12 = 3;
				}
				break;
			case 79:
				{
				alt12 = 4;
				}
				break;
			case 80:
				{
				alt12 = 5;
				}
				break;
			case 75:
				{
				alt12 = 6;
				}
				break;
			case 71:
				{
				alt12 = 7;
				}
				break;
			case 84:
				{
				alt12 = 8;
				}
				break;
			case 91:
				{
				alt12 = 9;
				}
				break;
			case 87:
			case 90:
				{
				alt12 = 10;
				}
				break;
			case 73:
				{
				alt12 = 11;
				}
				break;
			case IDENTIFIER:
				{
				alt12 = 12;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:132:7: 'void'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(132, 7);
				string_literal26=(IToken)Match(input,92,Follow._92_in_type_specifier435); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal26_tree = (object)adaptor.Create(string_literal26, retval);
				adaptor.AddChild(root_0, string_literal26_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:133:7: 'char'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(133, 7);
				string_literal27=(IToken)Match(input,66,Follow._66_in_type_specifier443); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal27_tree = (object)adaptor.Create(string_literal27, retval);
				adaptor.AddChild(root_0, string_literal27_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:134:7: 'short'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(134, 7);
				string_literal28=(IToken)Match(input,83,Follow._83_in_type_specifier451); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal28_tree = (object)adaptor.Create(string_literal28, retval);
				adaptor.AddChild(root_0, string_literal28_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:135:7: 'int'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(135, 7);
				string_literal29=(IToken)Match(input,79,Follow._79_in_type_specifier459); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal29_tree = (object)adaptor.Create(string_literal29, retval);
				adaptor.AddChild(root_0, string_literal29_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:136:7: 'long'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(136, 7);
				string_literal30=(IToken)Match(input,80,Follow._80_in_type_specifier467); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal30_tree = (object)adaptor.Create(string_literal30, retval);
				adaptor.AddChild(root_0, string_literal30_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:137:7: 'float'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(137, 7);
				string_literal31=(IToken)Match(input,75,Follow._75_in_type_specifier475); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal31_tree = (object)adaptor.Create(string_literal31, retval);
				adaptor.AddChild(root_0, string_literal31_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C.g:138:7: 'double'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(138, 7);
				string_literal32=(IToken)Match(input,71,Follow._71_in_type_specifier483); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal32_tree = (object)adaptor.Create(string_literal32, retval);
				adaptor.AddChild(root_0, string_literal32_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C.g:139:7: 'signed'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(139, 7);
				string_literal33=(IToken)Match(input,84,Follow._84_in_type_specifier491); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal33_tree = (object)adaptor.Create(string_literal33, retval);
				adaptor.AddChild(root_0, string_literal33_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C.g:140:7: 'unsigned'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(140, 7);
				string_literal34=(IToken)Match(input,91,Follow._91_in_type_specifier499); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal34_tree = (object)adaptor.Create(string_literal34, retval);
				adaptor.AddChild(root_0, string_literal34_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C.g:141:7: struct_or_union_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(141, 7);
				PushFollow(Follow._struct_or_union_specifier_in_type_specifier507);
				struct_or_union_specifier35=struct_or_union_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_or_union_specifier35.Tree, struct_or_union_specifier35, retval);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C.g:142:7: enum_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(142, 7);
				PushFollow(Follow._enum_specifier_in_type_specifier515);
				enum_specifier36=enum_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_specifier36.Tree, enum_specifier36, retval);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C.g:143:7: type_id
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(143, 7);
				PushFollow(Follow._type_id_in_type_specifier523);
				type_id37=type_id();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_id37.Tree, type_id37, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_specifier", 9);
			LeaveRule("type_specifier", 9);
			LeaveRule_type_specifier();
			if (state.backtracking > 0) { Memoize(input, 9, type_specifier_StartIndex); }

		}
		DebugLocation(144, 4);
		} finally { DebugExitRule(GrammarFileName, "type_specifier"); }
		return retval;

	}
	// $ANTLR end "type_specifier"

	partial void EnterRule_type_id();
	partial void LeaveRule_type_id();

	// $ANTLR start "type_id"
	// C.g:146:1: type_id :{...}? IDENTIFIER ;
	[GrammarRule("type_id")]
	public XAstParserRuleReturnScope type_id()
	{
		EnterRule_type_id();
		EnterRule("type_id", 10);
		var retval = new XAstParserRuleReturnScope("type_id");
		
		retval.Start = (IToken)input.LT(1);
		int type_id_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER38 = default(IToken);

		object IDENTIFIER38_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_id");
		DebugLocation(146, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// C.g:147:5: ({...}? IDENTIFIER )
			DebugEnterAlt(1);
			// C.g:147:9: {...}? IDENTIFIER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(147, 9);
			if (!((isTypeName(input.LT(1).getText()))))
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "type_id", "isTypeName(input.LT(1).getText())");
			}
			DebugLocation(147, 46);
			IDENTIFIER38=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_type_id544), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER38_tree = (object)adaptor.Create(IDENTIFIER38, retval);
			adaptor.AddChild(root_0, IDENTIFIER38_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_id", 10);
			LeaveRule("type_id", 10);
			LeaveRule_type_id();
			if (state.backtracking > 0) { Memoize(input, 10, type_id_StartIndex); }

		}
		DebugLocation(149, 4);
		} finally { DebugExitRule(GrammarFileName, "type_id"); }
		return retval;

	}
	// $ANTLR end "type_id"

	partial void EnterRule_struct_or_union_specifier();
	partial void LeaveRule_struct_or_union_specifier();

	// $ANTLR start "struct_or_union_specifier"
	// C.g:151:1: struct_or_union_specifier options {k=3; } : ( struct_or_union ( IDENTIFIER )? '{' struct_declaration_list '}' | struct_or_union IDENTIFIER );
	[GrammarRule("struct_or_union_specifier")]
	public XAstParserRuleReturnScope struct_or_union_specifier()
	{
		EnterRule_struct_or_union_specifier();
		EnterRule("struct_or_union_specifier", 11);
		var retval = new XAstParserRuleReturnScope("struct_or_union_specifier");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int struct_or_union_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER40 = default(IToken);
		IToken char_literal41 = default(IToken);
		IToken char_literal43 = default(IToken);
		IToken IDENTIFIER45 = default(IToken);
		XAstParserRuleReturnScope struct_or_union39 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declaration_list42 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_or_union44 = default(XAstParserRuleReturnScope);

		object IDENTIFIER40_tree = default(object);
		object char_literal41_tree = default(object);
		object char_literal43_tree = default(object);
		object IDENTIFIER45_tree = default(object);

		  Symbols_stack.Peek().types =  new HashSet();

		try { DebugEnterRule(GrammarFileName, "struct_or_union_specifier");
		DebugLocation(151, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// C.g:157:5: ( struct_or_union ( IDENTIFIER )? '{' struct_declaration_list '}' | struct_or_union IDENTIFIER )
			int alt14=2;
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==87||LA14_0==90))
			{
				int LA14_1 = input.LA(2);

				if ((LA14_1==IDENTIFIER))
				{
					int LA14_2 = input.LA(3);

					if ((LA14_2==95))
					{
						alt14 = 1;
					}
					else if ((LA14_2==EOF||LA14_2==IDENTIFIER||(LA14_2>=30 && LA14_2<=32)||LA14_2==37||(LA14_2>=46 && LA14_2<=47)||LA14_2==59||LA14_2==63||(LA14_2>=66 && LA14_2<=67)||LA14_2==71||(LA14_2>=73 && LA14_2<=75)||(LA14_2>=79 && LA14_2<=81)||(LA14_2>=83 && LA14_2<=84)||(LA14_2>=86 && LA14_2<=87)||(LA14_2>=90 && LA14_2<=93)))
					{
						alt14 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 14, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA14_1==95))
				{
					alt14 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 14, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:157:7: struct_or_union ( IDENTIFIER )? '{' struct_declaration_list '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(157, 7);
				PushFollow(Follow._struct_or_union_in_struct_or_union_specifier580);
				struct_or_union39=struct_or_union();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_or_union39.Tree, struct_or_union39, retval);
				DebugLocation(157, 23);
				// C.g:157:23: ( IDENTIFIER )?
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==IDENTIFIER))
				{
					alt13 = 1;
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:157:23: IDENTIFIER
					{
					DebugLocation(157, 23);
					IDENTIFIER40=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_struct_or_union_specifier582), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER40_tree = (object)adaptor.Create(IDENTIFIER40, retval);
					adaptor.AddChild(root_0, IDENTIFIER40_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(13); }

				DebugLocation(157, 35);
				char_literal41=(IToken)Match(input,95,Follow._95_in_struct_or_union_specifier585); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal41_tree = (object)adaptor.Create(char_literal41, retval);
				adaptor.AddChild(root_0, char_literal41_tree);
				}
				DebugLocation(157, 39);
				PushFollow(Follow._struct_declaration_list_in_struct_or_union_specifier587);
				struct_declaration_list42=struct_declaration_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration_list42.Tree, struct_declaration_list42, retval);
				DebugLocation(157, 63);
				char_literal43=(IToken)Match(input,99,Follow._99_in_struct_or_union_specifier589); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal43_tree = (object)adaptor.Create(char_literal43, retval);
				adaptor.AddChild(root_0, char_literal43_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:158:7: struct_or_union IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(158, 7);
				PushFollow(Follow._struct_or_union_in_struct_or_union_specifier597);
				struct_or_union44=struct_or_union();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_or_union44.Tree, struct_or_union44, retval);
				DebugLocation(158, 23);
				IDENTIFIER45=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_struct_or_union_specifier599), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER45_tree = (object)adaptor.Create(IDENTIFIER45, retval);
				adaptor.AddChild(root_0, IDENTIFIER45_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_or_union_specifier", 11);
			LeaveRule("struct_or_union_specifier", 11);
			LeaveRule_struct_or_union_specifier();
			if (state.backtracking > 0) { Memoize(input, 11, struct_or_union_specifier_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(159, 4);
		} finally { DebugExitRule(GrammarFileName, "struct_or_union_specifier"); }
		return retval;

	}
	// $ANTLR end "struct_or_union_specifier"

	partial void EnterRule_struct_or_union();
	partial void LeaveRule_struct_or_union();

	// $ANTLR start "struct_or_union"
	// C.g:161:1: struct_or_union : ( 'struct' | 'union' );
	[GrammarRule("struct_or_union")]
	public XAstParserRuleReturnScope struct_or_union()
	{
		EnterRule_struct_or_union();
		EnterRule("struct_or_union", 12);
		var retval = new XAstParserRuleReturnScope("struct_or_union");
		
		retval.Start = (IToken)input.LT(1);
		int struct_or_union_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set46 = default(IToken);

		object set46_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_or_union");
		DebugLocation(161, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// C.g:162:5: ( 'struct' | 'union' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(162, 5);

			set46=(IToken)input.LT(1);
			if (input.LA(1)==87||input.LA(1)==90)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set46, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_or_union", 12);
			LeaveRule("struct_or_union", 12);
			LeaveRule_struct_or_union();
			if (state.backtracking > 0) { Memoize(input, 12, struct_or_union_StartIndex); }

		}
		DebugLocation(164, 4);
		} finally { DebugExitRule(GrammarFileName, "struct_or_union"); }
		return retval;

	}
	// $ANTLR end "struct_or_union"

	partial void EnterRule_struct_declaration_list();
	partial void LeaveRule_struct_declaration_list();

	// $ANTLR start "struct_declaration_list"
	// C.g:166:1: struct_declaration_list : ( struct_declaration )+ ;
	[GrammarRule("struct_declaration_list")]
	public XAstParserRuleReturnScope struct_declaration_list()
	{
		EnterRule_struct_declaration_list();
		EnterRule("struct_declaration_list", 13);
		var retval = new XAstParserRuleReturnScope("struct_declaration_list");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declaration_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope struct_declaration47 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "struct_declaration_list");
		DebugLocation(166, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// C.g:167:5: ( ( struct_declaration )+ )
			DebugEnterAlt(1);
			// C.g:167:7: ( struct_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(167, 7);
			// C.g:167:7: ( struct_declaration )+
			int cnt15=0;
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==IDENTIFIER||(LA15_0>=66 && LA15_0<=67)||LA15_0==71||LA15_0==73||LA15_0==75||(LA15_0>=79 && LA15_0<=80)||(LA15_0>=83 && LA15_0<=84)||LA15_0==87||(LA15_0>=90 && LA15_0<=93)))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:167:7: struct_declaration
					{
					DebugLocation(167, 7);
					PushFollow(Follow._struct_declaration_in_struct_declaration_list641);
					struct_declaration47=struct_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration47.Tree, struct_declaration47, retval);

					}
					break;

				default:
					if (cnt15 >= 1)
						goto loop15;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee15 = new EarlyExitException( 15, input );
					DebugRecognitionException(eee15);
					throw eee15;
				}
				cnt15++;
			}
			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declaration_list", 13);
			LeaveRule("struct_declaration_list", 13);
			LeaveRule_struct_declaration_list();
			if (state.backtracking > 0) { Memoize(input, 13, struct_declaration_list_StartIndex); }

		}
		DebugLocation(168, 4);
		} finally { DebugExitRule(GrammarFileName, "struct_declaration_list"); }
		return retval;

	}
	// $ANTLR end "struct_declaration_list"

	partial void EnterRule_struct_declaration();
	partial void LeaveRule_struct_declaration();

	// $ANTLR start "struct_declaration"
	// C.g:170:1: struct_declaration : specifier_qualifier_list struct_declarator_list ';' ;
	[GrammarRule("struct_declaration")]
	public XAstParserRuleReturnScope struct_declaration()
	{
		EnterRule_struct_declaration();
		EnterRule("struct_declaration", 14);
		var retval = new XAstParserRuleReturnScope("struct_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal50 = default(IToken);
		XAstParserRuleReturnScope specifier_qualifier_list48 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declarator_list49 = default(XAstParserRuleReturnScope);

		object char_literal50_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_declaration");
		DebugLocation(170, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// C.g:171:5: ( specifier_qualifier_list struct_declarator_list ';' )
			DebugEnterAlt(1);
			// C.g:171:7: specifier_qualifier_list struct_declarator_list ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(171, 7);
			PushFollow(Follow._specifier_qualifier_list_in_struct_declaration659);
			specifier_qualifier_list48=specifier_qualifier_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, specifier_qualifier_list48.Tree, specifier_qualifier_list48, retval);
			DebugLocation(171, 32);
			PushFollow(Follow._struct_declarator_list_in_struct_declaration661);
			struct_declarator_list49=struct_declarator_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declarator_list49.Tree, struct_declarator_list49, retval);
			DebugLocation(171, 55);
			char_literal50=(IToken)Match(input,47,Follow._47_in_struct_declaration663); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal50_tree = (object)adaptor.Create(char_literal50, retval);
			adaptor.AddChild(root_0, char_literal50_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declaration", 14);
			LeaveRule("struct_declaration", 14);
			LeaveRule_struct_declaration();
			if (state.backtracking > 0) { Memoize(input, 14, struct_declaration_StartIndex); }

		}
		DebugLocation(172, 4);
		} finally { DebugExitRule(GrammarFileName, "struct_declaration"); }
		return retval;

	}
	// $ANTLR end "struct_declaration"

	partial void EnterRule_specifier_qualifier_list();
	partial void LeaveRule_specifier_qualifier_list();

	// $ANTLR start "specifier_qualifier_list"
	// C.g:174:1: specifier_qualifier_list : ( type_qualifier | type_specifier )+ ;
	[GrammarRule("specifier_qualifier_list")]
	public XAstParserRuleReturnScope specifier_qualifier_list()
	{
		EnterRule_specifier_qualifier_list();
		EnterRule("specifier_qualifier_list", 15);
		var retval = new XAstParserRuleReturnScope("specifier_qualifier_list");
		
		retval.Start = (IToken)input.LT(1);
		int specifier_qualifier_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope type_qualifier51 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_specifier52 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "specifier_qualifier_list");
		DebugLocation(174, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// C.g:175:5: ( ( type_qualifier | type_specifier )+ )
			DebugEnterAlt(1);
			// C.g:175:7: ( type_qualifier | type_specifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(175, 7);
			// C.g:175:7: ( type_qualifier | type_specifier )+
			int cnt16=0;
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=3;
				try { DebugEnterDecision(16, false);
				switch (input.LA(1))
				{
				case IDENTIFIER:
					{
					switch (input.LA(2))
					{
					case 59:
						{
						int LA16_19 = input.LA(3);

						if ((((EvaluatePredicate(synpred35_C_fragment)&&EvaluatePredicate(synpred35_C_fragment))&&(isTypeName(input.LT(1).getText())))))
						{
							alt16 = 2;
						}


						}
						break;
					case 30:
						{
						int LA16_20 = input.LA(3);

						if ((((EvaluatePredicate(synpred35_C_fragment)&&EvaluatePredicate(synpred35_C_fragment))&&(isTypeName(input.LT(1).getText())))))
						{
							alt16 = 2;
						}


						}
						break;
					case 46:
						{
						int LA16_21 = input.LA(3);

						if ((((EvaluatePredicate(synpred35_C_fragment)&&EvaluatePredicate(synpred35_C_fragment))&&(isTypeName(input.LT(1).getText())))))
						{
							alt16 = 2;
						}


						}
						break;
					case IDENTIFIER:
					case 31:
					case 32:
					case 66:
					case 67:
					case 71:
					case 73:
					case 75:
					case 79:
					case 80:
					case 83:
					case 84:
					case 87:
					case 90:
					case 91:
					case 92:
					case 93:
						{
						alt16 = 2;
						}
						break;
					}

					}
					break;
				case 67:
				case 93:
					{
					alt16 = 1;
					}
					break;
				case 66:
				case 71:
				case 73:
				case 75:
				case 79:
				case 80:
				case 83:
				case 84:
				case 87:
				case 90:
				case 91:
				case 92:
					{
					alt16 = 2;
					}
					break;
				}

				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:175:9: type_qualifier
					{
					DebugLocation(175, 9);
					PushFollow(Follow._type_qualifier_in_specifier_qualifier_list682);
					type_qualifier51=type_qualifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier51.Tree, type_qualifier51, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:175:26: type_specifier
					{
					DebugLocation(175, 26);
					PushFollow(Follow._type_specifier_in_specifier_qualifier_list686);
					type_specifier52=type_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_specifier52.Tree, type_specifier52, retval);

					}
					break;

				default:
					if (cnt16 >= 1)
						goto loop16;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee16 = new EarlyExitException( 16, input );
					DebugRecognitionException(eee16);
					throw eee16;
				}
				cnt16++;
			}
			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("specifier_qualifier_list", 15);
			LeaveRule("specifier_qualifier_list", 15);
			LeaveRule_specifier_qualifier_list();
			if (state.backtracking > 0) { Memoize(input, 15, specifier_qualifier_list_StartIndex); }

		}
		DebugLocation(176, 4);
		} finally { DebugExitRule(GrammarFileName, "specifier_qualifier_list"); }
		return retval;

	}
	// $ANTLR end "specifier_qualifier_list"

	partial void EnterRule_struct_declarator_list();
	partial void LeaveRule_struct_declarator_list();

	// $ANTLR start "struct_declarator_list"
	// C.g:178:1: struct_declarator_list : struct_declarator ( ',' struct_declarator )* ;
	[GrammarRule("struct_declarator_list")]
	public XAstParserRuleReturnScope struct_declarator_list()
	{
		EnterRule_struct_declarator_list();
		EnterRule("struct_declarator_list", 16);
		var retval = new XAstParserRuleReturnScope("struct_declarator_list");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declarator_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal54 = default(IToken);
		XAstParserRuleReturnScope struct_declarator53 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declarator55 = default(XAstParserRuleReturnScope);

		object char_literal54_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_declarator_list");
		DebugLocation(178, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// C.g:179:5: ( struct_declarator ( ',' struct_declarator )* )
			DebugEnterAlt(1);
			// C.g:179:7: struct_declarator ( ',' struct_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(179, 7);
			PushFollow(Follow._struct_declarator_in_struct_declarator_list706);
			struct_declarator53=struct_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declarator53.Tree, struct_declarator53, retval);
			DebugLocation(179, 25);
			// C.g:179:25: ( ',' struct_declarator )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if ((LA17_0==37))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:179:26: ',' struct_declarator
					{
					DebugLocation(179, 26);
					char_literal54=(IToken)Match(input,37,Follow._37_in_struct_declarator_list709); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal54_tree = (object)adaptor.Create(char_literal54, retval);
					adaptor.AddChild(root_0, char_literal54_tree);
					}
					DebugLocation(179, 30);
					PushFollow(Follow._struct_declarator_in_struct_declarator_list711);
					struct_declarator55=struct_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declarator55.Tree, struct_declarator55, retval);

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declarator_list", 16);
			LeaveRule("struct_declarator_list", 16);
			LeaveRule_struct_declarator_list();
			if (state.backtracking > 0) { Memoize(input, 16, struct_declarator_list_StartIndex); }

		}
		DebugLocation(180, 4);
		} finally { DebugExitRule(GrammarFileName, "struct_declarator_list"); }
		return retval;

	}
	// $ANTLR end "struct_declarator_list"

	partial void EnterRule_struct_declarator();
	partial void LeaveRule_struct_declarator();

	// $ANTLR start "struct_declarator"
	// C.g:182:1: struct_declarator : ( declarator ( ':' constant_expression )? | ':' constant_expression );
	[GrammarRule("struct_declarator")]
	public XAstParserRuleReturnScope struct_declarator()
	{
		EnterRule_struct_declarator();
		EnterRule("struct_declarator", 17);
		var retval = new XAstParserRuleReturnScope("struct_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal57 = default(IToken);
		IToken char_literal59 = default(IToken);
		XAstParserRuleReturnScope declarator56 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression58 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression60 = default(XAstParserRuleReturnScope);

		object char_literal57_tree = default(object);
		object char_literal59_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_declarator");
		DebugLocation(182, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// C.g:183:5: ( declarator ( ':' constant_expression )? | ':' constant_expression )
			int alt19=2;
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==IDENTIFIER||LA19_0==30||LA19_0==32))
			{
				alt19 = 1;
			}
			else if ((LA19_0==46))
			{
				alt19 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:183:7: declarator ( ':' constant_expression )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(183, 7);
				PushFollow(Follow._declarator_in_struct_declarator730);
				declarator56=declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declarator56.Tree, declarator56, retval);
				DebugLocation(183, 18);
				// C.g:183:18: ( ':' constant_expression )?
				int alt18=2;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==46))
				{
					alt18 = 1;
				}
				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:183:19: ':' constant_expression
					{
					DebugLocation(183, 19);
					char_literal57=(IToken)Match(input,46,Follow._46_in_struct_declarator733); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal57_tree = (object)adaptor.Create(char_literal57, retval);
					adaptor.AddChild(root_0, char_literal57_tree);
					}
					DebugLocation(183, 23);
					PushFollow(Follow._constant_expression_in_struct_declarator735);
					constant_expression58=constant_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression58.Tree, constant_expression58, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(18); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:184:7: ':' constant_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(184, 7);
				char_literal59=(IToken)Match(input,46,Follow._46_in_struct_declarator745); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal59_tree = (object)adaptor.Create(char_literal59, retval);
				adaptor.AddChild(root_0, char_literal59_tree);
				}
				DebugLocation(184, 11);
				PushFollow(Follow._constant_expression_in_struct_declarator747);
				constant_expression60=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression60.Tree, constant_expression60, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declarator", 17);
			LeaveRule("struct_declarator", 17);
			LeaveRule_struct_declarator();
			if (state.backtracking > 0) { Memoize(input, 17, struct_declarator_StartIndex); }

		}
		DebugLocation(185, 4);
		} finally { DebugExitRule(GrammarFileName, "struct_declarator"); }
		return retval;

	}
	// $ANTLR end "struct_declarator"

	partial void EnterRule_enum_specifier();
	partial void LeaveRule_enum_specifier();

	// $ANTLR start "enum_specifier"
	// C.g:187:1: enum_specifier options {k=3; } : ( 'enum' '{' enumerator_list '}' | 'enum' IDENTIFIER '{' enumerator_list '}' | 'enum' IDENTIFIER );
	[GrammarRule("enum_specifier")]
	public XAstParserRuleReturnScope enum_specifier()
	{
		EnterRule_enum_specifier();
		EnterRule("enum_specifier", 18);
		var retval = new XAstParserRuleReturnScope("enum_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int enum_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal61 = default(IToken);
		IToken char_literal62 = default(IToken);
		IToken char_literal64 = default(IToken);
		IToken string_literal65 = default(IToken);
		IToken IDENTIFIER66 = default(IToken);
		IToken char_literal67 = default(IToken);
		IToken char_literal69 = default(IToken);
		IToken string_literal70 = default(IToken);
		IToken IDENTIFIER71 = default(IToken);
		XAstParserRuleReturnScope enumerator_list63 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enumerator_list68 = default(XAstParserRuleReturnScope);

		object string_literal61_tree = default(object);
		object char_literal62_tree = default(object);
		object char_literal64_tree = default(object);
		object string_literal65_tree = default(object);
		object IDENTIFIER66_tree = default(object);
		object char_literal67_tree = default(object);
		object char_literal69_tree = default(object);
		object string_literal70_tree = default(object);
		object IDENTIFIER71_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enum_specifier");
		DebugLocation(187, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// C.g:189:5: ( 'enum' '{' enumerator_list '}' | 'enum' IDENTIFIER '{' enumerator_list '}' | 'enum' IDENTIFIER )
			int alt20=3;
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==73))
			{
				int LA20_1 = input.LA(2);

				if ((LA20_1==95))
				{
					alt20 = 1;
				}
				else if ((LA20_1==IDENTIFIER))
				{
					int LA20_3 = input.LA(3);

					if ((LA20_3==95))
					{
						alt20 = 2;
					}
					else if ((LA20_3==EOF||LA20_3==IDENTIFIER||(LA20_3>=30 && LA20_3<=32)||LA20_3==37||(LA20_3>=46 && LA20_3<=47)||LA20_3==59||LA20_3==63||(LA20_3>=66 && LA20_3<=67)||LA20_3==71||(LA20_3>=73 && LA20_3<=75)||(LA20_3>=79 && LA20_3<=81)||(LA20_3>=83 && LA20_3<=84)||(LA20_3>=86 && LA20_3<=87)||(LA20_3>=90 && LA20_3<=93)))
					{
						alt20 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 20, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 20, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:189:7: 'enum' '{' enumerator_list '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(189, 7);
				string_literal61=(IToken)Match(input,73,Follow._73_in_enum_specifier771); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal61_tree = (object)adaptor.Create(string_literal61, retval);
				adaptor.AddChild(root_0, string_literal61_tree);
				}
				DebugLocation(189, 14);
				char_literal62=(IToken)Match(input,95,Follow._95_in_enum_specifier773); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal62_tree = (object)adaptor.Create(char_literal62, retval);
				adaptor.AddChild(root_0, char_literal62_tree);
				}
				DebugLocation(189, 18);
				PushFollow(Follow._enumerator_list_in_enum_specifier775);
				enumerator_list63=enumerator_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator_list63.Tree, enumerator_list63, retval);
				DebugLocation(189, 34);
				char_literal64=(IToken)Match(input,99,Follow._99_in_enum_specifier777); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal64_tree = (object)adaptor.Create(char_literal64, retval);
				adaptor.AddChild(root_0, char_literal64_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:190:7: 'enum' IDENTIFIER '{' enumerator_list '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(190, 7);
				string_literal65=(IToken)Match(input,73,Follow._73_in_enum_specifier785); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal65_tree = (object)adaptor.Create(string_literal65, retval);
				adaptor.AddChild(root_0, string_literal65_tree);
				}
				DebugLocation(190, 14);
				IDENTIFIER66=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enum_specifier787), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER66_tree = (object)adaptor.Create(IDENTIFIER66, retval);
				adaptor.AddChild(root_0, IDENTIFIER66_tree);
				}
				DebugLocation(190, 25);
				char_literal67=(IToken)Match(input,95,Follow._95_in_enum_specifier789); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal67_tree = (object)adaptor.Create(char_literal67, retval);
				adaptor.AddChild(root_0, char_literal67_tree);
				}
				DebugLocation(190, 29);
				PushFollow(Follow._enumerator_list_in_enum_specifier791);
				enumerator_list68=enumerator_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator_list68.Tree, enumerator_list68, retval);
				DebugLocation(190, 45);
				char_literal69=(IToken)Match(input,99,Follow._99_in_enum_specifier793); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal69_tree = (object)adaptor.Create(char_literal69, retval);
				adaptor.AddChild(root_0, char_literal69_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:191:7: 'enum' IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(191, 7);
				string_literal70=(IToken)Match(input,73,Follow._73_in_enum_specifier801); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal70_tree = (object)adaptor.Create(string_literal70, retval);
				adaptor.AddChild(root_0, string_literal70_tree);
				}
				DebugLocation(191, 14);
				IDENTIFIER71=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enum_specifier803), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER71_tree = (object)adaptor.Create(IDENTIFIER71, retval);
				adaptor.AddChild(root_0, IDENTIFIER71_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_specifier", 18);
			LeaveRule("enum_specifier", 18);
			LeaveRule_enum_specifier();
			if (state.backtracking > 0) { Memoize(input, 18, enum_specifier_StartIndex); }

		}
		DebugLocation(192, 4);
		} finally { DebugExitRule(GrammarFileName, "enum_specifier"); }
		return retval;

	}
	// $ANTLR end "enum_specifier"

	partial void EnterRule_enumerator_list();
	partial void LeaveRule_enumerator_list();

	// $ANTLR start "enumerator_list"
	// C.g:194:1: enumerator_list : enumerator ( ',' enumerator )* ;
	[GrammarRule("enumerator_list")]
	public XAstParserRuleReturnScope enumerator_list()
	{
		EnterRule_enumerator_list();
		EnterRule("enumerator_list", 19);
		var retval = new XAstParserRuleReturnScope("enumerator_list");
		
		retval.Start = (IToken)input.LT(1);
		int enumerator_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal73 = default(IToken);
		XAstParserRuleReturnScope enumerator72 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enumerator74 = default(XAstParserRuleReturnScope);

		object char_literal73_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumerator_list");
		DebugLocation(194, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// C.g:195:5: ( enumerator ( ',' enumerator )* )
			DebugEnterAlt(1);
			// C.g:195:7: enumerator ( ',' enumerator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(195, 7);
			PushFollow(Follow._enumerator_in_enumerator_list820);
			enumerator72=enumerator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator72.Tree, enumerator72, retval);
			DebugLocation(195, 18);
			// C.g:195:18: ( ',' enumerator )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==37))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:195:19: ',' enumerator
					{
					DebugLocation(195, 19);
					char_literal73=(IToken)Match(input,37,Follow._37_in_enumerator_list823); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal73_tree = (object)adaptor.Create(char_literal73, retval);
					adaptor.AddChild(root_0, char_literal73_tree);
					}
					DebugLocation(195, 23);
					PushFollow(Follow._enumerator_in_enumerator_list825);
					enumerator74=enumerator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator74.Tree, enumerator74, retval);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumerator_list", 19);
			LeaveRule("enumerator_list", 19);
			LeaveRule_enumerator_list();
			if (state.backtracking > 0) { Memoize(input, 19, enumerator_list_StartIndex); }

		}
		DebugLocation(196, 4);
		} finally { DebugExitRule(GrammarFileName, "enumerator_list"); }
		return retval;

	}
	// $ANTLR end "enumerator_list"

	partial void EnterRule_enumerator();
	partial void LeaveRule_enumerator();

	// $ANTLR start "enumerator"
	// C.g:198:1: enumerator : IDENTIFIER ( '=' constant_expression )? ;
	[GrammarRule("enumerator")]
	public XAstParserRuleReturnScope enumerator()
	{
		EnterRule_enumerator();
		EnterRule("enumerator", 20);
		var retval = new XAstParserRuleReturnScope("enumerator");
		
		retval.Start = (IToken)input.LT(1);
		int enumerator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER75 = default(IToken);
		IToken char_literal76 = default(IToken);
		XAstParserRuleReturnScope constant_expression77 = default(XAstParserRuleReturnScope);

		object IDENTIFIER75_tree = default(object);
		object char_literal76_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumerator");
		DebugLocation(198, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// C.g:199:5: ( IDENTIFIER ( '=' constant_expression )? )
			DebugEnterAlt(1);
			// C.g:199:7: IDENTIFIER ( '=' constant_expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(199, 7);
			IDENTIFIER75=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enumerator844), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER75_tree = (object)adaptor.Create(IDENTIFIER75, retval);
			adaptor.AddChild(root_0, IDENTIFIER75_tree);
			}
			DebugLocation(199, 18);
			// C.g:199:18: ( '=' constant_expression )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==52))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:199:19: '=' constant_expression
				{
				DebugLocation(199, 19);
				char_literal76=(IToken)Match(input,52,Follow._52_in_enumerator847); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal76_tree = (object)adaptor.Create(char_literal76, retval);
				adaptor.AddChild(root_0, char_literal76_tree);
				}
				DebugLocation(199, 23);
				PushFollow(Follow._constant_expression_in_enumerator849);
				constant_expression77=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression77.Tree, constant_expression77, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumerator", 20);
			LeaveRule("enumerator", 20);
			LeaveRule_enumerator();
			if (state.backtracking > 0) { Memoize(input, 20, enumerator_StartIndex); }

		}
		DebugLocation(200, 4);
		} finally { DebugExitRule(GrammarFileName, "enumerator"); }
		return retval;

	}
	// $ANTLR end "enumerator"

	partial void EnterRule_type_qualifier();
	partial void LeaveRule_type_qualifier();

	// $ANTLR start "type_qualifier"
	// C.g:202:1: type_qualifier : ( 'const' | 'volatile' );
	[GrammarRule("type_qualifier")]
	public XAstParserRuleReturnScope type_qualifier()
	{
		EnterRule_type_qualifier();
		EnterRule("type_qualifier", 21);
		var retval = new XAstParserRuleReturnScope("type_qualifier");
		
		retval.Start = (IToken)input.LT(1);
		int type_qualifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set78 = default(IToken);

		object set78_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_qualifier");
		DebugLocation(202, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// C.g:203:5: ( 'const' | 'volatile' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(203, 5);

			set78=(IToken)input.LT(1);
			if (input.LA(1)==67||input.LA(1)==93)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set78, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_qualifier", 21);
			LeaveRule("type_qualifier", 21);
			LeaveRule_type_qualifier();
			if (state.backtracking > 0) { Memoize(input, 21, type_qualifier_StartIndex); }

		}
		DebugLocation(205, 4);
		} finally { DebugExitRule(GrammarFileName, "type_qualifier"); }
		return retval;

	}
	// $ANTLR end "type_qualifier"

	partial void EnterRule_declarator();
	partial void LeaveRule_declarator();

	// $ANTLR start "declarator"
	// C.g:207:1: declarator : ( ( pointer )? direct_declarator | pointer );
	[GrammarRule("declarator")]
	public XAstParserRuleReturnScope declarator()
	{
		EnterRule_declarator();
		EnterRule("declarator", 22);
		var retval = new XAstParserRuleReturnScope("declarator");
		
		retval.Start = (IToken)input.LT(1);
		int declarator_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope pointer79 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope direct_declarator80 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope pointer81 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "declarator");
		DebugLocation(207, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// C.g:208:5: ( ( pointer )? direct_declarator | pointer )
			int alt24=2;
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==32))
			{
				int LA24_1 = input.LA(2);

				if ((EvaluatePredicate(synpred45_C_fragment)))
				{
					alt24 = 1;
				}
				else if ((true))
				{
					alt24 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 24, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA24_0==IDENTIFIER||LA24_0==30))
			{
				alt24 = 1;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:208:7: ( pointer )? direct_declarator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(208, 7);
				// C.g:208:7: ( pointer )?
				int alt23=2;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, false);
				int LA23_0 = input.LA(1);

				if ((LA23_0==32))
				{
					alt23 = 1;
				}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:208:7: pointer
					{
					DebugLocation(208, 7);
					PushFollow(Follow._pointer_in_declarator893);
					pointer79=pointer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, pointer79.Tree, pointer79, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(23); }

				DebugLocation(208, 16);
				PushFollow(Follow._direct_declarator_in_declarator896);
				direct_declarator80=direct_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, direct_declarator80.Tree, direct_declarator80, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:209:7: pointer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(209, 7);
				PushFollow(Follow._pointer_in_declarator904);
				pointer81=pointer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pointer81.Tree, pointer81, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declarator", 22);
			LeaveRule("declarator", 22);
			LeaveRule_declarator();
			if (state.backtracking > 0) { Memoize(input, 22, declarator_StartIndex); }

		}
		DebugLocation(210, 4);
		} finally { DebugExitRule(GrammarFileName, "declarator"); }
		return retval;

	}
	// $ANTLR end "declarator"

	partial void EnterRule_direct_declarator();
	partial void LeaveRule_direct_declarator();

	// $ANTLR start "direct_declarator"
	// C.g:212:1: direct_declarator : ( IDENTIFIER | '(' declarator ')' ) ( declarator_suffix )* ;
	[GrammarRule("direct_declarator")]
	public XAstParserRuleReturnScope direct_declarator()
	{
		EnterRule_direct_declarator();
		EnterRule("direct_declarator", 23);
		var retval = new XAstParserRuleReturnScope("direct_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int direct_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER82 = default(IToken);
		IToken char_literal83 = default(IToken);
		IToken char_literal85 = default(IToken);
		XAstParserRuleReturnScope declarator84 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator_suffix86 = default(XAstParserRuleReturnScope);

		object IDENTIFIER82_tree = default(object);
		object char_literal83_tree = default(object);
		object char_literal85_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "direct_declarator");
		DebugLocation(212, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// C.g:213:5: ( ( IDENTIFIER | '(' declarator ')' ) ( declarator_suffix )* )
			DebugEnterAlt(1);
			// C.g:213:9: ( IDENTIFIER | '(' declarator ')' ) ( declarator_suffix )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(213, 9);
			// C.g:213:9: ( IDENTIFIER | '(' declarator ')' )
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==IDENTIFIER))
			{
				alt25 = 1;
			}
			else if ((LA25_0==30))
			{
				alt25 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:213:11: IDENTIFIER
				{
				DebugLocation(213, 11);
				IDENTIFIER82=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_direct_declarator925), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER82_tree = (object)adaptor.Create(IDENTIFIER82, retval);
				adaptor.AddChild(root_0, IDENTIFIER82_tree);
				}
				DebugLocation(214, 13);
				if (state.backtracking == 0)
				{

					            if (declaration_stack.size()>0&&declaration_stack.Peek().isTypedef) {
					                Symbols_stack.Peek().types.add((IDENTIFIER82!=null?IDENTIFIER82.Text:null));
					                
					            }
					            
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:220:11: '(' declarator ')'
				{
				DebugLocation(220, 11);
				char_literal83=(IToken)Match(input,30,Follow._30_in_direct_declarator951); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal83_tree = (object)adaptor.Create(char_literal83, retval);
				adaptor.AddChild(root_0, char_literal83_tree);
				}
				DebugLocation(220, 15);
				PushFollow(Follow._declarator_in_direct_declarator953);
				declarator84=declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declarator84.Tree, declarator84, retval);
				DebugLocation(220, 26);
				char_literal85=(IToken)Match(input,31,Follow._31_in_direct_declarator955); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal85_tree = (object)adaptor.Create(char_literal85, retval);
				adaptor.AddChild(root_0, char_literal85_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(222, 9);
			// C.g:222:9: ( declarator_suffix )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==30))
				{
					switch (input.LA(2))
					{
					case 31:
						{
						int LA26_26 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA26_28 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case 63:
					case 74:
					case 81:
					case 86:
						{
						int LA26_31 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case 92:
						{
						int LA26_32 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case 66:
						{
						int LA26_33 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case 83:
						{
						int LA26_34 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case 79:
						{
						int LA26_35 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case 80:
						{
						int LA26_36 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case 75:
						{
						int LA26_37 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case 71:
						{
						int LA26_38 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case 84:
						{
						int LA26_39 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case 91:
						{
						int LA26_40 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case 87:
					case 90:
						{
						int LA26_41 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case 73:
						{
						int LA26_42 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case 67:
					case 93:
						{
						int LA26_43 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					}

				}
				else if ((LA26_0==59))
				{
					switch (input.LA(2))
					{
					case 60:
						{
						int LA26_44 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case 30:
						{
						int LA26_45 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA26_46 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case HEX_LITERAL:
						{
						int LA26_47 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case OCTAL_LITERAL:
						{
						int LA26_48 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case DECIMAL_LITERAL:
						{
						int LA26_49 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case CHARACTER_LITERAL:
						{
						int LA26_50 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case STRING_LITERAL:
						{
						int LA26_51 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case FLOATING_POINT_LITERAL:
						{
						int LA26_52 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case 35:
						{
						int LA26_53 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case 39:
						{
						int LA26_54 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case 23:
					case 28:
					case 32:
					case 34:
					case 38:
					case 100:
						{
						int LA26_55 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					case 85:
						{
						int LA26_56 = input.LA(3);

						if ((EvaluatePredicate(synpred47_C_fragment)))
						{
							alt26 = 1;
						}


						}
						break;
					}

				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:222:9: declarator_suffix
					{
					DebugLocation(222, 9);
					PushFollow(Follow._declarator_suffix_in_direct_declarator975);
					declarator_suffix86=declarator_suffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declarator_suffix86.Tree, declarator_suffix86, retval);

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("direct_declarator", 23);
			LeaveRule("direct_declarator", 23);
			LeaveRule_direct_declarator();
			if (state.backtracking > 0) { Memoize(input, 23, direct_declarator_StartIndex); }

		}
		DebugLocation(223, 4);
		} finally { DebugExitRule(GrammarFileName, "direct_declarator"); }
		return retval;

	}
	// $ANTLR end "direct_declarator"

	partial void EnterRule_declarator_suffix();
	partial void LeaveRule_declarator_suffix();

	// $ANTLR start "declarator_suffix"
	// C.g:225:1: declarator_suffix : ( '[' constant_expression ']' | '[' ']' | '(' parameter_type_list ')' | '(' identifier_list ')' | '(' ')' );
	[GrammarRule("declarator_suffix")]
	public XAstParserRuleReturnScope declarator_suffix()
	{
		EnterRule_declarator_suffix();
		EnterRule("declarator_suffix", 24);
		var retval = new XAstParserRuleReturnScope("declarator_suffix");
		
		retval.Start = (IToken)input.LT(1);
		int declarator_suffix_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal87 = default(IToken);
		IToken char_literal89 = default(IToken);
		IToken char_literal90 = default(IToken);
		IToken char_literal91 = default(IToken);
		IToken char_literal92 = default(IToken);
		IToken char_literal94 = default(IToken);
		IToken char_literal95 = default(IToken);
		IToken char_literal97 = default(IToken);
		IToken char_literal98 = default(IToken);
		IToken char_literal99 = default(IToken);
		XAstParserRuleReturnScope constant_expression88 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope parameter_type_list93 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier_list96 = default(XAstParserRuleReturnScope);

		object char_literal87_tree = default(object);
		object char_literal89_tree = default(object);
		object char_literal90_tree = default(object);
		object char_literal91_tree = default(object);
		object char_literal92_tree = default(object);
		object char_literal94_tree = default(object);
		object char_literal95_tree = default(object);
		object char_literal97_tree = default(object);
		object char_literal98_tree = default(object);
		object char_literal99_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "declarator_suffix");
		DebugLocation(225, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// C.g:226:5: ( '[' constant_expression ']' | '[' ']' | '(' parameter_type_list ')' | '(' identifier_list ')' | '(' ')' )
			int alt27=5;
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==59))
			{
				int LA27_1 = input.LA(2);

				if ((LA27_1==60))
				{
					alt27 = 2;
				}
				else if ((LA27_1==CHARACTER_LITERAL||LA27_1==DECIMAL_LITERAL||LA27_1==FLOATING_POINT_LITERAL||LA27_1==HEX_LITERAL||LA27_1==IDENTIFIER||LA27_1==OCTAL_LITERAL||LA27_1==STRING_LITERAL||LA27_1==23||LA27_1==28||LA27_1==30||LA27_1==32||(LA27_1>=34 && LA27_1<=35)||(LA27_1>=38 && LA27_1<=39)||LA27_1==85||LA27_1==100))
				{
					alt27 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 27, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA27_0==30))
			{
				switch (input.LA(2))
				{
				case 31:
					{
					alt27 = 5;
					}
					break;
				case 63:
				case 66:
				case 67:
				case 71:
				case 73:
				case 74:
				case 75:
				case 79:
				case 80:
				case 81:
				case 83:
				case 84:
				case 86:
				case 87:
				case 90:
				case 91:
				case 92:
				case 93:
					{
					alt27 = 3;
					}
					break;
				case IDENTIFIER:
					{
					int LA27_29 = input.LA(3);

					if ((EvaluatePredicate(synpred50_C_fragment)))
					{
						alt27 = 3;
					}
					else if ((EvaluatePredicate(synpred51_C_fragment)))
					{
						alt27 = 4;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 27, 29, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 27, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:226:9: '[' constant_expression ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(226, 9);
				char_literal87=(IToken)Match(input,59,Follow._59_in_declarator_suffix995); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal87_tree = (object)adaptor.Create(char_literal87, retval);
				adaptor.AddChild(root_0, char_literal87_tree);
				}
				DebugLocation(226, 13);
				PushFollow(Follow._constant_expression_in_declarator_suffix997);
				constant_expression88=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression88.Tree, constant_expression88, retval);
				DebugLocation(226, 33);
				char_literal89=(IToken)Match(input,60,Follow._60_in_declarator_suffix999); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal89_tree = (object)adaptor.Create(char_literal89, retval);
				adaptor.AddChild(root_0, char_literal89_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:227:9: '[' ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(227, 9);
				char_literal90=(IToken)Match(input,59,Follow._59_in_declarator_suffix1009); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal90_tree = (object)adaptor.Create(char_literal90, retval);
				adaptor.AddChild(root_0, char_literal90_tree);
				}
				DebugLocation(227, 13);
				char_literal91=(IToken)Match(input,60,Follow._60_in_declarator_suffix1011); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal91_tree = (object)adaptor.Create(char_literal91, retval);
				adaptor.AddChild(root_0, char_literal91_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:228:9: '(' parameter_type_list ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(228, 9);
				char_literal92=(IToken)Match(input,30,Follow._30_in_declarator_suffix1021); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal92_tree = (object)adaptor.Create(char_literal92, retval);
				adaptor.AddChild(root_0, char_literal92_tree);
				}
				DebugLocation(228, 13);
				PushFollow(Follow._parameter_type_list_in_declarator_suffix1023);
				parameter_type_list93=parameter_type_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_type_list93.Tree, parameter_type_list93, retval);
				DebugLocation(228, 33);
				char_literal94=(IToken)Match(input,31,Follow._31_in_declarator_suffix1025); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal94_tree = (object)adaptor.Create(char_literal94, retval);
				adaptor.AddChild(root_0, char_literal94_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:229:9: '(' identifier_list ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(229, 9);
				char_literal95=(IToken)Match(input,30,Follow._30_in_declarator_suffix1035); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal95_tree = (object)adaptor.Create(char_literal95, retval);
				adaptor.AddChild(root_0, char_literal95_tree);
				}
				DebugLocation(229, 13);
				PushFollow(Follow._identifier_list_in_declarator_suffix1037);
				identifier_list96=identifier_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier_list96.Tree, identifier_list96, retval);
				DebugLocation(229, 29);
				char_literal97=(IToken)Match(input,31,Follow._31_in_declarator_suffix1039); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal97_tree = (object)adaptor.Create(char_literal97, retval);
				adaptor.AddChild(root_0, char_literal97_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:230:9: '(' ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(230, 9);
				char_literal98=(IToken)Match(input,30,Follow._30_in_declarator_suffix1049); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal98_tree = (object)adaptor.Create(char_literal98, retval);
				adaptor.AddChild(root_0, char_literal98_tree);
				}
				DebugLocation(230, 13);
				char_literal99=(IToken)Match(input,31,Follow._31_in_declarator_suffix1051); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal99_tree = (object)adaptor.Create(char_literal99, retval);
				adaptor.AddChild(root_0, char_literal99_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declarator_suffix", 24);
			LeaveRule("declarator_suffix", 24);
			LeaveRule_declarator_suffix();
			if (state.backtracking > 0) { Memoize(input, 24, declarator_suffix_StartIndex); }

		}
		DebugLocation(231, 4);
		} finally { DebugExitRule(GrammarFileName, "declarator_suffix"); }
		return retval;

	}
	// $ANTLR end "declarator_suffix"

	partial void EnterRule_pointer();
	partial void LeaveRule_pointer();

	// $ANTLR start "pointer"
	// C.g:233:1: pointer : ( '*' ( type_qualifier )+ ( pointer )? | '*' pointer | '*' );
	[GrammarRule("pointer")]
	public XAstParserRuleReturnScope pointer()
	{
		EnterRule_pointer();
		EnterRule("pointer", 25);
		var retval = new XAstParserRuleReturnScope("pointer");
		
		retval.Start = (IToken)input.LT(1);
		int pointer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal100 = default(IToken);
		IToken char_literal103 = default(IToken);
		IToken char_literal105 = default(IToken);
		XAstParserRuleReturnScope type_qualifier101 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope pointer102 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope pointer104 = default(XAstParserRuleReturnScope);

		object char_literal100_tree = default(object);
		object char_literal103_tree = default(object);
		object char_literal105_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "pointer");
		DebugLocation(233, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// C.g:234:5: ( '*' ( type_qualifier )+ ( pointer )? | '*' pointer | '*' )
			int alt30=3;
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==32))
			{
				switch (input.LA(2))
				{
				case 67:
				case 93:
					{
					int LA30_2 = input.LA(3);

					if ((EvaluatePredicate(synpred54_C_fragment)))
					{
						alt30 = 1;
					}
					else if ((true))
					{
						alt30 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 30, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 32:
					{
					int LA30_3 = input.LA(3);

					if ((EvaluatePredicate(synpred55_C_fragment)))
					{
						alt30 = 2;
					}
					else if ((true))
					{
						alt30 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 30, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case EOF:
				case IDENTIFIER:
				case 30:
				case 31:
				case 37:
				case 46:
				case 47:
				case 52:
				case 59:
				case 63:
				case 66:
				case 71:
				case 73:
				case 74:
				case 75:
				case 79:
				case 80:
				case 81:
				case 83:
				case 84:
				case 86:
				case 87:
				case 89:
				case 90:
				case 91:
				case 92:
				case 95:
					{
					alt30 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 30, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:234:7: '*' ( type_qualifier )+ ( pointer )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(234, 7);
				char_literal100=(IToken)Match(input,32,Follow._32_in_pointer1068); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal100_tree = (object)adaptor.Create(char_literal100, retval);
				adaptor.AddChild(root_0, char_literal100_tree);
				}
				DebugLocation(234, 11);
				// C.g:234:11: ( type_qualifier )+
				int cnt28=0;
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, false);
					int LA28_0 = input.LA(1);

					if ((LA28_0==67||LA28_0==93))
					{
						int LA28_17 = input.LA(2);

						if ((EvaluatePredicate(synpred52_C_fragment)))
						{
							alt28 = 1;
						}


					}


					} finally { DebugExitDecision(28); }
					switch (alt28)
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:234:11: type_qualifier
						{
						DebugLocation(234, 11);
						PushFollow(Follow._type_qualifier_in_pointer1070);
						type_qualifier101=type_qualifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier101.Tree, type_qualifier101, retval);

						}
						break;

					default:
						if (cnt28 >= 1)
							goto loop28;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee28 = new EarlyExitException( 28, input );
						DebugRecognitionException(eee28);
						throw eee28;
					}
					cnt28++;
				}
				loop28:
					;

				} finally { DebugExitSubRule(28); }

				DebugLocation(234, 27);
				// C.g:234:27: ( pointer )?
				int alt29=2;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==32))
				{
					int LA29_1 = input.LA(2);

					if ((EvaluatePredicate(synpred53_C_fragment)))
					{
						alt29 = 1;
					}
				}
				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:234:27: pointer
					{
					DebugLocation(234, 27);
					PushFollow(Follow._pointer_in_pointer1073);
					pointer102=pointer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, pointer102.Tree, pointer102, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(29); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:235:7: '*' pointer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(235, 7);
				char_literal103=(IToken)Match(input,32,Follow._32_in_pointer1082); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal103_tree = (object)adaptor.Create(char_literal103, retval);
				adaptor.AddChild(root_0, char_literal103_tree);
				}
				DebugLocation(235, 11);
				PushFollow(Follow._pointer_in_pointer1084);
				pointer104=pointer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pointer104.Tree, pointer104, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:236:7: '*'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(236, 7);
				char_literal105=(IToken)Match(input,32,Follow._32_in_pointer1092); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal105_tree = (object)adaptor.Create(char_literal105, retval);
				adaptor.AddChild(root_0, char_literal105_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pointer", 25);
			LeaveRule("pointer", 25);
			LeaveRule_pointer();
			if (state.backtracking > 0) { Memoize(input, 25, pointer_StartIndex); }

		}
		DebugLocation(237, 4);
		} finally { DebugExitRule(GrammarFileName, "pointer"); }
		return retval;

	}
	// $ANTLR end "pointer"

	partial void EnterRule_parameter_type_list();
	partial void LeaveRule_parameter_type_list();

	// $ANTLR start "parameter_type_list"
	// C.g:239:1: parameter_type_list : parameter_list ( ',' '...' )? ;
	[GrammarRule("parameter_type_list")]
	public XAstParserRuleReturnScope parameter_type_list()
	{
		EnterRule_parameter_type_list();
		EnterRule("parameter_type_list", 26);
		var retval = new XAstParserRuleReturnScope("parameter_type_list");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_type_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal107 = default(IToken);
		IToken string_literal108 = default(IToken);
		XAstParserRuleReturnScope parameter_list106 = default(XAstParserRuleReturnScope);

		object char_literal107_tree = default(object);
		object string_literal108_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parameter_type_list");
		DebugLocation(239, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// C.g:240:5: ( parameter_list ( ',' '...' )? )
			DebugEnterAlt(1);
			// C.g:240:7: parameter_list ( ',' '...' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(240, 7);
			PushFollow(Follow._parameter_list_in_parameter_type_list1109);
			parameter_list106=parameter_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_list106.Tree, parameter_list106, retval);
			DebugLocation(240, 22);
			// C.g:240:22: ( ',' '...' )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==37))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:240:23: ',' '...'
				{
				DebugLocation(240, 23);
				char_literal107=(IToken)Match(input,37,Follow._37_in_parameter_type_list1112); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal107_tree = (object)adaptor.Create(char_literal107, retval);
				adaptor.AddChild(root_0, char_literal107_tree);
				}
				DebugLocation(240, 27);
				string_literal108=(IToken)Match(input,43,Follow._43_in_parameter_type_list1114); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal108_tree = (object)adaptor.Create(string_literal108, retval);
				adaptor.AddChild(root_0, string_literal108_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(31); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_type_list", 26);
			LeaveRule("parameter_type_list", 26);
			LeaveRule_parameter_type_list();
			if (state.backtracking > 0) { Memoize(input, 26, parameter_type_list_StartIndex); }

		}
		DebugLocation(241, 4);
		} finally { DebugExitRule(GrammarFileName, "parameter_type_list"); }
		return retval;

	}
	// $ANTLR end "parameter_type_list"

	partial void EnterRule_parameter_list();
	partial void LeaveRule_parameter_list();

	// $ANTLR start "parameter_list"
	// C.g:243:1: parameter_list : parameter_declaration ( ',' parameter_declaration )* ;
	[GrammarRule("parameter_list")]
	public XAstParserRuleReturnScope parameter_list()
	{
		EnterRule_parameter_list();
		EnterRule("parameter_list", 27);
		var retval = new XAstParserRuleReturnScope("parameter_list");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal110 = default(IToken);
		XAstParserRuleReturnScope parameter_declaration109 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope parameter_declaration111 = default(XAstParserRuleReturnScope);

		object char_literal110_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parameter_list");
		DebugLocation(243, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// C.g:244:5: ( parameter_declaration ( ',' parameter_declaration )* )
			DebugEnterAlt(1);
			// C.g:244:7: parameter_declaration ( ',' parameter_declaration )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(244, 7);
			PushFollow(Follow._parameter_declaration_in_parameter_list1133);
			parameter_declaration109=parameter_declaration();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_declaration109.Tree, parameter_declaration109, retval);
			DebugLocation(244, 29);
			// C.g:244:29: ( ',' parameter_declaration )*
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, false);
				int LA32_0 = input.LA(1);

				if ((LA32_0==37))
				{
					int LA32_1 = input.LA(2);

					if ((LA32_1==IDENTIFIER||LA32_1==63||(LA32_1>=66 && LA32_1<=67)||LA32_1==71||(LA32_1>=73 && LA32_1<=75)||(LA32_1>=79 && LA32_1<=81)||(LA32_1>=83 && LA32_1<=84)||(LA32_1>=86 && LA32_1<=87)||(LA32_1>=90 && LA32_1<=93)))
					{
						alt32 = 1;
					}


				}


				} finally { DebugExitDecision(32); }
				switch ( alt32 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:244:30: ',' parameter_declaration
					{
					DebugLocation(244, 30);
					char_literal110=(IToken)Match(input,37,Follow._37_in_parameter_list1136); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal110_tree = (object)adaptor.Create(char_literal110, retval);
					adaptor.AddChild(root_0, char_literal110_tree);
					}
					DebugLocation(244, 34);
					PushFollow(Follow._parameter_declaration_in_parameter_list1138);
					parameter_declaration111=parameter_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_declaration111.Tree, parameter_declaration111, retval);

					}
					break;

				default:
					goto loop32;
				}
			}

			loop32:
				;

			} finally { DebugExitSubRule(32); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_list", 27);
			LeaveRule("parameter_list", 27);
			LeaveRule_parameter_list();
			if (state.backtracking > 0) { Memoize(input, 27, parameter_list_StartIndex); }

		}
		DebugLocation(245, 4);
		} finally { DebugExitRule(GrammarFileName, "parameter_list"); }
		return retval;

	}
	// $ANTLR end "parameter_list"

	partial void EnterRule_parameter_declaration();
	partial void LeaveRule_parameter_declaration();

	// $ANTLR start "parameter_declaration"
	// C.g:247:1: parameter_declaration : declaration_specifiers ( declarator | abstract_declarator )* ;
	[GrammarRule("parameter_declaration")]
	public XAstParserRuleReturnScope parameter_declaration()
	{
		EnterRule_parameter_declaration();
		EnterRule("parameter_declaration", 28);
		var retval = new XAstParserRuleReturnScope("parameter_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope declaration_specifiers112 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator113 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator114 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "parameter_declaration");
		DebugLocation(247, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// C.g:248:5: ( declaration_specifiers ( declarator | abstract_declarator )* )
			DebugEnterAlt(1);
			// C.g:248:7: declaration_specifiers ( declarator | abstract_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(248, 7);
			PushFollow(Follow._declaration_specifiers_in_parameter_declaration1157);
			declaration_specifiers112=declaration_specifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers112.Tree, declaration_specifiers112, retval);
			DebugLocation(248, 30);
			// C.g:248:30: ( declarator | abstract_declarator )*
			try { DebugEnterSubRule(33);
			while (true)
			{
				int alt33=3;
				try { DebugEnterDecision(33, false);
				switch (input.LA(1))
				{
				case 32:
					{
					int LA33_4 = input.LA(2);

					if ((EvaluatePredicate(synpred58_C_fragment)))
					{
						alt33 = 1;
					}
					else if ((EvaluatePredicate(synpred59_C_fragment)))
					{
						alt33 = 2;
					}


					}
					break;
				case IDENTIFIER:
					{
					alt33 = 1;
					}
					break;
				case 30:
					{
					switch (input.LA(2))
					{
					case 31:
					case 59:
					case 63:
					case 66:
					case 67:
					case 71:
					case 73:
					case 74:
					case 75:
					case 79:
					case 80:
					case 81:
					case 83:
					case 84:
					case 86:
					case 87:
					case 90:
					case 91:
					case 92:
					case 93:
						{
						alt33 = 2;
						}
						break;
					case 32:
						{
						int LA33_17 = input.LA(3);

						if ((EvaluatePredicate(synpred58_C_fragment)))
						{
							alt33 = 1;
						}
						else if ((EvaluatePredicate(synpred59_C_fragment)))
						{
							alt33 = 2;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA33_18 = input.LA(3);

						if ((EvaluatePredicate(synpred58_C_fragment)))
						{
							alt33 = 1;
						}
						else if ((EvaluatePredicate(synpred59_C_fragment)))
						{
							alt33 = 2;
						}


						}
						break;
					case 30:
						{
						int LA33_19 = input.LA(3);

						if ((EvaluatePredicate(synpred58_C_fragment)))
						{
							alt33 = 1;
						}
						else if ((EvaluatePredicate(synpred59_C_fragment)))
						{
							alt33 = 2;
						}


						}
						break;
					}

					}
					break;
				case 59:
					{
					alt33 = 2;
					}
					break;
				}

				} finally { DebugExitDecision(33); }
				switch ( alt33 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:248:31: declarator
					{
					DebugLocation(248, 31);
					PushFollow(Follow._declarator_in_parameter_declaration1160);
					declarator113=declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declarator113.Tree, declarator113, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:248:42: abstract_declarator
					{
					DebugLocation(248, 42);
					PushFollow(Follow._abstract_declarator_in_parameter_declaration1162);
					abstract_declarator114=abstract_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator114.Tree, abstract_declarator114, retval);

					}
					break;

				default:
					goto loop33;
				}
			}

			loop33:
				;

			} finally { DebugExitSubRule(33); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_declaration", 28);
			LeaveRule("parameter_declaration", 28);
			LeaveRule_parameter_declaration();
			if (state.backtracking > 0) { Memoize(input, 28, parameter_declaration_StartIndex); }

		}
		DebugLocation(249, 4);
		} finally { DebugExitRule(GrammarFileName, "parameter_declaration"); }
		return retval;

	}
	// $ANTLR end "parameter_declaration"

	partial void EnterRule_identifier_list();
	partial void LeaveRule_identifier_list();

	// $ANTLR start "identifier_list"
	// C.g:251:1: identifier_list : IDENTIFIER ( ',' IDENTIFIER )* ;
	[GrammarRule("identifier_list")]
	public XAstParserRuleReturnScope identifier_list()
	{
		EnterRule_identifier_list();
		EnterRule("identifier_list", 29);
		var retval = new XAstParserRuleReturnScope("identifier_list");
		
		retval.Start = (IToken)input.LT(1);
		int identifier_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER115 = default(IToken);
		IToken char_literal116 = default(IToken);
		IToken IDENTIFIER117 = default(IToken);

		object IDENTIFIER115_tree = default(object);
		object char_literal116_tree = default(object);
		object IDENTIFIER117_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "identifier_list");
		DebugLocation(251, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// C.g:252:5: ( IDENTIFIER ( ',' IDENTIFIER )* )
			DebugEnterAlt(1);
			// C.g:252:7: IDENTIFIER ( ',' IDENTIFIER )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(252, 7);
			IDENTIFIER115=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifier_list1181), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER115_tree = (object)adaptor.Create(IDENTIFIER115, retval);
			adaptor.AddChild(root_0, IDENTIFIER115_tree);
			}
			DebugLocation(252, 18);
			// C.g:252:18: ( ',' IDENTIFIER )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_0 = input.LA(1);

				if ((LA34_0==37))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:252:19: ',' IDENTIFIER
					{
					DebugLocation(252, 19);
					char_literal116=(IToken)Match(input,37,Follow._37_in_identifier_list1184); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal116_tree = (object)adaptor.Create(char_literal116, retval);
					adaptor.AddChild(root_0, char_literal116_tree);
					}
					DebugLocation(252, 23);
					IDENTIFIER117=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifier_list1186), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER117_tree = (object)adaptor.Create(IDENTIFIER117, retval);
					adaptor.AddChild(root_0, IDENTIFIER117_tree);
					}

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("identifier_list", 29);
			LeaveRule("identifier_list", 29);
			LeaveRule_identifier_list();
			if (state.backtracking > 0) { Memoize(input, 29, identifier_list_StartIndex); }

		}
		DebugLocation(253, 4);
		} finally { DebugExitRule(GrammarFileName, "identifier_list"); }
		return retval;

	}
	// $ANTLR end "identifier_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// C.g:255:1: type_name : specifier_qualifier_list ( abstract_declarator )? ;
	[GrammarRule("type_name")]
	public XAstParserRuleReturnScope type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 30);
		var retval = new XAstParserRuleReturnScope("type_name");
		
		retval.Start = (IToken)input.LT(1);
		int type_name_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope specifier_qualifier_list118 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator119 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(255, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// C.g:256:5: ( specifier_qualifier_list ( abstract_declarator )? )
			DebugEnterAlt(1);
			// C.g:256:7: specifier_qualifier_list ( abstract_declarator )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(256, 7);
			PushFollow(Follow._specifier_qualifier_list_in_type_name1205);
			specifier_qualifier_list118=specifier_qualifier_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, specifier_qualifier_list118.Tree, specifier_qualifier_list118, retval);
			DebugLocation(256, 32);
			// C.g:256:32: ( abstract_declarator )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==30||LA35_0==32||LA35_0==59))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:256:32: abstract_declarator
				{
				DebugLocation(256, 32);
				PushFollow(Follow._abstract_declarator_in_type_name1207);
				abstract_declarator119=abstract_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator119.Tree, abstract_declarator119, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(35); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 30);
			LeaveRule("type_name", 30);
			LeaveRule_type_name();
			if (state.backtracking > 0) { Memoize(input, 30, type_name_StartIndex); }

		}
		DebugLocation(257, 4);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_abstract_declarator();
	partial void LeaveRule_abstract_declarator();

	// $ANTLR start "abstract_declarator"
	// C.g:259:1: abstract_declarator : ( pointer ( direct_abstract_declarator )? | direct_abstract_declarator );
	[GrammarRule("abstract_declarator")]
	public XAstParserRuleReturnScope abstract_declarator()
	{
		EnterRule_abstract_declarator();
		EnterRule("abstract_declarator", 31);
		var retval = new XAstParserRuleReturnScope("abstract_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int abstract_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope pointer120 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope direct_abstract_declarator121 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope direct_abstract_declarator122 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "abstract_declarator");
		DebugLocation(259, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// C.g:260:5: ( pointer ( direct_abstract_declarator )? | direct_abstract_declarator )
			int alt37=2;
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==32))
			{
				alt37 = 1;
			}
			else if ((LA37_0==30||LA37_0==59))
			{
				alt37 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:260:7: pointer ( direct_abstract_declarator )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(260, 7);
				PushFollow(Follow._pointer_in_abstract_declarator1225);
				pointer120=pointer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pointer120.Tree, pointer120, retval);
				DebugLocation(260, 15);
				// C.g:260:15: ( direct_abstract_declarator )?
				int alt36=2;
				try { DebugEnterSubRule(36);
				try { DebugEnterDecision(36, false);
				int LA36_0 = input.LA(1);

				if ((LA36_0==30))
				{
					switch (input.LA(2))
					{
					case 31:
						{
						int LA36_8 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 32:
						{
						int LA36_9 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 30:
						{
						int LA36_10 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 59:
						{
						int LA36_11 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 63:
					case 74:
					case 81:
					case 86:
						{
						int LA36_12 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 92:
						{
						int LA36_13 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 66:
						{
						int LA36_14 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 83:
						{
						int LA36_15 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 79:
						{
						int LA36_16 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 80:
						{
						int LA36_17 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 75:
						{
						int LA36_18 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 71:
						{
						int LA36_19 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 84:
						{
						int LA36_20 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 91:
						{
						int LA36_21 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 87:
					case 90:
						{
						int LA36_22 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 73:
						{
						int LA36_23 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case IDENTIFIER:
						{
						int LA36_24 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 67:
					case 93:
						{
						int LA36_25 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					}

				}
				else if ((LA36_0==59))
				{
					switch (input.LA(2))
					{
					case 60:
						{
						int LA36_26 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 30:
						{
						int LA36_27 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case IDENTIFIER:
						{
						int LA36_28 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case HEX_LITERAL:
						{
						int LA36_29 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case OCTAL_LITERAL:
						{
						int LA36_30 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case DECIMAL_LITERAL:
						{
						int LA36_31 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case CHARACTER_LITERAL:
						{
						int LA36_32 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case STRING_LITERAL:
						{
						int LA36_33 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case FLOATING_POINT_LITERAL:
						{
						int LA36_34 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 35:
						{
						int LA36_35 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 39:
						{
						int LA36_36 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 23:
					case 28:
					case 32:
					case 34:
					case 38:
					case 100:
						{
						int LA36_37 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 85:
						{
						int LA36_38 = input.LA(3);

						if ((EvaluatePredicate(synpred62_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					}

				}
				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:260:15: direct_abstract_declarator
					{
					DebugLocation(260, 15);
					PushFollow(Follow._direct_abstract_declarator_in_abstract_declarator1227);
					direct_abstract_declarator121=direct_abstract_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, direct_abstract_declarator121.Tree, direct_abstract_declarator121, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(36); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:261:7: direct_abstract_declarator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(261, 7);
				PushFollow(Follow._direct_abstract_declarator_in_abstract_declarator1236);
				direct_abstract_declarator122=direct_abstract_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, direct_abstract_declarator122.Tree, direct_abstract_declarator122, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("abstract_declarator", 31);
			LeaveRule("abstract_declarator", 31);
			LeaveRule_abstract_declarator();
			if (state.backtracking > 0) { Memoize(input, 31, abstract_declarator_StartIndex); }

		}
		DebugLocation(262, 4);
		} finally { DebugExitRule(GrammarFileName, "abstract_declarator"); }
		return retval;

	}
	// $ANTLR end "abstract_declarator"

	partial void EnterRule_direct_abstract_declarator();
	partial void LeaveRule_direct_abstract_declarator();

	// $ANTLR start "direct_abstract_declarator"
	// C.g:264:1: direct_abstract_declarator : ( '(' abstract_declarator ')' | abstract_declarator_suffix ) ( abstract_declarator_suffix )* ;
	[GrammarRule("direct_abstract_declarator")]
	public XAstParserRuleReturnScope direct_abstract_declarator()
	{
		EnterRule_direct_abstract_declarator();
		EnterRule("direct_abstract_declarator", 32);
		var retval = new XAstParserRuleReturnScope("direct_abstract_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int direct_abstract_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal123 = default(IToken);
		IToken char_literal125 = default(IToken);
		XAstParserRuleReturnScope abstract_declarator124 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator_suffix126 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator_suffix127 = default(XAstParserRuleReturnScope);

		object char_literal123_tree = default(object);
		object char_literal125_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "direct_abstract_declarator");
		DebugLocation(264, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// C.g:265:5: ( ( '(' abstract_declarator ')' | abstract_declarator_suffix ) ( abstract_declarator_suffix )* )
			DebugEnterAlt(1);
			// C.g:265:7: ( '(' abstract_declarator ')' | abstract_declarator_suffix ) ( abstract_declarator_suffix )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(265, 7);
			// C.g:265:7: ( '(' abstract_declarator ')' | abstract_declarator_suffix )
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==30))
			{
				int LA38_1 = input.LA(2);

				if ((LA38_1==IDENTIFIER||LA38_1==31||LA38_1==63||(LA38_1>=66 && LA38_1<=67)||LA38_1==71||(LA38_1>=73 && LA38_1<=75)||(LA38_1>=79 && LA38_1<=81)||(LA38_1>=83 && LA38_1<=84)||(LA38_1>=86 && LA38_1<=87)||(LA38_1>=90 && LA38_1<=93)))
				{
					alt38 = 2;
				}
				else if ((LA38_1==30||LA38_1==32||LA38_1==59))
				{
					alt38 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA38_0==59))
			{
				alt38 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:265:9: '(' abstract_declarator ')'
				{
				DebugLocation(265, 9);
				char_literal123=(IToken)Match(input,30,Follow._30_in_direct_abstract_declarator1255); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal123_tree = (object)adaptor.Create(char_literal123, retval);
				adaptor.AddChild(root_0, char_literal123_tree);
				}
				DebugLocation(265, 13);
				PushFollow(Follow._abstract_declarator_in_direct_abstract_declarator1257);
				abstract_declarator124=abstract_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator124.Tree, abstract_declarator124, retval);
				DebugLocation(265, 33);
				char_literal125=(IToken)Match(input,31,Follow._31_in_direct_abstract_declarator1259); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal125_tree = (object)adaptor.Create(char_literal125, retval);
				adaptor.AddChild(root_0, char_literal125_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:265:39: abstract_declarator_suffix
				{
				DebugLocation(265, 39);
				PushFollow(Follow._abstract_declarator_suffix_in_direct_abstract_declarator1263);
				abstract_declarator_suffix126=abstract_declarator_suffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator_suffix126.Tree, abstract_declarator_suffix126, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(265, 68);
			// C.g:265:68: ( abstract_declarator_suffix )*
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==30))
				{
					switch (input.LA(2))
					{
					case 31:
						{
						int LA39_8 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA39_10 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 63:
					case 74:
					case 81:
					case 86:
						{
						int LA39_13 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 92:
						{
						int LA39_14 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 66:
						{
						int LA39_15 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 83:
						{
						int LA39_16 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 79:
						{
						int LA39_17 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 80:
						{
						int LA39_18 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 75:
						{
						int LA39_19 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 71:
						{
						int LA39_20 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 84:
						{
						int LA39_21 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 91:
						{
						int LA39_22 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 87:
					case 90:
						{
						int LA39_23 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 73:
						{
						int LA39_24 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 67:
					case 93:
						{
						int LA39_25 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					}

				}
				else if ((LA39_0==59))
				{
					switch (input.LA(2))
					{
					case 60:
						{
						int LA39_26 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 30:
						{
						int LA39_27 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA39_28 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case HEX_LITERAL:
						{
						int LA39_29 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case OCTAL_LITERAL:
						{
						int LA39_30 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case DECIMAL_LITERAL:
						{
						int LA39_31 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case CHARACTER_LITERAL:
						{
						int LA39_32 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case STRING_LITERAL:
						{
						int LA39_33 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case FLOATING_POINT_LITERAL:
						{
						int LA39_34 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 35:
						{
						int LA39_35 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 39:
						{
						int LA39_36 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 23:
					case 28:
					case 32:
					case 34:
					case 38:
					case 100:
						{
						int LA39_37 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 85:
						{
						int LA39_38 = input.LA(3);

						if ((EvaluatePredicate(synpred65_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					}

				}


				} finally { DebugExitDecision(39); }
				switch ( alt39 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:265:68: abstract_declarator_suffix
					{
					DebugLocation(265, 68);
					PushFollow(Follow._abstract_declarator_suffix_in_direct_abstract_declarator1267);
					abstract_declarator_suffix127=abstract_declarator_suffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator_suffix127.Tree, abstract_declarator_suffix127, retval);

					}
					break;

				default:
					goto loop39;
				}
			}

			loop39:
				;

			} finally { DebugExitSubRule(39); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("direct_abstract_declarator", 32);
			LeaveRule("direct_abstract_declarator", 32);
			LeaveRule_direct_abstract_declarator();
			if (state.backtracking > 0) { Memoize(input, 32, direct_abstract_declarator_StartIndex); }

		}
		DebugLocation(266, 4);
		} finally { DebugExitRule(GrammarFileName, "direct_abstract_declarator"); }
		return retval;

	}
	// $ANTLR end "direct_abstract_declarator"

	partial void EnterRule_abstract_declarator_suffix();
	partial void LeaveRule_abstract_declarator_suffix();

	// $ANTLR start "abstract_declarator_suffix"
	// C.g:268:1: abstract_declarator_suffix : ( '[' ']' | '[' constant_expression ']' | '(' ')' | '(' parameter_type_list ')' );
	[GrammarRule("abstract_declarator_suffix")]
	public XAstParserRuleReturnScope abstract_declarator_suffix()
	{
		EnterRule_abstract_declarator_suffix();
		EnterRule("abstract_declarator_suffix", 33);
		var retval = new XAstParserRuleReturnScope("abstract_declarator_suffix");
		
		retval.Start = (IToken)input.LT(1);
		int abstract_declarator_suffix_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal128 = default(IToken);
		IToken char_literal129 = default(IToken);
		IToken char_literal130 = default(IToken);
		IToken char_literal132 = default(IToken);
		IToken char_literal133 = default(IToken);
		IToken char_literal134 = default(IToken);
		IToken char_literal135 = default(IToken);
		IToken char_literal137 = default(IToken);
		XAstParserRuleReturnScope constant_expression131 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope parameter_type_list136 = default(XAstParserRuleReturnScope);

		object char_literal128_tree = default(object);
		object char_literal129_tree = default(object);
		object char_literal130_tree = default(object);
		object char_literal132_tree = default(object);
		object char_literal133_tree = default(object);
		object char_literal134_tree = default(object);
		object char_literal135_tree = default(object);
		object char_literal137_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "abstract_declarator_suffix");
		DebugLocation(268, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// C.g:269:5: ( '[' ']' | '[' constant_expression ']' | '(' ')' | '(' parameter_type_list ')' )
			int alt40=4;
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==59))
			{
				int LA40_1 = input.LA(2);

				if ((LA40_1==60))
				{
					alt40 = 1;
				}
				else if ((LA40_1==CHARACTER_LITERAL||LA40_1==DECIMAL_LITERAL||LA40_1==FLOATING_POINT_LITERAL||LA40_1==HEX_LITERAL||LA40_1==IDENTIFIER||LA40_1==OCTAL_LITERAL||LA40_1==STRING_LITERAL||LA40_1==23||LA40_1==28||LA40_1==30||LA40_1==32||(LA40_1>=34 && LA40_1<=35)||(LA40_1>=38 && LA40_1<=39)||LA40_1==85||LA40_1==100))
				{
					alt40 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 40, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA40_0==30))
			{
				int LA40_2 = input.LA(2);

				if ((LA40_2==31))
				{
					alt40 = 3;
				}
				else if ((LA40_2==IDENTIFIER||LA40_2==63||(LA40_2>=66 && LA40_2<=67)||LA40_2==71||(LA40_2>=73 && LA40_2<=75)||(LA40_2>=79 && LA40_2<=81)||(LA40_2>=83 && LA40_2<=84)||(LA40_2>=86 && LA40_2<=87)||(LA40_2>=90 && LA40_2<=93)))
				{
					alt40 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 40, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 40, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:269:7: '[' ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(269, 7);
				char_literal128=(IToken)Match(input,59,Follow._59_in_abstract_declarator_suffix1285); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal128_tree = (object)adaptor.Create(char_literal128, retval);
				adaptor.AddChild(root_0, char_literal128_tree);
				}
				DebugLocation(269, 11);
				char_literal129=(IToken)Match(input,60,Follow._60_in_abstract_declarator_suffix1287); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal129_tree = (object)adaptor.Create(char_literal129, retval);
				adaptor.AddChild(root_0, char_literal129_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:270:7: '[' constant_expression ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(270, 7);
				char_literal130=(IToken)Match(input,59,Follow._59_in_abstract_declarator_suffix1295); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal130_tree = (object)adaptor.Create(char_literal130, retval);
				adaptor.AddChild(root_0, char_literal130_tree);
				}
				DebugLocation(270, 11);
				PushFollow(Follow._constant_expression_in_abstract_declarator_suffix1297);
				constant_expression131=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression131.Tree, constant_expression131, retval);
				DebugLocation(270, 31);
				char_literal132=(IToken)Match(input,60,Follow._60_in_abstract_declarator_suffix1299); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal132_tree = (object)adaptor.Create(char_literal132, retval);
				adaptor.AddChild(root_0, char_literal132_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:271:7: '(' ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(271, 7);
				char_literal133=(IToken)Match(input,30,Follow._30_in_abstract_declarator_suffix1307); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal133_tree = (object)adaptor.Create(char_literal133, retval);
				adaptor.AddChild(root_0, char_literal133_tree);
				}
				DebugLocation(271, 11);
				char_literal134=(IToken)Match(input,31,Follow._31_in_abstract_declarator_suffix1309); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal134_tree = (object)adaptor.Create(char_literal134, retval);
				adaptor.AddChild(root_0, char_literal134_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:272:7: '(' parameter_type_list ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(272, 7);
				char_literal135=(IToken)Match(input,30,Follow._30_in_abstract_declarator_suffix1317); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal135_tree = (object)adaptor.Create(char_literal135, retval);
				adaptor.AddChild(root_0, char_literal135_tree);
				}
				DebugLocation(272, 11);
				PushFollow(Follow._parameter_type_list_in_abstract_declarator_suffix1319);
				parameter_type_list136=parameter_type_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_type_list136.Tree, parameter_type_list136, retval);
				DebugLocation(272, 31);
				char_literal137=(IToken)Match(input,31,Follow._31_in_abstract_declarator_suffix1321); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal137_tree = (object)adaptor.Create(char_literal137, retval);
				adaptor.AddChild(root_0, char_literal137_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("abstract_declarator_suffix", 33);
			LeaveRule("abstract_declarator_suffix", 33);
			LeaveRule_abstract_declarator_suffix();
			if (state.backtracking > 0) { Memoize(input, 33, abstract_declarator_suffix_StartIndex); }

		}
		DebugLocation(273, 4);
		} finally { DebugExitRule(GrammarFileName, "abstract_declarator_suffix"); }
		return retval;

	}
	// $ANTLR end "abstract_declarator_suffix"

	partial void EnterRule_initializer();
	partial void LeaveRule_initializer();

	// $ANTLR start "initializer"
	// C.g:275:1: initializer : ( assignment_expression | '{' initializer_list ( ',' )? '}' );
	[GrammarRule("initializer")]
	public XAstParserRuleReturnScope initializer()
	{
		EnterRule_initializer();
		EnterRule("initializer", 34);
		var retval = new XAstParserRuleReturnScope("initializer");
		
		retval.Start = (IToken)input.LT(1);
		int initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal139 = default(IToken);
		IToken char_literal141 = default(IToken);
		IToken char_literal142 = default(IToken);
		XAstParserRuleReturnScope assignment_expression138 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope initializer_list140 = default(XAstParserRuleReturnScope);

		object char_literal139_tree = default(object);
		object char_literal141_tree = default(object);
		object char_literal142_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "initializer");
		DebugLocation(275, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// C.g:276:5: ( assignment_expression | '{' initializer_list ( ',' )? '}' )
			int alt42=2;
			try { DebugEnterDecision(42, false);
			int LA42_0 = input.LA(1);

			if ((LA42_0==CHARACTER_LITERAL||LA42_0==DECIMAL_LITERAL||LA42_0==FLOATING_POINT_LITERAL||LA42_0==HEX_LITERAL||LA42_0==IDENTIFIER||LA42_0==OCTAL_LITERAL||LA42_0==STRING_LITERAL||LA42_0==23||LA42_0==28||LA42_0==30||LA42_0==32||(LA42_0>=34 && LA42_0<=35)||(LA42_0>=38 && LA42_0<=39)||LA42_0==85||LA42_0==100))
			{
				alt42 = 1;
			}
			else if ((LA42_0==95))
			{
				alt42 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 42, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:276:7: assignment_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(276, 7);
				PushFollow(Follow._assignment_expression_in_initializer1342);
				assignment_expression138=assignment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression138.Tree, assignment_expression138, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:277:7: '{' initializer_list ( ',' )? '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(277, 7);
				char_literal139=(IToken)Match(input,95,Follow._95_in_initializer1350); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal139_tree = (object)adaptor.Create(char_literal139, retval);
				adaptor.AddChild(root_0, char_literal139_tree);
				}
				DebugLocation(277, 11);
				PushFollow(Follow._initializer_list_in_initializer1352);
				initializer_list140=initializer_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, initializer_list140.Tree, initializer_list140, retval);
				DebugLocation(277, 28);
				// C.g:277:28: ( ',' )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==37))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:277:28: ','
					{
					DebugLocation(277, 28);
					char_literal141=(IToken)Match(input,37,Follow._37_in_initializer1354); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal141_tree = (object)adaptor.Create(char_literal141, retval);
					adaptor.AddChild(root_0, char_literal141_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(41); }

				DebugLocation(277, 33);
				char_literal142=(IToken)Match(input,99,Follow._99_in_initializer1357); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal142_tree = (object)adaptor.Create(char_literal142, retval);
				adaptor.AddChild(root_0, char_literal142_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("initializer", 34);
			LeaveRule("initializer", 34);
			LeaveRule_initializer();
			if (state.backtracking > 0) { Memoize(input, 34, initializer_StartIndex); }

		}
		DebugLocation(278, 4);
		} finally { DebugExitRule(GrammarFileName, "initializer"); }
		return retval;

	}
	// $ANTLR end "initializer"

	partial void EnterRule_initializer_list();
	partial void LeaveRule_initializer_list();

	// $ANTLR start "initializer_list"
	// C.g:280:1: initializer_list : initializer ( ',' initializer )* ;
	[GrammarRule("initializer_list")]
	public XAstParserRuleReturnScope initializer_list()
	{
		EnterRule_initializer_list();
		EnterRule("initializer_list", 35);
		var retval = new XAstParserRuleReturnScope("initializer_list");
		
		retval.Start = (IToken)input.LT(1);
		int initializer_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal144 = default(IToken);
		XAstParserRuleReturnScope initializer143 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope initializer145 = default(XAstParserRuleReturnScope);

		object char_literal144_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "initializer_list");
		DebugLocation(280, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// C.g:281:5: ( initializer ( ',' initializer )* )
			DebugEnterAlt(1);
			// C.g:281:7: initializer ( ',' initializer )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(281, 7);
			PushFollow(Follow._initializer_in_initializer_list1374);
			initializer143=initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, initializer143.Tree, initializer143, retval);
			DebugLocation(281, 19);
			// C.g:281:19: ( ',' initializer )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==37))
				{
					int LA43_1 = input.LA(2);

					if ((LA43_1==CHARACTER_LITERAL||LA43_1==DECIMAL_LITERAL||LA43_1==FLOATING_POINT_LITERAL||LA43_1==HEX_LITERAL||LA43_1==IDENTIFIER||LA43_1==OCTAL_LITERAL||LA43_1==STRING_LITERAL||LA43_1==23||LA43_1==28||LA43_1==30||LA43_1==32||(LA43_1>=34 && LA43_1<=35)||(LA43_1>=38 && LA43_1<=39)||LA43_1==85||LA43_1==95||LA43_1==100))
					{
						alt43 = 1;
					}


				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:281:20: ',' initializer
					{
					DebugLocation(281, 20);
					char_literal144=(IToken)Match(input,37,Follow._37_in_initializer_list1377); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal144_tree = (object)adaptor.Create(char_literal144, retval);
					adaptor.AddChild(root_0, char_literal144_tree);
					}
					DebugLocation(281, 24);
					PushFollow(Follow._initializer_in_initializer_list1379);
					initializer145=initializer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, initializer145.Tree, initializer145, retval);

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("initializer_list", 35);
			LeaveRule("initializer_list", 35);
			LeaveRule_initializer_list();
			if (state.backtracking > 0) { Memoize(input, 35, initializer_list_StartIndex); }

		}
		DebugLocation(282, 4);
		} finally { DebugExitRule(GrammarFileName, "initializer_list"); }
		return retval;

	}
	// $ANTLR end "initializer_list"

	partial void EnterRule_argument_expression_list();
	partial void LeaveRule_argument_expression_list();

	// $ANTLR start "argument_expression_list"
	// C.g:286:1: argument_expression_list : assignment_expression ( ',' assignment_expression )* ;
	[GrammarRule("argument_expression_list")]
	public XAstParserRuleReturnScope argument_expression_list()
	{
		EnterRule_argument_expression_list();
		EnterRule("argument_expression_list", 36);
		var retval = new XAstParserRuleReturnScope("argument_expression_list");
		
		retval.Start = (IToken)input.LT(1);
		int argument_expression_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal147 = default(IToken);
		XAstParserRuleReturnScope assignment_expression146 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression148 = default(XAstParserRuleReturnScope);

		object char_literal147_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "argument_expression_list");
		DebugLocation(286, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// C.g:287:5: ( assignment_expression ( ',' assignment_expression )* )
			DebugEnterAlt(1);
			// C.g:287:9: assignment_expression ( ',' assignment_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(287, 9);
			PushFollow(Follow._assignment_expression_in_argument_expression_list1402);
			assignment_expression146=assignment_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression146.Tree, assignment_expression146, retval);
			DebugLocation(287, 31);
			// C.g:287:31: ( ',' assignment_expression )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==37))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:287:32: ',' assignment_expression
					{
					DebugLocation(287, 32);
					char_literal147=(IToken)Match(input,37,Follow._37_in_argument_expression_list1405); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal147_tree = (object)adaptor.Create(char_literal147, retval);
					adaptor.AddChild(root_0, char_literal147_tree);
					}
					DebugLocation(287, 36);
					PushFollow(Follow._assignment_expression_in_argument_expression_list1407);
					assignment_expression148=assignment_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression148.Tree, assignment_expression148, retval);

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("argument_expression_list", 36);
			LeaveRule("argument_expression_list", 36);
			LeaveRule_argument_expression_list();
			if (state.backtracking > 0) { Memoize(input, 36, argument_expression_list_StartIndex); }

		}
		DebugLocation(288, 4);
		} finally { DebugExitRule(GrammarFileName, "argument_expression_list"); }
		return retval;

	}
	// $ANTLR end "argument_expression_list"

	partial void EnterRule_additive_expression();
	partial void LeaveRule_additive_expression();

	// $ANTLR start "additive_expression"
	// C.g:290:1: additive_expression : ( multiplicative_expression ) ( '+' multiplicative_expression | '-' multiplicative_expression )* ;
	[GrammarRule("additive_expression")]
	public XAstParserRuleReturnScope additive_expression()
	{
		EnterRule_additive_expression();
		EnterRule("additive_expression", 37);
		var retval = new XAstParserRuleReturnScope("additive_expression");
		
		retval.Start = (IToken)input.LT(1);
		int additive_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal150 = default(IToken);
		IToken char_literal152 = default(IToken);
		XAstParserRuleReturnScope multiplicative_expression149 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope multiplicative_expression151 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope multiplicative_expression153 = default(XAstParserRuleReturnScope);

		object char_literal150_tree = default(object);
		object char_literal152_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "additive_expression");
		DebugLocation(290, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// C.g:291:5: ( ( multiplicative_expression ) ( '+' multiplicative_expression | '-' multiplicative_expression )* )
			DebugEnterAlt(1);
			// C.g:291:7: ( multiplicative_expression ) ( '+' multiplicative_expression | '-' multiplicative_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(291, 7);
			// C.g:291:7: ( multiplicative_expression )
			DebugEnterAlt(1);
			// C.g:291:8: multiplicative_expression
			{
			DebugLocation(291, 8);
			PushFollow(Follow._multiplicative_expression_in_additive_expression1427);
			multiplicative_expression149=multiplicative_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression149.Tree, multiplicative_expression149, retval);

			}

			DebugLocation(291, 35);
			// C.g:291:35: ( '+' multiplicative_expression | '-' multiplicative_expression )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=3;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==34))
				{
					alt45 = 1;
				}
				else if ((LA45_0==38))
				{
					alt45 = 2;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:291:36: '+' multiplicative_expression
					{
					DebugLocation(291, 36);
					char_literal150=(IToken)Match(input,34,Follow._34_in_additive_expression1431); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal150_tree = (object)adaptor.Create(char_literal150, retval);
					adaptor.AddChild(root_0, char_literal150_tree);
					}
					DebugLocation(291, 40);
					PushFollow(Follow._multiplicative_expression_in_additive_expression1433);
					multiplicative_expression151=multiplicative_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression151.Tree, multiplicative_expression151, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:291:68: '-' multiplicative_expression
					{
					DebugLocation(291, 68);
					char_literal152=(IToken)Match(input,38,Follow._38_in_additive_expression1437); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal152_tree = (object)adaptor.Create(char_literal152, retval);
					adaptor.AddChild(root_0, char_literal152_tree);
					}
					DebugLocation(291, 72);
					PushFollow(Follow._multiplicative_expression_in_additive_expression1439);
					multiplicative_expression153=multiplicative_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression153.Tree, multiplicative_expression153, retval);

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additive_expression", 37);
			LeaveRule("additive_expression", 37);
			LeaveRule_additive_expression();
			if (state.backtracking > 0) { Memoize(input, 37, additive_expression_StartIndex); }

		}
		DebugLocation(292, 4);
		} finally { DebugExitRule(GrammarFileName, "additive_expression"); }
		return retval;

	}
	// $ANTLR end "additive_expression"

	partial void EnterRule_multiplicative_expression();
	partial void LeaveRule_multiplicative_expression();

	// $ANTLR start "multiplicative_expression"
	// C.g:294:1: multiplicative_expression : ( cast_expression ) ( '*' cast_expression | '/' cast_expression | '%' cast_expression )* ;
	[GrammarRule("multiplicative_expression")]
	public XAstParserRuleReturnScope multiplicative_expression()
	{
		EnterRule_multiplicative_expression();
		EnterRule("multiplicative_expression", 38);
		var retval = new XAstParserRuleReturnScope("multiplicative_expression");
		
		retval.Start = (IToken)input.LT(1);
		int multiplicative_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal155 = default(IToken);
		IToken char_literal157 = default(IToken);
		IToken char_literal159 = default(IToken);
		XAstParserRuleReturnScope cast_expression154 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression156 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression158 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression160 = default(XAstParserRuleReturnScope);

		object char_literal155_tree = default(object);
		object char_literal157_tree = default(object);
		object char_literal159_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "multiplicative_expression");
		DebugLocation(294, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// C.g:295:5: ( ( cast_expression ) ( '*' cast_expression | '/' cast_expression | '%' cast_expression )* )
			DebugEnterAlt(1);
			// C.g:295:7: ( cast_expression ) ( '*' cast_expression | '/' cast_expression | '%' cast_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(295, 7);
			// C.g:295:7: ( cast_expression )
			DebugEnterAlt(1);
			// C.g:295:8: cast_expression
			{
			DebugLocation(295, 8);
			PushFollow(Follow._cast_expression_in_multiplicative_expression1459);
			cast_expression154=cast_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression154.Tree, cast_expression154, retval);

			}

			DebugLocation(295, 25);
			// C.g:295:25: ( '*' cast_expression | '/' cast_expression | '%' cast_expression )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=4;
				try { DebugEnterDecision(46, false);
				switch (input.LA(1))
				{
				case 32:
					{
					alt46 = 1;
					}
					break;
				case 44:
					{
					alt46 = 2;
					}
					break;
				case 25:
					{
					alt46 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:295:26: '*' cast_expression
					{
					DebugLocation(295, 26);
					char_literal155=(IToken)Match(input,32,Follow._32_in_multiplicative_expression1463); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal155_tree = (object)adaptor.Create(char_literal155, retval);
					adaptor.AddChild(root_0, char_literal155_tree);
					}
					DebugLocation(295, 30);
					PushFollow(Follow._cast_expression_in_multiplicative_expression1465);
					cast_expression156=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression156.Tree, cast_expression156, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:295:48: '/' cast_expression
					{
					DebugLocation(295, 48);
					char_literal157=(IToken)Match(input,44,Follow._44_in_multiplicative_expression1469); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal157_tree = (object)adaptor.Create(char_literal157, retval);
					adaptor.AddChild(root_0, char_literal157_tree);
					}
					DebugLocation(295, 52);
					PushFollow(Follow._cast_expression_in_multiplicative_expression1471);
					cast_expression158=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression158.Tree, cast_expression158, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C.g:295:70: '%' cast_expression
					{
					DebugLocation(295, 70);
					char_literal159=(IToken)Match(input,25,Follow._25_in_multiplicative_expression1475); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal159_tree = (object)adaptor.Create(char_literal159, retval);
					adaptor.AddChild(root_0, char_literal159_tree);
					}
					DebugLocation(295, 74);
					PushFollow(Follow._cast_expression_in_multiplicative_expression1477);
					cast_expression160=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression160.Tree, cast_expression160, retval);

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicative_expression", 38);
			LeaveRule("multiplicative_expression", 38);
			LeaveRule_multiplicative_expression();
			if (state.backtracking > 0) { Memoize(input, 38, multiplicative_expression_StartIndex); }

		}
		DebugLocation(296, 4);
		} finally { DebugExitRule(GrammarFileName, "multiplicative_expression"); }
		return retval;

	}
	// $ANTLR end "multiplicative_expression"

	partial void EnterRule_cast_expression();
	partial void LeaveRule_cast_expression();

	// $ANTLR start "cast_expression"
	// C.g:298:1: cast_expression : ( '(' type_name ')' cast_expression | unary_expression );
	[GrammarRule("cast_expression")]
	public XAstParserRuleReturnScope cast_expression()
	{
		EnterRule_cast_expression();
		EnterRule("cast_expression", 39);
		var retval = new XAstParserRuleReturnScope("cast_expression");
		
		retval.Start = (IToken)input.LT(1);
		int cast_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal161 = default(IToken);
		IToken char_literal163 = default(IToken);
		XAstParserRuleReturnScope type_name162 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression164 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression165 = default(XAstParserRuleReturnScope);

		object char_literal161_tree = default(object);
		object char_literal163_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "cast_expression");
		DebugLocation(298, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// C.g:299:5: ( '(' type_name ')' cast_expression | unary_expression )
			int alt47=2;
			try { DebugEnterDecision(47, false);
			int LA47_0 = input.LA(1);

			if ((LA47_0==30))
			{
				switch (input.LA(2))
				{
				case 66:
				case 67:
				case 71:
				case 73:
				case 75:
				case 79:
				case 80:
				case 83:
				case 84:
				case 87:
				case 90:
				case 91:
				case 92:
				case 93:
					{
					alt47 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA47_25 = input.LA(3);

					if ((EvaluatePredicate(synpred78_C_fragment)))
					{
						alt47 = 1;
					}
					else if ((true))
					{
						alt47 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 47, 25, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case CHARACTER_LITERAL:
				case DECIMAL_LITERAL:
				case FLOATING_POINT_LITERAL:
				case HEX_LITERAL:
				case OCTAL_LITERAL:
				case STRING_LITERAL:
				case 23:
				case 28:
				case 30:
				case 32:
				case 34:
				case 35:
				case 38:
				case 39:
				case 85:
				case 100:
					{
					alt47 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 47, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA47_0==CHARACTER_LITERAL||LA47_0==DECIMAL_LITERAL||LA47_0==FLOATING_POINT_LITERAL||LA47_0==HEX_LITERAL||LA47_0==IDENTIFIER||LA47_0==OCTAL_LITERAL||LA47_0==STRING_LITERAL||LA47_0==23||LA47_0==28||LA47_0==32||(LA47_0>=34 && LA47_0<=35)||(LA47_0>=38 && LA47_0<=39)||LA47_0==85||LA47_0==100))
			{
				alt47 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 47, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:299:7: '(' type_name ')' cast_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(299, 7);
				char_literal161=(IToken)Match(input,30,Follow._30_in_cast_expression1496); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal161_tree = (object)adaptor.Create(char_literal161, retval);
				adaptor.AddChild(root_0, char_literal161_tree);
				}
				DebugLocation(299, 11);
				PushFollow(Follow._type_name_in_cast_expression1498);
				type_name162=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_name162.Tree, type_name162, retval);
				DebugLocation(299, 21);
				char_literal163=(IToken)Match(input,31,Follow._31_in_cast_expression1500); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal163_tree = (object)adaptor.Create(char_literal163, retval);
				adaptor.AddChild(root_0, char_literal163_tree);
				}
				DebugLocation(299, 25);
				PushFollow(Follow._cast_expression_in_cast_expression1502);
				cast_expression164=cast_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression164.Tree, cast_expression164, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:300:7: unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(300, 7);
				PushFollow(Follow._unary_expression_in_cast_expression1510);
				unary_expression165=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression165.Tree, unary_expression165, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expression", 39);
			LeaveRule("cast_expression", 39);
			LeaveRule_cast_expression();
			if (state.backtracking > 0) { Memoize(input, 39, cast_expression_StartIndex); }

		}
		DebugLocation(301, 4);
		} finally { DebugExitRule(GrammarFileName, "cast_expression"); }
		return retval;

	}
	// $ANTLR end "cast_expression"

	partial void EnterRule_unary_expression();
	partial void LeaveRule_unary_expression();

	// $ANTLR start "unary_expression"
	// C.g:303:1: unary_expression : ( postfix_expression | '++' unary_expression | '--' unary_expression | unary_operator cast_expression | 'sizeof' unary_expression | 'sizeof' '(' type_name ')' );
	[GrammarRule("unary_expression")]
	public XAstParserRuleReturnScope unary_expression()
	{
		EnterRule_unary_expression();
		EnterRule("unary_expression", 40);
		var retval = new XAstParserRuleReturnScope("unary_expression");
		
		retval.Start = (IToken)input.LT(1);
		int unary_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal167 = default(IToken);
		IToken string_literal169 = default(IToken);
		IToken string_literal173 = default(IToken);
		IToken string_literal175 = default(IToken);
		IToken char_literal176 = default(IToken);
		IToken char_literal178 = default(IToken);
		XAstParserRuleReturnScope postfix_expression166 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression168 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression170 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_operator171 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression172 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression174 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name177 = default(XAstParserRuleReturnScope);

		object string_literal167_tree = default(object);
		object string_literal169_tree = default(object);
		object string_literal173_tree = default(object);
		object string_literal175_tree = default(object);
		object char_literal176_tree = default(object);
		object char_literal178_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unary_expression");
		DebugLocation(303, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// C.g:304:5: ( postfix_expression | '++' unary_expression | '--' unary_expression | unary_operator cast_expression | 'sizeof' unary_expression | 'sizeof' '(' type_name ')' )
			int alt48=6;
			try { DebugEnterDecision(48, false);
			switch (input.LA(1))
			{
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENTIFIER:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
			case 30:
				{
				alt48 = 1;
				}
				break;
			case 35:
				{
				alt48 = 2;
				}
				break;
			case 39:
				{
				alt48 = 3;
				}
				break;
			case 23:
			case 28:
			case 32:
			case 34:
			case 38:
			case 100:
				{
				alt48 = 4;
				}
				break;
			case 85:
				{
				int LA48_12 = input.LA(2);

				if ((LA48_12==30))
				{
					int LA48_13 = input.LA(3);

					if ((EvaluatePredicate(synpred83_C_fragment)))
					{
						alt48 = 5;
					}
					else if ((true))
					{
						alt48 = 6;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 48, 13, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA48_12==CHARACTER_LITERAL||LA48_12==DECIMAL_LITERAL||LA48_12==FLOATING_POINT_LITERAL||LA48_12==HEX_LITERAL||LA48_12==IDENTIFIER||LA48_12==OCTAL_LITERAL||LA48_12==STRING_LITERAL||LA48_12==23||LA48_12==28||LA48_12==32||(LA48_12>=34 && LA48_12<=35)||(LA48_12>=38 && LA48_12<=39)||LA48_12==85||LA48_12==100))
				{
					alt48 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 48, 12, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:304:7: postfix_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(304, 7);
				PushFollow(Follow._postfix_expression_in_unary_expression1527);
				postfix_expression166=postfix_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, postfix_expression166.Tree, postfix_expression166, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:305:7: '++' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(305, 7);
				string_literal167=(IToken)Match(input,35,Follow._35_in_unary_expression1535); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal167_tree = (object)adaptor.Create(string_literal167, retval);
				adaptor.AddChild(root_0, string_literal167_tree);
				}
				DebugLocation(305, 12);
				PushFollow(Follow._unary_expression_in_unary_expression1537);
				unary_expression168=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression168.Tree, unary_expression168, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:306:7: '--' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(306, 7);
				string_literal169=(IToken)Match(input,39,Follow._39_in_unary_expression1545); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal169_tree = (object)adaptor.Create(string_literal169, retval);
				adaptor.AddChild(root_0, string_literal169_tree);
				}
				DebugLocation(306, 12);
				PushFollow(Follow._unary_expression_in_unary_expression1547);
				unary_expression170=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression170.Tree, unary_expression170, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:307:7: unary_operator cast_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(307, 7);
				PushFollow(Follow._unary_operator_in_unary_expression1555);
				unary_operator171=unary_operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_operator171.Tree, unary_operator171, retval);
				DebugLocation(307, 22);
				PushFollow(Follow._cast_expression_in_unary_expression1557);
				cast_expression172=cast_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression172.Tree, cast_expression172, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:308:7: 'sizeof' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(308, 7);
				string_literal173=(IToken)Match(input,85,Follow._85_in_unary_expression1565); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal173_tree = (object)adaptor.Create(string_literal173, retval);
				adaptor.AddChild(root_0, string_literal173_tree);
				}
				DebugLocation(308, 16);
				PushFollow(Follow._unary_expression_in_unary_expression1567);
				unary_expression174=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression174.Tree, unary_expression174, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:309:7: 'sizeof' '(' type_name ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(309, 7);
				string_literal175=(IToken)Match(input,85,Follow._85_in_unary_expression1575); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal175_tree = (object)adaptor.Create(string_literal175, retval);
				adaptor.AddChild(root_0, string_literal175_tree);
				}
				DebugLocation(309, 16);
				char_literal176=(IToken)Match(input,30,Follow._30_in_unary_expression1577); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal176_tree = (object)adaptor.Create(char_literal176, retval);
				adaptor.AddChild(root_0, char_literal176_tree);
				}
				DebugLocation(309, 20);
				PushFollow(Follow._type_name_in_unary_expression1579);
				type_name177=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_name177.Tree, type_name177, retval);
				DebugLocation(309, 30);
				char_literal178=(IToken)Match(input,31,Follow._31_in_unary_expression1581); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal178_tree = (object)adaptor.Create(char_literal178, retval);
				adaptor.AddChild(root_0, char_literal178_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_expression", 40);
			LeaveRule("unary_expression", 40);
			LeaveRule_unary_expression();
			if (state.backtracking > 0) { Memoize(input, 40, unary_expression_StartIndex); }

		}
		DebugLocation(310, 4);
		} finally { DebugExitRule(GrammarFileName, "unary_expression"); }
		return retval;

	}
	// $ANTLR end "unary_expression"

	partial void EnterRule_postfix_expression();
	partial void LeaveRule_postfix_expression();

	// $ANTLR start "postfix_expression"
	// C.g:312:1: postfix_expression : primary_expression ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )* ;
	[GrammarRule("postfix_expression")]
	public XAstParserRuleReturnScope postfix_expression()
	{
		EnterRule_postfix_expression();
		EnterRule("postfix_expression", 41);
		var retval = new XAstParserRuleReturnScope("postfix_expression");
		
		retval.Start = (IToken)input.LT(1);
		int postfix_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal180 = default(IToken);
		IToken char_literal182 = default(IToken);
		IToken char_literal183 = default(IToken);
		IToken char_literal184 = default(IToken);
		IToken char_literal185 = default(IToken);
		IToken char_literal187 = default(IToken);
		IToken char_literal188 = default(IToken);
		IToken IDENTIFIER189 = default(IToken);
		IToken string_literal190 = default(IToken);
		IToken IDENTIFIER191 = default(IToken);
		IToken string_literal192 = default(IToken);
		IToken string_literal193 = default(IToken);
		XAstParserRuleReturnScope primary_expression179 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression181 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope argument_expression_list186 = default(XAstParserRuleReturnScope);

		object char_literal180_tree = default(object);
		object char_literal182_tree = default(object);
		object char_literal183_tree = default(object);
		object char_literal184_tree = default(object);
		object char_literal185_tree = default(object);
		object char_literal187_tree = default(object);
		object char_literal188_tree = default(object);
		object IDENTIFIER189_tree = default(object);
		object string_literal190_tree = default(object);
		object IDENTIFIER191_tree = default(object);
		object string_literal192_tree = default(object);
		object string_literal193_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "postfix_expression");
		DebugLocation(312, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// C.g:313:5: ( primary_expression ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )* )
			DebugEnterAlt(1);
			// C.g:313:9: primary_expression ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(313, 9);
			PushFollow(Follow._primary_expression_in_postfix_expression1600);
			primary_expression179=primary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression179.Tree, primary_expression179, retval);
			DebugLocation(314, 9);
			// C.g:314:9: ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )*
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=8;
				try { DebugEnterDecision(49, false);
				switch (input.LA(1))
				{
				case 59:
					{
					alt49 = 1;
					}
					break;
				case 30:
					{
					int LA49_24 = input.LA(2);

					if ((LA49_24==31))
					{
						alt49 = 2;
					}
					else if ((LA49_24==CHARACTER_LITERAL||LA49_24==DECIMAL_LITERAL||LA49_24==FLOATING_POINT_LITERAL||LA49_24==HEX_LITERAL||LA49_24==IDENTIFIER||LA49_24==OCTAL_LITERAL||LA49_24==STRING_LITERAL||LA49_24==23||LA49_24==28||LA49_24==30||LA49_24==32||(LA49_24>=34 && LA49_24<=35)||(LA49_24>=38 && LA49_24<=39)||LA49_24==85||LA49_24==100))
					{
						alt49 = 3;
					}


					}
					break;
				case 42:
					{
					alt49 = 4;
					}
					break;
				case 41:
					{
					alt49 = 5;
					}
					break;
				case 35:
					{
					alt49 = 6;
					}
					break;
				case 39:
					{
					alt49 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(49); }
				switch ( alt49 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:314:13: '[' expression ']'
					{
					DebugLocation(314, 13);
					char_literal180=(IToken)Match(input,59,Follow._59_in_postfix_expression1614); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal180_tree = (object)adaptor.Create(char_literal180, retval);
					adaptor.AddChild(root_0, char_literal180_tree);
					}
					DebugLocation(314, 17);
					PushFollow(Follow._expression_in_postfix_expression1616);
					expression181=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression181.Tree, expression181, retval);
					DebugLocation(314, 28);
					char_literal182=(IToken)Match(input,60,Follow._60_in_postfix_expression1618); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal182_tree = (object)adaptor.Create(char_literal182, retval);
					adaptor.AddChild(root_0, char_literal182_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:315:13: '(' ')'
					{
					DebugLocation(315, 13);
					char_literal183=(IToken)Match(input,30,Follow._30_in_postfix_expression1632); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal183_tree = (object)adaptor.Create(char_literal183, retval);
					adaptor.AddChild(root_0, char_literal183_tree);
					}
					DebugLocation(315, 17);
					char_literal184=(IToken)Match(input,31,Follow._31_in_postfix_expression1634); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal184_tree = (object)adaptor.Create(char_literal184, retval);
					adaptor.AddChild(root_0, char_literal184_tree);
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C.g:316:13: '(' argument_expression_list ')'
					{
					DebugLocation(316, 13);
					char_literal185=(IToken)Match(input,30,Follow._30_in_postfix_expression1648); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal185_tree = (object)adaptor.Create(char_literal185, retval);
					adaptor.AddChild(root_0, char_literal185_tree);
					}
					DebugLocation(316, 17);
					PushFollow(Follow._argument_expression_list_in_postfix_expression1650);
					argument_expression_list186=argument_expression_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, argument_expression_list186.Tree, argument_expression_list186, retval);
					DebugLocation(316, 42);
					char_literal187=(IToken)Match(input,31,Follow._31_in_postfix_expression1652); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal187_tree = (object)adaptor.Create(char_literal187, retval);
					adaptor.AddChild(root_0, char_literal187_tree);
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C.g:317:13: '.' IDENTIFIER
					{
					DebugLocation(317, 13);
					char_literal188=(IToken)Match(input,42,Follow._42_in_postfix_expression1666); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal188_tree = (object)adaptor.Create(char_literal188, retval);
					adaptor.AddChild(root_0, char_literal188_tree);
					}
					DebugLocation(317, 17);
					IDENTIFIER189=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_postfix_expression1668), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER189_tree = (object)adaptor.Create(IDENTIFIER189, retval);
					adaptor.AddChild(root_0, IDENTIFIER189_tree);
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// C.g:318:13: '->' IDENTIFIER
					{
					DebugLocation(318, 13);
					string_literal190=(IToken)Match(input,41,Follow._41_in_postfix_expression1682); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal190_tree = (object)adaptor.Create(string_literal190, retval);
					adaptor.AddChild(root_0, string_literal190_tree);
					}
					DebugLocation(318, 18);
					IDENTIFIER191=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_postfix_expression1684), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER191_tree = (object)adaptor.Create(IDENTIFIER191, retval);
					adaptor.AddChild(root_0, IDENTIFIER191_tree);
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// C.g:319:13: '++'
					{
					DebugLocation(319, 13);
					string_literal192=(IToken)Match(input,35,Follow._35_in_postfix_expression1698); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal192_tree = (object)adaptor.Create(string_literal192, retval);
					adaptor.AddChild(root_0, string_literal192_tree);
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// C.g:320:13: '--'
					{
					DebugLocation(320, 13);
					string_literal193=(IToken)Match(input,39,Follow._39_in_postfix_expression1712); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal193_tree = (object)adaptor.Create(string_literal193, retval);
					adaptor.AddChild(root_0, string_literal193_tree);
					}

					}
					break;

				default:
					goto loop49;
				}
			}

			loop49:
				;

			} finally { DebugExitSubRule(49); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("postfix_expression", 41);
			LeaveRule("postfix_expression", 41);
			LeaveRule_postfix_expression();
			if (state.backtracking > 0) { Memoize(input, 41, postfix_expression_StartIndex); }

		}
		DebugLocation(322, 4);
		} finally { DebugExitRule(GrammarFileName, "postfix_expression"); }
		return retval;

	}
	// $ANTLR end "postfix_expression"

	partial void EnterRule_unary_operator();
	partial void LeaveRule_unary_operator();

	// $ANTLR start "unary_operator"
	// C.g:324:1: unary_operator : ( '&' | '*' | '+' | '-' | '~' | '!' );
	[GrammarRule("unary_operator")]
	public XAstParserRuleReturnScope unary_operator()
	{
		EnterRule_unary_operator();
		EnterRule("unary_operator", 42);
		var retval = new XAstParserRuleReturnScope("unary_operator");
		
		retval.Start = (IToken)input.LT(1);
		int unary_operator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set194 = default(IToken);

		object set194_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unary_operator");
		DebugLocation(324, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// C.g:325:5: ( '&' | '*' | '+' | '-' | '~' | '!' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(325, 5);

			set194=(IToken)input.LT(1);
			if (input.LA(1)==23||input.LA(1)==28||input.LA(1)==32||input.LA(1)==34||input.LA(1)==38||input.LA(1)==100)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set194, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_operator", 42);
			LeaveRule("unary_operator", 42);
			LeaveRule_unary_operator();
			if (state.backtracking > 0) { Memoize(input, 42, unary_operator_StartIndex); }

		}
		DebugLocation(331, 4);
		} finally { DebugExitRule(GrammarFileName, "unary_operator"); }
		return retval;

	}
	// $ANTLR end "unary_operator"

	partial void EnterRule_primary_expression();
	partial void LeaveRule_primary_expression();

	// $ANTLR start "primary_expression"
	// C.g:333:1: primary_expression : ( IDENTIFIER | constant | '(' expression ')' );
	[GrammarRule("primary_expression")]
	public XAstParserRuleReturnScope primary_expression()
	{
		EnterRule_primary_expression();
		EnterRule("primary_expression", 43);
		var retval = new XAstParserRuleReturnScope("primary_expression");
		
		retval.Start = (IToken)input.LT(1);
		int primary_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER195 = default(IToken);
		IToken char_literal197 = default(IToken);
		IToken char_literal199 = default(IToken);
		XAstParserRuleReturnScope constant196 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression198 = default(XAstParserRuleReturnScope);

		object IDENTIFIER195_tree = default(object);
		object char_literal197_tree = default(object);
		object char_literal199_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primary_expression");
		DebugLocation(333, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// C.g:334:5: ( IDENTIFIER | constant | '(' expression ')' )
			int alt50=3;
			try { DebugEnterDecision(50, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				alt50 = 1;
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
				{
				alt50 = 2;
				}
				break;
			case 30:
				{
				alt50 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:334:7: IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(334, 7);
				IDENTIFIER195=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primary_expression1797), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER195_tree = (object)adaptor.Create(IDENTIFIER195, retval);
				adaptor.AddChild(root_0, IDENTIFIER195_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:335:7: constant
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(335, 7);
				PushFollow(Follow._constant_in_primary_expression1805);
				constant196=constant();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant196.Tree, constant196, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:336:7: '(' expression ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(336, 7);
				char_literal197=(IToken)Match(input,30,Follow._30_in_primary_expression1813); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal197_tree = (object)adaptor.Create(char_literal197, retval);
				adaptor.AddChild(root_0, char_literal197_tree);
				}
				DebugLocation(336, 11);
				PushFollow(Follow._expression_in_primary_expression1815);
				expression198=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression198.Tree, expression198, retval);
				DebugLocation(336, 22);
				char_literal199=(IToken)Match(input,31,Follow._31_in_primary_expression1817); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal199_tree = (object)adaptor.Create(char_literal199, retval);
				adaptor.AddChild(root_0, char_literal199_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_expression", 43);
			LeaveRule("primary_expression", 43);
			LeaveRule_primary_expression();
			if (state.backtracking > 0) { Memoize(input, 43, primary_expression_StartIndex); }

		}
		DebugLocation(337, 4);
		} finally { DebugExitRule(GrammarFileName, "primary_expression"); }
		return retval;

	}
	// $ANTLR end "primary_expression"

	partial void EnterRule_constant();
	partial void LeaveRule_constant();

	// $ANTLR start "constant"
	// C.g:339:1: constant : ( hex_literal | octal_literal | decimal_literal | character_literal | string_literal | floating_point_literal );
	[GrammarRule("constant")]
	public XAstParserRuleReturnScope constant()
	{
		EnterRule_constant();
		EnterRule("constant", 44);
		var retval = new XAstParserRuleReturnScope("constant");
		
		retval.Start = (IToken)input.LT(1);
		int constant_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope hex_literal200 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope octal_literal201 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope decimal_literal202 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope character_literal203 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope string_literal204 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope floating_point_literal205 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(339, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// C.g:340:5: ( hex_literal | octal_literal | decimal_literal | character_literal | string_literal | floating_point_literal )
			int alt51=6;
			try { DebugEnterDecision(51, false);
			switch (input.LA(1))
			{
			case HEX_LITERAL:
				{
				alt51 = 1;
				}
				break;
			case OCTAL_LITERAL:
				{
				alt51 = 2;
				}
				break;
			case DECIMAL_LITERAL:
				{
				alt51 = 3;
				}
				break;
			case CHARACTER_LITERAL:
				{
				alt51 = 4;
				}
				break;
			case STRING_LITERAL:
				{
				alt51 = 5;
				}
				break;
			case FLOATING_POINT_LITERAL:
				{
				alt51 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:340:9: hex_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(340, 9);
				PushFollow(Follow._hex_literal_in_constant1836);
				hex_literal200=hex_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, hex_literal200.Tree, hex_literal200, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:341:9: octal_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(341, 9);
				PushFollow(Follow._octal_literal_in_constant1846);
				octal_literal201=octal_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, octal_literal201.Tree, octal_literal201, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:342:9: decimal_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(342, 9);
				PushFollow(Follow._decimal_literal_in_constant1856);
				decimal_literal202=decimal_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, decimal_literal202.Tree, decimal_literal202, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:343:9: character_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(343, 9);
				PushFollow(Follow._character_literal_in_constant1866);
				character_literal203=character_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, character_literal203.Tree, character_literal203, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:344:9: string_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(344, 9);
				PushFollow(Follow._string_literal_in_constant1876);
				string_literal204=string_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, string_literal204.Tree, string_literal204, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:345:9: floating_point_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(345, 9);
				PushFollow(Follow._floating_point_literal_in_constant1886);
				floating_point_literal205=floating_point_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, floating_point_literal205.Tree, floating_point_literal205, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant", 44);
			LeaveRule("constant", 44);
			LeaveRule_constant();
			if (state.backtracking > 0) { Memoize(input, 44, constant_StartIndex); }

		}
		DebugLocation(346, 4);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"

	partial void EnterRule_hex_literal();
	partial void LeaveRule_hex_literal();

	// $ANTLR start "hex_literal"
	// C.g:348:1: hex_literal : HEX_LITERAL ;
	[GrammarRule("hex_literal")]
	public XAstParserRuleReturnScope hex_literal()
	{
		EnterRule_hex_literal();
		EnterRule("hex_literal", 45);
		var retval = new XAstParserRuleReturnScope("hex_literal");
		
		retval.Start = (IToken)input.LT(1);
		int hex_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken HEX_LITERAL206 = default(IToken);

		object HEX_LITERAL206_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "hex_literal");
		DebugLocation(348, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// C.g:349:5: ( HEX_LITERAL )
			DebugEnterAlt(1);
			// C.g:349:7: HEX_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(349, 7);
			HEX_LITERAL206=(IToken)new XToken((IToken)Match(input,HEX_LITERAL,Follow._HEX_LITERAL_in_hex_literal1903), "HEX_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			HEX_LITERAL206_tree = (object)adaptor.Create(HEX_LITERAL206, retval);
			adaptor.AddChild(root_0, HEX_LITERAL206_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("hex_literal", 45);
			LeaveRule("hex_literal", 45);
			LeaveRule_hex_literal();
			if (state.backtracking > 0) { Memoize(input, 45, hex_literal_StartIndex); }

		}
		DebugLocation(350, 4);
		} finally { DebugExitRule(GrammarFileName, "hex_literal"); }
		return retval;

	}
	// $ANTLR end "hex_literal"

	partial void EnterRule_octal_literal();
	partial void LeaveRule_octal_literal();

	// $ANTLR start "octal_literal"
	// C.g:352:1: octal_literal : OCTAL_LITERAL ;
	[GrammarRule("octal_literal")]
	public XAstParserRuleReturnScope octal_literal()
	{
		EnterRule_octal_literal();
		EnterRule("octal_literal", 46);
		var retval = new XAstParserRuleReturnScope("octal_literal");
		
		retval.Start = (IToken)input.LT(1);
		int octal_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OCTAL_LITERAL207 = default(IToken);

		object OCTAL_LITERAL207_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "octal_literal");
		DebugLocation(352, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// C.g:353:5: ( OCTAL_LITERAL )
			DebugEnterAlt(1);
			// C.g:353:7: OCTAL_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(353, 7);
			OCTAL_LITERAL207=(IToken)new XToken((IToken)Match(input,OCTAL_LITERAL,Follow._OCTAL_LITERAL_in_octal_literal1920), "OCTAL_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OCTAL_LITERAL207_tree = (object)adaptor.Create(OCTAL_LITERAL207, retval);
			adaptor.AddChild(root_0, OCTAL_LITERAL207_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("octal_literal", 46);
			LeaveRule("octal_literal", 46);
			LeaveRule_octal_literal();
			if (state.backtracking > 0) { Memoize(input, 46, octal_literal_StartIndex); }

		}
		DebugLocation(354, 4);
		} finally { DebugExitRule(GrammarFileName, "octal_literal"); }
		return retval;

	}
	// $ANTLR end "octal_literal"

	partial void EnterRule_decimal_literal();
	partial void LeaveRule_decimal_literal();

	// $ANTLR start "decimal_literal"
	// C.g:356:1: decimal_literal : DECIMAL_LITERAL ;
	[GrammarRule("decimal_literal")]
	public XAstParserRuleReturnScope decimal_literal()
	{
		EnterRule_decimal_literal();
		EnterRule("decimal_literal", 47);
		var retval = new XAstParserRuleReturnScope("decimal_literal");
		
		retval.Start = (IToken)input.LT(1);
		int decimal_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken DECIMAL_LITERAL208 = default(IToken);

		object DECIMAL_LITERAL208_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "decimal_literal");
		DebugLocation(356, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// C.g:357:5: ( DECIMAL_LITERAL )
			DebugEnterAlt(1);
			// C.g:357:7: DECIMAL_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(357, 7);
			DECIMAL_LITERAL208=(IToken)new XToken((IToken)Match(input,DECIMAL_LITERAL,Follow._DECIMAL_LITERAL_in_decimal_literal1937), "DECIMAL_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DECIMAL_LITERAL208_tree = (object)adaptor.Create(DECIMAL_LITERAL208, retval);
			adaptor.AddChild(root_0, DECIMAL_LITERAL208_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("decimal_literal", 47);
			LeaveRule("decimal_literal", 47);
			LeaveRule_decimal_literal();
			if (state.backtracking > 0) { Memoize(input, 47, decimal_literal_StartIndex); }

		}
		DebugLocation(358, 4);
		} finally { DebugExitRule(GrammarFileName, "decimal_literal"); }
		return retval;

	}
	// $ANTLR end "decimal_literal"

	partial void EnterRule_character_literal();
	partial void LeaveRule_character_literal();

	// $ANTLR start "character_literal"
	// C.g:360:1: character_literal : CHARACTER_LITERAL ;
	[GrammarRule("character_literal")]
	public XAstParserRuleReturnScope character_literal()
	{
		EnterRule_character_literal();
		EnterRule("character_literal", 48);
		var retval = new XAstParserRuleReturnScope("character_literal");
		
		retval.Start = (IToken)input.LT(1);
		int character_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken CHARACTER_LITERAL209 = default(IToken);

		object CHARACTER_LITERAL209_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "character_literal");
		DebugLocation(360, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// C.g:361:5: ( CHARACTER_LITERAL )
			DebugEnterAlt(1);
			// C.g:361:7: CHARACTER_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(361, 7);
			CHARACTER_LITERAL209=(IToken)new XToken((IToken)Match(input,CHARACTER_LITERAL,Follow._CHARACTER_LITERAL_in_character_literal1954), "CHARACTER_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CHARACTER_LITERAL209_tree = (object)adaptor.Create(CHARACTER_LITERAL209, retval);
			adaptor.AddChild(root_0, CHARACTER_LITERAL209_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("character_literal", 48);
			LeaveRule("character_literal", 48);
			LeaveRule_character_literal();
			if (state.backtracking > 0) { Memoize(input, 48, character_literal_StartIndex); }

		}
		DebugLocation(362, 4);
		} finally { DebugExitRule(GrammarFileName, "character_literal"); }
		return retval;

	}
	// $ANTLR end "character_literal"

	partial void EnterRule_string_literal();
	partial void LeaveRule_string_literal();

	// $ANTLR start "string_literal"
	// C.g:364:1: string_literal : STRING_LITERAL ;
	[GrammarRule("string_literal")]
	public XAstParserRuleReturnScope string_literal()
	{
		EnterRule_string_literal();
		EnterRule("string_literal", 49);
		var retval = new XAstParserRuleReturnScope("string_literal");
		
		retval.Start = (IToken)input.LT(1);
		int string_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken STRING_LITERAL210 = default(IToken);

		object STRING_LITERAL210_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "string_literal");
		DebugLocation(364, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// C.g:365:5: ( STRING_LITERAL )
			DebugEnterAlt(1);
			// C.g:365:7: STRING_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(365, 7);
			STRING_LITERAL210=(IToken)new XToken((IToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_string_literal1971), "STRING_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING_LITERAL210_tree = (object)adaptor.Create(STRING_LITERAL210, retval);
			adaptor.AddChild(root_0, STRING_LITERAL210_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("string_literal", 49);
			LeaveRule("string_literal", 49);
			LeaveRule_string_literal();
			if (state.backtracking > 0) { Memoize(input, 49, string_literal_StartIndex); }

		}
		DebugLocation(366, 4);
		} finally { DebugExitRule(GrammarFileName, "string_literal"); }
		return retval;

	}
	// $ANTLR end "string_literal"

	partial void EnterRule_floating_point_literal();
	partial void LeaveRule_floating_point_literal();

	// $ANTLR start "floating_point_literal"
	// C.g:368:1: floating_point_literal : FLOATING_POINT_LITERAL ;
	[GrammarRule("floating_point_literal")]
	public XAstParserRuleReturnScope floating_point_literal()
	{
		EnterRule_floating_point_literal();
		EnterRule("floating_point_literal", 50);
		var retval = new XAstParserRuleReturnScope("floating_point_literal");
		
		retval.Start = (IToken)input.LT(1);
		int floating_point_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken FLOATING_POINT_LITERAL211 = default(IToken);

		object FLOATING_POINT_LITERAL211_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "floating_point_literal");
		DebugLocation(368, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// C.g:369:5: ( FLOATING_POINT_LITERAL )
			DebugEnterAlt(1);
			// C.g:369:7: FLOATING_POINT_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(369, 7);
			FLOATING_POINT_LITERAL211=(IToken)new XToken((IToken)Match(input,FLOATING_POINT_LITERAL,Follow._FLOATING_POINT_LITERAL_in_floating_point_literal1988), "FLOATING_POINT_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			FLOATING_POINT_LITERAL211_tree = (object)adaptor.Create(FLOATING_POINT_LITERAL211, retval);
			adaptor.AddChild(root_0, FLOATING_POINT_LITERAL211_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("floating_point_literal", 50);
			LeaveRule("floating_point_literal", 50);
			LeaveRule_floating_point_literal();
			if (state.backtracking > 0) { Memoize(input, 50, floating_point_literal_StartIndex); }

		}
		DebugLocation(370, 4);
		} finally { DebugExitRule(GrammarFileName, "floating_point_literal"); }
		return retval;

	}
	// $ANTLR end "floating_point_literal"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();

	// $ANTLR start "expression"
	// C.g:374:1: expression : assignment_expression ( ',' assignment_expression )* ;
	[GrammarRule("expression")]
	public XAstParserRuleReturnScope expression()
	{
		EnterRule_expression();
		EnterRule("expression", 51);
		var retval = new XAstParserRuleReturnScope("expression");
		
		retval.Start = (IToken)input.LT(1);
		int expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal213 = default(IToken);
		XAstParserRuleReturnScope assignment_expression212 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression214 = default(XAstParserRuleReturnScope);

		object char_literal213_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(374, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// C.g:375:5: ( assignment_expression ( ',' assignment_expression )* )
			DebugEnterAlt(1);
			// C.g:375:7: assignment_expression ( ',' assignment_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(375, 7);
			PushFollow(Follow._assignment_expression_in_expression2007);
			assignment_expression212=assignment_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression212.Tree, assignment_expression212, retval);
			DebugLocation(375, 29);
			// C.g:375:29: ( ',' assignment_expression )*
			try { DebugEnterSubRule(52);
			while (true)
			{
				int alt52=2;
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if ((LA52_0==37))
				{
					alt52 = 1;
				}


				} finally { DebugExitDecision(52); }
				switch ( alt52 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:375:30: ',' assignment_expression
					{
					DebugLocation(375, 30);
					char_literal213=(IToken)Match(input,37,Follow._37_in_expression2010); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal213_tree = (object)adaptor.Create(char_literal213, retval);
					adaptor.AddChild(root_0, char_literal213_tree);
					}
					DebugLocation(375, 34);
					PushFollow(Follow._assignment_expression_in_expression2012);
					assignment_expression214=assignment_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression214.Tree, assignment_expression214, retval);

					}
					break;

				default:
					goto loop52;
				}
			}

			loop52:
				;

			} finally { DebugExitSubRule(52); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 51);
			LeaveRule("expression", 51);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 51, expression_StartIndex); }

		}
		DebugLocation(376, 4);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_constant_expression();
	partial void LeaveRule_constant_expression();

	// $ANTLR start "constant_expression"
	// C.g:378:1: constant_expression : conditional_expression ;
	[GrammarRule("constant_expression")]
	public XAstParserRuleReturnScope constant_expression()
	{
		EnterRule_constant_expression();
		EnterRule("constant_expression", 52);
		var retval = new XAstParserRuleReturnScope("constant_expression");
		
		retval.Start = (IToken)input.LT(1);
		int constant_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope conditional_expression215 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "constant_expression");
		DebugLocation(378, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// C.g:379:5: ( conditional_expression )
			DebugEnterAlt(1);
			// C.g:379:7: conditional_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(379, 7);
			PushFollow(Follow._conditional_expression_in_constant_expression2031);
			conditional_expression215=conditional_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression215.Tree, conditional_expression215, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant_expression", 52);
			LeaveRule("constant_expression", 52);
			LeaveRule_constant_expression();
			if (state.backtracking > 0) { Memoize(input, 52, constant_expression_StartIndex); }

		}
		DebugLocation(380, 4);
		} finally { DebugExitRule(GrammarFileName, "constant_expression"); }
		return retval;

	}
	// $ANTLR end "constant_expression"

	partial void EnterRule_assignment_expression();
	partial void LeaveRule_assignment_expression();

	// $ANTLR start "assignment_expression"
	// C.g:382:1: assignment_expression : ( lvalue assignment_operator assignment_expression | conditional_expression );
	[GrammarRule("assignment_expression")]
	public XAstParserRuleReturnScope assignment_expression()
	{
		EnterRule_assignment_expression();
		EnterRule("assignment_expression", 53);
		var retval = new XAstParserRuleReturnScope("assignment_expression");
		
		retval.Start = (IToken)input.LT(1);
		int assignment_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope lvalue216 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_operator217 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression218 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conditional_expression219 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "assignment_expression");
		DebugLocation(382, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// C.g:383:5: ( lvalue assignment_operator assignment_expression | conditional_expression )
			int alt53=2;
			try { DebugEnterDecision(53, false);
			try
			{
				alt53 = dfa53.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:383:7: lvalue assignment_operator assignment_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(383, 7);
				PushFollow(Follow._lvalue_in_assignment_expression2048);
				lvalue216=lvalue();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue216.Tree, lvalue216, retval);
				DebugLocation(383, 14);
				PushFollow(Follow._assignment_operator_in_assignment_expression2050);
				assignment_operator217=assignment_operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_operator217.Tree, assignment_operator217, retval);
				DebugLocation(383, 34);
				PushFollow(Follow._assignment_expression_in_assignment_expression2052);
				assignment_expression218=assignment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression218.Tree, assignment_expression218, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:384:7: conditional_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(384, 7);
				PushFollow(Follow._conditional_expression_in_assignment_expression2060);
				conditional_expression219=conditional_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression219.Tree, conditional_expression219, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment_expression", 53);
			LeaveRule("assignment_expression", 53);
			LeaveRule_assignment_expression();
			if (state.backtracking > 0) { Memoize(input, 53, assignment_expression_StartIndex); }

		}
		DebugLocation(385, 4);
		} finally { DebugExitRule(GrammarFileName, "assignment_expression"); }
		return retval;

	}
	// $ANTLR end "assignment_expression"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// C.g:387:1: lvalue : unary_expression ;
	[GrammarRule("lvalue")]
	public XAstParserRuleReturnScope lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 54);
		var retval = new XAstParserRuleReturnScope("lvalue");
		
		retval.Start = (IToken)input.LT(1);
		int lvalue_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope unary_expression220 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(387, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// C.g:388:5: ( unary_expression )
			DebugEnterAlt(1);
			// C.g:388:7: unary_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(388, 7);
			PushFollow(Follow._unary_expression_in_lvalue2081);
			unary_expression220=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression220.Tree, unary_expression220, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 54);
			LeaveRule("lvalue", 54);
			LeaveRule_lvalue();
			if (state.backtracking > 0) { Memoize(input, 54, lvalue_StartIndex); }

		}
		DebugLocation(389, 4);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_assignment_operator();
	partial void LeaveRule_assignment_operator();

	// $ANTLR start "assignment_operator"
	// C.g:391:1: assignment_operator : ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' );
	[GrammarRule("assignment_operator")]
	public XAstParserRuleReturnScope assignment_operator()
	{
		EnterRule_assignment_operator();
		EnterRule("assignment_operator", 55);
		var retval = new XAstParserRuleReturnScope("assignment_operator");
		
		retval.Start = (IToken)input.LT(1);
		int assignment_operator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set221 = default(IToken);

		object set221_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assignment_operator");
		DebugLocation(391, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// C.g:392:5: ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(392, 5);

			set221=(IToken)input.LT(1);
			if (input.LA(1)==26||input.LA(1)==29||input.LA(1)==33||input.LA(1)==36||input.LA(1)==40||input.LA(1)==45||input.LA(1)==50||input.LA(1)==52||input.LA(1)==57||input.LA(1)==62||input.LA(1)==97)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set221, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment_operator", 55);
			LeaveRule("assignment_operator", 55);
			LeaveRule_assignment_operator();
			if (state.backtracking > 0) { Memoize(input, 55, assignment_operator_StartIndex); }

		}
		DebugLocation(403, 4);
		} finally { DebugExitRule(GrammarFileName, "assignment_operator"); }
		return retval;

	}
	// $ANTLR end "assignment_operator"

	partial void EnterRule_conditional_expression();
	partial void LeaveRule_conditional_expression();

	// $ANTLR start "conditional_expression"
	// C.g:405:1: conditional_expression : logical_or_expression ( '?' expression ':' conditional_expression )? ;
	[GrammarRule("conditional_expression")]
	public XAstParserRuleReturnScope conditional_expression()
	{
		EnterRule_conditional_expression();
		EnterRule("conditional_expression", 56);
		var retval = new XAstParserRuleReturnScope("conditional_expression");
		
		retval.Start = (IToken)input.LT(1);
		int conditional_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal223 = default(IToken);
		IToken char_literal225 = default(IToken);
		XAstParserRuleReturnScope logical_or_expression222 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression224 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conditional_expression226 = default(XAstParserRuleReturnScope);

		object char_literal223_tree = default(object);
		object char_literal225_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditional_expression");
		DebugLocation(405, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// C.g:406:5: ( logical_or_expression ( '?' expression ':' conditional_expression )? )
			DebugEnterAlt(1);
			// C.g:406:7: logical_or_expression ( '?' expression ':' conditional_expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(406, 7);
			PushFollow(Follow._logical_or_expression_in_conditional_expression2195);
			logical_or_expression222=logical_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logical_or_expression222.Tree, logical_or_expression222, retval);
			DebugLocation(406, 29);
			// C.g:406:29: ( '?' expression ':' conditional_expression )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==58))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:406:30: '?' expression ':' conditional_expression
				{
				DebugLocation(406, 30);
				char_literal223=(IToken)Match(input,58,Follow._58_in_conditional_expression2198); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal223_tree = (object)adaptor.Create(char_literal223, retval);
				adaptor.AddChild(root_0, char_literal223_tree);
				}
				DebugLocation(406, 34);
				PushFollow(Follow._expression_in_conditional_expression2200);
				expression224=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression224.Tree, expression224, retval);
				DebugLocation(406, 45);
				char_literal225=(IToken)Match(input,46,Follow._46_in_conditional_expression2202); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal225_tree = (object)adaptor.Create(char_literal225, retval);
				adaptor.AddChild(root_0, char_literal225_tree);
				}
				DebugLocation(406, 49);
				PushFollow(Follow._conditional_expression_in_conditional_expression2204);
				conditional_expression226=conditional_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression226.Tree, conditional_expression226, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(54); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditional_expression", 56);
			LeaveRule("conditional_expression", 56);
			LeaveRule_conditional_expression();
			if (state.backtracking > 0) { Memoize(input, 56, conditional_expression_StartIndex); }

		}
		DebugLocation(407, 4);
		} finally { DebugExitRule(GrammarFileName, "conditional_expression"); }
		return retval;

	}
	// $ANTLR end "conditional_expression"

	partial void EnterRule_logical_or_expression();
	partial void LeaveRule_logical_or_expression();

	// $ANTLR start "logical_or_expression"
	// C.g:409:1: logical_or_expression : logical_and_expression ( '||' logical_and_expression )* ;
	[GrammarRule("logical_or_expression")]
	public XAstParserRuleReturnScope logical_or_expression()
	{
		EnterRule_logical_or_expression();
		EnterRule("logical_or_expression", 57);
		var retval = new XAstParserRuleReturnScope("logical_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int logical_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal228 = default(IToken);
		XAstParserRuleReturnScope logical_and_expression227 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope logical_and_expression229 = default(XAstParserRuleReturnScope);

		object string_literal228_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logical_or_expression");
		DebugLocation(409, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// C.g:410:5: ( logical_and_expression ( '||' logical_and_expression )* )
			DebugEnterAlt(1);
			// C.g:410:7: logical_and_expression ( '||' logical_and_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(410, 7);
			PushFollow(Follow._logical_and_expression_in_logical_or_expression2223);
			logical_and_expression227=logical_and_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logical_and_expression227.Tree, logical_and_expression227, retval);
			DebugLocation(410, 30);
			// C.g:410:30: ( '||' logical_and_expression )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==98))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:410:31: '||' logical_and_expression
					{
					DebugLocation(410, 31);
					string_literal228=(IToken)Match(input,98,Follow._98_in_logical_or_expression2226); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal228_tree = (object)adaptor.Create(string_literal228, retval);
					adaptor.AddChild(root_0, string_literal228_tree);
					}
					DebugLocation(410, 36);
					PushFollow(Follow._logical_and_expression_in_logical_or_expression2228);
					logical_and_expression229=logical_and_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logical_and_expression229.Tree, logical_and_expression229, retval);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logical_or_expression", 57);
			LeaveRule("logical_or_expression", 57);
			LeaveRule_logical_or_expression();
			if (state.backtracking > 0) { Memoize(input, 57, logical_or_expression_StartIndex); }

		}
		DebugLocation(411, 4);
		} finally { DebugExitRule(GrammarFileName, "logical_or_expression"); }
		return retval;

	}
	// $ANTLR end "logical_or_expression"

	partial void EnterRule_logical_and_expression();
	partial void LeaveRule_logical_and_expression();

	// $ANTLR start "logical_and_expression"
	// C.g:413:1: logical_and_expression : inclusive_or_expression ( '&&' inclusive_or_expression )* ;
	[GrammarRule("logical_and_expression")]
	public XAstParserRuleReturnScope logical_and_expression()
	{
		EnterRule_logical_and_expression();
		EnterRule("logical_and_expression", 58);
		var retval = new XAstParserRuleReturnScope("logical_and_expression");
		
		retval.Start = (IToken)input.LT(1);
		int logical_and_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal231 = default(IToken);
		XAstParserRuleReturnScope inclusive_or_expression230 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope inclusive_or_expression232 = default(XAstParserRuleReturnScope);

		object string_literal231_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logical_and_expression");
		DebugLocation(413, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// C.g:414:5: ( inclusive_or_expression ( '&&' inclusive_or_expression )* )
			DebugEnterAlt(1);
			// C.g:414:7: inclusive_or_expression ( '&&' inclusive_or_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(414, 7);
			PushFollow(Follow._inclusive_or_expression_in_logical_and_expression2247);
			inclusive_or_expression230=inclusive_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, inclusive_or_expression230.Tree, inclusive_or_expression230, retval);
			DebugLocation(414, 31);
			// C.g:414:31: ( '&&' inclusive_or_expression )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==27))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:414:32: '&&' inclusive_or_expression
					{
					DebugLocation(414, 32);
					string_literal231=(IToken)Match(input,27,Follow._27_in_logical_and_expression2250); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal231_tree = (object)adaptor.Create(string_literal231, retval);
					adaptor.AddChild(root_0, string_literal231_tree);
					}
					DebugLocation(414, 37);
					PushFollow(Follow._inclusive_or_expression_in_logical_and_expression2252);
					inclusive_or_expression232=inclusive_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, inclusive_or_expression232.Tree, inclusive_or_expression232, retval);

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logical_and_expression", 58);
			LeaveRule("logical_and_expression", 58);
			LeaveRule_logical_and_expression();
			if (state.backtracking > 0) { Memoize(input, 58, logical_and_expression_StartIndex); }

		}
		DebugLocation(415, 4);
		} finally { DebugExitRule(GrammarFileName, "logical_and_expression"); }
		return retval;

	}
	// $ANTLR end "logical_and_expression"

	partial void EnterRule_inclusive_or_expression();
	partial void LeaveRule_inclusive_or_expression();

	// $ANTLR start "inclusive_or_expression"
	// C.g:417:1: inclusive_or_expression : exclusive_or_expression ( '|' exclusive_or_expression )* ;
	[GrammarRule("inclusive_or_expression")]
	public XAstParserRuleReturnScope inclusive_or_expression()
	{
		EnterRule_inclusive_or_expression();
		EnterRule("inclusive_or_expression", 59);
		var retval = new XAstParserRuleReturnScope("inclusive_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int inclusive_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal234 = default(IToken);
		XAstParserRuleReturnScope exclusive_or_expression233 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope exclusive_or_expression235 = default(XAstParserRuleReturnScope);

		object char_literal234_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "inclusive_or_expression");
		DebugLocation(417, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// C.g:418:5: ( exclusive_or_expression ( '|' exclusive_or_expression )* )
			DebugEnterAlt(1);
			// C.g:418:7: exclusive_or_expression ( '|' exclusive_or_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(418, 7);
			PushFollow(Follow._exclusive_or_expression_in_inclusive_or_expression2271);
			exclusive_or_expression233=exclusive_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, exclusive_or_expression233.Tree, exclusive_or_expression233, retval);
			DebugLocation(418, 31);
			// C.g:418:31: ( '|' exclusive_or_expression )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if ((LA57_0==96))
				{
					alt57 = 1;
				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:418:32: '|' exclusive_or_expression
					{
					DebugLocation(418, 32);
					char_literal234=(IToken)Match(input,96,Follow._96_in_inclusive_or_expression2274); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal234_tree = (object)adaptor.Create(char_literal234, retval);
					adaptor.AddChild(root_0, char_literal234_tree);
					}
					DebugLocation(418, 36);
					PushFollow(Follow._exclusive_or_expression_in_inclusive_or_expression2276);
					exclusive_or_expression235=exclusive_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, exclusive_or_expression235.Tree, exclusive_or_expression235, retval);

					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inclusive_or_expression", 59);
			LeaveRule("inclusive_or_expression", 59);
			LeaveRule_inclusive_or_expression();
			if (state.backtracking > 0) { Memoize(input, 59, inclusive_or_expression_StartIndex); }

		}
		DebugLocation(419, 4);
		} finally { DebugExitRule(GrammarFileName, "inclusive_or_expression"); }
		return retval;

	}
	// $ANTLR end "inclusive_or_expression"

	partial void EnterRule_exclusive_or_expression();
	partial void LeaveRule_exclusive_or_expression();

	// $ANTLR start "exclusive_or_expression"
	// C.g:421:1: exclusive_or_expression : and_expression ( '^' and_expression )* ;
	[GrammarRule("exclusive_or_expression")]
	public XAstParserRuleReturnScope exclusive_or_expression()
	{
		EnterRule_exclusive_or_expression();
		EnterRule("exclusive_or_expression", 60);
		var retval = new XAstParserRuleReturnScope("exclusive_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int exclusive_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal237 = default(IToken);
		XAstParserRuleReturnScope and_expression236 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope and_expression238 = default(XAstParserRuleReturnScope);

		object char_literal237_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "exclusive_or_expression");
		DebugLocation(421, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// C.g:422:5: ( and_expression ( '^' and_expression )* )
			DebugEnterAlt(1);
			// C.g:422:7: and_expression ( '^' and_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(422, 7);
			PushFollow(Follow._and_expression_in_exclusive_or_expression2295);
			and_expression236=and_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, and_expression236.Tree, and_expression236, retval);
			DebugLocation(422, 22);
			// C.g:422:22: ( '^' and_expression )*
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, false);
				int LA58_0 = input.LA(1);

				if ((LA58_0==61))
				{
					alt58 = 1;
				}


				} finally { DebugExitDecision(58); }
				switch ( alt58 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:422:23: '^' and_expression
					{
					DebugLocation(422, 23);
					char_literal237=(IToken)Match(input,61,Follow._61_in_exclusive_or_expression2298); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal237_tree = (object)adaptor.Create(char_literal237, retval);
					adaptor.AddChild(root_0, char_literal237_tree);
					}
					DebugLocation(422, 27);
					PushFollow(Follow._and_expression_in_exclusive_or_expression2300);
					and_expression238=and_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, and_expression238.Tree, and_expression238, retval);

					}
					break;

				default:
					goto loop58;
				}
			}

			loop58:
				;

			} finally { DebugExitSubRule(58); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exclusive_or_expression", 60);
			LeaveRule("exclusive_or_expression", 60);
			LeaveRule_exclusive_or_expression();
			if (state.backtracking > 0) { Memoize(input, 60, exclusive_or_expression_StartIndex); }

		}
		DebugLocation(423, 4);
		} finally { DebugExitRule(GrammarFileName, "exclusive_or_expression"); }
		return retval;

	}
	// $ANTLR end "exclusive_or_expression"

	partial void EnterRule_and_expression();
	partial void LeaveRule_and_expression();

	// $ANTLR start "and_expression"
	// C.g:425:1: and_expression : equality_expression ( '&' equality_expression )* ;
	[GrammarRule("and_expression")]
	public XAstParserRuleReturnScope and_expression()
	{
		EnterRule_and_expression();
		EnterRule("and_expression", 61);
		var retval = new XAstParserRuleReturnScope("and_expression");
		
		retval.Start = (IToken)input.LT(1);
		int and_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal240 = default(IToken);
		XAstParserRuleReturnScope equality_expression239 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope equality_expression241 = default(XAstParserRuleReturnScope);

		object char_literal240_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "and_expression");
		DebugLocation(425, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// C.g:426:5: ( equality_expression ( '&' equality_expression )* )
			DebugEnterAlt(1);
			// C.g:426:7: equality_expression ( '&' equality_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(426, 7);
			PushFollow(Follow._equality_expression_in_and_expression2319);
			equality_expression239=equality_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equality_expression239.Tree, equality_expression239, retval);
			DebugLocation(426, 27);
			// C.g:426:27: ( '&' equality_expression )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if ((LA59_0==28))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:426:28: '&' equality_expression
					{
					DebugLocation(426, 28);
					char_literal240=(IToken)Match(input,28,Follow._28_in_and_expression2322); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal240_tree = (object)adaptor.Create(char_literal240, retval);
					adaptor.AddChild(root_0, char_literal240_tree);
					}
					DebugLocation(426, 32);
					PushFollow(Follow._equality_expression_in_and_expression2324);
					equality_expression241=equality_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equality_expression241.Tree, equality_expression241, retval);

					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expression", 61);
			LeaveRule("and_expression", 61);
			LeaveRule_and_expression();
			if (state.backtracking > 0) { Memoize(input, 61, and_expression_StartIndex); }

		}
		DebugLocation(427, 4);
		} finally { DebugExitRule(GrammarFileName, "and_expression"); }
		return retval;

	}
	// $ANTLR end "and_expression"

	partial void EnterRule_equality_expression();
	partial void LeaveRule_equality_expression();

	// $ANTLR start "equality_expression"
	// C.g:428:1: equality_expression : relational_expression ( ( '==' | '!=' ) relational_expression )* ;
	[GrammarRule("equality_expression")]
	public XAstParserRuleReturnScope equality_expression()
	{
		EnterRule_equality_expression();
		EnterRule("equality_expression", 62);
		var retval = new XAstParserRuleReturnScope("equality_expression");
		
		retval.Start = (IToken)input.LT(1);
		int equality_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set243 = default(IToken);
		XAstParserRuleReturnScope relational_expression242 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope relational_expression244 = default(XAstParserRuleReturnScope);

		object set243_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "equality_expression");
		DebugLocation(428, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// C.g:429:5: ( relational_expression ( ( '==' | '!=' ) relational_expression )* )
			DebugEnterAlt(1);
			// C.g:429:7: relational_expression ( ( '==' | '!=' ) relational_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(429, 7);
			PushFollow(Follow._relational_expression_in_equality_expression2342);
			relational_expression242=relational_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, relational_expression242.Tree, relational_expression242, retval);
			DebugLocation(429, 29);
			// C.g:429:29: ( ( '==' | '!=' ) relational_expression )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=2;
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if ((LA60_0==24||LA60_0==53))
				{
					alt60 = 1;
				}


				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:429:30: ( '==' | '!=' ) relational_expression
					{
					DebugLocation(429, 30);

					set243=(IToken)input.LT(1);
					if (input.LA(1)==24||input.LA(1)==53)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set243, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(429, 42);
					PushFollow(Follow._relational_expression_in_equality_expression2351);
					relational_expression244=relational_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, relational_expression244.Tree, relational_expression244, retval);

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equality_expression", 62);
			LeaveRule("equality_expression", 62);
			LeaveRule_equality_expression();
			if (state.backtracking > 0) { Memoize(input, 62, equality_expression_StartIndex); }

		}
		DebugLocation(430, 4);
		} finally { DebugExitRule(GrammarFileName, "equality_expression"); }
		return retval;

	}
	// $ANTLR end "equality_expression"

	partial void EnterRule_relational_expression();
	partial void LeaveRule_relational_expression();

	// $ANTLR start "relational_expression"
	// C.g:432:1: relational_expression : shift_expression ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* ;
	[GrammarRule("relational_expression")]
	public XAstParserRuleReturnScope relational_expression()
	{
		EnterRule_relational_expression();
		EnterRule("relational_expression", 63);
		var retval = new XAstParserRuleReturnScope("relational_expression");
		
		retval.Start = (IToken)input.LT(1);
		int relational_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set246 = default(IToken);
		XAstParserRuleReturnScope shift_expression245 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope shift_expression247 = default(XAstParserRuleReturnScope);

		object set246_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "relational_expression");
		DebugLocation(432, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// C.g:433:5: ( shift_expression ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* )
			DebugEnterAlt(1);
			// C.g:433:7: shift_expression ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(433, 7);
			PushFollow(Follow._shift_expression_in_relational_expression2370);
			shift_expression245=shift_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expression245.Tree, shift_expression245, retval);
			DebugLocation(433, 24);
			// C.g:433:24: ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==48||LA61_0==51||(LA61_0>=54 && LA61_0<=55)))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:433:25: ( '<' | '>' | '<=' | '>=' ) shift_expression
					{
					DebugLocation(433, 25);

					set246=(IToken)input.LT(1);
					if (input.LA(1)==48||input.LA(1)==51||(input.LA(1)>=54 && input.LA(1)<=55))
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set246, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(433, 45);
					PushFollow(Follow._shift_expression_in_relational_expression2383);
					shift_expression247=shift_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expression247.Tree, shift_expression247, retval);

					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relational_expression", 63);
			LeaveRule("relational_expression", 63);
			LeaveRule_relational_expression();
			if (state.backtracking > 0) { Memoize(input, 63, relational_expression_StartIndex); }

		}
		DebugLocation(434, 4);
		} finally { DebugExitRule(GrammarFileName, "relational_expression"); }
		return retval;

	}
	// $ANTLR end "relational_expression"

	partial void EnterRule_shift_expression();
	partial void LeaveRule_shift_expression();

	// $ANTLR start "shift_expression"
	// C.g:436:1: shift_expression : additive_expression ( ( '<<' | '>>' ) additive_expression )* ;
	[GrammarRule("shift_expression")]
	public XAstParserRuleReturnScope shift_expression()
	{
		EnterRule_shift_expression();
		EnterRule("shift_expression", 64);
		var retval = new XAstParserRuleReturnScope("shift_expression");
		
		retval.Start = (IToken)input.LT(1);
		int shift_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set249 = default(IToken);
		XAstParserRuleReturnScope additive_expression248 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope additive_expression250 = default(XAstParserRuleReturnScope);

		object set249_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "shift_expression");
		DebugLocation(436, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// C.g:437:5: ( additive_expression ( ( '<<' | '>>' ) additive_expression )* )
			DebugEnterAlt(1);
			// C.g:437:7: additive_expression ( ( '<<' | '>>' ) additive_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(437, 7);
			PushFollow(Follow._additive_expression_in_shift_expression2402);
			additive_expression248=additive_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, additive_expression248.Tree, additive_expression248, retval);
			DebugLocation(437, 27);
			// C.g:437:27: ( ( '<<' | '>>' ) additive_expression )*
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=2;
				try { DebugEnterDecision(62, false);
				int LA62_0 = input.LA(1);

				if ((LA62_0==49||LA62_0==56))
				{
					alt62 = 1;
				}


				} finally { DebugExitDecision(62); }
				switch ( alt62 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:437:28: ( '<<' | '>>' ) additive_expression
					{
					DebugLocation(437, 28);

					set249=(IToken)input.LT(1);
					if (input.LA(1)==49||input.LA(1)==56)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set249, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(437, 40);
					PushFollow(Follow._additive_expression_in_shift_expression2411);
					additive_expression250=additive_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, additive_expression250.Tree, additive_expression250, retval);

					}
					break;

				default:
					goto loop62;
				}
			}

			loop62:
				;

			} finally { DebugExitSubRule(62); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expression", 64);
			LeaveRule("shift_expression", 64);
			LeaveRule_shift_expression();
			if (state.backtracking > 0) { Memoize(input, 64, shift_expression_StartIndex); }

		}
		DebugLocation(438, 4);
		} finally { DebugExitRule(GrammarFileName, "shift_expression"); }
		return retval;

	}
	// $ANTLR end "shift_expression"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// C.g:442:1: statement : ( labeled_statement | compound_statement | expression_statement | selection_statement | iteration_statement | jump_statement );
	[GrammarRule("statement")]
	public XAstParserRuleReturnScope statement()
	{
		EnterRule_statement();
		EnterRule("statement", 65);
		var retval = new XAstParserRuleReturnScope("statement");
		
		retval.Start = (IToken)input.LT(1);
		int statement_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope labeled_statement251 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope compound_statement252 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_statement253 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope selection_statement254 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope iteration_statement255 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope jump_statement256 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(442, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// C.g:443:5: ( labeled_statement | compound_statement | expression_statement | selection_statement | iteration_statement | jump_statement )
			int alt63=6;
			try { DebugEnterDecision(63, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				int LA63_1 = input.LA(2);

				if ((LA63_1==46))
				{
					alt63 = 1;
				}
				else if (((LA63_1>=24 && LA63_1<=30)||(LA63_1>=32 && LA63_1<=42)||(LA63_1>=44 && LA63_1<=45)||(LA63_1>=47 && LA63_1<=59)||(LA63_1>=61 && LA63_1<=62)||(LA63_1>=96 && LA63_1<=98)))
				{
					alt63 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 65:
			case 69:
				{
				alt63 = 1;
				}
				break;
			case 95:
				{
				alt63 = 2;
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
			case 23:
			case 28:
			case 30:
			case 32:
			case 34:
			case 35:
			case 38:
			case 39:
			case 47:
			case 85:
			case 100:
				{
				alt63 = 3;
				}
				break;
			case 78:
			case 88:
				{
				alt63 = 4;
				}
				break;
			case 70:
			case 76:
			case 94:
				{
				alt63 = 5;
				}
				break;
			case 64:
			case 68:
			case 77:
			case 82:
				{
				alt63 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:443:7: labeled_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(443, 7);
				PushFollow(Follow._labeled_statement_in_statement2432);
				labeled_statement251=labeled_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, labeled_statement251.Tree, labeled_statement251, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:444:7: compound_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(444, 7);
				PushFollow(Follow._compound_statement_in_statement2440);
				compound_statement252=compound_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, compound_statement252.Tree, compound_statement252, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:445:7: expression_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(445, 7);
				PushFollow(Follow._expression_statement_in_statement2448);
				expression_statement253=expression_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_statement253.Tree, expression_statement253, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:446:7: selection_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(446, 7);
				PushFollow(Follow._selection_statement_in_statement2456);
				selection_statement254=selection_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selection_statement254.Tree, selection_statement254, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:447:7: iteration_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(447, 7);
				PushFollow(Follow._iteration_statement_in_statement2464);
				iteration_statement255=iteration_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, iteration_statement255.Tree, iteration_statement255, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:448:7: jump_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(448, 7);
				PushFollow(Follow._jump_statement_in_statement2472);
				jump_statement256=jump_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, jump_statement256.Tree, jump_statement256, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 65);
			LeaveRule("statement", 65);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 65, statement_StartIndex); }

		}
		DebugLocation(449, 4);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_labeled_statement();
	partial void LeaveRule_labeled_statement();

	// $ANTLR start "labeled_statement"
	// C.g:451:1: labeled_statement : ( IDENTIFIER ':' statement | 'case' constant_expression ':' statement | 'default' ':' statement );
	[GrammarRule("labeled_statement")]
	public XAstParserRuleReturnScope labeled_statement()
	{
		EnterRule_labeled_statement();
		EnterRule("labeled_statement", 66);
		var retval = new XAstParserRuleReturnScope("labeled_statement");
		
		retval.Start = (IToken)input.LT(1);
		int labeled_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER257 = default(IToken);
		IToken char_literal258 = default(IToken);
		IToken string_literal260 = default(IToken);
		IToken char_literal262 = default(IToken);
		IToken string_literal264 = default(IToken);
		IToken char_literal265 = default(IToken);
		XAstParserRuleReturnScope statement259 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression261 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement263 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement266 = default(XAstParserRuleReturnScope);

		object IDENTIFIER257_tree = default(object);
		object char_literal258_tree = default(object);
		object string_literal260_tree = default(object);
		object char_literal262_tree = default(object);
		object string_literal264_tree = default(object);
		object char_literal265_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "labeled_statement");
		DebugLocation(451, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }

			// C.g:452:5: ( IDENTIFIER ':' statement | 'case' constant_expression ':' statement | 'default' ':' statement )
			int alt64=3;
			try { DebugEnterDecision(64, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				alt64 = 1;
				}
				break;
			case 65:
				{
				alt64 = 2;
				}
				break;
			case 69:
				{
				alt64 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 64, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:452:7: IDENTIFIER ':' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(452, 7);
				IDENTIFIER257=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_labeled_statement2489), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER257_tree = (object)adaptor.Create(IDENTIFIER257, retval);
				adaptor.AddChild(root_0, IDENTIFIER257_tree);
				}
				DebugLocation(452, 18);
				char_literal258=(IToken)Match(input,46,Follow._46_in_labeled_statement2491); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal258_tree = (object)adaptor.Create(char_literal258, retval);
				adaptor.AddChild(root_0, char_literal258_tree);
				}
				DebugLocation(452, 22);
				PushFollow(Follow._statement_in_labeled_statement2493);
				statement259=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement259.Tree, statement259, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:453:7: 'case' constant_expression ':' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(453, 7);
				string_literal260=(IToken)Match(input,65,Follow._65_in_labeled_statement2501); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal260_tree = (object)adaptor.Create(string_literal260, retval);
				adaptor.AddChild(root_0, string_literal260_tree);
				}
				DebugLocation(453, 14);
				PushFollow(Follow._constant_expression_in_labeled_statement2503);
				constant_expression261=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression261.Tree, constant_expression261, retval);
				DebugLocation(453, 34);
				char_literal262=(IToken)Match(input,46,Follow._46_in_labeled_statement2505); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal262_tree = (object)adaptor.Create(char_literal262, retval);
				adaptor.AddChild(root_0, char_literal262_tree);
				}
				DebugLocation(453, 38);
				PushFollow(Follow._statement_in_labeled_statement2507);
				statement263=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement263.Tree, statement263, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:454:7: 'default' ':' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(454, 7);
				string_literal264=(IToken)Match(input,69,Follow._69_in_labeled_statement2515); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal264_tree = (object)adaptor.Create(string_literal264, retval);
				adaptor.AddChild(root_0, string_literal264_tree);
				}
				DebugLocation(454, 17);
				char_literal265=(IToken)Match(input,46,Follow._46_in_labeled_statement2517); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal265_tree = (object)adaptor.Create(char_literal265, retval);
				adaptor.AddChild(root_0, char_literal265_tree);
				}
				DebugLocation(454, 21);
				PushFollow(Follow._statement_in_labeled_statement2519);
				statement266=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement266.Tree, statement266, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("labeled_statement", 66);
			LeaveRule("labeled_statement", 66);
			LeaveRule_labeled_statement();
			if (state.backtracking > 0) { Memoize(input, 66, labeled_statement_StartIndex); }

		}
		DebugLocation(455, 4);
		} finally { DebugExitRule(GrammarFileName, "labeled_statement"); }
		return retval;

	}
	// $ANTLR end "labeled_statement"

	partial void EnterRule_compound_statement();
	partial void LeaveRule_compound_statement();

	// $ANTLR start "compound_statement"
	// C.g:457:1: compound_statement : '{' ( declaration )* ( statement_list )? '}' ;
	[GrammarRule("compound_statement")]
	public XAstParserRuleReturnScope compound_statement()
	{
		EnterRule_compound_statement();
		EnterRule("compound_statement", 67);
		var retval = new XAstParserRuleReturnScope("compound_statement");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int compound_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal267 = default(IToken);
		IToken char_literal270 = default(IToken);
		XAstParserRuleReturnScope declaration268 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement_list269 = default(XAstParserRuleReturnScope);

		object char_literal267_tree = default(object);
		object char_literal270_tree = default(object);

		  Symbols_stack.Peek().types =  new HashSet();

		try { DebugEnterRule(GrammarFileName, "compound_statement");
		DebugLocation(457, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return retval; }

			// C.g:462:5: ( '{' ( declaration )* ( statement_list )? '}' )
			DebugEnterAlt(1);
			// C.g:462:7: '{' ( declaration )* ( statement_list )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(462, 7);
			char_literal267=(IToken)Match(input,95,Follow._95_in_compound_statement2547); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal267_tree = (object)adaptor.Create(char_literal267, retval);
			adaptor.AddChild(root_0, char_literal267_tree);
			}
			DebugLocation(462, 11);
			// C.g:462:11: ( declaration )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, false);
				try
				{
					alt65 = dfa65.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:462:11: declaration
					{
					DebugLocation(462, 11);
					PushFollow(Follow._declaration_in_compound_statement2549);
					declaration268=declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declaration268.Tree, declaration268, retval);

					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }

			DebugLocation(462, 24);
			// C.g:462:24: ( statement_list )?
			int alt66=2;
			try { DebugEnterSubRule(66);
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if ((LA66_0==CHARACTER_LITERAL||LA66_0==DECIMAL_LITERAL||LA66_0==FLOATING_POINT_LITERAL||LA66_0==HEX_LITERAL||LA66_0==IDENTIFIER||LA66_0==OCTAL_LITERAL||LA66_0==STRING_LITERAL||LA66_0==23||LA66_0==28||LA66_0==30||LA66_0==32||(LA66_0>=34 && LA66_0<=35)||(LA66_0>=38 && LA66_0<=39)||LA66_0==47||(LA66_0>=64 && LA66_0<=65)||(LA66_0>=68 && LA66_0<=70)||(LA66_0>=76 && LA66_0<=78)||LA66_0==82||LA66_0==85||LA66_0==88||(LA66_0>=94 && LA66_0<=95)||LA66_0==100))
			{
				alt66 = 1;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:462:24: statement_list
				{
				DebugLocation(462, 24);
				PushFollow(Follow._statement_list_in_compound_statement2552);
				statement_list269=statement_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement_list269.Tree, statement_list269, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(66); }

			DebugLocation(462, 40);
			char_literal270=(IToken)Match(input,99,Follow._99_in_compound_statement2555); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal270_tree = (object)adaptor.Create(char_literal270, retval);
			adaptor.AddChild(root_0, char_literal270_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("compound_statement", 67);
			LeaveRule("compound_statement", 67);
			LeaveRule_compound_statement();
			if (state.backtracking > 0) { Memoize(input, 67, compound_statement_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(463, 4);
		} finally { DebugExitRule(GrammarFileName, "compound_statement"); }
		return retval;

	}
	// $ANTLR end "compound_statement"

	partial void EnterRule_statement_list();
	partial void LeaveRule_statement_list();

	// $ANTLR start "statement_list"
	// C.g:465:1: statement_list : ( statement )+ ;
	[GrammarRule("statement_list")]
	public XAstParserRuleReturnScope statement_list()
	{
		EnterRule_statement_list();
		EnterRule("statement_list", 68);
		var retval = new XAstParserRuleReturnScope("statement_list");
		
		retval.Start = (IToken)input.LT(1);
		int statement_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope statement271 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "statement_list");
		DebugLocation(465, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return retval; }

			// C.g:466:5: ( ( statement )+ )
			DebugEnterAlt(1);
			// C.g:466:7: ( statement )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(466, 7);
			// C.g:466:7: ( statement )+
			int cnt67=0;
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if ((LA67_0==CHARACTER_LITERAL||LA67_0==DECIMAL_LITERAL||LA67_0==FLOATING_POINT_LITERAL||LA67_0==HEX_LITERAL||LA67_0==IDENTIFIER||LA67_0==OCTAL_LITERAL||LA67_0==STRING_LITERAL||LA67_0==23||LA67_0==28||LA67_0==30||LA67_0==32||(LA67_0>=34 && LA67_0<=35)||(LA67_0>=38 && LA67_0<=39)||LA67_0==47||(LA67_0>=64 && LA67_0<=65)||(LA67_0>=68 && LA67_0<=70)||(LA67_0>=76 && LA67_0<=78)||LA67_0==82||LA67_0==85||LA67_0==88||(LA67_0>=94 && LA67_0<=95)||LA67_0==100))
				{
					alt67 = 1;
				}


				} finally { DebugExitDecision(67); }
				switch (alt67)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:466:7: statement
					{
					DebugLocation(466, 7);
					PushFollow(Follow._statement_in_statement_list2572);
					statement271=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement271.Tree, statement271, retval);

					}
					break;

				default:
					if (cnt67 >= 1)
						goto loop67;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee67 = new EarlyExitException( 67, input );
					DebugRecognitionException(eee67);
					throw eee67;
				}
				cnt67++;
			}
			loop67:
				;

			} finally { DebugExitSubRule(67); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement_list", 68);
			LeaveRule("statement_list", 68);
			LeaveRule_statement_list();
			if (state.backtracking > 0) { Memoize(input, 68, statement_list_StartIndex); }

		}
		DebugLocation(467, 4);
		} finally { DebugExitRule(GrammarFileName, "statement_list"); }
		return retval;

	}
	// $ANTLR end "statement_list"

	partial void EnterRule_expression_statement();
	partial void LeaveRule_expression_statement();

	// $ANTLR start "expression_statement"
	// C.g:469:1: expression_statement : ( ';' | expression ';' );
	[GrammarRule("expression_statement")]
	public XAstParserRuleReturnScope expression_statement()
	{
		EnterRule_expression_statement();
		EnterRule("expression_statement", 69);
		var retval = new XAstParserRuleReturnScope("expression_statement");
		
		retval.Start = (IToken)input.LT(1);
		int expression_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal272 = default(IToken);
		IToken char_literal274 = default(IToken);
		XAstParserRuleReturnScope expression273 = default(XAstParserRuleReturnScope);

		object char_literal272_tree = default(object);
		object char_literal274_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expression_statement");
		DebugLocation(469, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return retval; }

			// C.g:470:5: ( ';' | expression ';' )
			int alt68=2;
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==47))
			{
				alt68 = 1;
			}
			else if ((LA68_0==CHARACTER_LITERAL||LA68_0==DECIMAL_LITERAL||LA68_0==FLOATING_POINT_LITERAL||LA68_0==HEX_LITERAL||LA68_0==IDENTIFIER||LA68_0==OCTAL_LITERAL||LA68_0==STRING_LITERAL||LA68_0==23||LA68_0==28||LA68_0==30||LA68_0==32||(LA68_0>=34 && LA68_0<=35)||(LA68_0>=38 && LA68_0<=39)||LA68_0==85||LA68_0==100))
			{
				alt68 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:470:7: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(470, 7);
				char_literal272=(IToken)Match(input,47,Follow._47_in_expression_statement2590); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal272_tree = (object)adaptor.Create(char_literal272, retval);
				adaptor.AddChild(root_0, char_literal272_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:471:7: expression ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(471, 7);
				PushFollow(Follow._expression_in_expression_statement2598);
				expression273=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression273.Tree, expression273, retval);
				DebugLocation(471, 18);
				char_literal274=(IToken)Match(input,47,Follow._47_in_expression_statement2600); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal274_tree = (object)adaptor.Create(char_literal274, retval);
				adaptor.AddChild(root_0, char_literal274_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_statement", 69);
			LeaveRule("expression_statement", 69);
			LeaveRule_expression_statement();
			if (state.backtracking > 0) { Memoize(input, 69, expression_statement_StartIndex); }

		}
		DebugLocation(472, 4);
		} finally { DebugExitRule(GrammarFileName, "expression_statement"); }
		return retval;

	}
	// $ANTLR end "expression_statement"

	partial void EnterRule_selection_statement();
	partial void LeaveRule_selection_statement();

	// $ANTLR start "selection_statement"
	// C.g:474:1: selection_statement : ( 'if' '(' expression ')' statement ( options {k=1; backtrack=false; } : 'else' statement )? | 'switch' '(' expression ')' statement );
	[GrammarRule("selection_statement")]
	public XAstParserRuleReturnScope selection_statement()
	{
		EnterRule_selection_statement();
		EnterRule("selection_statement", 70);
		var retval = new XAstParserRuleReturnScope("selection_statement");
		
		retval.Start = (IToken)input.LT(1);
		int selection_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal275 = default(IToken);
		IToken char_literal276 = default(IToken);
		IToken char_literal278 = default(IToken);
		IToken string_literal280 = default(IToken);
		IToken string_literal282 = default(IToken);
		IToken char_literal283 = default(IToken);
		IToken char_literal285 = default(IToken);
		XAstParserRuleReturnScope expression277 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement279 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement281 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression284 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement286 = default(XAstParserRuleReturnScope);

		object string_literal275_tree = default(object);
		object char_literal276_tree = default(object);
		object char_literal278_tree = default(object);
		object string_literal280_tree = default(object);
		object string_literal282_tree = default(object);
		object char_literal283_tree = default(object);
		object char_literal285_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "selection_statement");
		DebugLocation(474, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return retval; }

			// C.g:475:5: ( 'if' '(' expression ')' statement ( options {k=1; backtrack=false; } : 'else' statement )? | 'switch' '(' expression ')' statement )
			int alt70=2;
			try { DebugEnterDecision(70, false);
			int LA70_0 = input.LA(1);

			if ((LA70_0==78))
			{
				alt70 = 1;
			}
			else if ((LA70_0==88))
			{
				alt70 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 70, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:475:7: 'if' '(' expression ')' statement ( options {k=1; backtrack=false; } : 'else' statement )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(475, 7);
				string_literal275=(IToken)Match(input,78,Follow._78_in_selection_statement2617); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal275_tree = (object)adaptor.Create(string_literal275, retval);
				adaptor.AddChild(root_0, string_literal275_tree);
				}
				DebugLocation(475, 12);
				char_literal276=(IToken)Match(input,30,Follow._30_in_selection_statement2619); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal276_tree = (object)adaptor.Create(char_literal276, retval);
				adaptor.AddChild(root_0, char_literal276_tree);
				}
				DebugLocation(475, 16);
				PushFollow(Follow._expression_in_selection_statement2621);
				expression277=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression277.Tree, expression277, retval);
				DebugLocation(475, 27);
				char_literal278=(IToken)Match(input,31,Follow._31_in_selection_statement2623); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal278_tree = (object)adaptor.Create(char_literal278, retval);
				adaptor.AddChild(root_0, char_literal278_tree);
				}
				DebugLocation(475, 31);
				PushFollow(Follow._statement_in_selection_statement2625);
				statement279=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement279.Tree, statement279, retval);
				DebugLocation(475, 41);
				// C.g:475:41: ( options {k=1; backtrack=false; } : 'else' statement )?
				int alt69=2;
				try { DebugEnterSubRule(69);
				try { DebugEnterDecision(69, false);
				int LA69_0 = input.LA(1);

				if ((LA69_0==72))
				{
					int LA69_1 = input.LA(2);

					if ((true))
					{
						alt69 = 1;
					}
				}
				} finally { DebugExitDecision(69); }
				switch (alt69)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:475:74: 'else' statement
					{
					DebugLocation(475, 74);
					string_literal280=(IToken)Match(input,72,Follow._72_in_selection_statement2640); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal280_tree = (object)adaptor.Create(string_literal280, retval);
					adaptor.AddChild(root_0, string_literal280_tree);
					}
					DebugLocation(475, 81);
					PushFollow(Follow._statement_in_selection_statement2642);
					statement281=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement281.Tree, statement281, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(69); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:476:7: 'switch' '(' expression ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(476, 7);
				string_literal282=(IToken)Match(input,88,Follow._88_in_selection_statement2652); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal282_tree = (object)adaptor.Create(string_literal282, retval);
				adaptor.AddChild(root_0, string_literal282_tree);
				}
				DebugLocation(476, 16);
				char_literal283=(IToken)Match(input,30,Follow._30_in_selection_statement2654); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal283_tree = (object)adaptor.Create(char_literal283, retval);
				adaptor.AddChild(root_0, char_literal283_tree);
				}
				DebugLocation(476, 20);
				PushFollow(Follow._expression_in_selection_statement2656);
				expression284=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression284.Tree, expression284, retval);
				DebugLocation(476, 31);
				char_literal285=(IToken)Match(input,31,Follow._31_in_selection_statement2658); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal285_tree = (object)adaptor.Create(char_literal285, retval);
				adaptor.AddChild(root_0, char_literal285_tree);
				}
				DebugLocation(476, 35);
				PushFollow(Follow._statement_in_selection_statement2660);
				statement286=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement286.Tree, statement286, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selection_statement", 70);
			LeaveRule("selection_statement", 70);
			LeaveRule_selection_statement();
			if (state.backtracking > 0) { Memoize(input, 70, selection_statement_StartIndex); }

		}
		DebugLocation(477, 4);
		} finally { DebugExitRule(GrammarFileName, "selection_statement"); }
		return retval;

	}
	// $ANTLR end "selection_statement"

	partial void EnterRule_iteration_statement();
	partial void LeaveRule_iteration_statement();

	// $ANTLR start "iteration_statement"
	// C.g:479:1: iteration_statement : ( 'while' '(' expression ')' statement | 'do' statement 'while' '(' expression ')' ';' | 'for' '(' expression_statement expression_statement ( expression )? ')' statement );
	[GrammarRule("iteration_statement")]
	public XAstParserRuleReturnScope iteration_statement()
	{
		EnterRule_iteration_statement();
		EnterRule("iteration_statement", 71);
		var retval = new XAstParserRuleReturnScope("iteration_statement");
		
		retval.Start = (IToken)input.LT(1);
		int iteration_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal287 = default(IToken);
		IToken char_literal288 = default(IToken);
		IToken char_literal290 = default(IToken);
		IToken string_literal292 = default(IToken);
		IToken string_literal294 = default(IToken);
		IToken char_literal295 = default(IToken);
		IToken char_literal297 = default(IToken);
		IToken char_literal298 = default(IToken);
		IToken string_literal299 = default(IToken);
		IToken char_literal300 = default(IToken);
		IToken char_literal304 = default(IToken);
		XAstParserRuleReturnScope expression289 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement291 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement293 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression296 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_statement301 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_statement302 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression303 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement305 = default(XAstParserRuleReturnScope);

		object string_literal287_tree = default(object);
		object char_literal288_tree = default(object);
		object char_literal290_tree = default(object);
		object string_literal292_tree = default(object);
		object string_literal294_tree = default(object);
		object char_literal295_tree = default(object);
		object char_literal297_tree = default(object);
		object char_literal298_tree = default(object);
		object string_literal299_tree = default(object);
		object char_literal300_tree = default(object);
		object char_literal304_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "iteration_statement");
		DebugLocation(479, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return retval; }

			// C.g:480:5: ( 'while' '(' expression ')' statement | 'do' statement 'while' '(' expression ')' ';' | 'for' '(' expression_statement expression_statement ( expression )? ')' statement )
			int alt72=3;
			try { DebugEnterDecision(72, false);
			switch (input.LA(1))
			{
			case 94:
				{
				alt72 = 1;
				}
				break;
			case 70:
				{
				alt72 = 2;
				}
				break;
			case 76:
				{
				alt72 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:480:7: 'while' '(' expression ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(480, 7);
				string_literal287=(IToken)Match(input,94,Follow._94_in_iteration_statement2677); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal287_tree = (object)adaptor.Create(string_literal287, retval);
				adaptor.AddChild(root_0, string_literal287_tree);
				}
				DebugLocation(480, 15);
				char_literal288=(IToken)Match(input,30,Follow._30_in_iteration_statement2679); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal288_tree = (object)adaptor.Create(char_literal288, retval);
				adaptor.AddChild(root_0, char_literal288_tree);
				}
				DebugLocation(480, 19);
				PushFollow(Follow._expression_in_iteration_statement2681);
				expression289=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression289.Tree, expression289, retval);
				DebugLocation(480, 30);
				char_literal290=(IToken)Match(input,31,Follow._31_in_iteration_statement2683); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal290_tree = (object)adaptor.Create(char_literal290, retval);
				adaptor.AddChild(root_0, char_literal290_tree);
				}
				DebugLocation(480, 34);
				PushFollow(Follow._statement_in_iteration_statement2685);
				statement291=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement291.Tree, statement291, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:481:7: 'do' statement 'while' '(' expression ')' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(481, 7);
				string_literal292=(IToken)Match(input,70,Follow._70_in_iteration_statement2693); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal292_tree = (object)adaptor.Create(string_literal292, retval);
				adaptor.AddChild(root_0, string_literal292_tree);
				}
				DebugLocation(481, 12);
				PushFollow(Follow._statement_in_iteration_statement2695);
				statement293=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement293.Tree, statement293, retval);
				DebugLocation(481, 22);
				string_literal294=(IToken)Match(input,94,Follow._94_in_iteration_statement2697); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal294_tree = (object)adaptor.Create(string_literal294, retval);
				adaptor.AddChild(root_0, string_literal294_tree);
				}
				DebugLocation(481, 30);
				char_literal295=(IToken)Match(input,30,Follow._30_in_iteration_statement2699); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal295_tree = (object)adaptor.Create(char_literal295, retval);
				adaptor.AddChild(root_0, char_literal295_tree);
				}
				DebugLocation(481, 34);
				PushFollow(Follow._expression_in_iteration_statement2701);
				expression296=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression296.Tree, expression296, retval);
				DebugLocation(481, 45);
				char_literal297=(IToken)Match(input,31,Follow._31_in_iteration_statement2703); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal297_tree = (object)adaptor.Create(char_literal297, retval);
				adaptor.AddChild(root_0, char_literal297_tree);
				}
				DebugLocation(481, 49);
				char_literal298=(IToken)Match(input,47,Follow._47_in_iteration_statement2705); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal298_tree = (object)adaptor.Create(char_literal298, retval);
				adaptor.AddChild(root_0, char_literal298_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:482:7: 'for' '(' expression_statement expression_statement ( expression )? ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(482, 7);
				string_literal299=(IToken)Match(input,76,Follow._76_in_iteration_statement2713); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal299_tree = (object)adaptor.Create(string_literal299, retval);
				adaptor.AddChild(root_0, string_literal299_tree);
				}
				DebugLocation(482, 13);
				char_literal300=(IToken)Match(input,30,Follow._30_in_iteration_statement2715); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal300_tree = (object)adaptor.Create(char_literal300, retval);
				adaptor.AddChild(root_0, char_literal300_tree);
				}
				DebugLocation(482, 17);
				PushFollow(Follow._expression_statement_in_iteration_statement2717);
				expression_statement301=expression_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_statement301.Tree, expression_statement301, retval);
				DebugLocation(482, 38);
				PushFollow(Follow._expression_statement_in_iteration_statement2719);
				expression_statement302=expression_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_statement302.Tree, expression_statement302, retval);
				DebugLocation(482, 59);
				// C.g:482:59: ( expression )?
				int alt71=2;
				try { DebugEnterSubRule(71);
				try { DebugEnterDecision(71, false);
				int LA71_0 = input.LA(1);

				if ((LA71_0==CHARACTER_LITERAL||LA71_0==DECIMAL_LITERAL||LA71_0==FLOATING_POINT_LITERAL||LA71_0==HEX_LITERAL||LA71_0==IDENTIFIER||LA71_0==OCTAL_LITERAL||LA71_0==STRING_LITERAL||LA71_0==23||LA71_0==28||LA71_0==30||LA71_0==32||(LA71_0>=34 && LA71_0<=35)||(LA71_0>=38 && LA71_0<=39)||LA71_0==85||LA71_0==100))
				{
					alt71 = 1;
				}
				} finally { DebugExitDecision(71); }
				switch (alt71)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:482:59: expression
					{
					DebugLocation(482, 59);
					PushFollow(Follow._expression_in_iteration_statement2721);
					expression303=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression303.Tree, expression303, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(71); }

				DebugLocation(482, 71);
				char_literal304=(IToken)Match(input,31,Follow._31_in_iteration_statement2724); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal304_tree = (object)adaptor.Create(char_literal304, retval);
				adaptor.AddChild(root_0, char_literal304_tree);
				}
				DebugLocation(482, 75);
				PushFollow(Follow._statement_in_iteration_statement2726);
				statement305=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement305.Tree, statement305, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("iteration_statement", 71);
			LeaveRule("iteration_statement", 71);
			LeaveRule_iteration_statement();
			if (state.backtracking > 0) { Memoize(input, 71, iteration_statement_StartIndex); }

		}
		DebugLocation(483, 4);
		} finally { DebugExitRule(GrammarFileName, "iteration_statement"); }
		return retval;

	}
	// $ANTLR end "iteration_statement"

	partial void EnterRule_jump_statement();
	partial void LeaveRule_jump_statement();

	// $ANTLR start "jump_statement"
	// C.g:485:1: jump_statement : ( 'goto' IDENTIFIER ';' | 'continue' ';' | 'break' ';' | 'return' ';' | 'return' expression ';' );
	[GrammarRule("jump_statement")]
	public XAstParserRuleReturnScope jump_statement()
	{
		EnterRule_jump_statement();
		EnterRule("jump_statement", 72);
		var retval = new XAstParserRuleReturnScope("jump_statement");
		
		retval.Start = (IToken)input.LT(1);
		int jump_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal306 = default(IToken);
		IToken IDENTIFIER307 = default(IToken);
		IToken char_literal308 = default(IToken);
		IToken string_literal309 = default(IToken);
		IToken char_literal310 = default(IToken);
		IToken string_literal311 = default(IToken);
		IToken char_literal312 = default(IToken);
		IToken string_literal313 = default(IToken);
		IToken char_literal314 = default(IToken);
		IToken string_literal315 = default(IToken);
		IToken char_literal317 = default(IToken);
		XAstParserRuleReturnScope expression316 = default(XAstParserRuleReturnScope);

		object string_literal306_tree = default(object);
		object IDENTIFIER307_tree = default(object);
		object char_literal308_tree = default(object);
		object string_literal309_tree = default(object);
		object char_literal310_tree = default(object);
		object string_literal311_tree = default(object);
		object char_literal312_tree = default(object);
		object string_literal313_tree = default(object);
		object char_literal314_tree = default(object);
		object string_literal315_tree = default(object);
		object char_literal317_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "jump_statement");
		DebugLocation(485, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return retval; }

			// C.g:486:5: ( 'goto' IDENTIFIER ';' | 'continue' ';' | 'break' ';' | 'return' ';' | 'return' expression ';' )
			int alt73=5;
			try { DebugEnterDecision(73, false);
			switch (input.LA(1))
			{
			case 77:
				{
				alt73 = 1;
				}
				break;
			case 68:
				{
				alt73 = 2;
				}
				break;
			case 64:
				{
				alt73 = 3;
				}
				break;
			case 82:
				{
				int LA73_4 = input.LA(2);

				if ((LA73_4==47))
				{
					alt73 = 4;
				}
				else if ((LA73_4==CHARACTER_LITERAL||LA73_4==DECIMAL_LITERAL||LA73_4==FLOATING_POINT_LITERAL||LA73_4==HEX_LITERAL||LA73_4==IDENTIFIER||LA73_4==OCTAL_LITERAL||LA73_4==STRING_LITERAL||LA73_4==23||LA73_4==28||LA73_4==30||LA73_4==32||(LA73_4>=34 && LA73_4<=35)||(LA73_4>=38 && LA73_4<=39)||LA73_4==85||LA73_4==100))
				{
					alt73 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 73, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 73, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:486:7: 'goto' IDENTIFIER ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(486, 7);
				string_literal306=(IToken)Match(input,77,Follow._77_in_jump_statement2743); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal306_tree = (object)adaptor.Create(string_literal306, retval);
				adaptor.AddChild(root_0, string_literal306_tree);
				}
				DebugLocation(486, 14);
				IDENTIFIER307=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_jump_statement2745), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER307_tree = (object)adaptor.Create(IDENTIFIER307, retval);
				adaptor.AddChild(root_0, IDENTIFIER307_tree);
				}
				DebugLocation(486, 25);
				char_literal308=(IToken)Match(input,47,Follow._47_in_jump_statement2747); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal308_tree = (object)adaptor.Create(char_literal308, retval);
				adaptor.AddChild(root_0, char_literal308_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:487:7: 'continue' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(487, 7);
				string_literal309=(IToken)Match(input,68,Follow._68_in_jump_statement2755); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal309_tree = (object)adaptor.Create(string_literal309, retval);
				adaptor.AddChild(root_0, string_literal309_tree);
				}
				DebugLocation(487, 18);
				char_literal310=(IToken)Match(input,47,Follow._47_in_jump_statement2757); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal310_tree = (object)adaptor.Create(char_literal310, retval);
				adaptor.AddChild(root_0, char_literal310_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:488:7: 'break' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(488, 7);
				string_literal311=(IToken)Match(input,64,Follow._64_in_jump_statement2765); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal311_tree = (object)adaptor.Create(string_literal311, retval);
				adaptor.AddChild(root_0, string_literal311_tree);
				}
				DebugLocation(488, 15);
				char_literal312=(IToken)Match(input,47,Follow._47_in_jump_statement2767); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal312_tree = (object)adaptor.Create(char_literal312, retval);
				adaptor.AddChild(root_0, char_literal312_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:489:7: 'return' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(489, 7);
				string_literal313=(IToken)Match(input,82,Follow._82_in_jump_statement2775); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal313_tree = (object)adaptor.Create(string_literal313, retval);
				adaptor.AddChild(root_0, string_literal313_tree);
				}
				DebugLocation(489, 16);
				char_literal314=(IToken)Match(input,47,Follow._47_in_jump_statement2777); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal314_tree = (object)adaptor.Create(char_literal314, retval);
				adaptor.AddChild(root_0, char_literal314_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:490:7: 'return' expression ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(490, 7);
				string_literal315=(IToken)Match(input,82,Follow._82_in_jump_statement2785); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal315_tree = (object)adaptor.Create(string_literal315, retval);
				adaptor.AddChild(root_0, string_literal315_tree);
				}
				DebugLocation(490, 16);
				PushFollow(Follow._expression_in_jump_statement2787);
				expression316=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression316.Tree, expression316, retval);
				DebugLocation(490, 27);
				char_literal317=(IToken)Match(input,47,Follow._47_in_jump_statement2789); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal317_tree = (object)adaptor.Create(char_literal317, retval);
				adaptor.AddChild(root_0, char_literal317_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("jump_statement", 72);
			LeaveRule("jump_statement", 72);
			LeaveRule_jump_statement();
			if (state.backtracking > 0) { Memoize(input, 72, jump_statement_StartIndex); }

		}
		DebugLocation(491, 4);
		} finally { DebugExitRule(GrammarFileName, "jump_statement"); }
		return retval;

	}
	// $ANTLR end "jump_statement"

	partial void EnterRule_synpred2_C_fragment();
	partial void LeaveRule_synpred2_C_fragment();

	// $ANTLR start synpred2_C
	public void synpred2_C_fragment()
	{
		EnterRule_synpred2_C_fragment();
		EnterRule("synpred2_C_fragment", 74);
		var retval = new XAstParserRuleReturnScope("synpred2_C_fragment");
		try
		{
			// C.g:82:9: ( declaration_specifiers )
			DebugEnterAlt(1);
			// C.g:82:9: declaration_specifiers
			{
			DebugLocation(82, 9);
			PushFollow(Follow._declaration_specifiers_in_synpred2_C118);
			declaration_specifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_C_fragment", 74);
			LeaveRule("synpred2_C_fragment", 74);
			LeaveRule_synpred2_C_fragment();
		}
	}
	// $ANTLR end synpred2_C

	partial void EnterRule_synpred4_C_fragment();
	partial void LeaveRule_synpred4_C_fragment();

	// $ANTLR start synpred4_C
	public void synpred4_C_fragment()
	{
		EnterRule_synpred4_C_fragment();
		EnterRule("synpred4_C_fragment", 76);
		var retval = new XAstParserRuleReturnScope("synpred4_C_fragment");
		try
		{
			// C.g:82:7: ( ( declaration_specifiers )? declarator ( declaration )* '{' )
			DebugEnterAlt(1);
			// C.g:82:9: ( declaration_specifiers )? declarator ( declaration )* '{'
			{
			DebugLocation(82, 9);
			// C.g:82:9: ( declaration_specifiers )?
			int alt74=2;
			try { DebugEnterSubRule(74);
			try { DebugEnterDecision(74, false);
			int LA74_0 = input.LA(1);

			if ((LA74_0==63||(LA74_0>=66 && LA74_0<=67)||LA74_0==71||(LA74_0>=73 && LA74_0<=75)||(LA74_0>=79 && LA74_0<=81)||(LA74_0>=83 && LA74_0<=84)||(LA74_0>=86 && LA74_0<=87)||(LA74_0>=90 && LA74_0<=93)))
			{
				alt74 = 1;
			}
			else if ((LA74_0==IDENTIFIER))
			{
				switch (input.LA(2))
				{
				case 32:
					{
					alt74 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA74_18 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 30:
					{
					int LA74_19 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 63:
				case 74:
				case 81:
				case 86:
					{
					int LA74_20 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 92:
					{
					int LA74_21 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 66:
					{
					int LA74_22 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 83:
					{
					int LA74_23 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 79:
					{
					int LA74_24 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 80:
					{
					int LA74_25 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 75:
					{
					int LA74_26 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 71:
					{
					int LA74_27 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 84:
					{
					int LA74_28 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 91:
					{
					int LA74_29 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 87:
				case 90:
					{
					int LA74_30 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 73:
					{
					int LA74_31 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 67:
				case 93:
					{
					int LA74_32 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				}

			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:82:9: declaration_specifiers
				{
				DebugLocation(82, 9);
				PushFollow(Follow._declaration_specifiers_in_synpred4_C118);
				declaration_specifiers();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(74); }

			DebugLocation(82, 33);
			PushFollow(Follow._declarator_in_synpred4_C121);
			declarator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(82, 44);
			// C.g:82:44: ( declaration )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_0 = input.LA(1);

				if ((LA75_0==IDENTIFIER||LA75_0==63||(LA75_0>=66 && LA75_0<=67)||LA75_0==71||(LA75_0>=73 && LA75_0<=75)||(LA75_0>=79 && LA75_0<=81)||(LA75_0>=83 && LA75_0<=84)||(LA75_0>=86 && LA75_0<=87)||(LA75_0>=89 && LA75_0<=93)))
				{
					alt75 = 1;
				}


				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:82:44: declaration
					{
					DebugLocation(82, 44);
					PushFollow(Follow._declaration_in_synpred4_C123);
					declaration();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }

			DebugLocation(82, 57);
			Match(input,95,Follow._95_in_synpred4_C126); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred4_C_fragment", 76);
			LeaveRule("synpred4_C_fragment", 76);
			LeaveRule_synpred4_C_fragment();
		}
	}
	// $ANTLR end synpred4_C

	partial void EnterRule_synpred5_C_fragment();
	partial void LeaveRule_synpred5_C_fragment();

	// $ANTLR start synpred5_C
	public void synpred5_C_fragment()
	{
		EnterRule_synpred5_C_fragment();
		EnterRule("synpred5_C_fragment", 77);
		var retval = new XAstParserRuleReturnScope("synpred5_C_fragment");
		try
		{
			// C.g:91:7: ( declaration_specifiers )
			DebugEnterAlt(1);
			// C.g:91:7: declaration_specifiers
			{
			DebugLocation(91, 7);
			PushFollow(Follow._declaration_specifiers_in_synpred5_C167);
			declaration_specifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred5_C_fragment", 77);
			LeaveRule("synpred5_C_fragment", 77);
			LeaveRule_synpred5_C_fragment();
		}
	}
	// $ANTLR end synpred5_C

	partial void EnterRule_synpred8_C_fragment();
	partial void LeaveRule_synpred8_C_fragment();

	// $ANTLR start synpred8_C
	public void synpred8_C_fragment()
	{
		EnterRule_synpred8_C_fragment();
		EnterRule("synpred8_C_fragment", 80);
		var retval = new XAstParserRuleReturnScope("synpred8_C_fragment");
		try
		{
			// C.g:104:17: ( declaration_specifiers )
			DebugEnterAlt(1);
			// C.g:104:17: declaration_specifiers
			{
			DebugLocation(104, 17);
			PushFollow(Follow._declaration_specifiers_in_synpred8_C240);
			declaration_specifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred8_C_fragment", 80);
			LeaveRule("synpred8_C_fragment", 80);
			LeaveRule_synpred8_C_fragment();
		}
	}
	// $ANTLR end synpred8_C

	partial void EnterRule_synpred12_C_fragment();
	partial void LeaveRule_synpred12_C_fragment();

	// $ANTLR start synpred12_C
	public void synpred12_C_fragment()
	{
		EnterRule_synpred12_C_fragment();
		EnterRule("synpred12_C_fragment", 84);
		var retval = new XAstParserRuleReturnScope("synpred12_C_fragment");
		try
		{
			// C.g:111:13: ( type_specifier )
			DebugEnterAlt(1);
			// C.g:111:13: type_specifier
			{
			DebugLocation(111, 13);
			PushFollow(Follow._type_specifier_in_synpred12_C304);
			type_specifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred12_C_fragment", 84);
			LeaveRule("synpred12_C_fragment", 84);
			LeaveRule_synpred12_C_fragment();
		}
	}
	// $ANTLR end synpred12_C

	partial void EnterRule_synpred35_C_fragment();
	partial void LeaveRule_synpred35_C_fragment();

	// $ANTLR start synpred35_C
	public void synpred35_C_fragment()
	{
		EnterRule_synpred35_C_fragment();
		EnterRule("synpred35_C_fragment", 107);
		var retval = new XAstParserRuleReturnScope("synpred35_C_fragment");
		try
		{
			// C.g:175:26: ( type_specifier )
			DebugEnterAlt(1);
			// C.g:175:26: type_specifier
			{
			DebugLocation(175, 26);
			PushFollow(Follow._type_specifier_in_synpred35_C686);
			type_specifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred35_C_fragment", 107);
			LeaveRule("synpred35_C_fragment", 107);
			LeaveRule_synpred35_C_fragment();
		}
	}
	// $ANTLR end synpred35_C

	partial void EnterRule_synpred45_C_fragment();
	partial void LeaveRule_synpred45_C_fragment();

	// $ANTLR start synpred45_C
	public void synpred45_C_fragment()
	{
		EnterRule_synpred45_C_fragment();
		EnterRule("synpred45_C_fragment", 117);
		var retval = new XAstParserRuleReturnScope("synpred45_C_fragment");
		try
		{
			// C.g:208:7: ( ( pointer )? direct_declarator )
			DebugEnterAlt(1);
			// C.g:208:7: ( pointer )? direct_declarator
			{
			DebugLocation(208, 7);
			// C.g:208:7: ( pointer )?
			int alt80=2;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			int LA80_0 = input.LA(1);

			if ((LA80_0==32))
			{
				alt80 = 1;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:208:7: pointer
				{
				DebugLocation(208, 7);
				PushFollow(Follow._pointer_in_synpred45_C893);
				pointer();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(80); }

			DebugLocation(208, 16);
			PushFollow(Follow._direct_declarator_in_synpred45_C896);
			direct_declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred45_C_fragment", 117);
			LeaveRule("synpred45_C_fragment", 117);
			LeaveRule_synpred45_C_fragment();
		}
	}
	// $ANTLR end synpred45_C

	partial void EnterRule_synpred47_C_fragment();
	partial void LeaveRule_synpred47_C_fragment();

	// $ANTLR start synpred47_C
	public void synpred47_C_fragment()
	{
		EnterRule_synpred47_C_fragment();
		EnterRule("synpred47_C_fragment", 119);
		var retval = new XAstParserRuleReturnScope("synpred47_C_fragment");
		try
		{
			// C.g:222:9: ( declarator_suffix )
			DebugEnterAlt(1);
			// C.g:222:9: declarator_suffix
			{
			DebugLocation(222, 9);
			PushFollow(Follow._declarator_suffix_in_synpred47_C975);
			declarator_suffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred47_C_fragment", 119);
			LeaveRule("synpred47_C_fragment", 119);
			LeaveRule_synpred47_C_fragment();
		}
	}
	// $ANTLR end synpred47_C

	partial void EnterRule_synpred50_C_fragment();
	partial void LeaveRule_synpred50_C_fragment();

	// $ANTLR start synpred50_C
	public void synpred50_C_fragment()
	{
		EnterRule_synpred50_C_fragment();
		EnterRule("synpred50_C_fragment", 122);
		var retval = new XAstParserRuleReturnScope("synpred50_C_fragment");
		try
		{
			// C.g:228:9: ( '(' parameter_type_list ')' )
			DebugEnterAlt(1);
			// C.g:228:9: '(' parameter_type_list ')'
			{
			DebugLocation(228, 9);
			Match(input,30,Follow._30_in_synpred50_C1021); if (state.failed) return;
			DebugLocation(228, 13);
			PushFollow(Follow._parameter_type_list_in_synpred50_C1023);
			parameter_type_list();
			PopFollow();
			if (state.failed) return;
			DebugLocation(228, 33);
			Match(input,31,Follow._31_in_synpred50_C1025); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred50_C_fragment", 122);
			LeaveRule("synpred50_C_fragment", 122);
			LeaveRule_synpred50_C_fragment();
		}
	}
	// $ANTLR end synpred50_C

	partial void EnterRule_synpred51_C_fragment();
	partial void LeaveRule_synpred51_C_fragment();

	// $ANTLR start synpred51_C
	public void synpred51_C_fragment()
	{
		EnterRule_synpred51_C_fragment();
		EnterRule("synpred51_C_fragment", 123);
		var retval = new XAstParserRuleReturnScope("synpred51_C_fragment");
		try
		{
			// C.g:229:9: ( '(' identifier_list ')' )
			DebugEnterAlt(1);
			// C.g:229:9: '(' identifier_list ')'
			{
			DebugLocation(229, 9);
			Match(input,30,Follow._30_in_synpred51_C1035); if (state.failed) return;
			DebugLocation(229, 13);
			PushFollow(Follow._identifier_list_in_synpred51_C1037);
			identifier_list();
			PopFollow();
			if (state.failed) return;
			DebugLocation(229, 29);
			Match(input,31,Follow._31_in_synpred51_C1039); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred51_C_fragment", 123);
			LeaveRule("synpred51_C_fragment", 123);
			LeaveRule_synpred51_C_fragment();
		}
	}
	// $ANTLR end synpred51_C

	partial void EnterRule_synpred52_C_fragment();
	partial void LeaveRule_synpred52_C_fragment();

	// $ANTLR start synpred52_C
	public void synpred52_C_fragment()
	{
		EnterRule_synpred52_C_fragment();
		EnterRule("synpred52_C_fragment", 124);
		var retval = new XAstParserRuleReturnScope("synpred52_C_fragment");
		try
		{
			// C.g:234:11: ( type_qualifier )
			DebugEnterAlt(1);
			// C.g:234:11: type_qualifier
			{
			DebugLocation(234, 11);
			PushFollow(Follow._type_qualifier_in_synpred52_C1070);
			type_qualifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred52_C_fragment", 124);
			LeaveRule("synpred52_C_fragment", 124);
			LeaveRule_synpred52_C_fragment();
		}
	}
	// $ANTLR end synpred52_C

	partial void EnterRule_synpred53_C_fragment();
	partial void LeaveRule_synpred53_C_fragment();

	// $ANTLR start synpred53_C
	public void synpred53_C_fragment()
	{
		EnterRule_synpred53_C_fragment();
		EnterRule("synpred53_C_fragment", 125);
		var retval = new XAstParserRuleReturnScope("synpred53_C_fragment");
		try
		{
			// C.g:234:27: ( pointer )
			DebugEnterAlt(1);
			// C.g:234:27: pointer
			{
			DebugLocation(234, 27);
			PushFollow(Follow._pointer_in_synpred53_C1073);
			pointer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred53_C_fragment", 125);
			LeaveRule("synpred53_C_fragment", 125);
			LeaveRule_synpred53_C_fragment();
		}
	}
	// $ANTLR end synpred53_C

	partial void EnterRule_synpred54_C_fragment();
	partial void LeaveRule_synpred54_C_fragment();

	// $ANTLR start synpred54_C
	public void synpred54_C_fragment()
	{
		EnterRule_synpred54_C_fragment();
		EnterRule("synpred54_C_fragment", 126);
		var retval = new XAstParserRuleReturnScope("synpred54_C_fragment");
		try
		{
			// C.g:234:7: ( '*' ( type_qualifier )+ ( pointer )? )
			DebugEnterAlt(1);
			// C.g:234:7: '*' ( type_qualifier )+ ( pointer )?
			{
			DebugLocation(234, 7);
			Match(input,32,Follow._32_in_synpred54_C1068); if (state.failed) return;
			DebugLocation(234, 11);
			// C.g:234:11: ( type_qualifier )+
			int cnt81=0;
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=2;
				try { DebugEnterDecision(81, false);
				int LA81_0 = input.LA(1);

				if ((LA81_0==67||LA81_0==93))
				{
					alt81 = 1;
				}


				} finally { DebugExitDecision(81); }
				switch (alt81)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:234:11: type_qualifier
					{
					DebugLocation(234, 11);
					PushFollow(Follow._type_qualifier_in_synpred54_C1070);
					type_qualifier();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt81 >= 1)
						goto loop81;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee81 = new EarlyExitException( 81, input );
					DebugRecognitionException(eee81);
					throw eee81;
				}
				cnt81++;
			}
			loop81:
				;

			} finally { DebugExitSubRule(81); }

			DebugLocation(234, 27);
			// C.g:234:27: ( pointer )?
			int alt82=2;
			try { DebugEnterSubRule(82);
			try { DebugEnterDecision(82, false);
			int LA82_0 = input.LA(1);

			if ((LA82_0==32))
			{
				alt82 = 1;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:234:27: pointer
				{
				DebugLocation(234, 27);
				PushFollow(Follow._pointer_in_synpred54_C1073);
				pointer();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(82); }


			}

		}
		finally
		{
			TraceOut("synpred54_C_fragment", 126);
			LeaveRule("synpred54_C_fragment", 126);
			LeaveRule_synpred54_C_fragment();
		}
	}
	// $ANTLR end synpred54_C

	partial void EnterRule_synpred55_C_fragment();
	partial void LeaveRule_synpred55_C_fragment();

	// $ANTLR start synpred55_C
	public void synpred55_C_fragment()
	{
		EnterRule_synpred55_C_fragment();
		EnterRule("synpred55_C_fragment", 127);
		var retval = new XAstParserRuleReturnScope("synpred55_C_fragment");
		try
		{
			// C.g:235:7: ( '*' pointer )
			DebugEnterAlt(1);
			// C.g:235:7: '*' pointer
			{
			DebugLocation(235, 7);
			Match(input,32,Follow._32_in_synpred55_C1082); if (state.failed) return;
			DebugLocation(235, 11);
			PushFollow(Follow._pointer_in_synpred55_C1084);
			pointer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred55_C_fragment", 127);
			LeaveRule("synpred55_C_fragment", 127);
			LeaveRule_synpred55_C_fragment();
		}
	}
	// $ANTLR end synpred55_C

	partial void EnterRule_synpred58_C_fragment();
	partial void LeaveRule_synpred58_C_fragment();

	// $ANTLR start synpred58_C
	public void synpred58_C_fragment()
	{
		EnterRule_synpred58_C_fragment();
		EnterRule("synpred58_C_fragment", 130);
		var retval = new XAstParserRuleReturnScope("synpred58_C_fragment");
		try
		{
			// C.g:248:31: ( declarator )
			DebugEnterAlt(1);
			// C.g:248:31: declarator
			{
			DebugLocation(248, 31);
			PushFollow(Follow._declarator_in_synpred58_C1160);
			declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred58_C_fragment", 130);
			LeaveRule("synpred58_C_fragment", 130);
			LeaveRule_synpred58_C_fragment();
		}
	}
	// $ANTLR end synpred58_C

	partial void EnterRule_synpred59_C_fragment();
	partial void LeaveRule_synpred59_C_fragment();

	// $ANTLR start synpred59_C
	public void synpred59_C_fragment()
	{
		EnterRule_synpred59_C_fragment();
		EnterRule("synpred59_C_fragment", 131);
		var retval = new XAstParserRuleReturnScope("synpred59_C_fragment");
		try
		{
			// C.g:248:42: ( abstract_declarator )
			DebugEnterAlt(1);
			// C.g:248:42: abstract_declarator
			{
			DebugLocation(248, 42);
			PushFollow(Follow._abstract_declarator_in_synpred59_C1162);
			abstract_declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred59_C_fragment", 131);
			LeaveRule("synpred59_C_fragment", 131);
			LeaveRule_synpred59_C_fragment();
		}
	}
	// $ANTLR end synpred59_C

	partial void EnterRule_synpred62_C_fragment();
	partial void LeaveRule_synpred62_C_fragment();

	// $ANTLR start synpred62_C
	public void synpred62_C_fragment()
	{
		EnterRule_synpred62_C_fragment();
		EnterRule("synpred62_C_fragment", 134);
		var retval = new XAstParserRuleReturnScope("synpred62_C_fragment");
		try
		{
			// C.g:260:15: ( direct_abstract_declarator )
			DebugEnterAlt(1);
			// C.g:260:15: direct_abstract_declarator
			{
			DebugLocation(260, 15);
			PushFollow(Follow._direct_abstract_declarator_in_synpred62_C1227);
			direct_abstract_declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred62_C_fragment", 134);
			LeaveRule("synpred62_C_fragment", 134);
			LeaveRule_synpred62_C_fragment();
		}
	}
	// $ANTLR end synpred62_C

	partial void EnterRule_synpred65_C_fragment();
	partial void LeaveRule_synpred65_C_fragment();

	// $ANTLR start synpred65_C
	public void synpred65_C_fragment()
	{
		EnterRule_synpred65_C_fragment();
		EnterRule("synpred65_C_fragment", 137);
		var retval = new XAstParserRuleReturnScope("synpred65_C_fragment");
		try
		{
			// C.g:265:68: ( abstract_declarator_suffix )
			DebugEnterAlt(1);
			// C.g:265:68: abstract_declarator_suffix
			{
			DebugLocation(265, 68);
			PushFollow(Follow._abstract_declarator_suffix_in_synpred65_C1267);
			abstract_declarator_suffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred65_C_fragment", 137);
			LeaveRule("synpred65_C_fragment", 137);
			LeaveRule_synpred65_C_fragment();
		}
	}
	// $ANTLR end synpred65_C

	partial void EnterRule_synpred78_C_fragment();
	partial void LeaveRule_synpred78_C_fragment();

	// $ANTLR start synpred78_C
	public void synpred78_C_fragment()
	{
		EnterRule_synpred78_C_fragment();
		EnterRule("synpred78_C_fragment", 150);
		var retval = new XAstParserRuleReturnScope("synpred78_C_fragment");
		try
		{
			// C.g:299:7: ( '(' type_name ')' cast_expression )
			DebugEnterAlt(1);
			// C.g:299:7: '(' type_name ')' cast_expression
			{
			DebugLocation(299, 7);
			Match(input,30,Follow._30_in_synpred78_C1496); if (state.failed) return;
			DebugLocation(299, 11);
			PushFollow(Follow._type_name_in_synpred78_C1498);
			type_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(299, 21);
			Match(input,31,Follow._31_in_synpred78_C1500); if (state.failed) return;
			DebugLocation(299, 25);
			PushFollow(Follow._cast_expression_in_synpred78_C1502);
			cast_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred78_C_fragment", 150);
			LeaveRule("synpred78_C_fragment", 150);
			LeaveRule_synpred78_C_fragment();
		}
	}
	// $ANTLR end synpred78_C

	partial void EnterRule_synpred83_C_fragment();
	partial void LeaveRule_synpred83_C_fragment();

	// $ANTLR start synpred83_C
	public void synpred83_C_fragment()
	{
		EnterRule_synpred83_C_fragment();
		EnterRule("synpred83_C_fragment", 155);
		var retval = new XAstParserRuleReturnScope("synpred83_C_fragment");
		try
		{
			// C.g:308:7: ( 'sizeof' unary_expression )
			DebugEnterAlt(1);
			// C.g:308:7: 'sizeof' unary_expression
			{
			DebugLocation(308, 7);
			Match(input,85,Follow._85_in_synpred83_C1565); if (state.failed) return;
			DebugLocation(308, 16);
			PushFollow(Follow._unary_expression_in_synpred83_C1567);
			unary_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred83_C_fragment", 155);
			LeaveRule("synpred83_C_fragment", 155);
			LeaveRule_synpred83_C_fragment();
		}
	}
	// $ANTLR end synpred83_C

	partial void EnterRule_synpred104_C_fragment();
	partial void LeaveRule_synpred104_C_fragment();

	// $ANTLR start synpred104_C
	public void synpred104_C_fragment()
	{
		EnterRule_synpred104_C_fragment();
		EnterRule("synpred104_C_fragment", 176);
		var retval = new XAstParserRuleReturnScope("synpred104_C_fragment");
		try
		{
			// C.g:383:7: ( lvalue assignment_operator assignment_expression )
			DebugEnterAlt(1);
			// C.g:383:7: lvalue assignment_operator assignment_expression
			{
			DebugLocation(383, 7);
			PushFollow(Follow._lvalue_in_synpred104_C2048);
			lvalue();
			PopFollow();
			if (state.failed) return;
			DebugLocation(383, 14);
			PushFollow(Follow._assignment_operator_in_synpred104_C2050);
			assignment_operator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(383, 34);
			PushFollow(Follow._assignment_expression_in_synpred104_C2052);
			assignment_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred104_C_fragment", 176);
			LeaveRule("synpred104_C_fragment", 176);
			LeaveRule_synpred104_C_fragment();
		}
	}
	// $ANTLR end synpred104_C

	partial void EnterRule_synpred136_C_fragment();
	partial void LeaveRule_synpred136_C_fragment();

	// $ANTLR start synpred136_C
	public void synpred136_C_fragment()
	{
		EnterRule_synpred136_C_fragment();
		EnterRule("synpred136_C_fragment", 208);
		var retval = new XAstParserRuleReturnScope("synpred136_C_fragment");
		try
		{
			// C.g:462:11: ( declaration )
			DebugEnterAlt(1);
			// C.g:462:11: declaration
			{
			DebugLocation(462, 11);
			PushFollow(Follow._declaration_in_synpred136_C2549);
			declaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred136_C_fragment", 208);
			LeaveRule("synpred136_C_fragment", 208);
			LeaveRule_synpred136_C_fragment();
		}
	}
	// $ANTLR end synpred136_C
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA53 dfa53;
	private DFA65 dfa65;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa53 = new DFA53( this, SpecialStateTransition53 );
		dfa65 = new DFA65( this, SpecialStateTransition65 );
	}

	private class DFA53 : DFA
	{
		private const string DFA53_eotS =
			"\x119\xFFFF";
		private const string DFA53_eofS =
			"\x1\xFFFF\x7\x14\x111\xFFFF";
		private const string DFA53_minS =
			"\x1\x4\x7\x18\x5\x4\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6"+
			"\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\xC\x0\xC"+
			"\xFFFF\x30\x0";
		private const string DFA53_maxS =
			"\x1\x64\x7\x63\x5\x64\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF"+
			"\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\xC\x0"+
			"\xC\xFFFF\x30\x0";
		private const string DFA53_acceptS =
			"\x13\xFFFF\x1\x1\x1\x2\x104\xFFFF";
		private const string DFA53_specialS =
			"\xD\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x16\xFFFF\x1\x6\x1\x7\x1"+
			"\x8\x1\x9\x1\xA\x1\xB\x16\xFFFF\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11"+
			"\x16\xFFFF\x1\x12\x1\x13\x1\x14\x1\x15\x1\x16\x1\x17\x16\xFFFF\x1\x18"+
			"\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x16\xFFFF\x1\x1E\x1\x1F\x1\x20\x1"+
			"\x21\x1\x22\x1\x23\x16\xFFFF\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28\x1\x29"+
			"\x16\xFFFF\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1"+
			"\x32\x1\x33\x1\x34\x1\x35\xC\xFFFF\x1\x36\x1\x37\x1\x38\x1\x39\x1\x3A"+
			"\x1\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x1\x40\x1\x41\x1\x42\x1\x43\x1\x44"+
			"\x1\x45\x1\x46\x1\x47\x1\x48\x1\x49\x1\x4A\x1\x4B\x1\x4C\x1\x4D\x1\x4E"+
			"\x1\x4F\x1\x50\x1\x51\x1\x52\x1\x53\x1\x54\x1\x55\x1\x56\x1\x57\x1\x58"+
			"\x1\x59\x1\x5A\x1\x5B\x1\x5C\x1\x5D\x1\x5E\x1\x5F\x1\x60\x1\x61\x1\x62"+
			"\x1\x63\x1\x64\x1\x65}>";
		private static readonly string[] DFA53_transitionS =
			{
				"\x1\x5\x1\xFFFF\x1\x4\x2\xFFFF\x1\x7\x1\xFFFF\x1\x2\x1\xFFFF\x1\x1\x4"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x6\x2\xFFFF\x1\xB\x4\xFFFF\x1\xB\x1\xFFFF\x1"+
				"\x8\x1\xFFFF\x1\xB\x1\xFFFF\x1\xB\x1\x9\x2\xFFFF\x1\xB\x1\xA\x2D\xFFFF"+
				"\x1\xC\xE\xFFFF\x1\xB",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\xE\x2\x14\x1\x13\x1\x14\x1\x11\x1\x13"+
				"\x2\x14\x1\x12\x1\x13\x1\x10\x1\xF\x1\xFFFF\x1\x14\x1\x13\x4\x14\x1"+
				"\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\xD\x2\x14\x1\x13\x21\xFFFF"+
				"\x1\x14\x1\x13\x2\x14",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\x2A\x2\x14\x1\x13\x1\x14\x1\x2D\x1"+
				"\x13\x2\x14\x1\x2E\x1\x13\x1\x2C\x1\x2B\x1\xFFFF\x1\x14\x1\x13\x4\x14"+
				"\x1\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\x29\x2\x14\x1\x13\x21"+
				"\xFFFF\x1\x14\x1\x13\x2\x14",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\x46\x2\x14\x1\x13\x1\x14\x1\x49\x1"+
				"\x13\x2\x14\x1\x4A\x1\x13\x1\x48\x1\x47\x1\xFFFF\x1\x14\x1\x13\x4\x14"+
				"\x1\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\x45\x2\x14\x1\x13\x21"+
				"\xFFFF\x1\x14\x1\x13\x2\x14",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\x62\x2\x14\x1\x13\x1\x14\x1\x65\x1"+
				"\x13\x2\x14\x1\x66\x1\x13\x1\x64\x1\x63\x1\xFFFF\x1\x14\x1\x13\x4\x14"+
				"\x1\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\x61\x2\x14\x1\x13\x21"+
				"\xFFFF\x1\x14\x1\x13\x2\x14",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\x7E\x2\x14\x1\x13\x1\x14\x1\x81\x1"+
				"\x13\x2\x14\x1\x82\x1\x13\x1\x80\x1\x7F\x1\xFFFF\x1\x14\x1\x13\x4\x14"+
				"\x1\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\x7D\x2\x14\x1\x13\x21"+
				"\xFFFF\x1\x14\x1\x13\x2\x14",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\x9A\x2\x14\x1\x13\x1\x14\x1\x9D\x1"+
				"\x13\x2\x14\x1\x9E\x1\x13\x1\x9C\x1\x9B\x1\xFFFF\x1\x14\x1\x13\x4\x14"+
				"\x1\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\x99\x2\x14\x1\x13\x21"+
				"\xFFFF\x1\x14\x1\x13\x2\x14",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\xB6\x2\x14\x1\x13\x1\x14\x1\xB9\x1"+
				"\x13\x2\x14\x1\xBA\x1\x13\x1\xB8\x1\xB7\x1\xFFFF\x1\x14\x1\x13\x4\x14"+
				"\x1\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\xB5\x2\x14\x1\x13\x21"+
				"\xFFFF\x1\x14\x1\x13\x2\x14",
				"\x1\xD5\x1\xFFFF\x1\xD4\x2\xFFFF\x1\xD7\x1\xFFFF\x1\xD2\x1\xFFFF\x1"+
				"\xD1\x4\xFFFF\x1\xD3\x1\xFFFF\x1\xD6\x2\xFFFF\x1\xDB\x4\xFFFF\x1\xDB"+
				"\x1\xFFFF\x1\xD8\x1\xFFFF\x1\xDB\x1\xFFFF\x1\xDB\x1\xD9\x2\xFFFF\x1"+
				"\xDB\x1\xDA\x1A\xFFFF\x2\x14\x3\xFFFF\x1\x14\x1\xFFFF\x1\x14\x1\xFFFF"+
				"\x1\x14\x3\xFFFF\x2\x14\x2\xFFFF\x2\x14\x1\xDC\x1\xFFFF\x1\x14\x2\xFFFF"+
				"\x4\x14\x6\xFFFF\x1\xDB",
				"\x1\xED\x1\xFFFF\x1\xEC\x2\xFFFF\x1\xEF\x1\xFFFF\x1\xEA\x1\xFFFF\x1"+
				"\xE9\x4\xFFFF\x1\xEB\x1\xFFFF\x1\xEE\x2\xFFFF\x1\xF3\x4\xFFFF\x1\xF3"+
				"\x1\xFFFF\x1\xF0\x1\xFFFF\x1\xF3\x1\xFFFF\x1\xF3\x1\xF1\x2\xFFFF\x1"+
				"\xF3\x1\xF2\x2D\xFFFF\x1\xF4\xE\xFFFF\x1\xF3",
				"\x1\xF9\x1\xFFFF\x1\xF8\x2\xFFFF\x1\xFB\x1\xFFFF\x1\xF6\x1\xFFFF\x1"+
				"\xF5\x4\xFFFF\x1\xF7\x1\xFFFF\x1\xFA\x2\xFFFF\x1\xFF\x4\xFFFF\x1\xFF"+
				"\x1\xFFFF\x1\xFC\x1\xFFFF\x1\xFF\x1\xFFFF\x1\xFF\x1\xFD\x2\xFFFF\x1"+
				"\xFF\x1\xFE\x2D\xFFFF\x1\x100\xE\xFFFF\x1\xFF",
				"\x1\x106\x1\xFFFF\x1\x105\x2\xFFFF\x1\x108\x1\xFFFF\x1\x103\x1\xFFFF"+
				"\x1\x102\x4\xFFFF\x1\x104\x1\xFFFF\x1\x107\x2\xFFFF\x1\x10B\x4\xFFFF"+
				"\x1\x10B\x1\xFFFF\x1\x101\x1\xFFFF\x1\x10B\x1\xFFFF\x1\x10B\x1\x109"+
				"\x2\xFFFF\x1\x10B\x1\x10A\x2D\xFFFF\x1\x10C\xE\xFFFF\x1\x10B",
				"\x1\x112\x1\xFFFF\x1\x111\x2\xFFFF\x1\x114\x1\xFFFF\x1\x10F\x1\xFFFF"+
				"\x1\x10E\x4\xFFFF\x1\x110\x1\xFFFF\x1\x113\x2\xFFFF\x1\x117\x4\xFFFF"+
				"\x1\x117\x1\xFFFF\x1\x10D\x1\xFFFF\x1\x117\x1\xFFFF\x1\x117\x1\x115"+
				"\x2\xFFFF\x1\x117\x1\x116\x2D\xFFFF\x1\x118\xE\xFFFF\x1\x117",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA53_eot = DFA.UnpackEncodedString(DFA53_eotS);
		private static readonly short[] DFA53_eof = DFA.UnpackEncodedString(DFA53_eofS);
		private static readonly char[] DFA53_min = DFA.UnpackEncodedStringToUnsignedChars(DFA53_minS);
		private static readonly char[] DFA53_max = DFA.UnpackEncodedStringToUnsignedChars(DFA53_maxS);
		private static readonly short[] DFA53_accept = DFA.UnpackEncodedString(DFA53_acceptS);
		private static readonly short[] DFA53_special = DFA.UnpackEncodedString(DFA53_specialS);
		private static readonly short[][] DFA53_transition;

		static DFA53()
		{
			int numStates = DFA53_transitionS.Length;
			DFA53_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA53_transition[i] = DFA.UnpackEncodedString(DFA53_transitionS[i]);
			}
		}

		public DFA53( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 53;
			this.eot = DFA53_eot;
			this.eof = DFA53_eof;
			this.min = DFA53_min;
			this.max = DFA53_max;
			this.accept = DFA53_accept;
			this.special = DFA53_special;
			this.transition = DFA53_transition;
		}

		public override string Description { get { return "382:1: assignment_expression : ( lvalue assignment_operator assignment_expression | conditional_expression );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition53(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA53_13 = input.LA(1);


				int index53_13 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_13);
				if (s >= 0) return s;
				break;

			case 1:
				int LA53_14 = input.LA(1);


				int index53_14 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_14);
				if (s >= 0) return s;
				break;

			case 2:
				int LA53_15 = input.LA(1);


				int index53_15 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_15);
				if (s >= 0) return s;
				break;

			case 3:
				int LA53_16 = input.LA(1);


				int index53_16 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_16);
				if (s >= 0) return s;
				break;

			case 4:
				int LA53_17 = input.LA(1);


				int index53_17 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_17);
				if (s >= 0) return s;
				break;

			case 5:
				int LA53_18 = input.LA(1);


				int index53_18 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_18);
				if (s >= 0) return s;
				break;

			case 6:
				int LA53_41 = input.LA(1);


				int index53_41 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_41);
				if (s >= 0) return s;
				break;

			case 7:
				int LA53_42 = input.LA(1);


				int index53_42 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_42);
				if (s >= 0) return s;
				break;

			case 8:
				int LA53_43 = input.LA(1);


				int index53_43 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_43);
				if (s >= 0) return s;
				break;

			case 9:
				int LA53_44 = input.LA(1);


				int index53_44 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_44);
				if (s >= 0) return s;
				break;

			case 10:
				int LA53_45 = input.LA(1);


				int index53_45 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_45);
				if (s >= 0) return s;
				break;

			case 11:
				int LA53_46 = input.LA(1);


				int index53_46 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_46);
				if (s >= 0) return s;
				break;

			case 12:
				int LA53_69 = input.LA(1);


				int index53_69 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_69);
				if (s >= 0) return s;
				break;

			case 13:
				int LA53_70 = input.LA(1);


				int index53_70 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_70);
				if (s >= 0) return s;
				break;

			case 14:
				int LA53_71 = input.LA(1);


				int index53_71 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_71);
				if (s >= 0) return s;
				break;

			case 15:
				int LA53_72 = input.LA(1);


				int index53_72 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_72);
				if (s >= 0) return s;
				break;

			case 16:
				int LA53_73 = input.LA(1);


				int index53_73 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_73);
				if (s >= 0) return s;
				break;

			case 17:
				int LA53_74 = input.LA(1);


				int index53_74 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_74);
				if (s >= 0) return s;
				break;

			case 18:
				int LA53_97 = input.LA(1);


				int index53_97 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_97);
				if (s >= 0) return s;
				break;

			case 19:
				int LA53_98 = input.LA(1);


				int index53_98 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_98);
				if (s >= 0) return s;
				break;

			case 20:
				int LA53_99 = input.LA(1);


				int index53_99 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_99);
				if (s >= 0) return s;
				break;

			case 21:
				int LA53_100 = input.LA(1);


				int index53_100 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_100);
				if (s >= 0) return s;
				break;

			case 22:
				int LA53_101 = input.LA(1);


				int index53_101 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_101);
				if (s >= 0) return s;
				break;

			case 23:
				int LA53_102 = input.LA(1);


				int index53_102 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_102);
				if (s >= 0) return s;
				break;

			case 24:
				int LA53_125 = input.LA(1);


				int index53_125 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_125);
				if (s >= 0) return s;
				break;

			case 25:
				int LA53_126 = input.LA(1);


				int index53_126 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_126);
				if (s >= 0) return s;
				break;

			case 26:
				int LA53_127 = input.LA(1);


				int index53_127 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_127);
				if (s >= 0) return s;
				break;

			case 27:
				int LA53_128 = input.LA(1);


				int index53_128 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_128);
				if (s >= 0) return s;
				break;

			case 28:
				int LA53_129 = input.LA(1);


				int index53_129 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_129);
				if (s >= 0) return s;
				break;

			case 29:
				int LA53_130 = input.LA(1);


				int index53_130 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_130);
				if (s >= 0) return s;
				break;

			case 30:
				int LA53_153 = input.LA(1);


				int index53_153 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_153);
				if (s >= 0) return s;
				break;

			case 31:
				int LA53_154 = input.LA(1);


				int index53_154 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_154);
				if (s >= 0) return s;
				break;

			case 32:
				int LA53_155 = input.LA(1);


				int index53_155 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_155);
				if (s >= 0) return s;
				break;

			case 33:
				int LA53_156 = input.LA(1);


				int index53_156 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_156);
				if (s >= 0) return s;
				break;

			case 34:
				int LA53_157 = input.LA(1);


				int index53_157 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_157);
				if (s >= 0) return s;
				break;

			case 35:
				int LA53_158 = input.LA(1);


				int index53_158 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_158);
				if (s >= 0) return s;
				break;

			case 36:
				int LA53_181 = input.LA(1);


				int index53_181 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_181);
				if (s >= 0) return s;
				break;

			case 37:
				int LA53_182 = input.LA(1);


				int index53_182 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_182);
				if (s >= 0) return s;
				break;

			case 38:
				int LA53_183 = input.LA(1);


				int index53_183 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_183);
				if (s >= 0) return s;
				break;

			case 39:
				int LA53_184 = input.LA(1);


				int index53_184 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_184);
				if (s >= 0) return s;
				break;

			case 40:
				int LA53_185 = input.LA(1);


				int index53_185 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_185);
				if (s >= 0) return s;
				break;

			case 41:
				int LA53_186 = input.LA(1);


				int index53_186 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_186);
				if (s >= 0) return s;
				break;

			case 42:
				int LA53_209 = input.LA(1);


				int index53_209 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_209);
				if (s >= 0) return s;
				break;

			case 43:
				int LA53_210 = input.LA(1);


				int index53_210 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_210);
				if (s >= 0) return s;
				break;

			case 44:
				int LA53_211 = input.LA(1);


				int index53_211 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_211);
				if (s >= 0) return s;
				break;

			case 45:
				int LA53_212 = input.LA(1);


				int index53_212 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_212);
				if (s >= 0) return s;
				break;

			case 46:
				int LA53_213 = input.LA(1);


				int index53_213 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_213);
				if (s >= 0) return s;
				break;

			case 47:
				int LA53_214 = input.LA(1);


				int index53_214 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_214);
				if (s >= 0) return s;
				break;

			case 48:
				int LA53_215 = input.LA(1);


				int index53_215 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_215);
				if (s >= 0) return s;
				break;

			case 49:
				int LA53_216 = input.LA(1);


				int index53_216 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_216);
				if (s >= 0) return s;
				break;

			case 50:
				int LA53_217 = input.LA(1);


				int index53_217 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_217);
				if (s >= 0) return s;
				break;

			case 51:
				int LA53_218 = input.LA(1);


				int index53_218 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_218);
				if (s >= 0) return s;
				break;

			case 52:
				int LA53_219 = input.LA(1);


				int index53_219 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_219);
				if (s >= 0) return s;
				break;

			case 53:
				int LA53_220 = input.LA(1);


				int index53_220 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_220);
				if (s >= 0) return s;
				break;

			case 54:
				int LA53_233 = input.LA(1);


				int index53_233 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_233);
				if (s >= 0) return s;
				break;

			case 55:
				int LA53_234 = input.LA(1);


				int index53_234 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_234);
				if (s >= 0) return s;
				break;

			case 56:
				int LA53_235 = input.LA(1);


				int index53_235 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_235);
				if (s >= 0) return s;
				break;

			case 57:
				int LA53_236 = input.LA(1);


				int index53_236 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_236);
				if (s >= 0) return s;
				break;

			case 58:
				int LA53_237 = input.LA(1);


				int index53_237 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_237);
				if (s >= 0) return s;
				break;

			case 59:
				int LA53_238 = input.LA(1);


				int index53_238 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_238);
				if (s >= 0) return s;
				break;

			case 60:
				int LA53_239 = input.LA(1);


				int index53_239 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_239);
				if (s >= 0) return s;
				break;

			case 61:
				int LA53_240 = input.LA(1);


				int index53_240 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_240);
				if (s >= 0) return s;
				break;

			case 62:
				int LA53_241 = input.LA(1);


				int index53_241 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_241);
				if (s >= 0) return s;
				break;

			case 63:
				int LA53_242 = input.LA(1);


				int index53_242 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_242);
				if (s >= 0) return s;
				break;

			case 64:
				int LA53_243 = input.LA(1);


				int index53_243 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_243);
				if (s >= 0) return s;
				break;

			case 65:
				int LA53_244 = input.LA(1);


				int index53_244 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_244);
				if (s >= 0) return s;
				break;

			case 66:
				int LA53_245 = input.LA(1);


				int index53_245 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_245);
				if (s >= 0) return s;
				break;

			case 67:
				int LA53_246 = input.LA(1);


				int index53_246 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_246);
				if (s >= 0) return s;
				break;

			case 68:
				int LA53_247 = input.LA(1);


				int index53_247 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_247);
				if (s >= 0) return s;
				break;

			case 69:
				int LA53_248 = input.LA(1);


				int index53_248 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_248);
				if (s >= 0) return s;
				break;

			case 70:
				int LA53_249 = input.LA(1);


				int index53_249 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_249);
				if (s >= 0) return s;
				break;

			case 71:
				int LA53_250 = input.LA(1);


				int index53_250 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_250);
				if (s >= 0) return s;
				break;

			case 72:
				int LA53_251 = input.LA(1);


				int index53_251 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_251);
				if (s >= 0) return s;
				break;

			case 73:
				int LA53_252 = input.LA(1);


				int index53_252 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_252);
				if (s >= 0) return s;
				break;

			case 74:
				int LA53_253 = input.LA(1);


				int index53_253 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_253);
				if (s >= 0) return s;
				break;

			case 75:
				int LA53_254 = input.LA(1);


				int index53_254 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_254);
				if (s >= 0) return s;
				break;

			case 76:
				int LA53_255 = input.LA(1);


				int index53_255 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_255);
				if (s >= 0) return s;
				break;

			case 77:
				int LA53_256 = input.LA(1);


				int index53_256 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_256);
				if (s >= 0) return s;
				break;

			case 78:
				int LA53_257 = input.LA(1);


				int index53_257 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_257);
				if (s >= 0) return s;
				break;

			case 79:
				int LA53_258 = input.LA(1);


				int index53_258 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_258);
				if (s >= 0) return s;
				break;

			case 80:
				int LA53_259 = input.LA(1);


				int index53_259 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_259);
				if (s >= 0) return s;
				break;

			case 81:
				int LA53_260 = input.LA(1);


				int index53_260 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_260);
				if (s >= 0) return s;
				break;

			case 82:
				int LA53_261 = input.LA(1);


				int index53_261 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_261);
				if (s >= 0) return s;
				break;

			case 83:
				int LA53_262 = input.LA(1);


				int index53_262 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_262);
				if (s >= 0) return s;
				break;

			case 84:
				int LA53_263 = input.LA(1);


				int index53_263 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_263);
				if (s >= 0) return s;
				break;

			case 85:
				int LA53_264 = input.LA(1);


				int index53_264 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_264);
				if (s >= 0) return s;
				break;

			case 86:
				int LA53_265 = input.LA(1);


				int index53_265 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_265);
				if (s >= 0) return s;
				break;

			case 87:
				int LA53_266 = input.LA(1);


				int index53_266 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_266);
				if (s >= 0) return s;
				break;

			case 88:
				int LA53_267 = input.LA(1);


				int index53_267 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_267);
				if (s >= 0) return s;
				break;

			case 89:
				int LA53_268 = input.LA(1);


				int index53_268 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_268);
				if (s >= 0) return s;
				break;

			case 90:
				int LA53_269 = input.LA(1);


				int index53_269 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_269);
				if (s >= 0) return s;
				break;

			case 91:
				int LA53_270 = input.LA(1);


				int index53_270 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_270);
				if (s >= 0) return s;
				break;

			case 92:
				int LA53_271 = input.LA(1);


				int index53_271 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_271);
				if (s >= 0) return s;
				break;

			case 93:
				int LA53_272 = input.LA(1);


				int index53_272 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_272);
				if (s >= 0) return s;
				break;

			case 94:
				int LA53_273 = input.LA(1);


				int index53_273 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_273);
				if (s >= 0) return s;
				break;

			case 95:
				int LA53_274 = input.LA(1);


				int index53_274 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_274);
				if (s >= 0) return s;
				break;

			case 96:
				int LA53_275 = input.LA(1);


				int index53_275 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_275);
				if (s >= 0) return s;
				break;

			case 97:
				int LA53_276 = input.LA(1);


				int index53_276 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_276);
				if (s >= 0) return s;
				break;

			case 98:
				int LA53_277 = input.LA(1);


				int index53_277 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_277);
				if (s >= 0) return s;
				break;

			case 99:
				int LA53_278 = input.LA(1);


				int index53_278 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_278);
				if (s >= 0) return s;
				break;

			case 100:
				int LA53_279 = input.LA(1);


				int index53_279 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_279);
				if (s >= 0) return s;
				break;

			case 101:
				int LA53_280 = input.LA(1);


				int index53_280 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_280);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 53, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA65 : DFA
	{
		private const string DFA65_eotS =
			"\x4F\xFFFF";
		private const string DFA65_eofS =
			"\x4F\xFFFF";
		private const string DFA65_minS =
			"\x1\x4\x1\xD\x29\xFFFF\x1\x0\x5\xFFFF\x1\x0\xE\xFFFF\x1\x0\xE\xFFFF";
		private const string DFA65_maxS =
			"\x1\x64\x1\x62\x29\xFFFF\x1\x0\x5\xFFFF\x1\x0\xE\xFFFF\x1\x0\xE\xFFFF";
		private const string DFA65_acceptS =
			"\x2\xFFFF\x1\x2\x18\xFFFF\x1\x1\x33\xFFFF";
		private const string DFA65_specialS =
			"\x2B\xFFFF\x1\x0\x5\xFFFF\x1\x1\xE\xFFFF\x1\x2\xE\xFFFF}>";
		private static readonly string[] DFA65_transitionS =
			{
				"\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x1\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1"+
				"\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x7\xFFFF\x1\x2\xF\xFFFF"+
				"\x1\x1B\x2\x2\x2\x1B\x3\x2\x1\x1B\x1\xFFFF\x3\x1B\x3\x2\x3\x1B\x1\x2"+
				"\x2\x1B\x1\x2\x2\x1B\x1\x2\x5\x1B\x2\x2\x3\xFFFF\x2\x2",
				"\x1\x1B\xA\xFFFF\x6\x2\x1\x2B\x1\xFFFF\x1\x31\xA\x2\x1\xFFFF\x3\x2"+
				"\x1\x40\xC\x2\x1\xFFFF\x2\x2\x1\x1B\x2\xFFFF\x2\x1B\x3\xFFFF\x1\x1B"+
				"\x1\xFFFF\x3\x1B\x3\xFFFF\x3\x1B\x1\xFFFF\x2\x1B\x1\xFFFF\x2\x1B\x2"+
				"\xFFFF\x4\x1B\x2\xFFFF\x3\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA65_eot = DFA.UnpackEncodedString(DFA65_eotS);
		private static readonly short[] DFA65_eof = DFA.UnpackEncodedString(DFA65_eofS);
		private static readonly char[] DFA65_min = DFA.UnpackEncodedStringToUnsignedChars(DFA65_minS);
		private static readonly char[] DFA65_max = DFA.UnpackEncodedStringToUnsignedChars(DFA65_maxS);
		private static readonly short[] DFA65_accept = DFA.UnpackEncodedString(DFA65_acceptS);
		private static readonly short[] DFA65_special = DFA.UnpackEncodedString(DFA65_specialS);
		private static readonly short[][] DFA65_transition;

		static DFA65()
		{
			int numStates = DFA65_transitionS.Length;
			DFA65_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA65_transition[i] = DFA.UnpackEncodedString(DFA65_transitionS[i]);
			}
		}

		public DFA65( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 65;
			this.eot = DFA65_eot;
			this.eof = DFA65_eof;
			this.min = DFA65_min;
			this.max = DFA65_max;
			this.accept = DFA65_accept;
			this.special = DFA65_special;
			this.transition = DFA65_transition;
		}

		public override string Description { get { return "()* loopback of 462:11: ( declaration )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition65(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA65_43 = input.LA(1);


				int index65_43 = input.Index;
				input.Rewind();
				s = -1;
				if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred136_C_fragment)))) {s = 27;}

				else if ((true)) {s = 2;}


				input.Seek(index65_43);
				if (s >= 0) return s;
				break;

			case 1:
				int LA65_49 = input.LA(1);


				int index65_49 = input.Index;
				input.Rewind();
				s = -1;
				if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred136_C_fragment)))) {s = 27;}

				else if ((true)) {s = 2;}


				input.Seek(index65_49);
				if (s >= 0) return s;
				break;

			case 2:
				int LA65_64 = input.LA(1);


				int index65_64 = input.Index;
				input.Rewind();
				s = -1;
				if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred136_C_fragment)))) {s = 27;}

				else if ((true)) {s = 2;}


				input.Seek(index65_64);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 65, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _external_declaration_in_translation_unit89 = new BitSet(new ulong[]{0x8000000140002002UL,0x3EDB8E8CUL});
		public static readonly BitSet _function_definition_in_external_declaration131 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_external_declaration139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_function_definition167 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _declarator_in_function_definition170 = new BitSet(new ulong[]{0x8000000000002000UL,0xBEDB8E8CUL});
		public static readonly BitSet _declaration_in_function_definition182 = new BitSet(new ulong[]{0x8000000000002000UL,0xBEDB8E8CUL});
		public static readonly BitSet _compound_statement_in_function_definition185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _compound_statement_in_function_definition198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _89_in_declaration238 = new BitSet(new ulong[]{0x8000000140002000UL,0x3CDB8E8CUL});
		public static readonly BitSet _declaration_specifiers_in_declaration240 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _init_declarator_list_in_declaration251 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_declaration253 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_declaration262 = new BitSet(new ulong[]{0x800140002000UL});
		public static readonly BitSet _init_declarator_list_in_declaration264 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_declaration267 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _storage_class_specifier_in_declaration_specifiers290 = new BitSet(new ulong[]{0x8000000000002002UL,0x3CDB8E8CUL});
		public static readonly BitSet _type_specifier_in_declaration_specifiers304 = new BitSet(new ulong[]{0x8000000000002002UL,0x3CDB8E8CUL});
		public static readonly BitSet _type_qualifier_in_declaration_specifiers318 = new BitSet(new ulong[]{0x8000000000002002UL,0x3CDB8E8CUL});
		public static readonly BitSet _init_declarator_in_init_declarator_list346 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_init_declarator_list349 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _init_declarator_in_init_declarator_list351 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _declarator_in_init_declarator370 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _52_in_init_declarator373 = new BitSet(new ulong[]{0xCD50942A50UL,0x1080200000UL});
		public static readonly BitSet _initializer_in_init_declarator375 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_type_specifier435 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _66_in_type_specifier443 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_type_specifier451 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_type_specifier459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _80_in_type_specifier467 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _75_in_type_specifier475 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_type_specifier483 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _84_in_type_specifier491 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_type_specifier499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_or_union_specifier_in_type_specifier507 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_specifier_in_type_specifier515 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_id_in_type_specifier523 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_type_id544 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_or_union_in_struct_or_union_specifier580 = new BitSet(new ulong[]{0x2000UL,0x80000000UL});
		public static readonly BitSet _IDENTIFIER_in_struct_or_union_specifier582 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _95_in_struct_or_union_specifier585 = new BitSet(new ulong[]{0x2000UL,0x3C998A8CUL});
		public static readonly BitSet _struct_declaration_list_in_struct_or_union_specifier587 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _99_in_struct_or_union_specifier589 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_or_union_in_struct_or_union_specifier597 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_struct_or_union_specifier599 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_struct_declaration_list641 = new BitSet(new ulong[]{0x2002UL,0x3C998A8CUL});
		public static readonly BitSet _specifier_qualifier_list_in_struct_declaration659 = new BitSet(new ulong[]{0x400140002000UL});
		public static readonly BitSet _struct_declarator_list_in_struct_declaration661 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_struct_declaration663 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_qualifier_in_specifier_qualifier_list682 = new BitSet(new ulong[]{0x2002UL,0x3C998A8CUL});
		public static readonly BitSet _type_specifier_in_specifier_qualifier_list686 = new BitSet(new ulong[]{0x2002UL,0x3C998A8CUL});
		public static readonly BitSet _struct_declarator_in_struct_declarator_list706 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_struct_declarator_list709 = new BitSet(new ulong[]{0x400140002000UL});
		public static readonly BitSet _struct_declarator_in_struct_declarator_list711 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _declarator_in_struct_declarator730 = new BitSet(new ulong[]{0x400000000002UL});
		public static readonly BitSet _46_in_struct_declarator733 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _constant_expression_in_struct_declarator735 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _46_in_struct_declarator745 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _constant_expression_in_struct_declarator747 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _73_in_enum_specifier771 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _95_in_enum_specifier773 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _enumerator_list_in_enum_specifier775 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _99_in_enum_specifier777 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _73_in_enum_specifier785 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_enum_specifier787 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _95_in_enum_specifier789 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _enumerator_list_in_enum_specifier791 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _99_in_enum_specifier793 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _73_in_enum_specifier801 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_enum_specifier803 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumerator_in_enumerator_list820 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_enumerator_list823 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _enumerator_in_enumerator_list825 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _IDENTIFIER_in_enumerator844 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _52_in_enumerator847 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _constant_expression_in_enumerator849 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_declarator893 = new BitSet(new ulong[]{0x40002000UL});
		public static readonly BitSet _direct_declarator_in_declarator896 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_declarator904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_direct_declarator925 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _30_in_direct_declarator951 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _declarator_in_direct_declarator953 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_direct_declarator955 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _declarator_suffix_in_direct_declarator975 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _59_in_declarator_suffix995 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _constant_expression_in_declarator_suffix997 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_declarator_suffix999 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_declarator_suffix1009 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_declarator_suffix1011 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_declarator_suffix1021 = new BitSet(new ulong[]{0x8000000000002000UL,0x3CDB8E8CUL});
		public static readonly BitSet _parameter_type_list_in_declarator_suffix1023 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_declarator_suffix1025 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_declarator_suffix1035 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _identifier_list_in_declarator_suffix1037 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_declarator_suffix1039 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_declarator_suffix1049 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_declarator_suffix1051 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_pointer1068 = new BitSet(new ulong[]{0x0UL,0x20000008UL});
		public static readonly BitSet _type_qualifier_in_pointer1070 = new BitSet(new ulong[]{0x100000002UL,0x20000008UL});
		public static readonly BitSet _pointer_in_pointer1073 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_pointer1082 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _pointer_in_pointer1084 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_pointer1092 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameter_list_in_parameter_type_list1109 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_parameter_type_list1112 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _43_in_parameter_type_list1114 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameter_declaration_in_parameter_list1133 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_parameter_list1136 = new BitSet(new ulong[]{0x8000000000002000UL,0x3CDB8E8CUL});
		public static readonly BitSet _parameter_declaration_in_parameter_list1138 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _declaration_specifiers_in_parameter_declaration1157 = new BitSet(new ulong[]{0x800000140002002UL});
		public static readonly BitSet _declarator_in_parameter_declaration1160 = new BitSet(new ulong[]{0x800000140002002UL});
		public static readonly BitSet _abstract_declarator_in_parameter_declaration1162 = new BitSet(new ulong[]{0x800000140002002UL});
		public static readonly BitSet _IDENTIFIER_in_identifier_list1181 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_identifier_list1184 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_identifier_list1186 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _specifier_qualifier_list_in_type_name1205 = new BitSet(new ulong[]{0x800000140000002UL});
		public static readonly BitSet _abstract_declarator_in_type_name1207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_abstract_declarator1225 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _direct_abstract_declarator_in_abstract_declarator1227 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _direct_abstract_declarator_in_abstract_declarator1236 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_direct_abstract_declarator1255 = new BitSet(new ulong[]{0x800000140000000UL});
		public static readonly BitSet _abstract_declarator_in_direct_abstract_declarator1257 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_direct_abstract_declarator1259 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _abstract_declarator_suffix_in_direct_abstract_declarator1263 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _abstract_declarator_suffix_in_direct_abstract_declarator1267 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _59_in_abstract_declarator_suffix1285 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_abstract_declarator_suffix1287 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_abstract_declarator_suffix1295 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _constant_expression_in_abstract_declarator_suffix1297 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_abstract_declarator_suffix1299 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_abstract_declarator_suffix1307 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_abstract_declarator_suffix1309 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_abstract_declarator_suffix1317 = new BitSet(new ulong[]{0x8000000000002000UL,0x3CDB8E8CUL});
		public static readonly BitSet _parameter_type_list_in_abstract_declarator_suffix1319 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_abstract_declarator_suffix1321 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignment_expression_in_initializer1342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _95_in_initializer1350 = new BitSet(new ulong[]{0xCD50942A50UL,0x1080200000UL});
		public static readonly BitSet _initializer_list_in_initializer1352 = new BitSet(new ulong[]{0x2000000000UL,0x800000000UL});
		public static readonly BitSet _37_in_initializer1354 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _99_in_initializer1357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _initializer_in_initializer_list1374 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_initializer_list1377 = new BitSet(new ulong[]{0xCD50942A50UL,0x1080200000UL});
		public static readonly BitSet _initializer_in_initializer_list1379 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _assignment_expression_in_argument_expression_list1402 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_argument_expression_list1405 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _assignment_expression_in_argument_expression_list1407 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression1427 = new BitSet(new ulong[]{0x4400000002UL});
		public static readonly BitSet _34_in_additive_expression1431 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression1433 = new BitSet(new ulong[]{0x4400000002UL});
		public static readonly BitSet _38_in_additive_expression1437 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression1439 = new BitSet(new ulong[]{0x4400000002UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1459 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _32_in_multiplicative_expression1463 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1465 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _44_in_multiplicative_expression1469 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1471 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _25_in_multiplicative_expression1475 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1477 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _30_in_cast_expression1496 = new BitSet(new ulong[]{0x2000UL,0x3C998A8CUL});
		public static readonly BitSet _type_name_in_cast_expression1498 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_cast_expression1500 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _cast_expression_in_cast_expression1502 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expression_in_cast_expression1510 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _postfix_expression_in_unary_expression1527 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _35_in_unary_expression1535 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _unary_expression_in_unary_expression1537 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _39_in_unary_expression1545 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _unary_expression_in_unary_expression1547 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_operator_in_unary_expression1555 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _cast_expression_in_unary_expression1557 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _85_in_unary_expression1565 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _unary_expression_in_unary_expression1567 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _85_in_unary_expression1575 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_unary_expression1577 = new BitSet(new ulong[]{0x2000UL,0x3C998A8CUL});
		public static readonly BitSet _type_name_in_unary_expression1579 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_unary_expression1581 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_expression_in_postfix_expression1600 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _59_in_postfix_expression1614 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _expression_in_postfix_expression1616 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_postfix_expression1618 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _30_in_postfix_expression1632 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_postfix_expression1634 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _30_in_postfix_expression1648 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _argument_expression_list_in_postfix_expression1650 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_postfix_expression1652 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _42_in_postfix_expression1666 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_postfix_expression1668 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _41_in_postfix_expression1682 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_postfix_expression1684 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _35_in_postfix_expression1698 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _39_in_postfix_expression1712 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _IDENTIFIER_in_primary_expression1797 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_in_primary_expression1805 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_primary_expression1813 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _expression_in_primary_expression1815 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_primary_expression1817 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _hex_literal_in_constant1836 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _octal_literal_in_constant1846 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _decimal_literal_in_constant1856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _character_literal_in_constant1866 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_literal_in_constant1876 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _floating_point_literal_in_constant1886 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HEX_LITERAL_in_hex_literal1903 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OCTAL_LITERAL_in_octal_literal1920 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECIMAL_LITERAL_in_decimal_literal1937 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHARACTER_LITERAL_in_character_literal1954 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_string_literal1971 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLOATING_POINT_LITERAL_in_floating_point_literal1988 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignment_expression_in_expression2007 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_expression2010 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _assignment_expression_in_expression2012 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _conditional_expression_in_constant_expression2031 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_assignment_expression2048 = new BitSet(new ulong[]{0x4214211224000000UL,0x200000000UL});
		public static readonly BitSet _assignment_operator_in_assignment_expression2050 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _assignment_expression_in_assignment_expression2052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditional_expression_in_assignment_expression2060 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expression_in_lvalue2081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logical_or_expression_in_conditional_expression2195 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _58_in_conditional_expression2198 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _expression_in_conditional_expression2200 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_conditional_expression2202 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _conditional_expression_in_conditional_expression2204 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logical_and_expression_in_logical_or_expression2223 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _98_in_logical_or_expression2226 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _logical_and_expression_in_logical_or_expression2228 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _inclusive_or_expression_in_logical_and_expression2247 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _27_in_logical_and_expression2250 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _inclusive_or_expression_in_logical_and_expression2252 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _exclusive_or_expression_in_inclusive_or_expression2271 = new BitSet(new ulong[]{0x2UL,0x100000000UL});
		public static readonly BitSet _96_in_inclusive_or_expression2274 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _exclusive_or_expression_in_inclusive_or_expression2276 = new BitSet(new ulong[]{0x2UL,0x100000000UL});
		public static readonly BitSet _and_expression_in_exclusive_or_expression2295 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _61_in_exclusive_or_expression2298 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _and_expression_in_exclusive_or_expression2300 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _equality_expression_in_and_expression2319 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _28_in_and_expression2322 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _equality_expression_in_and_expression2324 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _relational_expression_in_equality_expression2342 = new BitSet(new ulong[]{0x20000001000002UL});
		public static readonly BitSet _set_in_equality_expression2345 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _relational_expression_in_equality_expression2351 = new BitSet(new ulong[]{0x20000001000002UL});
		public static readonly BitSet _shift_expression_in_relational_expression2370 = new BitSet(new ulong[]{0xC9000000000002UL});
		public static readonly BitSet _set_in_relational_expression2373 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _shift_expression_in_relational_expression2383 = new BitSet(new ulong[]{0xC9000000000002UL});
		public static readonly BitSet _additive_expression_in_shift_expression2402 = new BitSet(new ulong[]{0x102000000000002UL});
		public static readonly BitSet _set_in_shift_expression2405 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _additive_expression_in_shift_expression2411 = new BitSet(new ulong[]{0x102000000000002UL});
		public static readonly BitSet _labeled_statement_in_statement2432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _compound_statement_in_statement2440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_statement_in_statement2448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selection_statement_in_statement2456 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _iteration_statement_in_statement2464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _jump_statement_in_statement2472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_labeled_statement2489 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_labeled_statement2491 = new BitSet(new ulong[]{0x80CD50942A50UL,0x10C1247073UL});
		public static readonly BitSet _statement_in_labeled_statement2493 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _65_in_labeled_statement2501 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _constant_expression_in_labeled_statement2503 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_labeled_statement2505 = new BitSet(new ulong[]{0x80CD50942A50UL,0x10C1247073UL});
		public static readonly BitSet _statement_in_labeled_statement2507 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _69_in_labeled_statement2515 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_labeled_statement2517 = new BitSet(new ulong[]{0x80CD50942A50UL,0x10C1247073UL});
		public static readonly BitSet _statement_in_labeled_statement2519 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _95_in_compound_statement2547 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x18FFFFFEFFUL});
		public static readonly BitSet _declaration_in_compound_statement2549 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x18FFFFFEFFUL});
		public static readonly BitSet _statement_list_in_compound_statement2552 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _99_in_compound_statement2555 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_statement_list2572 = new BitSet(new ulong[]{0x80CD50942A52UL,0x10C1247073UL});
		public static readonly BitSet _47_in_expression_statement2590 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_statement2598 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_expression_statement2600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _78_in_selection_statement2617 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_selection_statement2619 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _expression_in_selection_statement2621 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_selection_statement2623 = new BitSet(new ulong[]{0x80CD50942A50UL,0x10C1247073UL});
		public static readonly BitSet _statement_in_selection_statement2625 = new BitSet(new ulong[]{0x2UL,0x100UL});
		public static readonly BitSet _72_in_selection_statement2640 = new BitSet(new ulong[]{0x80CD50942A50UL,0x10C1247073UL});
		public static readonly BitSet _statement_in_selection_statement2642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_selection_statement2652 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_selection_statement2654 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _expression_in_selection_statement2656 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_selection_statement2658 = new BitSet(new ulong[]{0x80CD50942A50UL,0x10C1247073UL});
		public static readonly BitSet _statement_in_selection_statement2660 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _94_in_iteration_statement2677 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_iteration_statement2679 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _expression_in_iteration_statement2681 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_iteration_statement2683 = new BitSet(new ulong[]{0x80CD50942A50UL,0x10C1247073UL});
		public static readonly BitSet _statement_in_iteration_statement2685 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _70_in_iteration_statement2693 = new BitSet(new ulong[]{0x80CD50942A50UL,0x10C1247073UL});
		public static readonly BitSet _statement_in_iteration_statement2695 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_iteration_statement2697 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_iteration_statement2699 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _expression_in_iteration_statement2701 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_iteration_statement2703 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_iteration_statement2705 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _76_in_iteration_statement2713 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_iteration_statement2715 = new BitSet(new ulong[]{0x80CD50942A50UL,0x1000200000UL});
		public static readonly BitSet _expression_statement_in_iteration_statement2717 = new BitSet(new ulong[]{0x80CD50942A50UL,0x1000200000UL});
		public static readonly BitSet _expression_statement_in_iteration_statement2719 = new BitSet(new ulong[]{0xCDD0942A50UL,0x1000200000UL});
		public static readonly BitSet _expression_in_iteration_statement2721 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_iteration_statement2724 = new BitSet(new ulong[]{0x80CD50942A50UL,0x10C1247073UL});
		public static readonly BitSet _statement_in_iteration_statement2726 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _77_in_jump_statement2743 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_jump_statement2745 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2747 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_jump_statement2755 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_jump_statement2765 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_jump_statement2775 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2777 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_jump_statement2785 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _expression_in_jump_statement2787 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred2_C118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred4_C118 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _declarator_in_synpred4_C121 = new BitSet(new ulong[]{0x8000000000002000UL,0xBEDB8E8CUL});
		public static readonly BitSet _declaration_in_synpred4_C123 = new BitSet(new ulong[]{0x8000000000002000UL,0xBEDB8E8CUL});
		public static readonly BitSet _95_in_synpred4_C126 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred5_C167 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred8_C240 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_specifier_in_synpred12_C304 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_specifier_in_synpred35_C686 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_synpred45_C893 = new BitSet(new ulong[]{0x40002000UL});
		public static readonly BitSet _direct_declarator_in_synpred45_C896 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declarator_suffix_in_synpred47_C975 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred50_C1021 = new BitSet(new ulong[]{0x8000000000002000UL,0x3CDB8E8CUL});
		public static readonly BitSet _parameter_type_list_in_synpred50_C1023 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred50_C1025 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred51_C1035 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _identifier_list_in_synpred51_C1037 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred51_C1039 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_qualifier_in_synpred52_C1070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_synpred53_C1073 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_synpred54_C1068 = new BitSet(new ulong[]{0x0UL,0x20000008UL});
		public static readonly BitSet _type_qualifier_in_synpred54_C1070 = new BitSet(new ulong[]{0x100000002UL,0x20000008UL});
		public static readonly BitSet _pointer_in_synpred54_C1073 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_synpred55_C1082 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _pointer_in_synpred55_C1084 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declarator_in_synpred58_C1160 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _abstract_declarator_in_synpred59_C1162 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _direct_abstract_declarator_in_synpred62_C1227 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _abstract_declarator_suffix_in_synpred65_C1267 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred78_C1496 = new BitSet(new ulong[]{0x2000UL,0x3C998A8CUL});
		public static readonly BitSet _type_name_in_synpred78_C1498 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred78_C1500 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _cast_expression_in_synpred78_C1502 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _85_in_synpred83_C1565 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _unary_expression_in_synpred83_C1567 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_synpred104_C2048 = new BitSet(new ulong[]{0x4214211224000000UL,0x200000000UL});
		public static readonly BitSet _assignment_operator_in_synpred104_C2050 = new BitSet(new ulong[]{0xCD50942A50UL,0x1000200000UL});
		public static readonly BitSet _assignment_expression_in_synpred104_C2052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_synpred136_C2549 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
