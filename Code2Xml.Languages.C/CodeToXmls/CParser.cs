using Code2Xml.Core.Antlr;
using System;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C.g 2012-07-25 15:40:43

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;
/** ANSI C ANTLR v3 grammar

Translated from Jutta Degener's 1995 ANSI C yacc grammar by Terence Parr
July 2006.  The lexical rules were taken from the Java grammar.

Jutta says: "In 1985, Jeff Lee published his Yacc grammar (which
is accompanied by a matching Lex specification) for the April 30, 1985 draft
version of the ANSI C standard.  Tom Stockfisch reposted it to net.sources in
1987; that original, as mentioned in the answer to question 17.25 of the
comp.lang.c FAQ, can be ftp'ed from ftp.uu.net,
   file usenet/net.sources/ansi.c.grammar.Z.
I intend to keep this version as close to the current C Standard grammar as
possible; please let me know if you discover discrepancies. Jutta Degener, 1995"

Generally speaking, you need symbol table info to parse C; typedefs
define types and then IDENTIFIERS are either types or plain IDs.  I'm doing
the min necessary here tracking only type names.  This is a good example
of the global scope (called Symbols).  Every rule that declares its usage
of Symbols pushes a new copy on the stack effectively creating a new
symbol scope.  Also note rule declaration declares a rule scope that
lets any invoked rule see isTypedef boolean.  It's much easier than
passing that info down as parameters.  Very clean.  Rule
direct_declarator can then easily determine whether the IDENTIFIER
should be declared as a type name.

I have only tested this on a single file, though it is 3500 lines.

This grammar requires ANTLR v3.0.1 or higher.

Terence Parr
July 2006
*/
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class CParser : Antlr.Runtime.Parser, IAntlrParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "CHARACTER_LITERAL", "COMMENT", "DECIMAL_LITERAL", "EscapeSequence", "Exponent", "FLOATING_POINT_LITERAL", "FloatTypeSuffix", "HEX_LITERAL", "HexDigit", "IDENTIFIER", "IntegerTypeSuffix", "LETTER", "LINE_COMMAND", "LINE_COMMENT", "OCTAL_LITERAL", "OctalEscape", "STRING_LITERAL", "UnicodeEscape", "WS", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'.'", "'...'", "'/'", "'/='", "':'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'['", "']'", "'^'", "'^='", "'__builtin_va_list'", "'auto'", "'break'", "'case'", "'char'", "'const'", "'continue'", "'default'", "'do'", "'double'", "'else'", "'enum'", "'extern'", "'float'", "'for'", "'goto'", "'if'", "'int'", "'long'", "'register'", "'return'", "'short'", "'signed'", "'sizeof'", "'static'", "'struct'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", "'while'", "'{'", "'|'", "'|='", "'||'", "'}'", "'~'"
	};
	public const int EOF=-1;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int CHARACTER_LITERAL=4;
	public const int COMMENT=5;
	public const int DECIMAL_LITERAL=6;
	public const int EscapeSequence=7;
	public const int Exponent=8;
	public const int FLOATING_POINT_LITERAL=9;
	public const int FloatTypeSuffix=10;
	public const int HEX_LITERAL=11;
	public const int HexDigit=12;
	public const int IDENTIFIER=13;
	public const int IntegerTypeSuffix=14;
	public const int LETTER=15;
	public const int LINE_COMMAND=16;
	public const int LINE_COMMENT=17;
	public const int OCTAL_LITERAL=18;
	public const int OctalEscape=19;
	public const int STRING_LITERAL=20;
	public const int UnicodeEscape=21;
	public const int WS=22;

	protected sealed partial class Symbols_scope
	{
		public HashSet<string> types;

		public Symbols_scope(CParser grammar) { OnCreated(grammar); }
		partial void OnCreated(CParser grammar);
	}
	partial void Symbols_scopeInit( Symbols_scope scope );
	partial void Symbols_scopeAfter( Symbols_scope scope );
	protected readonly ListStack<Symbols_scope> Symbols_stack = new ListStack<Symbols_scope>();

	public CParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public CParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[220+1];


		XmlTreeAdaptor treeAdaptor = default(XmlTreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new XmlTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref XmlTreeAdaptor adaptor);

	private XmlTreeAdaptor adaptor;

	public XmlTreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return CParser.tokenNames; } }
	public override string GrammarFileName { get { return "C.g"; } }


		boolean isTypeName(String name) {
			for (int i = Symbols_stack.size()-1; i>=0; i--) {
				Symbols_scope scope = (Symbols_scope)Symbols_stack.get(i);
				if ( scope.types.contains(name) ) {
					return true;
				}
			}
			return false;
		}


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_translation_unit();
	partial void LeaveRule_translation_unit();

	// $ANTLR start "translation_unit"
	// C.g:58:1: translation_unit : ( external_declaration )+ ;
	[GrammarRule("translation_unit")]
	public XAstParserRuleReturnScope translation_unit()
	{
		EnterRule_translation_unit();
		EnterRule("translation_unit", 1);
		var retval = new XAstParserRuleReturnScope("translation_unit");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int translation_unit_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope external_declaration1 = default(XAstParserRuleReturnScope);


		  Symbols_stack.Peek().types =  new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "translation_unit");
		DebugLocation(58, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// C.g:63:2: ( ( external_declaration )+ )
			DebugEnterAlt(1);
			// C.g:63:4: ( external_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(63, 4);
			// C.g:63:4: ( external_declaration )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==IDENTIFIER||LA1_0==30||LA1_0==32||(LA1_0>=63 && LA1_0<=64)||(LA1_0>=67 && LA1_0<=68)||LA1_0==72||(LA1_0>=74 && LA1_0<=76)||(LA1_0>=80 && LA1_0<=82)||(LA1_0>=84 && LA1_0<=85)||(LA1_0>=87 && LA1_0<=88)||(LA1_0>=90 && LA1_0<=94)))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:63:4: external_declaration
					{
					DebugLocation(63, 4);
					PushFollow(Follow._external_declaration_in_translation_unit71);
					external_declaration1=external_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, external_declaration1.Tree, external_declaration1, retval);

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("translation_unit", 1);
			LeaveRule("translation_unit", 1);
			LeaveRule_translation_unit();
			if (state.backtracking > 0) { Memoize(input, 1, translation_unit_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(64, 1);
		} finally { DebugExitRule(GrammarFileName, "translation_unit"); }
		return retval;

	}
	// $ANTLR end "translation_unit"

	partial void EnterRule_external_declaration();
	partial void LeaveRule_external_declaration();

	// $ANTLR start "external_declaration"
	// C.g:80:1: external_declaration options {k=1; } : ( ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition | declaration );
	[GrammarRule("external_declaration")]
	public XAstParserRuleReturnScope external_declaration()
	{
		EnterRule_external_declaration();
		EnterRule("external_declaration", 2);
		var retval = new XAstParserRuleReturnScope("external_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int external_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope function_definition2 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declaration3 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "external_declaration");
		DebugLocation(80, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// C.g:82:2: ( ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition | declaration )
			int alt2=2;
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0==64||LA2_0==75||LA2_0==82||LA2_0==87))
			{
				int LA2_1 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==93))
			{
				int LA2_2 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==67))
			{
				int LA2_3 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==84))
			{
				int LA2_4 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==80))
			{
				int LA2_5 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==81))
			{
				int LA2_6 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==76))
			{
				int LA2_7 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==72))
			{
				int LA2_8 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==85))
			{
				int LA2_9 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==92))
			{
				int LA2_10 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 10, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==63))
			{
				int LA2_11 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==88||LA2_0==91))
			{
				int LA2_12 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 12, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==74))
			{
				int LA2_13 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 13, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==IDENTIFIER))
			{
				int LA2_14 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if (((isTypeName(input.LT(1).getText()))))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 14, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==68||LA2_0==94))
			{
				int LA2_15 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 15, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==32) && (EvaluatePredicate(synpred4_C_fragment)))
			{
				alt2 = 1;
			}
			else if ((LA2_0==30) && (EvaluatePredicate(synpred4_C_fragment)))
			{
				alt2 = 1;
			}
			else if ((LA2_0==90))
			{
				alt2 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:82:4: ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(82, 62);
				PushFollow(Follow._function_definition_in_external_declaration107);
				function_definition2=function_definition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, function_definition2.Tree, function_definition2, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:83:4: declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(83, 4);
				PushFollow(Follow._declaration_in_external_declaration112);
				declaration3=declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration3.Tree, declaration3, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("external_declaration", 2);
			LeaveRule("external_declaration", 2);
			LeaveRule_external_declaration();
			if (state.backtracking > 0) { Memoize(input, 2, external_declaration_StartIndex); }

		}
		DebugLocation(84, 1);
		} finally { DebugExitRule(GrammarFileName, "external_declaration"); }
		return retval;

	}
	// $ANTLR end "external_declaration"

	partial void EnterRule_function_definition();
	partial void LeaveRule_function_definition();

	// $ANTLR start "function_definition"
	// C.g:86:1: function_definition : ( declaration_specifiers )? declarator ( ( declaration )+ compound_statement | compound_statement ) ;
	[GrammarRule("function_definition")]
	public XAstParserRuleReturnScope function_definition()
	{
		EnterRule_function_definition();
		EnterRule("function_definition", 3);
		var retval = new XAstParserRuleReturnScope("function_definition");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int function_definition_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope declaration_specifiers4 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator5 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declaration6 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope compound_statement7 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope compound_statement8 = default(XAstParserRuleReturnScope);


		  Symbols_stack.Peek().types =  new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "function_definition");
		DebugLocation(86, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// C.g:91:2: ( ( declaration_specifiers )? declarator ( ( declaration )+ compound_statement | compound_statement ) )
			DebugEnterAlt(1);
			// C.g:91:4: ( declaration_specifiers )? declarator ( ( declaration )+ compound_statement | compound_statement )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(91, 4);
			// C.g:91:4: ( declaration_specifiers )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if (((LA3_0>=63 && LA3_0<=64)||(LA3_0>=67 && LA3_0<=68)||LA3_0==72||(LA3_0>=74 && LA3_0<=76)||(LA3_0>=80 && LA3_0<=82)||(LA3_0>=84 && LA3_0<=85)||(LA3_0>=87 && LA3_0<=88)||(LA3_0>=91 && LA3_0<=94)))
			{
				alt3 = 1;
			}
			else if ((LA3_0==IDENTIFIER))
			{
				switch (input.LA(2))
				{
				case 32:
					{
					alt3 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA3_19 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 30:
					{
					int LA3_20 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 64:
				case 75:
				case 82:
				case 87:
					{
					int LA3_21 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 93:
					{
					int LA3_22 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 67:
					{
					int LA3_23 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 84:
					{
					int LA3_24 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 80:
					{
					int LA3_25 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 81:
					{
					int LA3_26 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 76:
					{
					int LA3_27 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 72:
					{
					int LA3_28 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 85:
					{
					int LA3_29 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 92:
					{
					int LA3_30 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 63:
					{
					int LA3_31 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 88:
				case 91:
					{
					int LA3_32 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 74:
					{
					int LA3_33 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 68:
				case 94:
					{
					int LA3_34 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				}

			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:91:4: declaration_specifiers
				{
				DebugLocation(91, 4);
				PushFollow(Follow._declaration_specifiers_in_function_definition134);
				declaration_specifiers4=declaration_specifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers4.Tree, declaration_specifiers4, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(91, 28);
			PushFollow(Follow._declarator_in_function_definition137);
			declarator5=declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, declarator5.Tree, declarator5, retval);
			DebugLocation(92, 3);
			// C.g:92:3: ( ( declaration )+ compound_statement | compound_statement )
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0==IDENTIFIER||(LA5_0>=63 && LA5_0<=64)||(LA5_0>=67 && LA5_0<=68)||LA5_0==72||(LA5_0>=74 && LA5_0<=76)||(LA5_0>=80 && LA5_0<=82)||(LA5_0>=84 && LA5_0<=85)||(LA5_0>=87 && LA5_0<=88)||(LA5_0>=90 && LA5_0<=94)))
			{
				alt5 = 1;
			}
			else if ((LA5_0==96))
			{
				alt5 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:92:5: ( declaration )+ compound_statement
				{
				DebugLocation(92, 5);
				// C.g:92:5: ( declaration )+
				int cnt4=0;
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if ((LA4_0==IDENTIFIER||(LA4_0>=63 && LA4_0<=64)||(LA4_0>=67 && LA4_0<=68)||LA4_0==72||(LA4_0>=74 && LA4_0<=76)||(LA4_0>=80 && LA4_0<=82)||(LA4_0>=84 && LA4_0<=85)||(LA4_0>=87 && LA4_0<=88)||(LA4_0>=90 && LA4_0<=94)))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:92:5: declaration
						{
						DebugLocation(92, 5);
						PushFollow(Follow._declaration_in_function_definition143);
						declaration6=declaration();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, declaration6.Tree, declaration6, retval);

						}
						break;

					default:
						if (cnt4 >= 1)
							goto loop4;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee4 = new EarlyExitException( 4, input );
						DebugRecognitionException(eee4);
						throw eee4;
					}
					cnt4++;
				}
				loop4:
					;

				} finally { DebugExitSubRule(4); }

				DebugLocation(92, 18);
				PushFollow(Follow._compound_statement_in_function_definition146);
				compound_statement7=compound_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, compound_statement7.Tree, compound_statement7, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:93:5: compound_statement
				{
				DebugLocation(93, 5);
				PushFollow(Follow._compound_statement_in_function_definition153);
				compound_statement8=compound_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, compound_statement8.Tree, compound_statement8, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function_definition", 3);
			LeaveRule("function_definition", 3);
			LeaveRule_function_definition();
			if (state.backtracking > 0) { Memoize(input, 3, function_definition_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(95, 1);
		} finally { DebugExitRule(GrammarFileName, "function_definition"); }
		return retval;

	}
	// $ANTLR end "function_definition"

	protected sealed partial class declaration_scope
	{
		public boolean isTypedef;

		public declaration_scope(CParser grammar) { OnCreated(grammar); }
		partial void OnCreated(CParser grammar);
	}
	partial void declaration_scopeInit( declaration_scope scope );
	partial void declaration_scopeAfter( declaration_scope scope );
	protected readonly ListStack<declaration_scope> declaration_stack = new ListStack<declaration_scope>();

	partial void EnterRule_declaration();
	partial void LeaveRule_declaration();

	// $ANTLR start "declaration"
	// C.g:97:1: declaration : ( 'typedef' ( declaration_specifiers )? init_declarator_list ';' | declaration_specifiers ( init_declarator_list )? ';' );
	[GrammarRule("declaration")]
	public XAstParserRuleReturnScope declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 4);
		var retval = new XAstParserRuleReturnScope("declaration");
		declaration_stack.Push(new declaration_scope(this));declaration_scopeInit(declaration_stack.Peek());
		
		retval.Start = (IToken)input.LT(1);
		int declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal9 = default(IToken);
		IToken char_literal12 = default(IToken);
		IToken char_literal15 = default(IToken);
		XAstParserRuleReturnScope declaration_specifiers10 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope init_declarator_list11 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declaration_specifiers13 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope init_declarator_list14 = default(XAstParserRuleReturnScope);

		object string_literal9_tree = default(object);
		object char_literal12_tree = default(object);
		object char_literal15_tree = default(object);

		  declaration_stack.Peek().isTypedef =  false;

		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(97, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// C.g:104:2: ( 'typedef' ( declaration_specifiers )? init_declarator_list ';' | declaration_specifiers ( init_declarator_list )? ';' )
			int alt8=2;
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0==90))
			{
				alt8 = 1;
			}
			else if ((LA8_0==IDENTIFIER||(LA8_0>=63 && LA8_0<=64)||(LA8_0>=67 && LA8_0<=68)||LA8_0==72||(LA8_0>=74 && LA8_0<=76)||(LA8_0>=80 && LA8_0<=82)||(LA8_0>=84 && LA8_0<=85)||(LA8_0>=87 && LA8_0<=88)||(LA8_0>=91 && LA8_0<=94)))
			{
				alt8 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:104:4: 'typedef' ( declaration_specifiers )? init_declarator_list ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(104, 4);
				string_literal9=(IToken)Match(input,90,Follow._90_in_declaration181); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal9_tree = (object)adaptor.Create(string_literal9, retval);
				adaptor.AddChild(root_0, string_literal9_tree);
				}
				DebugLocation(104, 14);
				// C.g:104:14: ( declaration_specifiers )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if (((LA6_0>=63 && LA6_0<=64)||(LA6_0>=67 && LA6_0<=68)||LA6_0==72||(LA6_0>=74 && LA6_0<=76)||(LA6_0>=80 && LA6_0<=82)||(LA6_0>=84 && LA6_0<=85)||(LA6_0>=87 && LA6_0<=88)||(LA6_0>=91 && LA6_0<=94)))
				{
					alt6 = 1;
				}
				else if ((LA6_0==IDENTIFIER))
				{
					int LA6_14 = input.LA(2);

					if ((LA6_14==IDENTIFIER||LA6_14==32||(LA6_14>=63 && LA6_14<=64)||(LA6_14>=67 && LA6_14<=68)||LA6_14==72||(LA6_14>=74 && LA6_14<=76)||(LA6_14>=80 && LA6_14<=82)||(LA6_14>=84 && LA6_14<=85)||(LA6_14>=87 && LA6_14<=88)||(LA6_14>=91 && LA6_14<=94)))
					{
						alt6 = 1;
					}
					else if ((LA6_14==30))
					{
						int LA6_20 = input.LA(3);

						if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred8_C_fragment))))
						{
							alt6 = 1;
						}
					}
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:104:14: declaration_specifiers
					{
					DebugLocation(104, 14);
					PushFollow(Follow._declaration_specifiers_in_declaration183);
					declaration_specifiers10=declaration_specifiers();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers10.Tree, declaration_specifiers10, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(104, 38);
				if (state.backtracking == 0)
				{
					declaration_stack.Peek().isTypedef = true;
				}
				DebugLocation(105, 4);
				PushFollow(Follow._init_declarator_list_in_declaration191);
				init_declarator_list11=init_declarator_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator_list11.Tree, init_declarator_list11, retval);
				DebugLocation(105, 25);
				char_literal12=(IToken)Match(input,47,Follow._47_in_declaration193); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal12_tree = (object)adaptor.Create(char_literal12, retval);
				adaptor.AddChild(root_0, char_literal12_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:106:4: declaration_specifiers ( init_declarator_list )? ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(106, 4);
				PushFollow(Follow._declaration_specifiers_in_declaration199);
				declaration_specifiers13=declaration_specifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers13.Tree, declaration_specifiers13, retval);
				DebugLocation(106, 27);
				// C.g:106:27: ( init_declarator_list )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==IDENTIFIER||LA7_0==30||LA7_0==32))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:106:27: init_declarator_list
					{
					DebugLocation(106, 27);
					PushFollow(Follow._init_declarator_list_in_declaration201);
					init_declarator_list14=init_declarator_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator_list14.Tree, init_declarator_list14, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(106, 49);
				char_literal15=(IToken)Match(input,47,Follow._47_in_declaration204); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal15_tree = (object)adaptor.Create(char_literal15, retval);
				adaptor.AddChild(root_0, char_literal15_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 4);
			LeaveRule("declaration", 4);
			LeaveRule_declaration();
			if (state.backtracking > 0) { Memoize(input, 4, declaration_StartIndex); }

			declaration_scopeAfter(declaration_stack.Peek());declaration_stack.Pop();
		}
		DebugLocation(107, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"

	partial void EnterRule_declaration_specifiers();
	partial void LeaveRule_declaration_specifiers();

	// $ANTLR start "declaration_specifiers"
	// C.g:109:1: declaration_specifiers : ( storage_class_specifier | type_specifier | type_qualifier )+ ;
	[GrammarRule("declaration_specifiers")]
	public XAstParserRuleReturnScope declaration_specifiers()
	{
		EnterRule_declaration_specifiers();
		EnterRule("declaration_specifiers", 5);
		var retval = new XAstParserRuleReturnScope("declaration_specifiers");
		
		retval.Start = (IToken)input.LT(1);
		int declaration_specifiers_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope storage_class_specifier16 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_specifier17 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_qualifier18 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "declaration_specifiers");
		DebugLocation(109, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// C.g:110:2: ( ( storage_class_specifier | type_specifier | type_qualifier )+ )
			DebugEnterAlt(1);
			// C.g:110:6: ( storage_class_specifier | type_specifier | type_qualifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(110, 6);
			// C.g:110:6: ( storage_class_specifier | type_specifier | type_qualifier )+
			int cnt9=0;
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=4;
				try { DebugEnterDecision(9, false);
				switch (input.LA(1))
				{
				case IDENTIFIER:
					{
					int LA9_2 = input.LA(2);

					if ((((EvaluatePredicate(synpred12_C_fragment)&&EvaluatePredicate(synpred12_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt9 = 2;
					}


					}
					break;
				case 64:
				case 75:
				case 82:
				case 87:
					{
					alt9 = 1;
					}
					break;
				case 63:
				case 67:
				case 72:
				case 74:
				case 76:
				case 80:
				case 81:
				case 84:
				case 85:
				case 88:
				case 91:
				case 92:
				case 93:
					{
					alt9 = 2;
					}
					break;
				case 68:
				case 94:
					{
					alt9 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:110:10: storage_class_specifier
					{
					DebugLocation(110, 10);
					PushFollow(Follow._storage_class_specifier_in_declaration_specifiers221);
					storage_class_specifier16=storage_class_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, storage_class_specifier16.Tree, storage_class_specifier16, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:111:7: type_specifier
					{
					DebugLocation(111, 7);
					PushFollow(Follow._type_specifier_in_declaration_specifiers229);
					type_specifier17=type_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_specifier17.Tree, type_specifier17, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C.g:112:7: type_qualifier
					{
					DebugLocation(112, 7);
					PushFollow(Follow._type_qualifier_in_declaration_specifiers237);
					type_qualifier18=type_qualifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier18.Tree, type_qualifier18, retval);

					}
					break;

				default:
					if (cnt9 >= 1)
						goto loop9;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee9 = new EarlyExitException( 9, input );
					DebugRecognitionException(eee9);
					throw eee9;
				}
				cnt9++;
			}
			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration_specifiers", 5);
			LeaveRule("declaration_specifiers", 5);
			LeaveRule_declaration_specifiers();
			if (state.backtracking > 0) { Memoize(input, 5, declaration_specifiers_StartIndex); }

		}
		DebugLocation(114, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration_specifiers"); }
		return retval;

	}
	// $ANTLR end "declaration_specifiers"

	partial void EnterRule_init_declarator_list();
	partial void LeaveRule_init_declarator_list();

	// $ANTLR start "init_declarator_list"
	// C.g:116:1: init_declarator_list : init_declarator ( ',' init_declarator )* ;
	[GrammarRule("init_declarator_list")]
	public XAstParserRuleReturnScope init_declarator_list()
	{
		EnterRule_init_declarator_list();
		EnterRule("init_declarator_list", 6);
		var retval = new XAstParserRuleReturnScope("init_declarator_list");
		
		retval.Start = (IToken)input.LT(1);
		int init_declarator_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal20 = default(IToken);
		XAstParserRuleReturnScope init_declarator19 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope init_declarator21 = default(XAstParserRuleReturnScope);

		object char_literal20_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "init_declarator_list");
		DebugLocation(116, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// C.g:117:2: ( init_declarator ( ',' init_declarator )* )
			DebugEnterAlt(1);
			// C.g:117:4: init_declarator ( ',' init_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(117, 4);
			PushFollow(Follow._init_declarator_in_init_declarator_list253);
			init_declarator19=init_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator19.Tree, init_declarator19, retval);
			DebugLocation(117, 20);
			// C.g:117:20: ( ',' init_declarator )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==37))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:117:21: ',' init_declarator
					{
					DebugLocation(117, 21);
					char_literal20=(IToken)Match(input,37,Follow._37_in_init_declarator_list256); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal20_tree = (object)adaptor.Create(char_literal20, retval);
					adaptor.AddChild(root_0, char_literal20_tree);
					}
					DebugLocation(117, 25);
					PushFollow(Follow._init_declarator_in_init_declarator_list258);
					init_declarator21=init_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator21.Tree, init_declarator21, retval);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("init_declarator_list", 6);
			LeaveRule("init_declarator_list", 6);
			LeaveRule_init_declarator_list();
			if (state.backtracking > 0) { Memoize(input, 6, init_declarator_list_StartIndex); }

		}
		DebugLocation(118, 1);
		} finally { DebugExitRule(GrammarFileName, "init_declarator_list"); }
		return retval;

	}
	// $ANTLR end "init_declarator_list"

	partial void EnterRule_init_declarator();
	partial void LeaveRule_init_declarator();

	// $ANTLR start "init_declarator"
	// C.g:120:1: init_declarator : declarator ( '=' initializer )? ;
	[GrammarRule("init_declarator")]
	public XAstParserRuleReturnScope init_declarator()
	{
		EnterRule_init_declarator();
		EnterRule("init_declarator", 7);
		var retval = new XAstParserRuleReturnScope("init_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int init_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal23 = default(IToken);
		XAstParserRuleReturnScope declarator22 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope initializer24 = default(XAstParserRuleReturnScope);

		object char_literal23_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "init_declarator");
		DebugLocation(120, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// C.g:121:2: ( declarator ( '=' initializer )? )
			DebugEnterAlt(1);
			// C.g:121:4: declarator ( '=' initializer )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(121, 4);
			PushFollow(Follow._declarator_in_init_declarator271);
			declarator22=declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, declarator22.Tree, declarator22, retval);
			DebugLocation(121, 15);
			// C.g:121:15: ( '=' initializer )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_0 = input.LA(1);

			if ((LA11_0==52))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:121:16: '=' initializer
				{
				DebugLocation(121, 16);
				char_literal23=(IToken)Match(input,52,Follow._52_in_init_declarator274); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal23_tree = (object)adaptor.Create(char_literal23, retval);
				adaptor.AddChild(root_0, char_literal23_tree);
				}
				DebugLocation(121, 20);
				PushFollow(Follow._initializer_in_init_declarator276);
				initializer24=initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, initializer24.Tree, initializer24, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("init_declarator", 7);
			LeaveRule("init_declarator", 7);
			LeaveRule_init_declarator();
			if (state.backtracking > 0) { Memoize(input, 7, init_declarator_StartIndex); }

		}
		DebugLocation(122, 1);
		} finally { DebugExitRule(GrammarFileName, "init_declarator"); }
		return retval;

	}
	// $ANTLR end "init_declarator"

	partial void EnterRule_storage_class_specifier();
	partial void LeaveRule_storage_class_specifier();

	// $ANTLR start "storage_class_specifier"
	// C.g:124:1: storage_class_specifier : ( 'extern' | 'static' | 'auto' | 'register' );
	[GrammarRule("storage_class_specifier")]
	public XAstParserRuleReturnScope storage_class_specifier()
	{
		EnterRule_storage_class_specifier();
		EnterRule("storage_class_specifier", 8);
		var retval = new XAstParserRuleReturnScope("storage_class_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int storage_class_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set25 = default(IToken);

		object set25_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "storage_class_specifier");
		DebugLocation(124, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// C.g:125:2: ( 'extern' | 'static' | 'auto' | 'register' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(125, 2);

			set25=(IToken)input.LT(1);
			if (input.LA(1)==64||input.LA(1)==75||input.LA(1)==82||input.LA(1)==87)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set25, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("storage_class_specifier", 8);
			LeaveRule("storage_class_specifier", 8);
			LeaveRule_storage_class_specifier();
			if (state.backtracking > 0) { Memoize(input, 8, storage_class_specifier_StartIndex); }

		}
		DebugLocation(129, 1);
		} finally { DebugExitRule(GrammarFileName, "storage_class_specifier"); }
		return retval;

	}
	// $ANTLR end "storage_class_specifier"

	partial void EnterRule_type_specifier();
	partial void LeaveRule_type_specifier();

	// $ANTLR start "type_specifier"
	// C.g:131:1: type_specifier : ( 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | '__builtin_va_list' | struct_or_union_specifier | enum_specifier | type_id );
	[GrammarRule("type_specifier")]
	public XAstParserRuleReturnScope type_specifier()
	{
		EnterRule_type_specifier();
		EnterRule("type_specifier", 9);
		var retval = new XAstParserRuleReturnScope("type_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int type_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal26 = default(IToken);
		IToken string_literal27 = default(IToken);
		IToken string_literal28 = default(IToken);
		IToken string_literal29 = default(IToken);
		IToken string_literal30 = default(IToken);
		IToken string_literal31 = default(IToken);
		IToken string_literal32 = default(IToken);
		IToken string_literal33 = default(IToken);
		IToken string_literal34 = default(IToken);
		IToken string_literal35 = default(IToken);
		XAstParserRuleReturnScope struct_or_union_specifier36 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enum_specifier37 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_id38 = default(XAstParserRuleReturnScope);

		object string_literal26_tree = default(object);
		object string_literal27_tree = default(object);
		object string_literal28_tree = default(object);
		object string_literal29_tree = default(object);
		object string_literal30_tree = default(object);
		object string_literal31_tree = default(object);
		object string_literal32_tree = default(object);
		object string_literal33_tree = default(object);
		object string_literal34_tree = default(object);
		object string_literal35_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_specifier");
		DebugLocation(131, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// C.g:132:2: ( 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | '__builtin_va_list' | struct_or_union_specifier | enum_specifier | type_id )
			int alt12=13;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case 93:
				{
				alt12 = 1;
				}
				break;
			case 67:
				{
				alt12 = 2;
				}
				break;
			case 84:
				{
				alt12 = 3;
				}
				break;
			case 80:
				{
				alt12 = 4;
				}
				break;
			case 81:
				{
				alt12 = 5;
				}
				break;
			case 76:
				{
				alt12 = 6;
				}
				break;
			case 72:
				{
				alt12 = 7;
				}
				break;
			case 85:
				{
				alt12 = 8;
				}
				break;
			case 92:
				{
				alt12 = 9;
				}
				break;
			case 63:
				{
				alt12 = 10;
				}
				break;
			case 88:
			case 91:
				{
				alt12 = 11;
				}
				break;
			case 74:
				{
				alt12 = 12;
				}
				break;
			case IDENTIFIER:
				{
				alt12 = 13;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:132:4: 'void'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(132, 4);
				string_literal26=(IToken)Match(input,93,Follow._93_in_type_specifier315); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal26_tree = (object)adaptor.Create(string_literal26, retval);
				adaptor.AddChild(root_0, string_literal26_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:133:4: 'char'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(133, 4);
				string_literal27=(IToken)Match(input,67,Follow._67_in_type_specifier320); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal27_tree = (object)adaptor.Create(string_literal27, retval);
				adaptor.AddChild(root_0, string_literal27_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:134:4: 'short'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(134, 4);
				string_literal28=(IToken)Match(input,84,Follow._84_in_type_specifier325); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal28_tree = (object)adaptor.Create(string_literal28, retval);
				adaptor.AddChild(root_0, string_literal28_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:135:4: 'int'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(135, 4);
				string_literal29=(IToken)Match(input,80,Follow._80_in_type_specifier330); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal29_tree = (object)adaptor.Create(string_literal29, retval);
				adaptor.AddChild(root_0, string_literal29_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:136:4: 'long'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(136, 4);
				string_literal30=(IToken)Match(input,81,Follow._81_in_type_specifier335); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal30_tree = (object)adaptor.Create(string_literal30, retval);
				adaptor.AddChild(root_0, string_literal30_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:137:4: 'float'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(137, 4);
				string_literal31=(IToken)Match(input,76,Follow._76_in_type_specifier340); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal31_tree = (object)adaptor.Create(string_literal31, retval);
				adaptor.AddChild(root_0, string_literal31_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C.g:138:4: 'double'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(138, 4);
				string_literal32=(IToken)Match(input,72,Follow._72_in_type_specifier345); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal32_tree = (object)adaptor.Create(string_literal32, retval);
				adaptor.AddChild(root_0, string_literal32_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C.g:139:4: 'signed'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(139, 4);
				string_literal33=(IToken)Match(input,85,Follow._85_in_type_specifier350); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal33_tree = (object)adaptor.Create(string_literal33, retval);
				adaptor.AddChild(root_0, string_literal33_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C.g:140:4: 'unsigned'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(140, 4);
				string_literal34=(IToken)Match(input,92,Follow._92_in_type_specifier355); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal34_tree = (object)adaptor.Create(string_literal34, retval);
				adaptor.AddChild(root_0, string_literal34_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C.g:141:4: '__builtin_va_list'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(141, 4);
				string_literal35=(IToken)Match(input,63,Follow._63_in_type_specifier360); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal35_tree = (object)adaptor.Create(string_literal35, retval);
				adaptor.AddChild(root_0, string_literal35_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C.g:142:4: struct_or_union_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(142, 4);
				PushFollow(Follow._struct_or_union_specifier_in_type_specifier365);
				struct_or_union_specifier36=struct_or_union_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_or_union_specifier36.Tree, struct_or_union_specifier36, retval);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C.g:143:4: enum_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(143, 4);
				PushFollow(Follow._enum_specifier_in_type_specifier370);
				enum_specifier37=enum_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_specifier37.Tree, enum_specifier37, retval);

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C.g:144:4: type_id
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(144, 4);
				PushFollow(Follow._type_id_in_type_specifier375);
				type_id38=type_id();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_id38.Tree, type_id38, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_specifier", 9);
			LeaveRule("type_specifier", 9);
			LeaveRule_type_specifier();
			if (state.backtracking > 0) { Memoize(input, 9, type_specifier_StartIndex); }

		}
		DebugLocation(145, 1);
		} finally { DebugExitRule(GrammarFileName, "type_specifier"); }
		return retval;

	}
	// $ANTLR end "type_specifier"

	partial void EnterRule_type_id();
	partial void LeaveRule_type_id();

	// $ANTLR start "type_id"
	// C.g:147:1: type_id :{...}? IDENTIFIER ;
	[GrammarRule("type_id")]
	public XAstParserRuleReturnScope type_id()
	{
		EnterRule_type_id();
		EnterRule("type_id", 10);
		var retval = new XAstParserRuleReturnScope("type_id");
		
		retval.Start = (IToken)input.LT(1);
		int type_id_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER39 = default(IToken);

		object IDENTIFIER39_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_id");
		DebugLocation(147, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// C.g:148:2: ({...}? IDENTIFIER )
			DebugEnterAlt(1);
			// C.g:148:6: {...}? IDENTIFIER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(148, 6);
			if (!((isTypeName(input.LT(1).getText()))))
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "type_id", "isTypeName(input.LT(1).getText())");
			}
			DebugLocation(148, 43);
			IDENTIFIER39=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_type_id390), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER39_tree = (object)adaptor.Create(IDENTIFIER39, retval);
			adaptor.AddChild(root_0, IDENTIFIER39_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_id", 10);
			LeaveRule("type_id", 10);
			LeaveRule_type_id();
			if (state.backtracking > 0) { Memoize(input, 10, type_id_StartIndex); }

		}
		DebugLocation(150, 1);
		} finally { DebugExitRule(GrammarFileName, "type_id"); }
		return retval;

	}
	// $ANTLR end "type_id"

	partial void EnterRule_struct_or_union_specifier();
	partial void LeaveRule_struct_or_union_specifier();

	// $ANTLR start "struct_or_union_specifier"
	// C.g:152:1: struct_or_union_specifier options {k=3; } : ( struct_or_union ( IDENTIFIER )? '{' struct_declaration_list '}' | struct_or_union IDENTIFIER );
	[GrammarRule("struct_or_union_specifier")]
	public XAstParserRuleReturnScope struct_or_union_specifier()
	{
		EnterRule_struct_or_union_specifier();
		EnterRule("struct_or_union_specifier", 11);
		var retval = new XAstParserRuleReturnScope("struct_or_union_specifier");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int struct_or_union_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER41 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken IDENTIFIER46 = default(IToken);
		XAstParserRuleReturnScope struct_or_union40 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declaration_list43 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_or_union45 = default(XAstParserRuleReturnScope);

		object IDENTIFIER41_tree = default(object);
		object char_literal42_tree = default(object);
		object char_literal44_tree = default(object);
		object IDENTIFIER46_tree = default(object);

		  Symbols_stack.Peek().types =  new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "struct_or_union_specifier");
		DebugLocation(152, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// C.g:158:2: ( struct_or_union ( IDENTIFIER )? '{' struct_declaration_list '}' | struct_or_union IDENTIFIER )
			int alt14=2;
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==88||LA14_0==91))
			{
				int LA14_1 = input.LA(2);

				if ((LA14_1==IDENTIFIER))
				{
					int LA14_2 = input.LA(3);

					if ((LA14_2==96))
					{
						alt14 = 1;
					}
					else if ((LA14_2==EOF||LA14_2==IDENTIFIER||(LA14_2>=30 && LA14_2<=32)||LA14_2==37||(LA14_2>=46 && LA14_2<=47)||LA14_2==59||(LA14_2>=63 && LA14_2<=64)||(LA14_2>=67 && LA14_2<=68)||LA14_2==72||(LA14_2>=74 && LA14_2<=76)||(LA14_2>=80 && LA14_2<=82)||(LA14_2>=84 && LA14_2<=85)||(LA14_2>=87 && LA14_2<=88)||(LA14_2>=91 && LA14_2<=94)))
					{
						alt14 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 14, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA14_1==96))
				{
					alt14 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 14, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:158:4: struct_or_union ( IDENTIFIER )? '{' struct_declaration_list '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(158, 4);
				PushFollow(Follow._struct_or_union_in_struct_or_union_specifier420);
				struct_or_union40=struct_or_union();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_or_union40.Tree, struct_or_union40, retval);
				DebugLocation(158, 20);
				// C.g:158:20: ( IDENTIFIER )?
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==IDENTIFIER))
				{
					alt13 = 1;
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:158:20: IDENTIFIER
					{
					DebugLocation(158, 20);
					IDENTIFIER41=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_struct_or_union_specifier422), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER41_tree = (object)adaptor.Create(IDENTIFIER41, retval);
					adaptor.AddChild(root_0, IDENTIFIER41_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(13); }

				DebugLocation(158, 32);
				char_literal42=(IToken)Match(input,96,Follow._96_in_struct_or_union_specifier425); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal42_tree = (object)adaptor.Create(char_literal42, retval);
				adaptor.AddChild(root_0, char_literal42_tree);
				}
				DebugLocation(158, 36);
				PushFollow(Follow._struct_declaration_list_in_struct_or_union_specifier427);
				struct_declaration_list43=struct_declaration_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration_list43.Tree, struct_declaration_list43, retval);
				DebugLocation(158, 60);
				char_literal44=(IToken)Match(input,100,Follow._100_in_struct_or_union_specifier429); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal44_tree = (object)adaptor.Create(char_literal44, retval);
				adaptor.AddChild(root_0, char_literal44_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:159:4: struct_or_union IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(159, 4);
				PushFollow(Follow._struct_or_union_in_struct_or_union_specifier434);
				struct_or_union45=struct_or_union();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_or_union45.Tree, struct_or_union45, retval);
				DebugLocation(159, 20);
				IDENTIFIER46=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_struct_or_union_specifier436), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER46_tree = (object)adaptor.Create(IDENTIFIER46, retval);
				adaptor.AddChild(root_0, IDENTIFIER46_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_or_union_specifier", 11);
			LeaveRule("struct_or_union_specifier", 11);
			LeaveRule_struct_or_union_specifier();
			if (state.backtracking > 0) { Memoize(input, 11, struct_or_union_specifier_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(160, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_or_union_specifier"); }
		return retval;

	}
	// $ANTLR end "struct_or_union_specifier"

	partial void EnterRule_struct_or_union();
	partial void LeaveRule_struct_or_union();

	// $ANTLR start "struct_or_union"
	// C.g:162:1: struct_or_union : ( 'struct' | 'union' );
	[GrammarRule("struct_or_union")]
	public XAstParserRuleReturnScope struct_or_union()
	{
		EnterRule_struct_or_union();
		EnterRule("struct_or_union", 12);
		var retval = new XAstParserRuleReturnScope("struct_or_union");
		
		retval.Start = (IToken)input.LT(1);
		int struct_or_union_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set47 = default(IToken);

		object set47_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_or_union");
		DebugLocation(162, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// C.g:163:2: ( 'struct' | 'union' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(163, 2);

			set47=(IToken)input.LT(1);
			if (input.LA(1)==88||input.LA(1)==91)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set47, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_or_union", 12);
			LeaveRule("struct_or_union", 12);
			LeaveRule_struct_or_union();
			if (state.backtracking > 0) { Memoize(input, 12, struct_or_union_StartIndex); }

		}
		DebugLocation(165, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_or_union"); }
		return retval;

	}
	// $ANTLR end "struct_or_union"

	partial void EnterRule_struct_declaration_list();
	partial void LeaveRule_struct_declaration_list();

	// $ANTLR start "struct_declaration_list"
	// C.g:167:1: struct_declaration_list : ( struct_declaration )+ ;
	[GrammarRule("struct_declaration_list")]
	public XAstParserRuleReturnScope struct_declaration_list()
	{
		EnterRule_struct_declaration_list();
		EnterRule("struct_declaration_list", 13);
		var retval = new XAstParserRuleReturnScope("struct_declaration_list");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declaration_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope struct_declaration48 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "struct_declaration_list");
		DebugLocation(167, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// C.g:168:2: ( ( struct_declaration )+ )
			DebugEnterAlt(1);
			// C.g:168:4: ( struct_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(168, 4);
			// C.g:168:4: ( struct_declaration )+
			int cnt15=0;
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==IDENTIFIER||LA15_0==63||(LA15_0>=67 && LA15_0<=68)||LA15_0==72||LA15_0==74||LA15_0==76||(LA15_0>=80 && LA15_0<=81)||(LA15_0>=84 && LA15_0<=85)||LA15_0==88||(LA15_0>=91 && LA15_0<=94)))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:168:4: struct_declaration
					{
					DebugLocation(168, 4);
					PushFollow(Follow._struct_declaration_in_struct_declaration_list463);
					struct_declaration48=struct_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration48.Tree, struct_declaration48, retval);

					}
					break;

				default:
					if (cnt15 >= 1)
						goto loop15;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee15 = new EarlyExitException( 15, input );
					DebugRecognitionException(eee15);
					throw eee15;
				}
				cnt15++;
			}
			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declaration_list", 13);
			LeaveRule("struct_declaration_list", 13);
			LeaveRule_struct_declaration_list();
			if (state.backtracking > 0) { Memoize(input, 13, struct_declaration_list_StartIndex); }

		}
		DebugLocation(169, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_declaration_list"); }
		return retval;

	}
	// $ANTLR end "struct_declaration_list"

	partial void EnterRule_struct_declaration();
	partial void LeaveRule_struct_declaration();

	// $ANTLR start "struct_declaration"
	// C.g:171:1: struct_declaration : specifier_qualifier_list struct_declarator_list ';' ;
	[GrammarRule("struct_declaration")]
	public XAstParserRuleReturnScope struct_declaration()
	{
		EnterRule_struct_declaration();
		EnterRule("struct_declaration", 14);
		var retval = new XAstParserRuleReturnScope("struct_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal51 = default(IToken);
		XAstParserRuleReturnScope specifier_qualifier_list49 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declarator_list50 = default(XAstParserRuleReturnScope);

		object char_literal51_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_declaration");
		DebugLocation(171, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// C.g:172:2: ( specifier_qualifier_list struct_declarator_list ';' )
			DebugEnterAlt(1);
			// C.g:172:4: specifier_qualifier_list struct_declarator_list ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(172, 4);
			PushFollow(Follow._specifier_qualifier_list_in_struct_declaration475);
			specifier_qualifier_list49=specifier_qualifier_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, specifier_qualifier_list49.Tree, specifier_qualifier_list49, retval);
			DebugLocation(172, 29);
			PushFollow(Follow._struct_declarator_list_in_struct_declaration477);
			struct_declarator_list50=struct_declarator_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declarator_list50.Tree, struct_declarator_list50, retval);
			DebugLocation(172, 52);
			char_literal51=(IToken)Match(input,47,Follow._47_in_struct_declaration479); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal51_tree = (object)adaptor.Create(char_literal51, retval);
			adaptor.AddChild(root_0, char_literal51_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declaration", 14);
			LeaveRule("struct_declaration", 14);
			LeaveRule_struct_declaration();
			if (state.backtracking > 0) { Memoize(input, 14, struct_declaration_StartIndex); }

		}
		DebugLocation(173, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_declaration"); }
		return retval;

	}
	// $ANTLR end "struct_declaration"

	partial void EnterRule_specifier_qualifier_list();
	partial void LeaveRule_specifier_qualifier_list();

	// $ANTLR start "specifier_qualifier_list"
	// C.g:175:1: specifier_qualifier_list : ( type_qualifier | type_specifier )+ ;
	[GrammarRule("specifier_qualifier_list")]
	public XAstParserRuleReturnScope specifier_qualifier_list()
	{
		EnterRule_specifier_qualifier_list();
		EnterRule("specifier_qualifier_list", 15);
		var retval = new XAstParserRuleReturnScope("specifier_qualifier_list");
		
		retval.Start = (IToken)input.LT(1);
		int specifier_qualifier_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope type_qualifier52 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_specifier53 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "specifier_qualifier_list");
		DebugLocation(175, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// C.g:176:2: ( ( type_qualifier | type_specifier )+ )
			DebugEnterAlt(1);
			// C.g:176:4: ( type_qualifier | type_specifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(176, 4);
			// C.g:176:4: ( type_qualifier | type_specifier )+
			int cnt16=0;
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=3;
				try { DebugEnterDecision(16, false);
				switch (input.LA(1))
				{
				case IDENTIFIER:
					{
					switch (input.LA(2))
					{
					case 59:
						{
						int LA16_20 = input.LA(3);

						if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred36_C_fragment))))
						{
							alt16 = 2;
						}


						}
						break;
					case 30:
						{
						int LA16_21 = input.LA(3);

						if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred36_C_fragment))))
						{
							alt16 = 2;
						}


						}
						break;
					case 46:
						{
						int LA16_22 = input.LA(3);

						if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred36_C_fragment))))
						{
							alt16 = 2;
						}


						}
						break;
					case IDENTIFIER:
					case 31:
					case 32:
					case 63:
					case 67:
					case 68:
					case 72:
					case 74:
					case 76:
					case 80:
					case 81:
					case 84:
					case 85:
					case 88:
					case 91:
					case 92:
					case 93:
					case 94:
						{
						alt16 = 2;
						}
						break;
					}

					}
					break;
				case 68:
				case 94:
					{
					alt16 = 1;
					}
					break;
				case 63:
				case 67:
				case 72:
				case 74:
				case 76:
				case 80:
				case 81:
				case 84:
				case 85:
				case 88:
				case 91:
				case 92:
				case 93:
					{
					alt16 = 2;
					}
					break;
				}

				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:176:6: type_qualifier
					{
					DebugLocation(176, 6);
					PushFollow(Follow._type_qualifier_in_specifier_qualifier_list492);
					type_qualifier52=type_qualifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier52.Tree, type_qualifier52, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:176:23: type_specifier
					{
					DebugLocation(176, 23);
					PushFollow(Follow._type_specifier_in_specifier_qualifier_list496);
					type_specifier53=type_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_specifier53.Tree, type_specifier53, retval);

					}
					break;

				default:
					if (cnt16 >= 1)
						goto loop16;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee16 = new EarlyExitException( 16, input );
					DebugRecognitionException(eee16);
					throw eee16;
				}
				cnt16++;
			}
			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("specifier_qualifier_list", 15);
			LeaveRule("specifier_qualifier_list", 15);
			LeaveRule_specifier_qualifier_list();
			if (state.backtracking > 0) { Memoize(input, 15, specifier_qualifier_list_StartIndex); }

		}
		DebugLocation(177, 1);
		} finally { DebugExitRule(GrammarFileName, "specifier_qualifier_list"); }
		return retval;

	}
	// $ANTLR end "specifier_qualifier_list"

	partial void EnterRule_struct_declarator_list();
	partial void LeaveRule_struct_declarator_list();

	// $ANTLR start "struct_declarator_list"
	// C.g:179:1: struct_declarator_list : struct_declarator ( ',' struct_declarator )* ;
	[GrammarRule("struct_declarator_list")]
	public XAstParserRuleReturnScope struct_declarator_list()
	{
		EnterRule_struct_declarator_list();
		EnterRule("struct_declarator_list", 16);
		var retval = new XAstParserRuleReturnScope("struct_declarator_list");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declarator_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal55 = default(IToken);
		XAstParserRuleReturnScope struct_declarator54 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declarator56 = default(XAstParserRuleReturnScope);

		object char_literal55_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_declarator_list");
		DebugLocation(179, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// C.g:180:2: ( struct_declarator ( ',' struct_declarator )* )
			DebugEnterAlt(1);
			// C.g:180:4: struct_declarator ( ',' struct_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(180, 4);
			PushFollow(Follow._struct_declarator_in_struct_declarator_list510);
			struct_declarator54=struct_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declarator54.Tree, struct_declarator54, retval);
			DebugLocation(180, 22);
			// C.g:180:22: ( ',' struct_declarator )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if ((LA17_0==37))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:180:23: ',' struct_declarator
					{
					DebugLocation(180, 23);
					char_literal55=(IToken)Match(input,37,Follow._37_in_struct_declarator_list513); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal55_tree = (object)adaptor.Create(char_literal55, retval);
					adaptor.AddChild(root_0, char_literal55_tree);
					}
					DebugLocation(180, 27);
					PushFollow(Follow._struct_declarator_in_struct_declarator_list515);
					struct_declarator56=struct_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declarator56.Tree, struct_declarator56, retval);

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declarator_list", 16);
			LeaveRule("struct_declarator_list", 16);
			LeaveRule_struct_declarator_list();
			if (state.backtracking > 0) { Memoize(input, 16, struct_declarator_list_StartIndex); }

		}
		DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_declarator_list"); }
		return retval;

	}
	// $ANTLR end "struct_declarator_list"

	partial void EnterRule_struct_declarator();
	partial void LeaveRule_struct_declarator();

	// $ANTLR start "struct_declarator"
	// C.g:183:1: struct_declarator : ( declarator ( ':' constant_expression )? | ':' constant_expression );
	[GrammarRule("struct_declarator")]
	public XAstParserRuleReturnScope struct_declarator()
	{
		EnterRule_struct_declarator();
		EnterRule("struct_declarator", 17);
		var retval = new XAstParserRuleReturnScope("struct_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal58 = default(IToken);
		IToken char_literal60 = default(IToken);
		XAstParserRuleReturnScope declarator57 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression59 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression61 = default(XAstParserRuleReturnScope);

		object char_literal58_tree = default(object);
		object char_literal60_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_declarator");
		DebugLocation(183, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// C.g:184:2: ( declarator ( ':' constant_expression )? | ':' constant_expression )
			int alt19=2;
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==IDENTIFIER||LA19_0==30||LA19_0==32))
			{
				alt19 = 1;
			}
			else if ((LA19_0==46))
			{
				alt19 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:184:4: declarator ( ':' constant_expression )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(184, 4);
				PushFollow(Follow._declarator_in_struct_declarator528);
				declarator57=declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declarator57.Tree, declarator57, retval);
				DebugLocation(184, 15);
				// C.g:184:15: ( ':' constant_expression )?
				int alt18=2;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==46))
				{
					alt18 = 1;
				}
				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:184:16: ':' constant_expression
					{
					DebugLocation(184, 16);
					char_literal58=(IToken)Match(input,46,Follow._46_in_struct_declarator531); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal58_tree = (object)adaptor.Create(char_literal58, retval);
					adaptor.AddChild(root_0, char_literal58_tree);
					}
					DebugLocation(184, 20);
					PushFollow(Follow._constant_expression_in_struct_declarator533);
					constant_expression59=constant_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression59.Tree, constant_expression59, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(18); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:185:4: ':' constant_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(185, 4);
				char_literal60=(IToken)Match(input,46,Follow._46_in_struct_declarator540); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal60_tree = (object)adaptor.Create(char_literal60, retval);
				adaptor.AddChild(root_0, char_literal60_tree);
				}
				DebugLocation(185, 8);
				PushFollow(Follow._constant_expression_in_struct_declarator542);
				constant_expression61=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression61.Tree, constant_expression61, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declarator", 17);
			LeaveRule("struct_declarator", 17);
			LeaveRule_struct_declarator();
			if (state.backtracking > 0) { Memoize(input, 17, struct_declarator_StartIndex); }

		}
		DebugLocation(186, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_declarator"); }
		return retval;

	}
	// $ANTLR end "struct_declarator"

	partial void EnterRule_enum_specifier();
	partial void LeaveRule_enum_specifier();

	// $ANTLR start "enum_specifier"
	// C.g:188:1: enum_specifier options {k=3; } : ( 'enum' '{' enumerator_list '}' | 'enum' IDENTIFIER '{' enumerator_list '}' | 'enum' IDENTIFIER );
	[GrammarRule("enum_specifier")]
	public XAstParserRuleReturnScope enum_specifier()
	{
		EnterRule_enum_specifier();
		EnterRule("enum_specifier", 18);
		var retval = new XAstParserRuleReturnScope("enum_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int enum_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal62 = default(IToken);
		IToken char_literal63 = default(IToken);
		IToken char_literal65 = default(IToken);
		IToken string_literal66 = default(IToken);
		IToken IDENTIFIER67 = default(IToken);
		IToken char_literal68 = default(IToken);
		IToken char_literal70 = default(IToken);
		IToken string_literal71 = default(IToken);
		IToken IDENTIFIER72 = default(IToken);
		XAstParserRuleReturnScope enumerator_list64 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enumerator_list69 = default(XAstParserRuleReturnScope);

		object string_literal62_tree = default(object);
		object char_literal63_tree = default(object);
		object char_literal65_tree = default(object);
		object string_literal66_tree = default(object);
		object IDENTIFIER67_tree = default(object);
		object char_literal68_tree = default(object);
		object char_literal70_tree = default(object);
		object string_literal71_tree = default(object);
		object IDENTIFIER72_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enum_specifier");
		DebugLocation(188, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// C.g:190:2: ( 'enum' '{' enumerator_list '}' | 'enum' IDENTIFIER '{' enumerator_list '}' | 'enum' IDENTIFIER )
			int alt20=3;
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==74))
			{
				int LA20_1 = input.LA(2);

				if ((LA20_1==96))
				{
					alt20 = 1;
				}
				else if ((LA20_1==IDENTIFIER))
				{
					int LA20_3 = input.LA(3);

					if ((LA20_3==96))
					{
						alt20 = 2;
					}
					else if ((LA20_3==EOF||LA20_3==IDENTIFIER||(LA20_3>=30 && LA20_3<=32)||LA20_3==37||(LA20_3>=46 && LA20_3<=47)||LA20_3==59||(LA20_3>=63 && LA20_3<=64)||(LA20_3>=67 && LA20_3<=68)||LA20_3==72||(LA20_3>=74 && LA20_3<=76)||(LA20_3>=80 && LA20_3<=82)||(LA20_3>=84 && LA20_3<=85)||(LA20_3>=87 && LA20_3<=88)||(LA20_3>=91 && LA20_3<=94)))
					{
						alt20 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 20, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 20, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:190:4: 'enum' '{' enumerator_list '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(190, 4);
				string_literal62=(IToken)Match(input,74,Follow._74_in_enum_specifier560); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal62_tree = (object)adaptor.Create(string_literal62, retval);
				adaptor.AddChild(root_0, string_literal62_tree);
				}
				DebugLocation(190, 11);
				char_literal63=(IToken)Match(input,96,Follow._96_in_enum_specifier562); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal63_tree = (object)adaptor.Create(char_literal63, retval);
				adaptor.AddChild(root_0, char_literal63_tree);
				}
				DebugLocation(190, 15);
				PushFollow(Follow._enumerator_list_in_enum_specifier564);
				enumerator_list64=enumerator_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator_list64.Tree, enumerator_list64, retval);
				DebugLocation(190, 31);
				char_literal65=(IToken)Match(input,100,Follow._100_in_enum_specifier566); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal65_tree = (object)adaptor.Create(char_literal65, retval);
				adaptor.AddChild(root_0, char_literal65_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:191:4: 'enum' IDENTIFIER '{' enumerator_list '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(191, 4);
				string_literal66=(IToken)Match(input,74,Follow._74_in_enum_specifier571); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal66_tree = (object)adaptor.Create(string_literal66, retval);
				adaptor.AddChild(root_0, string_literal66_tree);
				}
				DebugLocation(191, 11);
				IDENTIFIER67=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enum_specifier573), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER67_tree = (object)adaptor.Create(IDENTIFIER67, retval);
				adaptor.AddChild(root_0, IDENTIFIER67_tree);
				}
				DebugLocation(191, 22);
				char_literal68=(IToken)Match(input,96,Follow._96_in_enum_specifier575); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal68_tree = (object)adaptor.Create(char_literal68, retval);
				adaptor.AddChild(root_0, char_literal68_tree);
				}
				DebugLocation(191, 26);
				PushFollow(Follow._enumerator_list_in_enum_specifier577);
				enumerator_list69=enumerator_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator_list69.Tree, enumerator_list69, retval);
				DebugLocation(191, 42);
				char_literal70=(IToken)Match(input,100,Follow._100_in_enum_specifier579); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal70_tree = (object)adaptor.Create(char_literal70, retval);
				adaptor.AddChild(root_0, char_literal70_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:192:4: 'enum' IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(192, 4);
				string_literal71=(IToken)Match(input,74,Follow._74_in_enum_specifier584); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal71_tree = (object)adaptor.Create(string_literal71, retval);
				adaptor.AddChild(root_0, string_literal71_tree);
				}
				DebugLocation(192, 11);
				IDENTIFIER72=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enum_specifier586), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER72_tree = (object)adaptor.Create(IDENTIFIER72, retval);
				adaptor.AddChild(root_0, IDENTIFIER72_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_specifier", 18);
			LeaveRule("enum_specifier", 18);
			LeaveRule_enum_specifier();
			if (state.backtracking > 0) { Memoize(input, 18, enum_specifier_StartIndex); }

		}
		DebugLocation(193, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_specifier"); }
		return retval;

	}
	// $ANTLR end "enum_specifier"

	partial void EnterRule_enumerator_list();
	partial void LeaveRule_enumerator_list();

	// $ANTLR start "enumerator_list"
	// C.g:195:1: enumerator_list : enumerator ( ',' enumerator )* ;
	[GrammarRule("enumerator_list")]
	public XAstParserRuleReturnScope enumerator_list()
	{
		EnterRule_enumerator_list();
		EnterRule("enumerator_list", 19);
		var retval = new XAstParserRuleReturnScope("enumerator_list");
		
		retval.Start = (IToken)input.LT(1);
		int enumerator_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal74 = default(IToken);
		XAstParserRuleReturnScope enumerator73 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enumerator75 = default(XAstParserRuleReturnScope);

		object char_literal74_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumerator_list");
		DebugLocation(195, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// C.g:196:2: ( enumerator ( ',' enumerator )* )
			DebugEnterAlt(1);
			// C.g:196:4: enumerator ( ',' enumerator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(196, 4);
			PushFollow(Follow._enumerator_in_enumerator_list597);
			enumerator73=enumerator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator73.Tree, enumerator73, retval);
			DebugLocation(196, 15);
			// C.g:196:15: ( ',' enumerator )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==37))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:196:16: ',' enumerator
					{
					DebugLocation(196, 16);
					char_literal74=(IToken)Match(input,37,Follow._37_in_enumerator_list600); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal74_tree = (object)adaptor.Create(char_literal74, retval);
					adaptor.AddChild(root_0, char_literal74_tree);
					}
					DebugLocation(196, 20);
					PushFollow(Follow._enumerator_in_enumerator_list602);
					enumerator75=enumerator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator75.Tree, enumerator75, retval);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumerator_list", 19);
			LeaveRule("enumerator_list", 19);
			LeaveRule_enumerator_list();
			if (state.backtracking > 0) { Memoize(input, 19, enumerator_list_StartIndex); }

		}
		DebugLocation(197, 1);
		} finally { DebugExitRule(GrammarFileName, "enumerator_list"); }
		return retval;

	}
	// $ANTLR end "enumerator_list"

	partial void EnterRule_enumerator();
	partial void LeaveRule_enumerator();

	// $ANTLR start "enumerator"
	// C.g:199:1: enumerator : IDENTIFIER ( '=' constant_expression )? ;
	[GrammarRule("enumerator")]
	public XAstParserRuleReturnScope enumerator()
	{
		EnterRule_enumerator();
		EnterRule("enumerator", 20);
		var retval = new XAstParserRuleReturnScope("enumerator");
		
		retval.Start = (IToken)input.LT(1);
		int enumerator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER76 = default(IToken);
		IToken char_literal77 = default(IToken);
		XAstParserRuleReturnScope constant_expression78 = default(XAstParserRuleReturnScope);

		object IDENTIFIER76_tree = default(object);
		object char_literal77_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumerator");
		DebugLocation(199, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// C.g:200:2: ( IDENTIFIER ( '=' constant_expression )? )
			DebugEnterAlt(1);
			// C.g:200:4: IDENTIFIER ( '=' constant_expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(200, 4);
			IDENTIFIER76=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enumerator615), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER76_tree = (object)adaptor.Create(IDENTIFIER76, retval);
			adaptor.AddChild(root_0, IDENTIFIER76_tree);
			}
			DebugLocation(200, 15);
			// C.g:200:15: ( '=' constant_expression )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==52))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:200:16: '=' constant_expression
				{
				DebugLocation(200, 16);
				char_literal77=(IToken)Match(input,52,Follow._52_in_enumerator618); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal77_tree = (object)adaptor.Create(char_literal77, retval);
				adaptor.AddChild(root_0, char_literal77_tree);
				}
				DebugLocation(200, 20);
				PushFollow(Follow._constant_expression_in_enumerator620);
				constant_expression78=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression78.Tree, constant_expression78, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumerator", 20);
			LeaveRule("enumerator", 20);
			LeaveRule_enumerator();
			if (state.backtracking > 0) { Memoize(input, 20, enumerator_StartIndex); }

		}
		DebugLocation(201, 1);
		} finally { DebugExitRule(GrammarFileName, "enumerator"); }
		return retval;

	}
	// $ANTLR end "enumerator"

	partial void EnterRule_type_qualifier();
	partial void LeaveRule_type_qualifier();

	// $ANTLR start "type_qualifier"
	// C.g:203:1: type_qualifier : ( 'const' | 'volatile' );
	[GrammarRule("type_qualifier")]
	public XAstParserRuleReturnScope type_qualifier()
	{
		EnterRule_type_qualifier();
		EnterRule("type_qualifier", 21);
		var retval = new XAstParserRuleReturnScope("type_qualifier");
		
		retval.Start = (IToken)input.LT(1);
		int type_qualifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set79 = default(IToken);

		object set79_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_qualifier");
		DebugLocation(203, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// C.g:204:2: ( 'const' | 'volatile' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(204, 2);

			set79=(IToken)input.LT(1);
			if (input.LA(1)==68||input.LA(1)==94)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set79, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_qualifier", 21);
			LeaveRule("type_qualifier", 21);
			LeaveRule_type_qualifier();
			if (state.backtracking > 0) { Memoize(input, 21, type_qualifier_StartIndex); }

		}
		DebugLocation(206, 1);
		} finally { DebugExitRule(GrammarFileName, "type_qualifier"); }
		return retval;

	}
	// $ANTLR end "type_qualifier"

	partial void EnterRule_declarator();
	partial void LeaveRule_declarator();

	// $ANTLR start "declarator"
	// C.g:208:1: declarator : ( ( pointer )? direct_declarator | pointer );
	[GrammarRule("declarator")]
	public XAstParserRuleReturnScope declarator()
	{
		EnterRule_declarator();
		EnterRule("declarator", 22);
		var retval = new XAstParserRuleReturnScope("declarator");
		
		retval.Start = (IToken)input.LT(1);
		int declarator_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope pointer80 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope direct_declarator81 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope pointer82 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "declarator");
		DebugLocation(208, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// C.g:209:2: ( ( pointer )? direct_declarator | pointer )
			int alt24=2;
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==32))
			{
				int LA24_1 = input.LA(2);

				if ((EvaluatePredicate(synpred46_C_fragment)))
				{
					alt24 = 1;
				}
				else if ((true))
				{
					alt24 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 24, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA24_0==IDENTIFIER||LA24_0==30))
			{
				alt24 = 1;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:209:4: ( pointer )? direct_declarator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(209, 4);
				// C.g:209:4: ( pointer )?
				int alt23=2;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, false);
				int LA23_0 = input.LA(1);

				if ((LA23_0==32))
				{
					alt23 = 1;
				}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:209:4: pointer
					{
					DebugLocation(209, 4);
					PushFollow(Follow._pointer_in_declarator649);
					pointer80=pointer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, pointer80.Tree, pointer80, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(23); }

				DebugLocation(209, 13);
				PushFollow(Follow._direct_declarator_in_declarator652);
				direct_declarator81=direct_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, direct_declarator81.Tree, direct_declarator81, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:210:4: pointer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(210, 4);
				PushFollow(Follow._pointer_in_declarator657);
				pointer82=pointer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pointer82.Tree, pointer82, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declarator", 22);
			LeaveRule("declarator", 22);
			LeaveRule_declarator();
			if (state.backtracking > 0) { Memoize(input, 22, declarator_StartIndex); }

		}
		DebugLocation(211, 1);
		} finally { DebugExitRule(GrammarFileName, "declarator"); }
		return retval;

	}
	// $ANTLR end "declarator"

	partial void EnterRule_direct_declarator();
	partial void LeaveRule_direct_declarator();

	// $ANTLR start "direct_declarator"
	// C.g:213:1: direct_declarator : ( IDENTIFIER | '(' declarator ')' ) ( declarator_suffix )* ;
	[GrammarRule("direct_declarator")]
	public XAstParserRuleReturnScope direct_declarator()
	{
		EnterRule_direct_declarator();
		EnterRule("direct_declarator", 23);
		var retval = new XAstParserRuleReturnScope("direct_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int direct_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER83 = default(IToken);
		IToken char_literal84 = default(IToken);
		IToken char_literal86 = default(IToken);
		XAstParserRuleReturnScope declarator85 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator_suffix87 = default(XAstParserRuleReturnScope);

		object IDENTIFIER83_tree = default(object);
		object char_literal84_tree = default(object);
		object char_literal86_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "direct_declarator");
		DebugLocation(213, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// C.g:214:2: ( ( IDENTIFIER | '(' declarator ')' ) ( declarator_suffix )* )
			DebugEnterAlt(1);
			// C.g:214:6: ( IDENTIFIER | '(' declarator ')' ) ( declarator_suffix )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(214, 6);
			// C.g:214:6: ( IDENTIFIER | '(' declarator ')' )
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==IDENTIFIER))
			{
				alt25 = 1;
			}
			else if ((LA25_0==30))
			{
				alt25 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:214:8: IDENTIFIER
				{
				DebugLocation(214, 8);
				IDENTIFIER83=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_direct_declarator672), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER83_tree = (object)adaptor.Create(IDENTIFIER83, retval);
				adaptor.AddChild(root_0, IDENTIFIER83_tree);
				}
				DebugLocation(215, 4);
				if (state.backtracking == 0)
				{

								if (declaration_stack.size()>0&&declaration_stack.Peek().isTypedef) {
									Symbols_stack.Peek().types.add((IDENTIFIER83!=null?IDENTIFIER83.Text:null));
									
								}
								
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:221:5: '(' declarator ')'
				{
				DebugLocation(221, 5);
				char_literal84=(IToken)Match(input,30,Follow._30_in_direct_declarator683); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal84_tree = (object)adaptor.Create(char_literal84, retval);
				adaptor.AddChild(root_0, char_literal84_tree);
				}
				DebugLocation(221, 9);
				PushFollow(Follow._declarator_in_direct_declarator685);
				declarator85=declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declarator85.Tree, declarator85, retval);
				DebugLocation(221, 20);
				char_literal86=(IToken)Match(input,31,Follow._31_in_direct_declarator687); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal86_tree = (object)adaptor.Create(char_literal86, retval);
				adaptor.AddChild(root_0, char_literal86_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(223, 3);
			// C.g:223:3: ( declarator_suffix )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				try
				{
					alt26 = dfa26.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:223:3: declarator_suffix
					{
					DebugLocation(223, 3);
					PushFollow(Follow._declarator_suffix_in_direct_declarator695);
					declarator_suffix87=declarator_suffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declarator_suffix87.Tree, declarator_suffix87, retval);

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("direct_declarator", 23);
			LeaveRule("direct_declarator", 23);
			LeaveRule_direct_declarator();
			if (state.backtracking > 0) { Memoize(input, 23, direct_declarator_StartIndex); }

		}
		DebugLocation(224, 1);
		} finally { DebugExitRule(GrammarFileName, "direct_declarator"); }
		return retval;

	}
	// $ANTLR end "direct_declarator"

	partial void EnterRule_declarator_suffix();
	partial void LeaveRule_declarator_suffix();

	// $ANTLR start "declarator_suffix"
	// C.g:226:1: declarator_suffix : ( '[' constant_expression ']' | '[' ']' | '(' parameter_type_list ')' | '(' identifier_list ')' | '(' ')' );
	[GrammarRule("declarator_suffix")]
	public XAstParserRuleReturnScope declarator_suffix()
	{
		EnterRule_declarator_suffix();
		EnterRule("declarator_suffix", 24);
		var retval = new XAstParserRuleReturnScope("declarator_suffix");
		
		retval.Start = (IToken)input.LT(1);
		int declarator_suffix_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal88 = default(IToken);
		IToken char_literal90 = default(IToken);
		IToken char_literal91 = default(IToken);
		IToken char_literal92 = default(IToken);
		IToken char_literal93 = default(IToken);
		IToken char_literal95 = default(IToken);
		IToken char_literal96 = default(IToken);
		IToken char_literal98 = default(IToken);
		IToken char_literal99 = default(IToken);
		IToken char_literal100 = default(IToken);
		XAstParserRuleReturnScope constant_expression89 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope parameter_type_list94 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier_list97 = default(XAstParserRuleReturnScope);

		object char_literal88_tree = default(object);
		object char_literal90_tree = default(object);
		object char_literal91_tree = default(object);
		object char_literal92_tree = default(object);
		object char_literal93_tree = default(object);
		object char_literal95_tree = default(object);
		object char_literal96_tree = default(object);
		object char_literal98_tree = default(object);
		object char_literal99_tree = default(object);
		object char_literal100_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "declarator_suffix");
		DebugLocation(226, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// C.g:227:2: ( '[' constant_expression ']' | '[' ']' | '(' parameter_type_list ')' | '(' identifier_list ')' | '(' ')' )
			int alt27=5;
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==59))
			{
				int LA27_1 = input.LA(2);

				if ((LA27_1==60))
				{
					alt27 = 2;
				}
				else if ((LA27_1==CHARACTER_LITERAL||LA27_1==DECIMAL_LITERAL||LA27_1==FLOATING_POINT_LITERAL||LA27_1==HEX_LITERAL||LA27_1==IDENTIFIER||LA27_1==OCTAL_LITERAL||LA27_1==STRING_LITERAL||LA27_1==23||LA27_1==28||LA27_1==30||LA27_1==32||(LA27_1>=34 && LA27_1<=35)||(LA27_1>=38 && LA27_1<=39)||LA27_1==86||LA27_1==101))
				{
					alt27 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 27, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA27_0==30))
			{
				switch (input.LA(2))
				{
				case 31:
					{
					alt27 = 5;
					}
					break;
				case 63:
				case 64:
				case 67:
				case 68:
				case 72:
				case 74:
				case 75:
				case 76:
				case 80:
				case 81:
				case 82:
				case 84:
				case 85:
				case 87:
				case 88:
				case 91:
				case 92:
				case 93:
				case 94:
					{
					alt27 = 3;
					}
					break;
				case IDENTIFIER:
					{
					int LA27_30 = input.LA(3);

					if ((EvaluatePredicate(synpred51_C_fragment)))
					{
						alt27 = 3;
					}
					else if ((EvaluatePredicate(synpred52_C_fragment)))
					{
						alt27 = 4;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 27, 30, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 27, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:227:6: '[' constant_expression ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(227, 6);
				char_literal88=(IToken)Match(input,59,Follow._59_in_declarator_suffix709); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal88_tree = (object)adaptor.Create(char_literal88, retval);
				adaptor.AddChild(root_0, char_literal88_tree);
				}
				DebugLocation(227, 10);
				PushFollow(Follow._constant_expression_in_declarator_suffix711);
				constant_expression89=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression89.Tree, constant_expression89, retval);
				DebugLocation(227, 30);
				char_literal90=(IToken)Match(input,60,Follow._60_in_declarator_suffix713); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal90_tree = (object)adaptor.Create(char_literal90, retval);
				adaptor.AddChild(root_0, char_literal90_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:228:6: '[' ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(228, 6);
				char_literal91=(IToken)Match(input,59,Follow._59_in_declarator_suffix720); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal91_tree = (object)adaptor.Create(char_literal91, retval);
				adaptor.AddChild(root_0, char_literal91_tree);
				}
				DebugLocation(228, 10);
				char_literal92=(IToken)Match(input,60,Follow._60_in_declarator_suffix722); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal92_tree = (object)adaptor.Create(char_literal92, retval);
				adaptor.AddChild(root_0, char_literal92_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:229:6: '(' parameter_type_list ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(229, 6);
				char_literal93=(IToken)Match(input,30,Follow._30_in_declarator_suffix729); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal93_tree = (object)adaptor.Create(char_literal93, retval);
				adaptor.AddChild(root_0, char_literal93_tree);
				}
				DebugLocation(229, 10);
				PushFollow(Follow._parameter_type_list_in_declarator_suffix731);
				parameter_type_list94=parameter_type_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_type_list94.Tree, parameter_type_list94, retval);
				DebugLocation(229, 30);
				char_literal95=(IToken)Match(input,31,Follow._31_in_declarator_suffix733); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal95_tree = (object)adaptor.Create(char_literal95, retval);
				adaptor.AddChild(root_0, char_literal95_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:230:6: '(' identifier_list ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(230, 6);
				char_literal96=(IToken)Match(input,30,Follow._30_in_declarator_suffix740); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal96_tree = (object)adaptor.Create(char_literal96, retval);
				adaptor.AddChild(root_0, char_literal96_tree);
				}
				DebugLocation(230, 10);
				PushFollow(Follow._identifier_list_in_declarator_suffix742);
				identifier_list97=identifier_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier_list97.Tree, identifier_list97, retval);
				DebugLocation(230, 26);
				char_literal98=(IToken)Match(input,31,Follow._31_in_declarator_suffix744); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal98_tree = (object)adaptor.Create(char_literal98, retval);
				adaptor.AddChild(root_0, char_literal98_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:231:6: '(' ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(231, 6);
				char_literal99=(IToken)Match(input,30,Follow._30_in_declarator_suffix751); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal99_tree = (object)adaptor.Create(char_literal99, retval);
				adaptor.AddChild(root_0, char_literal99_tree);
				}
				DebugLocation(231, 10);
				char_literal100=(IToken)Match(input,31,Follow._31_in_declarator_suffix753); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal100_tree = (object)adaptor.Create(char_literal100, retval);
				adaptor.AddChild(root_0, char_literal100_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declarator_suffix", 24);
			LeaveRule("declarator_suffix", 24);
			LeaveRule_declarator_suffix();
			if (state.backtracking > 0) { Memoize(input, 24, declarator_suffix_StartIndex); }

		}
		DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "declarator_suffix"); }
		return retval;

	}
	// $ANTLR end "declarator_suffix"

	partial void EnterRule_pointer();
	partial void LeaveRule_pointer();

	// $ANTLR start "pointer"
	// C.g:234:1: pointer : ( '*' ( type_qualifier )+ ( pointer )? | '*' pointer | '*' );
	[GrammarRule("pointer")]
	public XAstParserRuleReturnScope pointer()
	{
		EnterRule_pointer();
		EnterRule("pointer", 25);
		var retval = new XAstParserRuleReturnScope("pointer");
		
		retval.Start = (IToken)input.LT(1);
		int pointer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal101 = default(IToken);
		IToken char_literal104 = default(IToken);
		IToken char_literal106 = default(IToken);
		XAstParserRuleReturnScope type_qualifier102 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope pointer103 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope pointer105 = default(XAstParserRuleReturnScope);

		object char_literal101_tree = default(object);
		object char_literal104_tree = default(object);
		object char_literal106_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "pointer");
		DebugLocation(234, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// C.g:235:2: ( '*' ( type_qualifier )+ ( pointer )? | '*' pointer | '*' )
			int alt30=3;
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==32))
			{
				switch (input.LA(2))
				{
				case 68:
				case 94:
					{
					int LA30_2 = input.LA(3);

					if ((EvaluatePredicate(synpred55_C_fragment)))
					{
						alt30 = 1;
					}
					else if ((true))
					{
						alt30 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 30, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 32:
					{
					int LA30_3 = input.LA(3);

					if ((EvaluatePredicate(synpred56_C_fragment)))
					{
						alt30 = 2;
					}
					else if ((true))
					{
						alt30 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 30, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case EOF:
				case IDENTIFIER:
				case 30:
				case 31:
				case 37:
				case 46:
				case 47:
				case 52:
				case 59:
				case 63:
				case 64:
				case 67:
				case 72:
				case 74:
				case 75:
				case 76:
				case 80:
				case 81:
				case 82:
				case 84:
				case 85:
				case 87:
				case 88:
				case 90:
				case 91:
				case 92:
				case 93:
				case 96:
					{
					alt30 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 30, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:235:4: '*' ( type_qualifier )+ ( pointer )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(235, 4);
				char_literal101=(IToken)Match(input,32,Follow._32_in_pointer764); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal101_tree = (object)adaptor.Create(char_literal101, retval);
				adaptor.AddChild(root_0, char_literal101_tree);
				}
				DebugLocation(235, 8);
				// C.g:235:8: ( type_qualifier )+
				int cnt28=0;
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, false);
					int LA28_0 = input.LA(1);

					if ((LA28_0==68||LA28_0==94))
					{
						int LA28_18 = input.LA(2);

						if ((EvaluatePredicate(synpred53_C_fragment)))
						{
							alt28 = 1;
						}


					}


					} finally { DebugExitDecision(28); }
					switch (alt28)
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:235:8: type_qualifier
						{
						DebugLocation(235, 8);
						PushFollow(Follow._type_qualifier_in_pointer766);
						type_qualifier102=type_qualifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier102.Tree, type_qualifier102, retval);

						}
						break;

					default:
						if (cnt28 >= 1)
							goto loop28;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee28 = new EarlyExitException( 28, input );
						DebugRecognitionException(eee28);
						throw eee28;
					}
					cnt28++;
				}
				loop28:
					;

				} finally { DebugExitSubRule(28); }

				DebugLocation(235, 24);
				// C.g:235:24: ( pointer )?
				int alt29=2;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==32))
				{
					int LA29_1 = input.LA(2);

					if ((EvaluatePredicate(synpred54_C_fragment)))
					{
						alt29 = 1;
					}
				}
				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:235:24: pointer
					{
					DebugLocation(235, 24);
					PushFollow(Follow._pointer_in_pointer769);
					pointer103=pointer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, pointer103.Tree, pointer103, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(29); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:236:4: '*' pointer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(236, 4);
				char_literal104=(IToken)Match(input,32,Follow._32_in_pointer775); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal104_tree = (object)adaptor.Create(char_literal104, retval);
				adaptor.AddChild(root_0, char_literal104_tree);
				}
				DebugLocation(236, 8);
				PushFollow(Follow._pointer_in_pointer777);
				pointer105=pointer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pointer105.Tree, pointer105, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:237:4: '*'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(237, 4);
				char_literal106=(IToken)Match(input,32,Follow._32_in_pointer782); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal106_tree = (object)adaptor.Create(char_literal106, retval);
				adaptor.AddChild(root_0, char_literal106_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pointer", 25);
			LeaveRule("pointer", 25);
			LeaveRule_pointer();
			if (state.backtracking > 0) { Memoize(input, 25, pointer_StartIndex); }

		}
		DebugLocation(238, 1);
		} finally { DebugExitRule(GrammarFileName, "pointer"); }
		return retval;

	}
	// $ANTLR end "pointer"

	partial void EnterRule_parameter_type_list();
	partial void LeaveRule_parameter_type_list();

	// $ANTLR start "parameter_type_list"
	// C.g:240:1: parameter_type_list : parameter_list ( ',' '...' )? ;
	[GrammarRule("parameter_type_list")]
	public XAstParserRuleReturnScope parameter_type_list()
	{
		EnterRule_parameter_type_list();
		EnterRule("parameter_type_list", 26);
		var retval = new XAstParserRuleReturnScope("parameter_type_list");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_type_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal108 = default(IToken);
		IToken string_literal109 = default(IToken);
		XAstParserRuleReturnScope parameter_list107 = default(XAstParserRuleReturnScope);

		object char_literal108_tree = default(object);
		object string_literal109_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parameter_type_list");
		DebugLocation(240, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// C.g:241:2: ( parameter_list ( ',' '...' )? )
			DebugEnterAlt(1);
			// C.g:241:4: parameter_list ( ',' '...' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(241, 4);
			PushFollow(Follow._parameter_list_in_parameter_type_list793);
			parameter_list107=parameter_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_list107.Tree, parameter_list107, retval);
			DebugLocation(241, 19);
			// C.g:241:19: ( ',' '...' )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==37))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:241:20: ',' '...'
				{
				DebugLocation(241, 20);
				char_literal108=(IToken)Match(input,37,Follow._37_in_parameter_type_list796); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal108_tree = (object)adaptor.Create(char_literal108, retval);
				adaptor.AddChild(root_0, char_literal108_tree);
				}
				DebugLocation(241, 24);
				string_literal109=(IToken)Match(input,43,Follow._43_in_parameter_type_list798); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal109_tree = (object)adaptor.Create(string_literal109, retval);
				adaptor.AddChild(root_0, string_literal109_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(31); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_type_list", 26);
			LeaveRule("parameter_type_list", 26);
			LeaveRule_parameter_type_list();
			if (state.backtracking > 0) { Memoize(input, 26, parameter_type_list_StartIndex); }

		}
		DebugLocation(242, 1);
		} finally { DebugExitRule(GrammarFileName, "parameter_type_list"); }
		return retval;

	}
	// $ANTLR end "parameter_type_list"

	partial void EnterRule_parameter_list();
	partial void LeaveRule_parameter_list();

	// $ANTLR start "parameter_list"
	// C.g:244:1: parameter_list : parameter_declaration ( ',' parameter_declaration )* ;
	[GrammarRule("parameter_list")]
	public XAstParserRuleReturnScope parameter_list()
	{
		EnterRule_parameter_list();
		EnterRule("parameter_list", 27);
		var retval = new XAstParserRuleReturnScope("parameter_list");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal111 = default(IToken);
		XAstParserRuleReturnScope parameter_declaration110 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope parameter_declaration112 = default(XAstParserRuleReturnScope);

		object char_literal111_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parameter_list");
		DebugLocation(244, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// C.g:245:2: ( parameter_declaration ( ',' parameter_declaration )* )
			DebugEnterAlt(1);
			// C.g:245:4: parameter_declaration ( ',' parameter_declaration )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(245, 4);
			PushFollow(Follow._parameter_declaration_in_parameter_list811);
			parameter_declaration110=parameter_declaration();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_declaration110.Tree, parameter_declaration110, retval);
			DebugLocation(245, 26);
			// C.g:245:26: ( ',' parameter_declaration )*
			try { DebugEnterSubRule(32);
			while (true)
			{
				int alt32=2;
				try { DebugEnterDecision(32, false);
				int LA32_0 = input.LA(1);

				if ((LA32_0==37))
				{
					int LA32_1 = input.LA(2);

					if ((LA32_1==IDENTIFIER||(LA32_1>=63 && LA32_1<=64)||(LA32_1>=67 && LA32_1<=68)||LA32_1==72||(LA32_1>=74 && LA32_1<=76)||(LA32_1>=80 && LA32_1<=82)||(LA32_1>=84 && LA32_1<=85)||(LA32_1>=87 && LA32_1<=88)||(LA32_1>=91 && LA32_1<=94)))
					{
						alt32 = 1;
					}


				}


				} finally { DebugExitDecision(32); }
				switch ( alt32 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:245:27: ',' parameter_declaration
					{
					DebugLocation(245, 27);
					char_literal111=(IToken)Match(input,37,Follow._37_in_parameter_list814); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal111_tree = (object)adaptor.Create(char_literal111, retval);
					adaptor.AddChild(root_0, char_literal111_tree);
					}
					DebugLocation(245, 31);
					PushFollow(Follow._parameter_declaration_in_parameter_list816);
					parameter_declaration112=parameter_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_declaration112.Tree, parameter_declaration112, retval);

					}
					break;

				default:
					goto loop32;
				}
			}

			loop32:
				;

			} finally { DebugExitSubRule(32); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_list", 27);
			LeaveRule("parameter_list", 27);
			LeaveRule_parameter_list();
			if (state.backtracking > 0) { Memoize(input, 27, parameter_list_StartIndex); }

		}
		DebugLocation(246, 1);
		} finally { DebugExitRule(GrammarFileName, "parameter_list"); }
		return retval;

	}
	// $ANTLR end "parameter_list"

	partial void EnterRule_parameter_declaration();
	partial void LeaveRule_parameter_declaration();

	// $ANTLR start "parameter_declaration"
	// C.g:248:1: parameter_declaration : declaration_specifiers ( declarator | abstract_declarator )* ;
	[GrammarRule("parameter_declaration")]
	public XAstParserRuleReturnScope parameter_declaration()
	{
		EnterRule_parameter_declaration();
		EnterRule("parameter_declaration", 28);
		var retval = new XAstParserRuleReturnScope("parameter_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope declaration_specifiers113 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator114 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator115 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "parameter_declaration");
		DebugLocation(248, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// C.g:249:2: ( declaration_specifiers ( declarator | abstract_declarator )* )
			DebugEnterAlt(1);
			// C.g:249:4: declaration_specifiers ( declarator | abstract_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(249, 4);
			PushFollow(Follow._declaration_specifiers_in_parameter_declaration829);
			declaration_specifiers113=declaration_specifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers113.Tree, declaration_specifiers113, retval);
			DebugLocation(249, 27);
			// C.g:249:27: ( declarator | abstract_declarator )*
			try { DebugEnterSubRule(33);
			while (true)
			{
				int alt33=3;
				try { DebugEnterDecision(33, false);
				switch (input.LA(1))
				{
				case 32:
					{
					int LA33_4 = input.LA(2);

					if ((EvaluatePredicate(synpred59_C_fragment)))
					{
						alt33 = 1;
					}
					else if ((EvaluatePredicate(synpred60_C_fragment)))
					{
						alt33 = 2;
					}


					}
					break;
				case IDENTIFIER:
					{
					alt33 = 1;
					}
					break;
				case 30:
					{
					switch (input.LA(2))
					{
					case 31:
					case 59:
					case 63:
					case 64:
					case 67:
					case 68:
					case 72:
					case 74:
					case 75:
					case 76:
					case 80:
					case 81:
					case 82:
					case 84:
					case 85:
					case 87:
					case 88:
					case 91:
					case 92:
					case 93:
					case 94:
						{
						alt33 = 2;
						}
						break;
					case 32:
						{
						int LA33_17 = input.LA(3);

						if ((EvaluatePredicate(synpred59_C_fragment)))
						{
							alt33 = 1;
						}
						else if ((EvaluatePredicate(synpred60_C_fragment)))
						{
							alt33 = 2;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA33_18 = input.LA(3);

						if ((EvaluatePredicate(synpred59_C_fragment)))
						{
							alt33 = 1;
						}
						else if ((EvaluatePredicate(synpred60_C_fragment)))
						{
							alt33 = 2;
						}


						}
						break;
					case 30:
						{
						int LA33_19 = input.LA(3);

						if ((EvaluatePredicate(synpred59_C_fragment)))
						{
							alt33 = 1;
						}
						else if ((EvaluatePredicate(synpred60_C_fragment)))
						{
							alt33 = 2;
						}


						}
						break;
					}

					}
					break;
				case 59:
					{
					alt33 = 2;
					}
					break;
				}

				} finally { DebugExitDecision(33); }
				switch ( alt33 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:249:28: declarator
					{
					DebugLocation(249, 28);
					PushFollow(Follow._declarator_in_parameter_declaration832);
					declarator114=declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declarator114.Tree, declarator114, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:249:39: abstract_declarator
					{
					DebugLocation(249, 39);
					PushFollow(Follow._abstract_declarator_in_parameter_declaration834);
					abstract_declarator115=abstract_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator115.Tree, abstract_declarator115, retval);

					}
					break;

				default:
					goto loop33;
				}
			}

			loop33:
				;

			} finally { DebugExitSubRule(33); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_declaration", 28);
			LeaveRule("parameter_declaration", 28);
			LeaveRule_parameter_declaration();
			if (state.backtracking > 0) { Memoize(input, 28, parameter_declaration_StartIndex); }

		}
		DebugLocation(250, 1);
		} finally { DebugExitRule(GrammarFileName, "parameter_declaration"); }
		return retval;

	}
	// $ANTLR end "parameter_declaration"

	partial void EnterRule_identifier_list();
	partial void LeaveRule_identifier_list();

	// $ANTLR start "identifier_list"
	// C.g:252:1: identifier_list : IDENTIFIER ( ',' IDENTIFIER )* ;
	[GrammarRule("identifier_list")]
	public XAstParserRuleReturnScope identifier_list()
	{
		EnterRule_identifier_list();
		EnterRule("identifier_list", 29);
		var retval = new XAstParserRuleReturnScope("identifier_list");
		
		retval.Start = (IToken)input.LT(1);
		int identifier_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER116 = default(IToken);
		IToken char_literal117 = default(IToken);
		IToken IDENTIFIER118 = default(IToken);

		object IDENTIFIER116_tree = default(object);
		object char_literal117_tree = default(object);
		object IDENTIFIER118_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "identifier_list");
		DebugLocation(252, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// C.g:253:2: ( IDENTIFIER ( ',' IDENTIFIER )* )
			DebugEnterAlt(1);
			// C.g:253:4: IDENTIFIER ( ',' IDENTIFIER )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(253, 4);
			IDENTIFIER116=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifier_list847), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER116_tree = (object)adaptor.Create(IDENTIFIER116, retval);
			adaptor.AddChild(root_0, IDENTIFIER116_tree);
			}
			DebugLocation(253, 15);
			// C.g:253:15: ( ',' IDENTIFIER )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_0 = input.LA(1);

				if ((LA34_0==37))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:253:16: ',' IDENTIFIER
					{
					DebugLocation(253, 16);
					char_literal117=(IToken)Match(input,37,Follow._37_in_identifier_list850); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal117_tree = (object)adaptor.Create(char_literal117, retval);
					adaptor.AddChild(root_0, char_literal117_tree);
					}
					DebugLocation(253, 20);
					IDENTIFIER118=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifier_list852), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER118_tree = (object)adaptor.Create(IDENTIFIER118, retval);
					adaptor.AddChild(root_0, IDENTIFIER118_tree);
					}

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("identifier_list", 29);
			LeaveRule("identifier_list", 29);
			LeaveRule_identifier_list();
			if (state.backtracking > 0) { Memoize(input, 29, identifier_list_StartIndex); }

		}
		DebugLocation(254, 1);
		} finally { DebugExitRule(GrammarFileName, "identifier_list"); }
		return retval;

	}
	// $ANTLR end "identifier_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// C.g:256:1: type_name : specifier_qualifier_list ( abstract_declarator )? ;
	[GrammarRule("type_name")]
	public XAstParserRuleReturnScope type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 30);
		var retval = new XAstParserRuleReturnScope("type_name");
		
		retval.Start = (IToken)input.LT(1);
		int type_name_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope specifier_qualifier_list119 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator120 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(256, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// C.g:257:2: ( specifier_qualifier_list ( abstract_declarator )? )
			DebugEnterAlt(1);
			// C.g:257:4: specifier_qualifier_list ( abstract_declarator )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(257, 4);
			PushFollow(Follow._specifier_qualifier_list_in_type_name865);
			specifier_qualifier_list119=specifier_qualifier_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, specifier_qualifier_list119.Tree, specifier_qualifier_list119, retval);
			DebugLocation(257, 29);
			// C.g:257:29: ( abstract_declarator )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==30||LA35_0==32||LA35_0==59))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:257:29: abstract_declarator
				{
				DebugLocation(257, 29);
				PushFollow(Follow._abstract_declarator_in_type_name867);
				abstract_declarator120=abstract_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator120.Tree, abstract_declarator120, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(35); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 30);
			LeaveRule("type_name", 30);
			LeaveRule_type_name();
			if (state.backtracking > 0) { Memoize(input, 30, type_name_StartIndex); }

		}
		DebugLocation(258, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_abstract_declarator();
	partial void LeaveRule_abstract_declarator();

	// $ANTLR start "abstract_declarator"
	// C.g:260:1: abstract_declarator : ( pointer ( direct_abstract_declarator )? | direct_abstract_declarator );
	[GrammarRule("abstract_declarator")]
	public XAstParserRuleReturnScope abstract_declarator()
	{
		EnterRule_abstract_declarator();
		EnterRule("abstract_declarator", 31);
		var retval = new XAstParserRuleReturnScope("abstract_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int abstract_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope pointer121 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope direct_abstract_declarator122 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope direct_abstract_declarator123 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "abstract_declarator");
		DebugLocation(260, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// C.g:261:2: ( pointer ( direct_abstract_declarator )? | direct_abstract_declarator )
			int alt37=2;
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==32))
			{
				alt37 = 1;
			}
			else if ((LA37_0==30||LA37_0==59))
			{
				alt37 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:261:4: pointer ( direct_abstract_declarator )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(261, 4);
				PushFollow(Follow._pointer_in_abstract_declarator879);
				pointer121=pointer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pointer121.Tree, pointer121, retval);
				DebugLocation(261, 12);
				// C.g:261:12: ( direct_abstract_declarator )?
				int alt36=2;
				try { DebugEnterSubRule(36);
				try { DebugEnterDecision(36, false);
				int LA36_0 = input.LA(1);

				if ((LA36_0==30))
				{
					switch (input.LA(2))
					{
					case 31:
						{
						int LA36_8 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 32:
						{
						int LA36_9 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 30:
						{
						int LA36_10 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 59:
						{
						int LA36_11 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 64:
					case 75:
					case 82:
					case 87:
						{
						int LA36_12 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 93:
						{
						int LA36_13 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 67:
						{
						int LA36_14 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 84:
						{
						int LA36_15 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 80:
						{
						int LA36_16 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 81:
						{
						int LA36_17 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 76:
						{
						int LA36_18 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 72:
						{
						int LA36_19 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 85:
						{
						int LA36_20 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 92:
						{
						int LA36_21 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 63:
						{
						int LA36_22 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 88:
					case 91:
						{
						int LA36_23 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 74:
						{
						int LA36_24 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case IDENTIFIER:
						{
						int LA36_25 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 68:
					case 94:
						{
						int LA36_26 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					}

				}
				else if ((LA36_0==59))
				{
					switch (input.LA(2))
					{
					case 60:
						{
						int LA36_27 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 30:
						{
						int LA36_28 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case IDENTIFIER:
						{
						int LA36_29 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case HEX_LITERAL:
						{
						int LA36_30 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case OCTAL_LITERAL:
						{
						int LA36_31 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case DECIMAL_LITERAL:
						{
						int LA36_32 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case CHARACTER_LITERAL:
						{
						int LA36_33 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case STRING_LITERAL:
						{
						int LA36_34 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case FLOATING_POINT_LITERAL:
						{
						int LA36_35 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 35:
						{
						int LA36_36 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 39:
						{
						int LA36_37 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 23:
					case 28:
					case 32:
					case 34:
					case 38:
					case 101:
						{
						int LA36_38 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					case 86:
						{
						int LA36_39 = input.LA(3);

						if ((EvaluatePredicate(synpred63_C_fragment)))
						{
							alt36 = 1;
						}
						}
						break;
					}

				}
				} finally { DebugExitDecision(36); }
				switch (alt36)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:261:12: direct_abstract_declarator
					{
					DebugLocation(261, 12);
					PushFollow(Follow._direct_abstract_declarator_in_abstract_declarator881);
					direct_abstract_declarator122=direct_abstract_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, direct_abstract_declarator122.Tree, direct_abstract_declarator122, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(36); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:262:4: direct_abstract_declarator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(262, 4);
				PushFollow(Follow._direct_abstract_declarator_in_abstract_declarator887);
				direct_abstract_declarator123=direct_abstract_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, direct_abstract_declarator123.Tree, direct_abstract_declarator123, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("abstract_declarator", 31);
			LeaveRule("abstract_declarator", 31);
			LeaveRule_abstract_declarator();
			if (state.backtracking > 0) { Memoize(input, 31, abstract_declarator_StartIndex); }

		}
		DebugLocation(263, 1);
		} finally { DebugExitRule(GrammarFileName, "abstract_declarator"); }
		return retval;

	}
	// $ANTLR end "abstract_declarator"

	partial void EnterRule_direct_abstract_declarator();
	partial void LeaveRule_direct_abstract_declarator();

	// $ANTLR start "direct_abstract_declarator"
	// C.g:265:1: direct_abstract_declarator : ( '(' abstract_declarator ')' | abstract_declarator_suffix ) ( abstract_declarator_suffix )* ;
	[GrammarRule("direct_abstract_declarator")]
	public XAstParserRuleReturnScope direct_abstract_declarator()
	{
		EnterRule_direct_abstract_declarator();
		EnterRule("direct_abstract_declarator", 32);
		var retval = new XAstParserRuleReturnScope("direct_abstract_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int direct_abstract_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal124 = default(IToken);
		IToken char_literal126 = default(IToken);
		XAstParserRuleReturnScope abstract_declarator125 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator_suffix127 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator_suffix128 = default(XAstParserRuleReturnScope);

		object char_literal124_tree = default(object);
		object char_literal126_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "direct_abstract_declarator");
		DebugLocation(265, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// C.g:266:2: ( ( '(' abstract_declarator ')' | abstract_declarator_suffix ) ( abstract_declarator_suffix )* )
			DebugEnterAlt(1);
			// C.g:266:4: ( '(' abstract_declarator ')' | abstract_declarator_suffix ) ( abstract_declarator_suffix )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(266, 4);
			// C.g:266:4: ( '(' abstract_declarator ')' | abstract_declarator_suffix )
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==30))
			{
				int LA38_1 = input.LA(2);

				if ((LA38_1==IDENTIFIER||LA38_1==31||(LA38_1>=63 && LA38_1<=64)||(LA38_1>=67 && LA38_1<=68)||LA38_1==72||(LA38_1>=74 && LA38_1<=76)||(LA38_1>=80 && LA38_1<=82)||(LA38_1>=84 && LA38_1<=85)||(LA38_1>=87 && LA38_1<=88)||(LA38_1>=91 && LA38_1<=94)))
				{
					alt38 = 2;
				}
				else if ((LA38_1==30||LA38_1==32||LA38_1==59))
				{
					alt38 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA38_0==59))
			{
				alt38 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:266:6: '(' abstract_declarator ')'
				{
				DebugLocation(266, 6);
				char_literal124=(IToken)Match(input,30,Follow._30_in_direct_abstract_declarator900); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal124_tree = (object)adaptor.Create(char_literal124, retval);
				adaptor.AddChild(root_0, char_literal124_tree);
				}
				DebugLocation(266, 10);
				PushFollow(Follow._abstract_declarator_in_direct_abstract_declarator902);
				abstract_declarator125=abstract_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator125.Tree, abstract_declarator125, retval);
				DebugLocation(266, 30);
				char_literal126=(IToken)Match(input,31,Follow._31_in_direct_abstract_declarator904); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal126_tree = (object)adaptor.Create(char_literal126, retval);
				adaptor.AddChild(root_0, char_literal126_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:266:36: abstract_declarator_suffix
				{
				DebugLocation(266, 36);
				PushFollow(Follow._abstract_declarator_suffix_in_direct_abstract_declarator908);
				abstract_declarator_suffix127=abstract_declarator_suffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator_suffix127.Tree, abstract_declarator_suffix127, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(266, 65);
			// C.g:266:65: ( abstract_declarator_suffix )*
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==30))
				{
					switch (input.LA(2))
					{
					case 31:
						{
						int LA39_8 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA39_10 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 64:
					case 75:
					case 82:
					case 87:
						{
						int LA39_13 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 93:
						{
						int LA39_14 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 67:
						{
						int LA39_15 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 84:
						{
						int LA39_16 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 80:
						{
						int LA39_17 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 81:
						{
						int LA39_18 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 76:
						{
						int LA39_19 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 72:
						{
						int LA39_20 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 85:
						{
						int LA39_21 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 92:
						{
						int LA39_22 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 63:
						{
						int LA39_23 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 88:
					case 91:
						{
						int LA39_24 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 74:
						{
						int LA39_25 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 68:
					case 94:
						{
						int LA39_26 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					}

				}
				else if ((LA39_0==59))
				{
					switch (input.LA(2))
					{
					case 60:
						{
						int LA39_27 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 30:
						{
						int LA39_28 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA39_29 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case HEX_LITERAL:
						{
						int LA39_30 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case OCTAL_LITERAL:
						{
						int LA39_31 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case DECIMAL_LITERAL:
						{
						int LA39_32 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case CHARACTER_LITERAL:
						{
						int LA39_33 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case STRING_LITERAL:
						{
						int LA39_34 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case FLOATING_POINT_LITERAL:
						{
						int LA39_35 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 35:
						{
						int LA39_36 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 39:
						{
						int LA39_37 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 23:
					case 28:
					case 32:
					case 34:
					case 38:
					case 101:
						{
						int LA39_38 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					case 86:
						{
						int LA39_39 = input.LA(3);

						if ((EvaluatePredicate(synpred66_C_fragment)))
						{
							alt39 = 1;
						}


						}
						break;
					}

				}


				} finally { DebugExitDecision(39); }
				switch ( alt39 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:266:65: abstract_declarator_suffix
					{
					DebugLocation(266, 65);
					PushFollow(Follow._abstract_declarator_suffix_in_direct_abstract_declarator912);
					abstract_declarator_suffix128=abstract_declarator_suffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator_suffix128.Tree, abstract_declarator_suffix128, retval);

					}
					break;

				default:
					goto loop39;
				}
			}

			loop39:
				;

			} finally { DebugExitSubRule(39); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("direct_abstract_declarator", 32);
			LeaveRule("direct_abstract_declarator", 32);
			LeaveRule_direct_abstract_declarator();
			if (state.backtracking > 0) { Memoize(input, 32, direct_abstract_declarator_StartIndex); }

		}
		DebugLocation(267, 1);
		} finally { DebugExitRule(GrammarFileName, "direct_abstract_declarator"); }
		return retval;

	}
	// $ANTLR end "direct_abstract_declarator"

	partial void EnterRule_abstract_declarator_suffix();
	partial void LeaveRule_abstract_declarator_suffix();

	// $ANTLR start "abstract_declarator_suffix"
	// C.g:269:1: abstract_declarator_suffix : ( '[' ']' | '[' constant_expression ']' | '(' ')' | '(' parameter_type_list ')' );
	[GrammarRule("abstract_declarator_suffix")]
	public XAstParserRuleReturnScope abstract_declarator_suffix()
	{
		EnterRule_abstract_declarator_suffix();
		EnterRule("abstract_declarator_suffix", 33);
		var retval = new XAstParserRuleReturnScope("abstract_declarator_suffix");
		
		retval.Start = (IToken)input.LT(1);
		int abstract_declarator_suffix_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal129 = default(IToken);
		IToken char_literal130 = default(IToken);
		IToken char_literal131 = default(IToken);
		IToken char_literal133 = default(IToken);
		IToken char_literal134 = default(IToken);
		IToken char_literal135 = default(IToken);
		IToken char_literal136 = default(IToken);
		IToken char_literal138 = default(IToken);
		XAstParserRuleReturnScope constant_expression132 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope parameter_type_list137 = default(XAstParserRuleReturnScope);

		object char_literal129_tree = default(object);
		object char_literal130_tree = default(object);
		object char_literal131_tree = default(object);
		object char_literal133_tree = default(object);
		object char_literal134_tree = default(object);
		object char_literal135_tree = default(object);
		object char_literal136_tree = default(object);
		object char_literal138_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "abstract_declarator_suffix");
		DebugLocation(269, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// C.g:270:2: ( '[' ']' | '[' constant_expression ']' | '(' ')' | '(' parameter_type_list ')' )
			int alt40=4;
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==59))
			{
				int LA40_1 = input.LA(2);

				if ((LA40_1==60))
				{
					alt40 = 1;
				}
				else if ((LA40_1==CHARACTER_LITERAL||LA40_1==DECIMAL_LITERAL||LA40_1==FLOATING_POINT_LITERAL||LA40_1==HEX_LITERAL||LA40_1==IDENTIFIER||LA40_1==OCTAL_LITERAL||LA40_1==STRING_LITERAL||LA40_1==23||LA40_1==28||LA40_1==30||LA40_1==32||(LA40_1>=34 && LA40_1<=35)||(LA40_1>=38 && LA40_1<=39)||LA40_1==86||LA40_1==101))
				{
					alt40 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 40, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA40_0==30))
			{
				int LA40_2 = input.LA(2);

				if ((LA40_2==31))
				{
					alt40 = 3;
				}
				else if ((LA40_2==IDENTIFIER||(LA40_2>=63 && LA40_2<=64)||(LA40_2>=67 && LA40_2<=68)||LA40_2==72||(LA40_2>=74 && LA40_2<=76)||(LA40_2>=80 && LA40_2<=82)||(LA40_2>=84 && LA40_2<=85)||(LA40_2>=87 && LA40_2<=88)||(LA40_2>=91 && LA40_2<=94)))
				{
					alt40 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 40, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 40, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:270:4: '[' ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(270, 4);
				char_literal129=(IToken)Match(input,59,Follow._59_in_abstract_declarator_suffix924); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal129_tree = (object)adaptor.Create(char_literal129, retval);
				adaptor.AddChild(root_0, char_literal129_tree);
				}
				DebugLocation(270, 8);
				char_literal130=(IToken)Match(input,60,Follow._60_in_abstract_declarator_suffix926); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal130_tree = (object)adaptor.Create(char_literal130, retval);
				adaptor.AddChild(root_0, char_literal130_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:271:4: '[' constant_expression ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(271, 4);
				char_literal131=(IToken)Match(input,59,Follow._59_in_abstract_declarator_suffix931); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal131_tree = (object)adaptor.Create(char_literal131, retval);
				adaptor.AddChild(root_0, char_literal131_tree);
				}
				DebugLocation(271, 8);
				PushFollow(Follow._constant_expression_in_abstract_declarator_suffix933);
				constant_expression132=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression132.Tree, constant_expression132, retval);
				DebugLocation(271, 28);
				char_literal133=(IToken)Match(input,60,Follow._60_in_abstract_declarator_suffix935); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal133_tree = (object)adaptor.Create(char_literal133, retval);
				adaptor.AddChild(root_0, char_literal133_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:272:4: '(' ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(272, 4);
				char_literal134=(IToken)Match(input,30,Follow._30_in_abstract_declarator_suffix940); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal134_tree = (object)adaptor.Create(char_literal134, retval);
				adaptor.AddChild(root_0, char_literal134_tree);
				}
				DebugLocation(272, 8);
				char_literal135=(IToken)Match(input,31,Follow._31_in_abstract_declarator_suffix942); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal135_tree = (object)adaptor.Create(char_literal135, retval);
				adaptor.AddChild(root_0, char_literal135_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:273:4: '(' parameter_type_list ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(273, 4);
				char_literal136=(IToken)Match(input,30,Follow._30_in_abstract_declarator_suffix947); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal136_tree = (object)adaptor.Create(char_literal136, retval);
				adaptor.AddChild(root_0, char_literal136_tree);
				}
				DebugLocation(273, 8);
				PushFollow(Follow._parameter_type_list_in_abstract_declarator_suffix949);
				parameter_type_list137=parameter_type_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_type_list137.Tree, parameter_type_list137, retval);
				DebugLocation(273, 28);
				char_literal138=(IToken)Match(input,31,Follow._31_in_abstract_declarator_suffix951); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal138_tree = (object)adaptor.Create(char_literal138, retval);
				adaptor.AddChild(root_0, char_literal138_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("abstract_declarator_suffix", 33);
			LeaveRule("abstract_declarator_suffix", 33);
			LeaveRule_abstract_declarator_suffix();
			if (state.backtracking > 0) { Memoize(input, 33, abstract_declarator_suffix_StartIndex); }

		}
		DebugLocation(274, 1);
		} finally { DebugExitRule(GrammarFileName, "abstract_declarator_suffix"); }
		return retval;

	}
	// $ANTLR end "abstract_declarator_suffix"

	partial void EnterRule_initializer();
	partial void LeaveRule_initializer();

	// $ANTLR start "initializer"
	// C.g:276:1: initializer : ( assignment_expression | '{' initializer_list ( ',' )? '}' );
	[GrammarRule("initializer")]
	public XAstParserRuleReturnScope initializer()
	{
		EnterRule_initializer();
		EnterRule("initializer", 34);
		var retval = new XAstParserRuleReturnScope("initializer");
		
		retval.Start = (IToken)input.LT(1);
		int initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal140 = default(IToken);
		IToken char_literal142 = default(IToken);
		IToken char_literal143 = default(IToken);
		XAstParserRuleReturnScope assignment_expression139 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope initializer_list141 = default(XAstParserRuleReturnScope);

		object char_literal140_tree = default(object);
		object char_literal142_tree = default(object);
		object char_literal143_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "initializer");
		DebugLocation(276, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// C.g:277:2: ( assignment_expression | '{' initializer_list ( ',' )? '}' )
			int alt42=2;
			try { DebugEnterDecision(42, false);
			int LA42_0 = input.LA(1);

			if ((LA42_0==CHARACTER_LITERAL||LA42_0==DECIMAL_LITERAL||LA42_0==FLOATING_POINT_LITERAL||LA42_0==HEX_LITERAL||LA42_0==IDENTIFIER||LA42_0==OCTAL_LITERAL||LA42_0==STRING_LITERAL||LA42_0==23||LA42_0==28||LA42_0==30||LA42_0==32||(LA42_0>=34 && LA42_0<=35)||(LA42_0>=38 && LA42_0<=39)||LA42_0==86||LA42_0==101))
			{
				alt42 = 1;
			}
			else if ((LA42_0==96))
			{
				alt42 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 42, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:277:4: assignment_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(277, 4);
				PushFollow(Follow._assignment_expression_in_initializer963);
				assignment_expression139=assignment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression139.Tree, assignment_expression139, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:278:4: '{' initializer_list ( ',' )? '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(278, 4);
				char_literal140=(IToken)Match(input,96,Follow._96_in_initializer968); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal140_tree = (object)adaptor.Create(char_literal140, retval);
				adaptor.AddChild(root_0, char_literal140_tree);
				}
				DebugLocation(278, 8);
				PushFollow(Follow._initializer_list_in_initializer970);
				initializer_list141=initializer_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, initializer_list141.Tree, initializer_list141, retval);
				DebugLocation(278, 25);
				// C.g:278:25: ( ',' )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==37))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:278:25: ','
					{
					DebugLocation(278, 25);
					char_literal142=(IToken)Match(input,37,Follow._37_in_initializer972); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal142_tree = (object)adaptor.Create(char_literal142, retval);
					adaptor.AddChild(root_0, char_literal142_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(41); }

				DebugLocation(278, 30);
				char_literal143=(IToken)Match(input,100,Follow._100_in_initializer975); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal143_tree = (object)adaptor.Create(char_literal143, retval);
				adaptor.AddChild(root_0, char_literal143_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("initializer", 34);
			LeaveRule("initializer", 34);
			LeaveRule_initializer();
			if (state.backtracking > 0) { Memoize(input, 34, initializer_StartIndex); }

		}
		DebugLocation(279, 1);
		} finally { DebugExitRule(GrammarFileName, "initializer"); }
		return retval;

	}
	// $ANTLR end "initializer"

	partial void EnterRule_initializer_list();
	partial void LeaveRule_initializer_list();

	// $ANTLR start "initializer_list"
	// C.g:281:1: initializer_list : initializer ( ',' initializer )* ;
	[GrammarRule("initializer_list")]
	public XAstParserRuleReturnScope initializer_list()
	{
		EnterRule_initializer_list();
		EnterRule("initializer_list", 35);
		var retval = new XAstParserRuleReturnScope("initializer_list");
		
		retval.Start = (IToken)input.LT(1);
		int initializer_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal145 = default(IToken);
		XAstParserRuleReturnScope initializer144 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope initializer146 = default(XAstParserRuleReturnScope);

		object char_literal145_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "initializer_list");
		DebugLocation(281, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// C.g:282:2: ( initializer ( ',' initializer )* )
			DebugEnterAlt(1);
			// C.g:282:4: initializer ( ',' initializer )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(282, 4);
			PushFollow(Follow._initializer_in_initializer_list986);
			initializer144=initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, initializer144.Tree, initializer144, retval);
			DebugLocation(282, 16);
			// C.g:282:16: ( ',' initializer )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==37))
				{
					int LA43_1 = input.LA(2);

					if ((LA43_1==CHARACTER_LITERAL||LA43_1==DECIMAL_LITERAL||LA43_1==FLOATING_POINT_LITERAL||LA43_1==HEX_LITERAL||LA43_1==IDENTIFIER||LA43_1==OCTAL_LITERAL||LA43_1==STRING_LITERAL||LA43_1==23||LA43_1==28||LA43_1==30||LA43_1==32||(LA43_1>=34 && LA43_1<=35)||(LA43_1>=38 && LA43_1<=39)||LA43_1==86||LA43_1==96||LA43_1==101))
					{
						alt43 = 1;
					}


				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:282:17: ',' initializer
					{
					DebugLocation(282, 17);
					char_literal145=(IToken)Match(input,37,Follow._37_in_initializer_list989); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal145_tree = (object)adaptor.Create(char_literal145, retval);
					adaptor.AddChild(root_0, char_literal145_tree);
					}
					DebugLocation(282, 21);
					PushFollow(Follow._initializer_in_initializer_list991);
					initializer146=initializer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, initializer146.Tree, initializer146, retval);

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("initializer_list", 35);
			LeaveRule("initializer_list", 35);
			LeaveRule_initializer_list();
			if (state.backtracking > 0) { Memoize(input, 35, initializer_list_StartIndex); }

		}
		DebugLocation(283, 1);
		} finally { DebugExitRule(GrammarFileName, "initializer_list"); }
		return retval;

	}
	// $ANTLR end "initializer_list"

	partial void EnterRule_argument_expression_list();
	partial void LeaveRule_argument_expression_list();

	// $ANTLR start "argument_expression_list"
	// C.g:287:1: argument_expression_list : assignment_expression ( ',' assignment_expression )* ;
	[GrammarRule("argument_expression_list")]
	public XAstParserRuleReturnScope argument_expression_list()
	{
		EnterRule_argument_expression_list();
		EnterRule("argument_expression_list", 36);
		var retval = new XAstParserRuleReturnScope("argument_expression_list");
		
		retval.Start = (IToken)input.LT(1);
		int argument_expression_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal148 = default(IToken);
		XAstParserRuleReturnScope assignment_expression147 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression149 = default(XAstParserRuleReturnScope);

		object char_literal148_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "argument_expression_list");
		DebugLocation(287, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// C.g:288:2: ( assignment_expression ( ',' assignment_expression )* )
			DebugEnterAlt(1);
			// C.g:288:6: assignment_expression ( ',' assignment_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(288, 6);
			PushFollow(Follow._assignment_expression_in_argument_expression_list1008);
			assignment_expression147=assignment_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression147.Tree, assignment_expression147, retval);
			DebugLocation(288, 28);
			// C.g:288:28: ( ',' assignment_expression )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==37))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:288:29: ',' assignment_expression
					{
					DebugLocation(288, 29);
					char_literal148=(IToken)Match(input,37,Follow._37_in_argument_expression_list1011); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal148_tree = (object)adaptor.Create(char_literal148, retval);
					adaptor.AddChild(root_0, char_literal148_tree);
					}
					DebugLocation(288, 33);
					PushFollow(Follow._assignment_expression_in_argument_expression_list1013);
					assignment_expression149=assignment_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression149.Tree, assignment_expression149, retval);

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("argument_expression_list", 36);
			LeaveRule("argument_expression_list", 36);
			LeaveRule_argument_expression_list();
			if (state.backtracking > 0) { Memoize(input, 36, argument_expression_list_StartIndex); }

		}
		DebugLocation(289, 1);
		} finally { DebugExitRule(GrammarFileName, "argument_expression_list"); }
		return retval;

	}
	// $ANTLR end "argument_expression_list"

	partial void EnterRule_additive_expression();
	partial void LeaveRule_additive_expression();

	// $ANTLR start "additive_expression"
	// C.g:291:1: additive_expression : ( multiplicative_expression ) ( '+' multiplicative_expression | '-' multiplicative_expression )* ;
	[GrammarRule("additive_expression")]
	public XAstParserRuleReturnScope additive_expression()
	{
		EnterRule_additive_expression();
		EnterRule("additive_expression", 37);
		var retval = new XAstParserRuleReturnScope("additive_expression");
		
		retval.Start = (IToken)input.LT(1);
		int additive_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal151 = default(IToken);
		IToken char_literal153 = default(IToken);
		XAstParserRuleReturnScope multiplicative_expression150 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope multiplicative_expression152 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope multiplicative_expression154 = default(XAstParserRuleReturnScope);

		object char_literal151_tree = default(object);
		object char_literal153_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "additive_expression");
		DebugLocation(291, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// C.g:292:2: ( ( multiplicative_expression ) ( '+' multiplicative_expression | '-' multiplicative_expression )* )
			DebugEnterAlt(1);
			// C.g:292:4: ( multiplicative_expression ) ( '+' multiplicative_expression | '-' multiplicative_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(292, 4);
			// C.g:292:4: ( multiplicative_expression )
			DebugEnterAlt(1);
			// C.g:292:5: multiplicative_expression
			{
			DebugLocation(292, 5);
			PushFollow(Follow._multiplicative_expression_in_additive_expression1027);
			multiplicative_expression150=multiplicative_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression150.Tree, multiplicative_expression150, retval);

			}

			DebugLocation(292, 32);
			// C.g:292:32: ( '+' multiplicative_expression | '-' multiplicative_expression )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=3;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==34))
				{
					alt45 = 1;
				}
				else if ((LA45_0==38))
				{
					alt45 = 2;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:292:33: '+' multiplicative_expression
					{
					DebugLocation(292, 33);
					char_literal151=(IToken)Match(input,34,Follow._34_in_additive_expression1031); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal151_tree = (object)adaptor.Create(char_literal151, retval);
					adaptor.AddChild(root_0, char_literal151_tree);
					}
					DebugLocation(292, 37);
					PushFollow(Follow._multiplicative_expression_in_additive_expression1033);
					multiplicative_expression152=multiplicative_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression152.Tree, multiplicative_expression152, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:292:65: '-' multiplicative_expression
					{
					DebugLocation(292, 65);
					char_literal153=(IToken)Match(input,38,Follow._38_in_additive_expression1037); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal153_tree = (object)adaptor.Create(char_literal153, retval);
					adaptor.AddChild(root_0, char_literal153_tree);
					}
					DebugLocation(292, 69);
					PushFollow(Follow._multiplicative_expression_in_additive_expression1039);
					multiplicative_expression154=multiplicative_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression154.Tree, multiplicative_expression154, retval);

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additive_expression", 37);
			LeaveRule("additive_expression", 37);
			LeaveRule_additive_expression();
			if (state.backtracking > 0) { Memoize(input, 37, additive_expression_StartIndex); }

		}
		DebugLocation(293, 1);
		} finally { DebugExitRule(GrammarFileName, "additive_expression"); }
		return retval;

	}
	// $ANTLR end "additive_expression"

	partial void EnterRule_multiplicative_expression();
	partial void LeaveRule_multiplicative_expression();

	// $ANTLR start "multiplicative_expression"
	// C.g:295:1: multiplicative_expression : ( cast_expression ) ( '*' cast_expression | '/' cast_expression | '%' cast_expression )* ;
	[GrammarRule("multiplicative_expression")]
	public XAstParserRuleReturnScope multiplicative_expression()
	{
		EnterRule_multiplicative_expression();
		EnterRule("multiplicative_expression", 38);
		var retval = new XAstParserRuleReturnScope("multiplicative_expression");
		
		retval.Start = (IToken)input.LT(1);
		int multiplicative_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal156 = default(IToken);
		IToken char_literal158 = default(IToken);
		IToken char_literal160 = default(IToken);
		XAstParserRuleReturnScope cast_expression155 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression157 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression159 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression161 = default(XAstParserRuleReturnScope);

		object char_literal156_tree = default(object);
		object char_literal158_tree = default(object);
		object char_literal160_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "multiplicative_expression");
		DebugLocation(295, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// C.g:296:2: ( ( cast_expression ) ( '*' cast_expression | '/' cast_expression | '%' cast_expression )* )
			DebugEnterAlt(1);
			// C.g:296:4: ( cast_expression ) ( '*' cast_expression | '/' cast_expression | '%' cast_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(296, 4);
			// C.g:296:4: ( cast_expression )
			DebugEnterAlt(1);
			// C.g:296:5: cast_expression
			{
			DebugLocation(296, 5);
			PushFollow(Follow._cast_expression_in_multiplicative_expression1053);
			cast_expression155=cast_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression155.Tree, cast_expression155, retval);

			}

			DebugLocation(296, 22);
			// C.g:296:22: ( '*' cast_expression | '/' cast_expression | '%' cast_expression )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=4;
				try { DebugEnterDecision(46, false);
				switch (input.LA(1))
				{
				case 32:
					{
					alt46 = 1;
					}
					break;
				case 44:
					{
					alt46 = 2;
					}
					break;
				case 25:
					{
					alt46 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:296:23: '*' cast_expression
					{
					DebugLocation(296, 23);
					char_literal156=(IToken)Match(input,32,Follow._32_in_multiplicative_expression1057); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal156_tree = (object)adaptor.Create(char_literal156, retval);
					adaptor.AddChild(root_0, char_literal156_tree);
					}
					DebugLocation(296, 27);
					PushFollow(Follow._cast_expression_in_multiplicative_expression1059);
					cast_expression157=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression157.Tree, cast_expression157, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:296:45: '/' cast_expression
					{
					DebugLocation(296, 45);
					char_literal158=(IToken)Match(input,44,Follow._44_in_multiplicative_expression1063); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal158_tree = (object)adaptor.Create(char_literal158, retval);
					adaptor.AddChild(root_0, char_literal158_tree);
					}
					DebugLocation(296, 49);
					PushFollow(Follow._cast_expression_in_multiplicative_expression1065);
					cast_expression159=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression159.Tree, cast_expression159, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C.g:296:67: '%' cast_expression
					{
					DebugLocation(296, 67);
					char_literal160=(IToken)Match(input,25,Follow._25_in_multiplicative_expression1069); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal160_tree = (object)adaptor.Create(char_literal160, retval);
					adaptor.AddChild(root_0, char_literal160_tree);
					}
					DebugLocation(296, 71);
					PushFollow(Follow._cast_expression_in_multiplicative_expression1071);
					cast_expression161=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression161.Tree, cast_expression161, retval);

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicative_expression", 38);
			LeaveRule("multiplicative_expression", 38);
			LeaveRule_multiplicative_expression();
			if (state.backtracking > 0) { Memoize(input, 38, multiplicative_expression_StartIndex); }

		}
		DebugLocation(297, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicative_expression"); }
		return retval;

	}
	// $ANTLR end "multiplicative_expression"

	partial void EnterRule_cast_expression();
	partial void LeaveRule_cast_expression();

	// $ANTLR start "cast_expression"
	// C.g:299:1: cast_expression : ( '(' type_name ')' cast_expression | unary_expression );
	[GrammarRule("cast_expression")]
	public XAstParserRuleReturnScope cast_expression()
	{
		EnterRule_cast_expression();
		EnterRule("cast_expression", 39);
		var retval = new XAstParserRuleReturnScope("cast_expression");
		
		retval.Start = (IToken)input.LT(1);
		int cast_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal162 = default(IToken);
		IToken char_literal164 = default(IToken);
		XAstParserRuleReturnScope type_name163 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression165 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression166 = default(XAstParserRuleReturnScope);

		object char_literal162_tree = default(object);
		object char_literal164_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "cast_expression");
		DebugLocation(299, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// C.g:300:2: ( '(' type_name ')' cast_expression | unary_expression )
			int alt47=2;
			try { DebugEnterDecision(47, false);
			int LA47_0 = input.LA(1);

			if ((LA47_0==30))
			{
				switch (input.LA(2))
				{
				case 63:
				case 67:
				case 68:
				case 72:
				case 74:
				case 76:
				case 80:
				case 81:
				case 84:
				case 85:
				case 88:
				case 91:
				case 92:
				case 93:
				case 94:
					{
					alt47 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA47_26 = input.LA(3);

					if ((EvaluatePredicate(synpred79_C_fragment)))
					{
						alt47 = 1;
					}
					else if ((true))
					{
						alt47 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 47, 26, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case CHARACTER_LITERAL:
				case DECIMAL_LITERAL:
				case FLOATING_POINT_LITERAL:
				case HEX_LITERAL:
				case OCTAL_LITERAL:
				case STRING_LITERAL:
				case 23:
				case 28:
				case 30:
				case 32:
				case 34:
				case 35:
				case 38:
				case 39:
				case 86:
				case 101:
					{
					alt47 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 47, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA47_0==CHARACTER_LITERAL||LA47_0==DECIMAL_LITERAL||LA47_0==FLOATING_POINT_LITERAL||LA47_0==HEX_LITERAL||LA47_0==IDENTIFIER||LA47_0==OCTAL_LITERAL||LA47_0==STRING_LITERAL||LA47_0==23||LA47_0==28||LA47_0==32||(LA47_0>=34 && LA47_0<=35)||(LA47_0>=38 && LA47_0<=39)||LA47_0==86||LA47_0==101))
			{
				alt47 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 47, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:300:4: '(' type_name ')' cast_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(300, 4);
				char_literal162=(IToken)Match(input,30,Follow._30_in_cast_expression1084); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal162_tree = (object)adaptor.Create(char_literal162, retval);
				adaptor.AddChild(root_0, char_literal162_tree);
				}
				DebugLocation(300, 8);
				PushFollow(Follow._type_name_in_cast_expression1086);
				type_name163=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_name163.Tree, type_name163, retval);
				DebugLocation(300, 18);
				char_literal164=(IToken)Match(input,31,Follow._31_in_cast_expression1088); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal164_tree = (object)adaptor.Create(char_literal164, retval);
				adaptor.AddChild(root_0, char_literal164_tree);
				}
				DebugLocation(300, 22);
				PushFollow(Follow._cast_expression_in_cast_expression1090);
				cast_expression165=cast_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression165.Tree, cast_expression165, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:301:4: unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(301, 4);
				PushFollow(Follow._unary_expression_in_cast_expression1095);
				unary_expression166=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression166.Tree, unary_expression166, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expression", 39);
			LeaveRule("cast_expression", 39);
			LeaveRule_cast_expression();
			if (state.backtracking > 0) { Memoize(input, 39, cast_expression_StartIndex); }

		}
		DebugLocation(302, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expression"); }
		return retval;

	}
	// $ANTLR end "cast_expression"

	partial void EnterRule_unary_expression();
	partial void LeaveRule_unary_expression();

	// $ANTLR start "unary_expression"
	// C.g:304:1: unary_expression : ( postfix_expression | '++' unary_expression | '--' unary_expression | unary_operator cast_expression | 'sizeof' unary_expression | 'sizeof' '(' type_name ')' );
	[GrammarRule("unary_expression")]
	public XAstParserRuleReturnScope unary_expression()
	{
		EnterRule_unary_expression();
		EnterRule("unary_expression", 40);
		var retval = new XAstParserRuleReturnScope("unary_expression");
		
		retval.Start = (IToken)input.LT(1);
		int unary_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal168 = default(IToken);
		IToken string_literal170 = default(IToken);
		IToken string_literal174 = default(IToken);
		IToken string_literal176 = default(IToken);
		IToken char_literal177 = default(IToken);
		IToken char_literal179 = default(IToken);
		XAstParserRuleReturnScope postfix_expression167 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression169 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression171 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_operator172 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression173 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression175 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name178 = default(XAstParserRuleReturnScope);

		object string_literal168_tree = default(object);
		object string_literal170_tree = default(object);
		object string_literal174_tree = default(object);
		object string_literal176_tree = default(object);
		object char_literal177_tree = default(object);
		object char_literal179_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unary_expression");
		DebugLocation(304, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// C.g:305:2: ( postfix_expression | '++' unary_expression | '--' unary_expression | unary_operator cast_expression | 'sizeof' unary_expression | 'sizeof' '(' type_name ')' )
			int alt48=6;
			try { DebugEnterDecision(48, false);
			switch (input.LA(1))
			{
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENTIFIER:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
			case 30:
				{
				alt48 = 1;
				}
				break;
			case 35:
				{
				alt48 = 2;
				}
				break;
			case 39:
				{
				alt48 = 3;
				}
				break;
			case 23:
			case 28:
			case 32:
			case 34:
			case 38:
			case 101:
				{
				alt48 = 4;
				}
				break;
			case 86:
				{
				int LA48_12 = input.LA(2);

				if ((LA48_12==30))
				{
					int LA48_13 = input.LA(3);

					if ((EvaluatePredicate(synpred84_C_fragment)))
					{
						alt48 = 5;
					}
					else if ((true))
					{
						alt48 = 6;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 48, 13, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA48_12==CHARACTER_LITERAL||LA48_12==DECIMAL_LITERAL||LA48_12==FLOATING_POINT_LITERAL||LA48_12==HEX_LITERAL||LA48_12==IDENTIFIER||LA48_12==OCTAL_LITERAL||LA48_12==STRING_LITERAL||LA48_12==23||LA48_12==28||LA48_12==32||(LA48_12>=34 && LA48_12<=35)||(LA48_12>=38 && LA48_12<=39)||LA48_12==86||LA48_12==101))
				{
					alt48 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 48, 12, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:305:4: postfix_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(305, 4);
				PushFollow(Follow._postfix_expression_in_unary_expression1106);
				postfix_expression167=postfix_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, postfix_expression167.Tree, postfix_expression167, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:306:4: '++' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(306, 4);
				string_literal168=(IToken)Match(input,35,Follow._35_in_unary_expression1111); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal168_tree = (object)adaptor.Create(string_literal168, retval);
				adaptor.AddChild(root_0, string_literal168_tree);
				}
				DebugLocation(306, 9);
				PushFollow(Follow._unary_expression_in_unary_expression1113);
				unary_expression169=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression169.Tree, unary_expression169, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:307:4: '--' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(307, 4);
				string_literal170=(IToken)Match(input,39,Follow._39_in_unary_expression1118); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal170_tree = (object)adaptor.Create(string_literal170, retval);
				adaptor.AddChild(root_0, string_literal170_tree);
				}
				DebugLocation(307, 9);
				PushFollow(Follow._unary_expression_in_unary_expression1120);
				unary_expression171=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression171.Tree, unary_expression171, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:308:4: unary_operator cast_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(308, 4);
				PushFollow(Follow._unary_operator_in_unary_expression1125);
				unary_operator172=unary_operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_operator172.Tree, unary_operator172, retval);
				DebugLocation(308, 19);
				PushFollow(Follow._cast_expression_in_unary_expression1127);
				cast_expression173=cast_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression173.Tree, cast_expression173, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:309:4: 'sizeof' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(309, 4);
				string_literal174=(IToken)Match(input,86,Follow._86_in_unary_expression1132); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal174_tree = (object)adaptor.Create(string_literal174, retval);
				adaptor.AddChild(root_0, string_literal174_tree);
				}
				DebugLocation(309, 13);
				PushFollow(Follow._unary_expression_in_unary_expression1134);
				unary_expression175=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression175.Tree, unary_expression175, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:310:4: 'sizeof' '(' type_name ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(310, 4);
				string_literal176=(IToken)Match(input,86,Follow._86_in_unary_expression1139); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal176_tree = (object)adaptor.Create(string_literal176, retval);
				adaptor.AddChild(root_0, string_literal176_tree);
				}
				DebugLocation(310, 13);
				char_literal177=(IToken)Match(input,30,Follow._30_in_unary_expression1141); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal177_tree = (object)adaptor.Create(char_literal177, retval);
				adaptor.AddChild(root_0, char_literal177_tree);
				}
				DebugLocation(310, 17);
				PushFollow(Follow._type_name_in_unary_expression1143);
				type_name178=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_name178.Tree, type_name178, retval);
				DebugLocation(310, 27);
				char_literal179=(IToken)Match(input,31,Follow._31_in_unary_expression1145); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal179_tree = (object)adaptor.Create(char_literal179, retval);
				adaptor.AddChild(root_0, char_literal179_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_expression", 40);
			LeaveRule("unary_expression", 40);
			LeaveRule_unary_expression();
			if (state.backtracking > 0) { Memoize(input, 40, unary_expression_StartIndex); }

		}
		DebugLocation(311, 1);
		} finally { DebugExitRule(GrammarFileName, "unary_expression"); }
		return retval;

	}
	// $ANTLR end "unary_expression"

	partial void EnterRule_postfix_expression();
	partial void LeaveRule_postfix_expression();

	// $ANTLR start "postfix_expression"
	// C.g:313:1: postfix_expression : primary_expression ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )* ;
	[GrammarRule("postfix_expression")]
	public XAstParserRuleReturnScope postfix_expression()
	{
		EnterRule_postfix_expression();
		EnterRule("postfix_expression", 41);
		var retval = new XAstParserRuleReturnScope("postfix_expression");
		
		retval.Start = (IToken)input.LT(1);
		int postfix_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal181 = default(IToken);
		IToken char_literal183 = default(IToken);
		IToken char_literal184 = default(IToken);
		IToken char_literal185 = default(IToken);
		IToken char_literal186 = default(IToken);
		IToken char_literal188 = default(IToken);
		IToken char_literal189 = default(IToken);
		IToken IDENTIFIER190 = default(IToken);
		IToken string_literal191 = default(IToken);
		IToken IDENTIFIER192 = default(IToken);
		IToken string_literal193 = default(IToken);
		IToken string_literal194 = default(IToken);
		XAstParserRuleReturnScope primary_expression180 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression182 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope argument_expression_list187 = default(XAstParserRuleReturnScope);

		object char_literal181_tree = default(object);
		object char_literal183_tree = default(object);
		object char_literal184_tree = default(object);
		object char_literal185_tree = default(object);
		object char_literal186_tree = default(object);
		object char_literal188_tree = default(object);
		object char_literal189_tree = default(object);
		object IDENTIFIER190_tree = default(object);
		object string_literal191_tree = default(object);
		object IDENTIFIER192_tree = default(object);
		object string_literal193_tree = default(object);
		object string_literal194_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "postfix_expression");
		DebugLocation(313, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// C.g:314:2: ( primary_expression ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )* )
			DebugEnterAlt(1);
			// C.g:314:6: primary_expression ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(314, 6);
			PushFollow(Follow._primary_expression_in_postfix_expression1158);
			primary_expression180=primary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression180.Tree, primary_expression180, retval);
			DebugLocation(315, 3);
			// C.g:315:3: ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )*
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=8;
				try { DebugEnterDecision(49, false);
				switch (input.LA(1))
				{
				case 59:
					{
					alt49 = 1;
					}
					break;
				case 30:
					{
					int LA49_24 = input.LA(2);

					if ((LA49_24==31))
					{
						alt49 = 2;
					}
					else if ((LA49_24==CHARACTER_LITERAL||LA49_24==DECIMAL_LITERAL||LA49_24==FLOATING_POINT_LITERAL||LA49_24==HEX_LITERAL||LA49_24==IDENTIFIER||LA49_24==OCTAL_LITERAL||LA49_24==STRING_LITERAL||LA49_24==23||LA49_24==28||LA49_24==30||LA49_24==32||(LA49_24>=34 && LA49_24<=35)||(LA49_24>=38 && LA49_24<=39)||LA49_24==86||LA49_24==101))
					{
						alt49 = 3;
					}


					}
					break;
				case 42:
					{
					alt49 = 4;
					}
					break;
				case 41:
					{
					alt49 = 5;
					}
					break;
				case 35:
					{
					alt49 = 6;
					}
					break;
				case 39:
					{
					alt49 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(49); }
				switch ( alt49 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:315:7: '[' expression ']'
					{
					DebugLocation(315, 7);
					char_literal181=(IToken)Match(input,59,Follow._59_in_postfix_expression1166); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal181_tree = (object)adaptor.Create(char_literal181, retval);
					adaptor.AddChild(root_0, char_literal181_tree);
					}
					DebugLocation(315, 11);
					PushFollow(Follow._expression_in_postfix_expression1168);
					expression182=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression182.Tree, expression182, retval);
					DebugLocation(315, 22);
					char_literal183=(IToken)Match(input,60,Follow._60_in_postfix_expression1170); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal183_tree = (object)adaptor.Create(char_literal183, retval);
					adaptor.AddChild(root_0, char_literal183_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:316:7: '(' ')'
					{
					DebugLocation(316, 7);
					char_literal184=(IToken)Match(input,30,Follow._30_in_postfix_expression1178); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal184_tree = (object)adaptor.Create(char_literal184, retval);
					adaptor.AddChild(root_0, char_literal184_tree);
					}
					DebugLocation(316, 11);
					char_literal185=(IToken)Match(input,31,Follow._31_in_postfix_expression1180); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal185_tree = (object)adaptor.Create(char_literal185, retval);
					adaptor.AddChild(root_0, char_literal185_tree);
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C.g:317:7: '(' argument_expression_list ')'
					{
					DebugLocation(317, 7);
					char_literal186=(IToken)Match(input,30,Follow._30_in_postfix_expression1188); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal186_tree = (object)adaptor.Create(char_literal186, retval);
					adaptor.AddChild(root_0, char_literal186_tree);
					}
					DebugLocation(317, 11);
					PushFollow(Follow._argument_expression_list_in_postfix_expression1190);
					argument_expression_list187=argument_expression_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, argument_expression_list187.Tree, argument_expression_list187, retval);
					DebugLocation(317, 36);
					char_literal188=(IToken)Match(input,31,Follow._31_in_postfix_expression1192); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal188_tree = (object)adaptor.Create(char_literal188, retval);
					adaptor.AddChild(root_0, char_literal188_tree);
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C.g:318:7: '.' IDENTIFIER
					{
					DebugLocation(318, 7);
					char_literal189=(IToken)Match(input,42,Follow._42_in_postfix_expression1200); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal189_tree = (object)adaptor.Create(char_literal189, retval);
					adaptor.AddChild(root_0, char_literal189_tree);
					}
					DebugLocation(318, 11);
					IDENTIFIER190=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_postfix_expression1202), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER190_tree = (object)adaptor.Create(IDENTIFIER190, retval);
					adaptor.AddChild(root_0, IDENTIFIER190_tree);
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// C.g:319:7: '->' IDENTIFIER
					{
					DebugLocation(319, 7);
					string_literal191=(IToken)Match(input,41,Follow._41_in_postfix_expression1210); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal191_tree = (object)adaptor.Create(string_literal191, retval);
					adaptor.AddChild(root_0, string_literal191_tree);
					}
					DebugLocation(319, 12);
					IDENTIFIER192=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_postfix_expression1212), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER192_tree = (object)adaptor.Create(IDENTIFIER192, retval);
					adaptor.AddChild(root_0, IDENTIFIER192_tree);
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// C.g:320:7: '++'
					{
					DebugLocation(320, 7);
					string_literal193=(IToken)Match(input,35,Follow._35_in_postfix_expression1220); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal193_tree = (object)adaptor.Create(string_literal193, retval);
					adaptor.AddChild(root_0, string_literal193_tree);
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// C.g:321:7: '--'
					{
					DebugLocation(321, 7);
					string_literal194=(IToken)Match(input,39,Follow._39_in_postfix_expression1228); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal194_tree = (object)adaptor.Create(string_literal194, retval);
					adaptor.AddChild(root_0, string_literal194_tree);
					}

					}
					break;

				default:
					goto loop49;
				}
			}

			loop49:
				;

			} finally { DebugExitSubRule(49); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("postfix_expression", 41);
			LeaveRule("postfix_expression", 41);
			LeaveRule_postfix_expression();
			if (state.backtracking > 0) { Memoize(input, 41, postfix_expression_StartIndex); }

		}
		DebugLocation(323, 1);
		} finally { DebugExitRule(GrammarFileName, "postfix_expression"); }
		return retval;

	}
	// $ANTLR end "postfix_expression"

	partial void EnterRule_unary_operator();
	partial void LeaveRule_unary_operator();

	// $ANTLR start "unary_operator"
	// C.g:325:1: unary_operator : ( '&' | '*' | '+' | '-' | '~' | '!' );
	[GrammarRule("unary_operator")]
	public XAstParserRuleReturnScope unary_operator()
	{
		EnterRule_unary_operator();
		EnterRule("unary_operator", 42);
		var retval = new XAstParserRuleReturnScope("unary_operator");
		
		retval.Start = (IToken)input.LT(1);
		int unary_operator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set195 = default(IToken);

		object set195_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unary_operator");
		DebugLocation(325, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// C.g:326:2: ( '&' | '*' | '+' | '-' | '~' | '!' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(326, 2);

			set195=(IToken)input.LT(1);
			if (input.LA(1)==23||input.LA(1)==28||input.LA(1)==32||input.LA(1)==34||input.LA(1)==38||input.LA(1)==101)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set195, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_operator", 42);
			LeaveRule("unary_operator", 42);
			LeaveRule_unary_operator();
			if (state.backtracking > 0) { Memoize(input, 42, unary_operator_StartIndex); }

		}
		DebugLocation(332, 1);
		} finally { DebugExitRule(GrammarFileName, "unary_operator"); }
		return retval;

	}
	// $ANTLR end "unary_operator"

	partial void EnterRule_primary_expression();
	partial void LeaveRule_primary_expression();

	// $ANTLR start "primary_expression"
	// C.g:334:1: primary_expression : ( IDENTIFIER | constant | '(' expression ')' );
	[GrammarRule("primary_expression")]
	public XAstParserRuleReturnScope primary_expression()
	{
		EnterRule_primary_expression();
		EnterRule("primary_expression", 43);
		var retval = new XAstParserRuleReturnScope("primary_expression");
		
		retval.Start = (IToken)input.LT(1);
		int primary_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER196 = default(IToken);
		IToken char_literal198 = default(IToken);
		IToken char_literal200 = default(IToken);
		XAstParserRuleReturnScope constant197 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression199 = default(XAstParserRuleReturnScope);

		object IDENTIFIER196_tree = default(object);
		object char_literal198_tree = default(object);
		object char_literal200_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primary_expression");
		DebugLocation(334, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// C.g:335:2: ( IDENTIFIER | constant | '(' expression ')' )
			int alt50=3;
			try { DebugEnterDecision(50, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				alt50 = 1;
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
				{
				alt50 = 2;
				}
				break;
			case 30:
				{
				alt50 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:335:4: IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(335, 4);
				IDENTIFIER196=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primary_expression1280), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER196_tree = (object)adaptor.Create(IDENTIFIER196, retval);
				adaptor.AddChild(root_0, IDENTIFIER196_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:336:4: constant
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(336, 4);
				PushFollow(Follow._constant_in_primary_expression1285);
				constant197=constant();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant197.Tree, constant197, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:337:4: '(' expression ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(337, 4);
				char_literal198=(IToken)Match(input,30,Follow._30_in_primary_expression1290); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal198_tree = (object)adaptor.Create(char_literal198, retval);
				adaptor.AddChild(root_0, char_literal198_tree);
				}
				DebugLocation(337, 8);
				PushFollow(Follow._expression_in_primary_expression1292);
				expression199=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression199.Tree, expression199, retval);
				DebugLocation(337, 19);
				char_literal200=(IToken)Match(input,31,Follow._31_in_primary_expression1294); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal200_tree = (object)adaptor.Create(char_literal200, retval);
				adaptor.AddChild(root_0, char_literal200_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_expression", 43);
			LeaveRule("primary_expression", 43);
			LeaveRule_primary_expression();
			if (state.backtracking > 0) { Memoize(input, 43, primary_expression_StartIndex); }

		}
		DebugLocation(338, 1);
		} finally { DebugExitRule(GrammarFileName, "primary_expression"); }
		return retval;

	}
	// $ANTLR end "primary_expression"

	partial void EnterRule_constant();
	partial void LeaveRule_constant();

	// $ANTLR start "constant"
	// C.g:340:1: constant : ( hex_literal | octal_literal | decimal_literal | character_literal | string_literal | floating_point_literal );
	[GrammarRule("constant")]
	public XAstParserRuleReturnScope constant()
	{
		EnterRule_constant();
		EnterRule("constant", 44);
		var retval = new XAstParserRuleReturnScope("constant");
		
		retval.Start = (IToken)input.LT(1);
		int constant_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope hex_literal201 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope octal_literal202 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope decimal_literal203 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope character_literal204 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope string_literal205 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope floating_point_literal206 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(340, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// C.g:341:2: ( hex_literal | octal_literal | decimal_literal | character_literal | string_literal | floating_point_literal )
			int alt51=6;
			try { DebugEnterDecision(51, false);
			switch (input.LA(1))
			{
			case HEX_LITERAL:
				{
				alt51 = 1;
				}
				break;
			case OCTAL_LITERAL:
				{
				alt51 = 2;
				}
				break;
			case DECIMAL_LITERAL:
				{
				alt51 = 3;
				}
				break;
			case CHARACTER_LITERAL:
				{
				alt51 = 4;
				}
				break;
			case STRING_LITERAL:
				{
				alt51 = 5;
				}
				break;
			case FLOATING_POINT_LITERAL:
				{
				alt51 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:341:6: hex_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(341, 6);
				PushFollow(Follow._hex_literal_in_constant1307);
				hex_literal201=hex_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, hex_literal201.Tree, hex_literal201, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:342:6: octal_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(342, 6);
				PushFollow(Follow._octal_literal_in_constant1314);
				octal_literal202=octal_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, octal_literal202.Tree, octal_literal202, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:343:6: decimal_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(343, 6);
				PushFollow(Follow._decimal_literal_in_constant1321);
				decimal_literal203=decimal_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, decimal_literal203.Tree, decimal_literal203, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:344:6: character_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(344, 6);
				PushFollow(Follow._character_literal_in_constant1328);
				character_literal204=character_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, character_literal204.Tree, character_literal204, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:345:6: string_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(345, 6);
				PushFollow(Follow._string_literal_in_constant1335);
				string_literal205=string_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, string_literal205.Tree, string_literal205, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:346:6: floating_point_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(346, 6);
				PushFollow(Follow._floating_point_literal_in_constant1342);
				floating_point_literal206=floating_point_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, floating_point_literal206.Tree, floating_point_literal206, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant", 44);
			LeaveRule("constant", 44);
			LeaveRule_constant();
			if (state.backtracking > 0) { Memoize(input, 44, constant_StartIndex); }

		}
		DebugLocation(347, 1);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"

	partial void EnterRule_hex_literal();
	partial void LeaveRule_hex_literal();

	// $ANTLR start "hex_literal"
	// C.g:349:1: hex_literal : HEX_LITERAL ;
	[GrammarRule("hex_literal")]
	public XAstParserRuleReturnScope hex_literal()
	{
		EnterRule_hex_literal();
		EnterRule("hex_literal", 45);
		var retval = new XAstParserRuleReturnScope("hex_literal");
		
		retval.Start = (IToken)input.LT(1);
		int hex_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken HEX_LITERAL207 = default(IToken);

		object HEX_LITERAL207_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "hex_literal");
		DebugLocation(349, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// C.g:350:2: ( HEX_LITERAL )
			DebugEnterAlt(1);
			// C.g:350:4: HEX_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(350, 4);
			HEX_LITERAL207=(IToken)new XToken((IToken)Match(input,HEX_LITERAL,Follow._HEX_LITERAL_in_hex_literal1353), "HEX_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			HEX_LITERAL207_tree = (object)adaptor.Create(HEX_LITERAL207, retval);
			adaptor.AddChild(root_0, HEX_LITERAL207_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("hex_literal", 45);
			LeaveRule("hex_literal", 45);
			LeaveRule_hex_literal();
			if (state.backtracking > 0) { Memoize(input, 45, hex_literal_StartIndex); }

		}
		DebugLocation(351, 1);
		} finally { DebugExitRule(GrammarFileName, "hex_literal"); }
		return retval;

	}
	// $ANTLR end "hex_literal"

	partial void EnterRule_octal_literal();
	partial void LeaveRule_octal_literal();

	// $ANTLR start "octal_literal"
	// C.g:353:1: octal_literal : OCTAL_LITERAL ;
	[GrammarRule("octal_literal")]
	public XAstParserRuleReturnScope octal_literal()
	{
		EnterRule_octal_literal();
		EnterRule("octal_literal", 46);
		var retval = new XAstParserRuleReturnScope("octal_literal");
		
		retval.Start = (IToken)input.LT(1);
		int octal_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OCTAL_LITERAL208 = default(IToken);

		object OCTAL_LITERAL208_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "octal_literal");
		DebugLocation(353, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// C.g:354:2: ( OCTAL_LITERAL )
			DebugEnterAlt(1);
			// C.g:354:4: OCTAL_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(354, 4);
			OCTAL_LITERAL208=(IToken)new XToken((IToken)Match(input,OCTAL_LITERAL,Follow._OCTAL_LITERAL_in_octal_literal1364), "OCTAL_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OCTAL_LITERAL208_tree = (object)adaptor.Create(OCTAL_LITERAL208, retval);
			adaptor.AddChild(root_0, OCTAL_LITERAL208_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("octal_literal", 46);
			LeaveRule("octal_literal", 46);
			LeaveRule_octal_literal();
			if (state.backtracking > 0) { Memoize(input, 46, octal_literal_StartIndex); }

		}
		DebugLocation(355, 1);
		} finally { DebugExitRule(GrammarFileName, "octal_literal"); }
		return retval;

	}
	// $ANTLR end "octal_literal"

	partial void EnterRule_decimal_literal();
	partial void LeaveRule_decimal_literal();

	// $ANTLR start "decimal_literal"
	// C.g:357:1: decimal_literal : DECIMAL_LITERAL ;
	[GrammarRule("decimal_literal")]
	public XAstParserRuleReturnScope decimal_literal()
	{
		EnterRule_decimal_literal();
		EnterRule("decimal_literal", 47);
		var retval = new XAstParserRuleReturnScope("decimal_literal");
		
		retval.Start = (IToken)input.LT(1);
		int decimal_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken DECIMAL_LITERAL209 = default(IToken);

		object DECIMAL_LITERAL209_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "decimal_literal");
		DebugLocation(357, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// C.g:358:2: ( DECIMAL_LITERAL )
			DebugEnterAlt(1);
			// C.g:358:4: DECIMAL_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(358, 4);
			DECIMAL_LITERAL209=(IToken)new XToken((IToken)Match(input,DECIMAL_LITERAL,Follow._DECIMAL_LITERAL_in_decimal_literal1375), "DECIMAL_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DECIMAL_LITERAL209_tree = (object)adaptor.Create(DECIMAL_LITERAL209, retval);
			adaptor.AddChild(root_0, DECIMAL_LITERAL209_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("decimal_literal", 47);
			LeaveRule("decimal_literal", 47);
			LeaveRule_decimal_literal();
			if (state.backtracking > 0) { Memoize(input, 47, decimal_literal_StartIndex); }

		}
		DebugLocation(359, 1);
		} finally { DebugExitRule(GrammarFileName, "decimal_literal"); }
		return retval;

	}
	// $ANTLR end "decimal_literal"

	partial void EnterRule_character_literal();
	partial void LeaveRule_character_literal();

	// $ANTLR start "character_literal"
	// C.g:361:1: character_literal : CHARACTER_LITERAL ;
	[GrammarRule("character_literal")]
	public XAstParserRuleReturnScope character_literal()
	{
		EnterRule_character_literal();
		EnterRule("character_literal", 48);
		var retval = new XAstParserRuleReturnScope("character_literal");
		
		retval.Start = (IToken)input.LT(1);
		int character_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken CHARACTER_LITERAL210 = default(IToken);

		object CHARACTER_LITERAL210_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "character_literal");
		DebugLocation(361, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// C.g:362:2: ( CHARACTER_LITERAL )
			DebugEnterAlt(1);
			// C.g:362:4: CHARACTER_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(362, 4);
			CHARACTER_LITERAL210=(IToken)new XToken((IToken)Match(input,CHARACTER_LITERAL,Follow._CHARACTER_LITERAL_in_character_literal1386), "CHARACTER_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CHARACTER_LITERAL210_tree = (object)adaptor.Create(CHARACTER_LITERAL210, retval);
			adaptor.AddChild(root_0, CHARACTER_LITERAL210_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("character_literal", 48);
			LeaveRule("character_literal", 48);
			LeaveRule_character_literal();
			if (state.backtracking > 0) { Memoize(input, 48, character_literal_StartIndex); }

		}
		DebugLocation(363, 1);
		} finally { DebugExitRule(GrammarFileName, "character_literal"); }
		return retval;

	}
	// $ANTLR end "character_literal"

	partial void EnterRule_string_literal();
	partial void LeaveRule_string_literal();

	// $ANTLR start "string_literal"
	// C.g:365:1: string_literal : STRING_LITERAL ;
	[GrammarRule("string_literal")]
	public XAstParserRuleReturnScope string_literal()
	{
		EnterRule_string_literal();
		EnterRule("string_literal", 49);
		var retval = new XAstParserRuleReturnScope("string_literal");
		
		retval.Start = (IToken)input.LT(1);
		int string_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken STRING_LITERAL211 = default(IToken);

		object STRING_LITERAL211_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "string_literal");
		DebugLocation(365, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// C.g:366:2: ( STRING_LITERAL )
			DebugEnterAlt(1);
			// C.g:366:4: STRING_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(366, 4);
			STRING_LITERAL211=(IToken)new XToken((IToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_string_literal1397), "STRING_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			STRING_LITERAL211_tree = (object)adaptor.Create(STRING_LITERAL211, retval);
			adaptor.AddChild(root_0, STRING_LITERAL211_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("string_literal", 49);
			LeaveRule("string_literal", 49);
			LeaveRule_string_literal();
			if (state.backtracking > 0) { Memoize(input, 49, string_literal_StartIndex); }

		}
		DebugLocation(367, 1);
		} finally { DebugExitRule(GrammarFileName, "string_literal"); }
		return retval;

	}
	// $ANTLR end "string_literal"

	partial void EnterRule_floating_point_literal();
	partial void LeaveRule_floating_point_literal();

	// $ANTLR start "floating_point_literal"
	// C.g:369:1: floating_point_literal : FLOATING_POINT_LITERAL ;
	[GrammarRule("floating_point_literal")]
	public XAstParserRuleReturnScope floating_point_literal()
	{
		EnterRule_floating_point_literal();
		EnterRule("floating_point_literal", 50);
		var retval = new XAstParserRuleReturnScope("floating_point_literal");
		
		retval.Start = (IToken)input.LT(1);
		int floating_point_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken FLOATING_POINT_LITERAL212 = default(IToken);

		object FLOATING_POINT_LITERAL212_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "floating_point_literal");
		DebugLocation(369, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// C.g:370:2: ( FLOATING_POINT_LITERAL )
			DebugEnterAlt(1);
			// C.g:370:4: FLOATING_POINT_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(370, 4);
			FLOATING_POINT_LITERAL212=(IToken)new XToken((IToken)Match(input,FLOATING_POINT_LITERAL,Follow._FLOATING_POINT_LITERAL_in_floating_point_literal1408), "FLOATING_POINT_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			FLOATING_POINT_LITERAL212_tree = (object)adaptor.Create(FLOATING_POINT_LITERAL212, retval);
			adaptor.AddChild(root_0, FLOATING_POINT_LITERAL212_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("floating_point_literal", 50);
			LeaveRule("floating_point_literal", 50);
			LeaveRule_floating_point_literal();
			if (state.backtracking > 0) { Memoize(input, 50, floating_point_literal_StartIndex); }

		}
		DebugLocation(371, 1);
		} finally { DebugExitRule(GrammarFileName, "floating_point_literal"); }
		return retval;

	}
	// $ANTLR end "floating_point_literal"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();

	// $ANTLR start "expression"
	// C.g:375:1: expression : assignment_expression ( ',' assignment_expression )* ;
	[GrammarRule("expression")]
	public XAstParserRuleReturnScope expression()
	{
		EnterRule_expression();
		EnterRule("expression", 51);
		var retval = new XAstParserRuleReturnScope("expression");
		
		retval.Start = (IToken)input.LT(1);
		int expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal214 = default(IToken);
		XAstParserRuleReturnScope assignment_expression213 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression215 = default(XAstParserRuleReturnScope);

		object char_literal214_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(375, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// C.g:376:2: ( assignment_expression ( ',' assignment_expression )* )
			DebugEnterAlt(1);
			// C.g:376:4: assignment_expression ( ',' assignment_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(376, 4);
			PushFollow(Follow._assignment_expression_in_expression1421);
			assignment_expression213=assignment_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression213.Tree, assignment_expression213, retval);
			DebugLocation(376, 26);
			// C.g:376:26: ( ',' assignment_expression )*
			try { DebugEnterSubRule(52);
			while (true)
			{
				int alt52=2;
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if ((LA52_0==37))
				{
					alt52 = 1;
				}


				} finally { DebugExitDecision(52); }
				switch ( alt52 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:376:27: ',' assignment_expression
					{
					DebugLocation(376, 27);
					char_literal214=(IToken)Match(input,37,Follow._37_in_expression1424); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal214_tree = (object)adaptor.Create(char_literal214, retval);
					adaptor.AddChild(root_0, char_literal214_tree);
					}
					DebugLocation(376, 31);
					PushFollow(Follow._assignment_expression_in_expression1426);
					assignment_expression215=assignment_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression215.Tree, assignment_expression215, retval);

					}
					break;

				default:
					goto loop52;
				}
			}

			loop52:
				;

			} finally { DebugExitSubRule(52); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 51);
			LeaveRule("expression", 51);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 51, expression_StartIndex); }

		}
		DebugLocation(377, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_constant_expression();
	partial void LeaveRule_constant_expression();

	// $ANTLR start "constant_expression"
	// C.g:379:1: constant_expression : conditional_expression ;
	[GrammarRule("constant_expression")]
	public XAstParserRuleReturnScope constant_expression()
	{
		EnterRule_constant_expression();
		EnterRule("constant_expression", 52);
		var retval = new XAstParserRuleReturnScope("constant_expression");
		
		retval.Start = (IToken)input.LT(1);
		int constant_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope conditional_expression216 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "constant_expression");
		DebugLocation(379, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// C.g:380:2: ( conditional_expression )
			DebugEnterAlt(1);
			// C.g:380:4: conditional_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(380, 4);
			PushFollow(Follow._conditional_expression_in_constant_expression1439);
			conditional_expression216=conditional_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression216.Tree, conditional_expression216, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant_expression", 52);
			LeaveRule("constant_expression", 52);
			LeaveRule_constant_expression();
			if (state.backtracking > 0) { Memoize(input, 52, constant_expression_StartIndex); }

		}
		DebugLocation(381, 1);
		} finally { DebugExitRule(GrammarFileName, "constant_expression"); }
		return retval;

	}
	// $ANTLR end "constant_expression"

	partial void EnterRule_assignment_expression();
	partial void LeaveRule_assignment_expression();

	// $ANTLR start "assignment_expression"
	// C.g:383:1: assignment_expression : ( lvalue assignment_operator assignment_expression | conditional_expression );
	[GrammarRule("assignment_expression")]
	public XAstParserRuleReturnScope assignment_expression()
	{
		EnterRule_assignment_expression();
		EnterRule("assignment_expression", 53);
		var retval = new XAstParserRuleReturnScope("assignment_expression");
		
		retval.Start = (IToken)input.LT(1);
		int assignment_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope lvalue217 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_operator218 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression219 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conditional_expression220 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "assignment_expression");
		DebugLocation(383, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// C.g:384:2: ( lvalue assignment_operator assignment_expression | conditional_expression )
			int alt53=2;
			try { DebugEnterDecision(53, false);
			try
			{
				alt53 = dfa53.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:384:4: lvalue assignment_operator assignment_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(384, 4);
				PushFollow(Follow._lvalue_in_assignment_expression1450);
				lvalue217=lvalue();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue217.Tree, lvalue217, retval);
				DebugLocation(384, 11);
				PushFollow(Follow._assignment_operator_in_assignment_expression1452);
				assignment_operator218=assignment_operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_operator218.Tree, assignment_operator218, retval);
				DebugLocation(384, 31);
				PushFollow(Follow._assignment_expression_in_assignment_expression1454);
				assignment_expression219=assignment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression219.Tree, assignment_expression219, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:385:4: conditional_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(385, 4);
				PushFollow(Follow._conditional_expression_in_assignment_expression1459);
				conditional_expression220=conditional_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression220.Tree, conditional_expression220, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment_expression", 53);
			LeaveRule("assignment_expression", 53);
			LeaveRule_assignment_expression();
			if (state.backtracking > 0) { Memoize(input, 53, assignment_expression_StartIndex); }

		}
		DebugLocation(386, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment_expression"); }
		return retval;

	}
	// $ANTLR end "assignment_expression"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// C.g:388:1: lvalue : unary_expression ;
	[GrammarRule("lvalue")]
	public XAstParserRuleReturnScope lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 54);
		var retval = new XAstParserRuleReturnScope("lvalue");
		
		retval.Start = (IToken)input.LT(1);
		int lvalue_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope unary_expression221 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(388, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// C.g:389:2: ( unary_expression )
			DebugEnterAlt(1);
			// C.g:389:4: unary_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(389, 4);
			PushFollow(Follow._unary_expression_in_lvalue1471);
			unary_expression221=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression221.Tree, unary_expression221, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 54);
			LeaveRule("lvalue", 54);
			LeaveRule_lvalue();
			if (state.backtracking > 0) { Memoize(input, 54, lvalue_StartIndex); }

		}
		DebugLocation(390, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_assignment_operator();
	partial void LeaveRule_assignment_operator();

	// $ANTLR start "assignment_operator"
	// C.g:392:1: assignment_operator : ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' );
	[GrammarRule("assignment_operator")]
	public XAstParserRuleReturnScope assignment_operator()
	{
		EnterRule_assignment_operator();
		EnterRule("assignment_operator", 55);
		var retval = new XAstParserRuleReturnScope("assignment_operator");
		
		retval.Start = (IToken)input.LT(1);
		int assignment_operator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set222 = default(IToken);

		object set222_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assignment_operator");
		DebugLocation(392, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// C.g:393:2: ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(393, 2);

			set222=(IToken)input.LT(1);
			if (input.LA(1)==26||input.LA(1)==29||input.LA(1)==33||input.LA(1)==36||input.LA(1)==40||input.LA(1)==45||input.LA(1)==50||input.LA(1)==52||input.LA(1)==57||input.LA(1)==62||input.LA(1)==98)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set222, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment_operator", 55);
			LeaveRule("assignment_operator", 55);
			LeaveRule_assignment_operator();
			if (state.backtracking > 0) { Memoize(input, 55, assignment_operator_StartIndex); }

		}
		DebugLocation(404, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment_operator"); }
		return retval;

	}
	// $ANTLR end "assignment_operator"

	partial void EnterRule_conditional_expression();
	partial void LeaveRule_conditional_expression();

	// $ANTLR start "conditional_expression"
	// C.g:406:1: conditional_expression : logical_or_expression ( '?' expression ':' conditional_expression )? ;
	[GrammarRule("conditional_expression")]
	public XAstParserRuleReturnScope conditional_expression()
	{
		EnterRule_conditional_expression();
		EnterRule("conditional_expression", 56);
		var retval = new XAstParserRuleReturnScope("conditional_expression");
		
		retval.Start = (IToken)input.LT(1);
		int conditional_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal224 = default(IToken);
		IToken char_literal226 = default(IToken);
		XAstParserRuleReturnScope logical_or_expression223 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression225 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conditional_expression227 = default(XAstParserRuleReturnScope);

		object char_literal224_tree = default(object);
		object char_literal226_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditional_expression");
		DebugLocation(406, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// C.g:407:2: ( logical_or_expression ( '?' expression ':' conditional_expression )? )
			DebugEnterAlt(1);
			// C.g:407:4: logical_or_expression ( '?' expression ':' conditional_expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(407, 4);
			PushFollow(Follow._logical_or_expression_in_conditional_expression1543);
			logical_or_expression223=logical_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logical_or_expression223.Tree, logical_or_expression223, retval);
			DebugLocation(407, 26);
			// C.g:407:26: ( '?' expression ':' conditional_expression )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==58))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:407:27: '?' expression ':' conditional_expression
				{
				DebugLocation(407, 27);
				char_literal224=(IToken)Match(input,58,Follow._58_in_conditional_expression1546); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal224_tree = (object)adaptor.Create(char_literal224, retval);
				adaptor.AddChild(root_0, char_literal224_tree);
				}
				DebugLocation(407, 31);
				PushFollow(Follow._expression_in_conditional_expression1548);
				expression225=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression225.Tree, expression225, retval);
				DebugLocation(407, 42);
				char_literal226=(IToken)Match(input,46,Follow._46_in_conditional_expression1550); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal226_tree = (object)adaptor.Create(char_literal226, retval);
				adaptor.AddChild(root_0, char_literal226_tree);
				}
				DebugLocation(407, 46);
				PushFollow(Follow._conditional_expression_in_conditional_expression1552);
				conditional_expression227=conditional_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression227.Tree, conditional_expression227, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(54); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditional_expression", 56);
			LeaveRule("conditional_expression", 56);
			LeaveRule_conditional_expression();
			if (state.backtracking > 0) { Memoize(input, 56, conditional_expression_StartIndex); }

		}
		DebugLocation(408, 1);
		} finally { DebugExitRule(GrammarFileName, "conditional_expression"); }
		return retval;

	}
	// $ANTLR end "conditional_expression"

	partial void EnterRule_logical_or_expression();
	partial void LeaveRule_logical_or_expression();

	// $ANTLR start "logical_or_expression"
	// C.g:410:1: logical_or_expression : logical_and_expression ( '||' logical_and_expression )* ;
	[GrammarRule("logical_or_expression")]
	public XAstParserRuleReturnScope logical_or_expression()
	{
		EnterRule_logical_or_expression();
		EnterRule("logical_or_expression", 57);
		var retval = new XAstParserRuleReturnScope("logical_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int logical_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal229 = default(IToken);
		XAstParserRuleReturnScope logical_and_expression228 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope logical_and_expression230 = default(XAstParserRuleReturnScope);

		object string_literal229_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logical_or_expression");
		DebugLocation(410, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// C.g:411:2: ( logical_and_expression ( '||' logical_and_expression )* )
			DebugEnterAlt(1);
			// C.g:411:4: logical_and_expression ( '||' logical_and_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(411, 4);
			PushFollow(Follow._logical_and_expression_in_logical_or_expression1565);
			logical_and_expression228=logical_and_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logical_and_expression228.Tree, logical_and_expression228, retval);
			DebugLocation(411, 27);
			// C.g:411:27: ( '||' logical_and_expression )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==99))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:411:28: '||' logical_and_expression
					{
					DebugLocation(411, 28);
					string_literal229=(IToken)Match(input,99,Follow._99_in_logical_or_expression1568); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal229_tree = (object)adaptor.Create(string_literal229, retval);
					adaptor.AddChild(root_0, string_literal229_tree);
					}
					DebugLocation(411, 33);
					PushFollow(Follow._logical_and_expression_in_logical_or_expression1570);
					logical_and_expression230=logical_and_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logical_and_expression230.Tree, logical_and_expression230, retval);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logical_or_expression", 57);
			LeaveRule("logical_or_expression", 57);
			LeaveRule_logical_or_expression();
			if (state.backtracking > 0) { Memoize(input, 57, logical_or_expression_StartIndex); }

		}
		DebugLocation(412, 1);
		} finally { DebugExitRule(GrammarFileName, "logical_or_expression"); }
		return retval;

	}
	// $ANTLR end "logical_or_expression"

	partial void EnterRule_logical_and_expression();
	partial void LeaveRule_logical_and_expression();

	// $ANTLR start "logical_and_expression"
	// C.g:414:1: logical_and_expression : inclusive_or_expression ( '&&' inclusive_or_expression )* ;
	[GrammarRule("logical_and_expression")]
	public XAstParserRuleReturnScope logical_and_expression()
	{
		EnterRule_logical_and_expression();
		EnterRule("logical_and_expression", 58);
		var retval = new XAstParserRuleReturnScope("logical_and_expression");
		
		retval.Start = (IToken)input.LT(1);
		int logical_and_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal232 = default(IToken);
		XAstParserRuleReturnScope inclusive_or_expression231 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope inclusive_or_expression233 = default(XAstParserRuleReturnScope);

		object string_literal232_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logical_and_expression");
		DebugLocation(414, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// C.g:415:2: ( inclusive_or_expression ( '&&' inclusive_or_expression )* )
			DebugEnterAlt(1);
			// C.g:415:4: inclusive_or_expression ( '&&' inclusive_or_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(415, 4);
			PushFollow(Follow._inclusive_or_expression_in_logical_and_expression1583);
			inclusive_or_expression231=inclusive_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, inclusive_or_expression231.Tree, inclusive_or_expression231, retval);
			DebugLocation(415, 28);
			// C.g:415:28: ( '&&' inclusive_or_expression )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==27))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:415:29: '&&' inclusive_or_expression
					{
					DebugLocation(415, 29);
					string_literal232=(IToken)Match(input,27,Follow._27_in_logical_and_expression1586); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal232_tree = (object)adaptor.Create(string_literal232, retval);
					adaptor.AddChild(root_0, string_literal232_tree);
					}
					DebugLocation(415, 34);
					PushFollow(Follow._inclusive_or_expression_in_logical_and_expression1588);
					inclusive_or_expression233=inclusive_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, inclusive_or_expression233.Tree, inclusive_or_expression233, retval);

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logical_and_expression", 58);
			LeaveRule("logical_and_expression", 58);
			LeaveRule_logical_and_expression();
			if (state.backtracking > 0) { Memoize(input, 58, logical_and_expression_StartIndex); }

		}
		DebugLocation(416, 1);
		} finally { DebugExitRule(GrammarFileName, "logical_and_expression"); }
		return retval;

	}
	// $ANTLR end "logical_and_expression"

	partial void EnterRule_inclusive_or_expression();
	partial void LeaveRule_inclusive_or_expression();

	// $ANTLR start "inclusive_or_expression"
	// C.g:418:1: inclusive_or_expression : exclusive_or_expression ( '|' exclusive_or_expression )* ;
	[GrammarRule("inclusive_or_expression")]
	public XAstParserRuleReturnScope inclusive_or_expression()
	{
		EnterRule_inclusive_or_expression();
		EnterRule("inclusive_or_expression", 59);
		var retval = new XAstParserRuleReturnScope("inclusive_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int inclusive_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal235 = default(IToken);
		XAstParserRuleReturnScope exclusive_or_expression234 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope exclusive_or_expression236 = default(XAstParserRuleReturnScope);

		object char_literal235_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "inclusive_or_expression");
		DebugLocation(418, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// C.g:419:2: ( exclusive_or_expression ( '|' exclusive_or_expression )* )
			DebugEnterAlt(1);
			// C.g:419:4: exclusive_or_expression ( '|' exclusive_or_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(419, 4);
			PushFollow(Follow._exclusive_or_expression_in_inclusive_or_expression1601);
			exclusive_or_expression234=exclusive_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, exclusive_or_expression234.Tree, exclusive_or_expression234, retval);
			DebugLocation(419, 28);
			// C.g:419:28: ( '|' exclusive_or_expression )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if ((LA57_0==97))
				{
					alt57 = 1;
				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:419:29: '|' exclusive_or_expression
					{
					DebugLocation(419, 29);
					char_literal235=(IToken)Match(input,97,Follow._97_in_inclusive_or_expression1604); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal235_tree = (object)adaptor.Create(char_literal235, retval);
					adaptor.AddChild(root_0, char_literal235_tree);
					}
					DebugLocation(419, 33);
					PushFollow(Follow._exclusive_or_expression_in_inclusive_or_expression1606);
					exclusive_or_expression236=exclusive_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, exclusive_or_expression236.Tree, exclusive_or_expression236, retval);

					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inclusive_or_expression", 59);
			LeaveRule("inclusive_or_expression", 59);
			LeaveRule_inclusive_or_expression();
			if (state.backtracking > 0) { Memoize(input, 59, inclusive_or_expression_StartIndex); }

		}
		DebugLocation(420, 1);
		} finally { DebugExitRule(GrammarFileName, "inclusive_or_expression"); }
		return retval;

	}
	// $ANTLR end "inclusive_or_expression"

	partial void EnterRule_exclusive_or_expression();
	partial void LeaveRule_exclusive_or_expression();

	// $ANTLR start "exclusive_or_expression"
	// C.g:422:1: exclusive_or_expression : and_expression ( '^' and_expression )* ;
	[GrammarRule("exclusive_or_expression")]
	public XAstParserRuleReturnScope exclusive_or_expression()
	{
		EnterRule_exclusive_or_expression();
		EnterRule("exclusive_or_expression", 60);
		var retval = new XAstParserRuleReturnScope("exclusive_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int exclusive_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal238 = default(IToken);
		XAstParserRuleReturnScope and_expression237 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope and_expression239 = default(XAstParserRuleReturnScope);

		object char_literal238_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "exclusive_or_expression");
		DebugLocation(422, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// C.g:423:2: ( and_expression ( '^' and_expression )* )
			DebugEnterAlt(1);
			// C.g:423:4: and_expression ( '^' and_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(423, 4);
			PushFollow(Follow._and_expression_in_exclusive_or_expression1619);
			and_expression237=and_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, and_expression237.Tree, and_expression237, retval);
			DebugLocation(423, 19);
			// C.g:423:19: ( '^' and_expression )*
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, false);
				int LA58_0 = input.LA(1);

				if ((LA58_0==61))
				{
					alt58 = 1;
				}


				} finally { DebugExitDecision(58); }
				switch ( alt58 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:423:20: '^' and_expression
					{
					DebugLocation(423, 20);
					char_literal238=(IToken)Match(input,61,Follow._61_in_exclusive_or_expression1622); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal238_tree = (object)adaptor.Create(char_literal238, retval);
					adaptor.AddChild(root_0, char_literal238_tree);
					}
					DebugLocation(423, 24);
					PushFollow(Follow._and_expression_in_exclusive_or_expression1624);
					and_expression239=and_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, and_expression239.Tree, and_expression239, retval);

					}
					break;

				default:
					goto loop58;
				}
			}

			loop58:
				;

			} finally { DebugExitSubRule(58); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exclusive_or_expression", 60);
			LeaveRule("exclusive_or_expression", 60);
			LeaveRule_exclusive_or_expression();
			if (state.backtracking > 0) { Memoize(input, 60, exclusive_or_expression_StartIndex); }

		}
		DebugLocation(424, 1);
		} finally { DebugExitRule(GrammarFileName, "exclusive_or_expression"); }
		return retval;

	}
	// $ANTLR end "exclusive_or_expression"

	partial void EnterRule_and_expression();
	partial void LeaveRule_and_expression();

	// $ANTLR start "and_expression"
	// C.g:426:1: and_expression : equality_expression ( '&' equality_expression )* ;
	[GrammarRule("and_expression")]
	public XAstParserRuleReturnScope and_expression()
	{
		EnterRule_and_expression();
		EnterRule("and_expression", 61);
		var retval = new XAstParserRuleReturnScope("and_expression");
		
		retval.Start = (IToken)input.LT(1);
		int and_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal241 = default(IToken);
		XAstParserRuleReturnScope equality_expression240 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope equality_expression242 = default(XAstParserRuleReturnScope);

		object char_literal241_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "and_expression");
		DebugLocation(426, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// C.g:427:2: ( equality_expression ( '&' equality_expression )* )
			DebugEnterAlt(1);
			// C.g:427:4: equality_expression ( '&' equality_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(427, 4);
			PushFollow(Follow._equality_expression_in_and_expression1637);
			equality_expression240=equality_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equality_expression240.Tree, equality_expression240, retval);
			DebugLocation(427, 24);
			// C.g:427:24: ( '&' equality_expression )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if ((LA59_0==28))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:427:25: '&' equality_expression
					{
					DebugLocation(427, 25);
					char_literal241=(IToken)Match(input,28,Follow._28_in_and_expression1640); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal241_tree = (object)adaptor.Create(char_literal241, retval);
					adaptor.AddChild(root_0, char_literal241_tree);
					}
					DebugLocation(427, 29);
					PushFollow(Follow._equality_expression_in_and_expression1642);
					equality_expression242=equality_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equality_expression242.Tree, equality_expression242, retval);

					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expression", 61);
			LeaveRule("and_expression", 61);
			LeaveRule_and_expression();
			if (state.backtracking > 0) { Memoize(input, 61, and_expression_StartIndex); }

		}
		DebugLocation(428, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expression"); }
		return retval;

	}
	// $ANTLR end "and_expression"

	partial void EnterRule_equality_expression();
	partial void LeaveRule_equality_expression();

	// $ANTLR start "equality_expression"
	// C.g:429:1: equality_expression : relational_expression ( ( '==' | '!=' ) relational_expression )* ;
	[GrammarRule("equality_expression")]
	public XAstParserRuleReturnScope equality_expression()
	{
		EnterRule_equality_expression();
		EnterRule("equality_expression", 62);
		var retval = new XAstParserRuleReturnScope("equality_expression");
		
		retval.Start = (IToken)input.LT(1);
		int equality_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set244 = default(IToken);
		XAstParserRuleReturnScope relational_expression243 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope relational_expression245 = default(XAstParserRuleReturnScope);

		object set244_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "equality_expression");
		DebugLocation(429, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// C.g:430:2: ( relational_expression ( ( '==' | '!=' ) relational_expression )* )
			DebugEnterAlt(1);
			// C.g:430:4: relational_expression ( ( '==' | '!=' ) relational_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(430, 4);
			PushFollow(Follow._relational_expression_in_equality_expression1654);
			relational_expression243=relational_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, relational_expression243.Tree, relational_expression243, retval);
			DebugLocation(430, 26);
			// C.g:430:26: ( ( '==' | '!=' ) relational_expression )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=2;
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if ((LA60_0==24||LA60_0==53))
				{
					alt60 = 1;
				}


				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:430:27: ( '==' | '!=' ) relational_expression
					{
					DebugLocation(430, 27);

					set244=(IToken)input.LT(1);
					if (input.LA(1)==24||input.LA(1)==53)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set244, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(430, 39);
					PushFollow(Follow._relational_expression_in_equality_expression1663);
					relational_expression245=relational_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, relational_expression245.Tree, relational_expression245, retval);

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equality_expression", 62);
			LeaveRule("equality_expression", 62);
			LeaveRule_equality_expression();
			if (state.backtracking > 0) { Memoize(input, 62, equality_expression_StartIndex); }

		}
		DebugLocation(431, 1);
		} finally { DebugExitRule(GrammarFileName, "equality_expression"); }
		return retval;

	}
	// $ANTLR end "equality_expression"

	partial void EnterRule_relational_expression();
	partial void LeaveRule_relational_expression();

	// $ANTLR start "relational_expression"
	// C.g:433:1: relational_expression : shift_expression ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* ;
	[GrammarRule("relational_expression")]
	public XAstParserRuleReturnScope relational_expression()
	{
		EnterRule_relational_expression();
		EnterRule("relational_expression", 63);
		var retval = new XAstParserRuleReturnScope("relational_expression");
		
		retval.Start = (IToken)input.LT(1);
		int relational_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set247 = default(IToken);
		XAstParserRuleReturnScope shift_expression246 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope shift_expression248 = default(XAstParserRuleReturnScope);

		object set247_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "relational_expression");
		DebugLocation(433, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// C.g:434:2: ( shift_expression ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* )
			DebugEnterAlt(1);
			// C.g:434:4: shift_expression ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(434, 4);
			PushFollow(Follow._shift_expression_in_relational_expression1676);
			shift_expression246=shift_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expression246.Tree, shift_expression246, retval);
			DebugLocation(434, 21);
			// C.g:434:21: ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==48||LA61_0==51||(LA61_0>=54 && LA61_0<=55)))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:434:22: ( '<' | '>' | '<=' | '>=' ) shift_expression
					{
					DebugLocation(434, 22);

					set247=(IToken)input.LT(1);
					if (input.LA(1)==48||input.LA(1)==51||(input.LA(1)>=54 && input.LA(1)<=55))
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set247, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(434, 42);
					PushFollow(Follow._shift_expression_in_relational_expression1689);
					shift_expression248=shift_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expression248.Tree, shift_expression248, retval);

					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relational_expression", 63);
			LeaveRule("relational_expression", 63);
			LeaveRule_relational_expression();
			if (state.backtracking > 0) { Memoize(input, 63, relational_expression_StartIndex); }

		}
		DebugLocation(435, 1);
		} finally { DebugExitRule(GrammarFileName, "relational_expression"); }
		return retval;

	}
	// $ANTLR end "relational_expression"

	partial void EnterRule_shift_expression();
	partial void LeaveRule_shift_expression();

	// $ANTLR start "shift_expression"
	// C.g:437:1: shift_expression : additive_expression ( ( '<<' | '>>' ) additive_expression )* ;
	[GrammarRule("shift_expression")]
	public XAstParserRuleReturnScope shift_expression()
	{
		EnterRule_shift_expression();
		EnterRule("shift_expression", 64);
		var retval = new XAstParserRuleReturnScope("shift_expression");
		
		retval.Start = (IToken)input.LT(1);
		int shift_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set250 = default(IToken);
		XAstParserRuleReturnScope additive_expression249 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope additive_expression251 = default(XAstParserRuleReturnScope);

		object set250_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "shift_expression");
		DebugLocation(437, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// C.g:438:2: ( additive_expression ( ( '<<' | '>>' ) additive_expression )* )
			DebugEnterAlt(1);
			// C.g:438:4: additive_expression ( ( '<<' | '>>' ) additive_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(438, 4);
			PushFollow(Follow._additive_expression_in_shift_expression1702);
			additive_expression249=additive_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, additive_expression249.Tree, additive_expression249, retval);
			DebugLocation(438, 24);
			// C.g:438:24: ( ( '<<' | '>>' ) additive_expression )*
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=2;
				try { DebugEnterDecision(62, false);
				int LA62_0 = input.LA(1);

				if ((LA62_0==49||LA62_0==56))
				{
					alt62 = 1;
				}


				} finally { DebugExitDecision(62); }
				switch ( alt62 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:438:25: ( '<<' | '>>' ) additive_expression
					{
					DebugLocation(438, 25);

					set250=(IToken)input.LT(1);
					if (input.LA(1)==49||input.LA(1)==56)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set250, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(438, 37);
					PushFollow(Follow._additive_expression_in_shift_expression1711);
					additive_expression251=additive_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, additive_expression251.Tree, additive_expression251, retval);

					}
					break;

				default:
					goto loop62;
				}
			}

			loop62:
				;

			} finally { DebugExitSubRule(62); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expression", 64);
			LeaveRule("shift_expression", 64);
			LeaveRule_shift_expression();
			if (state.backtracking > 0) { Memoize(input, 64, shift_expression_StartIndex); }

		}
		DebugLocation(439, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expression"); }
		return retval;

	}
	// $ANTLR end "shift_expression"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// C.g:443:1: statement : ( labeled_statement | compound_statement | expression_statement | selection_statement | iteration_statement | jump_statement );
	[GrammarRule("statement")]
	public XAstParserRuleReturnScope statement()
	{
		EnterRule_statement();
		EnterRule("statement", 65);
		var retval = new XAstParserRuleReturnScope("statement");
		
		retval.Start = (IToken)input.LT(1);
		int statement_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope labeled_statement252 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope compound_statement253 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_statement254 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope selection_statement255 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope iteration_statement256 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope jump_statement257 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(443, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// C.g:444:2: ( labeled_statement | compound_statement | expression_statement | selection_statement | iteration_statement | jump_statement )
			int alt63=6;
			try { DebugEnterDecision(63, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				int LA63_1 = input.LA(2);

				if ((LA63_1==46))
				{
					alt63 = 1;
				}
				else if (((LA63_1>=24 && LA63_1<=30)||(LA63_1>=32 && LA63_1<=42)||(LA63_1>=44 && LA63_1<=45)||(LA63_1>=47 && LA63_1<=59)||(LA63_1>=61 && LA63_1<=62)||(LA63_1>=97 && LA63_1<=99)))
				{
					alt63 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 66:
			case 70:
				{
				alt63 = 1;
				}
				break;
			case 96:
				{
				alt63 = 2;
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
			case 23:
			case 28:
			case 30:
			case 32:
			case 34:
			case 35:
			case 38:
			case 39:
			case 47:
			case 86:
			case 101:
				{
				alt63 = 3;
				}
				break;
			case 79:
			case 89:
				{
				alt63 = 4;
				}
				break;
			case 71:
			case 77:
			case 95:
				{
				alt63 = 5;
				}
				break;
			case 65:
			case 69:
			case 78:
			case 83:
				{
				alt63 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:444:4: labeled_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(444, 4);
				PushFollow(Follow._labeled_statement_in_statement1726);
				labeled_statement252=labeled_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, labeled_statement252.Tree, labeled_statement252, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:445:4: compound_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(445, 4);
				PushFollow(Follow._compound_statement_in_statement1731);
				compound_statement253=compound_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, compound_statement253.Tree, compound_statement253, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:446:4: expression_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(446, 4);
				PushFollow(Follow._expression_statement_in_statement1736);
				expression_statement254=expression_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_statement254.Tree, expression_statement254, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:447:4: selection_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(447, 4);
				PushFollow(Follow._selection_statement_in_statement1741);
				selection_statement255=selection_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selection_statement255.Tree, selection_statement255, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:448:4: iteration_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(448, 4);
				PushFollow(Follow._iteration_statement_in_statement1746);
				iteration_statement256=iteration_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, iteration_statement256.Tree, iteration_statement256, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:449:4: jump_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(449, 4);
				PushFollow(Follow._jump_statement_in_statement1751);
				jump_statement257=jump_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, jump_statement257.Tree, jump_statement257, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 65);
			LeaveRule("statement", 65);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 65, statement_StartIndex); }

		}
		DebugLocation(450, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_labeled_statement();
	partial void LeaveRule_labeled_statement();

	// $ANTLR start "labeled_statement"
	// C.g:452:1: labeled_statement : ( IDENTIFIER ':' statement | 'case' constant_expression ':' statement | 'default' ':' statement );
	[GrammarRule("labeled_statement")]
	public XAstParserRuleReturnScope labeled_statement()
	{
		EnterRule_labeled_statement();
		EnterRule("labeled_statement", 66);
		var retval = new XAstParserRuleReturnScope("labeled_statement");
		
		retval.Start = (IToken)input.LT(1);
		int labeled_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER258 = default(IToken);
		IToken char_literal259 = default(IToken);
		IToken string_literal261 = default(IToken);
		IToken char_literal263 = default(IToken);
		IToken string_literal265 = default(IToken);
		IToken char_literal266 = default(IToken);
		XAstParserRuleReturnScope statement260 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression262 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement264 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement267 = default(XAstParserRuleReturnScope);

		object IDENTIFIER258_tree = default(object);
		object char_literal259_tree = default(object);
		object string_literal261_tree = default(object);
		object char_literal263_tree = default(object);
		object string_literal265_tree = default(object);
		object char_literal266_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "labeled_statement");
		DebugLocation(452, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }

			// C.g:453:2: ( IDENTIFIER ':' statement | 'case' constant_expression ':' statement | 'default' ':' statement )
			int alt64=3;
			try { DebugEnterDecision(64, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				alt64 = 1;
				}
				break;
			case 66:
				{
				alt64 = 2;
				}
				break;
			case 70:
				{
				alt64 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 64, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:453:4: IDENTIFIER ':' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(453, 4);
				IDENTIFIER258=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_labeled_statement1762), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER258_tree = (object)adaptor.Create(IDENTIFIER258, retval);
				adaptor.AddChild(root_0, IDENTIFIER258_tree);
				}
				DebugLocation(453, 15);
				char_literal259=(IToken)Match(input,46,Follow._46_in_labeled_statement1764); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal259_tree = (object)adaptor.Create(char_literal259, retval);
				adaptor.AddChild(root_0, char_literal259_tree);
				}
				DebugLocation(453, 19);
				PushFollow(Follow._statement_in_labeled_statement1766);
				statement260=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement260.Tree, statement260, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:454:4: 'case' constant_expression ':' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(454, 4);
				string_literal261=(IToken)Match(input,66,Follow._66_in_labeled_statement1771); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal261_tree = (object)adaptor.Create(string_literal261, retval);
				adaptor.AddChild(root_0, string_literal261_tree);
				}
				DebugLocation(454, 11);
				PushFollow(Follow._constant_expression_in_labeled_statement1773);
				constant_expression262=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression262.Tree, constant_expression262, retval);
				DebugLocation(454, 31);
				char_literal263=(IToken)Match(input,46,Follow._46_in_labeled_statement1775); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal263_tree = (object)adaptor.Create(char_literal263, retval);
				adaptor.AddChild(root_0, char_literal263_tree);
				}
				DebugLocation(454, 35);
				PushFollow(Follow._statement_in_labeled_statement1777);
				statement264=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement264.Tree, statement264, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:455:4: 'default' ':' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(455, 4);
				string_literal265=(IToken)Match(input,70,Follow._70_in_labeled_statement1782); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal265_tree = (object)adaptor.Create(string_literal265, retval);
				adaptor.AddChild(root_0, string_literal265_tree);
				}
				DebugLocation(455, 14);
				char_literal266=(IToken)Match(input,46,Follow._46_in_labeled_statement1784); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal266_tree = (object)adaptor.Create(char_literal266, retval);
				adaptor.AddChild(root_0, char_literal266_tree);
				}
				DebugLocation(455, 18);
				PushFollow(Follow._statement_in_labeled_statement1786);
				statement267=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement267.Tree, statement267, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("labeled_statement", 66);
			LeaveRule("labeled_statement", 66);
			LeaveRule_labeled_statement();
			if (state.backtracking > 0) { Memoize(input, 66, labeled_statement_StartIndex); }

		}
		DebugLocation(456, 1);
		} finally { DebugExitRule(GrammarFileName, "labeled_statement"); }
		return retval;

	}
	// $ANTLR end "labeled_statement"

	partial void EnterRule_compound_statement();
	partial void LeaveRule_compound_statement();

	// $ANTLR start "compound_statement"
	// C.g:458:1: compound_statement : '{' ( declaration )* ( statement_list )? '}' ;
	[GrammarRule("compound_statement")]
	public XAstParserRuleReturnScope compound_statement()
	{
		EnterRule_compound_statement();
		EnterRule("compound_statement", 67);
		var retval = new XAstParserRuleReturnScope("compound_statement");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int compound_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal268 = default(IToken);
		IToken char_literal271 = default(IToken);
		XAstParserRuleReturnScope declaration269 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement_list270 = default(XAstParserRuleReturnScope);

		object char_literal268_tree = default(object);
		object char_literal271_tree = default(object);

		  Symbols_stack.Peek().types =  new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "compound_statement");
		DebugLocation(458, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return retval; }

			// C.g:463:2: ( '{' ( declaration )* ( statement_list )? '}' )
			DebugEnterAlt(1);
			// C.g:463:4: '{' ( declaration )* ( statement_list )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(463, 4);
			char_literal268=(IToken)Match(input,96,Follow._96_in_compound_statement1808); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal268_tree = (object)adaptor.Create(char_literal268, retval);
			adaptor.AddChild(root_0, char_literal268_tree);
			}
			DebugLocation(463, 8);
			// C.g:463:8: ( declaration )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, false);
				try
				{
					alt65 = dfa65.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:463:8: declaration
					{
					DebugLocation(463, 8);
					PushFollow(Follow._declaration_in_compound_statement1810);
					declaration269=declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declaration269.Tree, declaration269, retval);

					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }

			DebugLocation(463, 21);
			// C.g:463:21: ( statement_list )?
			int alt66=2;
			try { DebugEnterSubRule(66);
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if ((LA66_0==CHARACTER_LITERAL||LA66_0==DECIMAL_LITERAL||LA66_0==FLOATING_POINT_LITERAL||LA66_0==HEX_LITERAL||LA66_0==IDENTIFIER||LA66_0==OCTAL_LITERAL||LA66_0==STRING_LITERAL||LA66_0==23||LA66_0==28||LA66_0==30||LA66_0==32||(LA66_0>=34 && LA66_0<=35)||(LA66_0>=38 && LA66_0<=39)||LA66_0==47||(LA66_0>=65 && LA66_0<=66)||(LA66_0>=69 && LA66_0<=71)||(LA66_0>=77 && LA66_0<=79)||LA66_0==83||LA66_0==86||LA66_0==89||(LA66_0>=95 && LA66_0<=96)||LA66_0==101))
			{
				alt66 = 1;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:463:21: statement_list
				{
				DebugLocation(463, 21);
				PushFollow(Follow._statement_list_in_compound_statement1813);
				statement_list270=statement_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement_list270.Tree, statement_list270, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(66); }

			DebugLocation(463, 37);
			char_literal271=(IToken)Match(input,100,Follow._100_in_compound_statement1816); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal271_tree = (object)adaptor.Create(char_literal271, retval);
			adaptor.AddChild(root_0, char_literal271_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("compound_statement", 67);
			LeaveRule("compound_statement", 67);
			LeaveRule_compound_statement();
			if (state.backtracking > 0) { Memoize(input, 67, compound_statement_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(464, 1);
		} finally { DebugExitRule(GrammarFileName, "compound_statement"); }
		return retval;

	}
	// $ANTLR end "compound_statement"

	partial void EnterRule_statement_list();
	partial void LeaveRule_statement_list();

	// $ANTLR start "statement_list"
	// C.g:466:1: statement_list : ( statement )+ ;
	[GrammarRule("statement_list")]
	public XAstParserRuleReturnScope statement_list()
	{
		EnterRule_statement_list();
		EnterRule("statement_list", 68);
		var retval = new XAstParserRuleReturnScope("statement_list");
		
		retval.Start = (IToken)input.LT(1);
		int statement_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope statement272 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "statement_list");
		DebugLocation(466, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return retval; }

			// C.g:467:2: ( ( statement )+ )
			DebugEnterAlt(1);
			// C.g:467:4: ( statement )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(467, 4);
			// C.g:467:4: ( statement )+
			int cnt67=0;
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if ((LA67_0==CHARACTER_LITERAL||LA67_0==DECIMAL_LITERAL||LA67_0==FLOATING_POINT_LITERAL||LA67_0==HEX_LITERAL||LA67_0==IDENTIFIER||LA67_0==OCTAL_LITERAL||LA67_0==STRING_LITERAL||LA67_0==23||LA67_0==28||LA67_0==30||LA67_0==32||(LA67_0>=34 && LA67_0<=35)||(LA67_0>=38 && LA67_0<=39)||LA67_0==47||(LA67_0>=65 && LA67_0<=66)||(LA67_0>=69 && LA67_0<=71)||(LA67_0>=77 && LA67_0<=79)||LA67_0==83||LA67_0==86||LA67_0==89||(LA67_0>=95 && LA67_0<=96)||LA67_0==101))
				{
					alt67 = 1;
				}


				} finally { DebugExitDecision(67); }
				switch (alt67)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:467:4: statement
					{
					DebugLocation(467, 4);
					PushFollow(Follow._statement_in_statement_list1827);
					statement272=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement272.Tree, statement272, retval);

					}
					break;

				default:
					if (cnt67 >= 1)
						goto loop67;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee67 = new EarlyExitException( 67, input );
					DebugRecognitionException(eee67);
					throw eee67;
				}
				cnt67++;
			}
			loop67:
				;

			} finally { DebugExitSubRule(67); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement_list", 68);
			LeaveRule("statement_list", 68);
			LeaveRule_statement_list();
			if (state.backtracking > 0) { Memoize(input, 68, statement_list_StartIndex); }

		}
		DebugLocation(468, 1);
		} finally { DebugExitRule(GrammarFileName, "statement_list"); }
		return retval;

	}
	// $ANTLR end "statement_list"

	partial void EnterRule_expression_statement();
	partial void LeaveRule_expression_statement();

	// $ANTLR start "expression_statement"
	// C.g:470:1: expression_statement : ( ';' | expression ';' );
	[GrammarRule("expression_statement")]
	public XAstParserRuleReturnScope expression_statement()
	{
		EnterRule_expression_statement();
		EnterRule("expression_statement", 69);
		var retval = new XAstParserRuleReturnScope("expression_statement");
		
		retval.Start = (IToken)input.LT(1);
		int expression_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal273 = default(IToken);
		IToken char_literal275 = default(IToken);
		XAstParserRuleReturnScope expression274 = default(XAstParserRuleReturnScope);

		object char_literal273_tree = default(object);
		object char_literal275_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expression_statement");
		DebugLocation(470, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return retval; }

			// C.g:471:2: ( ';' | expression ';' )
			int alt68=2;
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==47))
			{
				alt68 = 1;
			}
			else if ((LA68_0==CHARACTER_LITERAL||LA68_0==DECIMAL_LITERAL||LA68_0==FLOATING_POINT_LITERAL||LA68_0==HEX_LITERAL||LA68_0==IDENTIFIER||LA68_0==OCTAL_LITERAL||LA68_0==STRING_LITERAL||LA68_0==23||LA68_0==28||LA68_0==30||LA68_0==32||(LA68_0>=34 && LA68_0<=35)||(LA68_0>=38 && LA68_0<=39)||LA68_0==86||LA68_0==101))
			{
				alt68 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:471:4: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(471, 4);
				char_literal273=(IToken)Match(input,47,Follow._47_in_expression_statement1839); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal273_tree = (object)adaptor.Create(char_literal273, retval);
				adaptor.AddChild(root_0, char_literal273_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:472:4: expression ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(472, 4);
				PushFollow(Follow._expression_in_expression_statement1844);
				expression274=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression274.Tree, expression274, retval);
				DebugLocation(472, 15);
				char_literal275=(IToken)Match(input,47,Follow._47_in_expression_statement1846); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal275_tree = (object)adaptor.Create(char_literal275, retval);
				adaptor.AddChild(root_0, char_literal275_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_statement", 69);
			LeaveRule("expression_statement", 69);
			LeaveRule_expression_statement();
			if (state.backtracking > 0) { Memoize(input, 69, expression_statement_StartIndex); }

		}
		DebugLocation(473, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_statement"); }
		return retval;

	}
	// $ANTLR end "expression_statement"

	partial void EnterRule_selection_statement();
	partial void LeaveRule_selection_statement();

	// $ANTLR start "selection_statement"
	// C.g:475:1: selection_statement : ( 'if' '(' expression ')' statement ( options {k=1; backtrack=false; } : 'else' statement )? | 'switch' '(' expression ')' statement );
	[GrammarRule("selection_statement")]
	public XAstParserRuleReturnScope selection_statement()
	{
		EnterRule_selection_statement();
		EnterRule("selection_statement", 70);
		var retval = new XAstParserRuleReturnScope("selection_statement");
		
		retval.Start = (IToken)input.LT(1);
		int selection_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal276 = default(IToken);
		IToken char_literal277 = default(IToken);
		IToken char_literal279 = default(IToken);
		IToken string_literal281 = default(IToken);
		IToken string_literal283 = default(IToken);
		IToken char_literal284 = default(IToken);
		IToken char_literal286 = default(IToken);
		XAstParserRuleReturnScope expression278 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement280 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement282 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression285 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement287 = default(XAstParserRuleReturnScope);

		object string_literal276_tree = default(object);
		object char_literal277_tree = default(object);
		object char_literal279_tree = default(object);
		object string_literal281_tree = default(object);
		object string_literal283_tree = default(object);
		object char_literal284_tree = default(object);
		object char_literal286_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "selection_statement");
		DebugLocation(475, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return retval; }

			// C.g:476:2: ( 'if' '(' expression ')' statement ( options {k=1; backtrack=false; } : 'else' statement )? | 'switch' '(' expression ')' statement )
			int alt70=2;
			try { DebugEnterDecision(70, false);
			int LA70_0 = input.LA(1);

			if ((LA70_0==79))
			{
				alt70 = 1;
			}
			else if ((LA70_0==89))
			{
				alt70 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 70, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:476:4: 'if' '(' expression ')' statement ( options {k=1; backtrack=false; } : 'else' statement )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(476, 4);
				string_literal276=(IToken)Match(input,79,Follow._79_in_selection_statement1857); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal276_tree = (object)adaptor.Create(string_literal276, retval);
				adaptor.AddChild(root_0, string_literal276_tree);
				}
				DebugLocation(476, 9);
				char_literal277=(IToken)Match(input,30,Follow._30_in_selection_statement1859); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal277_tree = (object)adaptor.Create(char_literal277, retval);
				adaptor.AddChild(root_0, char_literal277_tree);
				}
				DebugLocation(476, 13);
				PushFollow(Follow._expression_in_selection_statement1861);
				expression278=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression278.Tree, expression278, retval);
				DebugLocation(476, 24);
				char_literal279=(IToken)Match(input,31,Follow._31_in_selection_statement1863); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal279_tree = (object)adaptor.Create(char_literal279, retval);
				adaptor.AddChild(root_0, char_literal279_tree);
				}
				DebugLocation(476, 28);
				PushFollow(Follow._statement_in_selection_statement1865);
				statement280=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement280.Tree, statement280, retval);
				DebugLocation(476, 38);
				// C.g:476:38: ( options {k=1; backtrack=false; } : 'else' statement )?
				int alt69=2;
				try { DebugEnterSubRule(69);
				try { DebugEnterDecision(69, false);
				int LA69_0 = input.LA(1);

				if ((LA69_0==73))
				{
					int LA69_1 = input.LA(2);

					if ((true))
					{
						alt69 = 1;
					}
				}
				} finally { DebugExitDecision(69); }
				switch (alt69)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:476:71: 'else' statement
					{
					DebugLocation(476, 71);
					string_literal281=(IToken)Match(input,73,Follow._73_in_selection_statement1880); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal281_tree = (object)adaptor.Create(string_literal281, retval);
					adaptor.AddChild(root_0, string_literal281_tree);
					}
					DebugLocation(476, 78);
					PushFollow(Follow._statement_in_selection_statement1882);
					statement282=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement282.Tree, statement282, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(69); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:477:4: 'switch' '(' expression ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(477, 4);
				string_literal283=(IToken)Match(input,89,Follow._89_in_selection_statement1889); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal283_tree = (object)adaptor.Create(string_literal283, retval);
				adaptor.AddChild(root_0, string_literal283_tree);
				}
				DebugLocation(477, 13);
				char_literal284=(IToken)Match(input,30,Follow._30_in_selection_statement1891); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal284_tree = (object)adaptor.Create(char_literal284, retval);
				adaptor.AddChild(root_0, char_literal284_tree);
				}
				DebugLocation(477, 17);
				PushFollow(Follow._expression_in_selection_statement1893);
				expression285=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression285.Tree, expression285, retval);
				DebugLocation(477, 28);
				char_literal286=(IToken)Match(input,31,Follow._31_in_selection_statement1895); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal286_tree = (object)adaptor.Create(char_literal286, retval);
				adaptor.AddChild(root_0, char_literal286_tree);
				}
				DebugLocation(477, 32);
				PushFollow(Follow._statement_in_selection_statement1897);
				statement287=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement287.Tree, statement287, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selection_statement", 70);
			LeaveRule("selection_statement", 70);
			LeaveRule_selection_statement();
			if (state.backtracking > 0) { Memoize(input, 70, selection_statement_StartIndex); }

		}
		DebugLocation(478, 1);
		} finally { DebugExitRule(GrammarFileName, "selection_statement"); }
		return retval;

	}
	// $ANTLR end "selection_statement"

	partial void EnterRule_iteration_statement();
	partial void LeaveRule_iteration_statement();

	// $ANTLR start "iteration_statement"
	// C.g:480:1: iteration_statement : ( 'while' '(' expression ')' statement | 'do' statement 'while' '(' expression ')' ';' | 'for' '(' expression_statement expression_statement ( expression )? ')' statement );
	[GrammarRule("iteration_statement")]
	public XAstParserRuleReturnScope iteration_statement()
	{
		EnterRule_iteration_statement();
		EnterRule("iteration_statement", 71);
		var retval = new XAstParserRuleReturnScope("iteration_statement");
		
		retval.Start = (IToken)input.LT(1);
		int iteration_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal288 = default(IToken);
		IToken char_literal289 = default(IToken);
		IToken char_literal291 = default(IToken);
		IToken string_literal293 = default(IToken);
		IToken string_literal295 = default(IToken);
		IToken char_literal296 = default(IToken);
		IToken char_literal298 = default(IToken);
		IToken char_literal299 = default(IToken);
		IToken string_literal300 = default(IToken);
		IToken char_literal301 = default(IToken);
		IToken char_literal305 = default(IToken);
		XAstParserRuleReturnScope expression290 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement292 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement294 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression297 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_statement302 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_statement303 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression304 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement306 = default(XAstParserRuleReturnScope);

		object string_literal288_tree = default(object);
		object char_literal289_tree = default(object);
		object char_literal291_tree = default(object);
		object string_literal293_tree = default(object);
		object string_literal295_tree = default(object);
		object char_literal296_tree = default(object);
		object char_literal298_tree = default(object);
		object char_literal299_tree = default(object);
		object string_literal300_tree = default(object);
		object char_literal301_tree = default(object);
		object char_literal305_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "iteration_statement");
		DebugLocation(480, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return retval; }

			// C.g:481:2: ( 'while' '(' expression ')' statement | 'do' statement 'while' '(' expression ')' ';' | 'for' '(' expression_statement expression_statement ( expression )? ')' statement )
			int alt72=3;
			try { DebugEnterDecision(72, false);
			switch (input.LA(1))
			{
			case 95:
				{
				alt72 = 1;
				}
				break;
			case 71:
				{
				alt72 = 2;
				}
				break;
			case 77:
				{
				alt72 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:481:4: 'while' '(' expression ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(481, 4);
				string_literal288=(IToken)Match(input,95,Follow._95_in_iteration_statement1908); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal288_tree = (object)adaptor.Create(string_literal288, retval);
				adaptor.AddChild(root_0, string_literal288_tree);
				}
				DebugLocation(481, 12);
				char_literal289=(IToken)Match(input,30,Follow._30_in_iteration_statement1910); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal289_tree = (object)adaptor.Create(char_literal289, retval);
				adaptor.AddChild(root_0, char_literal289_tree);
				}
				DebugLocation(481, 16);
				PushFollow(Follow._expression_in_iteration_statement1912);
				expression290=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression290.Tree, expression290, retval);
				DebugLocation(481, 27);
				char_literal291=(IToken)Match(input,31,Follow._31_in_iteration_statement1914); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal291_tree = (object)adaptor.Create(char_literal291, retval);
				adaptor.AddChild(root_0, char_literal291_tree);
				}
				DebugLocation(481, 31);
				PushFollow(Follow._statement_in_iteration_statement1916);
				statement292=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement292.Tree, statement292, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:482:4: 'do' statement 'while' '(' expression ')' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(482, 4);
				string_literal293=(IToken)Match(input,71,Follow._71_in_iteration_statement1921); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal293_tree = (object)adaptor.Create(string_literal293, retval);
				adaptor.AddChild(root_0, string_literal293_tree);
				}
				DebugLocation(482, 9);
				PushFollow(Follow._statement_in_iteration_statement1923);
				statement294=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement294.Tree, statement294, retval);
				DebugLocation(482, 19);
				string_literal295=(IToken)Match(input,95,Follow._95_in_iteration_statement1925); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal295_tree = (object)adaptor.Create(string_literal295, retval);
				adaptor.AddChild(root_0, string_literal295_tree);
				}
				DebugLocation(482, 27);
				char_literal296=(IToken)Match(input,30,Follow._30_in_iteration_statement1927); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal296_tree = (object)adaptor.Create(char_literal296, retval);
				adaptor.AddChild(root_0, char_literal296_tree);
				}
				DebugLocation(482, 31);
				PushFollow(Follow._expression_in_iteration_statement1929);
				expression297=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression297.Tree, expression297, retval);
				DebugLocation(482, 42);
				char_literal298=(IToken)Match(input,31,Follow._31_in_iteration_statement1931); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal298_tree = (object)adaptor.Create(char_literal298, retval);
				adaptor.AddChild(root_0, char_literal298_tree);
				}
				DebugLocation(482, 46);
				char_literal299=(IToken)Match(input,47,Follow._47_in_iteration_statement1933); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal299_tree = (object)adaptor.Create(char_literal299, retval);
				adaptor.AddChild(root_0, char_literal299_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:483:4: 'for' '(' expression_statement expression_statement ( expression )? ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(483, 4);
				string_literal300=(IToken)Match(input,77,Follow._77_in_iteration_statement1938); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal300_tree = (object)adaptor.Create(string_literal300, retval);
				adaptor.AddChild(root_0, string_literal300_tree);
				}
				DebugLocation(483, 10);
				char_literal301=(IToken)Match(input,30,Follow._30_in_iteration_statement1940); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal301_tree = (object)adaptor.Create(char_literal301, retval);
				adaptor.AddChild(root_0, char_literal301_tree);
				}
				DebugLocation(483, 14);
				PushFollow(Follow._expression_statement_in_iteration_statement1942);
				expression_statement302=expression_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_statement302.Tree, expression_statement302, retval);
				DebugLocation(483, 35);
				PushFollow(Follow._expression_statement_in_iteration_statement1944);
				expression_statement303=expression_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_statement303.Tree, expression_statement303, retval);
				DebugLocation(483, 56);
				// C.g:483:56: ( expression )?
				int alt71=2;
				try { DebugEnterSubRule(71);
				try { DebugEnterDecision(71, false);
				int LA71_0 = input.LA(1);

				if ((LA71_0==CHARACTER_LITERAL||LA71_0==DECIMAL_LITERAL||LA71_0==FLOATING_POINT_LITERAL||LA71_0==HEX_LITERAL||LA71_0==IDENTIFIER||LA71_0==OCTAL_LITERAL||LA71_0==STRING_LITERAL||LA71_0==23||LA71_0==28||LA71_0==30||LA71_0==32||(LA71_0>=34 && LA71_0<=35)||(LA71_0>=38 && LA71_0<=39)||LA71_0==86||LA71_0==101))
				{
					alt71 = 1;
				}
				} finally { DebugExitDecision(71); }
				switch (alt71)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:483:56: expression
					{
					DebugLocation(483, 56);
					PushFollow(Follow._expression_in_iteration_statement1946);
					expression304=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression304.Tree, expression304, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(71); }

				DebugLocation(483, 68);
				char_literal305=(IToken)Match(input,31,Follow._31_in_iteration_statement1949); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal305_tree = (object)adaptor.Create(char_literal305, retval);
				adaptor.AddChild(root_0, char_literal305_tree);
				}
				DebugLocation(483, 72);
				PushFollow(Follow._statement_in_iteration_statement1951);
				statement306=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement306.Tree, statement306, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("iteration_statement", 71);
			LeaveRule("iteration_statement", 71);
			LeaveRule_iteration_statement();
			if (state.backtracking > 0) { Memoize(input, 71, iteration_statement_StartIndex); }

		}
		DebugLocation(484, 1);
		} finally { DebugExitRule(GrammarFileName, "iteration_statement"); }
		return retval;

	}
	// $ANTLR end "iteration_statement"

	partial void EnterRule_jump_statement();
	partial void LeaveRule_jump_statement();

	// $ANTLR start "jump_statement"
	// C.g:486:1: jump_statement : ( 'goto' IDENTIFIER ';' | 'continue' ';' | 'break' ';' | 'return' ';' | 'return' expression ';' );
	[GrammarRule("jump_statement")]
	public XAstParserRuleReturnScope jump_statement()
	{
		EnterRule_jump_statement();
		EnterRule("jump_statement", 72);
		var retval = new XAstParserRuleReturnScope("jump_statement");
		
		retval.Start = (IToken)input.LT(1);
		int jump_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal307 = default(IToken);
		IToken IDENTIFIER308 = default(IToken);
		IToken char_literal309 = default(IToken);
		IToken string_literal310 = default(IToken);
		IToken char_literal311 = default(IToken);
		IToken string_literal312 = default(IToken);
		IToken char_literal313 = default(IToken);
		IToken string_literal314 = default(IToken);
		IToken char_literal315 = default(IToken);
		IToken string_literal316 = default(IToken);
		IToken char_literal318 = default(IToken);
		XAstParserRuleReturnScope expression317 = default(XAstParserRuleReturnScope);

		object string_literal307_tree = default(object);
		object IDENTIFIER308_tree = default(object);
		object char_literal309_tree = default(object);
		object string_literal310_tree = default(object);
		object char_literal311_tree = default(object);
		object string_literal312_tree = default(object);
		object char_literal313_tree = default(object);
		object string_literal314_tree = default(object);
		object char_literal315_tree = default(object);
		object string_literal316_tree = default(object);
		object char_literal318_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "jump_statement");
		DebugLocation(486, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return retval; }

			// C.g:487:2: ( 'goto' IDENTIFIER ';' | 'continue' ';' | 'break' ';' | 'return' ';' | 'return' expression ';' )
			int alt73=5;
			try { DebugEnterDecision(73, false);
			switch (input.LA(1))
			{
			case 78:
				{
				alt73 = 1;
				}
				break;
			case 69:
				{
				alt73 = 2;
				}
				break;
			case 65:
				{
				alt73 = 3;
				}
				break;
			case 83:
				{
				int LA73_4 = input.LA(2);

				if ((LA73_4==47))
				{
					alt73 = 4;
				}
				else if ((LA73_4==CHARACTER_LITERAL||LA73_4==DECIMAL_LITERAL||LA73_4==FLOATING_POINT_LITERAL||LA73_4==HEX_LITERAL||LA73_4==IDENTIFIER||LA73_4==OCTAL_LITERAL||LA73_4==STRING_LITERAL||LA73_4==23||LA73_4==28||LA73_4==30||LA73_4==32||(LA73_4>=34 && LA73_4<=35)||(LA73_4>=38 && LA73_4<=39)||LA73_4==86||LA73_4==101))
				{
					alt73 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 73, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 73, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:487:4: 'goto' IDENTIFIER ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(487, 4);
				string_literal307=(IToken)Match(input,78,Follow._78_in_jump_statement1962); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal307_tree = (object)adaptor.Create(string_literal307, retval);
				adaptor.AddChild(root_0, string_literal307_tree);
				}
				DebugLocation(487, 11);
				IDENTIFIER308=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_jump_statement1964), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER308_tree = (object)adaptor.Create(IDENTIFIER308, retval);
				adaptor.AddChild(root_0, IDENTIFIER308_tree);
				}
				DebugLocation(487, 22);
				char_literal309=(IToken)Match(input,47,Follow._47_in_jump_statement1966); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal309_tree = (object)adaptor.Create(char_literal309, retval);
				adaptor.AddChild(root_0, char_literal309_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:488:4: 'continue' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(488, 4);
				string_literal310=(IToken)Match(input,69,Follow._69_in_jump_statement1971); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal310_tree = (object)adaptor.Create(string_literal310, retval);
				adaptor.AddChild(root_0, string_literal310_tree);
				}
				DebugLocation(488, 15);
				char_literal311=(IToken)Match(input,47,Follow._47_in_jump_statement1973); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal311_tree = (object)adaptor.Create(char_literal311, retval);
				adaptor.AddChild(root_0, char_literal311_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:489:4: 'break' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(489, 4);
				string_literal312=(IToken)Match(input,65,Follow._65_in_jump_statement1978); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal312_tree = (object)adaptor.Create(string_literal312, retval);
				adaptor.AddChild(root_0, string_literal312_tree);
				}
				DebugLocation(489, 12);
				char_literal313=(IToken)Match(input,47,Follow._47_in_jump_statement1980); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal313_tree = (object)adaptor.Create(char_literal313, retval);
				adaptor.AddChild(root_0, char_literal313_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:490:4: 'return' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(490, 4);
				string_literal314=(IToken)Match(input,83,Follow._83_in_jump_statement1985); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal314_tree = (object)adaptor.Create(string_literal314, retval);
				adaptor.AddChild(root_0, string_literal314_tree);
				}
				DebugLocation(490, 13);
				char_literal315=(IToken)Match(input,47,Follow._47_in_jump_statement1987); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal315_tree = (object)adaptor.Create(char_literal315, retval);
				adaptor.AddChild(root_0, char_literal315_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:491:4: 'return' expression ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(491, 4);
				string_literal316=(IToken)Match(input,83,Follow._83_in_jump_statement1992); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal316_tree = (object)adaptor.Create(string_literal316, retval);
				adaptor.AddChild(root_0, string_literal316_tree);
				}
				DebugLocation(491, 13);
				PushFollow(Follow._expression_in_jump_statement1994);
				expression317=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression317.Tree, expression317, retval);
				DebugLocation(491, 24);
				char_literal318=(IToken)Match(input,47,Follow._47_in_jump_statement1996); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal318_tree = (object)adaptor.Create(char_literal318, retval);
				adaptor.AddChild(root_0, char_literal318_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("jump_statement", 72);
			LeaveRule("jump_statement", 72);
			LeaveRule_jump_statement();
			if (state.backtracking > 0) { Memoize(input, 72, jump_statement_StartIndex); }

		}
		DebugLocation(492, 1);
		} finally { DebugExitRule(GrammarFileName, "jump_statement"); }
		return retval;

	}
	// $ANTLR end "jump_statement"

	partial void EnterRule_synpred2_C_fragment();
	partial void LeaveRule_synpred2_C_fragment();

	// $ANTLR start synpred2_C
	public void synpred2_C_fragment()
	{
		EnterRule_synpred2_C_fragment();
		EnterRule("synpred2_C_fragment", 74);
		var retval = new XAstParserRuleReturnScope("synpred2_C_fragment");
		try
		{
			// C.g:82:6: ( declaration_specifiers )
			DebugEnterAlt(1);
			// C.g:82:6: declaration_specifiers
			{
			DebugLocation(82, 6);
			PushFollow(Follow._declaration_specifiers_in_synpred2_C94);
			declaration_specifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_C_fragment", 74);
			LeaveRule("synpred2_C_fragment", 74);
			LeaveRule_synpred2_C_fragment();
		}
	}
	// $ANTLR end synpred2_C

	partial void EnterRule_synpred4_C_fragment();
	partial void LeaveRule_synpred4_C_fragment();

	// $ANTLR start synpred4_C
	public void synpred4_C_fragment()
	{
		EnterRule_synpred4_C_fragment();
		EnterRule("synpred4_C_fragment", 76);
		var retval = new XAstParserRuleReturnScope("synpred4_C_fragment");
		try
		{
			// C.g:82:4: ( ( declaration_specifiers )? declarator ( declaration )* '{' )
			DebugEnterAlt(1);
			// C.g:82:6: ( declaration_specifiers )? declarator ( declaration )* '{'
			{
			DebugLocation(82, 6);
			// C.g:82:6: ( declaration_specifiers )?
			int alt74=2;
			try { DebugEnterSubRule(74);
			try { DebugEnterDecision(74, false);
			int LA74_0 = input.LA(1);

			if (((LA74_0>=63 && LA74_0<=64)||(LA74_0>=67 && LA74_0<=68)||LA74_0==72||(LA74_0>=74 && LA74_0<=76)||(LA74_0>=80 && LA74_0<=82)||(LA74_0>=84 && LA74_0<=85)||(LA74_0>=87 && LA74_0<=88)||(LA74_0>=91 && LA74_0<=94)))
			{
				alt74 = 1;
			}
			else if ((LA74_0==IDENTIFIER))
			{
				switch (input.LA(2))
				{
				case 32:
					{
					alt74 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA74_19 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 30:
					{
					int LA74_20 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 64:
				case 75:
				case 82:
				case 87:
					{
					int LA74_21 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 93:
					{
					int LA74_22 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 67:
					{
					int LA74_23 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 84:
					{
					int LA74_24 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 80:
					{
					int LA74_25 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 81:
					{
					int LA74_26 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 76:
					{
					int LA74_27 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 72:
					{
					int LA74_28 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 85:
					{
					int LA74_29 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 92:
					{
					int LA74_30 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 63:
					{
					int LA74_31 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 88:
				case 91:
					{
					int LA74_32 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 74:
					{
					int LA74_33 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				case 68:
				case 94:
					{
					int LA74_34 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt74 = 1;
					}
					}
					break;
				}

			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:82:6: declaration_specifiers
				{
				DebugLocation(82, 6);
				PushFollow(Follow._declaration_specifiers_in_synpred4_C94);
				declaration_specifiers();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(74); }

			DebugLocation(82, 30);
			PushFollow(Follow._declarator_in_synpred4_C97);
			declarator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(82, 41);
			// C.g:82:41: ( declaration )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_0 = input.LA(1);

				if ((LA75_0==IDENTIFIER||(LA75_0>=63 && LA75_0<=64)||(LA75_0>=67 && LA75_0<=68)||LA75_0==72||(LA75_0>=74 && LA75_0<=76)||(LA75_0>=80 && LA75_0<=82)||(LA75_0>=84 && LA75_0<=85)||(LA75_0>=87 && LA75_0<=88)||(LA75_0>=90 && LA75_0<=94)))
				{
					alt75 = 1;
				}


				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:82:41: declaration
					{
					DebugLocation(82, 41);
					PushFollow(Follow._declaration_in_synpred4_C99);
					declaration();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }

			DebugLocation(82, 54);
			Match(input,96,Follow._96_in_synpred4_C102); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred4_C_fragment", 76);
			LeaveRule("synpred4_C_fragment", 76);
			LeaveRule_synpred4_C_fragment();
		}
	}
	// $ANTLR end synpred4_C

	partial void EnterRule_synpred5_C_fragment();
	partial void LeaveRule_synpred5_C_fragment();

	// $ANTLR start synpred5_C
	public void synpred5_C_fragment()
	{
		EnterRule_synpred5_C_fragment();
		EnterRule("synpred5_C_fragment", 77);
		var retval = new XAstParserRuleReturnScope("synpred5_C_fragment");
		try
		{
			// C.g:91:4: ( declaration_specifiers )
			DebugEnterAlt(1);
			// C.g:91:4: declaration_specifiers
			{
			DebugLocation(91, 4);
			PushFollow(Follow._declaration_specifiers_in_synpred5_C134);
			declaration_specifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred5_C_fragment", 77);
			LeaveRule("synpred5_C_fragment", 77);
			LeaveRule_synpred5_C_fragment();
		}
	}
	// $ANTLR end synpred5_C

	partial void EnterRule_synpred8_C_fragment();
	partial void LeaveRule_synpred8_C_fragment();

	// $ANTLR start synpred8_C
	public void synpred8_C_fragment()
	{
		EnterRule_synpred8_C_fragment();
		EnterRule("synpred8_C_fragment", 80);
		var retval = new XAstParserRuleReturnScope("synpred8_C_fragment");
		try
		{
			// C.g:104:14: ( declaration_specifiers )
			DebugEnterAlt(1);
			// C.g:104:14: declaration_specifiers
			{
			DebugLocation(104, 14);
			PushFollow(Follow._declaration_specifiers_in_synpred8_C183);
			declaration_specifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred8_C_fragment", 80);
			LeaveRule("synpred8_C_fragment", 80);
			LeaveRule_synpred8_C_fragment();
		}
	}
	// $ANTLR end synpred8_C

	partial void EnterRule_synpred12_C_fragment();
	partial void LeaveRule_synpred12_C_fragment();

	// $ANTLR start synpred12_C
	public void synpred12_C_fragment()
	{
		EnterRule_synpred12_C_fragment();
		EnterRule("synpred12_C_fragment", 84);
		var retval = new XAstParserRuleReturnScope("synpred12_C_fragment");
		try
		{
			// C.g:111:7: ( type_specifier )
			DebugEnterAlt(1);
			// C.g:111:7: type_specifier
			{
			DebugLocation(111, 7);
			PushFollow(Follow._type_specifier_in_synpred12_C229);
			type_specifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred12_C_fragment", 84);
			LeaveRule("synpred12_C_fragment", 84);
			LeaveRule_synpred12_C_fragment();
		}
	}
	// $ANTLR end synpred12_C

	partial void EnterRule_synpred36_C_fragment();
	partial void LeaveRule_synpred36_C_fragment();

	// $ANTLR start synpred36_C
	public void synpred36_C_fragment()
	{
		EnterRule_synpred36_C_fragment();
		EnterRule("synpred36_C_fragment", 108);
		var retval = new XAstParserRuleReturnScope("synpred36_C_fragment");
		try
		{
			// C.g:176:23: ( type_specifier )
			DebugEnterAlt(1);
			// C.g:176:23: type_specifier
			{
			DebugLocation(176, 23);
			PushFollow(Follow._type_specifier_in_synpred36_C496);
			type_specifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred36_C_fragment", 108);
			LeaveRule("synpred36_C_fragment", 108);
			LeaveRule_synpred36_C_fragment();
		}
	}
	// $ANTLR end synpred36_C

	partial void EnterRule_synpred46_C_fragment();
	partial void LeaveRule_synpred46_C_fragment();

	// $ANTLR start synpred46_C
	public void synpred46_C_fragment()
	{
		EnterRule_synpred46_C_fragment();
		EnterRule("synpred46_C_fragment", 118);
		var retval = new XAstParserRuleReturnScope("synpred46_C_fragment");
		try
		{
			// C.g:209:4: ( ( pointer )? direct_declarator )
			DebugEnterAlt(1);
			// C.g:209:4: ( pointer )? direct_declarator
			{
			DebugLocation(209, 4);
			// C.g:209:4: ( pointer )?
			int alt80=2;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			int LA80_0 = input.LA(1);

			if ((LA80_0==32))
			{
				alt80 = 1;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:209:4: pointer
				{
				DebugLocation(209, 4);
				PushFollow(Follow._pointer_in_synpred46_C649);
				pointer();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(80); }

			DebugLocation(209, 13);
			PushFollow(Follow._direct_declarator_in_synpred46_C652);
			direct_declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred46_C_fragment", 118);
			LeaveRule("synpred46_C_fragment", 118);
			LeaveRule_synpred46_C_fragment();
		}
	}
	// $ANTLR end synpred46_C

	partial void EnterRule_synpred48_C_fragment();
	partial void LeaveRule_synpred48_C_fragment();

	// $ANTLR start synpred48_C
	public void synpred48_C_fragment()
	{
		EnterRule_synpred48_C_fragment();
		EnterRule("synpred48_C_fragment", 120);
		var retval = new XAstParserRuleReturnScope("synpred48_C_fragment");
		try
		{
			// C.g:223:3: ( declarator_suffix )
			DebugEnterAlt(1);
			// C.g:223:3: declarator_suffix
			{
			DebugLocation(223, 3);
			PushFollow(Follow._declarator_suffix_in_synpred48_C695);
			declarator_suffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred48_C_fragment", 120);
			LeaveRule("synpred48_C_fragment", 120);
			LeaveRule_synpred48_C_fragment();
		}
	}
	// $ANTLR end synpred48_C

	partial void EnterRule_synpred51_C_fragment();
	partial void LeaveRule_synpred51_C_fragment();

	// $ANTLR start synpred51_C
	public void synpred51_C_fragment()
	{
		EnterRule_synpred51_C_fragment();
		EnterRule("synpred51_C_fragment", 123);
		var retval = new XAstParserRuleReturnScope("synpred51_C_fragment");
		try
		{
			// C.g:229:6: ( '(' parameter_type_list ')' )
			DebugEnterAlt(1);
			// C.g:229:6: '(' parameter_type_list ')'
			{
			DebugLocation(229, 6);
			Match(input,30,Follow._30_in_synpred51_C729); if (state.failed) return;
			DebugLocation(229, 10);
			PushFollow(Follow._parameter_type_list_in_synpred51_C731);
			parameter_type_list();
			PopFollow();
			if (state.failed) return;
			DebugLocation(229, 30);
			Match(input,31,Follow._31_in_synpred51_C733); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred51_C_fragment", 123);
			LeaveRule("synpred51_C_fragment", 123);
			LeaveRule_synpred51_C_fragment();
		}
	}
	// $ANTLR end synpred51_C

	partial void EnterRule_synpred52_C_fragment();
	partial void LeaveRule_synpred52_C_fragment();

	// $ANTLR start synpred52_C
	public void synpred52_C_fragment()
	{
		EnterRule_synpred52_C_fragment();
		EnterRule("synpred52_C_fragment", 124);
		var retval = new XAstParserRuleReturnScope("synpred52_C_fragment");
		try
		{
			// C.g:230:6: ( '(' identifier_list ')' )
			DebugEnterAlt(1);
			// C.g:230:6: '(' identifier_list ')'
			{
			DebugLocation(230, 6);
			Match(input,30,Follow._30_in_synpred52_C740); if (state.failed) return;
			DebugLocation(230, 10);
			PushFollow(Follow._identifier_list_in_synpred52_C742);
			identifier_list();
			PopFollow();
			if (state.failed) return;
			DebugLocation(230, 26);
			Match(input,31,Follow._31_in_synpred52_C744); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred52_C_fragment", 124);
			LeaveRule("synpred52_C_fragment", 124);
			LeaveRule_synpred52_C_fragment();
		}
	}
	// $ANTLR end synpred52_C

	partial void EnterRule_synpred53_C_fragment();
	partial void LeaveRule_synpred53_C_fragment();

	// $ANTLR start synpred53_C
	public void synpred53_C_fragment()
	{
		EnterRule_synpred53_C_fragment();
		EnterRule("synpred53_C_fragment", 125);
		var retval = new XAstParserRuleReturnScope("synpred53_C_fragment");
		try
		{
			// C.g:235:8: ( type_qualifier )
			DebugEnterAlt(1);
			// C.g:235:8: type_qualifier
			{
			DebugLocation(235, 8);
			PushFollow(Follow._type_qualifier_in_synpred53_C766);
			type_qualifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred53_C_fragment", 125);
			LeaveRule("synpred53_C_fragment", 125);
			LeaveRule_synpred53_C_fragment();
		}
	}
	// $ANTLR end synpred53_C

	partial void EnterRule_synpred54_C_fragment();
	partial void LeaveRule_synpred54_C_fragment();

	// $ANTLR start synpred54_C
	public void synpred54_C_fragment()
	{
		EnterRule_synpred54_C_fragment();
		EnterRule("synpred54_C_fragment", 126);
		var retval = new XAstParserRuleReturnScope("synpred54_C_fragment");
		try
		{
			// C.g:235:24: ( pointer )
			DebugEnterAlt(1);
			// C.g:235:24: pointer
			{
			DebugLocation(235, 24);
			PushFollow(Follow._pointer_in_synpred54_C769);
			pointer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred54_C_fragment", 126);
			LeaveRule("synpred54_C_fragment", 126);
			LeaveRule_synpred54_C_fragment();
		}
	}
	// $ANTLR end synpred54_C

	partial void EnterRule_synpred55_C_fragment();
	partial void LeaveRule_synpred55_C_fragment();

	// $ANTLR start synpred55_C
	public void synpred55_C_fragment()
	{
		EnterRule_synpred55_C_fragment();
		EnterRule("synpred55_C_fragment", 127);
		var retval = new XAstParserRuleReturnScope("synpred55_C_fragment");
		try
		{
			// C.g:235:4: ( '*' ( type_qualifier )+ ( pointer )? )
			DebugEnterAlt(1);
			// C.g:235:4: '*' ( type_qualifier )+ ( pointer )?
			{
			DebugLocation(235, 4);
			Match(input,32,Follow._32_in_synpred55_C764); if (state.failed) return;
			DebugLocation(235, 8);
			// C.g:235:8: ( type_qualifier )+
			int cnt81=0;
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=2;
				try { DebugEnterDecision(81, false);
				int LA81_0 = input.LA(1);

				if ((LA81_0==68||LA81_0==94))
				{
					alt81 = 1;
				}


				} finally { DebugExitDecision(81); }
				switch (alt81)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:235:8: type_qualifier
					{
					DebugLocation(235, 8);
					PushFollow(Follow._type_qualifier_in_synpred55_C766);
					type_qualifier();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					if (cnt81 >= 1)
						goto loop81;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee81 = new EarlyExitException( 81, input );
					DebugRecognitionException(eee81);
					throw eee81;
				}
				cnt81++;
			}
			loop81:
				;

			} finally { DebugExitSubRule(81); }

			DebugLocation(235, 24);
			// C.g:235:24: ( pointer )?
			int alt82=2;
			try { DebugEnterSubRule(82);
			try { DebugEnterDecision(82, false);
			int LA82_0 = input.LA(1);

			if ((LA82_0==32))
			{
				alt82 = 1;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:235:24: pointer
				{
				DebugLocation(235, 24);
				PushFollow(Follow._pointer_in_synpred55_C769);
				pointer();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(82); }


			}

		}
		finally
		{
			TraceOut("synpred55_C_fragment", 127);
			LeaveRule("synpred55_C_fragment", 127);
			LeaveRule_synpred55_C_fragment();
		}
	}
	// $ANTLR end synpred55_C

	partial void EnterRule_synpred56_C_fragment();
	partial void LeaveRule_synpred56_C_fragment();

	// $ANTLR start synpred56_C
	public void synpred56_C_fragment()
	{
		EnterRule_synpred56_C_fragment();
		EnterRule("synpred56_C_fragment", 128);
		var retval = new XAstParserRuleReturnScope("synpred56_C_fragment");
		try
		{
			// C.g:236:4: ( '*' pointer )
			DebugEnterAlt(1);
			// C.g:236:4: '*' pointer
			{
			DebugLocation(236, 4);
			Match(input,32,Follow._32_in_synpred56_C775); if (state.failed) return;
			DebugLocation(236, 8);
			PushFollow(Follow._pointer_in_synpred56_C777);
			pointer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred56_C_fragment", 128);
			LeaveRule("synpred56_C_fragment", 128);
			LeaveRule_synpred56_C_fragment();
		}
	}
	// $ANTLR end synpred56_C

	partial void EnterRule_synpred59_C_fragment();
	partial void LeaveRule_synpred59_C_fragment();

	// $ANTLR start synpred59_C
	public void synpred59_C_fragment()
	{
		EnterRule_synpred59_C_fragment();
		EnterRule("synpred59_C_fragment", 131);
		var retval = new XAstParserRuleReturnScope("synpred59_C_fragment");
		try
		{
			// C.g:249:28: ( declarator )
			DebugEnterAlt(1);
			// C.g:249:28: declarator
			{
			DebugLocation(249, 28);
			PushFollow(Follow._declarator_in_synpred59_C832);
			declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred59_C_fragment", 131);
			LeaveRule("synpred59_C_fragment", 131);
			LeaveRule_synpred59_C_fragment();
		}
	}
	// $ANTLR end synpred59_C

	partial void EnterRule_synpred60_C_fragment();
	partial void LeaveRule_synpred60_C_fragment();

	// $ANTLR start synpred60_C
	public void synpred60_C_fragment()
	{
		EnterRule_synpred60_C_fragment();
		EnterRule("synpred60_C_fragment", 132);
		var retval = new XAstParserRuleReturnScope("synpred60_C_fragment");
		try
		{
			// C.g:249:39: ( abstract_declarator )
			DebugEnterAlt(1);
			// C.g:249:39: abstract_declarator
			{
			DebugLocation(249, 39);
			PushFollow(Follow._abstract_declarator_in_synpred60_C834);
			abstract_declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred60_C_fragment", 132);
			LeaveRule("synpred60_C_fragment", 132);
			LeaveRule_synpred60_C_fragment();
		}
	}
	// $ANTLR end synpred60_C

	partial void EnterRule_synpred63_C_fragment();
	partial void LeaveRule_synpred63_C_fragment();

	// $ANTLR start synpred63_C
	public void synpred63_C_fragment()
	{
		EnterRule_synpred63_C_fragment();
		EnterRule("synpred63_C_fragment", 135);
		var retval = new XAstParserRuleReturnScope("synpred63_C_fragment");
		try
		{
			// C.g:261:12: ( direct_abstract_declarator )
			DebugEnterAlt(1);
			// C.g:261:12: direct_abstract_declarator
			{
			DebugLocation(261, 12);
			PushFollow(Follow._direct_abstract_declarator_in_synpred63_C881);
			direct_abstract_declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred63_C_fragment", 135);
			LeaveRule("synpred63_C_fragment", 135);
			LeaveRule_synpred63_C_fragment();
		}
	}
	// $ANTLR end synpred63_C

	partial void EnterRule_synpred66_C_fragment();
	partial void LeaveRule_synpred66_C_fragment();

	// $ANTLR start synpred66_C
	public void synpred66_C_fragment()
	{
		EnterRule_synpred66_C_fragment();
		EnterRule("synpred66_C_fragment", 138);
		var retval = new XAstParserRuleReturnScope("synpred66_C_fragment");
		try
		{
			// C.g:266:65: ( abstract_declarator_suffix )
			DebugEnterAlt(1);
			// C.g:266:65: abstract_declarator_suffix
			{
			DebugLocation(266, 65);
			PushFollow(Follow._abstract_declarator_suffix_in_synpred66_C912);
			abstract_declarator_suffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred66_C_fragment", 138);
			LeaveRule("synpred66_C_fragment", 138);
			LeaveRule_synpred66_C_fragment();
		}
	}
	// $ANTLR end synpred66_C

	partial void EnterRule_synpred79_C_fragment();
	partial void LeaveRule_synpred79_C_fragment();

	// $ANTLR start synpred79_C
	public void synpred79_C_fragment()
	{
		EnterRule_synpred79_C_fragment();
		EnterRule("synpred79_C_fragment", 151);
		var retval = new XAstParserRuleReturnScope("synpred79_C_fragment");
		try
		{
			// C.g:300:4: ( '(' type_name ')' cast_expression )
			DebugEnterAlt(1);
			// C.g:300:4: '(' type_name ')' cast_expression
			{
			DebugLocation(300, 4);
			Match(input,30,Follow._30_in_synpred79_C1084); if (state.failed) return;
			DebugLocation(300, 8);
			PushFollow(Follow._type_name_in_synpred79_C1086);
			type_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(300, 18);
			Match(input,31,Follow._31_in_synpred79_C1088); if (state.failed) return;
			DebugLocation(300, 22);
			PushFollow(Follow._cast_expression_in_synpred79_C1090);
			cast_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred79_C_fragment", 151);
			LeaveRule("synpred79_C_fragment", 151);
			LeaveRule_synpred79_C_fragment();
		}
	}
	// $ANTLR end synpred79_C

	partial void EnterRule_synpred84_C_fragment();
	partial void LeaveRule_synpred84_C_fragment();

	// $ANTLR start synpred84_C
	public void synpred84_C_fragment()
	{
		EnterRule_synpred84_C_fragment();
		EnterRule("synpred84_C_fragment", 156);
		var retval = new XAstParserRuleReturnScope("synpred84_C_fragment");
		try
		{
			// C.g:309:4: ( 'sizeof' unary_expression )
			DebugEnterAlt(1);
			// C.g:309:4: 'sizeof' unary_expression
			{
			DebugLocation(309, 4);
			Match(input,86,Follow._86_in_synpred84_C1132); if (state.failed) return;
			DebugLocation(309, 13);
			PushFollow(Follow._unary_expression_in_synpred84_C1134);
			unary_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred84_C_fragment", 156);
			LeaveRule("synpred84_C_fragment", 156);
			LeaveRule_synpred84_C_fragment();
		}
	}
	// $ANTLR end synpred84_C

	partial void EnterRule_synpred105_C_fragment();
	partial void LeaveRule_synpred105_C_fragment();

	// $ANTLR start synpred105_C
	public void synpred105_C_fragment()
	{
		EnterRule_synpred105_C_fragment();
		EnterRule("synpred105_C_fragment", 177);
		var retval = new XAstParserRuleReturnScope("synpred105_C_fragment");
		try
		{
			// C.g:384:4: ( lvalue assignment_operator assignment_expression )
			DebugEnterAlt(1);
			// C.g:384:4: lvalue assignment_operator assignment_expression
			{
			DebugLocation(384, 4);
			PushFollow(Follow._lvalue_in_synpred105_C1450);
			lvalue();
			PopFollow();
			if (state.failed) return;
			DebugLocation(384, 11);
			PushFollow(Follow._assignment_operator_in_synpred105_C1452);
			assignment_operator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(384, 31);
			PushFollow(Follow._assignment_expression_in_synpred105_C1454);
			assignment_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred105_C_fragment", 177);
			LeaveRule("synpred105_C_fragment", 177);
			LeaveRule_synpred105_C_fragment();
		}
	}
	// $ANTLR end synpred105_C

	partial void EnterRule_synpred137_C_fragment();
	partial void LeaveRule_synpred137_C_fragment();

	// $ANTLR start synpred137_C
	public void synpred137_C_fragment()
	{
		EnterRule_synpred137_C_fragment();
		EnterRule("synpred137_C_fragment", 209);
		var retval = new XAstParserRuleReturnScope("synpred137_C_fragment");
		try
		{
			// C.g:463:8: ( declaration )
			DebugEnterAlt(1);
			// C.g:463:8: declaration
			{
			DebugLocation(463, 8);
			PushFollow(Follow._declaration_in_synpred137_C1810);
			declaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred137_C_fragment", 209);
			LeaveRule("synpred137_C_fragment", 209);
			LeaveRule_synpred137_C_fragment();
		}
	}
	// $ANTLR end synpred137_C
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA26 dfa26;
	private DFA53 dfa53;
	private DFA65 dfa65;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa26 = new DFA26( this, SpecialStateTransition26 );
		dfa53 = new DFA53( this, SpecialStateTransition53 );
		dfa65 = new DFA65( this, SpecialStateTransition65 );
	}

	private class DFA26 : DFA
	{
		private const string DFA26_eotS =
			"\x3C\xFFFF";
		private const string DFA26_eofS =
			"\x1\x1\x3B\xFFFF";
		private const string DFA26_minS =
			"\x1\xD\x18\xFFFF\x1\xD\x1\x4\x1\x0\x1\xFFFF\x1\x0\x2\xFFFF\x1B\x0\x1"+
			"\xFFFF";
		private const string DFA26_maxS =
			"\x1\x60\x18\xFFFF\x1\x5E\x1\x65\x1\x0\x1\xFFFF\x1\x0\x2\xFFFF\x1B\x0"+
			"\x1\xFFFF";
		private const string DFA26_acceptS =
			"\x1\xFFFF\x1\x2\x39\xFFFF\x1\x1";
		private const string DFA26_specialS =
			"\x1B\xFFFF\x1\x0\x1\xFFFF\x1\x1\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6"+
			"\x1\x7\x1\x8\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11"+
			"\x1\x12\x1\x13\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B"+
			"\x1\x1C\x1\xFFFF}>";
		private static readonly string[] DFA26_transitionS =
			{
				"\x1\x1\x10\xFFFF\x1\x19\x2\x1\x4\xFFFF\x1\x1\x8\xFFFF\x2\x1\x4\xFFFF"+
				"\x1\x1\x6\xFFFF\x1\x1A\x3\xFFFF\x2\x1\x2\xFFFF\x2\x1\x3\xFFFF\x1\x1"+
				"\x1\xFFFF\x3\x1\x3\xFFFF\x3\x1\x1\xFFFF\x2\x1\x1\xFFFF\x2\x1\x1\xFFFF"+
				"\x5\x1\x1\xFFFF\x1\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x1D\x10\xFFFF\x1\x1\x1\x1B\x1\x1\x1A\xFFFF\x1\x1\x3\xFFFF\x1\x2A"+
				"\x1\x20\x2\xFFFF\x1\x22\x1\x2D\x3\xFFFF\x1\x27\x1\xFFFF\x1\x2C\x1\x20"+
				"\x1\x26\x3\xFFFF\x1\x24\x1\x25\x1\x20\x1\xFFFF\x1\x23\x1\x28\x1\xFFFF"+
				"\x1\x20\x1\x2B\x2\xFFFF\x1\x2B\x1\x29\x1\x21\x1\x2D",
				"\x1\x34\x1\xFFFF\x1\x33\x2\xFFFF\x1\x36\x1\xFFFF\x1\x31\x1\xFFFF\x1"+
				"\x30\x4\xFFFF\x1\x32\x1\xFFFF\x1\x35\x2\xFFFF\x1\x39\x4\xFFFF\x1\x39"+
				"\x1\xFFFF\x1\x2F\x1\xFFFF\x1\x39\x1\xFFFF\x1\x39\x1\x37\x2\xFFFF\x1"+
				"\x39\x1\x38\x14\xFFFF\x1\x2E\x19\xFFFF\x1\x3A\xE\xFFFF\x1\x39",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA26_eot = DFA.UnpackEncodedString(DFA26_eotS);
		private static readonly short[] DFA26_eof = DFA.UnpackEncodedString(DFA26_eofS);
		private static readonly char[] DFA26_min = DFA.UnpackEncodedStringToUnsignedChars(DFA26_minS);
		private static readonly char[] DFA26_max = DFA.UnpackEncodedStringToUnsignedChars(DFA26_maxS);
		private static readonly short[] DFA26_accept = DFA.UnpackEncodedString(DFA26_acceptS);
		private static readonly short[] DFA26_special = DFA.UnpackEncodedString(DFA26_specialS);
		private static readonly short[][] DFA26_transition;

		static DFA26()
		{
			int numStates = DFA26_transitionS.Length;
			DFA26_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA26_transition[i] = DFA.UnpackEncodedString(DFA26_transitionS[i]);
			}
		}

		public DFA26( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 26;
			this.eot = DFA26_eot;
			this.eof = DFA26_eof;
			this.min = DFA26_min;
			this.max = DFA26_max;
			this.accept = DFA26_accept;
			this.special = DFA26_special;
			this.transition = DFA26_transition;
		}

		public override string Description { get { return "()* loopback of 223:3: ( declarator_suffix )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition26(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA26_27 = input.LA(1);


				int index26_27 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_27);
				if (s >= 0) return s;
				break;

			case 1:
				int LA26_29 = input.LA(1);


				int index26_29 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_29);
				if (s >= 0) return s;
				break;

			case 2:
				int LA26_32 = input.LA(1);


				int index26_32 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_32);
				if (s >= 0) return s;
				break;

			case 3:
				int LA26_33 = input.LA(1);


				int index26_33 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_33);
				if (s >= 0) return s;
				break;

			case 4:
				int LA26_34 = input.LA(1);


				int index26_34 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_34);
				if (s >= 0) return s;
				break;

			case 5:
				int LA26_35 = input.LA(1);


				int index26_35 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_35);
				if (s >= 0) return s;
				break;

			case 6:
				int LA26_36 = input.LA(1);


				int index26_36 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_36);
				if (s >= 0) return s;
				break;

			case 7:
				int LA26_37 = input.LA(1);


				int index26_37 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_37);
				if (s >= 0) return s;
				break;

			case 8:
				int LA26_38 = input.LA(1);


				int index26_38 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_38);
				if (s >= 0) return s;
				break;

			case 9:
				int LA26_39 = input.LA(1);


				int index26_39 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_39);
				if (s >= 0) return s;
				break;

			case 10:
				int LA26_40 = input.LA(1);


				int index26_40 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_40);
				if (s >= 0) return s;
				break;

			case 11:
				int LA26_41 = input.LA(1);


				int index26_41 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_41);
				if (s >= 0) return s;
				break;

			case 12:
				int LA26_42 = input.LA(1);


				int index26_42 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_42);
				if (s >= 0) return s;
				break;

			case 13:
				int LA26_43 = input.LA(1);


				int index26_43 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_43);
				if (s >= 0) return s;
				break;

			case 14:
				int LA26_44 = input.LA(1);


				int index26_44 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_44);
				if (s >= 0) return s;
				break;

			case 15:
				int LA26_45 = input.LA(1);


				int index26_45 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_45);
				if (s >= 0) return s;
				break;

			case 16:
				int LA26_46 = input.LA(1);


				int index26_46 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_46);
				if (s >= 0) return s;
				break;

			case 17:
				int LA26_47 = input.LA(1);


				int index26_47 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_47);
				if (s >= 0) return s;
				break;

			case 18:
				int LA26_48 = input.LA(1);


				int index26_48 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_48);
				if (s >= 0) return s;
				break;

			case 19:
				int LA26_49 = input.LA(1);


				int index26_49 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_49);
				if (s >= 0) return s;
				break;

			case 20:
				int LA26_50 = input.LA(1);


				int index26_50 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_50);
				if (s >= 0) return s;
				break;

			case 21:
				int LA26_51 = input.LA(1);


				int index26_51 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_51);
				if (s >= 0) return s;
				break;

			case 22:
				int LA26_52 = input.LA(1);


				int index26_52 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_52);
				if (s >= 0) return s;
				break;

			case 23:
				int LA26_53 = input.LA(1);


				int index26_53 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_53);
				if (s >= 0) return s;
				break;

			case 24:
				int LA26_54 = input.LA(1);


				int index26_54 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_54);
				if (s >= 0) return s;
				break;

			case 25:
				int LA26_55 = input.LA(1);


				int index26_55 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_55);
				if (s >= 0) return s;
				break;

			case 26:
				int LA26_56 = input.LA(1);


				int index26_56 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_56);
				if (s >= 0) return s;
				break;

			case 27:
				int LA26_57 = input.LA(1);


				int index26_57 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_57);
				if (s >= 0) return s;
				break;

			case 28:
				int LA26_58 = input.LA(1);


				int index26_58 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred48_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index26_58);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 26, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA53 : DFA
	{
		private const string DFA53_eotS =
			"\x11A\xFFFF";
		private const string DFA53_eofS =
			"\x1\xFFFF\x7\x14\x112\xFFFF";
		private const string DFA53_minS =
			"\x1\x4\x7\x18\x5\x4\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6"+
			"\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\xC\x0\xD"+
			"\xFFFF\x30\x0";
		private const string DFA53_maxS =
			"\x1\x65\x7\x64\x5\x65\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF"+
			"\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\x6\x0\x16\xFFFF\xC\x0"+
			"\xD\xFFFF\x30\x0";
		private const string DFA53_acceptS =
			"\x13\xFFFF\x1\x1\x1\x2\x105\xFFFF";
		private const string DFA53_specialS =
			"\xD\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x16\xFFFF\x1\x6\x1\x7\x1"+
			"\x8\x1\x9\x1\xA\x1\xB\x16\xFFFF\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11"+
			"\x16\xFFFF\x1\x12\x1\x13\x1\x14\x1\x15\x1\x16\x1\x17\x16\xFFFF\x1\x18"+
			"\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x16\xFFFF\x1\x1E\x1\x1F\x1\x20\x1"+
			"\x21\x1\x22\x1\x23\x16\xFFFF\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28\x1\x29"+
			"\x16\xFFFF\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1"+
			"\x32\x1\x33\x1\x34\x1\x35\xD\xFFFF\x1\x36\x1\x37\x1\x38\x1\x39\x1\x3A"+
			"\x1\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x1\x40\x1\x41\x1\x42\x1\x43\x1\x44"+
			"\x1\x45\x1\x46\x1\x47\x1\x48\x1\x49\x1\x4A\x1\x4B\x1\x4C\x1\x4D\x1\x4E"+
			"\x1\x4F\x1\x50\x1\x51\x1\x52\x1\x53\x1\x54\x1\x55\x1\x56\x1\x57\x1\x58"+
			"\x1\x59\x1\x5A\x1\x5B\x1\x5C\x1\x5D\x1\x5E\x1\x5F\x1\x60\x1\x61\x1\x62"+
			"\x1\x63\x1\x64\x1\x65}>";
		private static readonly string[] DFA53_transitionS =
			{
				"\x1\x5\x1\xFFFF\x1\x4\x2\xFFFF\x1\x7\x1\xFFFF\x1\x2\x1\xFFFF\x1\x1\x4"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x6\x2\xFFFF\x1\xB\x4\xFFFF\x1\xB\x1\xFFFF\x1"+
				"\x8\x1\xFFFF\x1\xB\x1\xFFFF\x1\xB\x1\x9\x2\xFFFF\x1\xB\x1\xA\x2E\xFFFF"+
				"\x1\xC\xE\xFFFF\x1\xB",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\xE\x2\x14\x1\x13\x1\x14\x1\x11\x1\x13"+
				"\x2\x14\x1\x12\x1\x13\x1\x10\x1\xF\x1\xFFFF\x1\x14\x1\x13\x4\x14\x1"+
				"\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\xD\x2\x14\x1\x13\x22\xFFFF"+
				"\x1\x14\x1\x13\x2\x14",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\x2A\x2\x14\x1\x13\x1\x14\x1\x2D\x1"+
				"\x13\x2\x14\x1\x2E\x1\x13\x1\x2C\x1\x2B\x1\xFFFF\x1\x14\x1\x13\x4\x14"+
				"\x1\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\x29\x2\x14\x1\x13\x22"+
				"\xFFFF\x1\x14\x1\x13\x2\x14",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\x46\x2\x14\x1\x13\x1\x14\x1\x49\x1"+
				"\x13\x2\x14\x1\x4A\x1\x13\x1\x48\x1\x47\x1\xFFFF\x1\x14\x1\x13\x4\x14"+
				"\x1\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\x45\x2\x14\x1\x13\x22"+
				"\xFFFF\x1\x14\x1\x13\x2\x14",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\x62\x2\x14\x1\x13\x1\x14\x1\x65\x1"+
				"\x13\x2\x14\x1\x66\x1\x13\x1\x64\x1\x63\x1\xFFFF\x1\x14\x1\x13\x4\x14"+
				"\x1\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\x61\x2\x14\x1\x13\x22"+
				"\xFFFF\x1\x14\x1\x13\x2\x14",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\x7E\x2\x14\x1\x13\x1\x14\x1\x81\x1"+
				"\x13\x2\x14\x1\x82\x1\x13\x1\x80\x1\x7F\x1\xFFFF\x1\x14\x1\x13\x4\x14"+
				"\x1\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\x7D\x2\x14\x1\x13\x22"+
				"\xFFFF\x1\x14\x1\x13\x2\x14",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\x9A\x2\x14\x1\x13\x1\x14\x1\x9D\x1"+
				"\x13\x2\x14\x1\x9E\x1\x13\x1\x9C\x1\x9B\x1\xFFFF\x1\x14\x1\x13\x4\x14"+
				"\x1\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\x99\x2\x14\x1\x13\x22"+
				"\xFFFF\x1\x14\x1\x13\x2\x14",
				"\x2\x14\x1\x13\x2\x14\x1\x13\x1\xB6\x2\x14\x1\x13\x1\x14\x1\xB9\x1"+
				"\x13\x2\x14\x1\xBA\x1\x13\x1\xB8\x1\xB7\x1\xFFFF\x1\x14\x1\x13\x4\x14"+
				"\x1\x13\x1\x14\x1\x13\x4\x14\x1\x13\x1\x14\x1\xB5\x2\x14\x1\x13\x22"+
				"\xFFFF\x1\x14\x1\x13\x2\x14",
				"\x1\xD5\x1\xFFFF\x1\xD4\x2\xFFFF\x1\xD7\x1\xFFFF\x1\xD2\x1\xFFFF\x1"+
				"\xD1\x4\xFFFF\x1\xD3\x1\xFFFF\x1\xD6\x2\xFFFF\x1\xDB\x4\xFFFF\x1\xDB"+
				"\x1\xFFFF\x1\xD8\x1\xFFFF\x1\xDB\x1\xFFFF\x1\xDB\x1\xD9\x2\xFFFF\x1"+
				"\xDB\x1\xDA\x17\xFFFF\x1\x14\x3\xFFFF\x2\x14\x3\xFFFF\x1\x14\x1\xFFFF"+
				"\x1\x14\x1\xFFFF\x1\x14\x3\xFFFF\x2\x14\x2\xFFFF\x2\x14\x1\xDC\x1\xFFFF"+
				"\x1\x14\x2\xFFFF\x4\x14\x6\xFFFF\x1\xDB",
				"\x1\xEE\x1\xFFFF\x1\xED\x2\xFFFF\x1\xF0\x1\xFFFF\x1\xEB\x1\xFFFF\x1"+
				"\xEA\x4\xFFFF\x1\xEC\x1\xFFFF\x1\xEF\x2\xFFFF\x1\xF4\x4\xFFFF\x1\xF4"+
				"\x1\xFFFF\x1\xF1\x1\xFFFF\x1\xF4\x1\xFFFF\x1\xF4\x1\xF2\x2\xFFFF\x1"+
				"\xF4\x1\xF3\x2E\xFFFF\x1\xF5\xE\xFFFF\x1\xF4",
				"\x1\xFA\x1\xFFFF\x1\xF9\x2\xFFFF\x1\xFC\x1\xFFFF\x1\xF7\x1\xFFFF\x1"+
				"\xF6\x4\xFFFF\x1\xF8\x1\xFFFF\x1\xFB\x2\xFFFF\x1\x100\x4\xFFFF\x1\x100"+
				"\x1\xFFFF\x1\xFD\x1\xFFFF\x1\x100\x1\xFFFF\x1\x100\x1\xFE\x2\xFFFF\x1"+
				"\x100\x1\xFF\x2E\xFFFF\x1\x101\xE\xFFFF\x1\x100",
				"\x1\x107\x1\xFFFF\x1\x106\x2\xFFFF\x1\x109\x1\xFFFF\x1\x104\x1\xFFFF"+
				"\x1\x103\x4\xFFFF\x1\x105\x1\xFFFF\x1\x108\x2\xFFFF\x1\x10C\x4\xFFFF"+
				"\x1\x10C\x1\xFFFF\x1\x102\x1\xFFFF\x1\x10C\x1\xFFFF\x1\x10C\x1\x10A"+
				"\x2\xFFFF\x1\x10C\x1\x10B\x2E\xFFFF\x1\x10D\xE\xFFFF\x1\x10C",
				"\x1\x113\x1\xFFFF\x1\x112\x2\xFFFF\x1\x115\x1\xFFFF\x1\x110\x1\xFFFF"+
				"\x1\x10F\x4\xFFFF\x1\x111\x1\xFFFF\x1\x114\x2\xFFFF\x1\x118\x4\xFFFF"+
				"\x1\x118\x1\xFFFF\x1\x10E\x1\xFFFF\x1\x118\x1\xFFFF\x1\x118\x1\x116"+
				"\x2\xFFFF\x1\x118\x1\x117\x2E\xFFFF\x1\x119\xE\xFFFF\x1\x118",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA53_eot = DFA.UnpackEncodedString(DFA53_eotS);
		private static readonly short[] DFA53_eof = DFA.UnpackEncodedString(DFA53_eofS);
		private static readonly char[] DFA53_min = DFA.UnpackEncodedStringToUnsignedChars(DFA53_minS);
		private static readonly char[] DFA53_max = DFA.UnpackEncodedStringToUnsignedChars(DFA53_maxS);
		private static readonly short[] DFA53_accept = DFA.UnpackEncodedString(DFA53_acceptS);
		private static readonly short[] DFA53_special = DFA.UnpackEncodedString(DFA53_specialS);
		private static readonly short[][] DFA53_transition;

		static DFA53()
		{
			int numStates = DFA53_transitionS.Length;
			DFA53_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA53_transition[i] = DFA.UnpackEncodedString(DFA53_transitionS[i]);
			}
		}

		public DFA53( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 53;
			this.eot = DFA53_eot;
			this.eof = DFA53_eof;
			this.min = DFA53_min;
			this.max = DFA53_max;
			this.accept = DFA53_accept;
			this.special = DFA53_special;
			this.transition = DFA53_transition;
		}

		public override string Description { get { return "383:1: assignment_expression : ( lvalue assignment_operator assignment_expression | conditional_expression );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition53(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA53_13 = input.LA(1);


				int index53_13 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_13);
				if (s >= 0) return s;
				break;

			case 1:
				int LA53_14 = input.LA(1);


				int index53_14 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_14);
				if (s >= 0) return s;
				break;

			case 2:
				int LA53_15 = input.LA(1);


				int index53_15 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_15);
				if (s >= 0) return s;
				break;

			case 3:
				int LA53_16 = input.LA(1);


				int index53_16 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_16);
				if (s >= 0) return s;
				break;

			case 4:
				int LA53_17 = input.LA(1);


				int index53_17 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_17);
				if (s >= 0) return s;
				break;

			case 5:
				int LA53_18 = input.LA(1);


				int index53_18 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_18);
				if (s >= 0) return s;
				break;

			case 6:
				int LA53_41 = input.LA(1);


				int index53_41 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_41);
				if (s >= 0) return s;
				break;

			case 7:
				int LA53_42 = input.LA(1);


				int index53_42 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_42);
				if (s >= 0) return s;
				break;

			case 8:
				int LA53_43 = input.LA(1);


				int index53_43 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_43);
				if (s >= 0) return s;
				break;

			case 9:
				int LA53_44 = input.LA(1);


				int index53_44 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_44);
				if (s >= 0) return s;
				break;

			case 10:
				int LA53_45 = input.LA(1);


				int index53_45 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_45);
				if (s >= 0) return s;
				break;

			case 11:
				int LA53_46 = input.LA(1);


				int index53_46 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_46);
				if (s >= 0) return s;
				break;

			case 12:
				int LA53_69 = input.LA(1);


				int index53_69 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_69);
				if (s >= 0) return s;
				break;

			case 13:
				int LA53_70 = input.LA(1);


				int index53_70 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_70);
				if (s >= 0) return s;
				break;

			case 14:
				int LA53_71 = input.LA(1);


				int index53_71 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_71);
				if (s >= 0) return s;
				break;

			case 15:
				int LA53_72 = input.LA(1);


				int index53_72 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_72);
				if (s >= 0) return s;
				break;

			case 16:
				int LA53_73 = input.LA(1);


				int index53_73 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_73);
				if (s >= 0) return s;
				break;

			case 17:
				int LA53_74 = input.LA(1);


				int index53_74 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_74);
				if (s >= 0) return s;
				break;

			case 18:
				int LA53_97 = input.LA(1);


				int index53_97 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_97);
				if (s >= 0) return s;
				break;

			case 19:
				int LA53_98 = input.LA(1);


				int index53_98 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_98);
				if (s >= 0) return s;
				break;

			case 20:
				int LA53_99 = input.LA(1);


				int index53_99 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_99);
				if (s >= 0) return s;
				break;

			case 21:
				int LA53_100 = input.LA(1);


				int index53_100 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_100);
				if (s >= 0) return s;
				break;

			case 22:
				int LA53_101 = input.LA(1);


				int index53_101 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_101);
				if (s >= 0) return s;
				break;

			case 23:
				int LA53_102 = input.LA(1);


				int index53_102 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_102);
				if (s >= 0) return s;
				break;

			case 24:
				int LA53_125 = input.LA(1);


				int index53_125 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_125);
				if (s >= 0) return s;
				break;

			case 25:
				int LA53_126 = input.LA(1);


				int index53_126 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_126);
				if (s >= 0) return s;
				break;

			case 26:
				int LA53_127 = input.LA(1);


				int index53_127 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_127);
				if (s >= 0) return s;
				break;

			case 27:
				int LA53_128 = input.LA(1);


				int index53_128 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_128);
				if (s >= 0) return s;
				break;

			case 28:
				int LA53_129 = input.LA(1);


				int index53_129 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_129);
				if (s >= 0) return s;
				break;

			case 29:
				int LA53_130 = input.LA(1);


				int index53_130 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_130);
				if (s >= 0) return s;
				break;

			case 30:
				int LA53_153 = input.LA(1);


				int index53_153 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_153);
				if (s >= 0) return s;
				break;

			case 31:
				int LA53_154 = input.LA(1);


				int index53_154 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_154);
				if (s >= 0) return s;
				break;

			case 32:
				int LA53_155 = input.LA(1);


				int index53_155 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_155);
				if (s >= 0) return s;
				break;

			case 33:
				int LA53_156 = input.LA(1);


				int index53_156 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_156);
				if (s >= 0) return s;
				break;

			case 34:
				int LA53_157 = input.LA(1);


				int index53_157 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_157);
				if (s >= 0) return s;
				break;

			case 35:
				int LA53_158 = input.LA(1);


				int index53_158 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_158);
				if (s >= 0) return s;
				break;

			case 36:
				int LA53_181 = input.LA(1);


				int index53_181 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_181);
				if (s >= 0) return s;
				break;

			case 37:
				int LA53_182 = input.LA(1);


				int index53_182 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_182);
				if (s >= 0) return s;
				break;

			case 38:
				int LA53_183 = input.LA(1);


				int index53_183 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_183);
				if (s >= 0) return s;
				break;

			case 39:
				int LA53_184 = input.LA(1);


				int index53_184 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_184);
				if (s >= 0) return s;
				break;

			case 40:
				int LA53_185 = input.LA(1);


				int index53_185 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_185);
				if (s >= 0) return s;
				break;

			case 41:
				int LA53_186 = input.LA(1);


				int index53_186 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_186);
				if (s >= 0) return s;
				break;

			case 42:
				int LA53_209 = input.LA(1);


				int index53_209 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_209);
				if (s >= 0) return s;
				break;

			case 43:
				int LA53_210 = input.LA(1);


				int index53_210 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_210);
				if (s >= 0) return s;
				break;

			case 44:
				int LA53_211 = input.LA(1);


				int index53_211 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_211);
				if (s >= 0) return s;
				break;

			case 45:
				int LA53_212 = input.LA(1);


				int index53_212 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_212);
				if (s >= 0) return s;
				break;

			case 46:
				int LA53_213 = input.LA(1);


				int index53_213 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_213);
				if (s >= 0) return s;
				break;

			case 47:
				int LA53_214 = input.LA(1);


				int index53_214 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_214);
				if (s >= 0) return s;
				break;

			case 48:
				int LA53_215 = input.LA(1);


				int index53_215 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_215);
				if (s >= 0) return s;
				break;

			case 49:
				int LA53_216 = input.LA(1);


				int index53_216 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_216);
				if (s >= 0) return s;
				break;

			case 50:
				int LA53_217 = input.LA(1);


				int index53_217 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_217);
				if (s >= 0) return s;
				break;

			case 51:
				int LA53_218 = input.LA(1);


				int index53_218 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_218);
				if (s >= 0) return s;
				break;

			case 52:
				int LA53_219 = input.LA(1);


				int index53_219 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_219);
				if (s >= 0) return s;
				break;

			case 53:
				int LA53_220 = input.LA(1);


				int index53_220 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_220);
				if (s >= 0) return s;
				break;

			case 54:
				int LA53_234 = input.LA(1);


				int index53_234 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_234);
				if (s >= 0) return s;
				break;

			case 55:
				int LA53_235 = input.LA(1);


				int index53_235 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_235);
				if (s >= 0) return s;
				break;

			case 56:
				int LA53_236 = input.LA(1);


				int index53_236 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_236);
				if (s >= 0) return s;
				break;

			case 57:
				int LA53_237 = input.LA(1);


				int index53_237 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_237);
				if (s >= 0) return s;
				break;

			case 58:
				int LA53_238 = input.LA(1);


				int index53_238 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_238);
				if (s >= 0) return s;
				break;

			case 59:
				int LA53_239 = input.LA(1);


				int index53_239 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_239);
				if (s >= 0) return s;
				break;

			case 60:
				int LA53_240 = input.LA(1);


				int index53_240 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_240);
				if (s >= 0) return s;
				break;

			case 61:
				int LA53_241 = input.LA(1);


				int index53_241 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_241);
				if (s >= 0) return s;
				break;

			case 62:
				int LA53_242 = input.LA(1);


				int index53_242 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_242);
				if (s >= 0) return s;
				break;

			case 63:
				int LA53_243 = input.LA(1);


				int index53_243 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_243);
				if (s >= 0) return s;
				break;

			case 64:
				int LA53_244 = input.LA(1);


				int index53_244 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_244);
				if (s >= 0) return s;
				break;

			case 65:
				int LA53_245 = input.LA(1);


				int index53_245 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_245);
				if (s >= 0) return s;
				break;

			case 66:
				int LA53_246 = input.LA(1);


				int index53_246 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_246);
				if (s >= 0) return s;
				break;

			case 67:
				int LA53_247 = input.LA(1);


				int index53_247 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_247);
				if (s >= 0) return s;
				break;

			case 68:
				int LA53_248 = input.LA(1);


				int index53_248 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_248);
				if (s >= 0) return s;
				break;

			case 69:
				int LA53_249 = input.LA(1);


				int index53_249 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_249);
				if (s >= 0) return s;
				break;

			case 70:
				int LA53_250 = input.LA(1);


				int index53_250 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_250);
				if (s >= 0) return s;
				break;

			case 71:
				int LA53_251 = input.LA(1);


				int index53_251 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_251);
				if (s >= 0) return s;
				break;

			case 72:
				int LA53_252 = input.LA(1);


				int index53_252 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_252);
				if (s >= 0) return s;
				break;

			case 73:
				int LA53_253 = input.LA(1);


				int index53_253 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_253);
				if (s >= 0) return s;
				break;

			case 74:
				int LA53_254 = input.LA(1);


				int index53_254 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_254);
				if (s >= 0) return s;
				break;

			case 75:
				int LA53_255 = input.LA(1);


				int index53_255 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_255);
				if (s >= 0) return s;
				break;

			case 76:
				int LA53_256 = input.LA(1);


				int index53_256 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_256);
				if (s >= 0) return s;
				break;

			case 77:
				int LA53_257 = input.LA(1);


				int index53_257 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_257);
				if (s >= 0) return s;
				break;

			case 78:
				int LA53_258 = input.LA(1);


				int index53_258 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_258);
				if (s >= 0) return s;
				break;

			case 79:
				int LA53_259 = input.LA(1);


				int index53_259 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_259);
				if (s >= 0) return s;
				break;

			case 80:
				int LA53_260 = input.LA(1);


				int index53_260 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_260);
				if (s >= 0) return s;
				break;

			case 81:
				int LA53_261 = input.LA(1);


				int index53_261 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_261);
				if (s >= 0) return s;
				break;

			case 82:
				int LA53_262 = input.LA(1);


				int index53_262 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_262);
				if (s >= 0) return s;
				break;

			case 83:
				int LA53_263 = input.LA(1);


				int index53_263 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_263);
				if (s >= 0) return s;
				break;

			case 84:
				int LA53_264 = input.LA(1);


				int index53_264 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_264);
				if (s >= 0) return s;
				break;

			case 85:
				int LA53_265 = input.LA(1);


				int index53_265 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_265);
				if (s >= 0) return s;
				break;

			case 86:
				int LA53_266 = input.LA(1);


				int index53_266 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_266);
				if (s >= 0) return s;
				break;

			case 87:
				int LA53_267 = input.LA(1);


				int index53_267 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_267);
				if (s >= 0) return s;
				break;

			case 88:
				int LA53_268 = input.LA(1);


				int index53_268 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_268);
				if (s >= 0) return s;
				break;

			case 89:
				int LA53_269 = input.LA(1);


				int index53_269 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_269);
				if (s >= 0) return s;
				break;

			case 90:
				int LA53_270 = input.LA(1);


				int index53_270 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_270);
				if (s >= 0) return s;
				break;

			case 91:
				int LA53_271 = input.LA(1);


				int index53_271 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_271);
				if (s >= 0) return s;
				break;

			case 92:
				int LA53_272 = input.LA(1);


				int index53_272 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_272);
				if (s >= 0) return s;
				break;

			case 93:
				int LA53_273 = input.LA(1);


				int index53_273 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_273);
				if (s >= 0) return s;
				break;

			case 94:
				int LA53_274 = input.LA(1);


				int index53_274 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_274);
				if (s >= 0) return s;
				break;

			case 95:
				int LA53_275 = input.LA(1);


				int index53_275 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_275);
				if (s >= 0) return s;
				break;

			case 96:
				int LA53_276 = input.LA(1);


				int index53_276 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_276);
				if (s >= 0) return s;
				break;

			case 97:
				int LA53_277 = input.LA(1);


				int index53_277 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_277);
				if (s >= 0) return s;
				break;

			case 98:
				int LA53_278 = input.LA(1);


				int index53_278 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_278);
				if (s >= 0) return s;
				break;

			case 99:
				int LA53_279 = input.LA(1);


				int index53_279 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_279);
				if (s >= 0) return s;
				break;

			case 100:
				int LA53_280 = input.LA(1);


				int index53_280 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_280);
				if (s >= 0) return s;
				break;

			case 101:
				int LA53_281 = input.LA(1);


				int index53_281 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 19;}

				else if ((true)) {s = 20;}


				input.Seek(index53_281);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 53, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA65 : DFA
	{
		private const string DFA65_eotS =
			"\x51\xFFFF";
		private const string DFA65_eofS =
			"\x51\xFFFF";
		private const string DFA65_minS =
			"\x1\x4\x1\xD\x2A\xFFFF\x1\x0\x5\xFFFF\x1\x0\xE\xFFFF\x1\x0\xF\xFFFF";
		private const string DFA65_maxS =
			"\x1\x65\x1\x63\x2A\xFFFF\x1\x0\x5\xFFFF\x1\x0\xE\xFFFF\x1\x0\xF\xFFFF";
		private const string DFA65_acceptS =
			"\x2\xFFFF\x1\x2\x18\xFFFF\x1\x1\x35\xFFFF";
		private const string DFA65_specialS =
			"\x2C\xFFFF\x1\x0\x5\xFFFF\x1\x1\xE\xFFFF\x1\x2\xF\xFFFF}>";
		private static readonly string[] DFA65_transitionS =
			{
				"\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x1\x4"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1"+
				"\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x7\xFFFF\x1\x2\xF\xFFFF"+
				"\x2\x1B\x2\x2\x2\x1B\x3\x2\x1\x1B\x1\xFFFF\x3\x1B\x3\x2\x3\x1B\x1\x2"+
				"\x2\x1B\x1\x2\x2\x1B\x1\x2\x5\x1B\x2\x2\x3\xFFFF\x2\x2",
				"\x1\x1B\xA\xFFFF\x6\x2\x1\x2C\x1\xFFFF\x1\x32\xA\x2\x1\xFFFF\x3\x2"+
				"\x1\x41\xC\x2\x1\xFFFF\x2\x2\x2\x1B\x2\xFFFF\x2\x1B\x3\xFFFF\x1\x1B"+
				"\x1\xFFFF\x3\x1B\x3\xFFFF\x3\x1B\x1\xFFFF\x2\x1B\x1\xFFFF\x2\x1B\x2"+
				"\xFFFF\x4\x1B\x2\xFFFF\x3\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA65_eot = DFA.UnpackEncodedString(DFA65_eotS);
		private static readonly short[] DFA65_eof = DFA.UnpackEncodedString(DFA65_eofS);
		private static readonly char[] DFA65_min = DFA.UnpackEncodedStringToUnsignedChars(DFA65_minS);
		private static readonly char[] DFA65_max = DFA.UnpackEncodedStringToUnsignedChars(DFA65_maxS);
		private static readonly short[] DFA65_accept = DFA.UnpackEncodedString(DFA65_acceptS);
		private static readonly short[] DFA65_special = DFA.UnpackEncodedString(DFA65_specialS);
		private static readonly short[][] DFA65_transition;

		static DFA65()
		{
			int numStates = DFA65_transitionS.Length;
			DFA65_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA65_transition[i] = DFA.UnpackEncodedString(DFA65_transitionS[i]);
			}
		}

		public DFA65( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 65;
			this.eot = DFA65_eot;
			this.eof = DFA65_eof;
			this.min = DFA65_min;
			this.max = DFA65_max;
			this.accept = DFA65_accept;
			this.special = DFA65_special;
			this.transition = DFA65_transition;
		}

		public override string Description { get { return "()* loopback of 463:8: ( declaration )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition65(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA65_44 = input.LA(1);


				int index65_44 = input.Index;
				input.Rewind();
				s = -1;
				if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred137_C_fragment)))) {s = 27;}

				else if ((true)) {s = 2;}


				input.Seek(index65_44);
				if (s >= 0) return s;
				break;

			case 1:
				int LA65_50 = input.LA(1);


				int index65_50 = input.Index;
				input.Rewind();
				s = -1;
				if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred137_C_fragment)))) {s = 27;}

				else if ((true)) {s = 2;}


				input.Seek(index65_50);
				if (s >= 0) return s;
				break;

			case 2:
				int LA65_65 = input.LA(1);


				int index65_65 = input.Index;
				input.Rewind();
				s = -1;
				if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred137_C_fragment)))) {s = 27;}

				else if ((true)) {s = 2;}


				input.Seek(index65_65);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 65, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _external_declaration_in_translation_unit71 = new BitSet(new ulong[]{0x8000000140002002UL,0x7DB71D19UL});
		public static readonly BitSet _function_definition_in_external_declaration107 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_external_declaration112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_function_definition134 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _declarator_in_function_definition137 = new BitSet(new ulong[]{0x8000000000002000UL,0x17DB71D19UL});
		public static readonly BitSet _declaration_in_function_definition143 = new BitSet(new ulong[]{0x8000000000002000UL,0x17DB71D19UL});
		public static readonly BitSet _compound_statement_in_function_definition146 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _compound_statement_in_function_definition153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_declaration181 = new BitSet(new ulong[]{0x8000000140002000UL,0x79B71D19UL});
		public static readonly BitSet _declaration_specifiers_in_declaration183 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _init_declarator_list_in_declaration191 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_declaration193 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_declaration199 = new BitSet(new ulong[]{0x800140002000UL});
		public static readonly BitSet _init_declarator_list_in_declaration201 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_declaration204 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _storage_class_specifier_in_declaration_specifiers221 = new BitSet(new ulong[]{0x8000000000002002UL,0x79B71D19UL});
		public static readonly BitSet _type_specifier_in_declaration_specifiers229 = new BitSet(new ulong[]{0x8000000000002002UL,0x79B71D19UL});
		public static readonly BitSet _type_qualifier_in_declaration_specifiers237 = new BitSet(new ulong[]{0x8000000000002002UL,0x79B71D19UL});
		public static readonly BitSet _init_declarator_in_init_declarator_list253 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_init_declarator_list256 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _init_declarator_in_init_declarator_list258 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _declarator_in_init_declarator271 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _52_in_init_declarator274 = new BitSet(new ulong[]{0xCD50942A50UL,0x2100400000UL});
		public static readonly BitSet _initializer_in_init_declarator276 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_type_specifier315 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _67_in_type_specifier320 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _84_in_type_specifier325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _80_in_type_specifier330 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_type_specifier335 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _76_in_type_specifier340 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _72_in_type_specifier345 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _85_in_type_specifier350 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_type_specifier355 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_type_specifier360 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_or_union_specifier_in_type_specifier365 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_specifier_in_type_specifier370 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_id_in_type_specifier375 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_type_id390 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_or_union_in_struct_or_union_specifier420 = new BitSet(new ulong[]{0x2000UL,0x100000000UL});
		public static readonly BitSet _IDENTIFIER_in_struct_or_union_specifier422 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _96_in_struct_or_union_specifier425 = new BitSet(new ulong[]{0x8000000000002000UL,0x79331518UL});
		public static readonly BitSet _struct_declaration_list_in_struct_or_union_specifier427 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _100_in_struct_or_union_specifier429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_or_union_in_struct_or_union_specifier434 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_struct_or_union_specifier436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_struct_declaration_list463 = new BitSet(new ulong[]{0x8000000000002002UL,0x79331518UL});
		public static readonly BitSet _specifier_qualifier_list_in_struct_declaration475 = new BitSet(new ulong[]{0x400140002000UL});
		public static readonly BitSet _struct_declarator_list_in_struct_declaration477 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_struct_declaration479 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_qualifier_in_specifier_qualifier_list492 = new BitSet(new ulong[]{0x8000000000002002UL,0x79331518UL});
		public static readonly BitSet _type_specifier_in_specifier_qualifier_list496 = new BitSet(new ulong[]{0x8000000000002002UL,0x79331518UL});
		public static readonly BitSet _struct_declarator_in_struct_declarator_list510 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_struct_declarator_list513 = new BitSet(new ulong[]{0x400140002000UL});
		public static readonly BitSet _struct_declarator_in_struct_declarator_list515 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _declarator_in_struct_declarator528 = new BitSet(new ulong[]{0x400000000002UL});
		public static readonly BitSet _46_in_struct_declarator531 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _constant_expression_in_struct_declarator533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _46_in_struct_declarator540 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _constant_expression_in_struct_declarator542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _74_in_enum_specifier560 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _96_in_enum_specifier562 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _enumerator_list_in_enum_specifier564 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _100_in_enum_specifier566 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _74_in_enum_specifier571 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_enum_specifier573 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _96_in_enum_specifier575 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _enumerator_list_in_enum_specifier577 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _100_in_enum_specifier579 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _74_in_enum_specifier584 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_enum_specifier586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumerator_in_enumerator_list597 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_enumerator_list600 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _enumerator_in_enumerator_list602 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _IDENTIFIER_in_enumerator615 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _52_in_enumerator618 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _constant_expression_in_enumerator620 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_declarator649 = new BitSet(new ulong[]{0x40002000UL});
		public static readonly BitSet _direct_declarator_in_declarator652 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_declarator657 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_direct_declarator672 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _30_in_direct_declarator683 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _declarator_in_direct_declarator685 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_direct_declarator687 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _declarator_suffix_in_direct_declarator695 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _59_in_declarator_suffix709 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _constant_expression_in_declarator_suffix711 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_declarator_suffix713 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_declarator_suffix720 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_declarator_suffix722 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_declarator_suffix729 = new BitSet(new ulong[]{0x8000000000002000UL,0x79B71D19UL});
		public static readonly BitSet _parameter_type_list_in_declarator_suffix731 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_declarator_suffix733 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_declarator_suffix740 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _identifier_list_in_declarator_suffix742 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_declarator_suffix744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_declarator_suffix751 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_declarator_suffix753 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_pointer764 = new BitSet(new ulong[]{0x0UL,0x40000010UL});
		public static readonly BitSet _type_qualifier_in_pointer766 = new BitSet(new ulong[]{0x100000002UL,0x40000010UL});
		public static readonly BitSet _pointer_in_pointer769 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_pointer775 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _pointer_in_pointer777 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_pointer782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameter_list_in_parameter_type_list793 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_parameter_type_list796 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _43_in_parameter_type_list798 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameter_declaration_in_parameter_list811 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_parameter_list814 = new BitSet(new ulong[]{0x8000000000002000UL,0x79B71D19UL});
		public static readonly BitSet _parameter_declaration_in_parameter_list816 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _declaration_specifiers_in_parameter_declaration829 = new BitSet(new ulong[]{0x800000140002002UL});
		public static readonly BitSet _declarator_in_parameter_declaration832 = new BitSet(new ulong[]{0x800000140002002UL});
		public static readonly BitSet _abstract_declarator_in_parameter_declaration834 = new BitSet(new ulong[]{0x800000140002002UL});
		public static readonly BitSet _IDENTIFIER_in_identifier_list847 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_identifier_list850 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_identifier_list852 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _specifier_qualifier_list_in_type_name865 = new BitSet(new ulong[]{0x800000140000002UL});
		public static readonly BitSet _abstract_declarator_in_type_name867 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_abstract_declarator879 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _direct_abstract_declarator_in_abstract_declarator881 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _direct_abstract_declarator_in_abstract_declarator887 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_direct_abstract_declarator900 = new BitSet(new ulong[]{0x800000140000000UL});
		public static readonly BitSet _abstract_declarator_in_direct_abstract_declarator902 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_direct_abstract_declarator904 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _abstract_declarator_suffix_in_direct_abstract_declarator908 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _abstract_declarator_suffix_in_direct_abstract_declarator912 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _59_in_abstract_declarator_suffix924 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_abstract_declarator_suffix926 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_abstract_declarator_suffix931 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _constant_expression_in_abstract_declarator_suffix933 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_abstract_declarator_suffix935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_abstract_declarator_suffix940 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_abstract_declarator_suffix942 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_abstract_declarator_suffix947 = new BitSet(new ulong[]{0x8000000000002000UL,0x79B71D19UL});
		public static readonly BitSet _parameter_type_list_in_abstract_declarator_suffix949 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_abstract_declarator_suffix951 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignment_expression_in_initializer963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _96_in_initializer968 = new BitSet(new ulong[]{0xCD50942A50UL,0x2100400000UL});
		public static readonly BitSet _initializer_list_in_initializer970 = new BitSet(new ulong[]{0x2000000000UL,0x1000000000UL});
		public static readonly BitSet _37_in_initializer972 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _100_in_initializer975 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _initializer_in_initializer_list986 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_initializer_list989 = new BitSet(new ulong[]{0xCD50942A50UL,0x2100400000UL});
		public static readonly BitSet _initializer_in_initializer_list991 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _assignment_expression_in_argument_expression_list1008 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_argument_expression_list1011 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _assignment_expression_in_argument_expression_list1013 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression1027 = new BitSet(new ulong[]{0x4400000002UL});
		public static readonly BitSet _34_in_additive_expression1031 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression1033 = new BitSet(new ulong[]{0x4400000002UL});
		public static readonly BitSet _38_in_additive_expression1037 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression1039 = new BitSet(new ulong[]{0x4400000002UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1053 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _32_in_multiplicative_expression1057 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1059 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _44_in_multiplicative_expression1063 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1065 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _25_in_multiplicative_expression1069 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1071 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _30_in_cast_expression1084 = new BitSet(new ulong[]{0x8000000000002000UL,0x79331518UL});
		public static readonly BitSet _type_name_in_cast_expression1086 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_cast_expression1088 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _cast_expression_in_cast_expression1090 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expression_in_cast_expression1095 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _postfix_expression_in_unary_expression1106 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _35_in_unary_expression1111 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _unary_expression_in_unary_expression1113 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _39_in_unary_expression1118 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _unary_expression_in_unary_expression1120 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_operator_in_unary_expression1125 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _cast_expression_in_unary_expression1127 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_unary_expression1132 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _unary_expression_in_unary_expression1134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_unary_expression1139 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_unary_expression1141 = new BitSet(new ulong[]{0x8000000000002000UL,0x79331518UL});
		public static readonly BitSet _type_name_in_unary_expression1143 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_unary_expression1145 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_expression_in_postfix_expression1158 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _59_in_postfix_expression1166 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _expression_in_postfix_expression1168 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_postfix_expression1170 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _30_in_postfix_expression1178 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_postfix_expression1180 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _30_in_postfix_expression1188 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _argument_expression_list_in_postfix_expression1190 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_postfix_expression1192 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _42_in_postfix_expression1200 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_postfix_expression1202 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _41_in_postfix_expression1210 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_postfix_expression1212 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _35_in_postfix_expression1220 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _39_in_postfix_expression1228 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _IDENTIFIER_in_primary_expression1280 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_in_primary_expression1285 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_primary_expression1290 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _expression_in_primary_expression1292 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_primary_expression1294 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _hex_literal_in_constant1307 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _octal_literal_in_constant1314 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _decimal_literal_in_constant1321 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _character_literal_in_constant1328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_literal_in_constant1335 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _floating_point_literal_in_constant1342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HEX_LITERAL_in_hex_literal1353 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OCTAL_LITERAL_in_octal_literal1364 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECIMAL_LITERAL_in_decimal_literal1375 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHARACTER_LITERAL_in_character_literal1386 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_string_literal1397 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLOATING_POINT_LITERAL_in_floating_point_literal1408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignment_expression_in_expression1421 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_expression1424 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _assignment_expression_in_expression1426 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _conditional_expression_in_constant_expression1439 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_assignment_expression1450 = new BitSet(new ulong[]{0x4214211224000000UL,0x400000000UL});
		public static readonly BitSet _assignment_operator_in_assignment_expression1452 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _assignment_expression_in_assignment_expression1454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditional_expression_in_assignment_expression1459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expression_in_lvalue1471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logical_or_expression_in_conditional_expression1543 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _58_in_conditional_expression1546 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _expression_in_conditional_expression1548 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_conditional_expression1550 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _conditional_expression_in_conditional_expression1552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logical_and_expression_in_logical_or_expression1565 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_logical_or_expression1568 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _logical_and_expression_in_logical_or_expression1570 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _inclusive_or_expression_in_logical_and_expression1583 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _27_in_logical_and_expression1586 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _inclusive_or_expression_in_logical_and_expression1588 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _exclusive_or_expression_in_inclusive_or_expression1601 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _97_in_inclusive_or_expression1604 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _exclusive_or_expression_in_inclusive_or_expression1606 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _and_expression_in_exclusive_or_expression1619 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _61_in_exclusive_or_expression1622 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _and_expression_in_exclusive_or_expression1624 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _equality_expression_in_and_expression1637 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _28_in_and_expression1640 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _equality_expression_in_and_expression1642 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _relational_expression_in_equality_expression1654 = new BitSet(new ulong[]{0x20000001000002UL});
		public static readonly BitSet _set_in_equality_expression1657 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _relational_expression_in_equality_expression1663 = new BitSet(new ulong[]{0x20000001000002UL});
		public static readonly BitSet _shift_expression_in_relational_expression1676 = new BitSet(new ulong[]{0xC9000000000002UL});
		public static readonly BitSet _set_in_relational_expression1679 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _shift_expression_in_relational_expression1689 = new BitSet(new ulong[]{0xC9000000000002UL});
		public static readonly BitSet _additive_expression_in_shift_expression1702 = new BitSet(new ulong[]{0x102000000000002UL});
		public static readonly BitSet _set_in_shift_expression1705 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _additive_expression_in_shift_expression1711 = new BitSet(new ulong[]{0x102000000000002UL});
		public static readonly BitSet _labeled_statement_in_statement1726 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _compound_statement_in_statement1731 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_statement_in_statement1736 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selection_statement_in_statement1741 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _iteration_statement_in_statement1746 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _jump_statement_in_statement1751 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_labeled_statement1762 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_labeled_statement1764 = new BitSet(new ulong[]{0x80CD50942A50UL,0x218248E0E6UL});
		public static readonly BitSet _statement_in_labeled_statement1766 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _66_in_labeled_statement1771 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _constant_expression_in_labeled_statement1773 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_labeled_statement1775 = new BitSet(new ulong[]{0x80CD50942A50UL,0x218248E0E6UL});
		public static readonly BitSet _statement_in_labeled_statement1777 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _70_in_labeled_statement1782 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_labeled_statement1784 = new BitSet(new ulong[]{0x80CD50942A50UL,0x218248E0E6UL});
		public static readonly BitSet _statement_in_labeled_statement1786 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _96_in_compound_statement1808 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x31FFFFFDFFUL});
		public static readonly BitSet _declaration_in_compound_statement1810 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x31FFFFFDFFUL});
		public static readonly BitSet _statement_list_in_compound_statement1813 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _100_in_compound_statement1816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_statement_list1827 = new BitSet(new ulong[]{0x80CD50942A52UL,0x218248E0E6UL});
		public static readonly BitSet _47_in_expression_statement1839 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_statement1844 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_expression_statement1846 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_selection_statement1857 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_selection_statement1859 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _expression_in_selection_statement1861 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_selection_statement1863 = new BitSet(new ulong[]{0x80CD50942A50UL,0x218248E0E6UL});
		public static readonly BitSet _statement_in_selection_statement1865 = new BitSet(new ulong[]{0x2UL,0x200UL});
		public static readonly BitSet _73_in_selection_statement1880 = new BitSet(new ulong[]{0x80CD50942A50UL,0x218248E0E6UL});
		public static readonly BitSet _statement_in_selection_statement1882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _89_in_selection_statement1889 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_selection_statement1891 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _expression_in_selection_statement1893 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_selection_statement1895 = new BitSet(new ulong[]{0x80CD50942A50UL,0x218248E0E6UL});
		public static readonly BitSet _statement_in_selection_statement1897 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _95_in_iteration_statement1908 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_iteration_statement1910 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _expression_in_iteration_statement1912 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_iteration_statement1914 = new BitSet(new ulong[]{0x80CD50942A50UL,0x218248E0E6UL});
		public static readonly BitSet _statement_in_iteration_statement1916 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_iteration_statement1921 = new BitSet(new ulong[]{0x80CD50942A50UL,0x218248E0E6UL});
		public static readonly BitSet _statement_in_iteration_statement1923 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _95_in_iteration_statement1925 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_iteration_statement1927 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _expression_in_iteration_statement1929 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_iteration_statement1931 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_iteration_statement1933 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _77_in_iteration_statement1938 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_iteration_statement1940 = new BitSet(new ulong[]{0x80CD50942A50UL,0x2000400000UL});
		public static readonly BitSet _expression_statement_in_iteration_statement1942 = new BitSet(new ulong[]{0x80CD50942A50UL,0x2000400000UL});
		public static readonly BitSet _expression_statement_in_iteration_statement1944 = new BitSet(new ulong[]{0xCDD0942A50UL,0x2000400000UL});
		public static readonly BitSet _expression_in_iteration_statement1946 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_iteration_statement1949 = new BitSet(new ulong[]{0x80CD50942A50UL,0x218248E0E6UL});
		public static readonly BitSet _statement_in_iteration_statement1951 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _78_in_jump_statement1962 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_jump_statement1964 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement1966 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _69_in_jump_statement1971 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement1973 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _65_in_jump_statement1978 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement1980 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_jump_statement1985 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement1987 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_jump_statement1992 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _expression_in_jump_statement1994 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement1996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred2_C94 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred4_C94 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _declarator_in_synpred4_C97 = new BitSet(new ulong[]{0x8000000000002000UL,0x17DB71D19UL});
		public static readonly BitSet _declaration_in_synpred4_C99 = new BitSet(new ulong[]{0x8000000000002000UL,0x17DB71D19UL});
		public static readonly BitSet _96_in_synpred4_C102 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred5_C134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred8_C183 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_specifier_in_synpred12_C229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_specifier_in_synpred36_C496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_synpred46_C649 = new BitSet(new ulong[]{0x40002000UL});
		public static readonly BitSet _direct_declarator_in_synpred46_C652 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declarator_suffix_in_synpred48_C695 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred51_C729 = new BitSet(new ulong[]{0x8000000000002000UL,0x79B71D19UL});
		public static readonly BitSet _parameter_type_list_in_synpred51_C731 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred51_C733 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred52_C740 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _identifier_list_in_synpred52_C742 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred52_C744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_qualifier_in_synpred53_C766 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_synpred54_C769 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_synpred55_C764 = new BitSet(new ulong[]{0x0UL,0x40000010UL});
		public static readonly BitSet _type_qualifier_in_synpred55_C766 = new BitSet(new ulong[]{0x100000002UL,0x40000010UL});
		public static readonly BitSet _pointer_in_synpred55_C769 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_synpred56_C775 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _pointer_in_synpred56_C777 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declarator_in_synpred59_C832 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _abstract_declarator_in_synpred60_C834 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _direct_abstract_declarator_in_synpred63_C881 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _abstract_declarator_suffix_in_synpred66_C912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred79_C1084 = new BitSet(new ulong[]{0x8000000000002000UL,0x79331518UL});
		public static readonly BitSet _type_name_in_synpred79_C1086 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred79_C1088 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _cast_expression_in_synpred79_C1090 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_synpred84_C1132 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _unary_expression_in_synpred84_C1134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_synpred105_C1450 = new BitSet(new ulong[]{0x4214211224000000UL,0x400000000UL});
		public static readonly BitSet _assignment_operator_in_synpred105_C1452 = new BitSet(new ulong[]{0xCD50942A50UL,0x2000400000UL});
		public static readonly BitSet _assignment_expression_in_synpred105_C1454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_synpred137_C1810 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
