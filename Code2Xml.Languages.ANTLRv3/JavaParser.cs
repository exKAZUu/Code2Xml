//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 Java.g 2013-10-04 11:22:48

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019

 using Code2Xml.Core.Antlr; 

using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  Code2Xml.Languages.ANTLRv3 
{
/** A Java 1.5 grammar for ANTLR v3 derived from the spec
 *
 *  This is a very close representation of the spec; the changes
 *  are comestic (remove left recursion) and also fixes (the spec
 *  isn't exactly perfect).  I have run this on the 1.4.2 source
 *  and some nasty looking enums from 1.5, but have not really
 *  tested for 1.5 compatibility.
 *
 *  I built this with: java -Xmx100M org.antlr.Tool java.g
 *  and got two errors that are ok (for now):
 *  java.g:691:9: Decision can match input such as
 *    "'0'..'9'{'E', 'e'}{'+', '-'}'0'..'9'{'D', 'F', 'd', 'f'}"
 *    using multiple alternatives: 3, 4
 *  As a result, alternative(s) 4 were disabled for that input
 *  java.g:734:35: Decision can match input such as "{'$', 'A'..'Z',
 *    '_', 'a'..'z', '\u00C0'..'\u00D6', '\u00D8'..'\u00F6',
 *    '\u00F8'..'\u1FFF', '\u3040'..'\u318F', '\u3300'..'\u337F',
 *    '\u3400'..'\u3D2D', '\u4E00'..'\u9FFF', '\uF900'..'\uFAFF'}"
 *    using multiple alternatives: 1, 2
 *  As a result, alternative(s) 2 were disabled for that input
 *
 *  You can turn enum on/off as a keyword :)
 *
 *  Version 1.0 -- initial release July 5, 2006 (requires 3.0b2 or higher)
 *
 *  Primary author: Terence Parr, July 2006
 *
 *  Version 1.0.1 -- corrections by Koen Vanderkimpen & Marko van Dooren,
 *      October 25, 2006;
 *      fixed normalInterfaceDeclaration: now uses typeParameters instead
 *          of typeParameter (according to JLS, 3rd edition)
 *      fixed castExpression: no longer allows expression next to type
 *          (according to semantics in JLS, in contrast with syntax in JLS)
 *
 *  Version 1.0.2 -- Terence Parr, Nov 27, 2006
 *      java spec I built this from had some bizarre for-loop control.
 *          Looked weird and so I looked elsewhere...Yep, it's messed up.
 *          simplified.
 *
 *  Version 1.0.3 -- Chris Hogue, Feb 26, 2007
 *      Factored out an annotationName rule and used it in the annotation rule.
 *          Not sure why, but typeName wasn't recognizing references to inner
 *          annotations (e.g. @InterfaceName.InnerAnnotation())
 *      Factored out the elementValue section of an annotation reference.  Created
 *          elementValuePair and elementValuePairs rules, then used them in the
 *          annotation rule.  Allows it to recognize annotation references with
 *          multiple, comma separated attributes.
 *      Updated elementValueArrayInitializer so that it allows multiple elements.
 *          (It was only allowing 0 or 1 element).
 *      Updated localVariableDeclaration to allow annotations.  Interestingly the JLS
 *          doesn't appear to indicate this is legal, but it does work as of at least
 *          JDK 1.5.0_06.
 *      Moved the Identifier portion of annotationTypeElementRest to annotationMethodRest.
 *          Because annotationConstantRest already references variableDeclarator which
 *          has the Identifier portion in it, the parser would fail on constants in
 *          annotation definitions because it expected two identifiers.
 *      Added optional trailing ';' to the alternatives in annotationTypeElementRest.
 *          Wouldn't handle an inner interface that has a trailing ';'.
 *      Swapped the expression and type rule reference order in castExpression to
 *          make it check for genericized casts first.  It was failing to recognize a
 *          statement like  "Class<Byte> TYPE = (Class<Byte>)...;" because it was seeing
 *          'Class<Byte' in the cast expression as a less than expression, then failing
 *          on the '>'.
 *      Changed createdName to use typeArguments instead of nonWildcardTypeArguments.
 *         
 *      Changed the 'this' alternative in primary to allow 'identifierSuffix' rather than
 *          just 'arguments'.  The case it couldn't handle was a call to an explicit
 *          generic method invocation (e.g. this.<E>doSomething()).  Using identifierSuffix
 *          may be overly aggressive--perhaps should create a more constrained thisSuffix rule?
 *
 *  Version 1.0.4 -- Hiroaki Nakamura, May 3, 2007
 *
 *  Fixed formalParameterDecls, localVariableDeclaration, forInit,
 *  and forVarControl to use variableModifier* not 'final'? (annotation)?
 *
 *  Version 1.0.5 -- Terence, June 21, 2007
 *  --a[i].foo didn't work. Fixed unaryExpression
 *
 *  Version 1.0.6 -- John Ridgway, March 17, 2008
 *      Made "assert" a switchable keyword like "enum".
 *      Fixed compilationUnit to disallow "annotation importDeclaration ...".
 *      Changed "Identifier ('.' Identifier)*" to "qualifiedName" in more
 *          places.
 *      Changed modifier* and/or variableModifier* to classOrInterfaceModifiers,
 *          modifiers or variableModifiers, as appropriate.
 *      Renamed "bound" to "typeBound" to better match language in the JLS.
 *      Added "memberDeclaration" which rewrites to methodDeclaration or
 *      fieldDeclaration and pulled type into memberDeclaration.  So we parse
 *          type and then move on to decide whether we're dealing with a field
 *          or a method.
 *      Modified "constructorDeclaration" to use "constructorBody" instead of
 *          "methodBody".  constructorBody starts with explicitConstructorInvocation,
 *          then goes on to blockStatement*.  Pulling explicitConstructorInvocation
 *          out of expressions allowed me to simplify "primary".
 *      Changed variableDeclarator to simplify it.
 *      Changed type to use classOrInterfaceType, thus simplifying it; of course
 *          I then had to add classOrInterfaceType, but it is used in several
 *          places.
 *      Fixed annotations, old version allowed "@X(y,z)", which is illegal.
 *      Added optional comma to end of "elementValueArrayInitializer"; as per JLS.
 *      Changed annotationTypeElementRest to use normalClassDeclaration and
 *          normalInterfaceDeclaration rather than classDeclaration and
 *          interfaceDeclaration, thus getting rid of a couple of grammar ambiguities.
 *      Split localVariableDeclaration into localVariableDeclarationStatement
 *          (includes the terminating semi-colon) and localVariableDeclaration.
 *          This allowed me to use localVariableDeclaration in "forInit" clauses,
 *           simplifying them.
 *      Changed switchBlockStatementGroup to use multiple labels.  This adds an
 *          ambiguity, but if one uses appropriately greedy parsing it yields the
 *           parse that is closest to the meaning of the switch statement.
 *      Renamed "forVarControl" to "enhancedForControl" -- JLS language.
 *      Added semantic predicates to test for shift operations rather than other
 *          things.  Thus, for instance, the string "< <" will never be treated
 *          as a left-shift operator.
 *      In "creator" we rule out "nonWildcardTypeArguments" on arrayCreation,
 *          which are illegal.
 *      Moved "nonWildcardTypeArguments into innerCreator.
 *      Removed 'super' superSuffix from explicitGenericInvocation, since that
 *          is only used in explicitConstructorInvocation at the beginning of a
 *           constructorBody.  (This is part of the simplification of expressions
 *           mentioned earlier.)
 *      Simplified primary (got rid of those things that are only used in
 *          explicitConstructorInvocation).
 *      Lexer -- removed "Exponent?" from FloatingPointLiteral choice 4, since it
 *          led to an ambiguity.
 *
 *      This grammar successfully parses every .java file in the JDK 1.5 source
 *          tree (excluding those whose file names include '-', which are not
 *          valid Java compilation units).
 *
 *  Known remaining problems:
 *      "Letter" and "JavaIDDigit" are wrong.  The actual specification of
 *      "Letter" should be "a character for which the method
 *      Character.isJavaIdentifierStart(int) returns true."  A "Java
 *      letter-or-digit is a character for which the method
 *      Character.isJavaIdentifierPart(int) returns true."
 */
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class JavaParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSTRACT", "AMP", "AMPAMP", "AMPEQ", "ASSERT", "BANG", "BANGEQ", "BAR", "BARBAR", "BAREQ", "BOOLEAN", "BREAK", "BYTE", "CARET", "CARETEQ", "CASE", "CATCH", "CHAR", "CHARLITERAL", "CLASS", "COLON", "COMMA", "COMMENT", "CONST", "CONTINUE", "DEFAULT", "DO", "DOT", "DOUBLE", "DOUBLELITERAL", "DoubleSuffix", "ELLIPSIS", "ELSE", "ENUM", "EQ", "EQEQ", "EXTENDS", "EscapeSequence", "Exponent", "FALSE", "FINAL", "FINALLY", "FLOAT", "FLOATLITERAL", "FOR", "FloatSuffix", "GOTO", "GT", "HexDigit", "HexPrefix", "IDENTIFIER", "IF", "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", "INTERFACE", "INTLITERAL", "IdentifierPart", "IdentifierStart", "IntegerNumber", "LBRACE", "LBRACKET", "LINE_COMMENT", "LONG", "LONGLITERAL", "LPAREN", "LT", "LongSuffix", "MONKEYS_AT", "NATIVE", "NEW", "NULL", "NonIntegerNumber", "PACKAGE", "PERCENT", "PERCENTEQ", "PLUS", "PLUSEQ", "PLUSPLUS", "PRIVATE", "PROTECTED", "PUBLIC", "QUES", "RBRACE", "RBRACKET", "RETURN", "RPAREN", "SEMI", "SHORT", "SLASH", "SLASHEQ", "STAR", "STAREQ", "STATIC", "STRICTFP", "STRINGLITERAL", "SUB", "SUBEQ", "SUBSUB", "SUPER", "SWITCH", "SYNCHRONIZED", "SurrogateIdentifer", "THIS", "THROW", "THROWS", "TILDE", "TRANSIENT", "TRUE", "TRY", "VOID", "VOLATILE", "WHILE", "WS"
	};
	public const int EOF=-1;
	public const int ABSTRACT=4;
	public const int AMP=5;
	public const int AMPAMP=6;
	public const int AMPEQ=7;
	public const int ASSERT=8;
	public const int BANG=9;
	public const int BANGEQ=10;
	public const int BAR=11;
	public const int BARBAR=12;
	public const int BAREQ=13;
	public const int BOOLEAN=14;
	public const int BREAK=15;
	public const int BYTE=16;
	public const int CARET=17;
	public const int CARETEQ=18;
	public const int CASE=19;
	public const int CATCH=20;
	public const int CHAR=21;
	public const int CHARLITERAL=22;
	public const int CLASS=23;
	public const int COLON=24;
	public const int COMMA=25;
	public const int COMMENT=26;
	public const int CONST=27;
	public const int CONTINUE=28;
	public const int DEFAULT=29;
	public const int DO=30;
	public const int DOT=31;
	public const int DOUBLE=32;
	public const int DOUBLELITERAL=33;
	public const int DoubleSuffix=34;
	public const int ELLIPSIS=35;
	public const int ELSE=36;
	public const int ENUM=37;
	public const int EQ=38;
	public const int EQEQ=39;
	public const int EXTENDS=40;
	public const int EscapeSequence=41;
	public const int Exponent=42;
	public const int FALSE=43;
	public const int FINAL=44;
	public const int FINALLY=45;
	public const int FLOAT=46;
	public const int FLOATLITERAL=47;
	public const int FOR=48;
	public const int FloatSuffix=49;
	public const int GOTO=50;
	public const int GT=51;
	public const int HexDigit=52;
	public const int HexPrefix=53;
	public const int IDENTIFIER=54;
	public const int IF=55;
	public const int IMPLEMENTS=56;
	public const int IMPORT=57;
	public const int INSTANCEOF=58;
	public const int INT=59;
	public const int INTERFACE=60;
	public const int INTLITERAL=61;
	public const int IdentifierPart=62;
	public const int IdentifierStart=63;
	public const int IntegerNumber=64;
	public const int LBRACE=65;
	public const int LBRACKET=66;
	public const int LINE_COMMENT=67;
	public const int LONG=68;
	public const int LONGLITERAL=69;
	public const int LPAREN=70;
	public const int LT=71;
	public const int LongSuffix=72;
	public const int MONKEYS_AT=73;
	public const int NATIVE=74;
	public const int NEW=75;
	public const int NULL=76;
	public const int NonIntegerNumber=77;
	public const int PACKAGE=78;
	public const int PERCENT=79;
	public const int PERCENTEQ=80;
	public const int PLUS=81;
	public const int PLUSEQ=82;
	public const int PLUSPLUS=83;
	public const int PRIVATE=84;
	public const int PROTECTED=85;
	public const int PUBLIC=86;
	public const int QUES=87;
	public const int RBRACE=88;
	public const int RBRACKET=89;
	public const int RETURN=90;
	public const int RPAREN=91;
	public const int SEMI=92;
	public const int SHORT=93;
	public const int SLASH=94;
	public const int SLASHEQ=95;
	public const int STAR=96;
	public const int STAREQ=97;
	public const int STATIC=98;
	public const int STRICTFP=99;
	public const int STRINGLITERAL=100;
	public const int SUB=101;
	public const int SUBEQ=102;
	public const int SUBSUB=103;
	public const int SUPER=104;
	public const int SWITCH=105;
	public const int SYNCHRONIZED=106;
	public const int SurrogateIdentifer=107;
	public const int THIS=108;
	public const int THROW=109;
	public const int THROWS=110;
	public const int TILDE=111;
	public const int TRANSIENT=112;
	public const int TRUE=113;
	public const int TRY=114;
	public const int VOID=115;
	public const int VOLATILE=116;
	public const int WHILE=117;
	public const int WS=118;

	public JavaParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public JavaParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[381+1];


		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return JavaParser.tokenNames; } }
	public override string GrammarFileName { get { return "Java.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_compilationUnit();
	partial void LeaveRule_compilationUnit();
	// $ANTLR start "compilationUnit"
	// Java.g:309:1: compilationUnit : ( ( annotations )? packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* ;
	[GrammarRule("compilationUnit")]
	public AstParserRuleReturnScope<CommonTree, CommonToken> compilationUnit()
	{
		EnterRule_compilationUnit();
		EnterRule("compilationUnit", 1);
		TraceIn("compilationUnit", 1);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int compilationUnit_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> annotations1 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> packageDeclaration2 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> importDeclaration3 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> typeDeclaration4 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "compilationUnit");
		DebugLocation(309, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// Java.g:310:5: ( ( ( annotations )? packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* )
			DebugEnterAlt(1);
			// Java.g:310:9: ( ( annotations )? packageDeclaration )? ( importDeclaration )* ( typeDeclaration )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(310, 9);
			// Java.g:310:9: ( ( annotations )? packageDeclaration )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if ((LA2_1==MONKEYS_AT))
			{
				int LA2_2 = input.LA(2);

				if ((EvaluatePredicate(synpred2_Java_fragment)))
				{
					alt2 = 1;
				}
			}
			else if ((LA2_1==PACKAGE))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:310:13: ( annotations )? packageDeclaration
				{
				DebugLocation(310, 13);
				// Java.g:310:13: ( annotations )?
				int alt1=2;
				try { DebugEnterSubRule(1);
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if ((LA1_1==MONKEYS_AT))
				{
					alt1 = 1;
				}
				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:310:14: annotations
					{
					DebugLocation(310, 14);
					PushFollow(Follow._annotations_in_compilationUnit160);
					annotations1=annotations();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, annotations1.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(1); }

				DebugLocation(312, 13);
				PushFollow(Follow._packageDeclaration_in_compilationUnit189);
				packageDeclaration2=packageDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, packageDeclaration2.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(314, 9);
			// Java.g:314:9: ( importDeclaration )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1==IMPORT))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:314:10: importDeclaration
					{
					DebugLocation(314, 10);
					PushFollow(Follow._importDeclaration_in_compilationUnit211);
					importDeclaration3=importDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, importDeclaration3.Tree);

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(316, 9);
			// Java.g:316:9: ( typeDeclaration )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==ABSTRACT||LA4_1==BOOLEAN||LA4_1==BYTE||LA4_1==CHAR||LA4_1==CLASS||LA4_1==DOUBLE||LA4_1==ENUM||LA4_1==FINAL||LA4_1==FLOAT||LA4_1==IDENTIFIER||(LA4_1>=INT && LA4_1<=INTERFACE)||LA4_1==LONG||LA4_1==LT||(LA4_1>=MONKEYS_AT && LA4_1<=NATIVE)||(LA4_1>=PRIVATE && LA4_1<=PUBLIC)||(LA4_1>=SEMI && LA4_1<=SHORT)||(LA4_1>=STATIC && LA4_1<=STRICTFP)||LA4_1==SYNCHRONIZED||LA4_1==TRANSIENT||(LA4_1>=VOID && LA4_1<=VOLATILE)))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:316:10: typeDeclaration
					{
					DebugLocation(316, 10);
					PushFollow(Follow._typeDeclaration_in_compilationUnit233);
					typeDeclaration4=typeDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeDeclaration4.Tree);

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("compilationUnit", 1);
			LeaveRule("compilationUnit", 1);
			LeaveRule_compilationUnit();
			if (state.backtracking > 0) { Memoize(input, 1, compilationUnit_StartIndex); }

		}
		DebugLocation(318, 4);
		} finally { DebugExitRule(GrammarFileName, "compilationUnit"); }
		return retval;

	}
	// $ANTLR end "compilationUnit"

	partial void EnterRule_packageDeclaration();
	partial void LeaveRule_packageDeclaration();
	// $ANTLR start "packageDeclaration"
	// Java.g:320:1: packageDeclaration : 'package' qualifiedName ';' ;
	[GrammarRule("packageDeclaration")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> packageDeclaration()
	{
		EnterRule_packageDeclaration();
		EnterRule("packageDeclaration", 2);
		TraceIn("packageDeclaration", 2);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int packageDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal5 = default(CommonToken);
		CommonToken char_literal7 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> qualifiedName6 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal5_tree = default(CommonTree);
		CommonTree char_literal7_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "packageDeclaration");
		DebugLocation(320, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// Java.g:321:5: ( 'package' qualifiedName ';' )
			DebugEnterAlt(1);
			// Java.g:321:9: 'package' qualifiedName ';'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(321, 9);
			string_literal5=(CommonToken)Match(input,PACKAGE,Follow._PACKAGE_in_packageDeclaration264); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal5_tree = (CommonTree)adaptor.Create(string_literal5);
			adaptor.AddChild(root_0, string_literal5_tree);
			}
			DebugLocation(321, 19);
			PushFollow(Follow._qualifiedName_in_packageDeclaration266);
			qualifiedName6=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName6.Tree);
			DebugLocation(322, 9);
			char_literal7=(CommonToken)Match(input,SEMI,Follow._SEMI_in_packageDeclaration276); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal7_tree = (CommonTree)adaptor.Create(char_literal7);
			adaptor.AddChild(root_0, char_literal7_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("packageDeclaration", 2);
			LeaveRule("packageDeclaration", 2);
			LeaveRule_packageDeclaration();
			if (state.backtracking > 0) { Memoize(input, 2, packageDeclaration_StartIndex); }

		}
		DebugLocation(323, 4);
		} finally { DebugExitRule(GrammarFileName, "packageDeclaration"); }
		return retval;

	}
	// $ANTLR end "packageDeclaration"

	partial void EnterRule_importDeclaration();
	partial void LeaveRule_importDeclaration();
	// $ANTLR start "importDeclaration"
	// Java.g:325:1: importDeclaration : ( 'import' ( 'static' )? IDENTIFIER '.' '*' ';' | 'import' ( 'static' )? IDENTIFIER ( '.' IDENTIFIER )+ ( '.' '*' )? ';' );
	[GrammarRule("importDeclaration")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> importDeclaration()
	{
		EnterRule_importDeclaration();
		EnterRule("importDeclaration", 3);
		TraceIn("importDeclaration", 3);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int importDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal8 = default(CommonToken);
		CommonToken string_literal9 = default(CommonToken);
		CommonToken IDENTIFIER10 = default(CommonToken);
		CommonToken char_literal11 = default(CommonToken);
		CommonToken char_literal12 = default(CommonToken);
		CommonToken char_literal13 = default(CommonToken);
		CommonToken string_literal14 = default(CommonToken);
		CommonToken string_literal15 = default(CommonToken);
		CommonToken IDENTIFIER16 = default(CommonToken);
		CommonToken char_literal17 = default(CommonToken);
		CommonToken IDENTIFIER18 = default(CommonToken);
		CommonToken char_literal19 = default(CommonToken);
		CommonToken char_literal20 = default(CommonToken);
		CommonToken char_literal21 = default(CommonToken);

		CommonTree string_literal8_tree = default(CommonTree);
		CommonTree string_literal9_tree = default(CommonTree);
		CommonTree IDENTIFIER10_tree = default(CommonTree);
		CommonTree char_literal11_tree = default(CommonTree);
		CommonTree char_literal12_tree = default(CommonTree);
		CommonTree char_literal13_tree = default(CommonTree);
		CommonTree string_literal14_tree = default(CommonTree);
		CommonTree string_literal15_tree = default(CommonTree);
		CommonTree IDENTIFIER16_tree = default(CommonTree);
		CommonTree char_literal17_tree = default(CommonTree);
		CommonTree IDENTIFIER18_tree = default(CommonTree);
		CommonTree char_literal19_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal21_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "importDeclaration");
		DebugLocation(325, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// Java.g:326:5: ( 'import' ( 'static' )? IDENTIFIER '.' '*' ';' | 'import' ( 'static' )? IDENTIFIER ( '.' IDENTIFIER )+ ( '.' '*' )? ';' )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			int LA9_1 = input.LA(1);

			if ((LA9_1==IMPORT))
			{
				int LA9_2 = input.LA(2);

				if ((LA9_2==STATIC))
				{
					int LA9_3 = input.LA(3);

					if ((LA9_3==IDENTIFIER))
					{
						int LA9_4 = input.LA(4);

						if ((LA9_4==DOT))
						{
							int LA9_5 = input.LA(5);

							if ((LA9_5==STAR))
							{
								alt9 = 1;
							}
							else if ((LA9_5==IDENTIFIER))
							{
								alt9 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 9, 4, input, 5);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 9, 3, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 9, 2, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA9_2==IDENTIFIER))
				{
					int LA9_3 = input.LA(3);

					if ((LA9_3==DOT))
					{
						int LA9_4 = input.LA(4);

						if ((LA9_4==STAR))
						{
							alt9 = 1;
						}
						else if ((LA9_4==IDENTIFIER))
						{
							alt9 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 9, 4, input, 4);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 9, 3, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 9, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:326:9: 'import' ( 'static' )? IDENTIFIER '.' '*' ';'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(326, 9);
				string_literal8=(CommonToken)Match(input,IMPORT,Follow._IMPORT_in_importDeclaration297); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal8_tree = (CommonTree)adaptor.Create(string_literal8);
				adaptor.AddChild(root_0, string_literal8_tree);
				}
				DebugLocation(327, 9);
				// Java.g:327:9: ( 'static' )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==STATIC))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:327:10: 'static'
					{
					DebugLocation(327, 10);
					string_literal9=(CommonToken)Match(input,STATIC,Follow._STATIC_in_importDeclaration309); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal9_tree = (CommonTree)adaptor.Create(string_literal9);
					adaptor.AddChild(root_0, string_literal9_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(5); }

				DebugLocation(329, 9);
				IDENTIFIER10=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_importDeclaration330); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER10_tree = (CommonTree)adaptor.Create(IDENTIFIER10);
				adaptor.AddChild(root_0, IDENTIFIER10_tree);
				}
				DebugLocation(329, 20);
				char_literal11=(CommonToken)Match(input,DOT,Follow._DOT_in_importDeclaration332); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal11_tree = (CommonTree)adaptor.Create(char_literal11);
				adaptor.AddChild(root_0, char_literal11_tree);
				}
				DebugLocation(329, 24);
				char_literal12=(CommonToken)Match(input,STAR,Follow._STAR_in_importDeclaration334); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal12_tree = (CommonTree)adaptor.Create(char_literal12);
				adaptor.AddChild(root_0, char_literal12_tree);
				}
				DebugLocation(330, 9);
				char_literal13=(CommonToken)Match(input,SEMI,Follow._SEMI_in_importDeclaration344); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal13_tree = (CommonTree)adaptor.Create(char_literal13);
				adaptor.AddChild(root_0, char_literal13_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:331:9: 'import' ( 'static' )? IDENTIFIER ( '.' IDENTIFIER )+ ( '.' '*' )? ';'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(331, 9);
				string_literal14=(CommonToken)Match(input,IMPORT,Follow._IMPORT_in_importDeclaration361); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal14_tree = (CommonTree)adaptor.Create(string_literal14);
				adaptor.AddChild(root_0, string_literal14_tree);
				}
				DebugLocation(332, 9);
				// Java.g:332:9: ( 'static' )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==STATIC))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:332:10: 'static'
					{
					DebugLocation(332, 10);
					string_literal15=(CommonToken)Match(input,STATIC,Follow._STATIC_in_importDeclaration373); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal15_tree = (CommonTree)adaptor.Create(string_literal15);
					adaptor.AddChild(root_0, string_literal15_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(334, 9);
				IDENTIFIER16=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_importDeclaration394); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER16_tree = (CommonTree)adaptor.Create(IDENTIFIER16);
				adaptor.AddChild(root_0, IDENTIFIER16_tree);
				}
				DebugLocation(335, 9);
				// Java.g:335:9: ( '.' IDENTIFIER )+
				int cnt7=0;
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					int LA7_1 = input.LA(1);

					if ((LA7_1==DOT))
					{
						int LA7_2 = input.LA(2);

						if ((LA7_2==IDENTIFIER))
						{
							alt7 = 1;
						}


					}


					} finally { DebugExitDecision(7); }
					switch (alt7)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:335:10: '.' IDENTIFIER
						{
						DebugLocation(335, 10);
						char_literal17=(CommonToken)Match(input,DOT,Follow._DOT_in_importDeclaration405); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal17_tree = (CommonTree)adaptor.Create(char_literal17);
						adaptor.AddChild(root_0, char_literal17_tree);
						}
						DebugLocation(335, 14);
						IDENTIFIER18=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_importDeclaration407); if (state.failed) return retval;
						if (state.backtracking == 0) {
						IDENTIFIER18_tree = (CommonTree)adaptor.Create(IDENTIFIER18);
						adaptor.AddChild(root_0, IDENTIFIER18_tree);
						}

						}
						break;

					default:
						if (cnt7 >= 1)
							goto loop7;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee7 = new EarlyExitException( 7, input );
						DebugRecognitionException(eee7);
						throw eee7;
					}
					cnt7++;
				}
				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(337, 9);
				// Java.g:337:9: ( '.' '*' )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==DOT))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:337:10: '.' '*'
					{
					DebugLocation(337, 10);
					char_literal19=(CommonToken)Match(input,DOT,Follow._DOT_in_importDeclaration429); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal19_tree = (CommonTree)adaptor.Create(char_literal19);
					adaptor.AddChild(root_0, char_literal19_tree);
					}
					DebugLocation(337, 14);
					char_literal20=(CommonToken)Match(input,STAR,Follow._STAR_in_importDeclaration431); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal20_tree = (CommonTree)adaptor.Create(char_literal20);
					adaptor.AddChild(root_0, char_literal20_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(339, 9);
				char_literal21=(CommonToken)Match(input,SEMI,Follow._SEMI_in_importDeclaration452); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal21_tree = (CommonTree)adaptor.Create(char_literal21);
				adaptor.AddChild(root_0, char_literal21_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("importDeclaration", 3);
			LeaveRule("importDeclaration", 3);
			LeaveRule_importDeclaration();
			if (state.backtracking > 0) { Memoize(input, 3, importDeclaration_StartIndex); }

		}
		DebugLocation(340, 4);
		} finally { DebugExitRule(GrammarFileName, "importDeclaration"); }
		return retval;

	}
	// $ANTLR end "importDeclaration"

	partial void EnterRule_qualifiedImportName();
	partial void LeaveRule_qualifiedImportName();
	// $ANTLR start "qualifiedImportName"
	// Java.g:342:1: qualifiedImportName : IDENTIFIER ( '.' IDENTIFIER )* ;
	[GrammarRule("qualifiedImportName")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> qualifiedImportName()
	{
		EnterRule_qualifiedImportName();
		EnterRule("qualifiedImportName", 4);
		TraceIn("qualifiedImportName", 4);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int qualifiedImportName_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENTIFIER22 = default(CommonToken);
		CommonToken char_literal23 = default(CommonToken);
		CommonToken IDENTIFIER24 = default(CommonToken);

		CommonTree IDENTIFIER22_tree = default(CommonTree);
		CommonTree char_literal23_tree = default(CommonTree);
		CommonTree IDENTIFIER24_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "qualifiedImportName");
		DebugLocation(342, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// Java.g:343:5: ( IDENTIFIER ( '.' IDENTIFIER )* )
			DebugEnterAlt(1);
			// Java.g:343:9: IDENTIFIER ( '.' IDENTIFIER )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(343, 9);
			IDENTIFIER22=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_qualifiedImportName472); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER22_tree = (CommonTree)adaptor.Create(IDENTIFIER22);
			adaptor.AddChild(root_0, IDENTIFIER22_tree);
			}
			DebugLocation(344, 9);
			// Java.g:344:9: ( '.' IDENTIFIER )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==DOT))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:344:10: '.' IDENTIFIER
					{
					DebugLocation(344, 10);
					char_literal23=(CommonToken)Match(input,DOT,Follow._DOT_in_qualifiedImportName483); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal23_tree = (CommonTree)adaptor.Create(char_literal23);
					adaptor.AddChild(root_0, char_literal23_tree);
					}
					DebugLocation(344, 14);
					IDENTIFIER24=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_qualifiedImportName485); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER24_tree = (CommonTree)adaptor.Create(IDENTIFIER24);
					adaptor.AddChild(root_0, IDENTIFIER24_tree);
					}

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedImportName", 4);
			LeaveRule("qualifiedImportName", 4);
			LeaveRule_qualifiedImportName();
			if (state.backtracking > 0) { Memoize(input, 4, qualifiedImportName_StartIndex); }

		}
		DebugLocation(346, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedImportName"); }
		return retval;

	}
	// $ANTLR end "qualifiedImportName"

	partial void EnterRule_typeDeclaration();
	partial void LeaveRule_typeDeclaration();
	// $ANTLR start "typeDeclaration"
	// Java.g:348:1: typeDeclaration : ( classOrInterfaceDeclaration | ';' );
	[GrammarRule("typeDeclaration")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> typeDeclaration()
	{
		EnterRule_typeDeclaration();
		EnterRule("typeDeclaration", 5);
		TraceIn("typeDeclaration", 5);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int typeDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal26 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> classOrInterfaceDeclaration25 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal26_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeDeclaration");
		DebugLocation(348, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// Java.g:349:5: ( classOrInterfaceDeclaration | ';' )
			int alt11=2;
			try { DebugEnterDecision(11, false);
			int LA11_1 = input.LA(1);

			if ((LA11_1==ABSTRACT||LA11_1==BOOLEAN||LA11_1==BYTE||LA11_1==CHAR||LA11_1==CLASS||LA11_1==DOUBLE||LA11_1==ENUM||LA11_1==FINAL||LA11_1==FLOAT||LA11_1==IDENTIFIER||(LA11_1>=INT && LA11_1<=INTERFACE)||LA11_1==LONG||LA11_1==LT||(LA11_1>=MONKEYS_AT && LA11_1<=NATIVE)||(LA11_1>=PRIVATE && LA11_1<=PUBLIC)||LA11_1==SHORT||(LA11_1>=STATIC && LA11_1<=STRICTFP)||LA11_1==SYNCHRONIZED||LA11_1==TRANSIENT||(LA11_1>=VOID && LA11_1<=VOLATILE)))
			{
				alt11 = 1;
			}
			else if ((LA11_1==SEMI))
			{
				alt11 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:349:9: classOrInterfaceDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(349, 9);
				PushFollow(Follow._classOrInterfaceDeclaration_in_typeDeclaration516);
				classOrInterfaceDeclaration25=classOrInterfaceDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classOrInterfaceDeclaration25.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:350:9: ';'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(350, 9);
				char_literal26=(CommonToken)Match(input,SEMI,Follow._SEMI_in_typeDeclaration526); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal26_tree = (CommonTree)adaptor.Create(char_literal26);
				adaptor.AddChild(root_0, char_literal26_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeDeclaration", 5);
			LeaveRule("typeDeclaration", 5);
			LeaveRule_typeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 5, typeDeclaration_StartIndex); }

		}
		DebugLocation(351, 4);
		} finally { DebugExitRule(GrammarFileName, "typeDeclaration"); }
		return retval;

	}
	// $ANTLR end "typeDeclaration"

	partial void EnterRule_classOrInterfaceDeclaration();
	partial void LeaveRule_classOrInterfaceDeclaration();
	// $ANTLR start "classOrInterfaceDeclaration"
	// Java.g:353:1: classOrInterfaceDeclaration : ( classDeclaration | interfaceDeclaration );
	[GrammarRule("classOrInterfaceDeclaration")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> classOrInterfaceDeclaration()
	{
		EnterRule_classOrInterfaceDeclaration();
		EnterRule("classOrInterfaceDeclaration", 6);
		TraceIn("classOrInterfaceDeclaration", 6);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int classOrInterfaceDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> classDeclaration27 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> interfaceDeclaration28 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "classOrInterfaceDeclaration");
		DebugLocation(353, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// Java.g:354:5: ( classDeclaration | interfaceDeclaration )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA12_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Java_fragment)))
				{
					alt12 = 1;
				}
				else if ((true))
				{
					alt12 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CLASS:
			case ENUM:
				{
				alt12 = 1;
				}
				break;
			case INTERFACE:
				{
				alt12 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:354:10: classDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(354, 10);
				PushFollow(Follow._classDeclaration_in_classOrInterfaceDeclaration547);
				classDeclaration27=classDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classDeclaration27.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:355:9: interfaceDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(355, 9);
				PushFollow(Follow._interfaceDeclaration_in_classOrInterfaceDeclaration557);
				interfaceDeclaration28=interfaceDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceDeclaration28.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classOrInterfaceDeclaration", 6);
			LeaveRule("classOrInterfaceDeclaration", 6);
			LeaveRule_classOrInterfaceDeclaration();
			if (state.backtracking > 0) { Memoize(input, 6, classOrInterfaceDeclaration_StartIndex); }

		}
		DebugLocation(356, 4);
		} finally { DebugExitRule(GrammarFileName, "classOrInterfaceDeclaration"); }
		return retval;

	}
	// $ANTLR end "classOrInterfaceDeclaration"

	partial void EnterRule_modifiers();
	partial void LeaveRule_modifiers();
	// $ANTLR start "modifiers"
	// Java.g:359:1: modifiers : ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )* ;
	[GrammarRule("modifiers")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> modifiers()
	{
		EnterRule_modifiers();
		EnterRule("modifiers", 7);
		TraceIn("modifiers", 7);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int modifiers_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal30 = default(CommonToken);
		CommonToken string_literal31 = default(CommonToken);
		CommonToken string_literal32 = default(CommonToken);
		CommonToken string_literal33 = default(CommonToken);
		CommonToken string_literal34 = default(CommonToken);
		CommonToken string_literal35 = default(CommonToken);
		CommonToken string_literal36 = default(CommonToken);
		CommonToken string_literal37 = default(CommonToken);
		CommonToken string_literal38 = default(CommonToken);
		CommonToken string_literal39 = default(CommonToken);
		CommonToken string_literal40 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> annotation29 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal30_tree = default(CommonTree);
		CommonTree string_literal31_tree = default(CommonTree);
		CommonTree string_literal32_tree = default(CommonTree);
		CommonTree string_literal33_tree = default(CommonTree);
		CommonTree string_literal34_tree = default(CommonTree);
		CommonTree string_literal35_tree = default(CommonTree);
		CommonTree string_literal36_tree = default(CommonTree);
		CommonTree string_literal37_tree = default(CommonTree);
		CommonTree string_literal38_tree = default(CommonTree);
		CommonTree string_literal39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modifiers");
		DebugLocation(359, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// Java.g:360:5: ( ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )* )
			DebugEnterAlt(1);
			// Java.g:361:5: ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(361, 5);
			// Java.g:361:5: ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=13;
				try { DebugEnterDecision(13, false);
				switch (input.LA(1))
				{
				case MONKEYS_AT:
					{
					int LA13_2 = input.LA(2);

					if ((LA13_2==IDENTIFIER))
					{
						alt13 = 1;
					}


					}
					break;
				case PUBLIC:
					{
					alt13 = 2;
					}
					break;
				case PROTECTED:
					{
					alt13 = 3;
					}
					break;
				case PRIVATE:
					{
					alt13 = 4;
					}
					break;
				case STATIC:
					{
					alt13 = 5;
					}
					break;
				case ABSTRACT:
					{
					alt13 = 6;
					}
					break;
				case FINAL:
					{
					alt13 = 7;
					}
					break;
				case NATIVE:
					{
					alt13 = 8;
					}
					break;
				case SYNCHRONIZED:
					{
					alt13 = 9;
					}
					break;
				case TRANSIENT:
					{
					alt13 = 10;
					}
					break;
				case VOLATILE:
					{
					alt13 = 11;
					}
					break;
				case STRICTFP:
					{
					alt13 = 12;
					}
					break;
				}

				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:361:10: annotation
					{
					DebugLocation(361, 10);
					PushFollow(Follow._annotation_in_modifiers592);
					annotation29=annotation();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, annotation29.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:362:9: 'public'
					{
					DebugLocation(362, 9);
					string_literal30=(CommonToken)Match(input,PUBLIC,Follow._PUBLIC_in_modifiers602); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal30_tree = (CommonTree)adaptor.Create(string_literal30);
					adaptor.AddChild(root_0, string_literal30_tree);
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Java.g:363:9: 'protected'
					{
					DebugLocation(363, 9);
					string_literal31=(CommonToken)Match(input,PROTECTED,Follow._PROTECTED_in_modifiers612); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal31_tree = (CommonTree)adaptor.Create(string_literal31);
					adaptor.AddChild(root_0, string_literal31_tree);
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// Java.g:364:9: 'private'
					{
					DebugLocation(364, 9);
					string_literal32=(CommonToken)Match(input,PRIVATE,Follow._PRIVATE_in_modifiers622); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal32_tree = (CommonTree)adaptor.Create(string_literal32);
					adaptor.AddChild(root_0, string_literal32_tree);
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// Java.g:365:9: 'static'
					{
					DebugLocation(365, 9);
					string_literal33=(CommonToken)Match(input,STATIC,Follow._STATIC_in_modifiers632); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal33_tree = (CommonTree)adaptor.Create(string_literal33);
					adaptor.AddChild(root_0, string_literal33_tree);
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// Java.g:366:9: 'abstract'
					{
					DebugLocation(366, 9);
					string_literal34=(CommonToken)Match(input,ABSTRACT,Follow._ABSTRACT_in_modifiers642); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal34_tree = (CommonTree)adaptor.Create(string_literal34);
					adaptor.AddChild(root_0, string_literal34_tree);
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// Java.g:367:9: 'final'
					{
					DebugLocation(367, 9);
					string_literal35=(CommonToken)Match(input,FINAL,Follow._FINAL_in_modifiers652); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal35_tree = (CommonTree)adaptor.Create(string_literal35);
					adaptor.AddChild(root_0, string_literal35_tree);
					}

					}
					break;
				case 8:
					DebugEnterAlt(8);
					// Java.g:368:9: 'native'
					{
					DebugLocation(368, 9);
					string_literal36=(CommonToken)Match(input,NATIVE,Follow._NATIVE_in_modifiers662); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal36_tree = (CommonTree)adaptor.Create(string_literal36);
					adaptor.AddChild(root_0, string_literal36_tree);
					}

					}
					break;
				case 9:
					DebugEnterAlt(9);
					// Java.g:369:9: 'synchronized'
					{
					DebugLocation(369, 9);
					string_literal37=(CommonToken)Match(input,SYNCHRONIZED,Follow._SYNCHRONIZED_in_modifiers672); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal37_tree = (CommonTree)adaptor.Create(string_literal37);
					adaptor.AddChild(root_0, string_literal37_tree);
					}

					}
					break;
				case 10:
					DebugEnterAlt(10);
					// Java.g:370:9: 'transient'
					{
					DebugLocation(370, 9);
					string_literal38=(CommonToken)Match(input,TRANSIENT,Follow._TRANSIENT_in_modifiers682); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal38_tree = (CommonTree)adaptor.Create(string_literal38);
					adaptor.AddChild(root_0, string_literal38_tree);
					}

					}
					break;
				case 11:
					DebugEnterAlt(11);
					// Java.g:371:9: 'volatile'
					{
					DebugLocation(371, 9);
					string_literal39=(CommonToken)Match(input,VOLATILE,Follow._VOLATILE_in_modifiers692); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal39_tree = (CommonTree)adaptor.Create(string_literal39);
					adaptor.AddChild(root_0, string_literal39_tree);
					}

					}
					break;
				case 12:
					DebugEnterAlt(12);
					// Java.g:372:9: 'strictfp'
					{
					DebugLocation(372, 9);
					string_literal40=(CommonToken)Match(input,STRICTFP,Follow._STRICTFP_in_modifiers702); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal40_tree = (CommonTree)adaptor.Create(string_literal40);
					adaptor.AddChild(root_0, string_literal40_tree);
					}

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modifiers", 7);
			LeaveRule("modifiers", 7);
			LeaveRule_modifiers();
			if (state.backtracking > 0) { Memoize(input, 7, modifiers_StartIndex); }

		}
		DebugLocation(374, 4);
		} finally { DebugExitRule(GrammarFileName, "modifiers"); }
		return retval;

	}
	// $ANTLR end "modifiers"

	partial void EnterRule_variableModifiers();
	partial void LeaveRule_variableModifiers();
	// $ANTLR start "variableModifiers"
	// Java.g:377:1: variableModifiers : ( 'final' | annotation )* ;
	[GrammarRule("variableModifiers")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableModifiers()
	{
		EnterRule_variableModifiers();
		EnterRule("variableModifiers", 8);
		TraceIn("variableModifiers", 8);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int variableModifiers_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal41 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> annotation42 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal41_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "variableModifiers");
		DebugLocation(377, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// Java.g:378:5: ( ( 'final' | annotation )* )
			DebugEnterAlt(1);
			// Java.g:378:9: ( 'final' | annotation )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(378, 9);
			// Java.g:378:9: ( 'final' | annotation )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=3;
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==FINAL))
				{
					alt14 = 1;
				}
				else if ((LA14_1==MONKEYS_AT))
				{
					alt14 = 2;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:378:13: 'final'
					{
					DebugLocation(378, 13);
					string_literal41=(CommonToken)Match(input,FINAL,Follow._FINAL_in_variableModifiers734); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal41_tree = (CommonTree)adaptor.Create(string_literal41);
					adaptor.AddChild(root_0, string_literal41_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:379:13: annotation
					{
					DebugLocation(379, 13);
					PushFollow(Follow._annotation_in_variableModifiers748);
					annotation42=annotation();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, annotation42.Tree);

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableModifiers", 8);
			LeaveRule("variableModifiers", 8);
			LeaveRule_variableModifiers();
			if (state.backtracking > 0) { Memoize(input, 8, variableModifiers_StartIndex); }

		}
		DebugLocation(381, 4);
		} finally { DebugExitRule(GrammarFileName, "variableModifiers"); }
		return retval;

	}
	// $ANTLR end "variableModifiers"

	partial void EnterRule_classDeclaration();
	partial void LeaveRule_classDeclaration();
	// $ANTLR start "classDeclaration"
	// Java.g:384:1: classDeclaration : ( normalClassDeclaration | enumDeclaration );
	[GrammarRule("classDeclaration")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> classDeclaration()
	{
		EnterRule_classDeclaration();
		EnterRule("classDeclaration", 9);
		TraceIn("classDeclaration", 9);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int classDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> normalClassDeclaration43 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> enumDeclaration44 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "classDeclaration");
		DebugLocation(384, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// Java.g:385:5: ( normalClassDeclaration | enumDeclaration )
			int alt15=2;
			try { DebugEnterDecision(15, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA15_2 = input.LA(2);

				if ((EvaluatePredicate(synpred27_Java_fragment)))
				{
					alt15 = 1;
				}
				else if ((true))
				{
					alt15 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CLASS:
				{
				alt15 = 1;
				}
				break;
			case ENUM:
				{
				alt15 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:385:9: normalClassDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(385, 9);
				PushFollow(Follow._normalClassDeclaration_in_classDeclaration784);
				normalClassDeclaration43=normalClassDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, normalClassDeclaration43.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:386:9: enumDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(386, 9);
				PushFollow(Follow._enumDeclaration_in_classDeclaration794);
				enumDeclaration44=enumDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumDeclaration44.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classDeclaration", 9);
			LeaveRule("classDeclaration", 9);
			LeaveRule_classDeclaration();
			if (state.backtracking > 0) { Memoize(input, 9, classDeclaration_StartIndex); }

		}
		DebugLocation(387, 4);
		} finally { DebugExitRule(GrammarFileName, "classDeclaration"); }
		return retval;

	}
	// $ANTLR end "classDeclaration"

	partial void EnterRule_normalClassDeclaration();
	partial void LeaveRule_normalClassDeclaration();
	// $ANTLR start "normalClassDeclaration"
	// Java.g:389:1: normalClassDeclaration : modifiers 'class' IDENTIFIER ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody ;
	[GrammarRule("normalClassDeclaration")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> normalClassDeclaration()
	{
		EnterRule_normalClassDeclaration();
		EnterRule("normalClassDeclaration", 10);
		TraceIn("normalClassDeclaration", 10);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int normalClassDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal46 = default(CommonToken);
		CommonToken IDENTIFIER47 = default(CommonToken);
		CommonToken string_literal49 = default(CommonToken);
		CommonToken string_literal51 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> modifiers45 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> typeParameters48 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type50 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> typeList52 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> classBody53 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal46_tree = default(CommonTree);
		CommonTree IDENTIFIER47_tree = default(CommonTree);
		CommonTree string_literal49_tree = default(CommonTree);
		CommonTree string_literal51_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "normalClassDeclaration");
		DebugLocation(389, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// Java.g:390:5: ( modifiers 'class' IDENTIFIER ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody )
			DebugEnterAlt(1);
			// Java.g:390:9: modifiers 'class' IDENTIFIER ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(390, 9);
			PushFollow(Follow._modifiers_in_normalClassDeclaration814);
			modifiers45=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers45.Tree);
			DebugLocation(390, 20);
			string_literal46=(CommonToken)Match(input,CLASS,Follow._CLASS_in_normalClassDeclaration817); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal46_tree = (CommonTree)adaptor.Create(string_literal46);
			adaptor.AddChild(root_0, string_literal46_tree);
			}
			DebugLocation(390, 28);
			IDENTIFIER47=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_normalClassDeclaration819); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER47_tree = (CommonTree)adaptor.Create(IDENTIFIER47);
			adaptor.AddChild(root_0, IDENTIFIER47_tree);
			}
			DebugLocation(391, 9);
			// Java.g:391:9: ( typeParameters )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_1 = input.LA(1);

			if ((LA16_1==LT))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:391:10: typeParameters
				{
				DebugLocation(391, 10);
				PushFollow(Follow._typeParameters_in_normalClassDeclaration830);
				typeParameters48=typeParameters();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeParameters48.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(393, 9);
			// Java.g:393:9: ( 'extends' type )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==EXTENDS))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:393:10: 'extends' type
				{
				DebugLocation(393, 10);
				string_literal49=(CommonToken)Match(input,EXTENDS,Follow._EXTENDS_in_normalClassDeclaration852); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal49_tree = (CommonTree)adaptor.Create(string_literal49);
				adaptor.AddChild(root_0, string_literal49_tree);
				}
				DebugLocation(393, 20);
				PushFollow(Follow._type_in_normalClassDeclaration854);
				type50=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type50.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(395, 9);
			// Java.g:395:9: ( 'implements' typeList )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_1 = input.LA(1);

			if ((LA18_1==IMPLEMENTS))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:395:10: 'implements' typeList
				{
				DebugLocation(395, 10);
				string_literal51=(CommonToken)Match(input,IMPLEMENTS,Follow._IMPLEMENTS_in_normalClassDeclaration876); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal51_tree = (CommonTree)adaptor.Create(string_literal51);
				adaptor.AddChild(root_0, string_literal51_tree);
				}
				DebugLocation(395, 23);
				PushFollow(Follow._typeList_in_normalClassDeclaration878);
				typeList52=typeList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeList52.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(397, 9);
			PushFollow(Follow._classBody_in_normalClassDeclaration911);
			classBody53=classBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, classBody53.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("normalClassDeclaration", 10);
			LeaveRule("normalClassDeclaration", 10);
			LeaveRule_normalClassDeclaration();
			if (state.backtracking > 0) { Memoize(input, 10, normalClassDeclaration_StartIndex); }

		}
		DebugLocation(398, 4);
		} finally { DebugExitRule(GrammarFileName, "normalClassDeclaration"); }
		return retval;

	}
	// $ANTLR end "normalClassDeclaration"

	partial void EnterRule_typeParameters();
	partial void LeaveRule_typeParameters();
	// $ANTLR start "typeParameters"
	// Java.g:401:1: typeParameters : '<' typeParameter ( ',' typeParameter )* '>' ;
	[GrammarRule("typeParameters")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> typeParameters()
	{
		EnterRule_typeParameters();
		EnterRule("typeParameters", 11);
		TraceIn("typeParameters", 11);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int typeParameters_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal54 = default(CommonToken);
		CommonToken char_literal56 = default(CommonToken);
		CommonToken char_literal58 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> typeParameter55 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> typeParameter57 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal54_tree = default(CommonTree);
		CommonTree char_literal56_tree = default(CommonTree);
		CommonTree char_literal58_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeParameters");
		DebugLocation(401, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// Java.g:402:5: ( '<' typeParameter ( ',' typeParameter )* '>' )
			DebugEnterAlt(1);
			// Java.g:402:9: '<' typeParameter ( ',' typeParameter )* '>'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(402, 9);
			char_literal54=(CommonToken)Match(input,LT,Follow._LT_in_typeParameters932); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal54_tree = (CommonTree)adaptor.Create(char_literal54);
			adaptor.AddChild(root_0, char_literal54_tree);
			}
			DebugLocation(403, 13);
			PushFollow(Follow._typeParameter_in_typeParameters946);
			typeParameter55=typeParameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, typeParameter55.Tree);
			DebugLocation(404, 13);
			// Java.g:404:13: ( ',' typeParameter )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==COMMA))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:404:14: ',' typeParameter
					{
					DebugLocation(404, 14);
					char_literal56=(CommonToken)Match(input,COMMA,Follow._COMMA_in_typeParameters961); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal56_tree = (CommonTree)adaptor.Create(char_literal56);
					adaptor.AddChild(root_0, char_literal56_tree);
					}
					DebugLocation(404, 18);
					PushFollow(Follow._typeParameter_in_typeParameters963);
					typeParameter57=typeParameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeParameter57.Tree);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }

			DebugLocation(406, 9);
			char_literal58=(CommonToken)Match(input,GT,Follow._GT_in_typeParameters988); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal58_tree = (CommonTree)adaptor.Create(char_literal58);
			adaptor.AddChild(root_0, char_literal58_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeParameters", 11);
			LeaveRule("typeParameters", 11);
			LeaveRule_typeParameters();
			if (state.backtracking > 0) { Memoize(input, 11, typeParameters_StartIndex); }

		}
		DebugLocation(407, 4);
		} finally { DebugExitRule(GrammarFileName, "typeParameters"); }
		return retval;

	}
	// $ANTLR end "typeParameters"

	partial void EnterRule_typeParameter();
	partial void LeaveRule_typeParameter();
	// $ANTLR start "typeParameter"
	// Java.g:409:1: typeParameter : IDENTIFIER ( 'extends' typeBound )? ;
	[GrammarRule("typeParameter")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> typeParameter()
	{
		EnterRule_typeParameter();
		EnterRule("typeParameter", 12);
		TraceIn("typeParameter", 12);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int typeParameter_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENTIFIER59 = default(CommonToken);
		CommonToken string_literal60 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> typeBound61 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree IDENTIFIER59_tree = default(CommonTree);
		CommonTree string_literal60_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeParameter");
		DebugLocation(409, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// Java.g:410:5: ( IDENTIFIER ( 'extends' typeBound )? )
			DebugEnterAlt(1);
			// Java.g:410:9: IDENTIFIER ( 'extends' typeBound )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(410, 9);
			IDENTIFIER59=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_typeParameter1008); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER59_tree = (CommonTree)adaptor.Create(IDENTIFIER59);
			adaptor.AddChild(root_0, IDENTIFIER59_tree);
			}
			DebugLocation(411, 9);
			// Java.g:411:9: ( 'extends' typeBound )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_1 = input.LA(1);

			if ((LA20_1==EXTENDS))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:411:10: 'extends' typeBound
				{
				DebugLocation(411, 10);
				string_literal60=(CommonToken)Match(input,EXTENDS,Follow._EXTENDS_in_typeParameter1019); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal60_tree = (CommonTree)adaptor.Create(string_literal60);
				adaptor.AddChild(root_0, string_literal60_tree);
				}
				DebugLocation(411, 20);
				PushFollow(Follow._typeBound_in_typeParameter1021);
				typeBound61=typeBound();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeBound61.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeParameter", 12);
			LeaveRule("typeParameter", 12);
			LeaveRule_typeParameter();
			if (state.backtracking > 0) { Memoize(input, 12, typeParameter_StartIndex); }

		}
		DebugLocation(413, 4);
		} finally { DebugExitRule(GrammarFileName, "typeParameter"); }
		return retval;

	}
	// $ANTLR end "typeParameter"

	partial void EnterRule_typeBound();
	partial void LeaveRule_typeBound();
	// $ANTLR start "typeBound"
	// Java.g:416:1: typeBound : type ( '&' type )* ;
	[GrammarRule("typeBound")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> typeBound()
	{
		EnterRule_typeBound();
		EnterRule("typeBound", 13);
		TraceIn("typeBound", 13);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int typeBound_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal63 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> type62 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type64 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal63_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeBound");
		DebugLocation(416, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// Java.g:417:5: ( type ( '&' type )* )
			DebugEnterAlt(1);
			// Java.g:417:9: type ( '&' type )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(417, 9);
			PushFollow(Follow._type_in_typeBound1053);
			type62=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type62.Tree);
			DebugLocation(418, 9);
			// Java.g:418:9: ( '&' type )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_1 = input.LA(1);

				if ((LA21_1==AMP))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:418:10: '&' type
					{
					DebugLocation(418, 10);
					char_literal63=(CommonToken)Match(input,AMP,Follow._AMP_in_typeBound1064); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal63_tree = (CommonTree)adaptor.Create(char_literal63);
					adaptor.AddChild(root_0, char_literal63_tree);
					}
					DebugLocation(418, 14);
					PushFollow(Follow._type_in_typeBound1066);
					type64=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type64.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeBound", 13);
			LeaveRule("typeBound", 13);
			LeaveRule_typeBound();
			if (state.backtracking > 0) { Memoize(input, 13, typeBound_StartIndex); }

		}
		DebugLocation(420, 4);
		} finally { DebugExitRule(GrammarFileName, "typeBound"); }
		return retval;

	}
	// $ANTLR end "typeBound"

	partial void EnterRule_enumDeclaration();
	partial void LeaveRule_enumDeclaration();
	// $ANTLR start "enumDeclaration"
	// Java.g:423:1: enumDeclaration : modifiers ( 'enum' ) IDENTIFIER ( 'implements' typeList )? enumBody ;
	[GrammarRule("enumDeclaration")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> enumDeclaration()
	{
		EnterRule_enumDeclaration();
		EnterRule("enumDeclaration", 14);
		TraceIn("enumDeclaration", 14);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int enumDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal66 = default(CommonToken);
		CommonToken IDENTIFIER67 = default(CommonToken);
		CommonToken string_literal68 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> modifiers65 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> typeList69 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> enumBody70 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal66_tree = default(CommonTree);
		CommonTree IDENTIFIER67_tree = default(CommonTree);
		CommonTree string_literal68_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "enumDeclaration");
		DebugLocation(423, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// Java.g:424:5: ( modifiers ( 'enum' ) IDENTIFIER ( 'implements' typeList )? enumBody )
			DebugEnterAlt(1);
			// Java.g:424:9: modifiers ( 'enum' ) IDENTIFIER ( 'implements' typeList )? enumBody
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(424, 9);
			PushFollow(Follow._modifiers_in_enumDeclaration1098);
			modifiers65=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers65.Tree);
			DebugLocation(425, 9);
			// Java.g:425:9: ( 'enum' )
			DebugEnterAlt(1);
			// Java.g:425:10: 'enum'
			{
			DebugLocation(425, 10);
			string_literal66=(CommonToken)Match(input,ENUM,Follow._ENUM_in_enumDeclaration1110); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal66_tree = (CommonTree)adaptor.Create(string_literal66);
			adaptor.AddChild(root_0, string_literal66_tree);
			}

			}

			DebugLocation(427, 9);
			IDENTIFIER67=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enumDeclaration1131); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER67_tree = (CommonTree)adaptor.Create(IDENTIFIER67);
			adaptor.AddChild(root_0, IDENTIFIER67_tree);
			}
			DebugLocation(428, 9);
			// Java.g:428:9: ( 'implements' typeList )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_1 = input.LA(1);

			if ((LA22_1==IMPLEMENTS))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:428:10: 'implements' typeList
				{
				DebugLocation(428, 10);
				string_literal68=(CommonToken)Match(input,IMPLEMENTS,Follow._IMPLEMENTS_in_enumDeclaration1142); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal68_tree = (CommonTree)adaptor.Create(string_literal68);
				adaptor.AddChild(root_0, string_literal68_tree);
				}
				DebugLocation(428, 23);
				PushFollow(Follow._typeList_in_enumDeclaration1144);
				typeList69=typeList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeList69.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(430, 9);
			PushFollow(Follow._enumBody_in_enumDeclaration1165);
			enumBody70=enumBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enumBody70.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumDeclaration", 14);
			LeaveRule("enumDeclaration", 14);
			LeaveRule_enumDeclaration();
			if (state.backtracking > 0) { Memoize(input, 14, enumDeclaration_StartIndex); }

		}
		DebugLocation(431, 4);
		} finally { DebugExitRule(GrammarFileName, "enumDeclaration"); }
		return retval;

	}
	// $ANTLR end "enumDeclaration"

	partial void EnterRule_enumBody();
	partial void LeaveRule_enumBody();
	// $ANTLR start "enumBody"
	// Java.g:434:1: enumBody : '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}' ;
	[GrammarRule("enumBody")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> enumBody()
	{
		EnterRule_enumBody();
		EnterRule("enumBody", 15);
		TraceIn("enumBody", 15);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int enumBody_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal71 = default(CommonToken);
		CommonToken char_literal73 = default(CommonToken);
		CommonToken char_literal75 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> enumConstants72 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> enumBodyDeclarations74 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal71_tree = default(CommonTree);
		CommonTree char_literal73_tree = default(CommonTree);
		CommonTree char_literal75_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "enumBody");
		DebugLocation(434, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// Java.g:435:5: ( '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}' )
			DebugEnterAlt(1);
			// Java.g:435:9: '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(435, 9);
			char_literal71=(CommonToken)Match(input,LBRACE,Follow._LBRACE_in_enumBody1190); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal71_tree = (CommonTree)adaptor.Create(char_literal71);
			adaptor.AddChild(root_0, char_literal71_tree);
			}
			DebugLocation(436, 9);
			// Java.g:436:9: ( enumConstants )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==IDENTIFIER||LA23_1==MONKEYS_AT))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:436:10: enumConstants
				{
				DebugLocation(436, 10);
				PushFollow(Follow._enumConstants_in_enumBody1201);
				enumConstants72=enumConstants();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumConstants72.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(438, 9);
			// Java.g:438:9: ( ',' )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==COMMA))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:438:9: ','
				{
				DebugLocation(438, 9);
				char_literal73=(CommonToken)Match(input,COMMA,Follow._COMMA_in_enumBody1223); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal73_tree = (CommonTree)adaptor.Create(char_literal73);
				adaptor.AddChild(root_0, char_literal73_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(439, 9);
			// Java.g:439:9: ( enumBodyDeclarations )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_1 = input.LA(1);

			if ((LA25_1==SEMI))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:439:10: enumBodyDeclarations
				{
				DebugLocation(439, 10);
				PushFollow(Follow._enumBodyDeclarations_in_enumBody1236);
				enumBodyDeclarations74=enumBodyDeclarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumBodyDeclarations74.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(441, 9);
			char_literal75=(CommonToken)Match(input,RBRACE,Follow._RBRACE_in_enumBody1258); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal75_tree = (CommonTree)adaptor.Create(char_literal75);
			adaptor.AddChild(root_0, char_literal75_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumBody", 15);
			LeaveRule("enumBody", 15);
			LeaveRule_enumBody();
			if (state.backtracking > 0) { Memoize(input, 15, enumBody_StartIndex); }

		}
		DebugLocation(442, 4);
		} finally { DebugExitRule(GrammarFileName, "enumBody"); }
		return retval;

	}
	// $ANTLR end "enumBody"

	partial void EnterRule_enumConstants();
	partial void LeaveRule_enumConstants();
	// $ANTLR start "enumConstants"
	// Java.g:444:1: enumConstants : enumConstant ( ',' enumConstant )* ;
	[GrammarRule("enumConstants")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> enumConstants()
	{
		EnterRule_enumConstants();
		EnterRule("enumConstants", 16);
		TraceIn("enumConstants", 16);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int enumConstants_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal77 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> enumConstant76 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> enumConstant78 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal77_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "enumConstants");
		DebugLocation(444, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// Java.g:445:5: ( enumConstant ( ',' enumConstant )* )
			DebugEnterAlt(1);
			// Java.g:445:9: enumConstant ( ',' enumConstant )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(445, 9);
			PushFollow(Follow._enumConstant_in_enumConstants1278);
			enumConstant76=enumConstant();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enumConstant76.Tree);
			DebugLocation(446, 9);
			// Java.g:446:9: ( ',' enumConstant )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_1 = input.LA(1);

				if ((LA26_1==COMMA))
				{
					int LA26_2 = input.LA(2);

					if ((LA26_2==IDENTIFIER||LA26_2==MONKEYS_AT))
					{
						alt26 = 1;
					}


				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:446:10: ',' enumConstant
					{
					DebugLocation(446, 10);
					char_literal77=(CommonToken)Match(input,COMMA,Follow._COMMA_in_enumConstants1289); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal77_tree = (CommonTree)adaptor.Create(char_literal77);
					adaptor.AddChild(root_0, char_literal77_tree);
					}
					DebugLocation(446, 14);
					PushFollow(Follow._enumConstant_in_enumConstants1291);
					enumConstant78=enumConstant();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, enumConstant78.Tree);

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumConstants", 16);
			LeaveRule("enumConstants", 16);
			LeaveRule_enumConstants();
			if (state.backtracking > 0) { Memoize(input, 16, enumConstants_StartIndex); }

		}
		DebugLocation(448, 4);
		} finally { DebugExitRule(GrammarFileName, "enumConstants"); }
		return retval;

	}
	// $ANTLR end "enumConstants"

	partial void EnterRule_enumConstant();
	partial void LeaveRule_enumConstant();
	// $ANTLR start "enumConstant"
	// Java.g:454:1: enumConstant : ( annotations )? IDENTIFIER ( arguments )? ( classBody )? ;
	[GrammarRule("enumConstant")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> enumConstant()
	{
		EnterRule_enumConstant();
		EnterRule("enumConstant", 17);
		TraceIn("enumConstant", 17);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int enumConstant_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENTIFIER80 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> annotations79 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> arguments81 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> classBody82 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree IDENTIFIER80_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "enumConstant");
		DebugLocation(454, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// Java.g:455:5: ( ( annotations )? IDENTIFIER ( arguments )? ( classBody )? )
			DebugEnterAlt(1);
			// Java.g:455:9: ( annotations )? IDENTIFIER ( arguments )? ( classBody )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(455, 9);
			// Java.g:455:9: ( annotations )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_1 = input.LA(1);

			if ((LA27_1==MONKEYS_AT))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:455:10: annotations
				{
				DebugLocation(455, 10);
				PushFollow(Follow._annotations_in_enumConstant1325);
				annotations79=annotations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotations79.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(457, 9);
			IDENTIFIER80=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enumConstant1346); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER80_tree = (CommonTree)adaptor.Create(IDENTIFIER80);
			adaptor.AddChild(root_0, IDENTIFIER80_tree);
			}
			DebugLocation(458, 9);
			// Java.g:458:9: ( arguments )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_1 = input.LA(1);

			if ((LA28_1==LPAREN))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:458:10: arguments
				{
				DebugLocation(458, 10);
				PushFollow(Follow._arguments_in_enumConstant1357);
				arguments81=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments81.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(460, 9);
			// Java.g:460:9: ( classBody )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_1 = input.LA(1);

			if ((LA29_1==LBRACE))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:460:10: classBody
				{
				DebugLocation(460, 10);
				PushFollow(Follow._classBody_in_enumConstant1379);
				classBody82=classBody();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classBody82.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(29); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumConstant", 17);
			LeaveRule("enumConstant", 17);
			LeaveRule_enumConstant();
			if (state.backtracking > 0) { Memoize(input, 17, enumConstant_StartIndex); }

		}
		DebugLocation(464, 4);
		} finally { DebugExitRule(GrammarFileName, "enumConstant"); }
		return retval;

	}
	// $ANTLR end "enumConstant"

	partial void EnterRule_enumBodyDeclarations();
	partial void LeaveRule_enumBodyDeclarations();
	// $ANTLR start "enumBodyDeclarations"
	// Java.g:466:1: enumBodyDeclarations : ';' ( classBodyDeclaration )* ;
	[GrammarRule("enumBodyDeclarations")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> enumBodyDeclarations()
	{
		EnterRule_enumBodyDeclarations();
		EnterRule("enumBodyDeclarations", 18);
		TraceIn("enumBodyDeclarations", 18);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int enumBodyDeclarations_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal83 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> classBodyDeclaration84 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal83_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "enumBodyDeclarations");
		DebugLocation(466, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// Java.g:467:5: ( ';' ( classBodyDeclaration )* )
			DebugEnterAlt(1);
			// Java.g:467:9: ';' ( classBodyDeclaration )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(467, 9);
			char_literal83=(CommonToken)Match(input,SEMI,Follow._SEMI_in_enumBodyDeclarations1420); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal83_tree = (CommonTree)adaptor.Create(char_literal83);
			adaptor.AddChild(root_0, char_literal83_tree);
			}
			DebugLocation(468, 9);
			// Java.g:468:9: ( classBodyDeclaration )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_1 = input.LA(1);

				if ((LA30_1==ABSTRACT||LA30_1==BOOLEAN||LA30_1==BYTE||LA30_1==CHAR||LA30_1==CLASS||LA30_1==DOUBLE||LA30_1==ENUM||LA30_1==FINAL||LA30_1==FLOAT||LA30_1==IDENTIFIER||(LA30_1>=INT && LA30_1<=INTERFACE)||LA30_1==LBRACE||LA30_1==LONG||LA30_1==LT||(LA30_1>=MONKEYS_AT && LA30_1<=NATIVE)||(LA30_1>=PRIVATE && LA30_1<=PUBLIC)||(LA30_1>=SEMI && LA30_1<=SHORT)||(LA30_1>=STATIC && LA30_1<=STRICTFP)||LA30_1==SYNCHRONIZED||LA30_1==TRANSIENT||(LA30_1>=VOID && LA30_1<=VOLATILE)))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:468:10: classBodyDeclaration
					{
					DebugLocation(468, 10);
					PushFollow(Follow._classBodyDeclaration_in_enumBodyDeclarations1432);
					classBodyDeclaration84=classBodyDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, classBodyDeclaration84.Tree);

					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumBodyDeclarations", 18);
			LeaveRule("enumBodyDeclarations", 18);
			LeaveRule_enumBodyDeclarations();
			if (state.backtracking > 0) { Memoize(input, 18, enumBodyDeclarations_StartIndex); }

		}
		DebugLocation(470, 4);
		} finally { DebugExitRule(GrammarFileName, "enumBodyDeclarations"); }
		return retval;

	}
	// $ANTLR end "enumBodyDeclarations"

	partial void EnterRule_interfaceDeclaration();
	partial void LeaveRule_interfaceDeclaration();
	// $ANTLR start "interfaceDeclaration"
	// Java.g:472:1: interfaceDeclaration : ( normalInterfaceDeclaration | annotationTypeDeclaration );
	[GrammarRule("interfaceDeclaration")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> interfaceDeclaration()
	{
		EnterRule_interfaceDeclaration();
		EnterRule("interfaceDeclaration", 19);
		TraceIn("interfaceDeclaration", 19);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int interfaceDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> normalInterfaceDeclaration85 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> annotationTypeDeclaration86 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "interfaceDeclaration");
		DebugLocation(472, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// Java.g:473:5: ( normalInterfaceDeclaration | annotationTypeDeclaration )
			int alt31=2;
			try { DebugEnterDecision(31, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA31_2 = input.LA(2);

				if ((EvaluatePredicate(synpred43_Java_fragment)))
				{
					alt31 = 1;
				}
				else if ((true))
				{
					alt31 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INTERFACE:
				{
				alt31 = 1;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:473:9: normalInterfaceDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(473, 9);
				PushFollow(Follow._normalInterfaceDeclaration_in_interfaceDeclaration1463);
				normalInterfaceDeclaration85=normalInterfaceDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, normalInterfaceDeclaration85.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:474:9: annotationTypeDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(474, 9);
				PushFollow(Follow._annotationTypeDeclaration_in_interfaceDeclaration1473);
				annotationTypeDeclaration86=annotationTypeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationTypeDeclaration86.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceDeclaration", 19);
			LeaveRule("interfaceDeclaration", 19);
			LeaveRule_interfaceDeclaration();
			if (state.backtracking > 0) { Memoize(input, 19, interfaceDeclaration_StartIndex); }

		}
		DebugLocation(475, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceDeclaration"); }
		return retval;

	}
	// $ANTLR end "interfaceDeclaration"

	partial void EnterRule_normalInterfaceDeclaration();
	partial void LeaveRule_normalInterfaceDeclaration();
	// $ANTLR start "normalInterfaceDeclaration"
	// Java.g:477:1: normalInterfaceDeclaration : modifiers 'interface' IDENTIFIER ( typeParameters )? ( 'extends' typeList )? interfaceBody ;
	[GrammarRule("normalInterfaceDeclaration")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> normalInterfaceDeclaration()
	{
		EnterRule_normalInterfaceDeclaration();
		EnterRule("normalInterfaceDeclaration", 20);
		TraceIn("normalInterfaceDeclaration", 20);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int normalInterfaceDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal88 = default(CommonToken);
		CommonToken IDENTIFIER89 = default(CommonToken);
		CommonToken string_literal91 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> modifiers87 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> typeParameters90 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> typeList92 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> interfaceBody93 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal88_tree = default(CommonTree);
		CommonTree IDENTIFIER89_tree = default(CommonTree);
		CommonTree string_literal91_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "normalInterfaceDeclaration");
		DebugLocation(477, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// Java.g:478:5: ( modifiers 'interface' IDENTIFIER ( typeParameters )? ( 'extends' typeList )? interfaceBody )
			DebugEnterAlt(1);
			// Java.g:478:9: modifiers 'interface' IDENTIFIER ( typeParameters )? ( 'extends' typeList )? interfaceBody
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(478, 9);
			PushFollow(Follow._modifiers_in_normalInterfaceDeclaration1497);
			modifiers87=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers87.Tree);
			DebugLocation(478, 19);
			string_literal88=(CommonToken)Match(input,INTERFACE,Follow._INTERFACE_in_normalInterfaceDeclaration1499); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal88_tree = (CommonTree)adaptor.Create(string_literal88);
			adaptor.AddChild(root_0, string_literal88_tree);
			}
			DebugLocation(478, 31);
			IDENTIFIER89=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_normalInterfaceDeclaration1501); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER89_tree = (CommonTree)adaptor.Create(IDENTIFIER89);
			adaptor.AddChild(root_0, IDENTIFIER89_tree);
			}
			DebugLocation(479, 9);
			// Java.g:479:9: ( typeParameters )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_1 = input.LA(1);

			if ((LA32_1==LT))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:479:10: typeParameters
				{
				DebugLocation(479, 10);
				PushFollow(Follow._typeParameters_in_normalInterfaceDeclaration1512);
				typeParameters90=typeParameters();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeParameters90.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(481, 9);
			// Java.g:481:9: ( 'extends' typeList )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_1 = input.LA(1);

			if ((LA33_1==EXTENDS))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:481:10: 'extends' typeList
				{
				DebugLocation(481, 10);
				string_literal91=(CommonToken)Match(input,EXTENDS,Follow._EXTENDS_in_normalInterfaceDeclaration1534); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal91_tree = (CommonTree)adaptor.Create(string_literal91);
				adaptor.AddChild(root_0, string_literal91_tree);
				}
				DebugLocation(481, 20);
				PushFollow(Follow._typeList_in_normalInterfaceDeclaration1536);
				typeList92=typeList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeList92.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(483, 9);
			PushFollow(Follow._interfaceBody_in_normalInterfaceDeclaration1557);
			interfaceBody93=interfaceBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceBody93.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("normalInterfaceDeclaration", 20);
			LeaveRule("normalInterfaceDeclaration", 20);
			LeaveRule_normalInterfaceDeclaration();
			if (state.backtracking > 0) { Memoize(input, 20, normalInterfaceDeclaration_StartIndex); }

		}
		DebugLocation(484, 4);
		} finally { DebugExitRule(GrammarFileName, "normalInterfaceDeclaration"); }
		return retval;

	}
	// $ANTLR end "normalInterfaceDeclaration"

	partial void EnterRule_typeList();
	partial void LeaveRule_typeList();
	// $ANTLR start "typeList"
	// Java.g:486:1: typeList : type ( ',' type )* ;
	[GrammarRule("typeList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> typeList()
	{
		EnterRule_typeList();
		EnterRule("typeList", 21);
		TraceIn("typeList", 21);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int typeList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal95 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> type94 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type96 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal95_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeList");
		DebugLocation(486, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// Java.g:487:5: ( type ( ',' type )* )
			DebugEnterAlt(1);
			// Java.g:487:9: type ( ',' type )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(487, 9);
			PushFollow(Follow._type_in_typeList1577);
			type94=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type94.Tree);
			DebugLocation(488, 9);
			// Java.g:488:9: ( ',' type )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_1 = input.LA(1);

				if ((LA34_1==COMMA))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:488:10: ',' type
					{
					DebugLocation(488, 10);
					char_literal95=(CommonToken)Match(input,COMMA,Follow._COMMA_in_typeList1588); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal95_tree = (CommonTree)adaptor.Create(char_literal95);
					adaptor.AddChild(root_0, char_literal95_tree);
					}
					DebugLocation(488, 14);
					PushFollow(Follow._type_in_typeList1590);
					type96=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type96.Tree);

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeList", 21);
			LeaveRule("typeList", 21);
			LeaveRule_typeList();
			if (state.backtracking > 0) { Memoize(input, 21, typeList_StartIndex); }

		}
		DebugLocation(490, 4);
		} finally { DebugExitRule(GrammarFileName, "typeList"); }
		return retval;

	}
	// $ANTLR end "typeList"

	partial void EnterRule_classBody();
	partial void LeaveRule_classBody();
	// $ANTLR start "classBody"
	// Java.g:492:1: classBody : '{' ( classBodyDeclaration )* '}' ;
	[GrammarRule("classBody")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> classBody()
	{
		EnterRule_classBody();
		EnterRule("classBody", 22);
		TraceIn("classBody", 22);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int classBody_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal97 = default(CommonToken);
		CommonToken char_literal99 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> classBodyDeclaration98 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal97_tree = default(CommonTree);
		CommonTree char_literal99_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "classBody");
		DebugLocation(492, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// Java.g:493:5: ( '{' ( classBodyDeclaration )* '}' )
			DebugEnterAlt(1);
			// Java.g:493:9: '{' ( classBodyDeclaration )* '}'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(493, 9);
			char_literal97=(CommonToken)Match(input,LBRACE,Follow._LBRACE_in_classBody1621); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal97_tree = (CommonTree)adaptor.Create(char_literal97);
			adaptor.AddChild(root_0, char_literal97_tree);
			}
			DebugLocation(494, 9);
			// Java.g:494:9: ( classBodyDeclaration )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				int LA35_1 = input.LA(1);

				if ((LA35_1==ABSTRACT||LA35_1==BOOLEAN||LA35_1==BYTE||LA35_1==CHAR||LA35_1==CLASS||LA35_1==DOUBLE||LA35_1==ENUM||LA35_1==FINAL||LA35_1==FLOAT||LA35_1==IDENTIFIER||(LA35_1>=INT && LA35_1<=INTERFACE)||LA35_1==LBRACE||LA35_1==LONG||LA35_1==LT||(LA35_1>=MONKEYS_AT && LA35_1<=NATIVE)||(LA35_1>=PRIVATE && LA35_1<=PUBLIC)||(LA35_1>=SEMI && LA35_1<=SHORT)||(LA35_1>=STATIC && LA35_1<=STRICTFP)||LA35_1==SYNCHRONIZED||LA35_1==TRANSIENT||(LA35_1>=VOID && LA35_1<=VOLATILE)))
				{
					alt35 = 1;
				}


				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:494:10: classBodyDeclaration
					{
					DebugLocation(494, 10);
					PushFollow(Follow._classBodyDeclaration_in_classBody1633);
					classBodyDeclaration98=classBodyDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, classBodyDeclaration98.Tree);

					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }

			DebugLocation(496, 9);
			char_literal99=(CommonToken)Match(input,RBRACE,Follow._RBRACE_in_classBody1655); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal99_tree = (CommonTree)adaptor.Create(char_literal99);
			adaptor.AddChild(root_0, char_literal99_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classBody", 22);
			LeaveRule("classBody", 22);
			LeaveRule_classBody();
			if (state.backtracking > 0) { Memoize(input, 22, classBody_StartIndex); }

		}
		DebugLocation(497, 4);
		} finally { DebugExitRule(GrammarFileName, "classBody"); }
		return retval;

	}
	// $ANTLR end "classBody"

	partial void EnterRule_interfaceBody();
	partial void LeaveRule_interfaceBody();
	// $ANTLR start "interfaceBody"
	// Java.g:499:1: interfaceBody : '{' ( interfaceBodyDeclaration )* '}' ;
	[GrammarRule("interfaceBody")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> interfaceBody()
	{
		EnterRule_interfaceBody();
		EnterRule("interfaceBody", 23);
		TraceIn("interfaceBody", 23);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int interfaceBody_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal100 = default(CommonToken);
		CommonToken char_literal102 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> interfaceBodyDeclaration101 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal100_tree = default(CommonTree);
		CommonTree char_literal102_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "interfaceBody");
		DebugLocation(499, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// Java.g:500:5: ( '{' ( interfaceBodyDeclaration )* '}' )
			DebugEnterAlt(1);
			// Java.g:500:9: '{' ( interfaceBodyDeclaration )* '}'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(500, 9);
			char_literal100=(CommonToken)Match(input,LBRACE,Follow._LBRACE_in_interfaceBody1675); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal100_tree = (CommonTree)adaptor.Create(char_literal100);
			adaptor.AddChild(root_0, char_literal100_tree);
			}
			DebugLocation(501, 9);
			// Java.g:501:9: ( interfaceBodyDeclaration )*
			try { DebugEnterSubRule(36);
			while (true)
			{
				int alt36=2;
				try { DebugEnterDecision(36, false);
				int LA36_1 = input.LA(1);

				if ((LA36_1==ABSTRACT||LA36_1==BOOLEAN||LA36_1==BYTE||LA36_1==CHAR||LA36_1==CLASS||LA36_1==DOUBLE||LA36_1==ENUM||LA36_1==FINAL||LA36_1==FLOAT||LA36_1==IDENTIFIER||(LA36_1>=INT && LA36_1<=INTERFACE)||LA36_1==LONG||LA36_1==LT||(LA36_1>=MONKEYS_AT && LA36_1<=NATIVE)||(LA36_1>=PRIVATE && LA36_1<=PUBLIC)||(LA36_1>=SEMI && LA36_1<=SHORT)||(LA36_1>=STATIC && LA36_1<=STRICTFP)||LA36_1==SYNCHRONIZED||LA36_1==TRANSIENT||(LA36_1>=VOID && LA36_1<=VOLATILE)))
				{
					alt36 = 1;
				}


				} finally { DebugExitDecision(36); }
				switch ( alt36 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:501:10: interfaceBodyDeclaration
					{
					DebugLocation(501, 10);
					PushFollow(Follow._interfaceBodyDeclaration_in_interfaceBody1687);
					interfaceBodyDeclaration101=interfaceBodyDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceBodyDeclaration101.Tree);

					}
					break;

				default:
					goto loop36;
				}
			}

			loop36:
				;

			} finally { DebugExitSubRule(36); }

			DebugLocation(503, 9);
			char_literal102=(CommonToken)Match(input,RBRACE,Follow._RBRACE_in_interfaceBody1709); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal102_tree = (CommonTree)adaptor.Create(char_literal102);
			adaptor.AddChild(root_0, char_literal102_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceBody", 23);
			LeaveRule("interfaceBody", 23);
			LeaveRule_interfaceBody();
			if (state.backtracking > 0) { Memoize(input, 23, interfaceBody_StartIndex); }

		}
		DebugLocation(504, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceBody"); }
		return retval;

	}
	// $ANTLR end "interfaceBody"

	partial void EnterRule_classBodyDeclaration();
	partial void LeaveRule_classBodyDeclaration();
	// $ANTLR start "classBodyDeclaration"
	// Java.g:506:1: classBodyDeclaration : ( ';' | ( 'static' )? block | memberDecl );
	[GrammarRule("classBodyDeclaration")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> classBodyDeclaration()
	{
		EnterRule_classBodyDeclaration();
		EnterRule("classBodyDeclaration", 24);
		TraceIn("classBodyDeclaration", 24);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int classBodyDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal103 = default(CommonToken);
		CommonToken string_literal104 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> block105 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> memberDecl106 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal103_tree = default(CommonTree);
		CommonTree string_literal104_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "classBodyDeclaration");
		DebugLocation(506, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// Java.g:507:5: ( ';' | ( 'static' )? block | memberDecl )
			int alt38=3;
			try { DebugEnterDecision(38, false);
			switch (input.LA(1))
			{
			case SEMI:
				{
				alt38 = 1;
				}
				break;
			case STATIC:
				{
				int LA38_2 = input.LA(2);

				if ((LA38_2==LBRACE))
				{
					alt38 = 2;
				}
				else if ((LA38_2==ABSTRACT||LA38_2==BOOLEAN||LA38_2==BYTE||LA38_2==CHAR||LA38_2==CLASS||LA38_2==DOUBLE||LA38_2==ENUM||LA38_2==FINAL||LA38_2==FLOAT||LA38_2==IDENTIFIER||(LA38_2>=INT && LA38_2<=INTERFACE)||LA38_2==LONG||LA38_2==LT||(LA38_2>=MONKEYS_AT && LA38_2<=NATIVE)||(LA38_2>=PRIVATE && LA38_2<=PUBLIC)||LA38_2==SHORT||(LA38_2>=STATIC && LA38_2<=STRICTFP)||LA38_2==SYNCHRONIZED||LA38_2==TRANSIENT||(LA38_2>=VOID && LA38_2<=VOLATILE)))
				{
					alt38 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LBRACE:
				{
				alt38 = 2;
				}
				break;
			case ABSTRACT:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CLASS:
			case DOUBLE:
			case ENUM:
			case FINAL:
			case FLOAT:
			case IDENTIFIER:
			case INT:
			case INTERFACE:
			case LONG:
			case LT:
			case MONKEYS_AT:
			case NATIVE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case SHORT:
			case STRICTFP:
			case SYNCHRONIZED:
			case TRANSIENT:
			case VOID:
			case VOLATILE:
				{
				alt38 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:507:9: ';'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(507, 9);
				char_literal103=(CommonToken)Match(input,SEMI,Follow._SEMI_in_classBodyDeclaration1729); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal103_tree = (CommonTree)adaptor.Create(char_literal103);
				adaptor.AddChild(root_0, char_literal103_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:508:9: ( 'static' )? block
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(508, 9);
				// Java.g:508:9: ( 'static' )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				int LA37_1 = input.LA(1);

				if ((LA37_1==STATIC))
				{
					alt37 = 1;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:508:10: 'static'
					{
					DebugLocation(508, 10);
					string_literal104=(CommonToken)Match(input,STATIC,Follow._STATIC_in_classBodyDeclaration1740); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal104_tree = (CommonTree)adaptor.Create(string_literal104);
					adaptor.AddChild(root_0, string_literal104_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(37); }

				DebugLocation(510, 9);
				PushFollow(Follow._block_in_classBodyDeclaration1762);
				block105=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block105.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:511:9: memberDecl
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(511, 9);
				PushFollow(Follow._memberDecl_in_classBodyDeclaration1772);
				memberDecl106=memberDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, memberDecl106.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classBodyDeclaration", 24);
			LeaveRule("classBodyDeclaration", 24);
			LeaveRule_classBodyDeclaration();
			if (state.backtracking > 0) { Memoize(input, 24, classBodyDeclaration_StartIndex); }

		}
		DebugLocation(512, 4);
		} finally { DebugExitRule(GrammarFileName, "classBodyDeclaration"); }
		return retval;

	}
	// $ANTLR end "classBodyDeclaration"

	partial void EnterRule_memberDecl();
	partial void LeaveRule_memberDecl();
	// $ANTLR start "memberDecl"
	// Java.g:514:1: memberDecl : ( fieldDeclaration | methodDeclaration | classDeclaration | interfaceDeclaration );
	[GrammarRule("memberDecl")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> memberDecl()
	{
		EnterRule_memberDecl();
		EnterRule("memberDecl", 25);
		TraceIn("memberDecl", 25);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int memberDecl_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> fieldDeclaration107 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> methodDeclaration108 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> classDeclaration109 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> interfaceDeclaration110 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "memberDecl");
		DebugLocation(514, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// Java.g:515:5: ( fieldDeclaration | methodDeclaration | classDeclaration | interfaceDeclaration )
			int alt39=4;
			try { DebugEnterDecision(39, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else if ((EvaluatePredicate(synpred54_Java_fragment)))
				{
					alt39 = 3;
				}
				else if ((true))
				{
					alt39 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA39_2 = input.LA(2);

				if ((EvaluatePredicate(synpred52_Java_fragment)))
				{
					alt39 = 1;
				}
				else if ((EvaluatePredicate(synpred53_Java_fragment)))
				{
					alt39 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LT:
			case VOID:
				{
				alt39 = 2;
				}
				break;
			case CLASS:
			case ENUM:
				{
				alt39 = 3;
				}
				break;
			case INTERFACE:
				{
				alt39 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 39, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:515:10: fieldDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(515, 10);
				PushFollow(Follow._fieldDeclaration_in_memberDecl1793);
				fieldDeclaration107=fieldDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, fieldDeclaration107.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:516:10: methodDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(516, 10);
				PushFollow(Follow._methodDeclaration_in_memberDecl1804);
				methodDeclaration108=methodDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, methodDeclaration108.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:517:10: classDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(517, 10);
				PushFollow(Follow._classDeclaration_in_memberDecl1815);
				classDeclaration109=classDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classDeclaration109.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:518:10: interfaceDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(518, 10);
				PushFollow(Follow._interfaceDeclaration_in_memberDecl1826);
				interfaceDeclaration110=interfaceDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceDeclaration110.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("memberDecl", 25);
			LeaveRule("memberDecl", 25);
			LeaveRule_memberDecl();
			if (state.backtracking > 0) { Memoize(input, 25, memberDecl_StartIndex); }

		}
		DebugLocation(519, 4);
		} finally { DebugExitRule(GrammarFileName, "memberDecl"); }
		return retval;

	}
	// $ANTLR end "memberDecl"

	partial void EnterRule_methodDeclaration();
	partial void LeaveRule_methodDeclaration();
	// $ANTLR start "methodDeclaration"
	// Java.g:522:1: methodDeclaration : ( modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}' | modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' ) );
	[GrammarRule("methodDeclaration")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> methodDeclaration()
	{
		EnterRule_methodDeclaration();
		EnterRule("methodDeclaration", 26);
		TraceIn("methodDeclaration", 26);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int methodDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENTIFIER113 = default(CommonToken);
		CommonToken string_literal115 = default(CommonToken);
		CommonToken char_literal117 = default(CommonToken);
		CommonToken char_literal120 = default(CommonToken);
		CommonToken string_literal124 = default(CommonToken);
		CommonToken IDENTIFIER125 = default(CommonToken);
		CommonToken char_literal127 = default(CommonToken);
		CommonToken char_literal128 = default(CommonToken);
		CommonToken string_literal129 = default(CommonToken);
		CommonToken char_literal132 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> modifiers111 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> typeParameters112 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> formalParameters114 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> qualifiedNameList116 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> explicitConstructorInvocation118 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> blockStatement119 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> modifiers121 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> typeParameters122 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type123 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> formalParameters126 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> qualifiedNameList130 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> block131 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree IDENTIFIER113_tree = default(CommonTree);
		CommonTree string_literal115_tree = default(CommonTree);
		CommonTree char_literal117_tree = default(CommonTree);
		CommonTree char_literal120_tree = default(CommonTree);
		CommonTree string_literal124_tree = default(CommonTree);
		CommonTree IDENTIFIER125_tree = default(CommonTree);
		CommonTree char_literal127_tree = default(CommonTree);
		CommonTree char_literal128_tree = default(CommonTree);
		CommonTree string_literal129_tree = default(CommonTree);
		CommonTree char_literal132_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "methodDeclaration");
		DebugLocation(522, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// Java.g:523:5: ( modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}' | modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' ) )
			int alt49=2;
			try { DebugEnterDecision(49, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LT:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA49_2 = input.LA(2);

				if ((EvaluatePredicate(synpred59_Java_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case VOID:
				{
				alt49 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:525:10: modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(525, 10);
				PushFollow(Follow._modifiers_in_methodDeclaration1864);
				modifiers111=modifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers111.Tree);
				DebugLocation(526, 9);
				// Java.g:526:9: ( typeParameters )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, false);
				int LA40_1 = input.LA(1);

				if ((LA40_1==LT))
				{
					alt40 = 1;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:526:10: typeParameters
					{
					DebugLocation(526, 10);
					PushFollow(Follow._typeParameters_in_methodDeclaration1875);
					typeParameters112=typeParameters();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeParameters112.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(40); }

				DebugLocation(528, 9);
				IDENTIFIER113=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_methodDeclaration1896); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER113_tree = (CommonTree)adaptor.Create(IDENTIFIER113);
				adaptor.AddChild(root_0, IDENTIFIER113_tree);
				}
				DebugLocation(529, 9);
				PushFollow(Follow._formalParameters_in_methodDeclaration1906);
				formalParameters114=formalParameters();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, formalParameters114.Tree);
				DebugLocation(530, 9);
				// Java.g:530:9: ( 'throws' qualifiedNameList )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, false);
				int LA41_1 = input.LA(1);

				if ((LA41_1==THROWS))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:530:10: 'throws' qualifiedNameList
					{
					DebugLocation(530, 10);
					string_literal115=(CommonToken)Match(input,THROWS,Follow._THROWS_in_methodDeclaration1917); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal115_tree = (CommonTree)adaptor.Create(string_literal115);
					adaptor.AddChild(root_0, string_literal115_tree);
					}
					DebugLocation(530, 19);
					PushFollow(Follow._qualifiedNameList_in_methodDeclaration1919);
					qualifiedNameList116=qualifiedNameList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedNameList116.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(41); }

				DebugLocation(532, 9);
				char_literal117=(CommonToken)Match(input,LBRACE,Follow._LBRACE_in_methodDeclaration1940); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal117_tree = (CommonTree)adaptor.Create(char_literal117);
				adaptor.AddChild(root_0, char_literal117_tree);
				}
				DebugLocation(533, 9);
				// Java.g:533:9: ( explicitConstructorInvocation )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				switch (input.LA(1))
				{
				case LT:
					{
					alt42 = 1;
					}
					break;
				case THIS:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case LPAREN:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case SUPER:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case IDENTIFIER:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case CHARLITERAL:
				case DOUBLELITERAL:
				case FALSE:
				case FLOATLITERAL:
				case INTLITERAL:
				case LONGLITERAL:
				case NULL:
				case STRINGLITERAL:
				case TRUE:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case NEW:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case BOOLEAN:
				case BYTE:
				case CHAR:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SHORT:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				case VOID:
					{
					int LA42_2 = input.LA(2);

					if ((EvaluatePredicate(synpred57_Java_fragment)))
					{
						alt42 = 1;
					}
					}
					break;
				}

				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:533:10: explicitConstructorInvocation
					{
					DebugLocation(533, 10);
					PushFollow(Follow._explicitConstructorInvocation_in_methodDeclaration1952);
					explicitConstructorInvocation118=explicitConstructorInvocation();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, explicitConstructorInvocation118.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(42); }

				DebugLocation(535, 9);
				// Java.g:535:9: ( blockStatement )*
				try { DebugEnterSubRule(43);
				while (true)
				{
					int alt43=2;
					try { DebugEnterDecision(43, false);
					int LA43_1 = input.LA(1);

					if ((LA43_1==ABSTRACT||(LA43_1>=ASSERT && LA43_1<=BANG)||(LA43_1>=BOOLEAN && LA43_1<=BYTE)||(LA43_1>=CHAR && LA43_1<=CLASS)||LA43_1==CONTINUE||LA43_1==DO||(LA43_1>=DOUBLE && LA43_1<=DOUBLELITERAL)||LA43_1==ENUM||(LA43_1>=FALSE && LA43_1<=FINAL)||(LA43_1>=FLOAT && LA43_1<=FOR)||(LA43_1>=IDENTIFIER && LA43_1<=IF)||(LA43_1>=INT && LA43_1<=INTLITERAL)||LA43_1==LBRACE||(LA43_1>=LONG && LA43_1<=LT)||(LA43_1>=MONKEYS_AT && LA43_1<=NULL)||LA43_1==PLUS||(LA43_1>=PLUSPLUS && LA43_1<=PUBLIC)||LA43_1==RETURN||(LA43_1>=SEMI && LA43_1<=SHORT)||(LA43_1>=STATIC && LA43_1<=SUB)||(LA43_1>=SUBSUB && LA43_1<=SYNCHRONIZED)||(LA43_1>=THIS && LA43_1<=THROW)||(LA43_1>=TILDE && LA43_1<=WHILE)))
					{
						alt43 = 1;
					}


					} finally { DebugExitDecision(43); }
					switch ( alt43 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:535:10: blockStatement
						{
						DebugLocation(535, 10);
						PushFollow(Follow._blockStatement_in_methodDeclaration1974);
						blockStatement119=blockStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, blockStatement119.Tree);

						}
						break;

					default:
						goto loop43;
					}
				}

				loop43:
					;

				} finally { DebugExitSubRule(43); }

				DebugLocation(537, 9);
				char_literal120=(CommonToken)Match(input,RBRACE,Follow._RBRACE_in_methodDeclaration1995); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal120_tree = (CommonTree)adaptor.Create(char_literal120);
				adaptor.AddChild(root_0, char_literal120_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:538:9: modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ( block | ';' )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(538, 9);
				PushFollow(Follow._modifiers_in_methodDeclaration2005);
				modifiers121=modifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers121.Tree);
				DebugLocation(539, 9);
				// Java.g:539:9: ( typeParameters )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				int LA44_1 = input.LA(1);

				if ((LA44_1==LT))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:539:10: typeParameters
					{
					DebugLocation(539, 10);
					PushFollow(Follow._typeParameters_in_methodDeclaration2016);
					typeParameters122=typeParameters();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeParameters122.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(44); }

				DebugLocation(541, 9);
				// Java.g:541:9: ( type | 'void' )
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, false);
				int LA45_1 = input.LA(1);

				if ((LA45_1==BOOLEAN||LA45_1==BYTE||LA45_1==CHAR||LA45_1==DOUBLE||LA45_1==FLOAT||LA45_1==IDENTIFIER||LA45_1==INT||LA45_1==LONG||LA45_1==SHORT))
				{
					alt45 = 1;
				}
				else if ((LA45_1==VOID))
				{
					alt45 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:541:10: type
					{
					DebugLocation(541, 10);
					PushFollow(Follow._type_in_methodDeclaration2038);
					type123=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type123.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:542:13: 'void'
					{
					DebugLocation(542, 13);
					string_literal124=(CommonToken)Match(input,VOID,Follow._VOID_in_methodDeclaration2052); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal124_tree = (CommonTree)adaptor.Create(string_literal124);
					adaptor.AddChild(root_0, string_literal124_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(45); }

				DebugLocation(544, 9);
				IDENTIFIER125=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_methodDeclaration2072); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER125_tree = (CommonTree)adaptor.Create(IDENTIFIER125);
				adaptor.AddChild(root_0, IDENTIFIER125_tree);
				}
				DebugLocation(545, 9);
				PushFollow(Follow._formalParameters_in_methodDeclaration2082);
				formalParameters126=formalParameters();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, formalParameters126.Tree);
				DebugLocation(546, 9);
				// Java.g:546:9: ( '[' ']' )*
				try { DebugEnterSubRule(46);
				while (true)
				{
					int alt46=2;
					try { DebugEnterDecision(46, false);
					int LA46_1 = input.LA(1);

					if ((LA46_1==LBRACKET))
					{
						alt46 = 1;
					}


					} finally { DebugExitDecision(46); }
					switch ( alt46 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:546:10: '[' ']'
						{
						DebugLocation(546, 10);
						char_literal127=(CommonToken)Match(input,LBRACKET,Follow._LBRACKET_in_methodDeclaration2093); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal127_tree = (CommonTree)adaptor.Create(char_literal127);
						adaptor.AddChild(root_0, char_literal127_tree);
						}
						DebugLocation(546, 14);
						char_literal128=(CommonToken)Match(input,RBRACKET,Follow._RBRACKET_in_methodDeclaration2095); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal128_tree = (CommonTree)adaptor.Create(char_literal128);
						adaptor.AddChild(root_0, char_literal128_tree);
						}

						}
						break;

					default:
						goto loop46;
					}
				}

				loop46:
					;

				} finally { DebugExitSubRule(46); }

				DebugLocation(548, 9);
				// Java.g:548:9: ( 'throws' qualifiedNameList )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				int LA47_1 = input.LA(1);

				if ((LA47_1==THROWS))
				{
					alt47 = 1;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:548:10: 'throws' qualifiedNameList
					{
					DebugLocation(548, 10);
					string_literal129=(CommonToken)Match(input,THROWS,Follow._THROWS_in_methodDeclaration2117); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal129_tree = (CommonTree)adaptor.Create(string_literal129);
					adaptor.AddChild(root_0, string_literal129_tree);
					}
					DebugLocation(548, 19);
					PushFollow(Follow._qualifiedNameList_in_methodDeclaration2119);
					qualifiedNameList130=qualifiedNameList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedNameList130.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(47); }

				DebugLocation(550, 9);
				// Java.g:550:9: ( block | ';' )
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_1 = input.LA(1);

				if ((LA48_1==LBRACE))
				{
					alt48 = 1;
				}
				else if ((LA48_1==SEMI))
				{
					alt48 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 48, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:551:13: block
					{
					DebugLocation(551, 13);
					PushFollow(Follow._block_in_methodDeclaration2174);
					block131=block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, block131.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:552:13: ';'
					{
					DebugLocation(552, 13);
					char_literal132=(CommonToken)Match(input,SEMI,Follow._SEMI_in_methodDeclaration2188); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal132_tree = (CommonTree)adaptor.Create(char_literal132);
					adaptor.AddChild(root_0, char_literal132_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(48); }


				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("methodDeclaration", 26);
			LeaveRule("methodDeclaration", 26);
			LeaveRule_methodDeclaration();
			if (state.backtracking > 0) { Memoize(input, 26, methodDeclaration_StartIndex); }

		}
		DebugLocation(554, 4);
		} finally { DebugExitRule(GrammarFileName, "methodDeclaration"); }
		return retval;

	}
	// $ANTLR end "methodDeclaration"

	partial void EnterRule_fieldDeclaration();
	partial void LeaveRule_fieldDeclaration();
	// $ANTLR start "fieldDeclaration"
	// Java.g:557:1: fieldDeclaration : modifiers type variableDeclarator ( ',' variableDeclarator )* ';' ;
	[GrammarRule("fieldDeclaration")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fieldDeclaration()
	{
		EnterRule_fieldDeclaration();
		EnterRule("fieldDeclaration", 27);
		TraceIn("fieldDeclaration", 27);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int fieldDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal136 = default(CommonToken);
		CommonToken char_literal138 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> modifiers133 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type134 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarator135 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarator137 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal136_tree = default(CommonTree);
		CommonTree char_literal138_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fieldDeclaration");
		DebugLocation(557, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// Java.g:558:5: ( modifiers type variableDeclarator ( ',' variableDeclarator )* ';' )
			DebugEnterAlt(1);
			// Java.g:558:9: modifiers type variableDeclarator ( ',' variableDeclarator )* ';'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(558, 9);
			PushFollow(Follow._modifiers_in_fieldDeclaration2220);
			modifiers133=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers133.Tree);
			DebugLocation(559, 9);
			PushFollow(Follow._type_in_fieldDeclaration2230);
			type134=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type134.Tree);
			DebugLocation(560, 9);
			PushFollow(Follow._variableDeclarator_in_fieldDeclaration2240);
			variableDeclarator135=variableDeclarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarator135.Tree);
			DebugLocation(561, 9);
			// Java.g:561:9: ( ',' variableDeclarator )*
			try { DebugEnterSubRule(50);
			while (true)
			{
				int alt50=2;
				try { DebugEnterDecision(50, false);
				int LA50_1 = input.LA(1);

				if ((LA50_1==COMMA))
				{
					alt50 = 1;
				}


				} finally { DebugExitDecision(50); }
				switch ( alt50 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:561:10: ',' variableDeclarator
					{
					DebugLocation(561, 10);
					char_literal136=(CommonToken)Match(input,COMMA,Follow._COMMA_in_fieldDeclaration2251); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal136_tree = (CommonTree)adaptor.Create(char_literal136);
					adaptor.AddChild(root_0, char_literal136_tree);
					}
					DebugLocation(561, 14);
					PushFollow(Follow._variableDeclarator_in_fieldDeclaration2253);
					variableDeclarator137=variableDeclarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarator137.Tree);

					}
					break;

				default:
					goto loop50;
				}
			}

			loop50:
				;

			} finally { DebugExitSubRule(50); }

			DebugLocation(563, 9);
			char_literal138=(CommonToken)Match(input,SEMI,Follow._SEMI_in_fieldDeclaration2274); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal138_tree = (CommonTree)adaptor.Create(char_literal138);
			adaptor.AddChild(root_0, char_literal138_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fieldDeclaration", 27);
			LeaveRule("fieldDeclaration", 27);
			LeaveRule_fieldDeclaration();
			if (state.backtracking > 0) { Memoize(input, 27, fieldDeclaration_StartIndex); }

		}
		DebugLocation(564, 4);
		} finally { DebugExitRule(GrammarFileName, "fieldDeclaration"); }
		return retval;

	}
	// $ANTLR end "fieldDeclaration"

	partial void EnterRule_variableDeclarator();
	partial void LeaveRule_variableDeclarator();
	// $ANTLR start "variableDeclarator"
	// Java.g:566:1: variableDeclarator : IDENTIFIER ( '[' ']' )* ( '=' variableInitializer )? ;
	[GrammarRule("variableDeclarator")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarator()
	{
		EnterRule_variableDeclarator();
		EnterRule("variableDeclarator", 28);
		TraceIn("variableDeclarator", 28);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int variableDeclarator_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENTIFIER139 = default(CommonToken);
		CommonToken char_literal140 = default(CommonToken);
		CommonToken char_literal141 = default(CommonToken);
		CommonToken char_literal142 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableInitializer143 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree IDENTIFIER139_tree = default(CommonTree);
		CommonTree char_literal140_tree = default(CommonTree);
		CommonTree char_literal141_tree = default(CommonTree);
		CommonTree char_literal142_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "variableDeclarator");
		DebugLocation(566, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// Java.g:567:5: ( IDENTIFIER ( '[' ']' )* ( '=' variableInitializer )? )
			DebugEnterAlt(1);
			// Java.g:567:9: IDENTIFIER ( '[' ']' )* ( '=' variableInitializer )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(567, 9);
			IDENTIFIER139=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_variableDeclarator2294); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER139_tree = (CommonTree)adaptor.Create(IDENTIFIER139);
			adaptor.AddChild(root_0, IDENTIFIER139_tree);
			}
			DebugLocation(568, 9);
			// Java.g:568:9: ( '[' ']' )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_1 = input.LA(1);

				if ((LA51_1==LBRACKET))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:568:10: '[' ']'
					{
					DebugLocation(568, 10);
					char_literal140=(CommonToken)Match(input,LBRACKET,Follow._LBRACKET_in_variableDeclarator2305); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal140_tree = (CommonTree)adaptor.Create(char_literal140);
					adaptor.AddChild(root_0, char_literal140_tree);
					}
					DebugLocation(568, 14);
					char_literal141=(CommonToken)Match(input,RBRACKET,Follow._RBRACKET_in_variableDeclarator2307); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal141_tree = (CommonTree)adaptor.Create(char_literal141);
					adaptor.AddChild(root_0, char_literal141_tree);
					}

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }

			DebugLocation(570, 9);
			// Java.g:570:9: ( '=' variableInitializer )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_1 = input.LA(1);

			if ((LA52_1==EQ))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:570:10: '=' variableInitializer
				{
				DebugLocation(570, 10);
				char_literal142=(CommonToken)Match(input,EQ,Follow._EQ_in_variableDeclarator2329); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal142_tree = (CommonTree)adaptor.Create(char_literal142);
				adaptor.AddChild(root_0, char_literal142_tree);
				}
				DebugLocation(570, 14);
				PushFollow(Follow._variableInitializer_in_variableDeclarator2331);
				variableInitializer143=variableInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableInitializer143.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(52); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableDeclarator", 28);
			LeaveRule("variableDeclarator", 28);
			LeaveRule_variableDeclarator();
			if (state.backtracking > 0) { Memoize(input, 28, variableDeclarator_StartIndex); }

		}
		DebugLocation(572, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarator"); }
		return retval;

	}
	// $ANTLR end "variableDeclarator"

	partial void EnterRule_interfaceBodyDeclaration();
	partial void LeaveRule_interfaceBodyDeclaration();
	// $ANTLR start "interfaceBodyDeclaration"
	// Java.g:577:1: interfaceBodyDeclaration : ( interfaceFieldDeclaration | interfaceMethodDeclaration | interfaceDeclaration | classDeclaration | ';' );
	[GrammarRule("interfaceBodyDeclaration")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> interfaceBodyDeclaration()
	{
		EnterRule_interfaceBodyDeclaration();
		EnterRule("interfaceBodyDeclaration", 29);
		TraceIn("interfaceBodyDeclaration", 29);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int interfaceBodyDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal148 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> interfaceFieldDeclaration144 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> interfaceMethodDeclaration145 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> interfaceDeclaration146 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> classDeclaration147 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal148_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "interfaceBodyDeclaration");
		DebugLocation(577, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// Java.g:578:5: ( interfaceFieldDeclaration | interfaceMethodDeclaration | interfaceDeclaration | classDeclaration | ';' )
			int alt53=5;
			try { DebugEnterDecision(53, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else if ((EvaluatePredicate(synpred70_Java_fragment)))
				{
					alt53 = 3;
				}
				else if ((EvaluatePredicate(synpred71_Java_fragment)))
				{
					alt53 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA53_2 = input.LA(2);

				if ((EvaluatePredicate(synpred68_Java_fragment)))
				{
					alt53 = 1;
				}
				else if ((EvaluatePredicate(synpred69_Java_fragment)))
				{
					alt53 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LT:
			case VOID:
				{
				alt53 = 2;
				}
				break;
			case INTERFACE:
				{
				alt53 = 3;
				}
				break;
			case CLASS:
			case ENUM:
				{
				alt53 = 4;
				}
				break;
			case SEMI:
				{
				alt53 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:579:9: interfaceFieldDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(579, 9);
				PushFollow(Follow._interfaceFieldDeclaration_in_interfaceBodyDeclaration2370);
				interfaceFieldDeclaration144=interfaceFieldDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceFieldDeclaration144.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:580:9: interfaceMethodDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(580, 9);
				PushFollow(Follow._interfaceMethodDeclaration_in_interfaceBodyDeclaration2380);
				interfaceMethodDeclaration145=interfaceMethodDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceMethodDeclaration145.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:581:9: interfaceDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(581, 9);
				PushFollow(Follow._interfaceDeclaration_in_interfaceBodyDeclaration2390);
				interfaceDeclaration146=interfaceDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceDeclaration146.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:582:9: classDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(582, 9);
				PushFollow(Follow._classDeclaration_in_interfaceBodyDeclaration2400);
				classDeclaration147=classDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classDeclaration147.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:583:9: ';'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(583, 9);
				char_literal148=(CommonToken)Match(input,SEMI,Follow._SEMI_in_interfaceBodyDeclaration2410); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal148_tree = (CommonTree)adaptor.Create(char_literal148);
				adaptor.AddChild(root_0, char_literal148_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceBodyDeclaration", 29);
			LeaveRule("interfaceBodyDeclaration", 29);
			LeaveRule_interfaceBodyDeclaration();
			if (state.backtracking > 0) { Memoize(input, 29, interfaceBodyDeclaration_StartIndex); }

		}
		DebugLocation(584, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceBodyDeclaration"); }
		return retval;

	}
	// $ANTLR end "interfaceBodyDeclaration"

	partial void EnterRule_interfaceMethodDeclaration();
	partial void LeaveRule_interfaceMethodDeclaration();
	// $ANTLR start "interfaceMethodDeclaration"
	// Java.g:586:1: interfaceMethodDeclaration : modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';' ;
	[GrammarRule("interfaceMethodDeclaration")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> interfaceMethodDeclaration()
	{
		EnterRule_interfaceMethodDeclaration();
		EnterRule("interfaceMethodDeclaration", 30);
		TraceIn("interfaceMethodDeclaration", 30);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int interfaceMethodDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal152 = default(CommonToken);
		CommonToken IDENTIFIER153 = default(CommonToken);
		CommonToken char_literal155 = default(CommonToken);
		CommonToken char_literal156 = default(CommonToken);
		CommonToken string_literal157 = default(CommonToken);
		CommonToken char_literal159 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> modifiers149 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> typeParameters150 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type151 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> formalParameters154 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> qualifiedNameList158 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal152_tree = default(CommonTree);
		CommonTree IDENTIFIER153_tree = default(CommonTree);
		CommonTree char_literal155_tree = default(CommonTree);
		CommonTree char_literal156_tree = default(CommonTree);
		CommonTree string_literal157_tree = default(CommonTree);
		CommonTree char_literal159_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "interfaceMethodDeclaration");
		DebugLocation(586, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// Java.g:587:5: ( modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';' )
			DebugEnterAlt(1);
			// Java.g:587:9: modifiers ( typeParameters )? ( type | 'void' ) IDENTIFIER formalParameters ( '[' ']' )* ( 'throws' qualifiedNameList )? ';'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(587, 9);
			PushFollow(Follow._modifiers_in_interfaceMethodDeclaration2430);
			modifiers149=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers149.Tree);
			DebugLocation(588, 9);
			// Java.g:588:9: ( typeParameters )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_1 = input.LA(1);

			if ((LA54_1==LT))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:588:10: typeParameters
				{
				DebugLocation(588, 10);
				PushFollow(Follow._typeParameters_in_interfaceMethodDeclaration2441);
				typeParameters150=typeParameters();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeParameters150.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(590, 9);
			// Java.g:590:9: ( type | 'void' )
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			int LA55_1 = input.LA(1);

			if ((LA55_1==BOOLEAN||LA55_1==BYTE||LA55_1==CHAR||LA55_1==DOUBLE||LA55_1==FLOAT||LA55_1==IDENTIFIER||LA55_1==INT||LA55_1==LONG||LA55_1==SHORT))
			{
				alt55 = 1;
			}
			else if ((LA55_1==VOID))
			{
				alt55 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 55, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:590:10: type
				{
				DebugLocation(590, 10);
				PushFollow(Follow._type_in_interfaceMethodDeclaration2463);
				type151=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type151.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:591:10: 'void'
				{
				DebugLocation(591, 10);
				string_literal152=(CommonToken)Match(input,VOID,Follow._VOID_in_interfaceMethodDeclaration2474); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal152_tree = (CommonTree)adaptor.Create(string_literal152);
				adaptor.AddChild(root_0, string_literal152_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(593, 9);
			IDENTIFIER153=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_interfaceMethodDeclaration2494); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER153_tree = (CommonTree)adaptor.Create(IDENTIFIER153);
			adaptor.AddChild(root_0, IDENTIFIER153_tree);
			}
			DebugLocation(594, 9);
			PushFollow(Follow._formalParameters_in_interfaceMethodDeclaration2504);
			formalParameters154=formalParameters();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, formalParameters154.Tree);
			DebugLocation(595, 9);
			// Java.g:595:9: ( '[' ']' )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_1 = input.LA(1);

				if ((LA56_1==LBRACKET))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:595:10: '[' ']'
					{
					DebugLocation(595, 10);
					char_literal155=(CommonToken)Match(input,LBRACKET,Follow._LBRACKET_in_interfaceMethodDeclaration2515); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal155_tree = (CommonTree)adaptor.Create(char_literal155);
					adaptor.AddChild(root_0, char_literal155_tree);
					}
					DebugLocation(595, 14);
					char_literal156=(CommonToken)Match(input,RBRACKET,Follow._RBRACKET_in_interfaceMethodDeclaration2517); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal156_tree = (CommonTree)adaptor.Create(char_literal156);
					adaptor.AddChild(root_0, char_literal156_tree);
					}

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }

			DebugLocation(597, 9);
			// Java.g:597:9: ( 'throws' qualifiedNameList )?
			int alt57=2;
			try { DebugEnterSubRule(57);
			try { DebugEnterDecision(57, false);
			int LA57_1 = input.LA(1);

			if ((LA57_1==THROWS))
			{
				alt57 = 1;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:597:10: 'throws' qualifiedNameList
				{
				DebugLocation(597, 10);
				string_literal157=(CommonToken)Match(input,THROWS,Follow._THROWS_in_interfaceMethodDeclaration2539); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal157_tree = (CommonTree)adaptor.Create(string_literal157);
				adaptor.AddChild(root_0, string_literal157_tree);
				}
				DebugLocation(597, 19);
				PushFollow(Follow._qualifiedNameList_in_interfaceMethodDeclaration2541);
				qualifiedNameList158=qualifiedNameList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedNameList158.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(57); }

			DebugLocation(598, 12);
			char_literal159=(CommonToken)Match(input,SEMI,Follow._SEMI_in_interfaceMethodDeclaration2554); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal159_tree = (CommonTree)adaptor.Create(char_literal159);
			adaptor.AddChild(root_0, char_literal159_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceMethodDeclaration", 30);
			LeaveRule("interfaceMethodDeclaration", 30);
			LeaveRule_interfaceMethodDeclaration();
			if (state.backtracking > 0) { Memoize(input, 30, interfaceMethodDeclaration_StartIndex); }

		}
		DebugLocation(599, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceMethodDeclaration"); }
		return retval;

	}
	// $ANTLR end "interfaceMethodDeclaration"

	partial void EnterRule_interfaceFieldDeclaration();
	partial void LeaveRule_interfaceFieldDeclaration();
	// $ANTLR start "interfaceFieldDeclaration"
	// Java.g:606:1: interfaceFieldDeclaration : modifiers type variableDeclarator ( ',' variableDeclarator )* ';' ;
	[GrammarRule("interfaceFieldDeclaration")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> interfaceFieldDeclaration()
	{
		EnterRule_interfaceFieldDeclaration();
		EnterRule("interfaceFieldDeclaration", 31);
		TraceIn("interfaceFieldDeclaration", 31);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int interfaceFieldDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal163 = default(CommonToken);
		CommonToken char_literal165 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> modifiers160 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type161 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarator162 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarator164 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal163_tree = default(CommonTree);
		CommonTree char_literal165_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "interfaceFieldDeclaration");
		DebugLocation(606, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// Java.g:607:5: ( modifiers type variableDeclarator ( ',' variableDeclarator )* ';' )
			DebugEnterAlt(1);
			// Java.g:607:9: modifiers type variableDeclarator ( ',' variableDeclarator )* ';'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(607, 9);
			PushFollow(Follow._modifiers_in_interfaceFieldDeclaration2576);
			modifiers160=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers160.Tree);
			DebugLocation(607, 19);
			PushFollow(Follow._type_in_interfaceFieldDeclaration2578);
			type161=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type161.Tree);
			DebugLocation(607, 24);
			PushFollow(Follow._variableDeclarator_in_interfaceFieldDeclaration2580);
			variableDeclarator162=variableDeclarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarator162.Tree);
			DebugLocation(608, 9);
			// Java.g:608:9: ( ',' variableDeclarator )*
			try { DebugEnterSubRule(58);
			while (true)
			{
				int alt58=2;
				try { DebugEnterDecision(58, false);
				int LA58_1 = input.LA(1);

				if ((LA58_1==COMMA))
				{
					alt58 = 1;
				}


				} finally { DebugExitDecision(58); }
				switch ( alt58 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:608:10: ',' variableDeclarator
					{
					DebugLocation(608, 10);
					char_literal163=(CommonToken)Match(input,COMMA,Follow._COMMA_in_interfaceFieldDeclaration2591); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal163_tree = (CommonTree)adaptor.Create(char_literal163);
					adaptor.AddChild(root_0, char_literal163_tree);
					}
					DebugLocation(608, 14);
					PushFollow(Follow._variableDeclarator_in_interfaceFieldDeclaration2593);
					variableDeclarator164=variableDeclarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarator164.Tree);

					}
					break;

				default:
					goto loop58;
				}
			}

			loop58:
				;

			} finally { DebugExitSubRule(58); }

			DebugLocation(610, 9);
			char_literal165=(CommonToken)Match(input,SEMI,Follow._SEMI_in_interfaceFieldDeclaration2614); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal165_tree = (CommonTree)adaptor.Create(char_literal165);
			adaptor.AddChild(root_0, char_literal165_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceFieldDeclaration", 31);
			LeaveRule("interfaceFieldDeclaration", 31);
			LeaveRule_interfaceFieldDeclaration();
			if (state.backtracking > 0) { Memoize(input, 31, interfaceFieldDeclaration_StartIndex); }

		}
		DebugLocation(611, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceFieldDeclaration"); }
		return retval;

	}
	// $ANTLR end "interfaceFieldDeclaration"

	partial void EnterRule_type();
	partial void LeaveRule_type();
	// $ANTLR start "type"
	// Java.g:614:1: type : ( classOrInterfaceType ( '[' ']' )* | primitiveType ( '[' ']' )* );
	[GrammarRule("type")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> type()
	{
		EnterRule_type();
		EnterRule("type", 32);
		TraceIn("type", 32);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int type_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal167 = default(CommonToken);
		CommonToken char_literal168 = default(CommonToken);
		CommonToken char_literal170 = default(CommonToken);
		CommonToken char_literal171 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> classOrInterfaceType166 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> primitiveType169 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal167_tree = default(CommonTree);
		CommonTree char_literal168_tree = default(CommonTree);
		CommonTree char_literal170_tree = default(CommonTree);
		CommonTree char_literal171_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(614, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// Java.g:615:5: ( classOrInterfaceType ( '[' ']' )* | primitiveType ( '[' ']' )* )
			int alt61=2;
			try { DebugEnterDecision(61, false);
			int LA61_1 = input.LA(1);

			if ((LA61_1==IDENTIFIER))
			{
				alt61 = 1;
			}
			else if ((LA61_1==BOOLEAN||LA61_1==BYTE||LA61_1==CHAR||LA61_1==DOUBLE||LA61_1==FLOAT||LA61_1==INT||LA61_1==LONG||LA61_1==SHORT))
			{
				alt61 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 61, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:615:9: classOrInterfaceType ( '[' ']' )*
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(615, 9);
				PushFollow(Follow._classOrInterfaceType_in_type2635);
				classOrInterfaceType166=classOrInterfaceType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classOrInterfaceType166.Tree);
				DebugLocation(616, 9);
				// Java.g:616:9: ( '[' ']' )*
				try { DebugEnterSubRule(59);
				while (true)
				{
					int alt59=2;
					try { DebugEnterDecision(59, false);
					int LA59_1 = input.LA(1);

					if ((LA59_1==LBRACKET))
					{
						alt59 = 1;
					}


					} finally { DebugExitDecision(59); }
					switch ( alt59 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:616:10: '[' ']'
						{
						DebugLocation(616, 10);
						char_literal167=(CommonToken)Match(input,LBRACKET,Follow._LBRACKET_in_type2646); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal167_tree = (CommonTree)adaptor.Create(char_literal167);
						adaptor.AddChild(root_0, char_literal167_tree);
						}
						DebugLocation(616, 14);
						char_literal168=(CommonToken)Match(input,RBRACKET,Follow._RBRACKET_in_type2648); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal168_tree = (CommonTree)adaptor.Create(char_literal168);
						adaptor.AddChild(root_0, char_literal168_tree);
						}

						}
						break;

					default:
						goto loop59;
					}
				}

				loop59:
					;

				} finally { DebugExitSubRule(59); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:618:9: primitiveType ( '[' ']' )*
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(618, 9);
				PushFollow(Follow._primitiveType_in_type2669);
				primitiveType169=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType169.Tree);
				DebugLocation(619, 9);
				// Java.g:619:9: ( '[' ']' )*
				try { DebugEnterSubRule(60);
				while (true)
				{
					int alt60=2;
					try { DebugEnterDecision(60, false);
					int LA60_1 = input.LA(1);

					if ((LA60_1==LBRACKET))
					{
						alt60 = 1;
					}


					} finally { DebugExitDecision(60); }
					switch ( alt60 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:619:10: '[' ']'
						{
						DebugLocation(619, 10);
						char_literal170=(CommonToken)Match(input,LBRACKET,Follow._LBRACKET_in_type2680); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal170_tree = (CommonTree)adaptor.Create(char_literal170);
						adaptor.AddChild(root_0, char_literal170_tree);
						}
						DebugLocation(619, 14);
						char_literal171=(CommonToken)Match(input,RBRACKET,Follow._RBRACKET_in_type2682); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal171_tree = (CommonTree)adaptor.Create(char_literal171);
						adaptor.AddChild(root_0, char_literal171_tree);
						}

						}
						break;

					default:
						goto loop60;
					}
				}

				loop60:
					;

				} finally { DebugExitSubRule(60); }


				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type", 32);
			LeaveRule("type", 32);
			LeaveRule_type();
			if (state.backtracking > 0) { Memoize(input, 32, type_StartIndex); }

		}
		DebugLocation(621, 4);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return retval;

	}
	// $ANTLR end "type"

	partial void EnterRule_classOrInterfaceType();
	partial void LeaveRule_classOrInterfaceType();
	// $ANTLR start "classOrInterfaceType"
	// Java.g:624:1: classOrInterfaceType : IDENTIFIER ( typeArguments )? ( '.' IDENTIFIER ( typeArguments )? )* ;
	[GrammarRule("classOrInterfaceType")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> classOrInterfaceType()
	{
		EnterRule_classOrInterfaceType();
		EnterRule("classOrInterfaceType", 33);
		TraceIn("classOrInterfaceType", 33);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int classOrInterfaceType_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENTIFIER172 = default(CommonToken);
		CommonToken char_literal174 = default(CommonToken);
		CommonToken IDENTIFIER175 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> typeArguments173 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> typeArguments176 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree IDENTIFIER172_tree = default(CommonTree);
		CommonTree char_literal174_tree = default(CommonTree);
		CommonTree IDENTIFIER175_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "classOrInterfaceType");
		DebugLocation(624, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// Java.g:625:5: ( IDENTIFIER ( typeArguments )? ( '.' IDENTIFIER ( typeArguments )? )* )
			DebugEnterAlt(1);
			// Java.g:625:9: IDENTIFIER ( typeArguments )? ( '.' IDENTIFIER ( typeArguments )? )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(625, 9);
			IDENTIFIER172=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_classOrInterfaceType2714); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER172_tree = (CommonTree)adaptor.Create(IDENTIFIER172);
			adaptor.AddChild(root_0, IDENTIFIER172_tree);
			}
			DebugLocation(626, 9);
			// Java.g:626:9: ( typeArguments )?
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			int LA62_1 = input.LA(1);

			if ((LA62_1==LT))
			{
				int LA62_2 = input.LA(2);

				if ((LA62_2==BOOLEAN||LA62_2==BYTE||LA62_2==CHAR||LA62_2==DOUBLE||LA62_2==FLOAT||LA62_2==IDENTIFIER||LA62_2==INT||LA62_2==LONG||LA62_2==QUES||LA62_2==SHORT))
				{
					alt62 = 1;
				}
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:626:10: typeArguments
				{
				DebugLocation(626, 10);
				PushFollow(Follow._typeArguments_in_classOrInterfaceType2725);
				typeArguments173=typeArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeArguments173.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(62); }

			DebugLocation(628, 9);
			// Java.g:628:9: ( '.' IDENTIFIER ( typeArguments )? )*
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, false);
				int LA64_1 = input.LA(1);

				if ((LA64_1==DOT))
				{
					alt64 = 1;
				}


				} finally { DebugExitDecision(64); }
				switch ( alt64 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:628:10: '.' IDENTIFIER ( typeArguments )?
					{
					DebugLocation(628, 10);
					char_literal174=(CommonToken)Match(input,DOT,Follow._DOT_in_classOrInterfaceType2747); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal174_tree = (CommonTree)adaptor.Create(char_literal174);
					adaptor.AddChild(root_0, char_literal174_tree);
					}
					DebugLocation(628, 14);
					IDENTIFIER175=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_classOrInterfaceType2749); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER175_tree = (CommonTree)adaptor.Create(IDENTIFIER175);
					adaptor.AddChild(root_0, IDENTIFIER175_tree);
					}
					DebugLocation(629, 13);
					// Java.g:629:13: ( typeArguments )?
					int alt63=2;
					try { DebugEnterSubRule(63);
					try { DebugEnterDecision(63, false);
					int LA63_1 = input.LA(1);

					if ((LA63_1==LT))
					{
						int LA63_2 = input.LA(2);

						if ((LA63_2==BOOLEAN||LA63_2==BYTE||LA63_2==CHAR||LA63_2==DOUBLE||LA63_2==FLOAT||LA63_2==IDENTIFIER||LA63_2==INT||LA63_2==LONG||LA63_2==QUES||LA63_2==SHORT))
						{
							alt63 = 1;
						}
					}
					} finally { DebugExitDecision(63); }
					switch (alt63)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:629:14: typeArguments
						{
						DebugLocation(629, 14);
						PushFollow(Follow._typeArguments_in_classOrInterfaceType2764);
						typeArguments176=typeArguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, typeArguments176.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(63); }


					}
					break;

				default:
					goto loop64;
				}
			}

			loop64:
				;

			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classOrInterfaceType", 33);
			LeaveRule("classOrInterfaceType", 33);
			LeaveRule_classOrInterfaceType();
			if (state.backtracking > 0) { Memoize(input, 33, classOrInterfaceType_StartIndex); }

		}
		DebugLocation(632, 4);
		} finally { DebugExitRule(GrammarFileName, "classOrInterfaceType"); }
		return retval;

	}
	// $ANTLR end "classOrInterfaceType"

	partial void EnterRule_primitiveType();
	partial void LeaveRule_primitiveType();
	// $ANTLR start "primitiveType"
	// Java.g:634:1: primitiveType : ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' );
	[GrammarRule("primitiveType")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> primitiveType()
	{
		EnterRule_primitiveType();
		EnterRule("primitiveType", 34);
		TraceIn("primitiveType", 34);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int primitiveType_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken set177 = default(CommonToken);

		CommonTree set177_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "primitiveType");
		DebugLocation(634, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// Java.g:635:5: ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
			DebugEnterAlt(1);
			// Java.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(635, 5);

			set177=(CommonToken)input.LT(1);
			if (input.LA(1)==BOOLEAN||input.LA(1)==BYTE||input.LA(1)==CHAR||input.LA(1)==DOUBLE||input.LA(1)==FLOAT||input.LA(1)==INT||input.LA(1)==LONG||input.LA(1)==SHORT)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set177));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primitiveType", 34);
			LeaveRule("primitiveType", 34);
			LeaveRule_primitiveType();
			if (state.backtracking > 0) { Memoize(input, 34, primitiveType_StartIndex); }

		}
		DebugLocation(643, 4);
		} finally { DebugExitRule(GrammarFileName, "primitiveType"); }
		return retval;

	}
	// $ANTLR end "primitiveType"

	partial void EnterRule_typeArguments();
	partial void LeaveRule_typeArguments();
	// $ANTLR start "typeArguments"
	// Java.g:645:1: typeArguments : '<' typeArgument ( ',' typeArgument )* '>' ;
	[GrammarRule("typeArguments")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> typeArguments()
	{
		EnterRule_typeArguments();
		EnterRule("typeArguments", 35);
		TraceIn("typeArguments", 35);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int typeArguments_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal178 = default(CommonToken);
		CommonToken char_literal180 = default(CommonToken);
		CommonToken char_literal182 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> typeArgument179 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> typeArgument181 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal178_tree = default(CommonTree);
		CommonTree char_literal180_tree = default(CommonTree);
		CommonTree char_literal182_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeArguments");
		DebugLocation(645, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// Java.g:646:5: ( '<' typeArgument ( ',' typeArgument )* '>' )
			DebugEnterAlt(1);
			// Java.g:646:9: '<' typeArgument ( ',' typeArgument )* '>'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(646, 9);
			char_literal178=(CommonToken)Match(input,LT,Follow._LT_in_typeArguments2901); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal178_tree = (CommonTree)adaptor.Create(char_literal178);
			adaptor.AddChild(root_0, char_literal178_tree);
			}
			DebugLocation(646, 13);
			PushFollow(Follow._typeArgument_in_typeArguments2903);
			typeArgument179=typeArgument();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, typeArgument179.Tree);
			DebugLocation(647, 9);
			// Java.g:647:9: ( ',' typeArgument )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, false);
				int LA65_1 = input.LA(1);

				if ((LA65_1==COMMA))
				{
					alt65 = 1;
				}


				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:647:10: ',' typeArgument
					{
					DebugLocation(647, 10);
					char_literal180=(CommonToken)Match(input,COMMA,Follow._COMMA_in_typeArguments2914); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal180_tree = (CommonTree)adaptor.Create(char_literal180);
					adaptor.AddChild(root_0, char_literal180_tree);
					}
					DebugLocation(647, 14);
					PushFollow(Follow._typeArgument_in_typeArguments2916);
					typeArgument181=typeArgument();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeArgument181.Tree);

					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }

			DebugLocation(649, 9);
			char_literal182=(CommonToken)Match(input,GT,Follow._GT_in_typeArguments2938); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal182_tree = (CommonTree)adaptor.Create(char_literal182);
			adaptor.AddChild(root_0, char_literal182_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeArguments", 35);
			LeaveRule("typeArguments", 35);
			LeaveRule_typeArguments();
			if (state.backtracking > 0) { Memoize(input, 35, typeArguments_StartIndex); }

		}
		DebugLocation(650, 4);
		} finally { DebugExitRule(GrammarFileName, "typeArguments"); }
		return retval;

	}
	// $ANTLR end "typeArguments"

	partial void EnterRule_typeArgument();
	partial void LeaveRule_typeArgument();
	// $ANTLR start "typeArgument"
	// Java.g:652:1: typeArgument : ( type | '?' ( ( 'extends' | 'super' ) type )? );
	[GrammarRule("typeArgument")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> typeArgument()
	{
		EnterRule_typeArgument();
		EnterRule("typeArgument", 36);
		TraceIn("typeArgument", 36);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int typeArgument_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal184 = default(CommonToken);
		CommonToken set185 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> type183 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type186 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal184_tree = default(CommonTree);
		CommonTree set185_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeArgument");
		DebugLocation(652, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// Java.g:653:5: ( type | '?' ( ( 'extends' | 'super' ) type )? )
			int alt67=2;
			try { DebugEnterDecision(67, false);
			int LA67_1 = input.LA(1);

			if ((LA67_1==BOOLEAN||LA67_1==BYTE||LA67_1==CHAR||LA67_1==DOUBLE||LA67_1==FLOAT||LA67_1==IDENTIFIER||LA67_1==INT||LA67_1==LONG||LA67_1==SHORT))
			{
				alt67 = 1;
			}
			else if ((LA67_1==QUES))
			{
				alt67 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:653:9: type
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(653, 9);
				PushFollow(Follow._type_in_typeArgument2958);
				type183=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type183.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:654:9: '?' ( ( 'extends' | 'super' ) type )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(654, 9);
				char_literal184=(CommonToken)Match(input,QUES,Follow._QUES_in_typeArgument2968); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal184_tree = (CommonTree)adaptor.Create(char_literal184);
				adaptor.AddChild(root_0, char_literal184_tree);
				}
				DebugLocation(655, 9);
				// Java.g:655:9: ( ( 'extends' | 'super' ) type )?
				int alt66=2;
				try { DebugEnterSubRule(66);
				try { DebugEnterDecision(66, false);
				int LA66_1 = input.LA(1);

				if ((LA66_1==EXTENDS||LA66_1==SUPER))
				{
					alt66 = 1;
				}
				} finally { DebugExitDecision(66); }
				switch (alt66)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:656:13: ( 'extends' | 'super' ) type
					{
					DebugLocation(656, 13);

					set185=(CommonToken)input.LT(1);
					if (input.LA(1)==EXTENDS||input.LA(1)==SUPER)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set185));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(659, 13);
					PushFollow(Follow._type_in_typeArgument3036);
					type186=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type186.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(66); }


				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeArgument", 36);
			LeaveRule("typeArgument", 36);
			LeaveRule_typeArgument();
			if (state.backtracking > 0) { Memoize(input, 36, typeArgument_StartIndex); }

		}
		DebugLocation(661, 4);
		} finally { DebugExitRule(GrammarFileName, "typeArgument"); }
		return retval;

	}
	// $ANTLR end "typeArgument"

	partial void EnterRule_qualifiedNameList();
	partial void LeaveRule_qualifiedNameList();
	// $ANTLR start "qualifiedNameList"
	// Java.g:663:1: qualifiedNameList : qualifiedName ( ',' qualifiedName )* ;
	[GrammarRule("qualifiedNameList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> qualifiedNameList()
	{
		EnterRule_qualifiedNameList();
		EnterRule("qualifiedNameList", 37);
		TraceIn("qualifiedNameList", 37);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int qualifiedNameList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal188 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> qualifiedName187 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> qualifiedName189 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal188_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "qualifiedNameList");
		DebugLocation(663, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// Java.g:664:5: ( qualifiedName ( ',' qualifiedName )* )
			DebugEnterAlt(1);
			// Java.g:664:9: qualifiedName ( ',' qualifiedName )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(664, 9);
			PushFollow(Follow._qualifiedName_in_qualifiedNameList3067);
			qualifiedName187=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName187.Tree);
			DebugLocation(665, 9);
			// Java.g:665:9: ( ',' qualifiedName )*
			try { DebugEnterSubRule(68);
			while (true)
			{
				int alt68=2;
				try { DebugEnterDecision(68, false);
				int LA68_1 = input.LA(1);

				if ((LA68_1==COMMA))
				{
					alt68 = 1;
				}


				} finally { DebugExitDecision(68); }
				switch ( alt68 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:665:10: ',' qualifiedName
					{
					DebugLocation(665, 10);
					char_literal188=(CommonToken)Match(input,COMMA,Follow._COMMA_in_qualifiedNameList3078); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal188_tree = (CommonTree)adaptor.Create(char_literal188);
					adaptor.AddChild(root_0, char_literal188_tree);
					}
					DebugLocation(665, 14);
					PushFollow(Follow._qualifiedName_in_qualifiedNameList3080);
					qualifiedName189=qualifiedName();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName189.Tree);

					}
					break;

				default:
					goto loop68;
				}
			}

			loop68:
				;

			} finally { DebugExitSubRule(68); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedNameList", 37);
			LeaveRule("qualifiedNameList", 37);
			LeaveRule_qualifiedNameList();
			if (state.backtracking > 0) { Memoize(input, 37, qualifiedNameList_StartIndex); }

		}
		DebugLocation(667, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedNameList"); }
		return retval;

	}
	// $ANTLR end "qualifiedNameList"

	partial void EnterRule_formalParameters();
	partial void LeaveRule_formalParameters();
	// $ANTLR start "formalParameters"
	// Java.g:669:1: formalParameters : '(' ( formalParameterDecls )? ')' ;
	[GrammarRule("formalParameters")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> formalParameters()
	{
		EnterRule_formalParameters();
		EnterRule("formalParameters", 38);
		TraceIn("formalParameters", 38);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int formalParameters_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal190 = default(CommonToken);
		CommonToken char_literal192 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> formalParameterDecls191 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal190_tree = default(CommonTree);
		CommonTree char_literal192_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "formalParameters");
		DebugLocation(669, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// Java.g:670:5: ( '(' ( formalParameterDecls )? ')' )
			DebugEnterAlt(1);
			// Java.g:670:9: '(' ( formalParameterDecls )? ')'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(670, 9);
			char_literal190=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_formalParameters3111); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal190_tree = (CommonTree)adaptor.Create(char_literal190);
			adaptor.AddChild(root_0, char_literal190_tree);
			}
			DebugLocation(671, 9);
			// Java.g:671:9: ( formalParameterDecls )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_1 = input.LA(1);

			if ((LA69_1==BOOLEAN||LA69_1==BYTE||LA69_1==CHAR||LA69_1==DOUBLE||LA69_1==FINAL||LA69_1==FLOAT||LA69_1==IDENTIFIER||LA69_1==INT||LA69_1==LONG||LA69_1==MONKEYS_AT||LA69_1==SHORT))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:671:10: formalParameterDecls
				{
				DebugLocation(671, 10);
				PushFollow(Follow._formalParameterDecls_in_formalParameters3122);
				formalParameterDecls191=formalParameterDecls();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, formalParameterDecls191.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(673, 9);
			char_literal192=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_formalParameters3144); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal192_tree = (CommonTree)adaptor.Create(char_literal192);
			adaptor.AddChild(root_0, char_literal192_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameters", 38);
			LeaveRule("formalParameters", 38);
			LeaveRule_formalParameters();
			if (state.backtracking > 0) { Memoize(input, 38, formalParameters_StartIndex); }

		}
		DebugLocation(674, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameters"); }
		return retval;

	}
	// $ANTLR end "formalParameters"

	partial void EnterRule_formalParameterDecls();
	partial void LeaveRule_formalParameterDecls();
	// $ANTLR start "formalParameterDecls"
	// Java.g:676:1: formalParameterDecls : ( ellipsisParameterDecl | normalParameterDecl ( ',' normalParameterDecl )* | ( normalParameterDecl ',' )+ ellipsisParameterDecl );
	[GrammarRule("formalParameterDecls")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> formalParameterDecls()
	{
		EnterRule_formalParameterDecls();
		EnterRule("formalParameterDecls", 39);
		TraceIn("formalParameterDecls", 39);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int formalParameterDecls_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal195 = default(CommonToken);
		CommonToken char_literal198 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> ellipsisParameterDecl193 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> normalParameterDecl194 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> normalParameterDecl196 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> normalParameterDecl197 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> ellipsisParameterDecl199 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal195_tree = default(CommonTree);
		CommonTree char_literal198_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "formalParameterDecls");
		DebugLocation(676, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// Java.g:677:5: ( ellipsisParameterDecl | normalParameterDecl ( ',' normalParameterDecl )* | ( normalParameterDecl ',' )+ ellipsisParameterDecl )
			int alt72=3;
			try { DebugEnterDecision(72, false);
			switch (input.LA(1))
			{
			case FINAL:
				{
				int LA72_2 = input.LA(2);

				if ((EvaluatePredicate(synpred96_Java_fragment)))
				{
					alt72 = 1;
				}
				else if ((EvaluatePredicate(synpred98_Java_fragment)))
				{
					alt72 = 2;
				}
				else if ((true))
				{
					alt72 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 72, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MONKEYS_AT:
				{
				int LA72_2 = input.LA(2);

				if ((EvaluatePredicate(synpred96_Java_fragment)))
				{
					alt72 = 1;
				}
				else if ((EvaluatePredicate(synpred98_Java_fragment)))
				{
					alt72 = 2;
				}
				else if ((true))
				{
					alt72 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 72, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA72_2 = input.LA(2);

				if ((EvaluatePredicate(synpred96_Java_fragment)))
				{
					alt72 = 1;
				}
				else if ((EvaluatePredicate(synpred98_Java_fragment)))
				{
					alt72 = 2;
				}
				else if ((true))
				{
					alt72 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 72, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA72_2 = input.LA(2);

				if ((EvaluatePredicate(synpred96_Java_fragment)))
				{
					alt72 = 1;
				}
				else if ((EvaluatePredicate(synpred98_Java_fragment)))
				{
					alt72 = 2;
				}
				else if ((true))
				{
					alt72 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 72, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 72, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:677:9: ellipsisParameterDecl
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(677, 9);
				PushFollow(Follow._ellipsisParameterDecl_in_formalParameterDecls3164);
				ellipsisParameterDecl193=ellipsisParameterDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ellipsisParameterDecl193.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:678:9: normalParameterDecl ( ',' normalParameterDecl )*
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(678, 9);
				PushFollow(Follow._normalParameterDecl_in_formalParameterDecls3174);
				normalParameterDecl194=normalParameterDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, normalParameterDecl194.Tree);
				DebugLocation(679, 9);
				// Java.g:679:9: ( ',' normalParameterDecl )*
				try { DebugEnterSubRule(70);
				while (true)
				{
					int alt70=2;
					try { DebugEnterDecision(70, false);
					int LA70_1 = input.LA(1);

					if ((LA70_1==COMMA))
					{
						alt70 = 1;
					}


					} finally { DebugExitDecision(70); }
					switch ( alt70 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:679:10: ',' normalParameterDecl
						{
						DebugLocation(679, 10);
						char_literal195=(CommonToken)Match(input,COMMA,Follow._COMMA_in_formalParameterDecls3185); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal195_tree = (CommonTree)adaptor.Create(char_literal195);
						adaptor.AddChild(root_0, char_literal195_tree);
						}
						DebugLocation(679, 14);
						PushFollow(Follow._normalParameterDecl_in_formalParameterDecls3187);
						normalParameterDecl196=normalParameterDecl();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, normalParameterDecl196.Tree);

						}
						break;

					default:
						goto loop70;
					}
				}

				loop70:
					;

				} finally { DebugExitSubRule(70); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:681:9: ( normalParameterDecl ',' )+ ellipsisParameterDecl
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(681, 9);
				// Java.g:681:9: ( normalParameterDecl ',' )+
				int cnt71=0;
				try { DebugEnterSubRule(71);
				while (true)
				{
					int alt71=2;
					try { DebugEnterDecision(71, false);
					switch (input.LA(1))
					{
					case FINAL:
						{
						int LA71_2 = input.LA(2);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt71 = 1;
						}


						}
						break;
					case MONKEYS_AT:
						{
						int LA71_2 = input.LA(2);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt71 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA71_2 = input.LA(2);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt71 = 1;
						}


						}
						break;
					case BOOLEAN:
					case BYTE:
					case CHAR:
					case DOUBLE:
					case FLOAT:
					case INT:
					case LONG:
					case SHORT:
						{
						int LA71_2 = input.LA(2);

						if ((EvaluatePredicate(synpred99_Java_fragment)))
						{
							alt71 = 1;
						}


						}
						break;
					}

					} finally { DebugExitDecision(71); }
					switch (alt71)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:681:10: normalParameterDecl ','
						{
						DebugLocation(681, 10);
						PushFollow(Follow._normalParameterDecl_in_formalParameterDecls3209);
						normalParameterDecl197=normalParameterDecl();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, normalParameterDecl197.Tree);
						DebugLocation(682, 9);
						char_literal198=(CommonToken)Match(input,COMMA,Follow._COMMA_in_formalParameterDecls3219); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal198_tree = (CommonTree)adaptor.Create(char_literal198);
						adaptor.AddChild(root_0, char_literal198_tree);
						}

						}
						break;

					default:
						if (cnt71 >= 1)
							goto loop71;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee71 = new EarlyExitException( 71, input );
						DebugRecognitionException(eee71);
						throw eee71;
					}
					cnt71++;
				}
				loop71:
					;

				} finally { DebugExitSubRule(71); }

				DebugLocation(684, 9);
				PushFollow(Follow._ellipsisParameterDecl_in_formalParameterDecls3241);
				ellipsisParameterDecl199=ellipsisParameterDecl();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ellipsisParameterDecl199.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameterDecls", 39);
			LeaveRule("formalParameterDecls", 39);
			LeaveRule_formalParameterDecls();
			if (state.backtracking > 0) { Memoize(input, 39, formalParameterDecls_StartIndex); }

		}
		DebugLocation(685, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameterDecls"); }
		return retval;

	}
	// $ANTLR end "formalParameterDecls"

	partial void EnterRule_normalParameterDecl();
	partial void LeaveRule_normalParameterDecl();
	// $ANTLR start "normalParameterDecl"
	// Java.g:687:1: normalParameterDecl : variableModifiers type IDENTIFIER ( '[' ']' )* ;
	[GrammarRule("normalParameterDecl")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> normalParameterDecl()
	{
		EnterRule_normalParameterDecl();
		EnterRule("normalParameterDecl", 40);
		TraceIn("normalParameterDecl", 40);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int normalParameterDecl_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENTIFIER202 = default(CommonToken);
		CommonToken char_literal203 = default(CommonToken);
		CommonToken char_literal204 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableModifiers200 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type201 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree IDENTIFIER202_tree = default(CommonTree);
		CommonTree char_literal203_tree = default(CommonTree);
		CommonTree char_literal204_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "normalParameterDecl");
		DebugLocation(687, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// Java.g:688:5: ( variableModifiers type IDENTIFIER ( '[' ']' )* )
			DebugEnterAlt(1);
			// Java.g:688:9: variableModifiers type IDENTIFIER ( '[' ']' )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(688, 9);
			PushFollow(Follow._variableModifiers_in_normalParameterDecl3261);
			variableModifiers200=variableModifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableModifiers200.Tree);
			DebugLocation(688, 27);
			PushFollow(Follow._type_in_normalParameterDecl3263);
			type201=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type201.Tree);
			DebugLocation(688, 32);
			IDENTIFIER202=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_normalParameterDecl3265); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER202_tree = (CommonTree)adaptor.Create(IDENTIFIER202);
			adaptor.AddChild(root_0, IDENTIFIER202_tree);
			}
			DebugLocation(689, 9);
			// Java.g:689:9: ( '[' ']' )*
			try { DebugEnterSubRule(73);
			while (true)
			{
				int alt73=2;
				try { DebugEnterDecision(73, false);
				int LA73_1 = input.LA(1);

				if ((LA73_1==LBRACKET))
				{
					alt73 = 1;
				}


				} finally { DebugExitDecision(73); }
				switch ( alt73 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:689:10: '[' ']'
					{
					DebugLocation(689, 10);
					char_literal203=(CommonToken)Match(input,LBRACKET,Follow._LBRACKET_in_normalParameterDecl3276); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal203_tree = (CommonTree)adaptor.Create(char_literal203);
					adaptor.AddChild(root_0, char_literal203_tree);
					}
					DebugLocation(689, 14);
					char_literal204=(CommonToken)Match(input,RBRACKET,Follow._RBRACKET_in_normalParameterDecl3278); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal204_tree = (CommonTree)adaptor.Create(char_literal204);
					adaptor.AddChild(root_0, char_literal204_tree);
					}

					}
					break;

				default:
					goto loop73;
				}
			}

			loop73:
				;

			} finally { DebugExitSubRule(73); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("normalParameterDecl", 40);
			LeaveRule("normalParameterDecl", 40);
			LeaveRule_normalParameterDecl();
			if (state.backtracking > 0) { Memoize(input, 40, normalParameterDecl_StartIndex); }

		}
		DebugLocation(691, 4);
		} finally { DebugExitRule(GrammarFileName, "normalParameterDecl"); }
		return retval;

	}
	// $ANTLR end "normalParameterDecl"

	partial void EnterRule_ellipsisParameterDecl();
	partial void LeaveRule_ellipsisParameterDecl();
	// $ANTLR start "ellipsisParameterDecl"
	// Java.g:693:1: ellipsisParameterDecl : variableModifiers type '...' IDENTIFIER ;
	[GrammarRule("ellipsisParameterDecl")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> ellipsisParameterDecl()
	{
		EnterRule_ellipsisParameterDecl();
		EnterRule("ellipsisParameterDecl", 41);
		TraceIn("ellipsisParameterDecl", 41);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int ellipsisParameterDecl_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal207 = default(CommonToken);
		CommonToken IDENTIFIER208 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableModifiers205 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type206 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal207_tree = default(CommonTree);
		CommonTree IDENTIFIER208_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ellipsisParameterDecl");
		DebugLocation(693, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// Java.g:694:5: ( variableModifiers type '...' IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:694:9: variableModifiers type '...' IDENTIFIER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(694, 9);
			PushFollow(Follow._variableModifiers_in_ellipsisParameterDecl3309);
			variableModifiers205=variableModifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableModifiers205.Tree);
			DebugLocation(695, 9);
			PushFollow(Follow._type_in_ellipsisParameterDecl3319);
			type206=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type206.Tree);
			DebugLocation(695, 15);
			string_literal207=(CommonToken)Match(input,ELLIPSIS,Follow._ELLIPSIS_in_ellipsisParameterDecl3322); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal207_tree = (CommonTree)adaptor.Create(string_literal207);
			adaptor.AddChild(root_0, string_literal207_tree);
			}
			DebugLocation(696, 9);
			IDENTIFIER208=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_ellipsisParameterDecl3332); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER208_tree = (CommonTree)adaptor.Create(IDENTIFIER208);
			adaptor.AddChild(root_0, IDENTIFIER208_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ellipsisParameterDecl", 41);
			LeaveRule("ellipsisParameterDecl", 41);
			LeaveRule_ellipsisParameterDecl();
			if (state.backtracking > 0) { Memoize(input, 41, ellipsisParameterDecl_StartIndex); }

		}
		DebugLocation(697, 4);
		} finally { DebugExitRule(GrammarFileName, "ellipsisParameterDecl"); }
		return retval;

	}
	// $ANTLR end "ellipsisParameterDecl"

	partial void EnterRule_explicitConstructorInvocation();
	partial void LeaveRule_explicitConstructorInvocation();
	// $ANTLR start "explicitConstructorInvocation"
	// Java.g:700:1: explicitConstructorInvocation : ( ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';' | primary '.' ( nonWildcardTypeArguments )? 'super' arguments ';' );
	[GrammarRule("explicitConstructorInvocation")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> explicitConstructorInvocation()
	{
		EnterRule_explicitConstructorInvocation();
		EnterRule("explicitConstructorInvocation", 42);
		TraceIn("explicitConstructorInvocation", 42);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int explicitConstructorInvocation_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken set210 = default(CommonToken);
		CommonToken char_literal212 = default(CommonToken);
		CommonToken char_literal214 = default(CommonToken);
		CommonToken string_literal216 = default(CommonToken);
		CommonToken char_literal218 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> nonWildcardTypeArguments209 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> arguments211 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> primary213 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> nonWildcardTypeArguments215 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> arguments217 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set210_tree = default(CommonTree);
		CommonTree char_literal212_tree = default(CommonTree);
		CommonTree char_literal214_tree = default(CommonTree);
		CommonTree string_literal216_tree = default(CommonTree);
		CommonTree char_literal218_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "explicitConstructorInvocation");
		DebugLocation(700, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// Java.g:701:5: ( ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';' | primary '.' ( nonWildcardTypeArguments )? 'super' arguments ';' )
			int alt76=2;
			try { DebugEnterDecision(76, false);
			switch (input.LA(1))
			{
			case LT:
				{
				alt76 = 1;
				}
				break;
			case THIS:
				{
				int LA76_2 = input.LA(2);

				if ((EvaluatePredicate(synpred103_Java_fragment)))
				{
					alt76 = 1;
				}
				else if ((true))
				{
					alt76 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 76, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARLITERAL:
			case DOUBLE:
			case DOUBLELITERAL:
			case FALSE:
			case FLOAT:
			case FLOATLITERAL:
			case IDENTIFIER:
			case INT:
			case INTLITERAL:
			case LONG:
			case LONGLITERAL:
			case LPAREN:
			case NEW:
			case NULL:
			case SHORT:
			case STRINGLITERAL:
			case TRUE:
			case VOID:
				{
				alt76 = 2;
				}
				break;
			case SUPER:
				{
				int LA76_2 = input.LA(2);

				if ((EvaluatePredicate(synpred103_Java_fragment)))
				{
					alt76 = 1;
				}
				else if ((true))
				{
					alt76 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 76, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 76, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:701:9: ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(701, 9);
				// Java.g:701:9: ( nonWildcardTypeArguments )?
				int alt74=2;
				try { DebugEnterSubRule(74);
				try { DebugEnterDecision(74, false);
				int LA74_1 = input.LA(1);

				if ((LA74_1==LT))
				{
					alt74 = 1;
				}
				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:701:10: nonWildcardTypeArguments
					{
					DebugLocation(701, 10);
					PushFollow(Follow._nonWildcardTypeArguments_in_explicitConstructorInvocation3354);
					nonWildcardTypeArguments209=nonWildcardTypeArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, nonWildcardTypeArguments209.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(74); }

				DebugLocation(703, 9);

				set210=(CommonToken)input.LT(1);
				if (input.LA(1)==SUPER||input.LA(1)==THIS)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set210));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(706, 9);
				PushFollow(Follow._arguments_in_explicitConstructorInvocation3412);
				arguments211=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments211.Tree);
				DebugLocation(706, 19);
				char_literal212=(CommonToken)Match(input,SEMI,Follow._SEMI_in_explicitConstructorInvocation3414); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal212_tree = (CommonTree)adaptor.Create(char_literal212);
				adaptor.AddChild(root_0, char_literal212_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:708:9: primary '.' ( nonWildcardTypeArguments )? 'super' arguments ';'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(708, 9);
				PushFollow(Follow._primary_in_explicitConstructorInvocation3425);
				primary213=primary();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primary213.Tree);
				DebugLocation(709, 9);
				char_literal214=(CommonToken)Match(input,DOT,Follow._DOT_in_explicitConstructorInvocation3435); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal214_tree = (CommonTree)adaptor.Create(char_literal214);
				adaptor.AddChild(root_0, char_literal214_tree);
				}
				DebugLocation(710, 9);
				// Java.g:710:9: ( nonWildcardTypeArguments )?
				int alt75=2;
				try { DebugEnterSubRule(75);
				try { DebugEnterDecision(75, false);
				int LA75_1 = input.LA(1);

				if ((LA75_1==LT))
				{
					alt75 = 1;
				}
				} finally { DebugExitDecision(75); }
				switch (alt75)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:710:10: nonWildcardTypeArguments
					{
					DebugLocation(710, 10);
					PushFollow(Follow._nonWildcardTypeArguments_in_explicitConstructorInvocation3446);
					nonWildcardTypeArguments215=nonWildcardTypeArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, nonWildcardTypeArguments215.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(75); }

				DebugLocation(712, 9);
				string_literal216=(CommonToken)Match(input,SUPER,Follow._SUPER_in_explicitConstructorInvocation3467); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal216_tree = (CommonTree)adaptor.Create(string_literal216);
				adaptor.AddChild(root_0, string_literal216_tree);
				}
				DebugLocation(713, 9);
				PushFollow(Follow._arguments_in_explicitConstructorInvocation3477);
				arguments217=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments217.Tree);
				DebugLocation(713, 19);
				char_literal218=(CommonToken)Match(input,SEMI,Follow._SEMI_in_explicitConstructorInvocation3479); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal218_tree = (CommonTree)adaptor.Create(char_literal218);
				adaptor.AddChild(root_0, char_literal218_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("explicitConstructorInvocation", 42);
			LeaveRule("explicitConstructorInvocation", 42);
			LeaveRule_explicitConstructorInvocation();
			if (state.backtracking > 0) { Memoize(input, 42, explicitConstructorInvocation_StartIndex); }

		}
		DebugLocation(714, 4);
		} finally { DebugExitRule(GrammarFileName, "explicitConstructorInvocation"); }
		return retval;

	}
	// $ANTLR end "explicitConstructorInvocation"

	partial void EnterRule_qualifiedName();
	partial void LeaveRule_qualifiedName();
	// $ANTLR start "qualifiedName"
	// Java.g:716:1: qualifiedName : IDENTIFIER ( '.' IDENTIFIER )* ;
	[GrammarRule("qualifiedName")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> qualifiedName()
	{
		EnterRule_qualifiedName();
		EnterRule("qualifiedName", 43);
		TraceIn("qualifiedName", 43);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int qualifiedName_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENTIFIER219 = default(CommonToken);
		CommonToken char_literal220 = default(CommonToken);
		CommonToken IDENTIFIER221 = default(CommonToken);

		CommonTree IDENTIFIER219_tree = default(CommonTree);
		CommonTree char_literal220_tree = default(CommonTree);
		CommonTree IDENTIFIER221_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "qualifiedName");
		DebugLocation(716, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// Java.g:717:5: ( IDENTIFIER ( '.' IDENTIFIER )* )
			DebugEnterAlt(1);
			// Java.g:717:9: IDENTIFIER ( '.' IDENTIFIER )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(717, 9);
			IDENTIFIER219=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_qualifiedName3499); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER219_tree = (CommonTree)adaptor.Create(IDENTIFIER219);
			adaptor.AddChild(root_0, IDENTIFIER219_tree);
			}
			DebugLocation(718, 9);
			// Java.g:718:9: ( '.' IDENTIFIER )*
			try { DebugEnterSubRule(77);
			while (true)
			{
				int alt77=2;
				try { DebugEnterDecision(77, false);
				int LA77_1 = input.LA(1);

				if ((LA77_1==DOT))
				{
					alt77 = 1;
				}


				} finally { DebugExitDecision(77); }
				switch ( alt77 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:718:10: '.' IDENTIFIER
					{
					DebugLocation(718, 10);
					char_literal220=(CommonToken)Match(input,DOT,Follow._DOT_in_qualifiedName3510); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal220_tree = (CommonTree)adaptor.Create(char_literal220);
					adaptor.AddChild(root_0, char_literal220_tree);
					}
					DebugLocation(718, 14);
					IDENTIFIER221=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_qualifiedName3512); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER221_tree = (CommonTree)adaptor.Create(IDENTIFIER221);
					adaptor.AddChild(root_0, IDENTIFIER221_tree);
					}

					}
					break;

				default:
					goto loop77;
				}
			}

			loop77:
				;

			} finally { DebugExitSubRule(77); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualifiedName", 43);
			LeaveRule("qualifiedName", 43);
			LeaveRule_qualifiedName();
			if (state.backtracking > 0) { Memoize(input, 43, qualifiedName_StartIndex); }

		}
		DebugLocation(720, 4);
		} finally { DebugExitRule(GrammarFileName, "qualifiedName"); }
		return retval;

	}
	// $ANTLR end "qualifiedName"

	partial void EnterRule_annotations();
	partial void LeaveRule_annotations();
	// $ANTLR start "annotations"
	// Java.g:722:1: annotations : ( annotation )+ ;
	[GrammarRule("annotations")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> annotations()
	{
		EnterRule_annotations();
		EnterRule("annotations", 44);
		TraceIn("annotations", 44);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int annotations_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> annotation222 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "annotations");
		DebugLocation(722, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// Java.g:723:5: ( ( annotation )+ )
			DebugEnterAlt(1);
			// Java.g:723:9: ( annotation )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(723, 9);
			// Java.g:723:9: ( annotation )+
			int cnt78=0;
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=2;
				try { DebugEnterDecision(78, false);
				int LA78_1 = input.LA(1);

				if ((LA78_1==MONKEYS_AT))
				{
					alt78 = 1;
				}


				} finally { DebugExitDecision(78); }
				switch (alt78)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:723:10: annotation
					{
					DebugLocation(723, 10);
					PushFollow(Follow._annotation_in_annotations3544);
					annotation222=annotation();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, annotation222.Tree);

					}
					break;

				default:
					if (cnt78 >= 1)
						goto loop78;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee78 = new EarlyExitException( 78, input );
					DebugRecognitionException(eee78);
					throw eee78;
				}
				cnt78++;
			}
			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotations", 44);
			LeaveRule("annotations", 44);
			LeaveRule_annotations();
			if (state.backtracking > 0) { Memoize(input, 44, annotations_StartIndex); }

		}
		DebugLocation(725, 4);
		} finally { DebugExitRule(GrammarFileName, "annotations"); }
		return retval;

	}
	// $ANTLR end "annotations"

	partial void EnterRule_annotation();
	partial void LeaveRule_annotation();
	// $ANTLR start "annotation"
	// Java.g:731:1: annotation : '@' qualifiedName ( '(' ( elementValuePairs | elementValue )? ')' )? ;
	[GrammarRule("annotation")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> annotation()
	{
		EnterRule_annotation();
		EnterRule("annotation", 45);
		TraceIn("annotation", 45);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int annotation_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal223 = default(CommonToken);
		CommonToken char_literal225 = default(CommonToken);
		CommonToken char_literal228 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> qualifiedName224 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> elementValuePairs226 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> elementValue227 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal223_tree = default(CommonTree);
		CommonTree char_literal225_tree = default(CommonTree);
		CommonTree char_literal228_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "annotation");
		DebugLocation(731, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// Java.g:732:5: ( '@' qualifiedName ( '(' ( elementValuePairs | elementValue )? ')' )? )
			DebugEnterAlt(1);
			// Java.g:732:9: '@' qualifiedName ( '(' ( elementValuePairs | elementValue )? ')' )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(732, 9);
			char_literal223=(CommonToken)Match(input,MONKEYS_AT,Follow._MONKEYS_AT_in_annotation3577); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal223_tree = (CommonTree)adaptor.Create(char_literal223);
			adaptor.AddChild(root_0, char_literal223_tree);
			}
			DebugLocation(732, 13);
			PushFollow(Follow._qualifiedName_in_annotation3579);
			qualifiedName224=qualifiedName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualifiedName224.Tree);
			DebugLocation(733, 9);
			// Java.g:733:9: ( '(' ( elementValuePairs | elementValue )? ')' )?
			int alt80=2;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			int LA80_1 = input.LA(1);

			if ((LA80_1==LPAREN))
			{
				alt80 = 1;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:733:13: '(' ( elementValuePairs | elementValue )? ')'
				{
				DebugLocation(733, 13);
				char_literal225=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_annotation3593); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal225_tree = (CommonTree)adaptor.Create(char_literal225);
				adaptor.AddChild(root_0, char_literal225_tree);
				}
				DebugLocation(734, 19);
				// Java.g:734:19: ( elementValuePairs | elementValue )?
				int alt79=3;
				try { DebugEnterSubRule(79);
				try { DebugEnterDecision(79, false);
				int LA79_1 = input.LA(1);

				if ((LA79_1==IDENTIFIER))
				{
					int LA79_2 = input.LA(2);

					if ((LA79_2==EQ))
					{
						alt79 = 1;
					}
					else if (((LA79_2>=AMP && LA79_2<=AMPAMP)||(LA79_2>=BANGEQ && LA79_2<=BARBAR)||LA79_2==CARET||LA79_2==DOT||LA79_2==EQEQ||LA79_2==GT||LA79_2==INSTANCEOF||LA79_2==LBRACKET||(LA79_2>=LPAREN && LA79_2<=LT)||LA79_2==PERCENT||LA79_2==PLUS||LA79_2==PLUSPLUS||LA79_2==QUES||LA79_2==RPAREN||LA79_2==SLASH||LA79_2==STAR||LA79_2==SUB||LA79_2==SUBSUB))
					{
						alt79 = 2;
					}
				}
				else if ((LA79_1==BANG||LA79_1==BOOLEAN||LA79_1==BYTE||(LA79_1>=CHAR && LA79_1<=CHARLITERAL)||(LA79_1>=DOUBLE && LA79_1<=DOUBLELITERAL)||LA79_1==FALSE||(LA79_1>=FLOAT && LA79_1<=FLOATLITERAL)||LA79_1==INT||LA79_1==INTLITERAL||LA79_1==LBRACE||(LA79_1>=LONG && LA79_1<=LPAREN)||LA79_1==MONKEYS_AT||(LA79_1>=NEW && LA79_1<=NULL)||LA79_1==PLUS||LA79_1==PLUSPLUS||LA79_1==SHORT||(LA79_1>=STRINGLITERAL && LA79_1<=SUB)||(LA79_1>=SUBSUB && LA79_1<=SUPER)||LA79_1==THIS||LA79_1==TILDE||LA79_1==TRUE||LA79_1==VOID))
				{
					alt79 = 2;
				}
				} finally { DebugExitDecision(79); }
				switch (alt79)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:734:23: elementValuePairs
					{
					DebugLocation(734, 23);
					PushFollow(Follow._elementValuePairs_in_annotation3620);
					elementValuePairs226=elementValuePairs();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, elementValuePairs226.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Java.g:735:23: elementValue
					{
					DebugLocation(735, 23);
					PushFollow(Follow._elementValue_in_annotation3644);
					elementValue227=elementValue();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, elementValue227.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(79); }

				DebugLocation(737, 13);
				char_literal228=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_annotation3680); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal228_tree = (CommonTree)adaptor.Create(char_literal228);
				adaptor.AddChild(root_0, char_literal228_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(80); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotation", 45);
			LeaveRule("annotation", 45);
			LeaveRule_annotation();
			if (state.backtracking > 0) { Memoize(input, 45, annotation_StartIndex); }

		}
		DebugLocation(739, 4);
		} finally { DebugExitRule(GrammarFileName, "annotation"); }
		return retval;

	}
	// $ANTLR end "annotation"

	partial void EnterRule_elementValuePairs();
	partial void LeaveRule_elementValuePairs();
	// $ANTLR start "elementValuePairs"
	// Java.g:741:1: elementValuePairs : elementValuePair ( ',' elementValuePair )* ;
	[GrammarRule("elementValuePairs")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> elementValuePairs()
	{
		EnterRule_elementValuePairs();
		EnterRule("elementValuePairs", 46);
		TraceIn("elementValuePairs", 46);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int elementValuePairs_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal230 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> elementValuePair229 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> elementValuePair231 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal230_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "elementValuePairs");
		DebugLocation(741, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// Java.g:742:5: ( elementValuePair ( ',' elementValuePair )* )
			DebugEnterAlt(1);
			// Java.g:742:9: elementValuePair ( ',' elementValuePair )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(742, 9);
			PushFollow(Follow._elementValuePair_in_elementValuePairs3712);
			elementValuePair229=elementValuePair();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, elementValuePair229.Tree);
			DebugLocation(743, 9);
			// Java.g:743:9: ( ',' elementValuePair )*
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=2;
				try { DebugEnterDecision(81, false);
				int LA81_1 = input.LA(1);

				if ((LA81_1==COMMA))
				{
					alt81 = 1;
				}


				} finally { DebugExitDecision(81); }
				switch ( alt81 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:743:10: ',' elementValuePair
					{
					DebugLocation(743, 10);
					char_literal230=(CommonToken)Match(input,COMMA,Follow._COMMA_in_elementValuePairs3723); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal230_tree = (CommonTree)adaptor.Create(char_literal230);
					adaptor.AddChild(root_0, char_literal230_tree);
					}
					DebugLocation(743, 14);
					PushFollow(Follow._elementValuePair_in_elementValuePairs3725);
					elementValuePair231=elementValuePair();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, elementValuePair231.Tree);

					}
					break;

				default:
					goto loop81;
				}
			}

			loop81:
				;

			} finally { DebugExitSubRule(81); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("elementValuePairs", 46);
			LeaveRule("elementValuePairs", 46);
			LeaveRule_elementValuePairs();
			if (state.backtracking > 0) { Memoize(input, 46, elementValuePairs_StartIndex); }

		}
		DebugLocation(745, 4);
		} finally { DebugExitRule(GrammarFileName, "elementValuePairs"); }
		return retval;

	}
	// $ANTLR end "elementValuePairs"

	partial void EnterRule_elementValuePair();
	partial void LeaveRule_elementValuePair();
	// $ANTLR start "elementValuePair"
	// Java.g:747:1: elementValuePair : IDENTIFIER '=' elementValue ;
	[GrammarRule("elementValuePair")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> elementValuePair()
	{
		EnterRule_elementValuePair();
		EnterRule("elementValuePair", 47);
		TraceIn("elementValuePair", 47);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int elementValuePair_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENTIFIER232 = default(CommonToken);
		CommonToken char_literal233 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> elementValue234 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree IDENTIFIER232_tree = default(CommonTree);
		CommonTree char_literal233_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "elementValuePair");
		DebugLocation(747, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// Java.g:748:5: ( IDENTIFIER '=' elementValue )
			DebugEnterAlt(1);
			// Java.g:748:9: IDENTIFIER '=' elementValue
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(748, 9);
			IDENTIFIER232=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_elementValuePair3756); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER232_tree = (CommonTree)adaptor.Create(IDENTIFIER232);
			adaptor.AddChild(root_0, IDENTIFIER232_tree);
			}
			DebugLocation(748, 20);
			char_literal233=(CommonToken)Match(input,EQ,Follow._EQ_in_elementValuePair3758); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal233_tree = (CommonTree)adaptor.Create(char_literal233);
			adaptor.AddChild(root_0, char_literal233_tree);
			}
			DebugLocation(748, 24);
			PushFollow(Follow._elementValue_in_elementValuePair3760);
			elementValue234=elementValue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, elementValue234.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("elementValuePair", 47);
			LeaveRule("elementValuePair", 47);
			LeaveRule_elementValuePair();
			if (state.backtracking > 0) { Memoize(input, 47, elementValuePair_StartIndex); }

		}
		DebugLocation(749, 4);
		} finally { DebugExitRule(GrammarFileName, "elementValuePair"); }
		return retval;

	}
	// $ANTLR end "elementValuePair"

	partial void EnterRule_elementValue();
	partial void LeaveRule_elementValue();
	// $ANTLR start "elementValue"
	// Java.g:751:1: elementValue : ( conditionalExpression | annotation | elementValueArrayInitializer );
	[GrammarRule("elementValue")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> elementValue()
	{
		EnterRule_elementValue();
		EnterRule("elementValue", 48);
		TraceIn("elementValue", 48);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int elementValue_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> conditionalExpression235 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> annotation236 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> elementValueArrayInitializer237 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "elementValue");
		DebugLocation(751, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// Java.g:752:5: ( conditionalExpression | annotation | elementValueArrayInitializer )
			int alt82=3;
			try { DebugEnterDecision(82, false);
			switch (input.LA(1))
			{
			case BANG:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARLITERAL:
			case DOUBLE:
			case DOUBLELITERAL:
			case FALSE:
			case FLOAT:
			case FLOATLITERAL:
			case IDENTIFIER:
			case INT:
			case INTLITERAL:
			case LONG:
			case LONGLITERAL:
			case LPAREN:
			case NEW:
			case NULL:
			case PLUS:
			case PLUSPLUS:
			case SHORT:
			case STRINGLITERAL:
			case SUB:
			case SUBSUB:
			case SUPER:
			case THIS:
			case TILDE:
			case TRUE:
			case VOID:
				{
				alt82 = 1;
				}
				break;
			case MONKEYS_AT:
				{
				alt82 = 2;
				}
				break;
			case LBRACE:
				{
				alt82 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 82, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:752:9: conditionalExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(752, 9);
				PushFollow(Follow._conditionalExpression_in_elementValue3780);
				conditionalExpression235=conditionalExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalExpression235.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:753:9: annotation
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(753, 9);
				PushFollow(Follow._annotation_in_elementValue3790);
				annotation236=annotation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotation236.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:754:9: elementValueArrayInitializer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(754, 9);
				PushFollow(Follow._elementValueArrayInitializer_in_elementValue3800);
				elementValueArrayInitializer237=elementValueArrayInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, elementValueArrayInitializer237.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("elementValue", 48);
			LeaveRule("elementValue", 48);
			LeaveRule_elementValue();
			if (state.backtracking > 0) { Memoize(input, 48, elementValue_StartIndex); }

		}
		DebugLocation(755, 4);
		} finally { DebugExitRule(GrammarFileName, "elementValue"); }
		return retval;

	}
	// $ANTLR end "elementValue"

	partial void EnterRule_elementValueArrayInitializer();
	partial void LeaveRule_elementValueArrayInitializer();
	// $ANTLR start "elementValueArrayInitializer"
	// Java.g:757:1: elementValueArrayInitializer : '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' ;
	[GrammarRule("elementValueArrayInitializer")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> elementValueArrayInitializer()
	{
		EnterRule_elementValueArrayInitializer();
		EnterRule("elementValueArrayInitializer", 49);
		TraceIn("elementValueArrayInitializer", 49);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int elementValueArrayInitializer_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal238 = default(CommonToken);
		CommonToken char_literal240 = default(CommonToken);
		CommonToken char_literal242 = default(CommonToken);
		CommonToken char_literal243 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> elementValue239 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> elementValue241 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal238_tree = default(CommonTree);
		CommonTree char_literal240_tree = default(CommonTree);
		CommonTree char_literal242_tree = default(CommonTree);
		CommonTree char_literal243_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "elementValueArrayInitializer");
		DebugLocation(757, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// Java.g:758:5: ( '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' )
			DebugEnterAlt(1);
			// Java.g:758:9: '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(758, 9);
			char_literal238=(CommonToken)Match(input,LBRACE,Follow._LBRACE_in_elementValueArrayInitializer3820); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal238_tree = (CommonTree)adaptor.Create(char_literal238);
			adaptor.AddChild(root_0, char_literal238_tree);
			}
			DebugLocation(759, 9);
			// Java.g:759:9: ( elementValue ( ',' elementValue )* )?
			int alt84=2;
			try { DebugEnterSubRule(84);
			try { DebugEnterDecision(84, false);
			int LA84_1 = input.LA(1);

			if ((LA84_1==BANG||LA84_1==BOOLEAN||LA84_1==BYTE||(LA84_1>=CHAR && LA84_1<=CHARLITERAL)||(LA84_1>=DOUBLE && LA84_1<=DOUBLELITERAL)||LA84_1==FALSE||(LA84_1>=FLOAT && LA84_1<=FLOATLITERAL)||LA84_1==IDENTIFIER||LA84_1==INT||LA84_1==INTLITERAL||LA84_1==LBRACE||(LA84_1>=LONG && LA84_1<=LPAREN)||LA84_1==MONKEYS_AT||(LA84_1>=NEW && LA84_1<=NULL)||LA84_1==PLUS||LA84_1==PLUSPLUS||LA84_1==SHORT||(LA84_1>=STRINGLITERAL && LA84_1<=SUB)||(LA84_1>=SUBSUB && LA84_1<=SUPER)||LA84_1==THIS||LA84_1==TILDE||LA84_1==TRUE||LA84_1==VOID))
			{
				alt84 = 1;
			}
			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:759:10: elementValue ( ',' elementValue )*
				{
				DebugLocation(759, 10);
				PushFollow(Follow._elementValue_in_elementValueArrayInitializer3831);
				elementValue239=elementValue();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, elementValue239.Tree);
				DebugLocation(760, 13);
				// Java.g:760:13: ( ',' elementValue )*
				try { DebugEnterSubRule(83);
				while (true)
				{
					int alt83=2;
					try { DebugEnterDecision(83, false);
					int LA83_1 = input.LA(1);

					if ((LA83_1==COMMA))
					{
						int LA83_2 = input.LA(2);

						if ((LA83_2==BANG||LA83_2==BOOLEAN||LA83_2==BYTE||(LA83_2>=CHAR && LA83_2<=CHARLITERAL)||(LA83_2>=DOUBLE && LA83_2<=DOUBLELITERAL)||LA83_2==FALSE||(LA83_2>=FLOAT && LA83_2<=FLOATLITERAL)||LA83_2==IDENTIFIER||LA83_2==INT||LA83_2==INTLITERAL||LA83_2==LBRACE||(LA83_2>=LONG && LA83_2<=LPAREN)||LA83_2==MONKEYS_AT||(LA83_2>=NEW && LA83_2<=NULL)||LA83_2==PLUS||LA83_2==PLUSPLUS||LA83_2==SHORT||(LA83_2>=STRINGLITERAL && LA83_2<=SUB)||(LA83_2>=SUBSUB && LA83_2<=SUPER)||LA83_2==THIS||LA83_2==TILDE||LA83_2==TRUE||LA83_2==VOID))
						{
							alt83 = 1;
						}


					}


					} finally { DebugExitDecision(83); }
					switch ( alt83 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:760:14: ',' elementValue
						{
						DebugLocation(760, 14);
						char_literal240=(CommonToken)Match(input,COMMA,Follow._COMMA_in_elementValueArrayInitializer3846); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal240_tree = (CommonTree)adaptor.Create(char_literal240);
						adaptor.AddChild(root_0, char_literal240_tree);
						}
						DebugLocation(760, 18);
						PushFollow(Follow._elementValue_in_elementValueArrayInitializer3848);
						elementValue241=elementValue();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, elementValue241.Tree);

						}
						break;

					default:
						goto loop83;
					}
				}

				loop83:
					;

				} finally { DebugExitSubRule(83); }


				}
				break;

			}
			} finally { DebugExitSubRule(84); }

			DebugLocation(762, 12);
			// Java.g:762:12: ( ',' )?
			int alt85=2;
			try { DebugEnterSubRule(85);
			try { DebugEnterDecision(85, false);
			int LA85_1 = input.LA(1);

			if ((LA85_1==COMMA))
			{
				alt85 = 1;
			}
			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:762:13: ','
				{
				DebugLocation(762, 13);
				char_literal242=(CommonToken)Match(input,COMMA,Follow._COMMA_in_elementValueArrayInitializer3877); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal242_tree = (CommonTree)adaptor.Create(char_literal242);
				adaptor.AddChild(root_0, char_literal242_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(85); }

			DebugLocation(762, 19);
			char_literal243=(CommonToken)Match(input,RBRACE,Follow._RBRACE_in_elementValueArrayInitializer3881); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal243_tree = (CommonTree)adaptor.Create(char_literal243);
			adaptor.AddChild(root_0, char_literal243_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("elementValueArrayInitializer", 49);
			LeaveRule("elementValueArrayInitializer", 49);
			LeaveRule_elementValueArrayInitializer();
			if (state.backtracking > 0) { Memoize(input, 49, elementValueArrayInitializer_StartIndex); }

		}
		DebugLocation(763, 4);
		} finally { DebugExitRule(GrammarFileName, "elementValueArrayInitializer"); }
		return retval;

	}
	// $ANTLR end "elementValueArrayInitializer"

	partial void EnterRule_annotationTypeDeclaration();
	partial void LeaveRule_annotationTypeDeclaration();
	// $ANTLR start "annotationTypeDeclaration"
	// Java.g:769:1: annotationTypeDeclaration : modifiers '@' 'interface' IDENTIFIER annotationTypeBody ;
	[GrammarRule("annotationTypeDeclaration")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> annotationTypeDeclaration()
	{
		EnterRule_annotationTypeDeclaration();
		EnterRule("annotationTypeDeclaration", 50);
		TraceIn("annotationTypeDeclaration", 50);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int annotationTypeDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal245 = default(CommonToken);
		CommonToken string_literal246 = default(CommonToken);
		CommonToken IDENTIFIER247 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> modifiers244 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> annotationTypeBody248 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal245_tree = default(CommonTree);
		CommonTree string_literal246_tree = default(CommonTree);
		CommonTree IDENTIFIER247_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "annotationTypeDeclaration");
		DebugLocation(769, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// Java.g:770:5: ( modifiers '@' 'interface' IDENTIFIER annotationTypeBody )
			DebugEnterAlt(1);
			// Java.g:770:9: modifiers '@' 'interface' IDENTIFIER annotationTypeBody
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(770, 9);
			PushFollow(Follow._modifiers_in_annotationTypeDeclaration3904);
			modifiers244=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers244.Tree);
			DebugLocation(770, 19);
			char_literal245=(CommonToken)Match(input,MONKEYS_AT,Follow._MONKEYS_AT_in_annotationTypeDeclaration3906); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal245_tree = (CommonTree)adaptor.Create(char_literal245);
			adaptor.AddChild(root_0, char_literal245_tree);
			}
			DebugLocation(771, 9);
			string_literal246=(CommonToken)Match(input,INTERFACE,Follow._INTERFACE_in_annotationTypeDeclaration3916); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal246_tree = (CommonTree)adaptor.Create(string_literal246);
			adaptor.AddChild(root_0, string_literal246_tree);
			}
			DebugLocation(772, 9);
			IDENTIFIER247=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_annotationTypeDeclaration3926); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER247_tree = (CommonTree)adaptor.Create(IDENTIFIER247);
			adaptor.AddChild(root_0, IDENTIFIER247_tree);
			}
			DebugLocation(773, 9);
			PushFollow(Follow._annotationTypeBody_in_annotationTypeDeclaration3936);
			annotationTypeBody248=annotationTypeBody();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, annotationTypeBody248.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationTypeDeclaration", 50);
			LeaveRule("annotationTypeDeclaration", 50);
			LeaveRule_annotationTypeDeclaration();
			if (state.backtracking > 0) { Memoize(input, 50, annotationTypeDeclaration_StartIndex); }

		}
		DebugLocation(774, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationTypeDeclaration"); }
		return retval;

	}
	// $ANTLR end "annotationTypeDeclaration"

	partial void EnterRule_annotationTypeBody();
	partial void LeaveRule_annotationTypeBody();
	// $ANTLR start "annotationTypeBody"
	// Java.g:777:1: annotationTypeBody : '{' ( annotationTypeElementDeclaration )* '}' ;
	[GrammarRule("annotationTypeBody")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> annotationTypeBody()
	{
		EnterRule_annotationTypeBody();
		EnterRule("annotationTypeBody", 51);
		TraceIn("annotationTypeBody", 51);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int annotationTypeBody_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal249 = default(CommonToken);
		CommonToken char_literal251 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> annotationTypeElementDeclaration250 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal249_tree = default(CommonTree);
		CommonTree char_literal251_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "annotationTypeBody");
		DebugLocation(777, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// Java.g:778:5: ( '{' ( annotationTypeElementDeclaration )* '}' )
			DebugEnterAlt(1);
			// Java.g:778:9: '{' ( annotationTypeElementDeclaration )* '}'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(778, 9);
			char_literal249=(CommonToken)Match(input,LBRACE,Follow._LBRACE_in_annotationTypeBody3957); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal249_tree = (CommonTree)adaptor.Create(char_literal249);
			adaptor.AddChild(root_0, char_literal249_tree);
			}
			DebugLocation(779, 9);
			// Java.g:779:9: ( annotationTypeElementDeclaration )*
			try { DebugEnterSubRule(86);
			while (true)
			{
				int alt86=2;
				try { DebugEnterDecision(86, false);
				int LA86_1 = input.LA(1);

				if ((LA86_1==ABSTRACT||LA86_1==BOOLEAN||LA86_1==BYTE||LA86_1==CHAR||LA86_1==CLASS||LA86_1==DOUBLE||LA86_1==ENUM||LA86_1==FINAL||LA86_1==FLOAT||LA86_1==IDENTIFIER||(LA86_1>=INT && LA86_1<=INTERFACE)||LA86_1==LONG||LA86_1==LT||(LA86_1>=MONKEYS_AT && LA86_1<=NATIVE)||(LA86_1>=PRIVATE && LA86_1<=PUBLIC)||(LA86_1>=SEMI && LA86_1<=SHORT)||(LA86_1>=STATIC && LA86_1<=STRICTFP)||LA86_1==SYNCHRONIZED||LA86_1==TRANSIENT||(LA86_1>=VOID && LA86_1<=VOLATILE)))
				{
					alt86 = 1;
				}


				} finally { DebugExitDecision(86); }
				switch ( alt86 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:779:10: annotationTypeElementDeclaration
					{
					DebugLocation(779, 10);
					PushFollow(Follow._annotationTypeElementDeclaration_in_annotationTypeBody3969);
					annotationTypeElementDeclaration250=annotationTypeElementDeclaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, annotationTypeElementDeclaration250.Tree);

					}
					break;

				default:
					goto loop86;
				}
			}

			loop86:
				;

			} finally { DebugExitSubRule(86); }

			DebugLocation(781, 9);
			char_literal251=(CommonToken)Match(input,RBRACE,Follow._RBRACE_in_annotationTypeBody3991); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal251_tree = (CommonTree)adaptor.Create(char_literal251);
			adaptor.AddChild(root_0, char_literal251_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationTypeBody", 51);
			LeaveRule("annotationTypeBody", 51);
			LeaveRule_annotationTypeBody();
			if (state.backtracking > 0) { Memoize(input, 51, annotationTypeBody_StartIndex); }

		}
		DebugLocation(782, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationTypeBody"); }
		return retval;

	}
	// $ANTLR end "annotationTypeBody"

	partial void EnterRule_annotationTypeElementDeclaration();
	partial void LeaveRule_annotationTypeElementDeclaration();
	// $ANTLR start "annotationTypeElementDeclaration"
	// Java.g:787:1: annotationTypeElementDeclaration : ( annotationMethodDeclaration | interfaceFieldDeclaration | normalClassDeclaration | normalInterfaceDeclaration | enumDeclaration | annotationTypeDeclaration | ';' );
	[GrammarRule("annotationTypeElementDeclaration")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> annotationTypeElementDeclaration()
	{
		EnterRule_annotationTypeElementDeclaration();
		EnterRule("annotationTypeElementDeclaration", 52);
		TraceIn("annotationTypeElementDeclaration", 52);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int annotationTypeElementDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal258 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> annotationMethodDeclaration252 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> interfaceFieldDeclaration253 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> normalClassDeclaration254 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> normalInterfaceDeclaration255 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> enumDeclaration256 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> annotationTypeDeclaration257 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal258_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "annotationTypeElementDeclaration");
		DebugLocation(787, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// Java.g:788:5: ( annotationMethodDeclaration | interfaceFieldDeclaration | normalClassDeclaration | normalInterfaceDeclaration | enumDeclaration | annotationTypeDeclaration | ';' )
			int alt87=7;
			try { DebugEnterDecision(87, false);
			switch (input.LA(1))
			{
			case MONKEYS_AT:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PUBLIC:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PROTECTED:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIVATE:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STATIC:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FINAL:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NATIVE:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SYNCHRONIZED:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRANSIENT:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case VOLATILE:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRICTFP:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else if ((EvaluatePredicate(synpred119_Java_fragment)))
				{
					alt87 = 3;
				}
				else if ((EvaluatePredicate(synpred120_Java_fragment)))
				{
					alt87 = 4;
				}
				else if ((EvaluatePredicate(synpred121_Java_fragment)))
				{
					alt87 = 5;
				}
				else if ((EvaluatePredicate(synpred122_Java_fragment)))
				{
					alt87 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA87_2 = input.LA(2);

				if ((EvaluatePredicate(synpred117_Java_fragment)))
				{
					alt87 = 1;
				}
				else if ((EvaluatePredicate(synpred118_Java_fragment)))
				{
					alt87 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CLASS:
				{
				alt87 = 3;
				}
				break;
			case INTERFACE:
				{
				alt87 = 4;
				}
				break;
			case ENUM:
				{
				alt87 = 5;
				}
				break;
			case SEMI:
				{
				alt87 = 7;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:788:9: annotationMethodDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(788, 9);
				PushFollow(Follow._annotationMethodDeclaration_in_annotationTypeElementDeclaration4013);
				annotationMethodDeclaration252=annotationMethodDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationMethodDeclaration252.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:789:9: interfaceFieldDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(789, 9);
				PushFollow(Follow._interfaceFieldDeclaration_in_annotationTypeElementDeclaration4023);
				interfaceFieldDeclaration253=interfaceFieldDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceFieldDeclaration253.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:790:9: normalClassDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(790, 9);
				PushFollow(Follow._normalClassDeclaration_in_annotationTypeElementDeclaration4033);
				normalClassDeclaration254=normalClassDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, normalClassDeclaration254.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:791:9: normalInterfaceDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(791, 9);
				PushFollow(Follow._normalInterfaceDeclaration_in_annotationTypeElementDeclaration4043);
				normalInterfaceDeclaration255=normalInterfaceDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, normalInterfaceDeclaration255.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:792:9: enumDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(792, 9);
				PushFollow(Follow._enumDeclaration_in_annotationTypeElementDeclaration4053);
				enumDeclaration256=enumDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumDeclaration256.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:793:9: annotationTypeDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(793, 9);
				PushFollow(Follow._annotationTypeDeclaration_in_annotationTypeElementDeclaration4063);
				annotationTypeDeclaration257=annotationTypeDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, annotationTypeDeclaration257.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:794:9: ';'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(794, 9);
				char_literal258=(CommonToken)Match(input,SEMI,Follow._SEMI_in_annotationTypeElementDeclaration4073); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal258_tree = (CommonTree)adaptor.Create(char_literal258);
				adaptor.AddChild(root_0, char_literal258_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationTypeElementDeclaration", 52);
			LeaveRule("annotationTypeElementDeclaration", 52);
			LeaveRule_annotationTypeElementDeclaration();
			if (state.backtracking > 0) { Memoize(input, 52, annotationTypeElementDeclaration_StartIndex); }

		}
		DebugLocation(795, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationTypeElementDeclaration"); }
		return retval;

	}
	// $ANTLR end "annotationTypeElementDeclaration"

	partial void EnterRule_annotationMethodDeclaration();
	partial void LeaveRule_annotationMethodDeclaration();
	// $ANTLR start "annotationMethodDeclaration"
	// Java.g:797:1: annotationMethodDeclaration : modifiers type IDENTIFIER '(' ')' ( 'default' elementValue )? ';' ;
	[GrammarRule("annotationMethodDeclaration")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> annotationMethodDeclaration()
	{
		EnterRule_annotationMethodDeclaration();
		EnterRule("annotationMethodDeclaration", 53);
		TraceIn("annotationMethodDeclaration", 53);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int annotationMethodDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENTIFIER261 = default(CommonToken);
		CommonToken char_literal262 = default(CommonToken);
		CommonToken char_literal263 = default(CommonToken);
		CommonToken string_literal264 = default(CommonToken);
		CommonToken char_literal266 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> modifiers259 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type260 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> elementValue265 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree IDENTIFIER261_tree = default(CommonTree);
		CommonTree char_literal262_tree = default(CommonTree);
		CommonTree char_literal263_tree = default(CommonTree);
		CommonTree string_literal264_tree = default(CommonTree);
		CommonTree char_literal266_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "annotationMethodDeclaration");
		DebugLocation(797, 8);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// Java.g:798:5: ( modifiers type IDENTIFIER '(' ')' ( 'default' elementValue )? ';' )
			DebugEnterAlt(1);
			// Java.g:798:9: modifiers type IDENTIFIER '(' ')' ( 'default' elementValue )? ';'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(798, 9);
			PushFollow(Follow._modifiers_in_annotationMethodDeclaration4093);
			modifiers259=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers259.Tree);
			DebugLocation(798, 19);
			PushFollow(Follow._type_in_annotationMethodDeclaration4095);
			type260=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type260.Tree);
			DebugLocation(798, 24);
			IDENTIFIER261=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_annotationMethodDeclaration4097); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER261_tree = (CommonTree)adaptor.Create(IDENTIFIER261);
			adaptor.AddChild(root_0, IDENTIFIER261_tree);
			}
			DebugLocation(799, 9);
			char_literal262=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_annotationMethodDeclaration4107); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal262_tree = (CommonTree)adaptor.Create(char_literal262);
			adaptor.AddChild(root_0, char_literal262_tree);
			}
			DebugLocation(799, 13);
			char_literal263=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_annotationMethodDeclaration4109); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal263_tree = (CommonTree)adaptor.Create(char_literal263);
			adaptor.AddChild(root_0, char_literal263_tree);
			}
			DebugLocation(799, 17);
			// Java.g:799:17: ( 'default' elementValue )?
			int alt88=2;
			try { DebugEnterSubRule(88);
			try { DebugEnterDecision(88, false);
			int LA88_1 = input.LA(1);

			if ((LA88_1==DEFAULT))
			{
				alt88 = 1;
			}
			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:799:18: 'default' elementValue
				{
				DebugLocation(799, 18);
				string_literal264=(CommonToken)Match(input,DEFAULT,Follow._DEFAULT_in_annotationMethodDeclaration4112); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal264_tree = (CommonTree)adaptor.Create(string_literal264);
				adaptor.AddChild(root_0, string_literal264_tree);
				}
				DebugLocation(799, 28);
				PushFollow(Follow._elementValue_in_annotationMethodDeclaration4114);
				elementValue265=elementValue();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, elementValue265.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(88); }

			DebugLocation(801, 9);
			char_literal266=(CommonToken)Match(input,SEMI,Follow._SEMI_in_annotationMethodDeclaration4143); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal266_tree = (CommonTree)adaptor.Create(char_literal266);
			adaptor.AddChild(root_0, char_literal266_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationMethodDeclaration", 53);
			LeaveRule("annotationMethodDeclaration", 53);
			LeaveRule_annotationMethodDeclaration();
			if (state.backtracking > 0) { Memoize(input, 53, annotationMethodDeclaration_StartIndex); }

		}
		DebugLocation(802, 8);
		} finally { DebugExitRule(GrammarFileName, "annotationMethodDeclaration"); }
		return retval;

	}
	// $ANTLR end "annotationMethodDeclaration"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// Java.g:804:1: block : '{' ( blockStatement )* '}' ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> block()
	{
		EnterRule_block();
		EnterRule("block", 54);
		TraceIn("block", 54);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int block_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal267 = default(CommonToken);
		CommonToken char_literal269 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> blockStatement268 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal267_tree = default(CommonTree);
		CommonTree char_literal269_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(804, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// Java.g:805:5: ( '{' ( blockStatement )* '}' )
			DebugEnterAlt(1);
			// Java.g:805:9: '{' ( blockStatement )* '}'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(805, 9);
			char_literal267=(CommonToken)Match(input,LBRACE,Follow._LBRACE_in_block4167); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal267_tree = (CommonTree)adaptor.Create(char_literal267);
			adaptor.AddChild(root_0, char_literal267_tree);
			}
			DebugLocation(806, 9);
			// Java.g:806:9: ( blockStatement )*
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, false);
				int LA89_1 = input.LA(1);

				if ((LA89_1==ABSTRACT||(LA89_1>=ASSERT && LA89_1<=BANG)||(LA89_1>=BOOLEAN && LA89_1<=BYTE)||(LA89_1>=CHAR && LA89_1<=CLASS)||LA89_1==CONTINUE||LA89_1==DO||(LA89_1>=DOUBLE && LA89_1<=DOUBLELITERAL)||LA89_1==ENUM||(LA89_1>=FALSE && LA89_1<=FINAL)||(LA89_1>=FLOAT && LA89_1<=FOR)||(LA89_1>=IDENTIFIER && LA89_1<=IF)||(LA89_1>=INT && LA89_1<=INTLITERAL)||LA89_1==LBRACE||(LA89_1>=LONG && LA89_1<=LT)||(LA89_1>=MONKEYS_AT && LA89_1<=NULL)||LA89_1==PLUS||(LA89_1>=PLUSPLUS && LA89_1<=PUBLIC)||LA89_1==RETURN||(LA89_1>=SEMI && LA89_1<=SHORT)||(LA89_1>=STATIC && LA89_1<=SUB)||(LA89_1>=SUBSUB && LA89_1<=SYNCHRONIZED)||(LA89_1>=THIS && LA89_1<=THROW)||(LA89_1>=TILDE && LA89_1<=WHILE)))
				{
					alt89 = 1;
				}


				} finally { DebugExitDecision(89); }
				switch ( alt89 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:806:10: blockStatement
					{
					DebugLocation(806, 10);
					PushFollow(Follow._blockStatement_in_block4178);
					blockStatement268=blockStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, blockStatement268.Tree);

					}
					break;

				default:
					goto loop89;
				}
			}

			loop89:
				;

			} finally { DebugExitSubRule(89); }

			DebugLocation(808, 9);
			char_literal269=(CommonToken)Match(input,RBRACE,Follow._RBRACE_in_block4199); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal269_tree = (CommonTree)adaptor.Create(char_literal269);
			adaptor.AddChild(root_0, char_literal269_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 54);
			LeaveRule("block", 54);
			LeaveRule_block();
			if (state.backtracking > 0) { Memoize(input, 54, block_StartIndex); }

		}
		DebugLocation(809, 4);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_blockStatement();
	partial void LeaveRule_blockStatement();
	// $ANTLR start "blockStatement"
	// Java.g:835:1: blockStatement : ( localVariableDeclarationStatement | classOrInterfaceDeclaration | statement );
	[GrammarRule("blockStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> blockStatement()
	{
		EnterRule_blockStatement();
		EnterRule("blockStatement", 55);
		TraceIn("blockStatement", 55);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int blockStatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> localVariableDeclarationStatement270 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> classOrInterfaceDeclaration271 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement272 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "blockStatement");
		DebugLocation(835, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// Java.g:836:5: ( localVariableDeclarationStatement | classOrInterfaceDeclaration | statement )
			int alt90=3;
			try { DebugEnterDecision(90, false);
			switch (input.LA(1))
			{
			case FINAL:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred126_Java_fragment)))
				{
					alt90 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MONKEYS_AT:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred126_Java_fragment)))
				{
					alt90 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((true))
				{
					alt90 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred125_Java_fragment)))
				{
					alt90 = 1;
				}
				else if ((true))
				{
					alt90 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ABSTRACT:
			case CLASS:
			case ENUM:
			case INTERFACE:
			case NATIVE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case STRICTFP:
			case TRANSIENT:
			case VOLATILE:
				{
				alt90 = 2;
				}
				break;
			case SYNCHRONIZED:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred126_Java_fragment)))
				{
					alt90 = 2;
				}
				else if ((true))
				{
					alt90 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case ASSERT:
			case BANG:
			case BREAK:
			case CHARLITERAL:
			case CONTINUE:
			case DO:
			case DOUBLELITERAL:
			case FALSE:
			case FLOATLITERAL:
			case FOR:
			case IF:
			case INTLITERAL:
			case LBRACE:
			case LONGLITERAL:
			case LPAREN:
			case NEW:
			case NULL:
			case PLUS:
			case PLUSPLUS:
			case RETURN:
			case SEMI:
			case STRINGLITERAL:
			case SUB:
			case SUBSUB:
			case SUPER:
			case SWITCH:
			case THIS:
			case THROW:
			case TILDE:
			case TRUE:
			case TRY:
			case VOID:
			case WHILE:
				{
				alt90 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:836:9: localVariableDeclarationStatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(836, 9);
				PushFollow(Follow._localVariableDeclarationStatement_in_blockStatement4221);
				localVariableDeclarationStatement270=localVariableDeclarationStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, localVariableDeclarationStatement270.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:837:9: classOrInterfaceDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(837, 9);
				PushFollow(Follow._classOrInterfaceDeclaration_in_blockStatement4231);
				classOrInterfaceDeclaration271=classOrInterfaceDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classOrInterfaceDeclaration271.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:838:9: statement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(838, 9);
				PushFollow(Follow._statement_in_blockStatement4241);
				statement272=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement272.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("blockStatement", 55);
			LeaveRule("blockStatement", 55);
			LeaveRule_blockStatement();
			if (state.backtracking > 0) { Memoize(input, 55, blockStatement_StartIndex); }

		}
		DebugLocation(839, 4);
		} finally { DebugExitRule(GrammarFileName, "blockStatement"); }
		return retval;

	}
	// $ANTLR end "blockStatement"

	partial void EnterRule_localVariableDeclarationStatement();
	partial void LeaveRule_localVariableDeclarationStatement();
	// $ANTLR start "localVariableDeclarationStatement"
	// Java.g:842:1: localVariableDeclarationStatement : localVariableDeclaration ';' ;
	[GrammarRule("localVariableDeclarationStatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> localVariableDeclarationStatement()
	{
		EnterRule_localVariableDeclarationStatement();
		EnterRule("localVariableDeclarationStatement", 56);
		TraceIn("localVariableDeclarationStatement", 56);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int localVariableDeclarationStatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal274 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> localVariableDeclaration273 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal274_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "localVariableDeclarationStatement");
		DebugLocation(842, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// Java.g:843:5: ( localVariableDeclaration ';' )
			DebugEnterAlt(1);
			// Java.g:843:9: localVariableDeclaration ';'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(843, 9);
			PushFollow(Follow._localVariableDeclaration_in_localVariableDeclarationStatement4262);
			localVariableDeclaration273=localVariableDeclaration();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, localVariableDeclaration273.Tree);
			DebugLocation(844, 9);
			char_literal274=(CommonToken)Match(input,SEMI,Follow._SEMI_in_localVariableDeclarationStatement4272); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal274_tree = (CommonTree)adaptor.Create(char_literal274);
			adaptor.AddChild(root_0, char_literal274_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localVariableDeclarationStatement", 56);
			LeaveRule("localVariableDeclarationStatement", 56);
			LeaveRule_localVariableDeclarationStatement();
			if (state.backtracking > 0) { Memoize(input, 56, localVariableDeclarationStatement_StartIndex); }

		}
		DebugLocation(845, 4);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclarationStatement"); }
		return retval;

	}
	// $ANTLR end "localVariableDeclarationStatement"

	partial void EnterRule_localVariableDeclaration();
	partial void LeaveRule_localVariableDeclaration();
	// $ANTLR start "localVariableDeclaration"
	// Java.g:847:1: localVariableDeclaration : variableModifiers type variableDeclarator ( ',' variableDeclarator )* ;
	[GrammarRule("localVariableDeclaration")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> localVariableDeclaration()
	{
		EnterRule_localVariableDeclaration();
		EnterRule("localVariableDeclaration", 57);
		TraceIn("localVariableDeclaration", 57);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int localVariableDeclaration_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal278 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableModifiers275 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type276 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarator277 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableDeclarator279 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal278_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "localVariableDeclaration");
		DebugLocation(847, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// Java.g:848:5: ( variableModifiers type variableDeclarator ( ',' variableDeclarator )* )
			DebugEnterAlt(1);
			// Java.g:848:9: variableModifiers type variableDeclarator ( ',' variableDeclarator )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(848, 9);
			PushFollow(Follow._variableModifiers_in_localVariableDeclaration4292);
			variableModifiers275=variableModifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableModifiers275.Tree);
			DebugLocation(848, 27);
			PushFollow(Follow._type_in_localVariableDeclaration4294);
			type276=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type276.Tree);
			DebugLocation(849, 9);
			PushFollow(Follow._variableDeclarator_in_localVariableDeclaration4304);
			variableDeclarator277=variableDeclarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarator277.Tree);
			DebugLocation(850, 9);
			// Java.g:850:9: ( ',' variableDeclarator )*
			try { DebugEnterSubRule(91);
			while (true)
			{
				int alt91=2;
				try { DebugEnterDecision(91, false);
				int LA91_1 = input.LA(1);

				if ((LA91_1==COMMA))
				{
					alt91 = 1;
				}


				} finally { DebugExitDecision(91); }
				switch ( alt91 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:850:10: ',' variableDeclarator
					{
					DebugLocation(850, 10);
					char_literal278=(CommonToken)Match(input,COMMA,Follow._COMMA_in_localVariableDeclaration4315); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal278_tree = (CommonTree)adaptor.Create(char_literal278);
					adaptor.AddChild(root_0, char_literal278_tree);
					}
					DebugLocation(850, 14);
					PushFollow(Follow._variableDeclarator_in_localVariableDeclaration4317);
					variableDeclarator279=variableDeclarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variableDeclarator279.Tree);

					}
					break;

				default:
					goto loop91;
				}
			}

			loop91:
				;

			} finally { DebugExitSubRule(91); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localVariableDeclaration", 57);
			LeaveRule("localVariableDeclaration", 57);
			LeaveRule_localVariableDeclaration();
			if (state.backtracking > 0) { Memoize(input, 57, localVariableDeclaration_StartIndex); }

		}
		DebugLocation(852, 4);
		} finally { DebugExitRule(GrammarFileName, "localVariableDeclaration"); }
		return retval;

	}
	// $ANTLR end "localVariableDeclaration"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// Java.g:854:1: statement : ( block | ( 'assert' ) expression ( ':' expression )? ';' | 'assert' expression ( ':' expression )? ';' | 'if' parExpression statement ( 'else' statement )? | forstatement | 'while' parExpression statement | 'do' statement 'while' parExpression ';' | trystatement | 'switch' parExpression '{' switchBlockStatementGroups '}' | 'synchronized' parExpression block | 'return' ( expression )? ';' | 'throw' expression ';' | 'break' ( IDENTIFIER )? ';' | 'continue' ( IDENTIFIER )? ';' | expression ';' | IDENTIFIER ':' statement | ';' );
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 58);
		TraceIn("statement", 58);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int statement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal281 = default(CommonToken);
		CommonToken char_literal283 = default(CommonToken);
		CommonToken char_literal285 = default(CommonToken);
		CommonToken string_literal286 = default(CommonToken);
		CommonToken char_literal288 = default(CommonToken);
		CommonToken char_literal290 = default(CommonToken);
		CommonToken string_literal291 = default(CommonToken);
		CommonToken string_literal294 = default(CommonToken);
		CommonToken string_literal297 = default(CommonToken);
		CommonToken string_literal300 = default(CommonToken);
		CommonToken string_literal302 = default(CommonToken);
		CommonToken char_literal304 = default(CommonToken);
		CommonToken string_literal306 = default(CommonToken);
		CommonToken char_literal308 = default(CommonToken);
		CommonToken char_literal310 = default(CommonToken);
		CommonToken string_literal311 = default(CommonToken);
		CommonToken string_literal314 = default(CommonToken);
		CommonToken char_literal316 = default(CommonToken);
		CommonToken string_literal317 = default(CommonToken);
		CommonToken char_literal319 = default(CommonToken);
		CommonToken string_literal320 = default(CommonToken);
		CommonToken IDENTIFIER321 = default(CommonToken);
		CommonToken char_literal322 = default(CommonToken);
		CommonToken string_literal323 = default(CommonToken);
		CommonToken IDENTIFIER324 = default(CommonToken);
		CommonToken char_literal325 = default(CommonToken);
		CommonToken char_literal327 = default(CommonToken);
		CommonToken IDENTIFIER328 = default(CommonToken);
		CommonToken char_literal329 = default(CommonToken);
		CommonToken char_literal331 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> block280 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression282 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression284 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression287 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression289 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> parExpression292 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement293 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement295 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> forstatement296 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> parExpression298 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement299 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement301 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> parExpression303 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> trystatement305 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> parExpression307 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> switchBlockStatementGroups309 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> parExpression312 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> block313 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression315 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression318 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression326 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement330 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal281_tree = default(CommonTree);
		CommonTree char_literal283_tree = default(CommonTree);
		CommonTree char_literal285_tree = default(CommonTree);
		CommonTree string_literal286_tree = default(CommonTree);
		CommonTree char_literal288_tree = default(CommonTree);
		CommonTree char_literal290_tree = default(CommonTree);
		CommonTree string_literal291_tree = default(CommonTree);
		CommonTree string_literal294_tree = default(CommonTree);
		CommonTree string_literal297_tree = default(CommonTree);
		CommonTree string_literal300_tree = default(CommonTree);
		CommonTree string_literal302_tree = default(CommonTree);
		CommonTree char_literal304_tree = default(CommonTree);
		CommonTree string_literal306_tree = default(CommonTree);
		CommonTree char_literal308_tree = default(CommonTree);
		CommonTree char_literal310_tree = default(CommonTree);
		CommonTree string_literal311_tree = default(CommonTree);
		CommonTree string_literal314_tree = default(CommonTree);
		CommonTree char_literal316_tree = default(CommonTree);
		CommonTree string_literal317_tree = default(CommonTree);
		CommonTree char_literal319_tree = default(CommonTree);
		CommonTree string_literal320_tree = default(CommonTree);
		CommonTree IDENTIFIER321_tree = default(CommonTree);
		CommonTree char_literal322_tree = default(CommonTree);
		CommonTree string_literal323_tree = default(CommonTree);
		CommonTree IDENTIFIER324_tree = default(CommonTree);
		CommonTree char_literal325_tree = default(CommonTree);
		CommonTree char_literal327_tree = default(CommonTree);
		CommonTree IDENTIFIER328_tree = default(CommonTree);
		CommonTree char_literal329_tree = default(CommonTree);
		CommonTree char_literal331_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(854, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// Java.g:855:5: ( block | ( 'assert' ) expression ( ':' expression )? ';' | 'assert' expression ( ':' expression )? ';' | 'if' parExpression statement ( 'else' statement )? | forstatement | 'while' parExpression statement | 'do' statement 'while' parExpression ';' | trystatement | 'switch' parExpression '{' switchBlockStatementGroups '}' | 'synchronized' parExpression block | 'return' ( expression )? ';' | 'throw' expression ';' | 'break' ( IDENTIFIER )? ';' | 'continue' ( IDENTIFIER )? ';' | expression ';' | IDENTIFIER ':' statement | ';' )
			int alt98=17;
			try { DebugEnterDecision(98, false);
			switch (input.LA(1))
			{
			case LBRACE:
				{
				alt98 = 1;
				}
				break;
			case ASSERT:
				{
				int LA98_2 = input.LA(2);

				if ((EvaluatePredicate(synpred130_Java_fragment)))
				{
					alt98 = 2;
				}
				else if ((EvaluatePredicate(synpred132_Java_fragment)))
				{
					alt98 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 98, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IF:
				{
				alt98 = 4;
				}
				break;
			case FOR:
				{
				alt98 = 5;
				}
				break;
			case WHILE:
				{
				alt98 = 6;
				}
				break;
			case DO:
				{
				alt98 = 7;
				}
				break;
			case TRY:
				{
				alt98 = 8;
				}
				break;
			case SWITCH:
				{
				alt98 = 9;
				}
				break;
			case SYNCHRONIZED:
				{
				alt98 = 10;
				}
				break;
			case RETURN:
				{
				alt98 = 11;
				}
				break;
			case THROW:
				{
				alt98 = 12;
				}
				break;
			case BREAK:
				{
				alt98 = 13;
				}
				break;
			case CONTINUE:
				{
				alt98 = 14;
				}
				break;
			case BANG:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARLITERAL:
			case DOUBLE:
			case DOUBLELITERAL:
			case FALSE:
			case FLOAT:
			case FLOATLITERAL:
			case INT:
			case INTLITERAL:
			case LONG:
			case LONGLITERAL:
			case LPAREN:
			case NEW:
			case NULL:
			case PLUS:
			case PLUSPLUS:
			case SHORT:
			case STRINGLITERAL:
			case SUB:
			case SUBSUB:
			case SUPER:
			case THIS:
			case TILDE:
			case TRUE:
			case VOID:
				{
				alt98 = 15;
				}
				break;
			case IDENTIFIER:
				{
				int LA98_2 = input.LA(2);

				if ((EvaluatePredicate(synpred148_Java_fragment)))
				{
					alt98 = 15;
				}
				else if ((EvaluatePredicate(synpred149_Java_fragment)))
				{
					alt98 = 16;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 98, 22, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SEMI:
				{
				alt98 = 17;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 98, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:855:9: block
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(855, 9);
				PushFollow(Follow._block_in_statement4348);
				block280=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block280.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:857:9: ( 'assert' ) expression ( ':' expression )? ';'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(857, 9);
				// Java.g:857:9: ( 'assert' )
				DebugEnterAlt(1);
				// Java.g:857:10: 'assert'
				{
				DebugLocation(857, 10);
				string_literal281=(CommonToken)Match(input,ASSERT,Follow._ASSERT_in_statement4372); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal281_tree = (CommonTree)adaptor.Create(string_literal281);
				adaptor.AddChild(root_0, string_literal281_tree);
				}

				}

				DebugLocation(859, 9);
				PushFollow(Follow._expression_in_statement4392);
				expression282=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression282.Tree);
				DebugLocation(859, 20);
				// Java.g:859:20: ( ':' expression )?
				int alt92=2;
				try { DebugEnterSubRule(92);
				try { DebugEnterDecision(92, false);
				int LA92_1 = input.LA(1);

				if ((LA92_1==COLON))
				{
					alt92 = 1;
				}
				} finally { DebugExitDecision(92); }
				switch (alt92)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:859:21: ':' expression
					{
					DebugLocation(859, 21);
					char_literal283=(CommonToken)Match(input,COLON,Follow._COLON_in_statement4395); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal283_tree = (CommonTree)adaptor.Create(char_literal283);
					adaptor.AddChild(root_0, char_literal283_tree);
					}
					DebugLocation(859, 25);
					PushFollow(Follow._expression_in_statement4397);
					expression284=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression284.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(92); }

				DebugLocation(859, 38);
				char_literal285=(CommonToken)Match(input,SEMI,Follow._SEMI_in_statement4401); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal285_tree = (CommonTree)adaptor.Create(char_literal285);
				adaptor.AddChild(root_0, char_literal285_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:860:9: 'assert' expression ( ':' expression )? ';'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(860, 9);
				string_literal286=(CommonToken)Match(input,ASSERT,Follow._ASSERT_in_statement4411); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal286_tree = (CommonTree)adaptor.Create(string_literal286);
				adaptor.AddChild(root_0, string_literal286_tree);
				}
				DebugLocation(860, 19);
				PushFollow(Follow._expression_in_statement4414);
				expression287=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression287.Tree);
				DebugLocation(860, 30);
				// Java.g:860:30: ( ':' expression )?
				int alt93=2;
				try { DebugEnterSubRule(93);
				try { DebugEnterDecision(93, false);
				int LA93_1 = input.LA(1);

				if ((LA93_1==COLON))
				{
					alt93 = 1;
				}
				} finally { DebugExitDecision(93); }
				switch (alt93)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:860:31: ':' expression
					{
					DebugLocation(860, 31);
					char_literal288=(CommonToken)Match(input,COLON,Follow._COLON_in_statement4417); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal288_tree = (CommonTree)adaptor.Create(char_literal288);
					adaptor.AddChild(root_0, char_literal288_tree);
					}
					DebugLocation(860, 35);
					PushFollow(Follow._expression_in_statement4419);
					expression289=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression289.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(93); }

				DebugLocation(860, 48);
				char_literal290=(CommonToken)Match(input,SEMI,Follow._SEMI_in_statement4423); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal290_tree = (CommonTree)adaptor.Create(char_literal290);
				adaptor.AddChild(root_0, char_literal290_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:861:9: 'if' parExpression statement ( 'else' statement )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(861, 9);
				string_literal291=(CommonToken)Match(input,IF,Follow._IF_in_statement4445); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal291_tree = (CommonTree)adaptor.Create(string_literal291);
				adaptor.AddChild(root_0, string_literal291_tree);
				}
				DebugLocation(861, 14);
				PushFollow(Follow._parExpression_in_statement4447);
				parExpression292=parExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parExpression292.Tree);
				DebugLocation(861, 28);
				PushFollow(Follow._statement_in_statement4449);
				statement293=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement293.Tree);
				DebugLocation(861, 38);
				// Java.g:861:38: ( 'else' statement )?
				int alt94=2;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, false);
				int LA94_1 = input.LA(1);

				if ((LA94_1==ELSE))
				{
					int LA94_2 = input.LA(2);

					if ((EvaluatePredicate(synpred133_Java_fragment)))
					{
						alt94 = 1;
					}
				}
				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:861:39: 'else' statement
					{
					DebugLocation(861, 39);
					string_literal294=(CommonToken)Match(input,ELSE,Follow._ELSE_in_statement4452); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal294_tree = (CommonTree)adaptor.Create(string_literal294);
					adaptor.AddChild(root_0, string_literal294_tree);
					}
					DebugLocation(861, 46);
					PushFollow(Follow._statement_in_statement4454);
					statement295=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement295.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(94); }


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:862:9: forstatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(862, 9);
				PushFollow(Follow._forstatement_in_statement4476);
				forstatement296=forstatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, forstatement296.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:863:9: 'while' parExpression statement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(863, 9);
				string_literal297=(CommonToken)Match(input,WHILE,Follow._WHILE_in_statement4486); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal297_tree = (CommonTree)adaptor.Create(string_literal297);
				adaptor.AddChild(root_0, string_literal297_tree);
				}
				DebugLocation(863, 17);
				PushFollow(Follow._parExpression_in_statement4488);
				parExpression298=parExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parExpression298.Tree);
				DebugLocation(863, 31);
				PushFollow(Follow._statement_in_statement4490);
				statement299=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement299.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:864:9: 'do' statement 'while' parExpression ';'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(864, 9);
				string_literal300=(CommonToken)Match(input,DO,Follow._DO_in_statement4500); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal300_tree = (CommonTree)adaptor.Create(string_literal300);
				adaptor.AddChild(root_0, string_literal300_tree);
				}
				DebugLocation(864, 14);
				PushFollow(Follow._statement_in_statement4502);
				statement301=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement301.Tree);
				DebugLocation(864, 24);
				string_literal302=(CommonToken)Match(input,WHILE,Follow._WHILE_in_statement4504); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal302_tree = (CommonTree)adaptor.Create(string_literal302);
				adaptor.AddChild(root_0, string_literal302_tree);
				}
				DebugLocation(864, 32);
				PushFollow(Follow._parExpression_in_statement4506);
				parExpression303=parExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parExpression303.Tree);
				DebugLocation(864, 46);
				char_literal304=(CommonToken)Match(input,SEMI,Follow._SEMI_in_statement4508); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal304_tree = (CommonTree)adaptor.Create(char_literal304);
				adaptor.AddChild(root_0, char_literal304_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Java.g:865:9: trystatement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(865, 9);
				PushFollow(Follow._trystatement_in_statement4518);
				trystatement305=trystatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, trystatement305.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Java.g:866:9: 'switch' parExpression '{' switchBlockStatementGroups '}'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(866, 9);
				string_literal306=(CommonToken)Match(input,SWITCH,Follow._SWITCH_in_statement4528); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal306_tree = (CommonTree)adaptor.Create(string_literal306);
				adaptor.AddChild(root_0, string_literal306_tree);
				}
				DebugLocation(866, 18);
				PushFollow(Follow._parExpression_in_statement4530);
				parExpression307=parExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parExpression307.Tree);
				DebugLocation(866, 32);
				char_literal308=(CommonToken)Match(input,LBRACE,Follow._LBRACE_in_statement4532); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal308_tree = (CommonTree)adaptor.Create(char_literal308);
				adaptor.AddChild(root_0, char_literal308_tree);
				}
				DebugLocation(866, 36);
				PushFollow(Follow._switchBlockStatementGroups_in_statement4534);
				switchBlockStatementGroups309=switchBlockStatementGroups();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, switchBlockStatementGroups309.Tree);
				DebugLocation(866, 63);
				char_literal310=(CommonToken)Match(input,RBRACE,Follow._RBRACE_in_statement4536); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal310_tree = (CommonTree)adaptor.Create(char_literal310);
				adaptor.AddChild(root_0, char_literal310_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Java.g:867:9: 'synchronized' parExpression block
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(867, 9);
				string_literal311=(CommonToken)Match(input,SYNCHRONIZED,Follow._SYNCHRONIZED_in_statement4546); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal311_tree = (CommonTree)adaptor.Create(string_literal311);
				adaptor.AddChild(root_0, string_literal311_tree);
				}
				DebugLocation(867, 24);
				PushFollow(Follow._parExpression_in_statement4548);
				parExpression312=parExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parExpression312.Tree);
				DebugLocation(867, 38);
				PushFollow(Follow._block_in_statement4550);
				block313=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block313.Tree);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Java.g:868:9: 'return' ( expression )? ';'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(868, 9);
				string_literal314=(CommonToken)Match(input,RETURN,Follow._RETURN_in_statement4560); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal314_tree = (CommonTree)adaptor.Create(string_literal314);
				adaptor.AddChild(root_0, string_literal314_tree);
				}
				DebugLocation(868, 18);
				// Java.g:868:18: ( expression )?
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, false);
				int LA95_1 = input.LA(1);

				if ((LA95_1==BANG||LA95_1==BOOLEAN||LA95_1==BYTE||(LA95_1>=CHAR && LA95_1<=CHARLITERAL)||(LA95_1>=DOUBLE && LA95_1<=DOUBLELITERAL)||LA95_1==FALSE||(LA95_1>=FLOAT && LA95_1<=FLOATLITERAL)||LA95_1==IDENTIFIER||LA95_1==INT||LA95_1==INTLITERAL||(LA95_1>=LONG && LA95_1<=LPAREN)||(LA95_1>=NEW && LA95_1<=NULL)||LA95_1==PLUS||LA95_1==PLUSPLUS||LA95_1==SHORT||(LA95_1>=STRINGLITERAL && LA95_1<=SUB)||(LA95_1>=SUBSUB && LA95_1<=SUPER)||LA95_1==THIS||LA95_1==TILDE||LA95_1==TRUE||LA95_1==VOID))
				{
					alt95 = 1;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:868:19: expression
					{
					DebugLocation(868, 19);
					PushFollow(Follow._expression_in_statement4563);
					expression315=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression315.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(95); }

				DebugLocation(868, 33);
				char_literal316=(CommonToken)Match(input,SEMI,Follow._SEMI_in_statement4568); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal316_tree = (CommonTree)adaptor.Create(char_literal316);
				adaptor.AddChild(root_0, char_literal316_tree);
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Java.g:869:9: 'throw' expression ';'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(869, 9);
				string_literal317=(CommonToken)Match(input,THROW,Follow._THROW_in_statement4578); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal317_tree = (CommonTree)adaptor.Create(string_literal317);
				adaptor.AddChild(root_0, string_literal317_tree);
				}
				DebugLocation(869, 17);
				PushFollow(Follow._expression_in_statement4580);
				expression318=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression318.Tree);
				DebugLocation(869, 28);
				char_literal319=(CommonToken)Match(input,SEMI,Follow._SEMI_in_statement4582); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal319_tree = (CommonTree)adaptor.Create(char_literal319);
				adaptor.AddChild(root_0, char_literal319_tree);
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// Java.g:870:9: 'break' ( IDENTIFIER )? ';'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(870, 9);
				string_literal320=(CommonToken)Match(input,BREAK,Follow._BREAK_in_statement4592); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal320_tree = (CommonTree)adaptor.Create(string_literal320);
				adaptor.AddChild(root_0, string_literal320_tree);
				}
				DebugLocation(871, 13);
				// Java.g:871:13: ( IDENTIFIER )?
				int alt96=2;
				try { DebugEnterSubRule(96);
				try { DebugEnterDecision(96, false);
				int LA96_1 = input.LA(1);

				if ((LA96_1==IDENTIFIER))
				{
					alt96 = 1;
				}
				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:871:14: IDENTIFIER
					{
					DebugLocation(871, 14);
					IDENTIFIER321=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_statement4607); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER321_tree = (CommonTree)adaptor.Create(IDENTIFIER321);
					adaptor.AddChild(root_0, IDENTIFIER321_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(96); }

				DebugLocation(872, 16);
				char_literal322=(CommonToken)Match(input,SEMI,Follow._SEMI_in_statement4624); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal322_tree = (CommonTree)adaptor.Create(char_literal322);
				adaptor.AddChild(root_0, char_literal322_tree);
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// Java.g:873:9: 'continue' ( IDENTIFIER )? ';'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(873, 9);
				string_literal323=(CommonToken)Match(input,CONTINUE,Follow._CONTINUE_in_statement4634); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal323_tree = (CommonTree)adaptor.Create(string_literal323);
				adaptor.AddChild(root_0, string_literal323_tree);
				}
				DebugLocation(874, 13);
				// Java.g:874:13: ( IDENTIFIER )?
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, false);
				int LA97_1 = input.LA(1);

				if ((LA97_1==IDENTIFIER))
				{
					alt97 = 1;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:874:14: IDENTIFIER
					{
					DebugLocation(874, 14);
					IDENTIFIER324=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_statement4649); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER324_tree = (CommonTree)adaptor.Create(IDENTIFIER324);
					adaptor.AddChild(root_0, IDENTIFIER324_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(97); }

				DebugLocation(875, 16);
				char_literal325=(CommonToken)Match(input,SEMI,Follow._SEMI_in_statement4666); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal325_tree = (CommonTree)adaptor.Create(char_literal325);
				adaptor.AddChild(root_0, char_literal325_tree);
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// Java.g:876:9: expression ';'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(876, 9);
				PushFollow(Follow._expression_in_statement4676);
				expression326=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression326.Tree);
				DebugLocation(876, 21);
				char_literal327=(CommonToken)Match(input,SEMI,Follow._SEMI_in_statement4679); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal327_tree = (CommonTree)adaptor.Create(char_literal327);
				adaptor.AddChild(root_0, char_literal327_tree);
				}

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// Java.g:877:9: IDENTIFIER ':' statement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(877, 9);
				IDENTIFIER328=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_statement4694); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER328_tree = (CommonTree)adaptor.Create(IDENTIFIER328);
				adaptor.AddChild(root_0, IDENTIFIER328_tree);
				}
				DebugLocation(877, 20);
				char_literal329=(CommonToken)Match(input,COLON,Follow._COLON_in_statement4696); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal329_tree = (CommonTree)adaptor.Create(char_literal329);
				adaptor.AddChild(root_0, char_literal329_tree);
				}
				DebugLocation(877, 24);
				PushFollow(Follow._statement_in_statement4698);
				statement330=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement330.Tree);

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// Java.g:878:9: ';'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(878, 9);
				char_literal331=(CommonToken)Match(input,SEMI,Follow._SEMI_in_statement4708); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal331_tree = (CommonTree)adaptor.Create(char_literal331);
				adaptor.AddChild(root_0, char_literal331_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 58);
			LeaveRule("statement", 58);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 58, statement_StartIndex); }

		}
		DebugLocation(880, 4);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_switchBlockStatementGroups();
	partial void LeaveRule_switchBlockStatementGroups();
	// $ANTLR start "switchBlockStatementGroups"
	// Java.g:882:1: switchBlockStatementGroups : ( switchBlockStatementGroup )* ;
	[GrammarRule("switchBlockStatementGroups")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> switchBlockStatementGroups()
	{
		EnterRule_switchBlockStatementGroups();
		EnterRule("switchBlockStatementGroups", 59);
		TraceIn("switchBlockStatementGroups", 59);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int switchBlockStatementGroups_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> switchBlockStatementGroup332 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "switchBlockStatementGroups");
		DebugLocation(882, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// Java.g:883:5: ( ( switchBlockStatementGroup )* )
			DebugEnterAlt(1);
			// Java.g:883:9: ( switchBlockStatementGroup )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(883, 9);
			// Java.g:883:9: ( switchBlockStatementGroup )*
			try { DebugEnterSubRule(99);
			while (true)
			{
				int alt99=2;
				try { DebugEnterDecision(99, false);
				int LA99_1 = input.LA(1);

				if ((LA99_1==CASE||LA99_1==DEFAULT))
				{
					alt99 = 1;
				}


				} finally { DebugExitDecision(99); }
				switch ( alt99 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:883:10: switchBlockStatementGroup
					{
					DebugLocation(883, 10);
					PushFollow(Follow._switchBlockStatementGroup_in_switchBlockStatementGroups4730);
					switchBlockStatementGroup332=switchBlockStatementGroup();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, switchBlockStatementGroup332.Tree);

					}
					break;

				default:
					goto loop99;
				}
			}

			loop99:
				;

			} finally { DebugExitSubRule(99); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchBlockStatementGroups", 59);
			LeaveRule("switchBlockStatementGroups", 59);
			LeaveRule_switchBlockStatementGroups();
			if (state.backtracking > 0) { Memoize(input, 59, switchBlockStatementGroups_StartIndex); }

		}
		DebugLocation(884, 4);
		} finally { DebugExitRule(GrammarFileName, "switchBlockStatementGroups"); }
		return retval;

	}
	// $ANTLR end "switchBlockStatementGroups"

	partial void EnterRule_switchBlockStatementGroup();
	partial void LeaveRule_switchBlockStatementGroup();
	// $ANTLR start "switchBlockStatementGroup"
	// Java.g:886:1: switchBlockStatementGroup : switchLabel ( blockStatement )* ;
	[GrammarRule("switchBlockStatementGroup")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> switchBlockStatementGroup()
	{
		EnterRule_switchBlockStatementGroup();
		EnterRule("switchBlockStatementGroup", 60);
		TraceIn("switchBlockStatementGroup", 60);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int switchBlockStatementGroup_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> switchLabel333 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> blockStatement334 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "switchBlockStatementGroup");
		DebugLocation(886, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// Java.g:887:5: ( switchLabel ( blockStatement )* )
			DebugEnterAlt(1);
			// Java.g:888:9: switchLabel ( blockStatement )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(888, 9);
			PushFollow(Follow._switchLabel_in_switchBlockStatementGroup4759);
			switchLabel333=switchLabel();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, switchLabel333.Tree);
			DebugLocation(889, 9);
			// Java.g:889:9: ( blockStatement )*
			try { DebugEnterSubRule(100);
			while (true)
			{
				int alt100=2;
				try { DebugEnterDecision(100, false);
				int LA100_1 = input.LA(1);

				if ((LA100_1==ABSTRACT||(LA100_1>=ASSERT && LA100_1<=BANG)||(LA100_1>=BOOLEAN && LA100_1<=BYTE)||(LA100_1>=CHAR && LA100_1<=CLASS)||LA100_1==CONTINUE||LA100_1==DO||(LA100_1>=DOUBLE && LA100_1<=DOUBLELITERAL)||LA100_1==ENUM||(LA100_1>=FALSE && LA100_1<=FINAL)||(LA100_1>=FLOAT && LA100_1<=FOR)||(LA100_1>=IDENTIFIER && LA100_1<=IF)||(LA100_1>=INT && LA100_1<=INTLITERAL)||LA100_1==LBRACE||(LA100_1>=LONG && LA100_1<=LT)||(LA100_1>=MONKEYS_AT && LA100_1<=NULL)||LA100_1==PLUS||(LA100_1>=PLUSPLUS && LA100_1<=PUBLIC)||LA100_1==RETURN||(LA100_1>=SEMI && LA100_1<=SHORT)||(LA100_1>=STATIC && LA100_1<=SUB)||(LA100_1>=SUBSUB && LA100_1<=SYNCHRONIZED)||(LA100_1>=THIS && LA100_1<=THROW)||(LA100_1>=TILDE && LA100_1<=WHILE)))
				{
					alt100 = 1;
				}


				} finally { DebugExitDecision(100); }
				switch ( alt100 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:889:10: blockStatement
					{
					DebugLocation(889, 10);
					PushFollow(Follow._blockStatement_in_switchBlockStatementGroup4770);
					blockStatement334=blockStatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, blockStatement334.Tree);

					}
					break;

				default:
					goto loop100;
				}
			}

			loop100:
				;

			} finally { DebugExitSubRule(100); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchBlockStatementGroup", 60);
			LeaveRule("switchBlockStatementGroup", 60);
			LeaveRule_switchBlockStatementGroup();
			if (state.backtracking > 0) { Memoize(input, 60, switchBlockStatementGroup_StartIndex); }

		}
		DebugLocation(891, 4);
		} finally { DebugExitRule(GrammarFileName, "switchBlockStatementGroup"); }
		return retval;

	}
	// $ANTLR end "switchBlockStatementGroup"

	partial void EnterRule_switchLabel();
	partial void LeaveRule_switchLabel();
	// $ANTLR start "switchLabel"
	// Java.g:893:1: switchLabel : ( 'case' expression ':' | 'default' ':' );
	[GrammarRule("switchLabel")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> switchLabel()
	{
		EnterRule_switchLabel();
		EnterRule("switchLabel", 61);
		TraceIn("switchLabel", 61);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int switchLabel_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal335 = default(CommonToken);
		CommonToken char_literal337 = default(CommonToken);
		CommonToken string_literal338 = default(CommonToken);
		CommonToken char_literal339 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression336 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal335_tree = default(CommonTree);
		CommonTree char_literal337_tree = default(CommonTree);
		CommonTree string_literal338_tree = default(CommonTree);
		CommonTree char_literal339_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "switchLabel");
		DebugLocation(893, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// Java.g:894:5: ( 'case' expression ':' | 'default' ':' )
			int alt101=2;
			try { DebugEnterDecision(101, false);
			int LA101_1 = input.LA(1);

			if ((LA101_1==CASE))
			{
				alt101 = 1;
			}
			else if ((LA101_1==DEFAULT))
			{
				alt101 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 101, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:894:9: 'case' expression ':'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(894, 9);
				string_literal335=(CommonToken)Match(input,CASE,Follow._CASE_in_switchLabel4801); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal335_tree = (CommonTree)adaptor.Create(string_literal335);
				adaptor.AddChild(root_0, string_literal335_tree);
				}
				DebugLocation(894, 16);
				PushFollow(Follow._expression_in_switchLabel4803);
				expression336=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression336.Tree);
				DebugLocation(894, 27);
				char_literal337=(CommonToken)Match(input,COLON,Follow._COLON_in_switchLabel4805); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal337_tree = (CommonTree)adaptor.Create(char_literal337);
				adaptor.AddChild(root_0, char_literal337_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:895:9: 'default' ':'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(895, 9);
				string_literal338=(CommonToken)Match(input,DEFAULT,Follow._DEFAULT_in_switchLabel4815); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal338_tree = (CommonTree)adaptor.Create(string_literal338);
				adaptor.AddChild(root_0, string_literal338_tree);
				}
				DebugLocation(895, 19);
				char_literal339=(CommonToken)Match(input,COLON,Follow._COLON_in_switchLabel4817); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal339_tree = (CommonTree)adaptor.Create(char_literal339);
				adaptor.AddChild(root_0, char_literal339_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switchLabel", 61);
			LeaveRule("switchLabel", 61);
			LeaveRule_switchLabel();
			if (state.backtracking > 0) { Memoize(input, 61, switchLabel_StartIndex); }

		}
		DebugLocation(896, 4);
		} finally { DebugExitRule(GrammarFileName, "switchLabel"); }
		return retval;

	}
	// $ANTLR end "switchLabel"

	partial void EnterRule_trystatement();
	partial void LeaveRule_trystatement();
	// $ANTLR start "trystatement"
	// Java.g:899:1: trystatement : 'try' block ( catches 'finally' block | catches | 'finally' block ) ;
	[GrammarRule("trystatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> trystatement()
	{
		EnterRule_trystatement();
		EnterRule("trystatement", 62);
		TraceIn("trystatement", 62);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int trystatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal340 = default(CommonToken);
		CommonToken string_literal343 = default(CommonToken);
		CommonToken string_literal346 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> block341 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> catches342 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> block344 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> catches345 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> block347 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal340_tree = default(CommonTree);
		CommonTree string_literal343_tree = default(CommonTree);
		CommonTree string_literal346_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "trystatement");
		DebugLocation(899, 5);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// Java.g:900:5: ( 'try' block ( catches 'finally' block | catches | 'finally' block ) )
			DebugEnterAlt(1);
			// Java.g:900:9: 'try' block ( catches 'finally' block | catches | 'finally' block )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(900, 9);
			string_literal340=(CommonToken)Match(input,TRY,Follow._TRY_in_trystatement4838); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal340_tree = (CommonTree)adaptor.Create(string_literal340);
			adaptor.AddChild(root_0, string_literal340_tree);
			}
			DebugLocation(900, 15);
			PushFollow(Follow._block_in_trystatement4840);
			block341=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block341.Tree);
			DebugLocation(901, 9);
			// Java.g:901:9: ( catches 'finally' block | catches | 'finally' block )
			int alt102=3;
			try { DebugEnterSubRule(102);
			try { DebugEnterDecision(102, false);
			int LA102_1 = input.LA(1);

			if ((LA102_1==CATCH))
			{
				int LA102_2 = input.LA(2);

				if ((EvaluatePredicate(synpred153_Java_fragment)))
				{
					alt102 = 1;
				}
				else if ((EvaluatePredicate(synpred154_Java_fragment)))
				{
					alt102 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA102_1==FINALLY))
			{
				alt102 = 3;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 102, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(102); }
			switch (alt102)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:901:13: catches 'finally' block
				{
				DebugLocation(901, 13);
				PushFollow(Follow._catches_in_trystatement4854);
				catches342=catches();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, catches342.Tree);
				DebugLocation(901, 21);
				string_literal343=(CommonToken)Match(input,FINALLY,Follow._FINALLY_in_trystatement4856); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal343_tree = (CommonTree)adaptor.Create(string_literal343);
				adaptor.AddChild(root_0, string_literal343_tree);
				}
				DebugLocation(901, 31);
				PushFollow(Follow._block_in_trystatement4858);
				block344=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block344.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:902:13: catches
				{
				DebugLocation(902, 13);
				PushFollow(Follow._catches_in_trystatement4872);
				catches345=catches();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, catches345.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:903:13: 'finally' block
				{
				DebugLocation(903, 13);
				string_literal346=(CommonToken)Match(input,FINALLY,Follow._FINALLY_in_trystatement4886); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal346_tree = (CommonTree)adaptor.Create(string_literal346);
				adaptor.AddChild(root_0, string_literal346_tree);
				}
				DebugLocation(903, 23);
				PushFollow(Follow._block_in_trystatement4888);
				block347=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block347.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(102); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("trystatement", 62);
			LeaveRule("trystatement", 62);
			LeaveRule_trystatement();
			if (state.backtracking > 0) { Memoize(input, 62, trystatement_StartIndex); }

		}
		DebugLocation(905, 5);
		} finally { DebugExitRule(GrammarFileName, "trystatement"); }
		return retval;

	}
	// $ANTLR end "trystatement"

	partial void EnterRule_catches();
	partial void LeaveRule_catches();
	// $ANTLR start "catches"
	// Java.g:907:1: catches : catchClause ( catchClause )* ;
	[GrammarRule("catches")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> catches()
	{
		EnterRule_catches();
		EnterRule("catches", 63);
		TraceIn("catches", 63);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int catches_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> catchClause348 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> catchClause349 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "catches");
		DebugLocation(907, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// Java.g:908:5: ( catchClause ( catchClause )* )
			DebugEnterAlt(1);
			// Java.g:908:9: catchClause ( catchClause )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(908, 9);
			PushFollow(Follow._catchClause_in_catches4919);
			catchClause348=catchClause();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, catchClause348.Tree);
			DebugLocation(909, 9);
			// Java.g:909:9: ( catchClause )*
			try { DebugEnterSubRule(103);
			while (true)
			{
				int alt103=2;
				try { DebugEnterDecision(103, false);
				int LA103_1 = input.LA(1);

				if ((LA103_1==CATCH))
				{
					alt103 = 1;
				}


				} finally { DebugExitDecision(103); }
				switch ( alt103 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:909:10: catchClause
					{
					DebugLocation(909, 10);
					PushFollow(Follow._catchClause_in_catches4930);
					catchClause349=catchClause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, catchClause349.Tree);

					}
					break;

				default:
					goto loop103;
				}
			}

			loop103:
				;

			} finally { DebugExitSubRule(103); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("catches", 63);
			LeaveRule("catches", 63);
			LeaveRule_catches();
			if (state.backtracking > 0) { Memoize(input, 63, catches_StartIndex); }

		}
		DebugLocation(911, 4);
		} finally { DebugExitRule(GrammarFileName, "catches"); }
		return retval;

	}
	// $ANTLR end "catches"

	partial void EnterRule_catchClause();
	partial void LeaveRule_catchClause();
	// $ANTLR start "catchClause"
	// Java.g:913:1: catchClause : 'catch' '(' formalParameter ')' block ;
	[GrammarRule("catchClause")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> catchClause()
	{
		EnterRule_catchClause();
		EnterRule("catchClause", 64);
		TraceIn("catchClause", 64);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int catchClause_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal350 = default(CommonToken);
		CommonToken char_literal351 = default(CommonToken);
		CommonToken char_literal353 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> formalParameter352 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> block354 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal350_tree = default(CommonTree);
		CommonTree char_literal351_tree = default(CommonTree);
		CommonTree char_literal353_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "catchClause");
		DebugLocation(913, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// Java.g:914:5: ( 'catch' '(' formalParameter ')' block )
			DebugEnterAlt(1);
			// Java.g:914:9: 'catch' '(' formalParameter ')' block
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(914, 9);
			string_literal350=(CommonToken)Match(input,CATCH,Follow._CATCH_in_catchClause4961); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal350_tree = (CommonTree)adaptor.Create(string_literal350);
			adaptor.AddChild(root_0, string_literal350_tree);
			}
			DebugLocation(914, 17);
			char_literal351=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_catchClause4963); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal351_tree = (CommonTree)adaptor.Create(char_literal351);
			adaptor.AddChild(root_0, char_literal351_tree);
			}
			DebugLocation(914, 21);
			PushFollow(Follow._formalParameter_in_catchClause4965);
			formalParameter352=formalParameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, formalParameter352.Tree);
			DebugLocation(915, 9);
			char_literal353=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_catchClause4975); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal353_tree = (CommonTree)adaptor.Create(char_literal353);
			adaptor.AddChild(root_0, char_literal353_tree);
			}
			DebugLocation(915, 13);
			PushFollow(Follow._block_in_catchClause4977);
			block354=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block354.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("catchClause", 64);
			LeaveRule("catchClause", 64);
			LeaveRule_catchClause();
			if (state.backtracking > 0) { Memoize(input, 64, catchClause_StartIndex); }

		}
		DebugLocation(916, 4);
		} finally { DebugExitRule(GrammarFileName, "catchClause"); }
		return retval;

	}
	// $ANTLR end "catchClause"

	partial void EnterRule_formalParameter();
	partial void LeaveRule_formalParameter();
	// $ANTLR start "formalParameter"
	// Java.g:918:1: formalParameter : variableModifiers type IDENTIFIER ( '[' ']' )* ;
	[GrammarRule("formalParameter")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> formalParameter()
	{
		EnterRule_formalParameter();
		EnterRule("formalParameter", 65);
		TraceIn("formalParameter", 65);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int formalParameter_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENTIFIER357 = default(CommonToken);
		CommonToken char_literal358 = default(CommonToken);
		CommonToken char_literal359 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableModifiers355 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type356 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree IDENTIFIER357_tree = default(CommonTree);
		CommonTree char_literal358_tree = default(CommonTree);
		CommonTree char_literal359_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "formalParameter");
		DebugLocation(918, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// Java.g:919:5: ( variableModifiers type IDENTIFIER ( '[' ']' )* )
			DebugEnterAlt(1);
			// Java.g:919:9: variableModifiers type IDENTIFIER ( '[' ']' )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(919, 9);
			PushFollow(Follow._variableModifiers_in_formalParameter4998);
			variableModifiers355=variableModifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableModifiers355.Tree);
			DebugLocation(919, 27);
			PushFollow(Follow._type_in_formalParameter5000);
			type356=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type356.Tree);
			DebugLocation(919, 32);
			IDENTIFIER357=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_formalParameter5002); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER357_tree = (CommonTree)adaptor.Create(IDENTIFIER357);
			adaptor.AddChild(root_0, IDENTIFIER357_tree);
			}
			DebugLocation(920, 9);
			// Java.g:920:9: ( '[' ']' )*
			try { DebugEnterSubRule(104);
			while (true)
			{
				int alt104=2;
				try { DebugEnterDecision(104, false);
				int LA104_1 = input.LA(1);

				if ((LA104_1==LBRACKET))
				{
					alt104 = 1;
				}


				} finally { DebugExitDecision(104); }
				switch ( alt104 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:920:10: '[' ']'
					{
					DebugLocation(920, 10);
					char_literal358=(CommonToken)Match(input,LBRACKET,Follow._LBRACKET_in_formalParameter5013); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal358_tree = (CommonTree)adaptor.Create(char_literal358);
					adaptor.AddChild(root_0, char_literal358_tree);
					}
					DebugLocation(920, 14);
					char_literal359=(CommonToken)Match(input,RBRACKET,Follow._RBRACKET_in_formalParameter5015); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal359_tree = (CommonTree)adaptor.Create(char_literal359);
					adaptor.AddChild(root_0, char_literal359_tree);
					}

					}
					break;

				default:
					goto loop104;
				}
			}

			loop104:
				;

			} finally { DebugExitSubRule(104); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formalParameter", 65);
			LeaveRule("formalParameter", 65);
			LeaveRule_formalParameter();
			if (state.backtracking > 0) { Memoize(input, 65, formalParameter_StartIndex); }

		}
		DebugLocation(922, 4);
		} finally { DebugExitRule(GrammarFileName, "formalParameter"); }
		return retval;

	}
	// $ANTLR end "formalParameter"

	partial void EnterRule_forstatement();
	partial void LeaveRule_forstatement();
	// $ANTLR start "forstatement"
	// Java.g:924:1: forstatement : ( 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement | 'for' '(' ( forInit )? ';' ( expression )? ';' ( expressionList )? ')' statement );
	[GrammarRule("forstatement")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> forstatement()
	{
		EnterRule_forstatement();
		EnterRule("forstatement", 66);
		TraceIn("forstatement", 66);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int forstatement_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal360 = default(CommonToken);
		CommonToken char_literal361 = default(CommonToken);
		CommonToken IDENTIFIER364 = default(CommonToken);
		CommonToken char_literal365 = default(CommonToken);
		CommonToken char_literal367 = default(CommonToken);
		CommonToken string_literal369 = default(CommonToken);
		CommonToken char_literal370 = default(CommonToken);
		CommonToken char_literal372 = default(CommonToken);
		CommonToken char_literal374 = default(CommonToken);
		CommonToken char_literal376 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableModifiers362 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type363 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression366 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement368 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> forInit371 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression373 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expressionList375 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> statement377 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal360_tree = default(CommonTree);
		CommonTree char_literal361_tree = default(CommonTree);
		CommonTree IDENTIFIER364_tree = default(CommonTree);
		CommonTree char_literal365_tree = default(CommonTree);
		CommonTree char_literal367_tree = default(CommonTree);
		CommonTree string_literal369_tree = default(CommonTree);
		CommonTree char_literal370_tree = default(CommonTree);
		CommonTree char_literal372_tree = default(CommonTree);
		CommonTree char_literal374_tree = default(CommonTree);
		CommonTree char_literal376_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "forstatement");
		DebugLocation(924, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }

			// Java.g:925:5: ( 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement | 'for' '(' ( forInit )? ';' ( expression )? ';' ( expressionList )? ')' statement )
			int alt108=2;
			try { DebugEnterDecision(108, false);
			int LA108_1 = input.LA(1);

			if ((LA108_1==FOR))
			{
				int LA108_2 = input.LA(2);

				if ((EvaluatePredicate(synpred157_Java_fragment)))
				{
					alt108 = 1;
				}
				else if ((true))
				{
					alt108 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 108, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 108, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(108); }
			switch (alt108)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:927:9: 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(927, 9);
				string_literal360=(CommonToken)Match(input,FOR,Follow._FOR_in_forstatement5064); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal360_tree = (CommonTree)adaptor.Create(string_literal360);
				adaptor.AddChild(root_0, string_literal360_tree);
				}
				DebugLocation(927, 15);
				char_literal361=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_forstatement5066); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal361_tree = (CommonTree)adaptor.Create(char_literal361);
				adaptor.AddChild(root_0, char_literal361_tree);
				}
				DebugLocation(927, 19);
				PushFollow(Follow._variableModifiers_in_forstatement5068);
				variableModifiers362=variableModifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableModifiers362.Tree);
				DebugLocation(927, 37);
				PushFollow(Follow._type_in_forstatement5070);
				type363=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type363.Tree);
				DebugLocation(927, 42);
				IDENTIFIER364=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_forstatement5072); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER364_tree = (CommonTree)adaptor.Create(IDENTIFIER364);
				adaptor.AddChild(root_0, IDENTIFIER364_tree);
				}
				DebugLocation(927, 53);
				char_literal365=(CommonToken)Match(input,COLON,Follow._COLON_in_forstatement5074); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal365_tree = (CommonTree)adaptor.Create(char_literal365);
				adaptor.AddChild(root_0, char_literal365_tree);
				}
				DebugLocation(928, 9);
				PushFollow(Follow._expression_in_forstatement5085);
				expression366=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression366.Tree);
				DebugLocation(928, 20);
				char_literal367=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_forstatement5087); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal367_tree = (CommonTree)adaptor.Create(char_literal367);
				adaptor.AddChild(root_0, char_literal367_tree);
				}
				DebugLocation(928, 24);
				PushFollow(Follow._statement_in_forstatement5089);
				statement368=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement368.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:931:9: 'for' '(' ( forInit )? ';' ( expression )? ';' ( expressionList )? ')' statement
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(931, 9);
				string_literal369=(CommonToken)Match(input,FOR,Follow._FOR_in_forstatement5121); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal369_tree = (CommonTree)adaptor.Create(string_literal369);
				adaptor.AddChild(root_0, string_literal369_tree);
				}
				DebugLocation(931, 15);
				char_literal370=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_forstatement5123); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal370_tree = (CommonTree)adaptor.Create(char_literal370);
				adaptor.AddChild(root_0, char_literal370_tree);
				}
				DebugLocation(932, 17);
				// Java.g:932:17: ( forInit )?
				int alt105=2;
				try { DebugEnterSubRule(105);
				try { DebugEnterDecision(105, false);
				int LA105_1 = input.LA(1);

				if ((LA105_1==BANG||LA105_1==BOOLEAN||LA105_1==BYTE||(LA105_1>=CHAR && LA105_1<=CHARLITERAL)||(LA105_1>=DOUBLE && LA105_1<=DOUBLELITERAL)||(LA105_1>=FALSE && LA105_1<=FINAL)||(LA105_1>=FLOAT && LA105_1<=FLOATLITERAL)||LA105_1==IDENTIFIER||LA105_1==INT||LA105_1==INTLITERAL||(LA105_1>=LONG && LA105_1<=LPAREN)||LA105_1==MONKEYS_AT||(LA105_1>=NEW && LA105_1<=NULL)||LA105_1==PLUS||LA105_1==PLUSPLUS||LA105_1==SHORT||(LA105_1>=STRINGLITERAL && LA105_1<=SUB)||(LA105_1>=SUBSUB && LA105_1<=SUPER)||LA105_1==THIS||LA105_1==TILDE||LA105_1==TRUE||LA105_1==VOID))
				{
					alt105 = 1;
				}
				} finally { DebugExitDecision(105); }
				switch (alt105)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:932:18: forInit
					{
					DebugLocation(932, 18);
					PushFollow(Follow._forInit_in_forstatement5143);
					forInit371=forInit();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, forInit371.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(105); }

				DebugLocation(933, 20);
				char_literal372=(CommonToken)Match(input,SEMI,Follow._SEMI_in_forstatement5164); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal372_tree = (CommonTree)adaptor.Create(char_literal372);
				adaptor.AddChild(root_0, char_literal372_tree);
				}
				DebugLocation(934, 17);
				// Java.g:934:17: ( expression )?
				int alt106=2;
				try { DebugEnterSubRule(106);
				try { DebugEnterDecision(106, false);
				int LA106_1 = input.LA(1);

				if ((LA106_1==BANG||LA106_1==BOOLEAN||LA106_1==BYTE||(LA106_1>=CHAR && LA106_1<=CHARLITERAL)||(LA106_1>=DOUBLE && LA106_1<=DOUBLELITERAL)||LA106_1==FALSE||(LA106_1>=FLOAT && LA106_1<=FLOATLITERAL)||LA106_1==IDENTIFIER||LA106_1==INT||LA106_1==INTLITERAL||(LA106_1>=LONG && LA106_1<=LPAREN)||(LA106_1>=NEW && LA106_1<=NULL)||LA106_1==PLUS||LA106_1==PLUSPLUS||LA106_1==SHORT||(LA106_1>=STRINGLITERAL && LA106_1<=SUB)||(LA106_1>=SUBSUB && LA106_1<=SUPER)||LA106_1==THIS||LA106_1==TILDE||LA106_1==TRUE||LA106_1==VOID))
				{
					alt106 = 1;
				}
				} finally { DebugExitDecision(106); }
				switch (alt106)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:934:18: expression
					{
					DebugLocation(934, 18);
					PushFollow(Follow._expression_in_forstatement5184);
					expression373=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression373.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(106); }

				DebugLocation(935, 20);
				char_literal374=(CommonToken)Match(input,SEMI,Follow._SEMI_in_forstatement5205); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal374_tree = (CommonTree)adaptor.Create(char_literal374);
				adaptor.AddChild(root_0, char_literal374_tree);
				}
				DebugLocation(936, 17);
				// Java.g:936:17: ( expressionList )?
				int alt107=2;
				try { DebugEnterSubRule(107);
				try { DebugEnterDecision(107, false);
				int LA107_1 = input.LA(1);

				if ((LA107_1==BANG||LA107_1==BOOLEAN||LA107_1==BYTE||(LA107_1>=CHAR && LA107_1<=CHARLITERAL)||(LA107_1>=DOUBLE && LA107_1<=DOUBLELITERAL)||LA107_1==FALSE||(LA107_1>=FLOAT && LA107_1<=FLOATLITERAL)||LA107_1==IDENTIFIER||LA107_1==INT||LA107_1==INTLITERAL||(LA107_1>=LONG && LA107_1<=LPAREN)||(LA107_1>=NEW && LA107_1<=NULL)||LA107_1==PLUS||LA107_1==PLUSPLUS||LA107_1==SHORT||(LA107_1>=STRINGLITERAL && LA107_1<=SUB)||(LA107_1>=SUBSUB && LA107_1<=SUPER)||LA107_1==THIS||LA107_1==TILDE||LA107_1==TRUE||LA107_1==VOID))
				{
					alt107 = 1;
				}
				} finally { DebugExitDecision(107); }
				switch (alt107)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:936:18: expressionList
					{
					DebugLocation(936, 18);
					PushFollow(Follow._expressionList_in_forstatement5225);
					expressionList375=expressionList();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expressionList375.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(107); }

				DebugLocation(937, 20);
				char_literal376=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_forstatement5246); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal376_tree = (CommonTree)adaptor.Create(char_literal376);
				adaptor.AddChild(root_0, char_literal376_tree);
				}
				DebugLocation(937, 24);
				PushFollow(Follow._statement_in_forstatement5248);
				statement377=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement377.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forstatement", 66);
			LeaveRule("forstatement", 66);
			LeaveRule_forstatement();
			if (state.backtracking > 0) { Memoize(input, 66, forstatement_StartIndex); }

		}
		DebugLocation(938, 4);
		} finally { DebugExitRule(GrammarFileName, "forstatement"); }
		return retval;

	}
	// $ANTLR end "forstatement"

	partial void EnterRule_forInit();
	partial void LeaveRule_forInit();
	// $ANTLR start "forInit"
	// Java.g:940:1: forInit : ( localVariableDeclaration | expressionList );
	[GrammarRule("forInit")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> forInit()
	{
		EnterRule_forInit();
		EnterRule("forInit", 67);
		TraceIn("forInit", 67);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int forInit_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> localVariableDeclaration378 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expressionList379 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "forInit");
		DebugLocation(940, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return retval; }

			// Java.g:941:5: ( localVariableDeclaration | expressionList )
			int alt109=2;
			try { DebugEnterDecision(109, false);
			switch (input.LA(1))
			{
			case FINAL:
			case MONKEYS_AT:
				{
				alt109 = 1;
				}
				break;
			case IDENTIFIER:
				{
				int LA109_2 = input.LA(2);

				if ((EvaluatePredicate(synpred161_Java_fragment)))
				{
					alt109 = 1;
				}
				else if ((true))
				{
					alt109 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 109, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA109_2 = input.LA(2);

				if ((EvaluatePredicate(synpred161_Java_fragment)))
				{
					alt109 = 1;
				}
				else if ((true))
				{
					alt109 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 109, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BANG:
			case CHARLITERAL:
			case DOUBLELITERAL:
			case FALSE:
			case FLOATLITERAL:
			case INTLITERAL:
			case LONGLITERAL:
			case LPAREN:
			case NEW:
			case NULL:
			case PLUS:
			case PLUSPLUS:
			case STRINGLITERAL:
			case SUB:
			case SUBSUB:
			case SUPER:
			case THIS:
			case TILDE:
			case TRUE:
			case VOID:
				{
				alt109 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 109, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(109); }
			switch (alt109)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:941:9: localVariableDeclaration
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(941, 9);
				PushFollow(Follow._localVariableDeclaration_in_forInit5268);
				localVariableDeclaration378=localVariableDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, localVariableDeclaration378.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:942:9: expressionList
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(942, 9);
				PushFollow(Follow._expressionList_in_forInit5278);
				expressionList379=expressionList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expressionList379.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forInit", 67);
			LeaveRule("forInit", 67);
			LeaveRule_forInit();
			if (state.backtracking > 0) { Memoize(input, 67, forInit_StartIndex); }

		}
		DebugLocation(943, 4);
		} finally { DebugExitRule(GrammarFileName, "forInit"); }
		return retval;

	}
	// $ANTLR end "forInit"

	partial void EnterRule_parExpression();
	partial void LeaveRule_parExpression();
	// $ANTLR start "parExpression"
	// Java.g:945:1: parExpression : '(' expression ')' ;
	[GrammarRule("parExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> parExpression()
	{
		EnterRule_parExpression();
		EnterRule("parExpression", 68);
		TraceIn("parExpression", 68);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int parExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal380 = default(CommonToken);
		CommonToken char_literal382 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression381 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal380_tree = default(CommonTree);
		CommonTree char_literal382_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "parExpression");
		DebugLocation(945, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return retval; }

			// Java.g:946:5: ( '(' expression ')' )
			DebugEnterAlt(1);
			// Java.g:946:9: '(' expression ')'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(946, 9);
			char_literal380=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_parExpression5298); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal380_tree = (CommonTree)adaptor.Create(char_literal380);
			adaptor.AddChild(root_0, char_literal380_tree);
			}
			DebugLocation(946, 13);
			PushFollow(Follow._expression_in_parExpression5300);
			expression381=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression381.Tree);
			DebugLocation(946, 24);
			char_literal382=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_parExpression5302); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal382_tree = (CommonTree)adaptor.Create(char_literal382);
			adaptor.AddChild(root_0, char_literal382_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parExpression", 68);
			LeaveRule("parExpression", 68);
			LeaveRule_parExpression();
			if (state.backtracking > 0) { Memoize(input, 68, parExpression_StartIndex); }

		}
		DebugLocation(947, 4);
		} finally { DebugExitRule(GrammarFileName, "parExpression"); }
		return retval;

	}
	// $ANTLR end "parExpression"

	partial void EnterRule_expressionList();
	partial void LeaveRule_expressionList();
	// $ANTLR start "expressionList"
	// Java.g:949:1: expressionList : expression ( ',' expression )* ;
	[GrammarRule("expressionList")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expressionList()
	{
		EnterRule_expressionList();
		EnterRule("expressionList", 69);
		TraceIn("expressionList", 69);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int expressionList_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal384 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression383 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression385 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal384_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expressionList");
		DebugLocation(949, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return retval; }

			// Java.g:950:5: ( expression ( ',' expression )* )
			DebugEnterAlt(1);
			// Java.g:950:9: expression ( ',' expression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(950, 9);
			PushFollow(Follow._expression_in_expressionList5322);
			expression383=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression383.Tree);
			DebugLocation(951, 9);
			// Java.g:951:9: ( ',' expression )*
			try { DebugEnterSubRule(110);
			while (true)
			{
				int alt110=2;
				try { DebugEnterDecision(110, false);
				int LA110_1 = input.LA(1);

				if ((LA110_1==COMMA))
				{
					alt110 = 1;
				}


				} finally { DebugExitDecision(110); }
				switch ( alt110 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:951:10: ',' expression
					{
					DebugLocation(951, 10);
					char_literal384=(CommonToken)Match(input,COMMA,Follow._COMMA_in_expressionList5333); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal384_tree = (CommonTree)adaptor.Create(char_literal384);
					adaptor.AddChild(root_0, char_literal384_tree);
					}
					DebugLocation(951, 14);
					PushFollow(Follow._expression_in_expressionList5335);
					expression385=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression385.Tree);

					}
					break;

				default:
					goto loop110;
				}
			}

			loop110:
				;

			} finally { DebugExitSubRule(110); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expressionList", 69);
			LeaveRule("expressionList", 69);
			LeaveRule_expressionList();
			if (state.backtracking > 0) { Memoize(input, 69, expressionList_StartIndex); }

		}
		DebugLocation(953, 4);
		} finally { DebugExitRule(GrammarFileName, "expressionList"); }
		return retval;

	}
	// $ANTLR end "expressionList"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// Java.g:956:1: expression : conditionalExpression ( assignmentOperator expression )? ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 70);
		TraceIn("expression", 70);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int expression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> conditionalExpression386 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> assignmentOperator387 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression388 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(956, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return retval; }

			// Java.g:957:5: ( conditionalExpression ( assignmentOperator expression )? )
			DebugEnterAlt(1);
			// Java.g:957:9: conditionalExpression ( assignmentOperator expression )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(957, 9);
			PushFollow(Follow._conditionalExpression_in_expression5367);
			conditionalExpression386=conditionalExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalExpression386.Tree);
			DebugLocation(958, 9);
			// Java.g:958:9: ( assignmentOperator expression )?
			int alt111=2;
			try { DebugEnterSubRule(111);
			try { DebugEnterDecision(111, false);
			int LA111_1 = input.LA(1);

			if ((LA111_1==AMPEQ||LA111_1==BAREQ||LA111_1==CARETEQ||LA111_1==EQ||LA111_1==GT||LA111_1==LT||LA111_1==PERCENTEQ||LA111_1==PLUSEQ||LA111_1==SLASHEQ||LA111_1==STAREQ||LA111_1==SUBEQ))
			{
				alt111 = 1;
			}
			} finally { DebugExitDecision(111); }
			switch (alt111)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:958:10: assignmentOperator expression
				{
				DebugLocation(958, 10);
				PushFollow(Follow._assignmentOperator_in_expression5378);
				assignmentOperator387=assignmentOperator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignmentOperator387.Tree);
				DebugLocation(958, 29);
				PushFollow(Follow._expression_in_expression5380);
				expression388=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression388.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(111); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 70);
			LeaveRule("expression", 70);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 70, expression_StartIndex); }

		}
		DebugLocation(960, 4);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_assignmentOperator();
	partial void LeaveRule_assignmentOperator();
	// $ANTLR start "assignmentOperator"
	// Java.g:963:1: assignmentOperator : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<' '<' '=' | '>' '>' '>' '=' | '>' '>' '=' );
	[GrammarRule("assignmentOperator")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> assignmentOperator()
	{
		EnterRule_assignmentOperator();
		EnterRule("assignmentOperator", 71);
		TraceIn("assignmentOperator", 71);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int assignmentOperator_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal389 = default(CommonToken);
		CommonToken string_literal390 = default(CommonToken);
		CommonToken string_literal391 = default(CommonToken);
		CommonToken string_literal392 = default(CommonToken);
		CommonToken string_literal393 = default(CommonToken);
		CommonToken string_literal394 = default(CommonToken);
		CommonToken string_literal395 = default(CommonToken);
		CommonToken string_literal396 = default(CommonToken);
		CommonToken string_literal397 = default(CommonToken);
		CommonToken char_literal398 = default(CommonToken);
		CommonToken char_literal399 = default(CommonToken);
		CommonToken char_literal400 = default(CommonToken);
		CommonToken char_literal401 = default(CommonToken);
		CommonToken char_literal402 = default(CommonToken);
		CommonToken char_literal403 = default(CommonToken);
		CommonToken char_literal404 = default(CommonToken);
		CommonToken char_literal405 = default(CommonToken);
		CommonToken char_literal406 = default(CommonToken);
		CommonToken char_literal407 = default(CommonToken);

		CommonTree char_literal389_tree = default(CommonTree);
		CommonTree string_literal390_tree = default(CommonTree);
		CommonTree string_literal391_tree = default(CommonTree);
		CommonTree string_literal392_tree = default(CommonTree);
		CommonTree string_literal393_tree = default(CommonTree);
		CommonTree string_literal394_tree = default(CommonTree);
		CommonTree string_literal395_tree = default(CommonTree);
		CommonTree string_literal396_tree = default(CommonTree);
		CommonTree string_literal397_tree = default(CommonTree);
		CommonTree char_literal398_tree = default(CommonTree);
		CommonTree char_literal399_tree = default(CommonTree);
		CommonTree char_literal400_tree = default(CommonTree);
		CommonTree char_literal401_tree = default(CommonTree);
		CommonTree char_literal402_tree = default(CommonTree);
		CommonTree char_literal403_tree = default(CommonTree);
		CommonTree char_literal404_tree = default(CommonTree);
		CommonTree char_literal405_tree = default(CommonTree);
		CommonTree char_literal406_tree = default(CommonTree);
		CommonTree char_literal407_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "assignmentOperator");
		DebugLocation(963, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return retval; }

			// Java.g:964:5: ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | '<' '<' '=' | '>' '>' '>' '=' | '>' '>' '=' )
			int alt112=12;
			try { DebugEnterDecision(112, false);
			switch (input.LA(1))
			{
			case EQ:
				{
				alt112 = 1;
				}
				break;
			case PLUSEQ:
				{
				alt112 = 2;
				}
				break;
			case SUBEQ:
				{
				alt112 = 3;
				}
				break;
			case STAREQ:
				{
				alt112 = 4;
				}
				break;
			case SLASHEQ:
				{
				alt112 = 5;
				}
				break;
			case AMPEQ:
				{
				alt112 = 6;
				}
				break;
			case BAREQ:
				{
				alt112 = 7;
				}
				break;
			case CARETEQ:
				{
				alt112 = 8;
				}
				break;
			case PERCENTEQ:
				{
				alt112 = 9;
				}
				break;
			case LT:
				{
				alt112 = 10;
				}
				break;
			case GT:
				{
				int LA112_2 = input.LA(2);

				if ((LA112_2==GT))
				{
					int LA112_3 = input.LA(3);

					if ((LA112_3==GT))
					{
						alt112 = 11;
					}
					else if ((LA112_3==EQ))
					{
						alt112 = 12;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 112, 12, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 112, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 112, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(112); }
			switch (alt112)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:964:9: '='
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(964, 9);
				char_literal389=(CommonToken)Match(input,EQ,Follow._EQ_in_assignmentOperator5412); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal389_tree = (CommonTree)adaptor.Create(char_literal389);
				adaptor.AddChild(root_0, char_literal389_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:965:9: '+='
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(965, 9);
				string_literal390=(CommonToken)Match(input,PLUSEQ,Follow._PLUSEQ_in_assignmentOperator5422); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal390_tree = (CommonTree)adaptor.Create(string_literal390);
				adaptor.AddChild(root_0, string_literal390_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:966:9: '-='
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(966, 9);
				string_literal391=(CommonToken)Match(input,SUBEQ,Follow._SUBEQ_in_assignmentOperator5432); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal391_tree = (CommonTree)adaptor.Create(string_literal391);
				adaptor.AddChild(root_0, string_literal391_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:967:9: '*='
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(967, 9);
				string_literal392=(CommonToken)Match(input,STAREQ,Follow._STAREQ_in_assignmentOperator5442); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal392_tree = (CommonTree)adaptor.Create(string_literal392);
				adaptor.AddChild(root_0, string_literal392_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:968:9: '/='
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(968, 9);
				string_literal393=(CommonToken)Match(input,SLASHEQ,Follow._SLASHEQ_in_assignmentOperator5452); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal393_tree = (CommonTree)adaptor.Create(string_literal393);
				adaptor.AddChild(root_0, string_literal393_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:969:9: '&='
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(969, 9);
				string_literal394=(CommonToken)Match(input,AMPEQ,Follow._AMPEQ_in_assignmentOperator5462); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal394_tree = (CommonTree)adaptor.Create(string_literal394);
				adaptor.AddChild(root_0, string_literal394_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:970:9: '|='
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(970, 9);
				string_literal395=(CommonToken)Match(input,BAREQ,Follow._BAREQ_in_assignmentOperator5472); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal395_tree = (CommonTree)adaptor.Create(string_literal395);
				adaptor.AddChild(root_0, string_literal395_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Java.g:971:9: '^='
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(971, 9);
				string_literal396=(CommonToken)Match(input,CARETEQ,Follow._CARETEQ_in_assignmentOperator5482); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal396_tree = (CommonTree)adaptor.Create(string_literal396);
				adaptor.AddChild(root_0, string_literal396_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Java.g:972:9: '%='
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(972, 9);
				string_literal397=(CommonToken)Match(input,PERCENTEQ,Follow._PERCENTEQ_in_assignmentOperator5492); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal397_tree = (CommonTree)adaptor.Create(string_literal397);
				adaptor.AddChild(root_0, string_literal397_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Java.g:973:10: '<' '<' '='
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(973, 10);
				char_literal398=(CommonToken)Match(input,LT,Follow._LT_in_assignmentOperator5503); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal398_tree = (CommonTree)adaptor.Create(char_literal398);
				adaptor.AddChild(root_0, char_literal398_tree);
				}
				DebugLocation(973, 14);
				char_literal399=(CommonToken)Match(input,LT,Follow._LT_in_assignmentOperator5505); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal399_tree = (CommonTree)adaptor.Create(char_literal399);
				adaptor.AddChild(root_0, char_literal399_tree);
				}
				DebugLocation(973, 18);
				char_literal400=(CommonToken)Match(input,EQ,Follow._EQ_in_assignmentOperator5507); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal400_tree = (CommonTree)adaptor.Create(char_literal400);
				adaptor.AddChild(root_0, char_literal400_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Java.g:974:10: '>' '>' '>' '='
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(974, 10);
				char_literal401=(CommonToken)Match(input,GT,Follow._GT_in_assignmentOperator5518); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal401_tree = (CommonTree)adaptor.Create(char_literal401);
				adaptor.AddChild(root_0, char_literal401_tree);
				}
				DebugLocation(974, 14);
				char_literal402=(CommonToken)Match(input,GT,Follow._GT_in_assignmentOperator5520); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal402_tree = (CommonTree)adaptor.Create(char_literal402);
				adaptor.AddChild(root_0, char_literal402_tree);
				}
				DebugLocation(974, 18);
				char_literal403=(CommonToken)Match(input,GT,Follow._GT_in_assignmentOperator5522); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal403_tree = (CommonTree)adaptor.Create(char_literal403);
				adaptor.AddChild(root_0, char_literal403_tree);
				}
				DebugLocation(974, 22);
				char_literal404=(CommonToken)Match(input,EQ,Follow._EQ_in_assignmentOperator5524); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal404_tree = (CommonTree)adaptor.Create(char_literal404);
				adaptor.AddChild(root_0, char_literal404_tree);
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Java.g:975:10: '>' '>' '='
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(975, 10);
				char_literal405=(CommonToken)Match(input,GT,Follow._GT_in_assignmentOperator5535); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal405_tree = (CommonTree)adaptor.Create(char_literal405);
				adaptor.AddChild(root_0, char_literal405_tree);
				}
				DebugLocation(975, 14);
				char_literal406=(CommonToken)Match(input,GT,Follow._GT_in_assignmentOperator5537); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal406_tree = (CommonTree)adaptor.Create(char_literal406);
				adaptor.AddChild(root_0, char_literal406_tree);
				}
				DebugLocation(975, 18);
				char_literal407=(CommonToken)Match(input,EQ,Follow._EQ_in_assignmentOperator5539); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal407_tree = (CommonTree)adaptor.Create(char_literal407);
				adaptor.AddChild(root_0, char_literal407_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignmentOperator", 71);
			LeaveRule("assignmentOperator", 71);
			LeaveRule_assignmentOperator();
			if (state.backtracking > 0) { Memoize(input, 71, assignmentOperator_StartIndex); }

		}
		DebugLocation(976, 4);
		} finally { DebugExitRule(GrammarFileName, "assignmentOperator"); }
		return retval;

	}
	// $ANTLR end "assignmentOperator"

	partial void EnterRule_conditionalExpression();
	partial void LeaveRule_conditionalExpression();
	// $ANTLR start "conditionalExpression"
	// Java.g:979:1: conditionalExpression : conditionalOrExpression ( '?' expression ':' conditionalExpression )? ;
	[GrammarRule("conditionalExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> conditionalExpression()
	{
		EnterRule_conditionalExpression();
		EnterRule("conditionalExpression", 72);
		TraceIn("conditionalExpression", 72);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int conditionalExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal409 = default(CommonToken);
		CommonToken char_literal411 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> conditionalOrExpression408 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression410 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> conditionalExpression412 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal409_tree = default(CommonTree);
		CommonTree char_literal411_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditionalExpression");
		DebugLocation(979, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return retval; }

			// Java.g:980:5: ( conditionalOrExpression ( '?' expression ':' conditionalExpression )? )
			DebugEnterAlt(1);
			// Java.g:980:9: conditionalOrExpression ( '?' expression ':' conditionalExpression )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(980, 9);
			PushFollow(Follow._conditionalOrExpression_in_conditionalExpression5560);
			conditionalOrExpression408=conditionalOrExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalOrExpression408.Tree);
			DebugLocation(981, 9);
			// Java.g:981:9: ( '?' expression ':' conditionalExpression )?
			int alt113=2;
			try { DebugEnterSubRule(113);
			try { DebugEnterDecision(113, false);
			int LA113_1 = input.LA(1);

			if ((LA113_1==QUES))
			{
				alt113 = 1;
			}
			} finally { DebugExitDecision(113); }
			switch (alt113)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:981:10: '?' expression ':' conditionalExpression
				{
				DebugLocation(981, 10);
				char_literal409=(CommonToken)Match(input,QUES,Follow._QUES_in_conditionalExpression5571); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal409_tree = (CommonTree)adaptor.Create(char_literal409);
				adaptor.AddChild(root_0, char_literal409_tree);
				}
				DebugLocation(981, 14);
				PushFollow(Follow._expression_in_conditionalExpression5573);
				expression410=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression410.Tree);
				DebugLocation(981, 25);
				char_literal411=(CommonToken)Match(input,COLON,Follow._COLON_in_conditionalExpression5575); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal411_tree = (CommonTree)adaptor.Create(char_literal411);
				adaptor.AddChild(root_0, char_literal411_tree);
				}
				DebugLocation(981, 29);
				PushFollow(Follow._conditionalExpression_in_conditionalExpression5577);
				conditionalExpression412=conditionalExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalExpression412.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(113); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalExpression", 72);
			LeaveRule("conditionalExpression", 72);
			LeaveRule_conditionalExpression();
			if (state.backtracking > 0) { Memoize(input, 72, conditionalExpression_StartIndex); }

		}
		DebugLocation(983, 4);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalExpression"

	partial void EnterRule_conditionalOrExpression();
	partial void LeaveRule_conditionalOrExpression();
	// $ANTLR start "conditionalOrExpression"
	// Java.g:985:1: conditionalOrExpression : conditionalAndExpression ( '||' conditionalAndExpression )* ;
	[GrammarRule("conditionalOrExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> conditionalOrExpression()
	{
		EnterRule_conditionalOrExpression();
		EnterRule("conditionalOrExpression", 73);
		TraceIn("conditionalOrExpression", 73);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int conditionalOrExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal414 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> conditionalAndExpression413 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> conditionalAndExpression415 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal414_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditionalOrExpression");
		DebugLocation(985, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return retval; }

			// Java.g:986:5: ( conditionalAndExpression ( '||' conditionalAndExpression )* )
			DebugEnterAlt(1);
			// Java.g:986:9: conditionalAndExpression ( '||' conditionalAndExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(986, 9);
			PushFollow(Follow._conditionalAndExpression_in_conditionalOrExpression5608);
			conditionalAndExpression413=conditionalAndExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalAndExpression413.Tree);
			DebugLocation(987, 9);
			// Java.g:987:9: ( '||' conditionalAndExpression )*
			try { DebugEnterSubRule(114);
			while (true)
			{
				int alt114=2;
				try { DebugEnterDecision(114, false);
				int LA114_1 = input.LA(1);

				if ((LA114_1==BARBAR))
				{
					alt114 = 1;
				}


				} finally { DebugExitDecision(114); }
				switch ( alt114 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:987:10: '||' conditionalAndExpression
					{
					DebugLocation(987, 10);
					string_literal414=(CommonToken)Match(input,BARBAR,Follow._BARBAR_in_conditionalOrExpression5619); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal414_tree = (CommonTree)adaptor.Create(string_literal414);
					adaptor.AddChild(root_0, string_literal414_tree);
					}
					DebugLocation(987, 15);
					PushFollow(Follow._conditionalAndExpression_in_conditionalOrExpression5621);
					conditionalAndExpression415=conditionalAndExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditionalAndExpression415.Tree);

					}
					break;

				default:
					goto loop114;
				}
			}

			loop114:
				;

			} finally { DebugExitSubRule(114); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalOrExpression", 73);
			LeaveRule("conditionalOrExpression", 73);
			LeaveRule_conditionalOrExpression();
			if (state.backtracking > 0) { Memoize(input, 73, conditionalOrExpression_StartIndex); }

		}
		DebugLocation(989, 4);
		} finally { DebugExitRule(GrammarFileName, "conditionalOrExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalOrExpression"

	partial void EnterRule_conditionalAndExpression();
	partial void LeaveRule_conditionalAndExpression();
	// $ANTLR start "conditionalAndExpression"
	// Java.g:991:1: conditionalAndExpression : inclusiveOrExpression ( '&&' inclusiveOrExpression )* ;
	[GrammarRule("conditionalAndExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> conditionalAndExpression()
	{
		EnterRule_conditionalAndExpression();
		EnterRule("conditionalAndExpression", 74);
		TraceIn("conditionalAndExpression", 74);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int conditionalAndExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal417 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> inclusiveOrExpression416 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> inclusiveOrExpression418 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal417_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "conditionalAndExpression");
		DebugLocation(991, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return retval; }

			// Java.g:992:5: ( inclusiveOrExpression ( '&&' inclusiveOrExpression )* )
			DebugEnterAlt(1);
			// Java.g:992:9: inclusiveOrExpression ( '&&' inclusiveOrExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(992, 9);
			PushFollow(Follow._inclusiveOrExpression_in_conditionalAndExpression5652);
			inclusiveOrExpression416=inclusiveOrExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, inclusiveOrExpression416.Tree);
			DebugLocation(993, 9);
			// Java.g:993:9: ( '&&' inclusiveOrExpression )*
			try { DebugEnterSubRule(115);
			while (true)
			{
				int alt115=2;
				try { DebugEnterDecision(115, false);
				int LA115_1 = input.LA(1);

				if ((LA115_1==AMPAMP))
				{
					alt115 = 1;
				}


				} finally { DebugExitDecision(115); }
				switch ( alt115 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:993:10: '&&' inclusiveOrExpression
					{
					DebugLocation(993, 10);
					string_literal417=(CommonToken)Match(input,AMPAMP,Follow._AMPAMP_in_conditionalAndExpression5663); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal417_tree = (CommonTree)adaptor.Create(string_literal417);
					adaptor.AddChild(root_0, string_literal417_tree);
					}
					DebugLocation(993, 15);
					PushFollow(Follow._inclusiveOrExpression_in_conditionalAndExpression5665);
					inclusiveOrExpression418=inclusiveOrExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, inclusiveOrExpression418.Tree);

					}
					break;

				default:
					goto loop115;
				}
			}

			loop115:
				;

			} finally { DebugExitSubRule(115); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditionalAndExpression", 74);
			LeaveRule("conditionalAndExpression", 74);
			LeaveRule_conditionalAndExpression();
			if (state.backtracking > 0) { Memoize(input, 74, conditionalAndExpression_StartIndex); }

		}
		DebugLocation(995, 4);
		} finally { DebugExitRule(GrammarFileName, "conditionalAndExpression"); }
		return retval;

	}
	// $ANTLR end "conditionalAndExpression"

	partial void EnterRule_inclusiveOrExpression();
	partial void LeaveRule_inclusiveOrExpression();
	// $ANTLR start "inclusiveOrExpression"
	// Java.g:997:1: inclusiveOrExpression : exclusiveOrExpression ( '|' exclusiveOrExpression )* ;
	[GrammarRule("inclusiveOrExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> inclusiveOrExpression()
	{
		EnterRule_inclusiveOrExpression();
		EnterRule("inclusiveOrExpression", 75);
		TraceIn("inclusiveOrExpression", 75);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int inclusiveOrExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal420 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> exclusiveOrExpression419 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> exclusiveOrExpression421 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal420_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "inclusiveOrExpression");
		DebugLocation(997, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 75)) { return retval; }

			// Java.g:998:5: ( exclusiveOrExpression ( '|' exclusiveOrExpression )* )
			DebugEnterAlt(1);
			// Java.g:998:9: exclusiveOrExpression ( '|' exclusiveOrExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(998, 9);
			PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression5696);
			exclusiveOrExpression419=exclusiveOrExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, exclusiveOrExpression419.Tree);
			DebugLocation(999, 9);
			// Java.g:999:9: ( '|' exclusiveOrExpression )*
			try { DebugEnterSubRule(116);
			while (true)
			{
				int alt116=2;
				try { DebugEnterDecision(116, false);
				int LA116_1 = input.LA(1);

				if ((LA116_1==BAR))
				{
					alt116 = 1;
				}


				} finally { DebugExitDecision(116); }
				switch ( alt116 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:999:10: '|' exclusiveOrExpression
					{
					DebugLocation(999, 10);
					char_literal420=(CommonToken)Match(input,BAR,Follow._BAR_in_inclusiveOrExpression5707); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal420_tree = (CommonTree)adaptor.Create(char_literal420);
					adaptor.AddChild(root_0, char_literal420_tree);
					}
					DebugLocation(999, 14);
					PushFollow(Follow._exclusiveOrExpression_in_inclusiveOrExpression5709);
					exclusiveOrExpression421=exclusiveOrExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, exclusiveOrExpression421.Tree);

					}
					break;

				default:
					goto loop116;
				}
			}

			loop116:
				;

			} finally { DebugExitSubRule(116); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inclusiveOrExpression", 75);
			LeaveRule("inclusiveOrExpression", 75);
			LeaveRule_inclusiveOrExpression();
			if (state.backtracking > 0) { Memoize(input, 75, inclusiveOrExpression_StartIndex); }

		}
		DebugLocation(1001, 4);
		} finally { DebugExitRule(GrammarFileName, "inclusiveOrExpression"); }
		return retval;

	}
	// $ANTLR end "inclusiveOrExpression"

	partial void EnterRule_exclusiveOrExpression();
	partial void LeaveRule_exclusiveOrExpression();
	// $ANTLR start "exclusiveOrExpression"
	// Java.g:1003:1: exclusiveOrExpression : andExpression ( '^' andExpression )* ;
	[GrammarRule("exclusiveOrExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> exclusiveOrExpression()
	{
		EnterRule_exclusiveOrExpression();
		EnterRule("exclusiveOrExpression", 76);
		TraceIn("exclusiveOrExpression", 76);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int exclusiveOrExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal423 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> andExpression422 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> andExpression424 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal423_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "exclusiveOrExpression");
		DebugLocation(1003, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 76)) { return retval; }

			// Java.g:1004:5: ( andExpression ( '^' andExpression )* )
			DebugEnterAlt(1);
			// Java.g:1004:9: andExpression ( '^' andExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1004, 9);
			PushFollow(Follow._andExpression_in_exclusiveOrExpression5740);
			andExpression422=andExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression422.Tree);
			DebugLocation(1005, 9);
			// Java.g:1005:9: ( '^' andExpression )*
			try { DebugEnterSubRule(117);
			while (true)
			{
				int alt117=2;
				try { DebugEnterDecision(117, false);
				int LA117_1 = input.LA(1);

				if ((LA117_1==CARET))
				{
					alt117 = 1;
				}


				} finally { DebugExitDecision(117); }
				switch ( alt117 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1005:10: '^' andExpression
					{
					DebugLocation(1005, 10);
					char_literal423=(CommonToken)Match(input,CARET,Follow._CARET_in_exclusiveOrExpression5751); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal423_tree = (CommonTree)adaptor.Create(char_literal423);
					adaptor.AddChild(root_0, char_literal423_tree);
					}
					DebugLocation(1005, 14);
					PushFollow(Follow._andExpression_in_exclusiveOrExpression5753);
					andExpression424=andExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, andExpression424.Tree);

					}
					break;

				default:
					goto loop117;
				}
			}

			loop117:
				;

			} finally { DebugExitSubRule(117); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exclusiveOrExpression", 76);
			LeaveRule("exclusiveOrExpression", 76);
			LeaveRule_exclusiveOrExpression();
			if (state.backtracking > 0) { Memoize(input, 76, exclusiveOrExpression_StartIndex); }

		}
		DebugLocation(1007, 4);
		} finally { DebugExitRule(GrammarFileName, "exclusiveOrExpression"); }
		return retval;

	}
	// $ANTLR end "exclusiveOrExpression"

	partial void EnterRule_andExpression();
	partial void LeaveRule_andExpression();
	// $ANTLR start "andExpression"
	// Java.g:1009:1: andExpression : equalityExpression ( '&' equalityExpression )* ;
	[GrammarRule("andExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 77);
		TraceIn("andExpression", 77);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int andExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal426 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> equalityExpression425 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> equalityExpression427 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal426_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(1009, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 77)) { return retval; }

			// Java.g:1010:5: ( equalityExpression ( '&' equalityExpression )* )
			DebugEnterAlt(1);
			// Java.g:1010:9: equalityExpression ( '&' equalityExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1010, 9);
			PushFollow(Follow._equalityExpression_in_andExpression5784);
			equalityExpression425=equalityExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equalityExpression425.Tree);
			DebugLocation(1011, 9);
			// Java.g:1011:9: ( '&' equalityExpression )*
			try { DebugEnterSubRule(118);
			while (true)
			{
				int alt118=2;
				try { DebugEnterDecision(118, false);
				int LA118_1 = input.LA(1);

				if ((LA118_1==AMP))
				{
					alt118 = 1;
				}


				} finally { DebugExitDecision(118); }
				switch ( alt118 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1011:10: '&' equalityExpression
					{
					DebugLocation(1011, 10);
					char_literal426=(CommonToken)Match(input,AMP,Follow._AMP_in_andExpression5795); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal426_tree = (CommonTree)adaptor.Create(char_literal426);
					adaptor.AddChild(root_0, char_literal426_tree);
					}
					DebugLocation(1011, 14);
					PushFollow(Follow._equalityExpression_in_andExpression5797);
					equalityExpression427=equalityExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equalityExpression427.Tree);

					}
					break;

				default:
					goto loop118;
				}
			}

			loop118:
				;

			} finally { DebugExitSubRule(118); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("andExpression", 77);
			LeaveRule("andExpression", 77);
			LeaveRule_andExpression();
			if (state.backtracking > 0) { Memoize(input, 77, andExpression_StartIndex); }

		}
		DebugLocation(1013, 4);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return retval;

	}
	// $ANTLR end "andExpression"

	partial void EnterRule_equalityExpression();
	partial void LeaveRule_equalityExpression();
	// $ANTLR start "equalityExpression"
	// Java.g:1015:1: equalityExpression : instanceOfExpression ( ( '==' | '!=' ) instanceOfExpression )* ;
	[GrammarRule("equalityExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 78);
		TraceIn("equalityExpression", 78);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int equalityExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken set429 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> instanceOfExpression428 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> instanceOfExpression430 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set429_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(1015, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 78)) { return retval; }

			// Java.g:1016:5: ( instanceOfExpression ( ( '==' | '!=' ) instanceOfExpression )* )
			DebugEnterAlt(1);
			// Java.g:1016:9: instanceOfExpression ( ( '==' | '!=' ) instanceOfExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1016, 9);
			PushFollow(Follow._instanceOfExpression_in_equalityExpression5828);
			instanceOfExpression428=instanceOfExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, instanceOfExpression428.Tree);
			DebugLocation(1017, 9);
			// Java.g:1017:9: ( ( '==' | '!=' ) instanceOfExpression )*
			try { DebugEnterSubRule(119);
			while (true)
			{
				int alt119=2;
				try { DebugEnterDecision(119, false);
				int LA119_1 = input.LA(1);

				if ((LA119_1==BANGEQ||LA119_1==EQEQ))
				{
					alt119 = 1;
				}


				} finally { DebugExitDecision(119); }
				switch ( alt119 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1018:13: ( '==' | '!=' ) instanceOfExpression
					{
					DebugLocation(1018, 13);

					set429=(CommonToken)input.LT(1);
					if (input.LA(1)==BANGEQ||input.LA(1)==EQEQ)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set429));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(1021, 13);
					PushFollow(Follow._instanceOfExpression_in_equalityExpression5905);
					instanceOfExpression430=instanceOfExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, instanceOfExpression430.Tree);

					}
					break;

				default:
					goto loop119;
				}
			}

			loop119:
				;

			} finally { DebugExitSubRule(119); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityExpression", 78);
			LeaveRule("equalityExpression", 78);
			LeaveRule_equalityExpression();
			if (state.backtracking > 0) { Memoize(input, 78, equalityExpression_StartIndex); }

		}
		DebugLocation(1023, 4);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return retval;

	}
	// $ANTLR end "equalityExpression"

	partial void EnterRule_instanceOfExpression();
	partial void LeaveRule_instanceOfExpression();
	// $ANTLR start "instanceOfExpression"
	// Java.g:1025:1: instanceOfExpression : relationalExpression ( 'instanceof' type )? ;
	[GrammarRule("instanceOfExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> instanceOfExpression()
	{
		EnterRule_instanceOfExpression();
		EnterRule("instanceOfExpression", 79);
		TraceIn("instanceOfExpression", 79);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int instanceOfExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal432 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> relationalExpression431 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type433 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal432_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "instanceOfExpression");
		DebugLocation(1025, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 79)) { return retval; }

			// Java.g:1026:5: ( relationalExpression ( 'instanceof' type )? )
			DebugEnterAlt(1);
			// Java.g:1026:9: relationalExpression ( 'instanceof' type )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1026, 9);
			PushFollow(Follow._relationalExpression_in_instanceOfExpression5936);
			relationalExpression431=relationalExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, relationalExpression431.Tree);
			DebugLocation(1027, 9);
			// Java.g:1027:9: ( 'instanceof' type )?
			int alt120=2;
			try { DebugEnterSubRule(120);
			try { DebugEnterDecision(120, false);
			int LA120_1 = input.LA(1);

			if ((LA120_1==INSTANCEOF))
			{
				alt120 = 1;
			}
			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1027:10: 'instanceof' type
				{
				DebugLocation(1027, 10);
				string_literal432=(CommonToken)Match(input,INSTANCEOF,Follow._INSTANCEOF_in_instanceOfExpression5947); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal432_tree = (CommonTree)adaptor.Create(string_literal432);
				adaptor.AddChild(root_0, string_literal432_tree);
				}
				DebugLocation(1027, 23);
				PushFollow(Follow._type_in_instanceOfExpression5949);
				type433=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type433.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(120); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("instanceOfExpression", 79);
			LeaveRule("instanceOfExpression", 79);
			LeaveRule_instanceOfExpression();
			if (state.backtracking > 0) { Memoize(input, 79, instanceOfExpression_StartIndex); }

		}
		DebugLocation(1029, 4);
		} finally { DebugExitRule(GrammarFileName, "instanceOfExpression"); }
		return retval;

	}
	// $ANTLR end "instanceOfExpression"

	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();
	// $ANTLR start "relationalExpression"
	// Java.g:1031:1: relationalExpression : shiftExpression ( relationalOp shiftExpression )* ;
	[GrammarRule("relationalExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 80);
		TraceIn("relationalExpression", 80);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int relationalExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> shiftExpression434 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> relationalOp435 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> shiftExpression436 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(1031, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 80)) { return retval; }

			// Java.g:1032:5: ( shiftExpression ( relationalOp shiftExpression )* )
			DebugEnterAlt(1);
			// Java.g:1032:9: shiftExpression ( relationalOp shiftExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1032, 9);
			PushFollow(Follow._shiftExpression_in_relationalExpression5980);
			shiftExpression434=shiftExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, shiftExpression434.Tree);
			DebugLocation(1033, 9);
			// Java.g:1033:9: ( relationalOp shiftExpression )*
			try { DebugEnterSubRule(121);
			while (true)
			{
				int alt121=2;
				try { DebugEnterDecision(121, false);
				int LA121_1 = input.LA(1);

				if ((LA121_1==LT))
				{
					int LA121_2 = input.LA(2);

					if ((LA121_2==BANG||LA121_2==BOOLEAN||LA121_2==BYTE||(LA121_2>=CHAR && LA121_2<=CHARLITERAL)||(LA121_2>=DOUBLE && LA121_2<=DOUBLELITERAL)||LA121_2==EQ||LA121_2==FALSE||(LA121_2>=FLOAT && LA121_2<=FLOATLITERAL)||LA121_2==IDENTIFIER||LA121_2==INT||LA121_2==INTLITERAL||(LA121_2>=LONG && LA121_2<=LPAREN)||(LA121_2>=NEW && LA121_2<=NULL)||LA121_2==PLUS||LA121_2==PLUSPLUS||LA121_2==SHORT||(LA121_2>=STRINGLITERAL && LA121_2<=SUB)||(LA121_2>=SUBSUB && LA121_2<=SUPER)||LA121_2==THIS||LA121_2==TILDE||LA121_2==TRUE||LA121_2==VOID))
					{
						alt121 = 1;
					}


				}
				else if ((LA121_1==GT))
				{
					int LA121_2 = input.LA(2);

					if ((LA121_2==BANG||LA121_2==BOOLEAN||LA121_2==BYTE||(LA121_2>=CHAR && LA121_2<=CHARLITERAL)||(LA121_2>=DOUBLE && LA121_2<=DOUBLELITERAL)||LA121_2==EQ||LA121_2==FALSE||(LA121_2>=FLOAT && LA121_2<=FLOATLITERAL)||LA121_2==IDENTIFIER||LA121_2==INT||LA121_2==INTLITERAL||(LA121_2>=LONG && LA121_2<=LPAREN)||(LA121_2>=NEW && LA121_2<=NULL)||LA121_2==PLUS||LA121_2==PLUSPLUS||LA121_2==SHORT||(LA121_2>=STRINGLITERAL && LA121_2<=SUB)||(LA121_2>=SUBSUB && LA121_2<=SUPER)||LA121_2==THIS||LA121_2==TILDE||LA121_2==TRUE||LA121_2==VOID))
					{
						alt121 = 1;
					}


				}


				} finally { DebugExitDecision(121); }
				switch ( alt121 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1033:10: relationalOp shiftExpression
					{
					DebugLocation(1033, 10);
					PushFollow(Follow._relationalOp_in_relationalExpression5991);
					relationalOp435=relationalOp();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, relationalOp435.Tree);
					DebugLocation(1033, 23);
					PushFollow(Follow._shiftExpression_in_relationalExpression5993);
					shiftExpression436=shiftExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shiftExpression436.Tree);

					}
					break;

				default:
					goto loop121;
				}
			}

			loop121:
				;

			} finally { DebugExitSubRule(121); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalExpression", 80);
			LeaveRule("relationalExpression", 80);
			LeaveRule_relationalExpression();
			if (state.backtracking > 0) { Memoize(input, 80, relationalExpression_StartIndex); }

		}
		DebugLocation(1035, 4);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return retval;

	}
	// $ANTLR end "relationalExpression"

	partial void EnterRule_relationalOp();
	partial void LeaveRule_relationalOp();
	// $ANTLR start "relationalOp"
	// Java.g:1037:1: relationalOp : ( '<' '=' | '>' '=' | '<' | '>' );
	[GrammarRule("relationalOp")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> relationalOp()
	{
		EnterRule_relationalOp();
		EnterRule("relationalOp", 81);
		TraceIn("relationalOp", 81);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int relationalOp_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal437 = default(CommonToken);
		CommonToken char_literal438 = default(CommonToken);
		CommonToken char_literal439 = default(CommonToken);
		CommonToken char_literal440 = default(CommonToken);
		CommonToken char_literal441 = default(CommonToken);
		CommonToken char_literal442 = default(CommonToken);

		CommonTree char_literal437_tree = default(CommonTree);
		CommonTree char_literal438_tree = default(CommonTree);
		CommonTree char_literal439_tree = default(CommonTree);
		CommonTree char_literal440_tree = default(CommonTree);
		CommonTree char_literal441_tree = default(CommonTree);
		CommonTree char_literal442_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "relationalOp");
		DebugLocation(1037, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 81)) { return retval; }

			// Java.g:1038:5: ( '<' '=' | '>' '=' | '<' | '>' )
			int alt122=4;
			try { DebugEnterDecision(122, false);
			int LA122_1 = input.LA(1);

			if ((LA122_1==LT))
			{
				int LA122_2 = input.LA(2);

				if ((LA122_2==EQ))
				{
					alt122 = 1;
				}
				else if ((LA122_2==BANG||LA122_2==BOOLEAN||LA122_2==BYTE||(LA122_2>=CHAR && LA122_2<=CHARLITERAL)||(LA122_2>=DOUBLE && LA122_2<=DOUBLELITERAL)||LA122_2==FALSE||(LA122_2>=FLOAT && LA122_2<=FLOATLITERAL)||LA122_2==IDENTIFIER||LA122_2==INT||LA122_2==INTLITERAL||(LA122_2>=LONG && LA122_2<=LPAREN)||(LA122_2>=NEW && LA122_2<=NULL)||LA122_2==PLUS||LA122_2==PLUSPLUS||LA122_2==SHORT||(LA122_2>=STRINGLITERAL && LA122_2<=SUB)||(LA122_2>=SUBSUB && LA122_2<=SUPER)||LA122_2==THIS||LA122_2==TILDE||LA122_2==TRUE||LA122_2==VOID))
				{
					alt122 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 122, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA122_1==GT))
			{
				int LA122_2 = input.LA(2);

				if ((LA122_2==EQ))
				{
					alt122 = 2;
				}
				else if ((LA122_2==BANG||LA122_2==BOOLEAN||LA122_2==BYTE||(LA122_2>=CHAR && LA122_2<=CHARLITERAL)||(LA122_2>=DOUBLE && LA122_2<=DOUBLELITERAL)||LA122_2==FALSE||(LA122_2>=FLOAT && LA122_2<=FLOATLITERAL)||LA122_2==IDENTIFIER||LA122_2==INT||LA122_2==INTLITERAL||(LA122_2>=LONG && LA122_2<=LPAREN)||(LA122_2>=NEW && LA122_2<=NULL)||LA122_2==PLUS||LA122_2==PLUSPLUS||LA122_2==SHORT||(LA122_2>=STRINGLITERAL && LA122_2<=SUB)||(LA122_2>=SUBSUB && LA122_2<=SUPER)||LA122_2==THIS||LA122_2==TILDE||LA122_2==TRUE||LA122_2==VOID))
				{
					alt122 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 122, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 122, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1038:10: '<' '='
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1038, 10);
				char_literal437=(CommonToken)Match(input,LT,Follow._LT_in_relationalOp6025); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal437_tree = (CommonTree)adaptor.Create(char_literal437);
				adaptor.AddChild(root_0, char_literal437_tree);
				}
				DebugLocation(1038, 14);
				char_literal438=(CommonToken)Match(input,EQ,Follow._EQ_in_relationalOp6027); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal438_tree = (CommonTree)adaptor.Create(char_literal438);
				adaptor.AddChild(root_0, char_literal438_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1039:10: '>' '='
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1039, 10);
				char_literal439=(CommonToken)Match(input,GT,Follow._GT_in_relationalOp6038); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal439_tree = (CommonTree)adaptor.Create(char_literal439);
				adaptor.AddChild(root_0, char_literal439_tree);
				}
				DebugLocation(1039, 14);
				char_literal440=(CommonToken)Match(input,EQ,Follow._EQ_in_relationalOp6040); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal440_tree = (CommonTree)adaptor.Create(char_literal440);
				adaptor.AddChild(root_0, char_literal440_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1040:9: '<'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1040, 9);
				char_literal441=(CommonToken)Match(input,LT,Follow._LT_in_relationalOp6050); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal441_tree = (CommonTree)adaptor.Create(char_literal441);
				adaptor.AddChild(root_0, char_literal441_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1041:9: '>'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1041, 9);
				char_literal442=(CommonToken)Match(input,GT,Follow._GT_in_relationalOp6060); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal442_tree = (CommonTree)adaptor.Create(char_literal442);
				adaptor.AddChild(root_0, char_literal442_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relationalOp", 81);
			LeaveRule("relationalOp", 81);
			LeaveRule_relationalOp();
			if (state.backtracking > 0) { Memoize(input, 81, relationalOp_StartIndex); }

		}
		DebugLocation(1042, 4);
		} finally { DebugExitRule(GrammarFileName, "relationalOp"); }
		return retval;

	}
	// $ANTLR end "relationalOp"

	partial void EnterRule_shiftExpression();
	partial void LeaveRule_shiftExpression();
	// $ANTLR start "shiftExpression"
	// Java.g:1044:1: shiftExpression : additiveExpression ( shiftOp additiveExpression )* ;
	[GrammarRule("shiftExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> shiftExpression()
	{
		EnterRule_shiftExpression();
		EnterRule("shiftExpression", 82);
		TraceIn("shiftExpression", 82);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int shiftExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> additiveExpression443 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> shiftOp444 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> additiveExpression445 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "shiftExpression");
		DebugLocation(1044, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 82)) { return retval; }

			// Java.g:1045:5: ( additiveExpression ( shiftOp additiveExpression )* )
			DebugEnterAlt(1);
			// Java.g:1045:9: additiveExpression ( shiftOp additiveExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1045, 9);
			PushFollow(Follow._additiveExpression_in_shiftExpression6080);
			additiveExpression443=additiveExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, additiveExpression443.Tree);
			DebugLocation(1046, 9);
			// Java.g:1046:9: ( shiftOp additiveExpression )*
			try { DebugEnterSubRule(123);
			while (true)
			{
				int alt123=2;
				try { DebugEnterDecision(123, false);
				int LA123_1 = input.LA(1);

				if ((LA123_1==LT))
				{
					int LA123_2 = input.LA(2);

					if ((LA123_2==LT))
					{
						int LA123_3 = input.LA(3);

						if ((LA123_3==BANG||LA123_3==BOOLEAN||LA123_3==BYTE||(LA123_3>=CHAR && LA123_3<=CHARLITERAL)||(LA123_3>=DOUBLE && LA123_3<=DOUBLELITERAL)||LA123_3==FALSE||(LA123_3>=FLOAT && LA123_3<=FLOATLITERAL)||LA123_3==IDENTIFIER||LA123_3==INT||LA123_3==INTLITERAL||(LA123_3>=LONG && LA123_3<=LPAREN)||(LA123_3>=NEW && LA123_3<=NULL)||LA123_3==PLUS||LA123_3==PLUSPLUS||LA123_3==SHORT||(LA123_3>=STRINGLITERAL && LA123_3<=SUB)||(LA123_3>=SUBSUB && LA123_3<=SUPER)||LA123_3==THIS||LA123_3==TILDE||LA123_3==TRUE||LA123_3==VOID))
						{
							alt123 = 1;
						}


					}


				}
				else if ((LA123_1==GT))
				{
					int LA123_2 = input.LA(2);

					if ((LA123_2==GT))
					{
						int LA123_3 = input.LA(3);

						if ((LA123_3==GT))
						{
							int LA123_4 = input.LA(4);

							if ((LA123_4==BANG||LA123_4==BOOLEAN||LA123_4==BYTE||(LA123_4>=CHAR && LA123_4<=CHARLITERAL)||(LA123_4>=DOUBLE && LA123_4<=DOUBLELITERAL)||LA123_4==FALSE||(LA123_4>=FLOAT && LA123_4<=FLOATLITERAL)||LA123_4==IDENTIFIER||LA123_4==INT||LA123_4==INTLITERAL||(LA123_4>=LONG && LA123_4<=LPAREN)||(LA123_4>=NEW && LA123_4<=NULL)||LA123_4==PLUS||LA123_4==PLUSPLUS||LA123_4==SHORT||(LA123_4>=STRINGLITERAL && LA123_4<=SUB)||(LA123_4>=SUBSUB && LA123_4<=SUPER)||LA123_4==THIS||LA123_4==TILDE||LA123_4==TRUE||LA123_4==VOID))
							{
								alt123 = 1;
							}


						}
						else if ((LA123_3==BANG||LA123_3==BOOLEAN||LA123_3==BYTE||(LA123_3>=CHAR && LA123_3<=CHARLITERAL)||(LA123_3>=DOUBLE && LA123_3<=DOUBLELITERAL)||LA123_3==FALSE||(LA123_3>=FLOAT && LA123_3<=FLOATLITERAL)||LA123_3==IDENTIFIER||LA123_3==INT||LA123_3==INTLITERAL||(LA123_3>=LONG && LA123_3<=LPAREN)||(LA123_3>=NEW && LA123_3<=NULL)||LA123_3==PLUS||LA123_3==PLUSPLUS||LA123_3==SHORT||(LA123_3>=STRINGLITERAL && LA123_3<=SUB)||(LA123_3>=SUBSUB && LA123_3<=SUPER)||LA123_3==THIS||LA123_3==TILDE||LA123_3==TRUE||LA123_3==VOID))
						{
							alt123 = 1;
						}


					}


				}


				} finally { DebugExitDecision(123); }
				switch ( alt123 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1046:10: shiftOp additiveExpression
					{
					DebugLocation(1046, 10);
					PushFollow(Follow._shiftOp_in_shiftExpression6091);
					shiftOp444=shiftOp();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shiftOp444.Tree);
					DebugLocation(1046, 18);
					PushFollow(Follow._additiveExpression_in_shiftExpression6093);
					additiveExpression445=additiveExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, additiveExpression445.Tree);

					}
					break;

				default:
					goto loop123;
				}
			}

			loop123:
				;

			} finally { DebugExitSubRule(123); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shiftExpression", 82);
			LeaveRule("shiftExpression", 82);
			LeaveRule_shiftExpression();
			if (state.backtracking > 0) { Memoize(input, 82, shiftExpression_StartIndex); }

		}
		DebugLocation(1048, 4);
		} finally { DebugExitRule(GrammarFileName, "shiftExpression"); }
		return retval;

	}
	// $ANTLR end "shiftExpression"

	partial void EnterRule_shiftOp();
	partial void LeaveRule_shiftOp();
	// $ANTLR start "shiftOp"
	// Java.g:1051:1: shiftOp : ( '<' '<' | '>' '>' '>' | '>' '>' );
	[GrammarRule("shiftOp")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> shiftOp()
	{
		EnterRule_shiftOp();
		EnterRule("shiftOp", 83);
		TraceIn("shiftOp", 83);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int shiftOp_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal446 = default(CommonToken);
		CommonToken char_literal447 = default(CommonToken);
		CommonToken char_literal448 = default(CommonToken);
		CommonToken char_literal449 = default(CommonToken);
		CommonToken char_literal450 = default(CommonToken);
		CommonToken char_literal451 = default(CommonToken);
		CommonToken char_literal452 = default(CommonToken);

		CommonTree char_literal446_tree = default(CommonTree);
		CommonTree char_literal447_tree = default(CommonTree);
		CommonTree char_literal448_tree = default(CommonTree);
		CommonTree char_literal449_tree = default(CommonTree);
		CommonTree char_literal450_tree = default(CommonTree);
		CommonTree char_literal451_tree = default(CommonTree);
		CommonTree char_literal452_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shiftOp");
		DebugLocation(1051, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 83)) { return retval; }

			// Java.g:1052:5: ( '<' '<' | '>' '>' '>' | '>' '>' )
			int alt124=3;
			try { DebugEnterDecision(124, false);
			int LA124_1 = input.LA(1);

			if ((LA124_1==LT))
			{
				alt124 = 1;
			}
			else if ((LA124_1==GT))
			{
				int LA124_2 = input.LA(2);

				if ((LA124_2==GT))
				{
					int LA124_3 = input.LA(3);

					if ((LA124_3==GT))
					{
						alt124 = 2;
					}
					else if ((LA124_3==BANG||LA124_3==BOOLEAN||LA124_3==BYTE||(LA124_3>=CHAR && LA124_3<=CHARLITERAL)||(LA124_3>=DOUBLE && LA124_3<=DOUBLELITERAL)||LA124_3==FALSE||(LA124_3>=FLOAT && LA124_3<=FLOATLITERAL)||LA124_3==IDENTIFIER||LA124_3==INT||LA124_3==INTLITERAL||(LA124_3>=LONG && LA124_3<=LPAREN)||(LA124_3>=NEW && LA124_3<=NULL)||LA124_3==PLUS||LA124_3==PLUSPLUS||LA124_3==SHORT||(LA124_3>=STRINGLITERAL && LA124_3<=SUB)||(LA124_3>=SUBSUB && LA124_3<=SUPER)||LA124_3==THIS||LA124_3==TILDE||LA124_3==TRUE||LA124_3==VOID))
					{
						alt124 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 124, 3, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 124, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 124, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(124); }
			switch (alt124)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1052:10: '<' '<'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1052, 10);
				char_literal446=(CommonToken)Match(input,LT,Follow._LT_in_shiftOp6126); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal446_tree = (CommonTree)adaptor.Create(char_literal446);
				adaptor.AddChild(root_0, char_literal446_tree);
				}
				DebugLocation(1052, 14);
				char_literal447=(CommonToken)Match(input,LT,Follow._LT_in_shiftOp6128); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal447_tree = (CommonTree)adaptor.Create(char_literal447);
				adaptor.AddChild(root_0, char_literal447_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1053:10: '>' '>' '>'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1053, 10);
				char_literal448=(CommonToken)Match(input,GT,Follow._GT_in_shiftOp6139); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal448_tree = (CommonTree)adaptor.Create(char_literal448);
				adaptor.AddChild(root_0, char_literal448_tree);
				}
				DebugLocation(1053, 14);
				char_literal449=(CommonToken)Match(input,GT,Follow._GT_in_shiftOp6141); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal449_tree = (CommonTree)adaptor.Create(char_literal449);
				adaptor.AddChild(root_0, char_literal449_tree);
				}
				DebugLocation(1053, 18);
				char_literal450=(CommonToken)Match(input,GT,Follow._GT_in_shiftOp6143); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal450_tree = (CommonTree)adaptor.Create(char_literal450);
				adaptor.AddChild(root_0, char_literal450_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1054:10: '>' '>'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1054, 10);
				char_literal451=(CommonToken)Match(input,GT,Follow._GT_in_shiftOp6154); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal451_tree = (CommonTree)adaptor.Create(char_literal451);
				adaptor.AddChild(root_0, char_literal451_tree);
				}
				DebugLocation(1054, 14);
				char_literal452=(CommonToken)Match(input,GT,Follow._GT_in_shiftOp6156); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal452_tree = (CommonTree)adaptor.Create(char_literal452);
				adaptor.AddChild(root_0, char_literal452_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shiftOp", 83);
			LeaveRule("shiftOp", 83);
			LeaveRule_shiftOp();
			if (state.backtracking > 0) { Memoize(input, 83, shiftOp_StartIndex); }

		}
		DebugLocation(1055, 4);
		} finally { DebugExitRule(GrammarFileName, "shiftOp"); }
		return retval;

	}
	// $ANTLR end "shiftOp"

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();
	// $ANTLR start "additiveExpression"
	// Java.g:1058:1: additiveExpression : multiplicativeExpression ( ( '+' | '-' ) multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 84);
		TraceIn("additiveExpression", 84);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int additiveExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken set454 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> multiplicativeExpression453 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> multiplicativeExpression455 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set454_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(1058, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 84)) { return retval; }

			// Java.g:1059:5: ( multiplicativeExpression ( ( '+' | '-' ) multiplicativeExpression )* )
			DebugEnterAlt(1);
			// Java.g:1059:9: multiplicativeExpression ( ( '+' | '-' ) multiplicativeExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1059, 9);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression6177);
			multiplicativeExpression453=multiplicativeExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicativeExpression453.Tree);
			DebugLocation(1060, 9);
			// Java.g:1060:9: ( ( '+' | '-' ) multiplicativeExpression )*
			try { DebugEnterSubRule(125);
			while (true)
			{
				int alt125=2;
				try { DebugEnterDecision(125, false);
				int LA125_1 = input.LA(1);

				if ((LA125_1==PLUS||LA125_1==SUB))
				{
					alt125 = 1;
				}


				} finally { DebugExitDecision(125); }
				switch ( alt125 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1061:13: ( '+' | '-' ) multiplicativeExpression
					{
					DebugLocation(1061, 13);

					set454=(CommonToken)input.LT(1);
					if (input.LA(1)==PLUS||input.LA(1)==SUB)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set454));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(1064, 13);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression6254);
					multiplicativeExpression455=multiplicativeExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicativeExpression455.Tree);

					}
					break;

				default:
					goto loop125;
				}
			}

			loop125:
				;

			} finally { DebugExitSubRule(125); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additiveExpression", 84);
			LeaveRule("additiveExpression", 84);
			LeaveRule_additiveExpression();
			if (state.backtracking > 0) { Memoize(input, 84, additiveExpression_StartIndex); }

		}
		DebugLocation(1066, 4);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return retval;

	}
	// $ANTLR end "additiveExpression"

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();
	// $ANTLR start "multiplicativeExpression"
	// Java.g:1068:1: multiplicativeExpression : unaryExpression ( ( '*' | '/' | '%' ) unaryExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 85);
		TraceIn("multiplicativeExpression", 85);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int multiplicativeExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken set457 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> unaryExpression456 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> unaryExpression458 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set457_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(1068, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 85)) { return retval; }

			// Java.g:1069:5: ( unaryExpression ( ( '*' | '/' | '%' ) unaryExpression )* )
			DebugEnterAlt(1);
			// Java.g:1070:9: unaryExpression ( ( '*' | '/' | '%' ) unaryExpression )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1070, 9);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression6292);
			unaryExpression456=unaryExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression456.Tree);
			DebugLocation(1071, 9);
			// Java.g:1071:9: ( ( '*' | '/' | '%' ) unaryExpression )*
			try { DebugEnterSubRule(126);
			while (true)
			{
				int alt126=2;
				try { DebugEnterDecision(126, false);
				int LA126_1 = input.LA(1);

				if ((LA126_1==PERCENT||LA126_1==SLASH||LA126_1==STAR))
				{
					alt126 = 1;
				}


				} finally { DebugExitDecision(126); }
				switch ( alt126 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1072:13: ( '*' | '/' | '%' ) unaryExpression
					{
					DebugLocation(1072, 13);

					set457=(CommonToken)input.LT(1);
					if (input.LA(1)==PERCENT||input.LA(1)==SLASH||input.LA(1)==STAR)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set457));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(1076, 13);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression6387);
					unaryExpression458=unaryExpression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression458.Tree);

					}
					break;

				default:
					goto loop126;
				}
			}

			loop126:
				;

			} finally { DebugExitSubRule(126); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicativeExpression", 85);
			LeaveRule("multiplicativeExpression", 85);
			LeaveRule_multiplicativeExpression();
			if (state.backtracking > 0) { Memoize(input, 85, multiplicativeExpression_StartIndex); }

		}
		DebugLocation(1078, 4);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return retval;

	}
	// $ANTLR end "multiplicativeExpression"

	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();
	// $ANTLR start "unaryExpression"
	// Java.g:1084:1: unaryExpression : ( '+' unaryExpression | '-' unaryExpression | '++' unaryExpression | '--' unaryExpression | unaryExpressionNotPlusMinus );
	[GrammarRule("unaryExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 86);
		TraceIn("unaryExpression", 86);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int unaryExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal459 = default(CommonToken);
		CommonToken char_literal461 = default(CommonToken);
		CommonToken string_literal463 = default(CommonToken);
		CommonToken string_literal465 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> unaryExpression460 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> unaryExpression462 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> unaryExpression464 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> unaryExpression466 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> unaryExpressionNotPlusMinus467 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal459_tree = default(CommonTree);
		CommonTree char_literal461_tree = default(CommonTree);
		CommonTree string_literal463_tree = default(CommonTree);
		CommonTree string_literal465_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(1084, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 86)) { return retval; }

			// Java.g:1085:5: ( '+' unaryExpression | '-' unaryExpression | '++' unaryExpression | '--' unaryExpression | unaryExpressionNotPlusMinus )
			int alt127=5;
			try { DebugEnterDecision(127, false);
			switch (input.LA(1))
			{
			case PLUS:
				{
				alt127 = 1;
				}
				break;
			case SUB:
				{
				alt127 = 2;
				}
				break;
			case PLUSPLUS:
				{
				alt127 = 3;
				}
				break;
			case SUBSUB:
				{
				alt127 = 4;
				}
				break;
			case BANG:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARLITERAL:
			case DOUBLE:
			case DOUBLELITERAL:
			case FALSE:
			case FLOAT:
			case FLOATLITERAL:
			case IDENTIFIER:
			case INT:
			case INTLITERAL:
			case LONG:
			case LONGLITERAL:
			case LPAREN:
			case NEW:
			case NULL:
			case SHORT:
			case STRINGLITERAL:
			case SUPER:
			case THIS:
			case TILDE:
			case TRUE:
			case VOID:
				{
				alt127 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(127); }
			switch (alt127)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1085:9: '+' unaryExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1085, 9);
				char_literal459=(CommonToken)Match(input,PLUS,Follow._PLUS_in_unaryExpression6420); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal459_tree = (CommonTree)adaptor.Create(char_literal459);
				adaptor.AddChild(root_0, char_literal459_tree);
				}
				DebugLocation(1085, 14);
				PushFollow(Follow._unaryExpression_in_unaryExpression6423);
				unaryExpression460=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression460.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1086:9: '-' unaryExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1086, 9);
				char_literal461=(CommonToken)Match(input,SUB,Follow._SUB_in_unaryExpression6433); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal461_tree = (CommonTree)adaptor.Create(char_literal461);
				adaptor.AddChild(root_0, char_literal461_tree);
				}
				DebugLocation(1086, 13);
				PushFollow(Follow._unaryExpression_in_unaryExpression6435);
				unaryExpression462=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression462.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1087:9: '++' unaryExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1087, 9);
				string_literal463=(CommonToken)Match(input,PLUSPLUS,Follow._PLUSPLUS_in_unaryExpression6445); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal463_tree = (CommonTree)adaptor.Create(string_literal463);
				adaptor.AddChild(root_0, string_literal463_tree);
				}
				DebugLocation(1087, 14);
				PushFollow(Follow._unaryExpression_in_unaryExpression6447);
				unaryExpression464=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression464.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1088:9: '--' unaryExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1088, 9);
				string_literal465=(CommonToken)Match(input,SUBSUB,Follow._SUBSUB_in_unaryExpression6457); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal465_tree = (CommonTree)adaptor.Create(string_literal465);
				adaptor.AddChild(root_0, string_literal465_tree);
				}
				DebugLocation(1088, 14);
				PushFollow(Follow._unaryExpression_in_unaryExpression6459);
				unaryExpression466=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression466.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:1089:9: unaryExpressionNotPlusMinus
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1089, 9);
				PushFollow(Follow._unaryExpressionNotPlusMinus_in_unaryExpression6469);
				unaryExpressionNotPlusMinus467=unaryExpressionNotPlusMinus();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpressionNotPlusMinus467.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpression", 86);
			LeaveRule("unaryExpression", 86);
			LeaveRule_unaryExpression();
			if (state.backtracking > 0) { Memoize(input, 86, unaryExpression_StartIndex); }

		}
		DebugLocation(1090, 4);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return retval;

	}
	// $ANTLR end "unaryExpression"

	partial void EnterRule_unaryExpressionNotPlusMinus();
	partial void LeaveRule_unaryExpressionNotPlusMinus();
	// $ANTLR start "unaryExpressionNotPlusMinus"
	// Java.g:1092:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? );
	[GrammarRule("unaryExpressionNotPlusMinus")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> unaryExpressionNotPlusMinus()
	{
		EnterRule_unaryExpressionNotPlusMinus();
		EnterRule("unaryExpressionNotPlusMinus", 87);
		TraceIn("unaryExpressionNotPlusMinus", 87);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int unaryExpressionNotPlusMinus_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal468 = default(CommonToken);
		CommonToken char_literal470 = default(CommonToken);
		CommonToken set475 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> unaryExpression469 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> unaryExpression471 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> castExpression472 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> primary473 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> selector474 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal468_tree = default(CommonTree);
		CommonTree char_literal470_tree = default(CommonTree);
		CommonTree set475_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "unaryExpressionNotPlusMinus");
		DebugLocation(1092, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 87)) { return retval; }

			// Java.g:1093:5: ( '~' unaryExpression | '!' unaryExpression | castExpression | primary ( selector )* ( '++' | '--' )? )
			int alt130=4;
			try { DebugEnterDecision(130, false);
			switch (input.LA(1))
			{
			case TILDE:
				{
				alt130 = 1;
				}
				break;
			case BANG:
				{
				alt130 = 2;
				}
				break;
			case LPAREN:
				{
				int LA130_2 = input.LA(2);

				if ((EvaluatePredicate(synpred202_Java_fragment)))
				{
					alt130 = 3;
				}
				else if ((true))
				{
					alt130 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 130, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CHARLITERAL:
			case DOUBLE:
			case DOUBLELITERAL:
			case FALSE:
			case FLOAT:
			case FLOATLITERAL:
			case IDENTIFIER:
			case INT:
			case INTLITERAL:
			case LONG:
			case LONGLITERAL:
			case NEW:
			case NULL:
			case SHORT:
			case STRINGLITERAL:
			case SUPER:
			case THIS:
			case TRUE:
			case VOID:
				{
				alt130 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 130, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(130); }
			switch (alt130)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1093:9: '~' unaryExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1093, 9);
				char_literal468=(CommonToken)Match(input,TILDE,Follow._TILDE_in_unaryExpressionNotPlusMinus6489); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal468_tree = (CommonTree)adaptor.Create(char_literal468);
				adaptor.AddChild(root_0, char_literal468_tree);
				}
				DebugLocation(1093, 13);
				PushFollow(Follow._unaryExpression_in_unaryExpressionNotPlusMinus6491);
				unaryExpression469=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression469.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1094:9: '!' unaryExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1094, 9);
				char_literal470=(CommonToken)Match(input,BANG,Follow._BANG_in_unaryExpressionNotPlusMinus6501); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal470_tree = (CommonTree)adaptor.Create(char_literal470);
				adaptor.AddChild(root_0, char_literal470_tree);
				}
				DebugLocation(1094, 13);
				PushFollow(Follow._unaryExpression_in_unaryExpressionNotPlusMinus6503);
				unaryExpression471=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression471.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1095:9: castExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1095, 9);
				PushFollow(Follow._castExpression_in_unaryExpressionNotPlusMinus6513);
				castExpression472=castExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, castExpression472.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1096:9: primary ( selector )* ( '++' | '--' )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1096, 9);
				PushFollow(Follow._primary_in_unaryExpressionNotPlusMinus6523);
				primary473=primary();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primary473.Tree);
				DebugLocation(1097, 9);
				// Java.g:1097:9: ( selector )*
				try { DebugEnterSubRule(128);
				while (true)
				{
					int alt128=2;
					try { DebugEnterDecision(128, false);
					int LA128_1 = input.LA(1);

					if ((LA128_1==DOT||LA128_1==LBRACKET))
					{
						alt128 = 1;
					}


					} finally { DebugExitDecision(128); }
					switch ( alt128 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1097:10: selector
						{
						DebugLocation(1097, 10);
						PushFollow(Follow._selector_in_unaryExpressionNotPlusMinus6534);
						selector474=selector();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, selector474.Tree);

						}
						break;

					default:
						goto loop128;
					}
				}

				loop128:
					;

				} finally { DebugExitSubRule(128); }

				DebugLocation(1099, 9);
				// Java.g:1099:9: ( '++' | '--' )?
				int alt129=2;
				try { DebugEnterSubRule(129);
				try { DebugEnterDecision(129, false);
				int LA129_1 = input.LA(1);

				if ((LA129_1==PLUSPLUS||LA129_1==SUBSUB))
				{
					alt129 = 1;
				}
				} finally { DebugExitDecision(129); }
				switch (alt129)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:
					{
					DebugLocation(1099, 9);

					set475=(CommonToken)input.LT(1);
					if (input.LA(1)==PLUSPLUS||input.LA(1)==SUBSUB)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set475));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(129); }


				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExpressionNotPlusMinus", 87);
			LeaveRule("unaryExpressionNotPlusMinus", 87);
			LeaveRule_unaryExpressionNotPlusMinus();
			if (state.backtracking > 0) { Memoize(input, 87, unaryExpressionNotPlusMinus_StartIndex); }

		}
		DebugLocation(1102, 4);
		} finally { DebugExitRule(GrammarFileName, "unaryExpressionNotPlusMinus"); }
		return retval;

	}
	// $ANTLR end "unaryExpressionNotPlusMinus"

	partial void EnterRule_castExpression();
	partial void LeaveRule_castExpression();
	// $ANTLR start "castExpression"
	// Java.g:1104:1: castExpression : ( '(' primitiveType ')' unaryExpression | '(' type ')' unaryExpressionNotPlusMinus );
	[GrammarRule("castExpression")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> castExpression()
	{
		EnterRule_castExpression();
		EnterRule("castExpression", 88);
		TraceIn("castExpression", 88);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int castExpression_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal476 = default(CommonToken);
		CommonToken char_literal478 = default(CommonToken);
		CommonToken char_literal480 = default(CommonToken);
		CommonToken char_literal482 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> primitiveType477 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> unaryExpression479 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type481 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> unaryExpressionNotPlusMinus483 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal476_tree = default(CommonTree);
		CommonTree char_literal478_tree = default(CommonTree);
		CommonTree char_literal480_tree = default(CommonTree);
		CommonTree char_literal482_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "castExpression");
		DebugLocation(1104, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 88)) { return retval; }

			// Java.g:1105:5: ( '(' primitiveType ')' unaryExpression | '(' type ')' unaryExpressionNotPlusMinus )
			int alt131=2;
			try { DebugEnterDecision(131, false);
			int LA131_1 = input.LA(1);

			if ((LA131_1==LPAREN))
			{
				int LA131_2 = input.LA(2);

				if ((EvaluatePredicate(synpred206_Java_fragment)))
				{
					alt131 = 1;
				}
				else if ((true))
				{
					alt131 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 131, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 131, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(131); }
			switch (alt131)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1105:9: '(' primitiveType ')' unaryExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1105, 9);
				char_literal476=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_castExpression6604); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal476_tree = (CommonTree)adaptor.Create(char_literal476);
				adaptor.AddChild(root_0, char_literal476_tree);
				}
				DebugLocation(1105, 13);
				PushFollow(Follow._primitiveType_in_castExpression6606);
				primitiveType477=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType477.Tree);
				DebugLocation(1105, 27);
				char_literal478=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_castExpression6608); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal478_tree = (CommonTree)adaptor.Create(char_literal478);
				adaptor.AddChild(root_0, char_literal478_tree);
				}
				DebugLocation(1105, 31);
				PushFollow(Follow._unaryExpression_in_castExpression6610);
				unaryExpression479=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpression479.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1106:9: '(' type ')' unaryExpressionNotPlusMinus
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1106, 9);
				char_literal480=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_castExpression6620); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal480_tree = (CommonTree)adaptor.Create(char_literal480);
				adaptor.AddChild(root_0, char_literal480_tree);
				}
				DebugLocation(1106, 13);
				PushFollow(Follow._type_in_castExpression6622);
				type481=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type481.Tree);
				DebugLocation(1106, 18);
				char_literal482=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_castExpression6624); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal482_tree = (CommonTree)adaptor.Create(char_literal482);
				adaptor.AddChild(root_0, char_literal482_tree);
				}
				DebugLocation(1106, 22);
				PushFollow(Follow._unaryExpressionNotPlusMinus_in_castExpression6626);
				unaryExpressionNotPlusMinus483=unaryExpressionNotPlusMinus();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unaryExpressionNotPlusMinus483.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("castExpression", 88);
			LeaveRule("castExpression", 88);
			LeaveRule_castExpression();
			if (state.backtracking > 0) { Memoize(input, 88, castExpression_StartIndex); }

		}
		DebugLocation(1107, 4);
		} finally { DebugExitRule(GrammarFileName, "castExpression"); }
		return retval;

	}
	// $ANTLR end "castExpression"

	partial void EnterRule_primary();
	partial void LeaveRule_primary();
	// $ANTLR start "primary"
	// Java.g:1112:1: primary : ( parExpression | 'this' ( '.' IDENTIFIER )* ( identifierSuffix )? | IDENTIFIER ( '.' IDENTIFIER )* ( identifierSuffix )? | 'super' superSuffix | literal | creator | primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' );
	[GrammarRule("primary")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> primary()
	{
		EnterRule_primary();
		EnterRule("primary", 89);
		TraceIn("primary", 89);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int primary_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal485 = default(CommonToken);
		CommonToken char_literal486 = default(CommonToken);
		CommonToken IDENTIFIER487 = default(CommonToken);
		CommonToken IDENTIFIER489 = default(CommonToken);
		CommonToken char_literal490 = default(CommonToken);
		CommonToken IDENTIFIER491 = default(CommonToken);
		CommonToken string_literal493 = default(CommonToken);
		CommonToken char_literal498 = default(CommonToken);
		CommonToken char_literal499 = default(CommonToken);
		CommonToken char_literal500 = default(CommonToken);
		CommonToken string_literal501 = default(CommonToken);
		CommonToken string_literal502 = default(CommonToken);
		CommonToken char_literal503 = default(CommonToken);
		CommonToken string_literal504 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> parExpression484 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> identifierSuffix488 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> identifierSuffix492 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> superSuffix494 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> literal495 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> creator496 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> primitiveType497 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal485_tree = default(CommonTree);
		CommonTree char_literal486_tree = default(CommonTree);
		CommonTree IDENTIFIER487_tree = default(CommonTree);
		CommonTree IDENTIFIER489_tree = default(CommonTree);
		CommonTree char_literal490_tree = default(CommonTree);
		CommonTree IDENTIFIER491_tree = default(CommonTree);
		CommonTree string_literal493_tree = default(CommonTree);
		CommonTree char_literal498_tree = default(CommonTree);
		CommonTree char_literal499_tree = default(CommonTree);
		CommonTree char_literal500_tree = default(CommonTree);
		CommonTree string_literal501_tree = default(CommonTree);
		CommonTree string_literal502_tree = default(CommonTree);
		CommonTree char_literal503_tree = default(CommonTree);
		CommonTree string_literal504_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "primary");
		DebugLocation(1112, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 89)) { return retval; }

			// Java.g:1113:5: ( parExpression | 'this' ( '.' IDENTIFIER )* ( identifierSuffix )? | IDENTIFIER ( '.' IDENTIFIER )* ( identifierSuffix )? | 'super' superSuffix | literal | creator | primitiveType ( '[' ']' )* '.' 'class' | 'void' '.' 'class' )
			int alt137=8;
			try { DebugEnterDecision(137, false);
			switch (input.LA(1))
			{
			case LPAREN:
				{
				alt137 = 1;
				}
				break;
			case THIS:
				{
				alt137 = 2;
				}
				break;
			case IDENTIFIER:
				{
				alt137 = 3;
				}
				break;
			case SUPER:
				{
				alt137 = 4;
				}
				break;
			case CHARLITERAL:
			case DOUBLELITERAL:
			case FALSE:
			case FLOATLITERAL:
			case INTLITERAL:
			case LONGLITERAL:
			case NULL:
			case STRINGLITERAL:
			case TRUE:
				{
				alt137 = 5;
				}
				break;
			case NEW:
				{
				alt137 = 6;
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				alt137 = 7;
				}
				break;
			case VOID:
				{
				alt137 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 137, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(137); }
			switch (alt137)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1113:9: parExpression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1113, 9);
				PushFollow(Follow._parExpression_in_primary6648);
				parExpression484=parExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parExpression484.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1114:9: 'this' ( '.' IDENTIFIER )* ( identifierSuffix )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1114, 9);
				string_literal485=(CommonToken)Match(input,THIS,Follow._THIS_in_primary6670); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal485_tree = (CommonTree)adaptor.Create(string_literal485);
				adaptor.AddChild(root_0, string_literal485_tree);
				}
				DebugLocation(1115, 9);
				// Java.g:1115:9: ( '.' IDENTIFIER )*
				try { DebugEnterSubRule(132);
				while (true)
				{
					int alt132=2;
					try { DebugEnterDecision(132, false);
					int LA132_1 = input.LA(1);

					if ((LA132_1==DOT))
					{
						int LA132_2 = input.LA(2);

						if ((LA132_2==IDENTIFIER))
						{
							int LA132_3 = input.LA(3);

							if ((EvaluatePredicate(synpred208_Java_fragment)))
							{
								alt132 = 1;
							}


						}


					}


					} finally { DebugExitDecision(132); }
					switch ( alt132 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1115:10: '.' IDENTIFIER
						{
						DebugLocation(1115, 10);
						char_literal486=(CommonToken)Match(input,DOT,Follow._DOT_in_primary6681); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal486_tree = (CommonTree)adaptor.Create(char_literal486);
						adaptor.AddChild(root_0, char_literal486_tree);
						}
						DebugLocation(1115, 14);
						IDENTIFIER487=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primary6683); if (state.failed) return retval;
						if (state.backtracking == 0) {
						IDENTIFIER487_tree = (CommonTree)adaptor.Create(IDENTIFIER487);
						adaptor.AddChild(root_0, IDENTIFIER487_tree);
						}

						}
						break;

					default:
						goto loop132;
					}
				}

				loop132:
					;

				} finally { DebugExitSubRule(132); }

				DebugLocation(1117, 9);
				// Java.g:1117:9: ( identifierSuffix )?
				int alt133=2;
				try { DebugEnterSubRule(133);
				try { DebugEnterDecision(133, false);
				switch (input.LA(1))
				{
				case LBRACKET:
					{
					int LA133_2 = input.LA(2);

					if ((EvaluatePredicate(synpred209_Java_fragment)))
					{
						alt133 = 1;
					}
					}
					break;
				case LPAREN:
					{
					alt133 = 1;
					}
					break;
				case DOT:
					{
					int LA133_2 = input.LA(2);

					if ((EvaluatePredicate(synpred209_Java_fragment)))
					{
						alt133 = 1;
					}
					}
					break;
				}

				} finally { DebugExitDecision(133); }
				switch (alt133)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1117:10: identifierSuffix
					{
					DebugLocation(1117, 10);
					PushFollow(Follow._identifierSuffix_in_primary6705);
					identifierSuffix488=identifierSuffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, identifierSuffix488.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(133); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1119:9: IDENTIFIER ( '.' IDENTIFIER )* ( identifierSuffix )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1119, 9);
				IDENTIFIER489=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primary6726); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER489_tree = (CommonTree)adaptor.Create(IDENTIFIER489);
				adaptor.AddChild(root_0, IDENTIFIER489_tree);
				}
				DebugLocation(1120, 9);
				// Java.g:1120:9: ( '.' IDENTIFIER )*
				try { DebugEnterSubRule(134);
				while (true)
				{
					int alt134=2;
					try { DebugEnterDecision(134, false);
					int LA134_1 = input.LA(1);

					if ((LA134_1==DOT))
					{
						int LA134_2 = input.LA(2);

						if ((LA134_2==IDENTIFIER))
						{
							int LA134_3 = input.LA(3);

							if ((EvaluatePredicate(synpred211_Java_fragment)))
							{
								alt134 = 1;
							}


						}


					}


					} finally { DebugExitDecision(134); }
					switch ( alt134 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1120:10: '.' IDENTIFIER
						{
						DebugLocation(1120, 10);
						char_literal490=(CommonToken)Match(input,DOT,Follow._DOT_in_primary6737); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal490_tree = (CommonTree)adaptor.Create(char_literal490);
						adaptor.AddChild(root_0, char_literal490_tree);
						}
						DebugLocation(1120, 14);
						IDENTIFIER491=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primary6739); if (state.failed) return retval;
						if (state.backtracking == 0) {
						IDENTIFIER491_tree = (CommonTree)adaptor.Create(IDENTIFIER491);
						adaptor.AddChild(root_0, IDENTIFIER491_tree);
						}

						}
						break;

					default:
						goto loop134;
					}
				}

				loop134:
					;

				} finally { DebugExitSubRule(134); }

				DebugLocation(1122, 9);
				// Java.g:1122:9: ( identifierSuffix )?
				int alt135=2;
				try { DebugEnterSubRule(135);
				try { DebugEnterDecision(135, false);
				switch (input.LA(1))
				{
				case LBRACKET:
					{
					int LA135_2 = input.LA(2);

					if ((EvaluatePredicate(synpred212_Java_fragment)))
					{
						alt135 = 1;
					}
					}
					break;
				case LPAREN:
					{
					alt135 = 1;
					}
					break;
				case DOT:
					{
					int LA135_2 = input.LA(2);

					if ((EvaluatePredicate(synpred212_Java_fragment)))
					{
						alt135 = 1;
					}
					}
					break;
				}

				} finally { DebugExitDecision(135); }
				switch (alt135)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1122:10: identifierSuffix
					{
					DebugLocation(1122, 10);
					PushFollow(Follow._identifierSuffix_in_primary6761);
					identifierSuffix492=identifierSuffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, identifierSuffix492.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(135); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1124:9: 'super' superSuffix
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1124, 9);
				string_literal493=(CommonToken)Match(input,SUPER,Follow._SUPER_in_primary6782); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal493_tree = (CommonTree)adaptor.Create(string_literal493);
				adaptor.AddChild(root_0, string_literal493_tree);
				}
				DebugLocation(1125, 9);
				PushFollow(Follow._superSuffix_in_primary6792);
				superSuffix494=superSuffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, superSuffix494.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:1126:9: literal
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1126, 9);
				PushFollow(Follow._literal_in_primary6802);
				literal495=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal495.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:1127:9: creator
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1127, 9);
				PushFollow(Follow._creator_in_primary6812);
				creator496=creator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, creator496.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:1128:9: primitiveType ( '[' ']' )* '.' 'class'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1128, 9);
				PushFollow(Follow._primitiveType_in_primary6822);
				primitiveType497=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType497.Tree);
				DebugLocation(1129, 9);
				// Java.g:1129:9: ( '[' ']' )*
				try { DebugEnterSubRule(136);
				while (true)
				{
					int alt136=2;
					try { DebugEnterDecision(136, false);
					int LA136_1 = input.LA(1);

					if ((LA136_1==LBRACKET))
					{
						alt136 = 1;
					}


					} finally { DebugExitDecision(136); }
					switch ( alt136 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1129:10: '[' ']'
						{
						DebugLocation(1129, 10);
						char_literal498=(CommonToken)Match(input,LBRACKET,Follow._LBRACKET_in_primary6833); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal498_tree = (CommonTree)adaptor.Create(char_literal498);
						adaptor.AddChild(root_0, char_literal498_tree);
						}
						DebugLocation(1129, 14);
						char_literal499=(CommonToken)Match(input,RBRACKET,Follow._RBRACKET_in_primary6835); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal499_tree = (CommonTree)adaptor.Create(char_literal499);
						adaptor.AddChild(root_0, char_literal499_tree);
						}

						}
						break;

					default:
						goto loop136;
					}
				}

				loop136:
					;

				} finally { DebugExitSubRule(136); }

				DebugLocation(1131, 9);
				char_literal500=(CommonToken)Match(input,DOT,Follow._DOT_in_primary6856); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal500_tree = (CommonTree)adaptor.Create(char_literal500);
				adaptor.AddChild(root_0, char_literal500_tree);
				}
				DebugLocation(1131, 13);
				string_literal501=(CommonToken)Match(input,CLASS,Follow._CLASS_in_primary6858); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal501_tree = (CommonTree)adaptor.Create(string_literal501);
				adaptor.AddChild(root_0, string_literal501_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Java.g:1132:9: 'void' '.' 'class'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1132, 9);
				string_literal502=(CommonToken)Match(input,VOID,Follow._VOID_in_primary6868); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal502_tree = (CommonTree)adaptor.Create(string_literal502);
				adaptor.AddChild(root_0, string_literal502_tree);
				}
				DebugLocation(1132, 16);
				char_literal503=(CommonToken)Match(input,DOT,Follow._DOT_in_primary6870); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal503_tree = (CommonTree)adaptor.Create(char_literal503);
				adaptor.AddChild(root_0, char_literal503_tree);
				}
				DebugLocation(1132, 20);
				string_literal504=(CommonToken)Match(input,CLASS,Follow._CLASS_in_primary6872); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal504_tree = (CommonTree)adaptor.Create(string_literal504);
				adaptor.AddChild(root_0, string_literal504_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary", 89);
			LeaveRule("primary", 89);
			LeaveRule_primary();
			if (state.backtracking > 0) { Memoize(input, 89, primary_StartIndex); }

		}
		DebugLocation(1133, 4);
		} finally { DebugExitRule(GrammarFileName, "primary"); }
		return retval;

	}
	// $ANTLR end "primary"

	partial void EnterRule_superSuffix();
	partial void LeaveRule_superSuffix();
	// $ANTLR start "superSuffix"
	// Java.g:1136:1: superSuffix : ( arguments | '.' ( typeArguments )? IDENTIFIER ( arguments )? );
	[GrammarRule("superSuffix")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> superSuffix()
	{
		EnterRule_superSuffix();
		EnterRule("superSuffix", 90);
		TraceIn("superSuffix", 90);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int superSuffix_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal506 = default(CommonToken);
		CommonToken IDENTIFIER508 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> arguments505 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> typeArguments507 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> arguments509 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal506_tree = default(CommonTree);
		CommonTree IDENTIFIER508_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "superSuffix");
		DebugLocation(1136, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 90)) { return retval; }

			// Java.g:1137:5: ( arguments | '.' ( typeArguments )? IDENTIFIER ( arguments )? )
			int alt140=2;
			try { DebugEnterDecision(140, false);
			int LA140_1 = input.LA(1);

			if ((LA140_1==LPAREN))
			{
				alt140 = 1;
			}
			else if ((LA140_1==DOT))
			{
				alt140 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 140, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(140); }
			switch (alt140)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1137:9: arguments
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1137, 9);
				PushFollow(Follow._arguments_in_superSuffix6898);
				arguments505=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments505.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1138:9: '.' ( typeArguments )? IDENTIFIER ( arguments )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1138, 9);
				char_literal506=(CommonToken)Match(input,DOT,Follow._DOT_in_superSuffix6908); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal506_tree = (CommonTree)adaptor.Create(char_literal506);
				adaptor.AddChild(root_0, char_literal506_tree);
				}
				DebugLocation(1138, 13);
				// Java.g:1138:13: ( typeArguments )?
				int alt138=2;
				try { DebugEnterSubRule(138);
				try { DebugEnterDecision(138, false);
				int LA138_1 = input.LA(1);

				if ((LA138_1==LT))
				{
					alt138 = 1;
				}
				} finally { DebugExitDecision(138); }
				switch (alt138)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1138:14: typeArguments
					{
					DebugLocation(1138, 14);
					PushFollow(Follow._typeArguments_in_superSuffix6911);
					typeArguments507=typeArguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, typeArguments507.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(138); }

				DebugLocation(1140, 9);
				IDENTIFIER508=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_superSuffix6932); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER508_tree = (CommonTree)adaptor.Create(IDENTIFIER508);
				adaptor.AddChild(root_0, IDENTIFIER508_tree);
				}
				DebugLocation(1141, 9);
				// Java.g:1141:9: ( arguments )?
				int alt139=2;
				try { DebugEnterSubRule(139);
				try { DebugEnterDecision(139, false);
				int LA139_1 = input.LA(1);

				if ((LA139_1==LPAREN))
				{
					alt139 = 1;
				}
				} finally { DebugExitDecision(139); }
				switch (alt139)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1141:10: arguments
					{
					DebugLocation(1141, 10);
					PushFollow(Follow._arguments_in_superSuffix6943);
					arguments509=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, arguments509.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(139); }


				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("superSuffix", 90);
			LeaveRule("superSuffix", 90);
			LeaveRule_superSuffix();
			if (state.backtracking > 0) { Memoize(input, 90, superSuffix_StartIndex); }

		}
		DebugLocation(1143, 4);
		} finally { DebugExitRule(GrammarFileName, "superSuffix"); }
		return retval;

	}
	// $ANTLR end "superSuffix"

	partial void EnterRule_identifierSuffix();
	partial void LeaveRule_identifierSuffix();
	// $ANTLR start "identifierSuffix"
	// Java.g:1146:1: identifierSuffix : ( ( '[' ']' )+ '.' 'class' | ( '[' expression ']' )+ | arguments | '.' 'class' | '.' nonWildcardTypeArguments IDENTIFIER arguments | '.' 'this' | '.' 'super' arguments | innerCreator );
	[GrammarRule("identifierSuffix")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> identifierSuffix()
	{
		EnterRule_identifierSuffix();
		EnterRule("identifierSuffix", 91);
		TraceIn("identifierSuffix", 91);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int identifierSuffix_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal510 = default(CommonToken);
		CommonToken char_literal511 = default(CommonToken);
		CommonToken char_literal512 = default(CommonToken);
		CommonToken string_literal513 = default(CommonToken);
		CommonToken char_literal514 = default(CommonToken);
		CommonToken char_literal516 = default(CommonToken);
		CommonToken char_literal518 = default(CommonToken);
		CommonToken string_literal519 = default(CommonToken);
		CommonToken char_literal520 = default(CommonToken);
		CommonToken IDENTIFIER522 = default(CommonToken);
		CommonToken char_literal524 = default(CommonToken);
		CommonToken string_literal525 = default(CommonToken);
		CommonToken char_literal526 = default(CommonToken);
		CommonToken string_literal527 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression515 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> arguments517 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> nonWildcardTypeArguments521 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> arguments523 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> arguments528 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerCreator529 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal510_tree = default(CommonTree);
		CommonTree char_literal511_tree = default(CommonTree);
		CommonTree char_literal512_tree = default(CommonTree);
		CommonTree string_literal513_tree = default(CommonTree);
		CommonTree char_literal514_tree = default(CommonTree);
		CommonTree char_literal516_tree = default(CommonTree);
		CommonTree char_literal518_tree = default(CommonTree);
		CommonTree string_literal519_tree = default(CommonTree);
		CommonTree char_literal520_tree = default(CommonTree);
		CommonTree IDENTIFIER522_tree = default(CommonTree);
		CommonTree char_literal524_tree = default(CommonTree);
		CommonTree string_literal525_tree = default(CommonTree);
		CommonTree char_literal526_tree = default(CommonTree);
		CommonTree string_literal527_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "identifierSuffix");
		DebugLocation(1146, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 91)) { return retval; }

			// Java.g:1147:5: ( ( '[' ']' )+ '.' 'class' | ( '[' expression ']' )+ | arguments | '.' 'class' | '.' nonWildcardTypeArguments IDENTIFIER arguments | '.' 'this' | '.' 'super' arguments | innerCreator )
			int alt143=8;
			try { DebugEnterDecision(143, false);
			switch (input.LA(1))
			{
			case LBRACKET:
				{
				int LA143_2 = input.LA(2);

				if ((LA143_2==RBRACKET))
				{
					alt143 = 1;
				}
				else if ((LA143_2==BANG||LA143_2==BOOLEAN||LA143_2==BYTE||(LA143_2>=CHAR && LA143_2<=CHARLITERAL)||(LA143_2>=DOUBLE && LA143_2<=DOUBLELITERAL)||LA143_2==FALSE||(LA143_2>=FLOAT && LA143_2<=FLOATLITERAL)||LA143_2==IDENTIFIER||LA143_2==INT||LA143_2==INTLITERAL||(LA143_2>=LONG && LA143_2<=LPAREN)||(LA143_2>=NEW && LA143_2<=NULL)||LA143_2==PLUS||LA143_2==PLUSPLUS||LA143_2==SHORT||(LA143_2>=STRINGLITERAL && LA143_2<=SUB)||(LA143_2>=SUBSUB && LA143_2<=SUPER)||LA143_2==THIS||LA143_2==TILDE||LA143_2==TRUE||LA143_2==VOID))
				{
					alt143 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 143, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case LPAREN:
				{
				alt143 = 3;
				}
				break;
			case DOT:
				{
				switch (input.LA(2))
				{
				case CLASS:
					{
					alt143 = 4;
					}
					break;
				case THIS:
					{
					alt143 = 6;
					}
					break;
				case SUPER:
					{
					alt143 = 7;
					}
					break;
				case NEW:
					{
					alt143 = 8;
					}
					break;
				case LT:
					{
					alt143 = 5;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 143, 3, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 143, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(143); }
			switch (alt143)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1147:9: ( '[' ']' )+ '.' 'class'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1147, 9);
				// Java.g:1147:9: ( '[' ']' )+
				int cnt141=0;
				try { DebugEnterSubRule(141);
				while (true)
				{
					int alt141=2;
					try { DebugEnterDecision(141, false);
					int LA141_1 = input.LA(1);

					if ((LA141_1==LBRACKET))
					{
						alt141 = 1;
					}


					} finally { DebugExitDecision(141); }
					switch (alt141)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1147:10: '[' ']'
						{
						DebugLocation(1147, 10);
						char_literal510=(CommonToken)Match(input,LBRACKET,Follow._LBRACKET_in_identifierSuffix6976); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal510_tree = (CommonTree)adaptor.Create(char_literal510);
						adaptor.AddChild(root_0, char_literal510_tree);
						}
						DebugLocation(1147, 14);
						char_literal511=(CommonToken)Match(input,RBRACKET,Follow._RBRACKET_in_identifierSuffix6978); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal511_tree = (CommonTree)adaptor.Create(char_literal511);
						adaptor.AddChild(root_0, char_literal511_tree);
						}

						}
						break;

					default:
						if (cnt141 >= 1)
							goto loop141;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee141 = new EarlyExitException( 141, input );
						DebugRecognitionException(eee141);
						throw eee141;
					}
					cnt141++;
				}
				loop141:
					;

				} finally { DebugExitSubRule(141); }

				DebugLocation(1149, 9);
				char_literal512=(CommonToken)Match(input,DOT,Follow._DOT_in_identifierSuffix6999); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal512_tree = (CommonTree)adaptor.Create(char_literal512);
				adaptor.AddChild(root_0, char_literal512_tree);
				}
				DebugLocation(1149, 13);
				string_literal513=(CommonToken)Match(input,CLASS,Follow._CLASS_in_identifierSuffix7001); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal513_tree = (CommonTree)adaptor.Create(string_literal513);
				adaptor.AddChild(root_0, string_literal513_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1150:9: ( '[' expression ']' )+
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1150, 9);
				// Java.g:1150:9: ( '[' expression ']' )+
				int cnt142=0;
				try { DebugEnterSubRule(142);
				while (true)
				{
					int alt142=2;
					try { DebugEnterDecision(142, false);
					int LA142_1 = input.LA(1);

					if ((LA142_1==LBRACKET))
					{
						int LA142_2 = input.LA(2);

						if ((EvaluatePredicate(synpred224_Java_fragment)))
						{
							alt142 = 1;
						}


					}


					} finally { DebugExitDecision(142); }
					switch (alt142)
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1150:10: '[' expression ']'
						{
						DebugLocation(1150, 10);
						char_literal514=(CommonToken)Match(input,LBRACKET,Follow._LBRACKET_in_identifierSuffix7012); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal514_tree = (CommonTree)adaptor.Create(char_literal514);
						adaptor.AddChild(root_0, char_literal514_tree);
						}
						DebugLocation(1150, 14);
						PushFollow(Follow._expression_in_identifierSuffix7014);
						expression515=expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, expression515.Tree);
						DebugLocation(1150, 25);
						char_literal516=(CommonToken)Match(input,RBRACKET,Follow._RBRACKET_in_identifierSuffix7016); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal516_tree = (CommonTree)adaptor.Create(char_literal516);
						adaptor.AddChild(root_0, char_literal516_tree);
						}

						}
						break;

					default:
						if (cnt142 >= 1)
							goto loop142;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee142 = new EarlyExitException( 142, input );
						DebugRecognitionException(eee142);
						throw eee142;
					}
					cnt142++;
				}
				loop142:
					;

				} finally { DebugExitSubRule(142); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1152:9: arguments
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1152, 9);
				PushFollow(Follow._arguments_in_identifierSuffix7037);
				arguments517=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments517.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1153:9: '.' 'class'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1153, 9);
				char_literal518=(CommonToken)Match(input,DOT,Follow._DOT_in_identifierSuffix7047); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal518_tree = (CommonTree)adaptor.Create(char_literal518);
				adaptor.AddChild(root_0, char_literal518_tree);
				}
				DebugLocation(1153, 13);
				string_literal519=(CommonToken)Match(input,CLASS,Follow._CLASS_in_identifierSuffix7049); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal519_tree = (CommonTree)adaptor.Create(string_literal519);
				adaptor.AddChild(root_0, string_literal519_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:1154:9: '.' nonWildcardTypeArguments IDENTIFIER arguments
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1154, 9);
				char_literal520=(CommonToken)Match(input,DOT,Follow._DOT_in_identifierSuffix7059); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal520_tree = (CommonTree)adaptor.Create(char_literal520);
				adaptor.AddChild(root_0, char_literal520_tree);
				}
				DebugLocation(1154, 13);
				PushFollow(Follow._nonWildcardTypeArguments_in_identifierSuffix7061);
				nonWildcardTypeArguments521=nonWildcardTypeArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nonWildcardTypeArguments521.Tree);
				DebugLocation(1154, 38);
				IDENTIFIER522=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifierSuffix7063); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER522_tree = (CommonTree)adaptor.Create(IDENTIFIER522);
				adaptor.AddChild(root_0, IDENTIFIER522_tree);
				}
				DebugLocation(1154, 49);
				PushFollow(Follow._arguments_in_identifierSuffix7065);
				arguments523=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments523.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Java.g:1155:9: '.' 'this'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1155, 9);
				char_literal524=(CommonToken)Match(input,DOT,Follow._DOT_in_identifierSuffix7075); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal524_tree = (CommonTree)adaptor.Create(char_literal524);
				adaptor.AddChild(root_0, char_literal524_tree);
				}
				DebugLocation(1155, 13);
				string_literal525=(CommonToken)Match(input,THIS,Follow._THIS_in_identifierSuffix7077); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal525_tree = (CommonTree)adaptor.Create(string_literal525);
				adaptor.AddChild(root_0, string_literal525_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Java.g:1156:9: '.' 'super' arguments
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1156, 9);
				char_literal526=(CommonToken)Match(input,DOT,Follow._DOT_in_identifierSuffix7087); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal526_tree = (CommonTree)adaptor.Create(char_literal526);
				adaptor.AddChild(root_0, char_literal526_tree);
				}
				DebugLocation(1156, 13);
				string_literal527=(CommonToken)Match(input,SUPER,Follow._SUPER_in_identifierSuffix7089); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal527_tree = (CommonTree)adaptor.Create(string_literal527);
				adaptor.AddChild(root_0, string_literal527_tree);
				}
				DebugLocation(1156, 21);
				PushFollow(Follow._arguments_in_identifierSuffix7091);
				arguments528=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments528.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Java.g:1157:9: innerCreator
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1157, 9);
				PushFollow(Follow._innerCreator_in_identifierSuffix7101);
				innerCreator529=innerCreator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, innerCreator529.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("identifierSuffix", 91);
			LeaveRule("identifierSuffix", 91);
			LeaveRule_identifierSuffix();
			if (state.backtracking > 0) { Memoize(input, 91, identifierSuffix_StartIndex); }

		}
		DebugLocation(1158, 4);
		} finally { DebugExitRule(GrammarFileName, "identifierSuffix"); }
		return retval;

	}
	// $ANTLR end "identifierSuffix"

	partial void EnterRule_selector();
	partial void LeaveRule_selector();
	// $ANTLR start "selector"
	// Java.g:1161:1: selector : ( '.' IDENTIFIER ( arguments )? | '.' 'this' | '.' 'super' superSuffix | innerCreator | '[' expression ']' );
	[GrammarRule("selector")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> selector()
	{
		EnterRule_selector();
		EnterRule("selector", 92);
		TraceIn("selector", 92);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int selector_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal530 = default(CommonToken);
		CommonToken IDENTIFIER531 = default(CommonToken);
		CommonToken char_literal533 = default(CommonToken);
		CommonToken string_literal534 = default(CommonToken);
		CommonToken char_literal535 = default(CommonToken);
		CommonToken string_literal536 = default(CommonToken);
		CommonToken char_literal539 = default(CommonToken);
		CommonToken char_literal541 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> arguments532 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> superSuffix537 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> innerCreator538 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression540 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal530_tree = default(CommonTree);
		CommonTree IDENTIFIER531_tree = default(CommonTree);
		CommonTree char_literal533_tree = default(CommonTree);
		CommonTree string_literal534_tree = default(CommonTree);
		CommonTree char_literal535_tree = default(CommonTree);
		CommonTree string_literal536_tree = default(CommonTree);
		CommonTree char_literal539_tree = default(CommonTree);
		CommonTree char_literal541_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "selector");
		DebugLocation(1161, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 92)) { return retval; }

			// Java.g:1162:5: ( '.' IDENTIFIER ( arguments )? | '.' 'this' | '.' 'super' superSuffix | innerCreator | '[' expression ']' )
			int alt145=5;
			try { DebugEnterDecision(145, false);
			int LA145_1 = input.LA(1);

			if ((LA145_1==DOT))
			{
				switch (input.LA(2))
				{
				case IDENTIFIER:
					{
					alt145 = 1;
					}
					break;
				case THIS:
					{
					alt145 = 2;
					}
					break;
				case SUPER:
					{
					alt145 = 3;
					}
					break;
				case NEW:
					{
					alt145 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 145, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA145_1==LBRACKET))
			{
				alt145 = 5;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 145, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(145); }
			switch (alt145)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1162:9: '.' IDENTIFIER ( arguments )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1162, 9);
				char_literal530=(CommonToken)Match(input,DOT,Follow._DOT_in_selector7123); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal530_tree = (CommonTree)adaptor.Create(char_literal530);
				adaptor.AddChild(root_0, char_literal530_tree);
				}
				DebugLocation(1162, 13);
				IDENTIFIER531=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_selector7125); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER531_tree = (CommonTree)adaptor.Create(IDENTIFIER531);
				adaptor.AddChild(root_0, IDENTIFIER531_tree);
				}
				DebugLocation(1163, 9);
				// Java.g:1163:9: ( arguments )?
				int alt144=2;
				try { DebugEnterSubRule(144);
				try { DebugEnterDecision(144, false);
				int LA144_1 = input.LA(1);

				if ((LA144_1==LPAREN))
				{
					alt144 = 1;
				}
				} finally { DebugExitDecision(144); }
				switch (alt144)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1163:10: arguments
					{
					DebugLocation(1163, 10);
					PushFollow(Follow._arguments_in_selector7136);
					arguments532=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, arguments532.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(144); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1165:9: '.' 'this'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1165, 9);
				char_literal533=(CommonToken)Match(input,DOT,Follow._DOT_in_selector7157); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal533_tree = (CommonTree)adaptor.Create(char_literal533);
				adaptor.AddChild(root_0, char_literal533_tree);
				}
				DebugLocation(1165, 13);
				string_literal534=(CommonToken)Match(input,THIS,Follow._THIS_in_selector7159); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal534_tree = (CommonTree)adaptor.Create(string_literal534);
				adaptor.AddChild(root_0, string_literal534_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1166:9: '.' 'super' superSuffix
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1166, 9);
				char_literal535=(CommonToken)Match(input,DOT,Follow._DOT_in_selector7169); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal535_tree = (CommonTree)adaptor.Create(char_literal535);
				adaptor.AddChild(root_0, char_literal535_tree);
				}
				DebugLocation(1166, 13);
				string_literal536=(CommonToken)Match(input,SUPER,Follow._SUPER_in_selector7171); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal536_tree = (CommonTree)adaptor.Create(string_literal536);
				adaptor.AddChild(root_0, string_literal536_tree);
				}
				DebugLocation(1167, 9);
				PushFollow(Follow._superSuffix_in_selector7181);
				superSuffix537=superSuffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, superSuffix537.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Java.g:1168:9: innerCreator
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1168, 9);
				PushFollow(Follow._innerCreator_in_selector7191);
				innerCreator538=innerCreator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, innerCreator538.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Java.g:1169:9: '[' expression ']'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1169, 9);
				char_literal539=(CommonToken)Match(input,LBRACKET,Follow._LBRACKET_in_selector7201); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal539_tree = (CommonTree)adaptor.Create(char_literal539);
				adaptor.AddChild(root_0, char_literal539_tree);
				}
				DebugLocation(1169, 13);
				PushFollow(Follow._expression_in_selector7203);
				expression540=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression540.Tree);
				DebugLocation(1169, 24);
				char_literal541=(CommonToken)Match(input,RBRACKET,Follow._RBRACKET_in_selector7205); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal541_tree = (CommonTree)adaptor.Create(char_literal541);
				adaptor.AddChild(root_0, char_literal541_tree);
				}

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector", 92);
			LeaveRule("selector", 92);
			LeaveRule_selector();
			if (state.backtracking > 0) { Memoize(input, 92, selector_StartIndex); }

		}
		DebugLocation(1170, 4);
		} finally { DebugExitRule(GrammarFileName, "selector"); }
		return retval;

	}
	// $ANTLR end "selector"

	partial void EnterRule_creator();
	partial void LeaveRule_creator();
	// $ANTLR start "creator"
	// Java.g:1172:1: creator : ( 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest | 'new' classOrInterfaceType classCreatorRest | arrayCreator );
	[GrammarRule("creator")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> creator()
	{
		EnterRule_creator();
		EnterRule("creator", 93);
		TraceIn("creator", 93);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int creator_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal542 = default(CommonToken);
		CommonToken string_literal546 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> nonWildcardTypeArguments543 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> classOrInterfaceType544 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> classCreatorRest545 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> classOrInterfaceType547 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> classCreatorRest548 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> arrayCreator549 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal542_tree = default(CommonTree);
		CommonTree string_literal546_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "creator");
		DebugLocation(1172, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 93)) { return retval; }

			// Java.g:1173:5: ( 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest | 'new' classOrInterfaceType classCreatorRest | arrayCreator )
			int alt146=3;
			try { DebugEnterDecision(146, false);
			int LA146_1 = input.LA(1);

			if ((LA146_1==NEW))
			{
				int LA146_2 = input.LA(2);

				if ((EvaluatePredicate(synpred236_Java_fragment)))
				{
					alt146 = 1;
				}
				else if ((EvaluatePredicate(synpred237_Java_fragment)))
				{
					alt146 = 2;
				}
				else if ((true))
				{
					alt146 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 146, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 146, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(146); }
			switch (alt146)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1173:9: 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1173, 9);
				string_literal542=(CommonToken)Match(input,NEW,Follow._NEW_in_creator7225); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal542_tree = (CommonTree)adaptor.Create(string_literal542);
				adaptor.AddChild(root_0, string_literal542_tree);
				}
				DebugLocation(1173, 15);
				PushFollow(Follow._nonWildcardTypeArguments_in_creator7227);
				nonWildcardTypeArguments543=nonWildcardTypeArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nonWildcardTypeArguments543.Tree);
				DebugLocation(1173, 40);
				PushFollow(Follow._classOrInterfaceType_in_creator7229);
				classOrInterfaceType544=classOrInterfaceType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classOrInterfaceType544.Tree);
				DebugLocation(1173, 61);
				PushFollow(Follow._classCreatorRest_in_creator7231);
				classCreatorRest545=classCreatorRest();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classCreatorRest545.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1174:9: 'new' classOrInterfaceType classCreatorRest
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1174, 9);
				string_literal546=(CommonToken)Match(input,NEW,Follow._NEW_in_creator7241); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal546_tree = (CommonTree)adaptor.Create(string_literal546);
				adaptor.AddChild(root_0, string_literal546_tree);
				}
				DebugLocation(1174, 15);
				PushFollow(Follow._classOrInterfaceType_in_creator7243);
				classOrInterfaceType547=classOrInterfaceType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classOrInterfaceType547.Tree);
				DebugLocation(1174, 36);
				PushFollow(Follow._classCreatorRest_in_creator7245);
				classCreatorRest548=classCreatorRest();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classCreatorRest548.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1175:9: arrayCreator
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1175, 9);
				PushFollow(Follow._arrayCreator_in_creator7255);
				arrayCreator549=arrayCreator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayCreator549.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("creator", 93);
			LeaveRule("creator", 93);
			LeaveRule_creator();
			if (state.backtracking > 0) { Memoize(input, 93, creator_StartIndex); }

		}
		DebugLocation(1176, 4);
		} finally { DebugExitRule(GrammarFileName, "creator"); }
		return retval;

	}
	// $ANTLR end "creator"

	partial void EnterRule_arrayCreator();
	partial void LeaveRule_arrayCreator();
	// $ANTLR start "arrayCreator"
	// Java.g:1178:1: arrayCreator : ( 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer | 'new' createdName '[' expression ']' ( '[' expression ']' )* ( '[' ']' )* );
	[GrammarRule("arrayCreator")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> arrayCreator()
	{
		EnterRule_arrayCreator();
		EnterRule("arrayCreator", 94);
		TraceIn("arrayCreator", 94);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int arrayCreator_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal550 = default(CommonToken);
		CommonToken char_literal552 = default(CommonToken);
		CommonToken char_literal553 = default(CommonToken);
		CommonToken char_literal554 = default(CommonToken);
		CommonToken char_literal555 = default(CommonToken);
		CommonToken string_literal557 = default(CommonToken);
		CommonToken char_literal559 = default(CommonToken);
		CommonToken char_literal561 = default(CommonToken);
		CommonToken char_literal562 = default(CommonToken);
		CommonToken char_literal564 = default(CommonToken);
		CommonToken char_literal565 = default(CommonToken);
		CommonToken char_literal566 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> createdName551 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> arrayInitializer556 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> createdName558 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression560 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression563 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal550_tree = default(CommonTree);
		CommonTree char_literal552_tree = default(CommonTree);
		CommonTree char_literal553_tree = default(CommonTree);
		CommonTree char_literal554_tree = default(CommonTree);
		CommonTree char_literal555_tree = default(CommonTree);
		CommonTree string_literal557_tree = default(CommonTree);
		CommonTree char_literal559_tree = default(CommonTree);
		CommonTree char_literal561_tree = default(CommonTree);
		CommonTree char_literal562_tree = default(CommonTree);
		CommonTree char_literal564_tree = default(CommonTree);
		CommonTree char_literal565_tree = default(CommonTree);
		CommonTree char_literal566_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "arrayCreator");
		DebugLocation(1178, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 94)) { return retval; }

			// Java.g:1179:5: ( 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer | 'new' createdName '[' expression ']' ( '[' expression ']' )* ( '[' ']' )* )
			int alt150=2;
			try { DebugEnterDecision(150, false);
			int LA150_1 = input.LA(1);

			if ((LA150_1==NEW))
			{
				int LA150_2 = input.LA(2);

				if ((EvaluatePredicate(synpred239_Java_fragment)))
				{
					alt150 = 1;
				}
				else if ((true))
				{
					alt150 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 150, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 150, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(150); }
			switch (alt150)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1179:9: 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1179, 9);
				string_literal550=(CommonToken)Match(input,NEW,Follow._NEW_in_arrayCreator7275); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal550_tree = (CommonTree)adaptor.Create(string_literal550);
				adaptor.AddChild(root_0, string_literal550_tree);
				}
				DebugLocation(1179, 15);
				PushFollow(Follow._createdName_in_arrayCreator7277);
				createdName551=createdName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, createdName551.Tree);
				DebugLocation(1180, 9);
				char_literal552=(CommonToken)Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7287); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal552_tree = (CommonTree)adaptor.Create(char_literal552);
				adaptor.AddChild(root_0, char_literal552_tree);
				}
				DebugLocation(1180, 13);
				char_literal553=(CommonToken)Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7289); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal553_tree = (CommonTree)adaptor.Create(char_literal553);
				adaptor.AddChild(root_0, char_literal553_tree);
				}
				DebugLocation(1181, 9);
				// Java.g:1181:9: ( '[' ']' )*
				try { DebugEnterSubRule(147);
				while (true)
				{
					int alt147=2;
					try { DebugEnterDecision(147, false);
					int LA147_1 = input.LA(1);

					if ((LA147_1==LBRACKET))
					{
						alt147 = 1;
					}


					} finally { DebugExitDecision(147); }
					switch ( alt147 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1181:10: '[' ']'
						{
						DebugLocation(1181, 10);
						char_literal554=(CommonToken)Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7300); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal554_tree = (CommonTree)adaptor.Create(char_literal554);
						adaptor.AddChild(root_0, char_literal554_tree);
						}
						DebugLocation(1181, 14);
						char_literal555=(CommonToken)Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7302); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal555_tree = (CommonTree)adaptor.Create(char_literal555);
						adaptor.AddChild(root_0, char_literal555_tree);
						}

						}
						break;

					default:
						goto loop147;
					}
				}

				loop147:
					;

				} finally { DebugExitSubRule(147); }

				DebugLocation(1183, 9);
				PushFollow(Follow._arrayInitializer_in_arrayCreator7323);
				arrayInitializer556=arrayInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayInitializer556.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1185:9: 'new' createdName '[' expression ']' ( '[' expression ']' )* ( '[' ']' )*
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1185, 9);
				string_literal557=(CommonToken)Match(input,NEW,Follow._NEW_in_arrayCreator7334); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal557_tree = (CommonTree)adaptor.Create(string_literal557);
				adaptor.AddChild(root_0, string_literal557_tree);
				}
				DebugLocation(1185, 15);
				PushFollow(Follow._createdName_in_arrayCreator7336);
				createdName558=createdName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, createdName558.Tree);
				DebugLocation(1186, 9);
				char_literal559=(CommonToken)Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7346); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal559_tree = (CommonTree)adaptor.Create(char_literal559);
				adaptor.AddChild(root_0, char_literal559_tree);
				}
				DebugLocation(1186, 13);
				PushFollow(Follow._expression_in_arrayCreator7348);
				expression560=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression560.Tree);
				DebugLocation(1187, 9);
				char_literal561=(CommonToken)Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7358); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal561_tree = (CommonTree)adaptor.Create(char_literal561);
				adaptor.AddChild(root_0, char_literal561_tree);
				}
				DebugLocation(1188, 9);
				// Java.g:1188:9: ( '[' expression ']' )*
				try { DebugEnterSubRule(148);
				while (true)
				{
					int alt148=2;
					try { DebugEnterDecision(148, false);
					int LA148_1 = input.LA(1);

					if ((LA148_1==LBRACKET))
					{
						int LA148_2 = input.LA(2);

						if ((EvaluatePredicate(synpred240_Java_fragment)))
						{
							alt148 = 1;
						}


					}


					} finally { DebugExitDecision(148); }
					switch ( alt148 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1188:13: '[' expression ']'
						{
						DebugLocation(1188, 13);
						char_literal562=(CommonToken)Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7372); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal562_tree = (CommonTree)adaptor.Create(char_literal562);
						adaptor.AddChild(root_0, char_literal562_tree);
						}
						DebugLocation(1188, 17);
						PushFollow(Follow._expression_in_arrayCreator7374);
						expression563=expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, expression563.Tree);
						DebugLocation(1189, 13);
						char_literal564=(CommonToken)Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7388); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal564_tree = (CommonTree)adaptor.Create(char_literal564);
						adaptor.AddChild(root_0, char_literal564_tree);
						}

						}
						break;

					default:
						goto loop148;
					}
				}

				loop148:
					;

				} finally { DebugExitSubRule(148); }

				DebugLocation(1191, 9);
				// Java.g:1191:9: ( '[' ']' )*
				try { DebugEnterSubRule(149);
				while (true)
				{
					int alt149=2;
					try { DebugEnterDecision(149, false);
					int LA149_1 = input.LA(1);

					if ((LA149_1==LBRACKET))
					{
						int LA149_2 = input.LA(2);

						if ((LA149_2==RBRACKET))
						{
							alt149 = 1;
						}


					}


					} finally { DebugExitDecision(149); }
					switch ( alt149 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1191:10: '[' ']'
						{
						DebugLocation(1191, 10);
						char_literal565=(CommonToken)Match(input,LBRACKET,Follow._LBRACKET_in_arrayCreator7410); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal565_tree = (CommonTree)adaptor.Create(char_literal565);
						adaptor.AddChild(root_0, char_literal565_tree);
						}
						DebugLocation(1191, 14);
						char_literal566=(CommonToken)Match(input,RBRACKET,Follow._RBRACKET_in_arrayCreator7412); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal566_tree = (CommonTree)adaptor.Create(char_literal566);
						adaptor.AddChild(root_0, char_literal566_tree);
						}

						}
						break;

					default:
						goto loop149;
					}
				}

				loop149:
					;

				} finally { DebugExitSubRule(149); }


				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayCreator", 94);
			LeaveRule("arrayCreator", 94);
			LeaveRule_arrayCreator();
			if (state.backtracking > 0) { Memoize(input, 94, arrayCreator_StartIndex); }

		}
		DebugLocation(1193, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayCreator"); }
		return retval;

	}
	// $ANTLR end "arrayCreator"

	partial void EnterRule_variableInitializer();
	partial void LeaveRule_variableInitializer();
	// $ANTLR start "variableInitializer"
	// Java.g:1195:1: variableInitializer : ( arrayInitializer | expression );
	[GrammarRule("variableInitializer")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> variableInitializer()
	{
		EnterRule_variableInitializer();
		EnterRule("variableInitializer", 95);
		TraceIn("variableInitializer", 95);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int variableInitializer_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> arrayInitializer567 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> expression568 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "variableInitializer");
		DebugLocation(1195, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 95)) { return retval; }

			// Java.g:1196:5: ( arrayInitializer | expression )
			int alt151=2;
			try { DebugEnterDecision(151, false);
			int LA151_1 = input.LA(1);

			if ((LA151_1==LBRACE))
			{
				alt151 = 1;
			}
			else if ((LA151_1==BANG||LA151_1==BOOLEAN||LA151_1==BYTE||(LA151_1>=CHAR && LA151_1<=CHARLITERAL)||(LA151_1>=DOUBLE && LA151_1<=DOUBLELITERAL)||LA151_1==FALSE||(LA151_1>=FLOAT && LA151_1<=FLOATLITERAL)||LA151_1==IDENTIFIER||LA151_1==INT||LA151_1==INTLITERAL||(LA151_1>=LONG && LA151_1<=LPAREN)||(LA151_1>=NEW && LA151_1<=NULL)||LA151_1==PLUS||LA151_1==PLUSPLUS||LA151_1==SHORT||(LA151_1>=STRINGLITERAL && LA151_1<=SUB)||(LA151_1>=SUBSUB && LA151_1<=SUPER)||LA151_1==THIS||LA151_1==TILDE||LA151_1==TRUE||LA151_1==VOID))
			{
				alt151 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 151, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(151); }
			switch (alt151)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1196:9: arrayInitializer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1196, 9);
				PushFollow(Follow._arrayInitializer_in_variableInitializer7443);
				arrayInitializer567=arrayInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayInitializer567.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1197:9: expression
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1197, 9);
				PushFollow(Follow._expression_in_variableInitializer7453);
				expression568=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression568.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variableInitializer", 95);
			LeaveRule("variableInitializer", 95);
			LeaveRule_variableInitializer();
			if (state.backtracking > 0) { Memoize(input, 95, variableInitializer_StartIndex); }

		}
		DebugLocation(1198, 4);
		} finally { DebugExitRule(GrammarFileName, "variableInitializer"); }
		return retval;

	}
	// $ANTLR end "variableInitializer"

	partial void EnterRule_arrayInitializer();
	partial void LeaveRule_arrayInitializer();
	// $ANTLR start "arrayInitializer"
	// Java.g:1200:1: arrayInitializer : '{' ( variableInitializer ( ',' variableInitializer )* )? ( ',' )? '}' ;
	[GrammarRule("arrayInitializer")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> arrayInitializer()
	{
		EnterRule_arrayInitializer();
		EnterRule("arrayInitializer", 96);
		TraceIn("arrayInitializer", 96);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int arrayInitializer_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal569 = default(CommonToken);
		CommonToken char_literal571 = default(CommonToken);
		CommonToken char_literal573 = default(CommonToken);
		CommonToken char_literal574 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableInitializer570 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableInitializer572 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal569_tree = default(CommonTree);
		CommonTree char_literal571_tree = default(CommonTree);
		CommonTree char_literal573_tree = default(CommonTree);
		CommonTree char_literal574_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "arrayInitializer");
		DebugLocation(1200, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 96)) { return retval; }

			// Java.g:1201:5: ( '{' ( variableInitializer ( ',' variableInitializer )* )? ( ',' )? '}' )
			DebugEnterAlt(1);
			// Java.g:1201:9: '{' ( variableInitializer ( ',' variableInitializer )* )? ( ',' )? '}'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1201, 9);
			char_literal569=(CommonToken)Match(input,LBRACE,Follow._LBRACE_in_arrayInitializer7473); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal569_tree = (CommonTree)adaptor.Create(char_literal569);
			adaptor.AddChild(root_0, char_literal569_tree);
			}
			DebugLocation(1202, 13);
			// Java.g:1202:13: ( variableInitializer ( ',' variableInitializer )* )?
			int alt153=2;
			try { DebugEnterSubRule(153);
			try { DebugEnterDecision(153, false);
			int LA153_1 = input.LA(1);

			if ((LA153_1==BANG||LA153_1==BOOLEAN||LA153_1==BYTE||(LA153_1>=CHAR && LA153_1<=CHARLITERAL)||(LA153_1>=DOUBLE && LA153_1<=DOUBLELITERAL)||LA153_1==FALSE||(LA153_1>=FLOAT && LA153_1<=FLOATLITERAL)||LA153_1==IDENTIFIER||LA153_1==INT||LA153_1==INTLITERAL||LA153_1==LBRACE||(LA153_1>=LONG && LA153_1<=LPAREN)||(LA153_1>=NEW && LA153_1<=NULL)||LA153_1==PLUS||LA153_1==PLUSPLUS||LA153_1==SHORT||(LA153_1>=STRINGLITERAL && LA153_1<=SUB)||(LA153_1>=SUBSUB && LA153_1<=SUPER)||LA153_1==THIS||LA153_1==TILDE||LA153_1==TRUE||LA153_1==VOID))
			{
				alt153 = 1;
			}
			} finally { DebugExitDecision(153); }
			switch (alt153)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1202:14: variableInitializer ( ',' variableInitializer )*
				{
				DebugLocation(1202, 14);
				PushFollow(Follow._variableInitializer_in_arrayInitializer7489);
				variableInitializer570=variableInitializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variableInitializer570.Tree);
				DebugLocation(1203, 17);
				// Java.g:1203:17: ( ',' variableInitializer )*
				try { DebugEnterSubRule(152);
				while (true)
				{
					int alt152=2;
					try { DebugEnterDecision(152, false);
					int LA152_1 = input.LA(1);

					if ((LA152_1==COMMA))
					{
						int LA152_2 = input.LA(2);

						if ((LA152_2==BANG||LA152_2==BOOLEAN||LA152_2==BYTE||(LA152_2>=CHAR && LA152_2<=CHARLITERAL)||(LA152_2>=DOUBLE && LA152_2<=DOUBLELITERAL)||LA152_2==FALSE||(LA152_2>=FLOAT && LA152_2<=FLOATLITERAL)||LA152_2==IDENTIFIER||LA152_2==INT||LA152_2==INTLITERAL||LA152_2==LBRACE||(LA152_2>=LONG && LA152_2<=LPAREN)||(LA152_2>=NEW && LA152_2<=NULL)||LA152_2==PLUS||LA152_2==PLUSPLUS||LA152_2==SHORT||(LA152_2>=STRINGLITERAL && LA152_2<=SUB)||(LA152_2>=SUBSUB && LA152_2<=SUPER)||LA152_2==THIS||LA152_2==TILDE||LA152_2==TRUE||LA152_2==VOID))
						{
							alt152 = 1;
						}


					}


					} finally { DebugExitDecision(152); }
					switch ( alt152 )
					{
					case 1:
						DebugEnterAlt(1);
						// Java.g:1203:18: ',' variableInitializer
						{
						DebugLocation(1203, 18);
						char_literal571=(CommonToken)Match(input,COMMA,Follow._COMMA_in_arrayInitializer7508); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal571_tree = (CommonTree)adaptor.Create(char_literal571);
						adaptor.AddChild(root_0, char_literal571_tree);
						}
						DebugLocation(1203, 22);
						PushFollow(Follow._variableInitializer_in_arrayInitializer7510);
						variableInitializer572=variableInitializer();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, variableInitializer572.Tree);

						}
						break;

					default:
						goto loop152;
					}
				}

				loop152:
					;

				} finally { DebugExitSubRule(152); }


				}
				break;

			}
			} finally { DebugExitSubRule(153); }

			DebugLocation(1206, 13);
			// Java.g:1206:13: ( ',' )?
			int alt154=2;
			try { DebugEnterSubRule(154);
			try { DebugEnterDecision(154, false);
			int LA154_1 = input.LA(1);

			if ((LA154_1==COMMA))
			{
				alt154 = 1;
			}
			} finally { DebugExitDecision(154); }
			switch (alt154)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1206:14: ','
				{
				DebugLocation(1206, 14);
				char_literal573=(CommonToken)Match(input,COMMA,Follow._COMMA_in_arrayInitializer7560); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal573_tree = (CommonTree)adaptor.Create(char_literal573);
				adaptor.AddChild(root_0, char_literal573_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(154); }

			DebugLocation(1207, 9);
			char_literal574=(CommonToken)Match(input,RBRACE,Follow._RBRACE_in_arrayInitializer7573); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal574_tree = (CommonTree)adaptor.Create(char_literal574);
			adaptor.AddChild(root_0, char_literal574_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayInitializer", 96);
			LeaveRule("arrayInitializer", 96);
			LeaveRule_arrayInitializer();
			if (state.backtracking > 0) { Memoize(input, 96, arrayInitializer_StartIndex); }

		}
		DebugLocation(1208, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayInitializer"); }
		return retval;

	}
	// $ANTLR end "arrayInitializer"

	partial void EnterRule_createdName();
	partial void LeaveRule_createdName();
	// $ANTLR start "createdName"
	// Java.g:1211:1: createdName : ( classOrInterfaceType | primitiveType );
	[GrammarRule("createdName")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> createdName()
	{
		EnterRule_createdName();
		EnterRule("createdName", 97);
		TraceIn("createdName", 97);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int createdName_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> classOrInterfaceType575 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> primitiveType576 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "createdName");
		DebugLocation(1211, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 97)) { return retval; }

			// Java.g:1212:5: ( classOrInterfaceType | primitiveType )
			int alt155=2;
			try { DebugEnterDecision(155, false);
			int LA155_1 = input.LA(1);

			if ((LA155_1==IDENTIFIER))
			{
				alt155 = 1;
			}
			else if ((LA155_1==BOOLEAN||LA155_1==BYTE||LA155_1==CHAR||LA155_1==DOUBLE||LA155_1==FLOAT||LA155_1==INT||LA155_1==LONG||LA155_1==SHORT))
			{
				alt155 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 155, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(155); }
			switch (alt155)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1212:9: classOrInterfaceType
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1212, 9);
				PushFollow(Follow._classOrInterfaceType_in_createdName7607);
				classOrInterfaceType575=classOrInterfaceType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classOrInterfaceType575.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1213:9: primitiveType
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(1213, 9);
				PushFollow(Follow._primitiveType_in_createdName7617);
				primitiveType576=primitiveType();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primitiveType576.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("createdName", 97);
			LeaveRule("createdName", 97);
			LeaveRule_createdName();
			if (state.backtracking > 0) { Memoize(input, 97, createdName_StartIndex); }

		}
		DebugLocation(1214, 4);
		} finally { DebugExitRule(GrammarFileName, "createdName"); }
		return retval;

	}
	// $ANTLR end "createdName"

	partial void EnterRule_innerCreator();
	partial void LeaveRule_innerCreator();
	// $ANTLR start "innerCreator"
	// Java.g:1216:1: innerCreator : '.' 'new' ( nonWildcardTypeArguments )? IDENTIFIER ( typeArguments )? classCreatorRest ;
	[GrammarRule("innerCreator")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> innerCreator()
	{
		EnterRule_innerCreator();
		EnterRule("innerCreator", 98);
		TraceIn("innerCreator", 98);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int innerCreator_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal577 = default(CommonToken);
		CommonToken string_literal578 = default(CommonToken);
		CommonToken IDENTIFIER580 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> nonWildcardTypeArguments579 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> typeArguments581 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> classCreatorRest582 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal577_tree = default(CommonTree);
		CommonTree string_literal578_tree = default(CommonTree);
		CommonTree IDENTIFIER580_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "innerCreator");
		DebugLocation(1216, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 98)) { return retval; }

			// Java.g:1217:5: ( '.' 'new' ( nonWildcardTypeArguments )? IDENTIFIER ( typeArguments )? classCreatorRest )
			DebugEnterAlt(1);
			// Java.g:1217:9: '.' 'new' ( nonWildcardTypeArguments )? IDENTIFIER ( typeArguments )? classCreatorRest
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1217, 9);
			char_literal577=(CommonToken)Match(input,DOT,Follow._DOT_in_innerCreator7638); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal577_tree = (CommonTree)adaptor.Create(char_literal577);
			adaptor.AddChild(root_0, char_literal577_tree);
			}
			DebugLocation(1217, 13);
			string_literal578=(CommonToken)Match(input,NEW,Follow._NEW_in_innerCreator7640); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal578_tree = (CommonTree)adaptor.Create(string_literal578);
			adaptor.AddChild(root_0, string_literal578_tree);
			}
			DebugLocation(1218, 9);
			// Java.g:1218:9: ( nonWildcardTypeArguments )?
			int alt156=2;
			try { DebugEnterSubRule(156);
			try { DebugEnterDecision(156, false);
			int LA156_1 = input.LA(1);

			if ((LA156_1==LT))
			{
				alt156 = 1;
			}
			} finally { DebugExitDecision(156); }
			switch (alt156)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1218:10: nonWildcardTypeArguments
				{
				DebugLocation(1218, 10);
				PushFollow(Follow._nonWildcardTypeArguments_in_innerCreator7651);
				nonWildcardTypeArguments579=nonWildcardTypeArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nonWildcardTypeArguments579.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(156); }

			DebugLocation(1220, 9);
			IDENTIFIER580=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_innerCreator7672); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER580_tree = (CommonTree)adaptor.Create(IDENTIFIER580);
			adaptor.AddChild(root_0, IDENTIFIER580_tree);
			}
			DebugLocation(1221, 9);
			// Java.g:1221:9: ( typeArguments )?
			int alt157=2;
			try { DebugEnterSubRule(157);
			try { DebugEnterDecision(157, false);
			int LA157_1 = input.LA(1);

			if ((LA157_1==LT))
			{
				alt157 = 1;
			}
			} finally { DebugExitDecision(157); }
			switch (alt157)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1221:10: typeArguments
				{
				DebugLocation(1221, 10);
				PushFollow(Follow._typeArguments_in_innerCreator7683);
				typeArguments581=typeArguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeArguments581.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(157); }

			DebugLocation(1223, 9);
			PushFollow(Follow._classCreatorRest_in_innerCreator7704);
			classCreatorRest582=classCreatorRest();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, classCreatorRest582.Tree);

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("innerCreator", 98);
			LeaveRule("innerCreator", 98);
			LeaveRule_innerCreator();
			if (state.backtracking > 0) { Memoize(input, 98, innerCreator_StartIndex); }

		}
		DebugLocation(1224, 4);
		} finally { DebugExitRule(GrammarFileName, "innerCreator"); }
		return retval;

	}
	// $ANTLR end "innerCreator"

	partial void EnterRule_classCreatorRest();
	partial void LeaveRule_classCreatorRest();
	// $ANTLR start "classCreatorRest"
	// Java.g:1227:1: classCreatorRest : arguments ( classBody )? ;
	[GrammarRule("classCreatorRest")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> classCreatorRest()
	{
		EnterRule_classCreatorRest();
		EnterRule("classCreatorRest", 99);
		TraceIn("classCreatorRest", 99);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int classCreatorRest_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, CommonToken> arguments583 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> classBody584 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		try { DebugEnterRule(GrammarFileName, "classCreatorRest");
		DebugLocation(1227, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 99)) { return retval; }

			// Java.g:1228:5: ( arguments ( classBody )? )
			DebugEnterAlt(1);
			// Java.g:1228:9: arguments ( classBody )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1228, 9);
			PushFollow(Follow._arguments_in_classCreatorRest7725);
			arguments583=arguments();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, arguments583.Tree);
			DebugLocation(1229, 9);
			// Java.g:1229:9: ( classBody )?
			int alt158=2;
			try { DebugEnterSubRule(158);
			try { DebugEnterDecision(158, false);
			int LA158_1 = input.LA(1);

			if ((LA158_1==LBRACE))
			{
				alt158 = 1;
			}
			} finally { DebugExitDecision(158); }
			switch (alt158)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1229:10: classBody
				{
				DebugLocation(1229, 10);
				PushFollow(Follow._classBody_in_classCreatorRest7736);
				classBody584=classBody();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classBody584.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(158); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classCreatorRest", 99);
			LeaveRule("classCreatorRest", 99);
			LeaveRule_classCreatorRest();
			if (state.backtracking > 0) { Memoize(input, 99, classCreatorRest_StartIndex); }

		}
		DebugLocation(1231, 4);
		} finally { DebugExitRule(GrammarFileName, "classCreatorRest"); }
		return retval;

	}
	// $ANTLR end "classCreatorRest"

	partial void EnterRule_nonWildcardTypeArguments();
	partial void LeaveRule_nonWildcardTypeArguments();
	// $ANTLR start "nonWildcardTypeArguments"
	// Java.g:1234:1: nonWildcardTypeArguments : '<' typeList '>' ;
	[GrammarRule("nonWildcardTypeArguments")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> nonWildcardTypeArguments()
	{
		EnterRule_nonWildcardTypeArguments();
		EnterRule("nonWildcardTypeArguments", 100);
		TraceIn("nonWildcardTypeArguments", 100);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int nonWildcardTypeArguments_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal585 = default(CommonToken);
		CommonToken char_literal587 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> typeList586 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal585_tree = default(CommonTree);
		CommonTree char_literal587_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "nonWildcardTypeArguments");
		DebugLocation(1234, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 100)) { return retval; }

			// Java.g:1235:5: ( '<' typeList '>' )
			DebugEnterAlt(1);
			// Java.g:1235:9: '<' typeList '>'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1235, 9);
			char_literal585=(CommonToken)Match(input,LT,Follow._LT_in_nonWildcardTypeArguments7768); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal585_tree = (CommonTree)adaptor.Create(char_literal585);
			adaptor.AddChild(root_0, char_literal585_tree);
			}
			DebugLocation(1235, 13);
			PushFollow(Follow._typeList_in_nonWildcardTypeArguments7770);
			typeList586=typeList();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, typeList586.Tree);
			DebugLocation(1236, 9);
			char_literal587=(CommonToken)Match(input,GT,Follow._GT_in_nonWildcardTypeArguments7780); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal587_tree = (CommonTree)adaptor.Create(char_literal587);
			adaptor.AddChild(root_0, char_literal587_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nonWildcardTypeArguments", 100);
			LeaveRule("nonWildcardTypeArguments", 100);
			LeaveRule_nonWildcardTypeArguments();
			if (state.backtracking > 0) { Memoize(input, 100, nonWildcardTypeArguments_StartIndex); }

		}
		DebugLocation(1237, 4);
		} finally { DebugExitRule(GrammarFileName, "nonWildcardTypeArguments"); }
		return retval;

	}
	// $ANTLR end "nonWildcardTypeArguments"

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();
	// $ANTLR start "arguments"
	// Java.g:1239:1: arguments : '(' ( expressionList )? ')' ;
	[GrammarRule("arguments")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 101);
		TraceIn("arguments", 101);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int arguments_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal588 = default(CommonToken);
		CommonToken char_literal590 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> expressionList589 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal588_tree = default(CommonTree);
		CommonTree char_literal590_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(1239, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 101)) { return retval; }

			// Java.g:1240:5: ( '(' ( expressionList )? ')' )
			DebugEnterAlt(1);
			// Java.g:1240:9: '(' ( expressionList )? ')'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1240, 9);
			char_literal588=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_arguments7800); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal588_tree = (CommonTree)adaptor.Create(char_literal588);
			adaptor.AddChild(root_0, char_literal588_tree);
			}
			DebugLocation(1240, 13);
			// Java.g:1240:13: ( expressionList )?
			int alt159=2;
			try { DebugEnterSubRule(159);
			try { DebugEnterDecision(159, false);
			int LA159_1 = input.LA(1);

			if ((LA159_1==BANG||LA159_1==BOOLEAN||LA159_1==BYTE||(LA159_1>=CHAR && LA159_1<=CHARLITERAL)||(LA159_1>=DOUBLE && LA159_1<=DOUBLELITERAL)||LA159_1==FALSE||(LA159_1>=FLOAT && LA159_1<=FLOATLITERAL)||LA159_1==IDENTIFIER||LA159_1==INT||LA159_1==INTLITERAL||(LA159_1>=LONG && LA159_1<=LPAREN)||(LA159_1>=NEW && LA159_1<=NULL)||LA159_1==PLUS||LA159_1==PLUSPLUS||LA159_1==SHORT||(LA159_1>=STRINGLITERAL && LA159_1<=SUB)||(LA159_1>=SUBSUB && LA159_1<=SUPER)||LA159_1==THIS||LA159_1==TILDE||LA159_1==TRUE||LA159_1==VOID))
			{
				alt159 = 1;
			}
			} finally { DebugExitDecision(159); }
			switch (alt159)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1240:14: expressionList
				{
				DebugLocation(1240, 14);
				PushFollow(Follow._expressionList_in_arguments7803);
				expressionList589=expressionList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expressionList589.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(159); }

			DebugLocation(1241, 12);
			char_literal590=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_arguments7816); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal590_tree = (CommonTree)adaptor.Create(char_literal590);
			adaptor.AddChild(root_0, char_literal590_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arguments", 101);
			LeaveRule("arguments", 101);
			LeaveRule_arguments();
			if (state.backtracking > 0) { Memoize(input, 101, arguments_StartIndex); }

		}
		DebugLocation(1242, 4);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return retval;

	}
	// $ANTLR end "arguments"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// Java.g:1244:1: literal : ( INTLITERAL | LONGLITERAL | FLOATLITERAL | DOUBLELITERAL | CHARLITERAL | STRINGLITERAL | TRUE | FALSE | NULL );
	[GrammarRule("literal")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 102);
		TraceIn("literal", 102);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int literal_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken set591 = default(CommonToken);

		CommonTree set591_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(1244, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 102)) { return retval; }

			// Java.g:1245:5: ( INTLITERAL | LONGLITERAL | FLOATLITERAL | DOUBLELITERAL | CHARLITERAL | STRINGLITERAL | TRUE | FALSE | NULL )
			DebugEnterAlt(1);
			// Java.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1245, 5);

			set591=(CommonToken)input.LT(1);
			if (input.LA(1)==CHARLITERAL||input.LA(1)==DOUBLELITERAL||input.LA(1)==FALSE||input.LA(1)==FLOATLITERAL||input.LA(1)==INTLITERAL||input.LA(1)==LONGLITERAL||input.LA(1)==NULL||input.LA(1)==STRINGLITERAL||input.LA(1)==TRUE)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set591));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 102);
			LeaveRule("literal", 102);
			LeaveRule_literal();
			if (state.backtracking > 0) { Memoize(input, 102, literal_StartIndex); }

		}
		DebugLocation(1254, 4);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_classHeader();
	partial void LeaveRule_classHeader();
	// $ANTLR start "classHeader"
	// Java.g:1260:1: classHeader : modifiers 'class' IDENTIFIER ;
	[GrammarRule("classHeader")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> classHeader()
	{
		EnterRule_classHeader();
		EnterRule("classHeader", 103);
		TraceIn("classHeader", 103);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int classHeader_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal593 = default(CommonToken);
		CommonToken IDENTIFIER594 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> modifiers592 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal593_tree = default(CommonTree);
		CommonTree IDENTIFIER594_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "classHeader");
		DebugLocation(1260, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 103)) { return retval; }

			// Java.g:1261:5: ( modifiers 'class' IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1261:9: modifiers 'class' IDENTIFIER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1261, 9);
			PushFollow(Follow._modifiers_in_classHeader7940);
			modifiers592=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers592.Tree);
			DebugLocation(1261, 19);
			string_literal593=(CommonToken)Match(input,CLASS,Follow._CLASS_in_classHeader7942); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal593_tree = (CommonTree)adaptor.Create(string_literal593);
			adaptor.AddChild(root_0, string_literal593_tree);
			}
			DebugLocation(1261, 27);
			IDENTIFIER594=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_classHeader7944); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER594_tree = (CommonTree)adaptor.Create(IDENTIFIER594);
			adaptor.AddChild(root_0, IDENTIFIER594_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classHeader", 103);
			LeaveRule("classHeader", 103);
			LeaveRule_classHeader();
			if (state.backtracking > 0) { Memoize(input, 103, classHeader_StartIndex); }

		}
		DebugLocation(1262, 4);
		} finally { DebugExitRule(GrammarFileName, "classHeader"); }
		return retval;

	}
	// $ANTLR end "classHeader"

	partial void EnterRule_enumHeader();
	partial void LeaveRule_enumHeader();
	// $ANTLR start "enumHeader"
	// Java.g:1264:1: enumHeader : modifiers ( 'enum' | IDENTIFIER ) IDENTIFIER ;
	[GrammarRule("enumHeader")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> enumHeader()
	{
		EnterRule_enumHeader();
		EnterRule("enumHeader", 104);
		TraceIn("enumHeader", 104);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int enumHeader_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken set596 = default(CommonToken);
		CommonToken IDENTIFIER597 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> modifiers595 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree set596_tree = default(CommonTree);
		CommonTree IDENTIFIER597_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "enumHeader");
		DebugLocation(1264, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 104)) { return retval; }

			// Java.g:1265:5: ( modifiers ( 'enum' | IDENTIFIER ) IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1265:9: modifiers ( 'enum' | IDENTIFIER ) IDENTIFIER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1265, 9);
			PushFollow(Follow._modifiers_in_enumHeader7964);
			modifiers595=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers595.Tree);
			DebugLocation(1265, 19);

			set596=(CommonToken)input.LT(1);
			if (input.LA(1)==ENUM||input.LA(1)==IDENTIFIER)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set596));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(1265, 39);
			IDENTIFIER597=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enumHeader7972); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER597_tree = (CommonTree)adaptor.Create(IDENTIFIER597);
			adaptor.AddChild(root_0, IDENTIFIER597_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumHeader", 104);
			LeaveRule("enumHeader", 104);
			LeaveRule_enumHeader();
			if (state.backtracking > 0) { Memoize(input, 104, enumHeader_StartIndex); }

		}
		DebugLocation(1266, 4);
		} finally { DebugExitRule(GrammarFileName, "enumHeader"); }
		return retval;

	}
	// $ANTLR end "enumHeader"

	partial void EnterRule_interfaceHeader();
	partial void LeaveRule_interfaceHeader();
	// $ANTLR start "interfaceHeader"
	// Java.g:1268:1: interfaceHeader : modifiers 'interface' IDENTIFIER ;
	[GrammarRule("interfaceHeader")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> interfaceHeader()
	{
		EnterRule_interfaceHeader();
		EnterRule("interfaceHeader", 105);
		TraceIn("interfaceHeader", 105);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int interfaceHeader_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal599 = default(CommonToken);
		CommonToken IDENTIFIER600 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> modifiers598 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal599_tree = default(CommonTree);
		CommonTree IDENTIFIER600_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "interfaceHeader");
		DebugLocation(1268, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 105)) { return retval; }

			// Java.g:1269:5: ( modifiers 'interface' IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1269:9: modifiers 'interface' IDENTIFIER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1269, 9);
			PushFollow(Follow._modifiers_in_interfaceHeader7992);
			modifiers598=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers598.Tree);
			DebugLocation(1269, 19);
			string_literal599=(CommonToken)Match(input,INTERFACE,Follow._INTERFACE_in_interfaceHeader7994); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal599_tree = (CommonTree)adaptor.Create(string_literal599);
			adaptor.AddChild(root_0, string_literal599_tree);
			}
			DebugLocation(1269, 31);
			IDENTIFIER600=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_interfaceHeader7996); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER600_tree = (CommonTree)adaptor.Create(IDENTIFIER600);
			adaptor.AddChild(root_0, IDENTIFIER600_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceHeader", 105);
			LeaveRule("interfaceHeader", 105);
			LeaveRule_interfaceHeader();
			if (state.backtracking > 0) { Memoize(input, 105, interfaceHeader_StartIndex); }

		}
		DebugLocation(1270, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceHeader"); }
		return retval;

	}
	// $ANTLR end "interfaceHeader"

	partial void EnterRule_annotationHeader();
	partial void LeaveRule_annotationHeader();
	// $ANTLR start "annotationHeader"
	// Java.g:1272:1: annotationHeader : modifiers '@' 'interface' IDENTIFIER ;
	[GrammarRule("annotationHeader")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> annotationHeader()
	{
		EnterRule_annotationHeader();
		EnterRule("annotationHeader", 106);
		TraceIn("annotationHeader", 106);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int annotationHeader_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken char_literal602 = default(CommonToken);
		CommonToken string_literal603 = default(CommonToken);
		CommonToken IDENTIFIER604 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> modifiers601 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree char_literal602_tree = default(CommonTree);
		CommonTree string_literal603_tree = default(CommonTree);
		CommonTree IDENTIFIER604_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "annotationHeader");
		DebugLocation(1272, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 106)) { return retval; }

			// Java.g:1273:5: ( modifiers '@' 'interface' IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1273:9: modifiers '@' 'interface' IDENTIFIER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1273, 9);
			PushFollow(Follow._modifiers_in_annotationHeader8016);
			modifiers601=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers601.Tree);
			DebugLocation(1273, 19);
			char_literal602=(CommonToken)Match(input,MONKEYS_AT,Follow._MONKEYS_AT_in_annotationHeader8018); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal602_tree = (CommonTree)adaptor.Create(char_literal602);
			adaptor.AddChild(root_0, char_literal602_tree);
			}
			DebugLocation(1273, 23);
			string_literal603=(CommonToken)Match(input,INTERFACE,Follow._INTERFACE_in_annotationHeader8020); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal603_tree = (CommonTree)adaptor.Create(string_literal603);
			adaptor.AddChild(root_0, string_literal603_tree);
			}
			DebugLocation(1273, 35);
			IDENTIFIER604=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_annotationHeader8022); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER604_tree = (CommonTree)adaptor.Create(IDENTIFIER604);
			adaptor.AddChild(root_0, IDENTIFIER604_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("annotationHeader", 106);
			LeaveRule("annotationHeader", 106);
			LeaveRule_annotationHeader();
			if (state.backtracking > 0) { Memoize(input, 106, annotationHeader_StartIndex); }

		}
		DebugLocation(1274, 4);
		} finally { DebugExitRule(GrammarFileName, "annotationHeader"); }
		return retval;

	}
	// $ANTLR end "annotationHeader"

	partial void EnterRule_typeHeader();
	partial void LeaveRule_typeHeader();
	// $ANTLR start "typeHeader"
	// Java.g:1276:1: typeHeader : modifiers ( 'class' | 'enum' | ( ( '@' )? 'interface' ) ) IDENTIFIER ;
	[GrammarRule("typeHeader")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> typeHeader()
	{
		EnterRule_typeHeader();
		EnterRule("typeHeader", 107);
		TraceIn("typeHeader", 107);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int typeHeader_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal606 = default(CommonToken);
		CommonToken string_literal607 = default(CommonToken);
		CommonToken char_literal608 = default(CommonToken);
		CommonToken string_literal609 = default(CommonToken);
		CommonToken IDENTIFIER610 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> modifiers605 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal606_tree = default(CommonTree);
		CommonTree string_literal607_tree = default(CommonTree);
		CommonTree char_literal608_tree = default(CommonTree);
		CommonTree string_literal609_tree = default(CommonTree);
		CommonTree IDENTIFIER610_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "typeHeader");
		DebugLocation(1276, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 107)) { return retval; }

			// Java.g:1277:5: ( modifiers ( 'class' | 'enum' | ( ( '@' )? 'interface' ) ) IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1277:9: modifiers ( 'class' | 'enum' | ( ( '@' )? 'interface' ) ) IDENTIFIER
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1277, 9);
			PushFollow(Follow._modifiers_in_typeHeader8042);
			modifiers605=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers605.Tree);
			DebugLocation(1277, 19);
			// Java.g:1277:19: ( 'class' | 'enum' | ( ( '@' )? 'interface' ) )
			int alt161=3;
			try { DebugEnterSubRule(161);
			try { DebugEnterDecision(161, false);
			switch (input.LA(1))
			{
			case CLASS:
				{
				alt161 = 1;
				}
				break;
			case ENUM:
				{
				alt161 = 2;
				}
				break;
			case INTERFACE:
			case MONKEYS_AT:
				{
				alt161 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 161, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(161); }
			switch (alt161)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1277:20: 'class'
				{
				DebugLocation(1277, 20);
				string_literal606=(CommonToken)Match(input,CLASS,Follow._CLASS_in_typeHeader8045); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal606_tree = (CommonTree)adaptor.Create(string_literal606);
				adaptor.AddChild(root_0, string_literal606_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1277:28: 'enum'
				{
				DebugLocation(1277, 28);
				string_literal607=(CommonToken)Match(input,ENUM,Follow._ENUM_in_typeHeader8047); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal607_tree = (CommonTree)adaptor.Create(string_literal607);
				adaptor.AddChild(root_0, string_literal607_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Java.g:1277:35: ( ( '@' )? 'interface' )
				{
				DebugLocation(1277, 35);
				// Java.g:1277:35: ( ( '@' )? 'interface' )
				DebugEnterAlt(1);
				// Java.g:1277:36: ( '@' )? 'interface'
				{
				DebugLocation(1277, 36);
				// Java.g:1277:36: ( '@' )?
				int alt160=2;
				try { DebugEnterSubRule(160);
				try { DebugEnterDecision(160, false);
				int LA160_1 = input.LA(1);

				if ((LA160_1==MONKEYS_AT))
				{
					alt160 = 1;
				}
				} finally { DebugExitDecision(160); }
				switch (alt160)
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1277:36: '@'
					{
					DebugLocation(1277, 36);
					char_literal608=(CommonToken)Match(input,MONKEYS_AT,Follow._MONKEYS_AT_in_typeHeader8050); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal608_tree = (CommonTree)adaptor.Create(char_literal608);
					adaptor.AddChild(root_0, char_literal608_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(160); }

				DebugLocation(1277, 42);
				string_literal609=(CommonToken)Match(input,INTERFACE,Follow._INTERFACE_in_typeHeader8054); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal609_tree = (CommonTree)adaptor.Create(string_literal609);
				adaptor.AddChild(root_0, string_literal609_tree);
				}

				}


				}
				break;

			}
			} finally { DebugExitSubRule(161); }

			DebugLocation(1277, 56);
			IDENTIFIER610=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_typeHeader8058); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER610_tree = (CommonTree)adaptor.Create(IDENTIFIER610);
			adaptor.AddChild(root_0, IDENTIFIER610_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeHeader", 107);
			LeaveRule("typeHeader", 107);
			LeaveRule_typeHeader();
			if (state.backtracking > 0) { Memoize(input, 107, typeHeader_StartIndex); }

		}
		DebugLocation(1278, 4);
		} finally { DebugExitRule(GrammarFileName, "typeHeader"); }
		return retval;

	}
	// $ANTLR end "typeHeader"

	partial void EnterRule_methodHeader();
	partial void LeaveRule_methodHeader();
	// $ANTLR start "methodHeader"
	// Java.g:1280:1: methodHeader : modifiers ( typeParameters )? ( type | 'void' )? IDENTIFIER '(' ;
	[GrammarRule("methodHeader")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> methodHeader()
	{
		EnterRule_methodHeader();
		EnterRule("methodHeader", 108);
		TraceIn("methodHeader", 108);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int methodHeader_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken string_literal614 = default(CommonToken);
		CommonToken IDENTIFIER615 = default(CommonToken);
		CommonToken char_literal616 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> modifiers611 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> typeParameters612 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type613 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree string_literal614_tree = default(CommonTree);
		CommonTree IDENTIFIER615_tree = default(CommonTree);
		CommonTree char_literal616_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "methodHeader");
		DebugLocation(1280, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 108)) { return retval; }

			// Java.g:1281:5: ( modifiers ( typeParameters )? ( type | 'void' )? IDENTIFIER '(' )
			DebugEnterAlt(1);
			// Java.g:1281:9: modifiers ( typeParameters )? ( type | 'void' )? IDENTIFIER '('
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1281, 9);
			PushFollow(Follow._modifiers_in_methodHeader8078);
			modifiers611=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers611.Tree);
			DebugLocation(1281, 19);
			// Java.g:1281:19: ( typeParameters )?
			int alt162=2;
			try { DebugEnterSubRule(162);
			try { DebugEnterDecision(162, false);
			int LA162_1 = input.LA(1);

			if ((LA162_1==LT))
			{
				alt162 = 1;
			}
			} finally { DebugExitDecision(162); }
			switch (alt162)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1281:19: typeParameters
				{
				DebugLocation(1281, 19);
				PushFollow(Follow._typeParameters_in_methodHeader8080);
				typeParameters612=typeParameters();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeParameters612.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(162); }

			DebugLocation(1281, 35);
			// Java.g:1281:35: ( type | 'void' )?
			int alt163=3;
			try { DebugEnterSubRule(163);
			try { DebugEnterDecision(163, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				int LA163_2 = input.LA(2);

				if ((LA163_2==DOT||LA163_2==IDENTIFIER||LA163_2==LBRACKET||LA163_2==LT))
				{
					alt163 = 1;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				alt163 = 1;
				}
				break;
			case VOID:
				{
				alt163 = 2;
				}
				break;
			}

			} finally { DebugExitDecision(163); }
			switch (alt163)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:1281:36: type
				{
				DebugLocation(1281, 36);
				PushFollow(Follow._type_in_methodHeader8084);
				type613=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type613.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Java.g:1281:41: 'void'
				{
				DebugLocation(1281, 41);
				string_literal614=(CommonToken)Match(input,VOID,Follow._VOID_in_methodHeader8086); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal614_tree = (CommonTree)adaptor.Create(string_literal614);
				adaptor.AddChild(root_0, string_literal614_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(163); }

			DebugLocation(1281, 50);
			IDENTIFIER615=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_methodHeader8090); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER615_tree = (CommonTree)adaptor.Create(IDENTIFIER615);
			adaptor.AddChild(root_0, IDENTIFIER615_tree);
			}
			DebugLocation(1281, 61);
			char_literal616=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_methodHeader8092); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal616_tree = (CommonTree)adaptor.Create(char_literal616);
			adaptor.AddChild(root_0, char_literal616_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("methodHeader", 108);
			LeaveRule("methodHeader", 108);
			LeaveRule_methodHeader();
			if (state.backtracking > 0) { Memoize(input, 108, methodHeader_StartIndex); }

		}
		DebugLocation(1282, 4);
		} finally { DebugExitRule(GrammarFileName, "methodHeader"); }
		return retval;

	}
	// $ANTLR end "methodHeader"

	partial void EnterRule_fieldHeader();
	partial void LeaveRule_fieldHeader();
	// $ANTLR start "fieldHeader"
	// Java.g:1284:1: fieldHeader : modifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) ;
	[GrammarRule("fieldHeader")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> fieldHeader()
	{
		EnterRule_fieldHeader();
		EnterRule("fieldHeader", 109);
		TraceIn("fieldHeader", 109);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int fieldHeader_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENTIFIER619 = default(CommonToken);
		CommonToken char_literal620 = default(CommonToken);
		CommonToken char_literal621 = default(CommonToken);
		CommonToken set622 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> modifiers617 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type618 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree IDENTIFIER619_tree = default(CommonTree);
		CommonTree char_literal620_tree = default(CommonTree);
		CommonTree char_literal621_tree = default(CommonTree);
		CommonTree set622_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "fieldHeader");
		DebugLocation(1284, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 109)) { return retval; }

			// Java.g:1285:5: ( modifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) )
			DebugEnterAlt(1);
			// Java.g:1285:9: modifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1285, 9);
			PushFollow(Follow._modifiers_in_fieldHeader8112);
			modifiers617=modifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers617.Tree);
			DebugLocation(1285, 19);
			PushFollow(Follow._type_in_fieldHeader8114);
			type618=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type618.Tree);
			DebugLocation(1285, 24);
			IDENTIFIER619=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_fieldHeader8116); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER619_tree = (CommonTree)adaptor.Create(IDENTIFIER619);
			adaptor.AddChild(root_0, IDENTIFIER619_tree);
			}
			DebugLocation(1285, 35);
			// Java.g:1285:35: ( '[' ']' )*
			try { DebugEnterSubRule(164);
			while (true)
			{
				int alt164=2;
				try { DebugEnterDecision(164, false);
				int LA164_1 = input.LA(1);

				if ((LA164_1==LBRACKET))
				{
					alt164 = 1;
				}


				} finally { DebugExitDecision(164); }
				switch ( alt164 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1285:36: '[' ']'
					{
					DebugLocation(1285, 36);
					char_literal620=(CommonToken)Match(input,LBRACKET,Follow._LBRACKET_in_fieldHeader8119); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal620_tree = (CommonTree)adaptor.Create(char_literal620);
					adaptor.AddChild(root_0, char_literal620_tree);
					}
					DebugLocation(1285, 39);
					char_literal621=(CommonToken)Match(input,RBRACKET,Follow._RBRACKET_in_fieldHeader8120); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal621_tree = (CommonTree)adaptor.Create(char_literal621);
					adaptor.AddChild(root_0, char_literal621_tree);
					}

					}
					break;

				default:
					goto loop164;
				}
			}

			loop164:
				;

			} finally { DebugExitSubRule(164); }

			DebugLocation(1285, 45);

			set622=(CommonToken)input.LT(1);
			if (input.LA(1)==COMMA||input.LA(1)==EQ||input.LA(1)==SEMI)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set622));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fieldHeader", 109);
			LeaveRule("fieldHeader", 109);
			LeaveRule_fieldHeader();
			if (state.backtracking > 0) { Memoize(input, 109, fieldHeader_StartIndex); }

		}
		DebugLocation(1286, 4);
		} finally { DebugExitRule(GrammarFileName, "fieldHeader"); }
		return retval;

	}
	// $ANTLR end "fieldHeader"

	partial void EnterRule_localVariableHeader();
	partial void LeaveRule_localVariableHeader();
	// $ANTLR start "localVariableHeader"
	// Java.g:1288:1: localVariableHeader : variableModifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) ;
	[GrammarRule("localVariableHeader")]
	private AstParserRuleReturnScope<CommonTree, CommonToken> localVariableHeader()
	{
		EnterRule_localVariableHeader();
		EnterRule("localVariableHeader", 110);
		TraceIn("localVariableHeader", 110);
		AstParserRuleReturnScope<CommonTree, CommonToken> retval = new AstParserRuleReturnScope<CommonTree, CommonToken>();
		retval.Start = (CommonToken)input.LT(1);
		int localVariableHeader_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENTIFIER625 = default(CommonToken);
		CommonToken char_literal626 = default(CommonToken);
		CommonToken char_literal627 = default(CommonToken);
		CommonToken set628 = default(CommonToken);
		AstParserRuleReturnScope<CommonTree, CommonToken> variableModifiers623 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);
		AstParserRuleReturnScope<CommonTree, CommonToken> type624 = default(AstParserRuleReturnScope<CommonTree, CommonToken>);

		CommonTree IDENTIFIER625_tree = default(CommonTree);
		CommonTree char_literal626_tree = default(CommonTree);
		CommonTree char_literal627_tree = default(CommonTree);
		CommonTree set628_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "localVariableHeader");
		DebugLocation(1288, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 110)) { return retval; }

			// Java.g:1289:5: ( variableModifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' ) )
			DebugEnterAlt(1);
			// Java.g:1289:9: variableModifiers type IDENTIFIER ( '[' ']' )* ( '=' | ',' | ';' )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(1289, 9);
			PushFollow(Follow._variableModifiers_in_localVariableHeader8150);
			variableModifiers623=variableModifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variableModifiers623.Tree);
			DebugLocation(1289, 27);
			PushFollow(Follow._type_in_localVariableHeader8152);
			type624=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type624.Tree);
			DebugLocation(1289, 32);
			IDENTIFIER625=(CommonToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_localVariableHeader8154); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER625_tree = (CommonTree)adaptor.Create(IDENTIFIER625);
			adaptor.AddChild(root_0, IDENTIFIER625_tree);
			}
			DebugLocation(1289, 43);
			// Java.g:1289:43: ( '[' ']' )*
			try { DebugEnterSubRule(165);
			while (true)
			{
				int alt165=2;
				try { DebugEnterDecision(165, false);
				int LA165_1 = input.LA(1);

				if ((LA165_1==LBRACKET))
				{
					alt165 = 1;
				}


				} finally { DebugExitDecision(165); }
				switch ( alt165 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1289:44: '[' ']'
					{
					DebugLocation(1289, 44);
					char_literal626=(CommonToken)Match(input,LBRACKET,Follow._LBRACKET_in_localVariableHeader8157); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal626_tree = (CommonTree)adaptor.Create(char_literal626);
					adaptor.AddChild(root_0, char_literal626_tree);
					}
					DebugLocation(1289, 47);
					char_literal627=(CommonToken)Match(input,RBRACKET,Follow._RBRACKET_in_localVariableHeader8158); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal627_tree = (CommonTree)adaptor.Create(char_literal627);
					adaptor.AddChild(root_0, char_literal627_tree);
					}

					}
					break;

				default:
					goto loop165;
				}
			}

			loop165:
				;

			} finally { DebugExitSubRule(165); }

			DebugLocation(1289, 53);

			set628=(CommonToken)input.LT(1);
			if (input.LA(1)==COMMA||input.LA(1)==EQ||input.LA(1)==SEMI)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set628));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("localVariableHeader", 110);
			LeaveRule("localVariableHeader", 110);
			LeaveRule_localVariableHeader();
			if (state.backtracking > 0) { Memoize(input, 110, localVariableHeader_StartIndex); }

		}
		DebugLocation(1290, 4);
		} finally { DebugExitRule(GrammarFileName, "localVariableHeader"); }
		return retval;

	}
	// $ANTLR end "localVariableHeader"

	partial void EnterRule_synpred2_Java_fragment();
	partial void LeaveRule_synpred2_Java_fragment();

	// $ANTLR start synpred2_Java
	private void synpred2_Java_fragment()
	{
		EnterRule_synpred2_Java_fragment();
		EnterRule("synpred2_Java_fragment", 112);
		TraceIn("synpred2_Java_fragment", 112);
		try
		{
			// Java.g:310:13: ( ( annotations )? packageDeclaration )
			DebugEnterAlt(1);
			// Java.g:310:13: ( annotations )? packageDeclaration
			{
			DebugLocation(310, 13);
			// Java.g:310:13: ( annotations )?
			int alt166=2;
			try { DebugEnterSubRule(166);
			try { DebugEnterDecision(166, false);
			int LA166_1 = input.LA(1);

			if ((LA166_1==MONKEYS_AT))
			{
				alt166 = 1;
			}
			} finally { DebugExitDecision(166); }
			switch (alt166)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:310:14: annotations
				{
				DebugLocation(310, 14);
				PushFollow(Follow._annotations_in_synpred2_Java160);
				annotations();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(166); }

			DebugLocation(312, 13);
			PushFollow(Follow._packageDeclaration_in_synpred2_Java189);
			packageDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_Java_fragment", 112);
			LeaveRule("synpred2_Java_fragment", 112);
			LeaveRule_synpred2_Java_fragment();
		}
	}
	// $ANTLR end synpred2_Java

	partial void EnterRule_synpred12_Java_fragment();
	partial void LeaveRule_synpred12_Java_fragment();

	// $ANTLR start synpred12_Java
	private void synpred12_Java_fragment()
	{
		EnterRule_synpred12_Java_fragment();
		EnterRule("synpred12_Java_fragment", 122);
		TraceIn("synpred12_Java_fragment", 122);
		try
		{
			// Java.g:354:10: ( classDeclaration )
			DebugEnterAlt(1);
			// Java.g:354:10: classDeclaration
			{
			DebugLocation(354, 10);
			PushFollow(Follow._classDeclaration_in_synpred12_Java547);
			classDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred12_Java_fragment", 122);
			LeaveRule("synpred12_Java_fragment", 122);
			LeaveRule_synpred12_Java_fragment();
		}
	}
	// $ANTLR end synpred12_Java

	partial void EnterRule_synpred27_Java_fragment();
	partial void LeaveRule_synpred27_Java_fragment();

	// $ANTLR start synpred27_Java
	private void synpred27_Java_fragment()
	{
		EnterRule_synpred27_Java_fragment();
		EnterRule("synpred27_Java_fragment", 137);
		TraceIn("synpred27_Java_fragment", 137);
		try
		{
			// Java.g:385:9: ( normalClassDeclaration )
			DebugEnterAlt(1);
			// Java.g:385:9: normalClassDeclaration
			{
			DebugLocation(385, 9);
			PushFollow(Follow._normalClassDeclaration_in_synpred27_Java784);
			normalClassDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred27_Java_fragment", 137);
			LeaveRule("synpred27_Java_fragment", 137);
			LeaveRule_synpred27_Java_fragment();
		}
	}
	// $ANTLR end synpred27_Java

	partial void EnterRule_synpred43_Java_fragment();
	partial void LeaveRule_synpred43_Java_fragment();

	// $ANTLR start synpred43_Java
	private void synpred43_Java_fragment()
	{
		EnterRule_synpred43_Java_fragment();
		EnterRule("synpred43_Java_fragment", 153);
		TraceIn("synpred43_Java_fragment", 153);
		try
		{
			// Java.g:473:9: ( normalInterfaceDeclaration )
			DebugEnterAlt(1);
			// Java.g:473:9: normalInterfaceDeclaration
			{
			DebugLocation(473, 9);
			PushFollow(Follow._normalInterfaceDeclaration_in_synpred43_Java1463);
			normalInterfaceDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred43_Java_fragment", 153);
			LeaveRule("synpred43_Java_fragment", 153);
			LeaveRule_synpred43_Java_fragment();
		}
	}
	// $ANTLR end synpred43_Java

	partial void EnterRule_synpred52_Java_fragment();
	partial void LeaveRule_synpred52_Java_fragment();

	// $ANTLR start synpred52_Java
	private void synpred52_Java_fragment()
	{
		EnterRule_synpred52_Java_fragment();
		EnterRule("synpred52_Java_fragment", 162);
		TraceIn("synpred52_Java_fragment", 162);
		try
		{
			// Java.g:515:10: ( fieldDeclaration )
			DebugEnterAlt(1);
			// Java.g:515:10: fieldDeclaration
			{
			DebugLocation(515, 10);
			PushFollow(Follow._fieldDeclaration_in_synpred52_Java1793);
			fieldDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred52_Java_fragment", 162);
			LeaveRule("synpred52_Java_fragment", 162);
			LeaveRule_synpred52_Java_fragment();
		}
	}
	// $ANTLR end synpred52_Java

	partial void EnterRule_synpred53_Java_fragment();
	partial void LeaveRule_synpred53_Java_fragment();

	// $ANTLR start synpred53_Java
	private void synpred53_Java_fragment()
	{
		EnterRule_synpred53_Java_fragment();
		EnterRule("synpred53_Java_fragment", 163);
		TraceIn("synpred53_Java_fragment", 163);
		try
		{
			// Java.g:516:10: ( methodDeclaration )
			DebugEnterAlt(1);
			// Java.g:516:10: methodDeclaration
			{
			DebugLocation(516, 10);
			PushFollow(Follow._methodDeclaration_in_synpred53_Java1804);
			methodDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred53_Java_fragment", 163);
			LeaveRule("synpred53_Java_fragment", 163);
			LeaveRule_synpred53_Java_fragment();
		}
	}
	// $ANTLR end synpred53_Java

	partial void EnterRule_synpred54_Java_fragment();
	partial void LeaveRule_synpred54_Java_fragment();

	// $ANTLR start synpred54_Java
	private void synpred54_Java_fragment()
	{
		EnterRule_synpred54_Java_fragment();
		EnterRule("synpred54_Java_fragment", 164);
		TraceIn("synpred54_Java_fragment", 164);
		try
		{
			// Java.g:517:10: ( classDeclaration )
			DebugEnterAlt(1);
			// Java.g:517:10: classDeclaration
			{
			DebugLocation(517, 10);
			PushFollow(Follow._classDeclaration_in_synpred54_Java1815);
			classDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred54_Java_fragment", 164);
			LeaveRule("synpred54_Java_fragment", 164);
			LeaveRule_synpred54_Java_fragment();
		}
	}
	// $ANTLR end synpred54_Java

	partial void EnterRule_synpred57_Java_fragment();
	partial void LeaveRule_synpred57_Java_fragment();

	// $ANTLR start synpred57_Java
	private void synpred57_Java_fragment()
	{
		EnterRule_synpred57_Java_fragment();
		EnterRule("synpred57_Java_fragment", 167);
		TraceIn("synpred57_Java_fragment", 167);
		try
		{
			// Java.g:533:10: ( explicitConstructorInvocation )
			DebugEnterAlt(1);
			// Java.g:533:10: explicitConstructorInvocation
			{
			DebugLocation(533, 10);
			PushFollow(Follow._explicitConstructorInvocation_in_synpred57_Java1952);
			explicitConstructorInvocation();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred57_Java_fragment", 167);
			LeaveRule("synpred57_Java_fragment", 167);
			LeaveRule_synpred57_Java_fragment();
		}
	}
	// $ANTLR end synpred57_Java

	partial void EnterRule_synpred59_Java_fragment();
	partial void LeaveRule_synpred59_Java_fragment();

	// $ANTLR start synpred59_Java
	private void synpred59_Java_fragment()
	{
		EnterRule_synpred59_Java_fragment();
		EnterRule("synpred59_Java_fragment", 169);
		TraceIn("synpred59_Java_fragment", 169);
		try
		{
			// Java.g:525:10: ( modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}' )
			DebugEnterAlt(1);
			// Java.g:525:10: modifiers ( typeParameters )? IDENTIFIER formalParameters ( 'throws' qualifiedNameList )? '{' ( explicitConstructorInvocation )? ( blockStatement )* '}'
			{
			DebugLocation(525, 10);
			PushFollow(Follow._modifiers_in_synpred59_Java1864);
			modifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(526, 9);
			// Java.g:526:9: ( typeParameters )?
			int alt169=2;
			try { DebugEnterSubRule(169);
			try { DebugEnterDecision(169, false);
			int LA169_1 = input.LA(1);

			if ((LA169_1==LT))
			{
				alt169 = 1;
			}
			} finally { DebugExitDecision(169); }
			switch (alt169)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:526:10: typeParameters
				{
				DebugLocation(526, 10);
				PushFollow(Follow._typeParameters_in_synpred59_Java1875);
				typeParameters();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(169); }

			DebugLocation(528, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred59_Java1896); if (state.failed) return;
			DebugLocation(529, 9);
			PushFollow(Follow._formalParameters_in_synpred59_Java1906);
			formalParameters();
			PopFollow();
			if (state.failed) return;
			DebugLocation(530, 9);
			// Java.g:530:9: ( 'throws' qualifiedNameList )?
			int alt170=2;
			try { DebugEnterSubRule(170);
			try { DebugEnterDecision(170, false);
			int LA170_1 = input.LA(1);

			if ((LA170_1==THROWS))
			{
				alt170 = 1;
			}
			} finally { DebugExitDecision(170); }
			switch (alt170)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:530:10: 'throws' qualifiedNameList
				{
				DebugLocation(530, 10);
				Match(input,THROWS,Follow._THROWS_in_synpred59_Java1917); if (state.failed) return;
				DebugLocation(530, 19);
				PushFollow(Follow._qualifiedNameList_in_synpred59_Java1919);
				qualifiedNameList();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(170); }

			DebugLocation(532, 9);
			Match(input,LBRACE,Follow._LBRACE_in_synpred59_Java1940); if (state.failed) return;
			DebugLocation(533, 9);
			// Java.g:533:9: ( explicitConstructorInvocation )?
			int alt171=2;
			try { DebugEnterSubRule(171);
			try { DebugEnterDecision(171, false);
			switch (input.LA(1))
			{
			case LT:
				{
				alt171 = 1;
				}
				break;
			case THIS:
				{
				int LA171_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt171 = 1;
				}
				}
				break;
			case LPAREN:
				{
				int LA171_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt171 = 1;
				}
				}
				break;
			case SUPER:
				{
				int LA171_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt171 = 1;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA171_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt171 = 1;
				}
				}
				break;
			case CHARLITERAL:
			case DOUBLELITERAL:
			case FALSE:
			case FLOATLITERAL:
			case INTLITERAL:
			case LONGLITERAL:
			case NULL:
			case STRINGLITERAL:
			case TRUE:
				{
				int LA171_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt171 = 1;
				}
				}
				break;
			case NEW:
				{
				int LA171_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt171 = 1;
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				int LA171_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt171 = 1;
				}
				}
				break;
			case VOID:
				{
				int LA171_2 = input.LA(2);

				if ((EvaluatePredicate(synpred57_Java_fragment)))
				{
					alt171 = 1;
				}
				}
				break;
			}

			} finally { DebugExitDecision(171); }
			switch (alt171)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:533:10: explicitConstructorInvocation
				{
				DebugLocation(533, 10);
				PushFollow(Follow._explicitConstructorInvocation_in_synpred59_Java1952);
				explicitConstructorInvocation();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(171); }

			DebugLocation(535, 9);
			// Java.g:535:9: ( blockStatement )*
			try { DebugEnterSubRule(172);
			while (true)
			{
				int alt172=2;
				try { DebugEnterDecision(172, false);
				int LA172_1 = input.LA(1);

				if ((LA172_1==ABSTRACT||(LA172_1>=ASSERT && LA172_1<=BANG)||(LA172_1>=BOOLEAN && LA172_1<=BYTE)||(LA172_1>=CHAR && LA172_1<=CLASS)||LA172_1==CONTINUE||LA172_1==DO||(LA172_1>=DOUBLE && LA172_1<=DOUBLELITERAL)||LA172_1==ENUM||(LA172_1>=FALSE && LA172_1<=FINAL)||(LA172_1>=FLOAT && LA172_1<=FOR)||(LA172_1>=IDENTIFIER && LA172_1<=IF)||(LA172_1>=INT && LA172_1<=INTLITERAL)||LA172_1==LBRACE||(LA172_1>=LONG && LA172_1<=LT)||(LA172_1>=MONKEYS_AT && LA172_1<=NULL)||LA172_1==PLUS||(LA172_1>=PLUSPLUS && LA172_1<=PUBLIC)||LA172_1==RETURN||(LA172_1>=SEMI && LA172_1<=SHORT)||(LA172_1>=STATIC && LA172_1<=SUB)||(LA172_1>=SUBSUB && LA172_1<=SYNCHRONIZED)||(LA172_1>=THIS && LA172_1<=THROW)||(LA172_1>=TILDE && LA172_1<=WHILE)))
				{
					alt172 = 1;
				}


				} finally { DebugExitDecision(172); }
				switch ( alt172 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:535:10: blockStatement
					{
					DebugLocation(535, 10);
					PushFollow(Follow._blockStatement_in_synpred59_Java1974);
					blockStatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop172;
				}
			}

			loop172:
				;

			} finally { DebugExitSubRule(172); }

			DebugLocation(537, 9);
			Match(input,RBRACE,Follow._RBRACE_in_synpred59_Java1995); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred59_Java_fragment", 169);
			LeaveRule("synpred59_Java_fragment", 169);
			LeaveRule_synpred59_Java_fragment();
		}
	}
	// $ANTLR end synpred59_Java

	partial void EnterRule_synpred68_Java_fragment();
	partial void LeaveRule_synpred68_Java_fragment();

	// $ANTLR start synpred68_Java
	private void synpred68_Java_fragment()
	{
		EnterRule_synpred68_Java_fragment();
		EnterRule("synpred68_Java_fragment", 178);
		TraceIn("synpred68_Java_fragment", 178);
		try
		{
			// Java.g:579:9: ( interfaceFieldDeclaration )
			DebugEnterAlt(1);
			// Java.g:579:9: interfaceFieldDeclaration
			{
			DebugLocation(579, 9);
			PushFollow(Follow._interfaceFieldDeclaration_in_synpred68_Java2370);
			interfaceFieldDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred68_Java_fragment", 178);
			LeaveRule("synpred68_Java_fragment", 178);
			LeaveRule_synpred68_Java_fragment();
		}
	}
	// $ANTLR end synpred68_Java

	partial void EnterRule_synpred69_Java_fragment();
	partial void LeaveRule_synpred69_Java_fragment();

	// $ANTLR start synpred69_Java
	private void synpred69_Java_fragment()
	{
		EnterRule_synpred69_Java_fragment();
		EnterRule("synpred69_Java_fragment", 179);
		TraceIn("synpred69_Java_fragment", 179);
		try
		{
			// Java.g:580:9: ( interfaceMethodDeclaration )
			DebugEnterAlt(1);
			// Java.g:580:9: interfaceMethodDeclaration
			{
			DebugLocation(580, 9);
			PushFollow(Follow._interfaceMethodDeclaration_in_synpred69_Java2380);
			interfaceMethodDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred69_Java_fragment", 179);
			LeaveRule("synpred69_Java_fragment", 179);
			LeaveRule_synpred69_Java_fragment();
		}
	}
	// $ANTLR end synpred69_Java

	partial void EnterRule_synpred70_Java_fragment();
	partial void LeaveRule_synpred70_Java_fragment();

	// $ANTLR start synpred70_Java
	private void synpred70_Java_fragment()
	{
		EnterRule_synpred70_Java_fragment();
		EnterRule("synpred70_Java_fragment", 180);
		TraceIn("synpred70_Java_fragment", 180);
		try
		{
			// Java.g:581:9: ( interfaceDeclaration )
			DebugEnterAlt(1);
			// Java.g:581:9: interfaceDeclaration
			{
			DebugLocation(581, 9);
			PushFollow(Follow._interfaceDeclaration_in_synpred70_Java2390);
			interfaceDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred70_Java_fragment", 180);
			LeaveRule("synpred70_Java_fragment", 180);
			LeaveRule_synpred70_Java_fragment();
		}
	}
	// $ANTLR end synpred70_Java

	partial void EnterRule_synpred71_Java_fragment();
	partial void LeaveRule_synpred71_Java_fragment();

	// $ANTLR start synpred71_Java
	private void synpred71_Java_fragment()
	{
		EnterRule_synpred71_Java_fragment();
		EnterRule("synpred71_Java_fragment", 181);
		TraceIn("synpred71_Java_fragment", 181);
		try
		{
			// Java.g:582:9: ( classDeclaration )
			DebugEnterAlt(1);
			// Java.g:582:9: classDeclaration
			{
			DebugLocation(582, 9);
			PushFollow(Follow._classDeclaration_in_synpred71_Java2400);
			classDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred71_Java_fragment", 181);
			LeaveRule("synpred71_Java_fragment", 181);
			LeaveRule_synpred71_Java_fragment();
		}
	}
	// $ANTLR end synpred71_Java

	partial void EnterRule_synpred96_Java_fragment();
	partial void LeaveRule_synpred96_Java_fragment();

	// $ANTLR start synpred96_Java
	private void synpred96_Java_fragment()
	{
		EnterRule_synpred96_Java_fragment();
		EnterRule("synpred96_Java_fragment", 206);
		TraceIn("synpred96_Java_fragment", 206);
		try
		{
			// Java.g:677:9: ( ellipsisParameterDecl )
			DebugEnterAlt(1);
			// Java.g:677:9: ellipsisParameterDecl
			{
			DebugLocation(677, 9);
			PushFollow(Follow._ellipsisParameterDecl_in_synpred96_Java3164);
			ellipsisParameterDecl();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred96_Java_fragment", 206);
			LeaveRule("synpred96_Java_fragment", 206);
			LeaveRule_synpred96_Java_fragment();
		}
	}
	// $ANTLR end synpred96_Java

	partial void EnterRule_synpred98_Java_fragment();
	partial void LeaveRule_synpred98_Java_fragment();

	// $ANTLR start synpred98_Java
	private void synpred98_Java_fragment()
	{
		EnterRule_synpred98_Java_fragment();
		EnterRule("synpred98_Java_fragment", 208);
		TraceIn("synpred98_Java_fragment", 208);
		try
		{
			// Java.g:678:9: ( normalParameterDecl ( ',' normalParameterDecl )* )
			DebugEnterAlt(1);
			// Java.g:678:9: normalParameterDecl ( ',' normalParameterDecl )*
			{
			DebugLocation(678, 9);
			PushFollow(Follow._normalParameterDecl_in_synpred98_Java3174);
			normalParameterDecl();
			PopFollow();
			if (state.failed) return;
			DebugLocation(679, 9);
			// Java.g:679:9: ( ',' normalParameterDecl )*
			try { DebugEnterSubRule(175);
			while (true)
			{
				int alt175=2;
				try { DebugEnterDecision(175, false);
				int LA175_1 = input.LA(1);

				if ((LA175_1==COMMA))
				{
					alt175 = 1;
				}


				} finally { DebugExitDecision(175); }
				switch ( alt175 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:679:10: ',' normalParameterDecl
					{
					DebugLocation(679, 10);
					Match(input,COMMA,Follow._COMMA_in_synpred98_Java3185); if (state.failed) return;
					DebugLocation(679, 14);
					PushFollow(Follow._normalParameterDecl_in_synpred98_Java3187);
					normalParameterDecl();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop175;
				}
			}

			loop175:
				;

			} finally { DebugExitSubRule(175); }


			}

		}
		finally
		{
			TraceOut("synpred98_Java_fragment", 208);
			LeaveRule("synpred98_Java_fragment", 208);
			LeaveRule_synpred98_Java_fragment();
		}
	}
	// $ANTLR end synpred98_Java

	partial void EnterRule_synpred99_Java_fragment();
	partial void LeaveRule_synpred99_Java_fragment();

	// $ANTLR start synpred99_Java
	private void synpred99_Java_fragment()
	{
		EnterRule_synpred99_Java_fragment();
		EnterRule("synpred99_Java_fragment", 209);
		TraceIn("synpred99_Java_fragment", 209);
		try
		{
			// Java.g:681:10: ( normalParameterDecl ',' )
			DebugEnterAlt(1);
			// Java.g:681:10: normalParameterDecl ','
			{
			DebugLocation(681, 10);
			PushFollow(Follow._normalParameterDecl_in_synpred99_Java3209);
			normalParameterDecl();
			PopFollow();
			if (state.failed) return;
			DebugLocation(682, 9);
			Match(input,COMMA,Follow._COMMA_in_synpred99_Java3219); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred99_Java_fragment", 209);
			LeaveRule("synpred99_Java_fragment", 209);
			LeaveRule_synpred99_Java_fragment();
		}
	}
	// $ANTLR end synpred99_Java

	partial void EnterRule_synpred103_Java_fragment();
	partial void LeaveRule_synpred103_Java_fragment();

	// $ANTLR start synpred103_Java
	private void synpred103_Java_fragment()
	{
		EnterRule_synpred103_Java_fragment();
		EnterRule("synpred103_Java_fragment", 213);
		TraceIn("synpred103_Java_fragment", 213);
		try
		{
			// Java.g:701:9: ( ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';' )
			DebugEnterAlt(1);
			// Java.g:701:9: ( nonWildcardTypeArguments )? ( 'this' | 'super' ) arguments ';'
			{
			DebugLocation(701, 9);
			// Java.g:701:9: ( nonWildcardTypeArguments )?
			int alt176=2;
			try { DebugEnterSubRule(176);
			try { DebugEnterDecision(176, false);
			int LA176_1 = input.LA(1);

			if ((LA176_1==LT))
			{
				alt176 = 1;
			}
			} finally { DebugExitDecision(176); }
			switch (alt176)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:701:10: nonWildcardTypeArguments
				{
				DebugLocation(701, 10);
				PushFollow(Follow._nonWildcardTypeArguments_in_synpred103_Java3354);
				nonWildcardTypeArguments();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(176); }

			DebugLocation(703, 9);
			if (input.LA(1)==SUPER||input.LA(1)==THIS)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(706, 9);
			PushFollow(Follow._arguments_in_synpred103_Java3412);
			arguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(706, 19);
			Match(input,SEMI,Follow._SEMI_in_synpred103_Java3414); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred103_Java_fragment", 213);
			LeaveRule("synpred103_Java_fragment", 213);
			LeaveRule_synpred103_Java_fragment();
		}
	}
	// $ANTLR end synpred103_Java

	partial void EnterRule_synpred117_Java_fragment();
	partial void LeaveRule_synpred117_Java_fragment();

	// $ANTLR start synpred117_Java
	private void synpred117_Java_fragment()
	{
		EnterRule_synpred117_Java_fragment();
		EnterRule("synpred117_Java_fragment", 227);
		TraceIn("synpred117_Java_fragment", 227);
		try
		{
			// Java.g:788:9: ( annotationMethodDeclaration )
			DebugEnterAlt(1);
			// Java.g:788:9: annotationMethodDeclaration
			{
			DebugLocation(788, 9);
			PushFollow(Follow._annotationMethodDeclaration_in_synpred117_Java4013);
			annotationMethodDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred117_Java_fragment", 227);
			LeaveRule("synpred117_Java_fragment", 227);
			LeaveRule_synpred117_Java_fragment();
		}
	}
	// $ANTLR end synpred117_Java

	partial void EnterRule_synpred118_Java_fragment();
	partial void LeaveRule_synpred118_Java_fragment();

	// $ANTLR start synpred118_Java
	private void synpred118_Java_fragment()
	{
		EnterRule_synpred118_Java_fragment();
		EnterRule("synpred118_Java_fragment", 228);
		TraceIn("synpred118_Java_fragment", 228);
		try
		{
			// Java.g:789:9: ( interfaceFieldDeclaration )
			DebugEnterAlt(1);
			// Java.g:789:9: interfaceFieldDeclaration
			{
			DebugLocation(789, 9);
			PushFollow(Follow._interfaceFieldDeclaration_in_synpred118_Java4023);
			interfaceFieldDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred118_Java_fragment", 228);
			LeaveRule("synpred118_Java_fragment", 228);
			LeaveRule_synpred118_Java_fragment();
		}
	}
	// $ANTLR end synpred118_Java

	partial void EnterRule_synpred119_Java_fragment();
	partial void LeaveRule_synpred119_Java_fragment();

	// $ANTLR start synpred119_Java
	private void synpred119_Java_fragment()
	{
		EnterRule_synpred119_Java_fragment();
		EnterRule("synpred119_Java_fragment", 229);
		TraceIn("synpred119_Java_fragment", 229);
		try
		{
			// Java.g:790:9: ( normalClassDeclaration )
			DebugEnterAlt(1);
			// Java.g:790:9: normalClassDeclaration
			{
			DebugLocation(790, 9);
			PushFollow(Follow._normalClassDeclaration_in_synpred119_Java4033);
			normalClassDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred119_Java_fragment", 229);
			LeaveRule("synpred119_Java_fragment", 229);
			LeaveRule_synpred119_Java_fragment();
		}
	}
	// $ANTLR end synpred119_Java

	partial void EnterRule_synpred120_Java_fragment();
	partial void LeaveRule_synpred120_Java_fragment();

	// $ANTLR start synpred120_Java
	private void synpred120_Java_fragment()
	{
		EnterRule_synpred120_Java_fragment();
		EnterRule("synpred120_Java_fragment", 230);
		TraceIn("synpred120_Java_fragment", 230);
		try
		{
			// Java.g:791:9: ( normalInterfaceDeclaration )
			DebugEnterAlt(1);
			// Java.g:791:9: normalInterfaceDeclaration
			{
			DebugLocation(791, 9);
			PushFollow(Follow._normalInterfaceDeclaration_in_synpred120_Java4043);
			normalInterfaceDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred120_Java_fragment", 230);
			LeaveRule("synpred120_Java_fragment", 230);
			LeaveRule_synpred120_Java_fragment();
		}
	}
	// $ANTLR end synpred120_Java

	partial void EnterRule_synpred121_Java_fragment();
	partial void LeaveRule_synpred121_Java_fragment();

	// $ANTLR start synpred121_Java
	private void synpred121_Java_fragment()
	{
		EnterRule_synpred121_Java_fragment();
		EnterRule("synpred121_Java_fragment", 231);
		TraceIn("synpred121_Java_fragment", 231);
		try
		{
			// Java.g:792:9: ( enumDeclaration )
			DebugEnterAlt(1);
			// Java.g:792:9: enumDeclaration
			{
			DebugLocation(792, 9);
			PushFollow(Follow._enumDeclaration_in_synpred121_Java4053);
			enumDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred121_Java_fragment", 231);
			LeaveRule("synpred121_Java_fragment", 231);
			LeaveRule_synpred121_Java_fragment();
		}
	}
	// $ANTLR end synpred121_Java

	partial void EnterRule_synpred122_Java_fragment();
	partial void LeaveRule_synpred122_Java_fragment();

	// $ANTLR start synpred122_Java
	private void synpred122_Java_fragment()
	{
		EnterRule_synpred122_Java_fragment();
		EnterRule("synpred122_Java_fragment", 232);
		TraceIn("synpred122_Java_fragment", 232);
		try
		{
			// Java.g:793:9: ( annotationTypeDeclaration )
			DebugEnterAlt(1);
			// Java.g:793:9: annotationTypeDeclaration
			{
			DebugLocation(793, 9);
			PushFollow(Follow._annotationTypeDeclaration_in_synpred122_Java4063);
			annotationTypeDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred122_Java_fragment", 232);
			LeaveRule("synpred122_Java_fragment", 232);
			LeaveRule_synpred122_Java_fragment();
		}
	}
	// $ANTLR end synpred122_Java

	partial void EnterRule_synpred125_Java_fragment();
	partial void LeaveRule_synpred125_Java_fragment();

	// $ANTLR start synpred125_Java
	private void synpred125_Java_fragment()
	{
		EnterRule_synpred125_Java_fragment();
		EnterRule("synpred125_Java_fragment", 235);
		TraceIn("synpred125_Java_fragment", 235);
		try
		{
			// Java.g:836:9: ( localVariableDeclarationStatement )
			DebugEnterAlt(1);
			// Java.g:836:9: localVariableDeclarationStatement
			{
			DebugLocation(836, 9);
			PushFollow(Follow._localVariableDeclarationStatement_in_synpred125_Java4221);
			localVariableDeclarationStatement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred125_Java_fragment", 235);
			LeaveRule("synpred125_Java_fragment", 235);
			LeaveRule_synpred125_Java_fragment();
		}
	}
	// $ANTLR end synpred125_Java

	partial void EnterRule_synpred126_Java_fragment();
	partial void LeaveRule_synpred126_Java_fragment();

	// $ANTLR start synpred126_Java
	private void synpred126_Java_fragment()
	{
		EnterRule_synpred126_Java_fragment();
		EnterRule("synpred126_Java_fragment", 236);
		TraceIn("synpred126_Java_fragment", 236);
		try
		{
			// Java.g:837:9: ( classOrInterfaceDeclaration )
			DebugEnterAlt(1);
			// Java.g:837:9: classOrInterfaceDeclaration
			{
			DebugLocation(837, 9);
			PushFollow(Follow._classOrInterfaceDeclaration_in_synpred126_Java4231);
			classOrInterfaceDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred126_Java_fragment", 236);
			LeaveRule("synpred126_Java_fragment", 236);
			LeaveRule_synpred126_Java_fragment();
		}
	}
	// $ANTLR end synpred126_Java

	partial void EnterRule_synpred130_Java_fragment();
	partial void LeaveRule_synpred130_Java_fragment();

	// $ANTLR start synpred130_Java
	private void synpred130_Java_fragment()
	{
		EnterRule_synpred130_Java_fragment();
		EnterRule("synpred130_Java_fragment", 240);
		TraceIn("synpred130_Java_fragment", 240);
		try
		{
			// Java.g:857:9: ( ( 'assert' ) expression ( ':' expression )? ';' )
			DebugEnterAlt(1);
			// Java.g:857:9: ( 'assert' ) expression ( ':' expression )? ';'
			{
			DebugLocation(857, 9);
			// Java.g:857:9: ( 'assert' )
			DebugEnterAlt(1);
			// Java.g:857:10: 'assert'
			{
			DebugLocation(857, 10);
			Match(input,ASSERT,Follow._ASSERT_in_synpred130_Java4372); if (state.failed) return;

			}

			DebugLocation(859, 9);
			PushFollow(Follow._expression_in_synpred130_Java4392);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(859, 20);
			// Java.g:859:20: ( ':' expression )?
			int alt179=2;
			try { DebugEnterSubRule(179);
			try { DebugEnterDecision(179, false);
			int LA179_1 = input.LA(1);

			if ((LA179_1==COLON))
			{
				alt179 = 1;
			}
			} finally { DebugExitDecision(179); }
			switch (alt179)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:859:21: ':' expression
				{
				DebugLocation(859, 21);
				Match(input,COLON,Follow._COLON_in_synpred130_Java4395); if (state.failed) return;
				DebugLocation(859, 25);
				PushFollow(Follow._expression_in_synpred130_Java4397);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(179); }

			DebugLocation(859, 38);
			Match(input,SEMI,Follow._SEMI_in_synpred130_Java4401); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred130_Java_fragment", 240);
			LeaveRule("synpred130_Java_fragment", 240);
			LeaveRule_synpred130_Java_fragment();
		}
	}
	// $ANTLR end synpred130_Java

	partial void EnterRule_synpred132_Java_fragment();
	partial void LeaveRule_synpred132_Java_fragment();

	// $ANTLR start synpred132_Java
	private void synpred132_Java_fragment()
	{
		EnterRule_synpred132_Java_fragment();
		EnterRule("synpred132_Java_fragment", 242);
		TraceIn("synpred132_Java_fragment", 242);
		try
		{
			// Java.g:860:9: ( 'assert' expression ( ':' expression )? ';' )
			DebugEnterAlt(1);
			// Java.g:860:9: 'assert' expression ( ':' expression )? ';'
			{
			DebugLocation(860, 9);
			Match(input,ASSERT,Follow._ASSERT_in_synpred132_Java4411); if (state.failed) return;
			DebugLocation(860, 19);
			PushFollow(Follow._expression_in_synpred132_Java4414);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(860, 30);
			// Java.g:860:30: ( ':' expression )?
			int alt180=2;
			try { DebugEnterSubRule(180);
			try { DebugEnterDecision(180, false);
			int LA180_1 = input.LA(1);

			if ((LA180_1==COLON))
			{
				alt180 = 1;
			}
			} finally { DebugExitDecision(180); }
			switch (alt180)
			{
			case 1:
				DebugEnterAlt(1);
				// Java.g:860:31: ':' expression
				{
				DebugLocation(860, 31);
				Match(input,COLON,Follow._COLON_in_synpred132_Java4417); if (state.failed) return;
				DebugLocation(860, 35);
				PushFollow(Follow._expression_in_synpred132_Java4419);
				expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(180); }

			DebugLocation(860, 48);
			Match(input,SEMI,Follow._SEMI_in_synpred132_Java4423); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred132_Java_fragment", 242);
			LeaveRule("synpred132_Java_fragment", 242);
			LeaveRule_synpred132_Java_fragment();
		}
	}
	// $ANTLR end synpred132_Java

	partial void EnterRule_synpred133_Java_fragment();
	partial void LeaveRule_synpred133_Java_fragment();

	// $ANTLR start synpred133_Java
	private void synpred133_Java_fragment()
	{
		EnterRule_synpred133_Java_fragment();
		EnterRule("synpred133_Java_fragment", 243);
		TraceIn("synpred133_Java_fragment", 243);
		try
		{
			// Java.g:861:39: ( 'else' statement )
			DebugEnterAlt(1);
			// Java.g:861:39: 'else' statement
			{
			DebugLocation(861, 39);
			Match(input,ELSE,Follow._ELSE_in_synpred133_Java4452); if (state.failed) return;
			DebugLocation(861, 46);
			PushFollow(Follow._statement_in_synpred133_Java4454);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred133_Java_fragment", 243);
			LeaveRule("synpred133_Java_fragment", 243);
			LeaveRule_synpred133_Java_fragment();
		}
	}
	// $ANTLR end synpred133_Java

	partial void EnterRule_synpred148_Java_fragment();
	partial void LeaveRule_synpred148_Java_fragment();

	// $ANTLR start synpred148_Java
	private void synpred148_Java_fragment()
	{
		EnterRule_synpred148_Java_fragment();
		EnterRule("synpred148_Java_fragment", 258);
		TraceIn("synpred148_Java_fragment", 258);
		try
		{
			// Java.g:876:9: ( expression ';' )
			DebugEnterAlt(1);
			// Java.g:876:9: expression ';'
			{
			DebugLocation(876, 9);
			PushFollow(Follow._expression_in_synpred148_Java4676);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(876, 21);
			Match(input,SEMI,Follow._SEMI_in_synpred148_Java4679); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred148_Java_fragment", 258);
			LeaveRule("synpred148_Java_fragment", 258);
			LeaveRule_synpred148_Java_fragment();
		}
	}
	// $ANTLR end synpred148_Java

	partial void EnterRule_synpred149_Java_fragment();
	partial void LeaveRule_synpred149_Java_fragment();

	// $ANTLR start synpred149_Java
	private void synpred149_Java_fragment()
	{
		EnterRule_synpred149_Java_fragment();
		EnterRule("synpred149_Java_fragment", 259);
		TraceIn("synpred149_Java_fragment", 259);
		try
		{
			// Java.g:877:9: ( IDENTIFIER ':' statement )
			DebugEnterAlt(1);
			// Java.g:877:9: IDENTIFIER ':' statement
			{
			DebugLocation(877, 9);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred149_Java4694); if (state.failed) return;
			DebugLocation(877, 20);
			Match(input,COLON,Follow._COLON_in_synpred149_Java4696); if (state.failed) return;
			DebugLocation(877, 24);
			PushFollow(Follow._statement_in_synpred149_Java4698);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred149_Java_fragment", 259);
			LeaveRule("synpred149_Java_fragment", 259);
			LeaveRule_synpred149_Java_fragment();
		}
	}
	// $ANTLR end synpred149_Java

	partial void EnterRule_synpred153_Java_fragment();
	partial void LeaveRule_synpred153_Java_fragment();

	// $ANTLR start synpred153_Java
	private void synpred153_Java_fragment()
	{
		EnterRule_synpred153_Java_fragment();
		EnterRule("synpred153_Java_fragment", 263);
		TraceIn("synpred153_Java_fragment", 263);
		try
		{
			// Java.g:901:13: ( catches 'finally' block )
			DebugEnterAlt(1);
			// Java.g:901:13: catches 'finally' block
			{
			DebugLocation(901, 13);
			PushFollow(Follow._catches_in_synpred153_Java4854);
			catches();
			PopFollow();
			if (state.failed) return;
			DebugLocation(901, 21);
			Match(input,FINALLY,Follow._FINALLY_in_synpred153_Java4856); if (state.failed) return;
			DebugLocation(901, 31);
			PushFollow(Follow._block_in_synpred153_Java4858);
			block();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred153_Java_fragment", 263);
			LeaveRule("synpred153_Java_fragment", 263);
			LeaveRule_synpred153_Java_fragment();
		}
	}
	// $ANTLR end synpred153_Java

	partial void EnterRule_synpred154_Java_fragment();
	partial void LeaveRule_synpred154_Java_fragment();

	// $ANTLR start synpred154_Java
	private void synpred154_Java_fragment()
	{
		EnterRule_synpred154_Java_fragment();
		EnterRule("synpred154_Java_fragment", 264);
		TraceIn("synpred154_Java_fragment", 264);
		try
		{
			// Java.g:902:13: ( catches )
			DebugEnterAlt(1);
			// Java.g:902:13: catches
			{
			DebugLocation(902, 13);
			PushFollow(Follow._catches_in_synpred154_Java4872);
			catches();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred154_Java_fragment", 264);
			LeaveRule("synpred154_Java_fragment", 264);
			LeaveRule_synpred154_Java_fragment();
		}
	}
	// $ANTLR end synpred154_Java

	partial void EnterRule_synpred157_Java_fragment();
	partial void LeaveRule_synpred157_Java_fragment();

	// $ANTLR start synpred157_Java
	private void synpred157_Java_fragment()
	{
		EnterRule_synpred157_Java_fragment();
		EnterRule("synpred157_Java_fragment", 267);
		TraceIn("synpred157_Java_fragment", 267);
		try
		{
			// Java.g:927:9: ( 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement )
			DebugEnterAlt(1);
			// Java.g:927:9: 'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement
			{
			DebugLocation(927, 9);
			Match(input,FOR,Follow._FOR_in_synpred157_Java5064); if (state.failed) return;
			DebugLocation(927, 15);
			Match(input,LPAREN,Follow._LPAREN_in_synpred157_Java5066); if (state.failed) return;
			DebugLocation(927, 19);
			PushFollow(Follow._variableModifiers_in_synpred157_Java5068);
			variableModifiers();
			PopFollow();
			if (state.failed) return;
			DebugLocation(927, 37);
			PushFollow(Follow._type_in_synpred157_Java5070);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(927, 42);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred157_Java5072); if (state.failed) return;
			DebugLocation(927, 53);
			Match(input,COLON,Follow._COLON_in_synpred157_Java5074); if (state.failed) return;
			DebugLocation(928, 9);
			PushFollow(Follow._expression_in_synpred157_Java5085);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(928, 20);
			Match(input,RPAREN,Follow._RPAREN_in_synpred157_Java5087); if (state.failed) return;
			DebugLocation(928, 24);
			PushFollow(Follow._statement_in_synpred157_Java5089);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred157_Java_fragment", 267);
			LeaveRule("synpred157_Java_fragment", 267);
			LeaveRule_synpred157_Java_fragment();
		}
	}
	// $ANTLR end synpred157_Java

	partial void EnterRule_synpred161_Java_fragment();
	partial void LeaveRule_synpred161_Java_fragment();

	// $ANTLR start synpred161_Java
	private void synpred161_Java_fragment()
	{
		EnterRule_synpred161_Java_fragment();
		EnterRule("synpred161_Java_fragment", 271);
		TraceIn("synpred161_Java_fragment", 271);
		try
		{
			// Java.g:941:9: ( localVariableDeclaration )
			DebugEnterAlt(1);
			// Java.g:941:9: localVariableDeclaration
			{
			DebugLocation(941, 9);
			PushFollow(Follow._localVariableDeclaration_in_synpred161_Java5268);
			localVariableDeclaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred161_Java_fragment", 271);
			LeaveRule("synpred161_Java_fragment", 271);
			LeaveRule_synpred161_Java_fragment();
		}
	}
	// $ANTLR end synpred161_Java

	partial void EnterRule_synpred202_Java_fragment();
	partial void LeaveRule_synpred202_Java_fragment();

	// $ANTLR start synpred202_Java
	private void synpred202_Java_fragment()
	{
		EnterRule_synpred202_Java_fragment();
		EnterRule("synpred202_Java_fragment", 312);
		TraceIn("synpred202_Java_fragment", 312);
		try
		{
			// Java.g:1095:9: ( castExpression )
			DebugEnterAlt(1);
			// Java.g:1095:9: castExpression
			{
			DebugLocation(1095, 9);
			PushFollow(Follow._castExpression_in_synpred202_Java6513);
			castExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred202_Java_fragment", 312);
			LeaveRule("synpred202_Java_fragment", 312);
			LeaveRule_synpred202_Java_fragment();
		}
	}
	// $ANTLR end synpred202_Java

	partial void EnterRule_synpred206_Java_fragment();
	partial void LeaveRule_synpred206_Java_fragment();

	// $ANTLR start synpred206_Java
	private void synpred206_Java_fragment()
	{
		EnterRule_synpred206_Java_fragment();
		EnterRule("synpred206_Java_fragment", 316);
		TraceIn("synpred206_Java_fragment", 316);
		try
		{
			// Java.g:1105:9: ( '(' primitiveType ')' unaryExpression )
			DebugEnterAlt(1);
			// Java.g:1105:9: '(' primitiveType ')' unaryExpression
			{
			DebugLocation(1105, 9);
			Match(input,LPAREN,Follow._LPAREN_in_synpred206_Java6604); if (state.failed) return;
			DebugLocation(1105, 13);
			PushFollow(Follow._primitiveType_in_synpred206_Java6606);
			primitiveType();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1105, 27);
			Match(input,RPAREN,Follow._RPAREN_in_synpred206_Java6608); if (state.failed) return;
			DebugLocation(1105, 31);
			PushFollow(Follow._unaryExpression_in_synpred206_Java6610);
			unaryExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred206_Java_fragment", 316);
			LeaveRule("synpred206_Java_fragment", 316);
			LeaveRule_synpred206_Java_fragment();
		}
	}
	// $ANTLR end synpred206_Java

	partial void EnterRule_synpred208_Java_fragment();
	partial void LeaveRule_synpred208_Java_fragment();

	// $ANTLR start synpred208_Java
	private void synpred208_Java_fragment()
	{
		EnterRule_synpred208_Java_fragment();
		EnterRule("synpred208_Java_fragment", 318);
		TraceIn("synpred208_Java_fragment", 318);
		try
		{
			// Java.g:1115:10: ( '.' IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1115:10: '.' IDENTIFIER
			{
			DebugLocation(1115, 10);
			Match(input,DOT,Follow._DOT_in_synpred208_Java6681); if (state.failed) return;
			DebugLocation(1115, 14);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred208_Java6683); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred208_Java_fragment", 318);
			LeaveRule("synpred208_Java_fragment", 318);
			LeaveRule_synpred208_Java_fragment();
		}
	}
	// $ANTLR end synpred208_Java

	partial void EnterRule_synpred209_Java_fragment();
	partial void LeaveRule_synpred209_Java_fragment();

	// $ANTLR start synpred209_Java
	private void synpred209_Java_fragment()
	{
		EnterRule_synpred209_Java_fragment();
		EnterRule("synpred209_Java_fragment", 319);
		TraceIn("synpred209_Java_fragment", 319);
		try
		{
			// Java.g:1117:10: ( identifierSuffix )
			DebugEnterAlt(1);
			// Java.g:1117:10: identifierSuffix
			{
			DebugLocation(1117, 10);
			PushFollow(Follow._identifierSuffix_in_synpred209_Java6705);
			identifierSuffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred209_Java_fragment", 319);
			LeaveRule("synpred209_Java_fragment", 319);
			LeaveRule_synpred209_Java_fragment();
		}
	}
	// $ANTLR end synpred209_Java

	partial void EnterRule_synpred211_Java_fragment();
	partial void LeaveRule_synpred211_Java_fragment();

	// $ANTLR start synpred211_Java
	private void synpred211_Java_fragment()
	{
		EnterRule_synpred211_Java_fragment();
		EnterRule("synpred211_Java_fragment", 321);
		TraceIn("synpred211_Java_fragment", 321);
		try
		{
			// Java.g:1120:10: ( '.' IDENTIFIER )
			DebugEnterAlt(1);
			// Java.g:1120:10: '.' IDENTIFIER
			{
			DebugLocation(1120, 10);
			Match(input,DOT,Follow._DOT_in_synpred211_Java6737); if (state.failed) return;
			DebugLocation(1120, 14);
			Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred211_Java6739); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred211_Java_fragment", 321);
			LeaveRule("synpred211_Java_fragment", 321);
			LeaveRule_synpred211_Java_fragment();
		}
	}
	// $ANTLR end synpred211_Java

	partial void EnterRule_synpred212_Java_fragment();
	partial void LeaveRule_synpred212_Java_fragment();

	// $ANTLR start synpred212_Java
	private void synpred212_Java_fragment()
	{
		EnterRule_synpred212_Java_fragment();
		EnterRule("synpred212_Java_fragment", 322);
		TraceIn("synpred212_Java_fragment", 322);
		try
		{
			// Java.g:1122:10: ( identifierSuffix )
			DebugEnterAlt(1);
			// Java.g:1122:10: identifierSuffix
			{
			DebugLocation(1122, 10);
			PushFollow(Follow._identifierSuffix_in_synpred212_Java6761);
			identifierSuffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred212_Java_fragment", 322);
			LeaveRule("synpred212_Java_fragment", 322);
			LeaveRule_synpred212_Java_fragment();
		}
	}
	// $ANTLR end synpred212_Java

	partial void EnterRule_synpred224_Java_fragment();
	partial void LeaveRule_synpred224_Java_fragment();

	// $ANTLR start synpred224_Java
	private void synpred224_Java_fragment()
	{
		EnterRule_synpred224_Java_fragment();
		EnterRule("synpred224_Java_fragment", 334);
		TraceIn("synpred224_Java_fragment", 334);
		try
		{
			// Java.g:1150:10: ( '[' expression ']' )
			DebugEnterAlt(1);
			// Java.g:1150:10: '[' expression ']'
			{
			DebugLocation(1150, 10);
			Match(input,LBRACKET,Follow._LBRACKET_in_synpred224_Java7012); if (state.failed) return;
			DebugLocation(1150, 14);
			PushFollow(Follow._expression_in_synpred224_Java7014);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1150, 25);
			Match(input,RBRACKET,Follow._RBRACKET_in_synpred224_Java7016); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred224_Java_fragment", 334);
			LeaveRule("synpred224_Java_fragment", 334);
			LeaveRule_synpred224_Java_fragment();
		}
	}
	// $ANTLR end synpred224_Java

	partial void EnterRule_synpred236_Java_fragment();
	partial void LeaveRule_synpred236_Java_fragment();

	// $ANTLR start synpred236_Java
	private void synpred236_Java_fragment()
	{
		EnterRule_synpred236_Java_fragment();
		EnterRule("synpred236_Java_fragment", 346);
		TraceIn("synpred236_Java_fragment", 346);
		try
		{
			// Java.g:1173:9: ( 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest )
			DebugEnterAlt(1);
			// Java.g:1173:9: 'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest
			{
			DebugLocation(1173, 9);
			Match(input,NEW,Follow._NEW_in_synpred236_Java7225); if (state.failed) return;
			DebugLocation(1173, 15);
			PushFollow(Follow._nonWildcardTypeArguments_in_synpred236_Java7227);
			nonWildcardTypeArguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1173, 40);
			PushFollow(Follow._classOrInterfaceType_in_synpred236_Java7229);
			classOrInterfaceType();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1173, 61);
			PushFollow(Follow._classCreatorRest_in_synpred236_Java7231);
			classCreatorRest();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred236_Java_fragment", 346);
			LeaveRule("synpred236_Java_fragment", 346);
			LeaveRule_synpred236_Java_fragment();
		}
	}
	// $ANTLR end synpred236_Java

	partial void EnterRule_synpred237_Java_fragment();
	partial void LeaveRule_synpred237_Java_fragment();

	// $ANTLR start synpred237_Java
	private void synpred237_Java_fragment()
	{
		EnterRule_synpred237_Java_fragment();
		EnterRule("synpred237_Java_fragment", 347);
		TraceIn("synpred237_Java_fragment", 347);
		try
		{
			// Java.g:1174:9: ( 'new' classOrInterfaceType classCreatorRest )
			DebugEnterAlt(1);
			// Java.g:1174:9: 'new' classOrInterfaceType classCreatorRest
			{
			DebugLocation(1174, 9);
			Match(input,NEW,Follow._NEW_in_synpred237_Java7241); if (state.failed) return;
			DebugLocation(1174, 15);
			PushFollow(Follow._classOrInterfaceType_in_synpred237_Java7243);
			classOrInterfaceType();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1174, 36);
			PushFollow(Follow._classCreatorRest_in_synpred237_Java7245);
			classCreatorRest();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred237_Java_fragment", 347);
			LeaveRule("synpred237_Java_fragment", 347);
			LeaveRule_synpred237_Java_fragment();
		}
	}
	// $ANTLR end synpred237_Java

	partial void EnterRule_synpred239_Java_fragment();
	partial void LeaveRule_synpred239_Java_fragment();

	// $ANTLR start synpred239_Java
	private void synpred239_Java_fragment()
	{
		EnterRule_synpred239_Java_fragment();
		EnterRule("synpred239_Java_fragment", 349);
		TraceIn("synpred239_Java_fragment", 349);
		try
		{
			// Java.g:1179:9: ( 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer )
			DebugEnterAlt(1);
			// Java.g:1179:9: 'new' createdName '[' ']' ( '[' ']' )* arrayInitializer
			{
			DebugLocation(1179, 9);
			Match(input,NEW,Follow._NEW_in_synpred239_Java7275); if (state.failed) return;
			DebugLocation(1179, 15);
			PushFollow(Follow._createdName_in_synpred239_Java7277);
			createdName();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1180, 9);
			Match(input,LBRACKET,Follow._LBRACKET_in_synpred239_Java7287); if (state.failed) return;
			DebugLocation(1180, 13);
			Match(input,RBRACKET,Follow._RBRACKET_in_synpred239_Java7289); if (state.failed) return;
			DebugLocation(1181, 9);
			// Java.g:1181:9: ( '[' ']' )*
			try { DebugEnterSubRule(193);
			while (true)
			{
				int alt193=2;
				try { DebugEnterDecision(193, false);
				int LA193_1 = input.LA(1);

				if ((LA193_1==LBRACKET))
				{
					alt193 = 1;
				}


				} finally { DebugExitDecision(193); }
				switch ( alt193 )
				{
				case 1:
					DebugEnterAlt(1);
					// Java.g:1181:10: '[' ']'
					{
					DebugLocation(1181, 10);
					Match(input,LBRACKET,Follow._LBRACKET_in_synpred239_Java7300); if (state.failed) return;
					DebugLocation(1181, 14);
					Match(input,RBRACKET,Follow._RBRACKET_in_synpred239_Java7302); if (state.failed) return;

					}
					break;

				default:
					goto loop193;
				}
			}

			loop193:
				;

			} finally { DebugExitSubRule(193); }

			DebugLocation(1183, 9);
			PushFollow(Follow._arrayInitializer_in_synpred239_Java7323);
			arrayInitializer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred239_Java_fragment", 349);
			LeaveRule("synpred239_Java_fragment", 349);
			LeaveRule_synpred239_Java_fragment();
		}
	}
	// $ANTLR end synpred239_Java

	partial void EnterRule_synpred240_Java_fragment();
	partial void LeaveRule_synpred240_Java_fragment();

	// $ANTLR start synpred240_Java
	private void synpred240_Java_fragment()
	{
		EnterRule_synpred240_Java_fragment();
		EnterRule("synpred240_Java_fragment", 350);
		TraceIn("synpred240_Java_fragment", 350);
		try
		{
			// Java.g:1188:13: ( '[' expression ']' )
			DebugEnterAlt(1);
			// Java.g:1188:13: '[' expression ']'
			{
			DebugLocation(1188, 13);
			Match(input,LBRACKET,Follow._LBRACKET_in_synpred240_Java7372); if (state.failed) return;
			DebugLocation(1188, 17);
			PushFollow(Follow._expression_in_synpred240_Java7374);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1189, 13);
			Match(input,RBRACKET,Follow._RBRACKET_in_synpred240_Java7388); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred240_Java_fragment", 350);
			LeaveRule("synpred240_Java_fragment", 350);
			LeaveRule_synpred240_Java_fragment();
		}
	}
	// $ANTLR end synpred240_Java
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _annotations_in_compilationUnit160 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _packageDeclaration_in_compilationUnit189 = new BitSet(new ulong[]{0x1200102000800012UL,0x11040C10700600UL});
		public static readonly BitSet _importDeclaration_in_compilationUnit211 = new BitSet(new ulong[]{0x1200102000800012UL,0x11040C10700600UL});
		public static readonly BitSet _typeDeclaration_in_compilationUnit233 = new BitSet(new ulong[]{0x1000102000800012UL,0x11040C10700600UL});
		public static readonly BitSet _PACKAGE_in_packageDeclaration264 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedName_in_packageDeclaration266 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_packageDeclaration276 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORT_in_importDeclaration297 = new BitSet(new ulong[]{0x40000000000000UL,0x400000000UL});
		public static readonly BitSet _STATIC_in_importDeclaration309 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_importDeclaration330 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _DOT_in_importDeclaration332 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _STAR_in_importDeclaration334 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_importDeclaration344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORT_in_importDeclaration361 = new BitSet(new ulong[]{0x40000000000000UL,0x400000000UL});
		public static readonly BitSet _STATIC_in_importDeclaration373 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_importDeclaration394 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _DOT_in_importDeclaration405 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_importDeclaration407 = new BitSet(new ulong[]{0x80000000UL,0x10000000UL});
		public static readonly BitSet _DOT_in_importDeclaration429 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _STAR_in_importDeclaration431 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_importDeclaration452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_qualifiedImportName472 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _DOT_in_qualifiedImportName483 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_qualifiedImportName485 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _classOrInterfaceDeclaration_in_typeDeclaration516 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_typeDeclaration526 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_classOrInterfaceDeclaration547 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDeclaration_in_classOrInterfaceDeclaration557 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_modifiers592 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _PUBLIC_in_modifiers602 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _PROTECTED_in_modifiers612 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _PRIVATE_in_modifiers622 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _STATIC_in_modifiers632 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _ABSTRACT_in_modifiers642 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _FINAL_in_modifiers652 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _NATIVE_in_modifiers662 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _SYNCHRONIZED_in_modifiers672 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _TRANSIENT_in_modifiers682 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _VOLATILE_in_modifiers692 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _STRICTFP_in_modifiers702 = new BitSet(new ulong[]{0x100000000012UL,0x11040C00700600UL});
		public static readonly BitSet _FINAL_in_variableModifiers734 = new BitSet(new ulong[]{0x100000000002UL,0x200UL});
		public static readonly BitSet _annotation_in_variableModifiers748 = new BitSet(new ulong[]{0x100000000002UL,0x200UL});
		public static readonly BitSet _normalClassDeclaration_in_classDeclaration784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumDeclaration_in_classDeclaration794 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_normalClassDeclaration814 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CLASS_in_normalClassDeclaration817 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_normalClassDeclaration819 = new BitSet(new ulong[]{0x100010000000000UL,0x82UL});
		public static readonly BitSet _typeParameters_in_normalClassDeclaration830 = new BitSet(new ulong[]{0x100010000000000UL,0x2UL});
		public static readonly BitSet _EXTENDS_in_normalClassDeclaration852 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_normalClassDeclaration854 = new BitSet(new ulong[]{0x100000000000000UL,0x2UL});
		public static readonly BitSet _IMPLEMENTS_in_normalClassDeclaration876 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _typeList_in_normalClassDeclaration878 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _classBody_in_normalClassDeclaration911 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_typeParameters932 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _typeParameter_in_typeParameters946 = new BitSet(new ulong[]{0x8000002000000UL});
		public static readonly BitSet _COMMA_in_typeParameters961 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _typeParameter_in_typeParameters963 = new BitSet(new ulong[]{0x8000002000000UL});
		public static readonly BitSet _GT_in_typeParameters988 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_typeParameter1008 = new BitSet(new ulong[]{0x10000000002UL});
		public static readonly BitSet _EXTENDS_in_typeParameter1019 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _typeBound_in_typeParameter1021 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_typeBound1053 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _AMP_in_typeBound1064 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_typeBound1066 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _modifiers_in_enumDeclaration1098 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ENUM_in_enumDeclaration1110 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_enumDeclaration1131 = new BitSet(new ulong[]{0x100000000000000UL,0x2UL});
		public static readonly BitSet _IMPLEMENTS_in_enumDeclaration1142 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _typeList_in_enumDeclaration1144 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _enumBody_in_enumDeclaration1165 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_enumBody1190 = new BitSet(new ulong[]{0x40000002000000UL,0x11000200UL});
		public static readonly BitSet _enumConstants_in_enumBody1201 = new BitSet(new ulong[]{0x2000000UL,0x11000000UL});
		public static readonly BitSet _COMMA_in_enumBody1223 = new BitSet(new ulong[]{0x0UL,0x11000000UL});
		public static readonly BitSet _enumBodyDeclarations_in_enumBody1236 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _RBRACE_in_enumBody1258 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumConstant_in_enumConstants1278 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_enumConstants1289 = new BitSet(new ulong[]{0x40000000000000UL,0x200UL});
		public static readonly BitSet _enumConstant_in_enumConstants1291 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _annotations_in_enumConstant1325 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_enumConstant1346 = new BitSet(new ulong[]{0x2UL,0x42UL});
		public static readonly BitSet _arguments_in_enumConstant1357 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _classBody_in_enumConstant1379 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_enumBodyDeclarations1420 = new BitSet(new ulong[]{0x1840502100A14012UL,0x19040C30700692UL});
		public static readonly BitSet _classBodyDeclaration_in_enumBodyDeclarations1432 = new BitSet(new ulong[]{0x1840502100A14012UL,0x19040C30700692UL});
		public static readonly BitSet _normalInterfaceDeclaration_in_interfaceDeclaration1463 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationTypeDeclaration_in_interfaceDeclaration1473 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_normalInterfaceDeclaration1497 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _INTERFACE_in_normalInterfaceDeclaration1499 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_normalInterfaceDeclaration1501 = new BitSet(new ulong[]{0x10000000000UL,0x82UL});
		public static readonly BitSet _typeParameters_in_normalInterfaceDeclaration1512 = new BitSet(new ulong[]{0x10000000000UL,0x2UL});
		public static readonly BitSet _EXTENDS_in_normalInterfaceDeclaration1534 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _typeList_in_normalInterfaceDeclaration1536 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _interfaceBody_in_normalInterfaceDeclaration1557 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_typeList1577 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_typeList1588 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_typeList1590 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _LBRACE_in_classBody1621 = new BitSet(new ulong[]{0x1840502100A14010UL,0x19040C31700692UL});
		public static readonly BitSet _classBodyDeclaration_in_classBody1633 = new BitSet(new ulong[]{0x1840502100A14010UL,0x19040C31700692UL});
		public static readonly BitSet _RBRACE_in_classBody1655 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_interfaceBody1675 = new BitSet(new ulong[]{0x1840502100A14010UL,0x19040C31700690UL});
		public static readonly BitSet _interfaceBodyDeclaration_in_interfaceBody1687 = new BitSet(new ulong[]{0x1840502100A14010UL,0x19040C31700690UL});
		public static readonly BitSet _RBRACE_in_interfaceBody1709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_classBodyDeclaration1729 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STATIC_in_classBodyDeclaration1740 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_classBodyDeclaration1762 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberDecl_in_classBodyDeclaration1772 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fieldDeclaration_in_memberDecl1793 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _methodDeclaration_in_memberDecl1804 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_memberDecl1815 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDeclaration_in_memberDecl1826 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_methodDeclaration1864 = new BitSet(new ulong[]{0x40000000000000UL,0x80UL});
		public static readonly BitSet _typeParameters_in_methodDeclaration1875 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_methodDeclaration1896 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _formalParameters_in_methodDeclaration1906 = new BitSet(new ulong[]{0x0UL,0x400000000002UL});
		public static readonly BitSet _THROWS_in_methodDeclaration1917 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedNameList_in_methodDeclaration1919 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LBRACE_in_methodDeclaration1940 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1EF2UL});
		public static readonly BitSet _explicitConstructorInvocation_in_methodDeclaration1952 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1E72UL});
		public static readonly BitSet _blockStatement_in_methodDeclaration1974 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1E72UL});
		public static readonly BitSet _RBRACE_in_methodDeclaration1995 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_methodDeclaration2005 = new BitSet(new ulong[]{0x840400100214000UL,0x8000020000090UL});
		public static readonly BitSet _typeParameters_in_methodDeclaration2016 = new BitSet(new ulong[]{0x840400100214000UL,0x8000020000010UL});
		public static readonly BitSet _type_in_methodDeclaration2038 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _VOID_in_methodDeclaration2052 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_methodDeclaration2072 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _formalParameters_in_methodDeclaration2082 = new BitSet(new ulong[]{0x0UL,0x400010000006UL});
		public static readonly BitSet _LBRACKET_in_methodDeclaration2093 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_methodDeclaration2095 = new BitSet(new ulong[]{0x0UL,0x400010000006UL});
		public static readonly BitSet _THROWS_in_methodDeclaration2117 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedNameList_in_methodDeclaration2119 = new BitSet(new ulong[]{0x0UL,0x10000002UL});
		public static readonly BitSet _block_in_methodDeclaration2174 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_methodDeclaration2188 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_fieldDeclaration2220 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_fieldDeclaration2230 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _variableDeclarator_in_fieldDeclaration2240 = new BitSet(new ulong[]{0x2000000UL,0x10000000UL});
		public static readonly BitSet _COMMA_in_fieldDeclaration2251 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _variableDeclarator_in_fieldDeclaration2253 = new BitSet(new ulong[]{0x2000000UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_fieldDeclaration2274 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_variableDeclarator2294 = new BitSet(new ulong[]{0x4000000002UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_variableDeclarator2305 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_variableDeclarator2307 = new BitSet(new ulong[]{0x4000000002UL,0x4UL});
		public static readonly BitSet _EQ_in_variableDeclarator2329 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1872UL});
		public static readonly BitSet _variableInitializer_in_variableDeclarator2331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceFieldDeclaration_in_interfaceBodyDeclaration2370 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceMethodDeclaration_in_interfaceBodyDeclaration2380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDeclaration_in_interfaceBodyDeclaration2390 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_interfaceBodyDeclaration2400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_interfaceBodyDeclaration2410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_interfaceMethodDeclaration2430 = new BitSet(new ulong[]{0x840400100214000UL,0x8000020000090UL});
		public static readonly BitSet _typeParameters_in_interfaceMethodDeclaration2441 = new BitSet(new ulong[]{0x840400100214000UL,0x8000020000010UL});
		public static readonly BitSet _type_in_interfaceMethodDeclaration2463 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _VOID_in_interfaceMethodDeclaration2474 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_interfaceMethodDeclaration2494 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _formalParameters_in_interfaceMethodDeclaration2504 = new BitSet(new ulong[]{0x0UL,0x400010000004UL});
		public static readonly BitSet _LBRACKET_in_interfaceMethodDeclaration2515 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_interfaceMethodDeclaration2517 = new BitSet(new ulong[]{0x0UL,0x400010000004UL});
		public static readonly BitSet _THROWS_in_interfaceMethodDeclaration2539 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedNameList_in_interfaceMethodDeclaration2541 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_interfaceMethodDeclaration2554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_interfaceFieldDeclaration2576 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_interfaceFieldDeclaration2578 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _variableDeclarator_in_interfaceFieldDeclaration2580 = new BitSet(new ulong[]{0x2000000UL,0x10000000UL});
		public static readonly BitSet _COMMA_in_interfaceFieldDeclaration2591 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _variableDeclarator_in_interfaceFieldDeclaration2593 = new BitSet(new ulong[]{0x2000000UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_interfaceFieldDeclaration2614 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classOrInterfaceType_in_type2635 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_type2646 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_type2648 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _primitiveType_in_type2669 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_type2680 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_type2682 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _IDENTIFIER_in_classOrInterfaceType2714 = new BitSet(new ulong[]{0x80000002UL,0x80UL});
		public static readonly BitSet _typeArguments_in_classOrInterfaceType2725 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _DOT_in_classOrInterfaceType2747 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_classOrInterfaceType2749 = new BitSet(new ulong[]{0x80000002UL,0x80UL});
		public static readonly BitSet _typeArguments_in_classOrInterfaceType2764 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _LT_in_typeArguments2901 = new BitSet(new ulong[]{0x840400100214000UL,0x20800010UL});
		public static readonly BitSet _typeArgument_in_typeArguments2903 = new BitSet(new ulong[]{0x8000002000000UL});
		public static readonly BitSet _COMMA_in_typeArguments2914 = new BitSet(new ulong[]{0x840400100214000UL,0x20800010UL});
		public static readonly BitSet _typeArgument_in_typeArguments2916 = new BitSet(new ulong[]{0x8000002000000UL});
		public static readonly BitSet _GT_in_typeArguments2938 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_typeArgument2958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _QUES_in_typeArgument2968 = new BitSet(new ulong[]{0x10000000002UL,0x10000000000UL});
		public static readonly BitSet _set_in_typeArgument2992 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_typeArgument3036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qualifiedName_in_qualifiedNameList3067 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_qualifiedNameList3078 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedName_in_qualifiedNameList3080 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _LPAREN_in_formalParameters3111 = new BitSet(new ulong[]{0x840500100214000UL,0x28000210UL});
		public static readonly BitSet _formalParameterDecls_in_formalParameters3122 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_formalParameters3144 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ellipsisParameterDecl_in_formalParameterDecls3164 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalParameterDecl_in_formalParameterDecls3174 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_formalParameterDecls3185 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _normalParameterDecl_in_formalParameterDecls3187 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _normalParameterDecl_in_formalParameterDecls3209 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _COMMA_in_formalParameterDecls3219 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _ellipsisParameterDecl_in_formalParameterDecls3241 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableModifiers_in_normalParameterDecl3261 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_normalParameterDecl3263 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_normalParameterDecl3265 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_normalParameterDecl3276 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_normalParameterDecl3278 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _variableModifiers_in_ellipsisParameterDecl3309 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_ellipsisParameterDecl3319 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ELLIPSIS_in_ellipsisParameterDecl3322 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_ellipsisParameterDecl3332 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_explicitConstructorInvocation3354 = new BitSet(new ulong[]{0x0UL,0x110000000000UL});
		public static readonly BitSet _set_in_explicitConstructorInvocation3380 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _arguments_in_explicitConstructorInvocation3412 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_explicitConstructorInvocation3414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_in_explicitConstructorInvocation3425 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _DOT_in_explicitConstructorInvocation3435 = new BitSet(new ulong[]{0x0UL,0x10000000080UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_explicitConstructorInvocation3446 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _SUPER_in_explicitConstructorInvocation3467 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _arguments_in_explicitConstructorInvocation3477 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_explicitConstructorInvocation3479 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_qualifiedName3499 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _DOT_in_qualifiedName3510 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_qualifiedName3512 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _annotation_in_annotations3544 = new BitSet(new ulong[]{0x2UL,0x200UL});
		public static readonly BitSet _MONKEYS_AT_in_annotation3577 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedName_in_annotation3579 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _LPAREN_in_annotation3593 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0280A1A72UL});
		public static readonly BitSet _elementValuePairs_in_annotation3620 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _elementValue_in_annotation3644 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_annotation3680 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _elementValuePair_in_elementValuePairs3712 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_elementValuePairs3723 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _elementValuePair_in_elementValuePairs3725 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _IDENTIFIER_in_elementValuePair3756 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_elementValuePair3758 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1A72UL});
		public static readonly BitSet _elementValue_in_elementValuePair3760 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpression_in_elementValue3780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotation_in_elementValue3790 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _elementValueArrayInitializer_in_elementValue3800 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_elementValueArrayInitializer3820 = new BitSet(new ulong[]{0x2840C80302614200UL,0xA91B0210A1A72UL});
		public static readonly BitSet _elementValue_in_elementValueArrayInitializer3831 = new BitSet(new ulong[]{0x2000000UL,0x1000000UL});
		public static readonly BitSet _COMMA_in_elementValueArrayInitializer3846 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1A72UL});
		public static readonly BitSet _elementValue_in_elementValueArrayInitializer3848 = new BitSet(new ulong[]{0x2000000UL,0x1000000UL});
		public static readonly BitSet _COMMA_in_elementValueArrayInitializer3877 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _RBRACE_in_elementValueArrayInitializer3881 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_annotationTypeDeclaration3904 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _MONKEYS_AT_in_annotationTypeDeclaration3906 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _INTERFACE_in_annotationTypeDeclaration3916 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_annotationTypeDeclaration3926 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _annotationTypeBody_in_annotationTypeDeclaration3936 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_annotationTypeBody3957 = new BitSet(new ulong[]{0x1840502100A14010UL,0x11040C31700610UL});
		public static readonly BitSet _annotationTypeElementDeclaration_in_annotationTypeBody3969 = new BitSet(new ulong[]{0x1840502100A14010UL,0x11040C31700610UL});
		public static readonly BitSet _RBRACE_in_annotationTypeBody3991 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationMethodDeclaration_in_annotationTypeElementDeclaration4013 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceFieldDeclaration_in_annotationTypeElementDeclaration4023 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalClassDeclaration_in_annotationTypeElementDeclaration4033 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalInterfaceDeclaration_in_annotationTypeElementDeclaration4043 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumDeclaration_in_annotationTypeElementDeclaration4053 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationTypeDeclaration_in_annotationTypeElementDeclaration4063 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_annotationTypeElementDeclaration4073 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_annotationMethodDeclaration4093 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_annotationMethodDeclaration4095 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_annotationMethodDeclaration4097 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_annotationMethodDeclaration4107 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_annotationMethodDeclaration4109 = new BitSet(new ulong[]{0x20000000UL,0x10000000UL});
		public static readonly BitSet _DEFAULT_in_annotationMethodDeclaration4112 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1A72UL});
		public static readonly BitSet _elementValue_in_annotationMethodDeclaration4114 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_annotationMethodDeclaration4143 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_block4167 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1E72UL});
		public static readonly BitSet _blockStatement_in_block4178 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1E72UL});
		public static readonly BitSet _RBRACE_in_block4199 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclarationStatement_in_blockStatement4221 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classOrInterfaceDeclaration_in_blockStatement4231 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_blockStatement4241 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_localVariableDeclarationStatement4262 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_localVariableDeclarationStatement4272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableModifiers_in_localVariableDeclaration4292 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_localVariableDeclaration4294 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _variableDeclarator_in_localVariableDeclaration4304 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_localVariableDeclaration4315 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _variableDeclarator_in_localVariableDeclaration4317 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _block_in_statement4348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSERT_in_statement4372 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_statement4392 = new BitSet(new ulong[]{0x1000000UL,0x10000000UL});
		public static readonly BitSet _COLON_in_statement4395 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_statement4397 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4401 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSERT_in_statement4411 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_statement4414 = new BitSet(new ulong[]{0x1000000UL,0x10000000UL});
		public static readonly BitSet _COLON_in_statement4417 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_statement4419 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_statement4445 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _parExpression_in_statement4447 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_statement4449 = new BitSet(new ulong[]{0x1000000002UL});
		public static readonly BitSet _ELSE_in_statement4452 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_statement4454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forstatement_in_statement4476 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHILE_in_statement4486 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _parExpression_in_statement4488 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_statement4490 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DO_in_statement4500 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_statement4502 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _WHILE_in_statement4504 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _parExpression_in_statement4506 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4508 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _trystatement_in_statement4518 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SWITCH_in_statement4528 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _parExpression_in_statement4530 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LBRACE_in_statement4532 = new BitSet(new ulong[]{0x20080000UL,0x1000000UL});
		public static readonly BitSet _switchBlockStatementGroups_in_statement4534 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _RBRACE_in_statement4536 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYNCHRONIZED_in_statement4546 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _parExpression_in_statement4548 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_statement4550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RETURN_in_statement4560 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0300A1870UL});
		public static readonly BitSet _expression_in_statement4563 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4568 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THROW_in_statement4578 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_statement4580 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4582 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BREAK_in_statement4592 = new BitSet(new ulong[]{0x40000000000000UL,0x10000000UL});
		public static readonly BitSet _IDENTIFIER_in_statement4607 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4624 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONTINUE_in_statement4634 = new BitSet(new ulong[]{0x40000000000000UL,0x10000000UL});
		public static readonly BitSet _IDENTIFIER_in_statement4649 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4666 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_statement4676 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_statement4679 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_statement4694 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_statement4696 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_statement4698 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_statement4708 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchBlockStatementGroup_in_switchBlockStatementGroups4730 = new BitSet(new ulong[]{0x20080002UL});
		public static readonly BitSet _switchLabel_in_switchBlockStatementGroup4759 = new BitSet(new ulong[]{0x38C1D82350E1C312UL,0x3FB7BC347A1E72UL});
		public static readonly BitSet _blockStatement_in_switchBlockStatementGroup4770 = new BitSet(new ulong[]{0x38C1D82350E1C312UL,0x3FB7BC347A1E72UL});
		public static readonly BitSet _CASE_in_switchLabel4801 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_switchLabel4803 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_switchLabel4805 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEFAULT_in_switchLabel4815 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_switchLabel4817 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRY_in_trystatement4838 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_trystatement4840 = new BitSet(new ulong[]{0x200000100000UL});
		public static readonly BitSet _catches_in_trystatement4854 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _FINALLY_in_trystatement4856 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_trystatement4858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catches_in_trystatement4872 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FINALLY_in_trystatement4886 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_trystatement4888 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catchClause_in_catches4919 = new BitSet(new ulong[]{0x100002UL});
		public static readonly BitSet _catchClause_in_catches4930 = new BitSet(new ulong[]{0x100002UL});
		public static readonly BitSet _CATCH_in_catchClause4961 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_catchClause4963 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _formalParameter_in_catchClause4965 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_catchClause4975 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_catchClause4977 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableModifiers_in_formalParameter4998 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_formalParameter5000 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_formalParameter5002 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_formalParameter5013 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_formalParameter5015 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _FOR_in_forstatement5064 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_forstatement5066 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _variableModifiers_in_forstatement5068 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_forstatement5070 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_forstatement5072 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_forstatement5074 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_forstatement5085 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_forstatement5087 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_forstatement5089 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOR_in_forstatement5121 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_forstatement5123 = new BitSet(new ulong[]{0x2840D80300614200UL,0xA91B0300A1A70UL});
		public static readonly BitSet _forInit_in_forstatement5143 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_forstatement5164 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0300A1870UL});
		public static readonly BitSet _expression_in_forstatement5184 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_forstatement5205 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0280A1870UL});
		public static readonly BitSet _expressionList_in_forstatement5225 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_forstatement5246 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_forstatement5248 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_forInit5268 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionList_in_forInit5278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_parExpression5298 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_parExpression5300 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_parExpression5302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionList5322 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_expressionList5333 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_expressionList5335 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _conditionalExpression_in_expression5367 = new BitSet(new ulong[]{0x8004000042082UL,0x4280050080UL});
		public static readonly BitSet _assignmentOperator_in_expression5378 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_expression5380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EQ_in_assignmentOperator5412 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUSEQ_in_assignmentOperator5422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUBEQ_in_assignmentOperator5432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STAREQ_in_assignmentOperator5442 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SLASHEQ_in_assignmentOperator5452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _AMPEQ_in_assignmentOperator5462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BAREQ_in_assignmentOperator5472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CARETEQ_in_assignmentOperator5482 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PERCENTEQ_in_assignmentOperator5492 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_assignmentOperator5503 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LT_in_assignmentOperator5505 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_assignmentOperator5507 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_assignmentOperator5518 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_assignmentOperator5520 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_assignmentOperator5522 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_assignmentOperator5524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_assignmentOperator5535 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_assignmentOperator5537 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_assignmentOperator5539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalOrExpression_in_conditionalExpression5560 = new BitSet(new ulong[]{0x2UL,0x800000UL});
		public static readonly BitSet _QUES_in_conditionalExpression5571 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_conditionalExpression5573 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_conditionalExpression5575 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _conditionalExpression_in_conditionalExpression5577 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalAndExpression_in_conditionalOrExpression5608 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _BARBAR_in_conditionalOrExpression5619 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _conditionalAndExpression_in_conditionalOrExpression5621 = new BitSet(new ulong[]{0x1002UL});
		public static readonly BitSet _inclusiveOrExpression_in_conditionalAndExpression5652 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _AMPAMP_in_conditionalAndExpression5663 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _inclusiveOrExpression_in_conditionalAndExpression5665 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression5696 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _BAR_in_inclusiveOrExpression5707 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _exclusiveOrExpression_in_inclusiveOrExpression5709 = new BitSet(new ulong[]{0x802UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression5740 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _CARET_in_exclusiveOrExpression5751 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _andExpression_in_exclusiveOrExpression5753 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _equalityExpression_in_andExpression5784 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _AMP_in_andExpression5795 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _equalityExpression_in_andExpression5797 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _instanceOfExpression_in_equalityExpression5828 = new BitSet(new ulong[]{0x8000000402UL});
		public static readonly BitSet _set_in_equalityExpression5855 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _instanceOfExpression_in_equalityExpression5905 = new BitSet(new ulong[]{0x8000000402UL});
		public static readonly BitSet _relationalExpression_in_instanceOfExpression5936 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _INSTANCEOF_in_instanceOfExpression5947 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_instanceOfExpression5949 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression5980 = new BitSet(new ulong[]{0x8000000000002UL,0x80UL});
		public static readonly BitSet _relationalOp_in_relationalExpression5991 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression5993 = new BitSet(new ulong[]{0x8000000000002UL,0x80UL});
		public static readonly BitSet _LT_in_relationalOp6025 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_relationalOp6027 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_relationalOp6038 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _EQ_in_relationalOp6040 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_relationalOp6050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_relationalOp6060 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression6080 = new BitSet(new ulong[]{0x8000000000002UL,0x80UL});
		public static readonly BitSet _shiftOp_in_shiftExpression6091 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression6093 = new BitSet(new ulong[]{0x8000000000002UL,0x80UL});
		public static readonly BitSet _LT_in_shiftOp6126 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _LT_in_shiftOp6128 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_shiftOp6139 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_shiftOp6141 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_shiftOp6143 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_shiftOp6154 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_shiftOp6156 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression6177 = new BitSet(new ulong[]{0x2UL,0x2000020000UL});
		public static readonly BitSet _set_in_additiveExpression6204 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression6254 = new BitSet(new ulong[]{0x2UL,0x2000020000UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression6292 = new BitSet(new ulong[]{0x2UL,0x140008000UL});
		public static readonly BitSet _set_in_multiplicativeExpression6319 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression6387 = new BitSet(new ulong[]{0x2UL,0x140008000UL});
		public static readonly BitSet _PLUS_in_unaryExpression6420 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression6423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUB_in_unaryExpression6433 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression6435 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUSPLUS_in_unaryExpression6445 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression6447 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUBSUB_in_unaryExpression6457 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression6459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExpressionNotPlusMinus_in_unaryExpression6469 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TILDE_in_unaryExpressionNotPlusMinus6489 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_unaryExpressionNotPlusMinus6491 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BANG_in_unaryExpressionNotPlusMinus6501 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_unaryExpressionNotPlusMinus6503 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _castExpression_in_unaryExpressionNotPlusMinus6513 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_in_unaryExpressionNotPlusMinus6523 = new BitSet(new ulong[]{0x80000002UL,0x8000080004UL});
		public static readonly BitSet _selector_in_unaryExpressionNotPlusMinus6534 = new BitSet(new ulong[]{0x80000002UL,0x8000080004UL});
		public static readonly BitSet _LPAREN_in_castExpression6604 = new BitSet(new ulong[]{0x800400100214000UL,0x20000010UL});
		public static readonly BitSet _primitiveType_in_castExpression6606 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_castExpression6608 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_castExpression6610 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_castExpression6620 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_castExpression6622 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_castExpression6624 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA911020001870UL});
		public static readonly BitSet _unaryExpressionNotPlusMinus_in_castExpression6626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parExpression_in_primary6648 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _THIS_in_primary6670 = new BitSet(new ulong[]{0x80000002UL,0x44UL});
		public static readonly BitSet _DOT_in_primary6681 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_primary6683 = new BitSet(new ulong[]{0x80000002UL,0x44UL});
		public static readonly BitSet _identifierSuffix_in_primary6705 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_primary6726 = new BitSet(new ulong[]{0x80000002UL,0x44UL});
		public static readonly BitSet _DOT_in_primary6737 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_primary6739 = new BitSet(new ulong[]{0x80000002UL,0x44UL});
		public static readonly BitSet _identifierSuffix_in_primary6761 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SUPER_in_primary6782 = new BitSet(new ulong[]{0x80000000UL,0x40UL});
		public static readonly BitSet _superSuffix_in_primary6792 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_primary6802 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _creator_in_primary6812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_primary6822 = new BitSet(new ulong[]{0x80000000UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_primary6833 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_primary6835 = new BitSet(new ulong[]{0x80000000UL,0x4UL});
		public static readonly BitSet _DOT_in_primary6856 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CLASS_in_primary6858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VOID_in_primary6868 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _DOT_in_primary6870 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CLASS_in_primary6872 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_superSuffix6898 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_superSuffix6908 = new BitSet(new ulong[]{0x40000000000000UL,0x80UL});
		public static readonly BitSet _typeArguments_in_superSuffix6911 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_superSuffix6932 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _arguments_in_superSuffix6943 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_identifierSuffix6976 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_identifierSuffix6978 = new BitSet(new ulong[]{0x80000000UL,0x4UL});
		public static readonly BitSet _DOT_in_identifierSuffix6999 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CLASS_in_identifierSuffix7001 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_identifierSuffix7012 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_identifierSuffix7014 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_identifierSuffix7016 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _arguments_in_identifierSuffix7037 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_identifierSuffix7047 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CLASS_in_identifierSuffix7049 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_identifierSuffix7059 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_identifierSuffix7061 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_identifierSuffix7063 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _arguments_in_identifierSuffix7065 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_identifierSuffix7075 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _THIS_in_identifierSuffix7077 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_identifierSuffix7087 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _SUPER_in_identifierSuffix7089 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _arguments_in_identifierSuffix7091 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerCreator_in_identifierSuffix7101 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_selector7123 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_selector7125 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _arguments_in_selector7136 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_selector7157 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _THIS_in_selector7159 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_selector7169 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _SUPER_in_selector7171 = new BitSet(new ulong[]{0x80000000UL,0x40UL});
		public static readonly BitSet _superSuffix_in_selector7181 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _innerCreator_in_selector7191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_selector7201 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_selector7203 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_selector7205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_creator7225 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_creator7227 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _classOrInterfaceType_in_creator7229 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _classCreatorRest_in_creator7231 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_creator7241 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _classOrInterfaceType_in_creator7243 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _classCreatorRest_in_creator7245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayCreator_in_creator7255 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_arrayCreator7275 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _createdName_in_arrayCreator7277 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7287 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7289 = new BitSet(new ulong[]{0x0UL,0x6UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7300 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7302 = new BitSet(new ulong[]{0x0UL,0x6UL});
		public static readonly BitSet _arrayInitializer_in_arrayCreator7323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_arrayCreator7334 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _createdName_in_arrayCreator7336 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7346 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_arrayCreator7348 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7358 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7372 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_arrayCreator7374 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7388 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_arrayCreator7410 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_arrayCreator7412 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _arrayInitializer_in_variableInitializer7443 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_variableInitializer7453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACE_in_arrayInitializer7473 = new BitSet(new ulong[]{0x2840C80302614200UL,0xA91B0210A1872UL});
		public static readonly BitSet _variableInitializer_in_arrayInitializer7489 = new BitSet(new ulong[]{0x2000000UL,0x1000000UL});
		public static readonly BitSet _COMMA_in_arrayInitializer7508 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1872UL});
		public static readonly BitSet _variableInitializer_in_arrayInitializer7510 = new BitSet(new ulong[]{0x2000000UL,0x1000000UL});
		public static readonly BitSet _COMMA_in_arrayInitializer7560 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _RBRACE_in_arrayInitializer7573 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classOrInterfaceType_in_createdName7607 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primitiveType_in_createdName7617 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_innerCreator7638 = new BitSet(new ulong[]{0x0UL,0x800UL});
		public static readonly BitSet _NEW_in_innerCreator7640 = new BitSet(new ulong[]{0x40000000000000UL,0x80UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_innerCreator7651 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_innerCreator7672 = new BitSet(new ulong[]{0x0UL,0xC0UL});
		public static readonly BitSet _typeArguments_in_innerCreator7683 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _classCreatorRest_in_innerCreator7704 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_classCreatorRest7725 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _classBody_in_classCreatorRest7736 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LT_in_nonWildcardTypeArguments7768 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _typeList_in_nonWildcardTypeArguments7770 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _GT_in_nonWildcardTypeArguments7780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_arguments7800 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0280A1870UL});
		public static readonly BitSet _expressionList_in_arguments7803 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_arguments7816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_classHeader7940 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CLASS_in_classHeader7942 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_classHeader7944 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_enumHeader7964 = new BitSet(new ulong[]{0x40002000000000UL});
		public static readonly BitSet _set_in_enumHeader7966 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_enumHeader7972 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_interfaceHeader7992 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _INTERFACE_in_interfaceHeader7994 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_interfaceHeader7996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_annotationHeader8016 = new BitSet(new ulong[]{0x0UL,0x200UL});
		public static readonly BitSet _MONKEYS_AT_in_annotationHeader8018 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _INTERFACE_in_annotationHeader8020 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_annotationHeader8022 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_typeHeader8042 = new BitSet(new ulong[]{0x1000002000800000UL,0x200UL});
		public static readonly BitSet _CLASS_in_typeHeader8045 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _ENUM_in_typeHeader8047 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _MONKEYS_AT_in_typeHeader8050 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _INTERFACE_in_typeHeader8054 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_typeHeader8058 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_methodHeader8078 = new BitSet(new ulong[]{0x840400100214000UL,0x8000020000090UL});
		public static readonly BitSet _typeParameters_in_methodHeader8080 = new BitSet(new ulong[]{0x840400100214000UL,0x8000020000010UL});
		public static readonly BitSet _type_in_methodHeader8084 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _VOID_in_methodHeader8086 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_methodHeader8090 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_methodHeader8092 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_fieldHeader8112 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_fieldHeader8114 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_fieldHeader8116 = new BitSet(new ulong[]{0x4002000000UL,0x10000004UL});
		public static readonly BitSet _LBRACKET_in_fieldHeader8119 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_fieldHeader8120 = new BitSet(new ulong[]{0x4002000000UL,0x10000004UL});
		public static readonly BitSet _set_in_fieldHeader8124 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableModifiers_in_localVariableHeader8150 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_localVariableHeader8152 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_localVariableHeader8154 = new BitSet(new ulong[]{0x4002000000UL,0x10000004UL});
		public static readonly BitSet _LBRACKET_in_localVariableHeader8157 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_localVariableHeader8158 = new BitSet(new ulong[]{0x4002000000UL,0x10000004UL});
		public static readonly BitSet _set_in_localVariableHeader8162 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotations_in_synpred2_Java160 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _packageDeclaration_in_synpred2_Java189 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_synpred12_Java547 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalClassDeclaration_in_synpred27_Java784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalInterfaceDeclaration_in_synpred43_Java1463 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fieldDeclaration_in_synpred52_Java1793 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _methodDeclaration_in_synpred53_Java1804 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_synpred54_Java1815 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _explicitConstructorInvocation_in_synpred57_Java1952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifiers_in_synpred59_Java1864 = new BitSet(new ulong[]{0x40000000000000UL,0x80UL});
		public static readonly BitSet _typeParameters_in_synpred59_Java1875 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_synpred59_Java1896 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _formalParameters_in_synpred59_Java1906 = new BitSet(new ulong[]{0x0UL,0x400000000002UL});
		public static readonly BitSet _THROWS_in_synpred59_Java1917 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _qualifiedNameList_in_synpred59_Java1919 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _LBRACE_in_synpred59_Java1940 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1EF2UL});
		public static readonly BitSet _explicitConstructorInvocation_in_synpred59_Java1952 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1E72UL});
		public static readonly BitSet _blockStatement_in_synpred59_Java1974 = new BitSet(new ulong[]{0x38C1D82350E1C310UL,0x3FB7BC357A1E72UL});
		public static readonly BitSet _RBRACE_in_synpred59_Java1995 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceFieldDeclaration_in_synpred68_Java2370 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceMethodDeclaration_in_synpred69_Java2380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDeclaration_in_synpred70_Java2390 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDeclaration_in_synpred71_Java2400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ellipsisParameterDecl_in_synpred96_Java3164 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalParameterDecl_in_synpred98_Java3174 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _COMMA_in_synpred98_Java3185 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _normalParameterDecl_in_synpred98_Java3187 = new BitSet(new ulong[]{0x2000002UL});
		public static readonly BitSet _normalParameterDecl_in_synpred99_Java3209 = new BitSet(new ulong[]{0x2000000UL});
		public static readonly BitSet _COMMA_in_synpred99_Java3219 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_synpred103_Java3354 = new BitSet(new ulong[]{0x0UL,0x110000000000UL});
		public static readonly BitSet _set_in_synpred103_Java3380 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _arguments_in_synpred103_Java3412 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_synpred103_Java3414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationMethodDeclaration_in_synpred117_Java4013 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceFieldDeclaration_in_synpred118_Java4023 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalClassDeclaration_in_synpred119_Java4033 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _normalInterfaceDeclaration_in_synpred120_Java4043 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumDeclaration_in_synpred121_Java4053 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _annotationTypeDeclaration_in_synpred122_Java4063 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclarationStatement_in_synpred125_Java4221 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classOrInterfaceDeclaration_in_synpred126_Java4231 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSERT_in_synpred130_Java4372 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred130_Java4392 = new BitSet(new ulong[]{0x1000000UL,0x10000000UL});
		public static readonly BitSet _COLON_in_synpred130_Java4395 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred130_Java4397 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_synpred130_Java4401 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASSERT_in_synpred132_Java4411 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred132_Java4414 = new BitSet(new ulong[]{0x1000000UL,0x10000000UL});
		public static readonly BitSet _COLON_in_synpred132_Java4417 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred132_Java4419 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_synpred132_Java4423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_synpred133_Java4452 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_synpred133_Java4454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_synpred148_Java4676 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _SEMI_in_synpred148_Java4679 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_synpred149_Java4694 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_synpred149_Java4696 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_synpred149_Java4698 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catches_in_synpred153_Java4854 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _FINALLY_in_synpred153_Java4856 = new BitSet(new ulong[]{0x0UL,0x2UL});
		public static readonly BitSet _block_in_synpred153_Java4858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _catches_in_synpred154_Java4872 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FOR_in_synpred157_Java5064 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _LPAREN_in_synpred157_Java5066 = new BitSet(new ulong[]{0x840500100214000UL,0x20000210UL});
		public static readonly BitSet _variableModifiers_in_synpred157_Java5068 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _type_in_synpred157_Java5070 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_synpred157_Java5072 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _COLON_in_synpred157_Java5074 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred157_Java5085 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_synpred157_Java5087 = new BitSet(new ulong[]{0x28C1C8035061C300UL,0x2EB7B0340A1872UL});
		public static readonly BitSet _statement_in_synpred157_Java5089 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localVariableDeclaration_in_synpred161_Java5268 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _castExpression_in_synpred202_Java6513 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_synpred206_Java6604 = new BitSet(new ulong[]{0x800400100214000UL,0x20000010UL});
		public static readonly BitSet _primitiveType_in_synpred206_Java6606 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _RPAREN_in_synpred206_Java6608 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _unaryExpression_in_synpred206_Java6610 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred208_Java6681 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_synpred208_Java6683 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifierSuffix_in_synpred209_Java6705 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_synpred211_Java6737 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_synpred211_Java6739 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifierSuffix_in_synpred212_Java6761 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_synpred224_Java7012 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred224_Java7014 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_synpred224_Java7016 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_synpred236_Java7225 = new BitSet(new ulong[]{0x0UL,0x80UL});
		public static readonly BitSet _nonWildcardTypeArguments_in_synpred236_Java7227 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _classOrInterfaceType_in_synpred236_Java7229 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _classCreatorRest_in_synpred236_Java7231 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_synpred237_Java7241 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _classOrInterfaceType_in_synpred237_Java7243 = new BitSet(new ulong[]{0x0UL,0x40UL});
		public static readonly BitSet _classCreatorRest_in_synpred237_Java7245 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEW_in_synpred239_Java7275 = new BitSet(new ulong[]{0x840400100214000UL,0x20000010UL});
		public static readonly BitSet _createdName_in_synpred239_Java7277 = new BitSet(new ulong[]{0x0UL,0x4UL});
		public static readonly BitSet _LBRACKET_in_synpred239_Java7287 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_synpred239_Java7289 = new BitSet(new ulong[]{0x0UL,0x6UL});
		public static readonly BitSet _LBRACKET_in_synpred239_Java7300 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_synpred239_Java7302 = new BitSet(new ulong[]{0x0UL,0x6UL});
		public static readonly BitSet _arrayInitializer_in_synpred239_Java7323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_synpred240_Java7372 = new BitSet(new ulong[]{0x2840C80300614200UL,0xA91B0200A1870UL});
		public static readonly BitSet _expression_in_synpred240_Java7374 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _RBRACKET_in_synpred240_Java7388 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  Code2Xml.Languages.ANTLRv3 
