//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 Php.g 2013-10-04 16:49:15

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019

 using Code2Xml.Core.Antlr; 

using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  Code2Xml.Languages.ANTLRv3.Processors.Php 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
 public  partial class PhpParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Abstract", "AccessModifier", "Ampersand", "And", "Apply", "Array", "ArrayAssign", "AsignmentOperator", "Asterisk", "Bang", "Block", "BodyString", "BodyStringRest", "BodyStringRestShortTag", "Boolean", "Break", "Case", "Cast", "Class", "ClassDefinition", "ClassMember", "Clone", "CloseCurlyBracket", "CloseRoundBracket", "CloseSquareBracket", "Colon", "Comma", "ComparisionOperator", "Const", "Continue", "DNum", "Decimal", "Default", "Digits", "Do", "Dollar", "Dot", "DoubleQuotedString", "Echo", "Else", "ElseIf", "Empty", "Eol", "EqualityOperator", "Equals", "EscapeCharector", "Exponent_DNum", "Extends", "Field", "For", "ForCondition", "ForInit", "ForUpdate", "Foreach", "Forwardslash", "Function", "Global", "HereDoc", "HereDocContents", "Hexadecimal", "If", "IfExpression", "Implements", "IncrementOperator", "InstanceMember", "Instanceof", "Integer", "Interface", "Label", "List", "LogicalAnd", "LogicalOr", "Member", "Method", "Minus", "Modifiers", "MultilineComment", "New", "Octal", "OpenCurlyBracket", "OpenRoundBracket", "OpenSquareBracket", "Or", "Params", "Percent", "Pipe", "Plus", "Postfix", "Prefix", "PrimitiveType", "QuestionMark", "Real", "Reference", "RequireOperator", "Return", "SemiColon", "ShiftOperator", "SingleQuotedString", "SinglelineComment", "Static", "SuppressWarnings", "Switch", "Tilde", "UnixComment", "UnquotedString", "Var", "While", "WhiteSpace", "Xor", "'as'"
	};
	public const int EOF=-1;
	public const int Abstract=4;
	public const int AccessModifier=5;
	public const int Ampersand=6;
	public const int And=7;
	public const int Apply=8;
	public const int Array=9;
	public const int ArrayAssign=10;
	public const int AsignmentOperator=11;
	public const int Asterisk=12;
	public const int Bang=13;
	public const int Block=14;
	public const int BodyString=15;
	public const int BodyStringRest=16;
	public const int BodyStringRestShortTag=17;
	public const int Boolean=18;
	public const int Break=19;
	public const int Case=20;
	public const int Cast=21;
	public const int Class=22;
	public const int ClassDefinition=23;
	public const int ClassMember=24;
	public const int Clone=25;
	public const int CloseCurlyBracket=26;
	public const int CloseRoundBracket=27;
	public const int CloseSquareBracket=28;
	public const int Colon=29;
	public const int Comma=30;
	public const int ComparisionOperator=31;
	public const int Const=32;
	public const int Continue=33;
	public const int DNum=34;
	public const int Decimal=35;
	public const int Default=36;
	public const int Digits=37;
	public const int Do=38;
	public const int Dollar=39;
	public const int Dot=40;
	public const int DoubleQuotedString=41;
	public const int Echo=42;
	public const int Else=43;
	public const int ElseIf=44;
	public const int Empty=45;
	public const int Eol=46;
	public const int EqualityOperator=47;
	public const int Equals=48;
	public const int EscapeCharector=49;
	public const int Exponent_DNum=50;
	public const int Extends=51;
	public const int Field=52;
	public const int For=53;
	public const int ForCondition=54;
	public const int ForInit=55;
	public const int ForUpdate=56;
	public const int Foreach=57;
	public const int Forwardslash=58;
	public const int Function=59;
	public const int Global=60;
	public const int HereDoc=61;
	public const int HereDocContents=62;
	public const int Hexadecimal=63;
	public const int If=64;
	public const int IfExpression=65;
	public const int Implements=66;
	public const int IncrementOperator=67;
	public const int InstanceMember=68;
	public const int Instanceof=69;
	public const int Integer=70;
	public const int Interface=71;
	public const int Label=72;
	public const int List=73;
	public const int LogicalAnd=74;
	public const int LogicalOr=75;
	public const int Member=76;
	public const int Method=77;
	public const int Minus=78;
	public const int Modifiers=79;
	public const int MultilineComment=80;
	public const int New=81;
	public const int Octal=82;
	public const int OpenCurlyBracket=83;
	public const int OpenRoundBracket=84;
	public const int OpenSquareBracket=85;
	public const int Or=86;
	public const int Params=87;
	public const int Percent=88;
	public const int Pipe=89;
	public const int Plus=90;
	public const int Postfix=91;
	public const int Prefix=92;
	public const int PrimitiveType=93;
	public const int QuestionMark=94;
	public const int Real=95;
	public const int Reference=96;
	public const int RequireOperator=97;
	public const int Return=98;
	public const int SemiColon=99;
	public const int ShiftOperator=100;
	public const int SingleQuotedString=101;
	public const int SinglelineComment=102;
	public const int Static=103;
	public const int SuppressWarnings=104;
	public const int Switch=105;
	public const int Tilde=106;
	public const int UnixComment=107;
	public const int UnquotedString=108;
	public const int Var=109;
	public const int While=110;
	public const int WhiteSpace=111;
	public const int Xor=112;
	public const int T__113=113;

	 public  PhpParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	 public  PhpParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[177+1];


		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return PhpParser.tokenNames; } }
	public override string GrammarFileName { get { return "Php.g"; } }


	    private bool expressionFollowsBodyString = false;


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_prog();
	partial void LeaveRule_prog();
	// $ANTLR start "prog"
	// Php.g:168:1: public prog : ( statement )* ;
	[GrammarRule("prog")]
	public AstParserRuleReturnScope<object, IToken> prog()
	{
		EnterRule_prog();
		EnterRule("prog", 1);
		TraceIn("prog", 1);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int prog_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> statement1 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "prog");
		DebugLocation(168, 17);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// Php.g:168:6: ( ( statement )* )
			DebugEnterAlt(1);
			// Php.g:168:8: ( statement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(168, 8);
			// Php.g:168:8: ( statement )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if ((LA1_1==Abstract||LA1_1==Ampersand||LA1_1==Array||LA1_1==Bang||LA1_1==BodyString||(LA1_1>=Boolean && LA1_1<=Break)||LA1_1==Class||LA1_1==Clone||LA1_1==Continue||(LA1_1>=Do && LA1_1<=Dollar)||(LA1_1>=DoubleQuotedString && LA1_1<=Echo)||LA1_1==For||LA1_1==Foreach||(LA1_1>=Function && LA1_1<=HereDoc)||LA1_1==If||LA1_1==IncrementOperator||(LA1_1>=Integer && LA1_1<=Interface)||LA1_1==List||LA1_1==Minus||LA1_1==New||(LA1_1>=OpenCurlyBracket && LA1_1<=OpenRoundBracket)||LA1_1==Real||(LA1_1>=RequireOperator && LA1_1<=Return)||LA1_1==SingleQuotedString||(LA1_1>=Static && LA1_1<=Tilde)||LA1_1==UnquotedString||LA1_1==While))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:168:8: statement
					{
					DebugLocation(168, 8);
					PushFollow(Follow._statement_in_prog922);
					statement1=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement1.Tree);

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prog", 1);
			LeaveRule("prog", 1);
			LeaveRule_prog();
			if (state.backtracking > 0) { Memoize(input, 1, prog_StartIndex); }

		}
		DebugLocation(168, 17);
		} finally { DebugExitRule(GrammarFileName, "prog"); }
		return retval;

	}
	// $ANTLR end "prog"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// Php.g:170:1: statement : ({...}? => printExpr ';' !| ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString | '{' statement '}' -> statement | bracketedBlock | classDefinition | interfaceDefinition | complexStatement | simpleStatement ';' !);
	[GrammarRule("statement")]
	private AstParserRuleReturnScope<object, IToken> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 2);
		TraceIn("statement", 2);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal3 = default(IToken);
		IToken BodyString6 = default(IToken);
		IToken char_literal7 = default(IToken);
		IToken char_literal9 = default(IToken);
		IToken char_literal15 = default(IToken);
		AstParserRuleReturnScope<object, IToken> printExpr2 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> printExpr4 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> simpleStatement5 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement8 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bracketedBlock10 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classDefinition11 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> interfaceDefinition12 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> complexStatement13 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> simpleStatement14 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal3_tree = default(object);
		object BodyString6_tree = default(object);
		object char_literal7_tree = default(object);
		object char_literal9_tree = default(object);
		object char_literal15_tree = default(object);
		RewriteRuleITokenStream stream_OpenCurlyBracket=new RewriteRuleITokenStream(adaptor,"token OpenCurlyBracket");
		RewriteRuleITokenStream stream_CloseCurlyBracket=new RewriteRuleITokenStream(adaptor,"token CloseCurlyBracket");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(170, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// Php.g:171:5: ({...}? => printExpr ';' !| ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString | '{' statement '}' -> statement | bracketedBlock | classDefinition | interfaceDefinition | complexStatement | simpleStatement ';' !)
			int alt5=8;
			try { DebugEnterDecision(5, false);
			try
			{
				alt5 = dfa5.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:171:7: {...}? => printExpr ';' !
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(171, 7);
				if (!((expressionFollowsBodyString)))
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					throw new FailedPredicateException(input, "statement", "expressionFollowsBodyString");
				}
				DebugLocation(171, 40);
				if (state.backtracking == 0)
				{
					expressionFollowsBodyString=false;
				}
				DebugLocation(171, 77);
				PushFollow(Follow._printExpr_in_statement940);
				printExpr2=printExpr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, printExpr2.Tree);
				DebugLocation(171, 90);
				char_literal3=(IToken)Match(input,SemiColon,Follow._SemiColon_in_statement942); if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:172:7: ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(172, 7);
				// Php.g:172:7: ({...}? => ( printExpr )? | ( simpleStatement )? )
				int alt4=2;
				try { DebugEnterSubRule(4);
				try { DebugEnterDecision(4, false);
				try
				{
					alt4 = dfa4.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:172:8: {...}? => ( printExpr )?
					{
					DebugLocation(172, 8);
					if (!((expressionFollowsBodyString)))
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "statement", "expressionFollowsBodyString");
					}
					DebugLocation(172, 42);
					if (state.backtracking == 0)
					{
						expressionFollowsBodyString=false;
					}
					DebugLocation(172, 79);
					// Php.g:172:79: ( printExpr )?
					int alt2=2;
					try { DebugEnterSubRule(2);
					try { DebugEnterDecision(2, false);
					int LA2_1 = input.LA(1);

					if ((LA2_1==Ampersand||LA2_1==Array||LA2_1==Bang||LA2_1==Boolean||LA2_1==Clone||LA2_1==Dollar||LA2_1==DoubleQuotedString||LA2_1==HereDoc||LA2_1==IncrementOperator||LA2_1==Integer||LA2_1==List||LA2_1==Minus||LA2_1==New||LA2_1==OpenRoundBracket||LA2_1==Real||LA2_1==SingleQuotedString||LA2_1==SuppressWarnings||LA2_1==Tilde||LA2_1==UnquotedString))
					{
						alt2 = 1;
					}
					} finally { DebugExitDecision(2); }
					switch (alt2)
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:172:79: printExpr
						{
						DebugLocation(172, 79);
						PushFollow(Follow._printExpr_in_statement958);
						printExpr4=printExpr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, printExpr4.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(2); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Php.g:172:92: ( simpleStatement )?
					{
					DebugLocation(172, 92);
					// Php.g:172:92: ( simpleStatement )?
					int alt3=2;
					try { DebugEnterSubRule(3);
					try { DebugEnterDecision(3, false);
					int LA3_1 = input.LA(1);

					if ((LA3_1==Ampersand||LA3_1==Array||LA3_1==Bang||(LA3_1>=Boolean && LA3_1<=Break)||LA3_1==Clone||LA3_1==Continue||LA3_1==Dollar||(LA3_1>=DoubleQuotedString && LA3_1<=Echo)||(LA3_1>=Global && LA3_1<=HereDoc)||LA3_1==IncrementOperator||LA3_1==Integer||LA3_1==List||LA3_1==Minus||LA3_1==New||LA3_1==OpenRoundBracket||LA3_1==Real||(LA3_1>=RequireOperator && LA3_1<=Return)||LA3_1==SingleQuotedString||(LA3_1>=Static && LA3_1<=SuppressWarnings)||LA3_1==Tilde||LA3_1==UnquotedString))
					{
						alt3 = 1;
					}
					} finally { DebugExitDecision(3); }
					switch (alt3)
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:172:92: simpleStatement
						{
						DebugLocation(172, 92);
						PushFollow(Follow._simpleStatement_in_statement963);
						simpleStatement5=simpleStatement();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, simpleStatement5.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(3); }


					}
					break;

				}
				} finally { DebugExitSubRule(4); }

				DebugLocation(172, 110);
				BodyString6=(IToken)Match(input,BodyString,Follow._BodyString_in_statement967); if (state.failed) return retval;
				if (state.backtracking == 0) {
				BodyString6_tree = (object)adaptor.Create(BodyString6);
				adaptor.AddChild(root_0, BodyString6_tree);
				}
				DebugLocation(172, 121);
				if (state.backtracking == 0)
				{
					expressionFollowsBodyString = (BodyString6!=null?BodyString6.Text:default(string)).endsWith("<?=");
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Php.g:173:7: '{' statement '}'
				{
				DebugLocation(173, 7);
				char_literal7=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_statement977); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OpenCurlyBracket.Add(char_literal7);

				DebugLocation(173, 11);
				PushFollow(Follow._statement_in_statement979);
				statement8=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statement.Add(statement8.Tree);
				DebugLocation(173, 21);
				char_literal9=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_statement981); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CloseCurlyBracket.Add(char_literal9);



				{
				// AST REWRITE
				// elements: statement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 173:25: -> statement
				{
					DebugLocation(173, 28);
					adaptor.AddChild(root_0, stream_statement.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Php.g:174:7: bracketedBlock
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(174, 7);
				PushFollow(Follow._bracketedBlock_in_statement993);
				bracketedBlock10=bracketedBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, bracketedBlock10.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Php.g:176:7: classDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(176, 7);
				PushFollow(Follow._classDefinition_in_statement1006);
				classDefinition11=classDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classDefinition11.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Php.g:177:7: interfaceDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(177, 7);
				PushFollow(Follow._interfaceDefinition_in_statement1014);
				interfaceDefinition12=interfaceDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interfaceDefinition12.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Php.g:178:7: complexStatement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(178, 7);
				PushFollow(Follow._complexStatement_in_statement1022);
				complexStatement13=complexStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, complexStatement13.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Php.g:179:7: simpleStatement ';' !
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(179, 7);
				PushFollow(Follow._simpleStatement_in_statement1030);
				simpleStatement14=simpleStatement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, simpleStatement14.Tree);
				DebugLocation(179, 26);
				char_literal15=(IToken)Match(input,SemiColon,Follow._SemiColon_in_statement1032); if (state.failed) return retval;

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 2);
			LeaveRule("statement", 2);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 2, statement_StartIndex); }

		}
		DebugLocation(180, 4);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_printExpr();
	partial void LeaveRule_printExpr();
	// $ANTLR start "printExpr"
	// Php.g:182:1: printExpr : expression -> ^( Echo expression ) ;
	[GrammarRule("printExpr")]
	private AstParserRuleReturnScope<object, IToken> printExpr()
	{
		EnterRule_printExpr();
		EnterRule("printExpr", 3);
		TraceIn("printExpr", 3);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int printExpr_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> expression16 = default(AstParserRuleReturnScope<object, IToken>);

		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "printExpr");
		DebugLocation(182, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// Php.g:183:5: ( expression -> ^( Echo expression ) )
			DebugEnterAlt(1);
			// Php.g:183:7: expression
			{
			DebugLocation(183, 7);
			PushFollow(Follow._expression_in_printExpr1050);
			expression16=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression16.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 183:18: -> ^( Echo expression )
			{
				DebugLocation(183, 21);
				// Php.g:183:21: ^( Echo expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(183, 23);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(Echo, "Echo"), root_1);

				DebugLocation(183, 28);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("printExpr", 3);
			LeaveRule("printExpr", 3);
			LeaveRule_printExpr();
			if (state.backtracking > 0) { Memoize(input, 3, printExpr_StartIndex); }

		}
		DebugLocation(184, 4);
		} finally { DebugExitRule(GrammarFileName, "printExpr"); }
		return retval;

	}
	// $ANTLR end "printExpr"

	partial void EnterRule_bracketedBlock();
	partial void LeaveRule_bracketedBlock();
	// $ANTLR start "bracketedBlock"
	// Php.g:186:1: bracketedBlock : '{' (stmts= statement )* '}' -> ^( Block $stmts) ;
	[GrammarRule("bracketedBlock")]
	private AstParserRuleReturnScope<object, IToken> bracketedBlock()
	{
		EnterRule_bracketedBlock();
		EnterRule("bracketedBlock", 4);
		TraceIn("bracketedBlock", 4);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bracketedBlock_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal17 = default(IToken);
		IToken char_literal18 = default(IToken);
		AstParserRuleReturnScope<object, IToken> stmts = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal17_tree = default(object);
		object char_literal18_tree = default(object);
		RewriteRuleITokenStream stream_OpenCurlyBracket=new RewriteRuleITokenStream(adaptor,"token OpenCurlyBracket");
		RewriteRuleITokenStream stream_CloseCurlyBracket=new RewriteRuleITokenStream(adaptor,"token CloseCurlyBracket");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		try { DebugEnterRule(GrammarFileName, "bracketedBlock");
		DebugLocation(186, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// Php.g:187:5: ( '{' (stmts= statement )* '}' -> ^( Block $stmts) )
			DebugEnterAlt(1);
			// Php.g:187:7: '{' (stmts= statement )* '}'
			{
			DebugLocation(187, 7);
			char_literal17=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_bracketedBlock1075); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OpenCurlyBracket.Add(char_literal17);

			DebugLocation(187, 16);
			// Php.g:187:16: (stmts= statement )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==Abstract||LA6_1==Ampersand||LA6_1==Array||LA6_1==Bang||LA6_1==BodyString||(LA6_1>=Boolean && LA6_1<=Break)||LA6_1==Class||LA6_1==Clone||LA6_1==Continue||(LA6_1>=Do && LA6_1<=Dollar)||(LA6_1>=DoubleQuotedString && LA6_1<=Echo)||LA6_1==For||LA6_1==Foreach||(LA6_1>=Function && LA6_1<=HereDoc)||LA6_1==If||LA6_1==IncrementOperator||(LA6_1>=Integer && LA6_1<=Interface)||LA6_1==List||LA6_1==Minus||LA6_1==New||(LA6_1>=OpenCurlyBracket && LA6_1<=OpenRoundBracket)||LA6_1==Real||(LA6_1>=RequireOperator && LA6_1<=Return)||LA6_1==SingleQuotedString||(LA6_1>=Static && LA6_1<=Tilde)||LA6_1==UnquotedString||LA6_1==While))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:187:16: stmts= statement
					{
					DebugLocation(187, 16);
					PushFollow(Follow._statement_in_bracketedBlock1079);
					stmts=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_statement.Add(stmts.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(187, 28);
			char_literal18=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_bracketedBlock1082); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CloseCurlyBracket.Add(char_literal18);



			{
			// AST REWRITE
			// elements: stmts
			// token labels: 
			// rule labels: stmts, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_stmts=new RewriteRuleSubtreeStream(adaptor,"rule stmts",stmts!=null?stmts.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 187:32: -> ^( Block $stmts)
			{
				DebugLocation(187, 35);
				// Php.g:187:35: ^( Block $stmts)
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(187, 37);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(Block, "Block"), root_1);

				DebugLocation(187, 44);
				adaptor.AddChild(root_1, stream_stmts.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bracketedBlock", 4);
			LeaveRule("bracketedBlock", 4);
			LeaveRule_bracketedBlock();
			if (state.backtracking > 0) { Memoize(input, 4, bracketedBlock_StartIndex); }

		}
		DebugLocation(188, 4);
		} finally { DebugExitRule(GrammarFileName, "bracketedBlock"); }
		return retval;

	}
	// $ANTLR end "bracketedBlock"

	partial void EnterRule_interfaceDefinition();
	partial void LeaveRule_interfaceDefinition();
	// $ANTLR start "interfaceDefinition"
	// Php.g:190:1: interfaceDefinition : Interface interfaceName= UnquotedString ( interfaceExtends )? OpenCurlyBracket ( interfaceMember )* CloseCurlyBracket -> ^( Interface $interfaceName ( interfaceExtends )? ( interfaceMember )* ) ;
	[GrammarRule("interfaceDefinition")]
	private AstParserRuleReturnScope<object, IToken> interfaceDefinition()
	{
		EnterRule_interfaceDefinition();
		EnterRule("interfaceDefinition", 5);
		TraceIn("interfaceDefinition", 5);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken interfaceName = default(IToken);
		IToken Interface19 = default(IToken);
		IToken OpenCurlyBracket21 = default(IToken);
		IToken CloseCurlyBracket23 = default(IToken);
		AstParserRuleReturnScope<object, IToken> interfaceExtends20 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> interfaceMember22 = default(AstParserRuleReturnScope<object, IToken>);

		object interfaceName_tree = default(object);
		object Interface19_tree = default(object);
		object OpenCurlyBracket21_tree = default(object);
		object CloseCurlyBracket23_tree = default(object);
		RewriteRuleITokenStream stream_Interface=new RewriteRuleITokenStream(adaptor,"token Interface");
		RewriteRuleITokenStream stream_UnquotedString=new RewriteRuleITokenStream(adaptor,"token UnquotedString");
		RewriteRuleITokenStream stream_OpenCurlyBracket=new RewriteRuleITokenStream(adaptor,"token OpenCurlyBracket");
		RewriteRuleITokenStream stream_CloseCurlyBracket=new RewriteRuleITokenStream(adaptor,"token CloseCurlyBracket");
		RewriteRuleSubtreeStream stream_interfaceExtends=new RewriteRuleSubtreeStream(adaptor,"rule interfaceExtends");
		RewriteRuleSubtreeStream stream_interfaceMember=new RewriteRuleSubtreeStream(adaptor,"rule interfaceMember");
		try { DebugEnterRule(GrammarFileName, "interfaceDefinition");
		DebugLocation(190, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// Php.g:191:5: ( Interface interfaceName= UnquotedString ( interfaceExtends )? OpenCurlyBracket ( interfaceMember )* CloseCurlyBracket -> ^( Interface $interfaceName ( interfaceExtends )? ( interfaceMember )* ) )
			DebugEnterAlt(1);
			// Php.g:191:7: Interface interfaceName= UnquotedString ( interfaceExtends )? OpenCurlyBracket ( interfaceMember )* CloseCurlyBracket
			{
			DebugLocation(191, 7);
			Interface19=(IToken)Match(input,Interface,Follow._Interface_in_interfaceDefinition1108); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_Interface.Add(Interface19);

			DebugLocation(191, 30);
			interfaceName=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_interfaceDefinition1112); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_UnquotedString.Add(interfaceName);

			DebugLocation(191, 46);
			// Php.g:191:46: ( interfaceExtends )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_1 = input.LA(1);

			if ((LA7_1==Extends))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:191:46: interfaceExtends
				{
				DebugLocation(191, 46);
				PushFollow(Follow._interfaceExtends_in_interfaceDefinition1114);
				interfaceExtends20=interfaceExtends();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_interfaceExtends.Add(interfaceExtends20.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(192, 9);
			OpenCurlyBracket21=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_interfaceDefinition1125); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OpenCurlyBracket.Add(OpenCurlyBracket21);

			DebugLocation(193, 9);
			// Php.g:193:9: ( interfaceMember )*
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if (((LA8_1>=Abstract && LA8_1<=AccessModifier)||LA8_1==Const||LA8_1==Function||LA8_1==Static))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch ( alt8 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:193:9: interfaceMember
					{
					DebugLocation(193, 9);
					PushFollow(Follow._interfaceMember_in_interfaceDefinition1135);
					interfaceMember22=interfaceMember();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_interfaceMember.Add(interfaceMember22.Tree);

					}
					break;

				default:
					goto loop8;
				}
			}

			loop8:
				;

			} finally { DebugExitSubRule(8); }

			DebugLocation(194, 9);
			CloseCurlyBracket23=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_interfaceDefinition1146); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CloseCurlyBracket.Add(CloseCurlyBracket23);



			{
			// AST REWRITE
			// elements: Interface, interfaceName, interfaceExtends, interfaceMember
			// token labels: interfaceName
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_interfaceName=new RewriteRuleITokenStream(adaptor,"token interfaceName",interfaceName);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 195:9: -> ^( Interface $interfaceName ( interfaceExtends )? ( interfaceMember )* )
			{
				DebugLocation(195, 12);
				// Php.g:195:12: ^( Interface $interfaceName ( interfaceExtends )? ( interfaceMember )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(195, 14);
				root_1 = (object)adaptor.BecomeRoot(stream_Interface.NextNode(), root_1);

				DebugLocation(195, 25);
				adaptor.AddChild(root_1, stream_interfaceName.NextNode());
				DebugLocation(195, 39);
				// Php.g:195:39: ( interfaceExtends )?
				if (stream_interfaceExtends.HasNext)
				{
					DebugLocation(195, 39);
					adaptor.AddChild(root_1, stream_interfaceExtends.NextTree());

				}
				stream_interfaceExtends.Reset();
				DebugLocation(195, 57);
				// Php.g:195:57: ( interfaceMember )*
				while ( stream_interfaceMember.HasNext )
				{
					DebugLocation(195, 57);
					adaptor.AddChild(root_1, stream_interfaceMember.NextTree());

				}
				stream_interfaceMember.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceDefinition", 5);
			LeaveRule("interfaceDefinition", 5);
			LeaveRule_interfaceDefinition();
			if (state.backtracking > 0) { Memoize(input, 5, interfaceDefinition_StartIndex); }

		}
		DebugLocation(196, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceDefinition"); }
		return retval;

	}
	// $ANTLR end "interfaceDefinition"

	partial void EnterRule_interfaceExtends();
	partial void LeaveRule_interfaceExtends();
	// $ANTLR start "interfaceExtends"
	// Php.g:198:1: interfaceExtends : Extends ^ UnquotedString ( Comma ! UnquotedString )* ;
	[GrammarRule("interfaceExtends")]
	private AstParserRuleReturnScope<object, IToken> interfaceExtends()
	{
		EnterRule_interfaceExtends();
		EnterRule("interfaceExtends", 6);
		TraceIn("interfaceExtends", 6);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceExtends_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Extends24 = default(IToken);
		IToken UnquotedString25 = default(IToken);
		IToken Comma26 = default(IToken);
		IToken UnquotedString27 = default(IToken);

		object Extends24_tree = default(object);
		object UnquotedString25_tree = default(object);
		object Comma26_tree = default(object);
		object UnquotedString27_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interfaceExtends");
		DebugLocation(198, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// Php.g:199:5: ( Extends ^ UnquotedString ( Comma ! UnquotedString )* )
			DebugEnterAlt(1);
			// Php.g:199:7: Extends ^ UnquotedString ( Comma ! UnquotedString )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(199, 14);
			Extends24=(IToken)Match(input,Extends,Follow._Extends_in_interfaceExtends1186); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Extends24_tree = (object)adaptor.Create(Extends24);
			root_0 = (object)adaptor.BecomeRoot(Extends24_tree, root_0);
			}
			DebugLocation(199, 16);
			UnquotedString25=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_interfaceExtends1189); if (state.failed) return retval;
			if (state.backtracking == 0) {
			UnquotedString25_tree = (object)adaptor.Create(UnquotedString25);
			adaptor.AddChild(root_0, UnquotedString25_tree);
			}
			DebugLocation(199, 31);
			// Php.g:199:31: ( Comma ! UnquotedString )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==Comma))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:199:32: Comma ! UnquotedString
					{
					DebugLocation(199, 37);
					Comma26=(IToken)Match(input,Comma,Follow._Comma_in_interfaceExtends1192); if (state.failed) return retval;
					DebugLocation(199, 39);
					UnquotedString27=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_interfaceExtends1195); if (state.failed) return retval;
					if (state.backtracking == 0) {
					UnquotedString27_tree = (object)adaptor.Create(UnquotedString27);
					adaptor.AddChild(root_0, UnquotedString27_tree);
					}

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceExtends", 6);
			LeaveRule("interfaceExtends", 6);
			LeaveRule_interfaceExtends();
			if (state.backtracking > 0) { Memoize(input, 6, interfaceExtends_StartIndex); }

		}
		DebugLocation(200, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceExtends"); }
		return retval;

	}
	// $ANTLR end "interfaceExtends"

	partial void EnterRule_interfaceMember();
	partial void LeaveRule_interfaceMember();
	// $ANTLR start "interfaceMember"
	// Php.g:201:1: interfaceMember : ( Const UnquotedString ( Equals atom )? ';' -> ^( Const UnquotedString ( atom )? ) | ( fieldModifier )* Function UnquotedString parametersDefinition ';' -> ^( Method ^( Modifiers ( fieldModifier )* ) UnquotedString parametersDefinition ) );
	[GrammarRule("interfaceMember")]
	private AstParserRuleReturnScope<object, IToken> interfaceMember()
	{
		EnterRule_interfaceMember();
		EnterRule("interfaceMember", 7);
		TraceIn("interfaceMember", 7);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int interfaceMember_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Const28 = default(IToken);
		IToken UnquotedString29 = default(IToken);
		IToken Equals30 = default(IToken);
		IToken char_literal32 = default(IToken);
		IToken Function34 = default(IToken);
		IToken UnquotedString35 = default(IToken);
		IToken char_literal37 = default(IToken);
		AstParserRuleReturnScope<object, IToken> atom31 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> fieldModifier33 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> parametersDefinition36 = default(AstParserRuleReturnScope<object, IToken>);

		object Const28_tree = default(object);
		object UnquotedString29_tree = default(object);
		object Equals30_tree = default(object);
		object char_literal32_tree = default(object);
		object Function34_tree = default(object);
		object UnquotedString35_tree = default(object);
		object char_literal37_tree = default(object);
		RewriteRuleITokenStream stream_Const=new RewriteRuleITokenStream(adaptor,"token Const");
		RewriteRuleITokenStream stream_UnquotedString=new RewriteRuleITokenStream(adaptor,"token UnquotedString");
		RewriteRuleITokenStream stream_Equals=new RewriteRuleITokenStream(adaptor,"token Equals");
		RewriteRuleITokenStream stream_SemiColon=new RewriteRuleITokenStream(adaptor,"token SemiColon");
		RewriteRuleITokenStream stream_Function=new RewriteRuleITokenStream(adaptor,"token Function");
		RewriteRuleSubtreeStream stream_atom=new RewriteRuleSubtreeStream(adaptor,"rule atom");
		RewriteRuleSubtreeStream stream_fieldModifier=new RewriteRuleSubtreeStream(adaptor,"rule fieldModifier");
		RewriteRuleSubtreeStream stream_parametersDefinition=new RewriteRuleSubtreeStream(adaptor,"rule parametersDefinition");
		try { DebugEnterRule(GrammarFileName, "interfaceMember");
		DebugLocation(201, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// Php.g:202:5: ( Const UnquotedString ( Equals atom )? ';' -> ^( Const UnquotedString ( atom )? ) | ( fieldModifier )* Function UnquotedString parametersDefinition ';' -> ^( Method ^( Modifiers ( fieldModifier )* ) UnquotedString parametersDefinition ) )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==Const))
			{
				alt12 = 1;
			}
			else if (((LA12_1>=Abstract && LA12_1<=AccessModifier)||LA12_1==Function||LA12_1==Static))
			{
				alt12 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:202:7: Const UnquotedString ( Equals atom )? ';'
				{
				DebugLocation(202, 7);
				Const28=(IToken)Match(input,Const,Follow._Const_in_interfaceMember1213); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Const.Add(Const28);

				DebugLocation(202, 13);
				UnquotedString29=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_interfaceMember1215); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_UnquotedString.Add(UnquotedString29);

				DebugLocation(202, 28);
				// Php.g:202:28: ( Equals atom )?
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==Equals))
				{
					alt10 = 1;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:202:29: Equals atom
					{
					DebugLocation(202, 29);
					Equals30=(IToken)Match(input,Equals,Follow._Equals_in_interfaceMember1218); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_Equals.Add(Equals30);

					DebugLocation(202, 36);
					PushFollow(Follow._atom_in_interfaceMember1220);
					atom31=atom();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_atom.Add(atom31.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(10); }

				DebugLocation(202, 43);
				char_literal32=(IToken)Match(input,SemiColon,Follow._SemiColon_in_interfaceMember1224); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SemiColon.Add(char_literal32);



				{
				// AST REWRITE
				// elements: Const, UnquotedString, atom
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 203:9: -> ^( Const UnquotedString ( atom )? )
				{
					DebugLocation(203, 12);
					// Php.g:203:12: ^( Const UnquotedString ( atom )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(203, 14);
					root_1 = (object)adaptor.BecomeRoot(stream_Const.NextNode(), root_1);

					DebugLocation(203, 20);
					adaptor.AddChild(root_1, stream_UnquotedString.NextNode());
					DebugLocation(203, 35);
					// Php.g:203:35: ( atom )?
					if (stream_atom.HasNext)
					{
						DebugLocation(203, 35);
						adaptor.AddChild(root_1, stream_atom.NextTree());

					}
					stream_atom.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:204:7: ( fieldModifier )* Function UnquotedString parametersDefinition ';'
				{
				DebugLocation(204, 7);
				// Php.g:204:7: ( fieldModifier )*
				try { DebugEnterSubRule(11);
				while (true)
				{
					int alt11=2;
					try { DebugEnterDecision(11, false);
					int LA11_1 = input.LA(1);

					if (((LA11_1>=Abstract && LA11_1<=AccessModifier)||LA11_1==Static))
					{
						alt11 = 1;
					}


					} finally { DebugExitDecision(11); }
					switch ( alt11 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:204:7: fieldModifier
						{
						DebugLocation(204, 7);
						PushFollow(Follow._fieldModifier_in_interfaceMember1252);
						fieldModifier33=fieldModifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_fieldModifier.Add(fieldModifier33.Tree);

						}
						break;

					default:
						goto loop11;
					}
				}

				loop11:
					;

				} finally { DebugExitSubRule(11); }

				DebugLocation(204, 22);
				Function34=(IToken)Match(input,Function,Follow._Function_in_interfaceMember1255); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Function.Add(Function34);

				DebugLocation(204, 31);
				UnquotedString35=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_interfaceMember1257); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_UnquotedString.Add(UnquotedString35);

				DebugLocation(204, 46);
				PushFollow(Follow._parametersDefinition_in_interfaceMember1259);
				parametersDefinition36=parametersDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_parametersDefinition.Add(parametersDefinition36.Tree);
				DebugLocation(204, 67);
				char_literal37=(IToken)Match(input,SemiColon,Follow._SemiColon_in_interfaceMember1261); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SemiColon.Add(char_literal37);



				{
				// AST REWRITE
				// elements: fieldModifier, UnquotedString, parametersDefinition
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 205:9: -> ^( Method ^( Modifiers ( fieldModifier )* ) UnquotedString parametersDefinition )
				{
					DebugLocation(205, 12);
					// Php.g:205:12: ^( Method ^( Modifiers ( fieldModifier )* ) UnquotedString parametersDefinition )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(205, 14);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(Method, "Method"), root_1);

					DebugLocation(205, 21);
					// Php.g:205:21: ^( Modifiers ( fieldModifier )* )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(205, 23);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(Modifiers, "Modifiers"), root_2);

					DebugLocation(205, 33);
					// Php.g:205:33: ( fieldModifier )*
					while ( stream_fieldModifier.HasNext )
					{
						DebugLocation(205, 33);
						adaptor.AddChild(root_2, stream_fieldModifier.NextTree());

					}
					stream_fieldModifier.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(205, 49);
					adaptor.AddChild(root_1, stream_UnquotedString.NextNode());
					DebugLocation(205, 64);
					adaptor.AddChild(root_1, stream_parametersDefinition.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interfaceMember", 7);
			LeaveRule("interfaceMember", 7);
			LeaveRule_interfaceMember();
			if (state.backtracking > 0) { Memoize(input, 7, interfaceMember_StartIndex); }

		}
		DebugLocation(206, 4);
		} finally { DebugExitRule(GrammarFileName, "interfaceMember"); }
		return retval;

	}
	// $ANTLR end "interfaceMember"

	partial void EnterRule_classDefinition();
	partial void LeaveRule_classDefinition();
	// $ANTLR start "classDefinition"
	// Php.g:208:1: classDefinition : ( classModifier )? Class className= UnquotedString ( Extends extendsclass= UnquotedString )? ( classImplements )? OpenCurlyBracket ( classMember )* CloseCurlyBracket -> ^( Class ^( Modifiers ( classModifier )? ) $className ( ^( Extends $extendsclass) )? ( classImplements )? ( classMember )* ) ;
	[GrammarRule("classDefinition")]
	private AstParserRuleReturnScope<object, IToken> classDefinition()
	{
		EnterRule_classDefinition();
		EnterRule("classDefinition", 8);
		TraceIn("classDefinition", 8);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken className = default(IToken);
		IToken extendsclass = default(IToken);
		IToken Class39 = default(IToken);
		IToken Extends40 = default(IToken);
		IToken OpenCurlyBracket42 = default(IToken);
		IToken CloseCurlyBracket44 = default(IToken);
		AstParserRuleReturnScope<object, IToken> classModifier38 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classImplements41 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> classMember43 = default(AstParserRuleReturnScope<object, IToken>);

		object className_tree = default(object);
		object extendsclass_tree = default(object);
		object Class39_tree = default(object);
		object Extends40_tree = default(object);
		object OpenCurlyBracket42_tree = default(object);
		object CloseCurlyBracket44_tree = default(object);
		RewriteRuleITokenStream stream_Class=new RewriteRuleITokenStream(adaptor,"token Class");
		RewriteRuleITokenStream stream_UnquotedString=new RewriteRuleITokenStream(adaptor,"token UnquotedString");
		RewriteRuleITokenStream stream_Extends=new RewriteRuleITokenStream(adaptor,"token Extends");
		RewriteRuleITokenStream stream_OpenCurlyBracket=new RewriteRuleITokenStream(adaptor,"token OpenCurlyBracket");
		RewriteRuleITokenStream stream_CloseCurlyBracket=new RewriteRuleITokenStream(adaptor,"token CloseCurlyBracket");
		RewriteRuleSubtreeStream stream_classModifier=new RewriteRuleSubtreeStream(adaptor,"rule classModifier");
		RewriteRuleSubtreeStream stream_classImplements=new RewriteRuleSubtreeStream(adaptor,"rule classImplements");
		RewriteRuleSubtreeStream stream_classMember=new RewriteRuleSubtreeStream(adaptor,"rule classMember");
		try { DebugEnterRule(GrammarFileName, "classDefinition");
		DebugLocation(208, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// Php.g:209:5: ( ( classModifier )? Class className= UnquotedString ( Extends extendsclass= UnquotedString )? ( classImplements )? OpenCurlyBracket ( classMember )* CloseCurlyBracket -> ^( Class ^( Modifiers ( classModifier )? ) $className ( ^( Extends $extendsclass) )? ( classImplements )? ( classMember )* ) )
			DebugEnterAlt(1);
			// Php.g:209:9: ( classModifier )? Class className= UnquotedString ( Extends extendsclass= UnquotedString )? ( classImplements )? OpenCurlyBracket ( classMember )* CloseCurlyBracket
			{
			DebugLocation(209, 9);
			// Php.g:209:9: ( classModifier )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==Abstract))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:209:9: classModifier
				{
				DebugLocation(209, 9);
				PushFollow(Follow._classModifier_in_classDefinition1305);
				classModifier38=classModifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_classModifier.Add(classModifier38.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(210, 9);
			Class39=(IToken)Match(input,Class,Follow._Class_in_classDefinition1317); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_Class.Add(Class39);

			DebugLocation(210, 24);
			className=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_classDefinition1321); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_UnquotedString.Add(className);

			DebugLocation(211, 9);
			// Php.g:211:9: ( Extends extendsclass= UnquotedString )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_1 = input.LA(1);

			if ((LA14_1==Extends))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:211:10: Extends extendsclass= UnquotedString
				{
				DebugLocation(211, 10);
				Extends40=(IToken)Match(input,Extends,Follow._Extends_in_classDefinition1333); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Extends.Add(Extends40);

				DebugLocation(211, 30);
				extendsclass=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_classDefinition1337); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_UnquotedString.Add(extendsclass);


				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(212, 9);
			// Php.g:212:9: ( classImplements )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==Implements))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:212:9: classImplements
				{
				DebugLocation(212, 9);
				PushFollow(Follow._classImplements_in_classDefinition1350);
				classImplements41=classImplements();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_classImplements.Add(classImplements41.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(213, 9);
			OpenCurlyBracket42=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_classDefinition1361); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OpenCurlyBracket.Add(OpenCurlyBracket42);

			DebugLocation(214, 9);
			// Php.g:214:9: ( classMember )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if (((LA16_1>=Abstract && LA16_1<=AccessModifier)||LA16_1==Const||LA16_1==Dollar||LA16_1==Function||LA16_1==Static||LA16_1==Var))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:214:9: classMember
					{
					DebugLocation(214, 9);
					PushFollow(Follow._classMember_in_classDefinition1371);
					classMember43=classMember();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_classMember.Add(classMember43.Tree);

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }

			DebugLocation(215, 9);
			CloseCurlyBracket44=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_classDefinition1382); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CloseCurlyBracket.Add(CloseCurlyBracket44);



			{
			// AST REWRITE
			// elements: Class, classModifier, className, Extends, extendsclass, classImplements, classMember
			// token labels: className, extendsclass
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_className=new RewriteRuleITokenStream(adaptor,"token className",className);
			RewriteRuleITokenStream stream_extendsclass=new RewriteRuleITokenStream(adaptor,"token extendsclass",extendsclass);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 216:9: -> ^( Class ^( Modifiers ( classModifier )? ) $className ( ^( Extends $extendsclass) )? ( classImplements )? ( classMember )* )
			{
				DebugLocation(216, 12);
				// Php.g:216:12: ^( Class ^( Modifiers ( classModifier )? ) $className ( ^( Extends $extendsclass) )? ( classImplements )? ( classMember )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(216, 14);
				root_1 = (object)adaptor.BecomeRoot(stream_Class.NextNode(), root_1);

				DebugLocation(216, 20);
				// Php.g:216:20: ^( Modifiers ( classModifier )? )
				{
				object root_2 = (object)adaptor.Nil();
				DebugLocation(216, 22);
				root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(Modifiers, "Modifiers"), root_2);

				DebugLocation(216, 32);
				// Php.g:216:32: ( classModifier )?
				if (stream_classModifier.HasNext)
				{
					DebugLocation(216, 32);
					adaptor.AddChild(root_2, stream_classModifier.NextTree());

				}
				stream_classModifier.Reset();

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(216, 49);
				adaptor.AddChild(root_1, stream_className.NextNode());
				DebugLocation(216, 59);
				// Php.g:216:59: ( ^( Extends $extendsclass) )?
				if (stream_Extends.HasNext||stream_extendsclass.HasNext)
				{
					DebugLocation(216, 59);
					// Php.g:216:59: ^( Extends $extendsclass)
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(216, 61);
					root_2 = (object)adaptor.BecomeRoot(stream_Extends.NextNode(), root_2);

					DebugLocation(216, 70);
					adaptor.AddChild(root_2, stream_extendsclass.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_Extends.Reset();
				stream_extendsclass.Reset();
				DebugLocation(216, 85);
				// Php.g:216:85: ( classImplements )?
				if (stream_classImplements.HasNext)
				{
					DebugLocation(216, 85);
					adaptor.AddChild(root_1, stream_classImplements.NextTree());

				}
				stream_classImplements.Reset();
				DebugLocation(217, 13);
				// Php.g:217:13: ( classMember )*
				while ( stream_classMember.HasNext )
				{
					DebugLocation(217, 13);
					adaptor.AddChild(root_1, stream_classMember.NextTree());

				}
				stream_classMember.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classDefinition", 8);
			LeaveRule("classDefinition", 8);
			LeaveRule_classDefinition();
			if (state.backtracking > 0) { Memoize(input, 8, classDefinition_StartIndex); }

		}
		DebugLocation(219, 4);
		} finally { DebugExitRule(GrammarFileName, "classDefinition"); }
		return retval;

	}
	// $ANTLR end "classDefinition"

	partial void EnterRule_classImplements();
	partial void LeaveRule_classImplements();
	// $ANTLR start "classImplements"
	// Php.g:221:1: classImplements : Implements ^ ( UnquotedString ( Comma ! UnquotedString )* ) ;
	[GrammarRule("classImplements")]
	private AstParserRuleReturnScope<object, IToken> classImplements()
	{
		EnterRule_classImplements();
		EnterRule("classImplements", 9);
		TraceIn("classImplements", 9);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classImplements_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Implements45 = default(IToken);
		IToken UnquotedString46 = default(IToken);
		IToken Comma47 = default(IToken);
		IToken UnquotedString48 = default(IToken);

		object Implements45_tree = default(object);
		object UnquotedString46_tree = default(object);
		object Comma47_tree = default(object);
		object UnquotedString48_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classImplements");
		DebugLocation(221, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// Php.g:222:5: ( Implements ^ ( UnquotedString ( Comma ! UnquotedString )* ) )
			DebugEnterAlt(1);
			// Php.g:222:8: Implements ^ ( UnquotedString ( Comma ! UnquotedString )* )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(222, 18);
			Implements45=(IToken)Match(input,Implements,Follow._Implements_in_classImplements1464); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Implements45_tree = (object)adaptor.Create(Implements45);
			root_0 = (object)adaptor.BecomeRoot(Implements45_tree, root_0);
			}
			DebugLocation(222, 20);
			// Php.g:222:20: ( UnquotedString ( Comma ! UnquotedString )* )
			DebugEnterAlt(1);
			// Php.g:222:21: UnquotedString ( Comma ! UnquotedString )*
			{
			DebugLocation(222, 21);
			UnquotedString46=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_classImplements1468); if (state.failed) return retval;
			if (state.backtracking == 0) {
			UnquotedString46_tree = (object)adaptor.Create(UnquotedString46);
			adaptor.AddChild(root_0, UnquotedString46_tree);
			}
			DebugLocation(222, 36);
			// Php.g:222:36: ( Comma ! UnquotedString )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if ((LA17_1==Comma))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:222:37: Comma ! UnquotedString
					{
					DebugLocation(222, 42);
					Comma47=(IToken)Match(input,Comma,Follow._Comma_in_classImplements1471); if (state.failed) return retval;
					DebugLocation(222, 44);
					UnquotedString48=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_classImplements1474); if (state.failed) return retval;
					if (state.backtracking == 0) {
					UnquotedString48_tree = (object)adaptor.Create(UnquotedString48);
					adaptor.AddChild(root_0, UnquotedString48_tree);
					}

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classImplements", 9);
			LeaveRule("classImplements", 9);
			LeaveRule_classImplements();
			if (state.backtracking > 0) { Memoize(input, 9, classImplements_StartIndex); }

		}
		DebugLocation(223, 4);
		} finally { DebugExitRule(GrammarFileName, "classImplements"); }
		return retval;

	}
	// $ANTLR end "classImplements"

	partial void EnterRule_classMember();
	partial void LeaveRule_classMember();
	// $ANTLR start "classMember"
	// Php.g:225:1: classMember : ( ( fieldModifier )* Function UnquotedString parametersDefinition ( bracketedBlock | ';' ) -> ^( Method ^( Modifiers ( fieldModifier )* ) UnquotedString parametersDefinition ( bracketedBlock )? ) | Var Dollar UnquotedString ( Equals atom )? ';' -> ^( Var ^( Dollar UnquotedString ) ( atom )? ) | Const UnquotedString ( Equals atom )? ';' -> ^( Const UnquotedString ( atom )? ) | ( fieldModifier )* ( Dollar UnquotedString ) ( Equals atom )? ';' -> ^( Field ^( Modifiers ( fieldModifier )* ) ^( Dollar UnquotedString ) ( atom )? ) );
	[GrammarRule("classMember")]
	private AstParserRuleReturnScope<object, IToken> classMember()
	{
		EnterRule_classMember();
		EnterRule("classMember", 10);
		TraceIn("classMember", 10);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classMember_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Function50 = default(IToken);
		IToken UnquotedString51 = default(IToken);
		IToken char_literal54 = default(IToken);
		IToken Var55 = default(IToken);
		IToken Dollar56 = default(IToken);
		IToken UnquotedString57 = default(IToken);
		IToken Equals58 = default(IToken);
		IToken char_literal60 = default(IToken);
		IToken Const61 = default(IToken);
		IToken UnquotedString62 = default(IToken);
		IToken Equals63 = default(IToken);
		IToken char_literal65 = default(IToken);
		IToken Dollar67 = default(IToken);
		IToken UnquotedString68 = default(IToken);
		IToken Equals69 = default(IToken);
		IToken char_literal71 = default(IToken);
		AstParserRuleReturnScope<object, IToken> fieldModifier49 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> parametersDefinition52 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bracketedBlock53 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom59 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom64 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> fieldModifier66 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom70 = default(AstParserRuleReturnScope<object, IToken>);

		object Function50_tree = default(object);
		object UnquotedString51_tree = default(object);
		object char_literal54_tree = default(object);
		object Var55_tree = default(object);
		object Dollar56_tree = default(object);
		object UnquotedString57_tree = default(object);
		object Equals58_tree = default(object);
		object char_literal60_tree = default(object);
		object Const61_tree = default(object);
		object UnquotedString62_tree = default(object);
		object Equals63_tree = default(object);
		object char_literal65_tree = default(object);
		object Dollar67_tree = default(object);
		object UnquotedString68_tree = default(object);
		object Equals69_tree = default(object);
		object char_literal71_tree = default(object);
		RewriteRuleITokenStream stream_Function=new RewriteRuleITokenStream(adaptor,"token Function");
		RewriteRuleITokenStream stream_UnquotedString=new RewriteRuleITokenStream(adaptor,"token UnquotedString");
		RewriteRuleITokenStream stream_SemiColon=new RewriteRuleITokenStream(adaptor,"token SemiColon");
		RewriteRuleITokenStream stream_Var=new RewriteRuleITokenStream(adaptor,"token Var");
		RewriteRuleITokenStream stream_Dollar=new RewriteRuleITokenStream(adaptor,"token Dollar");
		RewriteRuleITokenStream stream_Equals=new RewriteRuleITokenStream(adaptor,"token Equals");
		RewriteRuleITokenStream stream_Const=new RewriteRuleITokenStream(adaptor,"token Const");
		RewriteRuleSubtreeStream stream_fieldModifier=new RewriteRuleSubtreeStream(adaptor,"rule fieldModifier");
		RewriteRuleSubtreeStream stream_parametersDefinition=new RewriteRuleSubtreeStream(adaptor,"rule parametersDefinition");
		RewriteRuleSubtreeStream stream_bracketedBlock=new RewriteRuleSubtreeStream(adaptor,"rule bracketedBlock");
		RewriteRuleSubtreeStream stream_atom=new RewriteRuleSubtreeStream(adaptor,"rule atom");
		try { DebugEnterRule(GrammarFileName, "classMember");
		DebugLocation(225, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// Php.g:226:5: ( ( fieldModifier )* Function UnquotedString parametersDefinition ( bracketedBlock | ';' ) -> ^( Method ^( Modifiers ( fieldModifier )* ) UnquotedString parametersDefinition ( bracketedBlock )? ) | Var Dollar UnquotedString ( Equals atom )? ';' -> ^( Var ^( Dollar UnquotedString ) ( atom )? ) | Const UnquotedString ( Equals atom )? ';' -> ^( Const UnquotedString ( atom )? ) | ( fieldModifier )* ( Dollar UnquotedString ) ( Equals atom )? ';' -> ^( Field ^( Modifiers ( fieldModifier )* ) ^( Dollar UnquotedString ) ( atom )? ) )
			int alt24=4;
			try { DebugEnterDecision(24, false);
			switch (input.LA(1))
			{
			case Abstract:
			case AccessModifier:
			case Static:
				{
				switch (input.LA(2))
				{
				case Function:
					{
					alt24 = 1;
					}
					break;
				case Abstract:
				case AccessModifier:
				case Static:
					{
					int LA24_3 = input.LA(3);

					if ((EvaluatePredicate(synpred26_Php_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 4;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 7, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Dollar:
					{
					alt24 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case Function:
				{
				alt24 = 1;
				}
				break;
			case Var:
				{
				alt24 = 2;
				}
				break;
			case Const:
				{
				alt24 = 3;
				}
				break;
			case Dollar:
				{
				alt24 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:226:7: ( fieldModifier )* Function UnquotedString parametersDefinition ( bracketedBlock | ';' )
				{
				DebugLocation(226, 7);
				// Php.g:226:7: ( fieldModifier )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_1 = input.LA(1);

					if (((LA18_1>=Abstract && LA18_1<=AccessModifier)||LA18_1==Static))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:226:7: fieldModifier
						{
						DebugLocation(226, 7);
						PushFollow(Follow._fieldModifier_in_classMember1494);
						fieldModifier49=fieldModifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_fieldModifier.Add(fieldModifier49.Tree);

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }

				DebugLocation(226, 22);
				Function50=(IToken)Match(input,Function,Follow._Function_in_classMember1497); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Function.Add(Function50);

				DebugLocation(226, 31);
				UnquotedString51=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_classMember1499); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_UnquotedString.Add(UnquotedString51);

				DebugLocation(226, 46);
				PushFollow(Follow._parametersDefinition_in_classMember1501);
				parametersDefinition52=parametersDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_parametersDefinition.Add(parametersDefinition52.Tree);
				DebugLocation(227, 9);
				// Php.g:227:9: ( bracketedBlock | ';' )
				int alt19=2;
				try { DebugEnterSubRule(19);
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==OpenCurlyBracket))
				{
					alt19 = 1;
				}
				else if ((LA19_1==SemiColon))
				{
					alt19 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:227:10: bracketedBlock
					{
					DebugLocation(227, 10);
					PushFollow(Follow._bracketedBlock_in_classMember1513);
					bracketedBlock53=bracketedBlock();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracketedBlock.Add(bracketedBlock53.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Php.g:227:27: ';'
					{
					DebugLocation(227, 27);
					char_literal54=(IToken)Match(input,SemiColon,Follow._SemiColon_in_classMember1517); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SemiColon.Add(char_literal54);


					}
					break;

				}
				} finally { DebugExitSubRule(19); }



				{
				// AST REWRITE
				// elements: fieldModifier, UnquotedString, parametersDefinition, bracketedBlock
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 228:9: -> ^( Method ^( Modifiers ( fieldModifier )* ) UnquotedString parametersDefinition ( bracketedBlock )? )
				{
					DebugLocation(228, 12);
					// Php.g:228:12: ^( Method ^( Modifiers ( fieldModifier )* ) UnquotedString parametersDefinition ( bracketedBlock )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(228, 14);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(Method, "Method"), root_1);

					DebugLocation(228, 21);
					// Php.g:228:21: ^( Modifiers ( fieldModifier )* )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(228, 23);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(Modifiers, "Modifiers"), root_2);

					DebugLocation(228, 33);
					// Php.g:228:33: ( fieldModifier )*
					while ( stream_fieldModifier.HasNext )
					{
						DebugLocation(228, 33);
						adaptor.AddChild(root_2, stream_fieldModifier.NextTree());

					}
					stream_fieldModifier.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(228, 49);
					adaptor.AddChild(root_1, stream_UnquotedString.NextNode());
					DebugLocation(228, 64);
					adaptor.AddChild(root_1, stream_parametersDefinition.NextTree());
					DebugLocation(228, 85);
					// Php.g:228:85: ( bracketedBlock )?
					if (stream_bracketedBlock.HasNext)
					{
						DebugLocation(228, 85);
						adaptor.AddChild(root_1, stream_bracketedBlock.NextTree());

					}
					stream_bracketedBlock.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:229:7: Var Dollar UnquotedString ( Equals atom )? ';'
				{
				DebugLocation(229, 7);
				Var55=(IToken)Match(input,Var,Follow._Var_in_classMember1554); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Var.Add(Var55);

				DebugLocation(229, 11);
				Dollar56=(IToken)Match(input,Dollar,Follow._Dollar_in_classMember1556); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Dollar.Add(Dollar56);

				DebugLocation(229, 18);
				UnquotedString57=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_classMember1558); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_UnquotedString.Add(UnquotedString57);

				DebugLocation(229, 33);
				// Php.g:229:33: ( Equals atom )?
				int alt20=2;
				try { DebugEnterSubRule(20);
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==Equals))
				{
					alt20 = 1;
				}
				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:229:34: Equals atom
					{
					DebugLocation(229, 34);
					Equals58=(IToken)Match(input,Equals,Follow._Equals_in_classMember1561); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_Equals.Add(Equals58);

					DebugLocation(229, 41);
					PushFollow(Follow._atom_in_classMember1563);
					atom59=atom();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_atom.Add(atom59.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(20); }

				DebugLocation(229, 48);
				char_literal60=(IToken)Match(input,SemiColon,Follow._SemiColon_in_classMember1567); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SemiColon.Add(char_literal60);



				{
				// AST REWRITE
				// elements: Var, Dollar, UnquotedString, atom
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 230:9: -> ^( Var ^( Dollar UnquotedString ) ( atom )? )
				{
					DebugLocation(230, 12);
					// Php.g:230:12: ^( Var ^( Dollar UnquotedString ) ( atom )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(230, 14);
					root_1 = (object)adaptor.BecomeRoot(stream_Var.NextNode(), root_1);

					DebugLocation(230, 18);
					// Php.g:230:18: ^( Dollar UnquotedString )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(230, 20);
					root_2 = (object)adaptor.BecomeRoot(stream_Dollar.NextNode(), root_2);

					DebugLocation(230, 27);
					adaptor.AddChild(root_2, stream_UnquotedString.NextNode());

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(230, 43);
					// Php.g:230:43: ( atom )?
					if (stream_atom.HasNext)
					{
						DebugLocation(230, 43);
						adaptor.AddChild(root_1, stream_atom.NextTree());

					}
					stream_atom.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Php.g:231:7: Const UnquotedString ( Equals atom )? ';'
				{
				DebugLocation(231, 7);
				Const61=(IToken)Match(input,Const,Follow._Const_in_classMember1600); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Const.Add(Const61);

				DebugLocation(231, 13);
				UnquotedString62=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_classMember1602); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_UnquotedString.Add(UnquotedString62);

				DebugLocation(231, 28);
				// Php.g:231:28: ( Equals atom )?
				int alt21=2;
				try { DebugEnterSubRule(21);
				try { DebugEnterDecision(21, false);
				int LA21_1 = input.LA(1);

				if ((LA21_1==Equals))
				{
					alt21 = 1;
				}
				} finally { DebugExitDecision(21); }
				switch (alt21)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:231:29: Equals atom
					{
					DebugLocation(231, 29);
					Equals63=(IToken)Match(input,Equals,Follow._Equals_in_classMember1605); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_Equals.Add(Equals63);

					DebugLocation(231, 36);
					PushFollow(Follow._atom_in_classMember1607);
					atom64=atom();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_atom.Add(atom64.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(21); }

				DebugLocation(231, 43);
				char_literal65=(IToken)Match(input,SemiColon,Follow._SemiColon_in_classMember1611); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SemiColon.Add(char_literal65);



				{
				// AST REWRITE
				// elements: Const, UnquotedString, atom
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 232:9: -> ^( Const UnquotedString ( atom )? )
				{
					DebugLocation(232, 12);
					// Php.g:232:12: ^( Const UnquotedString ( atom )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(232, 14);
					root_1 = (object)adaptor.BecomeRoot(stream_Const.NextNode(), root_1);

					DebugLocation(232, 20);
					adaptor.AddChild(root_1, stream_UnquotedString.NextNode());
					DebugLocation(232, 35);
					// Php.g:232:35: ( atom )?
					if (stream_atom.HasNext)
					{
						DebugLocation(232, 35);
						adaptor.AddChild(root_1, stream_atom.NextTree());

					}
					stream_atom.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Php.g:233:7: ( fieldModifier )* ( Dollar UnquotedString ) ( Equals atom )? ';'
				{
				DebugLocation(233, 7);
				// Php.g:233:7: ( fieldModifier )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_1 = input.LA(1);

					if (((LA22_1>=Abstract && LA22_1<=AccessModifier)||LA22_1==Static))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:233:7: fieldModifier
						{
						DebugLocation(233, 7);
						PushFollow(Follow._fieldModifier_in_classMember1639);
						fieldModifier66=fieldModifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_fieldModifier.Add(fieldModifier66.Tree);

						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }

				DebugLocation(233, 22);
				// Php.g:233:22: ( Dollar UnquotedString )
				DebugEnterAlt(1);
				// Php.g:233:23: Dollar UnquotedString
				{
				DebugLocation(233, 23);
				Dollar67=(IToken)Match(input,Dollar,Follow._Dollar_in_classMember1643); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Dollar.Add(Dollar67);

				DebugLocation(233, 30);
				UnquotedString68=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_classMember1645); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_UnquotedString.Add(UnquotedString68);


				}

				DebugLocation(233, 46);
				// Php.g:233:46: ( Equals atom )?
				int alt23=2;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, false);
				int LA23_1 = input.LA(1);

				if ((LA23_1==Equals))
				{
					alt23 = 1;
				}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:233:47: Equals atom
					{
					DebugLocation(233, 47);
					Equals69=(IToken)Match(input,Equals,Follow._Equals_in_classMember1649); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_Equals.Add(Equals69);

					DebugLocation(233, 54);
					PushFollow(Follow._atom_in_classMember1651);
					atom70=atom();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_atom.Add(atom70.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(23); }

				DebugLocation(233, 61);
				char_literal71=(IToken)Match(input,SemiColon,Follow._SemiColon_in_classMember1655); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SemiColon.Add(char_literal71);



				{
				// AST REWRITE
				// elements: fieldModifier, Dollar, UnquotedString, atom
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 234:9: -> ^( Field ^( Modifiers ( fieldModifier )* ) ^( Dollar UnquotedString ) ( atom )? )
				{
					DebugLocation(234, 12);
					// Php.g:234:12: ^( Field ^( Modifiers ( fieldModifier )* ) ^( Dollar UnquotedString ) ( atom )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(234, 14);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(Field, "Field"), root_1);

					DebugLocation(234, 20);
					// Php.g:234:20: ^( Modifiers ( fieldModifier )* )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(234, 22);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(Modifiers, "Modifiers"), root_2);

					DebugLocation(234, 32);
					// Php.g:234:32: ( fieldModifier )*
					while ( stream_fieldModifier.HasNext )
					{
						DebugLocation(234, 32);
						adaptor.AddChild(root_2, stream_fieldModifier.NextTree());

					}
					stream_fieldModifier.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(234, 48);
					// Php.g:234:48: ^( Dollar UnquotedString )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(234, 50);
					root_2 = (object)adaptor.BecomeRoot(stream_Dollar.NextNode(), root_2);

					DebugLocation(234, 57);
					adaptor.AddChild(root_2, stream_UnquotedString.NextNode());

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(234, 73);
					// Php.g:234:73: ( atom )?
					if (stream_atom.HasNext)
					{
						DebugLocation(234, 73);
						adaptor.AddChild(root_1, stream_atom.NextTree());

					}
					stream_atom.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classMember", 10);
			LeaveRule("classMember", 10);
			LeaveRule_classMember();
			if (state.backtracking > 0) { Memoize(input, 10, classMember_StartIndex); }

		}
		DebugLocation(235, 4);
		} finally { DebugExitRule(GrammarFileName, "classMember"); }
		return retval;

	}
	// $ANTLR end "classMember"

	partial void EnterRule_fieldDefinition();
	partial void LeaveRule_fieldDefinition();
	// $ANTLR start "fieldDefinition"
	// Php.g:237:1: fieldDefinition : Dollar UnquotedString ( Equals atom )? ';' -> ^( Field ^( Dollar UnquotedString ) ( atom )? ) ;
	[GrammarRule("fieldDefinition")]
	private AstParserRuleReturnScope<object, IToken> fieldDefinition()
	{
		EnterRule_fieldDefinition();
		EnterRule("fieldDefinition", 11);
		TraceIn("fieldDefinition", 11);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int fieldDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Dollar72 = default(IToken);
		IToken UnquotedString73 = default(IToken);
		IToken Equals74 = default(IToken);
		IToken char_literal76 = default(IToken);
		AstParserRuleReturnScope<object, IToken> atom75 = default(AstParserRuleReturnScope<object, IToken>);

		object Dollar72_tree = default(object);
		object UnquotedString73_tree = default(object);
		object Equals74_tree = default(object);
		object char_literal76_tree = default(object);
		RewriteRuleITokenStream stream_Dollar=new RewriteRuleITokenStream(adaptor,"token Dollar");
		RewriteRuleITokenStream stream_UnquotedString=new RewriteRuleITokenStream(adaptor,"token UnquotedString");
		RewriteRuleITokenStream stream_Equals=new RewriteRuleITokenStream(adaptor,"token Equals");
		RewriteRuleITokenStream stream_SemiColon=new RewriteRuleITokenStream(adaptor,"token SemiColon");
		RewriteRuleSubtreeStream stream_atom=new RewriteRuleSubtreeStream(adaptor,"rule atom");
		try { DebugEnterRule(GrammarFileName, "fieldDefinition");
		DebugLocation(237, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// Php.g:238:5: ( Dollar UnquotedString ( Equals atom )? ';' -> ^( Field ^( Dollar UnquotedString ) ( atom )? ) )
			DebugEnterAlt(1);
			// Php.g:238:7: Dollar UnquotedString ( Equals atom )? ';'
			{
			DebugLocation(238, 7);
			Dollar72=(IToken)Match(input,Dollar,Follow._Dollar_in_fieldDefinition1703); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_Dollar.Add(Dollar72);

			DebugLocation(238, 14);
			UnquotedString73=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_fieldDefinition1705); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_UnquotedString.Add(UnquotedString73);

			DebugLocation(238, 29);
			// Php.g:238:29: ( Equals atom )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_1 = input.LA(1);

			if ((LA25_1==Equals))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:238:30: Equals atom
				{
				DebugLocation(238, 30);
				Equals74=(IToken)Match(input,Equals,Follow._Equals_in_fieldDefinition1708); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Equals.Add(Equals74);

				DebugLocation(238, 37);
				PushFollow(Follow._atom_in_fieldDefinition1710);
				atom75=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_atom.Add(atom75.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(238, 44);
			char_literal76=(IToken)Match(input,SemiColon,Follow._SemiColon_in_fieldDefinition1714); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SemiColon.Add(char_literal76);



			{
			// AST REWRITE
			// elements: Dollar, UnquotedString, atom
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 238:47: -> ^( Field ^( Dollar UnquotedString ) ( atom )? )
			{
				DebugLocation(238, 50);
				// Php.g:238:50: ^( Field ^( Dollar UnquotedString ) ( atom )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(238, 52);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(Field, "Field"), root_1);

				DebugLocation(238, 58);
				// Php.g:238:58: ^( Dollar UnquotedString )
				{
				object root_2 = (object)adaptor.Nil();
				DebugLocation(238, 60);
				root_2 = (object)adaptor.BecomeRoot(stream_Dollar.NextNode(), root_2);

				DebugLocation(238, 67);
				adaptor.AddChild(root_2, stream_UnquotedString.NextNode());

				adaptor.AddChild(root_1, root_2);
				}
				DebugLocation(238, 83);
				// Php.g:238:83: ( atom )?
				if (stream_atom.HasNext)
				{
					DebugLocation(238, 83);
					adaptor.AddChild(root_1, stream_atom.NextTree());

				}
				stream_atom.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fieldDefinition", 11);
			LeaveRule("fieldDefinition", 11);
			LeaveRule_fieldDefinition();
			if (state.backtracking > 0) { Memoize(input, 11, fieldDefinition_StartIndex); }

		}
		DebugLocation(239, 4);
		} finally { DebugExitRule(GrammarFileName, "fieldDefinition"); }
		return retval;

	}
	// $ANTLR end "fieldDefinition"

	partial void EnterRule_classModifier();
	partial void LeaveRule_classModifier();
	// $ANTLR start "classModifier"
	// Php.g:241:1: classModifier : 'abstract' ;
	[GrammarRule("classModifier")]
	private AstParserRuleReturnScope<object, IToken> classModifier()
	{
		EnterRule_classModifier();
		EnterRule("classModifier", 12);
		TraceIn("classModifier", 12);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int classModifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal77 = default(IToken);

		object string_literal77_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classModifier");
		DebugLocation(241, 16);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// Php.g:242:5: ( 'abstract' )
			DebugEnterAlt(1);
			// Php.g:242:7: 'abstract'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(242, 7);
			string_literal77=(IToken)Match(input,Abstract,Follow._Abstract_in_classModifier1749); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal77_tree = (object)adaptor.Create(string_literal77);
			adaptor.AddChild(root_0, string_literal77_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("classModifier", 12);
			LeaveRule("classModifier", 12);
			LeaveRule_classModifier();
			if (state.backtracking > 0) { Memoize(input, 12, classModifier_StartIndex); }

		}
		DebugLocation(242, 16);
		} finally { DebugExitRule(GrammarFileName, "classModifier"); }
		return retval;

	}
	// $ANTLR end "classModifier"

	partial void EnterRule_fieldModifier();
	partial void LeaveRule_fieldModifier();
	// $ANTLR start "fieldModifier"
	// Php.g:244:1: fieldModifier : ( AccessModifier | 'abstract' | 'static' );
	[GrammarRule("fieldModifier")]
	private AstParserRuleReturnScope<object, IToken> fieldModifier()
	{
		EnterRule_fieldModifier();
		EnterRule("fieldModifier", 13);
		TraceIn("fieldModifier", 13);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int fieldModifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set78 = default(IToken);

		object set78_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "fieldModifier");
		DebugLocation(244, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// Php.g:245:5: ( AccessModifier | 'abstract' | 'static' )
			DebugEnterAlt(1);
			// Php.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(245, 5);

			set78=(IToken)input.LT(1);
			if ((input.LA(1)>=Abstract && input.LA(1)<=AccessModifier)||input.LA(1)==Static)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set78));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fieldModifier", 13);
			LeaveRule("fieldModifier", 13);
			LeaveRule_fieldModifier();
			if (state.backtracking > 0) { Memoize(input, 13, fieldModifier_StartIndex); }

		}
		DebugLocation(246, 4);
		} finally { DebugExitRule(GrammarFileName, "fieldModifier"); }
		return retval;

	}
	// $ANTLR end "fieldModifier"

	partial void EnterRule_complexStatement();
	partial void LeaveRule_complexStatement();
	// $ANTLR start "complexStatement"
	// Php.g:249:1: complexStatement : ( If '(' ifCondition= expression ')' ifTrue= statement ( conditional )? -> ^( 'if' expression $ifTrue ( conditional )? ) | For '(' forInit forCondition forUpdate ')' statement -> ^( For forInit forCondition forUpdate statement ) | Foreach '(' variable 'as' arrayEntry ')' statement -> ^( Foreach variable arrayEntry statement ) | While '(' (whileCondition= expression )? ')' statement -> ^( While $whileCondition statement ) | Do statement While '(' doCondition= expression ')' ';' -> ^( Do statement $doCondition) | Switch '(' expression ')' '{' cases '}' -> ^( Switch expression cases ) | functionDefinition );
	[GrammarRule("complexStatement")]
	private AstParserRuleReturnScope<object, IToken> complexStatement()
	{
		EnterRule_complexStatement();
		EnterRule("complexStatement", 14);
		TraceIn("complexStatement", 14);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int complexStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken If79 = default(IToken);
		IToken char_literal80 = default(IToken);
		IToken char_literal81 = default(IToken);
		IToken For83 = default(IToken);
		IToken char_literal84 = default(IToken);
		IToken char_literal88 = default(IToken);
		IToken Foreach90 = default(IToken);
		IToken char_literal91 = default(IToken);
		IToken string_literal93 = default(IToken);
		IToken char_literal95 = default(IToken);
		IToken While97 = default(IToken);
		IToken char_literal98 = default(IToken);
		IToken char_literal99 = default(IToken);
		IToken Do101 = default(IToken);
		IToken While103 = default(IToken);
		IToken char_literal104 = default(IToken);
		IToken char_literal105 = default(IToken);
		IToken char_literal106 = default(IToken);
		IToken Switch107 = default(IToken);
		IToken char_literal108 = default(IToken);
		IToken char_literal110 = default(IToken);
		IToken char_literal111 = default(IToken);
		IToken char_literal113 = default(IToken);
		AstParserRuleReturnScope<object, IToken> ifCondition = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> ifTrue = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> whileCondition = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> doCondition = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> conditional82 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> forInit85 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> forCondition86 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> forUpdate87 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement89 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variable92 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arrayEntry94 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement96 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement100 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement102 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression109 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> cases112 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> functionDefinition114 = default(AstParserRuleReturnScope<object, IToken>);

		object If79_tree = default(object);
		object char_literal80_tree = default(object);
		object char_literal81_tree = default(object);
		object For83_tree = default(object);
		object char_literal84_tree = default(object);
		object char_literal88_tree = default(object);
		object Foreach90_tree = default(object);
		object char_literal91_tree = default(object);
		object string_literal93_tree = default(object);
		object char_literal95_tree = default(object);
		object While97_tree = default(object);
		object char_literal98_tree = default(object);
		object char_literal99_tree = default(object);
		object Do101_tree = default(object);
		object While103_tree = default(object);
		object char_literal104_tree = default(object);
		object char_literal105_tree = default(object);
		object char_literal106_tree = default(object);
		object Switch107_tree = default(object);
		object char_literal108_tree = default(object);
		object char_literal110_tree = default(object);
		object char_literal111_tree = default(object);
		object char_literal113_tree = default(object);
		RewriteRuleITokenStream stream_If=new RewriteRuleITokenStream(adaptor,"token If");
		RewriteRuleITokenStream stream_OpenRoundBracket=new RewriteRuleITokenStream(adaptor,"token OpenRoundBracket");
		RewriteRuleITokenStream stream_CloseRoundBracket=new RewriteRuleITokenStream(adaptor,"token CloseRoundBracket");
		RewriteRuleITokenStream stream_For=new RewriteRuleITokenStream(adaptor,"token For");
		RewriteRuleITokenStream stream_Foreach=new RewriteRuleITokenStream(adaptor,"token Foreach");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_While=new RewriteRuleITokenStream(adaptor,"token While");
		RewriteRuleITokenStream stream_Do=new RewriteRuleITokenStream(adaptor,"token Do");
		RewriteRuleITokenStream stream_SemiColon=new RewriteRuleITokenStream(adaptor,"token SemiColon");
		RewriteRuleITokenStream stream_Switch=new RewriteRuleITokenStream(adaptor,"token Switch");
		RewriteRuleITokenStream stream_OpenCurlyBracket=new RewriteRuleITokenStream(adaptor,"token OpenCurlyBracket");
		RewriteRuleITokenStream stream_CloseCurlyBracket=new RewriteRuleITokenStream(adaptor,"token CloseCurlyBracket");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		RewriteRuleSubtreeStream stream_conditional=new RewriteRuleSubtreeStream(adaptor,"rule conditional");
		RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
		RewriteRuleSubtreeStream stream_forCondition=new RewriteRuleSubtreeStream(adaptor,"rule forCondition");
		RewriteRuleSubtreeStream stream_forUpdate=new RewriteRuleSubtreeStream(adaptor,"rule forUpdate");
		RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
		RewriteRuleSubtreeStream stream_arrayEntry=new RewriteRuleSubtreeStream(adaptor,"rule arrayEntry");
		RewriteRuleSubtreeStream stream_cases=new RewriteRuleSubtreeStream(adaptor,"rule cases");
		try { DebugEnterRule(GrammarFileName, "complexStatement");
		DebugLocation(249, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// Php.g:250:5: ( If '(' ifCondition= expression ')' ifTrue= statement ( conditional )? -> ^( 'if' expression $ifTrue ( conditional )? ) | For '(' forInit forCondition forUpdate ')' statement -> ^( For forInit forCondition forUpdate statement ) | Foreach '(' variable 'as' arrayEntry ')' statement -> ^( Foreach variable arrayEntry statement ) | While '(' (whileCondition= expression )? ')' statement -> ^( While $whileCondition statement ) | Do statement While '(' doCondition= expression ')' ';' -> ^( Do statement $doCondition) | Switch '(' expression ')' '{' cases '}' -> ^( Switch expression cases ) | functionDefinition )
			int alt28=7;
			try { DebugEnterDecision(28, false);
			switch (input.LA(1))
			{
			case If:
				{
				alt28 = 1;
				}
				break;
			case For:
				{
				alt28 = 2;
				}
				break;
			case Foreach:
				{
				alt28 = 3;
				}
				break;
			case While:
				{
				alt28 = 4;
				}
				break;
			case Do:
				{
				alt28 = 5;
				}
				break;
			case Switch:
				{
				alt28 = 6;
				}
				break;
			case Function:
				{
				alt28 = 7;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 28, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:250:7: If '(' ifCondition= expression ')' ifTrue= statement ( conditional )?
				{
				DebugLocation(250, 7);
				If79=(IToken)Match(input,If,Follow._If_in_complexStatement1792); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_If.Add(If79);

				DebugLocation(250, 10);
				char_literal80=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement1794); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OpenRoundBracket.Add(char_literal80);

				DebugLocation(250, 25);
				PushFollow(Follow._expression_in_complexStatement1798);
				ifCondition=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(ifCondition.Tree);
				DebugLocation(250, 37);
				char_literal81=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement1800); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CloseRoundBracket.Add(char_literal81);

				DebugLocation(250, 47);
				PushFollow(Follow._statement_in_complexStatement1804);
				ifTrue=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statement.Add(ifTrue.Tree);
				DebugLocation(250, 58);
				// Php.g:250:58: ( conditional )?
				int alt26=2;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, false);
				try
				{
					alt26 = dfa26.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:250:58: conditional
					{
					DebugLocation(250, 58);
					PushFollow(Follow._conditional_in_complexStatement1806);
					conditional82=conditional();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_conditional.Add(conditional82.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(26); }



				{
				// AST REWRITE
				// elements: If, expression, ifTrue, conditional
				// token labels: 
				// rule labels: ifTrue, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_ifTrue=new RewriteRuleSubtreeStream(adaptor,"rule ifTrue",ifTrue!=null?ifTrue.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 251:9: -> ^( 'if' expression $ifTrue ( conditional )? )
				{
					DebugLocation(251, 12);
					// Php.g:251:12: ^( 'if' expression $ifTrue ( conditional )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(251, 14);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(If, "If"), root_1);

					DebugLocation(251, 19);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(251, 31);
					adaptor.AddChild(root_1, stream_ifTrue.NextTree());
					DebugLocation(251, 38);
					// Php.g:251:38: ( conditional )?
					if (stream_conditional.HasNext)
					{
						DebugLocation(251, 38);
						adaptor.AddChild(root_1, stream_conditional.NextTree());

					}
					stream_conditional.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:252:7: For '(' forInit forCondition forUpdate ')' statement
				{
				DebugLocation(252, 7);
				For83=(IToken)Match(input,For,Follow._For_in_complexStatement1837); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_For.Add(For83);

				DebugLocation(252, 11);
				char_literal84=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement1839); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OpenRoundBracket.Add(char_literal84);

				DebugLocation(252, 15);
				PushFollow(Follow._forInit_in_complexStatement1841);
				forInit85=forInit();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_forInit.Add(forInit85.Tree);
				DebugLocation(252, 23);
				PushFollow(Follow._forCondition_in_complexStatement1843);
				forCondition86=forCondition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_forCondition.Add(forCondition86.Tree);
				DebugLocation(252, 36);
				PushFollow(Follow._forUpdate_in_complexStatement1845);
				forUpdate87=forUpdate();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_forUpdate.Add(forUpdate87.Tree);
				DebugLocation(252, 46);
				char_literal88=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement1847); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CloseRoundBracket.Add(char_literal88);

				DebugLocation(252, 50);
				PushFollow(Follow._statement_in_complexStatement1849);
				statement89=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statement.Add(statement89.Tree);


				{
				// AST REWRITE
				// elements: For, forInit, forCondition, forUpdate, statement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 252:60: -> ^( For forInit forCondition forUpdate statement )
				{
					DebugLocation(252, 63);
					// Php.g:252:63: ^( For forInit forCondition forUpdate statement )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(252, 65);
					root_1 = (object)adaptor.BecomeRoot(stream_For.NextNode(), root_1);

					DebugLocation(252, 69);
					adaptor.AddChild(root_1, stream_forInit.NextTree());
					DebugLocation(252, 77);
					adaptor.AddChild(root_1, stream_forCondition.NextTree());
					DebugLocation(252, 90);
					adaptor.AddChild(root_1, stream_forUpdate.NextTree());
					DebugLocation(252, 100);
					adaptor.AddChild(root_1, stream_statement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Php.g:253:7: Foreach '(' variable 'as' arrayEntry ')' statement
				{
				DebugLocation(253, 7);
				Foreach90=(IToken)Match(input,Foreach,Follow._Foreach_in_complexStatement1871); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Foreach.Add(Foreach90);

				DebugLocation(253, 15);
				char_literal91=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement1873); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OpenRoundBracket.Add(char_literal91);

				DebugLocation(253, 19);
				PushFollow(Follow._variable_in_complexStatement1875);
				variable92=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_variable.Add(variable92.Tree);
				DebugLocation(253, 28);
				string_literal93=(IToken)Match(input,113,Follow._113_in_complexStatement1877); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_113.Add(string_literal93);

				DebugLocation(253, 33);
				PushFollow(Follow._arrayEntry_in_complexStatement1879);
				arrayEntry94=arrayEntry();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_arrayEntry.Add(arrayEntry94.Tree);
				DebugLocation(253, 44);
				char_literal95=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement1881); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CloseRoundBracket.Add(char_literal95);

				DebugLocation(253, 48);
				PushFollow(Follow._statement_in_complexStatement1883);
				statement96=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statement.Add(statement96.Tree);


				{
				// AST REWRITE
				// elements: Foreach, variable, arrayEntry, statement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 253:58: -> ^( Foreach variable arrayEntry statement )
				{
					DebugLocation(253, 61);
					// Php.g:253:61: ^( Foreach variable arrayEntry statement )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(253, 63);
					root_1 = (object)adaptor.BecomeRoot(stream_Foreach.NextNode(), root_1);

					DebugLocation(253, 71);
					adaptor.AddChild(root_1, stream_variable.NextTree());
					DebugLocation(253, 80);
					adaptor.AddChild(root_1, stream_arrayEntry.NextTree());
					DebugLocation(253, 91);
					adaptor.AddChild(root_1, stream_statement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Php.g:254:7: While '(' (whileCondition= expression )? ')' statement
				{
				DebugLocation(254, 7);
				While97=(IToken)Match(input,While,Follow._While_in_complexStatement1903); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_While.Add(While97);

				DebugLocation(254, 13);
				char_literal98=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement1905); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OpenRoundBracket.Add(char_literal98);

				DebugLocation(254, 31);
				// Php.g:254:31: (whileCondition= expression )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_1 = input.LA(1);

				if ((LA27_1==Ampersand||LA27_1==Array||LA27_1==Bang||LA27_1==Boolean||LA27_1==Clone||LA27_1==Dollar||LA27_1==DoubleQuotedString||LA27_1==HereDoc||LA27_1==IncrementOperator||LA27_1==Integer||LA27_1==List||LA27_1==Minus||LA27_1==New||LA27_1==OpenRoundBracket||LA27_1==Real||LA27_1==SingleQuotedString||LA27_1==SuppressWarnings||LA27_1==Tilde||LA27_1==UnquotedString))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:254:31: whileCondition= expression
					{
					DebugLocation(254, 31);
					PushFollow(Follow._expression_in_complexStatement1909);
					whileCondition=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression.Add(whileCondition.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(254, 44);
				char_literal99=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement1912); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CloseRoundBracket.Add(char_literal99);

				DebugLocation(254, 48);
				PushFollow(Follow._statement_in_complexStatement1914);
				statement100=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statement.Add(statement100.Tree);


				{
				// AST REWRITE
				// elements: While, whileCondition, statement
				// token labels: 
				// rule labels: whileCondition, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_whileCondition=new RewriteRuleSubtreeStream(adaptor,"rule whileCondition",whileCondition!=null?whileCondition.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 254:58: -> ^( While $whileCondition statement )
				{
					DebugLocation(254, 61);
					// Php.g:254:61: ^( While $whileCondition statement )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(254, 63);
					root_1 = (object)adaptor.BecomeRoot(stream_While.NextNode(), root_1);

					DebugLocation(254, 70);
					adaptor.AddChild(root_1, stream_whileCondition.NextTree());
					DebugLocation(254, 85);
					adaptor.AddChild(root_1, stream_statement.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Php.g:255:7: Do statement While '(' doCondition= expression ')' ';'
				{
				DebugLocation(255, 7);
				Do101=(IToken)Match(input,Do,Follow._Do_in_complexStatement1933); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Do.Add(Do101);

				DebugLocation(255, 10);
				PushFollow(Follow._statement_in_complexStatement1935);
				statement102=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statement.Add(statement102.Tree);
				DebugLocation(255, 20);
				While103=(IToken)Match(input,While,Follow._While_in_complexStatement1937); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_While.Add(While103);

				DebugLocation(255, 26);
				char_literal104=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement1939); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OpenRoundBracket.Add(char_literal104);

				DebugLocation(255, 41);
				PushFollow(Follow._expression_in_complexStatement1943);
				doCondition=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(doCondition.Tree);
				DebugLocation(255, 53);
				char_literal105=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement1945); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CloseRoundBracket.Add(char_literal105);

				DebugLocation(255, 57);
				char_literal106=(IToken)Match(input,SemiColon,Follow._SemiColon_in_complexStatement1947); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_SemiColon.Add(char_literal106);



				{
				// AST REWRITE
				// elements: Do, statement, doCondition
				// token labels: 
				// rule labels: doCondition, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_doCondition=new RewriteRuleSubtreeStream(adaptor,"rule doCondition",doCondition!=null?doCondition.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 255:61: -> ^( Do statement $doCondition)
				{
					DebugLocation(255, 64);
					// Php.g:255:64: ^( Do statement $doCondition)
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(255, 66);
					root_1 = (object)adaptor.BecomeRoot(stream_Do.NextNode(), root_1);

					DebugLocation(255, 69);
					adaptor.AddChild(root_1, stream_statement.NextTree());
					DebugLocation(255, 80);
					adaptor.AddChild(root_1, stream_doCondition.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Php.g:256:7: Switch '(' expression ')' '{' cases '}'
				{
				DebugLocation(256, 7);
				Switch107=(IToken)Match(input,Switch,Follow._Switch_in_complexStatement1966); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Switch.Add(Switch107);

				DebugLocation(256, 14);
				char_literal108=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_complexStatement1968); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OpenRoundBracket.Add(char_literal108);

				DebugLocation(256, 18);
				PushFollow(Follow._expression_in_complexStatement1970);
				expression109=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression109.Tree);
				DebugLocation(256, 29);
				char_literal110=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_complexStatement1972); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CloseRoundBracket.Add(char_literal110);

				DebugLocation(256, 33);
				char_literal111=(IToken)Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_complexStatement1974); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OpenCurlyBracket.Add(char_literal111);

				DebugLocation(256, 36);
				PushFollow(Follow._cases_in_complexStatement1975);
				cases112=cases();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cases.Add(cases112.Tree);
				DebugLocation(256, 41);
				char_literal113=(IToken)Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_complexStatement1976); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CloseCurlyBracket.Add(char_literal113);



				{
				// AST REWRITE
				// elements: Switch, expression, cases
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 256:45: -> ^( Switch expression cases )
				{
					DebugLocation(256, 48);
					// Php.g:256:48: ^( Switch expression cases )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(256, 50);
					root_1 = (object)adaptor.BecomeRoot(stream_Switch.NextNode(), root_1);

					DebugLocation(256, 57);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(256, 68);
					adaptor.AddChild(root_1, stream_cases.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Php.g:257:7: functionDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(257, 7);
				PushFollow(Follow._functionDefinition_in_complexStatement1994);
				functionDefinition114=functionDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, functionDefinition114.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("complexStatement", 14);
			LeaveRule("complexStatement", 14);
			LeaveRule_complexStatement();
			if (state.backtracking > 0) { Memoize(input, 14, complexStatement_StartIndex); }

		}
		DebugLocation(258, 4);
		} finally { DebugExitRule(GrammarFileName, "complexStatement"); }
		return retval;

	}
	// $ANTLR end "complexStatement"

	partial void EnterRule_simpleStatement();
	partial void LeaveRule_simpleStatement();
	// $ANTLR start "simpleStatement"
	// Php.g:260:1: simpleStatement : ( Echo ^ commaList | Global ^ name ( ',' ! name )* | Static ^ variable Equals ! atom | Break ^ ( Integer )? | Continue ^ ( Integer )? | Return ^ ( expression )? | RequireOperator ^ expression | expression );
	[GrammarRule("simpleStatement")]
	private AstParserRuleReturnScope<object, IToken> simpleStatement()
	{
		EnterRule_simpleStatement();
		EnterRule("simpleStatement", 15);
		TraceIn("simpleStatement", 15);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int simpleStatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Echo115 = default(IToken);
		IToken Global117 = default(IToken);
		IToken char_literal119 = default(IToken);
		IToken Static121 = default(IToken);
		IToken Equals123 = default(IToken);
		IToken Break125 = default(IToken);
		IToken Integer126 = default(IToken);
		IToken Continue127 = default(IToken);
		IToken Integer128 = default(IToken);
		IToken Return129 = default(IToken);
		IToken RequireOperator131 = default(IToken);
		AstParserRuleReturnScope<object, IToken> commaList116 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> name118 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> name120 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variable122 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom124 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression130 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression132 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression133 = default(AstParserRuleReturnScope<object, IToken>);

		object Echo115_tree = default(object);
		object Global117_tree = default(object);
		object char_literal119_tree = default(object);
		object Static121_tree = default(object);
		object Equals123_tree = default(object);
		object Break125_tree = default(object);
		object Integer126_tree = default(object);
		object Continue127_tree = default(object);
		object Integer128_tree = default(object);
		object Return129_tree = default(object);
		object RequireOperator131_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "simpleStatement");
		DebugLocation(260, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// Php.g:261:5: ( Echo ^ commaList | Global ^ name ( ',' ! name )* | Static ^ variable Equals ! atom | Break ^ ( Integer )? | Continue ^ ( Integer )? | Return ^ ( expression )? | RequireOperator ^ expression | expression )
			int alt33=8;
			try { DebugEnterDecision(33, false);
			switch (input.LA(1))
			{
			case Echo:
				{
				alt33 = 1;
				}
				break;
			case Global:
				{
				alt33 = 2;
				}
				break;
			case Static:
				{
				alt33 = 3;
				}
				break;
			case Break:
				{
				alt33 = 4;
				}
				break;
			case Continue:
				{
				alt33 = 5;
				}
				break;
			case Return:
				{
				alt33 = 6;
				}
				break;
			case RequireOperator:
				{
				alt33 = 7;
				}
				break;
			case Ampersand:
			case Array:
			case Bang:
			case Boolean:
			case Clone:
			case Dollar:
			case DoubleQuotedString:
			case HereDoc:
			case IncrementOperator:
			case Integer:
			case List:
			case Minus:
			case New:
			case OpenRoundBracket:
			case Real:
			case SingleQuotedString:
			case SuppressWarnings:
			case Tilde:
			case UnquotedString:
				{
				alt33 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 33, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:261:7: Echo ^ commaList
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(261, 11);
				Echo115=(IToken)Match(input,Echo,Follow._Echo_in_simpleStatement2011); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Echo115_tree = (object)adaptor.Create(Echo115);
				root_0 = (object)adaptor.BecomeRoot(Echo115_tree, root_0);
				}
				DebugLocation(261, 13);
				PushFollow(Follow._commaList_in_simpleStatement2014);
				commaList116=commaList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, commaList116.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:262:7: Global ^ name ( ',' ! name )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(262, 13);
				Global117=(IToken)Match(input,Global,Follow._Global_in_simpleStatement2022); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Global117_tree = (object)adaptor.Create(Global117);
				root_0 = (object)adaptor.BecomeRoot(Global117_tree, root_0);
				}
				DebugLocation(262, 15);
				PushFollow(Follow._name_in_simpleStatement2025);
				name118=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name118.Tree);
				DebugLocation(262, 20);
				// Php.g:262:20: ( ',' ! name )*
				try { DebugEnterSubRule(29);
				while (true)
				{
					int alt29=2;
					try { DebugEnterDecision(29, false);
					int LA29_1 = input.LA(1);

					if ((LA29_1==Comma))
					{
						alt29 = 1;
					}


					} finally { DebugExitDecision(29); }
					switch ( alt29 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:262:21: ',' ! name
						{
						DebugLocation(262, 24);
						char_literal119=(IToken)Match(input,Comma,Follow._Comma_in_simpleStatement2028); if (state.failed) return retval;
						DebugLocation(262, 26);
						PushFollow(Follow._name_in_simpleStatement2031);
						name120=name();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, name120.Tree);

						}
						break;

					default:
						goto loop29;
					}
				}

				loop29:
					;

				} finally { DebugExitSubRule(29); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Php.g:263:7: Static ^ variable Equals ! atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(263, 13);
				Static121=(IToken)Match(input,Static,Follow._Static_in_simpleStatement2041); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Static121_tree = (object)adaptor.Create(Static121);
				root_0 = (object)adaptor.BecomeRoot(Static121_tree, root_0);
				}
				DebugLocation(263, 15);
				PushFollow(Follow._variable_in_simpleStatement2044);
				variable122=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable122.Tree);
				DebugLocation(263, 30);
				Equals123=(IToken)Match(input,Equals,Follow._Equals_in_simpleStatement2046); if (state.failed) return retval;
				DebugLocation(263, 32);
				PushFollow(Follow._atom_in_simpleStatement2049);
				atom124=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom124.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Php.g:264:7: Break ^ ( Integer )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(264, 12);
				Break125=(IToken)Match(input,Break,Follow._Break_in_simpleStatement2057); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Break125_tree = (object)adaptor.Create(Break125);
				root_0 = (object)adaptor.BecomeRoot(Break125_tree, root_0);
				}
				DebugLocation(264, 14);
				// Php.g:264:14: ( Integer )?
				int alt30=2;
				try { DebugEnterSubRule(30);
				try { DebugEnterDecision(30, false);
				int LA30_1 = input.LA(1);

				if ((LA30_1==Integer))
				{
					alt30 = 1;
				}
				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:264:14: Integer
					{
					DebugLocation(264, 14);
					Integer126=(IToken)Match(input,Integer,Follow._Integer_in_simpleStatement2060); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Integer126_tree = (object)adaptor.Create(Integer126);
					adaptor.AddChild(root_0, Integer126_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(30); }


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Php.g:265:7: Continue ^ ( Integer )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(265, 15);
				Continue127=(IToken)Match(input,Continue,Follow._Continue_in_simpleStatement2069); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Continue127_tree = (object)adaptor.Create(Continue127);
				root_0 = (object)adaptor.BecomeRoot(Continue127_tree, root_0);
				}
				DebugLocation(265, 17);
				// Php.g:265:17: ( Integer )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				int LA31_1 = input.LA(1);

				if ((LA31_1==Integer))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:265:17: Integer
					{
					DebugLocation(265, 17);
					Integer128=(IToken)Match(input,Integer,Follow._Integer_in_simpleStatement2072); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Integer128_tree = (object)adaptor.Create(Integer128);
					adaptor.AddChild(root_0, Integer128_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(31); }


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Php.g:267:7: Return ^ ( expression )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(267, 13);
				Return129=(IToken)Match(input,Return,Follow._Return_in_simpleStatement2086); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Return129_tree = (object)adaptor.Create(Return129);
				root_0 = (object)adaptor.BecomeRoot(Return129_tree, root_0);
				}
				DebugLocation(267, 15);
				// Php.g:267:15: ( expression )?
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, false);
				int LA32_1 = input.LA(1);

				if ((LA32_1==Ampersand||LA32_1==Array||LA32_1==Bang||LA32_1==Boolean||LA32_1==Clone||LA32_1==Dollar||LA32_1==DoubleQuotedString||LA32_1==HereDoc||LA32_1==IncrementOperator||LA32_1==Integer||LA32_1==List||LA32_1==Minus||LA32_1==New||LA32_1==OpenRoundBracket||LA32_1==Real||LA32_1==SingleQuotedString||LA32_1==SuppressWarnings||LA32_1==Tilde||LA32_1==UnquotedString))
				{
					alt32 = 1;
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:267:15: expression
					{
					DebugLocation(267, 15);
					PushFollow(Follow._expression_in_simpleStatement2089);
					expression130=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression130.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(32); }


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Php.g:268:7: RequireOperator ^ expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(268, 22);
				RequireOperator131=(IToken)Match(input,RequireOperator,Follow._RequireOperator_in_simpleStatement2098); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RequireOperator131_tree = (object)adaptor.Create(RequireOperator131);
				root_0 = (object)adaptor.BecomeRoot(RequireOperator131_tree, root_0);
				}
				DebugLocation(268, 24);
				PushFollow(Follow._expression_in_simpleStatement2101);
				expression132=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression132.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Php.g:269:7: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(269, 7);
				PushFollow(Follow._expression_in_simpleStatement2109);
				expression133=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression133.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("simpleStatement", 15);
			LeaveRule("simpleStatement", 15);
			LeaveRule_simpleStatement();
			if (state.backtracking > 0) { Memoize(input, 15, simpleStatement_StartIndex); }

		}
		DebugLocation(270, 4);
		} finally { DebugExitRule(GrammarFileName, "simpleStatement"); }
		return retval;

	}
	// $ANTLR end "simpleStatement"

	partial void EnterRule_conditional();
	partial void LeaveRule_conditional();
	// $ANTLR start "conditional"
	// Php.g:273:1: conditional : ( ElseIf '(' ifCondition= expression ')' ifTrue= statement ( conditional )? -> ^( If $ifCondition $ifTrue ( conditional )? ) | Else statement -> statement );
	[GrammarRule("conditional")]
	private AstParserRuleReturnScope<object, IToken> conditional()
	{
		EnterRule_conditional();
		EnterRule("conditional", 16);
		TraceIn("conditional", 16);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int conditional_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ElseIf134 = default(IToken);
		IToken char_literal135 = default(IToken);
		IToken char_literal136 = default(IToken);
		IToken Else138 = default(IToken);
		AstParserRuleReturnScope<object, IToken> ifCondition = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> ifTrue = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> conditional137 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement139 = default(AstParserRuleReturnScope<object, IToken>);

		object ElseIf134_tree = default(object);
		object char_literal135_tree = default(object);
		object char_literal136_tree = default(object);
		object Else138_tree = default(object);
		RewriteRuleITokenStream stream_ElseIf=new RewriteRuleITokenStream(adaptor,"token ElseIf");
		RewriteRuleITokenStream stream_OpenRoundBracket=new RewriteRuleITokenStream(adaptor,"token OpenRoundBracket");
		RewriteRuleITokenStream stream_CloseRoundBracket=new RewriteRuleITokenStream(adaptor,"token CloseRoundBracket");
		RewriteRuleITokenStream stream_Else=new RewriteRuleITokenStream(adaptor,"token Else");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		RewriteRuleSubtreeStream stream_conditional=new RewriteRuleSubtreeStream(adaptor,"rule conditional");
		try { DebugEnterRule(GrammarFileName, "conditional");
		DebugLocation(273, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// Php.g:274:5: ( ElseIf '(' ifCondition= expression ')' ifTrue= statement ( conditional )? -> ^( If $ifCondition $ifTrue ( conditional )? ) | Else statement -> statement )
			int alt35=2;
			try { DebugEnterDecision(35, false);
			int LA35_1 = input.LA(1);

			if ((LA35_1==ElseIf))
			{
				alt35 = 1;
			}
			else if ((LA35_1==Else))
			{
				alt35 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 35, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:274:7: ElseIf '(' ifCondition= expression ')' ifTrue= statement ( conditional )?
				{
				DebugLocation(274, 7);
				ElseIf134=(IToken)Match(input,ElseIf,Follow._ElseIf_in_conditional2127); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ElseIf.Add(ElseIf134);

				DebugLocation(274, 14);
				char_literal135=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_conditional2129); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OpenRoundBracket.Add(char_literal135);

				DebugLocation(274, 29);
				PushFollow(Follow._expression_in_conditional2133);
				ifCondition=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(ifCondition.Tree);
				DebugLocation(274, 41);
				char_literal136=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_conditional2135); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CloseRoundBracket.Add(char_literal136);

				DebugLocation(274, 51);
				PushFollow(Follow._statement_in_conditional2139);
				ifTrue=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statement.Add(ifTrue.Tree);
				DebugLocation(274, 62);
				// Php.g:274:62: ( conditional )?
				int alt34=2;
				try { DebugEnterSubRule(34);
				try { DebugEnterDecision(34, false);
				try
				{
					alt34 = dfa34.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:274:62: conditional
					{
					DebugLocation(274, 62);
					PushFollow(Follow._conditional_in_conditional2141);
					conditional137=conditional();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_conditional.Add(conditional137.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(34); }



				{
				// AST REWRITE
				// elements: ifCondition, ifTrue, conditional
				// token labels: 
				// rule labels: ifCondition, ifTrue, retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_ifCondition=new RewriteRuleSubtreeStream(adaptor,"rule ifCondition",ifCondition!=null?ifCondition.Tree:null);
				RewriteRuleSubtreeStream stream_ifTrue=new RewriteRuleSubtreeStream(adaptor,"rule ifTrue",ifTrue!=null?ifTrue.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 274:75: -> ^( If $ifCondition $ifTrue ( conditional )? )
				{
					DebugLocation(274, 78);
					// Php.g:274:78: ^( If $ifCondition $ifTrue ( conditional )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(274, 80);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(If, "If"), root_1);

					DebugLocation(274, 84);
					adaptor.AddChild(root_1, stream_ifCondition.NextTree());
					DebugLocation(274, 97);
					adaptor.AddChild(root_1, stream_ifTrue.NextTree());
					DebugLocation(274, 104);
					// Php.g:274:104: ( conditional )?
					if (stream_conditional.HasNext)
					{
						DebugLocation(274, 104);
						adaptor.AddChild(root_1, stream_conditional.NextTree());

					}
					stream_conditional.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:275:7: Else statement
				{
				DebugLocation(275, 7);
				Else138=(IToken)Match(input,Else,Follow._Else_in_conditional2165); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Else.Add(Else138);

				DebugLocation(275, 12);
				PushFollow(Follow._statement_in_conditional2167);
				statement139=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_statement.Add(statement139.Tree);


				{
				// AST REWRITE
				// elements: statement
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 275:22: -> statement
				{
					DebugLocation(275, 25);
					adaptor.AddChild(root_0, stream_statement.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditional", 16);
			LeaveRule("conditional", 16);
			LeaveRule_conditional();
			if (state.backtracking > 0) { Memoize(input, 16, conditional_StartIndex); }

		}
		DebugLocation(276, 4);
		} finally { DebugExitRule(GrammarFileName, "conditional"); }
		return retval;

	}
	// $ANTLR end "conditional"

	partial void EnterRule_forInit();
	partial void LeaveRule_forInit();
	// $ANTLR start "forInit"
	// Php.g:278:1: forInit : ( commaList )? ';' -> ^( ForInit ( commaList )? ) ;
	[GrammarRule("forInit")]
	private AstParserRuleReturnScope<object, IToken> forInit()
	{
		EnterRule_forInit();
		EnterRule("forInit", 17);
		TraceIn("forInit", 17);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forInit_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal141 = default(IToken);
		AstParserRuleReturnScope<object, IToken> commaList140 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal141_tree = default(object);
		RewriteRuleITokenStream stream_SemiColon=new RewriteRuleITokenStream(adaptor,"token SemiColon");
		RewriteRuleSubtreeStream stream_commaList=new RewriteRuleSubtreeStream(adaptor,"rule commaList");
		try { DebugEnterRule(GrammarFileName, "forInit");
		DebugLocation(278, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// Php.g:279:5: ( ( commaList )? ';' -> ^( ForInit ( commaList )? ) )
			DebugEnterAlt(1);
			// Php.g:279:7: ( commaList )? ';'
			{
			DebugLocation(279, 7);
			// Php.g:279:7: ( commaList )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_1 = input.LA(1);

			if ((LA36_1==Ampersand||LA36_1==Array||LA36_1==Bang||LA36_1==Boolean||LA36_1==Clone||LA36_1==Dollar||LA36_1==DoubleQuotedString||LA36_1==HereDoc||LA36_1==IncrementOperator||LA36_1==Integer||LA36_1==List||LA36_1==Minus||LA36_1==New||LA36_1==OpenRoundBracket||LA36_1==Real||LA36_1==SingleQuotedString||LA36_1==SuppressWarnings||LA36_1==Tilde||LA36_1==UnquotedString))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:279:7: commaList
				{
				DebugLocation(279, 7);
				PushFollow(Follow._commaList_in_forInit2188);
				commaList140=commaList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_commaList.Add(commaList140.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(279, 18);
			char_literal141=(IToken)Match(input,SemiColon,Follow._SemiColon_in_forInit2191); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SemiColon.Add(char_literal141);



			{
			// AST REWRITE
			// elements: commaList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 279:22: -> ^( ForInit ( commaList )? )
			{
				DebugLocation(279, 25);
				// Php.g:279:25: ^( ForInit ( commaList )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(279, 27);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ForInit, "ForInit"), root_1);

				DebugLocation(279, 35);
				// Php.g:279:35: ( commaList )?
				if (stream_commaList.HasNext)
				{
					DebugLocation(279, 35);
					adaptor.AddChild(root_1, stream_commaList.NextTree());

				}
				stream_commaList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forInit", 17);
			LeaveRule("forInit", 17);
			LeaveRule_forInit();
			if (state.backtracking > 0) { Memoize(input, 17, forInit_StartIndex); }

		}
		DebugLocation(280, 4);
		} finally { DebugExitRule(GrammarFileName, "forInit"); }
		return retval;

	}
	// $ANTLR end "forInit"

	partial void EnterRule_forCondition();
	partial void LeaveRule_forCondition();
	// $ANTLR start "forCondition"
	// Php.g:282:1: forCondition : ( commaList )? ';' -> ^( ForCondition ( commaList )? ) ;
	[GrammarRule("forCondition")]
	private AstParserRuleReturnScope<object, IToken> forCondition()
	{
		EnterRule_forCondition();
		EnterRule("forCondition", 18);
		TraceIn("forCondition", 18);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forCondition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal143 = default(IToken);
		AstParserRuleReturnScope<object, IToken> commaList142 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal143_tree = default(object);
		RewriteRuleITokenStream stream_SemiColon=new RewriteRuleITokenStream(adaptor,"token SemiColon");
		RewriteRuleSubtreeStream stream_commaList=new RewriteRuleSubtreeStream(adaptor,"rule commaList");
		try { DebugEnterRule(GrammarFileName, "forCondition");
		DebugLocation(282, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// Php.g:283:5: ( ( commaList )? ';' -> ^( ForCondition ( commaList )? ) )
			DebugEnterAlt(1);
			// Php.g:283:7: ( commaList )? ';'
			{
			DebugLocation(283, 7);
			// Php.g:283:7: ( commaList )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_1 = input.LA(1);

			if ((LA37_1==Ampersand||LA37_1==Array||LA37_1==Bang||LA37_1==Boolean||LA37_1==Clone||LA37_1==Dollar||LA37_1==DoubleQuotedString||LA37_1==HereDoc||LA37_1==IncrementOperator||LA37_1==Integer||LA37_1==List||LA37_1==Minus||LA37_1==New||LA37_1==OpenRoundBracket||LA37_1==Real||LA37_1==SingleQuotedString||LA37_1==SuppressWarnings||LA37_1==Tilde||LA37_1==UnquotedString))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:283:7: commaList
				{
				DebugLocation(283, 7);
				PushFollow(Follow._commaList_in_forCondition2217);
				commaList142=commaList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_commaList.Add(commaList142.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(283, 18);
			char_literal143=(IToken)Match(input,SemiColon,Follow._SemiColon_in_forCondition2220); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_SemiColon.Add(char_literal143);



			{
			// AST REWRITE
			// elements: commaList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 283:22: -> ^( ForCondition ( commaList )? )
			{
				DebugLocation(283, 25);
				// Php.g:283:25: ^( ForCondition ( commaList )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(283, 27);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ForCondition, "ForCondition"), root_1);

				DebugLocation(283, 40);
				// Php.g:283:40: ( commaList )?
				if (stream_commaList.HasNext)
				{
					DebugLocation(283, 40);
					adaptor.AddChild(root_1, stream_commaList.NextTree());

				}
				stream_commaList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forCondition", 18);
			LeaveRule("forCondition", 18);
			LeaveRule_forCondition();
			if (state.backtracking > 0) { Memoize(input, 18, forCondition_StartIndex); }

		}
		DebugLocation(284, 4);
		} finally { DebugExitRule(GrammarFileName, "forCondition"); }
		return retval;

	}
	// $ANTLR end "forCondition"

	partial void EnterRule_forUpdate();
	partial void LeaveRule_forUpdate();
	// $ANTLR start "forUpdate"
	// Php.g:286:1: forUpdate : ( commaList )? -> ^( ForUpdate ( commaList )? ) ;
	[GrammarRule("forUpdate")]
	private AstParserRuleReturnScope<object, IToken> forUpdate()
	{
		EnterRule_forUpdate();
		EnterRule("forUpdate", 19);
		TraceIn("forUpdate", 19);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int forUpdate_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> commaList144 = default(AstParserRuleReturnScope<object, IToken>);

		RewriteRuleSubtreeStream stream_commaList=new RewriteRuleSubtreeStream(adaptor,"rule commaList");
		try { DebugEnterRule(GrammarFileName, "forUpdate");
		DebugLocation(286, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// Php.g:287:5: ( ( commaList )? -> ^( ForUpdate ( commaList )? ) )
			DebugEnterAlt(1);
			// Php.g:287:7: ( commaList )?
			{
			DebugLocation(287, 7);
			// Php.g:287:7: ( commaList )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_1 = input.LA(1);

			if ((LA38_1==Ampersand||LA38_1==Array||LA38_1==Bang||LA38_1==Boolean||LA38_1==Clone||LA38_1==Dollar||LA38_1==DoubleQuotedString||LA38_1==HereDoc||LA38_1==IncrementOperator||LA38_1==Integer||LA38_1==List||LA38_1==Minus||LA38_1==New||LA38_1==OpenRoundBracket||LA38_1==Real||LA38_1==SingleQuotedString||LA38_1==SuppressWarnings||LA38_1==Tilde||LA38_1==UnquotedString))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:287:7: commaList
				{
				DebugLocation(287, 7);
				PushFollow(Follow._commaList_in_forUpdate2250);
				commaList144=commaList();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_commaList.Add(commaList144.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }



			{
			// AST REWRITE
			// elements: commaList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 287:18: -> ^( ForUpdate ( commaList )? )
			{
				DebugLocation(287, 21);
				// Php.g:287:21: ^( ForUpdate ( commaList )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(287, 23);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ForUpdate, "ForUpdate"), root_1);

				DebugLocation(287, 33);
				// Php.g:287:33: ( commaList )?
				if (stream_commaList.HasNext)
				{
					DebugLocation(287, 33);
					adaptor.AddChild(root_1, stream_commaList.NextTree());

				}
				stream_commaList.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("forUpdate", 19);
			LeaveRule("forUpdate", 19);
			LeaveRule_forUpdate();
			if (state.backtracking > 0) { Memoize(input, 19, forUpdate_StartIndex); }

		}
		DebugLocation(288, 4);
		} finally { DebugExitRule(GrammarFileName, "forUpdate"); }
		return retval;

	}
	// $ANTLR end "forUpdate"

	partial void EnterRule_cases();
	partial void LeaveRule_cases();
	// $ANTLR start "cases"
	// Php.g:290:1: cases : ( casestatement )* defaultcase ;
	[GrammarRule("cases")]
	private AstParserRuleReturnScope<object, IToken> cases()
	{
		EnterRule_cases();
		EnterRule("cases", 20);
		TraceIn("cases", 20);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cases_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> casestatement145 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> defaultcase146 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "cases");
		DebugLocation(290, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// Php.g:291:5: ( ( casestatement )* defaultcase )
			DebugEnterAlt(1);
			// Php.g:291:7: ( casestatement )* defaultcase
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(291, 7);
			// Php.g:291:7: ( casestatement )*
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, false);
				int LA39_1 = input.LA(1);

				if ((LA39_1==Case))
				{
					alt39 = 1;
				}


				} finally { DebugExitDecision(39); }
				switch ( alt39 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:291:7: casestatement
					{
					DebugLocation(291, 7);
					PushFollow(Follow._casestatement_in_cases2278);
					casestatement145=casestatement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, casestatement145.Tree);

					}
					break;

				default:
					goto loop39;
				}
			}

			loop39:
				;

			} finally { DebugExitSubRule(39); }

			DebugLocation(291, 23);
			PushFollow(Follow._defaultcase_in_cases2282);
			defaultcase146=defaultcase();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, defaultcase146.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cases", 20);
			LeaveRule("cases", 20);
			LeaveRule_cases();
			if (state.backtracking > 0) { Memoize(input, 20, cases_StartIndex); }

		}
		DebugLocation(292, 4);
		} finally { DebugExitRule(GrammarFileName, "cases"); }
		return retval;

	}
	// $ANTLR end "cases"

	partial void EnterRule_casestatement();
	partial void LeaveRule_casestatement();
	// $ANTLR start "casestatement"
	// Php.g:294:1: casestatement : Case ^ expression ':' ! ( statement )* ;
	[GrammarRule("casestatement")]
	private AstParserRuleReturnScope<object, IToken> casestatement()
	{
		EnterRule_casestatement();
		EnterRule("casestatement", 21);
		TraceIn("casestatement", 21);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int casestatement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Case147 = default(IToken);
		IToken char_literal149 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression148 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> statement150 = default(AstParserRuleReturnScope<object, IToken>);

		object Case147_tree = default(object);
		object char_literal149_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "casestatement");
		DebugLocation(294, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// Php.g:295:5: ( Case ^ expression ':' ! ( statement )* )
			DebugEnterAlt(1);
			// Php.g:295:7: Case ^ expression ':' ! ( statement )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(295, 11);
			Case147=(IToken)Match(input,Case,Follow._Case_in_casestatement2299); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Case147_tree = (object)adaptor.Create(Case147);
			root_0 = (object)adaptor.BecomeRoot(Case147_tree, root_0);
			}
			DebugLocation(295, 13);
			PushFollow(Follow._expression_in_casestatement2302);
			expression148=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression148.Tree);
			DebugLocation(295, 27);
			char_literal149=(IToken)Match(input,Colon,Follow._Colon_in_casestatement2304); if (state.failed) return retval;
			DebugLocation(295, 29);
			// Php.g:295:29: ( statement )*
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				int LA40_1 = input.LA(1);

				if ((LA40_1==Abstract||LA40_1==Ampersand||LA40_1==Array||LA40_1==Bang||LA40_1==BodyString||(LA40_1>=Boolean && LA40_1<=Break)||LA40_1==Class||LA40_1==Clone||LA40_1==Continue||(LA40_1>=Do && LA40_1<=Dollar)||(LA40_1>=DoubleQuotedString && LA40_1<=Echo)||LA40_1==For||LA40_1==Foreach||(LA40_1>=Function && LA40_1<=HereDoc)||LA40_1==If||LA40_1==IncrementOperator||(LA40_1>=Integer && LA40_1<=Interface)||LA40_1==List||LA40_1==Minus||LA40_1==New||(LA40_1>=OpenCurlyBracket && LA40_1<=OpenRoundBracket)||LA40_1==Real||(LA40_1>=RequireOperator && LA40_1<=Return)||LA40_1==SingleQuotedString||(LA40_1>=Static && LA40_1<=Tilde)||LA40_1==UnquotedString||LA40_1==While))
				{
					alt40 = 1;
				}


				} finally { DebugExitDecision(40); }
				switch ( alt40 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:295:29: statement
					{
					DebugLocation(295, 29);
					PushFollow(Follow._statement_in_casestatement2307);
					statement150=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement150.Tree);

					}
					break;

				default:
					goto loop40;
				}
			}

			loop40:
				;

			} finally { DebugExitSubRule(40); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("casestatement", 21);
			LeaveRule("casestatement", 21);
			LeaveRule_casestatement();
			if (state.backtracking > 0) { Memoize(input, 21, casestatement_StartIndex); }

		}
		DebugLocation(296, 4);
		} finally { DebugExitRule(GrammarFileName, "casestatement"); }
		return retval;

	}
	// $ANTLR end "casestatement"

	partial void EnterRule_defaultcase();
	partial void LeaveRule_defaultcase();
	// $ANTLR start "defaultcase"
	// Php.g:298:1: defaultcase : ( Default ^ ':' ! ( statement )* ) ;
	[GrammarRule("defaultcase")]
	private AstParserRuleReturnScope<object, IToken> defaultcase()
	{
		EnterRule_defaultcase();
		EnterRule("defaultcase", 22);
		TraceIn("defaultcase", 22);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int defaultcase_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Default151 = default(IToken);
		IToken char_literal152 = default(IToken);
		AstParserRuleReturnScope<object, IToken> statement153 = default(AstParserRuleReturnScope<object, IToken>);

		object Default151_tree = default(object);
		object char_literal152_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "defaultcase");
		DebugLocation(298, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// Php.g:299:5: ( ( Default ^ ':' ! ( statement )* ) )
			DebugEnterAlt(1);
			// Php.g:299:7: ( Default ^ ':' ! ( statement )* )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(299, 7);
			// Php.g:299:7: ( Default ^ ':' ! ( statement )* )
			DebugEnterAlt(1);
			// Php.g:299:8: Default ^ ':' ! ( statement )*
			{
			DebugLocation(299, 15);
			Default151=(IToken)Match(input,Default,Follow._Default_in_defaultcase2327); if (state.failed) return retval;
			if (state.backtracking == 0) {
			Default151_tree = (object)adaptor.Create(Default151);
			root_0 = (object)adaptor.BecomeRoot(Default151_tree, root_0);
			}
			DebugLocation(299, 20);
			char_literal152=(IToken)Match(input,Colon,Follow._Colon_in_defaultcase2330); if (state.failed) return retval;
			DebugLocation(299, 22);
			// Php.g:299:22: ( statement )*
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, false);
				int LA41_1 = input.LA(1);

				if ((LA41_1==Abstract||LA41_1==Ampersand||LA41_1==Array||LA41_1==Bang||LA41_1==BodyString||(LA41_1>=Boolean && LA41_1<=Break)||LA41_1==Class||LA41_1==Clone||LA41_1==Continue||(LA41_1>=Do && LA41_1<=Dollar)||(LA41_1>=DoubleQuotedString && LA41_1<=Echo)||LA41_1==For||LA41_1==Foreach||(LA41_1>=Function && LA41_1<=HereDoc)||LA41_1==If||LA41_1==IncrementOperator||(LA41_1>=Integer && LA41_1<=Interface)||LA41_1==List||LA41_1==Minus||LA41_1==New||(LA41_1>=OpenCurlyBracket && LA41_1<=OpenRoundBracket)||LA41_1==Real||(LA41_1>=RequireOperator && LA41_1<=Return)||LA41_1==SingleQuotedString||(LA41_1>=Static && LA41_1<=Tilde)||LA41_1==UnquotedString||LA41_1==While))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch ( alt41 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:299:22: statement
					{
					DebugLocation(299, 22);
					PushFollow(Follow._statement_in_defaultcase2333);
					statement153=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement153.Tree);

					}
					break;

				default:
					goto loop41;
				}
			}

			loop41:
				;

			} finally { DebugExitSubRule(41); }


			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("defaultcase", 22);
			LeaveRule("defaultcase", 22);
			LeaveRule_defaultcase();
			if (state.backtracking > 0) { Memoize(input, 22, defaultcase_StartIndex); }

		}
		DebugLocation(300, 4);
		} finally { DebugExitRule(GrammarFileName, "defaultcase"); }
		return retval;

	}
	// $ANTLR end "defaultcase"

	partial void EnterRule_functionDefinition();
	partial void LeaveRule_functionDefinition();
	// $ANTLR start "functionDefinition"
	// Php.g:302:1: functionDefinition : Function UnquotedString parametersDefinition bracketedBlock -> ^( Function UnquotedString parametersDefinition bracketedBlock ) ;
	[GrammarRule("functionDefinition")]
	private AstParserRuleReturnScope<object, IToken> functionDefinition()
	{
		EnterRule_functionDefinition();
		EnterRule("functionDefinition", 23);
		TraceIn("functionDefinition", 23);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int functionDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Function154 = default(IToken);
		IToken UnquotedString155 = default(IToken);
		AstParserRuleReturnScope<object, IToken> parametersDefinition156 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bracketedBlock157 = default(AstParserRuleReturnScope<object, IToken>);

		object Function154_tree = default(object);
		object UnquotedString155_tree = default(object);
		RewriteRuleITokenStream stream_Function=new RewriteRuleITokenStream(adaptor,"token Function");
		RewriteRuleITokenStream stream_UnquotedString=new RewriteRuleITokenStream(adaptor,"token UnquotedString");
		RewriteRuleSubtreeStream stream_parametersDefinition=new RewriteRuleSubtreeStream(adaptor,"rule parametersDefinition");
		RewriteRuleSubtreeStream stream_bracketedBlock=new RewriteRuleSubtreeStream(adaptor,"rule bracketedBlock");
		try { DebugEnterRule(GrammarFileName, "functionDefinition");
		DebugLocation(302, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// Php.g:303:5: ( Function UnquotedString parametersDefinition bracketedBlock -> ^( Function UnquotedString parametersDefinition bracketedBlock ) )
			DebugEnterAlt(1);
			// Php.g:303:7: Function UnquotedString parametersDefinition bracketedBlock
			{
			DebugLocation(303, 7);
			Function154=(IToken)Match(input,Function,Follow._Function_in_functionDefinition2352); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_Function.Add(Function154);

			DebugLocation(303, 16);
			UnquotedString155=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_functionDefinition2354); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_UnquotedString.Add(UnquotedString155);

			DebugLocation(303, 31);
			PushFollow(Follow._parametersDefinition_in_functionDefinition2356);
			parametersDefinition156=parametersDefinition();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_parametersDefinition.Add(parametersDefinition156.Tree);
			DebugLocation(303, 52);
			PushFollow(Follow._bracketedBlock_in_functionDefinition2358);
			bracketedBlock157=bracketedBlock();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bracketedBlock.Add(bracketedBlock157.Tree);


			{
			// AST REWRITE
			// elements: Function, UnquotedString, parametersDefinition, bracketedBlock
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 303:67: -> ^( Function UnquotedString parametersDefinition bracketedBlock )
			{
				DebugLocation(304, 9);
				// Php.g:304:9: ^( Function UnquotedString parametersDefinition bracketedBlock )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(304, 11);
				root_1 = (object)adaptor.BecomeRoot(stream_Function.NextNode(), root_1);

				DebugLocation(304, 20);
				adaptor.AddChild(root_1, stream_UnquotedString.NextNode());
				DebugLocation(304, 35);
				adaptor.AddChild(root_1, stream_parametersDefinition.NextTree());
				DebugLocation(304, 56);
				adaptor.AddChild(root_1, stream_bracketedBlock.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functionDefinition", 23);
			LeaveRule("functionDefinition", 23);
			LeaveRule_functionDefinition();
			if (state.backtracking > 0) { Memoize(input, 23, functionDefinition_StartIndex); }

		}
		DebugLocation(305, 4);
		} finally { DebugExitRule(GrammarFileName, "functionDefinition"); }
		return retval;

	}
	// $ANTLR end "functionDefinition"

	partial void EnterRule_parametersDefinition();
	partial void LeaveRule_parametersDefinition();
	// $ANTLR start "parametersDefinition"
	// Php.g:307:1: parametersDefinition : OpenRoundBracket ( paramDef ( Comma paramDef )* )? CloseRoundBracket -> ^( Params ( paramDef )* ) ;
	[GrammarRule("parametersDefinition")]
	private AstParserRuleReturnScope<object, IToken> parametersDefinition()
	{
		EnterRule_parametersDefinition();
		EnterRule("parametersDefinition", 24);
		TraceIn("parametersDefinition", 24);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int parametersDefinition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OpenRoundBracket158 = default(IToken);
		IToken Comma160 = default(IToken);
		IToken CloseRoundBracket162 = default(IToken);
		AstParserRuleReturnScope<object, IToken> paramDef159 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> paramDef161 = default(AstParserRuleReturnScope<object, IToken>);

		object OpenRoundBracket158_tree = default(object);
		object Comma160_tree = default(object);
		object CloseRoundBracket162_tree = default(object);
		RewriteRuleITokenStream stream_OpenRoundBracket=new RewriteRuleITokenStream(adaptor,"token OpenRoundBracket");
		RewriteRuleITokenStream stream_Comma=new RewriteRuleITokenStream(adaptor,"token Comma");
		RewriteRuleITokenStream stream_CloseRoundBracket=new RewriteRuleITokenStream(adaptor,"token CloseRoundBracket");
		RewriteRuleSubtreeStream stream_paramDef=new RewriteRuleSubtreeStream(adaptor,"rule paramDef");
		try { DebugEnterRule(GrammarFileName, "parametersDefinition");
		DebugLocation(307, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// Php.g:308:5: ( OpenRoundBracket ( paramDef ( Comma paramDef )* )? CloseRoundBracket -> ^( Params ( paramDef )* ) )
			DebugEnterAlt(1);
			// Php.g:308:7: OpenRoundBracket ( paramDef ( Comma paramDef )* )? CloseRoundBracket
			{
			DebugLocation(308, 7);
			OpenRoundBracket158=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_parametersDefinition2396); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OpenRoundBracket.Add(OpenRoundBracket158);

			DebugLocation(308, 24);
			// Php.g:308:24: ( paramDef ( Comma paramDef )* )?
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, false);
			int LA43_1 = input.LA(1);

			if ((LA43_1==Ampersand||LA43_1==Dollar))
			{
				alt43 = 1;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:308:25: paramDef ( Comma paramDef )*
				{
				DebugLocation(308, 25);
				PushFollow(Follow._paramDef_in_parametersDefinition2399);
				paramDef159=paramDef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_paramDef.Add(paramDef159.Tree);
				DebugLocation(308, 34);
				// Php.g:308:34: ( Comma paramDef )*
				try { DebugEnterSubRule(42);
				while (true)
				{
					int alt42=2;
					try { DebugEnterDecision(42, false);
					int LA42_1 = input.LA(1);

					if ((LA42_1==Comma))
					{
						alt42 = 1;
					}


					} finally { DebugExitDecision(42); }
					switch ( alt42 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:308:35: Comma paramDef
						{
						DebugLocation(308, 35);
						Comma160=(IToken)Match(input,Comma,Follow._Comma_in_parametersDefinition2402); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_Comma.Add(Comma160);

						DebugLocation(308, 41);
						PushFollow(Follow._paramDef_in_parametersDefinition2404);
						paramDef161=paramDef();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_paramDef.Add(paramDef161.Tree);

						}
						break;

					default:
						goto loop42;
					}
				}

				loop42:
					;

				} finally { DebugExitSubRule(42); }


				}
				break;

			}
			} finally { DebugExitSubRule(43); }

			DebugLocation(308, 54);
			CloseRoundBracket162=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_parametersDefinition2410); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CloseRoundBracket.Add(CloseRoundBracket162);



			{
			// AST REWRITE
			// elements: paramDef
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 308:72: -> ^( Params ( paramDef )* )
			{
				DebugLocation(308, 75);
				// Php.g:308:75: ^( Params ( paramDef )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(308, 77);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(Params, "Params"), root_1);

				DebugLocation(308, 84);
				// Php.g:308:84: ( paramDef )*
				while ( stream_paramDef.HasNext )
				{
					DebugLocation(308, 84);
					adaptor.AddChild(root_1, stream_paramDef.NextTree());

				}
				stream_paramDef.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parametersDefinition", 24);
			LeaveRule("parametersDefinition", 24);
			LeaveRule_parametersDefinition();
			if (state.backtracking > 0) { Memoize(input, 24, parametersDefinition_StartIndex); }

		}
		DebugLocation(309, 4);
		} finally { DebugExitRule(GrammarFileName, "parametersDefinition"); }
		return retval;

	}
	// $ANTLR end "parametersDefinition"

	partial void EnterRule_paramDef();
	partial void LeaveRule_paramDef();
	// $ANTLR start "paramDef"
	// Php.g:311:1: paramDef : paramName ( Equals ^ atom )? ;
	[GrammarRule("paramDef")]
	private AstParserRuleReturnScope<object, IToken> paramDef()
	{
		EnterRule_paramDef();
		EnterRule("paramDef", 25);
		TraceIn("paramDef", 25);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int paramDef_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Equals164 = default(IToken);
		AstParserRuleReturnScope<object, IToken> paramName163 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atom165 = default(AstParserRuleReturnScope<object, IToken>);

		object Equals164_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "paramDef");
		DebugLocation(311, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// Php.g:312:5: ( paramName ( Equals ^ atom )? )
			DebugEnterAlt(1);
			// Php.g:312:7: paramName ( Equals ^ atom )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(312, 7);
			PushFollow(Follow._paramName_in_paramDef2437);
			paramName163=paramName();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, paramName163.Tree);
			DebugLocation(312, 17);
			// Php.g:312:17: ( Equals ^ atom )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_1 = input.LA(1);

			if ((LA44_1==Equals))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:312:18: Equals ^ atom
				{
				DebugLocation(312, 24);
				Equals164=(IToken)Match(input,Equals,Follow._Equals_in_paramDef2440); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Equals164_tree = (object)adaptor.Create(Equals164);
				root_0 = (object)adaptor.BecomeRoot(Equals164_tree, root_0);
				}
				DebugLocation(312, 26);
				PushFollow(Follow._atom_in_paramDef2443);
				atom165=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom165.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("paramDef", 25);
			LeaveRule("paramDef", 25);
			LeaveRule_paramDef();
			if (state.backtracking > 0) { Memoize(input, 25, paramDef_StartIndex); }

		}
		DebugLocation(313, 4);
		} finally { DebugExitRule(GrammarFileName, "paramDef"); }
		return retval;

	}
	// $ANTLR end "paramDef"

	partial void EnterRule_paramName();
	partial void LeaveRule_paramName();
	// $ANTLR start "paramName"
	// Php.g:315:1: paramName : ( Dollar ^ UnquotedString | Ampersand Dollar UnquotedString -> ^( Ampersand ^( Dollar UnquotedString ) ) );
	[GrammarRule("paramName")]
	private AstParserRuleReturnScope<object, IToken> paramName()
	{
		EnterRule_paramName();
		EnterRule("paramName", 26);
		TraceIn("paramName", 26);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int paramName_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Dollar166 = default(IToken);
		IToken UnquotedString167 = default(IToken);
		IToken Ampersand168 = default(IToken);
		IToken Dollar169 = default(IToken);
		IToken UnquotedString170 = default(IToken);

		object Dollar166_tree = default(object);
		object UnquotedString167_tree = default(object);
		object Ampersand168_tree = default(object);
		object Dollar169_tree = default(object);
		object UnquotedString170_tree = default(object);
		RewriteRuleITokenStream stream_Ampersand=new RewriteRuleITokenStream(adaptor,"token Ampersand");
		RewriteRuleITokenStream stream_Dollar=new RewriteRuleITokenStream(adaptor,"token Dollar");
		RewriteRuleITokenStream stream_UnquotedString=new RewriteRuleITokenStream(adaptor,"token UnquotedString");
		try { DebugEnterRule(GrammarFileName, "paramName");
		DebugLocation(315, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// Php.g:316:5: ( Dollar ^ UnquotedString | Ampersand Dollar UnquotedString -> ^( Ampersand ^( Dollar UnquotedString ) ) )
			int alt45=2;
			try { DebugEnterDecision(45, false);
			int LA45_1 = input.LA(1);

			if ((LA45_1==Dollar))
			{
				alt45 = 1;
			}
			else if ((LA45_1==Ampersand))
			{
				alt45 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 45, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:316:7: Dollar ^ UnquotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(316, 13);
				Dollar166=(IToken)Match(input,Dollar,Follow._Dollar_in_paramName2462); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Dollar166_tree = (object)adaptor.Create(Dollar166);
				root_0 = (object)adaptor.BecomeRoot(Dollar166_tree, root_0);
				}
				DebugLocation(316, 15);
				UnquotedString167=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_paramName2465); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString167_tree = (object)adaptor.Create(UnquotedString167);
				adaptor.AddChild(root_0, UnquotedString167_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:317:7: Ampersand Dollar UnquotedString
				{
				DebugLocation(317, 7);
				Ampersand168=(IToken)Match(input,Ampersand,Follow._Ampersand_in_paramName2473); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Ampersand.Add(Ampersand168);

				DebugLocation(317, 17);
				Dollar169=(IToken)Match(input,Dollar,Follow._Dollar_in_paramName2475); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Dollar.Add(Dollar169);

				DebugLocation(317, 24);
				UnquotedString170=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_paramName2477); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_UnquotedString.Add(UnquotedString170);



				{
				// AST REWRITE
				// elements: Ampersand, Dollar, UnquotedString
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 317:39: -> ^( Ampersand ^( Dollar UnquotedString ) )
				{
					DebugLocation(317, 42);
					// Php.g:317:42: ^( Ampersand ^( Dollar UnquotedString ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(317, 44);
					root_1 = (object)adaptor.BecomeRoot(stream_Ampersand.NextNode(), root_1);

					DebugLocation(317, 54);
					// Php.g:317:54: ^( Dollar UnquotedString )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(317, 56);
					root_2 = (object)adaptor.BecomeRoot(stream_Dollar.NextNode(), root_2);

					DebugLocation(317, 63);
					adaptor.AddChild(root_2, stream_UnquotedString.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("paramName", 26);
			LeaveRule("paramName", 26);
			LeaveRule_paramName();
			if (state.backtracking > 0) { Memoize(input, 26, paramName_StartIndex); }

		}
		DebugLocation(318, 4);
		} finally { DebugExitRule(GrammarFileName, "paramName"); }
		return retval;

	}
	// $ANTLR end "paramName"

	partial void EnterRule_commaList();
	partial void LeaveRule_commaList();
	// $ANTLR start "commaList"
	// Php.g:320:1: commaList : expression ( ',' ! expression )* ;
	[GrammarRule("commaList")]
	private AstParserRuleReturnScope<object, IToken> commaList()
	{
		EnterRule_commaList();
		EnterRule("commaList", 27);
		TraceIn("commaList", 27);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int commaList_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal172 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression171 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression173 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal172_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "commaList");
		DebugLocation(320, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// Php.g:321:5: ( expression ( ',' ! expression )* )
			DebugEnterAlt(1);
			// Php.g:321:7: expression ( ',' ! expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(321, 7);
			PushFollow(Follow._expression_in_commaList2506);
			expression171=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression171.Tree);
			DebugLocation(321, 18);
			// Php.g:321:18: ( ',' ! expression )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_1 = input.LA(1);

				if ((LA46_1==Comma))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:321:19: ',' ! expression
					{
					DebugLocation(321, 22);
					char_literal172=(IToken)Match(input,Comma,Follow._Comma_in_commaList2509); if (state.failed) return retval;
					DebugLocation(321, 24);
					PushFollow(Follow._expression_in_commaList2512);
					expression173=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression173.Tree);

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commaList", 27);
			LeaveRule("commaList", 27);
			LeaveRule_commaList();
			if (state.backtracking > 0) { Memoize(input, 27, commaList_StartIndex); }

		}
		DebugLocation(322, 4);
		} finally { DebugExitRule(GrammarFileName, "commaList"); }
		return retval;

	}
	// $ANTLR end "commaList"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// Php.g:324:1: expression : weakLogicalOr ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 28);
		TraceIn("expression", 28);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expression_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> weakLogicalOr174 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(324, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// Php.g:325:5: ( weakLogicalOr )
			DebugEnterAlt(1);
			// Php.g:325:7: weakLogicalOr
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(325, 7);
			PushFollow(Follow._weakLogicalOr_in_expression2536);
			weakLogicalOr174=weakLogicalOr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalOr174.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 28);
			LeaveRule("expression", 28);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 28, expression_StartIndex); }

		}
		DebugLocation(326, 4);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_weakLogicalOr();
	partial void LeaveRule_weakLogicalOr();
	// $ANTLR start "weakLogicalOr"
	// Php.g:328:1: weakLogicalOr : weakLogicalXor ( Or ^ weakLogicalXor )* ;
	[GrammarRule("weakLogicalOr")]
	private AstParserRuleReturnScope<object, IToken> weakLogicalOr()
	{
		EnterRule_weakLogicalOr();
		EnterRule("weakLogicalOr", 29);
		TraceIn("weakLogicalOr", 29);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int weakLogicalOr_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Or176 = default(IToken);
		AstParserRuleReturnScope<object, IToken> weakLogicalXor175 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> weakLogicalXor177 = default(AstParserRuleReturnScope<object, IToken>);

		object Or176_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "weakLogicalOr");
		DebugLocation(328, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// Php.g:329:5: ( weakLogicalXor ( Or ^ weakLogicalXor )* )
			DebugEnterAlt(1);
			// Php.g:329:7: weakLogicalXor ( Or ^ weakLogicalXor )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(329, 7);
			PushFollow(Follow._weakLogicalXor_in_weakLogicalOr2553);
			weakLogicalXor175=weakLogicalXor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalXor175.Tree);
			DebugLocation(329, 22);
			// Php.g:329:22: ( Or ^ weakLogicalXor )*
			try { DebugEnterSubRule(47);
			while (true)
			{
				int alt47=2;
				try { DebugEnterDecision(47, false);
				int LA47_1 = input.LA(1);

				if ((LA47_1==Or))
				{
					int LA47_2 = input.LA(2);

					if ((EvaluatePredicate(synpred68_Php_fragment)))
					{
						alt47 = 1;
					}


				}


				} finally { DebugExitDecision(47); }
				switch ( alt47 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:329:23: Or ^ weakLogicalXor
					{
					DebugLocation(329, 25);
					Or176=(IToken)Match(input,Or,Follow._Or_in_weakLogicalOr2556); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Or176_tree = (object)adaptor.Create(Or176);
					root_0 = (object)adaptor.BecomeRoot(Or176_tree, root_0);
					}
					DebugLocation(329, 27);
					PushFollow(Follow._weakLogicalXor_in_weakLogicalOr2559);
					weakLogicalXor177=weakLogicalXor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalXor177.Tree);

					}
					break;

				default:
					goto loop47;
				}
			}

			loop47:
				;

			} finally { DebugExitSubRule(47); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("weakLogicalOr", 29);
			LeaveRule("weakLogicalOr", 29);
			LeaveRule_weakLogicalOr();
			if (state.backtracking > 0) { Memoize(input, 29, weakLogicalOr_StartIndex); }

		}
		DebugLocation(330, 4);
		} finally { DebugExitRule(GrammarFileName, "weakLogicalOr"); }
		return retval;

	}
	// $ANTLR end "weakLogicalOr"

	partial void EnterRule_weakLogicalXor();
	partial void LeaveRule_weakLogicalXor();
	// $ANTLR start "weakLogicalXor"
	// Php.g:332:1: weakLogicalXor : weakLogicalAnd ( Xor ^ weakLogicalAnd )* ;
	[GrammarRule("weakLogicalXor")]
	private AstParserRuleReturnScope<object, IToken> weakLogicalXor()
	{
		EnterRule_weakLogicalXor();
		EnterRule("weakLogicalXor", 30);
		TraceIn("weakLogicalXor", 30);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int weakLogicalXor_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Xor179 = default(IToken);
		AstParserRuleReturnScope<object, IToken> weakLogicalAnd178 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> weakLogicalAnd180 = default(AstParserRuleReturnScope<object, IToken>);

		object Xor179_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "weakLogicalXor");
		DebugLocation(332, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// Php.g:333:5: ( weakLogicalAnd ( Xor ^ weakLogicalAnd )* )
			DebugEnterAlt(1);
			// Php.g:333:7: weakLogicalAnd ( Xor ^ weakLogicalAnd )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(333, 7);
			PushFollow(Follow._weakLogicalAnd_in_weakLogicalXor2578);
			weakLogicalAnd178=weakLogicalAnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalAnd178.Tree);
			DebugLocation(333, 22);
			// Php.g:333:22: ( Xor ^ weakLogicalAnd )*
			try { DebugEnterSubRule(48);
			while (true)
			{
				int alt48=2;
				try { DebugEnterDecision(48, false);
				int LA48_1 = input.LA(1);

				if ((LA48_1==Xor))
				{
					int LA48_2 = input.LA(2);

					if ((EvaluatePredicate(synpred69_Php_fragment)))
					{
						alt48 = 1;
					}


				}


				} finally { DebugExitDecision(48); }
				switch ( alt48 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:333:23: Xor ^ weakLogicalAnd
					{
					DebugLocation(333, 26);
					Xor179=(IToken)Match(input,Xor,Follow._Xor_in_weakLogicalXor2581); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Xor179_tree = (object)adaptor.Create(Xor179);
					root_0 = (object)adaptor.BecomeRoot(Xor179_tree, root_0);
					}
					DebugLocation(333, 28);
					PushFollow(Follow._weakLogicalAnd_in_weakLogicalXor2584);
					weakLogicalAnd180=weakLogicalAnd();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalAnd180.Tree);

					}
					break;

				default:
					goto loop48;
				}
			}

			loop48:
				;

			} finally { DebugExitSubRule(48); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("weakLogicalXor", 30);
			LeaveRule("weakLogicalXor", 30);
			LeaveRule_weakLogicalXor();
			if (state.backtracking > 0) { Memoize(input, 30, weakLogicalXor_StartIndex); }

		}
		DebugLocation(334, 4);
		} finally { DebugExitRule(GrammarFileName, "weakLogicalXor"); }
		return retval;

	}
	// $ANTLR end "weakLogicalXor"

	partial void EnterRule_weakLogicalAnd();
	partial void LeaveRule_weakLogicalAnd();
	// $ANTLR start "weakLogicalAnd"
	// Php.g:336:1: weakLogicalAnd : assignment ( And ^ assignment )* ;
	[GrammarRule("weakLogicalAnd")]
	private AstParserRuleReturnScope<object, IToken> weakLogicalAnd()
	{
		EnterRule_weakLogicalAnd();
		EnterRule("weakLogicalAnd", 31);
		TraceIn("weakLogicalAnd", 31);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int weakLogicalAnd_StartIndex = input.Index;

		object root_0 = default(object);

		IToken And182 = default(IToken);
		AstParserRuleReturnScope<object, IToken> assignment181 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> assignment183 = default(AstParserRuleReturnScope<object, IToken>);

		object And182_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "weakLogicalAnd");
		DebugLocation(336, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// Php.g:337:5: ( assignment ( And ^ assignment )* )
			DebugEnterAlt(1);
			// Php.g:337:7: assignment ( And ^ assignment )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(337, 7);
			PushFollow(Follow._assignment_in_weakLogicalAnd2607);
			assignment181=assignment();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment181.Tree);
			DebugLocation(337, 18);
			// Php.g:337:18: ( And ^ assignment )*
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				int LA49_1 = input.LA(1);

				if ((LA49_1==And))
				{
					int LA49_2 = input.LA(2);

					if ((EvaluatePredicate(synpred70_Php_fragment)))
					{
						alt49 = 1;
					}


				}


				} finally { DebugExitDecision(49); }
				switch ( alt49 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:337:19: And ^ assignment
					{
					DebugLocation(337, 22);
					And182=(IToken)Match(input,And,Follow._And_in_weakLogicalAnd2610); if (state.failed) return retval;
					if (state.backtracking == 0) {
					And182_tree = (object)adaptor.Create(And182);
					root_0 = (object)adaptor.BecomeRoot(And182_tree, root_0);
					}
					DebugLocation(337, 24);
					PushFollow(Follow._assignment_in_weakLogicalAnd2613);
					assignment183=assignment();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment183.Tree);

					}
					break;

				default:
					goto loop49;
				}
			}

			loop49:
				;

			} finally { DebugExitSubRule(49); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("weakLogicalAnd", 31);
			LeaveRule("weakLogicalAnd", 31);
			LeaveRule_weakLogicalAnd();
			if (state.backtracking > 0) { Memoize(input, 31, weakLogicalAnd_StartIndex); }

		}
		DebugLocation(338, 4);
		} finally { DebugExitRule(GrammarFileName, "weakLogicalAnd"); }
		return retval;

	}
	// $ANTLR end "weakLogicalAnd"

	partial void EnterRule_assignment();
	partial void LeaveRule_assignment();
	// $ANTLR start "assignment"
	// Php.g:340:1: assignment : ( listVariables ( ( Equals | AsignmentOperator ) ^ assignment ) | ternary );
	[GrammarRule("assignment")]
	private AstParserRuleReturnScope<object, IToken> assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 32);
		TraceIn("assignment", 32);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int assignment_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set185 = default(IToken);
		AstParserRuleReturnScope<object, IToken> listVariables184 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> assignment186 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> ternary187 = default(AstParserRuleReturnScope<object, IToken>);

		object set185_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(340, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// Php.g:341:5: ( listVariables ( ( Equals | AsignmentOperator ) ^ assignment ) | ternary )
			int alt50=2;
			try { DebugEnterDecision(50, false);
			switch (input.LA(1))
			{
			case List:
				{
				alt50 = 1;
				}
				break;
			case UnquotedString:
				{
				switch (input.LA(2))
				{
				case ClassMember:
					{
					int LA50_3 = input.LA(3);

					if ((EvaluatePredicate(synpred72_Php_fragment)))
					{
						alt50 = 1;
					}
					else if ((true))
					{
						alt50 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 50, 18, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case OpenSquareBracket:
					{
					int LA50_3 = input.LA(3);

					if ((EvaluatePredicate(synpred72_Php_fragment)))
					{
						alt50 = 1;
					}
					else if ((true))
					{
						alt50 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 50, 19, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case InstanceMember:
					{
					int LA50_3 = input.LA(3);

					if ((EvaluatePredicate(synpred72_Php_fragment)))
					{
						alt50 = 1;
					}
					else if ((true))
					{
						alt50 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 50, 20, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case AsignmentOperator:
				case Equals:
					{
					alt50 = 1;
					}
					break;
				case EOF:
				case Ampersand:
				case And:
				case ArrayAssign:
				case Asterisk:
				case BodyString:
				case CloseRoundBracket:
				case CloseSquareBracket:
				case Colon:
				case Comma:
				case ComparisionOperator:
				case Dot:
				case EqualityOperator:
				case Forwardslash:
				case IncrementOperator:
				case Instanceof:
				case LogicalAnd:
				case LogicalOr:
				case Minus:
				case OpenRoundBracket:
				case Or:
				case Percent:
				case Pipe:
				case Plus:
				case QuestionMark:
				case SemiColon:
				case ShiftOperator:
				case Xor:
					{
					alt50 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 50, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case Dollar:
				{
				int LA50_2 = input.LA(2);

				if ((LA50_2==Dollar))
				{
					int LA50_3 = input.LA(3);

					if ((EvaluatePredicate(synpred72_Php_fragment)))
					{
						alt50 = 1;
					}
					else if ((true))
					{
						alt50 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 50, 46, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA50_2==UnquotedString))
				{
					int LA50_3 = input.LA(3);

					if ((EvaluatePredicate(synpred72_Php_fragment)))
					{
						alt50 = 1;
					}
					else if ((true))
					{
						alt50 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 50, 47, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
			case Array:
			case Bang:
			case Boolean:
			case Clone:
			case DoubleQuotedString:
			case HereDoc:
			case IncrementOperator:
			case Integer:
			case Minus:
			case New:
			case OpenRoundBracket:
			case Real:
			case SingleQuotedString:
			case SuppressWarnings:
			case Tilde:
				{
				alt50 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 50, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:341:7: listVariables ( ( Equals | AsignmentOperator ) ^ assignment )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(341, 7);
				PushFollow(Follow._listVariables_in_assignment2632);
				listVariables184=listVariables();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, listVariables184.Tree);
				DebugLocation(341, 21);
				// Php.g:341:21: ( ( Equals | AsignmentOperator ) ^ assignment )
				DebugEnterAlt(1);
				// Php.g:341:22: ( Equals | AsignmentOperator ) ^ assignment
				{
				DebugLocation(341, 50);

				set185=(IToken)input.LT(1);
				set185=(IToken)input.LT(1);
				if (input.LA(1)==AsignmentOperator||input.LA(1)==Equals)
				{
					input.Consume();
					if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot((object)adaptor.Create(set185), root_0);
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(341, 52);
				PushFollow(Follow._assignment_in_assignment2644);
				assignment186=assignment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment186.Tree);

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:342:7: ternary
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(342, 7);
				PushFollow(Follow._ternary_in_assignment2654);
				ternary187=ternary();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ternary187.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment", 32);
			LeaveRule("assignment", 32);
			LeaveRule_assignment();
			if (state.backtracking > 0) { Memoize(input, 32, assignment_StartIndex); }

		}
		DebugLocation(343, 4);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return retval;

	}
	// $ANTLR end "assignment"

	partial void EnterRule_listVariables();
	partial void LeaveRule_listVariables();
	// $ANTLR start "listVariables"
	// Php.g:345:1: listVariables : ( List ^ OpenRoundBracket ! name ( ',' ! name )* CloseRoundBracket !| name );
	[GrammarRule("listVariables")]
	private AstParserRuleReturnScope<object, IToken> listVariables()
	{
		EnterRule_listVariables();
		EnterRule("listVariables", 33);
		TraceIn("listVariables", 33);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int listVariables_StartIndex = input.Index;

		object root_0 = default(object);

		IToken List188 = default(IToken);
		IToken OpenRoundBracket189 = default(IToken);
		IToken char_literal191 = default(IToken);
		IToken CloseRoundBracket193 = default(IToken);
		AstParserRuleReturnScope<object, IToken> name190 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> name192 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> name194 = default(AstParserRuleReturnScope<object, IToken>);

		object List188_tree = default(object);
		object OpenRoundBracket189_tree = default(object);
		object char_literal191_tree = default(object);
		object CloseRoundBracket193_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "listVariables");
		DebugLocation(345, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// Php.g:346:5: ( List ^ OpenRoundBracket ! name ( ',' ! name )* CloseRoundBracket !| name )
			int alt52=2;
			try { DebugEnterDecision(52, false);
			int LA52_1 = input.LA(1);

			if ((LA52_1==List))
			{
				alt52 = 1;
			}
			else if ((LA52_1==Dollar||LA52_1==UnquotedString))
			{
				alt52 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 52, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:346:7: List ^ OpenRoundBracket ! name ( ',' ! name )* CloseRoundBracket !
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(346, 11);
				List188=(IToken)Match(input,List,Follow._List_in_listVariables2671); if (state.failed) return retval;
				if (state.backtracking == 0) {
				List188_tree = (object)adaptor.Create(List188);
				root_0 = (object)adaptor.BecomeRoot(List188_tree, root_0);
				}
				DebugLocation(346, 29);
				OpenRoundBracket189=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_listVariables2674); if (state.failed) return retval;
				DebugLocation(346, 31);
				PushFollow(Follow._name_in_listVariables2677);
				name190=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name190.Tree);
				DebugLocation(346, 36);
				// Php.g:346:36: ( ',' ! name )*
				try { DebugEnterSubRule(51);
				while (true)
				{
					int alt51=2;
					try { DebugEnterDecision(51, false);
					int LA51_1 = input.LA(1);

					if ((LA51_1==Comma))
					{
						alt51 = 1;
					}


					} finally { DebugExitDecision(51); }
					switch ( alt51 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:346:37: ',' ! name
						{
						DebugLocation(346, 40);
						char_literal191=(IToken)Match(input,Comma,Follow._Comma_in_listVariables2680); if (state.failed) return retval;
						DebugLocation(346, 42);
						PushFollow(Follow._name_in_listVariables2683);
						name192=name();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, name192.Tree);

						}
						break;

					default:
						goto loop51;
					}
				}

				loop51:
					;

				} finally { DebugExitSubRule(51); }

				DebugLocation(346, 66);
				CloseRoundBracket193=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_listVariables2687); if (state.failed) return retval;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:347:7: name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(347, 7);
				PushFollow(Follow._name_in_listVariables2697);
				name194=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name194.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("listVariables", 33);
			LeaveRule("listVariables", 33);
			LeaveRule_listVariables();
			if (state.backtracking > 0) { Memoize(input, 33, listVariables_StartIndex); }

		}
		DebugLocation(348, 4);
		} finally { DebugExitRule(GrammarFileName, "listVariables"); }
		return retval;

	}
	// $ANTLR end "listVariables"

	partial void EnterRule_ternary();
	partial void LeaveRule_ternary();
	// $ANTLR start "ternary"
	// Php.g:350:1: ternary : ( logicalOr QuestionMark expression Colon expression -> ^( IfExpression logicalOr ( expression )* ) | logicalOr );
	[GrammarRule("ternary")]
	private AstParserRuleReturnScope<object, IToken> ternary()
	{
		EnterRule_ternary();
		EnterRule("ternary", 34);
		TraceIn("ternary", 34);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int ternary_StartIndex = input.Index;

		object root_0 = default(object);

		IToken QuestionMark196 = default(IToken);
		IToken Colon198 = default(IToken);
		AstParserRuleReturnScope<object, IToken> logicalOr195 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression197 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression199 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> logicalOr200 = default(AstParserRuleReturnScope<object, IToken>);

		object QuestionMark196_tree = default(object);
		object Colon198_tree = default(object);
		RewriteRuleITokenStream stream_QuestionMark=new RewriteRuleITokenStream(adaptor,"token QuestionMark");
		RewriteRuleITokenStream stream_Colon=new RewriteRuleITokenStream(adaptor,"token Colon");
		RewriteRuleSubtreeStream stream_logicalOr=new RewriteRuleSubtreeStream(adaptor,"rule logicalOr");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "ternary");
		DebugLocation(350, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// Php.g:351:5: ( logicalOr QuestionMark expression Colon expression -> ^( IfExpression logicalOr ( expression )* ) | logicalOr )
			int alt53=2;
			try { DebugEnterDecision(53, false);
			try
			{
				alt53 = dfa53.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:351:7: logicalOr QuestionMark expression Colon expression
				{
				DebugLocation(351, 7);
				PushFollow(Follow._logicalOr_in_ternary2714);
				logicalOr195=logicalOr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_logicalOr.Add(logicalOr195.Tree);
				DebugLocation(351, 17);
				QuestionMark196=(IToken)Match(input,QuestionMark,Follow._QuestionMark_in_ternary2716); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_QuestionMark.Add(QuestionMark196);

				DebugLocation(351, 30);
				PushFollow(Follow._expression_in_ternary2718);
				expression197=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression197.Tree);
				DebugLocation(351, 41);
				Colon198=(IToken)Match(input,Colon,Follow._Colon_in_ternary2720); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_Colon.Add(Colon198);

				DebugLocation(351, 47);
				PushFollow(Follow._expression_in_ternary2722);
				expression199=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expression.Add(expression199.Tree);


				{
				// AST REWRITE
				// elements: logicalOr, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 351:58: -> ^( IfExpression logicalOr ( expression )* )
				{
					DebugLocation(351, 61);
					// Php.g:351:61: ^( IfExpression logicalOr ( expression )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(351, 63);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(IfExpression, "IfExpression"), root_1);

					DebugLocation(351, 76);
					adaptor.AddChild(root_1, stream_logicalOr.NextTree());
					DebugLocation(351, 86);
					// Php.g:351:86: ( expression )*
					while ( stream_expression.HasNext )
					{
						DebugLocation(351, 86);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:352:7: logicalOr
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(352, 7);
				PushFollow(Follow._logicalOr_in_ternary2741);
				logicalOr200=logicalOr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logicalOr200.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ternary", 34);
			LeaveRule("ternary", 34);
			LeaveRule_ternary();
			if (state.backtracking > 0) { Memoize(input, 34, ternary_StartIndex); }

		}
		DebugLocation(353, 4);
		} finally { DebugExitRule(GrammarFileName, "ternary"); }
		return retval;

	}
	// $ANTLR end "ternary"

	partial void EnterRule_logicalOr();
	partial void LeaveRule_logicalOr();
	// $ANTLR start "logicalOr"
	// Php.g:355:1: logicalOr : logicalAnd ( LogicalOr ^ logicalAnd )* ;
	[GrammarRule("logicalOr")]
	private AstParserRuleReturnScope<object, IToken> logicalOr()
	{
		EnterRule_logicalOr();
		EnterRule("logicalOr", 35);
		TraceIn("logicalOr", 35);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int logicalOr_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LogicalOr202 = default(IToken);
		AstParserRuleReturnScope<object, IToken> logicalAnd201 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> logicalAnd203 = default(AstParserRuleReturnScope<object, IToken>);

		object LogicalOr202_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalOr");
		DebugLocation(355, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// Php.g:356:5: ( logicalAnd ( LogicalOr ^ logicalAnd )* )
			DebugEnterAlt(1);
			// Php.g:356:7: logicalAnd ( LogicalOr ^ logicalAnd )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(356, 7);
			PushFollow(Follow._logicalAnd_in_logicalOr2762);
			logicalAnd201=logicalAnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalAnd201.Tree);
			DebugLocation(356, 18);
			// Php.g:356:18: ( LogicalOr ^ logicalAnd )*
			try { DebugEnterSubRule(54);
			while (true)
			{
				int alt54=2;
				try { DebugEnterDecision(54, false);
				int LA54_1 = input.LA(1);

				if ((LA54_1==LogicalOr))
				{
					alt54 = 1;
				}


				} finally { DebugExitDecision(54); }
				switch ( alt54 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:356:19: LogicalOr ^ logicalAnd
					{
					DebugLocation(356, 28);
					LogicalOr202=(IToken)Match(input,LogicalOr,Follow._LogicalOr_in_logicalOr2765); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LogicalOr202_tree = (object)adaptor.Create(LogicalOr202);
					root_0 = (object)adaptor.BecomeRoot(LogicalOr202_tree, root_0);
					}
					DebugLocation(356, 30);
					PushFollow(Follow._logicalAnd_in_logicalOr2768);
					logicalAnd203=logicalAnd();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logicalAnd203.Tree);

					}
					break;

				default:
					goto loop54;
				}
			}

			loop54:
				;

			} finally { DebugExitSubRule(54); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalOr", 35);
			LeaveRule("logicalOr", 35);
			LeaveRule_logicalOr();
			if (state.backtracking > 0) { Memoize(input, 35, logicalOr_StartIndex); }

		}
		DebugLocation(357, 4);
		} finally { DebugExitRule(GrammarFileName, "logicalOr"); }
		return retval;

	}
	// $ANTLR end "logicalOr"

	partial void EnterRule_logicalAnd();
	partial void LeaveRule_logicalAnd();
	// $ANTLR start "logicalAnd"
	// Php.g:359:1: logicalAnd : bitwiseOr ( LogicalAnd ^ bitwiseOr )* ;
	[GrammarRule("logicalAnd")]
	private AstParserRuleReturnScope<object, IToken> logicalAnd()
	{
		EnterRule_logicalAnd();
		EnterRule("logicalAnd", 36);
		TraceIn("logicalAnd", 36);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int logicalAnd_StartIndex = input.Index;

		object root_0 = default(object);

		IToken LogicalAnd205 = default(IToken);
		AstParserRuleReturnScope<object, IToken> bitwiseOr204 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bitwiseOr206 = default(AstParserRuleReturnScope<object, IToken>);

		object LogicalAnd205_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalAnd");
		DebugLocation(359, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// Php.g:360:5: ( bitwiseOr ( LogicalAnd ^ bitwiseOr )* )
			DebugEnterAlt(1);
			// Php.g:360:7: bitwiseOr ( LogicalAnd ^ bitwiseOr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(360, 7);
			PushFollow(Follow._bitwiseOr_in_logicalAnd2787);
			bitwiseOr204=bitwiseOr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseOr204.Tree);
			DebugLocation(360, 17);
			// Php.g:360:17: ( LogicalAnd ^ bitwiseOr )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_1 = input.LA(1);

				if ((LA55_1==LogicalAnd))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:360:18: LogicalAnd ^ bitwiseOr
					{
					DebugLocation(360, 28);
					LogicalAnd205=(IToken)Match(input,LogicalAnd,Follow._LogicalAnd_in_logicalAnd2790); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LogicalAnd205_tree = (object)adaptor.Create(LogicalAnd205);
					root_0 = (object)adaptor.BecomeRoot(LogicalAnd205_tree, root_0);
					}
					DebugLocation(360, 30);
					PushFollow(Follow._bitwiseOr_in_logicalAnd2793);
					bitwiseOr206=bitwiseOr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitwiseOr206.Tree);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalAnd", 36);
			LeaveRule("logicalAnd", 36);
			LeaveRule_logicalAnd();
			if (state.backtracking > 0) { Memoize(input, 36, logicalAnd_StartIndex); }

		}
		DebugLocation(361, 4);
		} finally { DebugExitRule(GrammarFileName, "logicalAnd"); }
		return retval;

	}
	// $ANTLR end "logicalAnd"

	partial void EnterRule_bitwiseOr();
	partial void LeaveRule_bitwiseOr();
	// $ANTLR start "bitwiseOr"
	// Php.g:363:1: bitwiseOr : bitWiseAnd ( Pipe ^ bitWiseAnd )* ;
	[GrammarRule("bitwiseOr")]
	private AstParserRuleReturnScope<object, IToken> bitwiseOr()
	{
		EnterRule_bitwiseOr();
		EnterRule("bitwiseOr", 37);
		TraceIn("bitwiseOr", 37);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bitwiseOr_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Pipe208 = default(IToken);
		AstParserRuleReturnScope<object, IToken> bitWiseAnd207 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bitWiseAnd209 = default(AstParserRuleReturnScope<object, IToken>);

		object Pipe208_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitwiseOr");
		DebugLocation(363, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// Php.g:364:5: ( bitWiseAnd ( Pipe ^ bitWiseAnd )* )
			DebugEnterAlt(1);
			// Php.g:364:7: bitWiseAnd ( Pipe ^ bitWiseAnd )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(364, 7);
			PushFollow(Follow._bitWiseAnd_in_bitwiseOr2816);
			bitWiseAnd207=bitWiseAnd();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitWiseAnd207.Tree);
			DebugLocation(364, 18);
			// Php.g:364:18: ( Pipe ^ bitWiseAnd )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_1 = input.LA(1);

				if ((LA56_1==Pipe))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:364:19: Pipe ^ bitWiseAnd
					{
					DebugLocation(364, 23);
					Pipe208=(IToken)Match(input,Pipe,Follow._Pipe_in_bitwiseOr2819); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Pipe208_tree = (object)adaptor.Create(Pipe208);
					root_0 = (object)adaptor.BecomeRoot(Pipe208_tree, root_0);
					}
					DebugLocation(364, 25);
					PushFollow(Follow._bitWiseAnd_in_bitwiseOr2822);
					bitWiseAnd209=bitWiseAnd();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bitWiseAnd209.Tree);

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitwiseOr", 37);
			LeaveRule("bitwiseOr", 37);
			LeaveRule_bitwiseOr();
			if (state.backtracking > 0) { Memoize(input, 37, bitwiseOr_StartIndex); }

		}
		DebugLocation(365, 4);
		} finally { DebugExitRule(GrammarFileName, "bitwiseOr"); }
		return retval;

	}
	// $ANTLR end "bitwiseOr"

	partial void EnterRule_bitWiseAnd();
	partial void LeaveRule_bitWiseAnd();
	// $ANTLR start "bitWiseAnd"
	// Php.g:367:1: bitWiseAnd : equalityCheck ( Ampersand ^ equalityCheck )* ;
	[GrammarRule("bitWiseAnd")]
	private AstParserRuleReturnScope<object, IToken> bitWiseAnd()
	{
		EnterRule_bitWiseAnd();
		EnterRule("bitWiseAnd", 38);
		TraceIn("bitWiseAnd", 38);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bitWiseAnd_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Ampersand211 = default(IToken);
		AstParserRuleReturnScope<object, IToken> equalityCheck210 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> equalityCheck212 = default(AstParserRuleReturnScope<object, IToken>);

		object Ampersand211_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitWiseAnd");
		DebugLocation(367, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// Php.g:368:5: ( equalityCheck ( Ampersand ^ equalityCheck )* )
			DebugEnterAlt(1);
			// Php.g:368:7: equalityCheck ( Ampersand ^ equalityCheck )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(368, 7);
			PushFollow(Follow._equalityCheck_in_bitWiseAnd2841);
			equalityCheck210=equalityCheck();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equalityCheck210.Tree);
			DebugLocation(368, 21);
			// Php.g:368:21: ( Ampersand ^ equalityCheck )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, false);
				int LA57_1 = input.LA(1);

				if ((LA57_1==Ampersand))
				{
					alt57 = 1;
				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:368:22: Ampersand ^ equalityCheck
					{
					DebugLocation(368, 31);
					Ampersand211=(IToken)Match(input,Ampersand,Follow._Ampersand_in_bitWiseAnd2844); if (state.failed) return retval;
					if (state.backtracking == 0) {
					Ampersand211_tree = (object)adaptor.Create(Ampersand211);
					root_0 = (object)adaptor.BecomeRoot(Ampersand211_tree, root_0);
					}
					DebugLocation(368, 33);
					PushFollow(Follow._equalityCheck_in_bitWiseAnd2847);
					equalityCheck212=equalityCheck();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equalityCheck212.Tree);

					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitWiseAnd", 38);
			LeaveRule("bitWiseAnd", 38);
			LeaveRule_bitWiseAnd();
			if (state.backtracking > 0) { Memoize(input, 38, bitWiseAnd_StartIndex); }

		}
		DebugLocation(369, 4);
		} finally { DebugExitRule(GrammarFileName, "bitWiseAnd"); }
		return retval;

	}
	// $ANTLR end "bitWiseAnd"

	partial void EnterRule_equalityCheck();
	partial void LeaveRule_equalityCheck();
	// $ANTLR start "equalityCheck"
	// Php.g:371:1: equalityCheck : comparisionCheck ( EqualityOperator ^ comparisionCheck )? ;
	[GrammarRule("equalityCheck")]
	private AstParserRuleReturnScope<object, IToken> equalityCheck()
	{
		EnterRule_equalityCheck();
		EnterRule("equalityCheck", 39);
		TraceIn("equalityCheck", 39);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int equalityCheck_StartIndex = input.Index;

		object root_0 = default(object);

		IToken EqualityOperator214 = default(IToken);
		AstParserRuleReturnScope<object, IToken> comparisionCheck213 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> comparisionCheck215 = default(AstParserRuleReturnScope<object, IToken>);

		object EqualityOperator214_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "equalityCheck");
		DebugLocation(371, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// Php.g:372:5: ( comparisionCheck ( EqualityOperator ^ comparisionCheck )? )
			DebugEnterAlt(1);
			// Php.g:372:7: comparisionCheck ( EqualityOperator ^ comparisionCheck )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(372, 7);
			PushFollow(Follow._comparisionCheck_in_equalityCheck2866);
			comparisionCheck213=comparisionCheck();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, comparisionCheck213.Tree);
			DebugLocation(372, 24);
			// Php.g:372:24: ( EqualityOperator ^ comparisionCheck )?
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_1 = input.LA(1);

			if ((LA58_1==EqualityOperator))
			{
				alt58 = 1;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:372:25: EqualityOperator ^ comparisionCheck
				{
				DebugLocation(372, 41);
				EqualityOperator214=(IToken)Match(input,EqualityOperator,Follow._EqualityOperator_in_equalityCheck2869); if (state.failed) return retval;
				if (state.backtracking == 0) {
				EqualityOperator214_tree = (object)adaptor.Create(EqualityOperator214);
				root_0 = (object)adaptor.BecomeRoot(EqualityOperator214_tree, root_0);
				}
				DebugLocation(372, 43);
				PushFollow(Follow._comparisionCheck_in_equalityCheck2872);
				comparisionCheck215=comparisionCheck();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, comparisionCheck215.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(58); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equalityCheck", 39);
			LeaveRule("equalityCheck", 39);
			LeaveRule_equalityCheck();
			if (state.backtracking > 0) { Memoize(input, 39, equalityCheck_StartIndex); }

		}
		DebugLocation(373, 4);
		} finally { DebugExitRule(GrammarFileName, "equalityCheck"); }
		return retval;

	}
	// $ANTLR end "equalityCheck"

	partial void EnterRule_comparisionCheck();
	partial void LeaveRule_comparisionCheck();
	// $ANTLR start "comparisionCheck"
	// Php.g:375:1: comparisionCheck : bitWiseShift ( ComparisionOperator ^ bitWiseShift )? ;
	[GrammarRule("comparisionCheck")]
	private AstParserRuleReturnScope<object, IToken> comparisionCheck()
	{
		EnterRule_comparisionCheck();
		EnterRule("comparisionCheck", 40);
		TraceIn("comparisionCheck", 40);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int comparisionCheck_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ComparisionOperator217 = default(IToken);
		AstParserRuleReturnScope<object, IToken> bitWiseShift216 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> bitWiseShift218 = default(AstParserRuleReturnScope<object, IToken>);

		object ComparisionOperator217_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "comparisionCheck");
		DebugLocation(375, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// Php.g:376:5: ( bitWiseShift ( ComparisionOperator ^ bitWiseShift )? )
			DebugEnterAlt(1);
			// Php.g:376:7: bitWiseShift ( ComparisionOperator ^ bitWiseShift )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(376, 7);
			PushFollow(Follow._bitWiseShift_in_comparisionCheck2895);
			bitWiseShift216=bitWiseShift();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bitWiseShift216.Tree);
			DebugLocation(376, 20);
			// Php.g:376:20: ( ComparisionOperator ^ bitWiseShift )?
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, false);
			int LA59_1 = input.LA(1);

			if ((LA59_1==ComparisionOperator))
			{
				alt59 = 1;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:376:21: ComparisionOperator ^ bitWiseShift
				{
				DebugLocation(376, 40);
				ComparisionOperator217=(IToken)Match(input,ComparisionOperator,Follow._ComparisionOperator_in_comparisionCheck2898); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ComparisionOperator217_tree = (object)adaptor.Create(ComparisionOperator217);
				root_0 = (object)adaptor.BecomeRoot(ComparisionOperator217_tree, root_0);
				}
				DebugLocation(376, 42);
				PushFollow(Follow._bitWiseShift_in_comparisionCheck2901);
				bitWiseShift218=bitWiseShift();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, bitWiseShift218.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(59); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("comparisionCheck", 40);
			LeaveRule("comparisionCheck", 40);
			LeaveRule_comparisionCheck();
			if (state.backtracking > 0) { Memoize(input, 40, comparisionCheck_StartIndex); }

		}
		DebugLocation(377, 4);
		} finally { DebugExitRule(GrammarFileName, "comparisionCheck"); }
		return retval;

	}
	// $ANTLR end "comparisionCheck"

	partial void EnterRule_bitWiseShift();
	partial void LeaveRule_bitWiseShift();
	// $ANTLR start "bitWiseShift"
	// Php.g:379:1: bitWiseShift : addition ( ShiftOperator ^ addition )* ;
	[GrammarRule("bitWiseShift")]
	private AstParserRuleReturnScope<object, IToken> bitWiseShift()
	{
		EnterRule_bitWiseShift();
		EnterRule("bitWiseShift", 41);
		TraceIn("bitWiseShift", 41);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bitWiseShift_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ShiftOperator220 = default(IToken);
		AstParserRuleReturnScope<object, IToken> addition219 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> addition221 = default(AstParserRuleReturnScope<object, IToken>);

		object ShiftOperator220_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "bitWiseShift");
		DebugLocation(379, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// Php.g:380:5: ( addition ( ShiftOperator ^ addition )* )
			DebugEnterAlt(1);
			// Php.g:380:7: addition ( ShiftOperator ^ addition )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(380, 7);
			PushFollow(Follow._addition_in_bitWiseShift2920);
			addition219=addition();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, addition219.Tree);
			DebugLocation(380, 16);
			// Php.g:380:16: ( ShiftOperator ^ addition )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=2;
				try { DebugEnterDecision(60, false);
				int LA60_1 = input.LA(1);

				if ((LA60_1==ShiftOperator))
				{
					alt60 = 1;
				}


				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:380:17: ShiftOperator ^ addition
					{
					DebugLocation(380, 30);
					ShiftOperator220=(IToken)Match(input,ShiftOperator,Follow._ShiftOperator_in_bitWiseShift2923); if (state.failed) return retval;
					if (state.backtracking == 0) {
					ShiftOperator220_tree = (object)adaptor.Create(ShiftOperator220);
					root_0 = (object)adaptor.BecomeRoot(ShiftOperator220_tree, root_0);
					}
					DebugLocation(380, 32);
					PushFollow(Follow._addition_in_bitWiseShift2926);
					addition221=addition();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, addition221.Tree);

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bitWiseShift", 41);
			LeaveRule("bitWiseShift", 41);
			LeaveRule_bitWiseShift();
			if (state.backtracking > 0) { Memoize(input, 41, bitWiseShift_StartIndex); }

		}
		DebugLocation(381, 4);
		} finally { DebugExitRule(GrammarFileName, "bitWiseShift"); }
		return retval;

	}
	// $ANTLR end "bitWiseShift"

	partial void EnterRule_addition();
	partial void LeaveRule_addition();
	// $ANTLR start "addition"
	// Php.g:383:1: addition : multiplication ( ( Plus | Minus | Dot ) ^ multiplication )* ;
	[GrammarRule("addition")]
	private AstParserRuleReturnScope<object, IToken> addition()
	{
		EnterRule_addition();
		EnterRule("addition", 42);
		TraceIn("addition", 42);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int addition_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set223 = default(IToken);
		AstParserRuleReturnScope<object, IToken> multiplication222 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> multiplication224 = default(AstParserRuleReturnScope<object, IToken>);

		object set223_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "addition");
		DebugLocation(383, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// Php.g:384:5: ( multiplication ( ( Plus | Minus | Dot ) ^ multiplication )* )
			DebugEnterAlt(1);
			// Php.g:384:7: multiplication ( ( Plus | Minus | Dot ) ^ multiplication )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(384, 7);
			PushFollow(Follow._multiplication_in_addition2949);
			multiplication222=multiplication();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplication222.Tree);
			DebugLocation(384, 22);
			// Php.g:384:22: ( ( Plus | Minus | Dot ) ^ multiplication )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_1 = input.LA(1);

				if ((LA61_1==Dot||LA61_1==Minus||LA61_1==Plus))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:384:23: ( Plus | Minus | Dot ) ^ multiplication
					{
					DebugLocation(384, 43);

					set223=(IToken)input.LT(1);
					set223=(IToken)input.LT(1);
					if (input.LA(1)==Dot||input.LA(1)==Minus||input.LA(1)==Plus)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot((object)adaptor.Create(set223), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(384, 45);
					PushFollow(Follow._multiplication_in_addition2965);
					multiplication224=multiplication();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplication224.Tree);

					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("addition", 42);
			LeaveRule("addition", 42);
			LeaveRule_addition();
			if (state.backtracking > 0) { Memoize(input, 42, addition_StartIndex); }

		}
		DebugLocation(385, 4);
		} finally { DebugExitRule(GrammarFileName, "addition"); }
		return retval;

	}
	// $ANTLR end "addition"

	partial void EnterRule_multiplication();
	partial void LeaveRule_multiplication();
	// $ANTLR start "multiplication"
	// Php.g:387:1: multiplication : logicalNot ( ( Asterisk | Forwardslash | Percent ) ^ logicalNot )* ;
	[GrammarRule("multiplication")]
	private AstParserRuleReturnScope<object, IToken> multiplication()
	{
		EnterRule_multiplication();
		EnterRule("multiplication", 43);
		TraceIn("multiplication", 43);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int multiplication_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set226 = default(IToken);
		AstParserRuleReturnScope<object, IToken> logicalNot225 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> logicalNot227 = default(AstParserRuleReturnScope<object, IToken>);

		object set226_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "multiplication");
		DebugLocation(387, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// Php.g:388:5: ( logicalNot ( ( Asterisk | Forwardslash | Percent ) ^ logicalNot )* )
			DebugEnterAlt(1);
			// Php.g:388:7: logicalNot ( ( Asterisk | Forwardslash | Percent ) ^ logicalNot )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(388, 7);
			PushFollow(Follow._logicalNot_in_multiplication2984);
			logicalNot225=logicalNot();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logicalNot225.Tree);
			DebugLocation(388, 18);
			// Php.g:388:18: ( ( Asterisk | Forwardslash | Percent ) ^ logicalNot )*
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=2;
				try { DebugEnterDecision(62, false);
				int LA62_1 = input.LA(1);

				if ((LA62_1==Asterisk||LA62_1==Forwardslash||LA62_1==Percent))
				{
					alt62 = 1;
				}


				} finally { DebugExitDecision(62); }
				switch ( alt62 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:388:19: ( Asterisk | Forwardslash | Percent ) ^ logicalNot
					{
					DebugLocation(388, 54);

					set226=(IToken)input.LT(1);
					set226=(IToken)input.LT(1);
					if (input.LA(1)==Asterisk||input.LA(1)==Forwardslash||input.LA(1)==Percent)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot((object)adaptor.Create(set226), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(388, 56);
					PushFollow(Follow._logicalNot_in_multiplication3000);
					logicalNot227=logicalNot();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logicalNot227.Tree);

					}
					break;

				default:
					goto loop62;
				}
			}

			loop62:
				;

			} finally { DebugExitSubRule(62); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplication", 43);
			LeaveRule("multiplication", 43);
			LeaveRule_multiplication();
			if (state.backtracking > 0) { Memoize(input, 43, multiplication_StartIndex); }

		}
		DebugLocation(389, 4);
		} finally { DebugExitRule(GrammarFileName, "multiplication"); }
		return retval;

	}
	// $ANTLR end "multiplication"

	partial void EnterRule_logicalNot();
	partial void LeaveRule_logicalNot();
	// $ANTLR start "logicalNot"
	// Php.g:391:1: logicalNot : ( Bang ^ logicalNot | instanceOf );
	[GrammarRule("logicalNot")]
	private AstParserRuleReturnScope<object, IToken> logicalNot()
	{
		EnterRule_logicalNot();
		EnterRule("logicalNot", 44);
		TraceIn("logicalNot", 44);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int logicalNot_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Bang228 = default(IToken);
		AstParserRuleReturnScope<object, IToken> logicalNot229 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> instanceOf230 = default(AstParserRuleReturnScope<object, IToken>);

		object Bang228_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logicalNot");
		DebugLocation(391, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// Php.g:392:5: ( Bang ^ logicalNot | instanceOf )
			int alt63=2;
			try { DebugEnterDecision(63, false);
			int LA63_1 = input.LA(1);

			if ((LA63_1==Bang))
			{
				alt63 = 1;
			}
			else if ((LA63_1==Ampersand||LA63_1==Array||LA63_1==Boolean||LA63_1==Clone||LA63_1==Dollar||LA63_1==DoubleQuotedString||LA63_1==HereDoc||LA63_1==IncrementOperator||LA63_1==Integer||LA63_1==Minus||LA63_1==New||LA63_1==OpenRoundBracket||LA63_1==Real||LA63_1==SingleQuotedString||LA63_1==SuppressWarnings||LA63_1==Tilde||LA63_1==UnquotedString))
			{
				alt63 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 63, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:392:7: Bang ^ logicalNot
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(392, 11);
				Bang228=(IToken)Match(input,Bang,Follow._Bang_in_logicalNot3019); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Bang228_tree = (object)adaptor.Create(Bang228);
				root_0 = (object)adaptor.BecomeRoot(Bang228_tree, root_0);
				}
				DebugLocation(392, 13);
				PushFollow(Follow._logicalNot_in_logicalNot3022);
				logicalNot229=logicalNot();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logicalNot229.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:393:7: instanceOf
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(393, 7);
				PushFollow(Follow._instanceOf_in_logicalNot3030);
				instanceOf230=instanceOf();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, instanceOf230.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logicalNot", 44);
			LeaveRule("logicalNot", 44);
			LeaveRule_logicalNot();
			if (state.backtracking > 0) { Memoize(input, 44, logicalNot_StartIndex); }

		}
		DebugLocation(394, 4);
		} finally { DebugExitRule(GrammarFileName, "logicalNot"); }
		return retval;

	}
	// $ANTLR end "logicalNot"

	partial void EnterRule_instanceOf();
	partial void LeaveRule_instanceOf();
	// $ANTLR start "instanceOf"
	// Php.g:396:1: instanceOf : negateOrCast ( Instanceof ^ negateOrCast )? ;
	[GrammarRule("instanceOf")]
	private AstParserRuleReturnScope<object, IToken> instanceOf()
	{
		EnterRule_instanceOf();
		EnterRule("instanceOf", 45);
		TraceIn("instanceOf", 45);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int instanceOf_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Instanceof232 = default(IToken);
		AstParserRuleReturnScope<object, IToken> negateOrCast231 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> negateOrCast233 = default(AstParserRuleReturnScope<object, IToken>);

		object Instanceof232_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "instanceOf");
		DebugLocation(396, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// Php.g:397:5: ( negateOrCast ( Instanceof ^ negateOrCast )? )
			DebugEnterAlt(1);
			// Php.g:397:7: negateOrCast ( Instanceof ^ negateOrCast )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(397, 7);
			PushFollow(Follow._negateOrCast_in_instanceOf3047);
			negateOrCast231=negateOrCast();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, negateOrCast231.Tree);
			DebugLocation(397, 20);
			// Php.g:397:20: ( Instanceof ^ negateOrCast )?
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_1 = input.LA(1);

			if ((LA64_1==Instanceof))
			{
				alt64 = 1;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:397:21: Instanceof ^ negateOrCast
				{
				DebugLocation(397, 31);
				Instanceof232=(IToken)Match(input,Instanceof,Follow._Instanceof_in_instanceOf3050); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Instanceof232_tree = (object)adaptor.Create(Instanceof232);
				root_0 = (object)adaptor.BecomeRoot(Instanceof232_tree, root_0);
				}
				DebugLocation(397, 33);
				PushFollow(Follow._negateOrCast_in_instanceOf3053);
				negateOrCast233=negateOrCast();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, negateOrCast233.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("instanceOf", 45);
			LeaveRule("instanceOf", 45);
			LeaveRule_instanceOf();
			if (state.backtracking > 0) { Memoize(input, 45, instanceOf_StartIndex); }

		}
		DebugLocation(398, 4);
		} finally { DebugExitRule(GrammarFileName, "instanceOf"); }
		return retval;

	}
	// $ANTLR end "instanceOf"

	partial void EnterRule_negateOrCast();
	partial void LeaveRule_negateOrCast();
	// $ANTLR start "negateOrCast"
	// Php.g:400:1: negateOrCast : ( ( Tilde | Minus | SuppressWarnings ) ^ increment | OpenRoundBracket PrimitiveType CloseRoundBracket increment -> ^( Cast PrimitiveType increment ) | OpenRoundBracket ! weakLogicalAnd CloseRoundBracket !| increment );
	[GrammarRule("negateOrCast")]
	private AstParserRuleReturnScope<object, IToken> negateOrCast()
	{
		EnterRule_negateOrCast();
		EnterRule("negateOrCast", 46);
		TraceIn("negateOrCast", 46);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int negateOrCast_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set234 = default(IToken);
		IToken OpenRoundBracket236 = default(IToken);
		IToken PrimitiveType237 = default(IToken);
		IToken CloseRoundBracket238 = default(IToken);
		IToken OpenRoundBracket240 = default(IToken);
		IToken CloseRoundBracket242 = default(IToken);
		AstParserRuleReturnScope<object, IToken> increment235 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> increment239 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> weakLogicalAnd241 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> increment243 = default(AstParserRuleReturnScope<object, IToken>);

		object set234_tree = default(object);
		object OpenRoundBracket236_tree = default(object);
		object PrimitiveType237_tree = default(object);
		object CloseRoundBracket238_tree = default(object);
		object OpenRoundBracket240_tree = default(object);
		object CloseRoundBracket242_tree = default(object);
		RewriteRuleITokenStream stream_OpenRoundBracket=new RewriteRuleITokenStream(adaptor,"token OpenRoundBracket");
		RewriteRuleITokenStream stream_PrimitiveType=new RewriteRuleITokenStream(adaptor,"token PrimitiveType");
		RewriteRuleITokenStream stream_CloseRoundBracket=new RewriteRuleITokenStream(adaptor,"token CloseRoundBracket");
		RewriteRuleSubtreeStream stream_increment=new RewriteRuleSubtreeStream(adaptor,"rule increment");
		try { DebugEnterRule(GrammarFileName, "negateOrCast");
		DebugLocation(400, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// Php.g:401:5: ( ( Tilde | Minus | SuppressWarnings ) ^ increment | OpenRoundBracket PrimitiveType CloseRoundBracket increment -> ^( Cast PrimitiveType increment ) | OpenRoundBracket ! weakLogicalAnd CloseRoundBracket !| increment )
			int alt65=4;
			try { DebugEnterDecision(65, false);
			switch (input.LA(1))
			{
			case Minus:
			case SuppressWarnings:
			case Tilde:
				{
				alt65 = 1;
				}
				break;
			case OpenRoundBracket:
				{
				int LA65_2 = input.LA(2);

				if ((LA65_2==PrimitiveType))
				{
					alt65 = 2;
				}
				else if ((LA65_2==Ampersand||LA65_2==Array||LA65_2==Bang||LA65_2==Boolean||LA65_2==Clone||LA65_2==Dollar||LA65_2==DoubleQuotedString||LA65_2==HereDoc||LA65_2==IncrementOperator||LA65_2==Integer||LA65_2==List||LA65_2==Minus||LA65_2==New||LA65_2==OpenRoundBracket||LA65_2==Real||LA65_2==SingleQuotedString||LA65_2==SuppressWarnings||LA65_2==Tilde||LA65_2==UnquotedString))
				{
					alt65 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 65, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
			case Array:
			case Boolean:
			case Clone:
			case Dollar:
			case DoubleQuotedString:
			case HereDoc:
			case IncrementOperator:
			case Integer:
			case New:
			case Real:
			case SingleQuotedString:
			case UnquotedString:
				{
				alt65 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 65, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:401:7: ( Tilde | Minus | SuppressWarnings ) ^ increment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(401, 41);

				set234=(IToken)input.LT(1);
				set234=(IToken)input.LT(1);
				if (input.LA(1)==Minus||input.LA(1)==SuppressWarnings||input.LA(1)==Tilde)
				{
					input.Consume();
					if (state.backtracking == 0) root_0 = (object)adaptor.BecomeRoot((object)adaptor.Create(set234), root_0);
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(401, 43);
				PushFollow(Follow._increment_in_negateOrCast3085);
				increment235=increment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, increment235.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:402:7: OpenRoundBracket PrimitiveType CloseRoundBracket increment
				{
				DebugLocation(402, 7);
				OpenRoundBracket236=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_negateOrCast3093); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OpenRoundBracket.Add(OpenRoundBracket236);

				DebugLocation(402, 24);
				PrimitiveType237=(IToken)Match(input,PrimitiveType,Follow._PrimitiveType_in_negateOrCast3095); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_PrimitiveType.Add(PrimitiveType237);

				DebugLocation(402, 38);
				CloseRoundBracket238=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_negateOrCast3097); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CloseRoundBracket.Add(CloseRoundBracket238);

				DebugLocation(402, 56);
				PushFollow(Follow._increment_in_negateOrCast3099);
				increment239=increment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_increment.Add(increment239.Tree);


				{
				// AST REWRITE
				// elements: PrimitiveType, increment
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 402:66: -> ^( Cast PrimitiveType increment )
				{
					DebugLocation(402, 69);
					// Php.g:402:69: ^( Cast PrimitiveType increment )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(402, 71);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(Cast, "Cast"), root_1);

					DebugLocation(402, 76);
					adaptor.AddChild(root_1, stream_PrimitiveType.NextNode());
					DebugLocation(402, 90);
					adaptor.AddChild(root_1, stream_increment.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Php.g:403:7: OpenRoundBracket ! weakLogicalAnd CloseRoundBracket !
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(403, 23);
				OpenRoundBracket240=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_negateOrCast3117); if (state.failed) return retval;
				DebugLocation(403, 25);
				PushFollow(Follow._weakLogicalAnd_in_negateOrCast3120);
				weakLogicalAnd241=weakLogicalAnd();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, weakLogicalAnd241.Tree);
				DebugLocation(403, 57);
				CloseRoundBracket242=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_negateOrCast3122); if (state.failed) return retval;

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Php.g:404:7: increment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(404, 7);
				PushFollow(Follow._increment_in_negateOrCast3131);
				increment243=increment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, increment243.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("negateOrCast", 46);
			LeaveRule("negateOrCast", 46);
			LeaveRule_negateOrCast();
			if (state.backtracking > 0) { Memoize(input, 46, negateOrCast_StartIndex); }

		}
		DebugLocation(405, 4);
		} finally { DebugExitRule(GrammarFileName, "negateOrCast"); }
		return retval;

	}
	// $ANTLR end "negateOrCast"

	partial void EnterRule_increment();
	partial void LeaveRule_increment();
	// $ANTLR start "increment"
	// Php.g:407:1: increment : ( IncrementOperator name -> ^( Prefix IncrementOperator name ) | name IncrementOperator -> ^( Postfix IncrementOperator name ) | newOrClone );
	[GrammarRule("increment")]
	private AstParserRuleReturnScope<object, IToken> increment()
	{
		EnterRule_increment();
		EnterRule("increment", 47);
		TraceIn("increment", 47);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int increment_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IncrementOperator244 = default(IToken);
		IToken IncrementOperator247 = default(IToken);
		AstParserRuleReturnScope<object, IToken> name245 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> name246 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> newOrClone248 = default(AstParserRuleReturnScope<object, IToken>);

		object IncrementOperator244_tree = default(object);
		object IncrementOperator247_tree = default(object);
		RewriteRuleITokenStream stream_IncrementOperator=new RewriteRuleITokenStream(adaptor,"token IncrementOperator");
		RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
		try { DebugEnterRule(GrammarFileName, "increment");
		DebugLocation(407, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// Php.g:408:5: ( IncrementOperator name -> ^( Prefix IncrementOperator name ) | name IncrementOperator -> ^( Postfix IncrementOperator name ) | newOrClone )
			int alt66=3;
			try { DebugEnterDecision(66, false);
			switch (input.LA(1))
			{
			case IncrementOperator:
				{
				alt66 = 1;
				}
				break;
			case UnquotedString:
				{
				switch (input.LA(2))
				{
				case ClassMember:
					{
					int LA66_3 = input.LA(3);

					if ((EvaluatePredicate(synpred97_Php_fragment)))
					{
						alt66 = 2;
					}
					else if ((true))
					{
						alt66 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 66, 14, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case OpenSquareBracket:
					{
					int LA66_3 = input.LA(3);

					if ((EvaluatePredicate(synpred97_Php_fragment)))
					{
						alt66 = 2;
					}
					else if ((true))
					{
						alt66 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 66, 15, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case InstanceMember:
					{
					int LA66_3 = input.LA(3);

					if ((EvaluatePredicate(synpred97_Php_fragment)))
					{
						alt66 = 2;
					}
					else if ((true))
					{
						alt66 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 66, 16, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IncrementOperator:
					{
					alt66 = 2;
					}
					break;
				case EOF:
				case Ampersand:
				case And:
				case ArrayAssign:
				case Asterisk:
				case BodyString:
				case CloseRoundBracket:
				case CloseSquareBracket:
				case Colon:
				case Comma:
				case ComparisionOperator:
				case Dot:
				case EqualityOperator:
				case Forwardslash:
				case Instanceof:
				case LogicalAnd:
				case LogicalOr:
				case Minus:
				case OpenRoundBracket:
				case Or:
				case Percent:
				case Pipe:
				case Plus:
				case QuestionMark:
				case SemiColon:
				case ShiftOperator:
				case Xor:
					{
					alt66 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 66, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case Dollar:
				{
				int LA66_2 = input.LA(2);

				if ((LA66_2==Dollar))
				{
					int LA66_3 = input.LA(3);

					if ((EvaluatePredicate(synpred97_Php_fragment)))
					{
						alt66 = 2;
					}
					else if ((true))
					{
						alt66 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 66, 41, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA66_2==UnquotedString))
				{
					int LA66_3 = input.LA(3);

					if ((EvaluatePredicate(synpred97_Php_fragment)))
					{
						alt66 = 2;
					}
					else if ((true))
					{
						alt66 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 66, 42, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 66, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Ampersand:
			case Array:
			case Boolean:
			case Clone:
			case DoubleQuotedString:
			case HereDoc:
			case Integer:
			case New:
			case Real:
			case SingleQuotedString:
				{
				alt66 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 66, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:408:7: IncrementOperator name
				{
				DebugLocation(408, 7);
				IncrementOperator244=(IToken)Match(input,IncrementOperator,Follow._IncrementOperator_in_increment3148); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IncrementOperator.Add(IncrementOperator244);

				DebugLocation(408, 25);
				PushFollow(Follow._name_in_increment3150);
				name245=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_name.Add(name245.Tree);


				{
				// AST REWRITE
				// elements: IncrementOperator, name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 408:30: -> ^( Prefix IncrementOperator name )
				{
					DebugLocation(408, 33);
					// Php.g:408:33: ^( Prefix IncrementOperator name )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(408, 35);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(Prefix, "Prefix"), root_1);

					DebugLocation(408, 42);
					adaptor.AddChild(root_1, stream_IncrementOperator.NextNode());
					DebugLocation(408, 60);
					adaptor.AddChild(root_1, stream_name.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:409:7: name IncrementOperator
				{
				DebugLocation(409, 7);
				PushFollow(Follow._name_in_increment3168);
				name246=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_name.Add(name246.Tree);
				DebugLocation(409, 12);
				IncrementOperator247=(IToken)Match(input,IncrementOperator,Follow._IncrementOperator_in_increment3170); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_IncrementOperator.Add(IncrementOperator247);



				{
				// AST REWRITE
				// elements: IncrementOperator, name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 409:30: -> ^( Postfix IncrementOperator name )
				{
					DebugLocation(409, 33);
					// Php.g:409:33: ^( Postfix IncrementOperator name )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(409, 35);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(Postfix, "Postfix"), root_1);

					DebugLocation(409, 43);
					adaptor.AddChild(root_1, stream_IncrementOperator.NextNode());
					DebugLocation(409, 61);
					adaptor.AddChild(root_1, stream_name.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Php.g:410:7: newOrClone
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(410, 7);
				PushFollow(Follow._newOrClone_in_increment3188);
				newOrClone248=newOrClone();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, newOrClone248.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("increment", 47);
			LeaveRule("increment", 47);
			LeaveRule_increment();
			if (state.backtracking > 0) { Memoize(input, 47, increment_StartIndex); }

		}
		DebugLocation(411, 4);
		} finally { DebugExitRule(GrammarFileName, "increment"); }
		return retval;

	}
	// $ANTLR end "increment"

	partial void EnterRule_newOrClone();
	partial void LeaveRule_newOrClone();
	// $ANTLR start "newOrClone"
	// Php.g:413:1: newOrClone : ( New ^ nameOrFunctionCall | Clone ^ name | atomOrReference );
	[GrammarRule("newOrClone")]
	private AstParserRuleReturnScope<object, IToken> newOrClone()
	{
		EnterRule_newOrClone();
		EnterRule("newOrClone", 48);
		TraceIn("newOrClone", 48);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int newOrClone_StartIndex = input.Index;

		object root_0 = default(object);

		IToken New249 = default(IToken);
		IToken Clone251 = default(IToken);
		AstParserRuleReturnScope<object, IToken> nameOrFunctionCall250 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> name252 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> atomOrReference253 = default(AstParserRuleReturnScope<object, IToken>);

		object New249_tree = default(object);
		object Clone251_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "newOrClone");
		DebugLocation(413, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// Php.g:414:5: ( New ^ nameOrFunctionCall | Clone ^ name | atomOrReference )
			int alt67=3;
			try { DebugEnterDecision(67, false);
			switch (input.LA(1))
			{
			case New:
				{
				alt67 = 1;
				}
				break;
			case Clone:
				{
				alt67 = 2;
				}
				break;
			case Ampersand:
			case Array:
			case Boolean:
			case Dollar:
			case DoubleQuotedString:
			case HereDoc:
			case Integer:
			case Real:
			case SingleQuotedString:
			case UnquotedString:
				{
				alt67 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 67, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:414:7: New ^ nameOrFunctionCall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(414, 10);
				New249=(IToken)Match(input,New,Follow._New_in_newOrClone3205); if (state.failed) return retval;
				if (state.backtracking == 0) {
				New249_tree = (object)adaptor.Create(New249);
				root_0 = (object)adaptor.BecomeRoot(New249_tree, root_0);
				}
				DebugLocation(414, 12);
				PushFollow(Follow._nameOrFunctionCall_in_newOrClone3208);
				nameOrFunctionCall250=nameOrFunctionCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nameOrFunctionCall250.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:415:7: Clone ^ name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(415, 12);
				Clone251=(IToken)Match(input,Clone,Follow._Clone_in_newOrClone3216); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Clone251_tree = (object)adaptor.Create(Clone251);
				root_0 = (object)adaptor.BecomeRoot(Clone251_tree, root_0);
				}
				DebugLocation(415, 14);
				PushFollow(Follow._name_in_newOrClone3219);
				name252=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name252.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Php.g:416:7: atomOrReference
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(416, 7);
				PushFollow(Follow._atomOrReference_in_newOrClone3227);
				atomOrReference253=atomOrReference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atomOrReference253.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("newOrClone", 48);
			LeaveRule("newOrClone", 48);
			LeaveRule_newOrClone();
			if (state.backtracking > 0) { Memoize(input, 48, newOrClone_StartIndex); }

		}
		DebugLocation(417, 4);
		} finally { DebugExitRule(GrammarFileName, "newOrClone"); }
		return retval;

	}
	// $ANTLR end "newOrClone"

	partial void EnterRule_atomOrReference();
	partial void LeaveRule_atomOrReference();
	// $ANTLR start "atomOrReference"
	// Php.g:419:1: atomOrReference : ( atom | reference );
	[GrammarRule("atomOrReference")]
	private AstParserRuleReturnScope<object, IToken> atomOrReference()
	{
		EnterRule_atomOrReference();
		EnterRule("atomOrReference", 49);
		TraceIn("atomOrReference", 49);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int atomOrReference_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> atom254 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> reference255 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "atomOrReference");
		DebugLocation(419, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// Php.g:420:5: ( atom | reference )
			int alt68=2;
			try { DebugEnterDecision(68, false);
			int LA68_1 = input.LA(1);

			if ((LA68_1==Array||LA68_1==Boolean||LA68_1==DoubleQuotedString||LA68_1==HereDoc||LA68_1==Integer||LA68_1==Real||LA68_1==SingleQuotedString))
			{
				alt68 = 1;
			}
			else if ((LA68_1==Ampersand||LA68_1==Dollar||LA68_1==UnquotedString))
			{
				alt68 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 68, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:420:7: atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(420, 7);
				PushFollow(Follow._atom_in_atomOrReference3244);
				atom254=atom();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, atom254.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:421:7: reference
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(421, 7);
				PushFollow(Follow._reference_in_atomOrReference3252);
				reference255=reference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, reference255.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atomOrReference", 49);
			LeaveRule("atomOrReference", 49);
			LeaveRule_atomOrReference();
			if (state.backtracking > 0) { Memoize(input, 49, atomOrReference_StartIndex); }

		}
		DebugLocation(422, 4);
		} finally { DebugExitRule(GrammarFileName, "atomOrReference"); }
		return retval;

	}
	// $ANTLR end "atomOrReference"

	partial void EnterRule_arrayDeclaration();
	partial void LeaveRule_arrayDeclaration();
	// $ANTLR start "arrayDeclaration"
	// Php.g:424:1: arrayDeclaration : Array OpenRoundBracket ( arrayEntry ( Comma arrayEntry )* )? CloseRoundBracket -> ^( Array ( arrayEntry )* ) ;
	[GrammarRule("arrayDeclaration")]
	private AstParserRuleReturnScope<object, IToken> arrayDeclaration()
	{
		EnterRule_arrayDeclaration();
		EnterRule("arrayDeclaration", 50);
		TraceIn("arrayDeclaration", 50);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arrayDeclaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Array256 = default(IToken);
		IToken OpenRoundBracket257 = default(IToken);
		IToken Comma259 = default(IToken);
		IToken CloseRoundBracket261 = default(IToken);
		AstParserRuleReturnScope<object, IToken> arrayEntry258 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arrayEntry260 = default(AstParserRuleReturnScope<object, IToken>);

		object Array256_tree = default(object);
		object OpenRoundBracket257_tree = default(object);
		object Comma259_tree = default(object);
		object CloseRoundBracket261_tree = default(object);
		RewriteRuleITokenStream stream_Array=new RewriteRuleITokenStream(adaptor,"token Array");
		RewriteRuleITokenStream stream_OpenRoundBracket=new RewriteRuleITokenStream(adaptor,"token OpenRoundBracket");
		RewriteRuleITokenStream stream_Comma=new RewriteRuleITokenStream(adaptor,"token Comma");
		RewriteRuleITokenStream stream_CloseRoundBracket=new RewriteRuleITokenStream(adaptor,"token CloseRoundBracket");
		RewriteRuleSubtreeStream stream_arrayEntry=new RewriteRuleSubtreeStream(adaptor,"rule arrayEntry");
		try { DebugEnterRule(GrammarFileName, "arrayDeclaration");
		DebugLocation(424, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// Php.g:425:5: ( Array OpenRoundBracket ( arrayEntry ( Comma arrayEntry )* )? CloseRoundBracket -> ^( Array ( arrayEntry )* ) )
			DebugEnterAlt(1);
			// Php.g:425:7: Array OpenRoundBracket ( arrayEntry ( Comma arrayEntry )* )? CloseRoundBracket
			{
			DebugLocation(425, 7);
			Array256=(IToken)Match(input,Array,Follow._Array_in_arrayDeclaration3269); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_Array.Add(Array256);

			DebugLocation(425, 13);
			OpenRoundBracket257=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_arrayDeclaration3271); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_OpenRoundBracket.Add(OpenRoundBracket257);

			DebugLocation(425, 30);
			// Php.g:425:30: ( arrayEntry ( Comma arrayEntry )* )?
			int alt70=2;
			try { DebugEnterSubRule(70);
			try { DebugEnterDecision(70, false);
			int LA70_1 = input.LA(1);

			if ((LA70_1==Ampersand||LA70_1==Array||LA70_1==Bang||LA70_1==Boolean||LA70_1==Clone||LA70_1==Dollar||LA70_1==DoubleQuotedString||LA70_1==HereDoc||LA70_1==IncrementOperator||LA70_1==Integer||LA70_1==List||LA70_1==Minus||LA70_1==New||LA70_1==OpenRoundBracket||LA70_1==Real||LA70_1==SingleQuotedString||LA70_1==SuppressWarnings||LA70_1==Tilde||LA70_1==UnquotedString))
			{
				alt70 = 1;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:425:31: arrayEntry ( Comma arrayEntry )*
				{
				DebugLocation(425, 31);
				PushFollow(Follow._arrayEntry_in_arrayDeclaration3274);
				arrayEntry258=arrayEntry();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_arrayEntry.Add(arrayEntry258.Tree);
				DebugLocation(425, 42);
				// Php.g:425:42: ( Comma arrayEntry )*
				try { DebugEnterSubRule(69);
				while (true)
				{
					int alt69=2;
					try { DebugEnterDecision(69, false);
					int LA69_1 = input.LA(1);

					if ((LA69_1==Comma))
					{
						alt69 = 1;
					}


					} finally { DebugExitDecision(69); }
					switch ( alt69 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:425:43: Comma arrayEntry
						{
						DebugLocation(425, 43);
						Comma259=(IToken)Match(input,Comma,Follow._Comma_in_arrayDeclaration3277); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_Comma.Add(Comma259);

						DebugLocation(425, 49);
						PushFollow(Follow._arrayEntry_in_arrayDeclaration3279);
						arrayEntry260=arrayEntry();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_arrayEntry.Add(arrayEntry260.Tree);

						}
						break;

					default:
						goto loop69;
					}
				}

				loop69:
					;

				} finally { DebugExitSubRule(69); }


				}
				break;

			}
			} finally { DebugExitSubRule(70); }

			DebugLocation(425, 64);
			CloseRoundBracket261=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_arrayDeclaration3285); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_CloseRoundBracket.Add(CloseRoundBracket261);



			{
			// AST REWRITE
			// elements: Array, arrayEntry
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 425:82: -> ^( Array ( arrayEntry )* )
			{
				DebugLocation(425, 85);
				// Php.g:425:85: ^( Array ( arrayEntry )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(425, 87);
				root_1 = (object)adaptor.BecomeRoot(stream_Array.NextNode(), root_1);

				DebugLocation(425, 93);
				// Php.g:425:93: ( arrayEntry )*
				while ( stream_arrayEntry.HasNext )
				{
					DebugLocation(425, 93);
					adaptor.AddChild(root_1, stream_arrayEntry.NextTree());

				}
				stream_arrayEntry.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayDeclaration", 50);
			LeaveRule("arrayDeclaration", 50);
			LeaveRule_arrayDeclaration();
			if (state.backtracking > 0) { Memoize(input, 50, arrayDeclaration_StartIndex); }

		}
		DebugLocation(426, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayDeclaration"); }
		return retval;

	}
	// $ANTLR end "arrayDeclaration"

	partial void EnterRule_arrayEntry();
	partial void LeaveRule_arrayEntry();
	// $ANTLR start "arrayEntry"
	// Php.g:428:1: arrayEntry : ( keyValuePair | expression ) ;
	[GrammarRule("arrayEntry")]
	private AstParserRuleReturnScope<object, IToken> arrayEntry()
	{
		EnterRule_arrayEntry();
		EnterRule("arrayEntry", 51);
		TraceIn("arrayEntry", 51);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int arrayEntry_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> keyValuePair262 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression263 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "arrayEntry");
		DebugLocation(428, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// Php.g:429:5: ( ( keyValuePair | expression ) )
			DebugEnterAlt(1);
			// Php.g:429:7: ( keyValuePair | expression )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(429, 7);
			// Php.g:429:7: ( keyValuePair | expression )
			int alt71=2;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			try
			{
				alt71 = dfa71.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:429:8: keyValuePair
				{
				DebugLocation(429, 8);
				PushFollow(Follow._keyValuePair_in_arrayEntry3312);
				keyValuePair262=keyValuePair();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, keyValuePair262.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:429:23: expression
				{
				DebugLocation(429, 23);
				PushFollow(Follow._expression_in_arrayEntry3316);
				expression263=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression263.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(71); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arrayEntry", 51);
			LeaveRule("arrayEntry", 51);
			LeaveRule_arrayEntry();
			if (state.backtracking > 0) { Memoize(input, 51, arrayEntry_StartIndex); }

		}
		DebugLocation(430, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayEntry"); }
		return retval;

	}
	// $ANTLR end "arrayEntry"

	partial void EnterRule_keyValuePair();
	partial void LeaveRule_keyValuePair();
	// $ANTLR start "keyValuePair"
	// Php.g:432:1: keyValuePair : ( expression ArrayAssign expression ) -> ^( ArrayAssign ( expression )+ ) ;
	[GrammarRule("keyValuePair")]
	private AstParserRuleReturnScope<object, IToken> keyValuePair()
	{
		EnterRule_keyValuePair();
		EnterRule("keyValuePair", 52);
		TraceIn("keyValuePair", 52);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int keyValuePair_StartIndex = input.Index;

		object root_0 = default(object);

		IToken ArrayAssign265 = default(IToken);
		AstParserRuleReturnScope<object, IToken> expression264 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression266 = default(AstParserRuleReturnScope<object, IToken>);

		object ArrayAssign265_tree = default(object);
		RewriteRuleITokenStream stream_ArrayAssign=new RewriteRuleITokenStream(adaptor,"token ArrayAssign");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "keyValuePair");
		DebugLocation(432, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// Php.g:433:5: ( ( expression ArrayAssign expression ) -> ^( ArrayAssign ( expression )+ ) )
			DebugEnterAlt(1);
			// Php.g:433:7: ( expression ArrayAssign expression )
			{
			DebugLocation(433, 7);
			// Php.g:433:7: ( expression ArrayAssign expression )
			DebugEnterAlt(1);
			// Php.g:433:8: expression ArrayAssign expression
			{
			DebugLocation(433, 8);
			PushFollow(Follow._expression_in_keyValuePair3335);
			expression264=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression264.Tree);
			DebugLocation(433, 19);
			ArrayAssign265=(IToken)Match(input,ArrayAssign,Follow._ArrayAssign_in_keyValuePair3337); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_ArrayAssign.Add(ArrayAssign265);

			DebugLocation(433, 31);
			PushFollow(Follow._expression_in_keyValuePair3339);
			expression266=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expression.Add(expression266.Tree);

			}



			{
			// AST REWRITE
			// elements: ArrayAssign, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 433:43: -> ^( ArrayAssign ( expression )+ )
			{
				DebugLocation(433, 46);
				// Php.g:433:46: ^( ArrayAssign ( expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(433, 48);
				root_1 = (object)adaptor.BecomeRoot(stream_ArrayAssign.NextNode(), root_1);

				DebugLocation(433, 60);
				if (!(stream_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.HasNext )
				{
					DebugLocation(433, 60);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("keyValuePair", 52);
			LeaveRule("keyValuePair", 52);
			LeaveRule_keyValuePair();
			if (state.backtracking > 0) { Memoize(input, 52, keyValuePair_StartIndex); }

		}
		DebugLocation(434, 4);
		} finally { DebugExitRule(GrammarFileName, "keyValuePair"); }
		return retval;

	}
	// $ANTLR end "keyValuePair"

	partial void EnterRule_atom();
	partial void LeaveRule_atom();
	// $ANTLR start "atom"
	// Php.g:436:1: atom : ( SingleQuotedString | DoubleQuotedString | HereDoc | Integer | Real | Boolean | arrayDeclaration );
	[GrammarRule("atom")]
	private AstParserRuleReturnScope<object, IToken> atom()
	{
		EnterRule_atom();
		EnterRule("atom", 53);
		TraceIn("atom", 53);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int atom_StartIndex = input.Index;

		object root_0 = default(object);

		IToken SingleQuotedString267 = default(IToken);
		IToken DoubleQuotedString268 = default(IToken);
		IToken HereDoc269 = default(IToken);
		IToken Integer270 = default(IToken);
		IToken Real271 = default(IToken);
		IToken Boolean272 = default(IToken);
		AstParserRuleReturnScope<object, IToken> arrayDeclaration273 = default(AstParserRuleReturnScope<object, IToken>);

		object SingleQuotedString267_tree = default(object);
		object DoubleQuotedString268_tree = default(object);
		object HereDoc269_tree = default(object);
		object Integer270_tree = default(object);
		object Real271_tree = default(object);
		object Boolean272_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(436, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// Php.g:436:5: ( SingleQuotedString | DoubleQuotedString | HereDoc | Integer | Real | Boolean | arrayDeclaration )
			int alt72=7;
			try { DebugEnterDecision(72, false);
			switch (input.LA(1))
			{
			case SingleQuotedString:
				{
				alt72 = 1;
				}
				break;
			case DoubleQuotedString:
				{
				alt72 = 2;
				}
				break;
			case HereDoc:
				{
				alt72 = 3;
				}
				break;
			case Integer:
				{
				alt72 = 4;
				}
				break;
			case Real:
				{
				alt72 = 5;
				}
				break;
			case Boolean:
				{
				alt72 = 6;
				}
				break;
			case Array:
				{
				alt72 = 7;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 72, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:436:7: SingleQuotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(436, 7);
				SingleQuotedString267=(IToken)Match(input,SingleQuotedString,Follow._SingleQuotedString_in_atom3361); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SingleQuotedString267_tree = (object)adaptor.Create(SingleQuotedString267);
				adaptor.AddChild(root_0, SingleQuotedString267_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:436:28: DoubleQuotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(436, 28);
				DoubleQuotedString268=(IToken)Match(input,DoubleQuotedString,Follow._DoubleQuotedString_in_atom3365); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DoubleQuotedString268_tree = (object)adaptor.Create(DoubleQuotedString268);
				adaptor.AddChild(root_0, DoubleQuotedString268_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Php.g:436:49: HereDoc
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(436, 49);
				HereDoc269=(IToken)Match(input,HereDoc,Follow._HereDoc_in_atom3369); if (state.failed) return retval;
				if (state.backtracking == 0) {
				HereDoc269_tree = (object)adaptor.Create(HereDoc269);
				adaptor.AddChild(root_0, HereDoc269_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Php.g:436:59: Integer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(436, 59);
				Integer270=(IToken)Match(input,Integer,Follow._Integer_in_atom3373); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Integer270_tree = (object)adaptor.Create(Integer270);
				adaptor.AddChild(root_0, Integer270_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Php.g:436:69: Real
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(436, 69);
				Real271=(IToken)Match(input,Real,Follow._Real_in_atom3377); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Real271_tree = (object)adaptor.Create(Real271);
				adaptor.AddChild(root_0, Real271_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Php.g:436:76: Boolean
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(436, 76);
				Boolean272=(IToken)Match(input,Boolean,Follow._Boolean_in_atom3381); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Boolean272_tree = (object)adaptor.Create(Boolean272);
				adaptor.AddChild(root_0, Boolean272_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Php.g:436:86: arrayDeclaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(436, 86);
				PushFollow(Follow._arrayDeclaration_in_atom3385);
				arrayDeclaration273=arrayDeclaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arrayDeclaration273.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 53);
			LeaveRule("atom", 53);
			LeaveRule_atom();
			if (state.backtracking > 0) { Memoize(input, 53, atom_StartIndex); }

		}
		DebugLocation(437, 4);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"

	partial void EnterRule_reference();
	partial void LeaveRule_reference();
	// $ANTLR start "reference"
	// Php.g:440:1: reference : ( Ampersand ^ nameOrFunctionCall | nameOrFunctionCall );
	[GrammarRule("reference")]
	private AstParserRuleReturnScope<object, IToken> reference()
	{
		EnterRule_reference();
		EnterRule("reference", 54);
		TraceIn("reference", 54);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int reference_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Ampersand274 = default(IToken);
		AstParserRuleReturnScope<object, IToken> nameOrFunctionCall275 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> nameOrFunctionCall276 = default(AstParserRuleReturnScope<object, IToken>);

		object Ampersand274_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "reference");
		DebugLocation(440, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// Php.g:441:5: ( Ampersand ^ nameOrFunctionCall | nameOrFunctionCall )
			int alt73=2;
			try { DebugEnterDecision(73, false);
			int LA73_1 = input.LA(1);

			if ((LA73_1==Ampersand))
			{
				alt73 = 1;
			}
			else if ((LA73_1==Dollar||LA73_1==UnquotedString))
			{
				alt73 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 73, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:441:7: Ampersand ^ nameOrFunctionCall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(441, 16);
				Ampersand274=(IToken)Match(input,Ampersand,Follow._Ampersand_in_reference3403); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Ampersand274_tree = (object)adaptor.Create(Ampersand274);
				root_0 = (object)adaptor.BecomeRoot(Ampersand274_tree, root_0);
				}
				DebugLocation(441, 18);
				PushFollow(Follow._nameOrFunctionCall_in_reference3406);
				nameOrFunctionCall275=nameOrFunctionCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nameOrFunctionCall275.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:442:7: nameOrFunctionCall
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(442, 7);
				PushFollow(Follow._nameOrFunctionCall_in_reference3414);
				nameOrFunctionCall276=nameOrFunctionCall();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, nameOrFunctionCall276.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("reference", 54);
			LeaveRule("reference", 54);
			LeaveRule_reference();
			if (state.backtracking > 0) { Memoize(input, 54, reference_StartIndex); }

		}
		DebugLocation(443, 4);
		} finally { DebugExitRule(GrammarFileName, "reference"); }
		return retval;

	}
	// $ANTLR end "reference"

	partial void EnterRule_nameOrFunctionCall();
	partial void LeaveRule_nameOrFunctionCall();
	// $ANTLR start "nameOrFunctionCall"
	// Php.g:445:1: nameOrFunctionCall : ( name OpenRoundBracket ( expression ( Comma expression )* )? CloseRoundBracket -> ^( Apply name ( expression )* ) | name );
	[GrammarRule("nameOrFunctionCall")]
	private AstParserRuleReturnScope<object, IToken> nameOrFunctionCall()
	{
		EnterRule_nameOrFunctionCall();
		EnterRule("nameOrFunctionCall", 55);
		TraceIn("nameOrFunctionCall", 55);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int nameOrFunctionCall_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OpenRoundBracket278 = default(IToken);
		IToken Comma280 = default(IToken);
		IToken CloseRoundBracket282 = default(IToken);
		AstParserRuleReturnScope<object, IToken> name277 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression279 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression281 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> name283 = default(AstParserRuleReturnScope<object, IToken>);

		object OpenRoundBracket278_tree = default(object);
		object Comma280_tree = default(object);
		object CloseRoundBracket282_tree = default(object);
		RewriteRuleITokenStream stream_OpenRoundBracket=new RewriteRuleITokenStream(adaptor,"token OpenRoundBracket");
		RewriteRuleITokenStream stream_Comma=new RewriteRuleITokenStream(adaptor,"token Comma");
		RewriteRuleITokenStream stream_CloseRoundBracket=new RewriteRuleITokenStream(adaptor,"token CloseRoundBracket");
		RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "nameOrFunctionCall");
		DebugLocation(445, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// Php.g:446:5: ( name OpenRoundBracket ( expression ( Comma expression )* )? CloseRoundBracket -> ^( Apply name ( expression )* ) | name )
			int alt76=2;
			try { DebugEnterDecision(76, false);
			int LA76_1 = input.LA(1);

			if ((LA76_1==UnquotedString))
			{
				switch (input.LA(2))
				{
				case ClassMember:
					{
					int LA76_3 = input.LA(3);

					if ((EvaluatePredicate(synpred113_Php_fragment)))
					{
						alt76 = 1;
					}
					else if ((true))
					{
						alt76 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 76, 3, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case OpenSquareBracket:
					{
					int LA76_3 = input.LA(3);

					if ((EvaluatePredicate(synpred113_Php_fragment)))
					{
						alt76 = 1;
					}
					else if ((true))
					{
						alt76 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 76, 4, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case InstanceMember:
					{
					int LA76_3 = input.LA(3);

					if ((EvaluatePredicate(synpred113_Php_fragment)))
					{
						alt76 = 1;
					}
					else if ((true))
					{
						alt76 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 76, 5, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case OpenRoundBracket:
					{
					alt76 = 1;
					}
					break;
				case EOF:
				case Ampersand:
				case And:
				case ArrayAssign:
				case Asterisk:
				case BodyString:
				case CloseRoundBracket:
				case CloseSquareBracket:
				case Colon:
				case Comma:
				case ComparisionOperator:
				case Dot:
				case EqualityOperator:
				case Forwardslash:
				case Instanceof:
				case LogicalAnd:
				case LogicalOr:
				case Minus:
				case Or:
				case Percent:
				case Pipe:
				case Plus:
				case QuestionMark:
				case SemiColon:
				case ShiftOperator:
				case Xor:
					{
					alt76 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 76, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA76_1==Dollar))
			{
				int LA76_2 = input.LA(2);

				if ((LA76_2==Dollar))
				{
					int LA76_3 = input.LA(3);

					if ((EvaluatePredicate(synpred113_Php_fragment)))
					{
						alt76 = 1;
					}
					else if ((true))
					{
						alt76 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 76, 29, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA76_2==UnquotedString))
				{
					int LA76_3 = input.LA(3);

					if ((EvaluatePredicate(synpred113_Php_fragment)))
					{
						alt76 = 1;
					}
					else if ((true))
					{
						alt76 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 76, 30, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 76, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 76, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:446:7: name OpenRoundBracket ( expression ( Comma expression )* )? CloseRoundBracket
				{
				DebugLocation(446, 7);
				PushFollow(Follow._name_in_nameOrFunctionCall3431);
				name277=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_name.Add(name277.Tree);
				DebugLocation(446, 12);
				OpenRoundBracket278=(IToken)Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_nameOrFunctionCall3433); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_OpenRoundBracket.Add(OpenRoundBracket278);

				DebugLocation(446, 29);
				// Php.g:446:29: ( expression ( Comma expression )* )?
				int alt75=2;
				try { DebugEnterSubRule(75);
				try { DebugEnterDecision(75, false);
				int LA75_1 = input.LA(1);

				if ((LA75_1==Ampersand||LA75_1==Array||LA75_1==Bang||LA75_1==Boolean||LA75_1==Clone||LA75_1==Dollar||LA75_1==DoubleQuotedString||LA75_1==HereDoc||LA75_1==IncrementOperator||LA75_1==Integer||LA75_1==List||LA75_1==Minus||LA75_1==New||LA75_1==OpenRoundBracket||LA75_1==Real||LA75_1==SingleQuotedString||LA75_1==SuppressWarnings||LA75_1==Tilde||LA75_1==UnquotedString))
				{
					alt75 = 1;
				}
				} finally { DebugExitDecision(75); }
				switch (alt75)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:446:30: expression ( Comma expression )*
					{
					DebugLocation(446, 30);
					PushFollow(Follow._expression_in_nameOrFunctionCall3436);
					expression279=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expression.Add(expression279.Tree);
					DebugLocation(446, 41);
					// Php.g:446:41: ( Comma expression )*
					try { DebugEnterSubRule(74);
					while (true)
					{
						int alt74=2;
						try { DebugEnterDecision(74, false);
						int LA74_1 = input.LA(1);

						if ((LA74_1==Comma))
						{
							alt74 = 1;
						}


						} finally { DebugExitDecision(74); }
						switch ( alt74 )
						{
						case 1:
							DebugEnterAlt(1);
							// Php.g:446:42: Comma expression
							{
							DebugLocation(446, 42);
							Comma280=(IToken)Match(input,Comma,Follow._Comma_in_nameOrFunctionCall3439); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_Comma.Add(Comma280);

							DebugLocation(446, 48);
							PushFollow(Follow._expression_in_nameOrFunctionCall3441);
							expression281=expression();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expression.Add(expression281.Tree);

							}
							break;

						default:
							goto loop74;
						}
					}

					loop74:
						;

					} finally { DebugExitSubRule(74); }


					}
					break;

				}
				} finally { DebugExitSubRule(75); }

				DebugLocation(446, 63);
				CloseRoundBracket282=(IToken)Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_nameOrFunctionCall3447); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_CloseRoundBracket.Add(CloseRoundBracket282);



				{
				// AST REWRITE
				// elements: name, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 446:81: -> ^( Apply name ( expression )* )
				{
					DebugLocation(446, 84);
					// Php.g:446:84: ^( Apply name ( expression )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(446, 86);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(Apply, "Apply"), root_1);

					DebugLocation(446, 92);
					adaptor.AddChild(root_1, stream_name.NextTree());
					DebugLocation(446, 97);
					// Php.g:446:97: ( expression )*
					while ( stream_expression.HasNext )
					{
						DebugLocation(446, 97);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:447:7: name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(447, 7);
				PushFollow(Follow._name_in_nameOrFunctionCall3466);
				name283=name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, name283.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("nameOrFunctionCall", 55);
			LeaveRule("nameOrFunctionCall", 55);
			LeaveRule_nameOrFunctionCall();
			if (state.backtracking > 0) { Memoize(input, 55, nameOrFunctionCall_StartIndex); }

		}
		DebugLocation(448, 4);
		} finally { DebugExitRule(GrammarFileName, "nameOrFunctionCall"); }
		return retval;

	}
	// $ANTLR end "nameOrFunctionCall"

	partial void EnterRule_name();
	partial void LeaveRule_name();
	// $ANTLR start "name"
	// Php.g:450:1: name : ( staticMemberAccess | memberAccess | variable );
	[GrammarRule("name")]
	private AstParserRuleReturnScope<object, IToken> name()
	{
		EnterRule_name();
		EnterRule("name", 56);
		TraceIn("name", 56);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int name_StartIndex = input.Index;

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> staticMemberAccess284 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> memberAccess285 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> variable286 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "name");
		DebugLocation(450, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// Php.g:450:5: ( staticMemberAccess | memberAccess | variable )
			int alt77=3;
			try { DebugEnterDecision(77, false);
			int LA77_1 = input.LA(1);

			if ((LA77_1==UnquotedString))
			{
				int LA77_2 = input.LA(2);

				if ((LA77_2==ClassMember))
				{
					alt77 = 1;
				}
				else if ((EvaluatePredicate(synpred115_Php_fragment)))
				{
					alt77 = 2;
				}
				else if ((true))
				{
					alt77 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 77, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA77_1==Dollar))
			{
				int LA77_2 = input.LA(2);

				if ((LA77_2==Dollar))
				{
					int LA77_3 = input.LA(3);

					if ((EvaluatePredicate(synpred115_Php_fragment)))
					{
						alt77 = 2;
					}
					else if ((true))
					{
						alt77 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 77, 33, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA77_2==UnquotedString))
				{
					int LA77_3 = input.LA(3);

					if ((EvaluatePredicate(synpred115_Php_fragment)))
					{
						alt77 = 2;
					}
					else if ((true))
					{
						alt77 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 77, 34, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 77, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 77, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:450:7: staticMemberAccess
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(450, 7);
				PushFollow(Follow._staticMemberAccess_in_name3478);
				staticMemberAccess284=staticMemberAccess();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, staticMemberAccess284.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:451:7: memberAccess
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(451, 7);
				PushFollow(Follow._memberAccess_in_name3486);
				memberAccess285=memberAccess();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, memberAccess285.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Php.g:452:7: variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(452, 7);
				PushFollow(Follow._variable_in_name3494);
				variable286=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable286.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("name", 56);
			LeaveRule("name", 56);
			LeaveRule_name();
			if (state.backtracking > 0) { Memoize(input, 56, name_StartIndex); }

		}
		DebugLocation(453, 4);
		} finally { DebugExitRule(GrammarFileName, "name"); }
		return retval;

	}
	// $ANTLR end "name"

	partial void EnterRule_staticMemberAccess();
	partial void LeaveRule_staticMemberAccess();
	// $ANTLR start "staticMemberAccess"
	// Php.g:455:1: staticMemberAccess : UnquotedString '::' ^ variable ;
	[GrammarRule("staticMemberAccess")]
	private AstParserRuleReturnScope<object, IToken> staticMemberAccess()
	{
		EnterRule_staticMemberAccess();
		EnterRule("staticMemberAccess", 57);
		TraceIn("staticMemberAccess", 57);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int staticMemberAccess_StartIndex = input.Index;

		object root_0 = default(object);

		IToken UnquotedString287 = default(IToken);
		IToken string_literal288 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variable289 = default(AstParserRuleReturnScope<object, IToken>);

		object UnquotedString287_tree = default(object);
		object string_literal288_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "staticMemberAccess");
		DebugLocation(455, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// Php.g:456:5: ( UnquotedString '::' ^ variable )
			DebugEnterAlt(1);
			// Php.g:456:7: UnquotedString '::' ^ variable
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(456, 7);
			UnquotedString287=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_staticMemberAccess3515); if (state.failed) return retval;
			if (state.backtracking == 0) {
			UnquotedString287_tree = (object)adaptor.Create(UnquotedString287);
			adaptor.AddChild(root_0, UnquotedString287_tree);
			}
			DebugLocation(456, 26);
			string_literal288=(IToken)Match(input,ClassMember,Follow._ClassMember_in_staticMemberAccess3517); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal288_tree = (object)adaptor.Create(string_literal288);
			root_0 = (object)adaptor.BecomeRoot(string_literal288_tree, root_0);
			}
			DebugLocation(456, 28);
			PushFollow(Follow._variable_in_staticMemberAccess3520);
			variable289=variable();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variable289.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("staticMemberAccess", 57);
			LeaveRule("staticMemberAccess", 57);
			LeaveRule_staticMemberAccess();
			if (state.backtracking > 0) { Memoize(input, 57, staticMemberAccess_StartIndex); }

		}
		DebugLocation(457, 4);
		} finally { DebugExitRule(GrammarFileName, "staticMemberAccess"); }
		return retval;

	}
	// $ANTLR end "staticMemberAccess"

	partial void EnterRule_memberAccess();
	partial void LeaveRule_memberAccess();
	// $ANTLR start "memberAccess"
	// Php.g:459:1: memberAccess : variable ( OpenSquareBracket ^ expression CloseSquareBracket !| '->' ^ UnquotedString )* ;
	[GrammarRule("memberAccess")]
	private AstParserRuleReturnScope<object, IToken> memberAccess()
	{
		EnterRule_memberAccess();
		EnterRule("memberAccess", 58);
		TraceIn("memberAccess", 58);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int memberAccess_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OpenSquareBracket291 = default(IToken);
		IToken CloseSquareBracket293 = default(IToken);
		IToken string_literal294 = default(IToken);
		IToken UnquotedString295 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variable290 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> expression292 = default(AstParserRuleReturnScope<object, IToken>);

		object OpenSquareBracket291_tree = default(object);
		object CloseSquareBracket293_tree = default(object);
		object string_literal294_tree = default(object);
		object UnquotedString295_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "memberAccess");
		DebugLocation(459, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// Php.g:460:5: ( variable ( OpenSquareBracket ^ expression CloseSquareBracket !| '->' ^ UnquotedString )* )
			DebugEnterAlt(1);
			// Php.g:460:7: variable ( OpenSquareBracket ^ expression CloseSquareBracket !| '->' ^ UnquotedString )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(460, 7);
			PushFollow(Follow._variable_in_memberAccess3537);
			variable290=variable();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variable290.Tree);
			DebugLocation(461, 9);
			// Php.g:461:9: ( OpenSquareBracket ^ expression CloseSquareBracket !| '->' ^ UnquotedString )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=3;
				try { DebugEnterDecision(78, false);
				int LA78_1 = input.LA(1);

				if ((LA78_1==OpenSquareBracket))
				{
					alt78 = 1;
				}
				else if ((LA78_1==InstanceMember))
				{
					alt78 = 2;
				}


				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:461:11: OpenSquareBracket ^ expression CloseSquareBracket !
					{
					DebugLocation(461, 28);
					OpenSquareBracket291=(IToken)Match(input,OpenSquareBracket,Follow._OpenSquareBracket_in_memberAccess3550); if (state.failed) return retval;
					if (state.backtracking == 0) {
					OpenSquareBracket291_tree = (object)adaptor.Create(OpenSquareBracket291);
					root_0 = (object)adaptor.BecomeRoot(OpenSquareBracket291_tree, root_0);
					}
					DebugLocation(461, 30);
					PushFollow(Follow._expression_in_memberAccess3553);
					expression292=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression292.Tree);
					DebugLocation(461, 59);
					CloseSquareBracket293=(IToken)Match(input,CloseSquareBracket,Follow._CloseSquareBracket_in_memberAccess3555); if (state.failed) return retval;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Php.g:462:11: '->' ^ UnquotedString
					{
					DebugLocation(462, 15);
					string_literal294=(IToken)Match(input,InstanceMember,Follow._InstanceMember_in_memberAccess3568); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal294_tree = (object)adaptor.Create(string_literal294);
					root_0 = (object)adaptor.BecomeRoot(string_literal294_tree, root_0);
					}
					DebugLocation(462, 17);
					UnquotedString295=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_memberAccess3571); if (state.failed) return retval;
					if (state.backtracking == 0) {
					UnquotedString295_tree = (object)adaptor.Create(UnquotedString295);
					adaptor.AddChild(root_0, UnquotedString295_tree);
					}

					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("memberAccess", 58);
			LeaveRule("memberAccess", 58);
			LeaveRule_memberAccess();
			if (state.backtracking > 0) { Memoize(input, 58, memberAccess_StartIndex); }

		}
		DebugLocation(463, 4);
		} finally { DebugExitRule(GrammarFileName, "memberAccess"); }
		return retval;

	}
	// $ANTLR end "memberAccess"

	partial void EnterRule_variable();
	partial void LeaveRule_variable();
	// $ANTLR start "variable"
	// Php.g:465:1: variable : ( Dollar ^ variable | UnquotedString );
	[GrammarRule("variable")]
	private AstParserRuleReturnScope<object, IToken> variable()
	{
		EnterRule_variable();
		EnterRule("variable", 59);
		TraceIn("variable", 59);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);
		int variable_StartIndex = input.Index;

		object root_0 = default(object);

		IToken Dollar296 = default(IToken);
		IToken UnquotedString298 = default(IToken);
		AstParserRuleReturnScope<object, IToken> variable297 = default(AstParserRuleReturnScope<object, IToken>);

		object Dollar296_tree = default(object);
		object UnquotedString298_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variable");
		DebugLocation(465, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// Php.g:466:5: ( Dollar ^ variable | UnquotedString )
			int alt79=2;
			try { DebugEnterDecision(79, false);
			int LA79_1 = input.LA(1);

			if ((LA79_1==Dollar))
			{
				alt79 = 1;
			}
			else if ((LA79_1==UnquotedString))
			{
				alt79 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 79, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:466:7: Dollar ^ variable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(466, 13);
				Dollar296=(IToken)Match(input,Dollar,Follow._Dollar_in_variable3594); if (state.failed) return retval;
				if (state.backtracking == 0) {
				Dollar296_tree = (object)adaptor.Create(Dollar296);
				root_0 = (object)adaptor.BecomeRoot(Dollar296_tree, root_0);
				}
				DebugLocation(466, 15);
				PushFollow(Follow._variable_in_variable3597);
				variable297=variable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable297.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:467:7: UnquotedString
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(467, 7);
				UnquotedString298=(IToken)Match(input,UnquotedString,Follow._UnquotedString_in_variable3605); if (state.failed) return retval;
				if (state.backtracking == 0) {
				UnquotedString298_tree = (object)adaptor.Create(UnquotedString298);
				adaptor.AddChild(root_0, UnquotedString298_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable", 59);
			LeaveRule("variable", 59);
			LeaveRule_variable();
			if (state.backtracking > 0) { Memoize(input, 59, variable_StartIndex); }

		}
		DebugLocation(468, 4);
		} finally { DebugExitRule(GrammarFileName, "variable"); }
		return retval;

	}
	// $ANTLR end "variable"

	partial void EnterRule_synpred1_Php_fragment();
	partial void LeaveRule_synpred1_Php_fragment();

	// $ANTLR start synpred1_Php
	private void synpred1_Php_fragment()
	{
		EnterRule_synpred1_Php_fragment();
		EnterRule("synpred1_Php_fragment", 60);
		TraceIn("synpred1_Php_fragment", 60);
		try
		{
			// Php.g:168:8: ( statement )
			DebugEnterAlt(1);
			// Php.g:168:8: statement
			{
			DebugLocation(168, 8);
			PushFollow(Follow._statement_in_synpred1_Php922);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_Php_fragment", 60);
			LeaveRule("synpred1_Php_fragment", 60);
			LeaveRule_synpred1_Php_fragment();
		}
	}
	// $ANTLR end synpred1_Php

	partial void EnterRule_synpred2_Php_fragment();
	partial void LeaveRule_synpred2_Php_fragment();

	// $ANTLR start synpred2_Php
	private void synpred2_Php_fragment()
	{
		EnterRule_synpred2_Php_fragment();
		EnterRule("synpred2_Php_fragment", 61);
		TraceIn("synpred2_Php_fragment", 61);
		try
		{
			// Php.g:171:7: ({...}? => printExpr ';' )
			DebugEnterAlt(1);
			// Php.g:171:7: {...}? => printExpr ';'
			{
			DebugLocation(171, 7);
			if (!((expressionFollowsBodyString)))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "synpred2_Php", "expressionFollowsBodyString");
			}
			DebugLocation(171, 77);
			PushFollow(Follow._printExpr_in_synpred2_Php940);
			printExpr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(171, 87);
			Match(input,SemiColon,Follow._SemiColon_in_synpred2_Php942); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_Php_fragment", 61);
			LeaveRule("synpred2_Php_fragment", 61);
			LeaveRule_synpred2_Php_fragment();
		}
	}
	// $ANTLR end synpred2_Php

	partial void EnterRule_synpred4_Php_fragment();
	partial void LeaveRule_synpred4_Php_fragment();

	// $ANTLR start synpred4_Php
	private void synpred4_Php_fragment()
	{
		EnterRule_synpred4_Php_fragment();
		EnterRule("synpred4_Php_fragment", 63);
		TraceIn("synpred4_Php_fragment", 63);
		try
		{
			// Php.g:172:8: ({...}? => ( printExpr )? )
			DebugEnterAlt(1);
			// Php.g:172:8: {...}? => ( printExpr )?
			{
			DebugLocation(172, 8);
			if (!((expressionFollowsBodyString)))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "synpred4_Php", "expressionFollowsBodyString");
			}
			DebugLocation(172, 79);
			// Php.g:172:79: ( printExpr )?
			int alt80=2;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			int LA80_1 = input.LA(1);

			if ((LA80_1==Ampersand||LA80_1==Array||LA80_1==Bang||LA80_1==Boolean||LA80_1==Clone||LA80_1==Dollar||LA80_1==DoubleQuotedString||LA80_1==HereDoc||LA80_1==IncrementOperator||LA80_1==Integer||LA80_1==List||LA80_1==Minus||LA80_1==New||LA80_1==OpenRoundBracket||LA80_1==Real||LA80_1==SingleQuotedString||LA80_1==SuppressWarnings||LA80_1==Tilde||LA80_1==UnquotedString))
			{
				alt80 = 1;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:172:79: printExpr
				{
				DebugLocation(172, 79);
				PushFollow(Follow._printExpr_in_synpred4_Php958);
				printExpr();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(80); }


			}

		}
		finally
		{
			TraceOut("synpred4_Php_fragment", 63);
			LeaveRule("synpred4_Php_fragment", 63);
			LeaveRule_synpred4_Php_fragment();
		}
	}
	// $ANTLR end synpred4_Php

	partial void EnterRule_synpred6_Php_fragment();
	partial void LeaveRule_synpred6_Php_fragment();

	// $ANTLR start synpred6_Php
	private void synpred6_Php_fragment()
	{
		EnterRule_synpred6_Php_fragment();
		EnterRule("synpred6_Php_fragment", 65);
		TraceIn("synpred6_Php_fragment", 65);
		try
		{
			// Php.g:172:7: ( ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString )
			DebugEnterAlt(1);
			// Php.g:172:7: ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString
			{
			DebugLocation(172, 7);
			// Php.g:172:7: ({...}? => ( printExpr )? | ( simpleStatement )? )
			int alt83=2;
			try { DebugEnterSubRule(83);
			try { DebugEnterDecision(83, false);
			try
			{
				alt83 = dfa83.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:172:8: {...}? => ( printExpr )?
				{
				DebugLocation(172, 8);
				if (!((expressionFollowsBodyString)))
				{
					if (state.backtracking>0) {state.failed=true; return;}
					throw new FailedPredicateException(input, "synpred6_Php", "expressionFollowsBodyString");
				}
				DebugLocation(172, 79);
				// Php.g:172:79: ( printExpr )?
				int alt81=2;
				try { DebugEnterSubRule(81);
				try { DebugEnterDecision(81, false);
				int LA81_1 = input.LA(1);

				if ((LA81_1==Ampersand||LA81_1==Array||LA81_1==Bang||LA81_1==Boolean||LA81_1==Clone||LA81_1==Dollar||LA81_1==DoubleQuotedString||LA81_1==HereDoc||LA81_1==IncrementOperator||LA81_1==Integer||LA81_1==List||LA81_1==Minus||LA81_1==New||LA81_1==OpenRoundBracket||LA81_1==Real||LA81_1==SingleQuotedString||LA81_1==SuppressWarnings||LA81_1==Tilde||LA81_1==UnquotedString))
				{
					alt81 = 1;
				}
				} finally { DebugExitDecision(81); }
				switch (alt81)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:172:79: printExpr
					{
					DebugLocation(172, 79);
					PushFollow(Follow._printExpr_in_synpred6_Php958);
					printExpr();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(81); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:172:92: ( simpleStatement )?
				{
				DebugLocation(172, 92);
				// Php.g:172:92: ( simpleStatement )?
				int alt82=2;
				try { DebugEnterSubRule(82);
				try { DebugEnterDecision(82, false);
				int LA82_1 = input.LA(1);

				if ((LA82_1==Ampersand||LA82_1==Array||LA82_1==Bang||(LA82_1>=Boolean && LA82_1<=Break)||LA82_1==Clone||LA82_1==Continue||LA82_1==Dollar||(LA82_1>=DoubleQuotedString && LA82_1<=Echo)||(LA82_1>=Global && LA82_1<=HereDoc)||LA82_1==IncrementOperator||LA82_1==Integer||LA82_1==List||LA82_1==Minus||LA82_1==New||LA82_1==OpenRoundBracket||LA82_1==Real||(LA82_1>=RequireOperator && LA82_1<=Return)||LA82_1==SingleQuotedString||(LA82_1>=Static && LA82_1<=SuppressWarnings)||LA82_1==Tilde||LA82_1==UnquotedString))
				{
					alt82 = 1;
				}
				} finally { DebugExitDecision(82); }
				switch (alt82)
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:172:92: simpleStatement
					{
					DebugLocation(172, 92);
					PushFollow(Follow._simpleStatement_in_synpred6_Php963);
					simpleStatement();
					PopFollow();
					if (state.failed) return;

					}
					break;

				}
				} finally { DebugExitSubRule(82); }


				}
				break;

			}
			} finally { DebugExitSubRule(83); }

			DebugLocation(172, 110);
			Match(input,BodyString,Follow._BodyString_in_synpred6_Php967); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred6_Php_fragment", 65);
			LeaveRule("synpred6_Php_fragment", 65);
			LeaveRule_synpred6_Php_fragment();
		}
	}
	// $ANTLR end synpred6_Php

	partial void EnterRule_synpred7_Php_fragment();
	partial void LeaveRule_synpred7_Php_fragment();

	// $ANTLR start synpred7_Php
	private void synpred7_Php_fragment()
	{
		EnterRule_synpred7_Php_fragment();
		EnterRule("synpred7_Php_fragment", 66);
		TraceIn("synpred7_Php_fragment", 66);
		try
		{
			// Php.g:173:7: ( '{' statement '}' )
			DebugEnterAlt(1);
			// Php.g:173:7: '{' statement '}'
			{
			DebugLocation(173, 7);
			Match(input,OpenCurlyBracket,Follow._OpenCurlyBracket_in_synpred7_Php977); if (state.failed) return;
			DebugLocation(173, 11);
			PushFollow(Follow._statement_in_synpred7_Php979);
			statement();
			PopFollow();
			if (state.failed) return;
			DebugLocation(173, 21);
			Match(input,CloseCurlyBracket,Follow._CloseCurlyBracket_in_synpred7_Php981); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred7_Php_fragment", 66);
			LeaveRule("synpred7_Php_fragment", 66);
			LeaveRule_synpred7_Php_fragment();
		}
	}
	// $ANTLR end synpred7_Php

	partial void EnterRule_synpred8_Php_fragment();
	partial void LeaveRule_synpred8_Php_fragment();

	// $ANTLR start synpred8_Php
	private void synpred8_Php_fragment()
	{
		EnterRule_synpred8_Php_fragment();
		EnterRule("synpred8_Php_fragment", 67);
		TraceIn("synpred8_Php_fragment", 67);
		try
		{
			// Php.g:174:7: ( bracketedBlock )
			DebugEnterAlt(1);
			// Php.g:174:7: bracketedBlock
			{
			DebugLocation(174, 7);
			PushFollow(Follow._bracketedBlock_in_synpred8_Php993);
			bracketedBlock();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred8_Php_fragment", 67);
			LeaveRule("synpred8_Php_fragment", 67);
			LeaveRule_synpred8_Php_fragment();
		}
	}
	// $ANTLR end synpred8_Php

	partial void EnterRule_synpred12_Php_fragment();
	partial void LeaveRule_synpred12_Php_fragment();

	// $ANTLR start synpred12_Php
	private void synpred12_Php_fragment()
	{
		AstParserRuleReturnScope<object, IToken> stmts = default(AstParserRuleReturnScope<object, IToken>);

		EnterRule_synpred12_Php_fragment();
		EnterRule("synpred12_Php_fragment", 71);
		TraceIn("synpred12_Php_fragment", 71);
		try
		{
			// Php.g:187:16: (stmts= statement )
			DebugEnterAlt(1);
			// Php.g:187:16: stmts= statement
			{
			DebugLocation(187, 16);
			PushFollow(Follow._statement_in_synpred12_Php1079);
			stmts=statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred12_Php_fragment", 71);
			LeaveRule("synpred12_Php_fragment", 71);
			LeaveRule_synpred12_Php_fragment();
		}
	}
	// $ANTLR end synpred12_Php

	partial void EnterRule_synpred26_Php_fragment();
	partial void LeaveRule_synpred26_Php_fragment();

	// $ANTLR start synpred26_Php
	private void synpred26_Php_fragment()
	{
		EnterRule_synpred26_Php_fragment();
		EnterRule("synpred26_Php_fragment", 85);
		TraceIn("synpred26_Php_fragment", 85);
		try
		{
			// Php.g:226:7: ( ( fieldModifier )* Function UnquotedString parametersDefinition ( bracketedBlock | ';' ) )
			DebugEnterAlt(1);
			// Php.g:226:7: ( fieldModifier )* Function UnquotedString parametersDefinition ( bracketedBlock | ';' )
			{
			DebugLocation(226, 7);
			// Php.g:226:7: ( fieldModifier )*
			try { DebugEnterSubRule(85);
			while (true)
			{
				int alt85=2;
				try { DebugEnterDecision(85, false);
				int LA85_1 = input.LA(1);

				if (((LA85_1>=Abstract && LA85_1<=AccessModifier)||LA85_1==Static))
				{
					alt85 = 1;
				}


				} finally { DebugExitDecision(85); }
				switch ( alt85 )
				{
				case 1:
					DebugEnterAlt(1);
					// Php.g:226:7: fieldModifier
					{
					DebugLocation(226, 7);
					PushFollow(Follow._fieldModifier_in_synpred26_Php1494);
					fieldModifier();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop85;
				}
			}

			loop85:
				;

			} finally { DebugExitSubRule(85); }

			DebugLocation(226, 22);
			Match(input,Function,Follow._Function_in_synpred26_Php1497); if (state.failed) return;
			DebugLocation(226, 31);
			Match(input,UnquotedString,Follow._UnquotedString_in_synpred26_Php1499); if (state.failed) return;
			DebugLocation(226, 46);
			PushFollow(Follow._parametersDefinition_in_synpred26_Php1501);
			parametersDefinition();
			PopFollow();
			if (state.failed) return;
			DebugLocation(227, 9);
			// Php.g:227:9: ( bracketedBlock | ';' )
			int alt86=2;
			try { DebugEnterSubRule(86);
			try { DebugEnterDecision(86, false);
			int LA86_1 = input.LA(1);

			if ((LA86_1==OpenCurlyBracket))
			{
				alt86 = 1;
			}
			else if ((LA86_1==SemiColon))
			{
				alt86 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 86, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:227:10: bracketedBlock
				{
				DebugLocation(227, 10);
				PushFollow(Follow._bracketedBlock_in_synpred26_Php1513);
				bracketedBlock();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Php.g:227:27: ';'
				{
				DebugLocation(227, 27);
				Match(input,SemiColon,Follow._SemiColon_in_synpred26_Php1517); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(86); }


			}

		}
		finally
		{
			TraceOut("synpred26_Php_fragment", 85);
			LeaveRule("synpred26_Php_fragment", 85);
			LeaveRule_synpred26_Php_fragment();
		}
	}
	// $ANTLR end synpred26_Php

	partial void EnterRule_synpred36_Php_fragment();
	partial void LeaveRule_synpred36_Php_fragment();

	// $ANTLR start synpred36_Php
	private void synpred36_Php_fragment()
	{
		EnterRule_synpred36_Php_fragment();
		EnterRule("synpred36_Php_fragment", 95);
		TraceIn("synpred36_Php_fragment", 95);
		try
		{
			// Php.g:250:58: ( conditional )
			DebugEnterAlt(1);
			// Php.g:250:58: conditional
			{
			DebugLocation(250, 58);
			PushFollow(Follow._conditional_in_synpred36_Php1806);
			conditional();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred36_Php_fragment", 95);
			LeaveRule("synpred36_Php_fragment", 95);
			LeaveRule_synpred36_Php_fragment();
		}
	}
	// $ANTLR end synpred36_Php

	partial void EnterRule_synpred55_Php_fragment();
	partial void LeaveRule_synpred55_Php_fragment();

	// $ANTLR start synpred55_Php
	private void synpred55_Php_fragment()
	{
		EnterRule_synpred55_Php_fragment();
		EnterRule("synpred55_Php_fragment", 114);
		TraceIn("synpred55_Php_fragment", 114);
		try
		{
			// Php.g:274:62: ( conditional )
			DebugEnterAlt(1);
			// Php.g:274:62: conditional
			{
			DebugLocation(274, 62);
			PushFollow(Follow._conditional_in_synpred55_Php2141);
			conditional();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred55_Php_fragment", 114);
			LeaveRule("synpred55_Php_fragment", 114);
			LeaveRule_synpred55_Php_fragment();
		}
	}
	// $ANTLR end synpred55_Php

	partial void EnterRule_synpred61_Php_fragment();
	partial void LeaveRule_synpred61_Php_fragment();

	// $ANTLR start synpred61_Php
	private void synpred61_Php_fragment()
	{
		EnterRule_synpred61_Php_fragment();
		EnterRule("synpred61_Php_fragment", 120);
		TraceIn("synpred61_Php_fragment", 120);
		try
		{
			// Php.g:295:29: ( statement )
			DebugEnterAlt(1);
			// Php.g:295:29: statement
			{
			DebugLocation(295, 29);
			PushFollow(Follow._statement_in_synpred61_Php2307);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred61_Php_fragment", 120);
			LeaveRule("synpred61_Php_fragment", 120);
			LeaveRule_synpred61_Php_fragment();
		}
	}
	// $ANTLR end synpred61_Php

	partial void EnterRule_synpred62_Php_fragment();
	partial void LeaveRule_synpred62_Php_fragment();

	// $ANTLR start synpred62_Php
	private void synpred62_Php_fragment()
	{
		EnterRule_synpred62_Php_fragment();
		EnterRule("synpred62_Php_fragment", 121);
		TraceIn("synpred62_Php_fragment", 121);
		try
		{
			// Php.g:299:22: ( statement )
			DebugEnterAlt(1);
			// Php.g:299:22: statement
			{
			DebugLocation(299, 22);
			PushFollow(Follow._statement_in_synpred62_Php2333);
			statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred62_Php_fragment", 121);
			LeaveRule("synpred62_Php_fragment", 121);
			LeaveRule_synpred62_Php_fragment();
		}
	}
	// $ANTLR end synpred62_Php

	partial void EnterRule_synpred68_Php_fragment();
	partial void LeaveRule_synpred68_Php_fragment();

	// $ANTLR start synpred68_Php
	private void synpred68_Php_fragment()
	{
		EnterRule_synpred68_Php_fragment();
		EnterRule("synpred68_Php_fragment", 127);
		TraceIn("synpred68_Php_fragment", 127);
		try
		{
			// Php.g:329:23: ( Or weakLogicalXor )
			DebugEnterAlt(1);
			// Php.g:329:23: Or weakLogicalXor
			{
			DebugLocation(329, 23);
			Match(input,Or,Follow._Or_in_synpred68_Php2556); if (state.failed) return;
			DebugLocation(329, 27);
			PushFollow(Follow._weakLogicalXor_in_synpred68_Php2559);
			weakLogicalXor();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred68_Php_fragment", 127);
			LeaveRule("synpred68_Php_fragment", 127);
			LeaveRule_synpred68_Php_fragment();
		}
	}
	// $ANTLR end synpred68_Php

	partial void EnterRule_synpred69_Php_fragment();
	partial void LeaveRule_synpred69_Php_fragment();

	// $ANTLR start synpred69_Php
	private void synpred69_Php_fragment()
	{
		EnterRule_synpred69_Php_fragment();
		EnterRule("synpred69_Php_fragment", 128);
		TraceIn("synpred69_Php_fragment", 128);
		try
		{
			// Php.g:333:23: ( Xor weakLogicalAnd )
			DebugEnterAlt(1);
			// Php.g:333:23: Xor weakLogicalAnd
			{
			DebugLocation(333, 23);
			Match(input,Xor,Follow._Xor_in_synpred69_Php2581); if (state.failed) return;
			DebugLocation(333, 28);
			PushFollow(Follow._weakLogicalAnd_in_synpred69_Php2584);
			weakLogicalAnd();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred69_Php_fragment", 128);
			LeaveRule("synpred69_Php_fragment", 128);
			LeaveRule_synpred69_Php_fragment();
		}
	}
	// $ANTLR end synpred69_Php

	partial void EnterRule_synpred70_Php_fragment();
	partial void LeaveRule_synpred70_Php_fragment();

	// $ANTLR start synpred70_Php
	private void synpred70_Php_fragment()
	{
		EnterRule_synpred70_Php_fragment();
		EnterRule("synpred70_Php_fragment", 129);
		TraceIn("synpred70_Php_fragment", 129);
		try
		{
			// Php.g:337:19: ( And assignment )
			DebugEnterAlt(1);
			// Php.g:337:19: And assignment
			{
			DebugLocation(337, 19);
			Match(input,And,Follow._And_in_synpred70_Php2610); if (state.failed) return;
			DebugLocation(337, 24);
			PushFollow(Follow._assignment_in_synpred70_Php2613);
			assignment();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred70_Php_fragment", 129);
			LeaveRule("synpred70_Php_fragment", 129);
			LeaveRule_synpred70_Php_fragment();
		}
	}
	// $ANTLR end synpred70_Php

	partial void EnterRule_synpred72_Php_fragment();
	partial void LeaveRule_synpred72_Php_fragment();

	// $ANTLR start synpred72_Php
	private void synpred72_Php_fragment()
	{
		EnterRule_synpred72_Php_fragment();
		EnterRule("synpred72_Php_fragment", 131);
		TraceIn("synpred72_Php_fragment", 131);
		try
		{
			// Php.g:341:7: ( listVariables ( ( Equals | AsignmentOperator ) assignment ) )
			DebugEnterAlt(1);
			// Php.g:341:7: listVariables ( ( Equals | AsignmentOperator ) assignment )
			{
			DebugLocation(341, 7);
			PushFollow(Follow._listVariables_in_synpred72_Php2632);
			listVariables();
			PopFollow();
			if (state.failed) return;
			DebugLocation(341, 21);
			// Php.g:341:21: ( ( Equals | AsignmentOperator ) assignment )
			DebugEnterAlt(1);
			// Php.g:341:22: ( Equals | AsignmentOperator ) assignment
			{
			DebugLocation(341, 22);
			if (input.LA(1)==AsignmentOperator||input.LA(1)==Equals)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(341, 52);
			PushFollow(Follow._assignment_in_synpred72_Php2644);
			assignment();
			PopFollow();
			if (state.failed) return;

			}


			}

		}
		finally
		{
			TraceOut("synpred72_Php_fragment", 131);
			LeaveRule("synpred72_Php_fragment", 131);
			LeaveRule_synpred72_Php_fragment();
		}
	}
	// $ANTLR end synpred72_Php

	partial void EnterRule_synpred75_Php_fragment();
	partial void LeaveRule_synpred75_Php_fragment();

	// $ANTLR start synpred75_Php
	private void synpred75_Php_fragment()
	{
		EnterRule_synpred75_Php_fragment();
		EnterRule("synpred75_Php_fragment", 134);
		TraceIn("synpred75_Php_fragment", 134);
		try
		{
			// Php.g:351:7: ( logicalOr QuestionMark expression Colon expression )
			DebugEnterAlt(1);
			// Php.g:351:7: logicalOr QuestionMark expression Colon expression
			{
			DebugLocation(351, 7);
			PushFollow(Follow._logicalOr_in_synpred75_Php2714);
			logicalOr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(351, 17);
			Match(input,QuestionMark,Follow._QuestionMark_in_synpred75_Php2716); if (state.failed) return;
			DebugLocation(351, 30);
			PushFollow(Follow._expression_in_synpred75_Php2718);
			expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(351, 41);
			Match(input,Colon,Follow._Colon_in_synpred75_Php2720); if (state.failed) return;
			DebugLocation(351, 47);
			PushFollow(Follow._expression_in_synpred75_Php2722);
			expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred75_Php_fragment", 134);
			LeaveRule("synpred75_Php_fragment", 134);
			LeaveRule_synpred75_Php_fragment();
		}
	}
	// $ANTLR end synpred75_Php

	partial void EnterRule_synpred97_Php_fragment();
	partial void LeaveRule_synpred97_Php_fragment();

	// $ANTLR start synpred97_Php
	private void synpred97_Php_fragment()
	{
		EnterRule_synpred97_Php_fragment();
		EnterRule("synpred97_Php_fragment", 156);
		TraceIn("synpred97_Php_fragment", 156);
		try
		{
			// Php.g:409:7: ( name IncrementOperator )
			DebugEnterAlt(1);
			// Php.g:409:7: name IncrementOperator
			{
			DebugLocation(409, 7);
			PushFollow(Follow._name_in_synpred97_Php3168);
			name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(409, 12);
			Match(input,IncrementOperator,Follow._IncrementOperator_in_synpred97_Php3170); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred97_Php_fragment", 156);
			LeaveRule("synpred97_Php_fragment", 156);
			LeaveRule_synpred97_Php_fragment();
		}
	}
	// $ANTLR end synpred97_Php

	partial void EnterRule_synpred103_Php_fragment();
	partial void LeaveRule_synpred103_Php_fragment();

	// $ANTLR start synpred103_Php
	private void synpred103_Php_fragment()
	{
		EnterRule_synpred103_Php_fragment();
		EnterRule("synpred103_Php_fragment", 162);
		TraceIn("synpred103_Php_fragment", 162);
		try
		{
			// Php.g:429:8: ( keyValuePair )
			DebugEnterAlt(1);
			// Php.g:429:8: keyValuePair
			{
			DebugLocation(429, 8);
			PushFollow(Follow._keyValuePair_in_synpred103_Php3312);
			keyValuePair();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred103_Php_fragment", 162);
			LeaveRule("synpred103_Php_fragment", 162);
			LeaveRule_synpred103_Php_fragment();
		}
	}
	// $ANTLR end synpred103_Php

	partial void EnterRule_synpred113_Php_fragment();
	partial void LeaveRule_synpred113_Php_fragment();

	// $ANTLR start synpred113_Php
	private void synpred113_Php_fragment()
	{
		EnterRule_synpred113_Php_fragment();
		EnterRule("synpred113_Php_fragment", 172);
		TraceIn("synpred113_Php_fragment", 172);
		try
		{
			// Php.g:446:7: ( name OpenRoundBracket ( expression ( Comma expression )* )? CloseRoundBracket )
			DebugEnterAlt(1);
			// Php.g:446:7: name OpenRoundBracket ( expression ( Comma expression )* )? CloseRoundBracket
			{
			DebugLocation(446, 7);
			PushFollow(Follow._name_in_synpred113_Php3431);
			name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(446, 12);
			Match(input,OpenRoundBracket,Follow._OpenRoundBracket_in_synpred113_Php3433); if (state.failed) return;
			DebugLocation(446, 29);
			// Php.g:446:29: ( expression ( Comma expression )* )?
			int alt101=2;
			try { DebugEnterSubRule(101);
			try { DebugEnterDecision(101, false);
			int LA101_1 = input.LA(1);

			if ((LA101_1==Ampersand||LA101_1==Array||LA101_1==Bang||LA101_1==Boolean||LA101_1==Clone||LA101_1==Dollar||LA101_1==DoubleQuotedString||LA101_1==HereDoc||LA101_1==IncrementOperator||LA101_1==Integer||LA101_1==List||LA101_1==Minus||LA101_1==New||LA101_1==OpenRoundBracket||LA101_1==Real||LA101_1==SingleQuotedString||LA101_1==SuppressWarnings||LA101_1==Tilde||LA101_1==UnquotedString))
			{
				alt101 = 1;
			}
			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// Php.g:446:30: expression ( Comma expression )*
				{
				DebugLocation(446, 30);
				PushFollow(Follow._expression_in_synpred113_Php3436);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(446, 41);
				// Php.g:446:41: ( Comma expression )*
				try { DebugEnterSubRule(100);
				while (true)
				{
					int alt100=2;
					try { DebugEnterDecision(100, false);
					int LA100_1 = input.LA(1);

					if ((LA100_1==Comma))
					{
						alt100 = 1;
					}


					} finally { DebugExitDecision(100); }
					switch ( alt100 )
					{
					case 1:
						DebugEnterAlt(1);
						// Php.g:446:42: Comma expression
						{
						DebugLocation(446, 42);
						Match(input,Comma,Follow._Comma_in_synpred113_Php3439); if (state.failed) return;
						DebugLocation(446, 48);
						PushFollow(Follow._expression_in_synpred113_Php3441);
						expression();
						PopFollow();
						if (state.failed) return;

						}
						break;

					default:
						goto loop100;
					}
				}

				loop100:
					;

				} finally { DebugExitSubRule(100); }


				}
				break;

			}
			} finally { DebugExitSubRule(101); }

			DebugLocation(446, 63);
			Match(input,CloseRoundBracket,Follow._CloseRoundBracket_in_synpred113_Php3447); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred113_Php_fragment", 172);
			LeaveRule("synpred113_Php_fragment", 172);
			LeaveRule_synpred113_Php_fragment();
		}
	}
	// $ANTLR end synpred113_Php

	partial void EnterRule_synpred115_Php_fragment();
	partial void LeaveRule_synpred115_Php_fragment();

	// $ANTLR start synpred115_Php
	private void synpred115_Php_fragment()
	{
		EnterRule_synpred115_Php_fragment();
		EnterRule("synpred115_Php_fragment", 174);
		TraceIn("synpred115_Php_fragment", 174);
		try
		{
			// Php.g:451:7: ( memberAccess )
			DebugEnterAlt(1);
			// Php.g:451:7: memberAccess
			{
			DebugLocation(451, 7);
			PushFollow(Follow._memberAccess_in_synpred115_Php3486);
			memberAccess();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred115_Php_fragment", 174);
			LeaveRule("synpred115_Php_fragment", 174);
			LeaveRule_synpred115_Php_fragment();
		}
	}
	// $ANTLR end synpred115_Php
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA5 dfa5;
	private DFA4 dfa4;
	private DFA26 dfa26;
	private DFA34 dfa34;
	private DFA53 dfa53;
	private DFA71 dfa71;
	private DFA83 dfa83;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa5 = new DFA5( this, SpecialStateTransition5 );
		dfa4 = new DFA4( this, SpecialStateTransition4 );
		dfa26 = new DFA26( this, SpecialStateTransition26 );
		dfa34 = new DFA34( this, SpecialStateTransition34 );
		dfa53 = new DFA53( this, SpecialStateTransition53 );
		dfa71 = new DFA71( this, SpecialStateTransition71 );
		dfa83 = new DFA83( this, SpecialStateTransition83 );
	}

	private class DFA5 : DFA
	{
		private const string DFA5_eotS =
			"\x13C\xFFFF";
		private const string DFA5_eofS =
			"\x13C\xFFFF";
		private const string DFA5_minS =
			"\x1\x4\x1\x54\x1\x6\x1\x27\x3\x6\x3\x27\x6\x6\x1\x54\x1\x27\x1\xFFFF"+
			"\x1\x6\x2\x27\x2\xF\x2\x6\x1\x4\xA\xFFFF\x16\x0\x1\xFFFF\x46\x0\x1\xFFFF"+
			"\xF\x0\x1\xFFFF\xF\x0\x1\xFFFF\xF\x0\x1\xFFFF\xF\x0\x1\xFFFF\xF\x0\x1"+
			"\xFFFF\x19\x0\x2\xFFFF\x1\x0\x2\xFFFF\x11\x0\x2\xFFFF\x35\x0\x3\xFFFF";
		private const string DFA5_maxS =
			"\x1\x6E\x1\x54\x1\x70\x7\x6C\x6\x70\x1\x54\x1\x6C\x1\xFFFF\x3\x6C\x2"+
			"\x63\x2\x6C\x1\x6E\xA\xFFFF\x16\x0\x1\xFFFF\x46\x0\x1\xFFFF\xF\x0\x1"+
			"\xFFFF\xF\x0\x1\xFFFF\xF\x0\x1\xFFFF\xF\x0\x1\xFFFF\xF\x0\x1\xFFFF\x19"+
			"\x0\x2\xFFFF\x1\x0\x2\xFFFF\x11\x0\x2\xFFFF\x35\x0\x3\xFFFF";
		private const string DFA5_acceptS =
			"\x12\xFFFF\x1\x2\x8\xFFFF\x1\x5\x1\xFFFF\x1\x6\x1\x7\xCE\xFFFF\x1\x8"+
			"\x4B\xFFFF\x1\x4\x1\x1\x1\x3";
		private const string DFA5_specialS =
			"\x25\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14"+
			"\x1\x15\x1\xFFFF\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1"+
			"\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1"+
			"\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1"+
			"\x31\x1\x32\x1\x33\x1\x34\x1\x35\x1\x36\x1\x37\x1\x38\x1\x39\x1\x3A\x1"+
			"\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x1\x40\x1\x41\x1\x42\x1\x43\x1\x44\x1"+
			"\x45\x1\x46\x1\x47\x1\x48\x1\x49\x1\x4A\x1\x4B\x1\x4C\x1\x4D\x1\x4E\x1"+
			"\x4F\x1\x50\x1\x51\x1\x52\x1\x53\x1\x54\x1\x55\x1\x56\x1\x57\x1\x58\x1"+
			"\x59\x1\x5A\x1\x5B\x1\xFFFF\x1\x5C\x1\x5D\x1\x5E\x1\x5F\x1\x60\x1\x61"+
			"\x1\x62\x1\x63\x1\x64\x1\x65\x1\x66\x1\x67\x1\x68\x1\x69\x1\x6A\x1\xFFFF"+
			"\x1\x6B\x1\x6C\x1\x6D\x1\x6E\x1\x6F\x1\x70\x1\x71\x1\x72\x1\x73\x1\x74"+
			"\x1\x75\x1\x76\x1\x77\x1\x78\x1\x79\x1\xFFFF\x1\x7A\x1\x7B\x1\x7C\x1"+
			"\x7D\x1\x7E\x1\x7F\x1\x80\x1\x81\x1\x82\x1\x83\x1\x84\x1\x85\x1\x86\x1"+
			"\x87\x1\x88\x1\xFFFF\x1\x89\x1\x8A\x1\x8B\x1\x8C\x1\x8D\x1\x8E\x1\x8F"+
			"\x1\x90\x1\x91\x1\x92\x1\x93\x1\x94\x1\x95\x1\x96\x1\x97\x1\xFFFF\x1"+
			"\x98\x1\x99\x1\x9A\x1\x9B\x1\x9C\x1\x9D\x1\x9E\x1\x9F\x1\xA0\x1\xA1\x1"+
			"\xA2\x1\xA3\x1\xA4\x1\xA5\x1\xA6\x1\xFFFF\x1\xA7\x1\xA8\x1\xA9\x1\xAA"+
			"\x1\xAB\x1\xAC\x1\xAD\x1\xAE\x1\xAF\x1\xB0\x1\xB1\x1\xB2\x1\xB3\x1\xB4"+
			"\x1\xB5\x1\xB6\x1\xB7\x1\xB8\x1\xB9\x1\xBA\x1\xBB\x1\xBC\x1\xBD\x1\xBE"+
			"\x1\xBF\x2\xFFFF\x1\xC0\x2\xFFFF\x1\xC1\x1\xC2\x1\xC3\x1\xC4\x1\xC5\x1"+
			"\xC6\x1\xC7\x1\xC8\x1\xC9\x1\xCA\x1\xCB\x1\xCC\x1\xCD\x1\xCE\x1\xCF\x1"+
			"\xD0\x1\xD1\x2\xFFFF\x1\xD2\x1\xD3\x1\xD4\x1\xD5\x1\xD6\x1\xD7\x1\xD8"+
			"\x1\xD9\x1\xDA\x1\xDB\x1\xDC\x1\xDD\x1\xDE\x1\xDF\x1\xE0\x1\xE1\x1\xE2"+
			"\x1\xE3\x1\xE4\x1\xE5\x1\xE6\x1\xE7\x1\xE8\x1\xE9\x1\xEA\x1\xEB\x1\xEC"+
			"\x1\xED\x1\xEE\x1\xEF\x1\xF0\x1\xF1\x1\xF2\x1\xF3\x1\xF4\x1\xF5\x1\xF6"+
			"\x1\xF7\x1\xF8\x1\xF9\x1\xFA\x1\xFB\x1\xFC\x1\xFD\x1\xFE\x1\xFF\x1\x100"+
			"\x1\x101\x1\x102\x1\x103\x1\x104\x1\x105\x1\x106\x3\xFFFF}>";
		private static readonly string[] DFA5_transitionS =
			{
				"\x1\x1B\x1\xFFFF\x1\x11\x2\xFFFF\x1\x10\x3\xFFFF\x1\x4\x1\xFFFF\x1\x12"+
				"\x2\xFFFF\x1\xF\x1\x16\x2\xFFFF\x1\x1B\x2\xFFFF\x1\x9\x7\xFFFF\x1\x17"+
				"\x4\xFFFF\x1\x1E\x1\x3\x1\xFFFF\x1\xB\x1\x13\xA\xFFFF\x1\x1E\x3\xFFFF"+
				"\x1\x1E\x1\xFFFF\x1\x1E\x1\x14\x1\xC\x2\xFFFF\x1\x1E\x2\xFFFF\x1\x7"+
				"\x2\xFFFF\x1\xD\x1\x1D\x1\xFFFF\x1\x1\x4\xFFFF\x1\x5\x2\xFFFF\x1\x8"+
				"\x1\xFFFF\x1\x1A\x1\x6\xA\xFFFF\x1\xE\x1\xFFFF\x1\x19\x1\x18\x2\xFFFF"+
				"\x1\xA\x1\xFFFF\x1\x15\x1\x5\x1\x1E\x1\x5\x1\xFFFF\x1\x2\x1\xFFFF\x1"+
				"\x1E",
				"\x1\x25",
				"\x1\x32\x1\x37\x3\xFFFF\x1\x29\x1\x2D\x2\xFFFF\x1\x12\x8\xFFFF\x1\x26"+
				"\x6\xFFFF\x1\x30\x8\xFFFF\x1\x2E\x6\xFFFF\x1\x31\x1\x29\x9\xFFFF\x1"+
				"\x2D\x8\xFFFF\x1\x2A\x1\x28\x1\x2C\x4\xFFFF\x1\x34\x1\x35\x2\xFFFF\x1"+
				"\x2E\x5\xFFFF\x1\x2B\x1\x27\x1\x39\x1\xFFFF\x1\x2D\x1\x33\x1\x2E\x3"+
				"\xFFFF\x1\x36\x4\xFFFF\x1\x3A\x1\x2F\xB\xFFFF\x1\x38",
				"\x1\x3C\x44\xFFFF\x1\x3D",
				"\x1\x4D\x2\xFFFF\x1\x4C\x3\xFFFF\x1\x3E\x4\xFFFF\x1\x4B\x6\xFFFF\x1"+
				"\x45\xD\xFFFF\x1\x43\x1\xFFFF\x1\x47\x13\xFFFF\x1\x48\x5\xFFFF\x1\x41"+
				"\x2\xFFFF\x1\x49\x7\xFFFF\x1\x3F\x2\xFFFF\x1\x44\x2\xFFFF\x1\x40\xA"+
				"\xFFFF\x1\x4A\x5\xFFFF\x1\x46\x2\xFFFF\x1\x3F\x1\xFFFF\x1\x3F\x1\xFFFF"+
				"\x1\x42",
				"\x1\x5A\x2\xFFFF\x1\x59\x8\xFFFF\x1\x58\x6\xFFFF\x1\x52\xD\xFFFF\x1"+
				"\x50\x1\xFFFF\x1\x54\x13\xFFFF\x1\x55\x5\xFFFF\x1\x4E\x2\xFFFF\x1\x56"+
				"\xA\xFFFF\x1\x51\xD\xFFFF\x1\x57\x5\xFFFF\x1\x53\x6\xFFFF\x1\x4F",
				"\x1\x6C\x2\xFFFF\x1\x6B\x3\xFFFF\x1\x5F\x4\xFFFF\x1\x6A\x6\xFFFF\x1"+
				"\x64\xD\xFFFF\x1\x5E\x1\xFFFF\x1\x66\x13\xFFFF\x1\x67\x5\xFFFF\x1\x62"+
				"\x2\xFFFF\x1\x68\x2\xFFFF\x1\x5C\x4\xFFFF\x1\x60\x2\xFFFF\x1\x63\x2"+
				"\xFFFF\x1\x61\x8\xFFFF\x1\x5B\x1\xFFFF\x1\x69\x5\xFFFF\x1\x65\x2\xFFFF"+
				"\x1\x60\x1\xFFFF\x1\x60\x1\xFFFF\x1\x5D",
				"\x1\x6E\x44\xFFFF\x1\x6D",
				"\x1\x70\x44\xFFFF\x1\x6F",
				"\x1\x72\x44\xFFFF\x1\x71",
				"\x1\x79\x1\x7E\x4\xFFFF\x1\x74\x2\xFFFF\x1\x12\xF\xFFFF\x1\x77\x8\xFFFF"+
				"\x1\x75\x6\xFFFF\x1\x78\xA\xFFFF\x1\x74\xA\xFFFF\x1\x73\x4\xFFFF\x1"+
				"\x7B\x1\x7C\x2\xFFFF\x1\x75\x7\xFFFF\x1\x80\x1\xFFFF\x1\x74\x1\x7A\x1"+
				"\x75\x3\xFFFF\x1\x7D\x4\xFFFF\x1\x81\x1\x76\xB\xFFFF\x1\x7F",
				"\x1\x89\x1\x8E\x4\xFFFF\x1\x84\x2\xFFFF\x1\x12\xF\xFFFF\x1\x87\x8\xFFFF"+
				"\x1\x85\x6\xFFFF\x1\x88\xA\xFFFF\x1\x84\xA\xFFFF\x1\x83\x4\xFFFF\x1"+
				"\x8B\x1\x8C\x2\xFFFF\x1\x85\x7\xFFFF\x1\x90\x1\xFFFF\x1\x84\x1\x8A\x1"+
				"\x85\x3\xFFFF\x1\x8D\x4\xFFFF\x1\x91\x1\x86\xB\xFFFF\x1\x8F",
				"\x1\x99\x1\x9E\x4\xFFFF\x1\x94\x2\xFFFF\x1\x12\xF\xFFFF\x1\x97\x8\xFFFF"+
				"\x1\x95\x6\xFFFF\x1\x98\xA\xFFFF\x1\x94\xA\xFFFF\x1\x93\x4\xFFFF\x1"+
				"\x9B\x1\x9C\x2\xFFFF\x1\x95\x7\xFFFF\x1\xA0\x1\xFFFF\x1\x94\x1\x9A\x1"+
				"\x95\x3\xFFFF\x1\x9D\x4\xFFFF\x1\xA1\x1\x96\xB\xFFFF\x1\x9F",
				"\x1\xA9\x1\xAE\x4\xFFFF\x1\xA4\x2\xFFFF\x1\x12\xF\xFFFF\x1\xA7\x8\xFFFF"+
				"\x1\xA5\x6\xFFFF\x1\xA8\xA\xFFFF\x1\xA4\xA\xFFFF\x1\xA3\x4\xFFFF\x1"+
				"\xAB\x1\xAC\x2\xFFFF\x1\xA5\x7\xFFFF\x1\xB0\x1\xFFFF\x1\xA4\x1\xAA\x1"+
				"\xA5\x3\xFFFF\x1\xAD\x4\xFFFF\x1\xB1\x1\xA6\xB\xFFFF\x1\xAF",
				"\x1\xB9\x1\xBE\x4\xFFFF\x1\xB4\x2\xFFFF\x1\x12\xF\xFFFF\x1\xB7\x8\xFFFF"+
				"\x1\xB5\x6\xFFFF\x1\xB8\xA\xFFFF\x1\xB4\xA\xFFFF\x1\xB3\x4\xFFFF\x1"+
				"\xBB\x1\xBC\x2\xFFFF\x1\xB5\x7\xFFFF\x1\xC0\x1\xFFFF\x1\xB4\x1\xBA\x1"+
				"\xB5\x3\xFFFF\x1\xBD\x4\xFFFF\x1\xC1\x1\xB6\xB\xFFFF\x1\xBF",
				"\x1\xC9\x1\xCE\x4\xFFFF\x1\xC4\x2\xFFFF\x1\x12\xF\xFFFF\x1\xC7\x8\xFFFF"+
				"\x1\xC5\x6\xFFFF\x1\xC8\xA\xFFFF\x1\xC4\xA\xFFFF\x1\xC3\x4\xFFFF\x1"+
				"\xCB\x1\xCC\x2\xFFFF\x1\xC5\x7\xFFFF\x1\xD0\x1\xFFFF\x1\xC4\x1\xCA\x1"+
				"\xC5\x3\xFFFF\x1\xCD\x4\xFFFF\x1\xD1\x1\xC6\xB\xFFFF\x1\xCF",
				"\x1\xD3",
				"\x1\xD5\x44\xFFFF\x1\xD4",
				"",
				"\x1\xE6\x2\xFFFF\x1\xE5\x3\xFFFF\x1\xD9\x4\xFFFF\x1\xE4\x6\xFFFF\x1"+
				"\xDE\xD\xFFFF\x1\xD8\x1\xFFFF\x1\xE0\x13\xFFFF\x1\xE1\x5\xFFFF\x1\xDC"+
				"\x2\xFFFF\x1\xE2\x2\xFFFF\x1\xD6\x4\xFFFF\x1\xDA\x2\xFFFF\x1\xDD\x2"+
				"\xFFFF\x1\xDB\xA\xFFFF\x1\xE3\x5\xFFFF\x1\xDF\x2\xFFFF\x1\xDA\x1\xFFFF"+
				"\x1\xDA\x1\xFFFF\x1\xD7",
				"\x1\xE8\x44\xFFFF\x1\xE7",
				"\x1\xE9\x44\xFFFF\x1\xEA",
				"\x1\x12\x36\xFFFF\x1\xEB\x1C\xFFFF\x1\xED",
				"\x1\x12\x36\xFFFF\x1\xEE\x1C\xFFFF\x1\xED",
				"\x1\x101\x2\xFFFF\x1\x100\x3\xFFFF\x1\xF4\x1\xFFFF\x1\x12\x2\xFFFF\x1"+
				"\xFF\x6\xFFFF\x1\xF9\xD\xFFFF\x1\xF3\x1\xFFFF\x1\xFB\x13\xFFFF\x1\xFC"+
				"\x5\xFFFF\x1\xF7\x2\xFFFF\x1\xFD\x2\xFFFF\x1\xF1\x4\xFFFF\x1\xF5\x2"+
				"\xFFFF\x1\xF8\x2\xFFFF\x1\xF6\xA\xFFFF\x1\xFE\x3\xFFFF\x1\xED\x1\xFFFF"+
				"\x1\xFA\x2\xFFFF\x1\xF5\x1\xFFFF\x1\xF5\x1\xFFFF\x1\xF2",
				"\x1\x114\x2\xFFFF\x1\x113\x3\xFFFF\x1\x107\x4\xFFFF\x1\x112\x6\xFFFF"+
				"\x1\x10C\xD\xFFFF\x1\x106\x1\xFFFF\x1\x10E\x13\xFFFF\x1\x10F\x5\xFFFF"+
				"\x1\x10A\x2\xFFFF\x1\x110\x2\xFFFF\x1\x104\x4\xFFFF\x1\x108\x2\xFFFF"+
				"\x1\x10B\x2\xFFFF\x1\x109\xA\xFFFF\x1\x111\x5\xFFFF\x1\x10D\x2\xFFFF"+
				"\x1\x108\x1\xFFFF\x1\x108\x1\xFFFF\x1\x105",
				"\x1\x12F\x1\xFFFF\x1\x125\x2\xFFFF\x1\x124\x3\xFFFF\x1\x118\x1\xFFFF"+
				"\x1\x126\x2\xFFFF\x1\x123\x1\x12A\x2\xFFFF\x1\x130\x2\xFFFF\x1\x11D"+
				"\x1\x139\x6\xFFFF\x1\x12B\x4\xFFFF\x1\x136\x1\x117\x1\xFFFF\x1\x11F"+
				"\x1\x127\xA\xFFFF\x1\x133\x3\xFFFF\x1\x134\x1\xFFFF\x1\x138\x1\x128"+
				"\x1\x120\x2\xFFFF\x1\x132\x2\xFFFF\x1\x11B\x2\xFFFF\x1\x121\x1\x131"+
				"\x1\xFFFF\x1\x115\x4\xFFFF\x1\x119\x2\xFFFF\x1\x11C\x1\xFFFF\x1\x12E"+
				"\x1\x11A\xA\xFFFF\x1\x122\x1\xFFFF\x1\x12D\x1\x12C\x2\xFFFF\x1\x11E"+
				"\x1\xFFFF\x1\x129\x1\x119\x1\x137\x1\x119\x1\xFFFF\x1\x116\x1\xFFFF"+
				"\x1\x135",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				""
			};

		private static readonly short[] DFA5_eot = DFA.UnpackEncodedString(DFA5_eotS);
		private static readonly short[] DFA5_eof = DFA.UnpackEncodedString(DFA5_eofS);
		private static readonly char[] DFA5_min = DFA.UnpackEncodedStringToUnsignedChars(DFA5_minS);
		private static readonly char[] DFA5_max = DFA.UnpackEncodedStringToUnsignedChars(DFA5_maxS);
		private static readonly short[] DFA5_accept = DFA.UnpackEncodedString(DFA5_acceptS);
		private static readonly short[] DFA5_special = DFA.UnpackEncodedString(DFA5_specialS);
		private static readonly short[][] DFA5_transition;

		static DFA5()
		{
			int numStates = DFA5_transitionS.Length;
			DFA5_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA5_transition[i] = DFA.UnpackEncodedString(DFA5_transitionS[i]);
			}
		}

		public DFA5( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 5;
			this.eot = DFA5_eot;
			this.eof = DFA5_eof;
			this.min = DFA5_min;
			this.max = DFA5_max;
			this.accept = DFA5_accept;
			this.special = DFA5_special;
			this.transition = DFA5_transition;
		}

		public override string Description { get { return "170:1: statement : ({...}? => printExpr ';' !| ({...}? => ( printExpr )? | ( simpleStatement )? ) BodyString | '{' statement '}' -> statement | bracketedBlock | classDefinition | interfaceDefinition | complexStatement | simpleStatement ';' !);"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition5(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA5_1 = input.LA(1);
		int index5_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 57:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 58:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 59:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 60:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 61:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 62:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 63:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 64:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 65:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 66:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 67:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 68:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 69:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 70:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 71:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 72:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 73:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 74:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 75:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 76:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 77:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 78:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 79:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 80:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 81:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 82:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 83:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 84:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 85:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 86:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 87:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 88:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 89:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 90:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 91:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 92:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 93:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 94:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 95:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 96:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 97:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 98:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 99:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 100:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 101:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 102:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 103:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 104:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 105:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 106:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 107:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 108:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 109:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 110:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 111:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 112:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 113:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 114:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 115:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 116:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 117:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 118:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 119:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 120:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 121:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 122:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 123:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 124:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 125:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 126:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 127:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 128:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 129:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 130:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 131:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 132:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 133:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 134:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 135:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 136:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 137:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 138:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 139:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 140:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 141:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 142:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 143:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 144:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 145:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 146:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 147:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 148:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 149:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 150:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 151:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 152:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 153:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 154:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 155:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 156:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 157:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 158:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 159:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 160:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 161:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 162:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 163:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 164:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 165:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 166:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 167:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 168:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 169:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred2_Php_fragment)&&(expressionFollowsBodyString)))) {s = 314;}

				else if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 170:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 171:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 172:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 173:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 174:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 175:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 176:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 177:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 178:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 179:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 180:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 181:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 182:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 183:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 184:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 185:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 186:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 187:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 188:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 189:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 190:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 191:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 192:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 193:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 194:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 195:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 196:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 197:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 198:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 199:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 200:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 201:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 202:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 203:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 204:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 205:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 206:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 207:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 208:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 209:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 210:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 211:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 212:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 213:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 214:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 215:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 216:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 217:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 218:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 219:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 220:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 221:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 222:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 223:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 224:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 225:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 226:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred6_Php_fragment))) {s = 18;}

				else if ((true)) {s = 237;}

				input.Seek(index5_1);
				break;
			}
		case 227:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 228:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 229:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 230:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 231:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 232:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 233:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 234:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 235:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 236:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 237:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 238:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 239:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 240:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 241:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 242:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 243:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 244:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 245:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 246:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 247:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 248:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 249:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 250:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 251:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 252:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 253:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 254:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 255:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 256:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 257:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 258:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 259:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 260:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 261:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}
		case 262:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Php_fragment))) {s = 315;}

				else if ((EvaluatePredicate(synpred8_Php_fragment))) {s = 313;}

				input.Seek(index5_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 5, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\xEF\xFFFF";
		private const string DFA4_eofS =
			"\xEF\xFFFF";
		private const string DFA4_minS =
			"\x1\x6\x1\x54\x1\x0\x1\x27\x3\x6\x3\x27\x6\x0\x1\x54\x1\x27\x1\x0\x7"+
			"\xFFFF\x1\x0\x16\xFFFF\x37\x0\x5A\xFFFF\x3\x0\x2A\xFFFF";
		private const string DFA4_maxS =
			"\x1\x6C\x1\x54\x1\x0\x7\x6C\x6\x0\x1\x54\x1\x6C\x1\x0\x7\xFFFF\x1\x0"+
			"\x16\xFFFF\x37\x0\x5A\xFFFF\x3\x0\x2A\xFFFF";
		private const string DFA4_acceptS =
			"\x13\xFFFF\x1\x2\x1C\xFFFF\x1\x1\xBE\xFFFF";
		private const string DFA4_specialS =
			"\x2\xFFFF\x1\x0\x7\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x2\xFFFF"+
			"\x1\x7\x7\xFFFF\x1\x8\x16\xFFFF\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1"+
			"\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1"+
			"\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1"+
			"\x23\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1"+
			"\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1\x32\x1\x33\x1\x34\x1\x35\x1\x36\x1"+
			"\x37\x1\x38\x1\x39\x1\x3A\x1\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x5A\xFFFF"+
			"\x1\x40\x1\x41\x1\x42\x2A\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x11\x2\xFFFF\x1\x10\x3\xFFFF\x1\x4\x1\xFFFF\x1\x12\x2\xFFFF\x1\xF"+
				"\x1\x13\x5\xFFFF\x1\x9\x7\xFFFF\x1\x13\x5\xFFFF\x1\x3\x1\xFFFF\x1\xB"+
				"\x1\x13\x11\xFFFF\x1\x13\x1\xC\x5\xFFFF\x1\x7\x2\xFFFF\x1\xD\x2\xFFFF"+
				"\x1\x1\x4\xFFFF\x1\x5\x2\xFFFF\x1\x8\x2\xFFFF\x1\x6\xA\xFFFF\x1\xE\x1"+
				"\xFFFF\x2\x13\x2\xFFFF\x1\xA\x1\xFFFF\x1\x13\x1\x5\x1\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x2",
				"\x1\x1A",
				"\x1\xFFFF",
				"\x1\x31\x44\xFFFF\x1\x32",
				"\x1\x42\x2\xFFFF\x1\x41\x3\xFFFF\x1\x33\x4\xFFFF\x1\x40\x6\xFFFF\x1"+
				"\x3A\xD\xFFFF\x1\x38\x1\xFFFF\x1\x3C\x13\xFFFF\x1\x3D\x5\xFFFF\x1\x36"+
				"\x2\xFFFF\x1\x3E\x7\xFFFF\x1\x34\x2\xFFFF\x1\x39\x2\xFFFF\x1\x35\xA"+
				"\xFFFF\x1\x3F\x5\xFFFF\x1\x3B\x2\xFFFF\x1\x34\x1\xFFFF\x1\x34\x1\xFFFF"+
				"\x1\x37",
				"\x1\x4F\x2\xFFFF\x1\x4E\x8\xFFFF\x1\x4D\x6\xFFFF\x1\x47\xD\xFFFF\x1"+
				"\x45\x1\xFFFF\x1\x49\x13\xFFFF\x1\x4A\x5\xFFFF\x1\x43\x2\xFFFF\x1\x4B"+
				"\xA\xFFFF\x1\x46\xD\xFFFF\x1\x4C\x5\xFFFF\x1\x48\x6\xFFFF\x1\x44",
				"\x1\x61\x2\xFFFF\x1\x60\x3\xFFFF\x1\x54\x4\xFFFF\x1\x5F\x6\xFFFF\x1"+
				"\x59\xD\xFFFF\x1\x53\x1\xFFFF\x1\x5B\x13\xFFFF\x1\x5C\x5\xFFFF\x1\x57"+
				"\x2\xFFFF\x1\x5D\x2\xFFFF\x1\x51\x4\xFFFF\x1\x55\x2\xFFFF\x1\x58\x2"+
				"\xFFFF\x1\x56\x8\xFFFF\x1\x50\x1\xFFFF\x1\x5E\x5\xFFFF\x1\x5A\x2\xFFFF"+
				"\x1\x55\x1\xFFFF\x1\x55\x1\xFFFF\x1\x52",
				"\x1\x63\x44\xFFFF\x1\x62",
				"\x1\x65\x44\xFFFF\x1\x64",
				"\x1\x67\x44\xFFFF\x1\x66",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xC2",
				"\x1\xC4\x44\xFFFF\x1\xC3",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "172:7: ({...}? => ( printExpr )? | ( simpleStatement )? )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition4(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA4_1 = input.LA(1);
		int index4_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 57:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 58:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 59:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 60:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 61:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 62:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 63:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 64:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 65:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}
		case 66:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index4_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 4, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA26 : DFA
	{
		private const string DFA26_eotS =
			"\x51\xFFFF";
		private const string DFA26_eofS =
			"\x1\x3\x50\xFFFF";
		private const string DFA26_minS =
			"\x1\x4\x2\x0\x4E\xFFFF";
		private const string DFA26_maxS =
			"\x1\x6E\x2\x0\x4E\xFFFF";
		private const string DFA26_acceptS =
			"\x3\xFFFF\x1\x2\x28\xFFFF\x1\x1\x24\xFFFF";
		private const string DFA26_specialS =
			"\x1\xFFFF\x1\x0\x1\x1\x4E\xFFFF}>";
		private static readonly string[] DFA26_transitionS =
			{
				"\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2"+
				"\xFFFF\x3\x3\x1\xFFFF\x1\x3\x2\xFFFF\x2\x3\x6\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x1\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\x2\x1\x1\x8\xFFFF\x1\x3\x3\xFFFF"+
				"\x1\x3\x1\xFFFF\x3\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x2\x3\x1"+
				"\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3\xA\xFFFF\x1"+
				"\x3\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x1\xFFFF\x4\x3\x1\xFFFF\x1\x3\x1\xFFFF"+
				"\x1\x3",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA26_eot = DFA.UnpackEncodedString(DFA26_eotS);
		private static readonly short[] DFA26_eof = DFA.UnpackEncodedString(DFA26_eofS);
		private static readonly char[] DFA26_min = DFA.UnpackEncodedStringToUnsignedChars(DFA26_minS);
		private static readonly char[] DFA26_max = DFA.UnpackEncodedStringToUnsignedChars(DFA26_maxS);
		private static readonly short[] DFA26_accept = DFA.UnpackEncodedString(DFA26_acceptS);
		private static readonly short[] DFA26_special = DFA.UnpackEncodedString(DFA26_specialS);
		private static readonly short[][] DFA26_transition;

		static DFA26()
		{
			int numStates = DFA26_transitionS.Length;
			DFA26_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA26_transition[i] = DFA.UnpackEncodedString(DFA26_transitionS[i]);
			}
		}

		public DFA26( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 26;
			this.eot = DFA26_eot;
			this.eof = DFA26_eof;
			this.min = DFA26_min;
			this.max = DFA26_max;
			this.accept = DFA26_accept;
			this.special = DFA26_special;
			this.transition = DFA26_transition;
		}

		public override string Description { get { return "250:58: ( conditional )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition26(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA26_1 = input.LA(1);
		int index26_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred36_Php_fragment))) {s = 44;}

				else if ((true)) {s = 3;}

				input.Seek(index26_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred36_Php_fragment))) {s = 44;}

				else if ((true)) {s = 3;}

				input.Seek(index26_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 26, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA34 : DFA
	{
		private const string DFA34_eotS =
			"\x51\xFFFF";
		private const string DFA34_eofS =
			"\x1\x3\x50\xFFFF";
		private const string DFA34_minS =
			"\x1\x4\x2\x0\x4E\xFFFF";
		private const string DFA34_maxS =
			"\x1\x6E\x2\x0\x4E\xFFFF";
		private const string DFA34_acceptS =
			"\x3\xFFFF\x1\x2\x28\xFFFF\x1\x1\x24\xFFFF";
		private const string DFA34_specialS =
			"\x1\xFFFF\x1\x0\x1\x1\x4E\xFFFF}>";
		private static readonly string[] DFA34_transitionS =
			{
				"\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2"+
				"\xFFFF\x3\x3\x1\xFFFF\x1\x3\x2\xFFFF\x2\x3\x6\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x1\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\x2\x1\x1\x8\xFFFF\x1\x3\x3\xFFFF"+
				"\x1\x3\x1\xFFFF\x3\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x2\x3\x1"+
				"\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3\xA\xFFFF\x1"+
				"\x3\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x1\xFFFF\x4\x3\x1\xFFFF\x1\x3\x1\xFFFF"+
				"\x1\x3",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA34_eot = DFA.UnpackEncodedString(DFA34_eotS);
		private static readonly short[] DFA34_eof = DFA.UnpackEncodedString(DFA34_eofS);
		private static readonly char[] DFA34_min = DFA.UnpackEncodedStringToUnsignedChars(DFA34_minS);
		private static readonly char[] DFA34_max = DFA.UnpackEncodedStringToUnsignedChars(DFA34_maxS);
		private static readonly short[] DFA34_accept = DFA.UnpackEncodedString(DFA34_acceptS);
		private static readonly short[] DFA34_special = DFA.UnpackEncodedString(DFA34_specialS);
		private static readonly short[][] DFA34_transition;

		static DFA34()
		{
			int numStates = DFA34_transitionS.Length;
			DFA34_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA34_transition[i] = DFA.UnpackEncodedString(DFA34_transitionS[i]);
			}
		}

		public DFA34( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 34;
			this.eot = DFA34_eot;
			this.eof = DFA34_eof;
			this.min = DFA34_min;
			this.max = DFA34_max;
			this.accept = DFA34_accept;
			this.special = DFA34_special;
			this.transition = DFA34_transition;
		}

		public override string Description { get { return "274:62: ( conditional )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition34(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA34_1 = input.LA(1);
		int index34_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 44;}

				else if ((true)) {s = 3;}

				input.Seek(index34_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred55_Php_fragment))) {s = 44;}

				else if ((true)) {s = 3;}

				input.Seek(index34_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 34, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA53 : DFA
	{
		private const string DFA53_eotS =
			"\xEA\xFFFF";
		private const string DFA53_eofS =
			"\x5\xFFFF\x1\x52\x3\xFFFF\x6\x52\xDB\xFFFF";
		private const string DFA53_minS =
			"\x4\x6\x1\x27\x1\x6\x3\x27\x6\x6\x1\x54\x1\x27\x40\x0\xC\xFFFF\x10\x0"+
			"\xC\xFFFF\xA\x0\xC\xFFFF\xA\x0\xC\xFFFF\xA\x0\xC\xFFFF\xA\x0\xC\xFFFF"+
			"\xA\x0\xC\xFFFF\x3\x0";
		private const string DFA53_maxS =
			"\x5\x6C\x1\x70\x3\x6C\x6\x70\x1\x54\x1\x6C\x40\x0\xC\xFFFF\x10\x0\xC"+
			"\xFFFF\xA\x0\xC\xFFFF\xA\x0\xC\xFFFF\xA\x0\xC\xFFFF\xA\x0\xC\xFFFF\xA"+
			"\x0\xC\xFFFF\x3\x0";
		private const string DFA53_acceptS =
			"\x51\xFFFF\x1\x1\x1\x2\x97\xFFFF";
		private const string DFA53_specialS =
			"\x11\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14"+
			"\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E"+
			"\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28"+
			"\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1\x32"+
			"\x1\x33\x1\x34\x1\x35\x1\x36\x1\x37\x1\x38\x1\x39\x1\x3A\x1\x3B\x1\x3C"+
			"\x1\x3D\x1\x3E\x1\x3F\xC\xFFFF\x1\x40\x1\x41\x1\x42\x1\x43\x1\x44\x1"+
			"\x45\x1\x46\x1\x47\x1\x48\x1\x49\x1\x4A\x1\x4B\x1\x4C\x1\x4D\x1\x4E\x1"+
			"\x4F\xC\xFFFF\x1\x50\x1\x51\x1\x52\x1\x53\x1\x54\x1\x55\x1\x56\x1\x57"+
			"\x1\x58\x1\x59\xC\xFFFF\x1\x5A\x1\x5B\x1\x5C\x1\x5D\x1\x5E\x1\x5F\x1"+
			"\x60\x1\x61\x1\x62\x1\x63\xC\xFFFF\x1\x64\x1\x65\x1\x66\x1\x67\x1\x68"+
			"\x1\x69\x1\x6A\x1\x6B\x1\x6C\x1\x6D\xC\xFFFF\x1\x6E\x1\x6F\x1\x70\x1"+
			"\x71\x1\x72\x1\x73\x1\x74\x1\x75\x1\x76\x1\x77\xC\xFFFF\x1\x78\x1\x79"+
			"\x1\x7A\x1\x7B\x1\x7C\x1\x7D\x1\x7E\x1\x7F\x1\x80\x1\x81\xC\xFFFF\x1"+
			"\x82\x1\x83\x1\x84}>";
		private static readonly string[] DFA53_transitionS =
			{
				"\x1\x10\x2\xFFFF\x1\xF\x3\xFFFF\x1\x1\x4\xFFFF\x1\xE\x6\xFFFF\x1\x8"+
				"\xD\xFFFF\x1\x6\x1\xFFFF\x1\xA\x13\xFFFF\x1\xB\x5\xFFFF\x1\x4\x2\xFFFF"+
				"\x1\xC\x7\xFFFF\x1\x2\x2\xFFFF\x1\x7\x2\xFFFF\x1\x3\xA\xFFFF\x1\xD\x5"+
				"\xFFFF\x1\x9\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x5",
				"\x1\x20\x2\xFFFF\x1\x1F\x3\xFFFF\x1\x11\x4\xFFFF\x1\x1E\x6\xFFFF\x1"+
				"\x18\xD\xFFFF\x1\x16\x1\xFFFF\x1\x1A\x13\xFFFF\x1\x1B\x5\xFFFF\x1\x14"+
				"\x2\xFFFF\x1\x1C\x7\xFFFF\x1\x12\x2\xFFFF\x1\x17\x2\xFFFF\x1\x13\xA"+
				"\xFFFF\x1\x1D\x5\xFFFF\x1\x19\x2\xFFFF\x1\x12\x1\xFFFF\x1\x12\x1\xFFFF"+
				"\x1\x15",
				"\x1\x2D\x2\xFFFF\x1\x2C\x8\xFFFF\x1\x2B\x6\xFFFF\x1\x25\xD\xFFFF\x1"+
				"\x23\x1\xFFFF\x1\x27\x13\xFFFF\x1\x28\x5\xFFFF\x1\x21\x2\xFFFF\x1\x29"+
				"\xA\xFFFF\x1\x24\xD\xFFFF\x1\x2A\x5\xFFFF\x1\x26\x6\xFFFF\x1\x22",
				"\x1\x3F\x2\xFFFF\x1\x3E\x3\xFFFF\x1\x32\x4\xFFFF\x1\x3D\x6\xFFFF\x1"+
				"\x37\xD\xFFFF\x1\x31\x1\xFFFF\x1\x39\x13\xFFFF\x1\x3A\x5\xFFFF\x1\x35"+
				"\x2\xFFFF\x1\x3B\x2\xFFFF\x1\x2F\x4\xFFFF\x1\x33\x2\xFFFF\x1\x36\x2"+
				"\xFFFF\x1\x34\x8\xFFFF\x1\x2E\x1\xFFFF\x1\x3C\x5\xFFFF\x1\x38\x2\xFFFF"+
				"\x1\x33\x1\xFFFF\x1\x33\x1\xFFFF\x1\x30",
				"\x1\x41\x44\xFFFF\x1\x40",
				"\x1\x4D\x1\x52\x2\xFFFF\x1\x52\x1\xFFFF\x1\x48\x2\xFFFF\x1\x52\x8\xFFFF"+
				"\x1\x42\x2\xFFFF\x4\x52\x1\x4B\x8\xFFFF\x1\x49\x6\xFFFF\x1\x4C\xA\xFFFF"+
				"\x1\x48\x8\xFFFF\x1\x45\x1\x44\x1\x47\x4\xFFFF\x1\x4F\x1\x50\x2\xFFFF"+
				"\x1\x49\x5\xFFFF\x1\x46\x1\x43\x1\x52\x1\xFFFF\x1\x48\x1\x4E\x1\x49"+
				"\x3\xFFFF\x1\x51\x4\xFFFF\x1\x52\x1\x4A\xB\xFFFF\x1\x52",
				"\x1\x5D\x44\xFFFF\x1\x5E",
				"\x1\x60\x44\xFFFF\x1\x5F",
				"\x1\x62\x44\xFFFF\x1\x61",
				"\x1\x69\x1\x52\x2\xFFFF\x1\x52\x1\xFFFF\x1\x64\x2\xFFFF\x1\x52\xB\xFFFF"+
				"\x4\x52\x1\x67\x8\xFFFF\x1\x65\x6\xFFFF\x1\x68\xA\xFFFF\x1\x64\xA\xFFFF"+
				"\x1\x63\x4\xFFFF\x1\x6B\x1\x6C\x2\xFFFF\x1\x65\x7\xFFFF\x1\x52\x1\xFFFF"+
				"\x1\x64\x1\x6A\x1\x65\x3\xFFFF\x1\x51\x4\xFFFF\x1\x52\x1\x66\xB\xFFFF"+
				"\x1\x52",
				"\x1\x7F\x1\x52\x2\xFFFF\x1\x52\x1\xFFFF\x1\x7A\x2\xFFFF\x1\x52\xB\xFFFF"+
				"\x4\x52\x1\x7D\x8\xFFFF\x1\x7B\x6\xFFFF\x1\x7E\xA\xFFFF\x1\x7A\xA\xFFFF"+
				"\x1\x79\x4\xFFFF\x1\x81\x1\x82\x2\xFFFF\x1\x7B\x7\xFFFF\x1\x52\x1\xFFFF"+
				"\x1\x7A\x1\x80\x1\x7B\x3\xFFFF\x1\x51\x4\xFFFF\x1\x52\x1\x7C\xB\xFFFF"+
				"\x1\x52",
				"\x1\x95\x1\x52\x2\xFFFF\x1\x52\x1\xFFFF\x1\x90\x2\xFFFF\x1\x52\xB\xFFFF"+
				"\x4\x52\x1\x93\x8\xFFFF\x1\x91\x6\xFFFF\x1\x94\xA\xFFFF\x1\x90\xA\xFFFF"+
				"\x1\x8F\x4\xFFFF\x1\x97\x1\x98\x2\xFFFF\x1\x91\x7\xFFFF\x1\x52\x1\xFFFF"+
				"\x1\x90\x1\x96\x1\x91\x3\xFFFF\x1\x51\x4\xFFFF\x1\x52\x1\x92\xB\xFFFF"+
				"\x1\x52",
				"\x1\xAB\x1\x52\x2\xFFFF\x1\x52\x1\xFFFF\x1\xA6\x2\xFFFF\x1\x52\xB\xFFFF"+
				"\x4\x52\x1\xA9\x8\xFFFF\x1\xA7\x6\xFFFF\x1\xAA\xA\xFFFF\x1\xA6\xA\xFFFF"+
				"\x1\xA5\x4\xFFFF\x1\xAD\x1\xAE\x2\xFFFF\x1\xA7\x7\xFFFF\x1\x52\x1\xFFFF"+
				"\x1\xA6\x1\xAC\x1\xA7\x3\xFFFF\x1\x51\x4\xFFFF\x1\x52\x1\xA8\xB\xFFFF"+
				"\x1\x52",
				"\x1\xC1\x1\x52\x2\xFFFF\x1\x52\x1\xFFFF\x1\xBC\x2\xFFFF\x1\x52\xB\xFFFF"+
				"\x4\x52\x1\xBF\x8\xFFFF\x1\xBD\x6\xFFFF\x1\xC0\xA\xFFFF\x1\xBC\xA\xFFFF"+
				"\x1\xBB\x4\xFFFF\x1\xC3\x1\xC4\x2\xFFFF\x1\xBD\x7\xFFFF\x1\x52\x1\xFFFF"+
				"\x1\xBC\x1\xC2\x1\xBD\x3\xFFFF\x1\x51\x4\xFFFF\x1\x52\x1\xBE\xB\xFFFF"+
				"\x1\x52",
				"\x1\xD7\x1\x52\x2\xFFFF\x1\x52\x1\xFFFF\x1\xD2\x2\xFFFF\x1\x52\xB\xFFFF"+
				"\x4\x52\x1\xD5\x8\xFFFF\x1\xD3\x6\xFFFF\x1\xD6\xA\xFFFF\x1\xD2\xA\xFFFF"+
				"\x1\xD1\x4\xFFFF\x1\xD9\x1\xDA\x2\xFFFF\x1\xD3\x7\xFFFF\x1\x52\x1\xFFFF"+
				"\x1\xD2\x1\xD8\x1\xD3\x3\xFFFF\x1\x51\x4\xFFFF\x1\x52\x1\xD4\xB\xFFFF"+
				"\x1\x52",
				"\x1\xE7",
				"\x1\xE9\x44\xFFFF\x1\xE8",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA53_eot = DFA.UnpackEncodedString(DFA53_eotS);
		private static readonly short[] DFA53_eof = DFA.UnpackEncodedString(DFA53_eofS);
		private static readonly char[] DFA53_min = DFA.UnpackEncodedStringToUnsignedChars(DFA53_minS);
		private static readonly char[] DFA53_max = DFA.UnpackEncodedStringToUnsignedChars(DFA53_maxS);
		private static readonly short[] DFA53_accept = DFA.UnpackEncodedString(DFA53_acceptS);
		private static readonly short[] DFA53_special = DFA.UnpackEncodedString(DFA53_specialS);
		private static readonly short[][] DFA53_transition;

		static DFA53()
		{
			int numStates = DFA53_transitionS.Length;
			DFA53_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA53_transition[i] = DFA.UnpackEncodedString(DFA53_transitionS[i]);
			}
		}

		public DFA53( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 53;
			this.eot = DFA53_eot;
			this.eof = DFA53_eof;
			this.min = DFA53_min;
			this.max = DFA53_max;
			this.accept = DFA53_accept;
			this.special = DFA53_special;
			this.transition = DFA53_transition;
		}

		public override string Description { get { return "350:1: ternary : ( logicalOr QuestionMark expression Colon expression -> ^( IfExpression logicalOr ( expression )* ) | logicalOr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition53(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA53_1 = input.LA(1);
		int index53_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 57:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 58:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 59:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 60:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 61:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 62:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 63:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 64:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 65:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 66:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 67:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 68:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 69:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 70:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 71:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 72:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 73:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 74:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 75:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 76:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 77:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 78:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 79:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 80:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 81:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 82:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 83:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 84:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 85:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 86:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 87:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 88:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 89:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 90:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 91:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 92:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 93:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 94:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 95:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 96:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 97:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 98:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 99:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 100:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 101:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 102:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 103:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 104:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 105:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 106:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 107:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 108:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 109:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 110:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 111:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 112:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 113:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 114:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 115:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 116:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 117:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 118:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 119:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 120:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 121:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 122:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 123:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 124:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 125:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 126:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 127:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 128:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 129:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 130:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 131:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}
		case 132:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred75_Php_fragment))) {s = 81;}

				else if ((true)) {s = 82;}

				input.Seek(index53_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 53, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA71 : DFA
	{
		private const string DFA71_eotS =
			"\xD1\xFFFF";
		private const string DFA71_eofS =
			"\x2\xFFFF\x1\x28\x7\xFFFF\x6\x28\xC1\xFFFF";
		private const string DFA71_minS =
			"\x1\x6\x1\x54\x1\x6\x1\x27\x3\x6\x3\x27\x6\x6\x1\x54\x1\x27\x15\x0\x4"+
			"\xFFFF\x45\x0\x4\xFFFF\xE\x0\x4\xFFFF\xE\x0\x4\xFFFF\xE\x0\x4\xFFFF\xE"+
			"\x0\x4\xFFFF\xE\x0\x4\xFFFF\x3\x0";
		private const string DFA71_maxS =
			"\x1\x6C\x1\x54\x1\x70\x7\x6C\x6\x70\x1\x54\x1\x6C\x15\x0\x4\xFFFF\x45"+
			"\x0\x4\xFFFF\xE\x0\x4\xFFFF\xE\x0\x4\xFFFF\xE\x0\x4\xFFFF\xE\x0\x4\xFFFF"+
			"\xE\x0\x4\xFFFF\x3\x0";
		private const string DFA71_acceptS =
			"\x27\xFFFF\x1\x1\x1\x2\xA8\xFFFF";
		private const string DFA71_specialS =
			"\x12\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14"+
			"\x4\xFFFF\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1"+
			"\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1"+
			"\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1"+
			"\x31\x1\x32\x1\x33\x1\x34\x1\x35\x1\x36\x1\x37\x1\x38\x1\x39\x1\x3A\x1"+
			"\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x1\x40\x1\x41\x1\x42\x1\x43\x1\x44\x1"+
			"\x45\x1\x46\x1\x47\x1\x48\x1\x49\x1\x4A\x1\x4B\x1\x4C\x1\x4D\x1\x4E\x1"+
			"\x4F\x1\x50\x1\x51\x1\x52\x1\x53\x1\x54\x1\x55\x1\x56\x1\x57\x1\x58\x1"+
			"\x59\x4\xFFFF\x1\x5A\x1\x5B\x1\x5C\x1\x5D\x1\x5E\x1\x5F\x1\x60\x1\x61"+
			"\x1\x62\x1\x63\x1\x64\x1\x65\x1\x66\x1\x67\x4\xFFFF\x1\x68\x1\x69\x1"+
			"\x6A\x1\x6B\x1\x6C\x1\x6D\x1\x6E\x1\x6F\x1\x70\x1\x71\x1\x72\x1\x73\x1"+
			"\x74\x1\x75\x4\xFFFF\x1\x76\x1\x77\x1\x78\x1\x79\x1\x7A\x1\x7B\x1\x7C"+
			"\x1\x7D\x1\x7E\x1\x7F\x1\x80\x1\x81\x1\x82\x1\x83\x4\xFFFF\x1\x84\x1"+
			"\x85\x1\x86\x1\x87\x1\x88\x1\x89\x1\x8A\x1\x8B\x1\x8C\x1\x8D\x1\x8E\x1"+
			"\x8F\x1\x90\x1\x91\x4\xFFFF\x1\x92\x1\x93\x1\x94\x1\x95\x1\x96\x1\x97"+
			"\x1\x98\x1\x99\x1\x9A\x1\x9B\x1\x9C\x1\x9D\x1\x9E\x1\x9F\x4\xFFFF\x1"+
			"\xA0\x1\xA1\x1\xA2}>";
		private static readonly string[] DFA71_transitionS =
			{
				"\x1\x11\x2\xFFFF\x1\x10\x3\xFFFF\x1\x4\x4\xFFFF\x1\xF\x6\xFFFF\x1\x9"+
				"\xD\xFFFF\x1\x3\x1\xFFFF\x1\xB\x13\xFFFF\x1\xC\x5\xFFFF\x1\x7\x2\xFFFF"+
				"\x1\xD\x2\xFFFF\x1\x1\x4\xFFFF\x1\x5\x2\xFFFF\x1\x8\x2\xFFFF\x1\x6\xA"+
				"\xFFFF\x1\xE\x5\xFFFF\x1\xA\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1"+
				"\x2",
				"\x1\x12",
				"\x1\x1F\x1\x24\x2\xFFFF\x1\x27\x1\x16\x1\x1A\xB\xFFFF\x1\x13\x2\xFFFF"+
				"\x1\x28\x2\xFFFF\x1\x28\x1\x1D\x8\xFFFF\x1\x1B\x6\xFFFF\x1\x1E\x1\x16"+
				"\x9\xFFFF\x1\x1A\x8\xFFFF\x1\x17\x1\x15\x1\x19\x4\xFFFF\x1\x21\x1\x22"+
				"\x2\xFFFF\x1\x1B\x5\xFFFF\x1\x18\x1\x14\x1\x26\x1\xFFFF\x1\x1A\x1\x20"+
				"\x1\x1B\x3\xFFFF\x1\x23\x5\xFFFF\x1\x1C\xB\xFFFF\x1\x25",
				"\x1\x2B\x44\xFFFF\x1\x2C",
				"\x1\x3C\x2\xFFFF\x1\x3B\x3\xFFFF\x1\x2D\x4\xFFFF\x1\x3A\x6\xFFFF\x1"+
				"\x34\xD\xFFFF\x1\x32\x1\xFFFF\x1\x36\x13\xFFFF\x1\x37\x5\xFFFF\x1\x30"+
				"\x2\xFFFF\x1\x38\x7\xFFFF\x1\x2E\x2\xFFFF\x1\x33\x2\xFFFF\x1\x2F\xA"+
				"\xFFFF\x1\x39\x5\xFFFF\x1\x35\x2\xFFFF\x1\x2E\x1\xFFFF\x1\x2E\x1\xFFFF"+
				"\x1\x31",
				"\x1\x49\x2\xFFFF\x1\x48\x8\xFFFF\x1\x47\x6\xFFFF\x1\x41\xD\xFFFF\x1"+
				"\x3F\x1\xFFFF\x1\x43\x13\xFFFF\x1\x44\x5\xFFFF\x1\x3D\x2\xFFFF\x1\x45"+
				"\xA\xFFFF\x1\x40\xD\xFFFF\x1\x46\x5\xFFFF\x1\x42\x6\xFFFF\x1\x3E",
				"\x1\x5B\x2\xFFFF\x1\x5A\x3\xFFFF\x1\x4E\x4\xFFFF\x1\x59\x6\xFFFF\x1"+
				"\x53\xD\xFFFF\x1\x4D\x1\xFFFF\x1\x55\x13\xFFFF\x1\x56\x5\xFFFF\x1\x51"+
				"\x2\xFFFF\x1\x57\x2\xFFFF\x1\x4B\x4\xFFFF\x1\x4F\x2\xFFFF\x1\x52\x2"+
				"\xFFFF\x1\x50\x8\xFFFF\x1\x4A\x1\xFFFF\x1\x58\x5\xFFFF\x1\x54\x2\xFFFF"+
				"\x1\x4F\x1\xFFFF\x1\x4F\x1\xFFFF\x1\x4C",
				"\x1\x5D\x44\xFFFF\x1\x5C",
				"\x1\x5F\x44\xFFFF\x1\x5E",
				"\x1\x61\x44\xFFFF\x1\x60",
				"\x1\x68\x1\x6D\x2\xFFFF\x1\x27\x1\xFFFF\x1\x63\xE\xFFFF\x1\x28\x2\xFFFF"+
				"\x1\x28\x1\x66\x8\xFFFF\x1\x64\x6\xFFFF\x1\x67\xA\xFFFF\x1\x63\xA\xFFFF"+
				"\x1\x62\x4\xFFFF\x1\x6A\x1\x6B\x2\xFFFF\x1\x64\x7\xFFFF\x1\x6F\x1\xFFFF"+
				"\x1\x63\x1\x69\x1\x64\x3\xFFFF\x1\x6C\x5\xFFFF\x1\x65\xB\xFFFF\x1\x6E",
				"\x1\x7A\x1\x7F\x2\xFFFF\x1\x27\x1\xFFFF\x1\x75\xE\xFFFF\x1\x28\x2\xFFFF"+
				"\x1\x28\x1\x78\x8\xFFFF\x1\x76\x6\xFFFF\x1\x79\xA\xFFFF\x1\x75\xA\xFFFF"+
				"\x1\x74\x4\xFFFF\x1\x7C\x1\x7D\x2\xFFFF\x1\x76\x7\xFFFF\x1\x81\x1\xFFFF"+
				"\x1\x75\x1\x7B\x1\x76\x3\xFFFF\x1\x7E\x5\xFFFF\x1\x77\xB\xFFFF\x1\x80",
				"\x1\x8C\x1\x91\x2\xFFFF\x1\x27\x1\xFFFF\x1\x87\xE\xFFFF\x1\x28\x2\xFFFF"+
				"\x1\x28\x1\x8A\x8\xFFFF\x1\x88\x6\xFFFF\x1\x8B\xA\xFFFF\x1\x87\xA\xFFFF"+
				"\x1\x86\x4\xFFFF\x1\x8E\x1\x8F\x2\xFFFF\x1\x88\x7\xFFFF\x1\x93\x1\xFFFF"+
				"\x1\x87\x1\x8D\x1\x88\x3\xFFFF\x1\x90\x5\xFFFF\x1\x89\xB\xFFFF\x1\x92",
				"\x1\x9E\x1\xA3\x2\xFFFF\x1\x27\x1\xFFFF\x1\x99\xE\xFFFF\x1\x28\x2\xFFFF"+
				"\x1\x28\x1\x9C\x8\xFFFF\x1\x9A\x6\xFFFF\x1\x9D\xA\xFFFF\x1\x99\xA\xFFFF"+
				"\x1\x98\x4\xFFFF\x1\xA0\x1\xA1\x2\xFFFF\x1\x9A\x7\xFFFF\x1\xA5\x1\xFFFF"+
				"\x1\x99\x1\x9F\x1\x9A\x3\xFFFF\x1\xA2\x5\xFFFF\x1\x9B\xB\xFFFF\x1\xA4",
				"\x1\xB0\x1\xB5\x2\xFFFF\x1\x27\x1\xFFFF\x1\xAB\xE\xFFFF\x1\x28\x2\xFFFF"+
				"\x1\x28\x1\xAE\x8\xFFFF\x1\xAC\x6\xFFFF\x1\xAF\xA\xFFFF\x1\xAB\xA\xFFFF"+
				"\x1\xAA\x4\xFFFF\x1\xB2\x1\xB3\x2\xFFFF\x1\xAC\x7\xFFFF\x1\xB7\x1\xFFFF"+
				"\x1\xAB\x1\xB1\x1\xAC\x3\xFFFF\x1\xB4\x5\xFFFF\x1\xAD\xB\xFFFF\x1\xB6",
				"\x1\xC2\x1\xC7\x2\xFFFF\x1\x27\x1\xFFFF\x1\xBD\xE\xFFFF\x1\x28\x2\xFFFF"+
				"\x1\x28\x1\xC0\x8\xFFFF\x1\xBE\x6\xFFFF\x1\xC1\xA\xFFFF\x1\xBD\xA\xFFFF"+
				"\x1\xBC\x4\xFFFF\x1\xC4\x1\xC5\x2\xFFFF\x1\xBE\x7\xFFFF\x1\xC9\x1\xFFFF"+
				"\x1\xBD\x1\xC3\x1\xBE\x3\xFFFF\x1\xC6\x5\xFFFF\x1\xBF\xB\xFFFF\x1\xC8",
				"\x1\xCE",
				"\x1\xD0\x44\xFFFF\x1\xCF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA71_eot = DFA.UnpackEncodedString(DFA71_eotS);
		private static readonly short[] DFA71_eof = DFA.UnpackEncodedString(DFA71_eofS);
		private static readonly char[] DFA71_min = DFA.UnpackEncodedStringToUnsignedChars(DFA71_minS);
		private static readonly char[] DFA71_max = DFA.UnpackEncodedStringToUnsignedChars(DFA71_maxS);
		private static readonly short[] DFA71_accept = DFA.UnpackEncodedString(DFA71_acceptS);
		private static readonly short[] DFA71_special = DFA.UnpackEncodedString(DFA71_specialS);
		private static readonly short[][] DFA71_transition;

		static DFA71()
		{
			int numStates = DFA71_transitionS.Length;
			DFA71_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA71_transition[i] = DFA.UnpackEncodedString(DFA71_transitionS[i]);
			}
		}

		public DFA71( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 71;
			this.eot = DFA71_eot;
			this.eof = DFA71_eof;
			this.min = DFA71_min;
			this.max = DFA71_max;
			this.accept = DFA71_accept;
			this.special = DFA71_special;
			this.transition = DFA71_transition;
		}

		public override string Description { get { return "429:7: ( keyValuePair | expression )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition71(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA71_1 = input.LA(1);
		int index71_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 57:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 58:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 59:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 60:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 61:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 62:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 63:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 64:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 65:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 66:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 67:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 68:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 69:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 70:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 71:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 72:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 73:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 74:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 75:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 76:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 77:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 78:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 79:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 80:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 81:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 82:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 83:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 84:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 85:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 86:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 87:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 88:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 89:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 90:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 91:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 92:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 93:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 94:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 95:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 96:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 97:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 98:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 99:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 100:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 101:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 102:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 103:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 104:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 105:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 106:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 107:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 108:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 109:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 110:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 111:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 112:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 113:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 114:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 115:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 116:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 117:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 118:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 119:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 120:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 121:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 122:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 123:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 124:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 125:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 126:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 127:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 128:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 129:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 130:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 131:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 132:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 133:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 134:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 135:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 136:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 137:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 138:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 139:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 140:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 141:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 142:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 143:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 144:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 145:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 146:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 147:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 148:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 149:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 150:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 151:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 152:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 153:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 154:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 155:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 156:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 157:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 158:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 159:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 160:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 161:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}
		case 162:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred103_Php_fragment))) {s = 39;}

				else if ((true)) {s = 40;}

				input.Seek(index71_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 71, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA83 : DFA
	{
		private const string DFA83_eotS =
			"\xC6\xFFFF";
		private const string DFA83_eofS =
			"\xC6\xFFFF";
		private const string DFA83_minS =
			"\x1\x6\x1\x54\x1\x0\x1\x27\x3\x6\x3\x27\x6\x0\x1\x54\x1\x27\x1\x0\x7"+
			"\xFFFF\x1\x0\x16\xFFFF\x37\x0\x5A\xFFFF\x3\x0\x1\xFFFF";
		private const string DFA83_maxS =
			"\x1\x6C\x1\x54\x1\x0\x7\x6C\x6\x0\x1\x54\x1\x6C\x1\x0\x7\xFFFF\x1\x0"+
			"\x16\xFFFF\x37\x0\x5A\xFFFF\x3\x0\x1\xFFFF";
		private const string DFA83_acceptS =
			"\x13\xFFFF\x1\x2\x1C\xFFFF\x1\x1\x95\xFFFF";
		private const string DFA83_specialS =
			"\x2\xFFFF\x1\x0\x7\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x2\xFFFF"+
			"\x1\x7\x7\xFFFF\x1\x8\x16\xFFFF\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1"+
			"\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1"+
			"\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1"+
			"\x23\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1"+
			"\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1\x32\x1\x33\x1\x34\x1\x35\x1\x36\x1"+
			"\x37\x1\x38\x1\x39\x1\x3A\x1\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x5A\xFFFF"+
			"\x1\x40\x1\x41\x1\x42\x1\xFFFF}>";
		private static readonly string[] DFA83_transitionS =
			{
				"\x1\x11\x2\xFFFF\x1\x10\x3\xFFFF\x1\x4\x1\xFFFF\x1\x12\x2\xFFFF\x1\xF"+
				"\x1\x13\x5\xFFFF\x1\x9\x7\xFFFF\x1\x13\x5\xFFFF\x1\x3\x1\xFFFF\x1\xB"+
				"\x1\x13\x11\xFFFF\x1\x13\x1\xC\x5\xFFFF\x1\x7\x2\xFFFF\x1\xD\x2\xFFFF"+
				"\x1\x1\x4\xFFFF\x1\x5\x2\xFFFF\x1\x8\x2\xFFFF\x1\x6\xA\xFFFF\x1\xE\x1"+
				"\xFFFF\x2\x13\x2\xFFFF\x1\xA\x1\xFFFF\x1\x13\x1\x5\x1\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x2",
				"\x1\x1A",
				"\x1\xFFFF",
				"\x1\x31\x44\xFFFF\x1\x32",
				"\x1\x42\x2\xFFFF\x1\x41\x3\xFFFF\x1\x33\x4\xFFFF\x1\x40\x6\xFFFF\x1"+
				"\x3A\xD\xFFFF\x1\x38\x1\xFFFF\x1\x3C\x13\xFFFF\x1\x3D\x5\xFFFF\x1\x36"+
				"\x2\xFFFF\x1\x3E\x7\xFFFF\x1\x34\x2\xFFFF\x1\x39\x2\xFFFF\x1\x35\xA"+
				"\xFFFF\x1\x3F\x5\xFFFF\x1\x3B\x2\xFFFF\x1\x34\x1\xFFFF\x1\x34\x1\xFFFF"+
				"\x1\x37",
				"\x1\x4F\x2\xFFFF\x1\x4E\x8\xFFFF\x1\x4D\x6\xFFFF\x1\x47\xD\xFFFF\x1"+
				"\x45\x1\xFFFF\x1\x49\x13\xFFFF\x1\x4A\x5\xFFFF\x1\x43\x2\xFFFF\x1\x4B"+
				"\xA\xFFFF\x1\x46\xD\xFFFF\x1\x4C\x5\xFFFF\x1\x48\x6\xFFFF\x1\x44",
				"\x1\x61\x2\xFFFF\x1\x60\x3\xFFFF\x1\x54\x4\xFFFF\x1\x5F\x6\xFFFF\x1"+
				"\x59\xD\xFFFF\x1\x53\x1\xFFFF\x1\x5B\x13\xFFFF\x1\x5C\x5\xFFFF\x1\x57"+
				"\x2\xFFFF\x1\x5D\x2\xFFFF\x1\x51\x4\xFFFF\x1\x55\x2\xFFFF\x1\x58\x2"+
				"\xFFFF\x1\x56\x8\xFFFF\x1\x50\x1\xFFFF\x1\x5E\x5\xFFFF\x1\x5A\x2\xFFFF"+
				"\x1\x55\x1\xFFFF\x1\x55\x1\xFFFF\x1\x52",
				"\x1\x63\x44\xFFFF\x1\x62",
				"\x1\x65\x44\xFFFF\x1\x64",
				"\x1\x67\x44\xFFFF\x1\x66",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xC2",
				"\x1\xC4\x44\xFFFF\x1\xC3",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA83_eot = DFA.UnpackEncodedString(DFA83_eotS);
		private static readonly short[] DFA83_eof = DFA.UnpackEncodedString(DFA83_eofS);
		private static readonly char[] DFA83_min = DFA.UnpackEncodedStringToUnsignedChars(DFA83_minS);
		private static readonly char[] DFA83_max = DFA.UnpackEncodedStringToUnsignedChars(DFA83_maxS);
		private static readonly short[] DFA83_accept = DFA.UnpackEncodedString(DFA83_acceptS);
		private static readonly short[] DFA83_special = DFA.UnpackEncodedString(DFA83_specialS);
		private static readonly short[][] DFA83_transition;

		static DFA83()
		{
			int numStates = DFA83_transitionS.Length;
			DFA83_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA83_transition[i] = DFA.UnpackEncodedString(DFA83_transitionS[i]);
			}
		}

		public DFA83( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 83;
			this.eot = DFA83_eot;
			this.eof = DFA83_eof;
			this.min = DFA83_min;
			this.max = DFA83_max;
			this.accept = DFA83_accept;
			this.special = DFA83_special;
			this.transition = DFA83_transition;
		}

		public override string Description { get { return "172:7: ({...}? => ( printExpr )? | ( simpleStatement )? )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition83(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA83_1 = input.LA(1);
		int index83_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 2:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 3:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 4:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 5:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 6:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 7:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 8:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 9:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 10:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 11:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 12:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 13:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 14:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 15:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 16:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 17:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 18:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 19:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 20:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 21:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 22:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 23:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 24:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 25:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 26:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 27:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 28:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 29:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 30:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 31:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 32:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 33:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 34:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 35:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 36:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 37:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 38:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 39:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 40:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 41:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 42:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 43:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 44:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 45:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 46:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 47:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 48:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 49:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 50:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 51:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 52:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 53:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 54:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 55:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 56:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 57:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 58:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 59:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 60:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 61:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 62:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 63:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 64:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 65:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}
		case 66:
			{
				input.Rewind();
				if (((EvaluatePredicate(synpred4_Php_fragment)&&(expressionFollowsBodyString)))) {s = 48;}

				else if ((true)) {s = 19;}

				input.Seek(index83_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 83, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _statement_in_prog922 = new BitSet(new ulong[]{0x3A2006C2024CA252UL,0x57A6801A42C9UL});
		public static readonly BitSet _printExpr_in_statement940 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _SemiColon_in_statement942 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_statement958 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _simpleStatement_in_statement963 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _BodyString_in_statement967 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenCurlyBracket_in_statement977 = new BitSet(new ulong[]{0x3A2006C2024CA250UL,0x57A6801A42C9UL});
		public static readonly BitSet _statement_in_statement979 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_statement981 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracketedBlock_in_statement993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDefinition_in_statement1006 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interfaceDefinition_in_statement1014 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _complexStatement_in_statement1022 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _simpleStatement_in_statement1030 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _SemiColon_in_statement1032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_printExpr1050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenCurlyBracket_in_bracketedBlock1075 = new BitSet(new ulong[]{0x3A2006C2064CA250UL,0x57A6801A42C9UL});
		public static readonly BitSet _statement_in_bracketedBlock1079 = new BitSet(new ulong[]{0x3A2006C2064CA250UL,0x57A6801A42C9UL});
		public static readonly BitSet _CloseCurlyBracket_in_bracketedBlock1082 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Interface_in_interfaceDefinition1108 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _UnquotedString_in_interfaceDefinition1112 = new BitSet(new ulong[]{0x8000000000000UL,0x80000UL});
		public static readonly BitSet _interfaceExtends_in_interfaceDefinition1114 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _OpenCurlyBracket_in_interfaceDefinition1125 = new BitSet(new ulong[]{0x800000104000030UL,0x8000000000UL});
		public static readonly BitSet _interfaceMember_in_interfaceDefinition1135 = new BitSet(new ulong[]{0x800000104000030UL,0x8000000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_interfaceDefinition1146 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Extends_in_interfaceExtends1186 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _UnquotedString_in_interfaceExtends1189 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _Comma_in_interfaceExtends1192 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _UnquotedString_in_interfaceExtends1195 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _Const_in_interfaceMember1213 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _UnquotedString_in_interfaceMember1215 = new BitSet(new ulong[]{0x1000000000000UL,0x800000000UL});
		public static readonly BitSet _Equals_in_interfaceMember1218 = new BitSet(new ulong[]{0x2000020000040200UL,0x2080000040UL});
		public static readonly BitSet _atom_in_interfaceMember1220 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _SemiColon_in_interfaceMember1224 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fieldModifier_in_interfaceMember1252 = new BitSet(new ulong[]{0x800000000000030UL,0x8000000000UL});
		public static readonly BitSet _Function_in_interfaceMember1255 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _UnquotedString_in_interfaceMember1257 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _parametersDefinition_in_interfaceMember1259 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _SemiColon_in_interfaceMember1261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classModifier_in_classDefinition1305 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _Class_in_classDefinition1317 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _UnquotedString_in_classDefinition1321 = new BitSet(new ulong[]{0x8000000000000UL,0x80004UL});
		public static readonly BitSet _Extends_in_classDefinition1333 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _UnquotedString_in_classDefinition1337 = new BitSet(new ulong[]{0x0UL,0x80004UL});
		public static readonly BitSet _classImplements_in_classDefinition1350 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _OpenCurlyBracket_in_classDefinition1361 = new BitSet(new ulong[]{0x800008104000030UL,0x208000000000UL});
		public static readonly BitSet _classMember_in_classDefinition1371 = new BitSet(new ulong[]{0x800008104000030UL,0x208000000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_classDefinition1382 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Implements_in_classImplements1464 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _UnquotedString_in_classImplements1468 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _Comma_in_classImplements1471 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _UnquotedString_in_classImplements1474 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _fieldModifier_in_classMember1494 = new BitSet(new ulong[]{0x800000000000030UL,0x8000000000UL});
		public static readonly BitSet _Function_in_classMember1497 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _UnquotedString_in_classMember1499 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _parametersDefinition_in_classMember1501 = new BitSet(new ulong[]{0x0UL,0x800080000UL});
		public static readonly BitSet _bracketedBlock_in_classMember1513 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SemiColon_in_classMember1517 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Var_in_classMember1554 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _Dollar_in_classMember1556 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _UnquotedString_in_classMember1558 = new BitSet(new ulong[]{0x1000000000000UL,0x800000000UL});
		public static readonly BitSet _Equals_in_classMember1561 = new BitSet(new ulong[]{0x2000020000040200UL,0x2080000040UL});
		public static readonly BitSet _atom_in_classMember1563 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _SemiColon_in_classMember1567 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Const_in_classMember1600 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _UnquotedString_in_classMember1602 = new BitSet(new ulong[]{0x1000000000000UL,0x800000000UL});
		public static readonly BitSet _Equals_in_classMember1605 = new BitSet(new ulong[]{0x2000020000040200UL,0x2080000040UL});
		public static readonly BitSet _atom_in_classMember1607 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _SemiColon_in_classMember1611 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fieldModifier_in_classMember1639 = new BitSet(new ulong[]{0x8000000030UL,0x8000000000UL});
		public static readonly BitSet _Dollar_in_classMember1643 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _UnquotedString_in_classMember1645 = new BitSet(new ulong[]{0x1000000000000UL,0x800000000UL});
		public static readonly BitSet _Equals_in_classMember1649 = new BitSet(new ulong[]{0x2000020000040200UL,0x2080000040UL});
		public static readonly BitSet _atom_in_classMember1651 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _SemiColon_in_classMember1655 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Dollar_in_fieldDefinition1703 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _UnquotedString_in_fieldDefinition1705 = new BitSet(new ulong[]{0x1000000000000UL,0x800000000UL});
		public static readonly BitSet _Equals_in_fieldDefinition1708 = new BitSet(new ulong[]{0x2000020000040200UL,0x2080000040UL});
		public static readonly BitSet _atom_in_fieldDefinition1710 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _SemiColon_in_fieldDefinition1714 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Abstract_in_classModifier1749 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _If_in_complexStatement1792 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement1794 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _expression_in_complexStatement1798 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement1800 = new BitSet(new ulong[]{0x3A2006C2024CA250UL,0x57A6801A42C9UL});
		public static readonly BitSet _statement_in_complexStatement1804 = new BitSet(new ulong[]{0x180000000002UL});
		public static readonly BitSet _conditional_in_complexStatement1806 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _For_in_complexStatement1837 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement1839 = new BitSet(new ulong[]{0x2000028002042240UL,0x152880124248UL});
		public static readonly BitSet _forInit_in_complexStatement1841 = new BitSet(new ulong[]{0x2000028002042240UL,0x152880124248UL});
		public static readonly BitSet _forCondition_in_complexStatement1843 = new BitSet(new ulong[]{0x200002800A042240UL,0x152080124248UL});
		public static readonly BitSet _forUpdate_in_complexStatement1845 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement1847 = new BitSet(new ulong[]{0x3A2006C2024CA250UL,0x57A6801A42C9UL});
		public static readonly BitSet _statement_in_complexStatement1849 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Foreach_in_complexStatement1871 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement1873 = new BitSet(new ulong[]{0x8000000000UL,0x100000000000UL});
		public static readonly BitSet _variable_in_complexStatement1875 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _113_in_complexStatement1877 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _arrayEntry_in_complexStatement1879 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement1881 = new BitSet(new ulong[]{0x3A2006C2024CA250UL,0x57A6801A42C9UL});
		public static readonly BitSet _statement_in_complexStatement1883 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _While_in_complexStatement1903 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement1905 = new BitSet(new ulong[]{0x200002800A042240UL,0x152080124248UL});
		public static readonly BitSet _expression_in_complexStatement1909 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement1912 = new BitSet(new ulong[]{0x3A2006C2024CA250UL,0x57A6801A42C9UL});
		public static readonly BitSet _statement_in_complexStatement1914 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Do_in_complexStatement1933 = new BitSet(new ulong[]{0x3A2006C2024CA250UL,0x57A6801A42C9UL});
		public static readonly BitSet _statement_in_complexStatement1935 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _While_in_complexStatement1937 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement1939 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _expression_in_complexStatement1943 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement1945 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _SemiColon_in_complexStatement1947 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Switch_in_complexStatement1966 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _OpenRoundBracket_in_complexStatement1968 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _expression_in_complexStatement1970 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _CloseRoundBracket_in_complexStatement1972 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _OpenCurlyBracket_in_complexStatement1974 = new BitSet(new ulong[]{0x1000100000UL});
		public static readonly BitSet _cases_in_complexStatement1975 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_complexStatement1976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionDefinition_in_complexStatement1994 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Echo_in_simpleStatement2011 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _commaList_in_simpleStatement2014 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Global_in_simpleStatement2022 = new BitSet(new ulong[]{0x8000000000UL,0x100000000000UL});
		public static readonly BitSet _name_in_simpleStatement2025 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _Comma_in_simpleStatement2028 = new BitSet(new ulong[]{0x8000000000UL,0x100000000000UL});
		public static readonly BitSet _name_in_simpleStatement2031 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _Static_in_simpleStatement2041 = new BitSet(new ulong[]{0x8000000000UL,0x100000000000UL});
		public static readonly BitSet _variable_in_simpleStatement2044 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _Equals_in_simpleStatement2046 = new BitSet(new ulong[]{0x2000020000040200UL,0x2080000040UL});
		public static readonly BitSet _atom_in_simpleStatement2049 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Break_in_simpleStatement2057 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _Integer_in_simpleStatement2060 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Continue_in_simpleStatement2069 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _Integer_in_simpleStatement2072 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Return_in_simpleStatement2086 = new BitSet(new ulong[]{0x2000028002042242UL,0x152080124248UL});
		public static readonly BitSet _expression_in_simpleStatement2089 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RequireOperator_in_simpleStatement2098 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _expression_in_simpleStatement2101 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_simpleStatement2109 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ElseIf_in_conditional2127 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _OpenRoundBracket_in_conditional2129 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _expression_in_conditional2133 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _CloseRoundBracket_in_conditional2135 = new BitSet(new ulong[]{0x3A2006C2024CA250UL,0x57A6801A42C9UL});
		public static readonly BitSet _statement_in_conditional2139 = new BitSet(new ulong[]{0x180000000002UL});
		public static readonly BitSet _conditional_in_conditional2141 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Else_in_conditional2165 = new BitSet(new ulong[]{0x3A2006C2024CA250UL,0x57A6801A42C9UL});
		public static readonly BitSet _statement_in_conditional2167 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _commaList_in_forInit2188 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _SemiColon_in_forInit2191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _commaList_in_forCondition2217 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _SemiColon_in_forCondition2220 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _commaList_in_forUpdate2250 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _casestatement_in_cases2278 = new BitSet(new ulong[]{0x1000100000UL});
		public static readonly BitSet _defaultcase_in_cases2282 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Case_in_casestatement2299 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _expression_in_casestatement2302 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _Colon_in_casestatement2304 = new BitSet(new ulong[]{0x3A2006C2024CA252UL,0x57A6801A42C9UL});
		public static readonly BitSet _statement_in_casestatement2307 = new BitSet(new ulong[]{0x3A2006C2024CA252UL,0x57A6801A42C9UL});
		public static readonly BitSet _Default_in_defaultcase2327 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _Colon_in_defaultcase2330 = new BitSet(new ulong[]{0x3A2006C2024CA252UL,0x57A6801A42C9UL});
		public static readonly BitSet _statement_in_defaultcase2333 = new BitSet(new ulong[]{0x3A2006C2024CA252UL,0x57A6801A42C9UL});
		public static readonly BitSet _Function_in_functionDefinition2352 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _UnquotedString_in_functionDefinition2354 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _parametersDefinition_in_functionDefinition2356 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _bracketedBlock_in_functionDefinition2358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_parametersDefinition2396 = new BitSet(new ulong[]{0x8008000040UL});
		public static readonly BitSet _paramDef_in_parametersDefinition2399 = new BitSet(new ulong[]{0x48000000UL});
		public static readonly BitSet _Comma_in_parametersDefinition2402 = new BitSet(new ulong[]{0x8000000040UL});
		public static readonly BitSet _paramDef_in_parametersDefinition2404 = new BitSet(new ulong[]{0x48000000UL});
		public static readonly BitSet _CloseRoundBracket_in_parametersDefinition2410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _paramName_in_paramDef2437 = new BitSet(new ulong[]{0x1000000000002UL});
		public static readonly BitSet _Equals_in_paramDef2440 = new BitSet(new ulong[]{0x2000020000040200UL,0x2080000040UL});
		public static readonly BitSet _atom_in_paramDef2443 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Dollar_in_paramName2462 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _UnquotedString_in_paramName2465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Ampersand_in_paramName2473 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _Dollar_in_paramName2475 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _UnquotedString_in_paramName2477 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_commaList2506 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _Comma_in_commaList2509 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _expression_in_commaList2512 = new BitSet(new ulong[]{0x40000002UL});
		public static readonly BitSet _weakLogicalOr_in_expression2536 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _weakLogicalXor_in_weakLogicalOr2553 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _Or_in_weakLogicalOr2556 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _weakLogicalXor_in_weakLogicalOr2559 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _weakLogicalAnd_in_weakLogicalXor2578 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _Xor_in_weakLogicalXor2581 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _weakLogicalAnd_in_weakLogicalXor2584 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _assignment_in_weakLogicalAnd2607 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _And_in_weakLogicalAnd2610 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _assignment_in_weakLogicalAnd2613 = new BitSet(new ulong[]{0x82UL});
		public static readonly BitSet _listVariables_in_assignment2632 = new BitSet(new ulong[]{0x1000000000800UL});
		public static readonly BitSet _set_in_assignment2635 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _assignment_in_assignment2644 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ternary_in_assignment2654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _List_in_listVariables2671 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _OpenRoundBracket_in_listVariables2674 = new BitSet(new ulong[]{0x8000000000UL,0x100000000000UL});
		public static readonly BitSet _name_in_listVariables2677 = new BitSet(new ulong[]{0x48000000UL});
		public static readonly BitSet _Comma_in_listVariables2680 = new BitSet(new ulong[]{0x8000000000UL,0x100000000000UL});
		public static readonly BitSet _name_in_listVariables2683 = new BitSet(new ulong[]{0x48000000UL});
		public static readonly BitSet _CloseRoundBracket_in_listVariables2687 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_listVariables2697 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalOr_in_ternary2714 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _QuestionMark_in_ternary2716 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _expression_in_ternary2718 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _Colon_in_ternary2720 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _expression_in_ternary2722 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalOr_in_ternary2741 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalAnd_in_logicalOr2762 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _LogicalOr_in_logicalOr2765 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124048UL});
		public static readonly BitSet _logicalAnd_in_logicalOr2768 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _bitwiseOr_in_logicalAnd2787 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _LogicalAnd_in_logicalAnd2790 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124048UL});
		public static readonly BitSet _bitwiseOr_in_logicalAnd2793 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _bitWiseAnd_in_bitwiseOr2816 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _Pipe_in_bitwiseOr2819 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124048UL});
		public static readonly BitSet _bitWiseAnd_in_bitwiseOr2822 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _equalityCheck_in_bitWiseAnd2841 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _Ampersand_in_bitWiseAnd2844 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124048UL});
		public static readonly BitSet _equalityCheck_in_bitWiseAnd2847 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _comparisionCheck_in_equalityCheck2866 = new BitSet(new ulong[]{0x800000000002UL});
		public static readonly BitSet _EqualityOperator_in_equalityCheck2869 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124048UL});
		public static readonly BitSet _comparisionCheck_in_equalityCheck2872 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bitWiseShift_in_comparisionCheck2895 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _ComparisionOperator_in_comparisionCheck2898 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124048UL});
		public static readonly BitSet _bitWiseShift_in_comparisionCheck2901 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addition_in_bitWiseShift2920 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _ShiftOperator_in_bitWiseShift2923 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124048UL});
		public static readonly BitSet _addition_in_bitWiseShift2926 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _multiplication_in_addition2949 = new BitSet(new ulong[]{0x10000000002UL,0x4004000UL});
		public static readonly BitSet _set_in_addition2952 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124048UL});
		public static readonly BitSet _multiplication_in_addition2965 = new BitSet(new ulong[]{0x10000000002UL,0x4004000UL});
		public static readonly BitSet _logicalNot_in_multiplication2984 = new BitSet(new ulong[]{0x400000000001002UL,0x1000000UL});
		public static readonly BitSet _set_in_multiplication2987 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124048UL});
		public static readonly BitSet _logicalNot_in_multiplication3000 = new BitSet(new ulong[]{0x400000000001002UL,0x1000000UL});
		public static readonly BitSet _Bang_in_logicalNot3019 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124048UL});
		public static readonly BitSet _logicalNot_in_logicalNot3022 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _instanceOf_in_logicalNot3030 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _negateOrCast_in_instanceOf3047 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _Instanceof_in_instanceOf3050 = new BitSet(new ulong[]{0x2000028002040240UL,0x152080124048UL});
		public static readonly BitSet _negateOrCast_in_instanceOf3053 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_negateOrCast3072 = new BitSet(new ulong[]{0x2000028002040240UL,0x102080020048UL});
		public static readonly BitSet _increment_in_negateOrCast3085 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_negateOrCast3093 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _PrimitiveType_in_negateOrCast3095 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _CloseRoundBracket_in_negateOrCast3097 = new BitSet(new ulong[]{0x2000028002040240UL,0x102080020048UL});
		public static readonly BitSet _increment_in_negateOrCast3099 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenRoundBracket_in_negateOrCast3117 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _weakLogicalAnd_in_negateOrCast3120 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _CloseRoundBracket_in_negateOrCast3122 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _increment_in_negateOrCast3131 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IncrementOperator_in_increment3148 = new BitSet(new ulong[]{0x8000000000UL,0x100000000000UL});
		public static readonly BitSet _name_in_increment3150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_increment3168 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _IncrementOperator_in_increment3170 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _newOrClone_in_increment3188 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _New_in_newOrClone3205 = new BitSet(new ulong[]{0x8000000000UL,0x100000000000UL});
		public static readonly BitSet _nameOrFunctionCall_in_newOrClone3208 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Clone_in_newOrClone3216 = new BitSet(new ulong[]{0x8000000000UL,0x100000000000UL});
		public static readonly BitSet _name_in_newOrClone3219 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atomOrReference_in_newOrClone3227 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_in_atomOrReference3244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _reference_in_atomOrReference3252 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Array_in_arrayDeclaration3269 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _OpenRoundBracket_in_arrayDeclaration3271 = new BitSet(new ulong[]{0x200002800A042240UL,0x152080124248UL});
		public static readonly BitSet _arrayEntry_in_arrayDeclaration3274 = new BitSet(new ulong[]{0x48000000UL});
		public static readonly BitSet _Comma_in_arrayDeclaration3277 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _arrayEntry_in_arrayDeclaration3279 = new BitSet(new ulong[]{0x48000000UL});
		public static readonly BitSet _CloseRoundBracket_in_arrayDeclaration3285 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _keyValuePair_in_arrayEntry3312 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_arrayEntry3316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_keyValuePair3335 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _ArrayAssign_in_keyValuePair3337 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _expression_in_keyValuePair3339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SingleQuotedString_in_atom3361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DoubleQuotedString_in_atom3365 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HereDoc_in_atom3369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Integer_in_atom3373 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Real_in_atom3377 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Boolean_in_atom3381 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayDeclaration_in_atom3385 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Ampersand_in_reference3403 = new BitSet(new ulong[]{0x8000000000UL,0x100000000000UL});
		public static readonly BitSet _nameOrFunctionCall_in_reference3406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nameOrFunctionCall_in_reference3414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_nameOrFunctionCall3431 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _OpenRoundBracket_in_nameOrFunctionCall3433 = new BitSet(new ulong[]{0x200002800A042240UL,0x152080124248UL});
		public static readonly BitSet _expression_in_nameOrFunctionCall3436 = new BitSet(new ulong[]{0x48000000UL});
		public static readonly BitSet _Comma_in_nameOrFunctionCall3439 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _expression_in_nameOrFunctionCall3441 = new BitSet(new ulong[]{0x48000000UL});
		public static readonly BitSet _CloseRoundBracket_in_nameOrFunctionCall3447 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_nameOrFunctionCall3466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _staticMemberAccess_in_name3478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberAccess_in_name3486 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_name3494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UnquotedString_in_staticMemberAccess3515 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _ClassMember_in_staticMemberAccess3517 = new BitSet(new ulong[]{0x8000000000UL,0x100000000000UL});
		public static readonly BitSet _variable_in_staticMemberAccess3520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_in_memberAccess3537 = new BitSet(new ulong[]{0x2UL,0x200010UL});
		public static readonly BitSet _OpenSquareBracket_in_memberAccess3550 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _expression_in_memberAccess3553 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _CloseSquareBracket_in_memberAccess3555 = new BitSet(new ulong[]{0x2UL,0x200010UL});
		public static readonly BitSet _InstanceMember_in_memberAccess3568 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _UnquotedString_in_memberAccess3571 = new BitSet(new ulong[]{0x2UL,0x200010UL});
		public static readonly BitSet _Dollar_in_variable3594 = new BitSet(new ulong[]{0x8000000000UL,0x100000000000UL});
		public static readonly BitSet _variable_in_variable3597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UnquotedString_in_variable3605 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred1_Php922 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_synpred2_Php940 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _SemiColon_in_synpred2_Php942 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_synpred4_Php958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExpr_in_synpred6_Php958 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _simpleStatement_in_synpred6_Php963 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _BodyString_in_synpred6_Php967 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OpenCurlyBracket_in_synpred7_Php977 = new BitSet(new ulong[]{0x3A2006C2024CA250UL,0x57A6801A42C9UL});
		public static readonly BitSet _statement_in_synpred7_Php979 = new BitSet(new ulong[]{0x4000000UL});
		public static readonly BitSet _CloseCurlyBracket_in_synpred7_Php981 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracketedBlock_in_synpred8_Php993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred12_Php1079 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fieldModifier_in_synpred26_Php1494 = new BitSet(new ulong[]{0x800000000000030UL,0x8000000000UL});
		public static readonly BitSet _Function_in_synpred26_Php1497 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _UnquotedString_in_synpred26_Php1499 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _parametersDefinition_in_synpred26_Php1501 = new BitSet(new ulong[]{0x0UL,0x800080000UL});
		public static readonly BitSet _bracketedBlock_in_synpred26_Php1513 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SemiColon_in_synpred26_Php1517 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditional_in_synpred36_Php1806 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditional_in_synpred55_Php2141 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred61_Php2307 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_synpred62_Php2333 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Or_in_synpred68_Php2556 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _weakLogicalXor_in_synpred68_Php2559 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Xor_in_synpred69_Php2581 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _weakLogicalAnd_in_synpred69_Php2584 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _And_in_synpred70_Php2610 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _assignment_in_synpred70_Php2613 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _listVariables_in_synpred72_Php2632 = new BitSet(new ulong[]{0x1000000000800UL});
		public static readonly BitSet _set_in_synpred72_Php2635 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _assignment_in_synpred72_Php2644 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalOr_in_synpred75_Php2714 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _QuestionMark_in_synpred75_Php2716 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _expression_in_synpred75_Php2718 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _Colon_in_synpred75_Php2720 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _expression_in_synpred75_Php2722 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_synpred97_Php3168 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _IncrementOperator_in_synpred97_Php3170 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _keyValuePair_in_synpred103_Php3312 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_synpred113_Php3431 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _OpenRoundBracket_in_synpred113_Php3433 = new BitSet(new ulong[]{0x200002800A042240UL,0x152080124248UL});
		public static readonly BitSet _expression_in_synpred113_Php3436 = new BitSet(new ulong[]{0x48000000UL});
		public static readonly BitSet _Comma_in_synpred113_Php3439 = new BitSet(new ulong[]{0x2000028002042240UL,0x152080124248UL});
		public static readonly BitSet _expression_in_synpred113_Php3441 = new BitSet(new ulong[]{0x48000000UL});
		public static readonly BitSet _CloseRoundBracket_in_synpred113_Php3447 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberAccess_in_synpred115_Php3486 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  Code2Xml.Languages.ANTLRv3.Processors.Php 
