using Code2Xml.Core.Antlr;
using System;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C.g 2013-01-25 01:00:59

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;
/** ANSI C ANTLR v3 grammar

Translated from Jutta Degener's 1995 ANSI C yacc grammar by Terence Parr
July 2006.  The lexical rules were taken from the Java grammar.

Jutta says: "In 1985, Jeff Lee published his Yacc grammar (which
is accompanied by a matching Lex specification) for the April 30, 1985 draft
version of the ANSI C standard.  Tom Stockfisch reposted it to net.sources in
1987; that original, as mentioned in the answer to question 17.25 of the
comp.lang.c FAQ, can be ftp'ed from ftp.uu.net,
   file usenet/net.sources/ansi.c.grammar.Z.
I intend to keep this version as close to the current C Standard grammar as
possible; please let me know if you discover discrepancies. Jutta Degener, 1995"

Generally speaking, you need symbol table info to parse C; typedefs
define types and then IDENTIFIERS are either types or plain IDs.  I'm doing
the min necessary here tracking only type names.  This is a good example
of the global scope (called Symbols).  Every rule that declares its usage
of Symbols pushes a new copy on the stack effectively creating a new
symbol scope.  Also note rule declaration declares a rule scope that
lets any invoked rule see isTypedef boolean.  It's much easier than
passing that info down as parameters.  Very clean.  Rule
direct_declarator can then easily determine whether the IDENTIFIER
should be declared as a type name.

I have only tested this on a single file, though it is 3500 lines.

This grammar requires ANTLR v3.0.1 or higher.

Terence Parr
July 2006
*/
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class CParser : Antlr.Runtime.Parser, IAntlrParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "CHARACTER_LITERAL", "COMMENT", "DECIMAL_LITERAL", "EscapeSequence", "Exponent", "FLOATING_POINT_LITERAL", "FloatTypeSuffix", "HEX_LITERAL", "HexDigit", "IDENTIFIER", "IntegerTypeSuffix", "LETTER", "LINE_COMMAND", "LINE_COMMENT", "OCTAL_LITERAL", "OctalEscape", "STRING_LITERAL", "UnicodeEscape", "WS", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'.'", "'...'", "'/'", "'/='", "':'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'['", "']'", "'^'", "'^='", "'__alignof__'", "'__asm__'", "'__attribute__'", "'__builtin_offsetof'", "'__builtin_va_arg'", "'__builtin_va_list'", "'__const'", "'__const__'", "'__extension__'", "'__inline'", "'__inline__'", "'__restrict'", "'__restrict__'", "'__volatile'", "'__volatile__'", "'asm'", "'auto'", "'break'", "'case'", "'char'", "'const'", "'continue'", "'default'", "'do'", "'double'", "'else'", "'enum'", "'extern'", "'float'", "'for'", "'goto'", "'if'", "'inline'", "'int'", "'long'", "'register'", "'restrict'", "'return'", "'short'", "'signed'", "'sizeof'", "'static'", "'struct'", "'switch'", "'typedef'", "'typeof'", "'union'", "'unsigned'", "'void'", "'volatile'", "'while'", "'{'", "'|'", "'|='", "'||'", "'}'", "'~'"
	};
	public const int EOF=-1;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int CHARACTER_LITERAL=4;
	public const int COMMENT=5;
	public const int DECIMAL_LITERAL=6;
	public const int EscapeSequence=7;
	public const int Exponent=8;
	public const int FLOATING_POINT_LITERAL=9;
	public const int FloatTypeSuffix=10;
	public const int HEX_LITERAL=11;
	public const int HexDigit=12;
	public const int IDENTIFIER=13;
	public const int IntegerTypeSuffix=14;
	public const int LETTER=15;
	public const int LINE_COMMAND=16;
	public const int LINE_COMMENT=17;
	public const int OCTAL_LITERAL=18;
	public const int OctalEscape=19;
	public const int STRING_LITERAL=20;
	public const int UnicodeEscape=21;
	public const int WS=22;

	protected sealed partial class Symbols_scope
	{
		public // only track types in order to get parser working
			HashSet<string> types;

		public Symbols_scope(CParser grammar) { OnCreated(grammar); }
		partial void OnCreated(CParser grammar);
	}
	partial void Symbols_scopeInit( Symbols_scope scope );
	partial void Symbols_scopeAfter( Symbols_scope scope );
	protected readonly ListStack<Symbols_scope> Symbols_stack = new ListStack<Symbols_scope>();

	public CParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public CParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[309+1];


		XmlTreeAdaptor treeAdaptor = default(XmlTreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new XmlTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref XmlTreeAdaptor adaptor);

	private XmlTreeAdaptor adaptor;

	public XmlTreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return CParser.tokenNames; } }
	public override string GrammarFileName { get { return "C.g"; } }


		boolean isTypeName(String name) {
			for (int i = Symbols_stack.size()-1; i>=0; i--) {
				Symbols_scope scope = (Symbols_scope)Symbols_stack.get(i);
				if ( scope.types.contains(name) ) {
					return true;
				}
			}
			return false;
		}


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_translation_unit();
	partial void LeaveRule_translation_unit();

	// $ANTLR start "translation_unit"
	// C.g:59:1: translation_unit : ( external_declaration )+ ;
	[GrammarRule("translation_unit")]
	public XAstParserRuleReturnScope translation_unit()
	{
		EnterRule_translation_unit();
		EnterRule("translation_unit", 1);
		var retval = new XAstParserRuleReturnScope("translation_unit");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int translation_unit_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope external_declaration1 = default(XAstParserRuleReturnScope);


		  Symbols_stack.Peek().types =  new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "translation_unit");
		DebugLocation(59, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// C.g:64:2: ( ( external_declaration )+ )
			DebugEnterAlt(1);
			// C.g:64:4: ( external_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(64, 4);
			// C.g:64:4: ( external_declaration )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==IDENTIFIER||LA1_0==30||LA1_0==32||LA1_0==65||(LA1_0>=68 && LA1_0<=77)||LA1_0==79||(LA1_0>=82 && LA1_0<=83)||LA1_0==87||(LA1_0>=89 && LA1_0<=91)||(LA1_0>=95 && LA1_0<=99)||(LA1_0>=101 && LA1_0<=102)||(LA1_0>=104 && LA1_0<=105)||(LA1_0>=107 && LA1_0<=112)))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:64:4: external_declaration
					{
					DebugLocation(64, 4);
					PushFollow(Follow._external_declaration_in_translation_unit71);
					external_declaration1=external_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, external_declaration1.Tree, external_declaration1, retval);

					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("translation_unit", 1);
			LeaveRule("translation_unit", 1);
			LeaveRule_translation_unit();
			if (state.backtracking > 0) { Memoize(input, 1, translation_unit_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(65, 1);
		} finally { DebugExitRule(GrammarFileName, "translation_unit"); }
		return retval;

	}
	// $ANTLR end "translation_unit"

	partial void EnterRule_external_declaration();
	partial void LeaveRule_external_declaration();

	// $ANTLR start "external_declaration"
	// C.g:81:1: external_declaration options {k=1; } : ( ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition | declaration );
	[GrammarRule("external_declaration")]
	public XAstParserRuleReturnScope external_declaration()
	{
		EnterRule_external_declaration();
		EnterRule("external_declaration", 2);
		var retval = new XAstParserRuleReturnScope("external_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int external_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope function_definition2 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declaration3 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "external_declaration");
		DebugLocation(81, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// C.g:83:2: ( ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition | declaration )
			int alt2=2;
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0==79||LA2_0==90||LA2_0==98||LA2_0==104))
			{
				int LA2_1 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==111))
			{
				int LA2_2 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==82))
			{
				int LA2_3 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==101))
			{
				int LA2_4 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==96))
			{
				int LA2_5 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==97))
			{
				int LA2_6 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==91))
			{
				int LA2_7 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==87))
			{
				int LA2_8 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==102))
			{
				int LA2_9 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==110))
			{
				int LA2_10 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 10, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==105||LA2_0==109))
			{
				int LA2_11 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==89))
			{
				int LA2_12 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 12, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==IDENTIFIER))
			{
				int LA2_13 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if (((isTypeName(input.LT(1).getText()))))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 13, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==108))
			{
				int LA2_14 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 14, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if (((LA2_0>=69 && LA2_0<=70)||(LA2_0>=74 && LA2_0<=77)||LA2_0==83||LA2_0==99||LA2_0==112))
			{
				int LA2_15 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 15, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==68||(LA2_0>=72 && LA2_0<=73)||LA2_0==95))
			{
				int LA2_16 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 16, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==65))
			{
				int LA2_17 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 17, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==71))
			{
				int LA2_18 = input.LA(2);

				if ((EvaluatePredicate(synpred4_C_fragment)))
				{
					alt2 = 1;
				}
				else if ((true))
				{
					alt2 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 2, 18, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA2_0==32) && (EvaluatePredicate(synpred4_C_fragment)))
			{
				alt2 = 1;
			}
			else if ((LA2_0==30) && (EvaluatePredicate(synpred4_C_fragment)))
			{
				alt2 = 1;
			}
			else if ((LA2_0==107))
			{
				alt2 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:83:4: ( ( declaration_specifiers )? declarator ( declaration )* '{' )=> function_definition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(83, 62);
				PushFollow(Follow._function_definition_in_external_declaration107);
				function_definition2=function_definition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, function_definition2.Tree, function_definition2, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:84:4: declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(84, 4);
				PushFollow(Follow._declaration_in_external_declaration112);
				declaration3=declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration3.Tree, declaration3, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("external_declaration", 2);
			LeaveRule("external_declaration", 2);
			LeaveRule_external_declaration();
			if (state.backtracking > 0) { Memoize(input, 2, external_declaration_StartIndex); }

		}
		DebugLocation(85, 1);
		} finally { DebugExitRule(GrammarFileName, "external_declaration"); }
		return retval;

	}
	// $ANTLR end "external_declaration"

	partial void EnterRule_function_definition();
	partial void LeaveRule_function_definition();

	// $ANTLR start "function_definition"
	// C.g:87:1: function_definition : ( declaration_specifiers )? declarator ( ( declaration )+ compound_statement | compound_statement ) ;
	[GrammarRule("function_definition")]
	public XAstParserRuleReturnScope function_definition()
	{
		EnterRule_function_definition();
		EnterRule("function_definition", 3);
		var retval = new XAstParserRuleReturnScope("function_definition");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int function_definition_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope declaration_specifiers4 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator5 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declaration6 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope compound_statement7 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope compound_statement8 = default(XAstParserRuleReturnScope);


		  Symbols_stack.Peek().types =  new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "function_definition");
		DebugLocation(87, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// C.g:92:2: ( ( declaration_specifiers )? declarator ( ( declaration )+ compound_statement | compound_statement ) )
			DebugEnterAlt(1);
			// C.g:92:4: ( declaration_specifiers )? declarator ( ( declaration )+ compound_statement | compound_statement )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(92, 4);
			// C.g:92:4: ( declaration_specifiers )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0==65||(LA3_0>=68 && LA3_0<=77)||LA3_0==79||(LA3_0>=82 && LA3_0<=83)||LA3_0==87||(LA3_0>=89 && LA3_0<=91)||(LA3_0>=95 && LA3_0<=99)||(LA3_0>=101 && LA3_0<=102)||(LA3_0>=104 && LA3_0<=105)||(LA3_0>=108 && LA3_0<=112)))
			{
				alt3 = 1;
			}
			else if ((LA3_0==IDENTIFIER))
			{
				switch (input.LA(2))
				{
				case 32:
					{
					alt3 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA3_22 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 30:
					{
					int LA3_23 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 79:
				case 90:
				case 98:
				case 104:
					{
					int LA3_24 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 111:
					{
					int LA3_25 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 82:
					{
					int LA3_26 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 101:
					{
					int LA3_27 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 96:
					{
					int LA3_28 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 97:
					{
					int LA3_29 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 91:
					{
					int LA3_30 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 87:
					{
					int LA3_31 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 102:
					{
					int LA3_32 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 110:
					{
					int LA3_33 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 105:
				case 109:
					{
					int LA3_34 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 89:
					{
					int LA3_35 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 108:
					{
					int LA3_36 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 69:
				case 70:
				case 74:
				case 75:
				case 76:
				case 77:
				case 83:
				case 99:
				case 112:
					{
					int LA3_37 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 68:
				case 72:
				case 73:
				case 95:
					{
					int LA3_38 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 65:
					{
					int LA3_39 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				case 71:
					{
					int LA3_40 = input.LA(3);

					if ((((EvaluatePredicate(synpred5_C_fragment)&&EvaluatePredicate(synpred5_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt3 = 1;
					}
					}
					break;
				}

			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:92:4: declaration_specifiers
				{
				DebugLocation(92, 4);
				PushFollow(Follow._declaration_specifiers_in_function_definition134);
				declaration_specifiers4=declaration_specifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers4.Tree, declaration_specifiers4, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(92, 28);
			PushFollow(Follow._declarator_in_function_definition137);
			declarator5=declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, declarator5.Tree, declarator5, retval);
			DebugLocation(93, 3);
			// C.g:93:3: ( ( declaration )+ compound_statement | compound_statement )
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0==IDENTIFIER||LA5_0==65||(LA5_0>=68 && LA5_0<=77)||LA5_0==79||(LA5_0>=82 && LA5_0<=83)||LA5_0==87||(LA5_0>=89 && LA5_0<=91)||(LA5_0>=95 && LA5_0<=99)||(LA5_0>=101 && LA5_0<=102)||(LA5_0>=104 && LA5_0<=105)||(LA5_0>=107 && LA5_0<=112)))
			{
				alt5 = 1;
			}
			else if ((LA5_0==114))
			{
				alt5 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:93:5: ( declaration )+ compound_statement
				{
				DebugLocation(93, 5);
				// C.g:93:5: ( declaration )+
				int cnt4=0;
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if ((LA4_0==IDENTIFIER||LA4_0==65||(LA4_0>=68 && LA4_0<=77)||LA4_0==79||(LA4_0>=82 && LA4_0<=83)||LA4_0==87||(LA4_0>=89 && LA4_0<=91)||(LA4_0>=95 && LA4_0<=99)||(LA4_0>=101 && LA4_0<=102)||(LA4_0>=104 && LA4_0<=105)||(LA4_0>=107 && LA4_0<=112)))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:93:5: declaration
						{
						DebugLocation(93, 5);
						PushFollow(Follow._declaration_in_function_definition143);
						declaration6=declaration();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, declaration6.Tree, declaration6, retval);

						}
						break;

					default:
						if (cnt4 >= 1)
							goto loop4;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee4 = new EarlyExitException( 4, input );
						DebugRecognitionException(eee4);
						throw eee4;
					}
					cnt4++;
				}
				loop4:
					;

				} finally { DebugExitSubRule(4); }

				DebugLocation(93, 18);
				PushFollow(Follow._compound_statement_in_function_definition146);
				compound_statement7=compound_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, compound_statement7.Tree, compound_statement7, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:94:5: compound_statement
				{
				DebugLocation(94, 5);
				PushFollow(Follow._compound_statement_in_function_definition153);
				compound_statement8=compound_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, compound_statement8.Tree, compound_statement8, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("function_definition", 3);
			LeaveRule("function_definition", 3);
			LeaveRule_function_definition();
			if (state.backtracking > 0) { Memoize(input, 3, function_definition_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(96, 1);
		} finally { DebugExitRule(GrammarFileName, "function_definition"); }
		return retval;

	}
	// $ANTLR end "function_definition"

	protected sealed partial class declaration_scope
	{
		public boolean isTypedef;

		public declaration_scope(CParser grammar) { OnCreated(grammar); }
		partial void OnCreated(CParser grammar);
	}
	partial void declaration_scopeInit( declaration_scope scope );
	partial void declaration_scopeAfter( declaration_scope scope );
	protected readonly ListStack<declaration_scope> declaration_stack = new ListStack<declaration_scope>();

	partial void EnterRule_declaration();
	partial void LeaveRule_declaration();

	// $ANTLR start "declaration"
	// C.g:98:1: declaration : ( ( gcc_extension_specifier )? 'typedef' ( declaration_specifiers )? init_declarator_list ';' | declaration_specifiers ( init_declarator_list )? ';' );
	[GrammarRule("declaration")]
	public XAstParserRuleReturnScope declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 4);
		var retval = new XAstParserRuleReturnScope("declaration");
		declaration_stack.Push(new declaration_scope(this));declaration_scopeInit(declaration_stack.Peek());
		
		retval.Start = (IToken)input.LT(1);
		int declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal10 = default(IToken);
		IToken char_literal13 = default(IToken);
		IToken char_literal16 = default(IToken);
		XAstParserRuleReturnScope gcc_extension_specifier9 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declaration_specifiers11 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope init_declarator_list12 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declaration_specifiers14 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope init_declarator_list15 = default(XAstParserRuleReturnScope);

		object string_literal10_tree = default(object);
		object char_literal13_tree = default(object);
		object char_literal16_tree = default(object);

		  declaration_stack.Peek().isTypedef =  false;

		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(98, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// C.g:105:2: ( ( gcc_extension_specifier )? 'typedef' ( declaration_specifiers )? init_declarator_list ';' | declaration_specifiers ( init_declarator_list )? ';' )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case 71:
				{
				int LA9_1 = input.LA(2);

				if ((LA9_1==107))
				{
					alt9 = 1;
				}
				else if ((LA9_1==IDENTIFIER||LA9_1==30||LA9_1==32||LA9_1==47||LA9_1==65||(LA9_1>=68 && LA9_1<=77)||LA9_1==79||(LA9_1>=82 && LA9_1<=83)||LA9_1==87||(LA9_1>=89 && LA9_1<=91)||(LA9_1>=95 && LA9_1<=99)||(LA9_1>=101 && LA9_1<=102)||(LA9_1>=104 && LA9_1<=105)||(LA9_1>=108 && LA9_1<=112)))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 107:
				{
				alt9 = 1;
				}
				break;
			case IDENTIFIER:
			case 65:
			case 68:
			case 69:
			case 70:
			case 72:
			case 73:
			case 74:
			case 75:
			case 76:
			case 77:
			case 79:
			case 82:
			case 83:
			case 87:
			case 89:
			case 90:
			case 91:
			case 95:
			case 96:
			case 97:
			case 98:
			case 99:
			case 101:
			case 102:
			case 104:
			case 105:
			case 108:
			case 109:
			case 110:
			case 111:
			case 112:
				{
				alt9 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:105:4: ( gcc_extension_specifier )? 'typedef' ( declaration_specifiers )? init_declarator_list ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(105, 4);
				// C.g:105:4: ( gcc_extension_specifier )?
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==71))
				{
					alt6 = 1;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:105:4: gcc_extension_specifier
					{
					DebugLocation(105, 4);
					PushFollow(Follow._gcc_extension_specifier_in_declaration181);
					gcc_extension_specifier9=gcc_extension_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_extension_specifier9.Tree, gcc_extension_specifier9, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(6); }

				DebugLocation(105, 29);
				string_literal10=(IToken)Match(input,107,Follow._107_in_declaration184); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal10_tree = (object)adaptor.Create(string_literal10, retval);
				adaptor.AddChild(root_0, string_literal10_tree);
				}
				DebugLocation(105, 39);
				// C.g:105:39: ( declaration_specifiers )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==65||(LA7_0>=68 && LA7_0<=77)||LA7_0==79||(LA7_0>=82 && LA7_0<=83)||LA7_0==87||(LA7_0>=89 && LA7_0<=91)||(LA7_0>=95 && LA7_0<=99)||(LA7_0>=101 && LA7_0<=102)||(LA7_0>=104 && LA7_0<=105)||(LA7_0>=108 && LA7_0<=112)))
				{
					alt7 = 1;
				}
				else if ((LA7_0==IDENTIFIER))
				{
					switch (input.LA(2))
					{
					case IDENTIFIER:
					case 32:
					case 68:
					case 69:
					case 70:
					case 71:
					case 72:
					case 73:
					case 74:
					case 75:
					case 76:
					case 77:
					case 79:
					case 82:
					case 83:
					case 87:
					case 89:
					case 90:
					case 91:
					case 95:
					case 96:
					case 97:
					case 98:
					case 99:
					case 101:
					case 102:
					case 104:
					case 105:
					case 108:
					case 109:
					case 110:
					case 111:
					case 112:
						{
						alt7 = 1;
						}
						break;
					case 30:
						{
						int LA7_23 = input.LA(3);

						if ((((EvaluatePredicate(synpred9_C_fragment)&&EvaluatePredicate(synpred9_C_fragment))&&(isTypeName(input.LT(1).getText())))))
						{
							alt7 = 1;
						}
						}
						break;
					case 65:
						{
						int LA7_39 = input.LA(3);

						if ((((EvaluatePredicate(synpred9_C_fragment)&&EvaluatePredicate(synpred9_C_fragment))&&(isTypeName(input.LT(1).getText())))))
						{
							alt7 = 1;
						}
						}
						break;
					}

				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:105:39: declaration_specifiers
					{
					DebugLocation(105, 39);
					PushFollow(Follow._declaration_specifiers_in_declaration186);
					declaration_specifiers11=declaration_specifiers();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers11.Tree, declaration_specifiers11, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(7); }

				DebugLocation(105, 63);
				if (state.backtracking == 0)
				{
					 declaration_stack.Peek().isTypedef =  true; 
				}
				DebugLocation(106, 4);
				PushFollow(Follow._init_declarator_list_in_declaration196);
				init_declarator_list12=init_declarator_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator_list12.Tree, init_declarator_list12, retval);
				DebugLocation(106, 25);
				char_literal13=(IToken)Match(input,47,Follow._47_in_declaration198); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal13_tree = (object)adaptor.Create(char_literal13, retval);
				adaptor.AddChild(root_0, char_literal13_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:107:4: declaration_specifiers ( init_declarator_list )? ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(107, 4);
				PushFollow(Follow._declaration_specifiers_in_declaration204);
				declaration_specifiers14=declaration_specifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers14.Tree, declaration_specifiers14, retval);
				DebugLocation(107, 27);
				// C.g:107:27: ( init_declarator_list )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if ((LA8_0==IDENTIFIER||LA8_0==30||LA8_0==32))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:107:27: init_declarator_list
					{
					DebugLocation(107, 27);
					PushFollow(Follow._init_declarator_list_in_declaration206);
					init_declarator_list15=init_declarator_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator_list15.Tree, init_declarator_list15, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(107, 49);
				char_literal16=(IToken)Match(input,47,Follow._47_in_declaration209); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal16_tree = (object)adaptor.Create(char_literal16, retval);
				adaptor.AddChild(root_0, char_literal16_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 4);
			LeaveRule("declaration", 4);
			LeaveRule_declaration();
			if (state.backtracking > 0) { Memoize(input, 4, declaration_StartIndex); }

			declaration_scopeAfter(declaration_stack.Peek());declaration_stack.Pop();
		}
		DebugLocation(108, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"

	partial void EnterRule_declaration_specifiers();
	partial void LeaveRule_declaration_specifiers();

	// $ANTLR start "declaration_specifiers"
	// C.g:110:1: declaration_specifiers : ( storage_class_specifier | type_specifier | type_qualifier | gcc_function_specifier | gcc_declaration_specifier )+ ;
	[GrammarRule("declaration_specifiers")]
	public XAstParserRuleReturnScope declaration_specifiers()
	{
		EnterRule_declaration_specifiers();
		EnterRule("declaration_specifiers", 5);
		var retval = new XAstParserRuleReturnScope("declaration_specifiers");
		
		retval.Start = (IToken)input.LT(1);
		int declaration_specifiers_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope storage_class_specifier17 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_specifier18 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_qualifier19 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_function_specifier20 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_declaration_specifier21 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "declaration_specifiers");
		DebugLocation(110, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// C.g:111:2: ( ( storage_class_specifier | type_specifier | type_qualifier | gcc_function_specifier | gcc_declaration_specifier )+ )
			DebugEnterAlt(1);
			// C.g:111:6: ( storage_class_specifier | type_specifier | type_qualifier | gcc_function_specifier | gcc_declaration_specifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(111, 6);
			// C.g:111:6: ( storage_class_specifier | type_specifier | type_qualifier | gcc_function_specifier | gcc_declaration_specifier )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=6;
				try { DebugEnterDecision(10, false);
				switch (input.LA(1))
				{
				case IDENTIFIER:
					{
					int LA10_2 = input.LA(2);

					if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred13_C_fragment))))
					{
						alt10 = 2;
					}


					}
					break;
				case 79:
				case 90:
				case 98:
				case 104:
					{
					alt10 = 1;
					}
					break;
				case 82:
				case 87:
				case 89:
				case 91:
				case 96:
				case 97:
				case 101:
				case 102:
				case 105:
				case 108:
				case 109:
				case 110:
				case 111:
					{
					alt10 = 2;
					}
					break;
				case 69:
				case 70:
				case 74:
				case 75:
				case 76:
				case 77:
				case 83:
				case 99:
				case 112:
					{
					alt10 = 3;
					}
					break;
				case 68:
				case 72:
				case 73:
				case 95:
					{
					alt10 = 4;
					}
					break;
				case 65:
				case 71:
					{
					alt10 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:111:10: storage_class_specifier
					{
					DebugLocation(111, 10);
					PushFollow(Follow._storage_class_specifier_in_declaration_specifiers226);
					storage_class_specifier17=storage_class_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, storage_class_specifier17.Tree, storage_class_specifier17, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:112:7: type_specifier
					{
					DebugLocation(112, 7);
					PushFollow(Follow._type_specifier_in_declaration_specifiers234);
					type_specifier18=type_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_specifier18.Tree, type_specifier18, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C.g:113:7: type_qualifier
					{
					DebugLocation(113, 7);
					PushFollow(Follow._type_qualifier_in_declaration_specifiers242);
					type_qualifier19=type_qualifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier19.Tree, type_qualifier19, retval);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// C.g:114:7: gcc_function_specifier
					{
					DebugLocation(114, 7);
					PushFollow(Follow._gcc_function_specifier_in_declaration_specifiers250);
					gcc_function_specifier20=gcc_function_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_function_specifier20.Tree, gcc_function_specifier20, retval);

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// C.g:115:7: gcc_declaration_specifier
					{
					DebugLocation(115, 7);
					PushFollow(Follow._gcc_declaration_specifier_in_declaration_specifiers258);
					gcc_declaration_specifier21=gcc_declaration_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_declaration_specifier21.Tree, gcc_declaration_specifier21, retval);

					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration_specifiers", 5);
			LeaveRule("declaration_specifiers", 5);
			LeaveRule_declaration_specifiers();
			if (state.backtracking > 0) { Memoize(input, 5, declaration_specifiers_StartIndex); }

		}
		DebugLocation(117, 1);
		} finally { DebugExitRule(GrammarFileName, "declaration_specifiers"); }
		return retval;

	}
	// $ANTLR end "declaration_specifiers"

	partial void EnterRule_init_declarator_list();
	partial void LeaveRule_init_declarator_list();

	// $ANTLR start "init_declarator_list"
	// C.g:119:1: init_declarator_list : init_declarator ( ',' init_declarator )* ;
	[GrammarRule("init_declarator_list")]
	public XAstParserRuleReturnScope init_declarator_list()
	{
		EnterRule_init_declarator_list();
		EnterRule("init_declarator_list", 6);
		var retval = new XAstParserRuleReturnScope("init_declarator_list");
		
		retval.Start = (IToken)input.LT(1);
		int init_declarator_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal23 = default(IToken);
		XAstParserRuleReturnScope init_declarator22 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope init_declarator24 = default(XAstParserRuleReturnScope);

		object char_literal23_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "init_declarator_list");
		DebugLocation(119, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// C.g:120:2: ( init_declarator ( ',' init_declarator )* )
			DebugEnterAlt(1);
			// C.g:120:4: init_declarator ( ',' init_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(120, 4);
			PushFollow(Follow._init_declarator_in_init_declarator_list274);
			init_declarator22=init_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator22.Tree, init_declarator22, retval);
			DebugLocation(120, 20);
			// C.g:120:20: ( ',' init_declarator )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==37))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:120:21: ',' init_declarator
					{
					DebugLocation(120, 21);
					char_literal23=(IToken)Match(input,37,Follow._37_in_init_declarator_list277); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal23_tree = (object)adaptor.Create(char_literal23, retval);
					adaptor.AddChild(root_0, char_literal23_tree);
					}
					DebugLocation(120, 25);
					PushFollow(Follow._init_declarator_in_init_declarator_list279);
					init_declarator24=init_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, init_declarator24.Tree, init_declarator24, retval);

					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("init_declarator_list", 6);
			LeaveRule("init_declarator_list", 6);
			LeaveRule_init_declarator_list();
			if (state.backtracking > 0) { Memoize(input, 6, init_declarator_list_StartIndex); }

		}
		DebugLocation(121, 1);
		} finally { DebugExitRule(GrammarFileName, "init_declarator_list"); }
		return retval;

	}
	// $ANTLR end "init_declarator_list"

	partial void EnterRule_init_declarator();
	partial void LeaveRule_init_declarator();

	// $ANTLR start "init_declarator"
	// C.g:123:1: init_declarator : declarator ( '=' initializer )? ;
	[GrammarRule("init_declarator")]
	public XAstParserRuleReturnScope init_declarator()
	{
		EnterRule_init_declarator();
		EnterRule("init_declarator", 7);
		var retval = new XAstParserRuleReturnScope("init_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int init_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal26 = default(IToken);
		XAstParserRuleReturnScope declarator25 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope initializer27 = default(XAstParserRuleReturnScope);

		object char_literal26_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "init_declarator");
		DebugLocation(123, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// C.g:124:2: ( declarator ( '=' initializer )? )
			DebugEnterAlt(1);
			// C.g:124:4: declarator ( '=' initializer )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(124, 4);
			PushFollow(Follow._declarator_in_init_declarator292);
			declarator25=declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, declarator25.Tree, declarator25, retval);
			DebugLocation(124, 15);
			// C.g:124:15: ( '=' initializer )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0==52))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:124:16: '=' initializer
				{
				DebugLocation(124, 16);
				char_literal26=(IToken)Match(input,52,Follow._52_in_init_declarator295); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal26_tree = (object)adaptor.Create(char_literal26, retval);
				adaptor.AddChild(root_0, char_literal26_tree);
				}
				DebugLocation(124, 20);
				PushFollow(Follow._initializer_in_init_declarator297);
				initializer27=initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, initializer27.Tree, initializer27, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("init_declarator", 7);
			LeaveRule("init_declarator", 7);
			LeaveRule_init_declarator();
			if (state.backtracking > 0) { Memoize(input, 7, init_declarator_StartIndex); }

		}
		DebugLocation(125, 1);
		} finally { DebugExitRule(GrammarFileName, "init_declarator"); }
		return retval;

	}
	// $ANTLR end "init_declarator"

	partial void EnterRule_storage_class_specifier();
	partial void LeaveRule_storage_class_specifier();

	// $ANTLR start "storage_class_specifier"
	// C.g:127:1: storage_class_specifier : ( 'extern' | 'static' | 'auto' | 'register' );
	[GrammarRule("storage_class_specifier")]
	public XAstParserRuleReturnScope storage_class_specifier()
	{
		EnterRule_storage_class_specifier();
		EnterRule("storage_class_specifier", 8);
		var retval = new XAstParserRuleReturnScope("storage_class_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int storage_class_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set28 = default(IToken);

		object set28_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "storage_class_specifier");
		DebugLocation(127, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// C.g:128:2: ( 'extern' | 'static' | 'auto' | 'register' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(128, 2);

			set28=(IToken)input.LT(1);
			if (input.LA(1)==79||input.LA(1)==90||input.LA(1)==98||input.LA(1)==104)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set28, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("storage_class_specifier", 8);
			LeaveRule("storage_class_specifier", 8);
			LeaveRule_storage_class_specifier();
			if (state.backtracking > 0) { Memoize(input, 8, storage_class_specifier_StartIndex); }

		}
		DebugLocation(132, 1);
		} finally { DebugExitRule(GrammarFileName, "storage_class_specifier"); }
		return retval;

	}
	// $ANTLR end "storage_class_specifier"

	partial void EnterRule_type_specifier();
	partial void LeaveRule_type_specifier();

	// $ANTLR start "type_specifier"
	// C.g:134:1: type_specifier : ( 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | struct_or_union_specifier | enum_specifier | type_id | gcc_typeof );
	[GrammarRule("type_specifier")]
	public XAstParserRuleReturnScope type_specifier()
	{
		EnterRule_type_specifier();
		EnterRule("type_specifier", 9);
		var retval = new XAstParserRuleReturnScope("type_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int type_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal29 = default(IToken);
		IToken string_literal30 = default(IToken);
		IToken string_literal31 = default(IToken);
		IToken string_literal32 = default(IToken);
		IToken string_literal33 = default(IToken);
		IToken string_literal34 = default(IToken);
		IToken string_literal35 = default(IToken);
		IToken string_literal36 = default(IToken);
		IToken string_literal37 = default(IToken);
		XAstParserRuleReturnScope struct_or_union_specifier38 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enum_specifier39 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_id40 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_typeof41 = default(XAstParserRuleReturnScope);

		object string_literal29_tree = default(object);
		object string_literal30_tree = default(object);
		object string_literal31_tree = default(object);
		object string_literal32_tree = default(object);
		object string_literal33_tree = default(object);
		object string_literal34_tree = default(object);
		object string_literal35_tree = default(object);
		object string_literal36_tree = default(object);
		object string_literal37_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_specifier");
		DebugLocation(134, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// C.g:135:2: ( 'void' | 'char' | 'short' | 'int' | 'long' | 'float' | 'double' | 'signed' | 'unsigned' | struct_or_union_specifier | enum_specifier | type_id | gcc_typeof )
			int alt13=13;
			try { DebugEnterDecision(13, false);
			switch (input.LA(1))
			{
			case 111:
				{
				alt13 = 1;
				}
				break;
			case 82:
				{
				alt13 = 2;
				}
				break;
			case 101:
				{
				alt13 = 3;
				}
				break;
			case 96:
				{
				alt13 = 4;
				}
				break;
			case 97:
				{
				alt13 = 5;
				}
				break;
			case 91:
				{
				alt13 = 6;
				}
				break;
			case 87:
				{
				alt13 = 7;
				}
				break;
			case 102:
				{
				alt13 = 8;
				}
				break;
			case 110:
				{
				alt13 = 9;
				}
				break;
			case 105:
			case 109:
				{
				alt13 = 10;
				}
				break;
			case 89:
				{
				alt13 = 11;
				}
				break;
			case IDENTIFIER:
				{
				alt13 = 12;
				}
				break;
			case 108:
				{
				alt13 = 13;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:135:4: 'void'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(135, 4);
				string_literal29=(IToken)Match(input,111,Follow._111_in_type_specifier336); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal29_tree = (object)adaptor.Create(string_literal29, retval);
				adaptor.AddChild(root_0, string_literal29_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:136:4: 'char'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(136, 4);
				string_literal30=(IToken)Match(input,82,Follow._82_in_type_specifier341); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal30_tree = (object)adaptor.Create(string_literal30, retval);
				adaptor.AddChild(root_0, string_literal30_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:137:4: 'short'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(137, 4);
				string_literal31=(IToken)Match(input,101,Follow._101_in_type_specifier346); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal31_tree = (object)adaptor.Create(string_literal31, retval);
				adaptor.AddChild(root_0, string_literal31_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:138:4: 'int'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(138, 4);
				string_literal32=(IToken)Match(input,96,Follow._96_in_type_specifier351); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal32_tree = (object)adaptor.Create(string_literal32, retval);
				adaptor.AddChild(root_0, string_literal32_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:139:4: 'long'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(139, 4);
				string_literal33=(IToken)Match(input,97,Follow._97_in_type_specifier356); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal33_tree = (object)adaptor.Create(string_literal33, retval);
				adaptor.AddChild(root_0, string_literal33_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:140:4: 'float'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(140, 4);
				string_literal34=(IToken)Match(input,91,Follow._91_in_type_specifier361); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal34_tree = (object)adaptor.Create(string_literal34, retval);
				adaptor.AddChild(root_0, string_literal34_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C.g:141:4: 'double'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(141, 4);
				string_literal35=(IToken)Match(input,87,Follow._87_in_type_specifier366); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal35_tree = (object)adaptor.Create(string_literal35, retval);
				adaptor.AddChild(root_0, string_literal35_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C.g:142:4: 'signed'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(142, 4);
				string_literal36=(IToken)Match(input,102,Follow._102_in_type_specifier371); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal36_tree = (object)adaptor.Create(string_literal36, retval);
				adaptor.AddChild(root_0, string_literal36_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C.g:143:4: 'unsigned'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(143, 4);
				string_literal37=(IToken)Match(input,110,Follow._110_in_type_specifier376); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal37_tree = (object)adaptor.Create(string_literal37, retval);
				adaptor.AddChild(root_0, string_literal37_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// C.g:144:4: struct_or_union_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(144, 4);
				PushFollow(Follow._struct_or_union_specifier_in_type_specifier381);
				struct_or_union_specifier38=struct_or_union_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_or_union_specifier38.Tree, struct_or_union_specifier38, retval);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// C.g:145:4: enum_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(145, 4);
				PushFollow(Follow._enum_specifier_in_type_specifier386);
				enum_specifier39=enum_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_specifier39.Tree, enum_specifier39, retval);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// C.g:146:4: type_id
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(146, 4);
				PushFollow(Follow._type_id_in_type_specifier391);
				type_id40=type_id();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_id40.Tree, type_id40, retval);

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// C.g:147:4: gcc_typeof
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(147, 4);
				PushFollow(Follow._gcc_typeof_in_type_specifier396);
				gcc_typeof41=gcc_typeof();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_typeof41.Tree, gcc_typeof41, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_specifier", 9);
			LeaveRule("type_specifier", 9);
			LeaveRule_type_specifier();
			if (state.backtracking > 0) { Memoize(input, 9, type_specifier_StartIndex); }

		}
		DebugLocation(148, 1);
		} finally { DebugExitRule(GrammarFileName, "type_specifier"); }
		return retval;

	}
	// $ANTLR end "type_specifier"

	partial void EnterRule_type_id();
	partial void LeaveRule_type_id();

	// $ANTLR start "type_id"
	// C.g:150:1: type_id :{...}? IDENTIFIER ;
	[GrammarRule("type_id")]
	public XAstParserRuleReturnScope type_id()
	{
		EnterRule_type_id();
		EnterRule("type_id", 10);
		var retval = new XAstParserRuleReturnScope("type_id");
		
		retval.Start = (IToken)input.LT(1);
		int type_id_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER42 = default(IToken);

		object IDENTIFIER42_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_id");
		DebugLocation(150, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// C.g:151:2: ({...}? IDENTIFIER )
			DebugEnterAlt(1);
			// C.g:151:6: {...}? IDENTIFIER
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(151, 6);
			if (!((isTypeName(input.LT(1).getText()))))
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				throw new FailedPredicateException(input, "type_id", "isTypeName(input.LT(1).getText())");
			}
			DebugLocation(151, 43);
			IDENTIFIER42=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_type_id411), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER42_tree = (object)adaptor.Create(IDENTIFIER42, retval);
			adaptor.AddChild(root_0, IDENTIFIER42_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_id", 10);
			LeaveRule("type_id", 10);
			LeaveRule_type_id();
			if (state.backtracking > 0) { Memoize(input, 10, type_id_StartIndex); }

		}
		DebugLocation(153, 1);
		} finally { DebugExitRule(GrammarFileName, "type_id"); }
		return retval;

	}
	// $ANTLR end "type_id"

	partial void EnterRule_struct_or_union_specifier();
	partial void LeaveRule_struct_or_union_specifier();

	// $ANTLR start "struct_or_union_specifier"
	// C.g:155:1: struct_or_union_specifier options {k=3; } : ( struct_or_union ( gcc_attribute_list )? ( IDENTIFIER )? '{' struct_declaration_list '}' | struct_or_union ( gcc_attribute_list )? IDENTIFIER );
	[GrammarRule("struct_or_union_specifier")]
	public XAstParserRuleReturnScope struct_or_union_specifier()
	{
		EnterRule_struct_or_union_specifier();
		EnterRule("struct_or_union_specifier", 11);
		var retval = new XAstParserRuleReturnScope("struct_or_union_specifier");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int struct_or_union_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER45 = default(IToken);
		IToken char_literal46 = default(IToken);
		IToken char_literal48 = default(IToken);
		IToken IDENTIFIER51 = default(IToken);
		XAstParserRuleReturnScope struct_or_union43 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute_list44 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declaration_list47 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_or_union49 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute_list50 = default(XAstParserRuleReturnScope);

		object IDENTIFIER45_tree = default(object);
		object char_literal46_tree = default(object);
		object char_literal48_tree = default(object);
		object IDENTIFIER51_tree = default(object);

		  Symbols_stack.Peek().types =  new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "struct_or_union_specifier");
		DebugLocation(155, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// C.g:161:2: ( struct_or_union ( gcc_attribute_list )? ( IDENTIFIER )? '{' struct_declaration_list '}' | struct_or_union ( gcc_attribute_list )? IDENTIFIER )
			int alt17=2;
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==105||LA17_0==109))
			{
				switch (input.LA(2))
				{
				case 65:
					{
					int LA17_2 = input.LA(3);

					if ((LA17_2==30))
					{
						int LA17_5 = input.LA(4);

						if ((EvaluatePredicate(synpred36_C_fragment)))
						{
							alt17 = 1;
						}
						else if ((true))
						{
							alt17 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 17, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 17, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENTIFIER:
					{
					int LA17_3 = input.LA(3);

					if ((LA17_3==114))
					{
						alt17 = 1;
					}
					else if ((LA17_3==EOF||LA17_3==IDENTIFIER||(LA17_3>=30 && LA17_3<=32)||LA17_3==37||(LA17_3>=46 && LA17_3<=47)||LA17_3==59||LA17_3==65||(LA17_3>=68 && LA17_3<=77)||LA17_3==79||(LA17_3>=82 && LA17_3<=83)||LA17_3==87||(LA17_3>=89 && LA17_3<=91)||(LA17_3>=95 && LA17_3<=99)||(LA17_3>=101 && LA17_3<=102)||(LA17_3>=104 && LA17_3<=105)||(LA17_3>=108 && LA17_3<=112)))
					{
						alt17 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 17, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 114:
					{
					alt17 = 1;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 17, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:161:4: struct_or_union ( gcc_attribute_list )? ( IDENTIFIER )? '{' struct_declaration_list '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(161, 4);
				PushFollow(Follow._struct_or_union_in_struct_or_union_specifier441);
				struct_or_union43=struct_or_union();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_or_union43.Tree, struct_or_union43, retval);
				DebugLocation(161, 20);
				// C.g:161:20: ( gcc_attribute_list )?
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==65))
				{
					alt14 = 1;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:161:20: gcc_attribute_list
					{
					DebugLocation(161, 20);
					PushFollow(Follow._gcc_attribute_list_in_struct_or_union_specifier443);
					gcc_attribute_list44=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list44.Tree, gcc_attribute_list44, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(14); }

				DebugLocation(161, 40);
				// C.g:161:40: ( IDENTIFIER )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==IDENTIFIER))
				{
					alt15 = 1;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:161:40: IDENTIFIER
					{
					DebugLocation(161, 40);
					IDENTIFIER45=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_struct_or_union_specifier446), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER45_tree = (object)adaptor.Create(IDENTIFIER45, retval);
					adaptor.AddChild(root_0, IDENTIFIER45_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(15); }

				DebugLocation(161, 52);
				char_literal46=(IToken)Match(input,114,Follow._114_in_struct_or_union_specifier449); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal46_tree = (object)adaptor.Create(char_literal46, retval);
				adaptor.AddChild(root_0, char_literal46_tree);
				}
				DebugLocation(161, 56);
				PushFollow(Follow._struct_declaration_list_in_struct_or_union_specifier451);
				struct_declaration_list47=struct_declaration_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration_list47.Tree, struct_declaration_list47, retval);
				DebugLocation(161, 80);
				char_literal48=(IToken)Match(input,118,Follow._118_in_struct_or_union_specifier453); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal48_tree = (object)adaptor.Create(char_literal48, retval);
				adaptor.AddChild(root_0, char_literal48_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:162:4: struct_or_union ( gcc_attribute_list )? IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(162, 4);
				PushFollow(Follow._struct_or_union_in_struct_or_union_specifier458);
				struct_or_union49=struct_or_union();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_or_union49.Tree, struct_or_union49, retval);
				DebugLocation(162, 20);
				// C.g:162:20: ( gcc_attribute_list )?
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==65))
				{
					alt16 = 1;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:162:20: gcc_attribute_list
					{
					DebugLocation(162, 20);
					PushFollow(Follow._gcc_attribute_list_in_struct_or_union_specifier460);
					gcc_attribute_list50=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list50.Tree, gcc_attribute_list50, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(16); }

				DebugLocation(162, 40);
				IDENTIFIER51=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_struct_or_union_specifier463), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER51_tree = (object)adaptor.Create(IDENTIFIER51, retval);
				adaptor.AddChild(root_0, IDENTIFIER51_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_or_union_specifier", 11);
			LeaveRule("struct_or_union_specifier", 11);
			LeaveRule_struct_or_union_specifier();
			if (state.backtracking > 0) { Memoize(input, 11, struct_or_union_specifier_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(163, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_or_union_specifier"); }
		return retval;

	}
	// $ANTLR end "struct_or_union_specifier"

	partial void EnterRule_struct_or_union();
	partial void LeaveRule_struct_or_union();

	// $ANTLR start "struct_or_union"
	// C.g:165:1: struct_or_union : ( 'struct' | 'union' );
	[GrammarRule("struct_or_union")]
	public XAstParserRuleReturnScope struct_or_union()
	{
		EnterRule_struct_or_union();
		EnterRule("struct_or_union", 12);
		var retval = new XAstParserRuleReturnScope("struct_or_union");
		
		retval.Start = (IToken)input.LT(1);
		int struct_or_union_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set52 = default(IToken);

		object set52_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_or_union");
		DebugLocation(165, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// C.g:166:2: ( 'struct' | 'union' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(166, 2);

			set52=(IToken)input.LT(1);
			if (input.LA(1)==105||input.LA(1)==109)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set52, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_or_union", 12);
			LeaveRule("struct_or_union", 12);
			LeaveRule_struct_or_union();
			if (state.backtracking > 0) { Memoize(input, 12, struct_or_union_StartIndex); }

		}
		DebugLocation(168, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_or_union"); }
		return retval;

	}
	// $ANTLR end "struct_or_union"

	partial void EnterRule_struct_declaration_list();
	partial void LeaveRule_struct_declaration_list();

	// $ANTLR start "struct_declaration_list"
	// C.g:170:1: struct_declaration_list : ( struct_declaration )+ ;
	[GrammarRule("struct_declaration_list")]
	public XAstParserRuleReturnScope struct_declaration_list()
	{
		EnterRule_struct_declaration_list();
		EnterRule("struct_declaration_list", 13);
		var retval = new XAstParserRuleReturnScope("struct_declaration_list");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declaration_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope struct_declaration53 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "struct_declaration_list");
		DebugLocation(170, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// C.g:171:2: ( ( struct_declaration )+ )
			DebugEnterAlt(1);
			// C.g:171:4: ( struct_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(171, 4);
			// C.g:171:4: ( struct_declaration )+
			int cnt18=0;
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==IDENTIFIER||LA18_0==47||LA18_0==65||(LA18_0>=69 && LA18_0<=71)||(LA18_0>=74 && LA18_0<=77)||(LA18_0>=82 && LA18_0<=83)||LA18_0==87||LA18_0==89||LA18_0==91||(LA18_0>=96 && LA18_0<=97)||LA18_0==99||(LA18_0>=101 && LA18_0<=102)||LA18_0==105||(LA18_0>=108 && LA18_0<=112)))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:171:4: struct_declaration
					{
					DebugLocation(171, 4);
					PushFollow(Follow._struct_declaration_in_struct_declaration_list490);
					struct_declaration53=struct_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration53.Tree, struct_declaration53, retval);

					}
					break;

				default:
					if (cnt18 >= 1)
						goto loop18;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee18 = new EarlyExitException( 18, input );
					DebugRecognitionException(eee18);
					throw eee18;
				}
				cnt18++;
			}
			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declaration_list", 13);
			LeaveRule("struct_declaration_list", 13);
			LeaveRule_struct_declaration_list();
			if (state.backtracking > 0) { Memoize(input, 13, struct_declaration_list_StartIndex); }

		}
		DebugLocation(172, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_declaration_list"); }
		return retval;

	}
	// $ANTLR end "struct_declaration_list"

	partial void EnterRule_struct_declaration();
	partial void LeaveRule_struct_declaration();

	// $ANTLR start "struct_declaration"
	// C.g:174:1: struct_declaration : ( specifier_qualifier_list struct_declarator_list ';' | ';' );
	[GrammarRule("struct_declaration")]
	public XAstParserRuleReturnScope struct_declaration()
	{
		EnterRule_struct_declaration();
		EnterRule("struct_declaration", 14);
		var retval = new XAstParserRuleReturnScope("struct_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal56 = default(IToken);
		IToken char_literal57 = default(IToken);
		XAstParserRuleReturnScope specifier_qualifier_list54 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declarator_list55 = default(XAstParserRuleReturnScope);

		object char_literal56_tree = default(object);
		object char_literal57_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_declaration");
		DebugLocation(174, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// C.g:175:2: ( specifier_qualifier_list struct_declarator_list ';' | ';' )
			int alt19=2;
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==IDENTIFIER||LA19_0==65||(LA19_0>=69 && LA19_0<=71)||(LA19_0>=74 && LA19_0<=77)||(LA19_0>=82 && LA19_0<=83)||LA19_0==87||LA19_0==89||LA19_0==91||(LA19_0>=96 && LA19_0<=97)||LA19_0==99||(LA19_0>=101 && LA19_0<=102)||LA19_0==105||(LA19_0>=108 && LA19_0<=112)))
			{
				alt19 = 1;
			}
			else if ((LA19_0==47))
			{
				alt19 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:175:4: specifier_qualifier_list struct_declarator_list ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(175, 4);
				PushFollow(Follow._specifier_qualifier_list_in_struct_declaration502);
				specifier_qualifier_list54=specifier_qualifier_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, specifier_qualifier_list54.Tree, specifier_qualifier_list54, retval);
				DebugLocation(175, 29);
				PushFollow(Follow._struct_declarator_list_in_struct_declaration504);
				struct_declarator_list55=struct_declarator_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declarator_list55.Tree, struct_declarator_list55, retval);
				DebugLocation(175, 52);
				char_literal56=(IToken)Match(input,47,Follow._47_in_struct_declaration506); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal56_tree = (object)adaptor.Create(char_literal56, retval);
				adaptor.AddChild(root_0, char_literal56_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:176:4: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(176, 4);
				char_literal57=(IToken)Match(input,47,Follow._47_in_struct_declaration511); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal57_tree = (object)adaptor.Create(char_literal57, retval);
				adaptor.AddChild(root_0, char_literal57_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declaration", 14);
			LeaveRule("struct_declaration", 14);
			LeaveRule_struct_declaration();
			if (state.backtracking > 0) { Memoize(input, 14, struct_declaration_StartIndex); }

		}
		DebugLocation(177, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_declaration"); }
		return retval;

	}
	// $ANTLR end "struct_declaration"

	partial void EnterRule_specifier_qualifier_list();
	partial void LeaveRule_specifier_qualifier_list();

	// $ANTLR start "specifier_qualifier_list"
	// C.g:179:1: specifier_qualifier_list : ( type_qualifier | type_specifier | gcc_declaration_specifier )+ ;
	[GrammarRule("specifier_qualifier_list")]
	public XAstParserRuleReturnScope specifier_qualifier_list()
	{
		EnterRule_specifier_qualifier_list();
		EnterRule("specifier_qualifier_list", 15);
		var retval = new XAstParserRuleReturnScope("specifier_qualifier_list");
		
		retval.Start = (IToken)input.LT(1);
		int specifier_qualifier_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope type_qualifier58 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_specifier59 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_declaration_specifier60 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "specifier_qualifier_list");
		DebugLocation(179, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// C.g:180:2: ( ( type_qualifier | type_specifier | gcc_declaration_specifier )+ )
			DebugEnterAlt(1);
			// C.g:180:4: ( type_qualifier | type_specifier | gcc_declaration_specifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(180, 4);
			// C.g:180:4: ( type_qualifier | type_specifier | gcc_declaration_specifier )+
			int cnt20=0;
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=4;
				try { DebugEnterDecision(20, false);
				switch (input.LA(1))
				{
				case IDENTIFIER:
					{
					int LA20_2 = input.LA(2);

					if (((((isTypeName(input.LT(1).getText()))&&(isTypeName(input.LT(1).getText())))&&EvaluatePredicate(synpred42_C_fragment))))
					{
						alt20 = 2;
					}


					}
					break;
				case 69:
				case 70:
				case 74:
				case 75:
				case 76:
				case 77:
				case 83:
				case 99:
				case 112:
					{
					alt20 = 1;
					}
					break;
				case 82:
				case 87:
				case 89:
				case 91:
				case 96:
				case 97:
				case 101:
				case 102:
				case 105:
				case 108:
				case 109:
				case 110:
				case 111:
					{
					alt20 = 2;
					}
					break;
				case 65:
				case 71:
					{
					alt20 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:180:6: type_qualifier
					{
					DebugLocation(180, 6);
					PushFollow(Follow._type_qualifier_in_specifier_qualifier_list525);
					type_qualifier58=type_qualifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier58.Tree, type_qualifier58, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:180:23: type_specifier
					{
					DebugLocation(180, 23);
					PushFollow(Follow._type_specifier_in_specifier_qualifier_list529);
					type_specifier59=type_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_specifier59.Tree, type_specifier59, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C.g:180:40: gcc_declaration_specifier
					{
					DebugLocation(180, 40);
					PushFollow(Follow._gcc_declaration_specifier_in_specifier_qualifier_list533);
					gcc_declaration_specifier60=gcc_declaration_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_declaration_specifier60.Tree, gcc_declaration_specifier60, retval);

					}
					break;

				default:
					if (cnt20 >= 1)
						goto loop20;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee20 = new EarlyExitException( 20, input );
					DebugRecognitionException(eee20);
					throw eee20;
				}
				cnt20++;
			}
			loop20:
				;

			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("specifier_qualifier_list", 15);
			LeaveRule("specifier_qualifier_list", 15);
			LeaveRule_specifier_qualifier_list();
			if (state.backtracking > 0) { Memoize(input, 15, specifier_qualifier_list_StartIndex); }

		}
		DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "specifier_qualifier_list"); }
		return retval;

	}
	// $ANTLR end "specifier_qualifier_list"

	partial void EnterRule_struct_declarator_list();
	partial void LeaveRule_struct_declarator_list();

	// $ANTLR start "struct_declarator_list"
	// C.g:183:1: struct_declarator_list : struct_declarator ( ',' struct_declarator )* ;
	[GrammarRule("struct_declarator_list")]
	public XAstParserRuleReturnScope struct_declarator_list()
	{
		EnterRule_struct_declarator_list();
		EnterRule("struct_declarator_list", 16);
		var retval = new XAstParserRuleReturnScope("struct_declarator_list");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declarator_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal62 = default(IToken);
		XAstParserRuleReturnScope struct_declarator61 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declarator63 = default(XAstParserRuleReturnScope);

		object char_literal62_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_declarator_list");
		DebugLocation(183, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// C.g:184:2: ( struct_declarator ( ',' struct_declarator )* )
			DebugEnterAlt(1);
			// C.g:184:4: struct_declarator ( ',' struct_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(184, 4);
			PushFollow(Follow._struct_declarator_in_struct_declarator_list546);
			struct_declarator61=struct_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declarator61.Tree, struct_declarator61, retval);
			DebugLocation(184, 22);
			// C.g:184:22: ( ',' struct_declarator )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==37))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:184:23: ',' struct_declarator
					{
					DebugLocation(184, 23);
					char_literal62=(IToken)Match(input,37,Follow._37_in_struct_declarator_list549); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal62_tree = (object)adaptor.Create(char_literal62, retval);
					adaptor.AddChild(root_0, char_literal62_tree);
					}
					DebugLocation(184, 27);
					PushFollow(Follow._struct_declarator_in_struct_declarator_list551);
					struct_declarator63=struct_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declarator63.Tree, struct_declarator63, retval);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declarator_list", 16);
			LeaveRule("struct_declarator_list", 16);
			LeaveRule_struct_declarator_list();
			if (state.backtracking > 0) { Memoize(input, 16, struct_declarator_list_StartIndex); }

		}
		DebugLocation(185, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_declarator_list"); }
		return retval;

	}
	// $ANTLR end "struct_declarator_list"

	partial void EnterRule_struct_declarator();
	partial void LeaveRule_struct_declarator();

	// $ANTLR start "struct_declarator"
	// C.g:187:1: struct_declarator : ( declarator | ( declarator )? ':' constant_expression ( gcc_attribute_list )? );
	[GrammarRule("struct_declarator")]
	public XAstParserRuleReturnScope struct_declarator()
	{
		EnterRule_struct_declarator();
		EnterRule("struct_declarator", 17);
		var retval = new XAstParserRuleReturnScope("struct_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal66 = default(IToken);
		XAstParserRuleReturnScope declarator64 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator65 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression67 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute_list68 = default(XAstParserRuleReturnScope);

		object char_literal66_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_declarator");
		DebugLocation(187, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// C.g:188:2: ( declarator | ( declarator )? ':' constant_expression ( gcc_attribute_list )? )
			int alt24=2;
			try { DebugEnterDecision(24, false);
			switch (input.LA(1))
			{
			case 32:
				{
				switch (input.LA(2))
				{
				case 69:
				case 70:
				case 74:
				case 75:
				case 76:
				case 77:
				case 83:
				case 99:
				case 112:
					{
					int LA24_5 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 5, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 65:
					{
					int LA24_6 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 6, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENTIFIER:
					{
					int LA24_7 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 7, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 30:
					{
					int LA24_8 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 8, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 32:
					{
					int LA24_9 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 9, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case EOF:
				case 37:
				case 47:
					{
					alt24 = 1;
					}
					break;
				case 46:
					{
					alt24 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case IDENTIFIER:
				{
				switch (input.LA(2))
				{
				case 59:
					{
					int LA24_14 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 14, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 30:
					{
					int LA24_15 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 15, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 64:
				case 78:
					{
					int LA24_16 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 16, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 65:
					{
					int LA24_17 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 17, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case EOF:
				case 37:
				case 47:
					{
					alt24 = 1;
					}
					break;
				case 46:
					{
					alt24 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 30:
				{
				switch (input.LA(2))
				{
				case 65:
					{
					int LA24_22 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 22, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 32:
					{
					int LA24_23 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 23, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENTIFIER:
					{
					int LA24_24 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 24, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 30:
					{
					int LA24_25 = input.LA(3);

					if ((EvaluatePredicate(synpred45_C_fragment)))
					{
						alt24 = 1;
					}
					else if ((true))
					{
						alt24 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 25, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 24, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case 46:
				{
				alt24 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:188:4: declarator
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(188, 4);
				PushFollow(Follow._declarator_in_struct_declarator564);
				declarator64=declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declarator64.Tree, declarator64, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:189:4: ( declarator )? ':' constant_expression ( gcc_attribute_list )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(189, 4);
				// C.g:189:4: ( declarator )?
				int alt22=2;
				try { DebugEnterSubRule(22);
				try { DebugEnterDecision(22, false);
				int LA22_0 = input.LA(1);

				if ((LA22_0==IDENTIFIER||LA22_0==30||LA22_0==32))
				{
					alt22 = 1;
				}
				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:189:4: declarator
					{
					DebugLocation(189, 4);
					PushFollow(Follow._declarator_in_struct_declarator569);
					declarator65=declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declarator65.Tree, declarator65, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(22); }

				DebugLocation(189, 16);
				char_literal66=(IToken)Match(input,46,Follow._46_in_struct_declarator572); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal66_tree = (object)adaptor.Create(char_literal66, retval);
				adaptor.AddChild(root_0, char_literal66_tree);
				}
				DebugLocation(189, 20);
				PushFollow(Follow._constant_expression_in_struct_declarator574);
				constant_expression67=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression67.Tree, constant_expression67, retval);
				DebugLocation(189, 40);
				// C.g:189:40: ( gcc_attribute_list )?
				int alt23=2;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, false);
				int LA23_0 = input.LA(1);

				if ((LA23_0==65))
				{
					alt23 = 1;
				}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:189:40: gcc_attribute_list
					{
					DebugLocation(189, 40);
					PushFollow(Follow._gcc_attribute_list_in_struct_declarator576);
					gcc_attribute_list68=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list68.Tree, gcc_attribute_list68, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(23); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declarator", 17);
			LeaveRule("struct_declarator", 17);
			LeaveRule_struct_declarator();
			if (state.backtracking > 0) { Memoize(input, 17, struct_declarator_StartIndex); }

		}
		DebugLocation(190, 1);
		} finally { DebugExitRule(GrammarFileName, "struct_declarator"); }
		return retval;

	}
	// $ANTLR end "struct_declarator"

	partial void EnterRule_enum_specifier();
	partial void LeaveRule_enum_specifier();

	// $ANTLR start "enum_specifier"
	// C.g:192:1: enum_specifier options {k=4; } : ( 'enum' ( gcc_attribute_list )? ( IDENTIFIER )? '{' enumerator_list '}' | 'enum' ( gcc_attribute_list )? IDENTIFIER );
	[GrammarRule("enum_specifier")]
	public XAstParserRuleReturnScope enum_specifier()
	{
		EnterRule_enum_specifier();
		EnterRule("enum_specifier", 18);
		var retval = new XAstParserRuleReturnScope("enum_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int enum_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal69 = default(IToken);
		IToken IDENTIFIER71 = default(IToken);
		IToken char_literal72 = default(IToken);
		IToken char_literal74 = default(IToken);
		IToken string_literal75 = default(IToken);
		IToken IDENTIFIER77 = default(IToken);
		XAstParserRuleReturnScope gcc_attribute_list70 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enumerator_list73 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute_list76 = default(XAstParserRuleReturnScope);

		object string_literal69_tree = default(object);
		object IDENTIFIER71_tree = default(object);
		object char_literal72_tree = default(object);
		object char_literal74_tree = default(object);
		object string_literal75_tree = default(object);
		object IDENTIFIER77_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enum_specifier");
		DebugLocation(192, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// C.g:194:2: ( 'enum' ( gcc_attribute_list )? ( IDENTIFIER )? '{' enumerator_list '}' | 'enum' ( gcc_attribute_list )? IDENTIFIER )
			int alt28=2;
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==89))
			{
				switch (input.LA(2))
				{
				case 65:
					{
					int LA28_2 = input.LA(3);

					if ((LA28_2==30))
					{
						int LA28_5 = input.LA(4);

						if ((LA28_5==30))
						{
							int LA28_33 = input.LA(5);

							if ((EvaluatePredicate(synpred50_C_fragment)))
							{
								alt28 = 1;
							}
							else if ((true))
							{
								alt28 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 28, 33, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 28, 5, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 28, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENTIFIER:
					{
					int LA28_3 = input.LA(3);

					if ((LA28_3==114))
					{
						alt28 = 1;
					}
					else if ((LA28_3==EOF||LA28_3==IDENTIFIER||(LA28_3>=30 && LA28_3<=32)||LA28_3==37||(LA28_3>=46 && LA28_3<=47)||LA28_3==59||LA28_3==65||(LA28_3>=68 && LA28_3<=77)||LA28_3==79||(LA28_3>=82 && LA28_3<=83)||LA28_3==87||(LA28_3>=89 && LA28_3<=91)||(LA28_3>=95 && LA28_3<=99)||(LA28_3>=101 && LA28_3<=102)||(LA28_3>=104 && LA28_3<=105)||(LA28_3>=108 && LA28_3<=112)))
					{
						alt28 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 28, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 114:
					{
					alt28 = 1;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 28, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 28, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:194:4: 'enum' ( gcc_attribute_list )? ( IDENTIFIER )? '{' enumerator_list '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(194, 4);
				string_literal69=(IToken)Match(input,89,Follow._89_in_enum_specifier595); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal69_tree = (object)adaptor.Create(string_literal69, retval);
				adaptor.AddChild(root_0, string_literal69_tree);
				}
				DebugLocation(194, 11);
				// C.g:194:11: ( gcc_attribute_list )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==65))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:194:11: gcc_attribute_list
					{
					DebugLocation(194, 11);
					PushFollow(Follow._gcc_attribute_list_in_enum_specifier597);
					gcc_attribute_list70=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list70.Tree, gcc_attribute_list70, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(25); }

				DebugLocation(194, 31);
				// C.g:194:31: ( IDENTIFIER )?
				int alt26=2;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==IDENTIFIER))
				{
					alt26 = 1;
				}
				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:194:31: IDENTIFIER
					{
					DebugLocation(194, 31);
					IDENTIFIER71=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enum_specifier600), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER71_tree = (object)adaptor.Create(IDENTIFIER71, retval);
					adaptor.AddChild(root_0, IDENTIFIER71_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(26); }

				DebugLocation(194, 43);
				char_literal72=(IToken)Match(input,114,Follow._114_in_enum_specifier603); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal72_tree = (object)adaptor.Create(char_literal72, retval);
				adaptor.AddChild(root_0, char_literal72_tree);
				}
				DebugLocation(194, 47);
				PushFollow(Follow._enumerator_list_in_enum_specifier605);
				enumerator_list73=enumerator_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator_list73.Tree, enumerator_list73, retval);
				DebugLocation(194, 63);
				char_literal74=(IToken)Match(input,118,Follow._118_in_enum_specifier607); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal74_tree = (object)adaptor.Create(char_literal74, retval);
				adaptor.AddChild(root_0, char_literal74_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:195:4: 'enum' ( gcc_attribute_list )? IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(195, 4);
				string_literal75=(IToken)Match(input,89,Follow._89_in_enum_specifier612); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal75_tree = (object)adaptor.Create(string_literal75, retval);
				adaptor.AddChild(root_0, string_literal75_tree);
				}
				DebugLocation(195, 11);
				// C.g:195:11: ( gcc_attribute_list )?
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if ((LA27_0==65))
				{
					alt27 = 1;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:195:11: gcc_attribute_list
					{
					DebugLocation(195, 11);
					PushFollow(Follow._gcc_attribute_list_in_enum_specifier614);
					gcc_attribute_list76=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list76.Tree, gcc_attribute_list76, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(195, 31);
				IDENTIFIER77=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enum_specifier617), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER77_tree = (object)adaptor.Create(IDENTIFIER77, retval);
				adaptor.AddChild(root_0, IDENTIFIER77_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_specifier", 18);
			LeaveRule("enum_specifier", 18);
			LeaveRule_enum_specifier();
			if (state.backtracking > 0) { Memoize(input, 18, enum_specifier_StartIndex); }

		}
		DebugLocation(196, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_specifier"); }
		return retval;

	}
	// $ANTLR end "enum_specifier"

	partial void EnterRule_enumerator_list();
	partial void LeaveRule_enumerator_list();

	// $ANTLR start "enumerator_list"
	// C.g:198:1: enumerator_list : enumerator ( ',' enumerator )* ;
	[GrammarRule("enumerator_list")]
	public XAstParserRuleReturnScope enumerator_list()
	{
		EnterRule_enumerator_list();
		EnterRule("enumerator_list", 19);
		var retval = new XAstParserRuleReturnScope("enumerator_list");
		
		retval.Start = (IToken)input.LT(1);
		int enumerator_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal79 = default(IToken);
		XAstParserRuleReturnScope enumerator78 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enumerator80 = default(XAstParserRuleReturnScope);

		object char_literal79_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumerator_list");
		DebugLocation(198, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// C.g:199:2: ( enumerator ( ',' enumerator )* )
			DebugEnterAlt(1);
			// C.g:199:4: enumerator ( ',' enumerator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(199, 4);
			PushFollow(Follow._enumerator_in_enumerator_list628);
			enumerator78=enumerator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator78.Tree, enumerator78, retval);
			DebugLocation(199, 15);
			// C.g:199:15: ( ',' enumerator )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==37))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:199:16: ',' enumerator
					{
					DebugLocation(199, 16);
					char_literal79=(IToken)Match(input,37,Follow._37_in_enumerator_list631); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal79_tree = (object)adaptor.Create(char_literal79, retval);
					adaptor.AddChild(root_0, char_literal79_tree);
					}
					DebugLocation(199, 20);
					PushFollow(Follow._enumerator_in_enumerator_list633);
					enumerator80=enumerator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, enumerator80.Tree, enumerator80, retval);

					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumerator_list", 19);
			LeaveRule("enumerator_list", 19);
			LeaveRule_enumerator_list();
			if (state.backtracking > 0) { Memoize(input, 19, enumerator_list_StartIndex); }

		}
		DebugLocation(200, 1);
		} finally { DebugExitRule(GrammarFileName, "enumerator_list"); }
		return retval;

	}
	// $ANTLR end "enumerator_list"

	partial void EnterRule_enumerator();
	partial void LeaveRule_enumerator();

	// $ANTLR start "enumerator"
	// C.g:202:1: enumerator : IDENTIFIER ( '=' constant_expression )? ;
	[GrammarRule("enumerator")]
	public XAstParserRuleReturnScope enumerator()
	{
		EnterRule_enumerator();
		EnterRule("enumerator", 20);
		var retval = new XAstParserRuleReturnScope("enumerator");
		
		retval.Start = (IToken)input.LT(1);
		int enumerator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER81 = default(IToken);
		IToken char_literal82 = default(IToken);
		XAstParserRuleReturnScope constant_expression83 = default(XAstParserRuleReturnScope);

		object IDENTIFIER81_tree = default(object);
		object char_literal82_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enumerator");
		DebugLocation(202, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// C.g:203:2: ( IDENTIFIER ( '=' constant_expression )? )
			DebugEnterAlt(1);
			// C.g:203:4: IDENTIFIER ( '=' constant_expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(203, 4);
			IDENTIFIER81=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_enumerator646), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER81_tree = (object)adaptor.Create(IDENTIFIER81, retval);
			adaptor.AddChild(root_0, IDENTIFIER81_tree);
			}
			DebugLocation(203, 15);
			// C.g:203:15: ( '=' constant_expression )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==52))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:203:16: '=' constant_expression
				{
				DebugLocation(203, 16);
				char_literal82=(IToken)Match(input,52,Follow._52_in_enumerator649); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal82_tree = (object)adaptor.Create(char_literal82, retval);
				adaptor.AddChild(root_0, char_literal82_tree);
				}
				DebugLocation(203, 20);
				PushFollow(Follow._constant_expression_in_enumerator651);
				constant_expression83=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression83.Tree, constant_expression83, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enumerator", 20);
			LeaveRule("enumerator", 20);
			LeaveRule_enumerator();
			if (state.backtracking > 0) { Memoize(input, 20, enumerator_StartIndex); }

		}
		DebugLocation(204, 1);
		} finally { DebugExitRule(GrammarFileName, "enumerator"); }
		return retval;

	}
	// $ANTLR end "enumerator"

	partial void EnterRule_type_qualifier();
	partial void LeaveRule_type_qualifier();

	// $ANTLR start "type_qualifier"
	// C.g:206:1: type_qualifier : ( 'const' | 'volatile' | 'restrict' | '__const' | '__volatile' | '__restrict' | '__const__' | '__volatile__' | '__restrict__' );
	[GrammarRule("type_qualifier")]
	public XAstParserRuleReturnScope type_qualifier()
	{
		EnterRule_type_qualifier();
		EnterRule("type_qualifier", 21);
		var retval = new XAstParserRuleReturnScope("type_qualifier");
		
		retval.Start = (IToken)input.LT(1);
		int type_qualifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set84 = default(IToken);

		object set84_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_qualifier");
		DebugLocation(206, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// C.g:207:2: ( 'const' | 'volatile' | 'restrict' | '__const' | '__volatile' | '__restrict' | '__const__' | '__volatile__' | '__restrict__' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(207, 2);

			set84=(IToken)input.LT(1);
			if ((input.LA(1)>=69 && input.LA(1)<=70)||(input.LA(1)>=74 && input.LA(1)<=77)||input.LA(1)==83||input.LA(1)==99||input.LA(1)==112)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set84, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_qualifier", 21);
			LeaveRule("type_qualifier", 21);
			LeaveRule_type_qualifier();
			if (state.backtracking > 0) { Memoize(input, 21, type_qualifier_StartIndex); }

		}
		DebugLocation(216, 1);
		} finally { DebugExitRule(GrammarFileName, "type_qualifier"); }
		return retval;

	}
	// $ANTLR end "type_qualifier"

	partial void EnterRule_declarator();
	partial void LeaveRule_declarator();

	// $ANTLR start "declarator"
	// C.g:218:1: declarator : ( ( pointer )? direct_declarator ( gcc_asm_expression )? ( gcc_attribute_list )? | pointer );
	[GrammarRule("declarator")]
	public XAstParserRuleReturnScope declarator()
	{
		EnterRule_declarator();
		EnterRule("declarator", 22);
		var retval = new XAstParserRuleReturnScope("declarator");
		
		retval.Start = (IToken)input.LT(1);
		int declarator_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope pointer85 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope direct_declarator86 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_asm_expression87 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute_list88 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope pointer89 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "declarator");
		DebugLocation(218, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// C.g:219:2: ( ( pointer )? direct_declarator ( gcc_asm_expression )? ( gcc_attribute_list )? | pointer )
			int alt34=2;
			try { DebugEnterDecision(34, false);
			int LA34_0 = input.LA(1);

			if ((LA34_0==32))
			{
				int LA34_1 = input.LA(2);

				if ((EvaluatePredicate(synpred65_C_fragment)))
				{
					alt34 = 1;
				}
				else if ((true))
				{
					alt34 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 34, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA34_0==IDENTIFIER||LA34_0==30))
			{
				alt34 = 1;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 34, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:219:4: ( pointer )? direct_declarator ( gcc_asm_expression )? ( gcc_attribute_list )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(219, 4);
				// C.g:219:4: ( pointer )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				int LA31_0 = input.LA(1);

				if ((LA31_0==32))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:219:4: pointer
					{
					DebugLocation(219, 4);
					PushFollow(Follow._pointer_in_declarator728);
					pointer85=pointer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, pointer85.Tree, pointer85, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(31); }

				DebugLocation(219, 13);
				PushFollow(Follow._direct_declarator_in_declarator731);
				direct_declarator86=direct_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, direct_declarator86.Tree, direct_declarator86, retval);
				DebugLocation(219, 31);
				// C.g:219:31: ( gcc_asm_expression )?
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, false);
				int LA32_0 = input.LA(1);

				if ((LA32_0==64||LA32_0==78))
				{
					alt32 = 1;
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:219:31: gcc_asm_expression
					{
					DebugLocation(219, 31);
					PushFollow(Follow._gcc_asm_expression_in_declarator733);
					gcc_asm_expression87=gcc_asm_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_asm_expression87.Tree, gcc_asm_expression87, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(32); }

				DebugLocation(219, 51);
				// C.g:219:51: ( gcc_attribute_list )?
				int alt33=2;
				try { DebugEnterSubRule(33);
				try { DebugEnterDecision(33, false);
				int LA33_0 = input.LA(1);

				if ((LA33_0==65))
				{
					int LA33_1 = input.LA(2);

					if ((LA33_1==30))
					{
						int LA33_30 = input.LA(3);

						if ((EvaluatePredicate(synpred64_C_fragment)))
						{
							alt33 = 1;
						}
					}
				}
				} finally { DebugExitDecision(33); }
				switch (alt33)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:219:51: gcc_attribute_list
					{
					DebugLocation(219, 51);
					PushFollow(Follow._gcc_attribute_list_in_declarator736);
					gcc_attribute_list88=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list88.Tree, gcc_attribute_list88, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(33); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:220:4: pointer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(220, 4);
				PushFollow(Follow._pointer_in_declarator742);
				pointer89=pointer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pointer89.Tree, pointer89, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declarator", 22);
			LeaveRule("declarator", 22);
			LeaveRule_declarator();
			if (state.backtracking > 0) { Memoize(input, 22, declarator_StartIndex); }

		}
		DebugLocation(221, 1);
		} finally { DebugExitRule(GrammarFileName, "declarator"); }
		return retval;

	}
	// $ANTLR end "declarator"

	partial void EnterRule_direct_declarator();
	partial void LeaveRule_direct_declarator();

	// $ANTLR start "direct_declarator"
	// C.g:223:1: direct_declarator : ( IDENTIFIER | '(' ( gcc_attribute_list )? declarator ')' ) ( declarator_suffix )* ;
	[GrammarRule("direct_declarator")]
	public XAstParserRuleReturnScope direct_declarator()
	{
		EnterRule_direct_declarator();
		EnterRule("direct_declarator", 23);
		var retval = new XAstParserRuleReturnScope("direct_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int direct_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER90 = default(IToken);
		IToken char_literal91 = default(IToken);
		IToken char_literal94 = default(IToken);
		XAstParserRuleReturnScope gcc_attribute_list92 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator93 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator_suffix95 = default(XAstParserRuleReturnScope);

		object IDENTIFIER90_tree = default(object);
		object char_literal91_tree = default(object);
		object char_literal94_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "direct_declarator");
		DebugLocation(223, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// C.g:224:2: ( ( IDENTIFIER | '(' ( gcc_attribute_list )? declarator ')' ) ( declarator_suffix )* )
			DebugEnterAlt(1);
			// C.g:224:6: ( IDENTIFIER | '(' ( gcc_attribute_list )? declarator ')' ) ( declarator_suffix )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(224, 6);
			// C.g:224:6: ( IDENTIFIER | '(' ( gcc_attribute_list )? declarator ')' )
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==IDENTIFIER))
			{
				alt36 = 1;
			}
			else if ((LA36_0==30))
			{
				alt36 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 36, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:224:8: IDENTIFIER
				{
				DebugLocation(224, 8);
				IDENTIFIER90=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_direct_declarator757), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER90_tree = (object)adaptor.Create(IDENTIFIER90, retval);
				adaptor.AddChild(root_0, IDENTIFIER90_tree);
				}
				DebugLocation(225, 4);
				if (state.backtracking == 0)
				{

								if (declaration_stack.size() > 0 && declaration_stack.Peek().isTypedef) {
									Symbols_stack.Peek().types.add((IDENTIFIER90!=null?IDENTIFIER90.Text:null));
									//Console.WriteLine("define type "+(IDENTIFIER90!=null?IDENTIFIER90.Text:null));
								}
								
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:231:5: '(' ( gcc_attribute_list )? declarator ')'
				{
				DebugLocation(231, 5);
				char_literal91=(IToken)Match(input,30,Follow._30_in_direct_declarator768); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal91_tree = (object)adaptor.Create(char_literal91, retval);
				adaptor.AddChild(root_0, char_literal91_tree);
				}
				DebugLocation(231, 9);
				// C.g:231:9: ( gcc_attribute_list )?
				int alt35=2;
				try { DebugEnterSubRule(35);
				try { DebugEnterDecision(35, false);
				int LA35_0 = input.LA(1);

				if ((LA35_0==65))
				{
					alt35 = 1;
				}
				} finally { DebugExitDecision(35); }
				switch (alt35)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:231:9: gcc_attribute_list
					{
					DebugLocation(231, 9);
					PushFollow(Follow._gcc_attribute_list_in_direct_declarator770);
					gcc_attribute_list92=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list92.Tree, gcc_attribute_list92, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(35); }

				DebugLocation(231, 29);
				PushFollow(Follow._declarator_in_direct_declarator773);
				declarator93=declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declarator93.Tree, declarator93, retval);
				DebugLocation(231, 40);
				char_literal94=(IToken)Match(input,31,Follow._31_in_direct_declarator775); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal94_tree = (object)adaptor.Create(char_literal94, retval);
				adaptor.AddChild(root_0, char_literal94_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(233, 3);
			// C.g:233:3: ( declarator_suffix )*
			try { DebugEnterSubRule(37);
			while (true)
			{
				int alt37=2;
				try { DebugEnterDecision(37, false);
				try
				{
					alt37 = dfa37.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(37); }
				switch ( alt37 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:233:3: declarator_suffix
					{
					DebugLocation(233, 3);
					PushFollow(Follow._declarator_suffix_in_direct_declarator783);
					declarator_suffix95=declarator_suffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declarator_suffix95.Tree, declarator_suffix95, retval);

					}
					break;

				default:
					goto loop37;
				}
			}

			loop37:
				;

			} finally { DebugExitSubRule(37); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("direct_declarator", 23);
			LeaveRule("direct_declarator", 23);
			LeaveRule_direct_declarator();
			if (state.backtracking > 0) { Memoize(input, 23, direct_declarator_StartIndex); }

		}
		DebugLocation(234, 1);
		} finally { DebugExitRule(GrammarFileName, "direct_declarator"); }
		return retval;

	}
	// $ANTLR end "direct_declarator"

	partial void EnterRule_declarator_suffix();
	partial void LeaveRule_declarator_suffix();

	// $ANTLR start "declarator_suffix"
	// C.g:236:1: declarator_suffix : ( '[' constant_expression ']' | '[' ']' | '(' parameter_type_list ')' | '(' identifier_list ')' | '(' ')' );
	[GrammarRule("declarator_suffix")]
	public XAstParserRuleReturnScope declarator_suffix()
	{
		EnterRule_declarator_suffix();
		EnterRule("declarator_suffix", 24);
		var retval = new XAstParserRuleReturnScope("declarator_suffix");
		
		retval.Start = (IToken)input.LT(1);
		int declarator_suffix_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal96 = default(IToken);
		IToken char_literal98 = default(IToken);
		IToken char_literal99 = default(IToken);
		IToken char_literal100 = default(IToken);
		IToken char_literal101 = default(IToken);
		IToken char_literal103 = default(IToken);
		IToken char_literal104 = default(IToken);
		IToken char_literal106 = default(IToken);
		IToken char_literal107 = default(IToken);
		IToken char_literal108 = default(IToken);
		XAstParserRuleReturnScope constant_expression97 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope parameter_type_list102 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier_list105 = default(XAstParserRuleReturnScope);

		object char_literal96_tree = default(object);
		object char_literal98_tree = default(object);
		object char_literal99_tree = default(object);
		object char_literal100_tree = default(object);
		object char_literal101_tree = default(object);
		object char_literal103_tree = default(object);
		object char_literal104_tree = default(object);
		object char_literal106_tree = default(object);
		object char_literal107_tree = default(object);
		object char_literal108_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "declarator_suffix");
		DebugLocation(236, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// C.g:237:2: ( '[' constant_expression ']' | '[' ']' | '(' parameter_type_list ')' | '(' identifier_list ')' | '(' ')' )
			int alt38=5;
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==59))
			{
				int LA38_1 = input.LA(2);

				if ((LA38_1==60))
				{
					alt38 = 2;
				}
				else if ((LA38_1==CHARACTER_LITERAL||LA38_1==DECIMAL_LITERAL||LA38_1==FLOATING_POINT_LITERAL||LA38_1==HEX_LITERAL||LA38_1==IDENTIFIER||LA38_1==OCTAL_LITERAL||LA38_1==STRING_LITERAL||LA38_1==23||LA38_1==28||LA38_1==30||LA38_1==32||(LA38_1>=34 && LA38_1<=35)||(LA38_1>=38 && LA38_1<=39)||LA38_1==63||(LA38_1>=66 && LA38_1<=67)||LA38_1==71||LA38_1==103||LA38_1==119))
				{
					alt38 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA38_0==30))
			{
				switch (input.LA(2))
				{
				case 31:
					{
					alt38 = 5;
					}
					break;
				case 65:
				case 68:
				case 69:
				case 70:
				case 71:
				case 72:
				case 73:
				case 74:
				case 75:
				case 76:
				case 77:
				case 79:
				case 82:
				case 83:
				case 87:
				case 89:
				case 90:
				case 91:
				case 95:
				case 96:
				case 97:
				case 98:
				case 99:
				case 101:
				case 102:
				case 104:
				case 105:
				case 108:
				case 109:
				case 110:
				case 111:
				case 112:
					{
					alt38 = 3;
					}
					break;
				case IDENTIFIER:
					{
					int LA38_33 = input.LA(3);

					if ((EvaluatePredicate(synpred71_C_fragment)))
					{
						alt38 = 3;
					}
					else if ((EvaluatePredicate(synpred72_C_fragment)))
					{
						alt38 = 4;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 38, 33, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 38, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:237:6: '[' constant_expression ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(237, 6);
				char_literal96=(IToken)Match(input,59,Follow._59_in_declarator_suffix797); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal96_tree = (object)adaptor.Create(char_literal96, retval);
				adaptor.AddChild(root_0, char_literal96_tree);
				}
				DebugLocation(237, 10);
				PushFollow(Follow._constant_expression_in_declarator_suffix799);
				constant_expression97=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression97.Tree, constant_expression97, retval);
				DebugLocation(237, 30);
				char_literal98=(IToken)Match(input,60,Follow._60_in_declarator_suffix801); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal98_tree = (object)adaptor.Create(char_literal98, retval);
				adaptor.AddChild(root_0, char_literal98_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:238:6: '[' ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(238, 6);
				char_literal99=(IToken)Match(input,59,Follow._59_in_declarator_suffix808); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal99_tree = (object)adaptor.Create(char_literal99, retval);
				adaptor.AddChild(root_0, char_literal99_tree);
				}
				DebugLocation(238, 10);
				char_literal100=(IToken)Match(input,60,Follow._60_in_declarator_suffix810); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal100_tree = (object)adaptor.Create(char_literal100, retval);
				adaptor.AddChild(root_0, char_literal100_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:239:6: '(' parameter_type_list ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(239, 6);
				char_literal101=(IToken)Match(input,30,Follow._30_in_declarator_suffix817); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal101_tree = (object)adaptor.Create(char_literal101, retval);
				adaptor.AddChild(root_0, char_literal101_tree);
				}
				DebugLocation(239, 10);
				PushFollow(Follow._parameter_type_list_in_declarator_suffix819);
				parameter_type_list102=parameter_type_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_type_list102.Tree, parameter_type_list102, retval);
				DebugLocation(239, 30);
				char_literal103=(IToken)Match(input,31,Follow._31_in_declarator_suffix821); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal103_tree = (object)adaptor.Create(char_literal103, retval);
				adaptor.AddChild(root_0, char_literal103_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:240:6: '(' identifier_list ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(240, 6);
				char_literal104=(IToken)Match(input,30,Follow._30_in_declarator_suffix828); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal104_tree = (object)adaptor.Create(char_literal104, retval);
				adaptor.AddChild(root_0, char_literal104_tree);
				}
				DebugLocation(240, 10);
				PushFollow(Follow._identifier_list_in_declarator_suffix830);
				identifier_list105=identifier_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier_list105.Tree, identifier_list105, retval);
				DebugLocation(240, 26);
				char_literal106=(IToken)Match(input,31,Follow._31_in_declarator_suffix832); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal106_tree = (object)adaptor.Create(char_literal106, retval);
				adaptor.AddChild(root_0, char_literal106_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:241:6: '(' ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(241, 6);
				char_literal107=(IToken)Match(input,30,Follow._30_in_declarator_suffix839); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal107_tree = (object)adaptor.Create(char_literal107, retval);
				adaptor.AddChild(root_0, char_literal107_tree);
				}
				DebugLocation(241, 10);
				char_literal108=(IToken)Match(input,31,Follow._31_in_declarator_suffix841); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal108_tree = (object)adaptor.Create(char_literal108, retval);
				adaptor.AddChild(root_0, char_literal108_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declarator_suffix", 24);
			LeaveRule("declarator_suffix", 24);
			LeaveRule_declarator_suffix();
			if (state.backtracking > 0) { Memoize(input, 24, declarator_suffix_StartIndex); }

		}
		DebugLocation(242, 1);
		} finally { DebugExitRule(GrammarFileName, "declarator_suffix"); }
		return retval;

	}
	// $ANTLR end "declarator_suffix"

	partial void EnterRule_pointer();
	partial void LeaveRule_pointer();

	// $ANTLR start "pointer"
	// C.g:244:1: pointer : ( '*' ( type_qualifier | gcc_attribute )* )+ ;
	[GrammarRule("pointer")]
	public XAstParserRuleReturnScope pointer()
	{
		EnterRule_pointer();
		EnterRule("pointer", 25);
		var retval = new XAstParserRuleReturnScope("pointer");
		
		retval.Start = (IToken)input.LT(1);
		int pointer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal109 = default(IToken);
		XAstParserRuleReturnScope type_qualifier110 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute111 = default(XAstParserRuleReturnScope);

		object char_literal109_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "pointer");
		DebugLocation(244, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// C.g:245:2: ( ( '*' ( type_qualifier | gcc_attribute )* )+ )
			DebugEnterAlt(1);
			// C.g:245:4: ( '*' ( type_qualifier | gcc_attribute )* )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(245, 4);
			// C.g:245:4: ( '*' ( type_qualifier | gcc_attribute )* )+
			int cnt40=0;
			try { DebugEnterSubRule(40);
			while (true)
			{
				int alt40=2;
				try { DebugEnterDecision(40, false);
				try
				{
					alt40 = dfa40.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:245:5: '*' ( type_qualifier | gcc_attribute )*
					{
					DebugLocation(245, 5);
					char_literal109=(IToken)Match(input,32,Follow._32_in_pointer855); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal109_tree = (object)adaptor.Create(char_literal109, retval);
					adaptor.AddChild(root_0, char_literal109_tree);
					}
					DebugLocation(245, 9);
					// C.g:245:9: ( type_qualifier | gcc_attribute )*
					try { DebugEnterSubRule(39);
					while (true)
					{
						int alt39=3;
						try { DebugEnterDecision(39, false);
						try
						{
							alt39 = dfa39.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(39); }
						switch ( alt39 )
						{
						case 1:
							DebugEnterAlt(1);
							// C.g:245:10: type_qualifier
							{
							DebugLocation(245, 10);
							PushFollow(Follow._type_qualifier_in_pointer858);
							type_qualifier110=type_qualifier();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier110.Tree, type_qualifier110, retval);

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C.g:245:27: gcc_attribute
							{
							DebugLocation(245, 27);
							PushFollow(Follow._gcc_attribute_in_pointer862);
							gcc_attribute111=gcc_attribute();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute111.Tree, gcc_attribute111, retval);

							}
							break;

						default:
							goto loop39;
						}
					}

					loop39:
						;

					} finally { DebugExitSubRule(39); }


					}
					break;

				default:
					if (cnt40 >= 1)
						goto loop40;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee40 = new EarlyExitException( 40, input );
					DebugRecognitionException(eee40);
					throw eee40;
				}
				cnt40++;
			}
			loop40:
				;

			} finally { DebugExitSubRule(40); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pointer", 25);
			LeaveRule("pointer", 25);
			LeaveRule_pointer();
			if (state.backtracking > 0) { Memoize(input, 25, pointer_StartIndex); }

		}
		DebugLocation(246, 1);
		} finally { DebugExitRule(GrammarFileName, "pointer"); }
		return retval;

	}
	// $ANTLR end "pointer"

	partial void EnterRule_parameter_type_list();
	partial void LeaveRule_parameter_type_list();

	// $ANTLR start "parameter_type_list"
	// C.g:248:1: parameter_type_list : parameter_list ( ',' '...' )? ;
	[GrammarRule("parameter_type_list")]
	public XAstParserRuleReturnScope parameter_type_list()
	{
		EnterRule_parameter_type_list();
		EnterRule("parameter_type_list", 26);
		var retval = new XAstParserRuleReturnScope("parameter_type_list");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_type_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal113 = default(IToken);
		IToken string_literal114 = default(IToken);
		XAstParserRuleReturnScope parameter_list112 = default(XAstParserRuleReturnScope);

		object char_literal113_tree = default(object);
		object string_literal114_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parameter_type_list");
		DebugLocation(248, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// C.g:249:2: ( parameter_list ( ',' '...' )? )
			DebugEnterAlt(1);
			// C.g:249:4: parameter_list ( ',' '...' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(249, 4);
			PushFollow(Follow._parameter_list_in_parameter_type_list877);
			parameter_list112=parameter_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_list112.Tree, parameter_list112, retval);
			DebugLocation(249, 19);
			// C.g:249:19: ( ',' '...' )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==37))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:249:20: ',' '...'
				{
				DebugLocation(249, 20);
				char_literal113=(IToken)Match(input,37,Follow._37_in_parameter_type_list880); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal113_tree = (object)adaptor.Create(char_literal113, retval);
				adaptor.AddChild(root_0, char_literal113_tree);
				}
				DebugLocation(249, 24);
				string_literal114=(IToken)Match(input,43,Follow._43_in_parameter_type_list882); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal114_tree = (object)adaptor.Create(string_literal114, retval);
				adaptor.AddChild(root_0, string_literal114_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(41); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_type_list", 26);
			LeaveRule("parameter_type_list", 26);
			LeaveRule_parameter_type_list();
			if (state.backtracking > 0) { Memoize(input, 26, parameter_type_list_StartIndex); }

		}
		DebugLocation(250, 1);
		} finally { DebugExitRule(GrammarFileName, "parameter_type_list"); }
		return retval;

	}
	// $ANTLR end "parameter_type_list"

	partial void EnterRule_parameter_list();
	partial void LeaveRule_parameter_list();

	// $ANTLR start "parameter_list"
	// C.g:252:1: parameter_list : parameter_declaration ( ',' parameter_declaration )* ;
	[GrammarRule("parameter_list")]
	public XAstParserRuleReturnScope parameter_list()
	{
		EnterRule_parameter_list();
		EnterRule("parameter_list", 27);
		var retval = new XAstParserRuleReturnScope("parameter_list");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal116 = default(IToken);
		XAstParserRuleReturnScope parameter_declaration115 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope parameter_declaration117 = default(XAstParserRuleReturnScope);

		object char_literal116_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parameter_list");
		DebugLocation(252, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// C.g:253:2: ( parameter_declaration ( ',' parameter_declaration )* )
			DebugEnterAlt(1);
			// C.g:253:4: parameter_declaration ( ',' parameter_declaration )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(253, 4);
			PushFollow(Follow._parameter_declaration_in_parameter_list895);
			parameter_declaration115=parameter_declaration();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_declaration115.Tree, parameter_declaration115, retval);
			DebugLocation(253, 26);
			// C.g:253:26: ( ',' parameter_declaration )*
			try { DebugEnterSubRule(42);
			while (true)
			{
				int alt42=2;
				try { DebugEnterDecision(42, false);
				int LA42_0 = input.LA(1);

				if ((LA42_0==37))
				{
					int LA42_1 = input.LA(2);

					if ((LA42_1==IDENTIFIER||LA42_1==65||(LA42_1>=68 && LA42_1<=77)||LA42_1==79||(LA42_1>=82 && LA42_1<=83)||LA42_1==87||(LA42_1>=89 && LA42_1<=91)||(LA42_1>=95 && LA42_1<=99)||(LA42_1>=101 && LA42_1<=102)||(LA42_1>=104 && LA42_1<=105)||(LA42_1>=108 && LA42_1<=112)))
					{
						alt42 = 1;
					}


				}


				} finally { DebugExitDecision(42); }
				switch ( alt42 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:253:27: ',' parameter_declaration
					{
					DebugLocation(253, 27);
					char_literal116=(IToken)Match(input,37,Follow._37_in_parameter_list898); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal116_tree = (object)adaptor.Create(char_literal116, retval);
					adaptor.AddChild(root_0, char_literal116_tree);
					}
					DebugLocation(253, 31);
					PushFollow(Follow._parameter_declaration_in_parameter_list900);
					parameter_declaration117=parameter_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_declaration117.Tree, parameter_declaration117, retval);

					}
					break;

				default:
					goto loop42;
				}
			}

			loop42:
				;

			} finally { DebugExitSubRule(42); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_list", 27);
			LeaveRule("parameter_list", 27);
			LeaveRule_parameter_list();
			if (state.backtracking > 0) { Memoize(input, 27, parameter_list_StartIndex); }

		}
		DebugLocation(254, 1);
		} finally { DebugExitRule(GrammarFileName, "parameter_list"); }
		return retval;

	}
	// $ANTLR end "parameter_list"

	partial void EnterRule_parameter_declaration();
	partial void LeaveRule_parameter_declaration();

	// $ANTLR start "parameter_declaration"
	// C.g:256:1: parameter_declaration : declaration_specifiers ( declarator | abstract_declarator )* ;
	[GrammarRule("parameter_declaration")]
	public XAstParserRuleReturnScope parameter_declaration()
	{
		EnterRule_parameter_declaration();
		EnterRule("parameter_declaration", 28);
		var retval = new XAstParserRuleReturnScope("parameter_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope declaration_specifiers118 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope declarator119 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator120 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "parameter_declaration");
		DebugLocation(256, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// C.g:257:2: ( declaration_specifiers ( declarator | abstract_declarator )* )
			DebugEnterAlt(1);
			// C.g:257:4: declaration_specifiers ( declarator | abstract_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(257, 4);
			PushFollow(Follow._declaration_specifiers_in_parameter_declaration913);
			declaration_specifiers118=declaration_specifiers();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_specifiers118.Tree, declaration_specifiers118, retval);
			DebugLocation(257, 27);
			// C.g:257:27: ( declarator | abstract_declarator )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=3;
				try { DebugEnterDecision(43, false);
				switch (input.LA(1))
				{
				case 32:
					{
					int LA43_4 = input.LA(2);

					if ((EvaluatePredicate(synpred78_C_fragment)))
					{
						alt43 = 1;
					}
					else if ((EvaluatePredicate(synpred79_C_fragment)))
					{
						alt43 = 2;
					}


					}
					break;
				case IDENTIFIER:
					{
					alt43 = 1;
					}
					break;
				case 30:
					{
					switch (input.LA(2))
					{
					case 65:
						{
						int LA43_17 = input.LA(3);

						if ((EvaluatePredicate(synpred78_C_fragment)))
						{
							alt43 = 1;
						}
						else if ((EvaluatePredicate(synpred79_C_fragment)))
						{
							alt43 = 2;
						}


						}
						break;
					case 32:
						{
						int LA43_18 = input.LA(3);

						if ((EvaluatePredicate(synpred78_C_fragment)))
						{
							alt43 = 1;
						}
						else if ((EvaluatePredicate(synpred79_C_fragment)))
						{
							alt43 = 2;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA43_19 = input.LA(3);

						if ((EvaluatePredicate(synpred78_C_fragment)))
						{
							alt43 = 1;
						}
						else if ((EvaluatePredicate(synpred79_C_fragment)))
						{
							alt43 = 2;
						}


						}
						break;
					case 30:
						{
						int LA43_20 = input.LA(3);

						if ((EvaluatePredicate(synpred78_C_fragment)))
						{
							alt43 = 1;
						}
						else if ((EvaluatePredicate(synpred79_C_fragment)))
						{
							alt43 = 2;
						}


						}
						break;
					case 31:
					case 59:
					case 68:
					case 69:
					case 70:
					case 71:
					case 72:
					case 73:
					case 74:
					case 75:
					case 76:
					case 77:
					case 79:
					case 82:
					case 83:
					case 87:
					case 89:
					case 90:
					case 91:
					case 95:
					case 96:
					case 97:
					case 98:
					case 99:
					case 101:
					case 102:
					case 104:
					case 105:
					case 108:
					case 109:
					case 110:
					case 111:
					case 112:
						{
						alt43 = 2;
						}
						break;
					}

					}
					break;
				case 59:
					{
					alt43 = 2;
					}
					break;
				}

				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:257:28: declarator
					{
					DebugLocation(257, 28);
					PushFollow(Follow._declarator_in_parameter_declaration916);
					declarator119=declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declarator119.Tree, declarator119, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:257:39: abstract_declarator
					{
					DebugLocation(257, 39);
					PushFollow(Follow._abstract_declarator_in_parameter_declaration918);
					abstract_declarator120=abstract_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator120.Tree, abstract_declarator120, retval);

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_declaration", 28);
			LeaveRule("parameter_declaration", 28);
			LeaveRule_parameter_declaration();
			if (state.backtracking > 0) { Memoize(input, 28, parameter_declaration_StartIndex); }

		}
		DebugLocation(258, 1);
		} finally { DebugExitRule(GrammarFileName, "parameter_declaration"); }
		return retval;

	}
	// $ANTLR end "parameter_declaration"

	partial void EnterRule_identifier_list();
	partial void LeaveRule_identifier_list();

	// $ANTLR start "identifier_list"
	// C.g:260:1: identifier_list : IDENTIFIER ( ',' IDENTIFIER )* ;
	[GrammarRule("identifier_list")]
	public XAstParserRuleReturnScope identifier_list()
	{
		EnterRule_identifier_list();
		EnterRule("identifier_list", 29);
		var retval = new XAstParserRuleReturnScope("identifier_list");
		
		retval.Start = (IToken)input.LT(1);
		int identifier_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER121 = default(IToken);
		IToken char_literal122 = default(IToken);
		IToken IDENTIFIER123 = default(IToken);

		object IDENTIFIER121_tree = default(object);
		object char_literal122_tree = default(object);
		object IDENTIFIER123_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "identifier_list");
		DebugLocation(260, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// C.g:261:2: ( IDENTIFIER ( ',' IDENTIFIER )* )
			DebugEnterAlt(1);
			// C.g:261:4: IDENTIFIER ( ',' IDENTIFIER )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(261, 4);
			IDENTIFIER121=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifier_list931), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER121_tree = (object)adaptor.Create(IDENTIFIER121, retval);
			adaptor.AddChild(root_0, IDENTIFIER121_tree);
			}
			DebugLocation(261, 15);
			// C.g:261:15: ( ',' IDENTIFIER )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==37))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:261:16: ',' IDENTIFIER
					{
					DebugLocation(261, 16);
					char_literal122=(IToken)Match(input,37,Follow._37_in_identifier_list934); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal122_tree = (object)adaptor.Create(char_literal122, retval);
					adaptor.AddChild(root_0, char_literal122_tree);
					}
					DebugLocation(261, 20);
					IDENTIFIER123=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifier_list936), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER123_tree = (object)adaptor.Create(IDENTIFIER123, retval);
					adaptor.AddChild(root_0, IDENTIFIER123_tree);
					}

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("identifier_list", 29);
			LeaveRule("identifier_list", 29);
			LeaveRule_identifier_list();
			if (state.backtracking > 0) { Memoize(input, 29, identifier_list_StartIndex); }

		}
		DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "identifier_list"); }
		return retval;

	}
	// $ANTLR end "identifier_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// C.g:264:1: type_name : specifier_qualifier_list ( abstract_declarator )? ;
	[GrammarRule("type_name")]
	public XAstParserRuleReturnScope type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 30);
		var retval = new XAstParserRuleReturnScope("type_name");
		
		retval.Start = (IToken)input.LT(1);
		int type_name_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope specifier_qualifier_list124 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator125 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(264, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// C.g:265:2: ( specifier_qualifier_list ( abstract_declarator )? )
			DebugEnterAlt(1);
			// C.g:265:4: specifier_qualifier_list ( abstract_declarator )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(265, 4);
			PushFollow(Follow._specifier_qualifier_list_in_type_name949);
			specifier_qualifier_list124=specifier_qualifier_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, specifier_qualifier_list124.Tree, specifier_qualifier_list124, retval);
			DebugLocation(265, 29);
			// C.g:265:29: ( abstract_declarator )?
			int alt45=2;
			try { DebugEnterSubRule(45);
			try { DebugEnterDecision(45, false);
			int LA45_0 = input.LA(1);

			if ((LA45_0==30||LA45_0==32||LA45_0==59))
			{
				alt45 = 1;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:265:29: abstract_declarator
				{
				DebugLocation(265, 29);
				PushFollow(Follow._abstract_declarator_in_type_name951);
				abstract_declarator125=abstract_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator125.Tree, abstract_declarator125, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(45); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 30);
			LeaveRule("type_name", 30);
			LeaveRule_type_name();
			if (state.backtracking > 0) { Memoize(input, 30, type_name_StartIndex); }

		}
		DebugLocation(266, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_abstract_declarator();
	partial void LeaveRule_abstract_declarator();

	// $ANTLR start "abstract_declarator"
	// C.g:268:1: abstract_declarator : ( pointer | ( pointer )? direct_abstract_declarator ( gcc_asm_expression )? ( gcc_attribute_list )? );
	[GrammarRule("abstract_declarator")]
	public XAstParserRuleReturnScope abstract_declarator()
	{
		EnterRule_abstract_declarator();
		EnterRule("abstract_declarator", 31);
		var retval = new XAstParserRuleReturnScope("abstract_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int abstract_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope pointer126 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope pointer127 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope direct_abstract_declarator128 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_asm_expression129 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute_list130 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "abstract_declarator");
		DebugLocation(268, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// C.g:269:2: ( pointer | ( pointer )? direct_abstract_declarator ( gcc_asm_expression )? ( gcc_attribute_list )? )
			int alt49=2;
			try { DebugEnterDecision(49, false);
			int LA49_0 = input.LA(1);

			if ((LA49_0==32))
			{
				int LA49_1 = input.LA(2);

				if ((EvaluatePredicate(synpred82_C_fragment)))
				{
					alt49 = 1;
				}
				else if ((true))
				{
					alt49 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 49, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA49_0==30||LA49_0==59))
			{
				alt49 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 49, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:269:4: pointer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(269, 4);
				PushFollow(Follow._pointer_in_abstract_declarator963);
				pointer126=pointer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pointer126.Tree, pointer126, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:270:4: ( pointer )? direct_abstract_declarator ( gcc_asm_expression )? ( gcc_attribute_list )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(270, 4);
				// C.g:270:4: ( pointer )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==32))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:270:4: pointer
					{
					DebugLocation(270, 4);
					PushFollow(Follow._pointer_in_abstract_declarator968);
					pointer127=pointer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, pointer127.Tree, pointer127, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(46); }

				DebugLocation(270, 13);
				PushFollow(Follow._direct_abstract_declarator_in_abstract_declarator971);
				direct_abstract_declarator128=direct_abstract_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, direct_abstract_declarator128.Tree, direct_abstract_declarator128, retval);
				DebugLocation(270, 40);
				// C.g:270:40: ( gcc_asm_expression )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==64||LA47_0==78))
				{
					alt47 = 1;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:270:40: gcc_asm_expression
					{
					DebugLocation(270, 40);
					PushFollow(Follow._gcc_asm_expression_in_abstract_declarator973);
					gcc_asm_expression129=gcc_asm_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_asm_expression129.Tree, gcc_asm_expression129, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(47); }

				DebugLocation(270, 60);
				// C.g:270:60: ( gcc_attribute_list )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if ((LA48_0==65))
				{
					alt48 = 1;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:270:60: gcc_attribute_list
					{
					DebugLocation(270, 60);
					PushFollow(Follow._gcc_attribute_list_in_abstract_declarator976);
					gcc_attribute_list130=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list130.Tree, gcc_attribute_list130, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(48); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("abstract_declarator", 31);
			LeaveRule("abstract_declarator", 31);
			LeaveRule_abstract_declarator();
			if (state.backtracking > 0) { Memoize(input, 31, abstract_declarator_StartIndex); }

		}
		DebugLocation(271, 1);
		} finally { DebugExitRule(GrammarFileName, "abstract_declarator"); }
		return retval;

	}
	// $ANTLR end "abstract_declarator"

	partial void EnterRule_direct_abstract_declarator();
	partial void LeaveRule_direct_abstract_declarator();

	// $ANTLR start "direct_abstract_declarator"
	// C.g:273:1: direct_abstract_declarator : ( '(' ( gcc_attribute_list )? abstract_declarator ')' | abstract_declarator_suffix ) ( abstract_declarator_suffix )* ;
	[GrammarRule("direct_abstract_declarator")]
	public XAstParserRuleReturnScope direct_abstract_declarator()
	{
		EnterRule_direct_abstract_declarator();
		EnterRule("direct_abstract_declarator", 32);
		var retval = new XAstParserRuleReturnScope("direct_abstract_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int direct_abstract_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal131 = default(IToken);
		IToken char_literal134 = default(IToken);
		XAstParserRuleReturnScope gcc_attribute_list132 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator133 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator_suffix135 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope abstract_declarator_suffix136 = default(XAstParserRuleReturnScope);

		object char_literal131_tree = default(object);
		object char_literal134_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "direct_abstract_declarator");
		DebugLocation(273, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// C.g:274:2: ( ( '(' ( gcc_attribute_list )? abstract_declarator ')' | abstract_declarator_suffix ) ( abstract_declarator_suffix )* )
			DebugEnterAlt(1);
			// C.g:274:4: ( '(' ( gcc_attribute_list )? abstract_declarator ')' | abstract_declarator_suffix ) ( abstract_declarator_suffix )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(274, 4);
			// C.g:274:4: ( '(' ( gcc_attribute_list )? abstract_declarator ')' | abstract_declarator_suffix )
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==30))
			{
				switch (input.LA(2))
				{
				case 65:
					{
					int LA51_3 = input.LA(3);

					if ((EvaluatePredicate(synpred87_C_fragment)))
					{
						alt51 = 1;
					}
					else if ((true))
					{
						alt51 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 51, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 30:
				case 32:
				case 59:
					{
					alt51 = 1;
					}
					break;
				case IDENTIFIER:
				case 31:
				case 68:
				case 69:
				case 70:
				case 71:
				case 72:
				case 73:
				case 74:
				case 75:
				case 76:
				case 77:
				case 79:
				case 82:
				case 83:
				case 87:
				case 89:
				case 90:
				case 91:
				case 95:
				case 96:
				case 97:
				case 98:
				case 99:
				case 101:
				case 102:
				case 104:
				case 105:
				case 108:
				case 109:
				case 110:
				case 111:
				case 112:
					{
					alt51 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 51, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA51_0==59))
			{
				alt51 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:274:6: '(' ( gcc_attribute_list )? abstract_declarator ')'
				{
				DebugLocation(274, 6);
				char_literal131=(IToken)Match(input,30,Follow._30_in_direct_abstract_declarator990); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal131_tree = (object)adaptor.Create(char_literal131, retval);
				adaptor.AddChild(root_0, char_literal131_tree);
				}
				DebugLocation(274, 10);
				// C.g:274:10: ( gcc_attribute_list )?
				int alt50=2;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==65))
				{
					alt50 = 1;
				}
				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:274:10: gcc_attribute_list
					{
					DebugLocation(274, 10);
					PushFollow(Follow._gcc_attribute_list_in_direct_abstract_declarator992);
					gcc_attribute_list132=gcc_attribute_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_list132.Tree, gcc_attribute_list132, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(50); }

				DebugLocation(274, 30);
				PushFollow(Follow._abstract_declarator_in_direct_abstract_declarator995);
				abstract_declarator133=abstract_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator133.Tree, abstract_declarator133, retval);
				DebugLocation(274, 50);
				char_literal134=(IToken)Match(input,31,Follow._31_in_direct_abstract_declarator997); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal134_tree = (object)adaptor.Create(char_literal134, retval);
				adaptor.AddChild(root_0, char_literal134_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:274:56: abstract_declarator_suffix
				{
				DebugLocation(274, 56);
				PushFollow(Follow._abstract_declarator_suffix_in_direct_abstract_declarator1001);
				abstract_declarator_suffix135=abstract_declarator_suffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator_suffix135.Tree, abstract_declarator_suffix135, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(51); }

			DebugLocation(274, 85);
			// C.g:274:85: ( abstract_declarator_suffix )*
			try { DebugEnterSubRule(52);
			while (true)
			{
				int alt52=2;
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if ((LA52_0==30))
				{
					switch (input.LA(2))
					{
					case 65:
						{
						int LA52_10 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA52_12 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 79:
					case 90:
					case 98:
					case 104:
						{
						int LA52_15 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 111:
						{
						int LA52_16 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 82:
						{
						int LA52_17 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 101:
						{
						int LA52_18 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 96:
						{
						int LA52_19 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 97:
						{
						int LA52_20 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 91:
						{
						int LA52_21 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 87:
						{
						int LA52_22 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 102:
						{
						int LA52_23 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 110:
						{
						int LA52_24 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 105:
					case 109:
						{
						int LA52_25 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 89:
						{
						int LA52_26 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 108:
						{
						int LA52_27 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 69:
					case 70:
					case 74:
					case 75:
					case 76:
					case 77:
					case 83:
					case 99:
					case 112:
						{
						int LA52_28 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 68:
					case 72:
					case 73:
					case 95:
						{
						int LA52_29 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 71:
						{
						int LA52_30 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 31:
						{
						int LA52_31 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					}

				}
				else if ((LA52_0==59))
				{
					switch (input.LA(2))
					{
					case 69:
					case 70:
					case 74:
					case 75:
					case 76:
					case 77:
					case 83:
					case 99:
					case 112:
						{
						int LA52_32 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 65:
						{
						int LA52_33 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 30:
						{
						int LA52_34 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA52_35 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case HEX_LITERAL:
						{
						int LA52_36 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case OCTAL_LITERAL:
						{
						int LA52_37 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case DECIMAL_LITERAL:
						{
						int LA52_38 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case CHARACTER_LITERAL:
						{
						int LA52_39 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case STRING_LITERAL:
						{
						int LA52_40 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case FLOATING_POINT_LITERAL:
						{
						int LA52_41 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 67:
						{
						int LA52_42 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 66:
						{
						int LA52_43 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 35:
						{
						int LA52_44 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 39:
						{
						int LA52_45 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 32:
						{
						int LA52_46 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 103:
						{
						int LA52_47 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 63:
						{
						int LA52_48 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 71:
						{
						int LA52_49 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 60:
						{
						int LA52_50 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					case 23:
					case 28:
					case 34:
					case 38:
					case 119:
						{
						int LA52_51 = input.LA(3);

						if ((EvaluatePredicate(synpred88_C_fragment)))
						{
							alt52 = 1;
						}


						}
						break;
					}

				}


				} finally { DebugExitDecision(52); }
				switch ( alt52 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:274:85: abstract_declarator_suffix
					{
					DebugLocation(274, 85);
					PushFollow(Follow._abstract_declarator_suffix_in_direct_abstract_declarator1005);
					abstract_declarator_suffix136=abstract_declarator_suffix();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, abstract_declarator_suffix136.Tree, abstract_declarator_suffix136, retval);

					}
					break;

				default:
					goto loop52;
				}
			}

			loop52:
				;

			} finally { DebugExitSubRule(52); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("direct_abstract_declarator", 32);
			LeaveRule("direct_abstract_declarator", 32);
			LeaveRule_direct_abstract_declarator();
			if (state.backtracking > 0) { Memoize(input, 32, direct_abstract_declarator_StartIndex); }

		}
		DebugLocation(275, 1);
		} finally { DebugExitRule(GrammarFileName, "direct_abstract_declarator"); }
		return retval;

	}
	// $ANTLR end "direct_abstract_declarator"

	partial void EnterRule_abstract_declarator_suffix();
	partial void LeaveRule_abstract_declarator_suffix();

	// $ANTLR start "abstract_declarator_suffix"
	// C.g:277:1: abstract_declarator_suffix : ( '[' ( gcc_array_type_modifier )* ( constant_expression )? ']' | '[' ( gcc_array_type_modifier )* '*' ']' | '(' ( parameter_type_list )? ')' );
	[GrammarRule("abstract_declarator_suffix")]
	public XAstParserRuleReturnScope abstract_declarator_suffix()
	{
		EnterRule_abstract_declarator_suffix();
		EnterRule("abstract_declarator_suffix", 33);
		var retval = new XAstParserRuleReturnScope("abstract_declarator_suffix");
		
		retval.Start = (IToken)input.LT(1);
		int abstract_declarator_suffix_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal137 = default(IToken);
		IToken char_literal140 = default(IToken);
		IToken char_literal141 = default(IToken);
		IToken char_literal143 = default(IToken);
		IToken char_literal144 = default(IToken);
		IToken char_literal145 = default(IToken);
		IToken char_literal147 = default(IToken);
		XAstParserRuleReturnScope gcc_array_type_modifier138 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression139 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_array_type_modifier142 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope parameter_type_list146 = default(XAstParserRuleReturnScope);

		object char_literal137_tree = default(object);
		object char_literal140_tree = default(object);
		object char_literal141_tree = default(object);
		object char_literal143_tree = default(object);
		object char_literal144_tree = default(object);
		object char_literal145_tree = default(object);
		object char_literal147_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "abstract_declarator_suffix");
		DebugLocation(277, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// C.g:278:2: ( '[' ( gcc_array_type_modifier )* ( constant_expression )? ']' | '[' ( gcc_array_type_modifier )* '*' ']' | '(' ( parameter_type_list )? ')' )
			int alt57=3;
			try { DebugEnterDecision(57, false);
			int LA57_0 = input.LA(1);

			if ((LA57_0==59))
			{
				switch (input.LA(2))
				{
				case 69:
				case 70:
				case 74:
				case 75:
				case 76:
				case 77:
				case 83:
				case 99:
				case 112:
					{
					int LA57_3 = input.LA(3);

					if ((EvaluatePredicate(synpred91_C_fragment)))
					{
						alt57 = 1;
					}
					else if ((EvaluatePredicate(synpred93_C_fragment)))
					{
						alt57 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 57, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 65:
					{
					int LA57_4 = input.LA(3);

					if ((EvaluatePredicate(synpred91_C_fragment)))
					{
						alt57 = 1;
					}
					else if ((EvaluatePredicate(synpred93_C_fragment)))
					{
						alt57 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 57, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case CHARACTER_LITERAL:
				case DECIMAL_LITERAL:
				case FLOATING_POINT_LITERAL:
				case HEX_LITERAL:
				case IDENTIFIER:
				case OCTAL_LITERAL:
				case STRING_LITERAL:
				case 23:
				case 28:
				case 30:
				case 34:
				case 35:
				case 38:
				case 39:
				case 60:
				case 63:
				case 66:
				case 67:
				case 71:
				case 103:
				case 119:
					{
					alt57 = 1;
					}
					break;
				case 32:
					{
					int LA57_17 = input.LA(3);

					if ((EvaluatePredicate(synpred91_C_fragment)))
					{
						alt57 = 1;
					}
					else if ((EvaluatePredicate(synpred93_C_fragment)))
					{
						alt57 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 57, 17, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 57, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA57_0==30))
			{
				alt57 = 3;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:278:4: '[' ( gcc_array_type_modifier )* ( constant_expression )? ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(278, 4);
				char_literal137=(IToken)Match(input,59,Follow._59_in_abstract_declarator_suffix1017); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal137_tree = (object)adaptor.Create(char_literal137, retval);
				adaptor.AddChild(root_0, char_literal137_tree);
				}
				DebugLocation(278, 8);
				// C.g:278:8: ( gcc_array_type_modifier )*
				try { DebugEnterSubRule(53);
				while (true)
				{
					int alt53=2;
					try { DebugEnterDecision(53, false);
					int LA53_0 = input.LA(1);

					if ((LA53_0==65||(LA53_0>=69 && LA53_0<=70)||(LA53_0>=74 && LA53_0<=77)||LA53_0==83||LA53_0==99||LA53_0==112))
					{
						alt53 = 1;
					}


					} finally { DebugExitDecision(53); }
					switch ( alt53 )
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:278:8: gcc_array_type_modifier
						{
						DebugLocation(278, 8);
						PushFollow(Follow._gcc_array_type_modifier_in_abstract_declarator_suffix1019);
						gcc_array_type_modifier138=gcc_array_type_modifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_array_type_modifier138.Tree, gcc_array_type_modifier138, retval);

						}
						break;

					default:
						goto loop53;
					}
				}

				loop53:
					;

				} finally { DebugExitSubRule(53); }

				DebugLocation(278, 33);
				// C.g:278:33: ( constant_expression )?
				int alt54=2;
				try { DebugEnterSubRule(54);
				try { DebugEnterDecision(54, false);
				int LA54_0 = input.LA(1);

				if ((LA54_0==CHARACTER_LITERAL||LA54_0==DECIMAL_LITERAL||LA54_0==FLOATING_POINT_LITERAL||LA54_0==HEX_LITERAL||LA54_0==IDENTIFIER||LA54_0==OCTAL_LITERAL||LA54_0==STRING_LITERAL||LA54_0==23||LA54_0==28||LA54_0==30||LA54_0==32||(LA54_0>=34 && LA54_0<=35)||(LA54_0>=38 && LA54_0<=39)||LA54_0==63||(LA54_0>=66 && LA54_0<=67)||LA54_0==71||LA54_0==103||LA54_0==119))
				{
					alt54 = 1;
				}
				} finally { DebugExitDecision(54); }
				switch (alt54)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:278:33: constant_expression
					{
					DebugLocation(278, 33);
					PushFollow(Follow._constant_expression_in_abstract_declarator_suffix1022);
					constant_expression139=constant_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression139.Tree, constant_expression139, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(54); }

				DebugLocation(278, 54);
				char_literal140=(IToken)Match(input,60,Follow._60_in_abstract_declarator_suffix1025); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal140_tree = (object)adaptor.Create(char_literal140, retval);
				adaptor.AddChild(root_0, char_literal140_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:279:4: '[' ( gcc_array_type_modifier )* '*' ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(279, 4);
				char_literal141=(IToken)Match(input,59,Follow._59_in_abstract_declarator_suffix1030); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal141_tree = (object)adaptor.Create(char_literal141, retval);
				adaptor.AddChild(root_0, char_literal141_tree);
				}
				DebugLocation(279, 8);
				// C.g:279:8: ( gcc_array_type_modifier )*
				try { DebugEnterSubRule(55);
				while (true)
				{
					int alt55=2;
					try { DebugEnterDecision(55, false);
					int LA55_0 = input.LA(1);

					if ((LA55_0==65||(LA55_0>=69 && LA55_0<=70)||(LA55_0>=74 && LA55_0<=77)||LA55_0==83||LA55_0==99||LA55_0==112))
					{
						alt55 = 1;
					}


					} finally { DebugExitDecision(55); }
					switch ( alt55 )
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:279:8: gcc_array_type_modifier
						{
						DebugLocation(279, 8);
						PushFollow(Follow._gcc_array_type_modifier_in_abstract_declarator_suffix1032);
						gcc_array_type_modifier142=gcc_array_type_modifier();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_array_type_modifier142.Tree, gcc_array_type_modifier142, retval);

						}
						break;

					default:
						goto loop55;
					}
				}

				loop55:
					;

				} finally { DebugExitSubRule(55); }

				DebugLocation(279, 33);
				char_literal143=(IToken)Match(input,32,Follow._32_in_abstract_declarator_suffix1035); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal143_tree = (object)adaptor.Create(char_literal143, retval);
				adaptor.AddChild(root_0, char_literal143_tree);
				}
				DebugLocation(279, 37);
				char_literal144=(IToken)Match(input,60,Follow._60_in_abstract_declarator_suffix1037); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal144_tree = (object)adaptor.Create(char_literal144, retval);
				adaptor.AddChild(root_0, char_literal144_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:280:4: '(' ( parameter_type_list )? ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(280, 4);
				char_literal145=(IToken)Match(input,30,Follow._30_in_abstract_declarator_suffix1042); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal145_tree = (object)adaptor.Create(char_literal145, retval);
				adaptor.AddChild(root_0, char_literal145_tree);
				}
				DebugLocation(280, 8);
				// C.g:280:8: ( parameter_type_list )?
				int alt56=2;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==IDENTIFIER||LA56_0==65||(LA56_0>=68 && LA56_0<=77)||LA56_0==79||(LA56_0>=82 && LA56_0<=83)||LA56_0==87||(LA56_0>=89 && LA56_0<=91)||(LA56_0>=95 && LA56_0<=99)||(LA56_0>=101 && LA56_0<=102)||(LA56_0>=104 && LA56_0<=105)||(LA56_0>=108 && LA56_0<=112)))
				{
					alt56 = 1;
				}
				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:280:8: parameter_type_list
					{
					DebugLocation(280, 8);
					PushFollow(Follow._parameter_type_list_in_abstract_declarator_suffix1044);
					parameter_type_list146=parameter_type_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_type_list146.Tree, parameter_type_list146, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(56); }

				DebugLocation(280, 29);
				char_literal147=(IToken)Match(input,31,Follow._31_in_abstract_declarator_suffix1047); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal147_tree = (object)adaptor.Create(char_literal147, retval);
				adaptor.AddChild(root_0, char_literal147_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("abstract_declarator_suffix", 33);
			LeaveRule("abstract_declarator_suffix", 33);
			LeaveRule_abstract_declarator_suffix();
			if (state.backtracking > 0) { Memoize(input, 33, abstract_declarator_suffix_StartIndex); }

		}
		DebugLocation(281, 1);
		} finally { DebugExitRule(GrammarFileName, "abstract_declarator_suffix"); }
		return retval;

	}
	// $ANTLR end "abstract_declarator_suffix"

	partial void EnterRule_initializer();
	partial void LeaveRule_initializer();

	// $ANTLR start "initializer"
	// C.g:283:1: initializer : ( assignment_expression | '{' initializer_list ( ',' )? '}' );
	[GrammarRule("initializer")]
	public XAstParserRuleReturnScope initializer()
	{
		EnterRule_initializer();
		EnterRule("initializer", 34);
		var retval = new XAstParserRuleReturnScope("initializer");
		
		retval.Start = (IToken)input.LT(1);
		int initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal149 = default(IToken);
		IToken char_literal151 = default(IToken);
		IToken char_literal152 = default(IToken);
		XAstParserRuleReturnScope assignment_expression148 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope initializer_list150 = default(XAstParserRuleReturnScope);

		object char_literal149_tree = default(object);
		object char_literal151_tree = default(object);
		object char_literal152_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "initializer");
		DebugLocation(283, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// C.g:284:2: ( assignment_expression | '{' initializer_list ( ',' )? '}' )
			int alt59=2;
			try { DebugEnterDecision(59, false);
			int LA59_0 = input.LA(1);

			if ((LA59_0==CHARACTER_LITERAL||LA59_0==DECIMAL_LITERAL||LA59_0==FLOATING_POINT_LITERAL||LA59_0==HEX_LITERAL||LA59_0==IDENTIFIER||LA59_0==OCTAL_LITERAL||LA59_0==STRING_LITERAL||LA59_0==23||LA59_0==28||LA59_0==30||LA59_0==32||(LA59_0>=34 && LA59_0<=35)||(LA59_0>=38 && LA59_0<=39)||LA59_0==63||(LA59_0>=66 && LA59_0<=67)||LA59_0==71||LA59_0==103||LA59_0==119))
			{
				alt59 = 1;
			}
			else if ((LA59_0==114))
			{
				alt59 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:284:4: assignment_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(284, 4);
				PushFollow(Follow._assignment_expression_in_initializer1059);
				assignment_expression148=assignment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression148.Tree, assignment_expression148, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:285:4: '{' initializer_list ( ',' )? '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(285, 4);
				char_literal149=(IToken)Match(input,114,Follow._114_in_initializer1064); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal149_tree = (object)adaptor.Create(char_literal149, retval);
				adaptor.AddChild(root_0, char_literal149_tree);
				}
				DebugLocation(285, 8);
				PushFollow(Follow._initializer_list_in_initializer1066);
				initializer_list150=initializer_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, initializer_list150.Tree, initializer_list150, retval);
				DebugLocation(285, 25);
				// C.g:285:25: ( ',' )?
				int alt58=2;
				try { DebugEnterSubRule(58);
				try { DebugEnterDecision(58, false);
				int LA58_0 = input.LA(1);

				if ((LA58_0==37))
				{
					alt58 = 1;
				}
				} finally { DebugExitDecision(58); }
				switch (alt58)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:285:25: ','
					{
					DebugLocation(285, 25);
					char_literal151=(IToken)Match(input,37,Follow._37_in_initializer1068); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal151_tree = (object)adaptor.Create(char_literal151, retval);
					adaptor.AddChild(root_0, char_literal151_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(58); }

				DebugLocation(285, 30);
				char_literal152=(IToken)Match(input,118,Follow._118_in_initializer1071); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal152_tree = (object)adaptor.Create(char_literal152, retval);
				adaptor.AddChild(root_0, char_literal152_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("initializer", 34);
			LeaveRule("initializer", 34);
			LeaveRule_initializer();
			if (state.backtracking > 0) { Memoize(input, 34, initializer_StartIndex); }

		}
		DebugLocation(286, 1);
		} finally { DebugExitRule(GrammarFileName, "initializer"); }
		return retval;

	}
	// $ANTLR end "initializer"

	partial void EnterRule_initializer_list();
	partial void LeaveRule_initializer_list();

	// $ANTLR start "initializer_list"
	// C.g:288:1: initializer_list : ( designation )? initializer ( ',' ( designation )? initializer )* ;
	[GrammarRule("initializer_list")]
	public XAstParserRuleReturnScope initializer_list()
	{
		EnterRule_initializer_list();
		EnterRule("initializer_list", 35);
		var retval = new XAstParserRuleReturnScope("initializer_list");
		
		retval.Start = (IToken)input.LT(1);
		int initializer_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal155 = default(IToken);
		XAstParserRuleReturnScope designation153 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope initializer154 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope designation156 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope initializer157 = default(XAstParserRuleReturnScope);

		object char_literal155_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "initializer_list");
		DebugLocation(288, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// C.g:289:2: ( ( designation )? initializer ( ',' ( designation )? initializer )* )
			DebugEnterAlt(1);
			// C.g:289:4: ( designation )? initializer ( ',' ( designation )? initializer )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(289, 4);
			// C.g:289:4: ( designation )?
			int alt60=2;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, false);
			int LA60_0 = input.LA(1);

			if ((LA60_0==42||LA60_0==59))
			{
				alt60 = 1;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:289:4: designation
				{
				DebugLocation(289, 4);
				PushFollow(Follow._designation_in_initializer_list1082);
				designation153=designation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, designation153.Tree, designation153, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(60); }

			DebugLocation(290, 4);
			PushFollow(Follow._initializer_in_initializer_list1088);
			initializer154=initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, initializer154.Tree, initializer154, retval);
			DebugLocation(291, 4);
			// C.g:291:4: ( ',' ( designation )? initializer )*
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=2;
				try { DebugEnterDecision(62, false);
				int LA62_0 = input.LA(1);

				if ((LA62_0==37))
				{
					int LA62_1 = input.LA(2);

					if ((LA62_1==CHARACTER_LITERAL||LA62_1==DECIMAL_LITERAL||LA62_1==FLOATING_POINT_LITERAL||LA62_1==HEX_LITERAL||LA62_1==IDENTIFIER||LA62_1==OCTAL_LITERAL||LA62_1==STRING_LITERAL||LA62_1==23||LA62_1==28||LA62_1==30||LA62_1==32||(LA62_1>=34 && LA62_1<=35)||(LA62_1>=38 && LA62_1<=39)||LA62_1==42||LA62_1==59||LA62_1==63||(LA62_1>=66 && LA62_1<=67)||LA62_1==71||LA62_1==103||LA62_1==114||LA62_1==119))
					{
						alt62 = 1;
					}


				}


				} finally { DebugExitDecision(62); }
				switch ( alt62 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:291:5: ',' ( designation )? initializer
					{
					DebugLocation(291, 5);
					char_literal155=(IToken)Match(input,37,Follow._37_in_initializer_list1094); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal155_tree = (object)adaptor.Create(char_literal155, retval);
					adaptor.AddChild(root_0, char_literal155_tree);
					}
					DebugLocation(291, 9);
					// C.g:291:9: ( designation )?
					int alt61=2;
					try { DebugEnterSubRule(61);
					try { DebugEnterDecision(61, false);
					int LA61_0 = input.LA(1);

					if ((LA61_0==42||LA61_0==59))
					{
						alt61 = 1;
					}
					} finally { DebugExitDecision(61); }
					switch (alt61)
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:291:9: designation
						{
						DebugLocation(291, 9);
						PushFollow(Follow._designation_in_initializer_list1096);
						designation156=designation();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, designation156.Tree, designation156, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(61); }

					DebugLocation(291, 22);
					PushFollow(Follow._initializer_in_initializer_list1099);
					initializer157=initializer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, initializer157.Tree, initializer157, retval);

					}
					break;

				default:
					goto loop62;
				}
			}

			loop62:
				;

			} finally { DebugExitSubRule(62); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("initializer_list", 35);
			LeaveRule("initializer_list", 35);
			LeaveRule_initializer_list();
			if (state.backtracking > 0) { Memoize(input, 35, initializer_list_StartIndex); }

		}
		DebugLocation(292, 1);
		} finally { DebugExitRule(GrammarFileName, "initializer_list"); }
		return retval;

	}
	// $ANTLR end "initializer_list"

	partial void EnterRule_designation();
	partial void LeaveRule_designation();

	// $ANTLR start "designation"
	// C.g:294:1: designation : ( designator )+ '=' ;
	[GrammarRule("designation")]
	public XAstParserRuleReturnScope designation()
	{
		EnterRule_designation();
		EnterRule("designation", 36);
		var retval = new XAstParserRuleReturnScope("designation");
		
		retval.Start = (IToken)input.LT(1);
		int designation_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal159 = default(IToken);
		XAstParserRuleReturnScope designator158 = default(XAstParserRuleReturnScope);

		object char_literal159_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "designation");
		DebugLocation(294, 19);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// C.g:295:2: ( ( designator )+ '=' )
			DebugEnterAlt(1);
			// C.g:295:4: ( designator )+ '='
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(295, 4);
			// C.g:295:4: ( designator )+
			int cnt63=0;
			try { DebugEnterSubRule(63);
			while (true)
			{
				int alt63=2;
				try { DebugEnterDecision(63, false);
				int LA63_0 = input.LA(1);

				if ((LA63_0==42||LA63_0==59))
				{
					alt63 = 1;
				}


				} finally { DebugExitDecision(63); }
				switch (alt63)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:295:4: designator
					{
					DebugLocation(295, 4);
					PushFollow(Follow._designator_in_designation1112);
					designator158=designator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, designator158.Tree, designator158, retval);

					}
					break;

				default:
					if (cnt63 >= 1)
						goto loop63;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee63 = new EarlyExitException( 63, input );
					DebugRecognitionException(eee63);
					throw eee63;
				}
				cnt63++;
			}
			loop63:
				;

			} finally { DebugExitSubRule(63); }

			DebugLocation(295, 16);
			char_literal159=(IToken)Match(input,52,Follow._52_in_designation1115); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal159_tree = (object)adaptor.Create(char_literal159, retval);
			adaptor.AddChild(root_0, char_literal159_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("designation", 36);
			LeaveRule("designation", 36);
			LeaveRule_designation();
			if (state.backtracking > 0) { Memoize(input, 36, designation_StartIndex); }

		}
		DebugLocation(295, 19);
		} finally { DebugExitRule(GrammarFileName, "designation"); }
		return retval;

	}
	// $ANTLR end "designation"

	partial void EnterRule_designator();
	partial void LeaveRule_designator();

	// $ANTLR start "designator"
	// C.g:297:1: designator : ( '[' constant_expression ']' | '.' IDENTIFIER | '[' constant_expression '...' constant_expression ']' );
	[GrammarRule("designator")]
	public XAstParserRuleReturnScope designator()
	{
		EnterRule_designator();
		EnterRule("designator", 37);
		var retval = new XAstParserRuleReturnScope("designator");
		
		retval.Start = (IToken)input.LT(1);
		int designator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal160 = default(IToken);
		IToken char_literal162 = default(IToken);
		IToken char_literal163 = default(IToken);
		IToken IDENTIFIER164 = default(IToken);
		IToken char_literal165 = default(IToken);
		IToken string_literal167 = default(IToken);
		IToken char_literal169 = default(IToken);
		XAstParserRuleReturnScope constant_expression161 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression166 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression168 = default(XAstParserRuleReturnScope);

		object char_literal160_tree = default(object);
		object char_literal162_tree = default(object);
		object char_literal163_tree = default(object);
		object IDENTIFIER164_tree = default(object);
		object char_literal165_tree = default(object);
		object string_literal167_tree = default(object);
		object char_literal169_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "designator");
		DebugLocation(297, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// C.g:298:2: ( '[' constant_expression ']' | '.' IDENTIFIER | '[' constant_expression '...' constant_expression ']' )
			int alt64=3;
			try { DebugEnterDecision(64, false);
			int LA64_0 = input.LA(1);

			if ((LA64_0==59))
			{
				switch (input.LA(2))
				{
				case 30:
					{
					int LA64_3 = input.LA(3);

					if ((EvaluatePredicate(synpred101_C_fragment)))
					{
						alt64 = 1;
					}
					else if ((true))
					{
						alt64 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 64, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENTIFIER:
					{
					int LA64_4 = input.LA(3);

					if ((EvaluatePredicate(synpred101_C_fragment)))
					{
						alt64 = 1;
					}
					else if ((true))
					{
						alt64 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 64, 4, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case HEX_LITERAL:
					{
					int LA64_5 = input.LA(3);

					if ((EvaluatePredicate(synpred101_C_fragment)))
					{
						alt64 = 1;
					}
					else if ((true))
					{
						alt64 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 64, 5, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case OCTAL_LITERAL:
					{
					int LA64_6 = input.LA(3);

					if ((EvaluatePredicate(synpred101_C_fragment)))
					{
						alt64 = 1;
					}
					else if ((true))
					{
						alt64 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 64, 6, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case DECIMAL_LITERAL:
					{
					int LA64_7 = input.LA(3);

					if ((EvaluatePredicate(synpred101_C_fragment)))
					{
						alt64 = 1;
					}
					else if ((true))
					{
						alt64 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 64, 7, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case CHARACTER_LITERAL:
					{
					int LA64_8 = input.LA(3);

					if ((EvaluatePredicate(synpred101_C_fragment)))
					{
						alt64 = 1;
					}
					else if ((true))
					{
						alt64 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 64, 8, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case STRING_LITERAL:
					{
					int LA64_9 = input.LA(3);

					if ((EvaluatePredicate(synpred101_C_fragment)))
					{
						alt64 = 1;
					}
					else if ((true))
					{
						alt64 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 64, 9, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case FLOATING_POINT_LITERAL:
					{
					int LA64_10 = input.LA(3);

					if ((EvaluatePredicate(synpred101_C_fragment)))
					{
						alt64 = 1;
					}
					else if ((true))
					{
						alt64 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 64, 10, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 67:
					{
					int LA64_11 = input.LA(3);

					if ((EvaluatePredicate(synpred101_C_fragment)))
					{
						alt64 = 1;
					}
					else if ((true))
					{
						alt64 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 64, 11, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 66:
					{
					int LA64_12 = input.LA(3);

					if ((EvaluatePredicate(synpred101_C_fragment)))
					{
						alt64 = 1;
					}
					else if ((true))
					{
						alt64 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 64, 12, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 35:
					{
					int LA64_13 = input.LA(3);

					if ((EvaluatePredicate(synpred101_C_fragment)))
					{
						alt64 = 1;
					}
					else if ((true))
					{
						alt64 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 64, 13, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 39:
					{
					int LA64_14 = input.LA(3);

					if ((EvaluatePredicate(synpred101_C_fragment)))
					{
						alt64 = 1;
					}
					else if ((true))
					{
						alt64 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 64, 14, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 23:
				case 28:
				case 32:
				case 34:
				case 38:
				case 119:
					{
					int LA64_15 = input.LA(3);

					if ((EvaluatePredicate(synpred101_C_fragment)))
					{
						alt64 = 1;
					}
					else if ((true))
					{
						alt64 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 64, 15, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 103:
					{
					int LA64_16 = input.LA(3);

					if ((EvaluatePredicate(synpred101_C_fragment)))
					{
						alt64 = 1;
					}
					else if ((true))
					{
						alt64 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 64, 16, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 63:
					{
					int LA64_17 = input.LA(3);

					if ((EvaluatePredicate(synpred101_C_fragment)))
					{
						alt64 = 1;
					}
					else if ((true))
					{
						alt64 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 64, 17, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 71:
					{
					int LA64_18 = input.LA(3);

					if ((EvaluatePredicate(synpred101_C_fragment)))
					{
						alt64 = 1;
					}
					else if ((true))
					{
						alt64 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 64, 18, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 64, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA64_0==42))
			{
				alt64 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 64, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:298:4: '[' constant_expression ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(298, 4);
				char_literal160=(IToken)Match(input,59,Follow._59_in_designator1125); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal160_tree = (object)adaptor.Create(char_literal160, retval);
				adaptor.AddChild(root_0, char_literal160_tree);
				}
				DebugLocation(298, 8);
				PushFollow(Follow._constant_expression_in_designator1127);
				constant_expression161=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression161.Tree, constant_expression161, retval);
				DebugLocation(298, 28);
				char_literal162=(IToken)Match(input,60,Follow._60_in_designator1129); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal162_tree = (object)adaptor.Create(char_literal162, retval);
				adaptor.AddChild(root_0, char_literal162_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:299:4: '.' IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(299, 4);
				char_literal163=(IToken)Match(input,42,Follow._42_in_designator1134); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal163_tree = (object)adaptor.Create(char_literal163, retval);
				adaptor.AddChild(root_0, char_literal163_tree);
				}
				DebugLocation(299, 8);
				IDENTIFIER164=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_designator1136), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER164_tree = (object)adaptor.Create(IDENTIFIER164, retval);
				adaptor.AddChild(root_0, IDENTIFIER164_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:301:4: '[' constant_expression '...' constant_expression ']'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(301, 4);
				char_literal165=(IToken)Match(input,59,Follow._59_in_designator1145); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal165_tree = (object)adaptor.Create(char_literal165, retval);
				adaptor.AddChild(root_0, char_literal165_tree);
				}
				DebugLocation(301, 8);
				PushFollow(Follow._constant_expression_in_designator1147);
				constant_expression166=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression166.Tree, constant_expression166, retval);
				DebugLocation(301, 28);
				string_literal167=(IToken)Match(input,43,Follow._43_in_designator1149); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal167_tree = (object)adaptor.Create(string_literal167, retval);
				adaptor.AddChild(root_0, string_literal167_tree);
				}
				DebugLocation(301, 34);
				PushFollow(Follow._constant_expression_in_designator1151);
				constant_expression168=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression168.Tree, constant_expression168, retval);
				DebugLocation(301, 54);
				char_literal169=(IToken)Match(input,60,Follow._60_in_designator1153); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal169_tree = (object)adaptor.Create(char_literal169, retval);
				adaptor.AddChild(root_0, char_literal169_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("designator", 37);
			LeaveRule("designator", 37);
			LeaveRule_designator();
			if (state.backtracking > 0) { Memoize(input, 37, designator_StartIndex); }

		}
		DebugLocation(302, 1);
		} finally { DebugExitRule(GrammarFileName, "designator"); }
		return retval;

	}
	// $ANTLR end "designator"

	partial void EnterRule_argument_expression_list();
	partial void LeaveRule_argument_expression_list();

	// $ANTLR start "argument_expression_list"
	// C.g:307:1: argument_expression_list : assignment_expression ( ',' assignment_expression )* ;
	[GrammarRule("argument_expression_list")]
	public XAstParserRuleReturnScope argument_expression_list()
	{
		EnterRule_argument_expression_list();
		EnterRule("argument_expression_list", 38);
		var retval = new XAstParserRuleReturnScope("argument_expression_list");
		
		retval.Start = (IToken)input.LT(1);
		int argument_expression_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal171 = default(IToken);
		XAstParserRuleReturnScope assignment_expression170 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression172 = default(XAstParserRuleReturnScope);

		object char_literal171_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "argument_expression_list");
		DebugLocation(307, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// C.g:308:2: ( assignment_expression ( ',' assignment_expression )* )
			DebugEnterAlt(1);
			// C.g:308:6: assignment_expression ( ',' assignment_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(308, 6);
			PushFollow(Follow._assignment_expression_in_argument_expression_list1169);
			assignment_expression170=assignment_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression170.Tree, assignment_expression170, retval);
			DebugLocation(308, 28);
			// C.g:308:28: ( ',' assignment_expression )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, false);
				int LA65_0 = input.LA(1);

				if ((LA65_0==37))
				{
					alt65 = 1;
				}


				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:308:29: ',' assignment_expression
					{
					DebugLocation(308, 29);
					char_literal171=(IToken)Match(input,37,Follow._37_in_argument_expression_list1172); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal171_tree = (object)adaptor.Create(char_literal171, retval);
					adaptor.AddChild(root_0, char_literal171_tree);
					}
					DebugLocation(308, 33);
					PushFollow(Follow._assignment_expression_in_argument_expression_list1174);
					assignment_expression172=assignment_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression172.Tree, assignment_expression172, retval);

					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("argument_expression_list", 38);
			LeaveRule("argument_expression_list", 38);
			LeaveRule_argument_expression_list();
			if (state.backtracking > 0) { Memoize(input, 38, argument_expression_list_StartIndex); }

		}
		DebugLocation(309, 1);
		} finally { DebugExitRule(GrammarFileName, "argument_expression_list"); }
		return retval;

	}
	// $ANTLR end "argument_expression_list"

	partial void EnterRule_additive_expression();
	partial void LeaveRule_additive_expression();

	// $ANTLR start "additive_expression"
	// C.g:311:1: additive_expression : ( multiplicative_expression ) ( '+' multiplicative_expression | '-' multiplicative_expression )* ;
	[GrammarRule("additive_expression")]
	public XAstParserRuleReturnScope additive_expression()
	{
		EnterRule_additive_expression();
		EnterRule("additive_expression", 39);
		var retval = new XAstParserRuleReturnScope("additive_expression");
		
		retval.Start = (IToken)input.LT(1);
		int additive_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal174 = default(IToken);
		IToken char_literal176 = default(IToken);
		XAstParserRuleReturnScope multiplicative_expression173 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope multiplicative_expression175 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope multiplicative_expression177 = default(XAstParserRuleReturnScope);

		object char_literal174_tree = default(object);
		object char_literal176_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "additive_expression");
		DebugLocation(311, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// C.g:312:2: ( ( multiplicative_expression ) ( '+' multiplicative_expression | '-' multiplicative_expression )* )
			DebugEnterAlt(1);
			// C.g:312:4: ( multiplicative_expression ) ( '+' multiplicative_expression | '-' multiplicative_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(312, 4);
			// C.g:312:4: ( multiplicative_expression )
			DebugEnterAlt(1);
			// C.g:312:5: multiplicative_expression
			{
			DebugLocation(312, 5);
			PushFollow(Follow._multiplicative_expression_in_additive_expression1188);
			multiplicative_expression173=multiplicative_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression173.Tree, multiplicative_expression173, retval);

			}

			DebugLocation(312, 32);
			// C.g:312:32: ( '+' multiplicative_expression | '-' multiplicative_expression )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=3;
				try { DebugEnterDecision(66, false);
				try
				{
					alt66 = dfa66.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:312:33: '+' multiplicative_expression
					{
					DebugLocation(312, 33);
					char_literal174=(IToken)Match(input,34,Follow._34_in_additive_expression1192); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal174_tree = (object)adaptor.Create(char_literal174, retval);
					adaptor.AddChild(root_0, char_literal174_tree);
					}
					DebugLocation(312, 37);
					PushFollow(Follow._multiplicative_expression_in_additive_expression1194);
					multiplicative_expression175=multiplicative_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression175.Tree, multiplicative_expression175, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:312:65: '-' multiplicative_expression
					{
					DebugLocation(312, 65);
					char_literal176=(IToken)Match(input,38,Follow._38_in_additive_expression1198); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal176_tree = (object)adaptor.Create(char_literal176, retval);
					adaptor.AddChild(root_0, char_literal176_tree);
					}
					DebugLocation(312, 69);
					PushFollow(Follow._multiplicative_expression_in_additive_expression1200);
					multiplicative_expression177=multiplicative_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression177.Tree, multiplicative_expression177, retval);

					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additive_expression", 39);
			LeaveRule("additive_expression", 39);
			LeaveRule_additive_expression();
			if (state.backtracking > 0) { Memoize(input, 39, additive_expression_StartIndex); }

		}
		DebugLocation(313, 1);
		} finally { DebugExitRule(GrammarFileName, "additive_expression"); }
		return retval;

	}
	// $ANTLR end "additive_expression"

	partial void EnterRule_multiplicative_expression();
	partial void LeaveRule_multiplicative_expression();

	// $ANTLR start "multiplicative_expression"
	// C.g:315:1: multiplicative_expression : ( cast_expression ) ( '*' cast_expression | '/' cast_expression | '%' cast_expression )* ;
	[GrammarRule("multiplicative_expression")]
	public XAstParserRuleReturnScope multiplicative_expression()
	{
		EnterRule_multiplicative_expression();
		EnterRule("multiplicative_expression", 40);
		var retval = new XAstParserRuleReturnScope("multiplicative_expression");
		
		retval.Start = (IToken)input.LT(1);
		int multiplicative_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal179 = default(IToken);
		IToken char_literal181 = default(IToken);
		IToken char_literal183 = default(IToken);
		XAstParserRuleReturnScope cast_expression178 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression180 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression182 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression184 = default(XAstParserRuleReturnScope);

		object char_literal179_tree = default(object);
		object char_literal181_tree = default(object);
		object char_literal183_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "multiplicative_expression");
		DebugLocation(315, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// C.g:316:2: ( ( cast_expression ) ( '*' cast_expression | '/' cast_expression | '%' cast_expression )* )
			DebugEnterAlt(1);
			// C.g:316:4: ( cast_expression ) ( '*' cast_expression | '/' cast_expression | '%' cast_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(316, 4);
			// C.g:316:4: ( cast_expression )
			DebugEnterAlt(1);
			// C.g:316:5: cast_expression
			{
			DebugLocation(316, 5);
			PushFollow(Follow._cast_expression_in_multiplicative_expression1214);
			cast_expression178=cast_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression178.Tree, cast_expression178, retval);

			}

			DebugLocation(316, 22);
			// C.g:316:22: ( '*' cast_expression | '/' cast_expression | '%' cast_expression )*
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=4;
				try { DebugEnterDecision(67, false);
				switch (input.LA(1))
				{
				case 32:
					{
					switch (input.LA(2))
					{
					case 30:
						{
						int LA67_40 = input.LA(3);

						if ((EvaluatePredicate(synpred106_C_fragment)))
						{
							alt67 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA67_41 = input.LA(3);

						if ((EvaluatePredicate(synpred106_C_fragment)))
						{
							alt67 = 1;
						}


						}
						break;
					case HEX_LITERAL:
						{
						int LA67_42 = input.LA(3);

						if ((EvaluatePredicate(synpred106_C_fragment)))
						{
							alt67 = 1;
						}


						}
						break;
					case OCTAL_LITERAL:
						{
						int LA67_43 = input.LA(3);

						if ((EvaluatePredicate(synpred106_C_fragment)))
						{
							alt67 = 1;
						}


						}
						break;
					case DECIMAL_LITERAL:
						{
						int LA67_44 = input.LA(3);

						if ((EvaluatePredicate(synpred106_C_fragment)))
						{
							alt67 = 1;
						}


						}
						break;
					case CHARACTER_LITERAL:
						{
						int LA67_45 = input.LA(3);

						if ((EvaluatePredicate(synpred106_C_fragment)))
						{
							alt67 = 1;
						}


						}
						break;
					case STRING_LITERAL:
						{
						int LA67_46 = input.LA(3);

						if ((EvaluatePredicate(synpred106_C_fragment)))
						{
							alt67 = 1;
						}


						}
						break;
					case FLOATING_POINT_LITERAL:
						{
						int LA67_47 = input.LA(3);

						if ((EvaluatePredicate(synpred106_C_fragment)))
						{
							alt67 = 1;
						}


						}
						break;
					case 67:
						{
						int LA67_48 = input.LA(3);

						if ((EvaluatePredicate(synpred106_C_fragment)))
						{
							alt67 = 1;
						}


						}
						break;
					case 66:
						{
						int LA67_49 = input.LA(3);

						if ((EvaluatePredicate(synpred106_C_fragment)))
						{
							alt67 = 1;
						}


						}
						break;
					case 35:
						{
						int LA67_50 = input.LA(3);

						if ((EvaluatePredicate(synpred106_C_fragment)))
						{
							alt67 = 1;
						}


						}
						break;
					case 39:
						{
						int LA67_51 = input.LA(3);

						if ((EvaluatePredicate(synpred106_C_fragment)))
						{
							alt67 = 1;
						}


						}
						break;
					case 23:
					case 28:
					case 32:
					case 34:
					case 38:
					case 119:
						{
						int LA67_52 = input.LA(3);

						if ((EvaluatePredicate(synpred106_C_fragment)))
						{
							alt67 = 1;
						}


						}
						break;
					case 103:
						{
						int LA67_53 = input.LA(3);

						if ((EvaluatePredicate(synpred106_C_fragment)))
						{
							alt67 = 1;
						}


						}
						break;
					case 63:
						{
						int LA67_54 = input.LA(3);

						if ((EvaluatePredicate(synpred106_C_fragment)))
						{
							alt67 = 1;
						}


						}
						break;
					case 71:
						{
						int LA67_55 = input.LA(3);

						if ((EvaluatePredicate(synpred106_C_fragment)))
						{
							alt67 = 1;
						}


						}
						break;
					}

					}
					break;
				case 44:
					{
					alt67 = 2;
					}
					break;
				case 25:
					{
					alt67 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(67); }
				switch ( alt67 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:316:23: '*' cast_expression
					{
					DebugLocation(316, 23);
					char_literal179=(IToken)Match(input,32,Follow._32_in_multiplicative_expression1218); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal179_tree = (object)adaptor.Create(char_literal179, retval);
					adaptor.AddChild(root_0, char_literal179_tree);
					}
					DebugLocation(316, 27);
					PushFollow(Follow._cast_expression_in_multiplicative_expression1220);
					cast_expression180=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression180.Tree, cast_expression180, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:316:45: '/' cast_expression
					{
					DebugLocation(316, 45);
					char_literal181=(IToken)Match(input,44,Follow._44_in_multiplicative_expression1224); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal181_tree = (object)adaptor.Create(char_literal181, retval);
					adaptor.AddChild(root_0, char_literal181_tree);
					}
					DebugLocation(316, 49);
					PushFollow(Follow._cast_expression_in_multiplicative_expression1226);
					cast_expression182=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression182.Tree, cast_expression182, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// C.g:316:67: '%' cast_expression
					{
					DebugLocation(316, 67);
					char_literal183=(IToken)Match(input,25,Follow._25_in_multiplicative_expression1230); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal183_tree = (object)adaptor.Create(char_literal183, retval);
					adaptor.AddChild(root_0, char_literal183_tree);
					}
					DebugLocation(316, 71);
					PushFollow(Follow._cast_expression_in_multiplicative_expression1232);
					cast_expression184=cast_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression184.Tree, cast_expression184, retval);

					}
					break;

				default:
					goto loop67;
				}
			}

			loop67:
				;

			} finally { DebugExitSubRule(67); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicative_expression", 40);
			LeaveRule("multiplicative_expression", 40);
			LeaveRule_multiplicative_expression();
			if (state.backtracking > 0) { Memoize(input, 40, multiplicative_expression_StartIndex); }

		}
		DebugLocation(317, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicative_expression"); }
		return retval;

	}
	// $ANTLR end "multiplicative_expression"

	partial void EnterRule_cast_expression();
	partial void LeaveRule_cast_expression();

	// $ANTLR start "cast_expression"
	// C.g:319:1: cast_expression : ( '(' type_name ')' cast_expression | unary_expression );
	[GrammarRule("cast_expression")]
	public XAstParserRuleReturnScope cast_expression()
	{
		EnterRule_cast_expression();
		EnterRule("cast_expression", 41);
		var retval = new XAstParserRuleReturnScope("cast_expression");
		
		retval.Start = (IToken)input.LT(1);
		int cast_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal185 = default(IToken);
		IToken char_literal187 = default(IToken);
		XAstParserRuleReturnScope type_name186 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression188 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression189 = default(XAstParserRuleReturnScope);

		object char_literal185_tree = default(object);
		object char_literal187_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "cast_expression");
		DebugLocation(319, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// C.g:320:2: ( '(' type_name ')' cast_expression | unary_expression )
			int alt68=2;
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==30))
			{
				switch (input.LA(2))
				{
				case 65:
				case 69:
				case 70:
				case 74:
				case 75:
				case 76:
				case 77:
				case 82:
				case 83:
				case 87:
				case 89:
				case 91:
				case 96:
				case 97:
				case 99:
				case 101:
				case 102:
				case 105:
				case 108:
				case 109:
				case 110:
				case 111:
				case 112:
					{
					alt68 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA68_29 = input.LA(3);

					if ((EvaluatePredicate(synpred109_C_fragment)))
					{
						alt68 = 1;
					}
					else if ((true))
					{
						alt68 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 68, 29, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 71:
					{
					int LA68_32 = input.LA(3);

					if ((EvaluatePredicate(synpred109_C_fragment)))
					{
						alt68 = 1;
					}
					else if ((true))
					{
						alt68 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 68, 32, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case CHARACTER_LITERAL:
				case DECIMAL_LITERAL:
				case FLOATING_POINT_LITERAL:
				case HEX_LITERAL:
				case OCTAL_LITERAL:
				case STRING_LITERAL:
				case 23:
				case 28:
				case 30:
				case 32:
				case 34:
				case 35:
				case 38:
				case 39:
				case 63:
				case 66:
				case 67:
				case 103:
				case 114:
				case 119:
					{
					alt68 = 2;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 68, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else if ((LA68_0==CHARACTER_LITERAL||LA68_0==DECIMAL_LITERAL||LA68_0==FLOATING_POINT_LITERAL||LA68_0==HEX_LITERAL||LA68_0==IDENTIFIER||LA68_0==OCTAL_LITERAL||LA68_0==STRING_LITERAL||LA68_0==23||LA68_0==28||LA68_0==32||(LA68_0>=34 && LA68_0<=35)||(LA68_0>=38 && LA68_0<=39)||LA68_0==63||(LA68_0>=66 && LA68_0<=67)||LA68_0==71||LA68_0==103||LA68_0==119))
			{
				alt68 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:320:4: '(' type_name ')' cast_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(320, 4);
				char_literal185=(IToken)Match(input,30,Follow._30_in_cast_expression1245); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal185_tree = (object)adaptor.Create(char_literal185, retval);
				adaptor.AddChild(root_0, char_literal185_tree);
				}
				DebugLocation(320, 8);
				PushFollow(Follow._type_name_in_cast_expression1247);
				type_name186=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_name186.Tree, type_name186, retval);
				DebugLocation(320, 18);
				char_literal187=(IToken)Match(input,31,Follow._31_in_cast_expression1249); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal187_tree = (object)adaptor.Create(char_literal187, retval);
				adaptor.AddChild(root_0, char_literal187_tree);
				}
				DebugLocation(320, 22);
				PushFollow(Follow._cast_expression_in_cast_expression1251);
				cast_expression188=cast_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression188.Tree, cast_expression188, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:321:4: unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(321, 4);
				PushFollow(Follow._unary_expression_in_cast_expression1256);
				unary_expression189=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression189.Tree, unary_expression189, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expression", 41);
			LeaveRule("cast_expression", 41);
			LeaveRule_cast_expression();
			if (state.backtracking > 0) { Memoize(input, 41, cast_expression_StartIndex); }

		}
		DebugLocation(322, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expression"); }
		return retval;

	}
	// $ANTLR end "cast_expression"

	partial void EnterRule_unary_expression();
	partial void LeaveRule_unary_expression();

	// $ANTLR start "unary_expression"
	// C.g:324:1: unary_expression : ( postfix_expression | '++' unary_expression | '--' unary_expression | unary_operator cast_expression | 'sizeof' unary_expression | 'sizeof' '(' type_name ')' | '__alignof__' unary_expression | '__alignof__' '(' type_name ')' | gcc_extension_specifier cast_expression );
	[GrammarRule("unary_expression")]
	public XAstParserRuleReturnScope unary_expression()
	{
		EnterRule_unary_expression();
		EnterRule("unary_expression", 42);
		var retval = new XAstParserRuleReturnScope("unary_expression");
		
		retval.Start = (IToken)input.LT(1);
		int unary_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal191 = default(IToken);
		IToken string_literal193 = default(IToken);
		IToken string_literal197 = default(IToken);
		IToken string_literal199 = default(IToken);
		IToken char_literal200 = default(IToken);
		IToken char_literal202 = default(IToken);
		IToken string_literal203 = default(IToken);
		IToken string_literal205 = default(IToken);
		IToken char_literal206 = default(IToken);
		IToken char_literal208 = default(IToken);
		XAstParserRuleReturnScope postfix_expression190 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression192 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression194 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_operator195 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression196 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression198 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name201 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression204 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name207 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_extension_specifier209 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope cast_expression210 = default(XAstParserRuleReturnScope);

		object string_literal191_tree = default(object);
		object string_literal193_tree = default(object);
		object string_literal197_tree = default(object);
		object string_literal199_tree = default(object);
		object char_literal200_tree = default(object);
		object char_literal202_tree = default(object);
		object string_literal203_tree = default(object);
		object string_literal205_tree = default(object);
		object char_literal206_tree = default(object);
		object char_literal208_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unary_expression");
		DebugLocation(324, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// C.g:325:2: ( postfix_expression | '++' unary_expression | '--' unary_expression | unary_operator cast_expression | 'sizeof' unary_expression | 'sizeof' '(' type_name ')' | '__alignof__' unary_expression | '__alignof__' '(' type_name ')' | gcc_extension_specifier cast_expression )
			int alt69=9;
			try { DebugEnterDecision(69, false);
			switch (input.LA(1))
			{
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENTIFIER:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
			case 30:
			case 66:
			case 67:
				{
				alt69 = 1;
				}
				break;
			case 35:
				{
				alt69 = 2;
				}
				break;
			case 39:
				{
				alt69 = 3;
				}
				break;
			case 23:
			case 28:
			case 32:
			case 34:
			case 38:
			case 119:
				{
				alt69 = 4;
				}
				break;
			case 103:
				{
				int LA69_14 = input.LA(2);

				if ((LA69_14==30))
				{
					int LA69_17 = input.LA(3);

					if ((EvaluatePredicate(synpred114_C_fragment)))
					{
						alt69 = 5;
					}
					else if ((EvaluatePredicate(synpred115_C_fragment)))
					{
						alt69 = 6;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 69, 17, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA69_14==CHARACTER_LITERAL||LA69_14==DECIMAL_LITERAL||LA69_14==FLOATING_POINT_LITERAL||LA69_14==HEX_LITERAL||LA69_14==IDENTIFIER||LA69_14==OCTAL_LITERAL||LA69_14==STRING_LITERAL||LA69_14==23||LA69_14==28||LA69_14==32||(LA69_14>=34 && LA69_14<=35)||(LA69_14>=38 && LA69_14<=39)||LA69_14==63||(LA69_14>=66 && LA69_14<=67)||LA69_14==71||LA69_14==103||LA69_14==119))
				{
					alt69 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 69, 14, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 63:
				{
				int LA69_15 = input.LA(2);

				if ((LA69_15==30))
				{
					int LA69_33 = input.LA(3);

					if ((EvaluatePredicate(synpred116_C_fragment)))
					{
						alt69 = 7;
					}
					else if ((EvaluatePredicate(synpred117_C_fragment)))
					{
						alt69 = 8;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 69, 33, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA69_15==CHARACTER_LITERAL||LA69_15==DECIMAL_LITERAL||LA69_15==FLOATING_POINT_LITERAL||LA69_15==HEX_LITERAL||LA69_15==IDENTIFIER||LA69_15==OCTAL_LITERAL||LA69_15==STRING_LITERAL||LA69_15==23||LA69_15==28||LA69_15==32||(LA69_15>=34 && LA69_15<=35)||(LA69_15>=38 && LA69_15<=39)||LA69_15==63||(LA69_15>=66 && LA69_15<=67)||LA69_15==71||LA69_15==103||LA69_15==119))
				{
					alt69 = 7;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 69, 15, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 71:
				{
				alt69 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 69, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:325:4: postfix_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(325, 4);
				PushFollow(Follow._postfix_expression_in_unary_expression1267);
				postfix_expression190=postfix_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, postfix_expression190.Tree, postfix_expression190, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:326:4: '++' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(326, 4);
				string_literal191=(IToken)Match(input,35,Follow._35_in_unary_expression1272); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal191_tree = (object)adaptor.Create(string_literal191, retval);
				adaptor.AddChild(root_0, string_literal191_tree);
				}
				DebugLocation(326, 9);
				PushFollow(Follow._unary_expression_in_unary_expression1274);
				unary_expression192=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression192.Tree, unary_expression192, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:327:4: '--' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(327, 4);
				string_literal193=(IToken)Match(input,39,Follow._39_in_unary_expression1279); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal193_tree = (object)adaptor.Create(string_literal193, retval);
				adaptor.AddChild(root_0, string_literal193_tree);
				}
				DebugLocation(327, 9);
				PushFollow(Follow._unary_expression_in_unary_expression1281);
				unary_expression194=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression194.Tree, unary_expression194, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:328:4: unary_operator cast_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(328, 4);
				PushFollow(Follow._unary_operator_in_unary_expression1286);
				unary_operator195=unary_operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_operator195.Tree, unary_operator195, retval);
				DebugLocation(328, 19);
				PushFollow(Follow._cast_expression_in_unary_expression1288);
				cast_expression196=cast_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression196.Tree, cast_expression196, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:329:4: 'sizeof' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(329, 4);
				string_literal197=(IToken)Match(input,103,Follow._103_in_unary_expression1293); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal197_tree = (object)adaptor.Create(string_literal197, retval);
				adaptor.AddChild(root_0, string_literal197_tree);
				}
				DebugLocation(329, 13);
				PushFollow(Follow._unary_expression_in_unary_expression1295);
				unary_expression198=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression198.Tree, unary_expression198, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:330:4: 'sizeof' '(' type_name ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(330, 4);
				string_literal199=(IToken)Match(input,103,Follow._103_in_unary_expression1300); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal199_tree = (object)adaptor.Create(string_literal199, retval);
				adaptor.AddChild(root_0, string_literal199_tree);
				}
				DebugLocation(330, 13);
				char_literal200=(IToken)Match(input,30,Follow._30_in_unary_expression1302); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal200_tree = (object)adaptor.Create(char_literal200, retval);
				adaptor.AddChild(root_0, char_literal200_tree);
				}
				DebugLocation(330, 17);
				PushFollow(Follow._type_name_in_unary_expression1304);
				type_name201=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_name201.Tree, type_name201, retval);
				DebugLocation(330, 27);
				char_literal202=(IToken)Match(input,31,Follow._31_in_unary_expression1306); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal202_tree = (object)adaptor.Create(char_literal202, retval);
				adaptor.AddChild(root_0, char_literal202_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C.g:332:4: '__alignof__' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(332, 4);
				string_literal203=(IToken)Match(input,63,Follow._63_in_unary_expression1313); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal203_tree = (object)adaptor.Create(string_literal203, retval);
				adaptor.AddChild(root_0, string_literal203_tree);
				}
				DebugLocation(332, 18);
				PushFollow(Follow._unary_expression_in_unary_expression1315);
				unary_expression204=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression204.Tree, unary_expression204, retval);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C.g:333:4: '__alignof__' '(' type_name ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(333, 4);
				string_literal205=(IToken)Match(input,63,Follow._63_in_unary_expression1320); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal205_tree = (object)adaptor.Create(string_literal205, retval);
				adaptor.AddChild(root_0, string_literal205_tree);
				}
				DebugLocation(333, 18);
				char_literal206=(IToken)Match(input,30,Follow._30_in_unary_expression1322); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal206_tree = (object)adaptor.Create(char_literal206, retval);
				adaptor.AddChild(root_0, char_literal206_tree);
				}
				DebugLocation(333, 22);
				PushFollow(Follow._type_name_in_unary_expression1324);
				type_name207=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_name207.Tree, type_name207, retval);
				DebugLocation(333, 32);
				char_literal208=(IToken)Match(input,31,Follow._31_in_unary_expression1326); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal208_tree = (object)adaptor.Create(char_literal208, retval);
				adaptor.AddChild(root_0, char_literal208_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C.g:334:4: gcc_extension_specifier cast_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(334, 4);
				PushFollow(Follow._gcc_extension_specifier_in_unary_expression1331);
				gcc_extension_specifier209=gcc_extension_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_extension_specifier209.Tree, gcc_extension_specifier209, retval);
				DebugLocation(334, 28);
				PushFollow(Follow._cast_expression_in_unary_expression1333);
				cast_expression210=cast_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression210.Tree, cast_expression210, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_expression", 42);
			LeaveRule("unary_expression", 42);
			LeaveRule_unary_expression();
			if (state.backtracking > 0) { Memoize(input, 42, unary_expression_StartIndex); }

		}
		DebugLocation(335, 1);
		} finally { DebugExitRule(GrammarFileName, "unary_expression"); }
		return retval;

	}
	// $ANTLR end "unary_expression"

	partial void EnterRule_postfix_expression();
	partial void LeaveRule_postfix_expression();

	// $ANTLR start "postfix_expression"
	// C.g:337:1: postfix_expression : ( primary_expression ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )* | gcc_builtin_va_arg | gcc_builtin_offsetof );
	[GrammarRule("postfix_expression")]
	public XAstParserRuleReturnScope postfix_expression()
	{
		EnterRule_postfix_expression();
		EnterRule("postfix_expression", 43);
		var retval = new XAstParserRuleReturnScope("postfix_expression");
		
		retval.Start = (IToken)input.LT(1);
		int postfix_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal212 = default(IToken);
		IToken char_literal214 = default(IToken);
		IToken char_literal215 = default(IToken);
		IToken char_literal216 = default(IToken);
		IToken char_literal217 = default(IToken);
		IToken char_literal219 = default(IToken);
		IToken char_literal220 = default(IToken);
		IToken IDENTIFIER221 = default(IToken);
		IToken string_literal222 = default(IToken);
		IToken IDENTIFIER223 = default(IToken);
		IToken string_literal224 = default(IToken);
		IToken string_literal225 = default(IToken);
		XAstParserRuleReturnScope primary_expression211 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression213 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope argument_expression_list218 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_builtin_va_arg226 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_builtin_offsetof227 = default(XAstParserRuleReturnScope);

		object char_literal212_tree = default(object);
		object char_literal214_tree = default(object);
		object char_literal215_tree = default(object);
		object char_literal216_tree = default(object);
		object char_literal217_tree = default(object);
		object char_literal219_tree = default(object);
		object char_literal220_tree = default(object);
		object IDENTIFIER221_tree = default(object);
		object string_literal222_tree = default(object);
		object IDENTIFIER223_tree = default(object);
		object string_literal224_tree = default(object);
		object string_literal225_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "postfix_expression");
		DebugLocation(337, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// C.g:338:2: ( primary_expression ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )* | gcc_builtin_va_arg | gcc_builtin_offsetof )
			int alt71=3;
			try { DebugEnterDecision(71, false);
			switch (input.LA(1))
			{
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case IDENTIFIER:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
			case 30:
				{
				alt71 = 1;
				}
				break;
			case 67:
				{
				alt71 = 2;
				}
				break;
			case 66:
				{
				alt71 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:338:6: primary_expression ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(338, 6);
				PushFollow(Follow._primary_expression_in_postfix_expression1346);
				primary_expression211=primary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression211.Tree, primary_expression211, retval);
				DebugLocation(339, 3);
				// C.g:339:3: ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )*
				try { DebugEnterSubRule(70);
				while (true)
				{
					int alt70=8;
					try { DebugEnterDecision(70, false);
					try
					{
						alt70 = dfa70.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(70); }
					switch ( alt70 )
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:339:7: '[' expression ']'
						{
						DebugLocation(339, 7);
						char_literal212=(IToken)Match(input,59,Follow._59_in_postfix_expression1354); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal212_tree = (object)adaptor.Create(char_literal212, retval);
						adaptor.AddChild(root_0, char_literal212_tree);
						}
						DebugLocation(339, 11);
						PushFollow(Follow._expression_in_postfix_expression1356);
						expression213=expression();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, expression213.Tree, expression213, retval);
						DebugLocation(339, 22);
						char_literal214=(IToken)Match(input,60,Follow._60_in_postfix_expression1358); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal214_tree = (object)adaptor.Create(char_literal214, retval);
						adaptor.AddChild(root_0, char_literal214_tree);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C.g:340:7: '(' ')'
						{
						DebugLocation(340, 7);
						char_literal215=(IToken)Match(input,30,Follow._30_in_postfix_expression1366); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal215_tree = (object)adaptor.Create(char_literal215, retval);
						adaptor.AddChild(root_0, char_literal215_tree);
						}
						DebugLocation(340, 11);
						char_literal216=(IToken)Match(input,31,Follow._31_in_postfix_expression1368); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal216_tree = (object)adaptor.Create(char_literal216, retval);
						adaptor.AddChild(root_0, char_literal216_tree);
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C.g:341:7: '(' argument_expression_list ')'
						{
						DebugLocation(341, 7);
						char_literal217=(IToken)Match(input,30,Follow._30_in_postfix_expression1376); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal217_tree = (object)adaptor.Create(char_literal217, retval);
						adaptor.AddChild(root_0, char_literal217_tree);
						}
						DebugLocation(341, 11);
						PushFollow(Follow._argument_expression_list_in_postfix_expression1378);
						argument_expression_list218=argument_expression_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, argument_expression_list218.Tree, argument_expression_list218, retval);
						DebugLocation(341, 36);
						char_literal219=(IToken)Match(input,31,Follow._31_in_postfix_expression1380); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal219_tree = (object)adaptor.Create(char_literal219, retval);
						adaptor.AddChild(root_0, char_literal219_tree);
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C.g:342:7: '.' IDENTIFIER
						{
						DebugLocation(342, 7);
						char_literal220=(IToken)Match(input,42,Follow._42_in_postfix_expression1388); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal220_tree = (object)adaptor.Create(char_literal220, retval);
						adaptor.AddChild(root_0, char_literal220_tree);
						}
						DebugLocation(342, 11);
						IDENTIFIER221=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_postfix_expression1390), "IDENTIFIER"); if (state.failed) return retval;
						if (state.backtracking == 0) {
						IDENTIFIER221_tree = (object)adaptor.Create(IDENTIFIER221, retval);
						adaptor.AddChild(root_0, IDENTIFIER221_tree);
						}

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C.g:343:7: '->' IDENTIFIER
						{
						DebugLocation(343, 7);
						string_literal222=(IToken)Match(input,41,Follow._41_in_postfix_expression1398); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal222_tree = (object)adaptor.Create(string_literal222, retval);
						adaptor.AddChild(root_0, string_literal222_tree);
						}
						DebugLocation(343, 12);
						IDENTIFIER223=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_postfix_expression1400), "IDENTIFIER"); if (state.failed) return retval;
						if (state.backtracking == 0) {
						IDENTIFIER223_tree = (object)adaptor.Create(IDENTIFIER223, retval);
						adaptor.AddChild(root_0, IDENTIFIER223_tree);
						}

						}
						break;
					case 6:
						DebugEnterAlt(6);
						// C.g:344:7: '++'
						{
						DebugLocation(344, 7);
						string_literal224=(IToken)Match(input,35,Follow._35_in_postfix_expression1408); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal224_tree = (object)adaptor.Create(string_literal224, retval);
						adaptor.AddChild(root_0, string_literal224_tree);
						}

						}
						break;
					case 7:
						DebugEnterAlt(7);
						// C.g:345:7: '--'
						{
						DebugLocation(345, 7);
						string_literal225=(IToken)Match(input,39,Follow._39_in_postfix_expression1416); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal225_tree = (object)adaptor.Create(string_literal225, retval);
						adaptor.AddChild(root_0, string_literal225_tree);
						}

						}
						break;

					default:
						goto loop70;
					}
				}

				loop70:
					;

				} finally { DebugExitSubRule(70); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:347:4: gcc_builtin_va_arg
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(347, 4);
				PushFollow(Follow._gcc_builtin_va_arg_in_postfix_expression1426);
				gcc_builtin_va_arg226=gcc_builtin_va_arg();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_builtin_va_arg226.Tree, gcc_builtin_va_arg226, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:348:4: gcc_builtin_offsetof
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(348, 4);
				PushFollow(Follow._gcc_builtin_offsetof_in_postfix_expression1431);
				gcc_builtin_offsetof227=gcc_builtin_offsetof();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_builtin_offsetof227.Tree, gcc_builtin_offsetof227, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("postfix_expression", 43);
			LeaveRule("postfix_expression", 43);
			LeaveRule_postfix_expression();
			if (state.backtracking > 0) { Memoize(input, 43, postfix_expression_StartIndex); }

		}
		DebugLocation(349, 1);
		} finally { DebugExitRule(GrammarFileName, "postfix_expression"); }
		return retval;

	}
	// $ANTLR end "postfix_expression"

	partial void EnterRule_unary_operator();
	partial void LeaveRule_unary_operator();

	// $ANTLR start "unary_operator"
	// C.g:351:1: unary_operator : ( '&' | '*' | '+' | '-' | '~' | '!' );
	[GrammarRule("unary_operator")]
	public XAstParserRuleReturnScope unary_operator()
	{
		EnterRule_unary_operator();
		EnterRule("unary_operator", 44);
		var retval = new XAstParserRuleReturnScope("unary_operator");
		
		retval.Start = (IToken)input.LT(1);
		int unary_operator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set228 = default(IToken);

		object set228_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unary_operator");
		DebugLocation(351, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// C.g:352:2: ( '&' | '*' | '+' | '-' | '~' | '!' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(352, 2);

			set228=(IToken)input.LT(1);
			if (input.LA(1)==23||input.LA(1)==28||input.LA(1)==32||input.LA(1)==34||input.LA(1)==38||input.LA(1)==119)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set228, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_operator", 44);
			LeaveRule("unary_operator", 44);
			LeaveRule_unary_operator();
			if (state.backtracking > 0) { Memoize(input, 44, unary_operator_StartIndex); }

		}
		DebugLocation(358, 1);
		} finally { DebugExitRule(GrammarFileName, "unary_operator"); }
		return retval;

	}
	// $ANTLR end "unary_operator"

	partial void EnterRule_primary_expression();
	partial void LeaveRule_primary_expression();

	// $ANTLR start "primary_expression"
	// C.g:360:1: primary_expression : ( IDENTIFIER | constant | '(' expression ')' | gcc_statement_expression );
	[GrammarRule("primary_expression")]
	public XAstParserRuleReturnScope primary_expression()
	{
		EnterRule_primary_expression();
		EnterRule("primary_expression", 45);
		var retval = new XAstParserRuleReturnScope("primary_expression");
		
		retval.Start = (IToken)input.LT(1);
		int primary_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER229 = default(IToken);
		IToken char_literal231 = default(IToken);
		IToken char_literal233 = default(IToken);
		XAstParserRuleReturnScope constant230 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression232 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_statement_expression234 = default(XAstParserRuleReturnScope);

		object IDENTIFIER229_tree = default(object);
		object char_literal231_tree = default(object);
		object char_literal233_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primary_expression");
		DebugLocation(360, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// C.g:361:2: ( IDENTIFIER | constant | '(' expression ')' | gcc_statement_expression )
			int alt72=4;
			try { DebugEnterDecision(72, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				alt72 = 1;
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
				{
				alt72 = 2;
				}
				break;
			case 30:
				{
				int LA72_8 = input.LA(2);

				if ((LA72_8==CHARACTER_LITERAL||LA72_8==DECIMAL_LITERAL||LA72_8==FLOATING_POINT_LITERAL||LA72_8==HEX_LITERAL||LA72_8==IDENTIFIER||LA72_8==OCTAL_LITERAL||LA72_8==STRING_LITERAL||LA72_8==23||LA72_8==28||LA72_8==30||LA72_8==32||(LA72_8>=34 && LA72_8<=35)||(LA72_8>=38 && LA72_8<=39)||LA72_8==63||(LA72_8>=66 && LA72_8<=67)||LA72_8==71||LA72_8==103||LA72_8==119))
				{
					alt72 = 3;
				}
				else if ((LA72_8==114))
				{
					alt72 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 72, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:361:4: IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(361, 4);
				IDENTIFIER229=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_primary_expression1478), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER229_tree = (object)adaptor.Create(IDENTIFIER229, retval);
				adaptor.AddChild(root_0, IDENTIFIER229_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:362:4: constant
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(362, 4);
				PushFollow(Follow._constant_in_primary_expression1483);
				constant230=constant();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant230.Tree, constant230, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:363:4: '(' expression ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(363, 4);
				char_literal231=(IToken)Match(input,30,Follow._30_in_primary_expression1488); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal231_tree = (object)adaptor.Create(char_literal231, retval);
				adaptor.AddChild(root_0, char_literal231_tree);
				}
				DebugLocation(363, 8);
				PushFollow(Follow._expression_in_primary_expression1490);
				expression232=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression232.Tree, expression232, retval);
				DebugLocation(363, 19);
				char_literal233=(IToken)Match(input,31,Follow._31_in_primary_expression1492); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal233_tree = (object)adaptor.Create(char_literal233, retval);
				adaptor.AddChild(root_0, char_literal233_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:364:4: gcc_statement_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(364, 4);
				PushFollow(Follow._gcc_statement_expression_in_primary_expression1497);
				gcc_statement_expression234=gcc_statement_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_statement_expression234.Tree, gcc_statement_expression234, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_expression", 45);
			LeaveRule("primary_expression", 45);
			LeaveRule_primary_expression();
			if (state.backtracking > 0) { Memoize(input, 45, primary_expression_StartIndex); }

		}
		DebugLocation(365, 1);
		} finally { DebugExitRule(GrammarFileName, "primary_expression"); }
		return retval;

	}
	// $ANTLR end "primary_expression"

	partial void EnterRule_constant();
	partial void LeaveRule_constant();

	// $ANTLR start "constant"
	// C.g:367:1: constant : ( hex_literal | octal_literal | decimal_literal | character_literal | string_literal | floating_point_literal );
	[GrammarRule("constant")]
	public XAstParserRuleReturnScope constant()
	{
		EnterRule_constant();
		EnterRule("constant", 46);
		var retval = new XAstParserRuleReturnScope("constant");
		
		retval.Start = (IToken)input.LT(1);
		int constant_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope hex_literal235 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope octal_literal236 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope decimal_literal237 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope character_literal238 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope string_literal239 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope floating_point_literal240 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(367, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// C.g:368:2: ( hex_literal | octal_literal | decimal_literal | character_literal | string_literal | floating_point_literal )
			int alt73=6;
			try { DebugEnterDecision(73, false);
			switch (input.LA(1))
			{
			case HEX_LITERAL:
				{
				alt73 = 1;
				}
				break;
			case OCTAL_LITERAL:
				{
				alt73 = 2;
				}
				break;
			case DECIMAL_LITERAL:
				{
				alt73 = 3;
				}
				break;
			case CHARACTER_LITERAL:
				{
				alt73 = 4;
				}
				break;
			case STRING_LITERAL:
				{
				alt73 = 5;
				}
				break;
			case FLOATING_POINT_LITERAL:
				{
				alt73 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 73, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:368:6: hex_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(368, 6);
				PushFollow(Follow._hex_literal_in_constant1510);
				hex_literal235=hex_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, hex_literal235.Tree, hex_literal235, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:369:6: octal_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(369, 6);
				PushFollow(Follow._octal_literal_in_constant1517);
				octal_literal236=octal_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, octal_literal236.Tree, octal_literal236, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:370:6: decimal_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(370, 6);
				PushFollow(Follow._decimal_literal_in_constant1524);
				decimal_literal237=decimal_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, decimal_literal237.Tree, decimal_literal237, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:371:6: character_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(371, 6);
				PushFollow(Follow._character_literal_in_constant1531);
				character_literal238=character_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, character_literal238.Tree, character_literal238, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:372:6: string_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(372, 6);
				PushFollow(Follow._string_literal_in_constant1538);
				string_literal239=string_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, string_literal239.Tree, string_literal239, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:373:6: floating_point_literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(373, 6);
				PushFollow(Follow._floating_point_literal_in_constant1545);
				floating_point_literal240=floating_point_literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, floating_point_literal240.Tree, floating_point_literal240, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant", 46);
			LeaveRule("constant", 46);
			LeaveRule_constant();
			if (state.backtracking > 0) { Memoize(input, 46, constant_StartIndex); }

		}
		DebugLocation(374, 1);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"

	partial void EnterRule_hex_literal();
	partial void LeaveRule_hex_literal();

	// $ANTLR start "hex_literal"
	// C.g:376:1: hex_literal : HEX_LITERAL ;
	[GrammarRule("hex_literal")]
	public XAstParserRuleReturnScope hex_literal()
	{
		EnterRule_hex_literal();
		EnterRule("hex_literal", 47);
		var retval = new XAstParserRuleReturnScope("hex_literal");
		
		retval.Start = (IToken)input.LT(1);
		int hex_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken HEX_LITERAL241 = default(IToken);

		object HEX_LITERAL241_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "hex_literal");
		DebugLocation(376, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// C.g:377:2: ( HEX_LITERAL )
			DebugEnterAlt(1);
			// C.g:377:4: HEX_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(377, 4);
			HEX_LITERAL241=(IToken)new XToken((IToken)Match(input,HEX_LITERAL,Follow._HEX_LITERAL_in_hex_literal1556), "HEX_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			HEX_LITERAL241_tree = (object)adaptor.Create(HEX_LITERAL241, retval);
			adaptor.AddChild(root_0, HEX_LITERAL241_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("hex_literal", 47);
			LeaveRule("hex_literal", 47);
			LeaveRule_hex_literal();
			if (state.backtracking > 0) { Memoize(input, 47, hex_literal_StartIndex); }

		}
		DebugLocation(378, 1);
		} finally { DebugExitRule(GrammarFileName, "hex_literal"); }
		return retval;

	}
	// $ANTLR end "hex_literal"

	partial void EnterRule_octal_literal();
	partial void LeaveRule_octal_literal();

	// $ANTLR start "octal_literal"
	// C.g:380:1: octal_literal : OCTAL_LITERAL ;
	[GrammarRule("octal_literal")]
	public XAstParserRuleReturnScope octal_literal()
	{
		EnterRule_octal_literal();
		EnterRule("octal_literal", 48);
		var retval = new XAstParserRuleReturnScope("octal_literal");
		
		retval.Start = (IToken)input.LT(1);
		int octal_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken OCTAL_LITERAL242 = default(IToken);

		object OCTAL_LITERAL242_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "octal_literal");
		DebugLocation(380, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// C.g:381:2: ( OCTAL_LITERAL )
			DebugEnterAlt(1);
			// C.g:381:4: OCTAL_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(381, 4);
			OCTAL_LITERAL242=(IToken)new XToken((IToken)Match(input,OCTAL_LITERAL,Follow._OCTAL_LITERAL_in_octal_literal1567), "OCTAL_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			OCTAL_LITERAL242_tree = (object)adaptor.Create(OCTAL_LITERAL242, retval);
			adaptor.AddChild(root_0, OCTAL_LITERAL242_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("octal_literal", 48);
			LeaveRule("octal_literal", 48);
			LeaveRule_octal_literal();
			if (state.backtracking > 0) { Memoize(input, 48, octal_literal_StartIndex); }

		}
		DebugLocation(382, 1);
		} finally { DebugExitRule(GrammarFileName, "octal_literal"); }
		return retval;

	}
	// $ANTLR end "octal_literal"

	partial void EnterRule_decimal_literal();
	partial void LeaveRule_decimal_literal();

	// $ANTLR start "decimal_literal"
	// C.g:384:1: decimal_literal : DECIMAL_LITERAL ;
	[GrammarRule("decimal_literal")]
	public XAstParserRuleReturnScope decimal_literal()
	{
		EnterRule_decimal_literal();
		EnterRule("decimal_literal", 49);
		var retval = new XAstParserRuleReturnScope("decimal_literal");
		
		retval.Start = (IToken)input.LT(1);
		int decimal_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken DECIMAL_LITERAL243 = default(IToken);

		object DECIMAL_LITERAL243_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "decimal_literal");
		DebugLocation(384, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// C.g:385:2: ( DECIMAL_LITERAL )
			DebugEnterAlt(1);
			// C.g:385:4: DECIMAL_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(385, 4);
			DECIMAL_LITERAL243=(IToken)new XToken((IToken)Match(input,DECIMAL_LITERAL,Follow._DECIMAL_LITERAL_in_decimal_literal1578), "DECIMAL_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DECIMAL_LITERAL243_tree = (object)adaptor.Create(DECIMAL_LITERAL243, retval);
			adaptor.AddChild(root_0, DECIMAL_LITERAL243_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("decimal_literal", 49);
			LeaveRule("decimal_literal", 49);
			LeaveRule_decimal_literal();
			if (state.backtracking > 0) { Memoize(input, 49, decimal_literal_StartIndex); }

		}
		DebugLocation(386, 1);
		} finally { DebugExitRule(GrammarFileName, "decimal_literal"); }
		return retval;

	}
	// $ANTLR end "decimal_literal"

	partial void EnterRule_character_literal();
	partial void LeaveRule_character_literal();

	// $ANTLR start "character_literal"
	// C.g:388:1: character_literal : CHARACTER_LITERAL ;
	[GrammarRule("character_literal")]
	public XAstParserRuleReturnScope character_literal()
	{
		EnterRule_character_literal();
		EnterRule("character_literal", 50);
		var retval = new XAstParserRuleReturnScope("character_literal");
		
		retval.Start = (IToken)input.LT(1);
		int character_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken CHARACTER_LITERAL244 = default(IToken);

		object CHARACTER_LITERAL244_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "character_literal");
		DebugLocation(388, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// C.g:389:2: ( CHARACTER_LITERAL )
			DebugEnterAlt(1);
			// C.g:389:4: CHARACTER_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(389, 4);
			CHARACTER_LITERAL244=(IToken)new XToken((IToken)Match(input,CHARACTER_LITERAL,Follow._CHARACTER_LITERAL_in_character_literal1589), "CHARACTER_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CHARACTER_LITERAL244_tree = (object)adaptor.Create(CHARACTER_LITERAL244, retval);
			adaptor.AddChild(root_0, CHARACTER_LITERAL244_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("character_literal", 50);
			LeaveRule("character_literal", 50);
			LeaveRule_character_literal();
			if (state.backtracking > 0) { Memoize(input, 50, character_literal_StartIndex); }

		}
		DebugLocation(390, 1);
		} finally { DebugExitRule(GrammarFileName, "character_literal"); }
		return retval;

	}
	// $ANTLR end "character_literal"

	partial void EnterRule_string_literal();
	partial void LeaveRule_string_literal();

	// $ANTLR start "string_literal"
	// C.g:392:1: string_literal : ( STRING_LITERAL )+ ;
	[GrammarRule("string_literal")]
	public XAstParserRuleReturnScope string_literal()
	{
		EnterRule_string_literal();
		EnterRule("string_literal", 51);
		var retval = new XAstParserRuleReturnScope("string_literal");
		
		retval.Start = (IToken)input.LT(1);
		int string_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken STRING_LITERAL245 = default(IToken);

		object STRING_LITERAL245_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "string_literal");
		DebugLocation(392, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// C.g:393:2: ( ( STRING_LITERAL )+ )
			DebugEnterAlt(1);
			// C.g:393:4: ( STRING_LITERAL )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(393, 4);
			// C.g:393:4: ( STRING_LITERAL )+
			int cnt74=0;
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, false);
				try
				{
					alt74 = dfa74.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:393:4: STRING_LITERAL
					{
					DebugLocation(393, 4);
					STRING_LITERAL245=(IToken)new XToken((IToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_string_literal1600), "STRING_LITERAL"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					STRING_LITERAL245_tree = (object)adaptor.Create(STRING_LITERAL245, retval);
					adaptor.AddChild(root_0, STRING_LITERAL245_tree);
					}

					}
					break;

				default:
					if (cnt74 >= 1)
						goto loop74;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee74 = new EarlyExitException( 74, input );
					DebugRecognitionException(eee74);
					throw eee74;
				}
				cnt74++;
			}
			loop74:
				;

			} finally { DebugExitSubRule(74); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("string_literal", 51);
			LeaveRule("string_literal", 51);
			LeaveRule_string_literal();
			if (state.backtracking > 0) { Memoize(input, 51, string_literal_StartIndex); }

		}
		DebugLocation(394, 1);
		} finally { DebugExitRule(GrammarFileName, "string_literal"); }
		return retval;

	}
	// $ANTLR end "string_literal"

	partial void EnterRule_floating_point_literal();
	partial void LeaveRule_floating_point_literal();

	// $ANTLR start "floating_point_literal"
	// C.g:396:1: floating_point_literal : FLOATING_POINT_LITERAL ;
	[GrammarRule("floating_point_literal")]
	public XAstParserRuleReturnScope floating_point_literal()
	{
		EnterRule_floating_point_literal();
		EnterRule("floating_point_literal", 52);
		var retval = new XAstParserRuleReturnScope("floating_point_literal");
		
		retval.Start = (IToken)input.LT(1);
		int floating_point_literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken FLOATING_POINT_LITERAL246 = default(IToken);

		object FLOATING_POINT_LITERAL246_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "floating_point_literal");
		DebugLocation(396, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// C.g:397:2: ( FLOATING_POINT_LITERAL )
			DebugEnterAlt(1);
			// C.g:397:4: FLOATING_POINT_LITERAL
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(397, 4);
			FLOATING_POINT_LITERAL246=(IToken)new XToken((IToken)Match(input,FLOATING_POINT_LITERAL,Follow._FLOATING_POINT_LITERAL_in_floating_point_literal1612), "FLOATING_POINT_LITERAL"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			FLOATING_POINT_LITERAL246_tree = (object)adaptor.Create(FLOATING_POINT_LITERAL246, retval);
			adaptor.AddChild(root_0, FLOATING_POINT_LITERAL246_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("floating_point_literal", 52);
			LeaveRule("floating_point_literal", 52);
			LeaveRule_floating_point_literal();
			if (state.backtracking > 0) { Memoize(input, 52, floating_point_literal_StartIndex); }

		}
		DebugLocation(398, 1);
		} finally { DebugExitRule(GrammarFileName, "floating_point_literal"); }
		return retval;

	}
	// $ANTLR end "floating_point_literal"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();

	// $ANTLR start "expression"
	// C.g:402:1: expression : assignment_expression ( ',' assignment_expression )* ;
	[GrammarRule("expression")]
	public XAstParserRuleReturnScope expression()
	{
		EnterRule_expression();
		EnterRule("expression", 53);
		var retval = new XAstParserRuleReturnScope("expression");
		
		retval.Start = (IToken)input.LT(1);
		int expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal248 = default(IToken);
		XAstParserRuleReturnScope assignment_expression247 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression249 = default(XAstParserRuleReturnScope);

		object char_literal248_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(402, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// C.g:403:2: ( assignment_expression ( ',' assignment_expression )* )
			DebugEnterAlt(1);
			// C.g:403:4: assignment_expression ( ',' assignment_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(403, 4);
			PushFollow(Follow._assignment_expression_in_expression1625);
			assignment_expression247=assignment_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression247.Tree, assignment_expression247, retval);
			DebugLocation(403, 26);
			// C.g:403:26: ( ',' assignment_expression )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_0 = input.LA(1);

				if ((LA75_0==37))
				{
					alt75 = 1;
				}


				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:403:27: ',' assignment_expression
					{
					DebugLocation(403, 27);
					char_literal248=(IToken)Match(input,37,Follow._37_in_expression1628); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal248_tree = (object)adaptor.Create(char_literal248, retval);
					adaptor.AddChild(root_0, char_literal248_tree);
					}
					DebugLocation(403, 31);
					PushFollow(Follow._assignment_expression_in_expression1630);
					assignment_expression249=assignment_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression249.Tree, assignment_expression249, retval);

					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 53);
			LeaveRule("expression", 53);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 53, expression_StartIndex); }

		}
		DebugLocation(404, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_constant_expression();
	partial void LeaveRule_constant_expression();

	// $ANTLR start "constant_expression"
	// C.g:406:1: constant_expression : conditional_expression ;
	[GrammarRule("constant_expression")]
	public XAstParserRuleReturnScope constant_expression()
	{
		EnterRule_constant_expression();
		EnterRule("constant_expression", 54);
		var retval = new XAstParserRuleReturnScope("constant_expression");
		
		retval.Start = (IToken)input.LT(1);
		int constant_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope conditional_expression250 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "constant_expression");
		DebugLocation(406, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// C.g:407:2: ( conditional_expression )
			DebugEnterAlt(1);
			// C.g:407:4: conditional_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(407, 4);
			PushFollow(Follow._conditional_expression_in_constant_expression1643);
			conditional_expression250=conditional_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression250.Tree, conditional_expression250, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant_expression", 54);
			LeaveRule("constant_expression", 54);
			LeaveRule_constant_expression();
			if (state.backtracking > 0) { Memoize(input, 54, constant_expression_StartIndex); }

		}
		DebugLocation(408, 1);
		} finally { DebugExitRule(GrammarFileName, "constant_expression"); }
		return retval;

	}
	// $ANTLR end "constant_expression"

	partial void EnterRule_assignment_expression();
	partial void LeaveRule_assignment_expression();

	// $ANTLR start "assignment_expression"
	// C.g:410:1: assignment_expression : ( lvalue assignment_operator assignment_expression | conditional_expression );
	[GrammarRule("assignment_expression")]
	public XAstParserRuleReturnScope assignment_expression()
	{
		EnterRule_assignment_expression();
		EnterRule("assignment_expression", 55);
		var retval = new XAstParserRuleReturnScope("assignment_expression");
		
		retval.Start = (IToken)input.LT(1);
		int assignment_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope lvalue251 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_operator252 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression253 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conditional_expression254 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "assignment_expression");
		DebugLocation(410, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// C.g:411:2: ( lvalue assignment_operator assignment_expression | conditional_expression )
			int alt76=2;
			try { DebugEnterDecision(76, false);
			try
			{
				alt76 = dfa76.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:411:4: lvalue assignment_operator assignment_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(411, 4);
				PushFollow(Follow._lvalue_in_assignment_expression1654);
				lvalue251=lvalue();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue251.Tree, lvalue251, retval);
				DebugLocation(411, 11);
				PushFollow(Follow._assignment_operator_in_assignment_expression1656);
				assignment_operator252=assignment_operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_operator252.Tree, assignment_operator252, retval);
				DebugLocation(411, 31);
				PushFollow(Follow._assignment_expression_in_assignment_expression1658);
				assignment_expression253=assignment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression253.Tree, assignment_expression253, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:412:4: conditional_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(412, 4);
				PushFollow(Follow._conditional_expression_in_assignment_expression1663);
				conditional_expression254=conditional_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression254.Tree, conditional_expression254, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment_expression", 55);
			LeaveRule("assignment_expression", 55);
			LeaveRule_assignment_expression();
			if (state.backtracking > 0) { Memoize(input, 55, assignment_expression_StartIndex); }

		}
		DebugLocation(413, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment_expression"); }
		return retval;

	}
	// $ANTLR end "assignment_expression"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// C.g:415:1: lvalue : unary_expression ;
	[GrammarRule("lvalue")]
	public XAstParserRuleReturnScope lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 56);
		var retval = new XAstParserRuleReturnScope("lvalue");
		
		retval.Start = (IToken)input.LT(1);
		int lvalue_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope unary_expression255 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(415, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// C.g:416:2: ( unary_expression )
			DebugEnterAlt(1);
			// C.g:416:4: unary_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(416, 4);
			PushFollow(Follow._unary_expression_in_lvalue1675);
			unary_expression255=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression255.Tree, unary_expression255, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 56);
			LeaveRule("lvalue", 56);
			LeaveRule_lvalue();
			if (state.backtracking > 0) { Memoize(input, 56, lvalue_StartIndex); }

		}
		DebugLocation(417, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_assignment_operator();
	partial void LeaveRule_assignment_operator();

	// $ANTLR start "assignment_operator"
	// C.g:419:1: assignment_operator : ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' );
	[GrammarRule("assignment_operator")]
	public XAstParserRuleReturnScope assignment_operator()
	{
		EnterRule_assignment_operator();
		EnterRule("assignment_operator", 57);
		var retval = new XAstParserRuleReturnScope("assignment_operator");
		
		retval.Start = (IToken)input.LT(1);
		int assignment_operator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set256 = default(IToken);

		object set256_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assignment_operator");
		DebugLocation(419, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// C.g:420:2: ( '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|=' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(420, 2);

			set256=(IToken)input.LT(1);
			if (input.LA(1)==26||input.LA(1)==29||input.LA(1)==33||input.LA(1)==36||input.LA(1)==40||input.LA(1)==45||input.LA(1)==50||input.LA(1)==52||input.LA(1)==57||input.LA(1)==62||input.LA(1)==116)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set256, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment_operator", 57);
			LeaveRule("assignment_operator", 57);
			LeaveRule_assignment_operator();
			if (state.backtracking > 0) { Memoize(input, 57, assignment_operator_StartIndex); }

		}
		DebugLocation(431, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment_operator"); }
		return retval;

	}
	// $ANTLR end "assignment_operator"

	partial void EnterRule_conditional_expression();
	partial void LeaveRule_conditional_expression();

	// $ANTLR start "conditional_expression"
	// C.g:433:1: conditional_expression : ( logical_or_expression ( '?' expression ':' conditional_expression )? | logical_or_expression '?' ':' conditional_expression );
	[GrammarRule("conditional_expression")]
	public XAstParserRuleReturnScope conditional_expression()
	{
		EnterRule_conditional_expression();
		EnterRule("conditional_expression", 58);
		var retval = new XAstParserRuleReturnScope("conditional_expression");
		
		retval.Start = (IToken)input.LT(1);
		int conditional_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal258 = default(IToken);
		IToken char_literal260 = default(IToken);
		IToken char_literal263 = default(IToken);
		IToken char_literal264 = default(IToken);
		XAstParserRuleReturnScope logical_or_expression257 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression259 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conditional_expression261 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope logical_or_expression262 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conditional_expression265 = default(XAstParserRuleReturnScope);

		object char_literal258_tree = default(object);
		object char_literal260_tree = default(object);
		object char_literal263_tree = default(object);
		object char_literal264_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditional_expression");
		DebugLocation(433, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// C.g:434:2: ( logical_or_expression ( '?' expression ':' conditional_expression )? | logical_or_expression '?' ':' conditional_expression )
			int alt78=2;
			try { DebugEnterDecision(78, false);
			try
			{
				alt78 = dfa78.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:434:4: logical_or_expression ( '?' expression ':' conditional_expression )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(434, 4);
				PushFollow(Follow._logical_or_expression_in_conditional_expression1747);
				logical_or_expression257=logical_or_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logical_or_expression257.Tree, logical_or_expression257, retval);
				DebugLocation(434, 26);
				// C.g:434:26: ( '?' expression ':' conditional_expression )?
				int alt77=2;
				try { DebugEnterSubRule(77);
				try { DebugEnterDecision(77, false);
				int LA77_0 = input.LA(1);

				if ((LA77_0==58))
				{
					alt77 = 1;
				}
				} finally { DebugExitDecision(77); }
				switch (alt77)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:434:27: '?' expression ':' conditional_expression
					{
					DebugLocation(434, 27);
					char_literal258=(IToken)Match(input,58,Follow._58_in_conditional_expression1750); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal258_tree = (object)adaptor.Create(char_literal258, retval);
					adaptor.AddChild(root_0, char_literal258_tree);
					}
					DebugLocation(434, 31);
					PushFollow(Follow._expression_in_conditional_expression1752);
					expression259=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression259.Tree, expression259, retval);
					DebugLocation(434, 42);
					char_literal260=(IToken)Match(input,46,Follow._46_in_conditional_expression1754); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal260_tree = (object)adaptor.Create(char_literal260, retval);
					adaptor.AddChild(root_0, char_literal260_tree);
					}
					DebugLocation(434, 46);
					PushFollow(Follow._conditional_expression_in_conditional_expression1756);
					conditional_expression261=conditional_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression261.Tree, conditional_expression261, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(77); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:436:4: logical_or_expression '?' ':' conditional_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(436, 4);
				PushFollow(Follow._logical_or_expression_in_conditional_expression1765);
				logical_or_expression262=logical_or_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, logical_or_expression262.Tree, logical_or_expression262, retval);
				DebugLocation(436, 26);
				char_literal263=(IToken)Match(input,58,Follow._58_in_conditional_expression1767); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal263_tree = (object)adaptor.Create(char_literal263, retval);
				adaptor.AddChild(root_0, char_literal263_tree);
				}
				DebugLocation(436, 30);
				char_literal264=(IToken)Match(input,46,Follow._46_in_conditional_expression1769); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal264_tree = (object)adaptor.Create(char_literal264, retval);
				adaptor.AddChild(root_0, char_literal264_tree);
				}
				DebugLocation(436, 34);
				PushFollow(Follow._conditional_expression_in_conditional_expression1771);
				conditional_expression265=conditional_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression265.Tree, conditional_expression265, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditional_expression", 58);
			LeaveRule("conditional_expression", 58);
			LeaveRule_conditional_expression();
			if (state.backtracking > 0) { Memoize(input, 58, conditional_expression_StartIndex); }

		}
		DebugLocation(437, 1);
		} finally { DebugExitRule(GrammarFileName, "conditional_expression"); }
		return retval;

	}
	// $ANTLR end "conditional_expression"

	partial void EnterRule_logical_or_expression();
	partial void LeaveRule_logical_or_expression();

	// $ANTLR start "logical_or_expression"
	// C.g:439:1: logical_or_expression : logical_and_expression ( '||' logical_and_expression )* ;
	[GrammarRule("logical_or_expression")]
	public XAstParserRuleReturnScope logical_or_expression()
	{
		EnterRule_logical_or_expression();
		EnterRule("logical_or_expression", 59);
		var retval = new XAstParserRuleReturnScope("logical_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int logical_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal267 = default(IToken);
		XAstParserRuleReturnScope logical_and_expression266 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope logical_and_expression268 = default(XAstParserRuleReturnScope);

		object string_literal267_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logical_or_expression");
		DebugLocation(439, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// C.g:440:2: ( logical_and_expression ( '||' logical_and_expression )* )
			DebugEnterAlt(1);
			// C.g:440:4: logical_and_expression ( '||' logical_and_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(440, 4);
			PushFollow(Follow._logical_and_expression_in_logical_or_expression1782);
			logical_and_expression266=logical_and_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, logical_and_expression266.Tree, logical_and_expression266, retval);
			DebugLocation(440, 27);
			// C.g:440:27: ( '||' logical_and_expression )*
			try { DebugEnterSubRule(79);
			while (true)
			{
				int alt79=2;
				try { DebugEnterDecision(79, false);
				int LA79_0 = input.LA(1);

				if ((LA79_0==117))
				{
					alt79 = 1;
				}


				} finally { DebugExitDecision(79); }
				switch ( alt79 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:440:28: '||' logical_and_expression
					{
					DebugLocation(440, 28);
					string_literal267=(IToken)Match(input,117,Follow._117_in_logical_or_expression1785); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal267_tree = (object)adaptor.Create(string_literal267, retval);
					adaptor.AddChild(root_0, string_literal267_tree);
					}
					DebugLocation(440, 33);
					PushFollow(Follow._logical_and_expression_in_logical_or_expression1787);
					logical_and_expression268=logical_and_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, logical_and_expression268.Tree, logical_and_expression268, retval);

					}
					break;

				default:
					goto loop79;
				}
			}

			loop79:
				;

			} finally { DebugExitSubRule(79); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logical_or_expression", 59);
			LeaveRule("logical_or_expression", 59);
			LeaveRule_logical_or_expression();
			if (state.backtracking > 0) { Memoize(input, 59, logical_or_expression_StartIndex); }

		}
		DebugLocation(441, 1);
		} finally { DebugExitRule(GrammarFileName, "logical_or_expression"); }
		return retval;

	}
	// $ANTLR end "logical_or_expression"

	partial void EnterRule_logical_and_expression();
	partial void LeaveRule_logical_and_expression();

	// $ANTLR start "logical_and_expression"
	// C.g:443:1: logical_and_expression : inclusive_or_expression ( '&&' inclusive_or_expression )* ;
	[GrammarRule("logical_and_expression")]
	public XAstParserRuleReturnScope logical_and_expression()
	{
		EnterRule_logical_and_expression();
		EnterRule("logical_and_expression", 60);
		var retval = new XAstParserRuleReturnScope("logical_and_expression");
		
		retval.Start = (IToken)input.LT(1);
		int logical_and_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal270 = default(IToken);
		XAstParserRuleReturnScope inclusive_or_expression269 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope inclusive_or_expression271 = default(XAstParserRuleReturnScope);

		object string_literal270_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "logical_and_expression");
		DebugLocation(443, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// C.g:444:2: ( inclusive_or_expression ( '&&' inclusive_or_expression )* )
			DebugEnterAlt(1);
			// C.g:444:4: inclusive_or_expression ( '&&' inclusive_or_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(444, 4);
			PushFollow(Follow._inclusive_or_expression_in_logical_and_expression1800);
			inclusive_or_expression269=inclusive_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, inclusive_or_expression269.Tree, inclusive_or_expression269, retval);
			DebugLocation(444, 28);
			// C.g:444:28: ( '&&' inclusive_or_expression )*
			try { DebugEnterSubRule(80);
			while (true)
			{
				int alt80=2;
				try { DebugEnterDecision(80, false);
				int LA80_0 = input.LA(1);

				if ((LA80_0==27))
				{
					alt80 = 1;
				}


				} finally { DebugExitDecision(80); }
				switch ( alt80 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:444:29: '&&' inclusive_or_expression
					{
					DebugLocation(444, 29);
					string_literal270=(IToken)Match(input,27,Follow._27_in_logical_and_expression1803); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal270_tree = (object)adaptor.Create(string_literal270, retval);
					adaptor.AddChild(root_0, string_literal270_tree);
					}
					DebugLocation(444, 34);
					PushFollow(Follow._inclusive_or_expression_in_logical_and_expression1805);
					inclusive_or_expression271=inclusive_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, inclusive_or_expression271.Tree, inclusive_or_expression271, retval);

					}
					break;

				default:
					goto loop80;
				}
			}

			loop80:
				;

			} finally { DebugExitSubRule(80); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("logical_and_expression", 60);
			LeaveRule("logical_and_expression", 60);
			LeaveRule_logical_and_expression();
			if (state.backtracking > 0) { Memoize(input, 60, logical_and_expression_StartIndex); }

		}
		DebugLocation(445, 1);
		} finally { DebugExitRule(GrammarFileName, "logical_and_expression"); }
		return retval;

	}
	// $ANTLR end "logical_and_expression"

	partial void EnterRule_inclusive_or_expression();
	partial void LeaveRule_inclusive_or_expression();

	// $ANTLR start "inclusive_or_expression"
	// C.g:447:1: inclusive_or_expression : exclusive_or_expression ( '|' exclusive_or_expression )* ;
	[GrammarRule("inclusive_or_expression")]
	public XAstParserRuleReturnScope inclusive_or_expression()
	{
		EnterRule_inclusive_or_expression();
		EnterRule("inclusive_or_expression", 61);
		var retval = new XAstParserRuleReturnScope("inclusive_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int inclusive_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal273 = default(IToken);
		XAstParserRuleReturnScope exclusive_or_expression272 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope exclusive_or_expression274 = default(XAstParserRuleReturnScope);

		object char_literal273_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "inclusive_or_expression");
		DebugLocation(447, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// C.g:448:2: ( exclusive_or_expression ( '|' exclusive_or_expression )* )
			DebugEnterAlt(1);
			// C.g:448:4: exclusive_or_expression ( '|' exclusive_or_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(448, 4);
			PushFollow(Follow._exclusive_or_expression_in_inclusive_or_expression1818);
			exclusive_or_expression272=exclusive_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, exclusive_or_expression272.Tree, exclusive_or_expression272, retval);
			DebugLocation(448, 28);
			// C.g:448:28: ( '|' exclusive_or_expression )*
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=2;
				try { DebugEnterDecision(81, false);
				int LA81_0 = input.LA(1);

				if ((LA81_0==115))
				{
					alt81 = 1;
				}


				} finally { DebugExitDecision(81); }
				switch ( alt81 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:448:29: '|' exclusive_or_expression
					{
					DebugLocation(448, 29);
					char_literal273=(IToken)Match(input,115,Follow._115_in_inclusive_or_expression1821); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal273_tree = (object)adaptor.Create(char_literal273, retval);
					adaptor.AddChild(root_0, char_literal273_tree);
					}
					DebugLocation(448, 33);
					PushFollow(Follow._exclusive_or_expression_in_inclusive_or_expression1823);
					exclusive_or_expression274=exclusive_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, exclusive_or_expression274.Tree, exclusive_or_expression274, retval);

					}
					break;

				default:
					goto loop81;
				}
			}

			loop81:
				;

			} finally { DebugExitSubRule(81); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inclusive_or_expression", 61);
			LeaveRule("inclusive_or_expression", 61);
			LeaveRule_inclusive_or_expression();
			if (state.backtracking > 0) { Memoize(input, 61, inclusive_or_expression_StartIndex); }

		}
		DebugLocation(449, 1);
		} finally { DebugExitRule(GrammarFileName, "inclusive_or_expression"); }
		return retval;

	}
	// $ANTLR end "inclusive_or_expression"

	partial void EnterRule_exclusive_or_expression();
	partial void LeaveRule_exclusive_or_expression();

	// $ANTLR start "exclusive_or_expression"
	// C.g:451:1: exclusive_or_expression : and_expression ( '^' and_expression )* ;
	[GrammarRule("exclusive_or_expression")]
	public XAstParserRuleReturnScope exclusive_or_expression()
	{
		EnterRule_exclusive_or_expression();
		EnterRule("exclusive_or_expression", 62);
		var retval = new XAstParserRuleReturnScope("exclusive_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int exclusive_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal276 = default(IToken);
		XAstParserRuleReturnScope and_expression275 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope and_expression277 = default(XAstParserRuleReturnScope);

		object char_literal276_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "exclusive_or_expression");
		DebugLocation(451, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// C.g:452:2: ( and_expression ( '^' and_expression )* )
			DebugEnterAlt(1);
			// C.g:452:4: and_expression ( '^' and_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(452, 4);
			PushFollow(Follow._and_expression_in_exclusive_or_expression1836);
			and_expression275=and_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, and_expression275.Tree, and_expression275, retval);
			DebugLocation(452, 19);
			// C.g:452:19: ( '^' and_expression )*
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, false);
				int LA82_0 = input.LA(1);

				if ((LA82_0==61))
				{
					alt82 = 1;
				}


				} finally { DebugExitDecision(82); }
				switch ( alt82 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:452:20: '^' and_expression
					{
					DebugLocation(452, 20);
					char_literal276=(IToken)Match(input,61,Follow._61_in_exclusive_or_expression1839); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal276_tree = (object)adaptor.Create(char_literal276, retval);
					adaptor.AddChild(root_0, char_literal276_tree);
					}
					DebugLocation(452, 24);
					PushFollow(Follow._and_expression_in_exclusive_or_expression1841);
					and_expression277=and_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, and_expression277.Tree, and_expression277, retval);

					}
					break;

				default:
					goto loop82;
				}
			}

			loop82:
				;

			} finally { DebugExitSubRule(82); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exclusive_or_expression", 62);
			LeaveRule("exclusive_or_expression", 62);
			LeaveRule_exclusive_or_expression();
			if (state.backtracking > 0) { Memoize(input, 62, exclusive_or_expression_StartIndex); }

		}
		DebugLocation(453, 1);
		} finally { DebugExitRule(GrammarFileName, "exclusive_or_expression"); }
		return retval;

	}
	// $ANTLR end "exclusive_or_expression"

	partial void EnterRule_and_expression();
	partial void LeaveRule_and_expression();

	// $ANTLR start "and_expression"
	// C.g:455:1: and_expression : equality_expression ( '&' equality_expression )* ;
	[GrammarRule("and_expression")]
	public XAstParserRuleReturnScope and_expression()
	{
		EnterRule_and_expression();
		EnterRule("and_expression", 63);
		var retval = new XAstParserRuleReturnScope("and_expression");
		
		retval.Start = (IToken)input.LT(1);
		int and_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal279 = default(IToken);
		XAstParserRuleReturnScope equality_expression278 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope equality_expression280 = default(XAstParserRuleReturnScope);

		object char_literal279_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "and_expression");
		DebugLocation(455, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// C.g:456:2: ( equality_expression ( '&' equality_expression )* )
			DebugEnterAlt(1);
			// C.g:456:4: equality_expression ( '&' equality_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(456, 4);
			PushFollow(Follow._equality_expression_in_and_expression1854);
			equality_expression278=equality_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equality_expression278.Tree, equality_expression278, retval);
			DebugLocation(456, 24);
			// C.g:456:24: ( '&' equality_expression )*
			try { DebugEnterSubRule(83);
			while (true)
			{
				int alt83=2;
				try { DebugEnterDecision(83, false);
				int LA83_0 = input.LA(1);

				if ((LA83_0==28))
				{
					switch (input.LA(2))
					{
					case 30:
						{
						int LA83_32 = input.LA(3);

						if ((EvaluatePredicate(synpred159_C_fragment)))
						{
							alt83 = 1;
						}


						}
						break;
					case IDENTIFIER:
						{
						int LA83_33 = input.LA(3);

						if ((EvaluatePredicate(synpred159_C_fragment)))
						{
							alt83 = 1;
						}


						}
						break;
					case HEX_LITERAL:
						{
						int LA83_34 = input.LA(3);

						if ((EvaluatePredicate(synpred159_C_fragment)))
						{
							alt83 = 1;
						}


						}
						break;
					case OCTAL_LITERAL:
						{
						int LA83_35 = input.LA(3);

						if ((EvaluatePredicate(synpred159_C_fragment)))
						{
							alt83 = 1;
						}


						}
						break;
					case DECIMAL_LITERAL:
						{
						int LA83_36 = input.LA(3);

						if ((EvaluatePredicate(synpred159_C_fragment)))
						{
							alt83 = 1;
						}


						}
						break;
					case CHARACTER_LITERAL:
						{
						int LA83_37 = input.LA(3);

						if ((EvaluatePredicate(synpred159_C_fragment)))
						{
							alt83 = 1;
						}


						}
						break;
					case STRING_LITERAL:
						{
						int LA83_38 = input.LA(3);

						if ((EvaluatePredicate(synpred159_C_fragment)))
						{
							alt83 = 1;
						}


						}
						break;
					case FLOATING_POINT_LITERAL:
						{
						int LA83_39 = input.LA(3);

						if ((EvaluatePredicate(synpred159_C_fragment)))
						{
							alt83 = 1;
						}


						}
						break;
					case 67:
						{
						int LA83_40 = input.LA(3);

						if ((EvaluatePredicate(synpred159_C_fragment)))
						{
							alt83 = 1;
						}


						}
						break;
					case 66:
						{
						int LA83_41 = input.LA(3);

						if ((EvaluatePredicate(synpred159_C_fragment)))
						{
							alt83 = 1;
						}


						}
						break;
					case 35:
						{
						int LA83_42 = input.LA(3);

						if ((EvaluatePredicate(synpred159_C_fragment)))
						{
							alt83 = 1;
						}


						}
						break;
					case 39:
						{
						int LA83_43 = input.LA(3);

						if ((EvaluatePredicate(synpred159_C_fragment)))
						{
							alt83 = 1;
						}


						}
						break;
					case 23:
					case 28:
					case 32:
					case 34:
					case 38:
					case 119:
						{
						int LA83_44 = input.LA(3);

						if ((EvaluatePredicate(synpred159_C_fragment)))
						{
							alt83 = 1;
						}


						}
						break;
					case 103:
						{
						int LA83_45 = input.LA(3);

						if ((EvaluatePredicate(synpred159_C_fragment)))
						{
							alt83 = 1;
						}


						}
						break;
					case 63:
						{
						int LA83_46 = input.LA(3);

						if ((EvaluatePredicate(synpred159_C_fragment)))
						{
							alt83 = 1;
						}


						}
						break;
					case 71:
						{
						int LA83_47 = input.LA(3);

						if ((EvaluatePredicate(synpred159_C_fragment)))
						{
							alt83 = 1;
						}


						}
						break;
					}

				}


				} finally { DebugExitDecision(83); }
				switch ( alt83 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:456:25: '&' equality_expression
					{
					DebugLocation(456, 25);
					char_literal279=(IToken)Match(input,28,Follow._28_in_and_expression1857); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal279_tree = (object)adaptor.Create(char_literal279, retval);
					adaptor.AddChild(root_0, char_literal279_tree);
					}
					DebugLocation(456, 29);
					PushFollow(Follow._equality_expression_in_and_expression1859);
					equality_expression280=equality_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equality_expression280.Tree, equality_expression280, retval);

					}
					break;

				default:
					goto loop83;
				}
			}

			loop83:
				;

			} finally { DebugExitSubRule(83); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expression", 63);
			LeaveRule("and_expression", 63);
			LeaveRule_and_expression();
			if (state.backtracking > 0) { Memoize(input, 63, and_expression_StartIndex); }

		}
		DebugLocation(457, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expression"); }
		return retval;

	}
	// $ANTLR end "and_expression"

	partial void EnterRule_equality_expression();
	partial void LeaveRule_equality_expression();

	// $ANTLR start "equality_expression"
	// C.g:458:1: equality_expression : relational_expression ( ( '==' | '!=' ) relational_expression )* ;
	[GrammarRule("equality_expression")]
	public XAstParserRuleReturnScope equality_expression()
	{
		EnterRule_equality_expression();
		EnterRule("equality_expression", 64);
		var retval = new XAstParserRuleReturnScope("equality_expression");
		
		retval.Start = (IToken)input.LT(1);
		int equality_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set282 = default(IToken);
		XAstParserRuleReturnScope relational_expression281 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope relational_expression283 = default(XAstParserRuleReturnScope);

		object set282_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "equality_expression");
		DebugLocation(458, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// C.g:459:2: ( relational_expression ( ( '==' | '!=' ) relational_expression )* )
			DebugEnterAlt(1);
			// C.g:459:4: relational_expression ( ( '==' | '!=' ) relational_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(459, 4);
			PushFollow(Follow._relational_expression_in_equality_expression1871);
			relational_expression281=relational_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, relational_expression281.Tree, relational_expression281, retval);
			DebugLocation(459, 26);
			// C.g:459:26: ( ( '==' | '!=' ) relational_expression )*
			try { DebugEnterSubRule(84);
			while (true)
			{
				int alt84=2;
				try { DebugEnterDecision(84, false);
				int LA84_0 = input.LA(1);

				if ((LA84_0==24||LA84_0==53))
				{
					alt84 = 1;
				}


				} finally { DebugExitDecision(84); }
				switch ( alt84 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:459:27: ( '==' | '!=' ) relational_expression
					{
					DebugLocation(459, 27);

					set282=(IToken)input.LT(1);
					if (input.LA(1)==24||input.LA(1)==53)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set282, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(459, 39);
					PushFollow(Follow._relational_expression_in_equality_expression1880);
					relational_expression283=relational_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, relational_expression283.Tree, relational_expression283, retval);

					}
					break;

				default:
					goto loop84;
				}
			}

			loop84:
				;

			} finally { DebugExitSubRule(84); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equality_expression", 64);
			LeaveRule("equality_expression", 64);
			LeaveRule_equality_expression();
			if (state.backtracking > 0) { Memoize(input, 64, equality_expression_StartIndex); }

		}
		DebugLocation(460, 1);
		} finally { DebugExitRule(GrammarFileName, "equality_expression"); }
		return retval;

	}
	// $ANTLR end "equality_expression"

	partial void EnterRule_relational_expression();
	partial void LeaveRule_relational_expression();

	// $ANTLR start "relational_expression"
	// C.g:462:1: relational_expression : shift_expression ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* ;
	[GrammarRule("relational_expression")]
	public XAstParserRuleReturnScope relational_expression()
	{
		EnterRule_relational_expression();
		EnterRule("relational_expression", 65);
		var retval = new XAstParserRuleReturnScope("relational_expression");
		
		retval.Start = (IToken)input.LT(1);
		int relational_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set285 = default(IToken);
		XAstParserRuleReturnScope shift_expression284 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope shift_expression286 = default(XAstParserRuleReturnScope);

		object set285_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "relational_expression");
		DebugLocation(462, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// C.g:463:2: ( shift_expression ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* )
			DebugEnterAlt(1);
			// C.g:463:4: shift_expression ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(463, 4);
			PushFollow(Follow._shift_expression_in_relational_expression1893);
			shift_expression284=shift_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expression284.Tree, shift_expression284, retval);
			DebugLocation(463, 21);
			// C.g:463:21: ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*
			try { DebugEnterSubRule(85);
			while (true)
			{
				int alt85=2;
				try { DebugEnterDecision(85, false);
				int LA85_0 = input.LA(1);

				if ((LA85_0==48||LA85_0==51||(LA85_0>=54 && LA85_0<=55)))
				{
					alt85 = 1;
				}


				} finally { DebugExitDecision(85); }
				switch ( alt85 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:463:22: ( '<' | '>' | '<=' | '>=' ) shift_expression
					{
					DebugLocation(463, 22);

					set285=(IToken)input.LT(1);
					if (input.LA(1)==48||input.LA(1)==51||(input.LA(1)>=54 && input.LA(1)<=55))
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set285, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(463, 42);
					PushFollow(Follow._shift_expression_in_relational_expression1906);
					shift_expression286=shift_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expression286.Tree, shift_expression286, retval);

					}
					break;

				default:
					goto loop85;
				}
			}

			loop85:
				;

			} finally { DebugExitSubRule(85); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relational_expression", 65);
			LeaveRule("relational_expression", 65);
			LeaveRule_relational_expression();
			if (state.backtracking > 0) { Memoize(input, 65, relational_expression_StartIndex); }

		}
		DebugLocation(464, 1);
		} finally { DebugExitRule(GrammarFileName, "relational_expression"); }
		return retval;

	}
	// $ANTLR end "relational_expression"

	partial void EnterRule_shift_expression();
	partial void LeaveRule_shift_expression();

	// $ANTLR start "shift_expression"
	// C.g:466:1: shift_expression : additive_expression ( ( '<<' | '>>' ) additive_expression )* ;
	[GrammarRule("shift_expression")]
	public XAstParserRuleReturnScope shift_expression()
	{
		EnterRule_shift_expression();
		EnterRule("shift_expression", 66);
		var retval = new XAstParserRuleReturnScope("shift_expression");
		
		retval.Start = (IToken)input.LT(1);
		int shift_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set288 = default(IToken);
		XAstParserRuleReturnScope additive_expression287 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope additive_expression289 = default(XAstParserRuleReturnScope);

		object set288_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "shift_expression");
		DebugLocation(466, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }

			// C.g:467:2: ( additive_expression ( ( '<<' | '>>' ) additive_expression )* )
			DebugEnterAlt(1);
			// C.g:467:4: additive_expression ( ( '<<' | '>>' ) additive_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(467, 4);
			PushFollow(Follow._additive_expression_in_shift_expression1919);
			additive_expression287=additive_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, additive_expression287.Tree, additive_expression287, retval);
			DebugLocation(467, 24);
			// C.g:467:24: ( ( '<<' | '>>' ) additive_expression )*
			try { DebugEnterSubRule(86);
			while (true)
			{
				int alt86=2;
				try { DebugEnterDecision(86, false);
				int LA86_0 = input.LA(1);

				if ((LA86_0==49||LA86_0==56))
				{
					alt86 = 1;
				}


				} finally { DebugExitDecision(86); }
				switch ( alt86 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:467:25: ( '<<' | '>>' ) additive_expression
					{
					DebugLocation(467, 25);

					set288=(IToken)input.LT(1);
					if (input.LA(1)==49||input.LA(1)==56)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set288, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(467, 37);
					PushFollow(Follow._additive_expression_in_shift_expression1928);
					additive_expression289=additive_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, additive_expression289.Tree, additive_expression289, retval);

					}
					break;

				default:
					goto loop86;
				}
			}

			loop86:
				;

			} finally { DebugExitSubRule(86); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expression", 66);
			LeaveRule("shift_expression", 66);
			LeaveRule_shift_expression();
			if (state.backtracking > 0) { Memoize(input, 66, shift_expression_StartIndex); }

		}
		DebugLocation(468, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expression"); }
		return retval;

	}
	// $ANTLR end "shift_expression"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// C.g:472:1: statement : ( labeled_statement | compound_statement | expression_statement | selection_statement | iteration_statement | jump_statement | gcc_asm_statement );
	[GrammarRule("statement")]
	public XAstParserRuleReturnScope statement()
	{
		EnterRule_statement();
		EnterRule("statement", 67);
		var retval = new XAstParserRuleReturnScope("statement");
		
		retval.Start = (IToken)input.LT(1);
		int statement_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope labeled_statement290 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope compound_statement291 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_statement292 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope selection_statement293 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope iteration_statement294 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope jump_statement295 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_asm_statement296 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(472, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return retval; }

			// C.g:473:2: ( labeled_statement | compound_statement | expression_statement | selection_statement | iteration_statement | jump_statement | gcc_asm_statement )
			int alt87=7;
			try { DebugEnterDecision(87, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				int LA87_1 = input.LA(2);

				if ((LA87_1==46))
				{
					alt87 = 1;
				}
				else if (((LA87_1>=24 && LA87_1<=30)||(LA87_1>=32 && LA87_1<=42)||(LA87_1>=44 && LA87_1<=45)||(LA87_1>=47 && LA87_1<=59)||(LA87_1>=61 && LA87_1<=62)||(LA87_1>=115 && LA87_1<=117)))
				{
					alt87 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 81:
			case 85:
				{
				alt87 = 1;
				}
				break;
			case 114:
				{
				alt87 = 2;
				}
				break;
			case CHARACTER_LITERAL:
			case DECIMAL_LITERAL:
			case FLOATING_POINT_LITERAL:
			case HEX_LITERAL:
			case OCTAL_LITERAL:
			case STRING_LITERAL:
			case 23:
			case 28:
			case 30:
			case 32:
			case 34:
			case 35:
			case 38:
			case 39:
			case 47:
			case 63:
			case 66:
			case 67:
			case 71:
			case 103:
			case 119:
				{
				alt87 = 3;
				}
				break;
			case 94:
			case 106:
				{
				alt87 = 4;
				}
				break;
			case 86:
			case 92:
			case 113:
				{
				alt87 = 5;
				}
				break;
			case 80:
			case 84:
			case 93:
			case 100:
				{
				alt87 = 6;
				}
				break;
			case 64:
			case 78:
				{
				alt87 = 7;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:473:4: labeled_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(473, 4);
				PushFollow(Follow._labeled_statement_in_statement1943);
				labeled_statement290=labeled_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, labeled_statement290.Tree, labeled_statement290, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:474:4: compound_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(474, 4);
				PushFollow(Follow._compound_statement_in_statement1948);
				compound_statement291=compound_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, compound_statement291.Tree, compound_statement291, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:475:4: expression_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(475, 4);
				PushFollow(Follow._expression_statement_in_statement1953);
				expression_statement292=expression_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_statement292.Tree, expression_statement292, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:476:4: selection_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(476, 4);
				PushFollow(Follow._selection_statement_in_statement1958);
				selection_statement293=selection_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selection_statement293.Tree, selection_statement293, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:477:4: iteration_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(477, 4);
				PushFollow(Follow._iteration_statement_in_statement1963);
				iteration_statement294=iteration_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, iteration_statement294.Tree, iteration_statement294, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C.g:478:4: jump_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(478, 4);
				PushFollow(Follow._jump_statement_in_statement1968);
				jump_statement295=jump_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, jump_statement295.Tree, jump_statement295, retval);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C.g:479:4: gcc_asm_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(479, 4);
				PushFollow(Follow._gcc_asm_statement_in_statement1973);
				gcc_asm_statement296=gcc_asm_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_asm_statement296.Tree, gcc_asm_statement296, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 67);
			LeaveRule("statement", 67);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 67, statement_StartIndex); }

		}
		DebugLocation(480, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_labeled_statement();
	partial void LeaveRule_labeled_statement();

	// $ANTLR start "labeled_statement"
	// C.g:482:1: labeled_statement : ( IDENTIFIER ':' statement | 'case' constant_expression ':' statement | 'default' ':' statement );
	[GrammarRule("labeled_statement")]
	public XAstParserRuleReturnScope labeled_statement()
	{
		EnterRule_labeled_statement();
		EnterRule("labeled_statement", 68);
		var retval = new XAstParserRuleReturnScope("labeled_statement");
		
		retval.Start = (IToken)input.LT(1);
		int labeled_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER297 = default(IToken);
		IToken char_literal298 = default(IToken);
		IToken string_literal300 = default(IToken);
		IToken char_literal302 = default(IToken);
		IToken string_literal304 = default(IToken);
		IToken char_literal305 = default(IToken);
		XAstParserRuleReturnScope statement299 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression301 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement303 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement306 = default(XAstParserRuleReturnScope);

		object IDENTIFIER297_tree = default(object);
		object char_literal298_tree = default(object);
		object string_literal300_tree = default(object);
		object char_literal302_tree = default(object);
		object string_literal304_tree = default(object);
		object char_literal305_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "labeled_statement");
		DebugLocation(482, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return retval; }

			// C.g:483:2: ( IDENTIFIER ':' statement | 'case' constant_expression ':' statement | 'default' ':' statement )
			int alt88=3;
			try { DebugEnterDecision(88, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				alt88 = 1;
				}
				break;
			case 81:
				{
				alt88 = 2;
				}
				break;
			case 85:
				{
				alt88 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:483:4: IDENTIFIER ':' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(483, 4);
				IDENTIFIER297=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_labeled_statement1984), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER297_tree = (object)adaptor.Create(IDENTIFIER297, retval);
				adaptor.AddChild(root_0, IDENTIFIER297_tree);
				}
				DebugLocation(483, 15);
				char_literal298=(IToken)Match(input,46,Follow._46_in_labeled_statement1986); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal298_tree = (object)adaptor.Create(char_literal298, retval);
				adaptor.AddChild(root_0, char_literal298_tree);
				}
				DebugLocation(483, 19);
				PushFollow(Follow._statement_in_labeled_statement1988);
				statement299=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement299.Tree, statement299, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:484:4: 'case' constant_expression ':' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(484, 4);
				string_literal300=(IToken)Match(input,81,Follow._81_in_labeled_statement1993); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal300_tree = (object)adaptor.Create(string_literal300, retval);
				adaptor.AddChild(root_0, string_literal300_tree);
				}
				DebugLocation(484, 11);
				PushFollow(Follow._constant_expression_in_labeled_statement1995);
				constant_expression301=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression301.Tree, constant_expression301, retval);
				DebugLocation(484, 31);
				char_literal302=(IToken)Match(input,46,Follow._46_in_labeled_statement1997); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal302_tree = (object)adaptor.Create(char_literal302, retval);
				adaptor.AddChild(root_0, char_literal302_tree);
				}
				DebugLocation(484, 35);
				PushFollow(Follow._statement_in_labeled_statement1999);
				statement303=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement303.Tree, statement303, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:485:4: 'default' ':' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(485, 4);
				string_literal304=(IToken)Match(input,85,Follow._85_in_labeled_statement2004); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal304_tree = (object)adaptor.Create(string_literal304, retval);
				adaptor.AddChild(root_0, string_literal304_tree);
				}
				DebugLocation(485, 14);
				char_literal305=(IToken)Match(input,46,Follow._46_in_labeled_statement2006); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal305_tree = (object)adaptor.Create(char_literal305, retval);
				adaptor.AddChild(root_0, char_literal305_tree);
				}
				DebugLocation(485, 18);
				PushFollow(Follow._statement_in_labeled_statement2008);
				statement306=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement306.Tree, statement306, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("labeled_statement", 68);
			LeaveRule("labeled_statement", 68);
			LeaveRule_labeled_statement();
			if (state.backtracking > 0) { Memoize(input, 68, labeled_statement_StartIndex); }

		}
		DebugLocation(486, 1);
		} finally { DebugExitRule(GrammarFileName, "labeled_statement"); }
		return retval;

	}
	// $ANTLR end "labeled_statement"

	partial void EnterRule_compound_statement();
	partial void LeaveRule_compound_statement();

	// $ANTLR start "compound_statement"
	// C.g:488:1: compound_statement : '{' ( block_item )* '}' ;
	[GrammarRule("compound_statement")]
	public XAstParserRuleReturnScope compound_statement()
	{
		EnterRule_compound_statement();
		EnterRule("compound_statement", 69);
		var retval = new XAstParserRuleReturnScope("compound_statement");
		Symbols_stack.Push(new Symbols_scope(this));Symbols_scopeInit(Symbols_stack.Peek());

		
		retval.Start = (IToken)input.LT(1);
		int compound_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal307 = default(IToken);
		IToken char_literal309 = default(IToken);
		XAstParserRuleReturnScope block_item308 = default(XAstParserRuleReturnScope);

		object char_literal307_tree = default(object);
		object char_literal309_tree = default(object);

		  Symbols_stack.Peek().types =  new HashSet<string>();

		try { DebugEnterRule(GrammarFileName, "compound_statement");
		DebugLocation(488, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return retval; }

			// C.g:493:2: ( '{' ( block_item )* '}' )
			DebugEnterAlt(1);
			// C.g:493:4: '{' ( block_item )* '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(493, 4);
			char_literal307=(IToken)Match(input,114,Follow._114_in_compound_statement2030); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal307_tree = (object)adaptor.Create(char_literal307, retval);
			adaptor.AddChild(root_0, char_literal307_tree);
			}
			DebugLocation(493, 8);
			// C.g:493:8: ( block_item )*
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==CHARACTER_LITERAL||LA89_0==DECIMAL_LITERAL||LA89_0==FLOATING_POINT_LITERAL||LA89_0==HEX_LITERAL||LA89_0==IDENTIFIER||LA89_0==OCTAL_LITERAL||LA89_0==STRING_LITERAL||LA89_0==23||LA89_0==28||LA89_0==30||LA89_0==32||(LA89_0>=34 && LA89_0<=35)||(LA89_0>=38 && LA89_0<=39)||LA89_0==47||(LA89_0>=63 && LA89_0<=87)||(LA89_0>=89 && LA89_0<=114)||LA89_0==119))
				{
					alt89 = 1;
				}


				} finally { DebugExitDecision(89); }
				switch ( alt89 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:493:8: block_item
					{
					DebugLocation(493, 8);
					PushFollow(Follow._block_item_in_compound_statement2032);
					block_item308=block_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, block_item308.Tree, block_item308, retval);

					}
					break;

				default:
					goto loop89;
				}
			}

			loop89:
				;

			} finally { DebugExitSubRule(89); }

			DebugLocation(493, 20);
			char_literal309=(IToken)Match(input,118,Follow._118_in_compound_statement2035); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal309_tree = (object)adaptor.Create(char_literal309, retval);
			adaptor.AddChild(root_0, char_literal309_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("compound_statement", 69);
			LeaveRule("compound_statement", 69);
			LeaveRule_compound_statement();
			if (state.backtracking > 0) { Memoize(input, 69, compound_statement_StartIndex); }

			Symbols_scopeAfter(Symbols_stack.Peek());Symbols_stack.Pop();

		}
		DebugLocation(494, 1);
		} finally { DebugExitRule(GrammarFileName, "compound_statement"); }
		return retval;

	}
	// $ANTLR end "compound_statement"

	partial void EnterRule_block_item();
	partial void LeaveRule_block_item();

	// $ANTLR start "block_item"
	// C.g:496:1: block_item : ( declaration | statement );
	[GrammarRule("block_item")]
	public XAstParserRuleReturnScope block_item()
	{
		EnterRule_block_item();
		EnterRule("block_item", 70);
		var retval = new XAstParserRuleReturnScope("block_item");
		
		retval.Start = (IToken)input.LT(1);
		int block_item_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope declaration310 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement311 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "block_item");
		DebugLocation(496, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return retval; }

			// C.g:497:2: ( declaration | statement )
			int alt90=2;
			try { DebugEnterDecision(90, false);
			try
			{
				alt90 = dfa90.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:497:4: declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(497, 4);
				PushFollow(Follow._declaration_in_block_item2046);
				declaration310=declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration310.Tree, declaration310, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:497:18: statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(497, 18);
				PushFollow(Follow._statement_in_block_item2050);
				statement311=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement311.Tree, statement311, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block_item", 70);
			LeaveRule("block_item", 70);
			LeaveRule_block_item();
			if (state.backtracking > 0) { Memoize(input, 70, block_item_StartIndex); }

		}
		DebugLocation(498, 1);
		} finally { DebugExitRule(GrammarFileName, "block_item"); }
		return retval;

	}
	// $ANTLR end "block_item"

	partial void EnterRule_expression_statement();
	partial void LeaveRule_expression_statement();

	// $ANTLR start "expression_statement"
	// C.g:500:1: expression_statement : ( ';' | expression ';' );
	[GrammarRule("expression_statement")]
	public XAstParserRuleReturnScope expression_statement()
	{
		EnterRule_expression_statement();
		EnterRule("expression_statement", 71);
		var retval = new XAstParserRuleReturnScope("expression_statement");
		
		retval.Start = (IToken)input.LT(1);
		int expression_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal312 = default(IToken);
		IToken char_literal314 = default(IToken);
		XAstParserRuleReturnScope expression313 = default(XAstParserRuleReturnScope);

		object char_literal312_tree = default(object);
		object char_literal314_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expression_statement");
		DebugLocation(500, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return retval; }

			// C.g:501:2: ( ';' | expression ';' )
			int alt91=2;
			try { DebugEnterDecision(91, false);
			int LA91_0 = input.LA(1);

			if ((LA91_0==47))
			{
				alt91 = 1;
			}
			else if ((LA91_0==CHARACTER_LITERAL||LA91_0==DECIMAL_LITERAL||LA91_0==FLOATING_POINT_LITERAL||LA91_0==HEX_LITERAL||LA91_0==IDENTIFIER||LA91_0==OCTAL_LITERAL||LA91_0==STRING_LITERAL||LA91_0==23||LA91_0==28||LA91_0==30||LA91_0==32||(LA91_0>=34 && LA91_0<=35)||(LA91_0>=38 && LA91_0<=39)||LA91_0==63||(LA91_0>=66 && LA91_0<=67)||LA91_0==71||LA91_0==103||LA91_0==119))
			{
				alt91 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 91, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(91); }
			switch (alt91)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:501:4: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(501, 4);
				char_literal312=(IToken)Match(input,47,Follow._47_in_expression_statement2061); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal312_tree = (object)adaptor.Create(char_literal312, retval);
				adaptor.AddChild(root_0, char_literal312_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:502:4: expression ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(502, 4);
				PushFollow(Follow._expression_in_expression_statement2066);
				expression313=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression313.Tree, expression313, retval);
				DebugLocation(502, 15);
				char_literal314=(IToken)Match(input,47,Follow._47_in_expression_statement2068); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal314_tree = (object)adaptor.Create(char_literal314, retval);
				adaptor.AddChild(root_0, char_literal314_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_statement", 71);
			LeaveRule("expression_statement", 71);
			LeaveRule_expression_statement();
			if (state.backtracking > 0) { Memoize(input, 71, expression_statement_StartIndex); }

		}
		DebugLocation(503, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_statement"); }
		return retval;

	}
	// $ANTLR end "expression_statement"

	partial void EnterRule_selection_statement();
	partial void LeaveRule_selection_statement();

	// $ANTLR start "selection_statement"
	// C.g:505:1: selection_statement : ( 'if' '(' expression ')' statement ( options {k=1; backtrack=false; } : 'else' statement )? | 'switch' '(' expression ')' statement );
	[GrammarRule("selection_statement")]
	public XAstParserRuleReturnScope selection_statement()
	{
		EnterRule_selection_statement();
		EnterRule("selection_statement", 72);
		var retval = new XAstParserRuleReturnScope("selection_statement");
		
		retval.Start = (IToken)input.LT(1);
		int selection_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal315 = default(IToken);
		IToken char_literal316 = default(IToken);
		IToken char_literal318 = default(IToken);
		IToken string_literal320 = default(IToken);
		IToken string_literal322 = default(IToken);
		IToken char_literal323 = default(IToken);
		IToken char_literal325 = default(IToken);
		XAstParserRuleReturnScope expression317 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement319 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement321 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression324 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement326 = default(XAstParserRuleReturnScope);

		object string_literal315_tree = default(object);
		object char_literal316_tree = default(object);
		object char_literal318_tree = default(object);
		object string_literal320_tree = default(object);
		object string_literal322_tree = default(object);
		object char_literal323_tree = default(object);
		object char_literal325_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "selection_statement");
		DebugLocation(505, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return retval; }

			// C.g:506:2: ( 'if' '(' expression ')' statement ( options {k=1; backtrack=false; } : 'else' statement )? | 'switch' '(' expression ')' statement )
			int alt93=2;
			try { DebugEnterDecision(93, false);
			int LA93_0 = input.LA(1);

			if ((LA93_0==94))
			{
				alt93 = 1;
			}
			else if ((LA93_0==106))
			{
				alt93 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 93, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(93); }
			switch (alt93)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:506:4: 'if' '(' expression ')' statement ( options {k=1; backtrack=false; } : 'else' statement )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(506, 4);
				string_literal315=(IToken)Match(input,94,Follow._94_in_selection_statement2079); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal315_tree = (object)adaptor.Create(string_literal315, retval);
				adaptor.AddChild(root_0, string_literal315_tree);
				}
				DebugLocation(506, 9);
				char_literal316=(IToken)Match(input,30,Follow._30_in_selection_statement2081); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal316_tree = (object)adaptor.Create(char_literal316, retval);
				adaptor.AddChild(root_0, char_literal316_tree);
				}
				DebugLocation(506, 13);
				PushFollow(Follow._expression_in_selection_statement2083);
				expression317=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression317.Tree, expression317, retval);
				DebugLocation(506, 24);
				char_literal318=(IToken)Match(input,31,Follow._31_in_selection_statement2085); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal318_tree = (object)adaptor.Create(char_literal318, retval);
				adaptor.AddChild(root_0, char_literal318_tree);
				}
				DebugLocation(506, 28);
				PushFollow(Follow._statement_in_selection_statement2087);
				statement319=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement319.Tree, statement319, retval);
				DebugLocation(506, 38);
				// C.g:506:38: ( options {k=1; backtrack=false; } : 'else' statement )?
				int alt92=2;
				try { DebugEnterSubRule(92);
				try { DebugEnterDecision(92, false);
				int LA92_0 = input.LA(1);

				if ((LA92_0==88))
				{
					int LA92_1 = input.LA(2);

					if ((true))
					{
						alt92 = 1;
					}
				}
				} finally { DebugExitDecision(92); }
				switch (alt92)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:506:71: 'else' statement
					{
					DebugLocation(506, 71);
					string_literal320=(IToken)Match(input,88,Follow._88_in_selection_statement2102); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal320_tree = (object)adaptor.Create(string_literal320, retval);
					adaptor.AddChild(root_0, string_literal320_tree);
					}
					DebugLocation(506, 78);
					PushFollow(Follow._statement_in_selection_statement2104);
					statement321=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement321.Tree, statement321, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(92); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:507:4: 'switch' '(' expression ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(507, 4);
				string_literal322=(IToken)Match(input,106,Follow._106_in_selection_statement2111); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal322_tree = (object)adaptor.Create(string_literal322, retval);
				adaptor.AddChild(root_0, string_literal322_tree);
				}
				DebugLocation(507, 13);
				char_literal323=(IToken)Match(input,30,Follow._30_in_selection_statement2113); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal323_tree = (object)adaptor.Create(char_literal323, retval);
				adaptor.AddChild(root_0, char_literal323_tree);
				}
				DebugLocation(507, 17);
				PushFollow(Follow._expression_in_selection_statement2115);
				expression324=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression324.Tree, expression324, retval);
				DebugLocation(507, 28);
				char_literal325=(IToken)Match(input,31,Follow._31_in_selection_statement2117); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal325_tree = (object)adaptor.Create(char_literal325, retval);
				adaptor.AddChild(root_0, char_literal325_tree);
				}
				DebugLocation(507, 32);
				PushFollow(Follow._statement_in_selection_statement2119);
				statement326=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement326.Tree, statement326, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selection_statement", 72);
			LeaveRule("selection_statement", 72);
			LeaveRule_selection_statement();
			if (state.backtracking > 0) { Memoize(input, 72, selection_statement_StartIndex); }

		}
		DebugLocation(508, 1);
		} finally { DebugExitRule(GrammarFileName, "selection_statement"); }
		return retval;

	}
	// $ANTLR end "selection_statement"

	partial void EnterRule_iteration_statement();
	partial void LeaveRule_iteration_statement();

	// $ANTLR start "iteration_statement"
	// C.g:510:1: iteration_statement : ( 'while' '(' expression ')' statement | 'do' statement 'while' '(' expression ')' ';' | 'for' '(' expression_statement expression_statement ( expression )? ')' statement );
	[GrammarRule("iteration_statement")]
	public XAstParserRuleReturnScope iteration_statement()
	{
		EnterRule_iteration_statement();
		EnterRule("iteration_statement", 73);
		var retval = new XAstParserRuleReturnScope("iteration_statement");
		
		retval.Start = (IToken)input.LT(1);
		int iteration_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal327 = default(IToken);
		IToken char_literal328 = default(IToken);
		IToken char_literal330 = default(IToken);
		IToken string_literal332 = default(IToken);
		IToken string_literal334 = default(IToken);
		IToken char_literal335 = default(IToken);
		IToken char_literal337 = default(IToken);
		IToken char_literal338 = default(IToken);
		IToken string_literal339 = default(IToken);
		IToken char_literal340 = default(IToken);
		IToken char_literal344 = default(IToken);
		XAstParserRuleReturnScope expression329 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement331 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement333 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression336 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_statement341 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_statement342 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression343 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement345 = default(XAstParserRuleReturnScope);

		object string_literal327_tree = default(object);
		object char_literal328_tree = default(object);
		object char_literal330_tree = default(object);
		object string_literal332_tree = default(object);
		object string_literal334_tree = default(object);
		object char_literal335_tree = default(object);
		object char_literal337_tree = default(object);
		object char_literal338_tree = default(object);
		object string_literal339_tree = default(object);
		object char_literal340_tree = default(object);
		object char_literal344_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "iteration_statement");
		DebugLocation(510, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return retval; }

			// C.g:511:2: ( 'while' '(' expression ')' statement | 'do' statement 'while' '(' expression ')' ';' | 'for' '(' expression_statement expression_statement ( expression )? ')' statement )
			int alt95=3;
			try { DebugEnterDecision(95, false);
			switch (input.LA(1))
			{
			case 113:
				{
				alt95 = 1;
				}
				break;
			case 86:
				{
				alt95 = 2;
				}
				break;
			case 92:
				{
				alt95 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(95); }
			switch (alt95)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:511:4: 'while' '(' expression ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(511, 4);
				string_literal327=(IToken)Match(input,113,Follow._113_in_iteration_statement2130); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal327_tree = (object)adaptor.Create(string_literal327, retval);
				adaptor.AddChild(root_0, string_literal327_tree);
				}
				DebugLocation(511, 12);
				char_literal328=(IToken)Match(input,30,Follow._30_in_iteration_statement2132); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal328_tree = (object)adaptor.Create(char_literal328, retval);
				adaptor.AddChild(root_0, char_literal328_tree);
				}
				DebugLocation(511, 16);
				PushFollow(Follow._expression_in_iteration_statement2134);
				expression329=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression329.Tree, expression329, retval);
				DebugLocation(511, 27);
				char_literal330=(IToken)Match(input,31,Follow._31_in_iteration_statement2136); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal330_tree = (object)adaptor.Create(char_literal330, retval);
				adaptor.AddChild(root_0, char_literal330_tree);
				}
				DebugLocation(511, 31);
				PushFollow(Follow._statement_in_iteration_statement2138);
				statement331=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement331.Tree, statement331, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:512:4: 'do' statement 'while' '(' expression ')' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(512, 4);
				string_literal332=(IToken)Match(input,86,Follow._86_in_iteration_statement2143); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal332_tree = (object)adaptor.Create(string_literal332, retval);
				adaptor.AddChild(root_0, string_literal332_tree);
				}
				DebugLocation(512, 9);
				PushFollow(Follow._statement_in_iteration_statement2145);
				statement333=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement333.Tree, statement333, retval);
				DebugLocation(512, 19);
				string_literal334=(IToken)Match(input,113,Follow._113_in_iteration_statement2147); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal334_tree = (object)adaptor.Create(string_literal334, retval);
				adaptor.AddChild(root_0, string_literal334_tree);
				}
				DebugLocation(512, 27);
				char_literal335=(IToken)Match(input,30,Follow._30_in_iteration_statement2149); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal335_tree = (object)adaptor.Create(char_literal335, retval);
				adaptor.AddChild(root_0, char_literal335_tree);
				}
				DebugLocation(512, 31);
				PushFollow(Follow._expression_in_iteration_statement2151);
				expression336=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression336.Tree, expression336, retval);
				DebugLocation(512, 42);
				char_literal337=(IToken)Match(input,31,Follow._31_in_iteration_statement2153); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal337_tree = (object)adaptor.Create(char_literal337, retval);
				adaptor.AddChild(root_0, char_literal337_tree);
				}
				DebugLocation(512, 46);
				char_literal338=(IToken)Match(input,47,Follow._47_in_iteration_statement2155); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal338_tree = (object)adaptor.Create(char_literal338, retval);
				adaptor.AddChild(root_0, char_literal338_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:513:4: 'for' '(' expression_statement expression_statement ( expression )? ')' statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(513, 4);
				string_literal339=(IToken)Match(input,92,Follow._92_in_iteration_statement2160); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal339_tree = (object)adaptor.Create(string_literal339, retval);
				adaptor.AddChild(root_0, string_literal339_tree);
				}
				DebugLocation(513, 10);
				char_literal340=(IToken)Match(input,30,Follow._30_in_iteration_statement2162); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal340_tree = (object)adaptor.Create(char_literal340, retval);
				adaptor.AddChild(root_0, char_literal340_tree);
				}
				DebugLocation(513, 14);
				PushFollow(Follow._expression_statement_in_iteration_statement2164);
				expression_statement341=expression_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_statement341.Tree, expression_statement341, retval);
				DebugLocation(513, 35);
				PushFollow(Follow._expression_statement_in_iteration_statement2166);
				expression_statement342=expression_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_statement342.Tree, expression_statement342, retval);
				DebugLocation(513, 56);
				// C.g:513:56: ( expression )?
				int alt94=2;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, false);
				int LA94_0 = input.LA(1);

				if ((LA94_0==CHARACTER_LITERAL||LA94_0==DECIMAL_LITERAL||LA94_0==FLOATING_POINT_LITERAL||LA94_0==HEX_LITERAL||LA94_0==IDENTIFIER||LA94_0==OCTAL_LITERAL||LA94_0==STRING_LITERAL||LA94_0==23||LA94_0==28||LA94_0==30||LA94_0==32||(LA94_0>=34 && LA94_0<=35)||(LA94_0>=38 && LA94_0<=39)||LA94_0==63||(LA94_0>=66 && LA94_0<=67)||LA94_0==71||LA94_0==103||LA94_0==119))
				{
					alt94 = 1;
				}
				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:513:56: expression
					{
					DebugLocation(513, 56);
					PushFollow(Follow._expression_in_iteration_statement2168);
					expression343=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression343.Tree, expression343, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(94); }

				DebugLocation(513, 68);
				char_literal344=(IToken)Match(input,31,Follow._31_in_iteration_statement2171); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal344_tree = (object)adaptor.Create(char_literal344, retval);
				adaptor.AddChild(root_0, char_literal344_tree);
				}
				DebugLocation(513, 72);
				PushFollow(Follow._statement_in_iteration_statement2173);
				statement345=statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement345.Tree, statement345, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("iteration_statement", 73);
			LeaveRule("iteration_statement", 73);
			LeaveRule_iteration_statement();
			if (state.backtracking > 0) { Memoize(input, 73, iteration_statement_StartIndex); }

		}
		DebugLocation(514, 1);
		} finally { DebugExitRule(GrammarFileName, "iteration_statement"); }
		return retval;

	}
	// $ANTLR end "iteration_statement"

	partial void EnterRule_jump_statement();
	partial void LeaveRule_jump_statement();

	// $ANTLR start "jump_statement"
	// C.g:516:1: jump_statement : ( 'goto' IDENTIFIER ';' | 'continue' ';' | 'break' ';' | 'return' ';' | 'return' expression ';' );
	[GrammarRule("jump_statement")]
	public XAstParserRuleReturnScope jump_statement()
	{
		EnterRule_jump_statement();
		EnterRule("jump_statement", 74);
		var retval = new XAstParserRuleReturnScope("jump_statement");
		
		retval.Start = (IToken)input.LT(1);
		int jump_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal346 = default(IToken);
		IToken IDENTIFIER347 = default(IToken);
		IToken char_literal348 = default(IToken);
		IToken string_literal349 = default(IToken);
		IToken char_literal350 = default(IToken);
		IToken string_literal351 = default(IToken);
		IToken char_literal352 = default(IToken);
		IToken string_literal353 = default(IToken);
		IToken char_literal354 = default(IToken);
		IToken string_literal355 = default(IToken);
		IToken char_literal357 = default(IToken);
		XAstParserRuleReturnScope expression356 = default(XAstParserRuleReturnScope);

		object string_literal346_tree = default(object);
		object IDENTIFIER347_tree = default(object);
		object char_literal348_tree = default(object);
		object string_literal349_tree = default(object);
		object char_literal350_tree = default(object);
		object string_literal351_tree = default(object);
		object char_literal352_tree = default(object);
		object string_literal353_tree = default(object);
		object char_literal354_tree = default(object);
		object string_literal355_tree = default(object);
		object char_literal357_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "jump_statement");
		DebugLocation(516, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return retval; }

			// C.g:517:2: ( 'goto' IDENTIFIER ';' | 'continue' ';' | 'break' ';' | 'return' ';' | 'return' expression ';' )
			int alt96=5;
			try { DebugEnterDecision(96, false);
			switch (input.LA(1))
			{
			case 93:
				{
				alt96 = 1;
				}
				break;
			case 84:
				{
				alt96 = 2;
				}
				break;
			case 80:
				{
				alt96 = 3;
				}
				break;
			case 100:
				{
				int LA96_4 = input.LA(2);

				if ((LA96_4==47))
				{
					alt96 = 4;
				}
				else if ((LA96_4==CHARACTER_LITERAL||LA96_4==DECIMAL_LITERAL||LA96_4==FLOATING_POINT_LITERAL||LA96_4==HEX_LITERAL||LA96_4==IDENTIFIER||LA96_4==OCTAL_LITERAL||LA96_4==STRING_LITERAL||LA96_4==23||LA96_4==28||LA96_4==30||LA96_4==32||(LA96_4>=34 && LA96_4<=35)||(LA96_4>=38 && LA96_4<=39)||LA96_4==63||(LA96_4>=66 && LA96_4<=67)||LA96_4==71||LA96_4==103||LA96_4==119))
				{
					alt96 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 96, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 96, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:517:4: 'goto' IDENTIFIER ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(517, 4);
				string_literal346=(IToken)Match(input,93,Follow._93_in_jump_statement2184); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal346_tree = (object)adaptor.Create(string_literal346, retval);
				adaptor.AddChild(root_0, string_literal346_tree);
				}
				DebugLocation(517, 11);
				IDENTIFIER347=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_jump_statement2186), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER347_tree = (object)adaptor.Create(IDENTIFIER347, retval);
				adaptor.AddChild(root_0, IDENTIFIER347_tree);
				}
				DebugLocation(517, 22);
				char_literal348=(IToken)Match(input,47,Follow._47_in_jump_statement2188); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal348_tree = (object)adaptor.Create(char_literal348, retval);
				adaptor.AddChild(root_0, char_literal348_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:518:4: 'continue' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(518, 4);
				string_literal349=(IToken)Match(input,84,Follow._84_in_jump_statement2193); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal349_tree = (object)adaptor.Create(string_literal349, retval);
				adaptor.AddChild(root_0, string_literal349_tree);
				}
				DebugLocation(518, 15);
				char_literal350=(IToken)Match(input,47,Follow._47_in_jump_statement2195); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal350_tree = (object)adaptor.Create(char_literal350, retval);
				adaptor.AddChild(root_0, char_literal350_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:519:4: 'break' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(519, 4);
				string_literal351=(IToken)Match(input,80,Follow._80_in_jump_statement2200); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal351_tree = (object)adaptor.Create(string_literal351, retval);
				adaptor.AddChild(root_0, string_literal351_tree);
				}
				DebugLocation(519, 12);
				char_literal352=(IToken)Match(input,47,Follow._47_in_jump_statement2202); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal352_tree = (object)adaptor.Create(char_literal352, retval);
				adaptor.AddChild(root_0, char_literal352_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:520:4: 'return' ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(520, 4);
				string_literal353=(IToken)Match(input,100,Follow._100_in_jump_statement2207); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal353_tree = (object)adaptor.Create(string_literal353, retval);
				adaptor.AddChild(root_0, string_literal353_tree);
				}
				DebugLocation(520, 13);
				char_literal354=(IToken)Match(input,47,Follow._47_in_jump_statement2209); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal354_tree = (object)adaptor.Create(char_literal354, retval);
				adaptor.AddChild(root_0, char_literal354_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:521:4: 'return' expression ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(521, 4);
				string_literal355=(IToken)Match(input,100,Follow._100_in_jump_statement2214); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal355_tree = (object)adaptor.Create(string_literal355, retval);
				adaptor.AddChild(root_0, string_literal355_tree);
				}
				DebugLocation(521, 13);
				PushFollow(Follow._expression_in_jump_statement2216);
				expression356=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression356.Tree, expression356, retval);
				DebugLocation(521, 24);
				char_literal357=(IToken)Match(input,47,Follow._47_in_jump_statement2218); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal357_tree = (object)adaptor.Create(char_literal357, retval);
				adaptor.AddChild(root_0, char_literal357_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("jump_statement", 74);
			LeaveRule("jump_statement", 74);
			LeaveRule_jump_statement();
			if (state.backtracking > 0) { Memoize(input, 74, jump_statement_StartIndex); }

		}
		DebugLocation(522, 1);
		} finally { DebugExitRule(GrammarFileName, "jump_statement"); }
		return retval;

	}
	// $ANTLR end "jump_statement"

	partial void EnterRule_gcc_function_specifier();
	partial void LeaveRule_gcc_function_specifier();

	// $ANTLR start "gcc_function_specifier"
	// C.g:526:1: gcc_function_specifier : ( 'inline' | '__inline__' | '__inline' | '__builtin_va_list' );
	[GrammarRule("gcc_function_specifier")]
	public XAstParserRuleReturnScope gcc_function_specifier()
	{
		EnterRule_gcc_function_specifier();
		EnterRule("gcc_function_specifier", 75);
		var retval = new XAstParserRuleReturnScope("gcc_function_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_function_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set358 = default(IToken);

		object set358_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_function_specifier");
		DebugLocation(526, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 75)) { return retval; }

			// C.g:527:2: ( 'inline' | '__inline__' | '__inline' | '__builtin_va_list' )
			DebugEnterAlt(1);
			// C.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(527, 2);

			set358=(IToken)input.LT(1);
			if (input.LA(1)==68||(input.LA(1)>=72 && input.LA(1)<=73)||input.LA(1)==95)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set358, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_function_specifier", 75);
			LeaveRule("gcc_function_specifier", 75);
			LeaveRule_gcc_function_specifier();
			if (state.backtracking > 0) { Memoize(input, 75, gcc_function_specifier_StartIndex); }

		}
		DebugLocation(531, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_function_specifier"); }
		return retval;

	}
	// $ANTLR end "gcc_function_specifier"

	partial void EnterRule_gcc_extension_specifier();
	partial void LeaveRule_gcc_extension_specifier();

	// $ANTLR start "gcc_extension_specifier"
	// C.g:533:1: gcc_extension_specifier : '__extension__' ;
	[GrammarRule("gcc_extension_specifier")]
	public XAstParserRuleReturnScope gcc_extension_specifier()
	{
		EnterRule_gcc_extension_specifier();
		EnterRule("gcc_extension_specifier", 76);
		var retval = new XAstParserRuleReturnScope("gcc_extension_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_extension_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal359 = default(IToken);

		object string_literal359_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_extension_specifier");
		DebugLocation(533, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 76)) { return retval; }

			// C.g:534:2: ( '__extension__' )
			DebugEnterAlt(1);
			// C.g:534:4: '__extension__'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(534, 4);
			string_literal359=(IToken)Match(input,71,Follow._71_in_gcc_extension_specifier2257); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal359_tree = (object)adaptor.Create(string_literal359, retval);
			adaptor.AddChild(root_0, string_literal359_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_extension_specifier", 76);
			LeaveRule("gcc_extension_specifier", 76);
			LeaveRule_gcc_extension_specifier();
			if (state.backtracking > 0) { Memoize(input, 76, gcc_extension_specifier_StartIndex); }

		}
		DebugLocation(535, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_extension_specifier"); }
		return retval;

	}
	// $ANTLR end "gcc_extension_specifier"

	partial void EnterRule_gcc_declaration_specifier();
	partial void LeaveRule_gcc_declaration_specifier();

	// $ANTLR start "gcc_declaration_specifier"
	// C.g:537:1: gcc_declaration_specifier : ( gcc_attribute | gcc_extension_specifier );
	[GrammarRule("gcc_declaration_specifier")]
	public XAstParserRuleReturnScope gcc_declaration_specifier()
	{
		EnterRule_gcc_declaration_specifier();
		EnterRule("gcc_declaration_specifier", 77);
		var retval = new XAstParserRuleReturnScope("gcc_declaration_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_declaration_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope gcc_attribute360 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_extension_specifier361 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "gcc_declaration_specifier");
		DebugLocation(537, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 77)) { return retval; }

			// C.g:538:2: ( gcc_attribute | gcc_extension_specifier )
			int alt97=2;
			try { DebugEnterDecision(97, false);
			int LA97_0 = input.LA(1);

			if ((LA97_0==65))
			{
				alt97 = 1;
			}
			else if ((LA97_0==71))
			{
				alt97 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 97, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:538:4: gcc_attribute
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(538, 4);
				PushFollow(Follow._gcc_attribute_in_gcc_declaration_specifier2268);
				gcc_attribute360=gcc_attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute360.Tree, gcc_attribute360, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:539:4: gcc_extension_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(539, 4);
				PushFollow(Follow._gcc_extension_specifier_in_gcc_declaration_specifier2273);
				gcc_extension_specifier361=gcc_extension_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_extension_specifier361.Tree, gcc_extension_specifier361, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_declaration_specifier", 77);
			LeaveRule("gcc_declaration_specifier", 77);
			LeaveRule_gcc_declaration_specifier();
			if (state.backtracking > 0) { Memoize(input, 77, gcc_declaration_specifier_StartIndex); }

		}
		DebugLocation(540, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_declaration_specifier"); }
		return retval;

	}
	// $ANTLR end "gcc_declaration_specifier"

	partial void EnterRule_gcc_attribute_list();
	partial void LeaveRule_gcc_attribute_list();

	// $ANTLR start "gcc_attribute_list"
	// C.g:542:1: gcc_attribute_list : ( gcc_attribute )+ ;
	[GrammarRule("gcc_attribute_list")]
	public XAstParserRuleReturnScope gcc_attribute_list()
	{
		EnterRule_gcc_attribute_list();
		EnterRule("gcc_attribute_list", 78);
		var retval = new XAstParserRuleReturnScope("gcc_attribute_list");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_attribute_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope gcc_attribute362 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "gcc_attribute_list");
		DebugLocation(542, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 78)) { return retval; }

			// C.g:543:2: ( ( gcc_attribute )+ )
			DebugEnterAlt(1);
			// C.g:543:4: ( gcc_attribute )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(543, 4);
			// C.g:543:4: ( gcc_attribute )+
			int cnt98=0;
			try { DebugEnterSubRule(98);
			while (true)
			{
				int alt98=2;
				try { DebugEnterDecision(98, false);
				int LA98_0 = input.LA(1);

				if ((LA98_0==65))
				{
					int LA98_23 = input.LA(2);

					if ((LA98_23==30))
					{
						int LA98_30 = input.LA(3);

						if ((EvaluatePredicate(synpred191_C_fragment)))
						{
							alt98 = 1;
						}


					}


				}


				} finally { DebugExitDecision(98); }
				switch (alt98)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:543:4: gcc_attribute
					{
					DebugLocation(543, 4);
					PushFollow(Follow._gcc_attribute_in_gcc_attribute_list2284);
					gcc_attribute362=gcc_attribute();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute362.Tree, gcc_attribute362, retval);

					}
					break;

				default:
					if (cnt98 >= 1)
						goto loop98;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee98 = new EarlyExitException( 98, input );
					DebugRecognitionException(eee98);
					throw eee98;
				}
				cnt98++;
			}
			loop98:
				;

			} finally { DebugExitSubRule(98); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_attribute_list", 78);
			LeaveRule("gcc_attribute_list", 78);
			LeaveRule_gcc_attribute_list();
			if (state.backtracking > 0) { Memoize(input, 78, gcc_attribute_list_StartIndex); }

		}
		DebugLocation(544, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_attribute_list"); }
		return retval;

	}
	// $ANTLR end "gcc_attribute_list"

	partial void EnterRule_gcc_attribute();
	partial void LeaveRule_gcc_attribute();

	// $ANTLR start "gcc_attribute"
	// C.g:546:1: gcc_attribute : '__attribute__' '(' '(' gcc_attribute_parameter_list ')' ')' ;
	[GrammarRule("gcc_attribute")]
	public XAstParserRuleReturnScope gcc_attribute()
	{
		EnterRule_gcc_attribute();
		EnterRule("gcc_attribute", 79);
		var retval = new XAstParserRuleReturnScope("gcc_attribute");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_attribute_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal363 = default(IToken);
		IToken char_literal364 = default(IToken);
		IToken char_literal365 = default(IToken);
		IToken char_literal367 = default(IToken);
		IToken char_literal368 = default(IToken);
		XAstParserRuleReturnScope gcc_attribute_parameter_list366 = default(XAstParserRuleReturnScope);

		object string_literal363_tree = default(object);
		object char_literal364_tree = default(object);
		object char_literal365_tree = default(object);
		object char_literal367_tree = default(object);
		object char_literal368_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_attribute");
		DebugLocation(546, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 79)) { return retval; }

			// C.g:547:2: ( '__attribute__' '(' '(' gcc_attribute_parameter_list ')' ')' )
			DebugEnterAlt(1);
			// C.g:547:4: '__attribute__' '(' '(' gcc_attribute_parameter_list ')' ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(547, 4);
			string_literal363=(IToken)Match(input,65,Follow._65_in_gcc_attribute2296); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal363_tree = (object)adaptor.Create(string_literal363, retval);
			adaptor.AddChild(root_0, string_literal363_tree);
			}
			DebugLocation(547, 20);
			char_literal364=(IToken)Match(input,30,Follow._30_in_gcc_attribute2298); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal364_tree = (object)adaptor.Create(char_literal364, retval);
			adaptor.AddChild(root_0, char_literal364_tree);
			}
			DebugLocation(547, 24);
			char_literal365=(IToken)Match(input,30,Follow._30_in_gcc_attribute2300); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal365_tree = (object)adaptor.Create(char_literal365, retval);
			adaptor.AddChild(root_0, char_literal365_tree);
			}
			DebugLocation(547, 28);
			PushFollow(Follow._gcc_attribute_parameter_list_in_gcc_attribute2302);
			gcc_attribute_parameter_list366=gcc_attribute_parameter_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_parameter_list366.Tree, gcc_attribute_parameter_list366, retval);
			DebugLocation(547, 57);
			char_literal367=(IToken)Match(input,31,Follow._31_in_gcc_attribute2304); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal367_tree = (object)adaptor.Create(char_literal367, retval);
			adaptor.AddChild(root_0, char_literal367_tree);
			}
			DebugLocation(547, 61);
			char_literal368=(IToken)Match(input,31,Follow._31_in_gcc_attribute2306); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal368_tree = (object)adaptor.Create(char_literal368, retval);
			adaptor.AddChild(root_0, char_literal368_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_attribute", 79);
			LeaveRule("gcc_attribute", 79);
			LeaveRule_gcc_attribute();
			if (state.backtracking > 0) { Memoize(input, 79, gcc_attribute_StartIndex); }

		}
		DebugLocation(548, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_attribute"); }
		return retval;

	}
	// $ANTLR end "gcc_attribute"

	partial void EnterRule_gcc_attribute_parameter_list();
	partial void LeaveRule_gcc_attribute_parameter_list();

	// $ANTLR start "gcc_attribute_parameter_list"
	// C.g:550:1: gcc_attribute_parameter_list : gcc_attribute_parameter ( ',' gcc_attribute_parameter )* ;
	[GrammarRule("gcc_attribute_parameter_list")]
	public XAstParserRuleReturnScope gcc_attribute_parameter_list()
	{
		EnterRule_gcc_attribute_parameter_list();
		EnterRule("gcc_attribute_parameter_list", 80);
		var retval = new XAstParserRuleReturnScope("gcc_attribute_parameter_list");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_attribute_parameter_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal370 = default(IToken);
		XAstParserRuleReturnScope gcc_attribute_parameter369 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute_parameter371 = default(XAstParserRuleReturnScope);

		object char_literal370_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_attribute_parameter_list");
		DebugLocation(550, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 80)) { return retval; }

			// C.g:551:2: ( gcc_attribute_parameter ( ',' gcc_attribute_parameter )* )
			DebugEnterAlt(1);
			// C.g:551:4: gcc_attribute_parameter ( ',' gcc_attribute_parameter )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(551, 4);
			PushFollow(Follow._gcc_attribute_parameter_in_gcc_attribute_parameter_list2317);
			gcc_attribute_parameter369=gcc_attribute_parameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_parameter369.Tree, gcc_attribute_parameter369, retval);
			DebugLocation(551, 28);
			// C.g:551:28: ( ',' gcc_attribute_parameter )*
			try { DebugEnterSubRule(99);
			while (true)
			{
				int alt99=2;
				try { DebugEnterDecision(99, false);
				int LA99_0 = input.LA(1);

				if ((LA99_0==37))
				{
					alt99 = 1;
				}


				} finally { DebugExitDecision(99); }
				switch ( alt99 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:551:29: ',' gcc_attribute_parameter
					{
					DebugLocation(551, 29);
					char_literal370=(IToken)Match(input,37,Follow._37_in_gcc_attribute_parameter_list2320); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal370_tree = (object)adaptor.Create(char_literal370, retval);
					adaptor.AddChild(root_0, char_literal370_tree);
					}
					DebugLocation(551, 33);
					PushFollow(Follow._gcc_attribute_parameter_in_gcc_attribute_parameter_list2322);
					gcc_attribute_parameter371=gcc_attribute_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_parameter371.Tree, gcc_attribute_parameter371, retval);

					}
					break;

				default:
					goto loop99;
				}
			}

			loop99:
				;

			} finally { DebugExitSubRule(99); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_attribute_parameter_list", 80);
			LeaveRule("gcc_attribute_parameter_list", 80);
			LeaveRule_gcc_attribute_parameter_list();
			if (state.backtracking > 0) { Memoize(input, 80, gcc_attribute_parameter_list_StartIndex); }

		}
		DebugLocation(552, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_attribute_parameter_list"); }
		return retval;

	}
	// $ANTLR end "gcc_attribute_parameter_list"

	partial void EnterRule_gcc_attribute_parameter();
	partial void LeaveRule_gcc_attribute_parameter();

	// $ANTLR start "gcc_attribute_parameter"
	// C.g:554:1: gcc_attribute_parameter : ( gcc_attribute_name | gcc_attribute_name '(' ( assignment_expression ( ',' assignment_expression )* )? ')' );
	[GrammarRule("gcc_attribute_parameter")]
	public XAstParserRuleReturnScope gcc_attribute_parameter()
	{
		EnterRule_gcc_attribute_parameter();
		EnterRule("gcc_attribute_parameter", 81);
		var retval = new XAstParserRuleReturnScope("gcc_attribute_parameter");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_attribute_parameter_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal374 = default(IToken);
		IToken char_literal376 = default(IToken);
		IToken char_literal378 = default(IToken);
		XAstParserRuleReturnScope gcc_attribute_name372 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute_name373 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression375 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression377 = default(XAstParserRuleReturnScope);

		object char_literal374_tree = default(object);
		object char_literal376_tree = default(object);
		object char_literal378_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_attribute_parameter");
		DebugLocation(554, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 81)) { return retval; }

			// C.g:555:2: ( gcc_attribute_name | gcc_attribute_name '(' ( assignment_expression ( ',' assignment_expression )* )? ')' )
			int alt102=2;
			try { DebugEnterDecision(102, false);
			try
			{
				alt102 = dfa102.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(102); }
			switch (alt102)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:555:4: gcc_attribute_name
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(555, 4);
				PushFollow(Follow._gcc_attribute_name_in_gcc_attribute_parameter2335);
				gcc_attribute_name372=gcc_attribute_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_name372.Tree, gcc_attribute_name372, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:556:4: gcc_attribute_name '(' ( assignment_expression ( ',' assignment_expression )* )? ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(556, 4);
				PushFollow(Follow._gcc_attribute_name_in_gcc_attribute_parameter2340);
				gcc_attribute_name373=gcc_attribute_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute_name373.Tree, gcc_attribute_name373, retval);
				DebugLocation(556, 23);
				char_literal374=(IToken)Match(input,30,Follow._30_in_gcc_attribute_parameter2342); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal374_tree = (object)adaptor.Create(char_literal374, retval);
				adaptor.AddChild(root_0, char_literal374_tree);
				}
				DebugLocation(556, 27);
				// C.g:556:27: ( assignment_expression ( ',' assignment_expression )* )?
				int alt101=2;
				try { DebugEnterSubRule(101);
				try { DebugEnterDecision(101, false);
				int LA101_0 = input.LA(1);

				if ((LA101_0==CHARACTER_LITERAL||LA101_0==DECIMAL_LITERAL||LA101_0==FLOATING_POINT_LITERAL||LA101_0==HEX_LITERAL||LA101_0==IDENTIFIER||LA101_0==OCTAL_LITERAL||LA101_0==STRING_LITERAL||LA101_0==23||LA101_0==28||LA101_0==30||LA101_0==32||(LA101_0>=34 && LA101_0<=35)||(LA101_0>=38 && LA101_0<=39)||LA101_0==63||(LA101_0>=66 && LA101_0<=67)||LA101_0==71||LA101_0==103||LA101_0==119))
				{
					alt101 = 1;
				}
				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:556:28: assignment_expression ( ',' assignment_expression )*
					{
					DebugLocation(556, 28);
					PushFollow(Follow._assignment_expression_in_gcc_attribute_parameter2345);
					assignment_expression375=assignment_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression375.Tree, assignment_expression375, retval);
					DebugLocation(556, 50);
					// C.g:556:50: ( ',' assignment_expression )*
					try { DebugEnterSubRule(100);
					while (true)
					{
						int alt100=2;
						try { DebugEnterDecision(100, false);
						int LA100_0 = input.LA(1);

						if ((LA100_0==37))
						{
							alt100 = 1;
						}


						} finally { DebugExitDecision(100); }
						switch ( alt100 )
						{
						case 1:
							DebugEnterAlt(1);
							// C.g:556:51: ',' assignment_expression
							{
							DebugLocation(556, 51);
							char_literal376=(IToken)Match(input,37,Follow._37_in_gcc_attribute_parameter2348); if (state.failed) return retval;
							if (state.backtracking == 0) {
							char_literal376_tree = (object)adaptor.Create(char_literal376, retval);
							adaptor.AddChild(root_0, char_literal376_tree);
							}
							DebugLocation(556, 55);
							PushFollow(Follow._assignment_expression_in_gcc_attribute_parameter2350);
							assignment_expression377=assignment_expression();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression377.Tree, assignment_expression377, retval);

							}
							break;

						default:
							goto loop100;
						}
					}

					loop100:
						;

					} finally { DebugExitSubRule(100); }


					}
					break;

				}
				} finally { DebugExitSubRule(101); }

				DebugLocation(556, 81);
				char_literal378=(IToken)Match(input,31,Follow._31_in_gcc_attribute_parameter2356); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal378_tree = (object)adaptor.Create(char_literal378, retval);
				adaptor.AddChild(root_0, char_literal378_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_attribute_parameter", 81);
			LeaveRule("gcc_attribute_parameter", 81);
			LeaveRule_gcc_attribute_parameter();
			if (state.backtracking > 0) { Memoize(input, 81, gcc_attribute_parameter_StartIndex); }

		}
		DebugLocation(557, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_attribute_parameter"); }
		return retval;

	}
	// $ANTLR end "gcc_attribute_parameter"

	partial void EnterRule_gcc_attribute_name();
	partial void LeaveRule_gcc_attribute_name();

	// $ANTLR start "gcc_attribute_name"
	// C.g:559:1: gcc_attribute_name : ( IDENTIFIER | storage_class_specifier | type_specifier | type_qualifier | gcc_function_specifier );
	[GrammarRule("gcc_attribute_name")]
	public XAstParserRuleReturnScope gcc_attribute_name()
	{
		EnterRule_gcc_attribute_name();
		EnterRule("gcc_attribute_name", 82);
		var retval = new XAstParserRuleReturnScope("gcc_attribute_name");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_attribute_name_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER379 = default(IToken);
		XAstParserRuleReturnScope storage_class_specifier380 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_specifier381 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_qualifier382 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_function_specifier383 = default(XAstParserRuleReturnScope);

		object IDENTIFIER379_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_attribute_name");
		DebugLocation(559, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 82)) { return retval; }

			// C.g:560:2: ( IDENTIFIER | storage_class_specifier | type_specifier | type_qualifier | gcc_function_specifier )
			int alt103=5;
			try { DebugEnterDecision(103, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				int LA103_1 = input.LA(2);

				if ((EvaluatePredicate(synpred196_C_fragment)))
				{
					alt103 = 1;
				}
				else if ((((EvaluatePredicate(synpred198_C_fragment)&&EvaluatePredicate(synpred198_C_fragment))&&(isTypeName(input.LT(1).getText())))))
				{
					alt103 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 79:
			case 90:
			case 98:
			case 104:
				{
				alt103 = 2;
				}
				break;
			case 82:
			case 87:
			case 89:
			case 91:
			case 96:
			case 97:
			case 101:
			case 102:
			case 105:
			case 108:
			case 109:
			case 110:
			case 111:
				{
				alt103 = 3;
				}
				break;
			case 69:
			case 70:
			case 74:
			case 75:
			case 76:
			case 77:
			case 83:
			case 99:
			case 112:
				{
				alt103 = 4;
				}
				break;
			case 68:
			case 72:
			case 73:
			case 95:
				{
				alt103 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 103, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:560:4: IDENTIFIER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(560, 4);
				IDENTIFIER379=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_gcc_attribute_name2367), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER379_tree = (object)adaptor.Create(IDENTIFIER379, retval);
				adaptor.AddChild(root_0, IDENTIFIER379_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:561:4: storage_class_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(561, 4);
				PushFollow(Follow._storage_class_specifier_in_gcc_attribute_name2372);
				storage_class_specifier380=storage_class_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, storage_class_specifier380.Tree, storage_class_specifier380, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C.g:562:4: type_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(562, 4);
				PushFollow(Follow._type_specifier_in_gcc_attribute_name2377);
				type_specifier381=type_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_specifier381.Tree, type_specifier381, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C.g:563:4: type_qualifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(563, 4);
				PushFollow(Follow._type_qualifier_in_gcc_attribute_name2382);
				type_qualifier382=type_qualifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier382.Tree, type_qualifier382, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C.g:564:4: gcc_function_specifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(564, 4);
				PushFollow(Follow._gcc_function_specifier_in_gcc_attribute_name2387);
				gcc_function_specifier383=gcc_function_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_function_specifier383.Tree, gcc_function_specifier383, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_attribute_name", 82);
			LeaveRule("gcc_attribute_name", 82);
			LeaveRule_gcc_attribute_name();
			if (state.backtracking > 0) { Memoize(input, 82, gcc_attribute_name_StartIndex); }

		}
		DebugLocation(565, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_attribute_name"); }
		return retval;

	}
	// $ANTLR end "gcc_attribute_name"

	partial void EnterRule_gcc_asm_statement();
	partial void LeaveRule_gcc_asm_statement();

	// $ANTLR start "gcc_asm_statement"
	// C.g:567:1: gcc_asm_statement : gcc_asm_expression ';' ;
	[GrammarRule("gcc_asm_statement")]
	public XAstParserRuleReturnScope gcc_asm_statement()
	{
		EnterRule_gcc_asm_statement();
		EnterRule("gcc_asm_statement", 83);
		var retval = new XAstParserRuleReturnScope("gcc_asm_statement");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_asm_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal385 = default(IToken);
		XAstParserRuleReturnScope gcc_asm_expression384 = default(XAstParserRuleReturnScope);

		object char_literal385_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_asm_statement");
		DebugLocation(567, 45);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 83)) { return retval; }

			// C.g:567:19: ( gcc_asm_expression ';' )
			DebugEnterAlt(1);
			// C.g:567:23: gcc_asm_expression ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(567, 23);
			PushFollow(Follow._gcc_asm_expression_in_gcc_asm_statement2399);
			gcc_asm_expression384=gcc_asm_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_asm_expression384.Tree, gcc_asm_expression384, retval);
			DebugLocation(567, 42);
			char_literal385=(IToken)Match(input,47,Follow._47_in_gcc_asm_statement2401); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal385_tree = (object)adaptor.Create(char_literal385, retval);
			adaptor.AddChild(root_0, char_literal385_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_asm_statement", 83);
			LeaveRule("gcc_asm_statement", 83);
			LeaveRule_gcc_asm_statement();
			if (state.backtracking > 0) { Memoize(input, 83, gcc_asm_statement_StartIndex); }

		}
		DebugLocation(567, 45);
		} finally { DebugExitRule(GrammarFileName, "gcc_asm_statement"); }
		return retval;

	}
	// $ANTLR end "gcc_asm_statement"

	partial void EnterRule_gcc_asm_expression();
	partial void LeaveRule_gcc_asm_expression();

	// $ANTLR start "gcc_asm_expression"
	// C.g:569:1: gcc_asm_expression : ( '__asm__' | 'asm' ) ( type_qualifier )? '(' expression ( expression )? ( ':' ( gcc_asm_operand ( ',' gcc_asm_operand )* )? ( ':' ( gcc_asm_operand ( ',' gcc_asm_operand )* )? ( ':' gcc_asm_clobber ( ',' gcc_asm_clobber )* )? )? )? ')' ;
	[GrammarRule("gcc_asm_expression")]
	public XAstParserRuleReturnScope gcc_asm_expression()
	{
		EnterRule_gcc_asm_expression();
		EnterRule("gcc_asm_expression", 84);
		var retval = new XAstParserRuleReturnScope("gcc_asm_expression");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_asm_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set386 = default(IToken);
		IToken char_literal388 = default(IToken);
		IToken char_literal391 = default(IToken);
		IToken char_literal393 = default(IToken);
		IToken char_literal395 = default(IToken);
		IToken char_literal397 = default(IToken);
		IToken char_literal399 = default(IToken);
		IToken char_literal401 = default(IToken);
		IToken char_literal403 = default(IToken);
		XAstParserRuleReturnScope type_qualifier387 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression389 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression390 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_asm_operand392 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_asm_operand394 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_asm_operand396 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_asm_operand398 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_asm_clobber400 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_asm_clobber402 = default(XAstParserRuleReturnScope);

		object set386_tree = default(object);
		object char_literal388_tree = default(object);
		object char_literal391_tree = default(object);
		object char_literal393_tree = default(object);
		object char_literal395_tree = default(object);
		object char_literal397_tree = default(object);
		object char_literal399_tree = default(object);
		object char_literal401_tree = default(object);
		object char_literal403_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_asm_expression");
		DebugLocation(569, 7);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 84)) { return retval; }

			// C.g:569:20: ( ( '__asm__' | 'asm' ) ( type_qualifier )? '(' expression ( expression )? ( ':' ( gcc_asm_operand ( ',' gcc_asm_operand )* )? ( ':' ( gcc_asm_operand ( ',' gcc_asm_operand )* )? ( ':' gcc_asm_clobber ( ',' gcc_asm_clobber )* )? )? )? ')' )
			DebugEnterAlt(1);
			// C.g:569:24: ( '__asm__' | 'asm' ) ( type_qualifier )? '(' expression ( expression )? ( ':' ( gcc_asm_operand ( ',' gcc_asm_operand )* )? ( ':' ( gcc_asm_operand ( ',' gcc_asm_operand )* )? ( ':' gcc_asm_clobber ( ',' gcc_asm_clobber )* )? )? )? ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(569, 24);

			set386=(IToken)input.LT(1);
			if (input.LA(1)==64||input.LA(1)==78)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set386, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(570, 9);
			// C.g:570:9: ( type_qualifier )?
			int alt104=2;
			try { DebugEnterSubRule(104);
			try { DebugEnterDecision(104, false);
			int LA104_0 = input.LA(1);

			if (((LA104_0>=69 && LA104_0<=70)||(LA104_0>=74 && LA104_0<=77)||LA104_0==83||LA104_0==99||LA104_0==112))
			{
				alt104 = 1;
			}
			} finally { DebugExitDecision(104); }
			switch (alt104)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:570:11: type_qualifier
				{
				DebugLocation(570, 11);
				PushFollow(Follow._type_qualifier_in_gcc_asm_expression2432);
				type_qualifier387=type_qualifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier387.Tree, type_qualifier387, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(104); }

			DebugLocation(571, 9);
			char_literal388=(IToken)Match(input,30,Follow._30_in_gcc_asm_expression2445); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal388_tree = (object)adaptor.Create(char_literal388, retval);
			adaptor.AddChild(root_0, char_literal388_tree);
			}
			DebugLocation(572, 9);
			PushFollow(Follow._expression_in_gcc_asm_expression2455);
			expression389=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression389.Tree, expression389, retval);
			DebugLocation(572, 20);
			// C.g:572:20: ( expression )?
			int alt105=2;
			try { DebugEnterSubRule(105);
			try { DebugEnterDecision(105, false);
			int LA105_0 = input.LA(1);

			if ((LA105_0==CHARACTER_LITERAL||LA105_0==DECIMAL_LITERAL||LA105_0==FLOATING_POINT_LITERAL||LA105_0==HEX_LITERAL||LA105_0==IDENTIFIER||LA105_0==OCTAL_LITERAL||LA105_0==STRING_LITERAL||LA105_0==23||LA105_0==28||LA105_0==30||LA105_0==32||(LA105_0>=34 && LA105_0<=35)||(LA105_0>=38 && LA105_0<=39)||LA105_0==63||(LA105_0>=66 && LA105_0<=67)||LA105_0==71||LA105_0==103||LA105_0==119))
			{
				alt105 = 1;
			}
			} finally { DebugExitDecision(105); }
			switch (alt105)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:572:20: expression
				{
				DebugLocation(572, 20);
				PushFollow(Follow._expression_in_gcc_asm_expression2457);
				expression390=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression390.Tree, expression390, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(105); }

			DebugLocation(573, 8);
			// C.g:573:8: ( ':' ( gcc_asm_operand ( ',' gcc_asm_operand )* )? ( ':' ( gcc_asm_operand ( ',' gcc_asm_operand )* )? ( ':' gcc_asm_clobber ( ',' gcc_asm_clobber )* )? )? )?
			int alt113=2;
			try { DebugEnterSubRule(113);
			try { DebugEnterDecision(113, false);
			int LA113_0 = input.LA(1);

			if ((LA113_0==46))
			{
				alt113 = 1;
			}
			} finally { DebugExitDecision(113); }
			switch (alt113)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:574:9: ':' ( gcc_asm_operand ( ',' gcc_asm_operand )* )? ( ':' ( gcc_asm_operand ( ',' gcc_asm_operand )* )? ( ':' gcc_asm_clobber ( ',' gcc_asm_clobber )* )? )?
				{
				DebugLocation(574, 9);
				char_literal391=(IToken)Match(input,46,Follow._46_in_gcc_asm_expression2477); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal391_tree = (object)adaptor.Create(char_literal391, retval);
				adaptor.AddChild(root_0, char_literal391_tree);
				}
				DebugLocation(574, 13);
				// C.g:574:13: ( gcc_asm_operand ( ',' gcc_asm_operand )* )?
				int alt107=2;
				try { DebugEnterSubRule(107);
				try { DebugEnterDecision(107, false);
				int LA107_0 = input.LA(1);

				if ((LA107_0==STRING_LITERAL||LA107_0==59))
				{
					alt107 = 1;
				}
				} finally { DebugExitDecision(107); }
				switch (alt107)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:574:15: gcc_asm_operand ( ',' gcc_asm_operand )*
					{
					DebugLocation(574, 15);
					PushFollow(Follow._gcc_asm_operand_in_gcc_asm_expression2481);
					gcc_asm_operand392=gcc_asm_operand();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_asm_operand392.Tree, gcc_asm_operand392, retval);
					DebugLocation(574, 31);
					// C.g:574:31: ( ',' gcc_asm_operand )*
					try { DebugEnterSubRule(106);
					while (true)
					{
						int alt106=2;
						try { DebugEnterDecision(106, false);
						int LA106_0 = input.LA(1);

						if ((LA106_0==37))
						{
							alt106 = 1;
						}


						} finally { DebugExitDecision(106); }
						switch ( alt106 )
						{
						case 1:
							DebugEnterAlt(1);
							// C.g:574:33: ',' gcc_asm_operand
							{
							DebugLocation(574, 33);
							char_literal393=(IToken)Match(input,37,Follow._37_in_gcc_asm_expression2485); if (state.failed) return retval;
							if (state.backtracking == 0) {
							char_literal393_tree = (object)adaptor.Create(char_literal393, retval);
							adaptor.AddChild(root_0, char_literal393_tree);
							}
							DebugLocation(574, 37);
							PushFollow(Follow._gcc_asm_operand_in_gcc_asm_expression2487);
							gcc_asm_operand394=gcc_asm_operand();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_asm_operand394.Tree, gcc_asm_operand394, retval);

							}
							break;

						default:
							goto loop106;
						}
					}

					loop106:
						;

					} finally { DebugExitSubRule(106); }


					}
					break;

				}
				} finally { DebugExitSubRule(107); }

				DebugLocation(575, 8);
				// C.g:575:8: ( ':' ( gcc_asm_operand ( ',' gcc_asm_operand )* )? ( ':' gcc_asm_clobber ( ',' gcc_asm_clobber )* )? )?
				int alt112=2;
				try { DebugEnterSubRule(112);
				try { DebugEnterDecision(112, false);
				int LA112_0 = input.LA(1);

				if ((LA112_0==46))
				{
					alt112 = 1;
				}
				} finally { DebugExitDecision(112); }
				switch (alt112)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:576:9: ':' ( gcc_asm_operand ( ',' gcc_asm_operand )* )? ( ':' gcc_asm_clobber ( ',' gcc_asm_clobber )* )?
					{
					DebugLocation(576, 9);
					char_literal395=(IToken)Match(input,46,Follow._46_in_gcc_asm_expression2512); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal395_tree = (object)adaptor.Create(char_literal395, retval);
					adaptor.AddChild(root_0, char_literal395_tree);
					}
					DebugLocation(576, 13);
					// C.g:576:13: ( gcc_asm_operand ( ',' gcc_asm_operand )* )?
					int alt109=2;
					try { DebugEnterSubRule(109);
					try { DebugEnterDecision(109, false);
					int LA109_0 = input.LA(1);

					if ((LA109_0==STRING_LITERAL||LA109_0==59))
					{
						alt109 = 1;
					}
					} finally { DebugExitDecision(109); }
					switch (alt109)
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:576:15: gcc_asm_operand ( ',' gcc_asm_operand )*
						{
						DebugLocation(576, 15);
						PushFollow(Follow._gcc_asm_operand_in_gcc_asm_expression2516);
						gcc_asm_operand396=gcc_asm_operand();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_asm_operand396.Tree, gcc_asm_operand396, retval);
						DebugLocation(576, 31);
						// C.g:576:31: ( ',' gcc_asm_operand )*
						try { DebugEnterSubRule(108);
						while (true)
						{
							int alt108=2;
							try { DebugEnterDecision(108, false);
							int LA108_0 = input.LA(1);

							if ((LA108_0==37))
							{
								alt108 = 1;
							}


							} finally { DebugExitDecision(108); }
							switch ( alt108 )
							{
							case 1:
								DebugEnterAlt(1);
								// C.g:576:33: ',' gcc_asm_operand
								{
								DebugLocation(576, 33);
								char_literal397=(IToken)Match(input,37,Follow._37_in_gcc_asm_expression2520); if (state.failed) return retval;
								if (state.backtracking == 0) {
								char_literal397_tree = (object)adaptor.Create(char_literal397, retval);
								adaptor.AddChild(root_0, char_literal397_tree);
								}
								DebugLocation(576, 37);
								PushFollow(Follow._gcc_asm_operand_in_gcc_asm_expression2522);
								gcc_asm_operand398=gcc_asm_operand();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_asm_operand398.Tree, gcc_asm_operand398, retval);

								}
								break;

							default:
								goto loop108;
							}
						}

						loop108:
							;

						} finally { DebugExitSubRule(108); }


						}
						break;

					}
					} finally { DebugExitSubRule(109); }

					DebugLocation(577, 11);
					// C.g:577:11: ( ':' gcc_asm_clobber ( ',' gcc_asm_clobber )* )?
					int alt111=2;
					try { DebugEnterSubRule(111);
					try { DebugEnterDecision(111, false);
					int LA111_0 = input.LA(1);

					if ((LA111_0==46))
					{
						alt111 = 1;
					}
					} finally { DebugExitDecision(111); }
					switch (alt111)
					{
					case 1:
						DebugEnterAlt(1);
						// C.g:578:9: ':' gcc_asm_clobber ( ',' gcc_asm_clobber )*
						{
						DebugLocation(578, 9);
						char_literal399=(IToken)Match(input,46,Follow._46_in_gcc_asm_expression2550); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal399_tree = (object)adaptor.Create(char_literal399, retval);
						adaptor.AddChild(root_0, char_literal399_tree);
						}
						DebugLocation(578, 15);
						PushFollow(Follow._gcc_asm_clobber_in_gcc_asm_expression2554);
						gcc_asm_clobber400=gcc_asm_clobber();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_asm_clobber400.Tree, gcc_asm_clobber400, retval);
						DebugLocation(578, 31);
						// C.g:578:31: ( ',' gcc_asm_clobber )*
						try { DebugEnterSubRule(110);
						while (true)
						{
							int alt110=2;
							try { DebugEnterDecision(110, false);
							int LA110_0 = input.LA(1);

							if ((LA110_0==37))
							{
								alt110 = 1;
							}


							} finally { DebugExitDecision(110); }
							switch ( alt110 )
							{
							case 1:
								DebugEnterAlt(1);
								// C.g:578:33: ',' gcc_asm_clobber
								{
								DebugLocation(578, 33);
								char_literal401=(IToken)Match(input,37,Follow._37_in_gcc_asm_expression2558); if (state.failed) return retval;
								if (state.backtracking == 0) {
								char_literal401_tree = (object)adaptor.Create(char_literal401, retval);
								adaptor.AddChild(root_0, char_literal401_tree);
								}
								DebugLocation(578, 37);
								PushFollow(Follow._gcc_asm_clobber_in_gcc_asm_expression2560);
								gcc_asm_clobber402=gcc_asm_clobber();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_asm_clobber402.Tree, gcc_asm_clobber402, retval);

								}
								break;

							default:
								goto loop110;
							}
						}

						loop110:
							;

						} finally { DebugExitSubRule(110); }


						}
						break;

					}
					} finally { DebugExitSubRule(111); }


					}
					break;

				}
				} finally { DebugExitSubRule(112); }


				}
				break;

			}
			} finally { DebugExitSubRule(113); }

			DebugLocation(582, 9);
			char_literal403=(IToken)Match(input,31,Follow._31_in_gcc_asm_expression2606); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal403_tree = (object)adaptor.Create(char_literal403, retval);
			adaptor.AddChild(root_0, char_literal403_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_asm_expression", 84);
			LeaveRule("gcc_asm_expression", 84);
			LeaveRule_gcc_asm_expression();
			if (state.backtracking > 0) { Memoize(input, 84, gcc_asm_expression_StartIndex); }

		}
		DebugLocation(583, 7);
		} finally { DebugExitRule(GrammarFileName, "gcc_asm_expression"); }
		return retval;

	}
	// $ANTLR end "gcc_asm_expression"

	partial void EnterRule_gcc_asm_operand();
	partial void LeaveRule_gcc_asm_operand();

	// $ANTLR start "gcc_asm_operand"
	// C.g:585:1: gcc_asm_operand : ( '[' IDENTIFIER ']' )? string_literal '(' expression ')' ;
	[GrammarRule("gcc_asm_operand")]
	public XAstParserRuleReturnScope gcc_asm_operand()
	{
		EnterRule_gcc_asm_operand();
		EnterRule("gcc_asm_operand", 85);
		var retval = new XAstParserRuleReturnScope("gcc_asm_operand");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_asm_operand_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal404 = default(IToken);
		IToken IDENTIFIER405 = default(IToken);
		IToken char_literal406 = default(IToken);
		IToken char_literal408 = default(IToken);
		IToken char_literal410 = default(IToken);
		XAstParserRuleReturnScope string_literal407 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression409 = default(XAstParserRuleReturnScope);

		object char_literal404_tree = default(object);
		object IDENTIFIER405_tree = default(object);
		object char_literal406_tree = default(object);
		object char_literal408_tree = default(object);
		object char_literal410_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_asm_operand");
		DebugLocation(585, 78);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 85)) { return retval; }

			// C.g:585:17: ( ( '[' IDENTIFIER ']' )? string_literal '(' expression ')' )
			DebugEnterAlt(1);
			// C.g:585:21: ( '[' IDENTIFIER ']' )? string_literal '(' expression ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(585, 21);
			// C.g:585:21: ( '[' IDENTIFIER ']' )?
			int alt114=2;
			try { DebugEnterSubRule(114);
			try { DebugEnterDecision(114, false);
			int LA114_0 = input.LA(1);

			if ((LA114_0==59))
			{
				alt114 = 1;
			}
			} finally { DebugExitDecision(114); }
			switch (alt114)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:585:23: '[' IDENTIFIER ']'
				{
				DebugLocation(585, 23);
				char_literal404=(IToken)Match(input,59,Follow._59_in_gcc_asm_operand2626); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal404_tree = (object)adaptor.Create(char_literal404, retval);
				adaptor.AddChild(root_0, char_literal404_tree);
				}
				DebugLocation(585, 27);
				IDENTIFIER405=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_gcc_asm_operand2628), "IDENTIFIER"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENTIFIER405_tree = (object)adaptor.Create(IDENTIFIER405, retval);
				adaptor.AddChild(root_0, IDENTIFIER405_tree);
				}
				DebugLocation(585, 38);
				char_literal406=(IToken)Match(input,60,Follow._60_in_gcc_asm_operand2630); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal406_tree = (object)adaptor.Create(char_literal406, retval);
				adaptor.AddChild(root_0, char_literal406_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(114); }

			DebugLocation(585, 45);
			PushFollow(Follow._string_literal_in_gcc_asm_operand2635);
			string_literal407=string_literal();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, string_literal407.Tree, string_literal407, retval);
			DebugLocation(585, 60);
			char_literal408=(IToken)Match(input,30,Follow._30_in_gcc_asm_operand2637); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal408_tree = (object)adaptor.Create(char_literal408, retval);
			adaptor.AddChild(root_0, char_literal408_tree);
			}
			DebugLocation(585, 64);
			PushFollow(Follow._expression_in_gcc_asm_operand2639);
			expression409=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression409.Tree, expression409, retval);
			DebugLocation(585, 75);
			char_literal410=(IToken)Match(input,31,Follow._31_in_gcc_asm_operand2641); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal410_tree = (object)adaptor.Create(char_literal410, retval);
			adaptor.AddChild(root_0, char_literal410_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_asm_operand", 85);
			LeaveRule("gcc_asm_operand", 85);
			LeaveRule_gcc_asm_operand();
			if (state.backtracking > 0) { Memoize(input, 85, gcc_asm_operand_StartIndex); }

		}
		DebugLocation(585, 78);
		} finally { DebugExitRule(GrammarFileName, "gcc_asm_operand"); }
		return retval;

	}
	// $ANTLR end "gcc_asm_operand"

	partial void EnterRule_gcc_asm_clobber();
	partial void LeaveRule_gcc_asm_clobber();

	// $ANTLR start "gcc_asm_clobber"
	// C.g:587:1: gcc_asm_clobber : string_literal ;
	[GrammarRule("gcc_asm_clobber")]
	public XAstParserRuleReturnScope gcc_asm_clobber()
	{
		EnterRule_gcc_asm_clobber();
		EnterRule("gcc_asm_clobber", 86);
		var retval = new XAstParserRuleReturnScope("gcc_asm_clobber");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_asm_clobber_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope string_literal411 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "gcc_asm_clobber");
		DebugLocation(587, 35);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 86)) { return retval; }

			// C.g:587:17: ( string_literal )
			DebugEnterAlt(1);
			// C.g:587:21: string_literal
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(587, 21);
			PushFollow(Follow._string_literal_in_gcc_asm_clobber2652);
			string_literal411=string_literal();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, string_literal411.Tree, string_literal411, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_asm_clobber", 86);
			LeaveRule("gcc_asm_clobber", 86);
			LeaveRule_gcc_asm_clobber();
			if (state.backtracking > 0) { Memoize(input, 86, gcc_asm_clobber_StartIndex); }

		}
		DebugLocation(587, 35);
		} finally { DebugExitRule(GrammarFileName, "gcc_asm_clobber"); }
		return retval;

	}
	// $ANTLR end "gcc_asm_clobber"

	partial void EnterRule_gcc_statement_expression();
	partial void LeaveRule_gcc_statement_expression();

	// $ANTLR start "gcc_statement_expression"
	// C.g:590:1: gcc_statement_expression : '(' compound_statement ')' ;
	[GrammarRule("gcc_statement_expression")]
	public XAstParserRuleReturnScope gcc_statement_expression()
	{
		EnterRule_gcc_statement_expression();
		EnterRule("gcc_statement_expression", 87);
		var retval = new XAstParserRuleReturnScope("gcc_statement_expression");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_statement_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal412 = default(IToken);
		IToken char_literal414 = default(IToken);
		XAstParserRuleReturnScope compound_statement413 = default(XAstParserRuleReturnScope);

		object char_literal412_tree = default(object);
		object char_literal414_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_statement_expression");
		DebugLocation(590, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 87)) { return retval; }

			// C.g:591:2: ( '(' compound_statement ')' )
			DebugEnterAlt(1);
			// C.g:591:4: '(' compound_statement ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(591, 4);
			char_literal412=(IToken)Match(input,30,Follow._30_in_gcc_statement_expression2663); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal412_tree = (object)adaptor.Create(char_literal412, retval);
			adaptor.AddChild(root_0, char_literal412_tree);
			}
			DebugLocation(591, 8);
			PushFollow(Follow._compound_statement_in_gcc_statement_expression2665);
			compound_statement413=compound_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, compound_statement413.Tree, compound_statement413, retval);
			DebugLocation(591, 27);
			char_literal414=(IToken)Match(input,31,Follow._31_in_gcc_statement_expression2667); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal414_tree = (object)adaptor.Create(char_literal414, retval);
			adaptor.AddChild(root_0, char_literal414_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_statement_expression", 87);
			LeaveRule("gcc_statement_expression", 87);
			LeaveRule_gcc_statement_expression();
			if (state.backtracking > 0) { Memoize(input, 87, gcc_statement_expression_StartIndex); }

		}
		DebugLocation(592, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_statement_expression"); }
		return retval;

	}
	// $ANTLR end "gcc_statement_expression"

	partial void EnterRule_gcc_array_type_modifier_list();
	partial void LeaveRule_gcc_array_type_modifier_list();

	// $ANTLR start "gcc_array_type_modifier_list"
	// C.g:594:1: gcc_array_type_modifier_list : ( gcc_array_type_modifier )+ ;
	[GrammarRule("gcc_array_type_modifier_list")]
	public XAstParserRuleReturnScope gcc_array_type_modifier_list()
	{
		EnterRule_gcc_array_type_modifier_list();
		EnterRule("gcc_array_type_modifier_list", 88);
		var retval = new XAstParserRuleReturnScope("gcc_array_type_modifier_list");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_array_type_modifier_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope gcc_array_type_modifier415 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "gcc_array_type_modifier_list");
		DebugLocation(594, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 88)) { return retval; }

			// C.g:595:2: ( ( gcc_array_type_modifier )+ )
			DebugEnterAlt(1);
			// C.g:595:4: ( gcc_array_type_modifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(595, 4);
			// C.g:595:4: ( gcc_array_type_modifier )+
			int cnt115=0;
			try { DebugEnterSubRule(115);
			while (true)
			{
				int alt115=2;
				try { DebugEnterDecision(115, false);
				int LA115_0 = input.LA(1);

				if ((LA115_0==65||(LA115_0>=69 && LA115_0<=70)||(LA115_0>=74 && LA115_0<=77)||LA115_0==83||LA115_0==99||LA115_0==112))
				{
					alt115 = 1;
				}


				} finally { DebugExitDecision(115); }
				switch (alt115)
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:595:4: gcc_array_type_modifier
					{
					DebugLocation(595, 4);
					PushFollow(Follow._gcc_array_type_modifier_in_gcc_array_type_modifier_list2678);
					gcc_array_type_modifier415=gcc_array_type_modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_array_type_modifier415.Tree, gcc_array_type_modifier415, retval);

					}
					break;

				default:
					if (cnt115 >= 1)
						goto loop115;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee115 = new EarlyExitException( 115, input );
					DebugRecognitionException(eee115);
					throw eee115;
				}
				cnt115++;
			}
			loop115:
				;

			} finally { DebugExitSubRule(115); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_array_type_modifier_list", 88);
			LeaveRule("gcc_array_type_modifier_list", 88);
			LeaveRule_gcc_array_type_modifier_list();
			if (state.backtracking > 0) { Memoize(input, 88, gcc_array_type_modifier_list_StartIndex); }

		}
		DebugLocation(596, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_array_type_modifier_list"); }
		return retval;

	}
	// $ANTLR end "gcc_array_type_modifier_list"

	partial void EnterRule_gcc_array_type_modifier();
	partial void LeaveRule_gcc_array_type_modifier();

	// $ANTLR start "gcc_array_type_modifier"
	// C.g:598:1: gcc_array_type_modifier : ( type_qualifier | gcc_attribute );
	[GrammarRule("gcc_array_type_modifier")]
	public XAstParserRuleReturnScope gcc_array_type_modifier()
	{
		EnterRule_gcc_array_type_modifier();
		EnterRule("gcc_array_type_modifier", 89);
		var retval = new XAstParserRuleReturnScope("gcc_array_type_modifier");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_array_type_modifier_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope type_qualifier416 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope gcc_attribute417 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "gcc_array_type_modifier");
		DebugLocation(598, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 89)) { return retval; }

			// C.g:599:2: ( type_qualifier | gcc_attribute )
			int alt116=2;
			try { DebugEnterDecision(116, false);
			int LA116_0 = input.LA(1);

			if (((LA116_0>=69 && LA116_0<=70)||(LA116_0>=74 && LA116_0<=77)||LA116_0==83||LA116_0==99||LA116_0==112))
			{
				alt116 = 1;
			}
			else if ((LA116_0==65))
			{
				alt116 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 116, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(116); }
			switch (alt116)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:599:4: type_qualifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(599, 4);
				PushFollow(Follow._type_qualifier_in_gcc_array_type_modifier2690);
				type_qualifier416=type_qualifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_qualifier416.Tree, type_qualifier416, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:600:4: gcc_attribute
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(600, 4);
				PushFollow(Follow._gcc_attribute_in_gcc_array_type_modifier2695);
				gcc_attribute417=gcc_attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, gcc_attribute417.Tree, gcc_attribute417, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_array_type_modifier", 89);
			LeaveRule("gcc_array_type_modifier", 89);
			LeaveRule_gcc_array_type_modifier();
			if (state.backtracking > 0) { Memoize(input, 89, gcc_array_type_modifier_StartIndex); }

		}
		DebugLocation(601, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_array_type_modifier"); }
		return retval;

	}
	// $ANTLR end "gcc_array_type_modifier"

	partial void EnterRule_gcc_builtin_va_arg();
	partial void LeaveRule_gcc_builtin_va_arg();

	// $ANTLR start "gcc_builtin_va_arg"
	// C.g:603:1: gcc_builtin_va_arg : '__builtin_va_arg' '(' assignment_expression ',' type_name ')' ;
	[GrammarRule("gcc_builtin_va_arg")]
	public XAstParserRuleReturnScope gcc_builtin_va_arg()
	{
		EnterRule_gcc_builtin_va_arg();
		EnterRule("gcc_builtin_va_arg", 90);
		var retval = new XAstParserRuleReturnScope("gcc_builtin_va_arg");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_builtin_va_arg_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal418 = default(IToken);
		IToken char_literal419 = default(IToken);
		IToken char_literal421 = default(IToken);
		IToken char_literal423 = default(IToken);
		XAstParserRuleReturnScope assignment_expression420 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name422 = default(XAstParserRuleReturnScope);

		object string_literal418_tree = default(object);
		object char_literal419_tree = default(object);
		object char_literal421_tree = default(object);
		object char_literal423_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_builtin_va_arg");
		DebugLocation(603, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 90)) { return retval; }

			// C.g:604:2: ( '__builtin_va_arg' '(' assignment_expression ',' type_name ')' )
			DebugEnterAlt(1);
			// C.g:604:4: '__builtin_va_arg' '(' assignment_expression ',' type_name ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(604, 4);
			string_literal418=(IToken)Match(input,67,Follow._67_in_gcc_builtin_va_arg2706); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal418_tree = (object)adaptor.Create(string_literal418, retval);
			adaptor.AddChild(root_0, string_literal418_tree);
			}
			DebugLocation(604, 23);
			char_literal419=(IToken)Match(input,30,Follow._30_in_gcc_builtin_va_arg2708); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal419_tree = (object)adaptor.Create(char_literal419, retval);
			adaptor.AddChild(root_0, char_literal419_tree);
			}
			DebugLocation(604, 27);
			PushFollow(Follow._assignment_expression_in_gcc_builtin_va_arg2710);
			assignment_expression420=assignment_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression420.Tree, assignment_expression420, retval);
			DebugLocation(604, 49);
			char_literal421=(IToken)Match(input,37,Follow._37_in_gcc_builtin_va_arg2712); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal421_tree = (object)adaptor.Create(char_literal421, retval);
			adaptor.AddChild(root_0, char_literal421_tree);
			}
			DebugLocation(604, 53);
			PushFollow(Follow._type_name_in_gcc_builtin_va_arg2714);
			type_name422=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name422.Tree, type_name422, retval);
			DebugLocation(604, 63);
			char_literal423=(IToken)Match(input,31,Follow._31_in_gcc_builtin_va_arg2716); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal423_tree = (object)adaptor.Create(char_literal423, retval);
			adaptor.AddChild(root_0, char_literal423_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_builtin_va_arg", 90);
			LeaveRule("gcc_builtin_va_arg", 90);
			LeaveRule_gcc_builtin_va_arg();
			if (state.backtracking > 0) { Memoize(input, 90, gcc_builtin_va_arg_StartIndex); }

		}
		DebugLocation(605, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_builtin_va_arg"); }
		return retval;

	}
	// $ANTLR end "gcc_builtin_va_arg"

	partial void EnterRule_gcc_typeof();
	partial void LeaveRule_gcc_typeof();

	// $ANTLR start "gcc_typeof"
	// C.g:607:1: gcc_typeof : 'typeof' '(' ( type_name | assignment_expression ) ')' ;
	[GrammarRule("gcc_typeof")]
	public XAstParserRuleReturnScope gcc_typeof()
	{
		EnterRule_gcc_typeof();
		EnterRule("gcc_typeof", 91);
		var retval = new XAstParserRuleReturnScope("gcc_typeof");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_typeof_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal424 = default(IToken);
		IToken char_literal425 = default(IToken);
		IToken char_literal428 = default(IToken);
		XAstParserRuleReturnScope type_name426 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_expression427 = default(XAstParserRuleReturnScope);

		object string_literal424_tree = default(object);
		object char_literal425_tree = default(object);
		object char_literal428_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_typeof");
		DebugLocation(607, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 91)) { return retval; }

			// C.g:608:2: ( 'typeof' '(' ( type_name | assignment_expression ) ')' )
			DebugEnterAlt(1);
			// C.g:608:4: 'typeof' '(' ( type_name | assignment_expression ) ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(608, 4);
			string_literal424=(IToken)Match(input,108,Follow._108_in_gcc_typeof2727); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal424_tree = (object)adaptor.Create(string_literal424, retval);
			adaptor.AddChild(root_0, string_literal424_tree);
			}
			DebugLocation(608, 13);
			char_literal425=(IToken)Match(input,30,Follow._30_in_gcc_typeof2729); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal425_tree = (object)adaptor.Create(char_literal425, retval);
			adaptor.AddChild(root_0, char_literal425_tree);
			}
			DebugLocation(608, 17);
			// C.g:608:17: ( type_name | assignment_expression )
			int alt117=2;
			try { DebugEnterSubRule(117);
			try { DebugEnterDecision(117, false);
			try
			{
				alt117 = dfa117.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(117); }
			switch (alt117)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:608:19: type_name
				{
				DebugLocation(608, 19);
				PushFollow(Follow._type_name_in_gcc_typeof2733);
				type_name426=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_name426.Tree, type_name426, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C.g:608:31: assignment_expression
				{
				DebugLocation(608, 31);
				PushFollow(Follow._assignment_expression_in_gcc_typeof2737);
				assignment_expression427=assignment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_expression427.Tree, assignment_expression427, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(117); }

			DebugLocation(608, 55);
			char_literal428=(IToken)Match(input,31,Follow._31_in_gcc_typeof2741); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal428_tree = (object)adaptor.Create(char_literal428, retval);
			adaptor.AddChild(root_0, char_literal428_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_typeof", 91);
			LeaveRule("gcc_typeof", 91);
			LeaveRule_gcc_typeof();
			if (state.backtracking > 0) { Memoize(input, 91, gcc_typeof_StartIndex); }

		}
		DebugLocation(609, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_typeof"); }
		return retval;

	}
	// $ANTLR end "gcc_typeof"

	partial void EnterRule_gcc_builtin_offsetof();
	partial void LeaveRule_gcc_builtin_offsetof();

	// $ANTLR start "gcc_builtin_offsetof"
	// C.g:611:1: gcc_builtin_offsetof : '__builtin_offsetof' '(' type_name ',' offsetof_member_designator ')' ;
	[GrammarRule("gcc_builtin_offsetof")]
	public XAstParserRuleReturnScope gcc_builtin_offsetof()
	{
		EnterRule_gcc_builtin_offsetof();
		EnterRule("gcc_builtin_offsetof", 92);
		var retval = new XAstParserRuleReturnScope("gcc_builtin_offsetof");
		
		retval.Start = (IToken)input.LT(1);
		int gcc_builtin_offsetof_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal429 = default(IToken);
		IToken char_literal430 = default(IToken);
		IToken char_literal432 = default(IToken);
		IToken char_literal434 = default(IToken);
		XAstParserRuleReturnScope type_name431 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope offsetof_member_designator433 = default(XAstParserRuleReturnScope);

		object string_literal429_tree = default(object);
		object char_literal430_tree = default(object);
		object char_literal432_tree = default(object);
		object char_literal434_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "gcc_builtin_offsetof");
		DebugLocation(611, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 92)) { return retval; }

			// C.g:612:2: ( '__builtin_offsetof' '(' type_name ',' offsetof_member_designator ')' )
			DebugEnterAlt(1);
			// C.g:612:4: '__builtin_offsetof' '(' type_name ',' offsetof_member_designator ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(612, 4);
			string_literal429=(IToken)Match(input,66,Follow._66_in_gcc_builtin_offsetof2752); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal429_tree = (object)adaptor.Create(string_literal429, retval);
			adaptor.AddChild(root_0, string_literal429_tree);
			}
			DebugLocation(612, 25);
			char_literal430=(IToken)Match(input,30,Follow._30_in_gcc_builtin_offsetof2754); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal430_tree = (object)adaptor.Create(char_literal430, retval);
			adaptor.AddChild(root_0, char_literal430_tree);
			}
			DebugLocation(612, 29);
			PushFollow(Follow._type_name_in_gcc_builtin_offsetof2756);
			type_name431=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name431.Tree, type_name431, retval);
			DebugLocation(612, 39);
			char_literal432=(IToken)Match(input,37,Follow._37_in_gcc_builtin_offsetof2758); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal432_tree = (object)adaptor.Create(char_literal432, retval);
			adaptor.AddChild(root_0, char_literal432_tree);
			}
			DebugLocation(612, 43);
			PushFollow(Follow._offsetof_member_designator_in_gcc_builtin_offsetof2760);
			offsetof_member_designator433=offsetof_member_designator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, offsetof_member_designator433.Tree, offsetof_member_designator433, retval);
			DebugLocation(612, 70);
			char_literal434=(IToken)Match(input,31,Follow._31_in_gcc_builtin_offsetof2762); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal434_tree = (object)adaptor.Create(char_literal434, retval);
			adaptor.AddChild(root_0, char_literal434_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("gcc_builtin_offsetof", 92);
			LeaveRule("gcc_builtin_offsetof", 92);
			LeaveRule_gcc_builtin_offsetof();
			if (state.backtracking > 0) { Memoize(input, 92, gcc_builtin_offsetof_StartIndex); }

		}
		DebugLocation(613, 1);
		} finally { DebugExitRule(GrammarFileName, "gcc_builtin_offsetof"); }
		return retval;

	}
	// $ANTLR end "gcc_builtin_offsetof"

	partial void EnterRule_offsetof_member_designator();
	partial void LeaveRule_offsetof_member_designator();

	// $ANTLR start "offsetof_member_designator"
	// C.g:615:1: offsetof_member_designator : IDENTIFIER ( '.' IDENTIFIER | '[' expression ']' )* ;
	[GrammarRule("offsetof_member_designator")]
	public XAstParserRuleReturnScope offsetof_member_designator()
	{
		EnterRule_offsetof_member_designator();
		EnterRule("offsetof_member_designator", 93);
		var retval = new XAstParserRuleReturnScope("offsetof_member_designator");
		
		retval.Start = (IToken)input.LT(1);
		int offsetof_member_designator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken IDENTIFIER435 = default(IToken);
		IToken char_literal436 = default(IToken);
		IToken IDENTIFIER437 = default(IToken);
		IToken char_literal438 = default(IToken);
		IToken char_literal440 = default(IToken);
		XAstParserRuleReturnScope expression439 = default(XAstParserRuleReturnScope);

		object IDENTIFIER435_tree = default(object);
		object char_literal436_tree = default(object);
		object IDENTIFIER437_tree = default(object);
		object char_literal438_tree = default(object);
		object char_literal440_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "offsetof_member_designator");
		DebugLocation(615, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 93)) { return retval; }

			// C.g:616:2: ( IDENTIFIER ( '.' IDENTIFIER | '[' expression ']' )* )
			DebugEnterAlt(1);
			// C.g:616:4: IDENTIFIER ( '.' IDENTIFIER | '[' expression ']' )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(616, 4);
			IDENTIFIER435=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_offsetof_member_designator2775), "IDENTIFIER"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENTIFIER435_tree = (object)adaptor.Create(IDENTIFIER435, retval);
			adaptor.AddChild(root_0, IDENTIFIER435_tree);
			}
			DebugLocation(616, 15);
			// C.g:616:15: ( '.' IDENTIFIER | '[' expression ']' )*
			try { DebugEnterSubRule(118);
			while (true)
			{
				int alt118=3;
				try { DebugEnterDecision(118, false);
				int LA118_0 = input.LA(1);

				if ((LA118_0==42))
				{
					alt118 = 1;
				}
				else if ((LA118_0==59))
				{
					alt118 = 2;
				}


				} finally { DebugExitDecision(118); }
				switch ( alt118 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:616:16: '.' IDENTIFIER
					{
					DebugLocation(616, 16);
					char_literal436=(IToken)Match(input,42,Follow._42_in_offsetof_member_designator2778); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal436_tree = (object)adaptor.Create(char_literal436, retval);
					adaptor.AddChild(root_0, char_literal436_tree);
					}
					DebugLocation(616, 20);
					IDENTIFIER437=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_offsetof_member_designator2780), "IDENTIFIER"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENTIFIER437_tree = (object)adaptor.Create(IDENTIFIER437, retval);
					adaptor.AddChild(root_0, IDENTIFIER437_tree);
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:616:33: '[' expression ']'
					{
					DebugLocation(616, 33);
					char_literal438=(IToken)Match(input,59,Follow._59_in_offsetof_member_designator2784); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal438_tree = (object)adaptor.Create(char_literal438, retval);
					adaptor.AddChild(root_0, char_literal438_tree);
					}
					DebugLocation(616, 37);
					PushFollow(Follow._expression_in_offsetof_member_designator2786);
					expression439=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression439.Tree, expression439, retval);
					DebugLocation(616, 48);
					char_literal440=(IToken)Match(input,60,Follow._60_in_offsetof_member_designator2788); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal440_tree = (object)adaptor.Create(char_literal440, retval);
					adaptor.AddChild(root_0, char_literal440_tree);
					}

					}
					break;

				default:
					goto loop118;
				}
			}

			loop118:
				;

			} finally { DebugExitSubRule(118); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("offsetof_member_designator", 93);
			LeaveRule("offsetof_member_designator", 93);
			LeaveRule_offsetof_member_designator();
			if (state.backtracking > 0) { Memoize(input, 93, offsetof_member_designator_StartIndex); }

		}
		DebugLocation(617, 1);
		} finally { DebugExitRule(GrammarFileName, "offsetof_member_designator"); }
		return retval;

	}
	// $ANTLR end "offsetof_member_designator"

	partial void EnterRule_synpred2_C_fragment();
	partial void LeaveRule_synpred2_C_fragment();

	// $ANTLR start synpred2_C
	public void synpred2_C_fragment()
	{
		EnterRule_synpred2_C_fragment();
		EnterRule("synpred2_C_fragment", 95);
		var retval = new XAstParserRuleReturnScope("synpred2_C_fragment");
		try
		{
			// C.g:83:6: ( declaration_specifiers )
			DebugEnterAlt(1);
			// C.g:83:6: declaration_specifiers
			{
			DebugLocation(83, 6);
			PushFollow(Follow._declaration_specifiers_in_synpred2_C94);
			declaration_specifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_C_fragment", 95);
			LeaveRule("synpred2_C_fragment", 95);
			LeaveRule_synpred2_C_fragment();
		}
	}
	// $ANTLR end synpred2_C

	partial void EnterRule_synpred4_C_fragment();
	partial void LeaveRule_synpred4_C_fragment();

	// $ANTLR start synpred4_C
	public void synpred4_C_fragment()
	{
		EnterRule_synpred4_C_fragment();
		EnterRule("synpred4_C_fragment", 97);
		var retval = new XAstParserRuleReturnScope("synpred4_C_fragment");
		try
		{
			// C.g:83:4: ( ( declaration_specifiers )? declarator ( declaration )* '{' )
			DebugEnterAlt(1);
			// C.g:83:6: ( declaration_specifiers )? declarator ( declaration )* '{'
			{
			DebugLocation(83, 6);
			// C.g:83:6: ( declaration_specifiers )?
			int alt119=2;
			try { DebugEnterSubRule(119);
			try { DebugEnterDecision(119, false);
			int LA119_0 = input.LA(1);

			if ((LA119_0==65||(LA119_0>=68 && LA119_0<=77)||LA119_0==79||(LA119_0>=82 && LA119_0<=83)||LA119_0==87||(LA119_0>=89 && LA119_0<=91)||(LA119_0>=95 && LA119_0<=99)||(LA119_0>=101 && LA119_0<=102)||(LA119_0>=104 && LA119_0<=105)||(LA119_0>=108 && LA119_0<=112)))
			{
				alt119 = 1;
			}
			else if ((LA119_0==IDENTIFIER))
			{
				switch (input.LA(2))
				{
				case 32:
					{
					alt119 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA119_22 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt119 = 1;
					}
					}
					break;
				case 30:
					{
					int LA119_23 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt119 = 1;
					}
					}
					break;
				case 79:
				case 90:
				case 98:
				case 104:
					{
					int LA119_24 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt119 = 1;
					}
					}
					break;
				case 111:
					{
					int LA119_25 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt119 = 1;
					}
					}
					break;
				case 82:
					{
					int LA119_26 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt119 = 1;
					}
					}
					break;
				case 101:
					{
					int LA119_27 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt119 = 1;
					}
					}
					break;
				case 96:
					{
					int LA119_28 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt119 = 1;
					}
					}
					break;
				case 97:
					{
					int LA119_29 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt119 = 1;
					}
					}
					break;
				case 91:
					{
					int LA119_30 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt119 = 1;
					}
					}
					break;
				case 87:
					{
					int LA119_31 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt119 = 1;
					}
					}
					break;
				case 102:
					{
					int LA119_32 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt119 = 1;
					}
					}
					break;
				case 110:
					{
					int LA119_33 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt119 = 1;
					}
					}
					break;
				case 105:
				case 109:
					{
					int LA119_34 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt119 = 1;
					}
					}
					break;
				case 89:
					{
					int LA119_35 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt119 = 1;
					}
					}
					break;
				case 108:
					{
					int LA119_36 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt119 = 1;
					}
					}
					break;
				case 69:
				case 70:
				case 74:
				case 75:
				case 76:
				case 77:
				case 83:
				case 99:
				case 112:
					{
					int LA119_37 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt119 = 1;
					}
					}
					break;
				case 68:
				case 72:
				case 73:
				case 95:
					{
					int LA119_38 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt119 = 1;
					}
					}
					break;
				case 65:
					{
					int LA119_39 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt119 = 1;
					}
					}
					break;
				case 71:
					{
					int LA119_40 = input.LA(3);

					if ((((EvaluatePredicate(synpred2_C_fragment)&&EvaluatePredicate(synpred2_C_fragment))&&(isTypeName(input.LT(1).getText())))))
					{
						alt119 = 1;
					}
					}
					break;
				}

			}
			} finally { DebugExitDecision(119); }
			switch (alt119)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:83:6: declaration_specifiers
				{
				DebugLocation(83, 6);
				PushFollow(Follow._declaration_specifiers_in_synpred4_C94);
				declaration_specifiers();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(119); }

			DebugLocation(83, 30);
			PushFollow(Follow._declarator_in_synpred4_C97);
			declarator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(83, 41);
			// C.g:83:41: ( declaration )*
			try { DebugEnterSubRule(120);
			while (true)
			{
				int alt120=2;
				try { DebugEnterDecision(120, false);
				int LA120_0 = input.LA(1);

				if ((LA120_0==IDENTIFIER||LA120_0==65||(LA120_0>=68 && LA120_0<=77)||LA120_0==79||(LA120_0>=82 && LA120_0<=83)||LA120_0==87||(LA120_0>=89 && LA120_0<=91)||(LA120_0>=95 && LA120_0<=99)||(LA120_0>=101 && LA120_0<=102)||(LA120_0>=104 && LA120_0<=105)||(LA120_0>=107 && LA120_0<=112)))
				{
					alt120 = 1;
				}


				} finally { DebugExitDecision(120); }
				switch ( alt120 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:83:41: declaration
					{
					DebugLocation(83, 41);
					PushFollow(Follow._declaration_in_synpred4_C99);
					declaration();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop120;
				}
			}

			loop120:
				;

			} finally { DebugExitSubRule(120); }

			DebugLocation(83, 54);
			Match(input,114,Follow._114_in_synpred4_C102); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred4_C_fragment", 97);
			LeaveRule("synpred4_C_fragment", 97);
			LeaveRule_synpred4_C_fragment();
		}
	}
	// $ANTLR end synpred4_C

	partial void EnterRule_synpred5_C_fragment();
	partial void LeaveRule_synpred5_C_fragment();

	// $ANTLR start synpred5_C
	public void synpred5_C_fragment()
	{
		EnterRule_synpred5_C_fragment();
		EnterRule("synpred5_C_fragment", 98);
		var retval = new XAstParserRuleReturnScope("synpred5_C_fragment");
		try
		{
			// C.g:92:4: ( declaration_specifiers )
			DebugEnterAlt(1);
			// C.g:92:4: declaration_specifiers
			{
			DebugLocation(92, 4);
			PushFollow(Follow._declaration_specifiers_in_synpred5_C134);
			declaration_specifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred5_C_fragment", 98);
			LeaveRule("synpred5_C_fragment", 98);
			LeaveRule_synpred5_C_fragment();
		}
	}
	// $ANTLR end synpred5_C

	partial void EnterRule_synpred9_C_fragment();
	partial void LeaveRule_synpred9_C_fragment();

	// $ANTLR start synpred9_C
	public void synpred9_C_fragment()
	{
		EnterRule_synpred9_C_fragment();
		EnterRule("synpred9_C_fragment", 102);
		var retval = new XAstParserRuleReturnScope("synpred9_C_fragment");
		try
		{
			// C.g:105:39: ( declaration_specifiers )
			DebugEnterAlt(1);
			// C.g:105:39: declaration_specifiers
			{
			DebugLocation(105, 39);
			PushFollow(Follow._declaration_specifiers_in_synpred9_C186);
			declaration_specifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred9_C_fragment", 102);
			LeaveRule("synpred9_C_fragment", 102);
			LeaveRule_synpred9_C_fragment();
		}
	}
	// $ANTLR end synpred9_C

	partial void EnterRule_synpred13_C_fragment();
	partial void LeaveRule_synpred13_C_fragment();

	// $ANTLR start synpred13_C
	public void synpred13_C_fragment()
	{
		EnterRule_synpred13_C_fragment();
		EnterRule("synpred13_C_fragment", 106);
		var retval = new XAstParserRuleReturnScope("synpred13_C_fragment");
		try
		{
			// C.g:112:7: ( type_specifier )
			DebugEnterAlt(1);
			// C.g:112:7: type_specifier
			{
			DebugLocation(112, 7);
			PushFollow(Follow._type_specifier_in_synpred13_C234);
			type_specifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred13_C_fragment", 106);
			LeaveRule("synpred13_C_fragment", 106);
			LeaveRule_synpred13_C_fragment();
		}
	}
	// $ANTLR end synpred13_C

	partial void EnterRule_synpred36_C_fragment();
	partial void LeaveRule_synpred36_C_fragment();

	// $ANTLR start synpred36_C
	public void synpred36_C_fragment()
	{
		EnterRule_synpred36_C_fragment();
		EnterRule("synpred36_C_fragment", 129);
		var retval = new XAstParserRuleReturnScope("synpred36_C_fragment");
		try
		{
			// C.g:161:4: ( struct_or_union ( gcc_attribute_list )? ( IDENTIFIER )? '{' struct_declaration_list '}' )
			DebugEnterAlt(1);
			// C.g:161:4: struct_or_union ( gcc_attribute_list )? ( IDENTIFIER )? '{' struct_declaration_list '}'
			{
			DebugLocation(161, 4);
			PushFollow(Follow._struct_or_union_in_synpred36_C441);
			struct_or_union();
			PopFollow();
			if (state.failed) return;
			DebugLocation(161, 20);
			// C.g:161:20: ( gcc_attribute_list )?
			int alt124=2;
			try { DebugEnterSubRule(124);
			try { DebugEnterDecision(124, false);
			int LA124_0 = input.LA(1);

			if ((LA124_0==65))
			{
				alt124 = 1;
			}
			} finally { DebugExitDecision(124); }
			switch (alt124)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:161:20: gcc_attribute_list
				{
				DebugLocation(161, 20);
				PushFollow(Follow._gcc_attribute_list_in_synpred36_C443);
				gcc_attribute_list();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(124); }

			DebugLocation(161, 40);
			// C.g:161:40: ( IDENTIFIER )?
			int alt125=2;
			try { DebugEnterSubRule(125);
			try { DebugEnterDecision(125, false);
			int LA125_0 = input.LA(1);

			if ((LA125_0==IDENTIFIER))
			{
				alt125 = 1;
			}
			} finally { DebugExitDecision(125); }
			switch (alt125)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:161:40: IDENTIFIER
				{
				DebugLocation(161, 40);
				new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred36_C446), "IDENTIFIER"); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(125); }

			DebugLocation(161, 52);
			Match(input,114,Follow._114_in_synpred36_C449); if (state.failed) return;
			DebugLocation(161, 56);
			PushFollow(Follow._struct_declaration_list_in_synpred36_C451);
			struct_declaration_list();
			PopFollow();
			if (state.failed) return;
			DebugLocation(161, 80);
			Match(input,118,Follow._118_in_synpred36_C453); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred36_C_fragment", 129);
			LeaveRule("synpred36_C_fragment", 129);
			LeaveRule_synpred36_C_fragment();
		}
	}
	// $ANTLR end synpred36_C

	partial void EnterRule_synpred42_C_fragment();
	partial void LeaveRule_synpred42_C_fragment();

	// $ANTLR start synpred42_C
	public void synpred42_C_fragment()
	{
		EnterRule_synpred42_C_fragment();
		EnterRule("synpred42_C_fragment", 135);
		var retval = new XAstParserRuleReturnScope("synpred42_C_fragment");
		try
		{
			// C.g:180:23: ( type_specifier )
			DebugEnterAlt(1);
			// C.g:180:23: type_specifier
			{
			DebugLocation(180, 23);
			PushFollow(Follow._type_specifier_in_synpred42_C529);
			type_specifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred42_C_fragment", 135);
			LeaveRule("synpred42_C_fragment", 135);
			LeaveRule_synpred42_C_fragment();
		}
	}
	// $ANTLR end synpred42_C

	partial void EnterRule_synpred45_C_fragment();
	partial void LeaveRule_synpred45_C_fragment();

	// $ANTLR start synpred45_C
	public void synpred45_C_fragment()
	{
		EnterRule_synpred45_C_fragment();
		EnterRule("synpred45_C_fragment", 138);
		var retval = new XAstParserRuleReturnScope("synpred45_C_fragment");
		try
		{
			// C.g:188:4: ( declarator )
			DebugEnterAlt(1);
			// C.g:188:4: declarator
			{
			DebugLocation(188, 4);
			PushFollow(Follow._declarator_in_synpred45_C564);
			declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred45_C_fragment", 138);
			LeaveRule("synpred45_C_fragment", 138);
			LeaveRule_synpred45_C_fragment();
		}
	}
	// $ANTLR end synpred45_C

	partial void EnterRule_synpred50_C_fragment();
	partial void LeaveRule_synpred50_C_fragment();

	// $ANTLR start synpred50_C
	public void synpred50_C_fragment()
	{
		EnterRule_synpred50_C_fragment();
		EnterRule("synpred50_C_fragment", 143);
		var retval = new XAstParserRuleReturnScope("synpred50_C_fragment");
		try
		{
			// C.g:194:4: ( 'enum' ( gcc_attribute_list )? ( IDENTIFIER )? '{' enumerator_list '}' )
			DebugEnterAlt(1);
			// C.g:194:4: 'enum' ( gcc_attribute_list )? ( IDENTIFIER )? '{' enumerator_list '}'
			{
			DebugLocation(194, 4);
			Match(input,89,Follow._89_in_synpred50_C595); if (state.failed) return;
			DebugLocation(194, 11);
			// C.g:194:11: ( gcc_attribute_list )?
			int alt126=2;
			try { DebugEnterSubRule(126);
			try { DebugEnterDecision(126, false);
			int LA126_0 = input.LA(1);

			if ((LA126_0==65))
			{
				alt126 = 1;
			}
			} finally { DebugExitDecision(126); }
			switch (alt126)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:194:11: gcc_attribute_list
				{
				DebugLocation(194, 11);
				PushFollow(Follow._gcc_attribute_list_in_synpred50_C597);
				gcc_attribute_list();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(126); }

			DebugLocation(194, 31);
			// C.g:194:31: ( IDENTIFIER )?
			int alt127=2;
			try { DebugEnterSubRule(127);
			try { DebugEnterDecision(127, false);
			int LA127_0 = input.LA(1);

			if ((LA127_0==IDENTIFIER))
			{
				alt127 = 1;
			}
			} finally { DebugExitDecision(127); }
			switch (alt127)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:194:31: IDENTIFIER
				{
				DebugLocation(194, 31);
				new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred50_C600), "IDENTIFIER"); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(127); }

			DebugLocation(194, 43);
			Match(input,114,Follow._114_in_synpred50_C603); if (state.failed) return;
			DebugLocation(194, 47);
			PushFollow(Follow._enumerator_list_in_synpred50_C605);
			enumerator_list();
			PopFollow();
			if (state.failed) return;
			DebugLocation(194, 63);
			Match(input,118,Follow._118_in_synpred50_C607); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred50_C_fragment", 143);
			LeaveRule("synpred50_C_fragment", 143);
			LeaveRule_synpred50_C_fragment();
		}
	}
	// $ANTLR end synpred50_C

	partial void EnterRule_synpred64_C_fragment();
	partial void LeaveRule_synpred64_C_fragment();

	// $ANTLR start synpred64_C
	public void synpred64_C_fragment()
	{
		EnterRule_synpred64_C_fragment();
		EnterRule("synpred64_C_fragment", 157);
		var retval = new XAstParserRuleReturnScope("synpred64_C_fragment");
		try
		{
			// C.g:219:51: ( gcc_attribute_list )
			DebugEnterAlt(1);
			// C.g:219:51: gcc_attribute_list
			{
			DebugLocation(219, 51);
			PushFollow(Follow._gcc_attribute_list_in_synpred64_C736);
			gcc_attribute_list();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred64_C_fragment", 157);
			LeaveRule("synpred64_C_fragment", 157);
			LeaveRule_synpred64_C_fragment();
		}
	}
	// $ANTLR end synpred64_C

	partial void EnterRule_synpred65_C_fragment();
	partial void LeaveRule_synpred65_C_fragment();

	// $ANTLR start synpred65_C
	public void synpred65_C_fragment()
	{
		EnterRule_synpred65_C_fragment();
		EnterRule("synpred65_C_fragment", 158);
		var retval = new XAstParserRuleReturnScope("synpred65_C_fragment");
		try
		{
			// C.g:219:4: ( ( pointer )? direct_declarator ( gcc_asm_expression )? ( gcc_attribute_list )? )
			DebugEnterAlt(1);
			// C.g:219:4: ( pointer )? direct_declarator ( gcc_asm_expression )? ( gcc_attribute_list )?
			{
			DebugLocation(219, 4);
			// C.g:219:4: ( pointer )?
			int alt128=2;
			try { DebugEnterSubRule(128);
			try { DebugEnterDecision(128, false);
			int LA128_0 = input.LA(1);

			if ((LA128_0==32))
			{
				alt128 = 1;
			}
			} finally { DebugExitDecision(128); }
			switch (alt128)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:219:4: pointer
				{
				DebugLocation(219, 4);
				PushFollow(Follow._pointer_in_synpred65_C728);
				pointer();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(128); }

			DebugLocation(219, 13);
			PushFollow(Follow._direct_declarator_in_synpred65_C731);
			direct_declarator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(219, 31);
			// C.g:219:31: ( gcc_asm_expression )?
			int alt129=2;
			try { DebugEnterSubRule(129);
			try { DebugEnterDecision(129, false);
			int LA129_0 = input.LA(1);

			if ((LA129_0==64||LA129_0==78))
			{
				alt129 = 1;
			}
			} finally { DebugExitDecision(129); }
			switch (alt129)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:219:31: gcc_asm_expression
				{
				DebugLocation(219, 31);
				PushFollow(Follow._gcc_asm_expression_in_synpred65_C733);
				gcc_asm_expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(129); }

			DebugLocation(219, 51);
			// C.g:219:51: ( gcc_attribute_list )?
			int alt130=2;
			try { DebugEnterSubRule(130);
			try { DebugEnterDecision(130, false);
			int LA130_0 = input.LA(1);

			if ((LA130_0==65))
			{
				alt130 = 1;
			}
			} finally { DebugExitDecision(130); }
			switch (alt130)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:219:51: gcc_attribute_list
				{
				DebugLocation(219, 51);
				PushFollow(Follow._gcc_attribute_list_in_synpred65_C736);
				gcc_attribute_list();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(130); }


			}

		}
		finally
		{
			TraceOut("synpred65_C_fragment", 158);
			LeaveRule("synpred65_C_fragment", 158);
			LeaveRule_synpred65_C_fragment();
		}
	}
	// $ANTLR end synpred65_C

	partial void EnterRule_synpred68_C_fragment();
	partial void LeaveRule_synpred68_C_fragment();

	// $ANTLR start synpred68_C
	public void synpred68_C_fragment()
	{
		EnterRule_synpred68_C_fragment();
		EnterRule("synpred68_C_fragment", 161);
		var retval = new XAstParserRuleReturnScope("synpred68_C_fragment");
		try
		{
			// C.g:233:3: ( declarator_suffix )
			DebugEnterAlt(1);
			// C.g:233:3: declarator_suffix
			{
			DebugLocation(233, 3);
			PushFollow(Follow._declarator_suffix_in_synpred68_C783);
			declarator_suffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred68_C_fragment", 161);
			LeaveRule("synpred68_C_fragment", 161);
			LeaveRule_synpred68_C_fragment();
		}
	}
	// $ANTLR end synpred68_C

	partial void EnterRule_synpred71_C_fragment();
	partial void LeaveRule_synpred71_C_fragment();

	// $ANTLR start synpred71_C
	public void synpred71_C_fragment()
	{
		EnterRule_synpred71_C_fragment();
		EnterRule("synpred71_C_fragment", 164);
		var retval = new XAstParserRuleReturnScope("synpred71_C_fragment");
		try
		{
			// C.g:239:6: ( '(' parameter_type_list ')' )
			DebugEnterAlt(1);
			// C.g:239:6: '(' parameter_type_list ')'
			{
			DebugLocation(239, 6);
			Match(input,30,Follow._30_in_synpred71_C817); if (state.failed) return;
			DebugLocation(239, 10);
			PushFollow(Follow._parameter_type_list_in_synpred71_C819);
			parameter_type_list();
			PopFollow();
			if (state.failed) return;
			DebugLocation(239, 30);
			Match(input,31,Follow._31_in_synpred71_C821); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred71_C_fragment", 164);
			LeaveRule("synpred71_C_fragment", 164);
			LeaveRule_synpred71_C_fragment();
		}
	}
	// $ANTLR end synpred71_C

	partial void EnterRule_synpred72_C_fragment();
	partial void LeaveRule_synpred72_C_fragment();

	// $ANTLR start synpred72_C
	public void synpred72_C_fragment()
	{
		EnterRule_synpred72_C_fragment();
		EnterRule("synpred72_C_fragment", 165);
		var retval = new XAstParserRuleReturnScope("synpred72_C_fragment");
		try
		{
			// C.g:240:6: ( '(' identifier_list ')' )
			DebugEnterAlt(1);
			// C.g:240:6: '(' identifier_list ')'
			{
			DebugLocation(240, 6);
			Match(input,30,Follow._30_in_synpred72_C828); if (state.failed) return;
			DebugLocation(240, 10);
			PushFollow(Follow._identifier_list_in_synpred72_C830);
			identifier_list();
			PopFollow();
			if (state.failed) return;
			DebugLocation(240, 26);
			Match(input,31,Follow._31_in_synpred72_C832); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred72_C_fragment", 165);
			LeaveRule("synpred72_C_fragment", 165);
			LeaveRule_synpred72_C_fragment();
		}
	}
	// $ANTLR end synpred72_C

	partial void EnterRule_synpred73_C_fragment();
	partial void LeaveRule_synpred73_C_fragment();

	// $ANTLR start synpred73_C
	public void synpred73_C_fragment()
	{
		EnterRule_synpred73_C_fragment();
		EnterRule("synpred73_C_fragment", 166);
		var retval = new XAstParserRuleReturnScope("synpred73_C_fragment");
		try
		{
			// C.g:245:10: ( type_qualifier )
			DebugEnterAlt(1);
			// C.g:245:10: type_qualifier
			{
			DebugLocation(245, 10);
			PushFollow(Follow._type_qualifier_in_synpred73_C858);
			type_qualifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred73_C_fragment", 166);
			LeaveRule("synpred73_C_fragment", 166);
			LeaveRule_synpred73_C_fragment();
		}
	}
	// $ANTLR end synpred73_C

	partial void EnterRule_synpred74_C_fragment();
	partial void LeaveRule_synpred74_C_fragment();

	// $ANTLR start synpred74_C
	public void synpred74_C_fragment()
	{
		EnterRule_synpred74_C_fragment();
		EnterRule("synpred74_C_fragment", 167);
		var retval = new XAstParserRuleReturnScope("synpred74_C_fragment");
		try
		{
			// C.g:245:27: ( gcc_attribute )
			DebugEnterAlt(1);
			// C.g:245:27: gcc_attribute
			{
			DebugLocation(245, 27);
			PushFollow(Follow._gcc_attribute_in_synpred74_C862);
			gcc_attribute();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred74_C_fragment", 167);
			LeaveRule("synpred74_C_fragment", 167);
			LeaveRule_synpred74_C_fragment();
		}
	}
	// $ANTLR end synpred74_C

	partial void EnterRule_synpred75_C_fragment();
	partial void LeaveRule_synpred75_C_fragment();

	// $ANTLR start synpred75_C
	public void synpred75_C_fragment()
	{
		EnterRule_synpred75_C_fragment();
		EnterRule("synpred75_C_fragment", 168);
		var retval = new XAstParserRuleReturnScope("synpred75_C_fragment");
		try
		{
			// C.g:245:5: ( '*' ( type_qualifier | gcc_attribute )* )
			DebugEnterAlt(1);
			// C.g:245:5: '*' ( type_qualifier | gcc_attribute )*
			{
			DebugLocation(245, 5);
			Match(input,32,Follow._32_in_synpred75_C855); if (state.failed) return;
			DebugLocation(245, 9);
			// C.g:245:9: ( type_qualifier | gcc_attribute )*
			try { DebugEnterSubRule(131);
			while (true)
			{
				int alt131=3;
				try { DebugEnterDecision(131, false);
				int LA131_0 = input.LA(1);

				if (((LA131_0>=69 && LA131_0<=70)||(LA131_0>=74 && LA131_0<=77)||LA131_0==83||LA131_0==99||LA131_0==112))
				{
					alt131 = 1;
				}
				else if ((LA131_0==65))
				{
					alt131 = 2;
				}


				} finally { DebugExitDecision(131); }
				switch ( alt131 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:245:10: type_qualifier
					{
					DebugLocation(245, 10);
					PushFollow(Follow._type_qualifier_in_synpred75_C858);
					type_qualifier();
					PopFollow();
					if (state.failed) return;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C.g:245:27: gcc_attribute
					{
					DebugLocation(245, 27);
					PushFollow(Follow._gcc_attribute_in_synpred75_C862);
					gcc_attribute();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop131;
				}
			}

			loop131:
				;

			} finally { DebugExitSubRule(131); }


			}

		}
		finally
		{
			TraceOut("synpred75_C_fragment", 168);
			LeaveRule("synpred75_C_fragment", 168);
			LeaveRule_synpred75_C_fragment();
		}
	}
	// $ANTLR end synpred75_C

	partial void EnterRule_synpred78_C_fragment();
	partial void LeaveRule_synpred78_C_fragment();

	// $ANTLR start synpred78_C
	public void synpred78_C_fragment()
	{
		EnterRule_synpred78_C_fragment();
		EnterRule("synpred78_C_fragment", 171);
		var retval = new XAstParserRuleReturnScope("synpred78_C_fragment");
		try
		{
			// C.g:257:28: ( declarator )
			DebugEnterAlt(1);
			// C.g:257:28: declarator
			{
			DebugLocation(257, 28);
			PushFollow(Follow._declarator_in_synpred78_C916);
			declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred78_C_fragment", 171);
			LeaveRule("synpred78_C_fragment", 171);
			LeaveRule_synpred78_C_fragment();
		}
	}
	// $ANTLR end synpred78_C

	partial void EnterRule_synpred79_C_fragment();
	partial void LeaveRule_synpred79_C_fragment();

	// $ANTLR start synpred79_C
	public void synpred79_C_fragment()
	{
		EnterRule_synpred79_C_fragment();
		EnterRule("synpred79_C_fragment", 172);
		var retval = new XAstParserRuleReturnScope("synpred79_C_fragment");
		try
		{
			// C.g:257:39: ( abstract_declarator )
			DebugEnterAlt(1);
			// C.g:257:39: abstract_declarator
			{
			DebugLocation(257, 39);
			PushFollow(Follow._abstract_declarator_in_synpred79_C918);
			abstract_declarator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred79_C_fragment", 172);
			LeaveRule("synpred79_C_fragment", 172);
			LeaveRule_synpred79_C_fragment();
		}
	}
	// $ANTLR end synpred79_C

	partial void EnterRule_synpred82_C_fragment();
	partial void LeaveRule_synpred82_C_fragment();

	// $ANTLR start synpred82_C
	public void synpred82_C_fragment()
	{
		EnterRule_synpred82_C_fragment();
		EnterRule("synpred82_C_fragment", 175);
		var retval = new XAstParserRuleReturnScope("synpred82_C_fragment");
		try
		{
			// C.g:269:4: ( pointer )
			DebugEnterAlt(1);
			// C.g:269:4: pointer
			{
			DebugLocation(269, 4);
			PushFollow(Follow._pointer_in_synpred82_C963);
			pointer();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred82_C_fragment", 175);
			LeaveRule("synpred82_C_fragment", 175);
			LeaveRule_synpred82_C_fragment();
		}
	}
	// $ANTLR end synpred82_C

	partial void EnterRule_synpred87_C_fragment();
	partial void LeaveRule_synpred87_C_fragment();

	// $ANTLR start synpred87_C
	public void synpred87_C_fragment()
	{
		EnterRule_synpred87_C_fragment();
		EnterRule("synpred87_C_fragment", 180);
		var retval = new XAstParserRuleReturnScope("synpred87_C_fragment");
		try
		{
			// C.g:274:6: ( '(' ( gcc_attribute_list )? abstract_declarator ')' )
			DebugEnterAlt(1);
			// C.g:274:6: '(' ( gcc_attribute_list )? abstract_declarator ')'
			{
			DebugLocation(274, 6);
			Match(input,30,Follow._30_in_synpred87_C990); if (state.failed) return;
			DebugLocation(274, 10);
			// C.g:274:10: ( gcc_attribute_list )?
			int alt132=2;
			try { DebugEnterSubRule(132);
			try { DebugEnterDecision(132, false);
			int LA132_0 = input.LA(1);

			if ((LA132_0==65))
			{
				alt132 = 1;
			}
			} finally { DebugExitDecision(132); }
			switch (alt132)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:274:10: gcc_attribute_list
				{
				DebugLocation(274, 10);
				PushFollow(Follow._gcc_attribute_list_in_synpred87_C992);
				gcc_attribute_list();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(132); }

			DebugLocation(274, 30);
			PushFollow(Follow._abstract_declarator_in_synpred87_C995);
			abstract_declarator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(274, 50);
			Match(input,31,Follow._31_in_synpred87_C997); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred87_C_fragment", 180);
			LeaveRule("synpred87_C_fragment", 180);
			LeaveRule_synpred87_C_fragment();
		}
	}
	// $ANTLR end synpred87_C

	partial void EnterRule_synpred88_C_fragment();
	partial void LeaveRule_synpred88_C_fragment();

	// $ANTLR start synpred88_C
	public void synpred88_C_fragment()
	{
		EnterRule_synpred88_C_fragment();
		EnterRule("synpred88_C_fragment", 181);
		var retval = new XAstParserRuleReturnScope("synpred88_C_fragment");
		try
		{
			// C.g:274:85: ( abstract_declarator_suffix )
			DebugEnterAlt(1);
			// C.g:274:85: abstract_declarator_suffix
			{
			DebugLocation(274, 85);
			PushFollow(Follow._abstract_declarator_suffix_in_synpred88_C1005);
			abstract_declarator_suffix();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred88_C_fragment", 181);
			LeaveRule("synpred88_C_fragment", 181);
			LeaveRule_synpred88_C_fragment();
		}
	}
	// $ANTLR end synpred88_C

	partial void EnterRule_synpred91_C_fragment();
	partial void LeaveRule_synpred91_C_fragment();

	// $ANTLR start synpred91_C
	public void synpred91_C_fragment()
	{
		EnterRule_synpred91_C_fragment();
		EnterRule("synpred91_C_fragment", 184);
		var retval = new XAstParserRuleReturnScope("synpred91_C_fragment");
		try
		{
			// C.g:278:4: ( '[' ( gcc_array_type_modifier )* ( constant_expression )? ']' )
			DebugEnterAlt(1);
			// C.g:278:4: '[' ( gcc_array_type_modifier )* ( constant_expression )? ']'
			{
			DebugLocation(278, 4);
			Match(input,59,Follow._59_in_synpred91_C1017); if (state.failed) return;
			DebugLocation(278, 8);
			// C.g:278:8: ( gcc_array_type_modifier )*
			try { DebugEnterSubRule(133);
			while (true)
			{
				int alt133=2;
				try { DebugEnterDecision(133, false);
				int LA133_0 = input.LA(1);

				if ((LA133_0==65||(LA133_0>=69 && LA133_0<=70)||(LA133_0>=74 && LA133_0<=77)||LA133_0==83||LA133_0==99||LA133_0==112))
				{
					alt133 = 1;
				}


				} finally { DebugExitDecision(133); }
				switch ( alt133 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:278:8: gcc_array_type_modifier
					{
					DebugLocation(278, 8);
					PushFollow(Follow._gcc_array_type_modifier_in_synpred91_C1019);
					gcc_array_type_modifier();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop133;
				}
			}

			loop133:
				;

			} finally { DebugExitSubRule(133); }

			DebugLocation(278, 33);
			// C.g:278:33: ( constant_expression )?
			int alt134=2;
			try { DebugEnterSubRule(134);
			try { DebugEnterDecision(134, false);
			int LA134_0 = input.LA(1);

			if ((LA134_0==CHARACTER_LITERAL||LA134_0==DECIMAL_LITERAL||LA134_0==FLOATING_POINT_LITERAL||LA134_0==HEX_LITERAL||LA134_0==IDENTIFIER||LA134_0==OCTAL_LITERAL||LA134_0==STRING_LITERAL||LA134_0==23||LA134_0==28||LA134_0==30||LA134_0==32||(LA134_0>=34 && LA134_0<=35)||(LA134_0>=38 && LA134_0<=39)||LA134_0==63||(LA134_0>=66 && LA134_0<=67)||LA134_0==71||LA134_0==103||LA134_0==119))
			{
				alt134 = 1;
			}
			} finally { DebugExitDecision(134); }
			switch (alt134)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:278:33: constant_expression
				{
				DebugLocation(278, 33);
				PushFollow(Follow._constant_expression_in_synpred91_C1022);
				constant_expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(134); }

			DebugLocation(278, 54);
			Match(input,60,Follow._60_in_synpred91_C1025); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred91_C_fragment", 184);
			LeaveRule("synpred91_C_fragment", 184);
			LeaveRule_synpred91_C_fragment();
		}
	}
	// $ANTLR end synpred91_C

	partial void EnterRule_synpred93_C_fragment();
	partial void LeaveRule_synpred93_C_fragment();

	// $ANTLR start synpred93_C
	public void synpred93_C_fragment()
	{
		EnterRule_synpred93_C_fragment();
		EnterRule("synpred93_C_fragment", 186);
		var retval = new XAstParserRuleReturnScope("synpred93_C_fragment");
		try
		{
			// C.g:279:4: ( '[' ( gcc_array_type_modifier )* '*' ']' )
			DebugEnterAlt(1);
			// C.g:279:4: '[' ( gcc_array_type_modifier )* '*' ']'
			{
			DebugLocation(279, 4);
			Match(input,59,Follow._59_in_synpred93_C1030); if (state.failed) return;
			DebugLocation(279, 8);
			// C.g:279:8: ( gcc_array_type_modifier )*
			try { DebugEnterSubRule(135);
			while (true)
			{
				int alt135=2;
				try { DebugEnterDecision(135, false);
				int LA135_0 = input.LA(1);

				if ((LA135_0==65||(LA135_0>=69 && LA135_0<=70)||(LA135_0>=74 && LA135_0<=77)||LA135_0==83||LA135_0==99||LA135_0==112))
				{
					alt135 = 1;
				}


				} finally { DebugExitDecision(135); }
				switch ( alt135 )
				{
				case 1:
					DebugEnterAlt(1);
					// C.g:279:8: gcc_array_type_modifier
					{
					DebugLocation(279, 8);
					PushFollow(Follow._gcc_array_type_modifier_in_synpred93_C1032);
					gcc_array_type_modifier();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop135;
				}
			}

			loop135:
				;

			} finally { DebugExitSubRule(135); }

			DebugLocation(279, 33);
			Match(input,32,Follow._32_in_synpred93_C1035); if (state.failed) return;
			DebugLocation(279, 37);
			Match(input,60,Follow._60_in_synpred93_C1037); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred93_C_fragment", 186);
			LeaveRule("synpred93_C_fragment", 186);
			LeaveRule_synpred93_C_fragment();
		}
	}
	// $ANTLR end synpred93_C

	partial void EnterRule_synpred101_C_fragment();
	partial void LeaveRule_synpred101_C_fragment();

	// $ANTLR start synpred101_C
	public void synpred101_C_fragment()
	{
		EnterRule_synpred101_C_fragment();
		EnterRule("synpred101_C_fragment", 194);
		var retval = new XAstParserRuleReturnScope("synpred101_C_fragment");
		try
		{
			// C.g:298:4: ( '[' constant_expression ']' )
			DebugEnterAlt(1);
			// C.g:298:4: '[' constant_expression ']'
			{
			DebugLocation(298, 4);
			Match(input,59,Follow._59_in_synpred101_C1125); if (state.failed) return;
			DebugLocation(298, 8);
			PushFollow(Follow._constant_expression_in_synpred101_C1127);
			constant_expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(298, 28);
			Match(input,60,Follow._60_in_synpred101_C1129); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred101_C_fragment", 194);
			LeaveRule("synpred101_C_fragment", 194);
			LeaveRule_synpred101_C_fragment();
		}
	}
	// $ANTLR end synpred101_C

	partial void EnterRule_synpred104_C_fragment();
	partial void LeaveRule_synpred104_C_fragment();

	// $ANTLR start synpred104_C
	public void synpred104_C_fragment()
	{
		EnterRule_synpred104_C_fragment();
		EnterRule("synpred104_C_fragment", 197);
		var retval = new XAstParserRuleReturnScope("synpred104_C_fragment");
		try
		{
			// C.g:312:33: ( '+' multiplicative_expression )
			DebugEnterAlt(1);
			// C.g:312:33: '+' multiplicative_expression
			{
			DebugLocation(312, 33);
			Match(input,34,Follow._34_in_synpred104_C1192); if (state.failed) return;
			DebugLocation(312, 37);
			PushFollow(Follow._multiplicative_expression_in_synpred104_C1194);
			multiplicative_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred104_C_fragment", 197);
			LeaveRule("synpred104_C_fragment", 197);
			LeaveRule_synpred104_C_fragment();
		}
	}
	// $ANTLR end synpred104_C

	partial void EnterRule_synpred105_C_fragment();
	partial void LeaveRule_synpred105_C_fragment();

	// $ANTLR start synpred105_C
	public void synpred105_C_fragment()
	{
		EnterRule_synpred105_C_fragment();
		EnterRule("synpred105_C_fragment", 198);
		var retval = new XAstParserRuleReturnScope("synpred105_C_fragment");
		try
		{
			// C.g:312:65: ( '-' multiplicative_expression )
			DebugEnterAlt(1);
			// C.g:312:65: '-' multiplicative_expression
			{
			DebugLocation(312, 65);
			Match(input,38,Follow._38_in_synpred105_C1198); if (state.failed) return;
			DebugLocation(312, 69);
			PushFollow(Follow._multiplicative_expression_in_synpred105_C1200);
			multiplicative_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred105_C_fragment", 198);
			LeaveRule("synpred105_C_fragment", 198);
			LeaveRule_synpred105_C_fragment();
		}
	}
	// $ANTLR end synpred105_C

	partial void EnterRule_synpred106_C_fragment();
	partial void LeaveRule_synpred106_C_fragment();

	// $ANTLR start synpred106_C
	public void synpred106_C_fragment()
	{
		EnterRule_synpred106_C_fragment();
		EnterRule("synpred106_C_fragment", 199);
		var retval = new XAstParserRuleReturnScope("synpred106_C_fragment");
		try
		{
			// C.g:316:23: ( '*' cast_expression )
			DebugEnterAlt(1);
			// C.g:316:23: '*' cast_expression
			{
			DebugLocation(316, 23);
			Match(input,32,Follow._32_in_synpred106_C1218); if (state.failed) return;
			DebugLocation(316, 27);
			PushFollow(Follow._cast_expression_in_synpred106_C1220);
			cast_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred106_C_fragment", 199);
			LeaveRule("synpred106_C_fragment", 199);
			LeaveRule_synpred106_C_fragment();
		}
	}
	// $ANTLR end synpred106_C

	partial void EnterRule_synpred109_C_fragment();
	partial void LeaveRule_synpred109_C_fragment();

	// $ANTLR start synpred109_C
	public void synpred109_C_fragment()
	{
		EnterRule_synpred109_C_fragment();
		EnterRule("synpred109_C_fragment", 202);
		var retval = new XAstParserRuleReturnScope("synpred109_C_fragment");
		try
		{
			// C.g:320:4: ( '(' type_name ')' cast_expression )
			DebugEnterAlt(1);
			// C.g:320:4: '(' type_name ')' cast_expression
			{
			DebugLocation(320, 4);
			Match(input,30,Follow._30_in_synpred109_C1245); if (state.failed) return;
			DebugLocation(320, 8);
			PushFollow(Follow._type_name_in_synpred109_C1247);
			type_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(320, 18);
			Match(input,31,Follow._31_in_synpred109_C1249); if (state.failed) return;
			DebugLocation(320, 22);
			PushFollow(Follow._cast_expression_in_synpred109_C1251);
			cast_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred109_C_fragment", 202);
			LeaveRule("synpred109_C_fragment", 202);
			LeaveRule_synpred109_C_fragment();
		}
	}
	// $ANTLR end synpred109_C

	partial void EnterRule_synpred114_C_fragment();
	partial void LeaveRule_synpred114_C_fragment();

	// $ANTLR start synpred114_C
	public void synpred114_C_fragment()
	{
		EnterRule_synpred114_C_fragment();
		EnterRule("synpred114_C_fragment", 207);
		var retval = new XAstParserRuleReturnScope("synpred114_C_fragment");
		try
		{
			// C.g:329:4: ( 'sizeof' unary_expression )
			DebugEnterAlt(1);
			// C.g:329:4: 'sizeof' unary_expression
			{
			DebugLocation(329, 4);
			Match(input,103,Follow._103_in_synpred114_C1293); if (state.failed) return;
			DebugLocation(329, 13);
			PushFollow(Follow._unary_expression_in_synpred114_C1295);
			unary_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred114_C_fragment", 207);
			LeaveRule("synpred114_C_fragment", 207);
			LeaveRule_synpred114_C_fragment();
		}
	}
	// $ANTLR end synpred114_C

	partial void EnterRule_synpred115_C_fragment();
	partial void LeaveRule_synpred115_C_fragment();

	// $ANTLR start synpred115_C
	public void synpred115_C_fragment()
	{
		EnterRule_synpred115_C_fragment();
		EnterRule("synpred115_C_fragment", 208);
		var retval = new XAstParserRuleReturnScope("synpred115_C_fragment");
		try
		{
			// C.g:330:4: ( 'sizeof' '(' type_name ')' )
			DebugEnterAlt(1);
			// C.g:330:4: 'sizeof' '(' type_name ')'
			{
			DebugLocation(330, 4);
			Match(input,103,Follow._103_in_synpred115_C1300); if (state.failed) return;
			DebugLocation(330, 13);
			Match(input,30,Follow._30_in_synpred115_C1302); if (state.failed) return;
			DebugLocation(330, 17);
			PushFollow(Follow._type_name_in_synpred115_C1304);
			type_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(330, 27);
			Match(input,31,Follow._31_in_synpred115_C1306); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred115_C_fragment", 208);
			LeaveRule("synpred115_C_fragment", 208);
			LeaveRule_synpred115_C_fragment();
		}
	}
	// $ANTLR end synpred115_C

	partial void EnterRule_synpred116_C_fragment();
	partial void LeaveRule_synpred116_C_fragment();

	// $ANTLR start synpred116_C
	public void synpred116_C_fragment()
	{
		EnterRule_synpred116_C_fragment();
		EnterRule("synpred116_C_fragment", 209);
		var retval = new XAstParserRuleReturnScope("synpred116_C_fragment");
		try
		{
			// C.g:332:4: ( '__alignof__' unary_expression )
			DebugEnterAlt(1);
			// C.g:332:4: '__alignof__' unary_expression
			{
			DebugLocation(332, 4);
			Match(input,63,Follow._63_in_synpred116_C1313); if (state.failed) return;
			DebugLocation(332, 18);
			PushFollow(Follow._unary_expression_in_synpred116_C1315);
			unary_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred116_C_fragment", 209);
			LeaveRule("synpred116_C_fragment", 209);
			LeaveRule_synpred116_C_fragment();
		}
	}
	// $ANTLR end synpred116_C

	partial void EnterRule_synpred117_C_fragment();
	partial void LeaveRule_synpred117_C_fragment();

	// $ANTLR start synpred117_C
	public void synpred117_C_fragment()
	{
		EnterRule_synpred117_C_fragment();
		EnterRule("synpred117_C_fragment", 210);
		var retval = new XAstParserRuleReturnScope("synpred117_C_fragment");
		try
		{
			// C.g:333:4: ( '__alignof__' '(' type_name ')' )
			DebugEnterAlt(1);
			// C.g:333:4: '__alignof__' '(' type_name ')'
			{
			DebugLocation(333, 4);
			Match(input,63,Follow._63_in_synpred117_C1320); if (state.failed) return;
			DebugLocation(333, 18);
			Match(input,30,Follow._30_in_synpred117_C1322); if (state.failed) return;
			DebugLocation(333, 22);
			PushFollow(Follow._type_name_in_synpred117_C1324);
			type_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(333, 32);
			Match(input,31,Follow._31_in_synpred117_C1326); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred117_C_fragment", 210);
			LeaveRule("synpred117_C_fragment", 210);
			LeaveRule_synpred117_C_fragment();
		}
	}
	// $ANTLR end synpred117_C

	partial void EnterRule_synpred120_C_fragment();
	partial void LeaveRule_synpred120_C_fragment();

	// $ANTLR start synpred120_C
	public void synpred120_C_fragment()
	{
		EnterRule_synpred120_C_fragment();
		EnterRule("synpred120_C_fragment", 213);
		var retval = new XAstParserRuleReturnScope("synpred120_C_fragment");
		try
		{
			// C.g:341:7: ( '(' argument_expression_list ')' )
			DebugEnterAlt(1);
			// C.g:341:7: '(' argument_expression_list ')'
			{
			DebugLocation(341, 7);
			Match(input,30,Follow._30_in_synpred120_C1376); if (state.failed) return;
			DebugLocation(341, 11);
			PushFollow(Follow._argument_expression_list_in_synpred120_C1378);
			argument_expression_list();
			PopFollow();
			if (state.failed) return;
			DebugLocation(341, 36);
			Match(input,31,Follow._31_in_synpred120_C1380); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred120_C_fragment", 213);
			LeaveRule("synpred120_C_fragment", 213);
			LeaveRule_synpred120_C_fragment();
		}
	}
	// $ANTLR end synpred120_C

	partial void EnterRule_synpred123_C_fragment();
	partial void LeaveRule_synpred123_C_fragment();

	// $ANTLR start synpred123_C
	public void synpred123_C_fragment()
	{
		EnterRule_synpred123_C_fragment();
		EnterRule("synpred123_C_fragment", 216);
		var retval = new XAstParserRuleReturnScope("synpred123_C_fragment");
		try
		{
			// C.g:344:7: ( '++' )
			DebugEnterAlt(1);
			// C.g:344:7: '++'
			{
			DebugLocation(344, 7);
			Match(input,35,Follow._35_in_synpred123_C1408); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred123_C_fragment", 216);
			LeaveRule("synpred123_C_fragment", 216);
			LeaveRule_synpred123_C_fragment();
		}
	}
	// $ANTLR end synpred123_C

	partial void EnterRule_synpred124_C_fragment();
	partial void LeaveRule_synpred124_C_fragment();

	// $ANTLR start synpred124_C
	public void synpred124_C_fragment()
	{
		EnterRule_synpred124_C_fragment();
		EnterRule("synpred124_C_fragment", 217);
		var retval = new XAstParserRuleReturnScope("synpred124_C_fragment");
		try
		{
			// C.g:345:7: ( '--' )
			DebugEnterAlt(1);
			// C.g:345:7: '--'
			{
			DebugLocation(345, 7);
			Match(input,39,Follow._39_in_synpred124_C1416); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred124_C_fragment", 217);
			LeaveRule("synpred124_C_fragment", 217);
			LeaveRule_synpred124_C_fragment();
		}
	}
	// $ANTLR end synpred124_C

	partial void EnterRule_synpred140_C_fragment();
	partial void LeaveRule_synpred140_C_fragment();

	// $ANTLR start synpred140_C
	public void synpred140_C_fragment()
	{
		EnterRule_synpred140_C_fragment();
		EnterRule("synpred140_C_fragment", 233);
		var retval = new XAstParserRuleReturnScope("synpred140_C_fragment");
		try
		{
			// C.g:393:4: ( STRING_LITERAL )
			DebugEnterAlt(1);
			// C.g:393:4: STRING_LITERAL
			{
			DebugLocation(393, 4);
			new XToken((IToken)Match(input,STRING_LITERAL,Follow._STRING_LITERAL_in_synpred140_C1600), "STRING_LITERAL"); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred140_C_fragment", 233);
			LeaveRule("synpred140_C_fragment", 233);
			LeaveRule_synpred140_C_fragment();
		}
	}
	// $ANTLR end synpred140_C

	partial void EnterRule_synpred142_C_fragment();
	partial void LeaveRule_synpred142_C_fragment();

	// $ANTLR start synpred142_C
	public void synpred142_C_fragment()
	{
		EnterRule_synpred142_C_fragment();
		EnterRule("synpred142_C_fragment", 235);
		var retval = new XAstParserRuleReturnScope("synpred142_C_fragment");
		try
		{
			// C.g:411:4: ( lvalue assignment_operator assignment_expression )
			DebugEnterAlt(1);
			// C.g:411:4: lvalue assignment_operator assignment_expression
			{
			DebugLocation(411, 4);
			PushFollow(Follow._lvalue_in_synpred142_C1654);
			lvalue();
			PopFollow();
			if (state.failed) return;
			DebugLocation(411, 11);
			PushFollow(Follow._assignment_operator_in_synpred142_C1656);
			assignment_operator();
			PopFollow();
			if (state.failed) return;
			DebugLocation(411, 31);
			PushFollow(Follow._assignment_expression_in_synpred142_C1658);
			assignment_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred142_C_fragment", 235);
			LeaveRule("synpred142_C_fragment", 235);
			LeaveRule_synpred142_C_fragment();
		}
	}
	// $ANTLR end synpred142_C

	partial void EnterRule_synpred154_C_fragment();
	partial void LeaveRule_synpred154_C_fragment();

	// $ANTLR start synpred154_C
	public void synpred154_C_fragment()
	{
		EnterRule_synpred154_C_fragment();
		EnterRule("synpred154_C_fragment", 247);
		var retval = new XAstParserRuleReturnScope("synpred154_C_fragment");
		try
		{
			// C.g:434:4: ( logical_or_expression ( '?' expression ':' conditional_expression )? )
			DebugEnterAlt(1);
			// C.g:434:4: logical_or_expression ( '?' expression ':' conditional_expression )?
			{
			DebugLocation(434, 4);
			PushFollow(Follow._logical_or_expression_in_synpred154_C1747);
			logical_or_expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(434, 26);
			// C.g:434:26: ( '?' expression ':' conditional_expression )?
			int alt138=2;
			try { DebugEnterSubRule(138);
			try { DebugEnterDecision(138, false);
			int LA138_0 = input.LA(1);

			if ((LA138_0==58))
			{
				alt138 = 1;
			}
			} finally { DebugExitDecision(138); }
			switch (alt138)
			{
			case 1:
				DebugEnterAlt(1);
				// C.g:434:27: '?' expression ':' conditional_expression
				{
				DebugLocation(434, 27);
				Match(input,58,Follow._58_in_synpred154_C1750); if (state.failed) return;
				DebugLocation(434, 31);
				PushFollow(Follow._expression_in_synpred154_C1752);
				expression();
				PopFollow();
				if (state.failed) return;
				DebugLocation(434, 42);
				Match(input,46,Follow._46_in_synpred154_C1754); if (state.failed) return;
				DebugLocation(434, 46);
				PushFollow(Follow._conditional_expression_in_synpred154_C1756);
				conditional_expression();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(138); }


			}

		}
		finally
		{
			TraceOut("synpred154_C_fragment", 247);
			LeaveRule("synpred154_C_fragment", 247);
			LeaveRule_synpred154_C_fragment();
		}
	}
	// $ANTLR end synpred154_C

	partial void EnterRule_synpred159_C_fragment();
	partial void LeaveRule_synpred159_C_fragment();

	// $ANTLR start synpred159_C
	public void synpred159_C_fragment()
	{
		EnterRule_synpred159_C_fragment();
		EnterRule("synpred159_C_fragment", 252);
		var retval = new XAstParserRuleReturnScope("synpred159_C_fragment");
		try
		{
			// C.g:456:25: ( '&' equality_expression )
			DebugEnterAlt(1);
			// C.g:456:25: '&' equality_expression
			{
			DebugLocation(456, 25);
			Match(input,28,Follow._28_in_synpred159_C1857); if (state.failed) return;
			DebugLocation(456, 29);
			PushFollow(Follow._equality_expression_in_synpred159_C1859);
			equality_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred159_C_fragment", 252);
			LeaveRule("synpred159_C_fragment", 252);
			LeaveRule_synpred159_C_fragment();
		}
	}
	// $ANTLR end synpred159_C

	partial void EnterRule_synpred177_C_fragment();
	partial void LeaveRule_synpred177_C_fragment();

	// $ANTLR start synpred177_C
	public void synpred177_C_fragment()
	{
		EnterRule_synpred177_C_fragment();
		EnterRule("synpred177_C_fragment", 270);
		var retval = new XAstParserRuleReturnScope("synpred177_C_fragment");
		try
		{
			// C.g:497:4: ( declaration )
			DebugEnterAlt(1);
			// C.g:497:4: declaration
			{
			DebugLocation(497, 4);
			PushFollow(Follow._declaration_in_synpred177_C2046);
			declaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred177_C_fragment", 270);
			LeaveRule("synpred177_C_fragment", 270);
			LeaveRule_synpred177_C_fragment();
		}
	}
	// $ANTLR end synpred177_C

	partial void EnterRule_synpred191_C_fragment();
	partial void LeaveRule_synpred191_C_fragment();

	// $ANTLR start synpred191_C
	public void synpred191_C_fragment()
	{
		EnterRule_synpred191_C_fragment();
		EnterRule("synpred191_C_fragment", 284);
		var retval = new XAstParserRuleReturnScope("synpred191_C_fragment");
		try
		{
			// C.g:543:4: ( gcc_attribute )
			DebugEnterAlt(1);
			// C.g:543:4: gcc_attribute
			{
			DebugLocation(543, 4);
			PushFollow(Follow._gcc_attribute_in_synpred191_C2284);
			gcc_attribute();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred191_C_fragment", 284);
			LeaveRule("synpred191_C_fragment", 284);
			LeaveRule_synpred191_C_fragment();
		}
	}
	// $ANTLR end synpred191_C

	partial void EnterRule_synpred193_C_fragment();
	partial void LeaveRule_synpred193_C_fragment();

	// $ANTLR start synpred193_C
	public void synpred193_C_fragment()
	{
		EnterRule_synpred193_C_fragment();
		EnterRule("synpred193_C_fragment", 286);
		var retval = new XAstParserRuleReturnScope("synpred193_C_fragment");
		try
		{
			// C.g:555:4: ( gcc_attribute_name )
			DebugEnterAlt(1);
			// C.g:555:4: gcc_attribute_name
			{
			DebugLocation(555, 4);
			PushFollow(Follow._gcc_attribute_name_in_synpred193_C2335);
			gcc_attribute_name();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred193_C_fragment", 286);
			LeaveRule("synpred193_C_fragment", 286);
			LeaveRule_synpred193_C_fragment();
		}
	}
	// $ANTLR end synpred193_C

	partial void EnterRule_synpred196_C_fragment();
	partial void LeaveRule_synpred196_C_fragment();

	// $ANTLR start synpred196_C
	public void synpred196_C_fragment()
	{
		EnterRule_synpred196_C_fragment();
		EnterRule("synpred196_C_fragment", 289);
		var retval = new XAstParserRuleReturnScope("synpred196_C_fragment");
		try
		{
			// C.g:560:4: ( IDENTIFIER )
			DebugEnterAlt(1);
			// C.g:560:4: IDENTIFIER
			{
			DebugLocation(560, 4);
			new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_synpred196_C2367), "IDENTIFIER"); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred196_C_fragment", 289);
			LeaveRule("synpred196_C_fragment", 289);
			LeaveRule_synpred196_C_fragment();
		}
	}
	// $ANTLR end synpred196_C

	partial void EnterRule_synpred198_C_fragment();
	partial void LeaveRule_synpred198_C_fragment();

	// $ANTLR start synpred198_C
	public void synpred198_C_fragment()
	{
		EnterRule_synpred198_C_fragment();
		EnterRule("synpred198_C_fragment", 291);
		var retval = new XAstParserRuleReturnScope("synpred198_C_fragment");
		try
		{
			// C.g:562:4: ( type_specifier )
			DebugEnterAlt(1);
			// C.g:562:4: type_specifier
			{
			DebugLocation(562, 4);
			PushFollow(Follow._type_specifier_in_synpred198_C2377);
			type_specifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred198_C_fragment", 291);
			LeaveRule("synpred198_C_fragment", 291);
			LeaveRule_synpred198_C_fragment();
		}
	}
	// $ANTLR end synpred198_C

	partial void EnterRule_synpred214_C_fragment();
	partial void LeaveRule_synpred214_C_fragment();

	// $ANTLR start synpred214_C
	public void synpred214_C_fragment()
	{
		EnterRule_synpred214_C_fragment();
		EnterRule("synpred214_C_fragment", 307);
		var retval = new XAstParserRuleReturnScope("synpred214_C_fragment");
		try
		{
			// C.g:608:19: ( type_name )
			DebugEnterAlt(1);
			// C.g:608:19: type_name
			{
			DebugLocation(608, 19);
			PushFollow(Follow._type_name_in_synpred214_C2733);
			type_name();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred214_C_fragment", 307);
			LeaveRule("synpred214_C_fragment", 307);
			LeaveRule_synpred214_C_fragment();
		}
	}
	// $ANTLR end synpred214_C
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA37 dfa37;
	private DFA40 dfa40;
	private DFA39 dfa39;
	private DFA66 dfa66;
	private DFA70 dfa70;
	private DFA74 dfa74;
	private DFA76 dfa76;
	private DFA78 dfa78;
	private DFA90 dfa90;
	private DFA102 dfa102;
	private DFA117 dfa117;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa37 = new DFA37( this, SpecialStateTransition37 );
		dfa40 = new DFA40( this, SpecialStateTransition40 );
		dfa39 = new DFA39( this, SpecialStateTransition39 );
		dfa66 = new DFA66( this, SpecialStateTransition66 );
		dfa70 = new DFA70( this, SpecialStateTransition70 );
		dfa74 = new DFA74( this, SpecialStateTransition74 );
		dfa76 = new DFA76( this, SpecialStateTransition76 );
		dfa78 = new DFA78( this, SpecialStateTransition78 );
		dfa90 = new DFA90( this, SpecialStateTransition90 );
		dfa102 = new DFA102( this, SpecialStateTransition102 );
		dfa117 = new DFA117( this, SpecialStateTransition117 );
	}

	private class DFA37 : DFA
	{
		private const string DFA37_eotS =
			"\x4A\xFFFF";
		private const string DFA37_eofS =
			"\x1\x1\x49\xFFFF";
		private const string DFA37_minS =
			"\x1\xD\x1C\xFFFF\x1\xD\x1\x4\x2\x0\x1\xFFFF\x1\x0\x2\xFFFF\x11\x0\x2"+
			"\xFFFF\x11\x0\x1\xFFFF";
		private const string DFA37_maxS =
			"\x1\x72\x1C\xFFFF\x1\x70\x1\x77\x2\x0\x1\xFFFF\x1\x0\x2\xFFFF\x11\x0"+
			"\x2\xFFFF\x11\x0\x1\xFFFF";
		private const string DFA37_acceptS =
			"\x1\xFFFF\x1\x2\x47\xFFFF\x1\x1";
		private const string DFA37_specialS =
			"\x1F\xFFFF\x1\x0\x1\x1\x1\xFFFF\x1\x2\x2\xFFFF\x1\x3\x1\x4\x1\x5\x1\x6"+
			"\x1\x7\x1\x8\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11"+
			"\x1\x12\x1\x13\x2\xFFFF\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1"+
			"\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1"+
			"\x24\x1\xFFFF}>";
		private static readonly string[] DFA37_transitionS =
			{
				"\x1\x1\x10\xFFFF\x1\x1D\x2\x1\x4\xFFFF\x1\x1\x8\xFFFF\x2\x1\x4\xFFFF"+
				"\x1\x1\x6\xFFFF\x1\x1E\x4\xFFFF\x2\x1\x2\xFFFF\xC\x1\x2\xFFFF\x2\x1"+
				"\x3\xFFFF\x1\x1\x1\xFFFF\x3\x1\x3\xFFFF\x5\x1\x1\xFFFF\x2\x1\x1\xFFFF"+
				"\x2\x1\x1\xFFFF\x6\x1\x1\xFFFF\x1\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x22\x10\xFFFF\x1\x1\x1\x1F\x1\x1\x1A\xFFFF\x1\x1\x5\xFFFF\x1\x20"+
				"\x2\xFFFF\x1\x33\x2\x32\x1\x34\x2\x33\x4\x32\x1\xFFFF\x1\x25\x2\xFFFF"+
				"\x1\x27\x1\x32\x3\xFFFF\x1\x2C\x1\xFFFF\x1\x30\x1\x25\x1\x2B\x3\xFFFF"+
				"\x1\x33\x1\x29\x1\x2A\x1\x25\x1\x32\x1\xFFFF\x1\x28\x1\x2D\x1\xFFFF"+
				"\x1\x25\x1\x2F\x2\xFFFF\x1\x31\x1\x2F\x1\x2E\x1\x26\x1\x32",
				"\x1\x3D\x1\xFFFF\x1\x3C\x2\xFFFF\x1\x3F\x1\xFFFF\x1\x3A\x1\xFFFF\x1"+
				"\x39\x4\xFFFF\x1\x3B\x1\xFFFF\x1\x3E\x2\xFFFF\x1\x48\x4\xFFFF\x1\x48"+
				"\x1\xFFFF\x1\x38\x1\xFFFF\x1\x44\x1\xFFFF\x1\x48\x1\x42\x2\xFFFF\x1"+
				"\x48\x1\x43\x14\xFFFF\x1\x35\x2\xFFFF\x1\x46\x1\xFFFF\x1\x1\x1\x41\x1"+
				"\x40\x1\xFFFF\x2\x1\x1\x47\x2\xFFFF\x4\x1\x5\xFFFF\x1\x1\xF\xFFFF\x1"+
				"\x1\x3\xFFFF\x1\x45\x8\xFFFF\x1\x1\x6\xFFFF\x1\x48",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA37_eot = DFA.UnpackEncodedString(DFA37_eotS);
		private static readonly short[] DFA37_eof = DFA.UnpackEncodedString(DFA37_eofS);
		private static readonly char[] DFA37_min = DFA.UnpackEncodedStringToUnsignedChars(DFA37_minS);
		private static readonly char[] DFA37_max = DFA.UnpackEncodedStringToUnsignedChars(DFA37_maxS);
		private static readonly short[] DFA37_accept = DFA.UnpackEncodedString(DFA37_acceptS);
		private static readonly short[] DFA37_special = DFA.UnpackEncodedString(DFA37_specialS);
		private static readonly short[][] DFA37_transition;

		static DFA37()
		{
			int numStates = DFA37_transitionS.Length;
			DFA37_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA37_transition[i] = DFA.UnpackEncodedString(DFA37_transitionS[i]);
			}
		}

		public DFA37( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 37;
			this.eot = DFA37_eot;
			this.eof = DFA37_eof;
			this.min = DFA37_min;
			this.max = DFA37_max;
			this.accept = DFA37_accept;
			this.special = DFA37_special;
			this.transition = DFA37_transition;
		}

		public override string Description { get { return "()* loopback of 233:3: ( declarator_suffix )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition37(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA37_31 = input.LA(1);


				int index37_31 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_31);
				if (s >= 0) return s;
				break;

			case 1:
				int LA37_32 = input.LA(1);


				int index37_32 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_32);
				if (s >= 0) return s;
				break;

			case 2:
				int LA37_34 = input.LA(1);


				int index37_34 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_34);
				if (s >= 0) return s;
				break;

			case 3:
				int LA37_37 = input.LA(1);


				int index37_37 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_37);
				if (s >= 0) return s;
				break;

			case 4:
				int LA37_38 = input.LA(1);


				int index37_38 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_38);
				if (s >= 0) return s;
				break;

			case 5:
				int LA37_39 = input.LA(1);


				int index37_39 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_39);
				if (s >= 0) return s;
				break;

			case 6:
				int LA37_40 = input.LA(1);


				int index37_40 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_40);
				if (s >= 0) return s;
				break;

			case 7:
				int LA37_41 = input.LA(1);


				int index37_41 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_41);
				if (s >= 0) return s;
				break;

			case 8:
				int LA37_42 = input.LA(1);


				int index37_42 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_42);
				if (s >= 0) return s;
				break;

			case 9:
				int LA37_43 = input.LA(1);


				int index37_43 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_43);
				if (s >= 0) return s;
				break;

			case 10:
				int LA37_44 = input.LA(1);


				int index37_44 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_44);
				if (s >= 0) return s;
				break;

			case 11:
				int LA37_45 = input.LA(1);


				int index37_45 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_45);
				if (s >= 0) return s;
				break;

			case 12:
				int LA37_46 = input.LA(1);


				int index37_46 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_46);
				if (s >= 0) return s;
				break;

			case 13:
				int LA37_47 = input.LA(1);


				int index37_47 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_47);
				if (s >= 0) return s;
				break;

			case 14:
				int LA37_48 = input.LA(1);


				int index37_48 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_48);
				if (s >= 0) return s;
				break;

			case 15:
				int LA37_49 = input.LA(1);


				int index37_49 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_49);
				if (s >= 0) return s;
				break;

			case 16:
				int LA37_50 = input.LA(1);


				int index37_50 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_50);
				if (s >= 0) return s;
				break;

			case 17:
				int LA37_51 = input.LA(1);


				int index37_51 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_51);
				if (s >= 0) return s;
				break;

			case 18:
				int LA37_52 = input.LA(1);


				int index37_52 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_52);
				if (s >= 0) return s;
				break;

			case 19:
				int LA37_53 = input.LA(1);


				int index37_53 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_53);
				if (s >= 0) return s;
				break;

			case 20:
				int LA37_56 = input.LA(1);


				int index37_56 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_56);
				if (s >= 0) return s;
				break;

			case 21:
				int LA37_57 = input.LA(1);


				int index37_57 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_57);
				if (s >= 0) return s;
				break;

			case 22:
				int LA37_58 = input.LA(1);


				int index37_58 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_58);
				if (s >= 0) return s;
				break;

			case 23:
				int LA37_59 = input.LA(1);


				int index37_59 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_59);
				if (s >= 0) return s;
				break;

			case 24:
				int LA37_60 = input.LA(1);


				int index37_60 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_60);
				if (s >= 0) return s;
				break;

			case 25:
				int LA37_61 = input.LA(1);


				int index37_61 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_61);
				if (s >= 0) return s;
				break;

			case 26:
				int LA37_62 = input.LA(1);


				int index37_62 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_62);
				if (s >= 0) return s;
				break;

			case 27:
				int LA37_63 = input.LA(1);


				int index37_63 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_63);
				if (s >= 0) return s;
				break;

			case 28:
				int LA37_64 = input.LA(1);


				int index37_64 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_64);
				if (s >= 0) return s;
				break;

			case 29:
				int LA37_65 = input.LA(1);


				int index37_65 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_65);
				if (s >= 0) return s;
				break;

			case 30:
				int LA37_66 = input.LA(1);


				int index37_66 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_66);
				if (s >= 0) return s;
				break;

			case 31:
				int LA37_67 = input.LA(1);


				int index37_67 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_67);
				if (s >= 0) return s;
				break;

			case 32:
				int LA37_68 = input.LA(1);


				int index37_68 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_68);
				if (s >= 0) return s;
				break;

			case 33:
				int LA37_69 = input.LA(1);


				int index37_69 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_69);
				if (s >= 0) return s;
				break;

			case 34:
				int LA37_70 = input.LA(1);


				int index37_70 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_70);
				if (s >= 0) return s;
				break;

			case 35:
				int LA37_71 = input.LA(1);


				int index37_71 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_71);
				if (s >= 0) return s;
				break;

			case 36:
				int LA37_72 = input.LA(1);


				int index37_72 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred68_C_fragment))) {s = 73;}

				else if ((true)) {s = 1;}


				input.Seek(index37_72);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 37, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA40 : DFA
	{
		private const string DFA40_eotS =
			"\x3C\xFFFF";
		private const string DFA40_eofS =
			"\x1\x1\x3B\xFFFF";
		private const string DFA40_minS =
			"\x1\xD\x1B\xFFFF\x1\x0\x1F\xFFFF";
		private const string DFA40_maxS =
			"\x1\x72\x1B\xFFFF\x1\x0\x1F\xFFFF";
		private const string DFA40_acceptS =
			"\x1\xFFFF\x1\x2\x39\xFFFF\x1\x1";
		private const string DFA40_specialS =
			"\x1C\xFFFF\x1\x0\x1F\xFFFF}>";
		private static readonly string[] DFA40_transitionS =
			{
				"\x1\x1\x10\xFFFF\x2\x1\x1\x1C\x4\xFFFF\x1\x1\x8\xFFFF\x2\x1\x4\xFFFF"+
				"\x1\x1\x6\xFFFF\x1\x1\x5\xFFFF\x1\x1\x2\xFFFF\xA\x1\x1\xFFFF\x1\x1\x2"+
				"\xFFFF\x2\x1\x3\xFFFF\x1\x1\x1\xFFFF\x3\x1\x3\xFFFF\x5\x1\x1\xFFFF\x2"+
				"\x1\x1\xFFFF\x2\x1\x1\xFFFF\x6\x1\x1\xFFFF\x1\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA40_eot = DFA.UnpackEncodedString(DFA40_eotS);
		private static readonly short[] DFA40_eof = DFA.UnpackEncodedString(DFA40_eofS);
		private static readonly char[] DFA40_min = DFA.UnpackEncodedStringToUnsignedChars(DFA40_minS);
		private static readonly char[] DFA40_max = DFA.UnpackEncodedStringToUnsignedChars(DFA40_maxS);
		private static readonly short[] DFA40_accept = DFA.UnpackEncodedString(DFA40_acceptS);
		private static readonly short[] DFA40_special = DFA.UnpackEncodedString(DFA40_specialS);
		private static readonly short[][] DFA40_transition;

		static DFA40()
		{
			int numStates = DFA40_transitionS.Length;
			DFA40_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA40_transition[i] = DFA.UnpackEncodedString(DFA40_transitionS[i]);
			}
		}

		public DFA40( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 40;
			this.eot = DFA40_eot;
			this.eof = DFA40_eof;
			this.min = DFA40_min;
			this.max = DFA40_max;
			this.accept = DFA40_accept;
			this.special = DFA40_special;
			this.transition = DFA40_transition;
		}

		public override string Description { get { return "()+ loopback of 245:4: ( '*' ( type_qualifier | gcc_attribute )* )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition40(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA40_28 = input.LA(1);


				int index40_28 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred75_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index40_28);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 40, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA39 : DFA
	{
		private const string DFA39_eotS =
			"\x3E\xFFFF";
		private const string DFA39_eofS =
			"\x1\x1\x3D\xFFFF";
		private const string DFA39_minS =
			"\x1\xD\x11\xFFFF\x1\x0\x1\xFFFF\x1\x1E\x27\xFFFF\x1\x0\x1\xFFFF";
		private const string DFA39_maxS =
			"\x1\x72\x11\xFFFF\x1\x0\x1\xFFFF\x1\x1E\x27\xFFFF\x1\x0\x1\xFFFF";
		private const string DFA39_acceptS =
			"\x1\xFFFF\x1\x3\x39\xFFFF\x1\x1\x1\xFFFF\x1\x2";
		private const string DFA39_specialS =
			"\x12\xFFFF\x1\x0\x29\xFFFF\x1\x1\x1\xFFFF}>";
		private static readonly string[] DFA39_transitionS =
			{
				"\x1\x1\x10\xFFFF\x3\x1\x4\xFFFF\x1\x1\x8\xFFFF\x2\x1\x4\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x1\x5\xFFFF\x1\x14\x2\xFFFF\x1\x1\x2\x12\x3\x1\x4\x12\x1"+
				"\xFFFF\x1\x1\x2\xFFFF\x1\x1\x1\x12\x3\xFFFF\x1\x1\x1\xFFFF\x3\x1\x3"+
				"\xFFFF\x4\x1\x1\x12\x1\xFFFF\x2\x1\x1\xFFFF\x2\x1\x1\xFFFF\x5\x1\x1"+
				"\x12\x1\xFFFF\x1\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"\x1\x3C",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				""
			};

		private static readonly short[] DFA39_eot = DFA.UnpackEncodedString(DFA39_eotS);
		private static readonly short[] DFA39_eof = DFA.UnpackEncodedString(DFA39_eofS);
		private static readonly char[] DFA39_min = DFA.UnpackEncodedStringToUnsignedChars(DFA39_minS);
		private static readonly char[] DFA39_max = DFA.UnpackEncodedStringToUnsignedChars(DFA39_maxS);
		private static readonly short[] DFA39_accept = DFA.UnpackEncodedString(DFA39_acceptS);
		private static readonly short[] DFA39_special = DFA.UnpackEncodedString(DFA39_specialS);
		private static readonly short[][] DFA39_transition;

		static DFA39()
		{
			int numStates = DFA39_transitionS.Length;
			DFA39_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA39_transition[i] = DFA.UnpackEncodedString(DFA39_transitionS[i]);
			}
		}

		public DFA39( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 39;
			this.eot = DFA39_eot;
			this.eof = DFA39_eof;
			this.min = DFA39_min;
			this.max = DFA39_max;
			this.accept = DFA39_accept;
			this.special = DFA39_special;
			this.transition = DFA39_transition;
		}

		public override string Description { get { return "()* loopback of 245:9: ( type_qualifier | gcc_attribute )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition39(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA39_18 = input.LA(1);


				int index39_18 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred73_C_fragment))) {s = 59;}

				else if ((true)) {s = 1;}


				input.Seek(index39_18);
				if (s >= 0) return s;
				break;

			case 1:
				int LA39_60 = input.LA(1);


				int index39_60 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred74_C_fragment))) {s = 61;}

				else if ((true)) {s = 1;}


				input.Seek(index39_60);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 39, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA66 : DFA
	{
		private const string DFA66_eotS =
			"\x47\xFFFF";
		private const string DFA66_eofS =
			"\x1\x1\x46\xFFFF";
		private const string DFA66_minS =
			"\x1\x4\x1E\xFFFF\x1\x4\x3\xFFFF\x1\x4\x1\xFFFF\x20\x0\x2\xFFFF";
		private const string DFA66_maxS =
			"\x1\x77\x1E\xFFFF\x1\x77\x3\xFFFF\x1\x77\x1\xFFFF\x20\x0\x2\xFFFF";
		private const string DFA66_acceptS =
			"\x1\xFFFF\x1\x3\x43\xFFFF\x1\x1\x1\x2";
		private const string DFA66_specialS =
			"\x25\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14"+
			"\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E"+
			"\x1\x1F\x2\xFFFF}>";
		private static readonly string[] DFA66_transitionS =
			{
				"\x1\x1\x1\xFFFF\x1\x1\x2\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1\x4"+
				"\xFFFF\x1\x1\x1\xFFFF\x1\x1\x2\xFFFF\x2\x1\x2\xFFFF\x2\x1\x1\xFFFF\x3"+
				"\x1\x1\xFFFF\x1\x1F\x1\x1\x1\xFFFF\x1\x1\x1\x23\x1\x1\x3\xFFFF\x1\x1"+
				"\x2\xFFFF\x4\x1\x1\xFFFF\x1\x1\x1\xFFFF\x4\x1\x1\xFFFF\x1\x1\x1\xFFFF"+
				"\x2\x1\x1\xFFFF\x1\x1\x1\xFFFF\x3\x1\x3\xFFFF\x1\x1\x1F\xFFFF\x1\x1"+
				"\xB\xFFFF\x1\x1\x1\xFFFF\x3\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x2A\x1\xFFFF\x1\x29\x2\xFFFF\x1\x2C\x1\xFFFF\x1\x27\x1\xFFFF\x1"+
				"\x26\x4\xFFFF\x1\x28\x1\xFFFF\x1\x2B\x2\xFFFF\x1\x31\x4\xFFFF\x1\x31"+
				"\x1\xFFFF\x1\x25\x1\xFFFF\x1\x31\x1\xFFFF\x1\x31\x1\x2F\x2\xFFFF\x1"+
				"\x31\x1\x30\x17\xFFFF\x1\x33\x2\xFFFF\x1\x2E\x1\x2D\x3\xFFFF\x1\x34"+
				"\x1F\xFFFF\x1\x32\xF\xFFFF\x1\x31",
				"",
				"",
				"",
				"\x1\x3A\x1\xFFFF\x1\x39\x2\xFFFF\x1\x3C\x1\xFFFF\x1\x37\x1\xFFFF\x1"+
				"\x36\x4\xFFFF\x1\x38\x1\xFFFF\x1\x3B\x2\xFFFF\x1\x41\x4\xFFFF\x1\x41"+
				"\x1\xFFFF\x1\x35\x1\xFFFF\x1\x41\x1\xFFFF\x1\x41\x1\x3F\x2\xFFFF\x1"+
				"\x41\x1\x40\x17\xFFFF\x1\x43\x2\xFFFF\x1\x3E\x1\x3D\x3\xFFFF\x1\x44"+
				"\x1F\xFFFF\x1\x42\xF\xFFFF\x1\x41",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				""
			};

		private static readonly short[] DFA66_eot = DFA.UnpackEncodedString(DFA66_eotS);
		private static readonly short[] DFA66_eof = DFA.UnpackEncodedString(DFA66_eofS);
		private static readonly char[] DFA66_min = DFA.UnpackEncodedStringToUnsignedChars(DFA66_minS);
		private static readonly char[] DFA66_max = DFA.UnpackEncodedStringToUnsignedChars(DFA66_maxS);
		private static readonly short[] DFA66_accept = DFA.UnpackEncodedString(DFA66_acceptS);
		private static readonly short[] DFA66_special = DFA.UnpackEncodedString(DFA66_specialS);
		private static readonly short[][] DFA66_transition;

		static DFA66()
		{
			int numStates = DFA66_transitionS.Length;
			DFA66_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA66_transition[i] = DFA.UnpackEncodedString(DFA66_transitionS[i]);
			}
		}

		public DFA66( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 66;
			this.eot = DFA66_eot;
			this.eof = DFA66_eof;
			this.min = DFA66_min;
			this.max = DFA66_max;
			this.accept = DFA66_accept;
			this.special = DFA66_special;
			this.transition = DFA66_transition;
		}

		public override string Description { get { return "()* loopback of 312:32: ( '+' multiplicative_expression | '-' multiplicative_expression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition66(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA66_37 = input.LA(1);


				int index66_37 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index66_37);
				if (s >= 0) return s;
				break;

			case 1:
				int LA66_38 = input.LA(1);


				int index66_38 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index66_38);
				if (s >= 0) return s;
				break;

			case 2:
				int LA66_39 = input.LA(1);


				int index66_39 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index66_39);
				if (s >= 0) return s;
				break;

			case 3:
				int LA66_40 = input.LA(1);


				int index66_40 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index66_40);
				if (s >= 0) return s;
				break;

			case 4:
				int LA66_41 = input.LA(1);


				int index66_41 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index66_41);
				if (s >= 0) return s;
				break;

			case 5:
				int LA66_42 = input.LA(1);


				int index66_42 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index66_42);
				if (s >= 0) return s;
				break;

			case 6:
				int LA66_43 = input.LA(1);


				int index66_43 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index66_43);
				if (s >= 0) return s;
				break;

			case 7:
				int LA66_44 = input.LA(1);


				int index66_44 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index66_44);
				if (s >= 0) return s;
				break;

			case 8:
				int LA66_45 = input.LA(1);


				int index66_45 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index66_45);
				if (s >= 0) return s;
				break;

			case 9:
				int LA66_46 = input.LA(1);


				int index66_46 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index66_46);
				if (s >= 0) return s;
				break;

			case 10:
				int LA66_47 = input.LA(1);


				int index66_47 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index66_47);
				if (s >= 0) return s;
				break;

			case 11:
				int LA66_48 = input.LA(1);


				int index66_48 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index66_48);
				if (s >= 0) return s;
				break;

			case 12:
				int LA66_49 = input.LA(1);


				int index66_49 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index66_49);
				if (s >= 0) return s;
				break;

			case 13:
				int LA66_50 = input.LA(1);


				int index66_50 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index66_50);
				if (s >= 0) return s;
				break;

			case 14:
				int LA66_51 = input.LA(1);


				int index66_51 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index66_51);
				if (s >= 0) return s;
				break;

			case 15:
				int LA66_52 = input.LA(1);


				int index66_52 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred104_C_fragment))) {s = 69;}

				else if ((true)) {s = 1;}


				input.Seek(index66_52);
				if (s >= 0) return s;
				break;

			case 16:
				int LA66_53 = input.LA(1);


				int index66_53 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 70;}

				else if ((true)) {s = 1;}


				input.Seek(index66_53);
				if (s >= 0) return s;
				break;

			case 17:
				int LA66_54 = input.LA(1);


				int index66_54 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 70;}

				else if ((true)) {s = 1;}


				input.Seek(index66_54);
				if (s >= 0) return s;
				break;

			case 18:
				int LA66_55 = input.LA(1);


				int index66_55 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 70;}

				else if ((true)) {s = 1;}


				input.Seek(index66_55);
				if (s >= 0) return s;
				break;

			case 19:
				int LA66_56 = input.LA(1);


				int index66_56 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 70;}

				else if ((true)) {s = 1;}


				input.Seek(index66_56);
				if (s >= 0) return s;
				break;

			case 20:
				int LA66_57 = input.LA(1);


				int index66_57 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 70;}

				else if ((true)) {s = 1;}


				input.Seek(index66_57);
				if (s >= 0) return s;
				break;

			case 21:
				int LA66_58 = input.LA(1);


				int index66_58 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 70;}

				else if ((true)) {s = 1;}


				input.Seek(index66_58);
				if (s >= 0) return s;
				break;

			case 22:
				int LA66_59 = input.LA(1);


				int index66_59 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 70;}

				else if ((true)) {s = 1;}


				input.Seek(index66_59);
				if (s >= 0) return s;
				break;

			case 23:
				int LA66_60 = input.LA(1);


				int index66_60 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 70;}

				else if ((true)) {s = 1;}


				input.Seek(index66_60);
				if (s >= 0) return s;
				break;

			case 24:
				int LA66_61 = input.LA(1);


				int index66_61 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 70;}

				else if ((true)) {s = 1;}


				input.Seek(index66_61);
				if (s >= 0) return s;
				break;

			case 25:
				int LA66_62 = input.LA(1);


				int index66_62 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 70;}

				else if ((true)) {s = 1;}


				input.Seek(index66_62);
				if (s >= 0) return s;
				break;

			case 26:
				int LA66_63 = input.LA(1);


				int index66_63 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 70;}

				else if ((true)) {s = 1;}


				input.Seek(index66_63);
				if (s >= 0) return s;
				break;

			case 27:
				int LA66_64 = input.LA(1);


				int index66_64 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 70;}

				else if ((true)) {s = 1;}


				input.Seek(index66_64);
				if (s >= 0) return s;
				break;

			case 28:
				int LA66_65 = input.LA(1);


				int index66_65 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 70;}

				else if ((true)) {s = 1;}


				input.Seek(index66_65);
				if (s >= 0) return s;
				break;

			case 29:
				int LA66_66 = input.LA(1);


				int index66_66 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 70;}

				else if ((true)) {s = 1;}


				input.Seek(index66_66);
				if (s >= 0) return s;
				break;

			case 30:
				int LA66_67 = input.LA(1);


				int index66_67 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 70;}

				else if ((true)) {s = 1;}


				input.Seek(index66_67);
				if (s >= 0) return s;
				break;

			case 31:
				int LA66_68 = input.LA(1);


				int index66_68 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred105_C_fragment))) {s = 70;}

				else if ((true)) {s = 1;}


				input.Seek(index66_68);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 66, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA70 : DFA
	{
		private const string DFA70_eotS =
			"\xA3\xFFFF";
		private const string DFA70_eofS =
			"\x1\x1\x21\xFFFF\x1\x5D\x1\x88\x7F\xFFFF";
		private const string DFA70_minS =
			"\x1\x4\x1E\xFFFF\x1\x4\x2\xFFFF\x2\x4\x9\xFFFF\x10\x0\xF\xFFFF\x11\x0"+
			"\x2\xFFFF\x2\x0\x3\xFFFF\x1\x0\x12\xFFFF\x11\x0\x2\xFFFF\x2\x0\x3\xFFFF"+
			"\x1\x0\x13\xFFFF";
		private const string DFA70_maxS =
			"\x1\x77\x1E\xFFFF\x1\x77\x2\xFFFF\x2\x77\x9\xFFFF\x10\x0\xF\xFFFF\x11"+
			"\x0\x2\xFFFF\x2\x0\x3\xFFFF\x1\x0\x12\xFFFF\x11\x0\x2\xFFFF\x2\x0\x3"+
			"\xFFFF\x1\x0\x13\xFFFF";
		private const string DFA70_acceptS =
			"\x1\xFFFF\x1\x8\x27\xFFFF\x1\x1\x1\x4\x1\x5\x1\x2\x30\xFFFF\x1\x6\x2A"+
			"\xFFFF\x1\x7\x19\xFFFF\x1\x3";
		private const string DFA70_specialS =
			"\x2D\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9"+
			"\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\xF\xFFFF\x1\x10\x1\x11\x1\x12\x1"+
			"\x13\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1"+
			"\x1D\x1\x1E\x1\x1F\x1\x20\x2\xFFFF\x1\x21\x1\x22\x3\xFFFF\x1\x23\x12"+
			"\xFFFF\x1\x24\x1\x25\x1\x26\x1\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x1\x2C"+
			"\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1\x32\x1\x33\x1\x34\x2\xFFFF\x1"+
			"\x35\x1\x36\x3\xFFFF\x1\x37\x13\xFFFF}>";
		private static readonly string[] DFA70_transitionS =
			{
				"\x1\x1\x1\xFFFF\x1\x1\x2\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1\x4"+
				"\xFFFF\x1\x1\x1\xFFFF\x1\x1\x2\xFFFF\x7\x1\x1\x1F\x4\x1\x1\x22\x3\x1"+
				"\x1\x23\x1\x1\x1\x2B\x1\x2A\x10\x1\x1\x29\x4\x1\x1\xFFFF\x3\x1\x3\xFFFF"+
				"\x1\x1\x1F\xFFFF\x1\x1\xB\xFFFF\x5\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x31\x1\xFFFF\x1\x30\x2\xFFFF\x1\x33\x1\xFFFF\x1\x2E\x1\xFFFF\x1"+
				"\x2D\x4\xFFFF\x1\x2F\x1\xFFFF\x1\x32\x2\xFFFF\x1\x39\x4\xFFFF\x1\x39"+
				"\x1\xFFFF\x1\x34\x1\x2C\x1\x39\x1\xFFFF\x1\x39\x1\x37\x2\xFFFF\x1\x39"+
				"\x1\x38\x17\xFFFF\x1\x3B\x1\xFFFF\x1\x1\x1\x36\x1\x35\x1\xFFFF\x2\x1"+
				"\x1\x3C\x2\xFFFF\x4\x1\x4\xFFFF\x2\x1\x3\xFFFF\x1\x1\x1\xFFFF\x1\x1"+
				"\x1\xFFFF\x1\x1\x4\xFFFF\x2\x1\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1\x1\x3A"+
				"\x1\xFFFF\x1\x1\x2\xFFFF\x5\x1\x1\xFFFF\x1\x1\x4\xFFFF\x1\x39",
				"",
				"",
				"\x1\x50\x1\xFFFF\x1\x4F\x2\xFFFF\x1\x52\x1\xFFFF\x1\x4D\x1\xFFFF\x1"+
				"\x4C\x4\xFFFF\x1\x4E\x1\xFFFF\x1\x51\x2\xFFFF\x1\x64\x4\x5D\x1\x60\x1"+
				"\x5D\x1\x53\x1\x5D\x1\x58\x1\x5D\x1\x5C\x1\x56\x2\x5D\x1\x5F\x1\x57"+
				"\x17\x5D\x1\x5A\x1\xFFFF\x1\x5D\x1\x55\x1\x54\x3\xFFFF\x1\x5B\x1F\xFFFF"+
				"\x1\x59\xB\xFFFF\x4\x5D\x1\x64",
				"\x1\x7B\x1\xFFFF\x1\x7A\x2\xFFFF\x1\x7D\x1\xFFFF\x1\x78\x1\xFFFF\x1"+
				"\x77\x4\xFFFF\x1\x79\x1\xFFFF\x1\x7C\x2\xFFFF\x1\x8F\x4\x88\x1\x8B\x1"+
				"\x88\x1\x7E\x1\x88\x1\x83\x1\x88\x1\x87\x1\x81\x2\x88\x1\x8A\x1\x82"+
				"\x17\x88\x1\x85\x1\xFFFF\x1\x88\x1\x80\x1\x7F\x3\xFFFF\x1\x86\x1F\xFFFF"+
				"\x1\x84\xB\xFFFF\x4\x88\x1\x8F",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA70_eot = DFA.UnpackEncodedString(DFA70_eotS);
		private static readonly short[] DFA70_eof = DFA.UnpackEncodedString(DFA70_eofS);
		private static readonly char[] DFA70_min = DFA.UnpackEncodedStringToUnsignedChars(DFA70_minS);
		private static readonly char[] DFA70_max = DFA.UnpackEncodedStringToUnsignedChars(DFA70_maxS);
		private static readonly short[] DFA70_accept = DFA.UnpackEncodedString(DFA70_acceptS);
		private static readonly short[] DFA70_special = DFA.UnpackEncodedString(DFA70_specialS);
		private static readonly short[][] DFA70_transition;

		static DFA70()
		{
			int numStates = DFA70_transitionS.Length;
			DFA70_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA70_transition[i] = DFA.UnpackEncodedString(DFA70_transitionS[i]);
			}
		}

		public DFA70( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 70;
			this.eot = DFA70_eot;
			this.eof = DFA70_eof;
			this.min = DFA70_min;
			this.max = DFA70_max;
			this.accept = DFA70_accept;
			this.special = DFA70_special;
			this.transition = DFA70_transition;
		}

		public override string Description { get { return "()* loopback of 339:3: ( '[' expression ']' | '(' ')' | '(' argument_expression_list ')' | '.' IDENTIFIER | '->' IDENTIFIER | '++' | '--' )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition70(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA70_45 = input.LA(1);


				int index70_45 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred120_C_fragment))) {s = 162;}

				else if ((true)) {s = 1;}


				input.Seek(index70_45);
				if (s >= 0) return s;
				break;

			case 1:
				int LA70_46 = input.LA(1);


				int index70_46 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred120_C_fragment))) {s = 162;}

				else if ((true)) {s = 1;}


				input.Seek(index70_46);
				if (s >= 0) return s;
				break;

			case 2:
				int LA70_47 = input.LA(1);


				int index70_47 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred120_C_fragment))) {s = 162;}

				else if ((true)) {s = 1;}


				input.Seek(index70_47);
				if (s >= 0) return s;
				break;

			case 3:
				int LA70_48 = input.LA(1);


				int index70_48 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred120_C_fragment))) {s = 162;}

				else if ((true)) {s = 1;}


				input.Seek(index70_48);
				if (s >= 0) return s;
				break;

			case 4:
				int LA70_49 = input.LA(1);


				int index70_49 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred120_C_fragment))) {s = 162;}

				else if ((true)) {s = 1;}


				input.Seek(index70_49);
				if (s >= 0) return s;
				break;

			case 5:
				int LA70_50 = input.LA(1);


				int index70_50 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred120_C_fragment))) {s = 162;}

				else if ((true)) {s = 1;}


				input.Seek(index70_50);
				if (s >= 0) return s;
				break;

			case 6:
				int LA70_51 = input.LA(1);


				int index70_51 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred120_C_fragment))) {s = 162;}

				else if ((true)) {s = 1;}


				input.Seek(index70_51);
				if (s >= 0) return s;
				break;

			case 7:
				int LA70_52 = input.LA(1);


				int index70_52 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred120_C_fragment))) {s = 162;}

				else if ((true)) {s = 1;}


				input.Seek(index70_52);
				if (s >= 0) return s;
				break;

			case 8:
				int LA70_53 = input.LA(1);


				int index70_53 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred120_C_fragment))) {s = 162;}

				else if ((true)) {s = 1;}


				input.Seek(index70_53);
				if (s >= 0) return s;
				break;

			case 9:
				int LA70_54 = input.LA(1);


				int index70_54 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred120_C_fragment))) {s = 162;}

				else if ((true)) {s = 1;}


				input.Seek(index70_54);
				if (s >= 0) return s;
				break;

			case 10:
				int LA70_55 = input.LA(1);


				int index70_55 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred120_C_fragment))) {s = 162;}

				else if ((true)) {s = 1;}


				input.Seek(index70_55);
				if (s >= 0) return s;
				break;

			case 11:
				int LA70_56 = input.LA(1);


				int index70_56 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred120_C_fragment))) {s = 162;}

				else if ((true)) {s = 1;}


				input.Seek(index70_56);
				if (s >= 0) return s;
				break;

			case 12:
				int LA70_57 = input.LA(1);


				int index70_57 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred120_C_fragment))) {s = 162;}

				else if ((true)) {s = 1;}


				input.Seek(index70_57);
				if (s >= 0) return s;
				break;

			case 13:
				int LA70_58 = input.LA(1);


				int index70_58 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred120_C_fragment))) {s = 162;}

				else if ((true)) {s = 1;}


				input.Seek(index70_58);
				if (s >= 0) return s;
				break;

			case 14:
				int LA70_59 = input.LA(1);


				int index70_59 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred120_C_fragment))) {s = 162;}

				else if ((true)) {s = 1;}


				input.Seek(index70_59);
				if (s >= 0) return s;
				break;

			case 15:
				int LA70_60 = input.LA(1);


				int index70_60 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred120_C_fragment))) {s = 162;}

				else if ((true)) {s = 1;}


				input.Seek(index70_60);
				if (s >= 0) return s;
				break;

			case 16:
				int LA70_76 = input.LA(1);


				int index70_76 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred123_C_fragment))) {s = 93;}

				else if ((true)) {s = 1;}


				input.Seek(index70_76);
				if (s >= 0) return s;
				break;

			case 17:
				int LA70_77 = input.LA(1);


				int index70_77 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred123_C_fragment))) {s = 93;}

				else if ((true)) {s = 1;}


				input.Seek(index70_77);
				if (s >= 0) return s;
				break;

			case 18:
				int LA70_78 = input.LA(1);


				int index70_78 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred123_C_fragment))) {s = 93;}

				else if ((true)) {s = 1;}


				input.Seek(index70_78);
				if (s >= 0) return s;
				break;

			case 19:
				int LA70_79 = input.LA(1);


				int index70_79 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred123_C_fragment))) {s = 93;}

				else if ((true)) {s = 1;}


				input.Seek(index70_79);
				if (s >= 0) return s;
				break;

			case 20:
				int LA70_80 = input.LA(1);


				int index70_80 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred123_C_fragment))) {s = 93;}

				else if ((true)) {s = 1;}


				input.Seek(index70_80);
				if (s >= 0) return s;
				break;

			case 21:
				int LA70_81 = input.LA(1);


				int index70_81 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred123_C_fragment))) {s = 93;}

				else if ((true)) {s = 1;}


				input.Seek(index70_81);
				if (s >= 0) return s;
				break;

			case 22:
				int LA70_82 = input.LA(1);


				int index70_82 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred123_C_fragment))) {s = 93;}

				else if ((true)) {s = 1;}


				input.Seek(index70_82);
				if (s >= 0) return s;
				break;

			case 23:
				int LA70_83 = input.LA(1);


				int index70_83 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred123_C_fragment))) {s = 93;}

				else if ((true)) {s = 1;}


				input.Seek(index70_83);
				if (s >= 0) return s;
				break;

			case 24:
				int LA70_84 = input.LA(1);


				int index70_84 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred123_C_fragment))) {s = 93;}

				else if ((true)) {s = 1;}


				input.Seek(index70_84);
				if (s >= 0) return s;
				break;

			case 25:
				int LA70_85 = input.LA(1);


				int index70_85 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred123_C_fragment))) {s = 93;}

				else if ((true)) {s = 1;}


				input.Seek(index70_85);
				if (s >= 0) return s;
				break;

			case 26:
				int LA70_86 = input.LA(1);


				int index70_86 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred123_C_fragment))) {s = 93;}

				else if ((true)) {s = 1;}


				input.Seek(index70_86);
				if (s >= 0) return s;
				break;

			case 27:
				int LA70_87 = input.LA(1);


				int index70_87 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred123_C_fragment))) {s = 93;}

				else if ((true)) {s = 1;}


				input.Seek(index70_87);
				if (s >= 0) return s;
				break;

			case 28:
				int LA70_88 = input.LA(1);


				int index70_88 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred123_C_fragment))) {s = 93;}

				else if ((true)) {s = 1;}


				input.Seek(index70_88);
				if (s >= 0) return s;
				break;

			case 29:
				int LA70_89 = input.LA(1);


				int index70_89 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred123_C_fragment))) {s = 93;}

				else if ((true)) {s = 1;}


				input.Seek(index70_89);
				if (s >= 0) return s;
				break;

			case 30:
				int LA70_90 = input.LA(1);


				int index70_90 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred123_C_fragment))) {s = 93;}

				else if ((true)) {s = 1;}


				input.Seek(index70_90);
				if (s >= 0) return s;
				break;

			case 31:
				int LA70_91 = input.LA(1);


				int index70_91 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred123_C_fragment))) {s = 93;}

				else if ((true)) {s = 1;}


				input.Seek(index70_91);
				if (s >= 0) return s;
				break;

			case 32:
				int LA70_92 = input.LA(1);


				int index70_92 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred123_C_fragment))) {s = 93;}

				else if ((true)) {s = 1;}


				input.Seek(index70_92);
				if (s >= 0) return s;
				break;

			case 33:
				int LA70_95 = input.LA(1);


				int index70_95 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred123_C_fragment))) {s = 93;}

				else if ((true)) {s = 1;}


				input.Seek(index70_95);
				if (s >= 0) return s;
				break;

			case 34:
				int LA70_96 = input.LA(1);


				int index70_96 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred123_C_fragment))) {s = 93;}

				else if ((true)) {s = 1;}


				input.Seek(index70_96);
				if (s >= 0) return s;
				break;

			case 35:
				int LA70_100 = input.LA(1);


				int index70_100 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred123_C_fragment))) {s = 93;}

				else if ((true)) {s = 1;}


				input.Seek(index70_100);
				if (s >= 0) return s;
				break;

			case 36:
				int LA70_119 = input.LA(1);


				int index70_119 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred124_C_fragment))) {s = 136;}

				else if ((true)) {s = 1;}


				input.Seek(index70_119);
				if (s >= 0) return s;
				break;

			case 37:
				int LA70_120 = input.LA(1);


				int index70_120 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred124_C_fragment))) {s = 136;}

				else if ((true)) {s = 1;}


				input.Seek(index70_120);
				if (s >= 0) return s;
				break;

			case 38:
				int LA70_121 = input.LA(1);


				int index70_121 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred124_C_fragment))) {s = 136;}

				else if ((true)) {s = 1;}


				input.Seek(index70_121);
				if (s >= 0) return s;
				break;

			case 39:
				int LA70_122 = input.LA(1);


				int index70_122 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred124_C_fragment))) {s = 136;}

				else if ((true)) {s = 1;}


				input.Seek(index70_122);
				if (s >= 0) return s;
				break;

			case 40:
				int LA70_123 = input.LA(1);


				int index70_123 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred124_C_fragment))) {s = 136;}

				else if ((true)) {s = 1;}


				input.Seek(index70_123);
				if (s >= 0) return s;
				break;

			case 41:
				int LA70_124 = input.LA(1);


				int index70_124 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred124_C_fragment))) {s = 136;}

				else if ((true)) {s = 1;}


				input.Seek(index70_124);
				if (s >= 0) return s;
				break;

			case 42:
				int LA70_125 = input.LA(1);


				int index70_125 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred124_C_fragment))) {s = 136;}

				else if ((true)) {s = 1;}


				input.Seek(index70_125);
				if (s >= 0) return s;
				break;

			case 43:
				int LA70_126 = input.LA(1);


				int index70_126 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred124_C_fragment))) {s = 136;}

				else if ((true)) {s = 1;}


				input.Seek(index70_126);
				if (s >= 0) return s;
				break;

			case 44:
				int LA70_127 = input.LA(1);


				int index70_127 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred124_C_fragment))) {s = 136;}

				else if ((true)) {s = 1;}


				input.Seek(index70_127);
				if (s >= 0) return s;
				break;

			case 45:
				int LA70_128 = input.LA(1);


				int index70_128 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred124_C_fragment))) {s = 136;}

				else if ((true)) {s = 1;}


				input.Seek(index70_128);
				if (s >= 0) return s;
				break;

			case 46:
				int LA70_129 = input.LA(1);


				int index70_129 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred124_C_fragment))) {s = 136;}

				else if ((true)) {s = 1;}


				input.Seek(index70_129);
				if (s >= 0) return s;
				break;

			case 47:
				int LA70_130 = input.LA(1);


				int index70_130 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred124_C_fragment))) {s = 136;}

				else if ((true)) {s = 1;}


				input.Seek(index70_130);
				if (s >= 0) return s;
				break;

			case 48:
				int LA70_131 = input.LA(1);


				int index70_131 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred124_C_fragment))) {s = 136;}

				else if ((true)) {s = 1;}


				input.Seek(index70_131);
				if (s >= 0) return s;
				break;

			case 49:
				int LA70_132 = input.LA(1);


				int index70_132 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred124_C_fragment))) {s = 136;}

				else if ((true)) {s = 1;}


				input.Seek(index70_132);
				if (s >= 0) return s;
				break;

			case 50:
				int LA70_133 = input.LA(1);


				int index70_133 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred124_C_fragment))) {s = 136;}

				else if ((true)) {s = 1;}


				input.Seek(index70_133);
				if (s >= 0) return s;
				break;

			case 51:
				int LA70_134 = input.LA(1);


				int index70_134 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred124_C_fragment))) {s = 136;}

				else if ((true)) {s = 1;}


				input.Seek(index70_134);
				if (s >= 0) return s;
				break;

			case 52:
				int LA70_135 = input.LA(1);


				int index70_135 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred124_C_fragment))) {s = 136;}

				else if ((true)) {s = 1;}


				input.Seek(index70_135);
				if (s >= 0) return s;
				break;

			case 53:
				int LA70_138 = input.LA(1);


				int index70_138 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred124_C_fragment))) {s = 136;}

				else if ((true)) {s = 1;}


				input.Seek(index70_138);
				if (s >= 0) return s;
				break;

			case 54:
				int LA70_139 = input.LA(1);


				int index70_139 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred124_C_fragment))) {s = 136;}

				else if ((true)) {s = 1;}


				input.Seek(index70_139);
				if (s >= 0) return s;
				break;

			case 55:
				int LA70_143 = input.LA(1);


				int index70_143 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred124_C_fragment))) {s = 136;}

				else if ((true)) {s = 1;}


				input.Seek(index70_143);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 70, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA74 : DFA
	{
		private const string DFA74_eotS =
			"\x58\xFFFF";
		private const string DFA74_eofS =
			"\x1\x1\x57\xFFFF";
		private const string DFA74_minS =
			"\x1\x4\x22\xFFFF\x1\x0\x34\xFFFF";
		private const string DFA74_maxS =
			"\x1\x77\x22\xFFFF\x1\x0\x34\xFFFF";
		private const string DFA74_acceptS =
			"\x1\xFFFF\x1\x2\x55\xFFFF\x1\x1";
		private const string DFA74_specialS =
			"\x23\xFFFF\x1\x0\x34\xFFFF}>";
		private static readonly string[] DFA74_transitionS =
			{
				"\x1\x1\x1\xFFFF\x1\x1\x2\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1\x4"+
				"\xFFFF\x1\x1\x1\xFFFF\x1\x23\x2\xFFFF\x29\x1\x1\xFFFF\x3\x1\x3\xFFFF"+
				"\x1\x1\x1F\xFFFF\x1\x1\xB\xFFFF\x5\x1",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA74_eot = DFA.UnpackEncodedString(DFA74_eotS);
		private static readonly short[] DFA74_eof = DFA.UnpackEncodedString(DFA74_eofS);
		private static readonly char[] DFA74_min = DFA.UnpackEncodedStringToUnsignedChars(DFA74_minS);
		private static readonly char[] DFA74_max = DFA.UnpackEncodedStringToUnsignedChars(DFA74_maxS);
		private static readonly short[] DFA74_accept = DFA.UnpackEncodedString(DFA74_acceptS);
		private static readonly short[] DFA74_special = DFA.UnpackEncodedString(DFA74_specialS);
		private static readonly short[][] DFA74_transition;

		static DFA74()
		{
			int numStates = DFA74_transitionS.Length;
			DFA74_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA74_transition[i] = DFA.UnpackEncodedString(DFA74_transitionS[i]);
			}
		}

		public DFA74( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 74;
			this.eot = DFA74_eot;
			this.eof = DFA74_eof;
			this.min = DFA74_min;
			this.max = DFA74_max;
			this.accept = DFA74_accept;
			this.special = DFA74_special;
			this.transition = DFA74_transition;
		}

		public override string Description { get { return "()+ loopback of 393:4: ( STRING_LITERAL )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition74(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA74_35 = input.LA(1);


				int index74_35 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred140_C_fragment))) {s = 87;}

				else if ((true)) {s = 1;}


				input.Seek(index74_35);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 74, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA76 : DFA
	{
		private const string DFA76_eotS =
			"\x1B1\xFFFF";
		private const string DFA76_eofS =
			"\x1\xFFFF\x5\x18\x1\xFFFF\x1\x18\x1A9\xFFFF";
		private const string DFA76_minS =
			"\x6\x4\x1\x0\x2\x4\x2\x1E\x6\x4\x6\x0\x23\xFFFF\x6\x0\x23\xFFFF\x6\x0"+
			"\x23\xFFFF\x6\x0\x23\xFFFF\x6\x0\x4C\xFFFF\x6\x0\x23\xFFFF\x11\x0\xE"+
			"\xFFFF\x62\x0";
		private const string DFA76_maxS =
			"\x6\x77\x1\x0\x2\x77\x2\x1E\x6\x77\x6\x0\x23\xFFFF\x6\x0\x23\xFFFF\x6"+
			"\x0\x23\xFFFF\x6\x0\x23\xFFFF\x6\x0\x4C\xFFFF\x6\x0\x23\xFFFF\x11\x0"+
			"\xE\xFFFF\x62\x0";
		private const string DFA76_acceptS =
			"\x17\xFFFF\x1\x1\x1\x2\x198\xFFFF";
		private const string DFA76_specialS =
			"\x6\xFFFF\x1\x0\xA\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x23\xFFFF"+
			"\x1\x7\x1\x8\x1\x9\x1\xA\x1\xB\x1\xC\x23\xFFFF\x1\xD\x1\xE\x1\xF\x1\x10"+
			"\x1\x11\x1\x12\x23\xFFFF\x1\x13\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x23"+
			"\xFFFF\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E\x4C\xFFFF\x1\x1F\x1"+
			"\x20\x1\x21\x1\x22\x1\x23\x1\x24\x23\xFFFF\x1\x25\x1\x26\x1\x27\x1\x28"+
			"\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1\x31\x1\x32"+
			"\x1\x33\x1\x34\x1\x35\xE\xFFFF\x1\x36\x1\x37\x1\x38\x1\x39\x1\x3A\x1"+
			"\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x1\x40\x1\x41\x1\x42\x1\x43\x1\x44\x1"+
			"\x45\x1\x46\x1\x47\x1\x48\x1\x49\x1\x4A\x1\x4B\x1\x4C\x1\x4D\x1\x4E\x1"+
			"\x4F\x1\x50\x1\x51\x1\x52\x1\x53\x1\x54\x1\x55\x1\x56\x1\x57\x1\x58\x1"+
			"\x59\x1\x5A\x1\x5B\x1\x5C\x1\x5D\x1\x5E\x1\x5F\x1\x60\x1\x61\x1\x62\x1"+
			"\x63\x1\x64\x1\x65\x1\x66\x1\x67\x1\x68\x1\x69\x1\x6A\x1\x6B\x1\x6C\x1"+
			"\x6D\x1\x6E\x1\x6F\x1\x70\x1\x71\x1\x72\x1\x73\x1\x74\x1\x75\x1\x76\x1"+
			"\x77\x1\x78\x1\x79\x1\x7A\x1\x7B\x1\x7C\x1\x7D\x1\x7E\x1\x7F\x1\x80\x1"+
			"\x81\x1\x82\x1\x83\x1\x84\x1\x85\x1\x86\x1\x87\x1\x88\x1\x89\x1\x8A\x1"+
			"\x8B\x1\x8C\x1\x8D\x1\x8E\x1\x8F\x1\x90\x1\x91\x1\x92\x1\x93\x1\x94\x1"+
			"\x95\x1\x96\x1\x97}>";
		private static readonly string[] DFA76_transitionS =
			{
				"\x1\x5\x1\xFFFF\x1\x4\x2\xFFFF\x1\x7\x1\xFFFF\x1\x2\x1\xFFFF\x1\x1\x4"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x6\x2\xFFFF\x1\xD\x4\xFFFF\x1\xD\x1\xFFFF\x1"+
				"\x8\x1\xFFFF\x1\xD\x1\xFFFF\x1\xD\x1\xB\x2\xFFFF\x1\xD\x1\xC\x17\xFFFF"+
				"\x1\xF\x2\xFFFF\x1\xA\x1\x9\x3\xFFFF\x1\x10\x1F\xFFFF\x1\xE\xF\xFFFF"+
				"\x1\xD",
				"\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x1\x18\x1\xFFFF\x1\x18\x1\xFFFF\x1"+
				"\x18\x4\xFFFF\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x3\x18\x1\x17\x2\x18\x1"+
				"\x17\x1\x12\x2\x18\x1\x17\x1\x18\x1\x15\x1\x17\x2\x18\x1\x16\x1\x17"+
				"\x1\x14\x1\x13\x1\xFFFF\x1\x18\x1\x17\x4\x18\x1\x17\x1\x18\x1\x17\x4"+
				"\x18\x1\x17\x1\x18\x1\x11\x2\x18\x1\x17\x1\x18\x2\xFFFF\x2\x18\x3\xFFFF"+
				"\x1\x18\x1F\xFFFF\x1\x18\xB\xFFFF\x1\x18\x1\x17\x3\x18",
				"\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x1\x18\x1\xFFFF\x1\x18\x1\xFFFF\x1"+
				"\x18\x4\xFFFF\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x3\x18\x1\x17\x2\x18\x1"+
				"\x17\x1\x3B\x2\x18\x1\x17\x1\x18\x1\x3E\x1\x17\x2\x18\x1\x3F\x1\x17"+
				"\x1\x3D\x1\x3C\x1\xFFFF\x1\x18\x1\x17\x4\x18\x1\x17\x1\x18\x1\x17\x4"+
				"\x18\x1\x17\x1\x18\x1\x3A\x2\x18\x1\x17\x1\x18\x2\xFFFF\x2\x18\x3\xFFFF"+
				"\x1\x18\x1F\xFFFF\x1\x18\xB\xFFFF\x1\x18\x1\x17\x3\x18",
				"\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x1\x18\x1\xFFFF\x1\x18\x1\xFFFF\x1"+
				"\x18\x4\xFFFF\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x3\x18\x1\x17\x2\x18\x1"+
				"\x17\x1\x64\x2\x18\x1\x17\x1\x18\x1\x67\x1\x17\x2\x18\x1\x68\x1\x17"+
				"\x1\x66\x1\x65\x1\xFFFF\x1\x18\x1\x17\x4\x18\x1\x17\x1\x18\x1\x17\x4"+
				"\x18\x1\x17\x1\x18\x1\x63\x2\x18\x1\x17\x1\x18\x2\xFFFF\x2\x18\x3\xFFFF"+
				"\x1\x18\x1F\xFFFF\x1\x18\xB\xFFFF\x1\x18\x1\x17\x3\x18",
				"\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x1\x18\x1\xFFFF\x1\x18\x1\xFFFF\x1"+
				"\x18\x4\xFFFF\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x3\x18\x1\x17\x2\x18\x1"+
				"\x17\x1\x8D\x2\x18\x1\x17\x1\x18\x1\x90\x1\x17\x2\x18\x1\x91\x1\x17"+
				"\x1\x8F\x1\x8E\x1\xFFFF\x1\x18\x1\x17\x4\x18\x1\x17\x1\x18\x1\x17\x4"+
				"\x18\x1\x17\x1\x18\x1\x8C\x2\x18\x1\x17\x1\x18\x2\xFFFF\x2\x18\x3\xFFFF"+
				"\x1\x18\x1F\xFFFF\x1\x18\xB\xFFFF\x1\x18\x1\x17\x3\x18",
				"\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x1\x18\x1\xFFFF\x1\x18\x1\xFFFF\x1"+
				"\x18\x4\xFFFF\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x3\x18\x1\x17\x2\x18\x1"+
				"\x17\x1\xB6\x2\x18\x1\x17\x1\x18\x1\xB9\x1\x17\x2\x18\x1\xBA\x1\x17"+
				"\x1\xB8\x1\xB7\x1\xFFFF\x1\x18\x1\x17\x4\x18\x1\x17\x1\x18\x1\x17\x4"+
				"\x18\x1\x17\x1\x18\x1\xB5\x2\x18\x1\x17\x1\x18\x2\xFFFF\x2\x18\x3\xFFFF"+
				"\x1\x18\x1F\xFFFF\x1\x18\xB\xFFFF\x1\x18\x1\x17\x3\x18",
				"\x1\xFFFF",
				"\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x1\x18\x1\xFFFF\x1\x18\x1\xFFFF\x1"+
				"\x18\x4\xFFFF\x1\x18\x1\xFFFF\x1\x18\x2\xFFFF\x3\x18\x1\x17\x2\x18\x1"+
				"\x17\x1\x108\x2\x18\x1\x17\x1\x18\x1\x10B\x1\x17\x2\x18\x1\x10C\x1\x17"+
				"\x1\x10A\x1\x109\x1\xFFFF\x1\x18\x1\x17\x4\x18\x1\x17\x1\x18\x1\x17"+
				"\x4\x18\x1\x17\x1\x18\x1\x107\x2\x18\x1\x17\x1\x18\x2\xFFFF\x2\x18\x3"+
				"\xFFFF\x1\x18\x1F\xFFFF\x1\x18\xB\xFFFF\x1\x18\x1\x17\x3\x18",
				"\x1\x134\x1\xFFFF\x1\x133\x2\xFFFF\x1\x136\x1\xFFFF\x1\x131\x1\xFFFF"+
				"\x1\x130\x4\xFFFF\x1\x132\x1\xFFFF\x1\x135\x2\xFFFF\x1\x13C\x4\xFFFF"+
				"\x1\x13C\x1\xFFFF\x1\x137\x1\xFFFF\x1\x13C\x1\xFFFF\x1\x13C\x1\x13A"+
				"\x2\xFFFF\x1\x13C\x1\x13B\x17\xFFFF\x1\x13E\x1\xFFFF\x1\x18\x1\x139"+
				"\x1\x138\x1\xFFFF\x2\x18\x1\x13F\x2\xFFFF\x4\x18\x4\xFFFF\x2\x18\x3"+
				"\xFFFF\x1\x18\x1\xFFFF\x1\x18\x1\xFFFF\x1\x18\x4\xFFFF\x2\x18\x1\xFFFF"+
				"\x1\x18\x1\xFFFF\x2\x18\x1\x13D\x1\xFFFF\x1\x18\x2\xFFFF\x5\x18\x1\xFFFF"+
				"\x1\x140\x4\xFFFF\x1\x13C",
				"\x1\x14F",
				"\x1\x150",
				"\x1\x155\x1\xFFFF\x1\x154\x2\xFFFF\x1\x157\x1\xFFFF\x1\x152\x1\xFFFF"+
				"\x1\x151\x4\xFFFF\x1\x153\x1\xFFFF\x1\x156\x2\xFFFF\x1\x15D\x4\xFFFF"+
				"\x1\x15D\x1\xFFFF\x1\x158\x1\xFFFF\x1\x15D\x1\xFFFF\x1\x15D\x1\x15B"+
				"\x2\xFFFF\x1\x15D\x1\x15C\x17\xFFFF\x1\x15F\x2\xFFFF\x1\x15A\x1\x159"+
				"\x3\xFFFF\x1\x160\x1F\xFFFF\x1\x15E\xF\xFFFF\x1\x15D",
				"\x1\x165\x1\xFFFF\x1\x164\x2\xFFFF\x1\x167\x1\xFFFF\x1\x162\x1\xFFFF"+
				"\x1\x161\x4\xFFFF\x1\x163\x1\xFFFF\x1\x166\x2\xFFFF\x1\x16D\x4\xFFFF"+
				"\x1\x16D\x1\xFFFF\x1\x168\x1\xFFFF\x1\x16D\x1\xFFFF\x1\x16D\x1\x16B"+
				"\x2\xFFFF\x1\x16D\x1\x16C\x17\xFFFF\x1\x16F\x2\xFFFF\x1\x16A\x1\x169"+
				"\x3\xFFFF\x1\x170\x1F\xFFFF\x1\x16E\xF\xFFFF\x1\x16D",
				"\x1\x176\x1\xFFFF\x1\x175\x2\xFFFF\x1\x178\x1\xFFFF\x1\x173\x1\xFFFF"+
				"\x1\x172\x4\xFFFF\x1\x174\x1\xFFFF\x1\x177\x2\xFFFF\x1\x17D\x4\xFFFF"+
				"\x1\x17D\x1\xFFFF\x1\x171\x1\xFFFF\x1\x17D\x1\xFFFF\x1\x17D\x1\x17B"+
				"\x2\xFFFF\x1\x17D\x1\x17C\x17\xFFFF\x1\x17F\x2\xFFFF\x1\x17A\x1\x179"+
				"\x3\xFFFF\x1\x180\x1F\xFFFF\x1\x17E\xF\xFFFF\x1\x17D",
				"\x1\x186\x1\xFFFF\x1\x185\x2\xFFFF\x1\x188\x1\xFFFF\x1\x183\x1\xFFFF"+
				"\x1\x182\x4\xFFFF\x1\x184\x1\xFFFF\x1\x187\x2\xFFFF\x1\x18D\x4\xFFFF"+
				"\x1\x18D\x1\xFFFF\x1\x181\x1\xFFFF\x1\x18D\x1\xFFFF\x1\x18D\x1\x18B"+
				"\x2\xFFFF\x1\x18D\x1\x18C\x17\xFFFF\x1\x18F\x2\xFFFF\x1\x18A\x1\x189"+
				"\x3\xFFFF\x1\x190\x1F\xFFFF\x1\x18E\xF\xFFFF\x1\x18D",
				"\x1\x196\x1\xFFFF\x1\x195\x2\xFFFF\x1\x198\x1\xFFFF\x1\x193\x1\xFFFF"+
				"\x1\x192\x4\xFFFF\x1\x194\x1\xFFFF\x1\x197\x2\xFFFF\x1\x19D\x4\xFFFF"+
				"\x1\x19D\x1\xFFFF\x1\x191\x1\xFFFF\x1\x19D\x1\xFFFF\x1\x19D\x1\x19B"+
				"\x2\xFFFF\x1\x19D\x1\x19C\x17\xFFFF\x1\x19F\x2\xFFFF\x1\x19A\x1\x199"+
				"\x3\xFFFF\x1\x1A0\x1F\xFFFF\x1\x19E\xF\xFFFF\x1\x19D",
				"\x1\x1A6\x1\xFFFF\x1\x1A5\x2\xFFFF\x1\x1A8\x1\xFFFF\x1\x1A3\x1\xFFFF"+
				"\x1\x1A2\x4\xFFFF\x1\x1A4\x1\xFFFF\x1\x1A7\x2\xFFFF\x1\x1AD\x4\xFFFF"+
				"\x1\x1AD\x1\xFFFF\x1\x1A1\x1\xFFFF\x1\x1AD\x1\xFFFF\x1\x1AD\x1\x1AB"+
				"\x2\xFFFF\x1\x1AD\x1\x1AC\x17\xFFFF\x1\x1AF\x2\xFFFF\x1\x1AA\x1\x1A9"+
				"\x3\xFFFF\x1\x1B0\x1F\xFFFF\x1\x1AE\xF\xFFFF\x1\x1AD",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA76_eot = DFA.UnpackEncodedString(DFA76_eotS);
		private static readonly short[] DFA76_eof = DFA.UnpackEncodedString(DFA76_eofS);
		private static readonly char[] DFA76_min = DFA.UnpackEncodedStringToUnsignedChars(DFA76_minS);
		private static readonly char[] DFA76_max = DFA.UnpackEncodedStringToUnsignedChars(DFA76_maxS);
		private static readonly short[] DFA76_accept = DFA.UnpackEncodedString(DFA76_acceptS);
		private static readonly short[] DFA76_special = DFA.UnpackEncodedString(DFA76_specialS);
		private static readonly short[][] DFA76_transition;

		static DFA76()
		{
			int numStates = DFA76_transitionS.Length;
			DFA76_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA76_transition[i] = DFA.UnpackEncodedString(DFA76_transitionS[i]);
			}
		}

		public DFA76( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 76;
			this.eot = DFA76_eot;
			this.eof = DFA76_eof;
			this.min = DFA76_min;
			this.max = DFA76_max;
			this.accept = DFA76_accept;
			this.special = DFA76_special;
			this.transition = DFA76_transition;
		}

		public override string Description { get { return "410:1: assignment_expression : ( lvalue assignment_operator assignment_expression | conditional_expression );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition76(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA76_6 = input.LA(1);


				int index76_6 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_6);
				if (s >= 0) return s;
				break;

			case 1:
				int LA76_17 = input.LA(1);


				int index76_17 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_17);
				if (s >= 0) return s;
				break;

			case 2:
				int LA76_18 = input.LA(1);


				int index76_18 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_18);
				if (s >= 0) return s;
				break;

			case 3:
				int LA76_19 = input.LA(1);


				int index76_19 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_19);
				if (s >= 0) return s;
				break;

			case 4:
				int LA76_20 = input.LA(1);


				int index76_20 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_20);
				if (s >= 0) return s;
				break;

			case 5:
				int LA76_21 = input.LA(1);


				int index76_21 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_21);
				if (s >= 0) return s;
				break;

			case 6:
				int LA76_22 = input.LA(1);


				int index76_22 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_22);
				if (s >= 0) return s;
				break;

			case 7:
				int LA76_58 = input.LA(1);


				int index76_58 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_58);
				if (s >= 0) return s;
				break;

			case 8:
				int LA76_59 = input.LA(1);


				int index76_59 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_59);
				if (s >= 0) return s;
				break;

			case 9:
				int LA76_60 = input.LA(1);


				int index76_60 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_60);
				if (s >= 0) return s;
				break;

			case 10:
				int LA76_61 = input.LA(1);


				int index76_61 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_61);
				if (s >= 0) return s;
				break;

			case 11:
				int LA76_62 = input.LA(1);


				int index76_62 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_62);
				if (s >= 0) return s;
				break;

			case 12:
				int LA76_63 = input.LA(1);


				int index76_63 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_63);
				if (s >= 0) return s;
				break;

			case 13:
				int LA76_99 = input.LA(1);


				int index76_99 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_99);
				if (s >= 0) return s;
				break;

			case 14:
				int LA76_100 = input.LA(1);


				int index76_100 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_100);
				if (s >= 0) return s;
				break;

			case 15:
				int LA76_101 = input.LA(1);


				int index76_101 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_101);
				if (s >= 0) return s;
				break;

			case 16:
				int LA76_102 = input.LA(1);


				int index76_102 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_102);
				if (s >= 0) return s;
				break;

			case 17:
				int LA76_103 = input.LA(1);


				int index76_103 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_103);
				if (s >= 0) return s;
				break;

			case 18:
				int LA76_104 = input.LA(1);


				int index76_104 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_104);
				if (s >= 0) return s;
				break;

			case 19:
				int LA76_140 = input.LA(1);


				int index76_140 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_140);
				if (s >= 0) return s;
				break;

			case 20:
				int LA76_141 = input.LA(1);


				int index76_141 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_141);
				if (s >= 0) return s;
				break;

			case 21:
				int LA76_142 = input.LA(1);


				int index76_142 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_142);
				if (s >= 0) return s;
				break;

			case 22:
				int LA76_143 = input.LA(1);


				int index76_143 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_143);
				if (s >= 0) return s;
				break;

			case 23:
				int LA76_144 = input.LA(1);


				int index76_144 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_144);
				if (s >= 0) return s;
				break;

			case 24:
				int LA76_145 = input.LA(1);


				int index76_145 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_145);
				if (s >= 0) return s;
				break;

			case 25:
				int LA76_181 = input.LA(1);


				int index76_181 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_181);
				if (s >= 0) return s;
				break;

			case 26:
				int LA76_182 = input.LA(1);


				int index76_182 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_182);
				if (s >= 0) return s;
				break;

			case 27:
				int LA76_183 = input.LA(1);


				int index76_183 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_183);
				if (s >= 0) return s;
				break;

			case 28:
				int LA76_184 = input.LA(1);


				int index76_184 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_184);
				if (s >= 0) return s;
				break;

			case 29:
				int LA76_185 = input.LA(1);


				int index76_185 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_185);
				if (s >= 0) return s;
				break;

			case 30:
				int LA76_186 = input.LA(1);


				int index76_186 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_186);
				if (s >= 0) return s;
				break;

			case 31:
				int LA76_263 = input.LA(1);


				int index76_263 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_263);
				if (s >= 0) return s;
				break;

			case 32:
				int LA76_264 = input.LA(1);


				int index76_264 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_264);
				if (s >= 0) return s;
				break;

			case 33:
				int LA76_265 = input.LA(1);


				int index76_265 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_265);
				if (s >= 0) return s;
				break;

			case 34:
				int LA76_266 = input.LA(1);


				int index76_266 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_266);
				if (s >= 0) return s;
				break;

			case 35:
				int LA76_267 = input.LA(1);


				int index76_267 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_267);
				if (s >= 0) return s;
				break;

			case 36:
				int LA76_268 = input.LA(1);


				int index76_268 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_268);
				if (s >= 0) return s;
				break;

			case 37:
				int LA76_304 = input.LA(1);


				int index76_304 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_304);
				if (s >= 0) return s;
				break;

			case 38:
				int LA76_305 = input.LA(1);


				int index76_305 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_305);
				if (s >= 0) return s;
				break;

			case 39:
				int LA76_306 = input.LA(1);


				int index76_306 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_306);
				if (s >= 0) return s;
				break;

			case 40:
				int LA76_307 = input.LA(1);


				int index76_307 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_307);
				if (s >= 0) return s;
				break;

			case 41:
				int LA76_308 = input.LA(1);


				int index76_308 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_308);
				if (s >= 0) return s;
				break;

			case 42:
				int LA76_309 = input.LA(1);


				int index76_309 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_309);
				if (s >= 0) return s;
				break;

			case 43:
				int LA76_310 = input.LA(1);


				int index76_310 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_310);
				if (s >= 0) return s;
				break;

			case 44:
				int LA76_311 = input.LA(1);


				int index76_311 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_311);
				if (s >= 0) return s;
				break;

			case 45:
				int LA76_312 = input.LA(1);


				int index76_312 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_312);
				if (s >= 0) return s;
				break;

			case 46:
				int LA76_313 = input.LA(1);


				int index76_313 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_313);
				if (s >= 0) return s;
				break;

			case 47:
				int LA76_314 = input.LA(1);


				int index76_314 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_314);
				if (s >= 0) return s;
				break;

			case 48:
				int LA76_315 = input.LA(1);


				int index76_315 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_315);
				if (s >= 0) return s;
				break;

			case 49:
				int LA76_316 = input.LA(1);


				int index76_316 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_316);
				if (s >= 0) return s;
				break;

			case 50:
				int LA76_317 = input.LA(1);


				int index76_317 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_317);
				if (s >= 0) return s;
				break;

			case 51:
				int LA76_318 = input.LA(1);


				int index76_318 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_318);
				if (s >= 0) return s;
				break;

			case 52:
				int LA76_319 = input.LA(1);


				int index76_319 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_319);
				if (s >= 0) return s;
				break;

			case 53:
				int LA76_320 = input.LA(1);


				int index76_320 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_320);
				if (s >= 0) return s;
				break;

			case 54:
				int LA76_335 = input.LA(1);


				int index76_335 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_335);
				if (s >= 0) return s;
				break;

			case 55:
				int LA76_336 = input.LA(1);


				int index76_336 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_336);
				if (s >= 0) return s;
				break;

			case 56:
				int LA76_337 = input.LA(1);


				int index76_337 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_337);
				if (s >= 0) return s;
				break;

			case 57:
				int LA76_338 = input.LA(1);


				int index76_338 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_338);
				if (s >= 0) return s;
				break;

			case 58:
				int LA76_339 = input.LA(1);


				int index76_339 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_339);
				if (s >= 0) return s;
				break;

			case 59:
				int LA76_340 = input.LA(1);


				int index76_340 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_340);
				if (s >= 0) return s;
				break;

			case 60:
				int LA76_341 = input.LA(1);


				int index76_341 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_341);
				if (s >= 0) return s;
				break;

			case 61:
				int LA76_342 = input.LA(1);


				int index76_342 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_342);
				if (s >= 0) return s;
				break;

			case 62:
				int LA76_343 = input.LA(1);


				int index76_343 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_343);
				if (s >= 0) return s;
				break;

			case 63:
				int LA76_344 = input.LA(1);


				int index76_344 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_344);
				if (s >= 0) return s;
				break;

			case 64:
				int LA76_345 = input.LA(1);


				int index76_345 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_345);
				if (s >= 0) return s;
				break;

			case 65:
				int LA76_346 = input.LA(1);


				int index76_346 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_346);
				if (s >= 0) return s;
				break;

			case 66:
				int LA76_347 = input.LA(1);


				int index76_347 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_347);
				if (s >= 0) return s;
				break;

			case 67:
				int LA76_348 = input.LA(1);


				int index76_348 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_348);
				if (s >= 0) return s;
				break;

			case 68:
				int LA76_349 = input.LA(1);


				int index76_349 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_349);
				if (s >= 0) return s;
				break;

			case 69:
				int LA76_350 = input.LA(1);


				int index76_350 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_350);
				if (s >= 0) return s;
				break;

			case 70:
				int LA76_351 = input.LA(1);


				int index76_351 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_351);
				if (s >= 0) return s;
				break;

			case 71:
				int LA76_352 = input.LA(1);


				int index76_352 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_352);
				if (s >= 0) return s;
				break;

			case 72:
				int LA76_353 = input.LA(1);


				int index76_353 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_353);
				if (s >= 0) return s;
				break;

			case 73:
				int LA76_354 = input.LA(1);


				int index76_354 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_354);
				if (s >= 0) return s;
				break;

			case 74:
				int LA76_355 = input.LA(1);


				int index76_355 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_355);
				if (s >= 0) return s;
				break;

			case 75:
				int LA76_356 = input.LA(1);


				int index76_356 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_356);
				if (s >= 0) return s;
				break;

			case 76:
				int LA76_357 = input.LA(1);


				int index76_357 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_357);
				if (s >= 0) return s;
				break;

			case 77:
				int LA76_358 = input.LA(1);


				int index76_358 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_358);
				if (s >= 0) return s;
				break;

			case 78:
				int LA76_359 = input.LA(1);


				int index76_359 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_359);
				if (s >= 0) return s;
				break;

			case 79:
				int LA76_360 = input.LA(1);


				int index76_360 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_360);
				if (s >= 0) return s;
				break;

			case 80:
				int LA76_361 = input.LA(1);


				int index76_361 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_361);
				if (s >= 0) return s;
				break;

			case 81:
				int LA76_362 = input.LA(1);


				int index76_362 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_362);
				if (s >= 0) return s;
				break;

			case 82:
				int LA76_363 = input.LA(1);


				int index76_363 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_363);
				if (s >= 0) return s;
				break;

			case 83:
				int LA76_364 = input.LA(1);


				int index76_364 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_364);
				if (s >= 0) return s;
				break;

			case 84:
				int LA76_365 = input.LA(1);


				int index76_365 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_365);
				if (s >= 0) return s;
				break;

			case 85:
				int LA76_366 = input.LA(1);


				int index76_366 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_366);
				if (s >= 0) return s;
				break;

			case 86:
				int LA76_367 = input.LA(1);


				int index76_367 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_367);
				if (s >= 0) return s;
				break;

			case 87:
				int LA76_368 = input.LA(1);


				int index76_368 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_368);
				if (s >= 0) return s;
				break;

			case 88:
				int LA76_369 = input.LA(1);


				int index76_369 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_369);
				if (s >= 0) return s;
				break;

			case 89:
				int LA76_370 = input.LA(1);


				int index76_370 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_370);
				if (s >= 0) return s;
				break;

			case 90:
				int LA76_371 = input.LA(1);


				int index76_371 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_371);
				if (s >= 0) return s;
				break;

			case 91:
				int LA76_372 = input.LA(1);


				int index76_372 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_372);
				if (s >= 0) return s;
				break;

			case 92:
				int LA76_373 = input.LA(1);


				int index76_373 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_373);
				if (s >= 0) return s;
				break;

			case 93:
				int LA76_374 = input.LA(1);


				int index76_374 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_374);
				if (s >= 0) return s;
				break;

			case 94:
				int LA76_375 = input.LA(1);


				int index76_375 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_375);
				if (s >= 0) return s;
				break;

			case 95:
				int LA76_376 = input.LA(1);


				int index76_376 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_376);
				if (s >= 0) return s;
				break;

			case 96:
				int LA76_377 = input.LA(1);


				int index76_377 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_377);
				if (s >= 0) return s;
				break;

			case 97:
				int LA76_378 = input.LA(1);


				int index76_378 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_378);
				if (s >= 0) return s;
				break;

			case 98:
				int LA76_379 = input.LA(1);


				int index76_379 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_379);
				if (s >= 0) return s;
				break;

			case 99:
				int LA76_380 = input.LA(1);


				int index76_380 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_380);
				if (s >= 0) return s;
				break;

			case 100:
				int LA76_381 = input.LA(1);


				int index76_381 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_381);
				if (s >= 0) return s;
				break;

			case 101:
				int LA76_382 = input.LA(1);


				int index76_382 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_382);
				if (s >= 0) return s;
				break;

			case 102:
				int LA76_383 = input.LA(1);


				int index76_383 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_383);
				if (s >= 0) return s;
				break;

			case 103:
				int LA76_384 = input.LA(1);


				int index76_384 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_384);
				if (s >= 0) return s;
				break;

			case 104:
				int LA76_385 = input.LA(1);


				int index76_385 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_385);
				if (s >= 0) return s;
				break;

			case 105:
				int LA76_386 = input.LA(1);


				int index76_386 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_386);
				if (s >= 0) return s;
				break;

			case 106:
				int LA76_387 = input.LA(1);


				int index76_387 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_387);
				if (s >= 0) return s;
				break;

			case 107:
				int LA76_388 = input.LA(1);


				int index76_388 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_388);
				if (s >= 0) return s;
				break;

			case 108:
				int LA76_389 = input.LA(1);


				int index76_389 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_389);
				if (s >= 0) return s;
				break;

			case 109:
				int LA76_390 = input.LA(1);


				int index76_390 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_390);
				if (s >= 0) return s;
				break;

			case 110:
				int LA76_391 = input.LA(1);


				int index76_391 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_391);
				if (s >= 0) return s;
				break;

			case 111:
				int LA76_392 = input.LA(1);


				int index76_392 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_392);
				if (s >= 0) return s;
				break;

			case 112:
				int LA76_393 = input.LA(1);


				int index76_393 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_393);
				if (s >= 0) return s;
				break;

			case 113:
				int LA76_394 = input.LA(1);


				int index76_394 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_394);
				if (s >= 0) return s;
				break;

			case 114:
				int LA76_395 = input.LA(1);


				int index76_395 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_395);
				if (s >= 0) return s;
				break;

			case 115:
				int LA76_396 = input.LA(1);


				int index76_396 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_396);
				if (s >= 0) return s;
				break;

			case 116:
				int LA76_397 = input.LA(1);


				int index76_397 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_397);
				if (s >= 0) return s;
				break;

			case 117:
				int LA76_398 = input.LA(1);


				int index76_398 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_398);
				if (s >= 0) return s;
				break;

			case 118:
				int LA76_399 = input.LA(1);


				int index76_399 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_399);
				if (s >= 0) return s;
				break;

			case 119:
				int LA76_400 = input.LA(1);


				int index76_400 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_400);
				if (s >= 0) return s;
				break;

			case 120:
				int LA76_401 = input.LA(1);


				int index76_401 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_401);
				if (s >= 0) return s;
				break;

			case 121:
				int LA76_402 = input.LA(1);


				int index76_402 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_402);
				if (s >= 0) return s;
				break;

			case 122:
				int LA76_403 = input.LA(1);


				int index76_403 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_403);
				if (s >= 0) return s;
				break;

			case 123:
				int LA76_404 = input.LA(1);


				int index76_404 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_404);
				if (s >= 0) return s;
				break;

			case 124:
				int LA76_405 = input.LA(1);


				int index76_405 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_405);
				if (s >= 0) return s;
				break;

			case 125:
				int LA76_406 = input.LA(1);


				int index76_406 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_406);
				if (s >= 0) return s;
				break;

			case 126:
				int LA76_407 = input.LA(1);


				int index76_407 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_407);
				if (s >= 0) return s;
				break;

			case 127:
				int LA76_408 = input.LA(1);


				int index76_408 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_408);
				if (s >= 0) return s;
				break;

			case 128:
				int LA76_409 = input.LA(1);


				int index76_409 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_409);
				if (s >= 0) return s;
				break;

			case 129:
				int LA76_410 = input.LA(1);


				int index76_410 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_410);
				if (s >= 0) return s;
				break;

			case 130:
				int LA76_411 = input.LA(1);


				int index76_411 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_411);
				if (s >= 0) return s;
				break;

			case 131:
				int LA76_412 = input.LA(1);


				int index76_412 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_412);
				if (s >= 0) return s;
				break;

			case 132:
				int LA76_413 = input.LA(1);


				int index76_413 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_413);
				if (s >= 0) return s;
				break;

			case 133:
				int LA76_414 = input.LA(1);


				int index76_414 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_414);
				if (s >= 0) return s;
				break;

			case 134:
				int LA76_415 = input.LA(1);


				int index76_415 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_415);
				if (s >= 0) return s;
				break;

			case 135:
				int LA76_416 = input.LA(1);


				int index76_416 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_416);
				if (s >= 0) return s;
				break;

			case 136:
				int LA76_417 = input.LA(1);


				int index76_417 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_417);
				if (s >= 0) return s;
				break;

			case 137:
				int LA76_418 = input.LA(1);


				int index76_418 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_418);
				if (s >= 0) return s;
				break;

			case 138:
				int LA76_419 = input.LA(1);


				int index76_419 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_419);
				if (s >= 0) return s;
				break;

			case 139:
				int LA76_420 = input.LA(1);


				int index76_420 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_420);
				if (s >= 0) return s;
				break;

			case 140:
				int LA76_421 = input.LA(1);


				int index76_421 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_421);
				if (s >= 0) return s;
				break;

			case 141:
				int LA76_422 = input.LA(1);


				int index76_422 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_422);
				if (s >= 0) return s;
				break;

			case 142:
				int LA76_423 = input.LA(1);


				int index76_423 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_423);
				if (s >= 0) return s;
				break;

			case 143:
				int LA76_424 = input.LA(1);


				int index76_424 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_424);
				if (s >= 0) return s;
				break;

			case 144:
				int LA76_425 = input.LA(1);


				int index76_425 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_425);
				if (s >= 0) return s;
				break;

			case 145:
				int LA76_426 = input.LA(1);


				int index76_426 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_426);
				if (s >= 0) return s;
				break;

			case 146:
				int LA76_427 = input.LA(1);


				int index76_427 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_427);
				if (s >= 0) return s;
				break;

			case 147:
				int LA76_428 = input.LA(1);


				int index76_428 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_428);
				if (s >= 0) return s;
				break;

			case 148:
				int LA76_429 = input.LA(1);


				int index76_429 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_429);
				if (s >= 0) return s;
				break;

			case 149:
				int LA76_430 = input.LA(1);


				int index76_430 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_430);
				if (s >= 0) return s;
				break;

			case 150:
				int LA76_431 = input.LA(1);


				int index76_431 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_431);
				if (s >= 0) return s;
				break;

			case 151:
				int LA76_432 = input.LA(1);


				int index76_432 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred142_C_fragment))) {s = 23;}

				else if ((true)) {s = 24;}


				input.Seek(index76_432);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 76, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA78 : DFA
	{
		private const string DFA78_eotS =
			"\x1B9\xFFFF";
		private const string DFA78_eofS =
			"\x2\xFFFF\x5\x44\x1\xFFFF\x1\x44\x1B0\xFFFF";
		private const string DFA78_minS =
			"\x7\x4\x1\x0\x1\x4\x2\x1E\x6\x4\x33\x0\x16\xFFFF\x14\x0\x16\xFFFF\x14"+
			"\x0\x16\xFFFF\x14\x0\x16\xFFFF\x14\x0\x41\xFFFF\x14\x0\x16\xFFFF\x62"+
			"\x0";
		private const string DFA78_maxS =
			"\x7\x77\x1\x0\x1\x77\x2\x1E\x6\x77\x33\x0\x16\xFFFF\x14\x0\x16\xFFFF"+
			"\x14\x0\x16\xFFFF\x14\x0\x16\xFFFF\x14\x0\x41\xFFFF\x14\x0\x16\xFFFF"+
			"\x62\x0";
		private const string DFA78_acceptS =
			"\x44\xFFFF\x1\x1\xE7\xFFFF\x1\x2\x8C\xFFFF";
		private const string DFA78_specialS =
			"\x7\xFFFF\x1\x0\x9\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1"+
			"\x8\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1\x11\x1\x12\x1"+
			"\x13\x1\x14\x1\x15\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1"+
			"\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1"+
			"\x27\x1\x28\x1\x29\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x1\x2F\x1\x30\x1"+
			"\x31\x1\x32\x1\x33\x16\xFFFF\x1\x34\x1\x35\x1\x36\x1\x37\x1\x38\x1\x39"+
			"\x1\x3A\x1\x3B\x1\x3C\x1\x3D\x1\x3E\x1\x3F\x1\x40\x1\x41\x1\x42\x1\x43"+
			"\x1\x44\x1\x45\x1\x46\x1\x47\x16\xFFFF\x1\x48\x1\x49\x1\x4A\x1\x4B\x1"+
			"\x4C\x1\x4D\x1\x4E\x1\x4F\x1\x50\x1\x51\x1\x52\x1\x53\x1\x54\x1\x55\x1"+
			"\x56\x1\x57\x1\x58\x1\x59\x1\x5A\x1\x5B\x16\xFFFF\x1\x5C\x1\x5D\x1\x5E"+
			"\x1\x5F\x1\x60\x1\x61\x1\x62\x1\x63\x1\x64\x1\x65\x1\x66\x1\x67\x1\x68"+
			"\x1\x69\x1\x6A\x1\x6B\x1\x6C\x1\x6D\x1\x6E\x1\x6F\x16\xFFFF\x1\x70\x1"+
			"\x71\x1\x72\x1\x73\x1\x74\x1\x75\x1\x76\x1\x77\x1\x78\x1\x79\x1\x7A\x1"+
			"\x7B\x1\x7C\x1\x7D\x1\x7E\x1\x7F\x1\x80\x1\x81\x1\x82\x1\x83\x41\xFFFF"+
			"\x1\x84\x1\x85\x1\x86\x1\x87\x1\x88\x1\x89\x1\x8A\x1\x8B\x1\x8C\x1\x8D"+
			"\x1\x8E\x1\x8F\x1\x90\x1\x91\x1\x92\x1\x93\x1\x94\x1\x95\x1\x96\x1\x97"+
			"\x16\xFFFF\x1\x98\x1\x99\x1\x9A\x1\x9B\x1\x9C\x1\x9D\x1\x9E\x1\x9F\x1"+
			"\xA0\x1\xA1\x1\xA2\x1\xA3\x1\xA4\x1\xA5\x1\xA6\x1\xA7\x1\xA8\x1\xA9\x1"+
			"\xAA\x1\xAB\x1\xAC\x1\xAD\x1\xAE\x1\xAF\x1\xB0\x1\xB1\x1\xB2\x1\xB3\x1"+
			"\xB4\x1\xB5\x1\xB6\x1\xB7\x1\xB8\x1\xB9\x1\xBA\x1\xBB\x1\xBC\x1\xBD\x1"+
			"\xBE\x1\xBF\x1\xC0\x1\xC1\x1\xC2\x1\xC3\x1\xC4\x1\xC5\x1\xC6\x1\xC7\x1"+
			"\xC8\x1\xC9\x1\xCA\x1\xCB\x1\xCC\x1\xCD\x1\xCE\x1\xCF\x1\xD0\x1\xD1\x1"+
			"\xD2\x1\xD3\x1\xD4\x1\xD5\x1\xD6\x1\xD7\x1\xD8\x1\xD9\x1\xDA\x1\xDB\x1"+
			"\xDC\x1\xDD\x1\xDE\x1\xDF\x1\xE0\x1\xE1\x1\xE2\x1\xE3\x1\xE4\x1\xE5\x1"+
			"\xE6\x1\xE7\x1\xE8\x1\xE9\x1\xEA\x1\xEB\x1\xEC\x1\xED\x1\xEE\x1\xEF\x1"+
			"\xF0\x1\xF1\x1\xF2\x1\xF3\x1\xF4\x1\xF5\x1\xF6\x1\xF7\x1\xF8\x1\xF9}>";
		private static readonly string[] DFA78_transitionS =
			{
				"\x1\x6\x1\xFFFF\x1\x5\x2\xFFFF\x1\x8\x1\xFFFF\x1\x3\x1\xFFFF\x1\x2\x4"+
				"\xFFFF\x1\x4\x1\xFFFF\x1\x7\x2\xFFFF\x1\xD\x4\xFFFF\x1\xD\x1\xFFFF\x1"+
				"\x1\x1\xFFFF\x1\xD\x1\xFFFF\x1\xD\x1\xB\x2\xFFFF\x1\xD\x1\xC\x17\xFFFF"+
				"\x1\xF\x2\xFFFF\x1\xA\x1\x9\x3\xFFFF\x1\x10\x1F\xFFFF\x1\xE\xF\xFFFF"+
				"\x1\xD",
				"\x1\x24\x1\xFFFF\x1\x23\x2\xFFFF\x1\x26\x1\xFFFF\x1\x21\x1\xFFFF\x1"+
				"\x1D\x4\xFFFF\x1\x22\x1\xFFFF\x1\x25\x2\xFFFF\x1\x2C\x4\xFFFF\x1\x2C"+
				"\x1\xFFFF\x1\x27\x1\xFFFF\x1\x2C\x1\xFFFF\x1\x2C\x1\x2A\x2\xFFFF\x1"+
				"\x2C\x1\x2B\x17\xFFFF\x1\x2E\x1\xFFFF\x1\x1F\x1\x29\x1\x28\x1\xFFFF"+
				"\x2\x11\x1\x20\x2\xFFFF\x4\x11\x4\xFFFF\x1\x13\x1\x11\x3\xFFFF\x1\x18"+
				"\x1\xFFFF\x1\x1C\x1\xFFFF\x1\x17\x4\xFFFF\x1\x15\x1\x16\x1\xFFFF\x1"+
				"\x11\x1\xFFFF\x1\x14\x1\x19\x1\x2D\x1\xFFFF\x1\x1B\x2\xFFFF\x1\x1E\x1"+
				"\x1B\x1\x1A\x1\x12\x1\x11\x1\xFFFF\x1\x2F\x4\xFFFF\x1\x2C",
				"\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\xFFFF\x1\x44\x1\xFFFF\x1"+
				"\x44\x4\xFFFF\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\x3D\x1\x38\x1"+
				"\xFFFF\x1\x41\x1\x3E\x1\xFFFF\x1\x31\x1\x44\x1\x36\x1\xFFFF\x1\x39\x1"+
				"\x34\x1\xFFFF\x1\x44\x1\x3A\x1\x35\x1\xFFFF\x1\x33\x1\x32\x1\x44\x1"+
				"\x37\x1\xFFFF\x2\x44\x1\x3C\x1\x3B\x1\xFFFF\x1\x3C\x1\xFFFF\x1\x3D\x2"+
				"\x3C\x1\x3B\x1\xFFFF\x1\x43\x1\x30\x1\x44\x1\x3F\x1\xFFFF\x1\x44\x1"+
				"\xFFFF\x3\x44\x3\xFFFF\x1\x44\x1F\xFFFF\x1\x44\xB\xFFFF\x1\x40\x1\xFFFF"+
				"\x1\x42\x2\x44",
				"\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\xFFFF\x1\x44\x1\xFFFF\x1"+
				"\x44\x4\xFFFF\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\x67\x1\x62\x1"+
				"\xFFFF\x1\x6B\x1\x68\x1\xFFFF\x1\x5B\x1\x44\x1\x60\x1\xFFFF\x1\x63\x1"+
				"\x5E\x1\xFFFF\x1\x44\x1\x64\x1\x5F\x1\xFFFF\x1\x5D\x1\x5C\x1\x44\x1"+
				"\x61\x1\xFFFF\x2\x44\x1\x66\x1\x65\x1\xFFFF\x1\x66\x1\xFFFF\x1\x67\x2"+
				"\x66\x1\x65\x1\xFFFF\x1\x6D\x1\x5A\x1\x44\x1\x69\x1\xFFFF\x1\x44\x1"+
				"\xFFFF\x3\x44\x3\xFFFF\x1\x44\x1F\xFFFF\x1\x44\xB\xFFFF\x1\x6A\x1\xFFFF"+
				"\x1\x6C\x2\x44",
				"\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\xFFFF\x1\x44\x1\xFFFF\x1"+
				"\x44\x4\xFFFF\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\x91\x1\x8C\x1"+
				"\xFFFF\x1\x95\x1\x92\x1\xFFFF\x1\x85\x1\x44\x1\x8A\x1\xFFFF\x1\x8D\x1"+
				"\x88\x1\xFFFF\x1\x44\x1\x8E\x1\x89\x1\xFFFF\x1\x87\x1\x86\x1\x44\x1"+
				"\x8B\x1\xFFFF\x2\x44\x1\x90\x1\x8F\x1\xFFFF\x1\x90\x1\xFFFF\x1\x91\x2"+
				"\x90\x1\x8F\x1\xFFFF\x1\x97\x1\x84\x1\x44\x1\x93\x1\xFFFF\x1\x44\x1"+
				"\xFFFF\x3\x44\x3\xFFFF\x1\x44\x1F\xFFFF\x1\x44\xB\xFFFF\x1\x94\x1\xFFFF"+
				"\x1\x96\x2\x44",
				"\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\xFFFF\x1\x44\x1\xFFFF\x1"+
				"\x44\x4\xFFFF\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\xBB\x1\xB6\x1"+
				"\xFFFF\x1\xBF\x1\xBC\x1\xFFFF\x1\xAF\x1\x44\x1\xB4\x1\xFFFF\x1\xB7\x1"+
				"\xB2\x1\xFFFF\x1\x44\x1\xB8\x1\xB3\x1\xFFFF\x1\xB1\x1\xB0\x1\x44\x1"+
				"\xB5\x1\xFFFF\x2\x44\x1\xBA\x1\xB9\x1\xFFFF\x1\xBA\x1\xFFFF\x1\xBB\x2"+
				"\xBA\x1\xB9\x1\xFFFF\x1\xC1\x1\xAE\x1\x44\x1\xBD\x1\xFFFF\x1\x44\x1"+
				"\xFFFF\x3\x44\x3\xFFFF\x1\x44\x1F\xFFFF\x1\x44\xB\xFFFF\x1\xBE\x1\xFFFF"+
				"\x1\xC0\x2\x44",
				"\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\xFFFF\x1\x44\x1\xFFFF\x1"+
				"\x44\x4\xFFFF\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\xE5\x1\xE0\x1"+
				"\xFFFF\x1\xE9\x1\xE6\x1\xFFFF\x1\xD9\x1\x44\x1\xDE\x1\xFFFF\x1\xE1\x1"+
				"\xDC\x1\xFFFF\x1\x44\x1\xE2\x1\xDD\x1\xFFFF\x1\xDB\x1\xDA\x1\x44\x1"+
				"\xDF\x1\xFFFF\x2\x44\x1\xE4\x1\xE3\x1\xFFFF\x1\xE4\x1\xFFFF\x1\xE5\x2"+
				"\xE4\x1\xE3\x1\xFFFF\x1\xEB\x1\xD8\x1\x44\x1\xE7\x1\xFFFF\x1\x44\x1"+
				"\xFFFF\x3\x44\x3\xFFFF\x1\x44\x1F\xFFFF\x1\x44\xB\xFFFF\x1\xE8\x1\xFFFF"+
				"\x1\xEA\x2\x44",
				"\x1\xFFFF",
				"\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\xFFFF\x1\x44\x1\xFFFF\x1"+
				"\x44\x4\xFFFF\x1\x44\x1\xFFFF\x1\x44\x2\xFFFF\x1\x44\x1\x13A\x1\x135"+
				"\x1\xFFFF\x1\x13E\x1\x13B\x1\xFFFF\x1\x12E\x1\x44\x1\x133\x1\xFFFF\x1"+
				"\x136\x1\x131\x1\xFFFF\x1\x44\x1\x137\x1\x132\x1\xFFFF\x1\x130\x1\x12F"+
				"\x1\x44\x1\x134\x1\xFFFF\x2\x44\x1\x139\x1\x138\x1\xFFFF\x1\x139\x1"+
				"\xFFFF\x1\x13A\x2\x139\x1\x138\x1\xFFFF\x1\x140\x1\x12D\x1\x44\x1\x13C"+
				"\x1\xFFFF\x1\x44\x1\xFFFF\x3\x44\x3\xFFFF\x1\x44\x1F\xFFFF\x1\x44\xB"+
				"\xFFFF\x1\x13D\x1\xFFFF\x1\x13F\x2\x44",
				"\x1\x157",
				"\x1\x158",
				"\x1\x15D\x1\xFFFF\x1\x15C\x2\xFFFF\x1\x15F\x1\xFFFF\x1\x15A\x1\xFFFF"+
				"\x1\x159\x4\xFFFF\x1\x15B\x1\xFFFF\x1\x15E\x2\xFFFF\x1\x165\x4\xFFFF"+
				"\x1\x165\x1\xFFFF\x1\x160\x1\xFFFF\x1\x165\x1\xFFFF\x1\x165\x1\x163"+
				"\x2\xFFFF\x1\x165\x1\x164\x17\xFFFF\x1\x167\x2\xFFFF\x1\x162\x1\x161"+
				"\x3\xFFFF\x1\x168\x1F\xFFFF\x1\x166\xF\xFFFF\x1\x165",
				"\x1\x16D\x1\xFFFF\x1\x16C\x2\xFFFF\x1\x16F\x1\xFFFF\x1\x16A\x1\xFFFF"+
				"\x1\x169\x4\xFFFF\x1\x16B\x1\xFFFF\x1\x16E\x2\xFFFF\x1\x175\x4\xFFFF"+
				"\x1\x175\x1\xFFFF\x1\x170\x1\xFFFF\x1\x175\x1\xFFFF\x1\x175\x1\x173"+
				"\x2\xFFFF\x1\x175\x1\x174\x17\xFFFF\x1\x177\x2\xFFFF\x1\x172\x1\x171"+
				"\x3\xFFFF\x1\x178\x1F\xFFFF\x1\x176\xF\xFFFF\x1\x175",
				"\x1\x17E\x1\xFFFF\x1\x17D\x2\xFFFF\x1\x180\x1\xFFFF\x1\x17B\x1\xFFFF"+
				"\x1\x17A\x4\xFFFF\x1\x17C\x1\xFFFF\x1\x17F\x2\xFFFF\x1\x185\x4\xFFFF"+
				"\x1\x185\x1\xFFFF\x1\x179\x1\xFFFF\x1\x185\x1\xFFFF\x1\x185\x1\x183"+
				"\x2\xFFFF\x1\x185\x1\x184\x17\xFFFF\x1\x187\x2\xFFFF\x1\x182\x1\x181"+
				"\x3\xFFFF\x1\x188\x1F\xFFFF\x1\x186\xF\xFFFF\x1\x185",
				"\x1\x18E\x1\xFFFF\x1\x18D\x2\xFFFF\x1\x190\x1\xFFFF\x1\x18B\x1\xFFFF"+
				"\x1\x18A\x4\xFFFF\x1\x18C\x1\xFFFF\x1\x18F\x2\xFFFF\x1\x195\x4\xFFFF"+
				"\x1\x195\x1\xFFFF\x1\x189\x1\xFFFF\x1\x195\x1\xFFFF\x1\x195\x1\x193"+
				"\x2\xFFFF\x1\x195\x1\x194\x17\xFFFF\x1\x197\x2\xFFFF\x1\x192\x1\x191"+
				"\x3\xFFFF\x1\x198\x1F\xFFFF\x1\x196\xF\xFFFF\x1\x195",
				"\x1\x19E\x1\xFFFF\x1\x19D\x2\xFFFF\x1\x1A0\x1\xFFFF\x1\x19B\x1\xFFFF"+
				"\x1\x19A\x4\xFFFF\x1\x19C\x1\xFFFF\x1\x19F\x2\xFFFF\x1\x1A5\x4\xFFFF"+
				"\x1\x1A5\x1\xFFFF\x1\x199\x1\xFFFF\x1\x1A5\x1\xFFFF\x1\x1A5\x1\x1A3"+
				"\x2\xFFFF\x1\x1A5\x1\x1A4\x17\xFFFF\x1\x1A7\x2\xFFFF\x1\x1A2\x1\x1A1"+
				"\x3\xFFFF\x1\x1A8\x1F\xFFFF\x1\x1A6\xF\xFFFF\x1\x1A5",
				"\x1\x1AE\x1\xFFFF\x1\x1AD\x2\xFFFF\x1\x1B0\x1\xFFFF\x1\x1AB\x1\xFFFF"+
				"\x1\x1AA\x4\xFFFF\x1\x1AC\x1\xFFFF\x1\x1AF\x2\xFFFF\x1\x1B5\x4\xFFFF"+
				"\x1\x1B5\x1\xFFFF\x1\x1A9\x1\xFFFF\x1\x1B5\x1\xFFFF\x1\x1B5\x1\x1B3"+
				"\x2\xFFFF\x1\x1B5\x1\x1B4\x17\xFFFF\x1\x1B7\x2\xFFFF\x1\x1B2\x1\x1B1"+
				"\x3\xFFFF\x1\x1B8\x1F\xFFFF\x1\x1B6\xF\xFFFF\x1\x1B5",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF"
			};

		private static readonly short[] DFA78_eot = DFA.UnpackEncodedString(DFA78_eotS);
		private static readonly short[] DFA78_eof = DFA.UnpackEncodedString(DFA78_eofS);
		private static readonly char[] DFA78_min = DFA.UnpackEncodedStringToUnsignedChars(DFA78_minS);
		private static readonly char[] DFA78_max = DFA.UnpackEncodedStringToUnsignedChars(DFA78_maxS);
		private static readonly short[] DFA78_accept = DFA.UnpackEncodedString(DFA78_acceptS);
		private static readonly short[] DFA78_special = DFA.UnpackEncodedString(DFA78_specialS);
		private static readonly short[][] DFA78_transition;

		static DFA78()
		{
			int numStates = DFA78_transitionS.Length;
			DFA78_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA78_transition[i] = DFA.UnpackEncodedString(DFA78_transitionS[i]);
			}
		}

		public DFA78( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 78;
			this.eot = DFA78_eot;
			this.eof = DFA78_eof;
			this.min = DFA78_min;
			this.max = DFA78_max;
			this.accept = DFA78_accept;
			this.special = DFA78_special;
			this.transition = DFA78_transition;
		}

		public override string Description { get { return "433:1: conditional_expression : ( logical_or_expression ( '?' expression ':' conditional_expression )? | logical_or_expression '?' ':' conditional_expression );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition78(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA78_7 = input.LA(1);


				int index78_7 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_7);
				if (s >= 0) return s;
				break;

			case 1:
				int LA78_17 = input.LA(1);


				int index78_17 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_17);
				if (s >= 0) return s;
				break;

			case 2:
				int LA78_18 = input.LA(1);


				int index78_18 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_18);
				if (s >= 0) return s;
				break;

			case 3:
				int LA78_19 = input.LA(1);


				int index78_19 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_19);
				if (s >= 0) return s;
				break;

			case 4:
				int LA78_20 = input.LA(1);


				int index78_20 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_20);
				if (s >= 0) return s;
				break;

			case 5:
				int LA78_21 = input.LA(1);


				int index78_21 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_21);
				if (s >= 0) return s;
				break;

			case 6:
				int LA78_22 = input.LA(1);


				int index78_22 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_22);
				if (s >= 0) return s;
				break;

			case 7:
				int LA78_23 = input.LA(1);


				int index78_23 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_23);
				if (s >= 0) return s;
				break;

			case 8:
				int LA78_24 = input.LA(1);


				int index78_24 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_24);
				if (s >= 0) return s;
				break;

			case 9:
				int LA78_25 = input.LA(1);


				int index78_25 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_25);
				if (s >= 0) return s;
				break;

			case 10:
				int LA78_26 = input.LA(1);


				int index78_26 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_26);
				if (s >= 0) return s;
				break;

			case 11:
				int LA78_27 = input.LA(1);


				int index78_27 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_27);
				if (s >= 0) return s;
				break;

			case 12:
				int LA78_28 = input.LA(1);


				int index78_28 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_28);
				if (s >= 0) return s;
				break;

			case 13:
				int LA78_29 = input.LA(1);


				int index78_29 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_29);
				if (s >= 0) return s;
				break;

			case 14:
				int LA78_30 = input.LA(1);


				int index78_30 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_30);
				if (s >= 0) return s;
				break;

			case 15:
				int LA78_31 = input.LA(1);


				int index78_31 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_31);
				if (s >= 0) return s;
				break;

			case 16:
				int LA78_32 = input.LA(1);


				int index78_32 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_32);
				if (s >= 0) return s;
				break;

			case 17:
				int LA78_33 = input.LA(1);


				int index78_33 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_33);
				if (s >= 0) return s;
				break;

			case 18:
				int LA78_34 = input.LA(1);


				int index78_34 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_34);
				if (s >= 0) return s;
				break;

			case 19:
				int LA78_35 = input.LA(1);


				int index78_35 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_35);
				if (s >= 0) return s;
				break;

			case 20:
				int LA78_36 = input.LA(1);


				int index78_36 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_36);
				if (s >= 0) return s;
				break;

			case 21:
				int LA78_37 = input.LA(1);


				int index78_37 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_37);
				if (s >= 0) return s;
				break;

			case 22:
				int LA78_38 = input.LA(1);


				int index78_38 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_38);
				if (s >= 0) return s;
				break;

			case 23:
				int LA78_39 = input.LA(1);


				int index78_39 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_39);
				if (s >= 0) return s;
				break;

			case 24:
				int LA78_40 = input.LA(1);


				int index78_40 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_40);
				if (s >= 0) return s;
				break;

			case 25:
				int LA78_41 = input.LA(1);


				int index78_41 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_41);
				if (s >= 0) return s;
				break;

			case 26:
				int LA78_42 = input.LA(1);


				int index78_42 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_42);
				if (s >= 0) return s;
				break;

			case 27:
				int LA78_43 = input.LA(1);


				int index78_43 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_43);
				if (s >= 0) return s;
				break;

			case 28:
				int LA78_44 = input.LA(1);


				int index78_44 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_44);
				if (s >= 0) return s;
				break;

			case 29:
				int LA78_45 = input.LA(1);


				int index78_45 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_45);
				if (s >= 0) return s;
				break;

			case 30:
				int LA78_46 = input.LA(1);


				int index78_46 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_46);
				if (s >= 0) return s;
				break;

			case 31:
				int LA78_47 = input.LA(1);


				int index78_47 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_47);
				if (s >= 0) return s;
				break;

			case 32:
				int LA78_48 = input.LA(1);


				int index78_48 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_48);
				if (s >= 0) return s;
				break;

			case 33:
				int LA78_49 = input.LA(1);


				int index78_49 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_49);
				if (s >= 0) return s;
				break;

			case 34:
				int LA78_50 = input.LA(1);


				int index78_50 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_50);
				if (s >= 0) return s;
				break;

			case 35:
				int LA78_51 = input.LA(1);


				int index78_51 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_51);
				if (s >= 0) return s;
				break;

			case 36:
				int LA78_52 = input.LA(1);


				int index78_52 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_52);
				if (s >= 0) return s;
				break;

			case 37:
				int LA78_53 = input.LA(1);


				int index78_53 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_53);
				if (s >= 0) return s;
				break;

			case 38:
				int LA78_54 = input.LA(1);


				int index78_54 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_54);
				if (s >= 0) return s;
				break;

			case 39:
				int LA78_55 = input.LA(1);


				int index78_55 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_55);
				if (s >= 0) return s;
				break;

			case 40:
				int LA78_56 = input.LA(1);


				int index78_56 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_56);
				if (s >= 0) return s;
				break;

			case 41:
				int LA78_57 = input.LA(1);


				int index78_57 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_57);
				if (s >= 0) return s;
				break;

			case 42:
				int LA78_58 = input.LA(1);


				int index78_58 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_58);
				if (s >= 0) return s;
				break;

			case 43:
				int LA78_59 = input.LA(1);


				int index78_59 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_59);
				if (s >= 0) return s;
				break;

			case 44:
				int LA78_60 = input.LA(1);


				int index78_60 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_60);
				if (s >= 0) return s;
				break;

			case 45:
				int LA78_61 = input.LA(1);


				int index78_61 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_61);
				if (s >= 0) return s;
				break;

			case 46:
				int LA78_62 = input.LA(1);


				int index78_62 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_62);
				if (s >= 0) return s;
				break;

			case 47:
				int LA78_63 = input.LA(1);


				int index78_63 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_63);
				if (s >= 0) return s;
				break;

			case 48:
				int LA78_64 = input.LA(1);


				int index78_64 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_64);
				if (s >= 0) return s;
				break;

			case 49:
				int LA78_65 = input.LA(1);


				int index78_65 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_65);
				if (s >= 0) return s;
				break;

			case 50:
				int LA78_66 = input.LA(1);


				int index78_66 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_66);
				if (s >= 0) return s;
				break;

			case 51:
				int LA78_67 = input.LA(1);


				int index78_67 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_67);
				if (s >= 0) return s;
				break;

			case 52:
				int LA78_90 = input.LA(1);


				int index78_90 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_90);
				if (s >= 0) return s;
				break;

			case 53:
				int LA78_91 = input.LA(1);


				int index78_91 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_91);
				if (s >= 0) return s;
				break;

			case 54:
				int LA78_92 = input.LA(1);


				int index78_92 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_92);
				if (s >= 0) return s;
				break;

			case 55:
				int LA78_93 = input.LA(1);


				int index78_93 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_93);
				if (s >= 0) return s;
				break;

			case 56:
				int LA78_94 = input.LA(1);


				int index78_94 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_94);
				if (s >= 0) return s;
				break;

			case 57:
				int LA78_95 = input.LA(1);


				int index78_95 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_95);
				if (s >= 0) return s;
				break;

			case 58:
				int LA78_96 = input.LA(1);


				int index78_96 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_96);
				if (s >= 0) return s;
				break;

			case 59:
				int LA78_97 = input.LA(1);


				int index78_97 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_97);
				if (s >= 0) return s;
				break;

			case 60:
				int LA78_98 = input.LA(1);


				int index78_98 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_98);
				if (s >= 0) return s;
				break;

			case 61:
				int LA78_99 = input.LA(1);


				int index78_99 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_99);
				if (s >= 0) return s;
				break;

			case 62:
				int LA78_100 = input.LA(1);


				int index78_100 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_100);
				if (s >= 0) return s;
				break;

			case 63:
				int LA78_101 = input.LA(1);


				int index78_101 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_101);
				if (s >= 0) return s;
				break;

			case 64:
				int LA78_102 = input.LA(1);


				int index78_102 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_102);
				if (s >= 0) return s;
				break;

			case 65:
				int LA78_103 = input.LA(1);


				int index78_103 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_103);
				if (s >= 0) return s;
				break;

			case 66:
				int LA78_104 = input.LA(1);


				int index78_104 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_104);
				if (s >= 0) return s;
				break;

			case 67:
				int LA78_105 = input.LA(1);


				int index78_105 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_105);
				if (s >= 0) return s;
				break;

			case 68:
				int LA78_106 = input.LA(1);


				int index78_106 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_106);
				if (s >= 0) return s;
				break;

			case 69:
				int LA78_107 = input.LA(1);


				int index78_107 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_107);
				if (s >= 0) return s;
				break;

			case 70:
				int LA78_108 = input.LA(1);


				int index78_108 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_108);
				if (s >= 0) return s;
				break;

			case 71:
				int LA78_109 = input.LA(1);


				int index78_109 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_109);
				if (s >= 0) return s;
				break;

			case 72:
				int LA78_132 = input.LA(1);


				int index78_132 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_132);
				if (s >= 0) return s;
				break;

			case 73:
				int LA78_133 = input.LA(1);


				int index78_133 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_133);
				if (s >= 0) return s;
				break;

			case 74:
				int LA78_134 = input.LA(1);


				int index78_134 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_134);
				if (s >= 0) return s;
				break;

			case 75:
				int LA78_135 = input.LA(1);


				int index78_135 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_135);
				if (s >= 0) return s;
				break;

			case 76:
				int LA78_136 = input.LA(1);


				int index78_136 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_136);
				if (s >= 0) return s;
				break;

			case 77:
				int LA78_137 = input.LA(1);


				int index78_137 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_137);
				if (s >= 0) return s;
				break;

			case 78:
				int LA78_138 = input.LA(1);


				int index78_138 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_138);
				if (s >= 0) return s;
				break;

			case 79:
				int LA78_139 = input.LA(1);


				int index78_139 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_139);
				if (s >= 0) return s;
				break;

			case 80:
				int LA78_140 = input.LA(1);


				int index78_140 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_140);
				if (s >= 0) return s;
				break;

			case 81:
				int LA78_141 = input.LA(1);


				int index78_141 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_141);
				if (s >= 0) return s;
				break;

			case 82:
				int LA78_142 = input.LA(1);


				int index78_142 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_142);
				if (s >= 0) return s;
				break;

			case 83:
				int LA78_143 = input.LA(1);


				int index78_143 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_143);
				if (s >= 0) return s;
				break;

			case 84:
				int LA78_144 = input.LA(1);


				int index78_144 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_144);
				if (s >= 0) return s;
				break;

			case 85:
				int LA78_145 = input.LA(1);


				int index78_145 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_145);
				if (s >= 0) return s;
				break;

			case 86:
				int LA78_146 = input.LA(1);


				int index78_146 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_146);
				if (s >= 0) return s;
				break;

			case 87:
				int LA78_147 = input.LA(1);


				int index78_147 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_147);
				if (s >= 0) return s;
				break;

			case 88:
				int LA78_148 = input.LA(1);


				int index78_148 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_148);
				if (s >= 0) return s;
				break;

			case 89:
				int LA78_149 = input.LA(1);


				int index78_149 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_149);
				if (s >= 0) return s;
				break;

			case 90:
				int LA78_150 = input.LA(1);


				int index78_150 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_150);
				if (s >= 0) return s;
				break;

			case 91:
				int LA78_151 = input.LA(1);


				int index78_151 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_151);
				if (s >= 0) return s;
				break;

			case 92:
				int LA78_174 = input.LA(1);


				int index78_174 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_174);
				if (s >= 0) return s;
				break;

			case 93:
				int LA78_175 = input.LA(1);


				int index78_175 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_175);
				if (s >= 0) return s;
				break;

			case 94:
				int LA78_176 = input.LA(1);


				int index78_176 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_176);
				if (s >= 0) return s;
				break;

			case 95:
				int LA78_177 = input.LA(1);


				int index78_177 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_177);
				if (s >= 0) return s;
				break;

			case 96:
				int LA78_178 = input.LA(1);


				int index78_178 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_178);
				if (s >= 0) return s;
				break;

			case 97:
				int LA78_179 = input.LA(1);


				int index78_179 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_179);
				if (s >= 0) return s;
				break;

			case 98:
				int LA78_180 = input.LA(1);


				int index78_180 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_180);
				if (s >= 0) return s;
				break;

			case 99:
				int LA78_181 = input.LA(1);


				int index78_181 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_181);
				if (s >= 0) return s;
				break;

			case 100:
				int LA78_182 = input.LA(1);


				int index78_182 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_182);
				if (s >= 0) return s;
				break;

			case 101:
				int LA78_183 = input.LA(1);


				int index78_183 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_183);
				if (s >= 0) return s;
				break;

			case 102:
				int LA78_184 = input.LA(1);


				int index78_184 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_184);
				if (s >= 0) return s;
				break;

			case 103:
				int LA78_185 = input.LA(1);


				int index78_185 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_185);
				if (s >= 0) return s;
				break;

			case 104:
				int LA78_186 = input.LA(1);


				int index78_186 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_186);
				if (s >= 0) return s;
				break;

			case 105:
				int LA78_187 = input.LA(1);


				int index78_187 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_187);
				if (s >= 0) return s;
				break;

			case 106:
				int LA78_188 = input.LA(1);


				int index78_188 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_188);
				if (s >= 0) return s;
				break;

			case 107:
				int LA78_189 = input.LA(1);


				int index78_189 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_189);
				if (s >= 0) return s;
				break;

			case 108:
				int LA78_190 = input.LA(1);


				int index78_190 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_190);
				if (s >= 0) return s;
				break;

			case 109:
				int LA78_191 = input.LA(1);


				int index78_191 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_191);
				if (s >= 0) return s;
				break;

			case 110:
				int LA78_192 = input.LA(1);


				int index78_192 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_192);
				if (s >= 0) return s;
				break;

			case 111:
				int LA78_193 = input.LA(1);


				int index78_193 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_193);
				if (s >= 0) return s;
				break;

			case 112:
				int LA78_216 = input.LA(1);


				int index78_216 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_216);
				if (s >= 0) return s;
				break;

			case 113:
				int LA78_217 = input.LA(1);


				int index78_217 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_217);
				if (s >= 0) return s;
				break;

			case 114:
				int LA78_218 = input.LA(1);


				int index78_218 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_218);
				if (s >= 0) return s;
				break;

			case 115:
				int LA78_219 = input.LA(1);


				int index78_219 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_219);
				if (s >= 0) return s;
				break;

			case 116:
				int LA78_220 = input.LA(1);


				int index78_220 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_220);
				if (s >= 0) return s;
				break;

			case 117:
				int LA78_221 = input.LA(1);


				int index78_221 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_221);
				if (s >= 0) return s;
				break;

			case 118:
				int LA78_222 = input.LA(1);


				int index78_222 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_222);
				if (s >= 0) return s;
				break;

			case 119:
				int LA78_223 = input.LA(1);


				int index78_223 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_223);
				if (s >= 0) return s;
				break;

			case 120:
				int LA78_224 = input.LA(1);


				int index78_224 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_224);
				if (s >= 0) return s;
				break;

			case 121:
				int LA78_225 = input.LA(1);


				int index78_225 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_225);
				if (s >= 0) return s;
				break;

			case 122:
				int LA78_226 = input.LA(1);


				int index78_226 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_226);
				if (s >= 0) return s;
				break;

			case 123:
				int LA78_227 = input.LA(1);


				int index78_227 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_227);
				if (s >= 0) return s;
				break;

			case 124:
				int LA78_228 = input.LA(1);


				int index78_228 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_228);
				if (s >= 0) return s;
				break;

			case 125:
				int LA78_229 = input.LA(1);


				int index78_229 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_229);
				if (s >= 0) return s;
				break;

			case 126:
				int LA78_230 = input.LA(1);


				int index78_230 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_230);
				if (s >= 0) return s;
				break;

			case 127:
				int LA78_231 = input.LA(1);


				int index78_231 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_231);
				if (s >= 0) return s;
				break;

			case 128:
				int LA78_232 = input.LA(1);


				int index78_232 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_232);
				if (s >= 0) return s;
				break;

			case 129:
				int LA78_233 = input.LA(1);


				int index78_233 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_233);
				if (s >= 0) return s;
				break;

			case 130:
				int LA78_234 = input.LA(1);


				int index78_234 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_234);
				if (s >= 0) return s;
				break;

			case 131:
				int LA78_235 = input.LA(1);


				int index78_235 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_235);
				if (s >= 0) return s;
				break;

			case 132:
				int LA78_301 = input.LA(1);


				int index78_301 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_301);
				if (s >= 0) return s;
				break;

			case 133:
				int LA78_302 = input.LA(1);


				int index78_302 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_302);
				if (s >= 0) return s;
				break;

			case 134:
				int LA78_303 = input.LA(1);


				int index78_303 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_303);
				if (s >= 0) return s;
				break;

			case 135:
				int LA78_304 = input.LA(1);


				int index78_304 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_304);
				if (s >= 0) return s;
				break;

			case 136:
				int LA78_305 = input.LA(1);


				int index78_305 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_305);
				if (s >= 0) return s;
				break;

			case 137:
				int LA78_306 = input.LA(1);


				int index78_306 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_306);
				if (s >= 0) return s;
				break;

			case 138:
				int LA78_307 = input.LA(1);


				int index78_307 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_307);
				if (s >= 0) return s;
				break;

			case 139:
				int LA78_308 = input.LA(1);


				int index78_308 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_308);
				if (s >= 0) return s;
				break;

			case 140:
				int LA78_309 = input.LA(1);


				int index78_309 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_309);
				if (s >= 0) return s;
				break;

			case 141:
				int LA78_310 = input.LA(1);


				int index78_310 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_310);
				if (s >= 0) return s;
				break;

			case 142:
				int LA78_311 = input.LA(1);


				int index78_311 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_311);
				if (s >= 0) return s;
				break;

			case 143:
				int LA78_312 = input.LA(1);


				int index78_312 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_312);
				if (s >= 0) return s;
				break;

			case 144:
				int LA78_313 = input.LA(1);


				int index78_313 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_313);
				if (s >= 0) return s;
				break;

			case 145:
				int LA78_314 = input.LA(1);


				int index78_314 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_314);
				if (s >= 0) return s;
				break;

			case 146:
				int LA78_315 = input.LA(1);


				int index78_315 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_315);
				if (s >= 0) return s;
				break;

			case 147:
				int LA78_316 = input.LA(1);


				int index78_316 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_316);
				if (s >= 0) return s;
				break;

			case 148:
				int LA78_317 = input.LA(1);


				int index78_317 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_317);
				if (s >= 0) return s;
				break;

			case 149:
				int LA78_318 = input.LA(1);


				int index78_318 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_318);
				if (s >= 0) return s;
				break;

			case 150:
				int LA78_319 = input.LA(1);


				int index78_319 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_319);
				if (s >= 0) return s;
				break;

			case 151:
				int LA78_320 = input.LA(1);


				int index78_320 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_320);
				if (s >= 0) return s;
				break;

			case 152:
				int LA78_343 = input.LA(1);


				int index78_343 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_343);
				if (s >= 0) return s;
				break;

			case 153:
				int LA78_344 = input.LA(1);


				int index78_344 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_344);
				if (s >= 0) return s;
				break;

			case 154:
				int LA78_345 = input.LA(1);


				int index78_345 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_345);
				if (s >= 0) return s;
				break;

			case 155:
				int LA78_346 = input.LA(1);


				int index78_346 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_346);
				if (s >= 0) return s;
				break;

			case 156:
				int LA78_347 = input.LA(1);


				int index78_347 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_347);
				if (s >= 0) return s;
				break;

			case 157:
				int LA78_348 = input.LA(1);


				int index78_348 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_348);
				if (s >= 0) return s;
				break;

			case 158:
				int LA78_349 = input.LA(1);


				int index78_349 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_349);
				if (s >= 0) return s;
				break;

			case 159:
				int LA78_350 = input.LA(1);


				int index78_350 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_350);
				if (s >= 0) return s;
				break;

			case 160:
				int LA78_351 = input.LA(1);


				int index78_351 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_351);
				if (s >= 0) return s;
				break;

			case 161:
				int LA78_352 = input.LA(1);


				int index78_352 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_352);
				if (s >= 0) return s;
				break;

			case 162:
				int LA78_353 = input.LA(1);


				int index78_353 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_353);
				if (s >= 0) return s;
				break;

			case 163:
				int LA78_354 = input.LA(1);


				int index78_354 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_354);
				if (s >= 0) return s;
				break;

			case 164:
				int LA78_355 = input.LA(1);


				int index78_355 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_355);
				if (s >= 0) return s;
				break;

			case 165:
				int LA78_356 = input.LA(1);


				int index78_356 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_356);
				if (s >= 0) return s;
				break;

			case 166:
				int LA78_357 = input.LA(1);


				int index78_357 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_357);
				if (s >= 0) return s;
				break;

			case 167:
				int LA78_358 = input.LA(1);


				int index78_358 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_358);
				if (s >= 0) return s;
				break;

			case 168:
				int LA78_359 = input.LA(1);


				int index78_359 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_359);
				if (s >= 0) return s;
				break;

			case 169:
				int LA78_360 = input.LA(1);


				int index78_360 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_360);
				if (s >= 0) return s;
				break;

			case 170:
				int LA78_361 = input.LA(1);


				int index78_361 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_361);
				if (s >= 0) return s;
				break;

			case 171:
				int LA78_362 = input.LA(1);


				int index78_362 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_362);
				if (s >= 0) return s;
				break;

			case 172:
				int LA78_363 = input.LA(1);


				int index78_363 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_363);
				if (s >= 0) return s;
				break;

			case 173:
				int LA78_364 = input.LA(1);


				int index78_364 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_364);
				if (s >= 0) return s;
				break;

			case 174:
				int LA78_365 = input.LA(1);


				int index78_365 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_365);
				if (s >= 0) return s;
				break;

			case 175:
				int LA78_366 = input.LA(1);


				int index78_366 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_366);
				if (s >= 0) return s;
				break;

			case 176:
				int LA78_367 = input.LA(1);


				int index78_367 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_367);
				if (s >= 0) return s;
				break;

			case 177:
				int LA78_368 = input.LA(1);


				int index78_368 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_368);
				if (s >= 0) return s;
				break;

			case 178:
				int LA78_369 = input.LA(1);


				int index78_369 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_369);
				if (s >= 0) return s;
				break;

			case 179:
				int LA78_370 = input.LA(1);


				int index78_370 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_370);
				if (s >= 0) return s;
				break;

			case 180:
				int LA78_371 = input.LA(1);


				int index78_371 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_371);
				if (s >= 0) return s;
				break;

			case 181:
				int LA78_372 = input.LA(1);


				int index78_372 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_372);
				if (s >= 0) return s;
				break;

			case 182:
				int LA78_373 = input.LA(1);


				int index78_373 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_373);
				if (s >= 0) return s;
				break;

			case 183:
				int LA78_374 = input.LA(1);


				int index78_374 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_374);
				if (s >= 0) return s;
				break;

			case 184:
				int LA78_375 = input.LA(1);


				int index78_375 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_375);
				if (s >= 0) return s;
				break;

			case 185:
				int LA78_376 = input.LA(1);


				int index78_376 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_376);
				if (s >= 0) return s;
				break;

			case 186:
				int LA78_377 = input.LA(1);


				int index78_377 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_377);
				if (s >= 0) return s;
				break;

			case 187:
				int LA78_378 = input.LA(1);


				int index78_378 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_378);
				if (s >= 0) return s;
				break;

			case 188:
				int LA78_379 = input.LA(1);


				int index78_379 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_379);
				if (s >= 0) return s;
				break;

			case 189:
				int LA78_380 = input.LA(1);


				int index78_380 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_380);
				if (s >= 0) return s;
				break;

			case 190:
				int LA78_381 = input.LA(1);


				int index78_381 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_381);
				if (s >= 0) return s;
				break;

			case 191:
				int LA78_382 = input.LA(1);


				int index78_382 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_382);
				if (s >= 0) return s;
				break;

			case 192:
				int LA78_383 = input.LA(1);


				int index78_383 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_383);
				if (s >= 0) return s;
				break;

			case 193:
				int LA78_384 = input.LA(1);


				int index78_384 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_384);
				if (s >= 0) return s;
				break;

			case 194:
				int LA78_385 = input.LA(1);


				int index78_385 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_385);
				if (s >= 0) return s;
				break;

			case 195:
				int LA78_386 = input.LA(1);


				int index78_386 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_386);
				if (s >= 0) return s;
				break;

			case 196:
				int LA78_387 = input.LA(1);


				int index78_387 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_387);
				if (s >= 0) return s;
				break;

			case 197:
				int LA78_388 = input.LA(1);


				int index78_388 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_388);
				if (s >= 0) return s;
				break;

			case 198:
				int LA78_389 = input.LA(1);


				int index78_389 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_389);
				if (s >= 0) return s;
				break;

			case 199:
				int LA78_390 = input.LA(1);


				int index78_390 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_390);
				if (s >= 0) return s;
				break;

			case 200:
				int LA78_391 = input.LA(1);


				int index78_391 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_391);
				if (s >= 0) return s;
				break;

			case 201:
				int LA78_392 = input.LA(1);


				int index78_392 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_392);
				if (s >= 0) return s;
				break;

			case 202:
				int LA78_393 = input.LA(1);


				int index78_393 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_393);
				if (s >= 0) return s;
				break;

			case 203:
				int LA78_394 = input.LA(1);


				int index78_394 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_394);
				if (s >= 0) return s;
				break;

			case 204:
				int LA78_395 = input.LA(1);


				int index78_395 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_395);
				if (s >= 0) return s;
				break;

			case 205:
				int LA78_396 = input.LA(1);


				int index78_396 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_396);
				if (s >= 0) return s;
				break;

			case 206:
				int LA78_397 = input.LA(1);


				int index78_397 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_397);
				if (s >= 0) return s;
				break;

			case 207:
				int LA78_398 = input.LA(1);


				int index78_398 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_398);
				if (s >= 0) return s;
				break;

			case 208:
				int LA78_399 = input.LA(1);


				int index78_399 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_399);
				if (s >= 0) return s;
				break;

			case 209:
				int LA78_400 = input.LA(1);


				int index78_400 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_400);
				if (s >= 0) return s;
				break;

			case 210:
				int LA78_401 = input.LA(1);


				int index78_401 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_401);
				if (s >= 0) return s;
				break;

			case 211:
				int LA78_402 = input.LA(1);


				int index78_402 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_402);
				if (s >= 0) return s;
				break;

			case 212:
				int LA78_403 = input.LA(1);


				int index78_403 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_403);
				if (s >= 0) return s;
				break;

			case 213:
				int LA78_404 = input.LA(1);


				int index78_404 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_404);
				if (s >= 0) return s;
				break;

			case 214:
				int LA78_405 = input.LA(1);


				int index78_405 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_405);
				if (s >= 0) return s;
				break;

			case 215:
				int LA78_406 = input.LA(1);


				int index78_406 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_406);
				if (s >= 0) return s;
				break;

			case 216:
				int LA78_407 = input.LA(1);


				int index78_407 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_407);
				if (s >= 0) return s;
				break;

			case 217:
				int LA78_408 = input.LA(1);


				int index78_408 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_408);
				if (s >= 0) return s;
				break;

			case 218:
				int LA78_409 = input.LA(1);


				int index78_409 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_409);
				if (s >= 0) return s;
				break;

			case 219:
				int LA78_410 = input.LA(1);


				int index78_410 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_410);
				if (s >= 0) return s;
				break;

			case 220:
				int LA78_411 = input.LA(1);


				int index78_411 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_411);
				if (s >= 0) return s;
				break;

			case 221:
				int LA78_412 = input.LA(1);


				int index78_412 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_412);
				if (s >= 0) return s;
				break;

			case 222:
				int LA78_413 = input.LA(1);


				int index78_413 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_413);
				if (s >= 0) return s;
				break;

			case 223:
				int LA78_414 = input.LA(1);


				int index78_414 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_414);
				if (s >= 0) return s;
				break;

			case 224:
				int LA78_415 = input.LA(1);


				int index78_415 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_415);
				if (s >= 0) return s;
				break;

			case 225:
				int LA78_416 = input.LA(1);


				int index78_416 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_416);
				if (s >= 0) return s;
				break;

			case 226:
				int LA78_417 = input.LA(1);


				int index78_417 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_417);
				if (s >= 0) return s;
				break;

			case 227:
				int LA78_418 = input.LA(1);


				int index78_418 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_418);
				if (s >= 0) return s;
				break;

			case 228:
				int LA78_419 = input.LA(1);


				int index78_419 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_419);
				if (s >= 0) return s;
				break;

			case 229:
				int LA78_420 = input.LA(1);


				int index78_420 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_420);
				if (s >= 0) return s;
				break;

			case 230:
				int LA78_421 = input.LA(1);


				int index78_421 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_421);
				if (s >= 0) return s;
				break;

			case 231:
				int LA78_422 = input.LA(1);


				int index78_422 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_422);
				if (s >= 0) return s;
				break;

			case 232:
				int LA78_423 = input.LA(1);


				int index78_423 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_423);
				if (s >= 0) return s;
				break;

			case 233:
				int LA78_424 = input.LA(1);


				int index78_424 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_424);
				if (s >= 0) return s;
				break;

			case 234:
				int LA78_425 = input.LA(1);


				int index78_425 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_425);
				if (s >= 0) return s;
				break;

			case 235:
				int LA78_426 = input.LA(1);


				int index78_426 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_426);
				if (s >= 0) return s;
				break;

			case 236:
				int LA78_427 = input.LA(1);


				int index78_427 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_427);
				if (s >= 0) return s;
				break;

			case 237:
				int LA78_428 = input.LA(1);


				int index78_428 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_428);
				if (s >= 0) return s;
				break;

			case 238:
				int LA78_429 = input.LA(1);


				int index78_429 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_429);
				if (s >= 0) return s;
				break;

			case 239:
				int LA78_430 = input.LA(1);


				int index78_430 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_430);
				if (s >= 0) return s;
				break;

			case 240:
				int LA78_431 = input.LA(1);


				int index78_431 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_431);
				if (s >= 0) return s;
				break;

			case 241:
				int LA78_432 = input.LA(1);


				int index78_432 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_432);
				if (s >= 0) return s;
				break;

			case 242:
				int LA78_433 = input.LA(1);


				int index78_433 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_433);
				if (s >= 0) return s;
				break;

			case 243:
				int LA78_434 = input.LA(1);


				int index78_434 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_434);
				if (s >= 0) return s;
				break;

			case 244:
				int LA78_435 = input.LA(1);


				int index78_435 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_435);
				if (s >= 0) return s;
				break;

			case 245:
				int LA78_436 = input.LA(1);


				int index78_436 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_436);
				if (s >= 0) return s;
				break;

			case 246:
				int LA78_437 = input.LA(1);


				int index78_437 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_437);
				if (s >= 0) return s;
				break;

			case 247:
				int LA78_438 = input.LA(1);


				int index78_438 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_438);
				if (s >= 0) return s;
				break;

			case 248:
				int LA78_439 = input.LA(1);


				int index78_439 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_439);
				if (s >= 0) return s;
				break;

			case 249:
				int LA78_440 = input.LA(1);


				int index78_440 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred154_C_fragment))) {s = 68;}

				else if ((true)) {s = 300;}


				input.Seek(index78_440);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 78, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA90 : DFA
	{
		private const string DFA90_eotS =
			"\x7D\xFFFF";
		private const string DFA90_eofS =
			"\x7D\xFFFF";
		private const string DFA90_minS =
			"\x2\x4\xD\xFFFF\x1\xD\x21\xFFFF\x3\x0\x11\xFFFF\x1\x0\xE\xFFFF\x1\x0"+
			"\x1\xFFFF\x2\x0\x25\xFFFF";
		private const string DFA90_maxS =
			"\x2\x77\xD\xFFFF\x1\x75\x21\xFFFF\x3\x0\x11\xFFFF\x1\x0\xE\xFFFF\x1\x0"+
			"\x1\xFFFF\x2\x0\x25\xFFFF";
		private const string DFA90_acceptS =
			"\x2\xFFFF\x1\x1\x11\xFFFF\x1\x2\x68\xFFFF";
		private const string DFA90_specialS =
			"\x31\xFFFF\x1\x0\x1\x1\x1\x2\x11\xFFFF\x1\x3\xE\xFFFF\x1\x4\x1\xFFFF"+
			"\x1\x5\x1\x6\x25\xFFFF}>";
		private static readonly string[] DFA90_transitionS =
			{
				"\x1\x14\x1\xFFFF\x1\x14\x2\xFFFF\x1\x14\x1\xFFFF\x1\x14\x1\xFFFF\x1"+
				"\xF\x4\xFFFF\x1\x14\x1\xFFFF\x1\x14\x2\xFFFF\x1\x14\x4\xFFFF\x1\x14"+
				"\x1\xFFFF\x1\x14\x1\xFFFF\x1\x14\x1\xFFFF\x2\x14\x2\xFFFF\x2\x14\x7"+
				"\xFFFF\x1\x14\xF\xFFFF\x2\x14\x1\x2\x2\x14\x3\x2\x1\x1\x6\x2\x1\x14"+
				"\x1\x2\x2\x14\x2\x2\x3\x14\x1\x2\x1\xFFFF\x3\x2\x3\x14\x5\x2\x1\x14"+
				"\x2\x2\x1\x14\x2\x2\x1\x14\x6\x2\x2\x14\x4\xFFFF\x1\x14",
				"\x1\x14\x1\xFFFF\x1\x14\x2\xFFFF\x1\x14\x1\xFFFF\x1\x14\x1\xFFFF\x1"+
				"\x32\x4\xFFFF\x1\x14\x1\xFFFF\x1\x14\x2\xFFFF\x1\x14\x4\xFFFF\x1\x14"+
				"\x1\xFFFF\x1\x33\x1\xFFFF\x1\x31\x1\xFFFF\x2\x14\x2\xFFFF\x2\x14\x7"+
				"\xFFFF\x1\x2\xF\xFFFF\x1\x14\x1\xFFFF\x1\x2\x2\x14\x3\x2\x1\x45\x6\x2"+
				"\x1\xFFFF\x1\x2\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x3\x2\x3\xFFFF"+
				"\x5\x2\x1\xFFFF\x2\x2\x1\x14\x2\x2\x1\xFFFF\x6\x2\x6\xFFFF\x1\x14",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x2\xA\xFFFF\x6\x14\x1\x56\x1\xFFFF\x1\x54\xA\x14\x1\xFFFF\x3\x14"+
				"\x1\x57\xC\x14\x1\xFFFF\x2\x14\x2\xFFFF\x1\x2\x2\xFFFF\xA\x2\x1\xFFFF"+
				"\x1\x2\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x3\x2\x3\xFFFF\x5\x2\x1"+
				"\xFFFF\x2\x2\x1\xFFFF\x2\x2\x2\xFFFF\x5\x2\x2\xFFFF\x3\x14",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA90_eot = DFA.UnpackEncodedString(DFA90_eotS);
		private static readonly short[] DFA90_eof = DFA.UnpackEncodedString(DFA90_eofS);
		private static readonly char[] DFA90_min = DFA.UnpackEncodedStringToUnsignedChars(DFA90_minS);
		private static readonly char[] DFA90_max = DFA.UnpackEncodedStringToUnsignedChars(DFA90_maxS);
		private static readonly short[] DFA90_accept = DFA.UnpackEncodedString(DFA90_acceptS);
		private static readonly short[] DFA90_special = DFA.UnpackEncodedString(DFA90_specialS);
		private static readonly short[][] DFA90_transition;

		static DFA90()
		{
			int numStates = DFA90_transitionS.Length;
			DFA90_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA90_transition[i] = DFA.UnpackEncodedString(DFA90_transitionS[i]);
			}
		}

		public DFA90( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 90;
			this.eot = DFA90_eot;
			this.eof = DFA90_eof;
			this.min = DFA90_min;
			this.max = DFA90_max;
			this.accept = DFA90_accept;
			this.special = DFA90_special;
			this.transition = DFA90_transition;
		}

		public override string Description { get { return "496:1: block_item : ( declaration | statement );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition90(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA90_49 = input.LA(1);


				int index90_49 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred177_C_fragment))) {s = 2;}

				else if ((true)) {s = 20;}


				input.Seek(index90_49);
				if (s >= 0) return s;
				break;

			case 1:
				int LA90_50 = input.LA(1);


				int index90_50 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred177_C_fragment))) {s = 2;}

				else if ((true)) {s = 20;}


				input.Seek(index90_50);
				if (s >= 0) return s;
				break;

			case 2:
				int LA90_51 = input.LA(1);


				int index90_51 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred177_C_fragment))) {s = 2;}

				else if ((true)) {s = 20;}


				input.Seek(index90_51);
				if (s >= 0) return s;
				break;

			case 3:
				int LA90_69 = input.LA(1);


				int index90_69 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred177_C_fragment))) {s = 2;}

				else if ((true)) {s = 20;}


				input.Seek(index90_69);
				if (s >= 0) return s;
				break;

			case 4:
				int LA90_84 = input.LA(1);


				int index90_84 = input.Index;
				input.Rewind();
				s = -1;
				if ((((EvaluatePredicate(synpred177_C_fragment)&&EvaluatePredicate(synpred177_C_fragment))&&(isTypeName(input.LT(1).getText()))))) {s = 2;}

				else if ((true)) {s = 20;}


				input.Seek(index90_84);
				if (s >= 0) return s;
				break;

			case 5:
				int LA90_86 = input.LA(1);


				int index90_86 = input.Index;
				input.Rewind();
				s = -1;
				if ((((EvaluatePredicate(synpred177_C_fragment)&&EvaluatePredicate(synpred177_C_fragment))&&(isTypeName(input.LT(1).getText()))))) {s = 2;}

				else if ((true)) {s = 20;}


				input.Seek(index90_86);
				if (s >= 0) return s;
				break;

			case 6:
				int LA90_87 = input.LA(1);


				int index90_87 = input.Index;
				input.Rewind();
				s = -1;
				if ((((EvaluatePredicate(synpred177_C_fragment)&&EvaluatePredicate(synpred177_C_fragment))&&(isTypeName(input.LT(1).getText()))))) {s = 2;}

				else if ((true)) {s = 20;}


				input.Seek(index90_87);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 90, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA102 : DFA
	{
		private const string DFA102_eotS =
			"\x4C\xFFFF";
		private const string DFA102_eofS =
			"\x1\xFFFF\xB\x11\x3\xFFFF\x2\x11\x3B\xFFFF";
		private const string DFA102_minS =
			"\x1\xD\xB\x1E\x2\xD\x3\x1E\x2C\xFFFF\x7\x0\x8\xFFFF";
		private const string DFA102_maxS =
			"\x1\x70\xB\x25\x2\x72\x1\x1E\x2\x25\x2C\xFFFF\x7\x0\x8\xFFFF";
		private const string DFA102_acceptS =
			"\x11\xFFFF\x1\x1\x2\xFFFF\x1\x2\x37\xFFFF";
		private const string DFA102_specialS =
			"\x3D\xFFFF\x1\x0\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x8\xFFFF}>";
		private static readonly string[] DFA102_transitionS =
			{
				"\x1\x1\x36\xFFFF\x1\x10\x2\xF\x1\xFFFF\x2\x10\x4\xF\x1\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x4\x1\xF\x3\xFFFF\x1\x9\x1\xFFFF\x1\xD\x1\x2\x1\x8\x3\xFFFF"+
				"\x1\x10\x1\x6\x1\x7\x1\x2\x1\xF\x1\xFFFF\x1\x5\x1\xA\x1\xFFFF\x1\x2"+
				"\x1\xC\x2\xFFFF\x1\xE\x1\xC\x1\xB\x1\x3\x1\xF",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"\x1\x3E\x33\xFFFF\x1\x3D\x30\xFFFF\x1\x3F",
				"\x1\x41\x33\xFFFF\x1\x40\x30\xFFFF\x1\x42",
				"\x1\x43",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"\x1\x14\x1\x11\x5\xFFFF\x1\x11",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA102_eot = DFA.UnpackEncodedString(DFA102_eotS);
		private static readonly short[] DFA102_eof = DFA.UnpackEncodedString(DFA102_eofS);
		private static readonly char[] DFA102_min = DFA.UnpackEncodedStringToUnsignedChars(DFA102_minS);
		private static readonly char[] DFA102_max = DFA.UnpackEncodedStringToUnsignedChars(DFA102_maxS);
		private static readonly short[] DFA102_accept = DFA.UnpackEncodedString(DFA102_acceptS);
		private static readonly short[] DFA102_special = DFA.UnpackEncodedString(DFA102_specialS);
		private static readonly short[][] DFA102_transition;

		static DFA102()
		{
			int numStates = DFA102_transitionS.Length;
			DFA102_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA102_transition[i] = DFA.UnpackEncodedString(DFA102_transitionS[i]);
			}
		}

		public DFA102( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 102;
			this.eot = DFA102_eot;
			this.eof = DFA102_eof;
			this.min = DFA102_min;
			this.max = DFA102_max;
			this.accept = DFA102_accept;
			this.special = DFA102_special;
			this.transition = DFA102_transition;
		}

		public override string Description { get { return "554:1: gcc_attribute_parameter : ( gcc_attribute_name | gcc_attribute_name '(' ( assignment_expression ( ',' assignment_expression )* )? ')' );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition102(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA102_61 = input.LA(1);


				int index102_61 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred193_C_fragment))) {s = 17;}

				else if ((true)) {s = 20;}


				input.Seek(index102_61);
				if (s >= 0) return s;
				break;

			case 1:
				int LA102_62 = input.LA(1);


				int index102_62 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred193_C_fragment))) {s = 17;}

				else if ((true)) {s = 20;}


				input.Seek(index102_62);
				if (s >= 0) return s;
				break;

			case 2:
				int LA102_63 = input.LA(1);


				int index102_63 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred193_C_fragment))) {s = 17;}

				else if ((true)) {s = 20;}


				input.Seek(index102_63);
				if (s >= 0) return s;
				break;

			case 3:
				int LA102_64 = input.LA(1);


				int index102_64 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred193_C_fragment))) {s = 17;}

				else if ((true)) {s = 20;}


				input.Seek(index102_64);
				if (s >= 0) return s;
				break;

			case 4:
				int LA102_65 = input.LA(1);


				int index102_65 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred193_C_fragment))) {s = 17;}

				else if ((true)) {s = 20;}


				input.Seek(index102_65);
				if (s >= 0) return s;
				break;

			case 5:
				int LA102_66 = input.LA(1);


				int index102_66 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred193_C_fragment))) {s = 17;}

				else if ((true)) {s = 20;}


				input.Seek(index102_66);
				if (s >= 0) return s;
				break;

			case 6:
				int LA102_67 = input.LA(1);


				int index102_67 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred193_C_fragment))) {s = 17;}

				else if ((true)) {s = 20;}


				input.Seek(index102_67);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 102, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA117 : DFA
	{
		private const string DFA117_eotS =
			"\x66\xFFFF";
		private const string DFA117_eofS =
			"\x66\xFFFF";
		private const string DFA117_minS =
			"\x1\x4\xC\xFFFF\x1\x0\x2\xFFFF\x1\x4\x34\xFFFF\x2\x0\xE\xFFFF\x1\x0\x2"+
			"\xFFFF\x1\x0\xD\xFFFF";
		private const string DFA117_maxS =
			"\x1\x77\xC\xFFFF\x1\x0\x2\xFFFF\x1\x77\x34\xFFFF\x2\x0\xE\xFFFF\x1\x0"+
			"\x2\xFFFF\x1\x0\xD\xFFFF";
		private const string DFA117_acceptS =
			"\x1\xFFFF\x1\x1\xF\xFFFF\x1\x2\x54\xFFFF";
		private const string DFA117_specialS =
			"\xD\xFFFF\x1\x0\x37\xFFFF\x1\x1\x1\x2\xE\xFFFF\x1\x3\x2\xFFFF\x1\x4\xD"+
			"\xFFFF}>";
		private static readonly string[] DFA117_transitionS =
			{
				"\x1\x11\x1\xFFFF\x1\x11\x2\xFFFF\x1\x11\x1\xFFFF\x1\x11\x1\xFFFF\x1"+
				"\xD\x4\xFFFF\x1\x11\x1\xFFFF\x1\x11\x2\xFFFF\x1\x11\x4\xFFFF\x1\x11"+
				"\x1\xFFFF\x1\x11\x1\xFFFF\x1\x11\x1\xFFFF\x2\x11\x2\xFFFF\x2\x11\x17"+
				"\xFFFF\x1\x11\x1\xFFFF\x1\x1\x2\x11\x1\xFFFF\x2\x1\x1\x10\x2\xFFFF\x4"+
				"\x1\x4\xFFFF\x2\x1\x3\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1\x4\xFFFF"+
				"\x2\x1\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1\x1\x11\x1\xFFFF\x1\x1\x2\xFFFF"+
				"\x5\x1\x6\xFFFF\x1\x11",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"\x1\x11\x1\xFFFF\x1\x11\x2\xFFFF\x1\x11\x1\xFFFF\x1\x11\x1\xFFFF\x1"+
				"\x55\x4\xFFFF\x1\x11\x1\xFFFF\x1\x11\x2\xFFFF\x1\x11\x4\xFFFF\x1\x11"+
				"\x1\xFFFF\x1\x46\x1\x1\x1\x45\x1\xFFFF\x2\x11\x2\xFFFF\x2\x11\x13\xFFFF"+
				"\x1\x1\x3\xFFFF\x1\x11\x1\xFFFF\x1\x1\x2\x11\x1\xFFFF\x2\x1\x1\x58\x2"+
				"\xFFFF\x4\x1\x4\xFFFF\x2\x1\x3\xFFFF\x1\x1\x1\xFFFF\x1\x1\x1\xFFFF\x1"+
				"\x1\x4\xFFFF\x2\x1\x1\xFFFF\x1\x1\x1\xFFFF\x2\x1\x1\x11\x1\xFFFF\x1"+
				"\x1\x2\xFFFF\x5\x1\x6\xFFFF\x1\x11",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA117_eot = DFA.UnpackEncodedString(DFA117_eotS);
		private static readonly short[] DFA117_eof = DFA.UnpackEncodedString(DFA117_eofS);
		private static readonly char[] DFA117_min = DFA.UnpackEncodedStringToUnsignedChars(DFA117_minS);
		private static readonly char[] DFA117_max = DFA.UnpackEncodedStringToUnsignedChars(DFA117_maxS);
		private static readonly short[] DFA117_accept = DFA.UnpackEncodedString(DFA117_acceptS);
		private static readonly short[] DFA117_special = DFA.UnpackEncodedString(DFA117_specialS);
		private static readonly short[][] DFA117_transition;

		static DFA117()
		{
			int numStates = DFA117_transitionS.Length;
			DFA117_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA117_transition[i] = DFA.UnpackEncodedString(DFA117_transitionS[i]);
			}
		}

		public DFA117( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 117;
			this.eot = DFA117_eot;
			this.eof = DFA117_eof;
			this.min = DFA117_min;
			this.max = DFA117_max;
			this.accept = DFA117_accept;
			this.special = DFA117_special;
			this.transition = DFA117_transition;
		}

		public override string Description { get { return "608:17: ( type_name | assignment_expression )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition117(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA117_13 = input.LA(1);


				int index117_13 = input.Index;
				input.Rewind();
				s = -1;
				if ((((EvaluatePredicate(synpred214_C_fragment)&&EvaluatePredicate(synpred214_C_fragment))&&(isTypeName(input.LT(1).getText()))))) {s = 1;}

				else if ((true)) {s = 17;}


				input.Seek(index117_13);
				if (s >= 0) return s;
				break;

			case 1:
				int LA117_69 = input.LA(1);


				int index117_69 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred214_C_fragment))) {s = 1;}

				else if ((true)) {s = 17;}


				input.Seek(index117_69);
				if (s >= 0) return s;
				break;

			case 2:
				int LA117_70 = input.LA(1);


				int index117_70 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred214_C_fragment))) {s = 1;}

				else if ((true)) {s = 17;}


				input.Seek(index117_70);
				if (s >= 0) return s;
				break;

			case 3:
				int LA117_85 = input.LA(1);


				int index117_85 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred214_C_fragment))) {s = 1;}

				else if ((true)) {s = 17;}


				input.Seek(index117_85);
				if (s >= 0) return s;
				break;

			case 4:
				int LA117_88 = input.LA(1);


				int index117_88 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred214_C_fragment))) {s = 1;}

				else if ((true)) {s = 17;}


				input.Seek(index117_88);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 117, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _external_declaration_in_translation_unit71 = new BitSet(new ulong[]{0x140002002UL,0x1FB6F8E8CBFF2UL});
		public static readonly BitSet _function_definition_in_external_declaration107 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_external_declaration112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_function_definition134 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _declarator_in_function_definition137 = new BitSet(new ulong[]{0x2000UL,0x5FB6F8E8CBFF2UL});
		public static readonly BitSet _declaration_in_function_definition143 = new BitSet(new ulong[]{0x2000UL,0x5FB6F8E8CBFF2UL});
		public static readonly BitSet _compound_statement_in_function_definition146 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _compound_statement_in_function_definition153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_extension_specifier_in_declaration181 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _107_in_declaration184 = new BitSet(new ulong[]{0x140002000UL,0x1F36F8E8CBFF2UL});
		public static readonly BitSet _declaration_specifiers_in_declaration186 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _init_declarator_list_in_declaration196 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_declaration198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_declaration204 = new BitSet(new ulong[]{0x800140002000UL});
		public static readonly BitSet _init_declarator_list_in_declaration206 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_declaration209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _storage_class_specifier_in_declaration_specifiers226 = new BitSet(new ulong[]{0x2002UL,0x1F36F8E8CBFF2UL});
		public static readonly BitSet _type_specifier_in_declaration_specifiers234 = new BitSet(new ulong[]{0x2002UL,0x1F36F8E8CBFF2UL});
		public static readonly BitSet _type_qualifier_in_declaration_specifiers242 = new BitSet(new ulong[]{0x2002UL,0x1F36F8E8CBFF2UL});
		public static readonly BitSet _gcc_function_specifier_in_declaration_specifiers250 = new BitSet(new ulong[]{0x2002UL,0x1F36F8E8CBFF2UL});
		public static readonly BitSet _gcc_declaration_specifier_in_declaration_specifiers258 = new BitSet(new ulong[]{0x2002UL,0x1F36F8E8CBFF2UL});
		public static readonly BitSet _init_declarator_in_init_declarator_list274 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_init_declarator_list277 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _init_declarator_in_init_declarator_list279 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _declarator_in_init_declarator292 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _52_in_init_declarator295 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8400800000008CUL});
		public static readonly BitSet _initializer_in_init_declarator297 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_type_specifier336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_type_specifier341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _101_in_type_specifier346 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _96_in_type_specifier351 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _97_in_type_specifier356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_type_specifier361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _87_in_type_specifier366 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_type_specifier371 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_type_specifier376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_or_union_specifier_in_type_specifier381 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_specifier_in_type_specifier386 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_id_in_type_specifier391 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_typeof_in_type_specifier396 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_type_id411 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_or_union_in_struct_or_union_specifier441 = new BitSet(new ulong[]{0x2000UL,0x4000000000002UL});
		public static readonly BitSet _gcc_attribute_list_in_struct_or_union_specifier443 = new BitSet(new ulong[]{0x2000UL,0x4000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_struct_or_union_specifier446 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_struct_or_union_specifier449 = new BitSet(new ulong[]{0x800000002000UL,0x1F26B0A8C3CE2UL});
		public static readonly BitSet _struct_declaration_list_in_struct_or_union_specifier451 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _118_in_struct_or_union_specifier453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_or_union_in_struct_or_union_specifier458 = new BitSet(new ulong[]{0x2000UL,0x2UL});
		public static readonly BitSet _gcc_attribute_list_in_struct_or_union_specifier460 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_struct_or_union_specifier463 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_struct_declaration_list490 = new BitSet(new ulong[]{0x800000002002UL,0x1F26B0A8C3CE2UL});
		public static readonly BitSet _specifier_qualifier_list_in_struct_declaration502 = new BitSet(new ulong[]{0x400140002000UL});
		public static readonly BitSet _struct_declarator_list_in_struct_declaration504 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_struct_declaration506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _47_in_struct_declaration511 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_qualifier_in_specifier_qualifier_list525 = new BitSet(new ulong[]{0x2002UL,0x1F26B0A8C3CE2UL});
		public static readonly BitSet _type_specifier_in_specifier_qualifier_list529 = new BitSet(new ulong[]{0x2002UL,0x1F26B0A8C3CE2UL});
		public static readonly BitSet _gcc_declaration_specifier_in_specifier_qualifier_list533 = new BitSet(new ulong[]{0x2002UL,0x1F26B0A8C3CE2UL});
		public static readonly BitSet _struct_declarator_in_struct_declarator_list546 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_struct_declarator_list549 = new BitSet(new ulong[]{0x400140002000UL});
		public static readonly BitSet _struct_declarator_in_struct_declarator_list551 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _declarator_in_struct_declarator564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declarator_in_struct_declarator569 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_struct_declarator572 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _constant_expression_in_struct_declarator574 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _gcc_attribute_list_in_struct_declarator576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _89_in_enum_specifier595 = new BitSet(new ulong[]{0x2000UL,0x4000000000002UL});
		public static readonly BitSet _gcc_attribute_list_in_enum_specifier597 = new BitSet(new ulong[]{0x2000UL,0x4000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_enum_specifier600 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_enum_specifier603 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _enumerator_list_in_enum_specifier605 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _118_in_enum_specifier607 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _89_in_enum_specifier612 = new BitSet(new ulong[]{0x2000UL,0x2UL});
		public static readonly BitSet _gcc_attribute_list_in_enum_specifier614 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_enum_specifier617 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumerator_in_enumerator_list628 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_enumerator_list631 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _enumerator_in_enumerator_list633 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _IDENTIFIER_in_enumerator646 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _52_in_enumerator649 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _constant_expression_in_enumerator651 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_declarator728 = new BitSet(new ulong[]{0x40002000UL});
		public static readonly BitSet _direct_declarator_in_declarator731 = new BitSet(new ulong[]{0x2UL,0x4003UL});
		public static readonly BitSet _gcc_asm_expression_in_declarator733 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _gcc_attribute_list_in_declarator736 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_declarator742 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_direct_declarator757 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _30_in_direct_declarator768 = new BitSet(new ulong[]{0x140002000UL,0x2UL});
		public static readonly BitSet _gcc_attribute_list_in_direct_declarator770 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _declarator_in_direct_declarator773 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_direct_declarator775 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _declarator_suffix_in_direct_declarator783 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _59_in_declarator_suffix797 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _constant_expression_in_declarator_suffix799 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_declarator_suffix801 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_declarator_suffix808 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_declarator_suffix810 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_declarator_suffix817 = new BitSet(new ulong[]{0x2000UL,0x1F36F8E8CBFF2UL});
		public static readonly BitSet _parameter_type_list_in_declarator_suffix819 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_declarator_suffix821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_declarator_suffix828 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _identifier_list_in_declarator_suffix830 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_declarator_suffix832 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_declarator_suffix839 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_declarator_suffix841 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_pointer855 = new BitSet(new ulong[]{0x100000002UL,0x1000800083C62UL});
		public static readonly BitSet _type_qualifier_in_pointer858 = new BitSet(new ulong[]{0x100000002UL,0x1000800083C62UL});
		public static readonly BitSet _gcc_attribute_in_pointer862 = new BitSet(new ulong[]{0x100000002UL,0x1000800083C62UL});
		public static readonly BitSet _parameter_list_in_parameter_type_list877 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_parameter_type_list880 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _43_in_parameter_type_list882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameter_declaration_in_parameter_list895 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_parameter_list898 = new BitSet(new ulong[]{0x2000UL,0x1F36F8E8CBFF2UL});
		public static readonly BitSet _parameter_declaration_in_parameter_list900 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _declaration_specifiers_in_parameter_declaration913 = new BitSet(new ulong[]{0x800000140002002UL});
		public static readonly BitSet _declarator_in_parameter_declaration916 = new BitSet(new ulong[]{0x800000140002002UL});
		public static readonly BitSet _abstract_declarator_in_parameter_declaration918 = new BitSet(new ulong[]{0x800000140002002UL});
		public static readonly BitSet _IDENTIFIER_in_identifier_list931 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_identifier_list934 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_identifier_list936 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _specifier_qualifier_list_in_type_name949 = new BitSet(new ulong[]{0x800000140000002UL});
		public static readonly BitSet _abstract_declarator_in_type_name951 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_abstract_declarator963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_abstract_declarator968 = new BitSet(new ulong[]{0x800000040000000UL});
		public static readonly BitSet _direct_abstract_declarator_in_abstract_declarator971 = new BitSet(new ulong[]{0x2UL,0x4003UL});
		public static readonly BitSet _gcc_asm_expression_in_abstract_declarator973 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _gcc_attribute_list_in_abstract_declarator976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_direct_abstract_declarator990 = new BitSet(new ulong[]{0x800000140000000UL,0x2UL});
		public static readonly BitSet _gcc_attribute_list_in_direct_abstract_declarator992 = new BitSet(new ulong[]{0x800000140000000UL});
		public static readonly BitSet _abstract_declarator_in_direct_abstract_declarator995 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_direct_abstract_declarator997 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _abstract_declarator_suffix_in_direct_abstract_declarator1001 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _abstract_declarator_suffix_in_direct_abstract_declarator1005 = new BitSet(new ulong[]{0x800000040000002UL});
		public static readonly BitSet _59_in_abstract_declarator_suffix1017 = new BitSet(new ulong[]{0x900000CD50942A50UL,0x81008800083CEEUL});
		public static readonly BitSet _gcc_array_type_modifier_in_abstract_declarator_suffix1019 = new BitSet(new ulong[]{0x900000CD50942A50UL,0x81008800083CEEUL});
		public static readonly BitSet _constant_expression_in_abstract_declarator_suffix1022 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_abstract_declarator_suffix1025 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_abstract_declarator_suffix1030 = new BitSet(new ulong[]{0x100000000UL,0x1000800083C62UL});
		public static readonly BitSet _gcc_array_type_modifier_in_abstract_declarator_suffix1032 = new BitSet(new ulong[]{0x100000000UL,0x1000800083C62UL});
		public static readonly BitSet _32_in_abstract_declarator_suffix1035 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_abstract_declarator_suffix1037 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_abstract_declarator_suffix1042 = new BitSet(new ulong[]{0x80002000UL,0x1F36F8E8CBFF2UL});
		public static readonly BitSet _parameter_type_list_in_abstract_declarator_suffix1044 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_abstract_declarator_suffix1047 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignment_expression_in_initializer1059 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_initializer1064 = new BitSet(new ulong[]{0x880004CD50942A50UL,0x8400800000008CUL});
		public static readonly BitSet _initializer_list_in_initializer1066 = new BitSet(new ulong[]{0x2000000000UL,0x40000000000000UL});
		public static readonly BitSet _37_in_initializer1068 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _118_in_initializer1071 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _designation_in_initializer_list1082 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8400800000008CUL});
		public static readonly BitSet _initializer_in_initializer_list1088 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_initializer_list1094 = new BitSet(new ulong[]{0x880004CD50942A50UL,0x8400800000008CUL});
		public static readonly BitSet _designation_in_initializer_list1096 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8400800000008CUL});
		public static readonly BitSet _initializer_in_initializer_list1099 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _designator_in_designation1112 = new BitSet(new ulong[]{0x810040000000000UL});
		public static readonly BitSet _52_in_designation1115 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_designator1125 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _constant_expression_in_designator1127 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_designator1129 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _42_in_designator1134 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_designator1136 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_designator1145 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _constant_expression_in_designator1147 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _43_in_designator1149 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _constant_expression_in_designator1151 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_designator1153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignment_expression_in_argument_expression_list1169 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_argument_expression_list1172 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _assignment_expression_in_argument_expression_list1174 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression1188 = new BitSet(new ulong[]{0x4400000002UL});
		public static readonly BitSet _34_in_additive_expression1192 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression1194 = new BitSet(new ulong[]{0x4400000002UL});
		public static readonly BitSet _38_in_additive_expression1198 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression1200 = new BitSet(new ulong[]{0x4400000002UL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1214 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _32_in_multiplicative_expression1218 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1220 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _44_in_multiplicative_expression1224 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1226 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _25_in_multiplicative_expression1230 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _cast_expression_in_multiplicative_expression1232 = new BitSet(new ulong[]{0x100102000002UL});
		public static readonly BitSet _30_in_cast_expression1245 = new BitSet(new ulong[]{0x2000UL,0x1F26B0A8C3CE2UL});
		public static readonly BitSet _type_name_in_cast_expression1247 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_cast_expression1249 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _cast_expression_in_cast_expression1251 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expression_in_cast_expression1256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _postfix_expression_in_unary_expression1267 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _35_in_unary_expression1272 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _unary_expression_in_unary_expression1274 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _39_in_unary_expression1279 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _unary_expression_in_unary_expression1281 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_operator_in_unary_expression1286 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _cast_expression_in_unary_expression1288 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_unary_expression1293 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _unary_expression_in_unary_expression1295 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_unary_expression1300 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_unary_expression1302 = new BitSet(new ulong[]{0x2000UL,0x1F26B0A8C3CE2UL});
		public static readonly BitSet _type_name_in_unary_expression1304 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_unary_expression1306 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_unary_expression1313 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _unary_expression_in_unary_expression1315 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_unary_expression1320 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_unary_expression1322 = new BitSet(new ulong[]{0x2000UL,0x1F26B0A8C3CE2UL});
		public static readonly BitSet _type_name_in_unary_expression1324 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_unary_expression1326 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_extension_specifier_in_unary_expression1331 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _cast_expression_in_unary_expression1333 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_expression_in_postfix_expression1346 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _59_in_postfix_expression1354 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _expression_in_postfix_expression1356 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_postfix_expression1358 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _30_in_postfix_expression1366 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_postfix_expression1368 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _30_in_postfix_expression1376 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _argument_expression_list_in_postfix_expression1378 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_postfix_expression1380 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _42_in_postfix_expression1388 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_postfix_expression1390 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _41_in_postfix_expression1398 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_postfix_expression1400 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _35_in_postfix_expression1408 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _39_in_postfix_expression1416 = new BitSet(new ulong[]{0x800068840000002UL});
		public static readonly BitSet _gcc_builtin_va_arg_in_postfix_expression1426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_builtin_offsetof_in_postfix_expression1431 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_primary_expression1478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_in_primary_expression1483 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_primary_expression1488 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _expression_in_primary_expression1490 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_primary_expression1492 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_statement_expression_in_primary_expression1497 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _hex_literal_in_constant1510 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _octal_literal_in_constant1517 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _decimal_literal_in_constant1524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _character_literal_in_constant1531 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_literal_in_constant1538 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _floating_point_literal_in_constant1545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HEX_LITERAL_in_hex_literal1556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OCTAL_LITERAL_in_octal_literal1567 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DECIMAL_LITERAL_in_decimal_literal1578 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHARACTER_LITERAL_in_character_literal1589 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_string_literal1600 = new BitSet(new ulong[]{0x100002UL});
		public static readonly BitSet _FLOATING_POINT_LITERAL_in_floating_point_literal1612 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignment_expression_in_expression1625 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_expression1628 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _assignment_expression_in_expression1630 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _conditional_expression_in_constant_expression1643 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_assignment_expression1654 = new BitSet(new ulong[]{0x4214211224000000UL,0x10000000000000UL});
		public static readonly BitSet _assignment_operator_in_assignment_expression1656 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _assignment_expression_in_assignment_expression1658 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditional_expression_in_assignment_expression1663 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expression_in_lvalue1675 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logical_or_expression_in_conditional_expression1747 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _58_in_conditional_expression1750 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _expression_in_conditional_expression1752 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_conditional_expression1754 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _conditional_expression_in_conditional_expression1756 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logical_or_expression_in_conditional_expression1765 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_conditional_expression1767 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_conditional_expression1769 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _conditional_expression_in_conditional_expression1771 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logical_and_expression_in_logical_or_expression1782 = new BitSet(new ulong[]{0x2UL,0x20000000000000UL});
		public static readonly BitSet _117_in_logical_or_expression1785 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _logical_and_expression_in_logical_or_expression1787 = new BitSet(new ulong[]{0x2UL,0x20000000000000UL});
		public static readonly BitSet _inclusive_or_expression_in_logical_and_expression1800 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _27_in_logical_and_expression1803 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _inclusive_or_expression_in_logical_and_expression1805 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _exclusive_or_expression_in_inclusive_or_expression1818 = new BitSet(new ulong[]{0x2UL,0x8000000000000UL});
		public static readonly BitSet _115_in_inclusive_or_expression1821 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _exclusive_or_expression_in_inclusive_or_expression1823 = new BitSet(new ulong[]{0x2UL,0x8000000000000UL});
		public static readonly BitSet _and_expression_in_exclusive_or_expression1836 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _61_in_exclusive_or_expression1839 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _and_expression_in_exclusive_or_expression1841 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _equality_expression_in_and_expression1854 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _28_in_and_expression1857 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _equality_expression_in_and_expression1859 = new BitSet(new ulong[]{0x10000002UL});
		public static readonly BitSet _relational_expression_in_equality_expression1871 = new BitSet(new ulong[]{0x20000001000002UL});
		public static readonly BitSet _set_in_equality_expression1874 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _relational_expression_in_equality_expression1880 = new BitSet(new ulong[]{0x20000001000002UL});
		public static readonly BitSet _shift_expression_in_relational_expression1893 = new BitSet(new ulong[]{0xC9000000000002UL});
		public static readonly BitSet _set_in_relational_expression1896 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _shift_expression_in_relational_expression1906 = new BitSet(new ulong[]{0xC9000000000002UL});
		public static readonly BitSet _additive_expression_in_shift_expression1919 = new BitSet(new ulong[]{0x102000000000002UL});
		public static readonly BitSet _set_in_shift_expression1922 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _additive_expression_in_shift_expression1928 = new BitSet(new ulong[]{0x102000000000002UL});
		public static readonly BitSet _labeled_statement_in_statement1943 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _compound_statement_in_statement1948 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_statement_in_statement1953 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selection_statement_in_statement1958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _iteration_statement_in_statement1963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _jump_statement_in_statement1968 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_asm_statement_in_statement1973 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_labeled_statement1984 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_labeled_statement1986 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x8604907073408DUL});
		public static readonly BitSet _statement_in_labeled_statement1988 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_labeled_statement1993 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _constant_expression_in_labeled_statement1995 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_labeled_statement1997 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x8604907073408DUL});
		public static readonly BitSet _statement_in_labeled_statement1999 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _85_in_labeled_statement2004 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_labeled_statement2006 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x8604907073408DUL});
		public static readonly BitSet _statement_in_labeled_statement2008 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_compound_statement2030 = new BitSet(new ulong[]{0x800080CD50942A50UL,0xC7FFFFFEFFFFFFUL});
		public static readonly BitSet _block_item_in_compound_statement2032 = new BitSet(new ulong[]{0x800080CD50942A50UL,0xC7FFFFFEFFFFFFUL});
		public static readonly BitSet _118_in_compound_statement2035 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_block_item2046 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_block_item2050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _47_in_expression_statement2061 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_statement2066 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_expression_statement2068 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _94_in_selection_statement2079 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_selection_statement2081 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _expression_in_selection_statement2083 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_selection_statement2085 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x8604907073408DUL});
		public static readonly BitSet _statement_in_selection_statement2087 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _88_in_selection_statement2102 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x8604907073408DUL});
		public static readonly BitSet _statement_in_selection_statement2104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _106_in_selection_statement2111 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_selection_statement2113 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _expression_in_selection_statement2115 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_selection_statement2117 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x8604907073408DUL});
		public static readonly BitSet _statement_in_selection_statement2119 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_iteration_statement2130 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_iteration_statement2132 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _expression_in_iteration_statement2134 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_iteration_statement2136 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x8604907073408DUL});
		public static readonly BitSet _statement_in_iteration_statement2138 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_iteration_statement2143 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x8604907073408DUL});
		public static readonly BitSet _statement_in_iteration_statement2145 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _113_in_iteration_statement2147 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_iteration_statement2149 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _expression_in_iteration_statement2151 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_iteration_statement2153 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_iteration_statement2155 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_iteration_statement2160 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_iteration_statement2162 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _expression_statement_in_iteration_statement2164 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _expression_statement_in_iteration_statement2166 = new BitSet(new ulong[]{0x800000CDD0942A50UL,0x8000800000008CUL});
		public static readonly BitSet _expression_in_iteration_statement2168 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_iteration_statement2171 = new BitSet(new ulong[]{0x800080CD50942A50UL,0x8604907073408DUL});
		public static readonly BitSet _statement_in_iteration_statement2173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_jump_statement2184 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_jump_statement2186 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2188 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _84_in_jump_statement2193 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2195 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _80_in_jump_statement2200 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2202 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_jump_statement2207 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_jump_statement2214 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _expression_in_jump_statement2216 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_jump_statement2218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_gcc_extension_specifier2257 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_in_gcc_declaration_specifier2268 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_extension_specifier_in_gcc_declaration_specifier2273 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_in_gcc_attribute_list2284 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _65_in_gcc_attribute2296 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_gcc_attribute2298 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_gcc_attribute2300 = new BitSet(new ulong[]{0x2000UL,0x1F36F8E8CBF70UL});
		public static readonly BitSet _gcc_attribute_parameter_list_in_gcc_attribute2302 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_gcc_attribute2304 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_gcc_attribute2306 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_parameter_in_gcc_attribute_parameter_list2317 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _37_in_gcc_attribute_parameter_list2320 = new BitSet(new ulong[]{0x2000UL,0x1F36F8E8CBF70UL});
		public static readonly BitSet _gcc_attribute_parameter_in_gcc_attribute_parameter_list2322 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _gcc_attribute_name_in_gcc_attribute_parameter2335 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_name_in_gcc_attribute_parameter2340 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_gcc_attribute_parameter2342 = new BitSet(new ulong[]{0x800000CDD0942A50UL,0x8000800000008CUL});
		public static readonly BitSet _assignment_expression_in_gcc_attribute_parameter2345 = new BitSet(new ulong[]{0x2080000000UL});
		public static readonly BitSet _37_in_gcc_attribute_parameter2348 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _assignment_expression_in_gcc_attribute_parameter2350 = new BitSet(new ulong[]{0x2080000000UL});
		public static readonly BitSet _31_in_gcc_attribute_parameter2356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_gcc_attribute_name2367 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _storage_class_specifier_in_gcc_attribute_name2372 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_specifier_in_gcc_attribute_name2377 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_qualifier_in_gcc_attribute_name2382 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_function_specifier_in_gcc_attribute_name2387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_asm_expression_in_gcc_asm_statement2399 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _47_in_gcc_asm_statement2401 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_gcc_asm_expression2412 = new BitSet(new ulong[]{0x40000000UL,0x1000800083C60UL});
		public static readonly BitSet _type_qualifier_in_gcc_asm_expression2432 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_gcc_asm_expression2445 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _expression_in_gcc_asm_expression2455 = new BitSet(new ulong[]{0x800040CDD0942A50UL,0x8000800000008CUL});
		public static readonly BitSet _expression_in_gcc_asm_expression2457 = new BitSet(new ulong[]{0x400080000000UL});
		public static readonly BitSet _46_in_gcc_asm_expression2477 = new BitSet(new ulong[]{0x800400080100000UL});
		public static readonly BitSet _gcc_asm_operand_in_gcc_asm_expression2481 = new BitSet(new ulong[]{0x402080000000UL});
		public static readonly BitSet _37_in_gcc_asm_expression2485 = new BitSet(new ulong[]{0x800000000100000UL});
		public static readonly BitSet _gcc_asm_operand_in_gcc_asm_expression2487 = new BitSet(new ulong[]{0x402080000000UL});
		public static readonly BitSet _46_in_gcc_asm_expression2512 = new BitSet(new ulong[]{0x800400080100000UL});
		public static readonly BitSet _gcc_asm_operand_in_gcc_asm_expression2516 = new BitSet(new ulong[]{0x402080000000UL});
		public static readonly BitSet _37_in_gcc_asm_expression2520 = new BitSet(new ulong[]{0x800000000100000UL});
		public static readonly BitSet _gcc_asm_operand_in_gcc_asm_expression2522 = new BitSet(new ulong[]{0x402080000000UL});
		public static readonly BitSet _46_in_gcc_asm_expression2550 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _gcc_asm_clobber_in_gcc_asm_expression2554 = new BitSet(new ulong[]{0x2080000000UL});
		public static readonly BitSet _37_in_gcc_asm_expression2558 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _gcc_asm_clobber_in_gcc_asm_expression2560 = new BitSet(new ulong[]{0x2080000000UL});
		public static readonly BitSet _31_in_gcc_asm_expression2606 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_gcc_asm_operand2626 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_gcc_asm_operand2628 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_gcc_asm_operand2630 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _string_literal_in_gcc_asm_operand2635 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_gcc_asm_operand2637 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _expression_in_gcc_asm_operand2639 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_gcc_asm_operand2641 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _string_literal_in_gcc_asm_clobber2652 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_gcc_statement_expression2663 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _compound_statement_in_gcc_statement_expression2665 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_gcc_statement_expression2667 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_array_type_modifier_in_gcc_array_type_modifier_list2678 = new BitSet(new ulong[]{0x2UL,0x1000800083C62UL});
		public static readonly BitSet _type_qualifier_in_gcc_array_type_modifier2690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_in_gcc_array_type_modifier2695 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _67_in_gcc_builtin_va_arg2706 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_gcc_builtin_va_arg2708 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _assignment_expression_in_gcc_builtin_va_arg2710 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _37_in_gcc_builtin_va_arg2712 = new BitSet(new ulong[]{0x2000UL,0x1F26B0A8C3CE2UL});
		public static readonly BitSet _type_name_in_gcc_builtin_va_arg2714 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_gcc_builtin_va_arg2716 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _108_in_gcc_typeof2727 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_gcc_typeof2729 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x81F2EB0A8C3CEEUL});
		public static readonly BitSet _type_name_in_gcc_typeof2733 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _assignment_expression_in_gcc_typeof2737 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_gcc_typeof2741 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _66_in_gcc_builtin_offsetof2752 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_gcc_builtin_offsetof2754 = new BitSet(new ulong[]{0x2000UL,0x1F26B0A8C3CE2UL});
		public static readonly BitSet _type_name_in_gcc_builtin_offsetof2756 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _37_in_gcc_builtin_offsetof2758 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _offsetof_member_designator_in_gcc_builtin_offsetof2760 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_gcc_builtin_offsetof2762 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_offsetof_member_designator2775 = new BitSet(new ulong[]{0x800040000000002UL});
		public static readonly BitSet _42_in_offsetof_member_designator2778 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _IDENTIFIER_in_offsetof_member_designator2780 = new BitSet(new ulong[]{0x800040000000002UL});
		public static readonly BitSet _59_in_offsetof_member_designator2784 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _expression_in_offsetof_member_designator2786 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_offsetof_member_designator2788 = new BitSet(new ulong[]{0x800040000000002UL});
		public static readonly BitSet _declaration_specifiers_in_synpred2_C94 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred4_C94 = new BitSet(new ulong[]{0x140002000UL});
		public static readonly BitSet _declarator_in_synpred4_C97 = new BitSet(new ulong[]{0x2000UL,0x5FB6F8E8CBFF2UL});
		public static readonly BitSet _declaration_in_synpred4_C99 = new BitSet(new ulong[]{0x2000UL,0x5FB6F8E8CBFF2UL});
		public static readonly BitSet _114_in_synpred4_C102 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred5_C134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_specifiers_in_synpred9_C186 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_specifier_in_synpred13_C234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_or_union_in_synpred36_C441 = new BitSet(new ulong[]{0x2000UL,0x4000000000002UL});
		public static readonly BitSet _gcc_attribute_list_in_synpred36_C443 = new BitSet(new ulong[]{0x2000UL,0x4000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_synpred36_C446 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_synpred36_C449 = new BitSet(new ulong[]{0x800000002000UL,0x1F26B0A8C3CE2UL});
		public static readonly BitSet _struct_declaration_list_in_synpred36_C451 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _118_in_synpred36_C453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_specifier_in_synpred42_C529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declarator_in_synpred45_C564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _89_in_synpred50_C595 = new BitSet(new ulong[]{0x2000UL,0x4000000000002UL});
		public static readonly BitSet _gcc_attribute_list_in_synpred50_C597 = new BitSet(new ulong[]{0x2000UL,0x4000000000000UL});
		public static readonly BitSet _IDENTIFIER_in_synpred50_C600 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_synpred50_C603 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _enumerator_list_in_synpred50_C605 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _118_in_synpred50_C607 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_list_in_synpred64_C736 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_synpred65_C728 = new BitSet(new ulong[]{0x40002000UL});
		public static readonly BitSet _direct_declarator_in_synpred65_C731 = new BitSet(new ulong[]{0x2UL,0x4003UL});
		public static readonly BitSet _gcc_asm_expression_in_synpred65_C733 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _gcc_attribute_list_in_synpred65_C736 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declarator_suffix_in_synpred68_C783 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred71_C817 = new BitSet(new ulong[]{0x2000UL,0x1F36F8E8CBFF2UL});
		public static readonly BitSet _parameter_type_list_in_synpred71_C819 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred71_C821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred72_C828 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _identifier_list_in_synpred72_C830 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred72_C832 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_qualifier_in_synpred73_C858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_in_synpred74_C862 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_synpred75_C855 = new BitSet(new ulong[]{0x2UL,0x1000800083C62UL});
		public static readonly BitSet _type_qualifier_in_synpred75_C858 = new BitSet(new ulong[]{0x2UL,0x1000800083C62UL});
		public static readonly BitSet _gcc_attribute_in_synpred75_C862 = new BitSet(new ulong[]{0x2UL,0x1000800083C62UL});
		public static readonly BitSet _declarator_in_synpred78_C916 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _abstract_declarator_in_synpred79_C918 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_in_synpred82_C963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred87_C990 = new BitSet(new ulong[]{0x800000140000000UL,0x2UL});
		public static readonly BitSet _gcc_attribute_list_in_synpred87_C992 = new BitSet(new ulong[]{0x800000140000000UL});
		public static readonly BitSet _abstract_declarator_in_synpred87_C995 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred87_C997 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _abstract_declarator_suffix_in_synpred88_C1005 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_synpred91_C1017 = new BitSet(new ulong[]{0x900000CD50942A50UL,0x81008800083CEEUL});
		public static readonly BitSet _gcc_array_type_modifier_in_synpred91_C1019 = new BitSet(new ulong[]{0x900000CD50942A50UL,0x81008800083CEEUL});
		public static readonly BitSet _constant_expression_in_synpred91_C1022 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_synpred91_C1025 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_synpred93_C1030 = new BitSet(new ulong[]{0x100000000UL,0x1000800083C62UL});
		public static readonly BitSet _gcc_array_type_modifier_in_synpred93_C1032 = new BitSet(new ulong[]{0x100000000UL,0x1000800083C62UL});
		public static readonly BitSet _32_in_synpred93_C1035 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_synpred93_C1037 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_synpred101_C1125 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _constant_expression_in_synpred101_C1127 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_synpred101_C1129 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _34_in_synpred104_C1192 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _multiplicative_expression_in_synpred104_C1194 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _38_in_synpred105_C1198 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _multiplicative_expression_in_synpred105_C1200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _32_in_synpred106_C1218 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _cast_expression_in_synpred106_C1220 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred109_C1245 = new BitSet(new ulong[]{0x2000UL,0x1F26B0A8C3CE2UL});
		public static readonly BitSet _type_name_in_synpred109_C1247 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred109_C1249 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _cast_expression_in_synpred109_C1251 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_synpred114_C1293 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _unary_expression_in_synpred114_C1295 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_synpred115_C1300 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_synpred115_C1302 = new BitSet(new ulong[]{0x2000UL,0x1F26B0A8C3CE2UL});
		public static readonly BitSet _type_name_in_synpred115_C1304 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred115_C1306 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_synpred116_C1313 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _unary_expression_in_synpred116_C1315 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_synpred117_C1320 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _30_in_synpred117_C1322 = new BitSet(new ulong[]{0x2000UL,0x1F26B0A8C3CE2UL});
		public static readonly BitSet _type_name_in_synpred117_C1324 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred117_C1326 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_synpred120_C1376 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _argument_expression_list_in_synpred120_C1378 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _31_in_synpred120_C1380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _35_in_synpred123_C1408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _39_in_synpred124_C1416 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_LITERAL_in_synpred140_C1600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_synpred142_C1654 = new BitSet(new ulong[]{0x4214211224000000UL,0x10000000000000UL});
		public static readonly BitSet _assignment_operator_in_synpred142_C1656 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _assignment_expression_in_synpred142_C1658 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logical_or_expression_in_synpred154_C1747 = new BitSet(new ulong[]{0x400000000000002UL});
		public static readonly BitSet _58_in_synpred154_C1750 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _expression_in_synpred154_C1752 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _46_in_synpred154_C1754 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _conditional_expression_in_synpred154_C1756 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _28_in_synpred159_C1857 = new BitSet(new ulong[]{0x800000CD50942A50UL,0x8000800000008CUL});
		public static readonly BitSet _equality_expression_in_synpred159_C1859 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_in_synpred177_C2046 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_in_synpred191_C2284 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _gcc_attribute_name_in_synpred193_C2335 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_synpred196_C2367 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_specifier_in_synpred198_C2377 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_synpred214_C2733 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
