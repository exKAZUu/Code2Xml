using Code2Xml.Core.Antlr;
using System;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 cs.g 2012-01-29 22:40:40

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class csParser : Antlr.Runtime.Parser, IAntlrParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "COMMENT", "Character_literal", "DECIMAL_DIGIT", "DEFINE", "DEFINE_TOKEN", "DOC_LINE_COMMENT", "DOT", "Decimal_digits", "Decimal_integer_literal", "ELIF", "ELSE_TOKEN", "ENDIF", "ENDIF_TOKEN", "ENUM", "EscapeSequence", "Exponent_part", "FALSE", "GT", "GooBall", "GooBallIdentifier", "HEX_DIGIT", "HEX_DIGITS", "Hex_number", "IDENTIFIER", "IF", "IF_TOKEN", "INTEGER_TYPE_SUFFIX", "IdentifierPart", "IdentifierStart", "LINE_COMMENT", "MINUS", "NULL", "NUMBER", "PP_AND_EXPRESSION", "PP_CONDITIONAL", "PP_EQUALITY_EXPRESSION", "PP_EXPRESSION", "PP_OR_EXPRESSION", "PP_PRIMARY_EXPRESSION", "PP_UNARY_EXPRESSION", "PREPROCESSOR_DIRECTIVE", "PTR", "Pragma", "RPAREN", "Real_literal", "Real_type_suffix", "SEMI", "STRINGLITERAL", "Sign", "TRUE", "TS", "UNDEF", "UNDEF_TOKEN", "USING", "Verbatim_string_literal", "Verbatim_string_literal_character", "WS", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'--'", "'-='", "'/'", "'/='", "':'", "'::'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>='", "'?'", "'??'", "'['", "']'", "'^'", "'^='", "'__arglist'", "'abstract'", "'add'", "'alias'", "'as'", "'ascending'", "'assembly'", "'base'", "'bool'", "'break'", "'by'", "'byte'", "'case'", "'catch'", "'char'", "'checked'", "'class'", "'const'", "'continue'", "'decimal'", "'default'", "'delegate'", "'descending'", "'do'", "'double'", "'dynamic'", "'else'", "'equals'", "'event'", "'explicit'", "'extern'", "'field'", "'finally'", "'fixed'", "'float'", "'for'", "'foreach'", "'from'", "'get'", "'goto'", "'group'", "'implicit'", "'in'", "'int'", "'interface'", "'internal'", "'into'", "'is'", "'join'", "'let'", "'lock'", "'long'", "'method'", "'module'", "'namespace'", "'new'", "'object'", "'on'", "'operator'", "'orderby'", "'out'", "'override'", "'param'", "'params'", "'partial'", "'pragma'", "'private'", "'property'", "'protected'", "'public'", "'readonly'", "'ref'", "'remove'", "'return'", "'sbyte'", "'sealed'", "'select'", "'set'", "'short'", "'sizeof'", "'stackalloc'", "'static'", "'string'", "'struct'", "'switch'", "'this'", "'throw'", "'try'", "'type'", "'typeof'", "'uint'", "'ulong'", "'unchecked'", "'unsafe'", "'ushort'", "'var'", "'virtual'", "'void'", "'volatile'", "'where'", "'while'", "'yield'", "'{'", "'|'", "'|='", "'||'", "'}'", "'~'"
	};
	public const int EOF=-1;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int T__178=178;
	public const int T__179=179;
	public const int T__180=180;
	public const int T__181=181;
	public const int T__182=182;
	public const int T__183=183;
	public const int T__184=184;
	public const int T__185=185;
	public const int T__186=186;
	public const int T__187=187;
	public const int T__188=188;
	public const int T__189=189;
	public const int T__190=190;
	public const int T__191=191;
	public const int T__192=192;
	public const int T__193=193;
	public const int T__194=194;
	public const int T__195=195;
	public const int T__196=196;
	public const int T__197=197;
	public const int T__198=198;
	public const int T__199=199;
	public const int T__200=200;
	public const int T__201=201;
	public const int T__202=202;
	public const int COMMENT=4;
	public const int Character_literal=5;
	public const int DECIMAL_DIGIT=6;
	public const int DEFINE=7;
	public const int DEFINE_TOKEN=8;
	public const int DOC_LINE_COMMENT=9;
	public const int DOT=10;
	public const int Decimal_digits=11;
	public const int Decimal_integer_literal=12;
	public const int ELIF=13;
	public const int ELSE_TOKEN=14;
	public const int ENDIF=15;
	public const int ENDIF_TOKEN=16;
	public const int ENUM=17;
	public const int EscapeSequence=18;
	public const int Exponent_part=19;
	public const int FALSE=20;
	public const int GT=21;
	public const int GooBall=22;
	public const int GooBallIdentifier=23;
	public const int HEX_DIGIT=24;
	public const int HEX_DIGITS=25;
	public const int Hex_number=26;
	public const int IDENTIFIER=27;
	public const int IF=28;
	public const int IF_TOKEN=29;
	public const int INTEGER_TYPE_SUFFIX=30;
	public const int IdentifierPart=31;
	public const int IdentifierStart=32;
	public const int LINE_COMMENT=33;
	public const int MINUS=34;
	public const int NULL=35;
	public const int NUMBER=36;
	public const int PP_AND_EXPRESSION=37;
	public const int PP_CONDITIONAL=38;
	public const int PP_EQUALITY_EXPRESSION=39;
	public const int PP_EXPRESSION=40;
	public const int PP_OR_EXPRESSION=41;
	public const int PP_PRIMARY_EXPRESSION=42;
	public const int PP_UNARY_EXPRESSION=43;
	public const int PREPROCESSOR_DIRECTIVE=44;
	public const int PTR=45;
	public const int Pragma=46;
	public const int RPAREN=47;
	public const int Real_literal=48;
	public const int Real_type_suffix=49;
	public const int SEMI=50;
	public const int STRINGLITERAL=51;
	public const int Sign=52;
	public const int TRUE=53;
	public const int TS=54;
	public const int UNDEF=55;
	public const int UNDEF_TOKEN=56;
	public const int USING=57;
	public const int Verbatim_string_literal=58;
	public const int Verbatim_string_literal_character=59;
	public const int WS=60;

	public csParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public csParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[356+1];


		XmlTreeAdaptor treeAdaptor = default(XmlTreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new XmlTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref XmlTreeAdaptor adaptor);

	private XmlTreeAdaptor adaptor;

	public XmlTreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return csParser.tokenNames; } }
	public override string GrammarFileName { get { return "cs.g"; } }


	    protected bool is_class_modifier() 
	    {
	        return false;
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_compilation_unit();
	partial void LeaveRule_compilation_unit();

	// $ANTLR start "compilation_unit"
	// cs.g:32:1: compilation_unit : namespace_body[true] ;
	[GrammarRule("compilation_unit")]
	public XAstParserRuleReturnScope compilation_unit()
	{
		EnterRule_compilation_unit();
		EnterRule("compilation_unit", 1);
		var retval = new XAstParserRuleReturnScope("compilation_unit");
		
		retval.Start = (IToken)input.LT(1);
		int compilation_unit_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope namespace_body1 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "compilation_unit");
		DebugLocation(32, 24);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// cs.g:32:17: ( namespace_body[true] )
			DebugEnterAlt(1);
			// cs.g:33:5: namespace_body[true]
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(33, 5);
			PushFollow(Follow._namespace_body_in_compilation_unit76);
			namespace_body1=namespace_body(true);
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_body1.Tree, namespace_body1, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("compilation_unit", 1);
			LeaveRule("compilation_unit", 1);
			LeaveRule_compilation_unit();
			if (state.backtracking > 0) { Memoize(input, 1, compilation_unit_StartIndex); }

		}
		DebugLocation(33, 24);
		} finally { DebugExitRule(GrammarFileName, "compilation_unit"); }
		return retval;

	}
	// $ANTLR end "compilation_unit"

	partial void EnterRule_namespace_declaration();
	partial void LeaveRule_namespace_declaration();

	// $ANTLR start "namespace_declaration"
	// cs.g:35:1: namespace_declaration : 'namespace' qualified_identifier namespace_block ( ';' )? ;
	[GrammarRule("namespace_declaration")]
	public XAstParserRuleReturnScope namespace_declaration()
	{
		EnterRule_namespace_declaration();
		EnterRule("namespace_declaration", 2);
		var retval = new XAstParserRuleReturnScope("namespace_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int namespace_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal2 = default(IToken);
		IToken char_literal5 = default(IToken);
		XAstParserRuleReturnScope qualified_identifier3 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope namespace_block4 = default(XAstParserRuleReturnScope);

		object string_literal2_tree = default(object);
		object char_literal5_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "namespace_declaration");
		DebugLocation(35, 64);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// cs.g:35:22: ( 'namespace' qualified_identifier namespace_block ( ';' )? )
			DebugEnterAlt(1);
			// cs.g:36:5: 'namespace' qualified_identifier namespace_block ( ';' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(36, 5);
			string_literal2=(IToken)Match(input,149,Follow._149_in_namespace_declaration88); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal2_tree = (object)adaptor.Create(string_literal2, retval);
			adaptor.AddChild(root_0, string_literal2_tree);
			}
			DebugLocation(36, 19);
			PushFollow(Follow._qualified_identifier_in_namespace_declaration92);
			qualified_identifier3=qualified_identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qualified_identifier3.Tree, qualified_identifier3, retval);
			DebugLocation(36, 42);
			PushFollow(Follow._namespace_block_in_namespace_declaration96);
			namespace_block4=namespace_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_block4.Tree, namespace_block4, retval);
			DebugLocation(36, 60);
			// cs.g:36:60: ( ';' )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_0 = input.LA(1);

			if ((LA1_0==SEMI))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:36:60: ';'
				{
				DebugLocation(36, 60);
				char_literal5=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_namespace_declaration100), "SEMI"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal5_tree = (object)adaptor.Create(char_literal5, retval);
				adaptor.AddChild(root_0, char_literal5_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_declaration", 2);
			LeaveRule("namespace_declaration", 2);
			LeaveRule_namespace_declaration();
			if (state.backtracking > 0) { Memoize(input, 2, namespace_declaration_StartIndex); }

		}
		DebugLocation(36, 64);
		} finally { DebugExitRule(GrammarFileName, "namespace_declaration"); }
		return retval;

	}
	// $ANTLR end "namespace_declaration"

	partial void EnterRule_namespace_block();
	partial void LeaveRule_namespace_block();

	// $ANTLR start "namespace_block"
	// cs.g:37:1: namespace_block : '{' namespace_body[false] '}' ;
	[GrammarRule("namespace_block")]
	public XAstParserRuleReturnScope namespace_block()
	{
		EnterRule_namespace_block();
		EnterRule("namespace_block", 3);
		var retval = new XAstParserRuleReturnScope("namespace_block");
		
		retval.Start = (IToken)input.LT(1);
		int namespace_block_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal6 = default(IToken);
		IToken char_literal8 = default(IToken);
		XAstParserRuleReturnScope namespace_body7 = default(XAstParserRuleReturnScope);

		object char_literal6_tree = default(object);
		object char_literal8_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "namespace_block");
		DebugLocation(37, 38);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// cs.g:37:16: ( '{' namespace_body[false] '}' )
			DebugEnterAlt(1);
			// cs.g:38:5: '{' namespace_body[false] '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(38, 5);
			char_literal6=(IToken)Match(input,197,Follow._197_in_namespace_block112); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal6_tree = (object)adaptor.Create(char_literal6, retval);
			adaptor.AddChild(root_0, char_literal6_tree);
			}
			DebugLocation(38, 11);
			PushFollow(Follow._namespace_body_in_namespace_block116);
			namespace_body7=namespace_body(false);
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_body7.Tree, namespace_body7, retval);
			DebugLocation(38, 35);
			char_literal8=(IToken)Match(input,201,Follow._201_in_namespace_block121); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal8_tree = (object)adaptor.Create(char_literal8, retval);
			adaptor.AddChild(root_0, char_literal8_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_block", 3);
			LeaveRule("namespace_block", 3);
			LeaveRule_namespace_block();
			if (state.backtracking > 0) { Memoize(input, 3, namespace_block_StartIndex); }

		}
		DebugLocation(38, 38);
		} finally { DebugExitRule(GrammarFileName, "namespace_block"); }
		return retval;

	}
	// $ANTLR end "namespace_block"

	partial void EnterRule_namespace_body();
	partial void LeaveRule_namespace_body();

	// $ANTLR start "namespace_body"
	// cs.g:39:1: namespace_body[bool bGlobal] : ( extern_alias_directives )? ( using_directives )? ( global_attributes )? ( namespace_member_declarations )? ;
	[GrammarRule("namespace_body")]
	public XAstParserRuleReturnScope namespace_body(bool bGlobal)
	{
		EnterRule_namespace_body();
		EnterRule("namespace_body", 4);
		var retval = new XAstParserRuleReturnScope("namespace_body");
		
		retval.Start = (IToken)input.LT(1);
		int namespace_body_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope extern_alias_directives9 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope using_directives10 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope global_attributes11 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope namespace_member_declarations12 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "namespace_body");
		DebugLocation(39, 103);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// cs.g:39:29: ( ( extern_alias_directives )? ( using_directives )? ( global_attributes )? ( namespace_member_declarations )? )
			DebugEnterAlt(1);
			// cs.g:40:5: ( extern_alias_directives )? ( using_directives )? ( global_attributes )? ( namespace_member_declarations )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(40, 5);
			// cs.g:40:5: ( extern_alias_directives )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0==125))
			{
				int LA2_1 = input.LA(2);

				if ((LA2_1==98))
				{
					alt2 = 1;
				}
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:40:5: extern_alias_directives
				{
				DebugLocation(40, 5);
				PushFollow(Follow._extern_alias_directives_in_namespace_body133);
				extern_alias_directives9=extern_alias_directives();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, extern_alias_directives9.Tree, extern_alias_directives9, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(40, 32);
			// cs.g:40:32: ( using_directives )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0==USING))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:40:32: using_directives
				{
				DebugLocation(40, 32);
				PushFollow(Follow._using_directives_in_namespace_body138);
				using_directives10=using_directives();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, using_directives10.Tree, using_directives10, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(40, 52);
			// cs.g:40:52: ( global_attributes )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0==91))
			{
				int LA4_1 = input.LA(2);

				if ((LA4_1==101||LA4_1==148))
				{
					int LA4_3 = input.LA(3);

					if ((LA4_3==79))
					{
						alt4 = 1;
					}
				}
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:40:52: global_attributes
				{
				DebugLocation(40, 52);
				PushFollow(Follow._global_attributes_in_namespace_body143);
				global_attributes11=global_attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_attributes11.Tree, global_attributes11, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(40, 73);
			// cs.g:40:73: ( namespace_member_declarations )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0==ENUM||LA5_0==91||LA5_0==96||LA5_0==111||LA5_0==116||LA5_0==125||(LA5_0>=139 && LA5_0<=140)||(LA5_0>=149 && LA5_0<=150)||LA5_0==156||LA5_0==159||LA5_0==161||(LA5_0>=163 && LA5_0<=165)||LA5_0==170||LA5_0==176||LA5_0==178||LA5_0==188||LA5_0==191||LA5_0==193))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:40:73: namespace_member_declarations
				{
				DebugLocation(40, 73);
				PushFollow(Follow._namespace_member_declarations_in_namespace_body148);
				namespace_member_declarations12=namespace_member_declarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_member_declarations12.Tree, namespace_member_declarations12, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_body", 4);
			LeaveRule("namespace_body", 4);
			LeaveRule_namespace_body();
			if (state.backtracking > 0) { Memoize(input, 4, namespace_body_StartIndex); }

		}
		DebugLocation(40, 103);
		} finally { DebugExitRule(GrammarFileName, "namespace_body"); }
		return retval;

	}
	// $ANTLR end "namespace_body"

	partial void EnterRule_extern_alias_directives();
	partial void LeaveRule_extern_alias_directives();

	// $ANTLR start "extern_alias_directives"
	// cs.g:41:1: extern_alias_directives : ( extern_alias_directive )+ ;
	[GrammarRule("extern_alias_directives")]
	public XAstParserRuleReturnScope extern_alias_directives()
	{
		EnterRule_extern_alias_directives();
		EnterRule("extern_alias_directives", 5);
		var retval = new XAstParserRuleReturnScope("extern_alias_directives");
		
		retval.Start = (IToken)input.LT(1);
		int extern_alias_directives_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope extern_alias_directive13 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "extern_alias_directives");
		DebugLocation(41, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// cs.g:41:24: ( ( extern_alias_directive )+ )
			DebugEnterAlt(1);
			// cs.g:42:5: ( extern_alias_directive )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(42, 5);
			// cs.g:42:5: ( extern_alias_directive )+
			int cnt6=0;
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==125))
				{
					int LA6_2 = input.LA(2);

					if ((LA6_2==98))
					{
						alt6 = 1;
					}


				}


				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:42:5: extern_alias_directive
					{
					DebugLocation(42, 5);
					PushFollow(Follow._extern_alias_directive_in_extern_alias_directives160);
					extern_alias_directive13=extern_alias_directive();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, extern_alias_directive13.Tree, extern_alias_directive13, retval);

					}
					break;

				default:
					if (cnt6 >= 1)
						goto loop6;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee6 = new EarlyExitException( 6, input );
					DebugRecognitionException(eee6);
					throw eee6;
				}
				cnt6++;
			}
			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("extern_alias_directives", 5);
			LeaveRule("extern_alias_directives", 5);
			LeaveRule_extern_alias_directives();
			if (state.backtracking > 0) { Memoize(input, 5, extern_alias_directives_StartIndex); }

		}
		DebugLocation(42, 28);
		} finally { DebugExitRule(GrammarFileName, "extern_alias_directives"); }
		return retval;

	}
	// $ANTLR end "extern_alias_directives"

	partial void EnterRule_extern_alias_directive();
	partial void LeaveRule_extern_alias_directive();

	// $ANTLR start "extern_alias_directive"
	// cs.g:43:1: extern_alias_directive : 'extern' 'alias' identifier ';' ;
	[GrammarRule("extern_alias_directive")]
	public XAstParserRuleReturnScope extern_alias_directive()
	{
		EnterRule_extern_alias_directive();
		EnterRule("extern_alias_directive", 6);
		var retval = new XAstParserRuleReturnScope("extern_alias_directive");
		
		retval.Start = (IToken)input.LT(1);
		int extern_alias_directive_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal14 = default(IToken);
		IToken string_literal15 = default(IToken);
		IToken char_literal17 = default(IToken);
		XAstParserRuleReturnScope identifier16 = default(XAstParserRuleReturnScope);

		object string_literal14_tree = default(object);
		object string_literal15_tree = default(object);
		object char_literal17_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "extern_alias_directive");
		DebugLocation(43, 41);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// cs.g:43:23: ( 'extern' 'alias' identifier ';' )
			DebugEnterAlt(1);
			// cs.g:44:5: 'extern' 'alias' identifier ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(44, 5);
			string_literal14=(IToken)Match(input,125,Follow._125_in_extern_alias_directive172); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal14_tree = (object)adaptor.Create(string_literal14, retval);
			adaptor.AddChild(root_0, string_literal14_tree);
			}
			DebugLocation(44, 16);
			string_literal15=(IToken)Match(input,98,Follow._98_in_extern_alias_directive176); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal15_tree = (object)adaptor.Create(string_literal15, retval);
			adaptor.AddChild(root_0, string_literal15_tree);
			}
			DebugLocation(44, 26);
			PushFollow(Follow._identifier_in_extern_alias_directive180);
			identifier16=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier16.Tree, identifier16, retval);
			DebugLocation(44, 38);
			char_literal17=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_extern_alias_directive183), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal17_tree = (object)adaptor.Create(char_literal17, retval);
			adaptor.AddChild(root_0, char_literal17_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("extern_alias_directive", 6);
			LeaveRule("extern_alias_directive", 6);
			LeaveRule_extern_alias_directive();
			if (state.backtracking > 0) { Memoize(input, 6, extern_alias_directive_StartIndex); }

		}
		DebugLocation(44, 41);
		} finally { DebugExitRule(GrammarFileName, "extern_alias_directive"); }
		return retval;

	}
	// $ANTLR end "extern_alias_directive"

	partial void EnterRule_using_directives();
	partial void LeaveRule_using_directives();

	// $ANTLR start "using_directives"
	// cs.g:45:1: using_directives : ( using_directive )+ ;
	[GrammarRule("using_directives")]
	public XAstParserRuleReturnScope using_directives()
	{
		EnterRule_using_directives();
		EnterRule("using_directives", 7);
		var retval = new XAstParserRuleReturnScope("using_directives");
		
		retval.Start = (IToken)input.LT(1);
		int using_directives_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope using_directive18 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "using_directives");
		DebugLocation(45, 21);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// cs.g:45:17: ( ( using_directive )+ )
			DebugEnterAlt(1);
			// cs.g:46:5: ( using_directive )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(46, 5);
			// cs.g:46:5: ( using_directive )+
			int cnt7=0;
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==USING))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:46:5: using_directive
					{
					DebugLocation(46, 5);
					PushFollow(Follow._using_directive_in_using_directives194);
					using_directive18=using_directive();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, using_directive18.Tree, using_directive18, retval);

					}
					break;

				default:
					if (cnt7 >= 1)
						goto loop7;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee7 = new EarlyExitException( 7, input );
					DebugRecognitionException(eee7);
					throw eee7;
				}
				cnt7++;
			}
			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("using_directives", 7);
			LeaveRule("using_directives", 7);
			LeaveRule_using_directives();
			if (state.backtracking > 0) { Memoize(input, 7, using_directives_StartIndex); }

		}
		DebugLocation(46, 21);
		} finally { DebugExitRule(GrammarFileName, "using_directives"); }
		return retval;

	}
	// $ANTLR end "using_directives"

	partial void EnterRule_using_directive();
	partial void LeaveRule_using_directive();

	// $ANTLR start "using_directive"
	// cs.g:47:1: using_directive : ( using_alias_directive | using_namespace_directive ) ;
	[GrammarRule("using_directive")]
	public XAstParserRuleReturnScope using_directive()
	{
		EnterRule_using_directive();
		EnterRule("using_directive", 8);
		var retval = new XAstParserRuleReturnScope("using_directive");
		
		retval.Start = (IToken)input.LT(1);
		int using_directive_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope using_alias_directive19 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope using_namespace_directive20 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "using_directive");
		DebugLocation(47, 33);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// cs.g:47:16: ( ( using_alias_directive | using_namespace_directive ) )
			DebugEnterAlt(1);
			// cs.g:48:5: ( using_alias_directive | using_namespace_directive )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(48, 5);
			// cs.g:48:5: ( using_alias_directive | using_namespace_directive )
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0==USING))
			{
				int LA8_1 = input.LA(2);

				if ((LA8_1==IDENTIFIER||LA8_1==95||(LA8_1>=97 && LA8_1<=98)||(LA8_1>=100 && LA8_1<=101)||LA8_1==105||LA8_1==117||LA8_1==120||LA8_1==122||LA8_1==126||LA8_1==132||LA8_1==135||LA8_1==141||(LA8_1>=143 && LA8_1<=144)||(LA8_1>=147 && LA8_1<=148)||LA8_1==152||LA8_1==154||LA8_1==157||LA8_1==160||LA8_1==162||LA8_1==167||(LA8_1>=171 && LA8_1<=172)||LA8_1==183||LA8_1==190||LA8_1==194||LA8_1==196))
				{
					int LA8_2 = input.LA(3);

					if ((LA8_2==85))
					{
						alt8 = 1;
					}
					else if ((LA8_2==DOT||LA8_2==SEMI||(LA8_2>=80 && LA8_2<=81)))
					{
						alt8 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 8, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:48:6: using_alias_directive
				{
				DebugLocation(48, 6);
				PushFollow(Follow._using_alias_directive_in_using_directive207);
				using_alias_directive19=using_alias_directive();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, using_alias_directive19.Tree, using_alias_directive19, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:49:7: using_namespace_directive
				{
				DebugLocation(49, 7);
				PushFollow(Follow._using_namespace_directive_in_using_directive215);
				using_namespace_directive20=using_namespace_directive();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, using_namespace_directive20.Tree, using_namespace_directive20, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(8); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("using_directive", 8);
			LeaveRule("using_directive", 8);
			LeaveRule_using_directive();
			if (state.backtracking > 0) { Memoize(input, 8, using_directive_StartIndex); }

		}
		DebugLocation(49, 33);
		} finally { DebugExitRule(GrammarFileName, "using_directive"); }
		return retval;

	}
	// $ANTLR end "using_directive"

	partial void EnterRule_using_alias_directive();
	partial void LeaveRule_using_alias_directive();

	// $ANTLR start "using_alias_directive"
	// cs.g:50:1: using_alias_directive : 'using' identifier '=' namespace_or_type_name ';' ;
	[GrammarRule("using_alias_directive")]
	public XAstParserRuleReturnScope using_alias_directive()
	{
		EnterRule_using_alias_directive();
		EnterRule("using_alias_directive", 9);
		var retval = new XAstParserRuleReturnScope("using_alias_directive");
		
		retval.Start = (IToken)input.LT(1);
		int using_alias_directive_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal21 = default(IToken);
		IToken char_literal23 = default(IToken);
		IToken char_literal25 = default(IToken);
		XAstParserRuleReturnScope identifier22 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope namespace_or_type_name24 = default(XAstParserRuleReturnScope);

		object string_literal21_tree = default(object);
		object char_literal23_tree = default(object);
		object char_literal25_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "using_alias_directive");
		DebugLocation(50, 62);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// cs.g:50:22: ( 'using' identifier '=' namespace_or_type_name ';' )
			DebugEnterAlt(1);
			// cs.g:51:5: 'using' identifier '=' namespace_or_type_name ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(51, 5);
			string_literal21=(IToken)new XToken((IToken)Match(input,USING,Follow._USING_in_using_alias_directive227), "USING"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal21_tree = (object)adaptor.Create(string_literal21, retval);
			adaptor.AddChild(root_0, string_literal21_tree);
			}
			DebugLocation(51, 15);
			PushFollow(Follow._identifier_in_using_alias_directive231);
			identifier22=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier22.Tree, identifier22, retval);
			DebugLocation(51, 28);
			char_literal23=(IToken)Match(input,85,Follow._85_in_using_alias_directive235); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal23_tree = (object)adaptor.Create(char_literal23, retval);
			adaptor.AddChild(root_0, char_literal23_tree);
			}
			DebugLocation(51, 34);
			PushFollow(Follow._namespace_or_type_name_in_using_alias_directive239);
			namespace_or_type_name24=namespace_or_type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_or_type_name24.Tree, namespace_or_type_name24, retval);
			DebugLocation(51, 59);
			char_literal25=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_using_alias_directive243), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal25_tree = (object)adaptor.Create(char_literal25, retval);
			adaptor.AddChild(root_0, char_literal25_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("using_alias_directive", 9);
			LeaveRule("using_alias_directive", 9);
			LeaveRule_using_alias_directive();
			if (state.backtracking > 0) { Memoize(input, 9, using_alias_directive_StartIndex); }

		}
		DebugLocation(51, 62);
		} finally { DebugExitRule(GrammarFileName, "using_alias_directive"); }
		return retval;

	}
	// $ANTLR end "using_alias_directive"

	partial void EnterRule_using_namespace_directive();
	partial void LeaveRule_using_namespace_directive();

	// $ANTLR start "using_namespace_directive"
	// cs.g:52:1: using_namespace_directive : 'using' namespace_name ';' ;
	[GrammarRule("using_namespace_directive")]
	public XAstParserRuleReturnScope using_namespace_directive()
	{
		EnterRule_using_namespace_directive();
		EnterRule("using_namespace_directive", 10);
		var retval = new XAstParserRuleReturnScope("using_namespace_directive");
		
		retval.Start = (IToken)input.LT(1);
		int using_namespace_directive_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		XAstParserRuleReturnScope namespace_name27 = default(XAstParserRuleReturnScope);

		object string_literal26_tree = default(object);
		object char_literal28_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "using_namespace_directive");
		DebugLocation(52, 35);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// cs.g:52:26: ( 'using' namespace_name ';' )
			DebugEnterAlt(1);
			// cs.g:53:5: 'using' namespace_name ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(53, 5);
			string_literal26=(IToken)new XToken((IToken)Match(input,USING,Follow._USING_in_using_namespace_directive254), "USING"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal26_tree = (object)adaptor.Create(string_literal26, retval);
			adaptor.AddChild(root_0, string_literal26_tree);
			}
			DebugLocation(53, 15);
			PushFollow(Follow._namespace_name_in_using_namespace_directive258);
			namespace_name27=namespace_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_name27.Tree, namespace_name27, retval);
			DebugLocation(53, 32);
			char_literal28=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_using_namespace_directive262), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal28_tree = (object)adaptor.Create(char_literal28, retval);
			adaptor.AddChild(root_0, char_literal28_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("using_namespace_directive", 10);
			LeaveRule("using_namespace_directive", 10);
			LeaveRule_using_namespace_directive();
			if (state.backtracking > 0) { Memoize(input, 10, using_namespace_directive_StartIndex); }

		}
		DebugLocation(53, 35);
		} finally { DebugExitRule(GrammarFileName, "using_namespace_directive"); }
		return retval;

	}
	// $ANTLR end "using_namespace_directive"

	partial void EnterRule_namespace_member_declarations();
	partial void LeaveRule_namespace_member_declarations();

	// $ANTLR start "namespace_member_declarations"
	// cs.g:54:1: namespace_member_declarations : ( namespace_member_declaration )+ ;
	[GrammarRule("namespace_member_declarations")]
	public XAstParserRuleReturnScope namespace_member_declarations()
	{
		EnterRule_namespace_member_declarations();
		EnterRule("namespace_member_declarations", 11);
		var retval = new XAstParserRuleReturnScope("namespace_member_declarations");
		
		retval.Start = (IToken)input.LT(1);
		int namespace_member_declarations_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope namespace_member_declaration29 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "namespace_member_declarations");
		DebugLocation(54, 34);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// cs.g:54:30: ( ( namespace_member_declaration )+ )
			DebugEnterAlt(1);
			// cs.g:55:5: ( namespace_member_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(55, 5);
			// cs.g:55:5: ( namespace_member_declaration )+
			int cnt9=0;
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==ENUM||LA9_0==91||LA9_0==96||LA9_0==111||LA9_0==116||LA9_0==125||(LA9_0>=139 && LA9_0<=140)||(LA9_0>=149 && LA9_0<=150)||LA9_0==156||LA9_0==159||LA9_0==161||(LA9_0>=163 && LA9_0<=165)||LA9_0==170||LA9_0==176||LA9_0==178||LA9_0==188||LA9_0==191||LA9_0==193))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:55:5: namespace_member_declaration
					{
					DebugLocation(55, 5);
					PushFollow(Follow._namespace_member_declaration_in_namespace_member_declarations273);
					namespace_member_declaration29=namespace_member_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_member_declaration29.Tree, namespace_member_declaration29, retval);

					}
					break;

				default:
					if (cnt9 >= 1)
						goto loop9;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee9 = new EarlyExitException( 9, input );
					DebugRecognitionException(eee9);
					throw eee9;
				}
				cnt9++;
			}
			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_member_declarations", 11);
			LeaveRule("namespace_member_declarations", 11);
			LeaveRule_namespace_member_declarations();
			if (state.backtracking > 0) { Memoize(input, 11, namespace_member_declarations_StartIndex); }

		}
		DebugLocation(55, 34);
		} finally { DebugExitRule(GrammarFileName, "namespace_member_declarations"); }
		return retval;

	}
	// $ANTLR end "namespace_member_declarations"

	partial void EnterRule_namespace_member_declaration();
	partial void LeaveRule_namespace_member_declaration();

	// $ANTLR start "namespace_member_declaration"
	// cs.g:56:1: namespace_member_declaration : ( namespace_declaration | ( attributes )? ( modifiers )? type_declaration );
	[GrammarRule("namespace_member_declaration")]
	public XAstParserRuleReturnScope namespace_member_declaration()
	{
		EnterRule_namespace_member_declaration();
		EnterRule("namespace_member_declaration", 12);
		var retval = new XAstParserRuleReturnScope("namespace_member_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int namespace_member_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope namespace_declaration30 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attributes31 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope modifiers32 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_declaration33 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "namespace_member_declaration");
		DebugLocation(56, 50);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// cs.g:56:29: ( namespace_declaration | ( attributes )? ( modifiers )? type_declaration )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0==149))
			{
				alt12 = 1;
			}
			else if ((LA12_0==ENUM||LA12_0==91||LA12_0==96||LA12_0==111||LA12_0==116||LA12_0==125||(LA12_0>=139 && LA12_0<=140)||LA12_0==150||LA12_0==156||LA12_0==159||LA12_0==161||(LA12_0>=163 && LA12_0<=165)||LA12_0==170||LA12_0==176||LA12_0==178||LA12_0==188||LA12_0==191||LA12_0==193))
			{
				alt12 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:57:5: namespace_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(57, 5);
				PushFollow(Follow._namespace_declaration_in_namespace_member_declaration285);
				namespace_declaration30=namespace_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_declaration30.Tree, namespace_declaration30, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:58:7: ( attributes )? ( modifiers )? type_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(58, 7);
				// cs.g:58:7: ( attributes )?
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==91))
				{
					alt10 = 1;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:58:7: attributes
					{
					DebugLocation(58, 7);
					PushFollow(Follow._attributes_in_namespace_member_declaration293);
					attributes31=attributes();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attributes31.Tree, attributes31, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(10); }

				DebugLocation(58, 21);
				// cs.g:58:21: ( modifiers )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==96||LA11_0==125||LA11_0==140||LA11_0==150||LA11_0==156||LA11_0==161||(LA11_0>=163 && LA11_0<=165)||LA11_0==170||LA11_0==176||LA11_0==188||LA11_0==191||LA11_0==193))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:58:21: modifiers
					{
					DebugLocation(58, 21);
					PushFollow(Follow._modifiers_in_namespace_member_declaration298);
					modifiers32=modifiers();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers32.Tree, modifiers32, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(58, 34);
				PushFollow(Follow._type_declaration_in_namespace_member_declaration303);
				type_declaration33=type_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_declaration33.Tree, type_declaration33, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_member_declaration", 12);
			LeaveRule("namespace_member_declaration", 12);
			LeaveRule_namespace_member_declaration();
			if (state.backtracking > 0) { Memoize(input, 12, namespace_member_declaration_StartIndex); }

		}
		DebugLocation(58, 50);
		} finally { DebugExitRule(GrammarFileName, "namespace_member_declaration"); }
		return retval;

	}
	// $ANTLR end "namespace_member_declaration"

	partial void EnterRule_type_declaration();
	partial void LeaveRule_type_declaration();

	// $ANTLR start "type_declaration"
	// cs.g:59:1: type_declaration : ( ( 'partial' )=> 'partial' ( class_declaration | struct_declaration | interface_declaration ) | class_declaration | struct_declaration | interface_declaration | enum_declaration | delegate_declaration );
	[GrammarRule("type_declaration")]
	public XAstParserRuleReturnScope type_declaration()
	{
		EnterRule_type_declaration();
		EnterRule("type_declaration", 13);
		var retval = new XAstParserRuleReturnScope("type_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int type_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal34 = default(IToken);
		XAstParserRuleReturnScope class_declaration35 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declaration36 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_declaration37 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope class_declaration38 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declaration39 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_declaration40 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enum_declaration41 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope delegate_declaration42 = default(XAstParserRuleReturnScope);

		object string_literal34_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_declaration");
		DebugLocation(59, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// cs.g:59:17: ( ( 'partial' )=> 'partial' ( class_declaration | struct_declaration | interface_declaration ) | class_declaration | struct_declaration | interface_declaration | enum_declaration | delegate_declaration )
			int alt14=6;
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==159) && (EvaluatePredicate(synpred1_cs_fragment)))
			{
				alt14 = 1;
			}
			else if ((LA14_0==111))
			{
				alt14 = 2;
			}
			else if ((LA14_0==178))
			{
				alt14 = 3;
			}
			else if ((LA14_0==139))
			{
				alt14 = 4;
			}
			else if ((LA14_0==ENUM))
			{
				alt14 = 5;
			}
			else if ((LA14_0==116))
			{
				alt14 = 6;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:60:5: ( 'partial' )=> 'partial' ( class_declaration | struct_declaration | interface_declaration )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(60, 20);
				string_literal34=(IToken)Match(input,159,Follow._159_in_type_declaration320); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal34_tree = (object)adaptor.Create(string_literal34, retval);
				adaptor.AddChild(root_0, string_literal34_tree);
				}
				DebugLocation(60, 32);
				// cs.g:60:32: ( class_declaration | struct_declaration | interface_declaration )
				int alt13=3;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				switch (input.LA(1))
				{
				case 111:
					{
					alt13 = 1;
					}
					break;
				case 178:
					{
					alt13 = 2;
					}
					break;
				case 139:
					{
					alt13 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:60:33: class_declaration
					{
					DebugLocation(60, 33);
					PushFollow(Follow._class_declaration_in_type_declaration325);
					class_declaration35=class_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, class_declaration35.Tree, class_declaration35, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:61:35: struct_declaration
					{
					DebugLocation(61, 35);
					PushFollow(Follow._struct_declaration_in_type_declaration361);
					struct_declaration36=struct_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration36.Tree, struct_declaration36, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// cs.g:62:35: interface_declaration
					{
					DebugLocation(62, 35);
					PushFollow(Follow._interface_declaration_in_type_declaration397);
					interface_declaration37=interface_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_declaration37.Tree, interface_declaration37, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(13); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:63:7: class_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(63, 7);
				PushFollow(Follow._class_declaration_in_type_declaration406);
				class_declaration38=class_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_declaration38.Tree, class_declaration38, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:64:7: struct_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(64, 7);
				PushFollow(Follow._struct_declaration_in_type_declaration414);
				struct_declaration39=struct_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration39.Tree, struct_declaration39, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:65:7: interface_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(65, 7);
				PushFollow(Follow._interface_declaration_in_type_declaration422);
				interface_declaration40=interface_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_declaration40.Tree, interface_declaration40, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// cs.g:66:7: enum_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(66, 7);
				PushFollow(Follow._enum_declaration_in_type_declaration430);
				enum_declaration41=enum_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_declaration41.Tree, enum_declaration41, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// cs.g:67:7: delegate_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(67, 7);
				PushFollow(Follow._delegate_declaration_in_type_declaration438);
				delegate_declaration42=delegate_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, delegate_declaration42.Tree, delegate_declaration42, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_declaration", 13);
			LeaveRule("type_declaration", 13);
			LeaveRule_type_declaration();
			if (state.backtracking > 0) { Memoize(input, 13, type_declaration_StartIndex); }

		}
		DebugLocation(67, 27);
		} finally { DebugExitRule(GrammarFileName, "type_declaration"); }
		return retval;

	}
	// $ANTLR end "type_declaration"

	partial void EnterRule_qualified_identifier();
	partial void LeaveRule_qualified_identifier();

	// $ANTLR start "qualified_identifier"
	// cs.g:69:1: qualified_identifier : identifier ( '.' identifier )* ;
	[GrammarRule("qualified_identifier")]
	public XAstParserRuleReturnScope qualified_identifier()
	{
		EnterRule_qualified_identifier();
		EnterRule("qualified_identifier", 14);
		var retval = new XAstParserRuleReturnScope("qualified_identifier");
		
		retval.Start = (IToken)input.LT(1);
		int qualified_identifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal44 = default(IToken);
		XAstParserRuleReturnScope identifier43 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier45 = default(XAstParserRuleReturnScope);

		object char_literal44_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "qualified_identifier");
		DebugLocation(69, 33);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// cs.g:69:21: ( identifier ( '.' identifier )* )
			DebugEnterAlt(1);
			// cs.g:70:5: identifier ( '.' identifier )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(70, 5);
			PushFollow(Follow._identifier_in_qualified_identifier450);
			identifier43=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier43.Tree, identifier43, retval);
			DebugLocation(70, 16);
			// cs.g:70:16: ( '.' identifier )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==DOT))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:70:17: '.' identifier
					{
					DebugLocation(70, 17);
					char_literal44=(IToken)new XToken((IToken)Match(input,DOT,Follow._DOT_in_qualified_identifier453), "DOT"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal44_tree = (object)adaptor.Create(char_literal44, retval);
					adaptor.AddChild(root_0, char_literal44_tree);
					}
					DebugLocation(70, 21);
					PushFollow(Follow._identifier_in_qualified_identifier455);
					identifier45=identifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, identifier45.Tree, identifier45, retval);

					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qualified_identifier", 14);
			LeaveRule("qualified_identifier", 14);
			LeaveRule_qualified_identifier();
			if (state.backtracking > 0) { Memoize(input, 14, qualified_identifier_StartIndex); }

		}
		DebugLocation(70, 33);
		} finally { DebugExitRule(GrammarFileName, "qualified_identifier"); }
		return retval;

	}
	// $ANTLR end "qualified_identifier"

	partial void EnterRule_namespace_name();
	partial void LeaveRule_namespace_name();

	// $ANTLR start "namespace_name"
	// cs.g:71:1: namespace_name : namespace_or_type_name ;
	[GrammarRule("namespace_name")]
	public XAstParserRuleReturnScope namespace_name()
	{
		EnterRule_namespace_name();
		EnterRule("namespace_name", 15);
		var retval = new XAstParserRuleReturnScope("namespace_name");
		
		retval.Start = (IToken)input.LT(1);
		int namespace_name_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope namespace_or_type_name46 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "namespace_name");
		DebugLocation(71, 29);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// cs.g:72:5: ( namespace_or_type_name )
			DebugEnterAlt(1);
			// cs.g:72:7: namespace_or_type_name
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(72, 7);
			PushFollow(Follow._namespace_or_type_name_in_namespace_name469);
			namespace_or_type_name46=namespace_or_type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_or_type_name46.Tree, namespace_or_type_name46, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_name", 15);
			LeaveRule("namespace_name", 15);
			LeaveRule_namespace_name();
			if (state.backtracking > 0) { Memoize(input, 15, namespace_name_StartIndex); }

		}
		DebugLocation(72, 29);
		} finally { DebugExitRule(GrammarFileName, "namespace_name"); }
		return retval;

	}
	// $ANTLR end "namespace_name"

	partial void EnterRule_modifiers();
	partial void LeaveRule_modifiers();

	// $ANTLR start "modifiers"
	// cs.g:74:1: modifiers : ( modifier )+ ;
	[GrammarRule("modifiers")]
	public XAstParserRuleReturnScope modifiers()
	{
		EnterRule_modifiers();
		EnterRule("modifiers", 16);
		var retval = new XAstParserRuleReturnScope("modifiers");
		
		retval.Start = (IToken)input.LT(1);
		int modifiers_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope modifier47 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "modifiers");
		DebugLocation(74, 14);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// cs.g:74:10: ( ( modifier )+ )
			DebugEnterAlt(1);
			// cs.g:75:5: ( modifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(75, 5);
			// cs.g:75:5: ( modifier )+
			int cnt16=0;
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==96||LA16_0==125||LA16_0==140||LA16_0==150||LA16_0==156||LA16_0==161||(LA16_0>=163 && LA16_0<=165)||LA16_0==170||LA16_0==176||LA16_0==188||LA16_0==191||LA16_0==193))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:75:5: modifier
					{
					DebugLocation(75, 5);
					PushFollow(Follow._modifier_in_modifiers481);
					modifier47=modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modifier47.Tree, modifier47, retval);

					}
					break;

				default:
					if (cnt16 >= 1)
						goto loop16;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee16 = new EarlyExitException( 16, input );
					DebugRecognitionException(eee16);
					throw eee16;
				}
				cnt16++;
			}
			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modifiers", 16);
			LeaveRule("modifiers", 16);
			LeaveRule_modifiers();
			if (state.backtracking > 0) { Memoize(input, 16, modifiers_StartIndex); }

		}
		DebugLocation(75, 14);
		} finally { DebugExitRule(GrammarFileName, "modifiers"); }
		return retval;

	}
	// $ANTLR end "modifiers"

	partial void EnterRule_modifier();
	partial void LeaveRule_modifier();

	// $ANTLR start "modifier"
	// cs.g:76:1: modifier : ( 'new' | 'public' | 'protected' | 'private' | 'internal' | 'unsafe' | 'abstract' | 'sealed' | 'static' | 'readonly' | 'volatile' | 'extern' | 'virtual' | 'override' );
	[GrammarRule("modifier")]
	public XAstParserRuleReturnScope modifier()
	{
		EnterRule_modifier();
		EnterRule("modifier", 17);
		var retval = new XAstParserRuleReturnScope("modifier");
		
		retval.Start = (IToken)input.LT(1);
		int modifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set48 = default(IToken);

		object set48_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "modifier");
		DebugLocation(76, 65);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// cs.g:76:9: ( 'new' | 'public' | 'protected' | 'private' | 'internal' | 'unsafe' | 'abstract' | 'sealed' | 'static' | 'readonly' | 'volatile' | 'extern' | 'virtual' | 'override' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(76, 9);

			set48=(IToken)input.LT(1);
			if (input.LA(1)==96||input.LA(1)==125||input.LA(1)==140||input.LA(1)==150||input.LA(1)==156||input.LA(1)==161||(input.LA(1)>=163 && input.LA(1)<=165)||input.LA(1)==170||input.LA(1)==176||input.LA(1)==188||input.LA(1)==191||input.LA(1)==193)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set48, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modifier", 17);
			LeaveRule("modifier", 17);
			LeaveRule_modifier();
			if (state.backtracking > 0) { Memoize(input, 17, modifier_StartIndex); }

		}
		DebugLocation(78, 65);
		} finally { DebugExitRule(GrammarFileName, "modifier"); }
		return retval;

	}
	// $ANTLR end "modifier"

	partial void EnterRule_class_member_declaration();
	partial void LeaveRule_class_member_declaration();

	// $ANTLR start "class_member_declaration"
	// cs.g:80:1: class_member_declaration : ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration ) ;
	[GrammarRule("class_member_declaration")]
	public XAstParserRuleReturnScope class_member_declaration()
	{
		EnterRule_class_member_declaration();
		EnterRule("class_member_declaration", 18);
		var retval = new XAstParserRuleReturnScope("class_member_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int class_member_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal50 = default(IToken);
		IToken char_literal53 = default(IToken);
		IToken string_literal55 = default(IToken);
		IToken string_literal61 = default(IToken);
		IToken char_literal67 = default(IToken);
		XAstParserRuleReturnScope m = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attributes49 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type51 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_declarators52 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope event_declaration54 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope method_declaration56 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_declaration57 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope class_declaration58 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declaration59 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_declaration60 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope method_declaration62 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type63 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope method_declaration64 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope property_declaration65 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name66 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope indexer_declaration68 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope indexer_declaration69 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope field_declaration70 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope operator_declaration71 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope class_declaration72 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declaration73 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enum_declaration74 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope delegate_declaration75 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conversion_operator_declaration76 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constructor_declaration77 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope destructor_declaration78 = default(XAstParserRuleReturnScope);

		object string_literal50_tree = default(object);
		object char_literal53_tree = default(object);
		object string_literal55_tree = default(object);
		object string_literal61_tree = default(object);
		object char_literal67_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "class_member_declaration");
		DebugLocation(80, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// cs.g:80:25: ( ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration ) )
			DebugEnterAlt(1);
			// cs.g:81:5: ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(81, 5);
			// cs.g:81:5: ( attributes )?
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==91))
			{
				alt17 = 1;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:81:5: attributes
				{
				DebugLocation(81, 5);
				PushFollow(Follow._attributes_in_class_member_declaration565);
				attributes49=attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attributes49.Tree, attributes49, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(17); }

			DebugLocation(82, 6);
			// cs.g:82:6: (m= modifiers )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==96||LA18_0==125||LA18_0==140||LA18_0==150||LA18_0==156||LA18_0==161||(LA18_0>=163 && LA18_0<=165)||LA18_0==170||LA18_0==176||LA18_0==188||LA18_0==191||LA18_0==193))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:82:6: m= modifiers
				{
				DebugLocation(82, 6);
				PushFollow(Follow._modifiers_in_class_member_declaration574);
				m=modifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, m.Tree, m, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(83, 5);
			// cs.g:83:5: ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | class_declaration | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration | destructor_declaration )
			int alt21=13;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			switch (input.LA(1))
			{
			case 112:
				{
				alt21 = 1;
				}
				break;
			case 123:
				{
				alt21 = 2;
				}
				break;
			case 159:
				{
				alt21 = 3;
				}
				break;
			case 139:
				{
				alt21 = 4;
				}
				break;
			case 192:
				{
				int LA21_5 = input.LA(2);

				if ((LA21_5==Character_literal||LA21_5==FALSE||(LA21_5>=Hex_number && LA21_5<=IDENTIFIER)||(LA21_5>=NULL && LA21_5<=NUMBER)||LA21_5==Real_literal||LA21_5==STRINGLITERAL||LA21_5==TRUE||LA21_5==Verbatim_string_literal||LA21_5==95||(LA21_5>=97 && LA21_5<=98)||(LA21_5>=100 && LA21_5<=101)||LA21_5==103||(LA21_5>=105 && LA21_5<=106)||LA21_5==109||LA21_5==114||LA21_5==117||(LA21_5>=119 && LA21_5<=120)||LA21_5==122||LA21_5==126||LA21_5==129||LA21_5==132||LA21_5==135||LA21_5==138||LA21_5==141||(LA21_5>=143 && LA21_5<=144)||(LA21_5>=146 && LA21_5<=148)||(LA21_5>=151 && LA21_5<=152)||LA21_5==154||LA21_5==157||LA21_5==160||LA21_5==162||LA21_5==167||LA21_5==169||(LA21_5>=171 && LA21_5<=173)||LA21_5==177||LA21_5==183||(LA21_5>=185 && LA21_5<=186)||(LA21_5>=189 && LA21_5<=190)||LA21_5==194||LA21_5==196))
				{
					alt21 = 5;
				}
				else if ((LA21_5==69))
				{
					alt21 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				alt21 = 6;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA21_7 = input.LA(2);

				if ((LA21_7==Character_literal||LA21_7==DOT||LA21_7==FALSE||(LA21_7>=Hex_number && LA21_7<=IDENTIFIER)||(LA21_7>=NULL && LA21_7<=NUMBER)||LA21_7==Real_literal||LA21_7==STRINGLITERAL||LA21_7==TRUE||LA21_7==Verbatim_string_literal||LA21_7==69||(LA21_7>=80 && LA21_7<=81)||LA21_7==89||LA21_7==91||LA21_7==95||(LA21_7>=97 && LA21_7<=98)||(LA21_7>=100 && LA21_7<=101)||LA21_7==103||(LA21_7>=105 && LA21_7<=106)||LA21_7==109||LA21_7==114||LA21_7==117||(LA21_7>=119 && LA21_7<=120)||LA21_7==122||LA21_7==126||LA21_7==129||LA21_7==132||LA21_7==135||LA21_7==138||LA21_7==141||(LA21_7>=143 && LA21_7<=144)||(LA21_7>=146 && LA21_7<=148)||(LA21_7>=151 && LA21_7<=154)||LA21_7==157||LA21_7==160||LA21_7==162||LA21_7==167||LA21_7==169||(LA21_7>=171 && LA21_7<=173)||LA21_7==177||LA21_7==180||LA21_7==183||(LA21_7>=185 && LA21_7<=186)||(LA21_7>=189 && LA21_7<=190)||LA21_7==194||LA21_7==196))
				{
					alt21 = 6;
				}
				else if ((LA21_7==68))
				{
					alt21 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 111:
				{
				alt21 = 7;
				}
				break;
			case 178:
				{
				alt21 = 8;
				}
				break;
			case ENUM:
				{
				alt21 = 9;
				}
				break;
			case 116:
				{
				alt21 = 10;
				}
				break;
			case 124:
			case 136:
				{
				alt21 = 11;
				}
				break;
			case 202:
				{
				alt21 = 13;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:83:7: 'const' type constant_declarators ';'
				{
				DebugLocation(83, 7);
				string_literal50=(IToken)Match(input,112,Follow._112_in_class_member_declaration583); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal50_tree = (object)adaptor.Create(string_literal50, retval);
				adaptor.AddChild(root_0, string_literal50_tree);
				}
				DebugLocation(83, 17);
				PushFollow(Follow._type_in_class_member_declaration587);
				type51=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type51.Tree, type51, retval);
				DebugLocation(83, 24);
				PushFollow(Follow._constant_declarators_in_class_member_declaration591);
				constant_declarators52=constant_declarators();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_declarators52.Tree, constant_declarators52, retval);
				DebugLocation(83, 47);
				char_literal53=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_class_member_declaration595), "SEMI"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal53_tree = (object)adaptor.Create(char_literal53, retval);
				adaptor.AddChild(root_0, char_literal53_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:84:7: event_declaration
				{
				DebugLocation(84, 7);
				PushFollow(Follow._event_declaration_in_class_member_declaration603);
				event_declaration54=event_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, event_declaration54.Tree, event_declaration54, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:85:7: 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration )
				{
				DebugLocation(85, 7);
				string_literal55=(IToken)Match(input,159,Follow._159_in_class_member_declaration613); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal55_tree = (object)adaptor.Create(string_literal55, retval);
				adaptor.AddChild(root_0, string_literal55_tree);
				}
				DebugLocation(85, 17);
				// cs.g:85:17: ( method_declaration | interface_declaration | class_declaration | struct_declaration )
				int alt19=4;
				try { DebugEnterSubRule(19);
				try { DebugEnterDecision(19, false);
				switch (input.LA(1))
				{
				case Character_literal:
				case FALSE:
				case Hex_number:
				case IDENTIFIER:
				case NULL:
				case NUMBER:
				case Real_literal:
				case STRINGLITERAL:
				case TRUE:
				case Verbatim_string_literal:
				case 95:
				case 97:
				case 98:
				case 100:
				case 101:
				case 103:
				case 105:
				case 106:
				case 109:
				case 114:
				case 117:
				case 119:
				case 120:
				case 122:
				case 126:
				case 129:
				case 132:
				case 135:
				case 138:
				case 141:
				case 143:
				case 144:
				case 146:
				case 147:
				case 148:
				case 151:
				case 152:
				case 154:
				case 157:
				case 160:
				case 162:
				case 167:
				case 169:
				case 171:
				case 172:
				case 173:
				case 177:
				case 183:
				case 185:
				case 186:
				case 189:
				case 190:
				case 194:
				case 196:
					{
					alt19 = 1;
					}
					break;
				case 139:
					{
					alt19 = 2;
					}
					break;
				case 111:
					{
					alt19 = 3;
					}
					break;
				case 178:
					{
					alt19 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:85:18: method_declaration
					{
					DebugLocation(85, 18);
					PushFollow(Follow._method_declaration_in_class_member_declaration616);
					method_declaration56=method_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, method_declaration56.Tree, method_declaration56, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:86:18: interface_declaration
					{
					DebugLocation(86, 18);
					PushFollow(Follow._interface_declaration_in_class_member_declaration636);
					interface_declaration57=interface_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_declaration57.Tree, interface_declaration57, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// cs.g:87:18: class_declaration
					{
					DebugLocation(87, 18);
					PushFollow(Follow._class_declaration_in_class_member_declaration656);
					class_declaration58=class_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, class_declaration58.Tree, class_declaration58, retval);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// cs.g:88:18: struct_declaration
					{
					DebugLocation(88, 18);
					PushFollow(Follow._struct_declaration_in_class_member_declaration676);
					struct_declaration59=struct_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration59.Tree, struct_declaration59, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(19); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:89:7: interface_declaration
				{
				DebugLocation(89, 7);
				PushFollow(Follow._interface_declaration_in_class_member_declaration685);
				interface_declaration60=interface_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_declaration60.Tree, interface_declaration60, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// cs.g:90:7: 'void' method_declaration
				{
				DebugLocation(90, 7);
				string_literal61=(IToken)Match(input,192,Follow._192_in_class_member_declaration694); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal61_tree = (object)adaptor.Create(string_literal61, retval);
				adaptor.AddChild(root_0, string_literal61_tree);
				}
				DebugLocation(90, 16);
				PushFollow(Follow._method_declaration_in_class_member_declaration698);
				method_declaration62=method_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, method_declaration62.Tree, method_declaration62, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// cs.g:91:7: type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
				{
				DebugLocation(91, 7);
				PushFollow(Follow._type_in_class_member_declaration706);
				type63=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type63.Tree, type63, retval);
				DebugLocation(91, 12);
				// cs.g:91:12: ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
				int alt20=6;
				try { DebugEnterSubRule(20);
				try { DebugEnterDecision(20, false);
				switch (input.LA(1))
				{
				case 103:
				case 106:
				case 109:
				case 114:
				case 119:
				case 129:
				case 138:
				case 146:
				case 151:
				case 169:
				case 173:
				case 177:
				case 185:
				case 186:
				case 189:
					{
					int LA20_1 = input.LA(2);

					if ((EvaluatePredicate(synpred2_cs_fragment)))
					{
						alt20 = 1;
					}
					else if ((EvaluatePredicate(synpred3_cs_fragment)))
					{
						alt20 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 20, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENTIFIER:
				case 95:
				case 97:
				case 98:
				case 100:
				case 101:
				case 105:
				case 117:
				case 120:
				case 122:
				case 126:
				case 132:
				case 135:
				case 141:
				case 143:
				case 144:
				case 147:
				case 148:
				case 152:
				case 154:
				case 157:
				case 160:
				case 162:
				case 167:
				case 171:
				case 172:
				case 183:
				case 190:
				case 194:
				case 196:
					{
					int LA20_2 = input.LA(2);

					if ((EvaluatePredicate(synpred2_cs_fragment)))
					{
						alt20 = 1;
					}
					else if ((EvaluatePredicate(synpred3_cs_fragment)))
					{
						alt20 = 2;
					}
					else if ((EvaluatePredicate(synpred4_cs_fragment)))
					{
						alt20 = 3;
					}
					else if ((true))
					{
						alt20 = 5;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 20, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Character_literal:
				case FALSE:
				case Hex_number:
				case NULL:
				case NUMBER:
				case Real_literal:
				case STRINGLITERAL:
				case TRUE:
				case Verbatim_string_literal:
					{
					int LA20_3 = input.LA(2);

					if ((EvaluatePredicate(synpred2_cs_fragment)))
					{
						alt20 = 1;
					}
					else if ((EvaluatePredicate(synpred3_cs_fragment)))
					{
						alt20 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 20, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 180:
					{
					alt20 = 4;
					}
					break;
				case 153:
					{
					alt20 = 6;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:91:14: ( member_name '(' )=> method_declaration
					{
					DebugLocation(91, 37);
					PushFollow(Follow._method_declaration_in_class_member_declaration720);
					method_declaration64=method_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, method_declaration64.Tree, method_declaration64, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:92:14: ( member_name '{' )=> property_declaration
					{
					DebugLocation(92, 37);
					PushFollow(Follow._property_declaration_in_class_member_declaration745);
					property_declaration65=property_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, property_declaration65.Tree, property_declaration65, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// cs.g:93:14: ( member_name '.' 'this' )=> type_name '.' indexer_declaration
					{
					DebugLocation(93, 46);
					PushFollow(Follow._type_name_in_class_member_declaration774);
					type_name66=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_name66.Tree, type_name66, retval);
					DebugLocation(93, 56);
					char_literal67=(IToken)new XToken((IToken)Match(input,DOT,Follow._DOT_in_class_member_declaration776), "DOT"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal67_tree = (object)adaptor.Create(char_literal67, retval);
					adaptor.AddChild(root_0, char_literal67_tree);
					}
					DebugLocation(93, 60);
					PushFollow(Follow._indexer_declaration_in_class_member_declaration778);
					indexer_declaration68=indexer_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, indexer_declaration68.Tree, indexer_declaration68, retval);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// cs.g:94:14: indexer_declaration
					{
					DebugLocation(94, 14);
					PushFollow(Follow._indexer_declaration_in_class_member_declaration793);
					indexer_declaration69=indexer_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, indexer_declaration69.Tree, indexer_declaration69, retval);

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// cs.g:95:14: field_declaration
					{
					DebugLocation(95, 14);
					PushFollow(Follow._field_declaration_in_class_member_declaration809);
					field_declaration70=field_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, field_declaration70.Tree, field_declaration70, retval);

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// cs.g:96:14: operator_declaration
					{
					DebugLocation(96, 14);
					PushFollow(Follow._operator_declaration_in_class_member_declaration830);
					operator_declaration71=operator_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, operator_declaration71.Tree, operator_declaration71, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(20); }


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// cs.g:100:7: class_declaration
				{
				DebugLocation(100, 7);
				PushFollow(Follow._class_declaration_in_class_member_declaration857);
				class_declaration72=class_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_declaration72.Tree, class_declaration72, retval);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// cs.g:101:7: struct_declaration
				{
				DebugLocation(101, 7);
				PushFollow(Follow._struct_declaration_in_class_member_declaration867);
				struct_declaration73=struct_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration73.Tree, struct_declaration73, retval);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// cs.g:102:7: enum_declaration
				{
				DebugLocation(102, 7);
				PushFollow(Follow._enum_declaration_in_class_member_declaration876);
				enum_declaration74=enum_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_declaration74.Tree, enum_declaration74, retval);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// cs.g:103:7: delegate_declaration
				{
				DebugLocation(103, 7);
				PushFollow(Follow._delegate_declaration_in_class_member_declaration886);
				delegate_declaration75=delegate_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, delegate_declaration75.Tree, delegate_declaration75, retval);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// cs.g:104:7: conversion_operator_declaration
				{
				DebugLocation(104, 7);
				PushFollow(Follow._conversion_operator_declaration_in_class_member_declaration895);
				conversion_operator_declaration76=conversion_operator_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conversion_operator_declaration76.Tree, conversion_operator_declaration76, retval);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// cs.g:105:7: constructor_declaration
				{
				DebugLocation(105, 7);
				PushFollow(Follow._constructor_declaration_in_class_member_declaration903);
				constructor_declaration77=constructor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constructor_declaration77.Tree, constructor_declaration77, retval);

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// cs.g:106:7: destructor_declaration
				{
				DebugLocation(106, 7);
				PushFollow(Follow._destructor_declaration_in_class_member_declaration912);
				destructor_declaration78=destructor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, destructor_declaration78.Tree, destructor_declaration78, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_member_declaration", 18);
			LeaveRule("class_member_declaration", 18);
			LeaveRule_class_member_declaration();
			if (state.backtracking > 0) { Memoize(input, 18, class_member_declaration_StartIndex); }

		}
		DebugLocation(108, 4);
		} finally { DebugExitRule(GrammarFileName, "class_member_declaration"); }
		return retval;

	}
	// $ANTLR end "class_member_declaration"

	partial void EnterRule_primary_expression();
	partial void LeaveRule_primary_expression();

	// $ANTLR start "primary_expression"
	// cs.g:110:1: primary_expression : ( ( 'this' brackets )=> 'this' brackets ( primary_expression_part )* | ( 'base' brackets )=> 'this' brackets ( primary_expression_part )* | primary_expression_start ( primary_expression_part )* | 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression ) | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression );
	[GrammarRule("primary_expression")]
	public XAstParserRuleReturnScope primary_expression()
	{
		EnterRule_primary_expression();
		EnterRule("primary_expression", 19);
		var retval = new XAstParserRuleReturnScope("primary_expression");
		
		retval.Start = (IToken)input.LT(1);
		int primary_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal79 = default(IToken);
		IToken string_literal82 = default(IToken);
		IToken string_literal87 = default(IToken);
		XAstParserRuleReturnScope brackets80 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope primary_expression_part81 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope brackets83 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope primary_expression_part84 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope primary_expression_start85 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope primary_expression_part86 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope object_creation_expression88 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope primary_expression_part89 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope delegate_creation_expression90 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope object_creation_expression91 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope anonymous_object_creation_expression92 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope sizeof_expression93 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope checked_expression94 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unchecked_expression95 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope default_value_expression96 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope anonymous_method_expression97 = default(XAstParserRuleReturnScope);

		object string_literal79_tree = default(object);
		object string_literal82_tree = default(object);
		object string_literal87_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primary_expression");
		DebugLocation(110, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// cs.g:110:19: ( ( 'this' brackets )=> 'this' brackets ( primary_expression_part )* | ( 'base' brackets )=> 'this' brackets ( primary_expression_part )* | primary_expression_start ( primary_expression_part )* | 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression ) | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression )
			int alt27=9;
			try { DebugEnterDecision(27, false);
			switch (input.LA(1))
			{
			case 180:
				{
				int LA27_1 = input.LA(2);

				if ((EvaluatePredicate(synpred5_cs_fragment)))
				{
					alt27 = 1;
				}
				else if ((EvaluatePredicate(synpred6_cs_fragment)))
				{
					alt27 = 2;
				}
				else if ((true))
				{
					alt27 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 27, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case IDENTIFIER:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 68:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 102:
			case 103:
			case 105:
			case 106:
			case 109:
			case 114:
			case 117:
			case 119:
			case 120:
			case 122:
			case 126:
			case 129:
			case 132:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 177:
			case 183:
			case 184:
			case 185:
			case 186:
			case 189:
			case 190:
			case 194:
			case 196:
				{
				alt27 = 3;
				}
				break;
			case 150:
				{
				alt27 = 4;
				}
				break;
			case 174:
				{
				alt27 = 5;
				}
				break;
			case 110:
				{
				alt27 = 6;
				}
				break;
			case 187:
				{
				alt27 = 7;
				}
				break;
			case 115:
				{
				alt27 = 8;
				}
				break;
			case 116:
				{
				alt27 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:111:5: ( 'this' brackets )=> 'this' brackets ( primary_expression_part )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(111, 29);
				string_literal79=(IToken)Match(input,180,Follow._180_in_primary_expression947); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal79_tree = (object)adaptor.Create(string_literal79, retval);
				adaptor.AddChild(root_0, string_literal79_tree);
				}
				DebugLocation(111, 38);
				PushFollow(Follow._brackets_in_primary_expression951);
				brackets80=brackets();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, brackets80.Tree, brackets80, retval);
				DebugLocation(111, 49);
				// cs.g:111:49: ( primary_expression_part )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if ((LA22_0==DOT||LA22_0==PTR||LA22_0==68||LA22_0==91))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:111:49: primary_expression_part
						{
						DebugLocation(111, 49);
						PushFollow(Follow._primary_expression_part_in_primary_expression955);
						primary_expression_part81=primary_expression_part();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression_part81.Tree, primary_expression_part81, retval);

						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:112:7: ( 'base' brackets )=> 'this' brackets ( primary_expression_part )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(112, 30);
				string_literal82=(IToken)Match(input,180,Follow._180_in_primary_expression974); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal82_tree = (object)adaptor.Create(string_literal82, retval);
				adaptor.AddChild(root_0, string_literal82_tree);
				}
				DebugLocation(112, 39);
				PushFollow(Follow._brackets_in_primary_expression978);
				brackets83=brackets();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, brackets83.Tree, brackets83, retval);
				DebugLocation(112, 50);
				// cs.g:112:50: ( primary_expression_part )*
				try { DebugEnterSubRule(23);
				while (true)
				{
					int alt23=2;
					try { DebugEnterDecision(23, false);
					int LA23_0 = input.LA(1);

					if ((LA23_0==DOT||LA23_0==PTR||LA23_0==68||LA23_0==91))
					{
						alt23 = 1;
					}


					} finally { DebugExitDecision(23); }
					switch ( alt23 )
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:112:50: primary_expression_part
						{
						DebugLocation(112, 50);
						PushFollow(Follow._primary_expression_part_in_primary_expression982);
						primary_expression_part84=primary_expression_part();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression_part84.Tree, primary_expression_part84, retval);

						}
						break;

					default:
						goto loop23;
					}
				}

				loop23:
					;

				} finally { DebugExitSubRule(23); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:113:7: primary_expression_start ( primary_expression_part )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(113, 7);
				PushFollow(Follow._primary_expression_start_in_primary_expression991);
				primary_expression_start85=primary_expression_start();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression_start85.Tree, primary_expression_start85, retval);
				DebugLocation(113, 34);
				// cs.g:113:34: ( primary_expression_part )*
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=2;
					try { DebugEnterDecision(24, false);
					int LA24_0 = input.LA(1);

					if ((LA24_0==DOT||LA24_0==PTR||LA24_0==68||LA24_0==91))
					{
						alt24 = 1;
					}


					} finally { DebugExitDecision(24); }
					switch ( alt24 )
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:113:34: primary_expression_part
						{
						DebugLocation(113, 34);
						PushFollow(Follow._primary_expression_part_in_primary_expression995);
						primary_expression_part86=primary_expression_part();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression_part86.Tree, primary_expression_part86, retval);

						}
						break;

					default:
						goto loop24;
					}
				}

				loop24:
					;

				} finally { DebugExitSubRule(24); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:114:7: 'new' ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(114, 7);
				string_literal87=(IToken)Match(input,150,Follow._150_in_primary_expression1004); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal87_tree = (object)adaptor.Create(string_literal87, retval);
				adaptor.AddChild(root_0, string_literal87_tree);
				}
				DebugLocation(114, 13);
				// cs.g:114:13: ( ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+ | ( delegate_creation_expression )=> delegate_creation_expression | object_creation_expression | anonymous_object_creation_expression )
				int alt26=4;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, false);
				switch (input.LA(1))
				{
				case 103:
				case 106:
				case 109:
				case 114:
				case 119:
				case 129:
				case 138:
				case 146:
				case 151:
				case 169:
				case 173:
				case 177:
				case 185:
				case 186:
				case 189:
					{
					int LA26_1 = input.LA(2);

					if ((EvaluatePredicate(synpred7_cs_fragment)))
					{
						alt26 = 1;
					}
					else if ((true))
					{
						alt26 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 26, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENTIFIER:
				case 95:
				case 97:
				case 98:
				case 100:
				case 101:
				case 105:
				case 117:
				case 120:
				case 122:
				case 126:
				case 132:
				case 135:
				case 141:
				case 143:
				case 144:
				case 147:
				case 148:
				case 152:
				case 154:
				case 157:
				case 160:
				case 162:
				case 167:
				case 171:
				case 172:
				case 183:
				case 190:
				case 194:
				case 196:
					{
					int LA26_2 = input.LA(2);

					if ((EvaluatePredicate(synpred7_cs_fragment)))
					{
						alt26 = 1;
					}
					else if ((EvaluatePredicate(synpred8_cs_fragment)))
					{
						alt26 = 2;
					}
					else if ((true))
					{
						alt26 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 26, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 192:
					{
					int LA26_3 = input.LA(2);

					if ((EvaluatePredicate(synpred7_cs_fragment)))
					{
						alt26 = 1;
					}
					else if ((true))
					{
						alt26 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 26, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 197:
					{
					alt26 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:114:17: ( object_creation_expression ( '.' | '->' | '[' ) )=> object_creation_expression ( primary_expression_part )+
					{
					DebugLocation(115, 21);
					PushFollow(Follow._object_creation_expression_in_primary_expression1047);
					object_creation_expression88=object_creation_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, object_creation_expression88.Tree, object_creation_expression88, retval);
					DebugLocation(115, 50);
					// cs.g:115:50: ( primary_expression_part )+
					int cnt25=0;
					try { DebugEnterSubRule(25);
					while (true)
					{
						int alt25=2;
						try { DebugEnterDecision(25, false);
						int LA25_0 = input.LA(1);

						if ((LA25_0==DOT||LA25_0==PTR||LA25_0==68||LA25_0==91))
						{
							alt25 = 1;
						}


						} finally { DebugExitDecision(25); }
						switch (alt25)
						{
						case 1:
							DebugEnterAlt(1);
							// cs.g:115:50: primary_expression_part
							{
							DebugLocation(115, 50);
							PushFollow(Follow._primary_expression_part_in_primary_expression1051);
							primary_expression_part89=primary_expression_part();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression_part89.Tree, primary_expression_part89, retval);

							}
							break;

						default:
							if (cnt25 >= 1)
								goto loop25;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee25 = new EarlyExitException( 25, input );
							DebugRecognitionException(eee25);
							throw eee25;
						}
						cnt25++;
					}
					loop25:
						;

					} finally { DebugExitSubRule(25); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:118:19: ( delegate_creation_expression )=> delegate_creation_expression
					{
					DebugLocation(118, 53);
					PushFollow(Follow._delegate_creation_expression_in_primary_expression1115);
					delegate_creation_expression90=delegate_creation_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, delegate_creation_expression90.Tree, delegate_creation_expression90, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// cs.g:119:19: object_creation_expression
					{
					DebugLocation(119, 19);
					PushFollow(Follow._object_creation_expression_in_primary_expression1135);
					object_creation_expression91=object_creation_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, object_creation_expression91.Tree, object_creation_expression91, retval);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// cs.g:120:19: anonymous_object_creation_expression
					{
					DebugLocation(120, 19);
					PushFollow(Follow._anonymous_object_creation_expression_in_primary_expression1155);
					anonymous_object_creation_expression92=anonymous_object_creation_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, anonymous_object_creation_expression92.Tree, anonymous_object_creation_expression92, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(26); }


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// cs.g:121:7: sizeof_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(121, 7);
				PushFollow(Follow._sizeof_expression_in_primary_expression1171);
				sizeof_expression93=sizeof_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, sizeof_expression93.Tree, sizeof_expression93, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// cs.g:122:7: checked_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(122, 7);
				PushFollow(Follow._checked_expression_in_primary_expression1185);
				checked_expression94=checked_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, checked_expression94.Tree, checked_expression94, retval);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// cs.g:123:7: unchecked_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(123, 7);
				PushFollow(Follow._unchecked_expression_in_primary_expression1207);
				unchecked_expression95=unchecked_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unchecked_expression95.Tree, unchecked_expression95, retval);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// cs.g:124:7: default_value_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(124, 7);
				PushFollow(Follow._default_value_expression_in_primary_expression1227);
				default_value_expression96=default_value_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, default_value_expression96.Tree, default_value_expression96, retval);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// cs.g:125:7: anonymous_method_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(125, 7);
				PushFollow(Follow._anonymous_method_expression_in_primary_expression1243);
				anonymous_method_expression97=anonymous_method_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, anonymous_method_expression97.Tree, anonymous_method_expression97, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_expression", 19);
			LeaveRule("primary_expression", 19);
			LeaveRule_primary_expression();
			if (state.backtracking > 0) { Memoize(input, 19, primary_expression_StartIndex); }

		}
		DebugLocation(126, 4);
		} finally { DebugExitRule(GrammarFileName, "primary_expression"); }
		return retval;

	}
	// $ANTLR end "primary_expression"

	partial void EnterRule_primary_expression_start();
	partial void LeaveRule_primary_expression_start();

	// $ANTLR start "primary_expression_start"
	// cs.g:128:1: primary_expression_start : ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | identifier ( '::' identifier )? | 'this' | 'base' | paren_expression | typeof_expression | literal );
	[GrammarRule("primary_expression_start")]
	public XAstParserRuleReturnScope primary_expression_start()
	{
		EnterRule_primary_expression_start();
		EnterRule("primary_expression_start", 20);
		var retval = new XAstParserRuleReturnScope("primary_expression_start");
		
		retval.Start = (IToken)input.LT(1);
		int primary_expression_start_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal102 = default(IToken);
		IToken string_literal104 = default(IToken);
		IToken string_literal105 = default(IToken);
		XAstParserRuleReturnScope predefined_type98 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier99 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope generic_argument_list100 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier101 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier103 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope paren_expression106 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope typeof_expression107 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope literal108 = default(XAstParserRuleReturnScope);

		object string_literal102_tree = default(object);
		object string_literal104_tree = default(object);
		object string_literal105_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primary_expression_start");
		DebugLocation(128, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// cs.g:128:25: ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | identifier ( '::' identifier )? | 'this' | 'base' | paren_expression | typeof_expression | literal )
			int alt29=8;
			try { DebugEnterDecision(29, false);
			switch (input.LA(1))
			{
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				alt29 = 1;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA29_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_cs_fragment)))
				{
					alt29 = 2;
				}
				else if ((true))
				{
					alt29 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 29, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 180:
				{
				alt29 = 4;
				}
				break;
			case 102:
				{
				alt29 = 5;
				}
				break;
			case 68:
				{
				alt29 = 6;
				}
				break;
			case 184:
				{
				alt29 = 7;
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
				{
				alt29 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 29, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:129:5: predefined_type
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(129, 5);
				PushFollow(Follow._predefined_type_in_primary_expression_start1262);
				predefined_type98=predefined_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, predefined_type98.Tree, predefined_type98, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:130:7: ( identifier '<' )=> identifier generic_argument_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(130, 30);
				PushFollow(Follow._identifier_in_primary_expression_start1293);
				identifier99=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier99.Tree, identifier99, retval);
				DebugLocation(130, 43);
				PushFollow(Follow._generic_argument_list_in_primary_expression_start1297);
				generic_argument_list100=generic_argument_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, generic_argument_list100.Tree, generic_argument_list100, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:131:7: identifier ( '::' identifier )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(131, 7);
				PushFollow(Follow._identifier_in_primary_expression_start1305);
				identifier101=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier101.Tree, identifier101, retval);
				DebugLocation(131, 18);
				// cs.g:131:18: ( '::' identifier )?
				int alt28=2;
				try { DebugEnterSubRule(28);
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==80))
				{
					alt28 = 1;
				}
				} finally { DebugExitDecision(28); }
				switch (alt28)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:131:19: '::' identifier
					{
					DebugLocation(131, 19);
					string_literal102=(IToken)Match(input,80,Follow._80_in_primary_expression_start1308); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal102_tree = (object)adaptor.Create(string_literal102, retval);
					adaptor.AddChild(root_0, string_literal102_tree);
					}
					DebugLocation(131, 26);
					PushFollow(Follow._identifier_in_primary_expression_start1312);
					identifier103=identifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, identifier103.Tree, identifier103, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(28); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:132:7: 'this'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(132, 7);
				string_literal104=(IToken)Match(input,180,Follow._180_in_primary_expression_start1322); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal104_tree = (object)adaptor.Create(string_literal104, retval);
				adaptor.AddChild(root_0, string_literal104_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// cs.g:133:7: 'base'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(133, 7);
				string_literal105=(IToken)Match(input,102,Follow._102_in_primary_expression_start1331); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal105_tree = (object)adaptor.Create(string_literal105, retval);
				adaptor.AddChild(root_0, string_literal105_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// cs.g:134:7: paren_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(134, 7);
				PushFollow(Follow._paren_expression_in_primary_expression_start1339);
				paren_expression106=paren_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, paren_expression106.Tree, paren_expression106, retval);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// cs.g:135:7: typeof_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(135, 7);
				PushFollow(Follow._typeof_expression_in_primary_expression_start1347);
				typeof_expression107=typeof_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeof_expression107.Tree, typeof_expression107, retval);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// cs.g:136:7: literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(136, 7);
				PushFollow(Follow._literal_in_primary_expression_start1368);
				literal108=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal108.Tree, literal108, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_expression_start", 20);
			LeaveRule("primary_expression_start", 20);
			LeaveRule_primary_expression_start();
			if (state.backtracking > 0) { Memoize(input, 20, primary_expression_start_StartIndex); }

		}
		DebugLocation(137, 4);
		} finally { DebugExitRule(GrammarFileName, "primary_expression_start"); }
		return retval;

	}
	// $ANTLR end "primary_expression_start"

	partial void EnterRule_primary_expression_part();
	partial void LeaveRule_primary_expression_part();

	// $ANTLR start "primary_expression_part"
	// cs.g:139:1: primary_expression_part : ( access_identifier | brackets_or_arguments );
	[GrammarRule("primary_expression_part")]
	public XAstParserRuleReturnScope primary_expression_part()
	{
		EnterRule_primary_expression_part();
		EnterRule("primary_expression_part", 21);
		var retval = new XAstParserRuleReturnScope("primary_expression_part");
		
		retval.Start = (IToken)input.LT(1);
		int primary_expression_part_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope access_identifier109 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope brackets_or_arguments110 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "primary_expression_part");
		DebugLocation(139, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// cs.g:139:24: ( access_identifier | brackets_or_arguments )
			int alt30=2;
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==DOT||LA30_0==PTR))
			{
				alt30 = 1;
			}
			else if ((LA30_0==68||LA30_0==91))
			{
				alt30 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:140:6: access_identifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(140, 6);
				PushFollow(Follow._access_identifier_in_primary_expression_part1385);
				access_identifier109=access_identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, access_identifier109.Tree, access_identifier109, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:141:7: brackets_or_arguments
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(141, 7);
				PushFollow(Follow._brackets_or_arguments_in_primary_expression_part1393);
				brackets_or_arguments110=brackets_or_arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, brackets_or_arguments110.Tree, brackets_or_arguments110, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_expression_part", 21);
			LeaveRule("primary_expression_part", 21);
			LeaveRule_primary_expression_part();
			if (state.backtracking > 0) { Memoize(input, 21, primary_expression_part_StartIndex); }

		}
		DebugLocation(141, 28);
		} finally { DebugExitRule(GrammarFileName, "primary_expression_part"); }
		return retval;

	}
	// $ANTLR end "primary_expression_part"

	partial void EnterRule_access_identifier();
	partial void LeaveRule_access_identifier();

	// $ANTLR start "access_identifier"
	// cs.g:142:1: access_identifier : access_operator type_or_generic ;
	[GrammarRule("access_identifier")]
	public XAstParserRuleReturnScope access_identifier()
	{
		EnterRule_access_identifier();
		EnterRule("access_identifier", 22);
		var retval = new XAstParserRuleReturnScope("access_identifier");
		
		retval.Start = (IToken)input.LT(1);
		int access_identifier_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope access_operator111 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_or_generic112 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "access_identifier");
		DebugLocation(142, 38);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// cs.g:142:18: ( access_operator type_or_generic )
			DebugEnterAlt(1);
			// cs.g:143:5: access_operator type_or_generic
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(143, 5);
			PushFollow(Follow._access_operator_in_access_identifier1404);
			access_operator111=access_operator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, access_operator111.Tree, access_operator111, retval);
			DebugLocation(143, 23);
			PushFollow(Follow._type_or_generic_in_access_identifier1408);
			type_or_generic112=type_or_generic();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_or_generic112.Tree, type_or_generic112, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("access_identifier", 22);
			LeaveRule("access_identifier", 22);
			LeaveRule_access_identifier();
			if (state.backtracking > 0) { Memoize(input, 22, access_identifier_StartIndex); }

		}
		DebugLocation(143, 38);
		} finally { DebugExitRule(GrammarFileName, "access_identifier"); }
		return retval;

	}
	// $ANTLR end "access_identifier"

	partial void EnterRule_access_operator();
	partial void LeaveRule_access_operator();

	// $ANTLR start "access_operator"
	// cs.g:144:1: access_operator : ( '.' | '->' );
	[GrammarRule("access_operator")]
	public XAstParserRuleReturnScope access_operator()
	{
		EnterRule_access_operator();
		EnterRule("access_operator", 23);
		var retval = new XAstParserRuleReturnScope("access_operator");
		
		retval.Start = (IToken)input.LT(1);
		int access_operator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set113 = default(IToken);

		object set113_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "access_operator");
		DebugLocation(144, 17);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// cs.g:144:16: ( '.' | '->' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(144, 16);

			set113=(IToken)input.LT(1);
			if (input.LA(1)==DOT||input.LA(1)==PTR)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set113, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("access_operator", 23);
			LeaveRule("access_operator", 23);
			LeaveRule_access_operator();
			if (state.backtracking > 0) { Memoize(input, 23, access_operator_StartIndex); }

		}
		DebugLocation(145, 17);
		} finally { DebugExitRule(GrammarFileName, "access_operator"); }
		return retval;

	}
	// $ANTLR end "access_operator"

	partial void EnterRule_brackets_or_arguments();
	partial void LeaveRule_brackets_or_arguments();

	// $ANTLR start "brackets_or_arguments"
	// cs.g:146:1: brackets_or_arguments : ( brackets | arguments );
	[GrammarRule("brackets_or_arguments")]
	public XAstParserRuleReturnScope brackets_or_arguments()
	{
		EnterRule_brackets_or_arguments();
		EnterRule("brackets_or_arguments", 24);
		var retval = new XAstParserRuleReturnScope("brackets_or_arguments");
		
		retval.Start = (IToken)input.LT(1);
		int brackets_or_arguments_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope brackets114 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope arguments115 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "brackets_or_arguments");
		DebugLocation(146, 25);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// cs.g:146:22: ( brackets | arguments )
			int alt31=2;
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==91))
			{
				alt31 = 1;
			}
			else if ((LA31_0==68))
			{
				alt31 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 31, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:147:5: brackets
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(147, 5);
				PushFollow(Follow._brackets_in_brackets_or_arguments1436);
				brackets114=brackets();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, brackets114.Tree, brackets114, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:147:16: arguments
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(147, 16);
				PushFollow(Follow._arguments_in_brackets_or_arguments1440);
				arguments115=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments115.Tree, arguments115, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("brackets_or_arguments", 24);
			LeaveRule("brackets_or_arguments", 24);
			LeaveRule_brackets_or_arguments();
			if (state.backtracking > 0) { Memoize(input, 24, brackets_or_arguments_StartIndex); }

		}
		DebugLocation(147, 25);
		} finally { DebugExitRule(GrammarFileName, "brackets_or_arguments"); }
		return retval;

	}
	// $ANTLR end "brackets_or_arguments"

	partial void EnterRule_brackets();
	partial void LeaveRule_brackets();

	// $ANTLR start "brackets"
	// cs.g:148:1: brackets : '[' ( expression_list )? ']' ;
	[GrammarRule("brackets")]
	public XAstParserRuleReturnScope brackets()
	{
		EnterRule_brackets();
		EnterRule("brackets", 25);
		var retval = new XAstParserRuleReturnScope("brackets");
		
		retval.Start = (IToken)input.LT(1);
		int brackets_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal116 = default(IToken);
		IToken char_literal118 = default(IToken);
		XAstParserRuleReturnScope expression_list117 = default(XAstParserRuleReturnScope);

		object char_literal116_tree = default(object);
		object char_literal118_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "brackets");
		DebugLocation(148, 33);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// cs.g:148:9: ( '[' ( expression_list )? ']' )
			DebugEnterAlt(1);
			// cs.g:149:5: '[' ( expression_list )? ']'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(149, 5);
			char_literal116=(IToken)Match(input,91,Follow._91_in_brackets1451); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal116_tree = (object)adaptor.Create(char_literal116, retval);
			adaptor.AddChild(root_0, char_literal116_tree);
			}
			DebugLocation(149, 11);
			// cs.g:149:11: ( expression_list )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==Character_literal||LA32_0==FALSE||(LA32_0>=Hex_number && LA32_0<=IDENTIFIER)||(LA32_0>=MINUS && LA32_0<=NUMBER)||LA32_0==Real_literal||LA32_0==STRINGLITERAL||LA32_0==TRUE||LA32_0==Verbatim_string_literal||LA32_0==61||LA32_0==66||(LA32_0>=68 && LA32_0<=69)||(LA32_0>=71 && LA32_0<=72)||LA32_0==75||LA32_0==95||(LA32_0>=97 && LA32_0<=98)||(LA32_0>=100 && LA32_0<=103)||(LA32_0>=105 && LA32_0<=106)||(LA32_0>=109 && LA32_0<=110)||(LA32_0>=114 && LA32_0<=117)||(LA32_0>=119 && LA32_0<=120)||LA32_0==122||LA32_0==126||LA32_0==129||LA32_0==132||LA32_0==135||LA32_0==138||LA32_0==141||(LA32_0>=143 && LA32_0<=144)||(LA32_0>=146 && LA32_0<=148)||(LA32_0>=150 && LA32_0<=152)||LA32_0==154||LA32_0==157||LA32_0==160||LA32_0==162||LA32_0==167||LA32_0==169||(LA32_0>=171 && LA32_0<=174)||LA32_0==177||LA32_0==180||(LA32_0>=183 && LA32_0<=187)||(LA32_0>=189 && LA32_0<=190)||LA32_0==194||LA32_0==196||LA32_0==202))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:149:11: expression_list
				{
				DebugLocation(149, 11);
				PushFollow(Follow._expression_list_in_brackets1455);
				expression_list117=expression_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_list117.Tree, expression_list117, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(149, 30);
			char_literal118=(IToken)Match(input,92,Follow._92_in_brackets1460); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal118_tree = (object)adaptor.Create(char_literal118, retval);
			adaptor.AddChild(root_0, char_literal118_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("brackets", 25);
			LeaveRule("brackets", 25);
			LeaveRule_brackets();
			if (state.backtracking > 0) { Memoize(input, 25, brackets_StartIndex); }

		}
		DebugLocation(149, 33);
		} finally { DebugExitRule(GrammarFileName, "brackets"); }
		return retval;

	}
	// $ANTLR end "brackets"

	partial void EnterRule_paren_expression();
	partial void LeaveRule_paren_expression();

	// $ANTLR start "paren_expression"
	// cs.g:150:1: paren_expression : '(' expression ')' ;
	[GrammarRule("paren_expression")]
	public XAstParserRuleReturnScope paren_expression()
	{
		EnterRule_paren_expression();
		EnterRule("paren_expression", 26);
		var retval = new XAstParserRuleReturnScope("paren_expression");
		
		retval.Start = (IToken)input.LT(1);
		int paren_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal119 = default(IToken);
		IToken char_literal121 = default(IToken);
		XAstParserRuleReturnScope expression120 = default(XAstParserRuleReturnScope);

		object char_literal119_tree = default(object);
		object char_literal121_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "paren_expression");
		DebugLocation(150, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// cs.g:150:17: ( '(' expression ')' )
			DebugEnterAlt(1);
			// cs.g:151:5: '(' expression ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(151, 5);
			char_literal119=(IToken)Match(input,68,Follow._68_in_paren_expression1473); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal119_tree = (object)adaptor.Create(char_literal119, retval);
			adaptor.AddChild(root_0, char_literal119_tree);
			}
			DebugLocation(151, 11);
			PushFollow(Follow._expression_in_paren_expression1477);
			expression120=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression120.Tree, expression120, retval);
			DebugLocation(151, 24);
			char_literal121=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_paren_expression1481), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal121_tree = (object)adaptor.Create(char_literal121, retval);
			adaptor.AddChild(root_0, char_literal121_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("paren_expression", 26);
			LeaveRule("paren_expression", 26);
			LeaveRule_paren_expression();
			if (state.backtracking > 0) { Memoize(input, 26, paren_expression_StartIndex); }

		}
		DebugLocation(151, 27);
		} finally { DebugExitRule(GrammarFileName, "paren_expression"); }
		return retval;

	}
	// $ANTLR end "paren_expression"

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();

	// $ANTLR start "arguments"
	// cs.g:152:1: arguments : '(' ( argument_list )? ')' ;
	[GrammarRule("arguments")]
	public XAstParserRuleReturnScope arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 27);
		var retval = new XAstParserRuleReturnScope("arguments");
		
		retval.Start = (IToken)input.LT(1);
		int arguments_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal122 = default(IToken);
		IToken char_literal124 = default(IToken);
		XAstParserRuleReturnScope argument_list123 = default(XAstParserRuleReturnScope);

		object char_literal122_tree = default(object);
		object char_literal124_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(152, 31);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// cs.g:152:10: ( '(' ( argument_list )? ')' )
			DebugEnterAlt(1);
			// cs.g:153:5: '(' ( argument_list )? ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(153, 5);
			char_literal122=(IToken)Match(input,68,Follow._68_in_arguments1493); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal122_tree = (object)adaptor.Create(char_literal122, retval);
			adaptor.AddChild(root_0, char_literal122_tree);
			}
			DebugLocation(153, 11);
			// cs.g:153:11: ( argument_list )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==Character_literal||LA33_0==FALSE||(LA33_0>=Hex_number && LA33_0<=IDENTIFIER)||(LA33_0>=MINUS && LA33_0<=NUMBER)||LA33_0==Real_literal||LA33_0==STRINGLITERAL||LA33_0==TRUE||LA33_0==Verbatim_string_literal||LA33_0==61||LA33_0==66||(LA33_0>=68 && LA33_0<=69)||(LA33_0>=71 && LA33_0<=72)||LA33_0==75||LA33_0==95||(LA33_0>=97 && LA33_0<=98)||(LA33_0>=100 && LA33_0<=103)||(LA33_0>=105 && LA33_0<=106)||(LA33_0>=109 && LA33_0<=110)||(LA33_0>=114 && LA33_0<=117)||(LA33_0>=119 && LA33_0<=120)||LA33_0==122||LA33_0==126||LA33_0==129||LA33_0==132||LA33_0==135||LA33_0==138||LA33_0==141||(LA33_0>=143 && LA33_0<=144)||(LA33_0>=146 && LA33_0<=148)||(LA33_0>=150 && LA33_0<=152)||(LA33_0>=154 && LA33_0<=155)||LA33_0==157||LA33_0==160||LA33_0==162||(LA33_0>=166 && LA33_0<=167)||LA33_0==169||(LA33_0>=171 && LA33_0<=174)||LA33_0==177||LA33_0==180||(LA33_0>=183 && LA33_0<=187)||(LA33_0>=189 && LA33_0<=190)||LA33_0==194||LA33_0==196||LA33_0==202))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:153:11: argument_list
				{
				DebugLocation(153, 11);
				PushFollow(Follow._argument_list_in_arguments1497);
				argument_list123=argument_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, argument_list123.Tree, argument_list123, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(153, 28);
			char_literal124=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_arguments1502), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal124_tree = (object)adaptor.Create(char_literal124, retval);
			adaptor.AddChild(root_0, char_literal124_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arguments", 27);
			LeaveRule("arguments", 27);
			LeaveRule_arguments();
			if (state.backtracking > 0) { Memoize(input, 27, arguments_StartIndex); }

		}
		DebugLocation(153, 31);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return retval;

	}
	// $ANTLR end "arguments"

	partial void EnterRule_argument_list();
	partial void LeaveRule_argument_list();

	// $ANTLR start "argument_list"
	// cs.g:154:1: argument_list : argument ( ',' argument )* ;
	[GrammarRule("argument_list")]
	public XAstParserRuleReturnScope argument_list()
	{
		EnterRule_argument_list();
		EnterRule("argument_list", 28);
		var retval = new XAstParserRuleReturnScope("argument_list");
		
		retval.Start = (IToken)input.LT(1);
		int argument_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal126 = default(IToken);
		XAstParserRuleReturnScope argument125 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope argument127 = default(XAstParserRuleReturnScope);

		object char_literal126_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "argument_list");
		DebugLocation(154, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// cs.g:154:14: ( argument ( ',' argument )* )
			DebugEnterAlt(1);
			// cs.g:155:5: argument ( ',' argument )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(155, 5);
			PushFollow(Follow._argument_in_argument_list1514);
			argument125=argument();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, argument125.Tree, argument125, retval);
			DebugLocation(155, 14);
			// cs.g:155:14: ( ',' argument )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_0 = input.LA(1);

				if ((LA34_0==74))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:155:15: ',' argument
					{
					DebugLocation(155, 15);
					char_literal126=(IToken)Match(input,74,Follow._74_in_argument_list1517); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal126_tree = (object)adaptor.Create(char_literal126, retval);
					adaptor.AddChild(root_0, char_literal126_tree);
					}
					DebugLocation(155, 19);
					PushFollow(Follow._argument_in_argument_list1519);
					argument127=argument();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, argument127.Tree, argument127, retval);

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("argument_list", 28);
			LeaveRule("argument_list", 28);
			LeaveRule_argument_list();
			if (state.backtracking > 0) { Memoize(input, 28, argument_list_StartIndex); }

		}
		DebugLocation(155, 28);
		} finally { DebugExitRule(GrammarFileName, "argument_list"); }
		return retval;

	}
	// $ANTLR end "argument_list"

	partial void EnterRule_argument();
	partial void LeaveRule_argument();

	// $ANTLR start "argument"
	// cs.g:157:1: argument : ( argument_name argument_value | argument_value );
	[GrammarRule("argument")]
	public XAstParserRuleReturnScope argument()
	{
		EnterRule_argument();
		EnterRule("argument", 29);
		var retval = new XAstParserRuleReturnScope("argument");
		
		retval.Start = (IToken)input.LT(1);
		int argument_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope argument_name128 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope argument_value129 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope argument_value130 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "argument");
		DebugLocation(157, 20);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// cs.g:157:9: ( argument_name argument_value | argument_value )
			int alt35=2;
			try { DebugEnterDecision(35, false);
			switch (input.LA(1))
			{
			case 132:
				{
				int LA35_1 = input.LA(2);

				if ((LA35_1==79))
				{
					alt35 = 1;
				}
				else if ((LA35_1==DOT||LA35_1==GT||LA35_1==IDENTIFIER||LA35_1==MINUS||LA35_1==PTR||LA35_1==RPAREN||(LA35_1>=62 && LA35_1<=78)||(LA35_1>=80 && LA35_1<=91)||(LA35_1>=93 && LA35_1<=95)||(LA35_1>=97 && LA35_1<=101)||LA35_1==103||(LA35_1>=105 && LA35_1<=106)||LA35_1==109||LA35_1==114||LA35_1==117||(LA35_1>=119 && LA35_1<=120)||LA35_1==122||LA35_1==126||LA35_1==129||LA35_1==132||LA35_1==135||LA35_1==138||(LA35_1>=141 && LA35_1<=144)||(LA35_1>=146 && LA35_1<=148)||(LA35_1>=151 && LA35_1<=152)||LA35_1==154||LA35_1==157||LA35_1==160||LA35_1==162||LA35_1==167||LA35_1==169||(LA35_1>=171 && LA35_1<=173)||LA35_1==177||LA35_1==183||(LA35_1>=185 && LA35_1<=186)||(LA35_1>=189 && LA35_1<=190)||LA35_1==192||LA35_1==194||LA35_1==196||(LA35_1>=198 && LA35_1<=200)))
				{
					alt35 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 35, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case MINUS:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 61:
			case 66:
			case 68:
			case 69:
			case 71:
			case 72:
			case 75:
			case 102:
			case 103:
			case 106:
			case 109:
			case 110:
			case 114:
			case 115:
			case 116:
			case 119:
			case 129:
			case 138:
			case 146:
			case 150:
			case 151:
			case 155:
			case 166:
			case 169:
			case 173:
			case 174:
			case 177:
			case 180:
			case 184:
			case 185:
			case 186:
			case 187:
			case 189:
			case 202:
				{
				alt35 = 2;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA35_3 = input.LA(2);

				if ((LA35_3==79))
				{
					alt35 = 1;
				}
				else if ((LA35_3==DOT||LA35_3==GT||LA35_3==MINUS||LA35_3==PTR||LA35_3==RPAREN||(LA35_3>=62 && LA35_3<=78)||(LA35_3>=80 && LA35_3<=91)||(LA35_3>=93 && LA35_3<=94)||LA35_3==99||LA35_3==142||(LA35_3>=198 && LA35_3<=200)))
				{
					alt35 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 35, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 35, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:158:5: argument_name argument_value
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(158, 5);
				PushFollow(Follow._argument_name_in_argument1532);
				argument_name128=argument_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, argument_name128.Tree, argument_name128, retval);
				DebugLocation(158, 21);
				PushFollow(Follow._argument_value_in_argument1536);
				argument_value129=argument_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, argument_value129.Tree, argument_value129, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:159:7: argument_value
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(159, 7);
				PushFollow(Follow._argument_value_in_argument1544);
				argument_value130=argument_value();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, argument_value130.Tree, argument_value130, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("argument", 29);
			LeaveRule("argument", 29);
			LeaveRule_argument();
			if (state.backtracking > 0) { Memoize(input, 29, argument_StartIndex); }

		}
		DebugLocation(159, 20);
		} finally { DebugExitRule(GrammarFileName, "argument"); }
		return retval;

	}
	// $ANTLR end "argument"

	partial void EnterRule_argument_name();
	partial void LeaveRule_argument_name();

	// $ANTLR start "argument_name"
	// cs.g:160:1: argument_name : identifier ':' ;
	[GrammarRule("argument_name")]
	public XAstParserRuleReturnScope argument_name()
	{
		EnterRule_argument_name();
		EnterRule("argument_name", 30);
		var retval = new XAstParserRuleReturnScope("argument_name");
		
		retval.Start = (IToken)input.LT(1);
		int argument_name_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal132 = default(IToken);
		XAstParserRuleReturnScope identifier131 = default(XAstParserRuleReturnScope);

		object char_literal132_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "argument_name");
		DebugLocation(160, 20);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// cs.g:160:14: ( identifier ':' )
			DebugEnterAlt(1);
			// cs.g:161:5: identifier ':'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(161, 5);
			PushFollow(Follow._identifier_in_argument_name1554);
			identifier131=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier131.Tree, identifier131, retval);
			DebugLocation(161, 18);
			char_literal132=(IToken)Match(input,79,Follow._79_in_argument_name1558); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal132_tree = (object)adaptor.Create(char_literal132, retval);
			adaptor.AddChild(root_0, char_literal132_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("argument_name", 30);
			LeaveRule("argument_name", 30);
			LeaveRule_argument_name();
			if (state.backtracking > 0) { Memoize(input, 30, argument_name_StartIndex); }

		}
		DebugLocation(161, 20);
		} finally { DebugExitRule(GrammarFileName, "argument_name"); }
		return retval;

	}
	// $ANTLR end "argument_name"

	partial void EnterRule_argument_value();
	partial void LeaveRule_argument_value();

	// $ANTLR start "argument_value"
	// cs.g:162:1: argument_value : ( expression | ref_variable_reference | 'out' variable_reference );
	[GrammarRule("argument_value")]
	public XAstParserRuleReturnScope argument_value()
	{
		EnterRule_argument_value();
		EnterRule("argument_value", 31);
		var retval = new XAstParserRuleReturnScope("argument_value");
		
		retval.Start = (IToken)input.LT(1);
		int argument_value_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal135 = default(IToken);
		XAstParserRuleReturnScope expression133 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope ref_variable_reference134 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variable_reference136 = default(XAstParserRuleReturnScope);

		object string_literal135_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "argument_value");
		DebugLocation(162, 33);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// cs.g:162:15: ( expression | ref_variable_reference | 'out' variable_reference )
			int alt36=3;
			try { DebugEnterDecision(36, false);
			switch (input.LA(1))
			{
			case Character_literal:
			case FALSE:
			case Hex_number:
			case IDENTIFIER:
			case MINUS:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 61:
			case 66:
			case 68:
			case 69:
			case 71:
			case 72:
			case 75:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 102:
			case 103:
			case 105:
			case 106:
			case 109:
			case 110:
			case 114:
			case 115:
			case 116:
			case 117:
			case 119:
			case 120:
			case 122:
			case 126:
			case 129:
			case 132:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 150:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 174:
			case 177:
			case 180:
			case 183:
			case 184:
			case 185:
			case 186:
			case 187:
			case 189:
			case 190:
			case 194:
			case 196:
			case 202:
				{
				alt36 = 1;
				}
				break;
			case 166:
				{
				alt36 = 2;
				}
				break;
			case 155:
				{
				alt36 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 36, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:163:5: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(163, 5);
				PushFollow(Follow._expression_in_argument_value1569);
				expression133=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression133.Tree, expression133, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:164:7: ref_variable_reference
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(164, 7);
				PushFollow(Follow._ref_variable_reference_in_argument_value1578);
				ref_variable_reference134=ref_variable_reference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ref_variable_reference134.Tree, ref_variable_reference134, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:165:7: 'out' variable_reference
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(165, 7);
				string_literal135=(IToken)Match(input,155,Follow._155_in_argument_value1587); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal135_tree = (object)adaptor.Create(string_literal135, retval);
				adaptor.AddChild(root_0, string_literal135_tree);
				}
				DebugLocation(165, 15);
				PushFollow(Follow._variable_reference_in_argument_value1591);
				variable_reference136=variable_reference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable_reference136.Tree, variable_reference136, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("argument_value", 31);
			LeaveRule("argument_value", 31);
			LeaveRule_argument_value();
			if (state.backtracking > 0) { Memoize(input, 31, argument_value_StartIndex); }

		}
		DebugLocation(165, 33);
		} finally { DebugExitRule(GrammarFileName, "argument_value"); }
		return retval;

	}
	// $ANTLR end "argument_value"

	partial void EnterRule_ref_variable_reference();
	partial void LeaveRule_ref_variable_reference();

	// $ANTLR start "ref_variable_reference"
	// cs.g:166:1: ref_variable_reference : 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference ) ;
	[GrammarRule("ref_variable_reference")]
	public XAstParserRuleReturnScope ref_variable_reference()
	{
		EnterRule_ref_variable_reference();
		EnterRule("ref_variable_reference", 32);
		var retval = new XAstParserRuleReturnScope("ref_variable_reference");
		
		retval.Start = (IToken)input.LT(1);
		int ref_variable_reference_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal137 = default(IToken);
		IToken char_literal138 = default(IToken);
		IToken char_literal140 = default(IToken);
		XAstParserRuleReturnScope type139 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope ref_variable_reference141 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variable_reference142 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variable_reference143 = default(XAstParserRuleReturnScope);

		object string_literal137_tree = default(object);
		object char_literal138_tree = default(object);
		object char_literal140_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "ref_variable_reference");
		DebugLocation(166, 29);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// cs.g:166:23: ( 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference ) )
			DebugEnterAlt(1);
			// cs.g:167:5: 'ref' ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(167, 5);
			string_literal137=(IToken)Match(input,166,Follow._166_in_ref_variable_reference1602); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal137_tree = (object)adaptor.Create(string_literal137, retval);
			adaptor.AddChild(root_0, string_literal137_tree);
			}
			DebugLocation(168, 9);
			// cs.g:168:9: ( ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference ) | variable_reference )
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==68))
			{
				int LA38_1 = input.LA(2);

				if ((EvaluatePredicate(synpred10_cs_fragment)))
				{
					alt38 = 1;
				}
				else if ((true))
				{
					alt38 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 38, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA38_0==Character_literal||LA38_0==FALSE||(LA38_0>=Hex_number && LA38_0<=IDENTIFIER)||(LA38_0>=MINUS && LA38_0<=NUMBER)||LA38_0==Real_literal||LA38_0==STRINGLITERAL||LA38_0==TRUE||LA38_0==Verbatim_string_literal||LA38_0==61||LA38_0==66||LA38_0==69||(LA38_0>=71 && LA38_0<=72)||LA38_0==75||LA38_0==95||(LA38_0>=97 && LA38_0<=98)||(LA38_0>=100 && LA38_0<=103)||(LA38_0>=105 && LA38_0<=106)||(LA38_0>=109 && LA38_0<=110)||(LA38_0>=114 && LA38_0<=117)||(LA38_0>=119 && LA38_0<=120)||LA38_0==122||LA38_0==126||LA38_0==129||LA38_0==132||LA38_0==135||LA38_0==138||LA38_0==141||(LA38_0>=143 && LA38_0<=144)||(LA38_0>=146 && LA38_0<=148)||(LA38_0>=150 && LA38_0<=152)||LA38_0==154||LA38_0==157||LA38_0==160||LA38_0==162||LA38_0==167||LA38_0==169||(LA38_0>=171 && LA38_0<=174)||LA38_0==177||LA38_0==180||(LA38_0>=183 && LA38_0<=187)||(LA38_0>=189 && LA38_0<=190)||LA38_0==194||LA38_0==196||LA38_0==202))
			{
				alt38 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 38, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:168:10: ( '(' type ')' )=> '(' type ')' ( ref_variable_reference | variable_reference )
				{
				DebugLocation(168, 34);
				char_literal138=(IToken)Match(input,68,Follow._68_in_ref_variable_reference1630); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal138_tree = (object)adaptor.Create(char_literal138, retval);
				adaptor.AddChild(root_0, char_literal138_tree);
				}
				DebugLocation(168, 40);
				PushFollow(Follow._type_in_ref_variable_reference1634);
				type139=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type139.Tree, type139, retval);
				DebugLocation(168, 47);
				char_literal140=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_ref_variable_reference1638), "RPAREN"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal140_tree = (object)adaptor.Create(char_literal140, retval);
				adaptor.AddChild(root_0, char_literal140_tree);
				}
				DebugLocation(168, 53);
				// cs.g:168:53: ( ref_variable_reference | variable_reference )
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==166))
				{
					alt37 = 1;
				}
				else if ((LA37_0==Character_literal||LA37_0==FALSE||(LA37_0>=Hex_number && LA37_0<=IDENTIFIER)||(LA37_0>=MINUS && LA37_0<=NUMBER)||LA37_0==Real_literal||LA37_0==STRINGLITERAL||LA37_0==TRUE||LA37_0==Verbatim_string_literal||LA37_0==61||LA37_0==66||(LA37_0>=68 && LA37_0<=69)||(LA37_0>=71 && LA37_0<=72)||LA37_0==75||LA37_0==95||(LA37_0>=97 && LA37_0<=98)||(LA37_0>=100 && LA37_0<=103)||(LA37_0>=105 && LA37_0<=106)||(LA37_0>=109 && LA37_0<=110)||(LA37_0>=114 && LA37_0<=117)||(LA37_0>=119 && LA37_0<=120)||LA37_0==122||LA37_0==126||LA37_0==129||LA37_0==132||LA37_0==135||LA37_0==138||LA37_0==141||(LA37_0>=143 && LA37_0<=144)||(LA37_0>=146 && LA37_0<=148)||(LA37_0>=150 && LA37_0<=152)||LA37_0==154||LA37_0==157||LA37_0==160||LA37_0==162||LA37_0==167||LA37_0==169||(LA37_0>=171 && LA37_0<=174)||LA37_0==177||LA37_0==180||(LA37_0>=183 && LA37_0<=187)||(LA37_0>=189 && LA37_0<=190)||LA37_0==194||LA37_0==196||LA37_0==202))
				{
					alt37 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:168:54: ref_variable_reference
					{
					DebugLocation(168, 54);
					PushFollow(Follow._ref_variable_reference_in_ref_variable_reference1643);
					ref_variable_reference141=ref_variable_reference();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, ref_variable_reference141.Tree, ref_variable_reference141, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:168:79: variable_reference
					{
					DebugLocation(168, 79);
					PushFollow(Follow._variable_reference_in_ref_variable_reference1647);
					variable_reference142=variable_reference();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variable_reference142.Tree, variable_reference142, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(37); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:170:11: variable_reference
				{
				DebugLocation(170, 11);
				PushFollow(Follow._variable_reference_in_ref_variable_reference1764);
				variable_reference143=variable_reference();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable_reference143.Tree, variable_reference143, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ref_variable_reference", 32);
			LeaveRule("ref_variable_reference", 32);
			LeaveRule_ref_variable_reference();
			if (state.backtracking > 0) { Memoize(input, 32, ref_variable_reference_StartIndex); }

		}
		DebugLocation(170, 29);
		} finally { DebugExitRule(GrammarFileName, "ref_variable_reference"); }
		return retval;

	}
	// $ANTLR end "ref_variable_reference"

	partial void EnterRule_variable_reference();
	partial void LeaveRule_variable_reference();

	// $ANTLR start "variable_reference"
	// cs.g:172:1: variable_reference : expression ;
	[GrammarRule("variable_reference")]
	public XAstParserRuleReturnScope variable_reference()
	{
		EnterRule_variable_reference();
		EnterRule("variable_reference", 33);
		var retval = new XAstParserRuleReturnScope("variable_reference");
		
		retval.Start = (IToken)input.LT(1);
		int variable_reference_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope expression144 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "variable_reference");
		DebugLocation(172, 14);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// cs.g:172:19: ( expression )
			DebugEnterAlt(1);
			// cs.g:173:5: expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(173, 5);
			PushFollow(Follow._expression_in_variable_reference1777);
			expression144=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression144.Tree, expression144, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable_reference", 33);
			LeaveRule("variable_reference", 33);
			LeaveRule_variable_reference();
			if (state.backtracking > 0) { Memoize(input, 33, variable_reference_StartIndex); }

		}
		DebugLocation(173, 14);
		} finally { DebugExitRule(GrammarFileName, "variable_reference"); }
		return retval;

	}
	// $ANTLR end "variable_reference"

	partial void EnterRule_rank_specifiers();
	partial void LeaveRule_rank_specifiers();

	// $ANTLR start "rank_specifiers"
	// cs.g:174:1: rank_specifiers : ( rank_specifier )+ ;
	[GrammarRule("rank_specifiers")]
	public XAstParserRuleReturnScope rank_specifiers()
	{
		EnterRule_rank_specifiers();
		EnterRule("rank_specifiers", 34);
		var retval = new XAstParserRuleReturnScope("rank_specifiers");
		
		retval.Start = (IToken)input.LT(1);
		int rank_specifiers_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope rank_specifier145 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "rank_specifiers");
		DebugLocation(174, 20);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// cs.g:174:16: ( ( rank_specifier )+ )
			DebugEnterAlt(1);
			// cs.g:175:5: ( rank_specifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(175, 5);
			// cs.g:175:5: ( rank_specifier )+
			int cnt39=0;
			try { DebugEnterSubRule(39);
			while (true)
			{
				int alt39=2;
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==91))
				{
					int LA39_2 = input.LA(2);

					if ((LA39_2==74||LA39_2==92))
					{
						alt39 = 1;
					}


				}


				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:175:5: rank_specifier
					{
					DebugLocation(175, 5);
					PushFollow(Follow._rank_specifier_in_rank_specifiers1788);
					rank_specifier145=rank_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, rank_specifier145.Tree, rank_specifier145, retval);

					}
					break;

				default:
					if (cnt39 >= 1)
						goto loop39;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee39 = new EarlyExitException( 39, input );
					DebugRecognitionException(eee39);
					throw eee39;
				}
				cnt39++;
			}
			loop39:
				;

			} finally { DebugExitSubRule(39); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("rank_specifiers", 34);
			LeaveRule("rank_specifiers", 34);
			LeaveRule_rank_specifiers();
			if (state.backtracking > 0) { Memoize(input, 34, rank_specifiers_StartIndex); }

		}
		DebugLocation(175, 20);
		} finally { DebugExitRule(GrammarFileName, "rank_specifiers"); }
		return retval;

	}
	// $ANTLR end "rank_specifiers"

	partial void EnterRule_rank_specifier();
	partial void LeaveRule_rank_specifier();

	// $ANTLR start "rank_specifier"
	// cs.g:176:1: rank_specifier : '[' ( dim_separators )? ']' ;
	[GrammarRule("rank_specifier")]
	public XAstParserRuleReturnScope rank_specifier()
	{
		EnterRule_rank_specifier();
		EnterRule("rank_specifier", 35);
		var retval = new XAstParserRuleReturnScope("rank_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int rank_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal146 = default(IToken);
		IToken char_literal148 = default(IToken);
		XAstParserRuleReturnScope dim_separators147 = default(XAstParserRuleReturnScope);

		object char_literal146_tree = default(object);
		object char_literal148_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "rank_specifier");
		DebugLocation(176, 32);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// cs.g:176:15: ( '[' ( dim_separators )? ']' )
			DebugEnterAlt(1);
			// cs.g:177:5: '[' ( dim_separators )? ']'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(177, 5);
			char_literal146=(IToken)Match(input,91,Follow._91_in_rank_specifier1809); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal146_tree = (object)adaptor.Create(char_literal146, retval);
			adaptor.AddChild(root_0, char_literal146_tree);
			}
			DebugLocation(177, 11);
			// cs.g:177:11: ( dim_separators )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==74))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:177:11: dim_separators
				{
				DebugLocation(177, 11);
				PushFollow(Follow._dim_separators_in_rank_specifier1813);
				dim_separators147=dim_separators();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, dim_separators147.Tree, dim_separators147, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(40); }

			DebugLocation(177, 29);
			char_literal148=(IToken)Match(input,92,Follow._92_in_rank_specifier1818); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal148_tree = (object)adaptor.Create(char_literal148, retval);
			adaptor.AddChild(root_0, char_literal148_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("rank_specifier", 35);
			LeaveRule("rank_specifier", 35);
			LeaveRule_rank_specifier();
			if (state.backtracking > 0) { Memoize(input, 35, rank_specifier_StartIndex); }

		}
		DebugLocation(177, 32);
		} finally { DebugExitRule(GrammarFileName, "rank_specifier"); }
		return retval;

	}
	// $ANTLR end "rank_specifier"

	partial void EnterRule_dim_separators();
	partial void LeaveRule_dim_separators();

	// $ANTLR start "dim_separators"
	// cs.g:178:1: dim_separators : ( ',' )+ ;
	[GrammarRule("dim_separators")]
	public XAstParserRuleReturnScope dim_separators()
	{
		EnterRule_dim_separators();
		EnterRule("dim_separators", 36);
		var retval = new XAstParserRuleReturnScope("dim_separators");
		
		retval.Start = (IToken)input.LT(1);
		int dim_separators_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal149 = default(IToken);

		object char_literal149_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "dim_separators");
		DebugLocation(178, 9);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// cs.g:178:15: ( ( ',' )+ )
			DebugEnterAlt(1);
			// cs.g:179:5: ( ',' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(179, 5);
			// cs.g:179:5: ( ',' )+
			int cnt41=0;
			try { DebugEnterSubRule(41);
			while (true)
			{
				int alt41=2;
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==74))
				{
					alt41 = 1;
				}


				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:179:5: ','
					{
					DebugLocation(179, 5);
					char_literal149=(IToken)Match(input,74,Follow._74_in_dim_separators1830); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal149_tree = (object)adaptor.Create(char_literal149, retval);
					adaptor.AddChild(root_0, char_literal149_tree);
					}

					}
					break;

				default:
					if (cnt41 >= 1)
						goto loop41;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee41 = new EarlyExitException( 41, input );
					DebugRecognitionException(eee41);
					throw eee41;
				}
				cnt41++;
			}
			loop41:
				;

			} finally { DebugExitSubRule(41); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dim_separators", 36);
			LeaveRule("dim_separators", 36);
			LeaveRule_dim_separators();
			if (state.backtracking > 0) { Memoize(input, 36, dim_separators_StartIndex); }

		}
		DebugLocation(179, 9);
		} finally { DebugExitRule(GrammarFileName, "dim_separators"); }
		return retval;

	}
	// $ANTLR end "dim_separators"

	partial void EnterRule_delegate_creation_expression();
	partial void LeaveRule_delegate_creation_expression();

	// $ANTLR start "delegate_creation_expression"
	// cs.g:181:1: delegate_creation_expression : type_name '(' type_name ')' ;
	[GrammarRule("delegate_creation_expression")]
	public XAstParserRuleReturnScope delegate_creation_expression()
	{
		EnterRule_delegate_creation_expression();
		EnterRule("delegate_creation_expression", 37);
		var retval = new XAstParserRuleReturnScope("delegate_creation_expression");
		
		retval.Start = (IToken)input.LT(1);
		int delegate_creation_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal151 = default(IToken);
		IToken char_literal153 = default(IToken);
		XAstParserRuleReturnScope type_name150 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name152 = default(XAstParserRuleReturnScope);

		object char_literal151_tree = default(object);
		object char_literal153_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "delegate_creation_expression");
		DebugLocation(181, 38);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// cs.g:181:29: ( type_name '(' type_name ')' )
			DebugEnterAlt(1);
			// cs.g:183:5: type_name '(' type_name ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(183, 5);
			PushFollow(Follow._type_name_in_delegate_creation_expression1849);
			type_name150=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name150.Tree, type_name150, retval);
			DebugLocation(183, 17);
			char_literal151=(IToken)Match(input,68,Follow._68_in_delegate_creation_expression1853); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal151_tree = (object)adaptor.Create(char_literal151, retval);
			adaptor.AddChild(root_0, char_literal151_tree);
			}
			DebugLocation(183, 23);
			PushFollow(Follow._type_name_in_delegate_creation_expression1857);
			type_name152=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name152.Tree, type_name152, retval);
			DebugLocation(183, 35);
			char_literal153=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_delegate_creation_expression1861), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal153_tree = (object)adaptor.Create(char_literal153, retval);
			adaptor.AddChild(root_0, char_literal153_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("delegate_creation_expression", 37);
			LeaveRule("delegate_creation_expression", 37);
			LeaveRule_delegate_creation_expression();
			if (state.backtracking > 0) { Memoize(input, 37, delegate_creation_expression_StartIndex); }

		}
		DebugLocation(183, 38);
		} finally { DebugExitRule(GrammarFileName, "delegate_creation_expression"); }
		return retval;

	}
	// $ANTLR end "delegate_creation_expression"

	partial void EnterRule_anonymous_object_creation_expression();
	partial void LeaveRule_anonymous_object_creation_expression();

	// $ANTLR start "anonymous_object_creation_expression"
	// cs.g:184:1: anonymous_object_creation_expression : anonymous_object_initializer ;
	[GrammarRule("anonymous_object_creation_expression")]
	public XAstParserRuleReturnScope anonymous_object_creation_expression()
	{
		EnterRule_anonymous_object_creation_expression();
		EnterRule("anonymous_object_creation_expression", 38);
		var retval = new XAstParserRuleReturnScope("anonymous_object_creation_expression");
		
		retval.Start = (IToken)input.LT(1);
		int anonymous_object_creation_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope anonymous_object_initializer154 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "anonymous_object_creation_expression");
		DebugLocation(184, 33);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// cs.g:184:37: ( anonymous_object_initializer )
			DebugEnterAlt(1);
			// cs.g:186:5: anonymous_object_initializer
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(186, 5);
			PushFollow(Follow._anonymous_object_initializer_in_anonymous_object_creation_expression1878);
			anonymous_object_initializer154=anonymous_object_initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, anonymous_object_initializer154.Tree, anonymous_object_initializer154, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymous_object_creation_expression", 38);
			LeaveRule("anonymous_object_creation_expression", 38);
			LeaveRule_anonymous_object_creation_expression();
			if (state.backtracking > 0) { Memoize(input, 38, anonymous_object_creation_expression_StartIndex); }

		}
		DebugLocation(186, 33);
		} finally { DebugExitRule(GrammarFileName, "anonymous_object_creation_expression"); }
		return retval;

	}
	// $ANTLR end "anonymous_object_creation_expression"

	partial void EnterRule_anonymous_object_initializer();
	partial void LeaveRule_anonymous_object_initializer();

	// $ANTLR start "anonymous_object_initializer"
	// cs.g:187:1: anonymous_object_initializer : '{' ( member_declarator_list )? ( ',' )? '}' ;
	[GrammarRule("anonymous_object_initializer")]
	public XAstParserRuleReturnScope anonymous_object_initializer()
	{
		EnterRule_anonymous_object_initializer();
		EnterRule("anonymous_object_initializer", 39);
		var retval = new XAstParserRuleReturnScope("anonymous_object_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int anonymous_object_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal155 = default(IToken);
		IToken char_literal157 = default(IToken);
		IToken char_literal158 = default(IToken);
		XAstParserRuleReturnScope member_declarator_list156 = default(XAstParserRuleReturnScope);

		object char_literal155_tree = default(object);
		object char_literal157_tree = default(object);
		object char_literal158_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "anonymous_object_initializer");
		DebugLocation(187, 46);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// cs.g:187:29: ( '{' ( member_declarator_list )? ( ',' )? '}' )
			DebugEnterAlt(1);
			// cs.g:188:5: '{' ( member_declarator_list )? ( ',' )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(188, 5);
			char_literal155=(IToken)Match(input,197,Follow._197_in_anonymous_object_initializer1890); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal155_tree = (object)adaptor.Create(char_literal155, retval);
			adaptor.AddChild(root_0, char_literal155_tree);
			}
			DebugLocation(188, 11);
			// cs.g:188:11: ( member_declarator_list )?
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, false);
			int LA42_0 = input.LA(1);

			if ((LA42_0==IDENTIFIER||LA42_0==95||(LA42_0>=97 && LA42_0<=98)||(LA42_0>=100 && LA42_0<=101)||LA42_0==105||LA42_0==117||LA42_0==120||LA42_0==122||LA42_0==126||LA42_0==132||LA42_0==135||LA42_0==141||(LA42_0>=143 && LA42_0<=144)||(LA42_0>=147 && LA42_0<=148)||LA42_0==152||LA42_0==154||LA42_0==157||LA42_0==160||LA42_0==162||LA42_0==167||(LA42_0>=171 && LA42_0<=172)||LA42_0==183||LA42_0==190||LA42_0==194||LA42_0==196))
			{
				alt42 = 1;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:188:11: member_declarator_list
				{
				DebugLocation(188, 11);
				PushFollow(Follow._member_declarator_list_in_anonymous_object_initializer1894);
				member_declarator_list156=member_declarator_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, member_declarator_list156.Tree, member_declarator_list156, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(42); }

			DebugLocation(188, 37);
			// cs.g:188:37: ( ',' )?
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, false);
			int LA43_0 = input.LA(1);

			if ((LA43_0==74))
			{
				alt43 = 1;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:188:37: ','
				{
				DebugLocation(188, 37);
				char_literal157=(IToken)Match(input,74,Follow._74_in_anonymous_object_initializer1899); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal157_tree = (object)adaptor.Create(char_literal157, retval);
				adaptor.AddChild(root_0, char_literal157_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(43); }

			DebugLocation(188, 44);
			char_literal158=(IToken)Match(input,201,Follow._201_in_anonymous_object_initializer1904); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal158_tree = (object)adaptor.Create(char_literal158, retval);
			adaptor.AddChild(root_0, char_literal158_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymous_object_initializer", 39);
			LeaveRule("anonymous_object_initializer", 39);
			LeaveRule_anonymous_object_initializer();
			if (state.backtracking > 0) { Memoize(input, 39, anonymous_object_initializer_StartIndex); }

		}
		DebugLocation(188, 46);
		} finally { DebugExitRule(GrammarFileName, "anonymous_object_initializer"); }
		return retval;

	}
	// $ANTLR end "anonymous_object_initializer"

	partial void EnterRule_member_declarator_list();
	partial void LeaveRule_member_declarator_list();

	// $ANTLR start "member_declarator_list"
	// cs.g:189:1: member_declarator_list : member_declarator ( ',' member_declarator )* ;
	[GrammarRule("member_declarator_list")]
	public XAstParserRuleReturnScope member_declarator_list()
	{
		EnterRule_member_declarator_list();
		EnterRule("member_declarator_list", 40);
		var retval = new XAstParserRuleReturnScope("member_declarator_list");
		
		retval.Start = (IToken)input.LT(1);
		int member_declarator_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal160 = default(IToken);
		XAstParserRuleReturnScope member_declarator159 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope member_declarator161 = default(XAstParserRuleReturnScope);

		object char_literal160_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "member_declarator_list");
		DebugLocation(189, 48);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// cs.g:189:23: ( member_declarator ( ',' member_declarator )* )
			DebugEnterAlt(1);
			// cs.g:190:5: member_declarator ( ',' member_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(190, 5);
			PushFollow(Follow._member_declarator_in_member_declarator_list1915);
			member_declarator159=member_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, member_declarator159.Tree, member_declarator159, retval);
			DebugLocation(190, 24);
			// cs.g:190:24: ( ',' member_declarator )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==74))
				{
					int LA44_1 = input.LA(2);

					if ((LA44_1==IDENTIFIER||LA44_1==95||(LA44_1>=97 && LA44_1<=98)||(LA44_1>=100 && LA44_1<=101)||LA44_1==105||LA44_1==117||LA44_1==120||LA44_1==122||LA44_1==126||LA44_1==132||LA44_1==135||LA44_1==141||(LA44_1>=143 && LA44_1<=144)||(LA44_1>=147 && LA44_1<=148)||LA44_1==152||LA44_1==154||LA44_1==157||LA44_1==160||LA44_1==162||LA44_1==167||(LA44_1>=171 && LA44_1<=172)||LA44_1==183||LA44_1==190||LA44_1==194||LA44_1==196))
					{
						alt44 = 1;
					}


				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:190:25: ',' member_declarator
					{
					DebugLocation(190, 25);
					char_literal160=(IToken)Match(input,74,Follow._74_in_member_declarator_list1919); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal160_tree = (object)adaptor.Create(char_literal160, retval);
					adaptor.AddChild(root_0, char_literal160_tree);
					}
					DebugLocation(190, 29);
					PushFollow(Follow._member_declarator_in_member_declarator_list1921);
					member_declarator161=member_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, member_declarator161.Tree, member_declarator161, retval);

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("member_declarator_list", 40);
			LeaveRule("member_declarator_list", 40);
			LeaveRule_member_declarator_list();
			if (state.backtracking > 0) { Memoize(input, 40, member_declarator_list_StartIndex); }

		}
		DebugLocation(190, 48);
		} finally { DebugExitRule(GrammarFileName, "member_declarator_list"); }
		return retval;

	}
	// $ANTLR end "member_declarator_list"

	partial void EnterRule_member_declarator();
	partial void LeaveRule_member_declarator();

	// $ANTLR start "member_declarator"
	// cs.g:191:1: member_declarator : identifier ( generic_argument_list | ( '.' primary_or_array_creation_expression ) | '=' expression ) ;
	[GrammarRule("member_declarator")]
	public XAstParserRuleReturnScope member_declarator()
	{
		EnterRule_member_declarator();
		EnterRule("member_declarator", 41);
		var retval = new XAstParserRuleReturnScope("member_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int member_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal164 = default(IToken);
		IToken char_literal166 = default(IToken);
		XAstParserRuleReturnScope identifier162 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope generic_argument_list163 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope primary_or_array_creation_expression165 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression167 = default(XAstParserRuleReturnScope);

		object char_literal164_tree = default(object);
		object char_literal166_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "member_declarator");
		DebugLocation(191, 37);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// cs.g:191:18: ( identifier ( generic_argument_list | ( '.' primary_or_array_creation_expression ) | '=' expression ) )
			DebugEnterAlt(1);
			// cs.g:192:5: identifier ( generic_argument_list | ( '.' primary_or_array_creation_expression ) | '=' expression )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(192, 5);
			PushFollow(Follow._identifier_in_member_declarator1936);
			identifier162=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier162.Tree, identifier162, retval);
			DebugLocation(192, 18);
			// cs.g:192:18: ( generic_argument_list | ( '.' primary_or_array_creation_expression ) | '=' expression )
			int alt45=3;
			try { DebugEnterSubRule(45);
			try { DebugEnterDecision(45, false);
			switch (input.LA(1))
			{
			case 81:
				{
				alt45 = 1;
				}
				break;
			case DOT:
				{
				alt45 = 2;
				}
				break;
			case 85:
				{
				alt45 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 45, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:192:19: generic_argument_list
				{
				DebugLocation(192, 19);
				PushFollow(Follow._generic_argument_list_in_member_declarator1941);
				generic_argument_list163=generic_argument_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, generic_argument_list163.Tree, generic_argument_list163, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:193:20: ( '.' primary_or_array_creation_expression )
				{
				DebugLocation(193, 20);
				// cs.g:193:20: ( '.' primary_or_array_creation_expression )
				DebugEnterAlt(1);
				// cs.g:193:21: '.' primary_or_array_creation_expression
				{
				DebugLocation(193, 21);
				char_literal164=(IToken)new XToken((IToken)Match(input,DOT,Follow._DOT_in_member_declarator1963), "DOT"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal164_tree = (object)adaptor.Create(char_literal164, retval);
				adaptor.AddChild(root_0, char_literal164_tree);
				}
				DebugLocation(193, 27);
				PushFollow(Follow._primary_or_array_creation_expression_in_member_declarator1967);
				primary_or_array_creation_expression165=primary_or_array_creation_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primary_or_array_creation_expression165.Tree, primary_or_array_creation_expression165, retval);

				}


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:194:20: '=' expression
				{
				DebugLocation(194, 20);
				char_literal166=(IToken)Match(input,85,Follow._85_in_member_declarator1989); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal166_tree = (object)adaptor.Create(char_literal166, retval);
				adaptor.AddChild(root_0, char_literal166_tree);
				}
				DebugLocation(194, 26);
				PushFollow(Follow._expression_in_member_declarator1993);
				expression167=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression167.Tree, expression167, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(45); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("member_declarator", 41);
			LeaveRule("member_declarator", 41);
			LeaveRule_member_declarator();
			if (state.backtracking > 0) { Memoize(input, 41, member_declarator_StartIndex); }

		}
		DebugLocation(194, 37);
		} finally { DebugExitRule(GrammarFileName, "member_declarator"); }
		return retval;

	}
	// $ANTLR end "member_declarator"

	partial void EnterRule_primary_or_array_creation_expression();
	partial void LeaveRule_primary_or_array_creation_expression();

	// $ANTLR start "primary_or_array_creation_expression"
	// cs.g:195:1: primary_or_array_creation_expression : ( ( array_creation_expression )=> array_creation_expression | primary_expression );
	[GrammarRule("primary_or_array_creation_expression")]
	public XAstParserRuleReturnScope primary_or_array_creation_expression()
	{
		EnterRule_primary_or_array_creation_expression();
		EnterRule("primary_or_array_creation_expression", 42);
		var retval = new XAstParserRuleReturnScope("primary_or_array_creation_expression");
		
		retval.Start = (IToken)input.LT(1);
		int primary_or_array_creation_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope array_creation_expression168 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope primary_expression169 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "primary_or_array_creation_expression");
		DebugLocation(195, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// cs.g:195:37: ( ( array_creation_expression )=> array_creation_expression | primary_expression )
			int alt46=2;
			try { DebugEnterDecision(46, false);
			int LA46_0 = input.LA(1);

			if ((LA46_0==150))
			{
				int LA46_1 = input.LA(2);

				if ((EvaluatePredicate(synpred11_cs_fragment)))
				{
					alt46 = 1;
				}
				else if ((true))
				{
					alt46 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 46, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA46_0==Character_literal||LA46_0==FALSE||(LA46_0>=Hex_number && LA46_0<=IDENTIFIER)||(LA46_0>=NULL && LA46_0<=NUMBER)||LA46_0==Real_literal||LA46_0==STRINGLITERAL||LA46_0==TRUE||LA46_0==Verbatim_string_literal||LA46_0==68||LA46_0==95||(LA46_0>=97 && LA46_0<=98)||(LA46_0>=100 && LA46_0<=103)||(LA46_0>=105 && LA46_0<=106)||(LA46_0>=109 && LA46_0<=110)||(LA46_0>=114 && LA46_0<=117)||(LA46_0>=119 && LA46_0<=120)||LA46_0==122||LA46_0==126||LA46_0==129||LA46_0==132||LA46_0==135||LA46_0==138||LA46_0==141||(LA46_0>=143 && LA46_0<=144)||(LA46_0>=146 && LA46_0<=148)||(LA46_0>=151 && LA46_0<=152)||LA46_0==154||LA46_0==157||LA46_0==160||LA46_0==162||LA46_0==167||LA46_0==169||(LA46_0>=171 && LA46_0<=174)||LA46_0==177||LA46_0==180||(LA46_0>=183 && LA46_0<=187)||(LA46_0>=189 && LA46_0<=190)||LA46_0==194||LA46_0==196))
			{
				alt46 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:196:5: ( array_creation_expression )=> array_creation_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(196, 36);
				PushFollow(Follow._array_creation_expression_in_primary_or_array_creation_expression2011);
				array_creation_expression168=array_creation_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, array_creation_expression168.Tree, array_creation_expression168, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:197:7: primary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(197, 7);
				PushFollow(Follow._primary_expression_in_primary_or_array_creation_expression2019);
				primary_expression169=primary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression169.Tree, primary_expression169, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_or_array_creation_expression", 42);
			LeaveRule("primary_or_array_creation_expression", 42);
			LeaveRule_primary_or_array_creation_expression();
			if (state.backtracking > 0) { Memoize(input, 42, primary_or_array_creation_expression_StartIndex); }

		}
		DebugLocation(198, 4);
		} finally { DebugExitRule(GrammarFileName, "primary_or_array_creation_expression"); }
		return retval;

	}
	// $ANTLR end "primary_or_array_creation_expression"

	partial void EnterRule_array_creation_expression();
	partial void LeaveRule_array_creation_expression();

	// $ANTLR start "array_creation_expression"
	// cs.g:200:1: array_creation_expression : 'new' ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) ) ;
	[GrammarRule("array_creation_expression")]
	public XAstParserRuleReturnScope array_creation_expression()
	{
		EnterRule_array_creation_expression();
		EnterRule("array_creation_expression", 43);
		var retval = new XAstParserRuleReturnScope("array_creation_expression");
		
		retval.Start = (IToken)input.LT(1);
		int array_creation_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal170 = default(IToken);
		IToken char_literal172 = default(IToken);
		IToken char_literal174 = default(IToken);
		XAstParserRuleReturnScope type171 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_list173 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope rank_specifiers175 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope array_initializer176 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope arguments177 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope invocation_part178 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope invocation_part179 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope arguments180 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope array_initializer181 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope rank_specifier182 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope array_initializer183 = default(XAstParserRuleReturnScope);

		object string_literal170_tree = default(object);
		object char_literal172_tree = default(object);
		object char_literal174_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "array_creation_expression");
		DebugLocation(200, 10);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// cs.g:200:26: ( 'new' ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) ) )
			DebugEnterAlt(1);
			// cs.g:201:5: 'new' ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(201, 5);
			string_literal170=(IToken)Match(input,150,Follow._150_in_array_creation_expression2036); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal170_tree = (object)adaptor.Create(string_literal170, retval);
			adaptor.AddChild(root_0, string_literal170_tree);
			}
			DebugLocation(202, 9);
			// cs.g:202:9: ( type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer ) | rank_specifier ( array_initializer ) )
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==IDENTIFIER||LA52_0==95||(LA52_0>=97 && LA52_0<=98)||(LA52_0>=100 && LA52_0<=101)||LA52_0==103||(LA52_0>=105 && LA52_0<=106)||LA52_0==109||LA52_0==114||LA52_0==117||(LA52_0>=119 && LA52_0<=120)||LA52_0==122||LA52_0==126||LA52_0==129||LA52_0==132||LA52_0==135||LA52_0==138||LA52_0==141||(LA52_0>=143 && LA52_0<=144)||(LA52_0>=146 && LA52_0<=148)||(LA52_0>=151 && LA52_0<=152)||LA52_0==154||LA52_0==157||LA52_0==160||LA52_0==162||LA52_0==167||LA52_0==169||(LA52_0>=171 && LA52_0<=173)||LA52_0==177||LA52_0==183||(LA52_0>=185 && LA52_0<=186)||(LA52_0>=189 && LA52_0<=190)||LA52_0==192||LA52_0==194||LA52_0==196))
			{
				alt52 = 1;
			}
			else if ((LA52_0==91))
			{
				alt52 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 52, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:202:10: type ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer )
				{
				DebugLocation(202, 10);
				PushFollow(Follow._type_in_array_creation_expression2050);
				type171=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type171.Tree, type171, retval);
				DebugLocation(202, 17);
				// cs.g:202:17: ( '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ) | array_initializer )
				int alt51=2;
				try { DebugEnterSubRule(51);
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if ((LA51_0==91))
				{
					alt51 = 1;
				}
				else if ((LA51_0==197))
				{
					alt51 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:202:18: '[' expression_list ']' ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
					{
					DebugLocation(202, 18);
					char_literal172=(IToken)Match(input,91,Follow._91_in_array_creation_expression2055); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal172_tree = (object)adaptor.Create(char_literal172, retval);
					adaptor.AddChild(root_0, char_literal172_tree);
					}
					DebugLocation(202, 24);
					PushFollow(Follow._expression_list_in_array_creation_expression2059);
					expression_list173=expression_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression_list173.Tree, expression_list173, retval);
					DebugLocation(202, 42);
					char_literal174=(IToken)Match(input,92,Follow._92_in_array_creation_expression2063); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal174_tree = (object)adaptor.Create(char_literal174, retval);
					adaptor.AddChild(root_0, char_literal174_tree);
					}
					DebugLocation(203, 21);
					// cs.g:203:21: ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
					int alt50=2;
					try { DebugEnterSubRule(50);
					try { DebugEnterDecision(50, false);
					try
					{
						alt50 = dfa50.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(50); }
					switch (alt50)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:203:23: ( rank_specifiers )? ( array_initializer )?
						{
						DebugLocation(203, 23);
						// cs.g:203:23: ( rank_specifiers )?
						int alt47=2;
						try { DebugEnterSubRule(47);
						try { DebugEnterDecision(47, false);
						int LA47_0 = input.LA(1);

						if ((LA47_0==91))
						{
							alt47 = 1;
						}
						} finally { DebugExitDecision(47); }
						switch (alt47)
						{
						case 1:
							DebugEnterAlt(1);
							// cs.g:203:23: rank_specifiers
							{
							DebugLocation(203, 23);
							PushFollow(Follow._rank_specifiers_in_array_creation_expression2090);
							rank_specifiers175=rank_specifiers();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, rank_specifiers175.Tree, rank_specifiers175, retval);

							}
							break;

						}
						} finally { DebugExitSubRule(47); }

						DebugLocation(203, 42);
						// cs.g:203:42: ( array_initializer )?
						int alt48=2;
						try { DebugEnterSubRule(48);
						try { DebugEnterDecision(48, false);
						int LA48_0 = input.LA(1);

						if ((LA48_0==197))
						{
							alt48 = 1;
						}
						} finally { DebugExitDecision(48); }
						switch (alt48)
						{
						case 1:
							DebugEnterAlt(1);
							// cs.g:203:42: array_initializer
							{
							DebugLocation(203, 42);
							PushFollow(Follow._array_initializer_in_array_creation_expression2095);
							array_initializer176=array_initializer();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) adaptor.AddChild(root_0, array_initializer176.Tree, array_initializer176, retval);

							}
							break;

						}
						} finally { DebugExitSubRule(48); }


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// cs.g:205:23: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments
						{
						DebugLocation(205, 23);
						// cs.g:205:23: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )*
						try { DebugEnterSubRule(49);
						while (true)
						{
							int alt49=3;
							try { DebugEnterDecision(49, false);
							int LA49_0 = input.LA(1);

							if ((LA49_0==68))
							{
								int LA49_1 = input.LA(2);

								if ((EvaluatePredicate(synpred12_cs_fragment)))
								{
									alt49 = 1;
								}


							}
							else if ((LA49_0==DOT||LA49_0==PTR||LA49_0==91))
							{
								alt49 = 2;
							}


							} finally { DebugExitDecision(49); }
							switch ( alt49 )
							{
							case 1:
								DebugEnterAlt(1);
								// cs.g:205:25: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
								{
								DebugLocation(205, 25);
								// cs.g:205:25: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
								DebugEnterAlt(1);
								// cs.g:205:26: ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part
								{
								DebugLocation(205, 58);
								PushFollow(Follow._arguments_in_array_creation_expression2161);
								arguments177=arguments();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) adaptor.AddChild(root_0, arguments177.Tree, arguments177, retval);
								DebugLocation(205, 70);
								PushFollow(Follow._invocation_part_in_array_creation_expression2165);
								invocation_part178=invocation_part();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) adaptor.AddChild(root_0, invocation_part178.Tree, invocation_part178, retval);

								}


								}
								break;
							case 2:
								DebugEnterAlt(2);
								// cs.g:206:25: invocation_part
								{
								DebugLocation(206, 25);
								PushFollow(Follow._invocation_part_in_array_creation_expression2192);
								invocation_part179=invocation_part();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) adaptor.AddChild(root_0, invocation_part179.Tree, invocation_part179, retval);

								}
								break;

							default:
								goto loop49;
							}
						}

						loop49:
							;

						} finally { DebugExitSubRule(49); }

						DebugLocation(206, 45);
						PushFollow(Follow._arguments_in_array_creation_expression2198);
						arguments180=arguments();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, arguments180.Tree, arguments180, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(50); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:208:19: array_initializer
					{
					DebugLocation(208, 19);
					PushFollow(Follow._array_initializer_in_array_creation_expression2247);
					array_initializer181=array_initializer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, array_initializer181.Tree, array_initializer181, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(51); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:210:11: rank_specifier ( array_initializer )
				{
				DebugLocation(210, 11);
				PushFollow(Follow._rank_specifier_in_array_creation_expression2279);
				rank_specifier182=rank_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, rank_specifier182.Tree, rank_specifier182, retval);
				DebugLocation(211, 13);
				// cs.g:211:13: ( array_initializer )
				DebugEnterAlt(1);
				// cs.g:211:14: array_initializer
				{
				DebugLocation(211, 14);
				PushFollow(Follow._array_initializer_in_array_creation_expression2297);
				array_initializer183=array_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, array_initializer183.Tree, array_initializer183, retval);

				}


				}
				break;

			}
			} finally { DebugExitSubRule(52); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("array_creation_expression", 43);
			LeaveRule("array_creation_expression", 43);
			LeaveRule_array_creation_expression();
			if (state.backtracking > 0) { Memoize(input, 43, array_creation_expression_StartIndex); }

		}
		DebugLocation(213, 10);
		} finally { DebugExitRule(GrammarFileName, "array_creation_expression"); }
		return retval;

	}
	// $ANTLR end "array_creation_expression"

	partial void EnterRule_array_initializer();
	partial void LeaveRule_array_initializer();

	// $ANTLR start "array_initializer"
	// cs.g:214:1: array_initializer : '{' ( variable_initializer_list )? ( ',' )? '}' ;
	[GrammarRule("array_initializer")]
	public XAstParserRuleReturnScope array_initializer()
	{
		EnterRule_array_initializer();
		EnterRule("array_initializer", 44);
		var retval = new XAstParserRuleReturnScope("array_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int array_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal184 = default(IToken);
		IToken char_literal186 = default(IToken);
		IToken char_literal187 = default(IToken);
		XAstParserRuleReturnScope variable_initializer_list185 = default(XAstParserRuleReturnScope);

		object char_literal184_tree = default(object);
		object char_literal186_tree = default(object);
		object char_literal187_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "array_initializer");
		DebugLocation(214, 50);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// cs.g:214:18: ( '{' ( variable_initializer_list )? ( ',' )? '}' )
			DebugEnterAlt(1);
			// cs.g:215:5: '{' ( variable_initializer_list )? ( ',' )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(215, 5);
			char_literal184=(IToken)Match(input,197,Follow._197_in_array_initializer2333); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal184_tree = (object)adaptor.Create(char_literal184, retval);
			adaptor.AddChild(root_0, char_literal184_tree);
			}
			DebugLocation(215, 11);
			// cs.g:215:11: ( variable_initializer_list )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			int LA53_0 = input.LA(1);

			if ((LA53_0==Character_literal||LA53_0==FALSE||(LA53_0>=Hex_number && LA53_0<=IDENTIFIER)||(LA53_0>=MINUS && LA53_0<=NUMBER)||LA53_0==Real_literal||LA53_0==STRINGLITERAL||LA53_0==TRUE||LA53_0==Verbatim_string_literal||LA53_0==61||LA53_0==66||(LA53_0>=68 && LA53_0<=69)||(LA53_0>=71 && LA53_0<=72)||LA53_0==75||LA53_0==95||(LA53_0>=97 && LA53_0<=98)||(LA53_0>=100 && LA53_0<=103)||(LA53_0>=105 && LA53_0<=106)||(LA53_0>=109 && LA53_0<=110)||(LA53_0>=114 && LA53_0<=117)||(LA53_0>=119 && LA53_0<=120)||LA53_0==122||LA53_0==126||LA53_0==129||LA53_0==132||LA53_0==135||LA53_0==138||LA53_0==141||(LA53_0>=143 && LA53_0<=144)||(LA53_0>=146 && LA53_0<=148)||(LA53_0>=150 && LA53_0<=152)||LA53_0==154||LA53_0==157||LA53_0==160||LA53_0==162||LA53_0==167||LA53_0==169||(LA53_0>=171 && LA53_0<=174)||LA53_0==177||LA53_0==180||(LA53_0>=183 && LA53_0<=187)||(LA53_0>=189 && LA53_0<=190)||LA53_0==194||(LA53_0>=196 && LA53_0<=197)||LA53_0==202))
			{
				alt53 = 1;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:215:11: variable_initializer_list
				{
				DebugLocation(215, 11);
				PushFollow(Follow._variable_initializer_list_in_array_initializer2337);
				variable_initializer_list185=variable_initializer_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable_initializer_list185.Tree, variable_initializer_list185, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(53); }

			DebugLocation(215, 40);
			// cs.g:215:40: ( ',' )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==74))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:215:40: ','
				{
				DebugLocation(215, 40);
				char_literal186=(IToken)Match(input,74,Follow._74_in_array_initializer2342); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal186_tree = (object)adaptor.Create(char_literal186, retval);
				adaptor.AddChild(root_0, char_literal186_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(215, 47);
			char_literal187=(IToken)Match(input,201,Follow._201_in_array_initializer2347); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal187_tree = (object)adaptor.Create(char_literal187, retval);
			adaptor.AddChild(root_0, char_literal187_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("array_initializer", 44);
			LeaveRule("array_initializer", 44);
			LeaveRule_array_initializer();
			if (state.backtracking > 0) { Memoize(input, 44, array_initializer_StartIndex); }

		}
		DebugLocation(215, 50);
		} finally { DebugExitRule(GrammarFileName, "array_initializer"); }
		return retval;

	}
	// $ANTLR end "array_initializer"

	partial void EnterRule_variable_initializer_list();
	partial void LeaveRule_variable_initializer_list();

	// $ANTLR start "variable_initializer_list"
	// cs.g:216:1: variable_initializer_list : variable_initializer ( ',' variable_initializer )* ;
	[GrammarRule("variable_initializer_list")]
	public XAstParserRuleReturnScope variable_initializer_list()
	{
		EnterRule_variable_initializer_list();
		EnterRule("variable_initializer_list", 45);
		var retval = new XAstParserRuleReturnScope("variable_initializer_list");
		
		retval.Start = (IToken)input.LT(1);
		int variable_initializer_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal189 = default(IToken);
		XAstParserRuleReturnScope variable_initializer188 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variable_initializer190 = default(XAstParserRuleReturnScope);

		object char_literal189_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variable_initializer_list");
		DebugLocation(216, 53);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// cs.g:216:26: ( variable_initializer ( ',' variable_initializer )* )
			DebugEnterAlt(1);
			// cs.g:217:5: variable_initializer ( ',' variable_initializer )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(217, 5);
			PushFollow(Follow._variable_initializer_in_variable_initializer_list2358);
			variable_initializer188=variable_initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variable_initializer188.Tree, variable_initializer188, retval);
			DebugLocation(217, 26);
			// cs.g:217:26: ( ',' variable_initializer )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==74))
				{
					int LA55_1 = input.LA(2);

					if ((LA55_1==Character_literal||LA55_1==FALSE||(LA55_1>=Hex_number && LA55_1<=IDENTIFIER)||(LA55_1>=MINUS && LA55_1<=NUMBER)||LA55_1==Real_literal||LA55_1==STRINGLITERAL||LA55_1==TRUE||LA55_1==Verbatim_string_literal||LA55_1==61||LA55_1==66||(LA55_1>=68 && LA55_1<=69)||(LA55_1>=71 && LA55_1<=72)||LA55_1==75||LA55_1==95||(LA55_1>=97 && LA55_1<=98)||(LA55_1>=100 && LA55_1<=103)||(LA55_1>=105 && LA55_1<=106)||(LA55_1>=109 && LA55_1<=110)||(LA55_1>=114 && LA55_1<=117)||(LA55_1>=119 && LA55_1<=120)||LA55_1==122||LA55_1==126||LA55_1==129||LA55_1==132||LA55_1==135||LA55_1==138||LA55_1==141||(LA55_1>=143 && LA55_1<=144)||(LA55_1>=146 && LA55_1<=148)||(LA55_1>=150 && LA55_1<=152)||LA55_1==154||LA55_1==157||LA55_1==160||LA55_1==162||LA55_1==167||LA55_1==169||(LA55_1>=171 && LA55_1<=174)||LA55_1==177||LA55_1==180||(LA55_1>=183 && LA55_1<=187)||(LA55_1>=189 && LA55_1<=190)||LA55_1==194||(LA55_1>=196 && LA55_1<=197)||LA55_1==202))
					{
						alt55 = 1;
					}


				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:217:27: ',' variable_initializer
					{
					DebugLocation(217, 27);
					char_literal189=(IToken)Match(input,74,Follow._74_in_variable_initializer_list2361); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal189_tree = (object)adaptor.Create(char_literal189, retval);
					adaptor.AddChild(root_0, char_literal189_tree);
					}
					DebugLocation(217, 31);
					PushFollow(Follow._variable_initializer_in_variable_initializer_list2363);
					variable_initializer190=variable_initializer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variable_initializer190.Tree, variable_initializer190, retval);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable_initializer_list", 45);
			LeaveRule("variable_initializer_list", 45);
			LeaveRule_variable_initializer_list();
			if (state.backtracking > 0) { Memoize(input, 45, variable_initializer_list_StartIndex); }

		}
		DebugLocation(217, 53);
		} finally { DebugExitRule(GrammarFileName, "variable_initializer_list"); }
		return retval;

	}
	// $ANTLR end "variable_initializer_list"

	partial void EnterRule_variable_initializer();
	partial void LeaveRule_variable_initializer();

	// $ANTLR start "variable_initializer"
	// cs.g:218:1: variable_initializer : ( expression | array_initializer );
	[GrammarRule("variable_initializer")]
	public XAstParserRuleReturnScope variable_initializer()
	{
		EnterRule_variable_initializer();
		EnterRule("variable_initializer", 46);
		var retval = new XAstParserRuleReturnScope("variable_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int variable_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope expression191 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope array_initializer192 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "variable_initializer");
		DebugLocation(218, 35);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// cs.g:218:21: ( expression | array_initializer )
			int alt56=2;
			try { DebugEnterDecision(56, false);
			int LA56_0 = input.LA(1);

			if ((LA56_0==Character_literal||LA56_0==FALSE||(LA56_0>=Hex_number && LA56_0<=IDENTIFIER)||(LA56_0>=MINUS && LA56_0<=NUMBER)||LA56_0==Real_literal||LA56_0==STRINGLITERAL||LA56_0==TRUE||LA56_0==Verbatim_string_literal||LA56_0==61||LA56_0==66||(LA56_0>=68 && LA56_0<=69)||(LA56_0>=71 && LA56_0<=72)||LA56_0==75||LA56_0==95||(LA56_0>=97 && LA56_0<=98)||(LA56_0>=100 && LA56_0<=103)||(LA56_0>=105 && LA56_0<=106)||(LA56_0>=109 && LA56_0<=110)||(LA56_0>=114 && LA56_0<=117)||(LA56_0>=119 && LA56_0<=120)||LA56_0==122||LA56_0==126||LA56_0==129||LA56_0==132||LA56_0==135||LA56_0==138||LA56_0==141||(LA56_0>=143 && LA56_0<=144)||(LA56_0>=146 && LA56_0<=148)||(LA56_0>=150 && LA56_0<=152)||LA56_0==154||LA56_0==157||LA56_0==160||LA56_0==162||LA56_0==167||LA56_0==169||(LA56_0>=171 && LA56_0<=174)||LA56_0==177||LA56_0==180||(LA56_0>=183 && LA56_0<=187)||(LA56_0>=189 && LA56_0<=190)||LA56_0==194||LA56_0==196||LA56_0==202))
			{
				alt56 = 1;
			}
			else if ((LA56_0==197))
			{
				alt56 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:219:5: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(219, 5);
				PushFollow(Follow._expression_in_variable_initializer2376);
				expression191=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression191.Tree, expression191, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:219:18: array_initializer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(219, 18);
				PushFollow(Follow._array_initializer_in_variable_initializer2380);
				array_initializer192=array_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, array_initializer192.Tree, array_initializer192, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable_initializer", 46);
			LeaveRule("variable_initializer", 46);
			LeaveRule_variable_initializer();
			if (state.backtracking > 0) { Memoize(input, 46, variable_initializer_StartIndex); }

		}
		DebugLocation(219, 35);
		} finally { DebugExitRule(GrammarFileName, "variable_initializer"); }
		return retval;

	}
	// $ANTLR end "variable_initializer"

	partial void EnterRule_sizeof_expression();
	partial void LeaveRule_sizeof_expression();

	// $ANTLR start "sizeof_expression"
	// cs.g:220:1: sizeof_expression : 'sizeof' '(' unmanaged_type ')' ;
	[GrammarRule("sizeof_expression")]
	public XAstParserRuleReturnScope sizeof_expression()
	{
		EnterRule_sizeof_expression();
		EnterRule("sizeof_expression", 47);
		var retval = new XAstParserRuleReturnScope("sizeof_expression");
		
		retval.Start = (IToken)input.LT(1);
		int sizeof_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal193 = default(IToken);
		IToken char_literal194 = default(IToken);
		IToken char_literal196 = default(IToken);
		XAstParserRuleReturnScope unmanaged_type195 = default(XAstParserRuleReturnScope);

		object string_literal193_tree = default(object);
		object char_literal194_tree = default(object);
		object char_literal196_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "sizeof_expression");
		DebugLocation(220, 41);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// cs.g:220:18: ( 'sizeof' '(' unmanaged_type ')' )
			DebugEnterAlt(1);
			// cs.g:221:5: 'sizeof' '(' unmanaged_type ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(221, 5);
			string_literal193=(IToken)Match(input,174,Follow._174_in_sizeof_expression2391); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal193_tree = (object)adaptor.Create(string_literal193, retval);
			adaptor.AddChild(root_0, string_literal193_tree);
			}
			DebugLocation(221, 16);
			char_literal194=(IToken)Match(input,68,Follow._68_in_sizeof_expression2395); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal194_tree = (object)adaptor.Create(char_literal194, retval);
			adaptor.AddChild(root_0, char_literal194_tree);
			}
			DebugLocation(221, 22);
			PushFollow(Follow._unmanaged_type_in_sizeof_expression2399);
			unmanaged_type195=unmanaged_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unmanaged_type195.Tree, unmanaged_type195, retval);
			DebugLocation(221, 39);
			char_literal196=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_sizeof_expression2403), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal196_tree = (object)adaptor.Create(char_literal196, retval);
			adaptor.AddChild(root_0, char_literal196_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sizeof_expression", 47);
			LeaveRule("sizeof_expression", 47);
			LeaveRule_sizeof_expression();
			if (state.backtracking > 0) { Memoize(input, 47, sizeof_expression_StartIndex); }

		}
		DebugLocation(221, 41);
		} finally { DebugExitRule(GrammarFileName, "sizeof_expression"); }
		return retval;

	}
	// $ANTLR end "sizeof_expression"

	partial void EnterRule_checked_expression();
	partial void LeaveRule_checked_expression();

	// $ANTLR start "checked_expression"
	// cs.g:222:1: checked_expression : 'checked' '(' expression ')' ;
	[GrammarRule("checked_expression")]
	public XAstParserRuleReturnScope checked_expression()
	{
		EnterRule_checked_expression();
		EnterRule("checked_expression", 48);
		var retval = new XAstParserRuleReturnScope("checked_expression");
		
		retval.Start = (IToken)input.LT(1);
		int checked_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal197 = default(IToken);
		IToken char_literal198 = default(IToken);
		IToken char_literal200 = default(IToken);
		XAstParserRuleReturnScope expression199 = default(XAstParserRuleReturnScope);

		object string_literal197_tree = default(object);
		object char_literal198_tree = default(object);
		object char_literal200_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "checked_expression");
		DebugLocation(222, 39);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// cs.g:222:19: ( 'checked' '(' expression ')' )
			DebugEnterAlt(1);
			// cs.g:223:5: 'checked' '(' expression ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(223, 5);
			string_literal197=(IToken)Match(input,110,Follow._110_in_checked_expression2414); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal197_tree = (object)adaptor.Create(string_literal197, retval);
			adaptor.AddChild(root_0, string_literal197_tree);
			}
			DebugLocation(223, 17);
			char_literal198=(IToken)Match(input,68,Follow._68_in_checked_expression2418); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal198_tree = (object)adaptor.Create(char_literal198, retval);
			adaptor.AddChild(root_0, char_literal198_tree);
			}
			DebugLocation(223, 23);
			PushFollow(Follow._expression_in_checked_expression2422);
			expression199=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression199.Tree, expression199, retval);
			DebugLocation(223, 36);
			char_literal200=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_checked_expression2426), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal200_tree = (object)adaptor.Create(char_literal200, retval);
			adaptor.AddChild(root_0, char_literal200_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("checked_expression", 48);
			LeaveRule("checked_expression", 48);
			LeaveRule_checked_expression();
			if (state.backtracking > 0) { Memoize(input, 48, checked_expression_StartIndex); }

		}
		DebugLocation(223, 39);
		} finally { DebugExitRule(GrammarFileName, "checked_expression"); }
		return retval;

	}
	// $ANTLR end "checked_expression"

	partial void EnterRule_unchecked_expression();
	partial void LeaveRule_unchecked_expression();

	// $ANTLR start "unchecked_expression"
	// cs.g:224:1: unchecked_expression : 'unchecked' '(' expression ')' ;
	[GrammarRule("unchecked_expression")]
	public XAstParserRuleReturnScope unchecked_expression()
	{
		EnterRule_unchecked_expression();
		EnterRule("unchecked_expression", 49);
		var retval = new XAstParserRuleReturnScope("unchecked_expression");
		
		retval.Start = (IToken)input.LT(1);
		int unchecked_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal201 = default(IToken);
		IToken char_literal202 = default(IToken);
		IToken char_literal204 = default(IToken);
		XAstParserRuleReturnScope expression203 = default(XAstParserRuleReturnScope);

		object string_literal201_tree = default(object);
		object char_literal202_tree = default(object);
		object char_literal204_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unchecked_expression");
		DebugLocation(224, 41);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// cs.g:224:21: ( 'unchecked' '(' expression ')' )
			DebugEnterAlt(1);
			// cs.g:225:5: 'unchecked' '(' expression ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(225, 5);
			string_literal201=(IToken)Match(input,187,Follow._187_in_unchecked_expression2438); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal201_tree = (object)adaptor.Create(string_literal201, retval);
			adaptor.AddChild(root_0, string_literal201_tree);
			}
			DebugLocation(225, 19);
			char_literal202=(IToken)Match(input,68,Follow._68_in_unchecked_expression2442); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal202_tree = (object)adaptor.Create(char_literal202, retval);
			adaptor.AddChild(root_0, char_literal202_tree);
			}
			DebugLocation(225, 25);
			PushFollow(Follow._expression_in_unchecked_expression2446);
			expression203=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression203.Tree, expression203, retval);
			DebugLocation(225, 38);
			char_literal204=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_unchecked_expression2450), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal204_tree = (object)adaptor.Create(char_literal204, retval);
			adaptor.AddChild(root_0, char_literal204_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unchecked_expression", 49);
			LeaveRule("unchecked_expression", 49);
			LeaveRule_unchecked_expression();
			if (state.backtracking > 0) { Memoize(input, 49, unchecked_expression_StartIndex); }

		}
		DebugLocation(225, 41);
		} finally { DebugExitRule(GrammarFileName, "unchecked_expression"); }
		return retval;

	}
	// $ANTLR end "unchecked_expression"

	partial void EnterRule_default_value_expression();
	partial void LeaveRule_default_value_expression();

	// $ANTLR start "default_value_expression"
	// cs.g:226:1: default_value_expression : 'default' '(' type ')' ;
	[GrammarRule("default_value_expression")]
	public XAstParserRuleReturnScope default_value_expression()
	{
		EnterRule_default_value_expression();
		EnterRule("default_value_expression", 50);
		var retval = new XAstParserRuleReturnScope("default_value_expression");
		
		retval.Start = (IToken)input.LT(1);
		int default_value_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal205 = default(IToken);
		IToken char_literal206 = default(IToken);
		IToken char_literal208 = default(IToken);
		XAstParserRuleReturnScope type207 = default(XAstParserRuleReturnScope);

		object string_literal205_tree = default(object);
		object char_literal206_tree = default(object);
		object char_literal208_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "default_value_expression");
		DebugLocation(226, 33);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// cs.g:226:25: ( 'default' '(' type ')' )
			DebugEnterAlt(1);
			// cs.g:227:5: 'default' '(' type ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(227, 5);
			string_literal205=(IToken)Match(input,115,Follow._115_in_default_value_expression2462); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal205_tree = (object)adaptor.Create(string_literal205, retval);
			adaptor.AddChild(root_0, string_literal205_tree);
			}
			DebugLocation(227, 17);
			char_literal206=(IToken)Match(input,68,Follow._68_in_default_value_expression2466); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal206_tree = (object)adaptor.Create(char_literal206, retval);
			adaptor.AddChild(root_0, char_literal206_tree);
			}
			DebugLocation(227, 23);
			PushFollow(Follow._type_in_default_value_expression2470);
			type207=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type207.Tree, type207, retval);
			DebugLocation(227, 30);
			char_literal208=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_default_value_expression2474), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal208_tree = (object)adaptor.Create(char_literal208, retval);
			adaptor.AddChild(root_0, char_literal208_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("default_value_expression", 50);
			LeaveRule("default_value_expression", 50);
			LeaveRule_default_value_expression();
			if (state.backtracking > 0) { Memoize(input, 50, default_value_expression_StartIndex); }

		}
		DebugLocation(227, 33);
		} finally { DebugExitRule(GrammarFileName, "default_value_expression"); }
		return retval;

	}
	// $ANTLR end "default_value_expression"

	partial void EnterRule_anonymous_method_expression();
	partial void LeaveRule_anonymous_method_expression();

	// $ANTLR start "anonymous_method_expression"
	// cs.g:228:1: anonymous_method_expression : 'delegate' ( explicit_anonymous_function_signature )? block ;
	[GrammarRule("anonymous_method_expression")]
	public XAstParserRuleReturnScope anonymous_method_expression()
	{
		EnterRule_anonymous_method_expression();
		EnterRule("anonymous_method_expression", 51);
		var retval = new XAstParserRuleReturnScope("anonymous_method_expression");
		
		retval.Start = (IToken)input.LT(1);
		int anonymous_method_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal209 = default(IToken);
		XAstParserRuleReturnScope explicit_anonymous_function_signature210 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope block211 = default(XAstParserRuleReturnScope);

		object string_literal209_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "anonymous_method_expression");
		DebugLocation(228, 63);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// cs.g:228:28: ( 'delegate' ( explicit_anonymous_function_signature )? block )
			DebugEnterAlt(1);
			// cs.g:229:5: 'delegate' ( explicit_anonymous_function_signature )? block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(229, 5);
			string_literal209=(IToken)Match(input,116,Follow._116_in_anonymous_method_expression2485); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal209_tree = (object)adaptor.Create(string_literal209, retval);
			adaptor.AddChild(root_0, string_literal209_tree);
			}
			DebugLocation(229, 18);
			// cs.g:229:18: ( explicit_anonymous_function_signature )?
			int alt57=2;
			try { DebugEnterSubRule(57);
			try { DebugEnterDecision(57, false);
			int LA57_0 = input.LA(1);

			if ((LA57_0==68))
			{
				alt57 = 1;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:229:18: explicit_anonymous_function_signature
				{
				DebugLocation(229, 18);
				PushFollow(Follow._explicit_anonymous_function_signature_in_anonymous_method_expression2489);
				explicit_anonymous_function_signature210=explicit_anonymous_function_signature();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, explicit_anonymous_function_signature210.Tree, explicit_anonymous_function_signature210, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(57); }

			DebugLocation(229, 59);
			PushFollow(Follow._block_in_anonymous_method_expression2494);
			block211=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block211.Tree, block211, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymous_method_expression", 51);
			LeaveRule("anonymous_method_expression", 51);
			LeaveRule_anonymous_method_expression();
			if (state.backtracking > 0) { Memoize(input, 51, anonymous_method_expression_StartIndex); }

		}
		DebugLocation(229, 63);
		} finally { DebugExitRule(GrammarFileName, "anonymous_method_expression"); }
		return retval;

	}
	// $ANTLR end "anonymous_method_expression"

	partial void EnterRule_explicit_anonymous_function_signature();
	partial void LeaveRule_explicit_anonymous_function_signature();

	// $ANTLR start "explicit_anonymous_function_signature"
	// cs.g:230:1: explicit_anonymous_function_signature : '(' ( explicit_anonymous_function_parameter_list )? ')' ;
	[GrammarRule("explicit_anonymous_function_signature")]
	public XAstParserRuleReturnScope explicit_anonymous_function_signature()
	{
		EnterRule_explicit_anonymous_function_signature();
		EnterRule("explicit_anonymous_function_signature", 52);
		var retval = new XAstParserRuleReturnScope("explicit_anonymous_function_signature");
		
		retval.Start = (IToken)input.LT(1);
		int explicit_anonymous_function_signature_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal212 = default(IToken);
		IToken char_literal214 = default(IToken);
		XAstParserRuleReturnScope explicit_anonymous_function_parameter_list213 = default(XAstParserRuleReturnScope);

		object char_literal212_tree = default(object);
		object char_literal214_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "explicit_anonymous_function_signature");
		DebugLocation(230, 60);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// cs.g:230:38: ( '(' ( explicit_anonymous_function_parameter_list )? ')' )
			DebugEnterAlt(1);
			// cs.g:231:5: '(' ( explicit_anonymous_function_parameter_list )? ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(231, 5);
			char_literal212=(IToken)Match(input,68,Follow._68_in_explicit_anonymous_function_signature2504); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal212_tree = (object)adaptor.Create(char_literal212, retval);
			adaptor.AddChild(root_0, char_literal212_tree);
			}
			DebugLocation(231, 11);
			// cs.g:231:11: ( explicit_anonymous_function_parameter_list )?
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if ((LA58_0==IDENTIFIER||LA58_0==95||(LA58_0>=97 && LA58_0<=98)||(LA58_0>=100 && LA58_0<=101)||LA58_0==103||(LA58_0>=105 && LA58_0<=106)||LA58_0==109||LA58_0==114||LA58_0==117||(LA58_0>=119 && LA58_0<=120)||LA58_0==122||LA58_0==126||LA58_0==129||LA58_0==132||LA58_0==135||LA58_0==138||LA58_0==141||(LA58_0>=143 && LA58_0<=144)||(LA58_0>=146 && LA58_0<=148)||(LA58_0>=151 && LA58_0<=152)||(LA58_0>=154 && LA58_0<=155)||LA58_0==157||LA58_0==160||LA58_0==162||(LA58_0>=166 && LA58_0<=167)||LA58_0==169||(LA58_0>=171 && LA58_0<=173)||LA58_0==177||LA58_0==183||(LA58_0>=185 && LA58_0<=186)||(LA58_0>=189 && LA58_0<=190)||LA58_0==192||LA58_0==194||LA58_0==196))
			{
				alt58 = 1;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:231:11: explicit_anonymous_function_parameter_list
				{
				DebugLocation(231, 11);
				PushFollow(Follow._explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature2508);
				explicit_anonymous_function_parameter_list213=explicit_anonymous_function_parameter_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, explicit_anonymous_function_parameter_list213.Tree, explicit_anonymous_function_parameter_list213, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(58); }

			DebugLocation(231, 57);
			char_literal214=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_explicit_anonymous_function_signature2513), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal214_tree = (object)adaptor.Create(char_literal214, retval);
			adaptor.AddChild(root_0, char_literal214_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("explicit_anonymous_function_signature", 52);
			LeaveRule("explicit_anonymous_function_signature", 52);
			LeaveRule_explicit_anonymous_function_signature();
			if (state.backtracking > 0) { Memoize(input, 52, explicit_anonymous_function_signature_StartIndex); }

		}
		DebugLocation(231, 60);
		} finally { DebugExitRule(GrammarFileName, "explicit_anonymous_function_signature"); }
		return retval;

	}
	// $ANTLR end "explicit_anonymous_function_signature"

	partial void EnterRule_explicit_anonymous_function_parameter_list();
	partial void LeaveRule_explicit_anonymous_function_parameter_list();

	// $ANTLR start "explicit_anonymous_function_parameter_list"
	// cs.g:232:1: explicit_anonymous_function_parameter_list : explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )* ;
	[GrammarRule("explicit_anonymous_function_parameter_list")]
	public XAstParserRuleReturnScope explicit_anonymous_function_parameter_list()
	{
		EnterRule_explicit_anonymous_function_parameter_list();
		EnterRule("explicit_anonymous_function_parameter_list", 53);
		var retval = new XAstParserRuleReturnScope("explicit_anonymous_function_parameter_list");
		
		retval.Start = (IToken)input.LT(1);
		int explicit_anonymous_function_parameter_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal216 = default(IToken);
		XAstParserRuleReturnScope explicit_anonymous_function_parameter215 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope explicit_anonymous_function_parameter217 = default(XAstParserRuleReturnScope);

		object char_literal216_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "explicit_anonymous_function_parameter_list");
		DebugLocation(232, 91);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// cs.g:232:43: ( explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )* )
			DebugEnterAlt(1);
			// cs.g:233:5: explicit_anonymous_function_parameter ( ',' explicit_anonymous_function_parameter )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(233, 5);
			PushFollow(Follow._explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list2524);
			explicit_anonymous_function_parameter215=explicit_anonymous_function_parameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, explicit_anonymous_function_parameter215.Tree, explicit_anonymous_function_parameter215, retval);
			DebugLocation(233, 45);
			// cs.g:233:45: ( ',' explicit_anonymous_function_parameter )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if ((LA59_0==74))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:233:46: ',' explicit_anonymous_function_parameter
					{
					DebugLocation(233, 46);
					char_literal216=(IToken)Match(input,74,Follow._74_in_explicit_anonymous_function_parameter_list2529); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal216_tree = (object)adaptor.Create(char_literal216, retval);
					adaptor.AddChild(root_0, char_literal216_tree);
					}
					DebugLocation(233, 52);
					PushFollow(Follow._explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list2533);
					explicit_anonymous_function_parameter217=explicit_anonymous_function_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, explicit_anonymous_function_parameter217.Tree, explicit_anonymous_function_parameter217, retval);

					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("explicit_anonymous_function_parameter_list", 53);
			LeaveRule("explicit_anonymous_function_parameter_list", 53);
			LeaveRule_explicit_anonymous_function_parameter_list();
			if (state.backtracking > 0) { Memoize(input, 53, explicit_anonymous_function_parameter_list_StartIndex); }

		}
		DebugLocation(233, 91);
		} finally { DebugExitRule(GrammarFileName, "explicit_anonymous_function_parameter_list"); }
		return retval;

	}
	// $ANTLR end "explicit_anonymous_function_parameter_list"

	partial void EnterRule_explicit_anonymous_function_parameter();
	partial void LeaveRule_explicit_anonymous_function_parameter();

	// $ANTLR start "explicit_anonymous_function_parameter"
	// cs.g:234:1: explicit_anonymous_function_parameter : ( anonymous_function_parameter_modifier )? type identifier ;
	[GrammarRule("explicit_anonymous_function_parameter")]
	public XAstParserRuleReturnScope explicit_anonymous_function_parameter()
	{
		EnterRule_explicit_anonymous_function_parameter();
		EnterRule("explicit_anonymous_function_parameter", 54);
		var retval = new XAstParserRuleReturnScope("explicit_anonymous_function_parameter");
		
		retval.Start = (IToken)input.LT(1);
		int explicit_anonymous_function_parameter_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope anonymous_function_parameter_modifier218 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type219 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier220 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "explicit_anonymous_function_parameter");
		DebugLocation(234, 62);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// cs.g:234:38: ( ( anonymous_function_parameter_modifier )? type identifier )
			DebugEnterAlt(1);
			// cs.g:235:5: ( anonymous_function_parameter_modifier )? type identifier
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(235, 5);
			// cs.g:235:5: ( anonymous_function_parameter_modifier )?
			int alt60=2;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, false);
			int LA60_0 = input.LA(1);

			if ((LA60_0==155||LA60_0==166))
			{
				alt60 = 1;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:235:5: anonymous_function_parameter_modifier
				{
				DebugLocation(235, 5);
				PushFollow(Follow._anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter2547);
				anonymous_function_parameter_modifier218=anonymous_function_parameter_modifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, anonymous_function_parameter_modifier218.Tree, anonymous_function_parameter_modifier218, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(60); }

			DebugLocation(235, 46);
			PushFollow(Follow._type_in_explicit_anonymous_function_parameter2552);
			type219=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type219.Tree, type219, retval);
			DebugLocation(235, 53);
			PushFollow(Follow._identifier_in_explicit_anonymous_function_parameter2556);
			identifier220=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier220.Tree, identifier220, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("explicit_anonymous_function_parameter", 54);
			LeaveRule("explicit_anonymous_function_parameter", 54);
			LeaveRule_explicit_anonymous_function_parameter();
			if (state.backtracking > 0) { Memoize(input, 54, explicit_anonymous_function_parameter_StartIndex); }

		}
		DebugLocation(235, 62);
		} finally { DebugExitRule(GrammarFileName, "explicit_anonymous_function_parameter"); }
		return retval;

	}
	// $ANTLR end "explicit_anonymous_function_parameter"

	partial void EnterRule_anonymous_function_parameter_modifier();
	partial void LeaveRule_anonymous_function_parameter_modifier();

	// $ANTLR start "anonymous_function_parameter_modifier"
	// cs.g:236:1: anonymous_function_parameter_modifier : ( 'ref' | 'out' );
	[GrammarRule("anonymous_function_parameter_modifier")]
	public XAstParserRuleReturnScope anonymous_function_parameter_modifier()
	{
		EnterRule_anonymous_function_parameter_modifier();
		EnterRule("anonymous_function_parameter_modifier", 55);
		var retval = new XAstParserRuleReturnScope("anonymous_function_parameter_modifier");
		
		retval.Start = (IToken)input.LT(1);
		int anonymous_function_parameter_modifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set221 = default(IToken);

		object set221_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "anonymous_function_parameter_modifier");
		DebugLocation(236, 17);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// cs.g:236:38: ( 'ref' | 'out' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(236, 38);

			set221=(IToken)input.LT(1);
			if (input.LA(1)==155||input.LA(1)==166)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set221, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymous_function_parameter_modifier", 55);
			LeaveRule("anonymous_function_parameter_modifier", 55);
			LeaveRule_anonymous_function_parameter_modifier();
			if (state.backtracking > 0) { Memoize(input, 55, anonymous_function_parameter_modifier_StartIndex); }

		}
		DebugLocation(237, 17);
		} finally { DebugExitRule(GrammarFileName, "anonymous_function_parameter_modifier"); }
		return retval;

	}
	// $ANTLR end "anonymous_function_parameter_modifier"

	partial void EnterRule_object_creation_expression();
	partial void LeaveRule_object_creation_expression();

	// $ANTLR start "object_creation_expression"
	// cs.g:241:1: object_creation_expression : type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer ) ;
	[GrammarRule("object_creation_expression")]
	public XAstParserRuleReturnScope object_creation_expression()
	{
		EnterRule_object_creation_expression();
		EnterRule("object_creation_expression", 56);
		var retval = new XAstParserRuleReturnScope("object_creation_expression");
		
		retval.Start = (IToken)input.LT(1);
		int object_creation_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal223 = default(IToken);
		IToken char_literal225 = default(IToken);
		XAstParserRuleReturnScope type222 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope argument_list224 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope object_or_collection_initializer226 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope object_or_collection_initializer227 = default(XAstParserRuleReturnScope);

		object char_literal223_tree = default(object);
		object char_literal225_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "object_creation_expression");
		DebugLocation(241, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// cs.g:241:27: ( type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer ) )
			DebugEnterAlt(1);
			// cs.g:243:5: type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(243, 5);
			PushFollow(Follow._type_in_object_creation_expression2589);
			type222=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type222.Tree, type222, retval);
			DebugLocation(244, 9);
			// cs.g:244:9: ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer )
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==68))
			{
				alt63 = 1;
			}
			else if ((LA63_0==197))
			{
				alt63 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:244:11: '(' ( argument_list )? ')' ( object_or_collection_initializer )?
				{
				DebugLocation(244, 11);
				char_literal223=(IToken)Match(input,68,Follow._68_in_object_creation_expression2604); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal223_tree = (object)adaptor.Create(char_literal223, retval);
				adaptor.AddChild(root_0, char_literal223_tree);
				}
				DebugLocation(244, 17);
				// cs.g:244:17: ( argument_list )?
				int alt61=2;
				try { DebugEnterSubRule(61);
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==Character_literal||LA61_0==FALSE||(LA61_0>=Hex_number && LA61_0<=IDENTIFIER)||(LA61_0>=MINUS && LA61_0<=NUMBER)||LA61_0==Real_literal||LA61_0==STRINGLITERAL||LA61_0==TRUE||LA61_0==Verbatim_string_literal||LA61_0==61||LA61_0==66||(LA61_0>=68 && LA61_0<=69)||(LA61_0>=71 && LA61_0<=72)||LA61_0==75||LA61_0==95||(LA61_0>=97 && LA61_0<=98)||(LA61_0>=100 && LA61_0<=103)||(LA61_0>=105 && LA61_0<=106)||(LA61_0>=109 && LA61_0<=110)||(LA61_0>=114 && LA61_0<=117)||(LA61_0>=119 && LA61_0<=120)||LA61_0==122||LA61_0==126||LA61_0==129||LA61_0==132||LA61_0==135||LA61_0==138||LA61_0==141||(LA61_0>=143 && LA61_0<=144)||(LA61_0>=146 && LA61_0<=148)||(LA61_0>=150 && LA61_0<=152)||(LA61_0>=154 && LA61_0<=155)||LA61_0==157||LA61_0==160||LA61_0==162||(LA61_0>=166 && LA61_0<=167)||LA61_0==169||(LA61_0>=171 && LA61_0<=174)||LA61_0==177||LA61_0==180||(LA61_0>=183 && LA61_0<=187)||(LA61_0>=189 && LA61_0<=190)||LA61_0==194||LA61_0==196||LA61_0==202))
				{
					alt61 = 1;
				}
				} finally { DebugExitDecision(61); }
				switch (alt61)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:244:17: argument_list
					{
					DebugLocation(244, 17);
					PushFollow(Follow._argument_list_in_object_creation_expression2608);
					argument_list224=argument_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, argument_list224.Tree, argument_list224, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(61); }

				DebugLocation(244, 34);
				char_literal225=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_object_creation_expression2613), "RPAREN"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal225_tree = (object)adaptor.Create(char_literal225, retval);
				adaptor.AddChild(root_0, char_literal225_tree);
				}
				DebugLocation(244, 40);
				// cs.g:244:40: ( object_or_collection_initializer )?
				int alt62=2;
				try { DebugEnterSubRule(62);
				try { DebugEnterDecision(62, false);
				int LA62_0 = input.LA(1);

				if ((LA62_0==197))
				{
					alt62 = 1;
				}
				} finally { DebugExitDecision(62); }
				switch (alt62)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:244:40: object_or_collection_initializer
					{
					DebugLocation(244, 40);
					PushFollow(Follow._object_or_collection_initializer_in_object_creation_expression2617);
					object_or_collection_initializer226=object_or_collection_initializer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, object_or_collection_initializer226.Tree, object_or_collection_initializer226, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(62); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:245:13: object_or_collection_initializer
				{
				DebugLocation(245, 13);
				PushFollow(Follow._object_or_collection_initializer_in_object_creation_expression2634);
				object_or_collection_initializer227=object_or_collection_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, object_or_collection_initializer227.Tree, object_or_collection_initializer227, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("object_creation_expression", 56);
			LeaveRule("object_creation_expression", 56);
			LeaveRule_object_creation_expression();
			if (state.backtracking > 0) { Memoize(input, 56, object_creation_expression_StartIndex); }

		}
		DebugLocation(246, 4);
		} finally { DebugExitRule(GrammarFileName, "object_creation_expression"); }
		return retval;

	}
	// $ANTLR end "object_creation_expression"

	partial void EnterRule_object_or_collection_initializer();
	partial void LeaveRule_object_or_collection_initializer();

	// $ANTLR start "object_or_collection_initializer"
	// cs.g:247:1: object_or_collection_initializer : '{' ( object_initializer | collection_initializer ) ;
	[GrammarRule("object_or_collection_initializer")]
	public XAstParserRuleReturnScope object_or_collection_initializer()
	{
		EnterRule_object_or_collection_initializer();
		EnterRule("object_or_collection_initializer", 57);
		var retval = new XAstParserRuleReturnScope("object_or_collection_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int object_or_collection_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal228 = default(IToken);
		XAstParserRuleReturnScope object_initializer229 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope collection_initializer230 = default(XAstParserRuleReturnScope);

		object char_literal228_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "object_or_collection_initializer");
		DebugLocation(247, 34);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// cs.g:247:33: ( '{' ( object_initializer | collection_initializer ) )
			DebugEnterAlt(1);
			// cs.g:248:5: '{' ( object_initializer | collection_initializer )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(248, 5);
			char_literal228=(IToken)Match(input,197,Follow._197_in_object_or_collection_initializer2652); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal228_tree = (object)adaptor.Create(char_literal228, retval);
			adaptor.AddChild(root_0, char_literal228_tree);
			}
			DebugLocation(248, 10);
			// cs.g:248:10: ( object_initializer | collection_initializer )
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			switch (input.LA(1))
			{
			case 132:
				{
				int LA64_1 = input.LA(2);

				if ((LA64_1==85))
				{
					alt64 = 1;
				}
				else if ((LA64_1==DOT||LA64_1==GT||LA64_1==IDENTIFIER||LA64_1==MINUS||LA64_1==PTR||(LA64_1>=62 && LA64_1<=63)||(LA64_1>=65 && LA64_1<=66)||(LA64_1>=68 && LA64_1<=69)||(LA64_1>=71 && LA64_1<=72)||(LA64_1>=74 && LA64_1<=75)||LA64_1==77||(LA64_1>=80 && LA64_1<=82)||LA64_1==84||(LA64_1>=86 && LA64_1<=91)||LA64_1==93||LA64_1==95||(LA64_1>=97 && LA64_1<=101)||LA64_1==103||(LA64_1>=105 && LA64_1<=106)||LA64_1==109||LA64_1==114||LA64_1==117||(LA64_1>=119 && LA64_1<=120)||LA64_1==122||LA64_1==126||LA64_1==129||LA64_1==132||LA64_1==135||LA64_1==138||(LA64_1>=141 && LA64_1<=144)||(LA64_1>=146 && LA64_1<=148)||(LA64_1>=151 && LA64_1<=152)||LA64_1==154||LA64_1==157||LA64_1==160||LA64_1==162||LA64_1==167||LA64_1==169||(LA64_1>=171 && LA64_1<=173)||LA64_1==177||LA64_1==183||(LA64_1>=185 && LA64_1<=186)||(LA64_1>=189 && LA64_1<=190)||LA64_1==192||LA64_1==194||LA64_1==196||LA64_1==198||(LA64_1>=200 && LA64_1<=201)))
				{
					alt64 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 64, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 74:
			case 201:
				{
				alt64 = 1;
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case MINUS:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 61:
			case 66:
			case 68:
			case 69:
			case 71:
			case 72:
			case 75:
			case 102:
			case 103:
			case 106:
			case 109:
			case 110:
			case 114:
			case 115:
			case 116:
			case 119:
			case 129:
			case 138:
			case 146:
			case 150:
			case 151:
			case 169:
			case 173:
			case 174:
			case 177:
			case 180:
			case 184:
			case 185:
			case 186:
			case 187:
			case 189:
			case 197:
			case 202:
				{
				alt64 = 2;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA64_4 = input.LA(2);

				if ((LA64_4==85))
				{
					alt64 = 1;
				}
				else if ((LA64_4==DOT||LA64_4==GT||LA64_4==MINUS||LA64_4==PTR||(LA64_4>=62 && LA64_4<=63)||(LA64_4>=65 && LA64_4<=66)||(LA64_4>=68 && LA64_4<=69)||(LA64_4>=71 && LA64_4<=72)||(LA64_4>=74 && LA64_4<=75)||LA64_4==77||(LA64_4>=80 && LA64_4<=82)||LA64_4==84||(LA64_4>=86 && LA64_4<=91)||LA64_4==93||LA64_4==99||LA64_4==142||LA64_4==198||(LA64_4>=200 && LA64_4<=201)))
				{
					alt64 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 64, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 64, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:248:11: object_initializer
				{
				DebugLocation(248, 11);
				PushFollow(Follow._object_initializer_in_object_or_collection_initializer2656);
				object_initializer229=object_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, object_initializer229.Tree, object_initializer229, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:249:11: collection_initializer
				{
				DebugLocation(249, 11);
				PushFollow(Follow._collection_initializer_in_object_or_collection_initializer2669);
				collection_initializer230=collection_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, collection_initializer230.Tree, collection_initializer230, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("object_or_collection_initializer", 57);
			LeaveRule("object_or_collection_initializer", 57);
			LeaveRule_object_or_collection_initializer();
			if (state.backtracking > 0) { Memoize(input, 57, object_or_collection_initializer_StartIndex); }

		}
		DebugLocation(249, 34);
		} finally { DebugExitRule(GrammarFileName, "object_or_collection_initializer"); }
		return retval;

	}
	// $ANTLR end "object_or_collection_initializer"

	partial void EnterRule_collection_initializer();
	partial void LeaveRule_collection_initializer();

	// $ANTLR start "collection_initializer"
	// cs.g:250:1: collection_initializer : element_initializer_list ( ',' )? '}' ;
	[GrammarRule("collection_initializer")]
	public XAstParserRuleReturnScope collection_initializer()
	{
		EnterRule_collection_initializer();
		EnterRule("collection_initializer", 58);
		var retval = new XAstParserRuleReturnScope("collection_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int collection_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal232 = default(IToken);
		IToken char_literal233 = default(IToken);
		XAstParserRuleReturnScope element_initializer_list231 = default(XAstParserRuleReturnScope);

		object char_literal232_tree = default(object);
		object char_literal233_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "collection_initializer");
		DebugLocation(250, 42);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// cs.g:250:23: ( element_initializer_list ( ',' )? '}' )
			DebugEnterAlt(1);
			// cs.g:251:5: element_initializer_list ( ',' )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(251, 5);
			PushFollow(Follow._element_initializer_list_in_collection_initializer2682);
			element_initializer_list231=element_initializer_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, element_initializer_list231.Tree, element_initializer_list231, retval);
			DebugLocation(251, 32);
			// cs.g:251:32: ( ',' )?
			int alt65=2;
			try { DebugEnterSubRule(65);
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if ((LA65_0==74))
			{
				alt65 = 1;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:251:32: ','
				{
				DebugLocation(251, 32);
				char_literal232=(IToken)Match(input,74,Follow._74_in_collection_initializer2686); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal232_tree = (object)adaptor.Create(char_literal232, retval);
				adaptor.AddChild(root_0, char_literal232_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(65); }

			DebugLocation(251, 39);
			char_literal233=(IToken)Match(input,201,Follow._201_in_collection_initializer2691); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal233_tree = (object)adaptor.Create(char_literal233, retval);
			adaptor.AddChild(root_0, char_literal233_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("collection_initializer", 58);
			LeaveRule("collection_initializer", 58);
			LeaveRule_collection_initializer();
			if (state.backtracking > 0) { Memoize(input, 58, collection_initializer_StartIndex); }

		}
		DebugLocation(251, 42);
		} finally { DebugExitRule(GrammarFileName, "collection_initializer"); }
		return retval;

	}
	// $ANTLR end "collection_initializer"

	partial void EnterRule_element_initializer_list();
	partial void LeaveRule_element_initializer_list();

	// $ANTLR start "element_initializer_list"
	// cs.g:252:1: element_initializer_list : element_initializer ( ',' element_initializer )* ;
	[GrammarRule("element_initializer_list")]
	public XAstParserRuleReturnScope element_initializer_list()
	{
		EnterRule_element_initializer_list();
		EnterRule("element_initializer_list", 59);
		var retval = new XAstParserRuleReturnScope("element_initializer_list");
		
		retval.Start = (IToken)input.LT(1);
		int element_initializer_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal235 = default(IToken);
		XAstParserRuleReturnScope element_initializer234 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope element_initializer236 = default(XAstParserRuleReturnScope);

		object char_literal235_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "element_initializer_list");
		DebugLocation(252, 52);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// cs.g:252:25: ( element_initializer ( ',' element_initializer )* )
			DebugEnterAlt(1);
			// cs.g:253:5: element_initializer ( ',' element_initializer )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(253, 5);
			PushFollow(Follow._element_initializer_in_element_initializer_list2703);
			element_initializer234=element_initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, element_initializer234.Tree, element_initializer234, retval);
			DebugLocation(253, 26);
			// cs.g:253:26: ( ',' element_initializer )*
			try { DebugEnterSubRule(66);
			while (true)
			{
				int alt66=2;
				try { DebugEnterDecision(66, false);
				int LA66_0 = input.LA(1);

				if ((LA66_0==74))
				{
					int LA66_1 = input.LA(2);

					if ((LA66_1==Character_literal||LA66_1==FALSE||(LA66_1>=Hex_number && LA66_1<=IDENTIFIER)||(LA66_1>=MINUS && LA66_1<=NUMBER)||LA66_1==Real_literal||LA66_1==STRINGLITERAL||LA66_1==TRUE||LA66_1==Verbatim_string_literal||LA66_1==61||LA66_1==66||(LA66_1>=68 && LA66_1<=69)||(LA66_1>=71 && LA66_1<=72)||LA66_1==75||LA66_1==95||(LA66_1>=97 && LA66_1<=98)||(LA66_1>=100 && LA66_1<=103)||(LA66_1>=105 && LA66_1<=106)||(LA66_1>=109 && LA66_1<=110)||(LA66_1>=114 && LA66_1<=117)||(LA66_1>=119 && LA66_1<=120)||LA66_1==122||LA66_1==126||LA66_1==129||LA66_1==132||LA66_1==135||LA66_1==138||LA66_1==141||(LA66_1>=143 && LA66_1<=144)||(LA66_1>=146 && LA66_1<=148)||(LA66_1>=150 && LA66_1<=152)||LA66_1==154||LA66_1==157||LA66_1==160||LA66_1==162||LA66_1==167||LA66_1==169||(LA66_1>=171 && LA66_1<=174)||LA66_1==177||LA66_1==180||(LA66_1>=183 && LA66_1<=187)||(LA66_1>=189 && LA66_1<=190)||LA66_1==194||(LA66_1>=196 && LA66_1<=197)||LA66_1==202))
					{
						alt66 = 1;
					}


				}


				} finally { DebugExitDecision(66); }
				switch ( alt66 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:253:27: ',' element_initializer
					{
					DebugLocation(253, 27);
					char_literal235=(IToken)Match(input,74,Follow._74_in_element_initializer_list2707); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal235_tree = (object)adaptor.Create(char_literal235, retval);
					adaptor.AddChild(root_0, char_literal235_tree);
					}
					DebugLocation(253, 31);
					PushFollow(Follow._element_initializer_in_element_initializer_list2709);
					element_initializer236=element_initializer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, element_initializer236.Tree, element_initializer236, retval);

					}
					break;

				default:
					goto loop66;
				}
			}

			loop66:
				;

			} finally { DebugExitSubRule(66); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("element_initializer_list", 59);
			LeaveRule("element_initializer_list", 59);
			LeaveRule_element_initializer_list();
			if (state.backtracking > 0) { Memoize(input, 59, element_initializer_list_StartIndex); }

		}
		DebugLocation(253, 52);
		} finally { DebugExitRule(GrammarFileName, "element_initializer_list"); }
		return retval;

	}
	// $ANTLR end "element_initializer_list"

	partial void EnterRule_element_initializer();
	partial void LeaveRule_element_initializer();

	// $ANTLR start "element_initializer"
	// cs.g:254:1: element_initializer : ( non_assignment_expression | '{' expression_list '}' );
	[GrammarRule("element_initializer")]
	public XAstParserRuleReturnScope element_initializer()
	{
		EnterRule_element_initializer();
		EnterRule("element_initializer", 60);
		var retval = new XAstParserRuleReturnScope("element_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int element_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal238 = default(IToken);
		IToken char_literal240 = default(IToken);
		XAstParserRuleReturnScope non_assignment_expression237 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_list239 = default(XAstParserRuleReturnScope);

		object char_literal238_tree = default(object);
		object char_literal240_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "element_initializer");
		DebugLocation(254, 34);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// cs.g:254:20: ( non_assignment_expression | '{' expression_list '}' )
			int alt67=2;
			try { DebugEnterDecision(67, false);
			int LA67_0 = input.LA(1);

			if ((LA67_0==Character_literal||LA67_0==FALSE||(LA67_0>=Hex_number && LA67_0<=IDENTIFIER)||(LA67_0>=MINUS && LA67_0<=NUMBER)||LA67_0==Real_literal||LA67_0==STRINGLITERAL||LA67_0==TRUE||LA67_0==Verbatim_string_literal||LA67_0==61||LA67_0==66||(LA67_0>=68 && LA67_0<=69)||(LA67_0>=71 && LA67_0<=72)||LA67_0==75||LA67_0==95||(LA67_0>=97 && LA67_0<=98)||(LA67_0>=100 && LA67_0<=103)||(LA67_0>=105 && LA67_0<=106)||(LA67_0>=109 && LA67_0<=110)||(LA67_0>=114 && LA67_0<=117)||(LA67_0>=119 && LA67_0<=120)||LA67_0==122||LA67_0==126||LA67_0==129||LA67_0==132||LA67_0==135||LA67_0==138||LA67_0==141||(LA67_0>=143 && LA67_0<=144)||(LA67_0>=146 && LA67_0<=148)||(LA67_0>=150 && LA67_0<=152)||LA67_0==154||LA67_0==157||LA67_0==160||LA67_0==162||LA67_0==167||LA67_0==169||(LA67_0>=171 && LA67_0<=174)||LA67_0==177||LA67_0==180||(LA67_0>=183 && LA67_0<=187)||(LA67_0>=189 && LA67_0<=190)||LA67_0==194||LA67_0==196||LA67_0==202))
			{
				alt67 = 1;
			}
			else if ((LA67_0==197))
			{
				alt67 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:255:5: non_assignment_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(255, 5);
				PushFollow(Follow._non_assignment_expression_in_element_initializer2723);
				non_assignment_expression237=non_assignment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, non_assignment_expression237.Tree, non_assignment_expression237, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:256:7: '{' expression_list '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(256, 7);
				char_literal238=(IToken)Match(input,197,Follow._197_in_element_initializer2732); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal238_tree = (object)adaptor.Create(char_literal238, retval);
				adaptor.AddChild(root_0, char_literal238_tree);
				}
				DebugLocation(256, 13);
				PushFollow(Follow._expression_list_in_element_initializer2736);
				expression_list239=expression_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_list239.Tree, expression_list239, retval);
				DebugLocation(256, 31);
				char_literal240=(IToken)Match(input,201,Follow._201_in_element_initializer2740); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal240_tree = (object)adaptor.Create(char_literal240, retval);
				adaptor.AddChild(root_0, char_literal240_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("element_initializer", 60);
			LeaveRule("element_initializer", 60);
			LeaveRule_element_initializer();
			if (state.backtracking > 0) { Memoize(input, 60, element_initializer_StartIndex); }

		}
		DebugLocation(256, 34);
		} finally { DebugExitRule(GrammarFileName, "element_initializer"); }
		return retval;

	}
	// $ANTLR end "element_initializer"

	partial void EnterRule_object_initializer();
	partial void LeaveRule_object_initializer();

	// $ANTLR start "object_initializer"
	// cs.g:263:1: object_initializer : ( member_initializer_list )? ( ',' )? '}' ;
	[GrammarRule("object_initializer")]
	public XAstParserRuleReturnScope object_initializer()
	{
		EnterRule_object_initializer();
		EnterRule("object_initializer", 61);
		var retval = new XAstParserRuleReturnScope("object_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int object_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal242 = default(IToken);
		IToken char_literal243 = default(IToken);
		XAstParserRuleReturnScope member_initializer_list241 = default(XAstParserRuleReturnScope);

		object char_literal242_tree = default(object);
		object char_literal243_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "object_initializer");
		DebugLocation(263, 42);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// cs.g:263:19: ( ( member_initializer_list )? ( ',' )? '}' )
			DebugEnterAlt(1);
			// cs.g:264:5: ( member_initializer_list )? ( ',' )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(264, 5);
			// cs.g:264:5: ( member_initializer_list )?
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==IDENTIFIER||LA68_0==95||(LA68_0>=97 && LA68_0<=98)||(LA68_0>=100 && LA68_0<=101)||LA68_0==105||LA68_0==117||LA68_0==120||LA68_0==122||LA68_0==126||LA68_0==132||LA68_0==135||LA68_0==141||(LA68_0>=143 && LA68_0<=144)||(LA68_0>=147 && LA68_0<=148)||LA68_0==152||LA68_0==154||LA68_0==157||LA68_0==160||LA68_0==162||LA68_0==167||(LA68_0>=171 && LA68_0<=172)||LA68_0==183||LA68_0==190||LA68_0==194||LA68_0==196))
			{
				alt68 = 1;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:264:5: member_initializer_list
				{
				DebugLocation(264, 5);
				PushFollow(Follow._member_initializer_list_in_object_initializer2758);
				member_initializer_list241=member_initializer_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, member_initializer_list241.Tree, member_initializer_list241, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(68); }

			DebugLocation(264, 32);
			// cs.g:264:32: ( ',' )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==74))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:264:32: ','
				{
				DebugLocation(264, 32);
				char_literal242=(IToken)Match(input,74,Follow._74_in_object_initializer2763); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal242_tree = (object)adaptor.Create(char_literal242, retval);
				adaptor.AddChild(root_0, char_literal242_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(264, 39);
			char_literal243=(IToken)Match(input,201,Follow._201_in_object_initializer2768); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal243_tree = (object)adaptor.Create(char_literal243, retval);
			adaptor.AddChild(root_0, char_literal243_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("object_initializer", 61);
			LeaveRule("object_initializer", 61);
			LeaveRule_object_initializer();
			if (state.backtracking > 0) { Memoize(input, 61, object_initializer_StartIndex); }

		}
		DebugLocation(264, 42);
		} finally { DebugExitRule(GrammarFileName, "object_initializer"); }
		return retval;

	}
	// $ANTLR end "object_initializer"

	partial void EnterRule_member_initializer_list();
	partial void LeaveRule_member_initializer_list();

	// $ANTLR start "member_initializer_list"
	// cs.g:265:1: member_initializer_list : member_initializer ( ',' member_initializer ) ;
	[GrammarRule("member_initializer_list")]
	public XAstParserRuleReturnScope member_initializer_list()
	{
		EnterRule_member_initializer_list();
		EnterRule("member_initializer_list", 62);
		var retval = new XAstParserRuleReturnScope("member_initializer_list");
		
		retval.Start = (IToken)input.LT(1);
		int member_initializer_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal245 = default(IToken);
		XAstParserRuleReturnScope member_initializer244 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope member_initializer246 = default(XAstParserRuleReturnScope);

		object char_literal245_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "member_initializer_list");
		DebugLocation(265, 49);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// cs.g:265:24: ( member_initializer ( ',' member_initializer ) )
			DebugEnterAlt(1);
			// cs.g:266:5: member_initializer ( ',' member_initializer )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(266, 5);
			PushFollow(Follow._member_initializer_in_member_initializer_list2780);
			member_initializer244=member_initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, member_initializer244.Tree, member_initializer244, retval);
			DebugLocation(266, 25);
			// cs.g:266:25: ( ',' member_initializer )
			DebugEnterAlt(1);
			// cs.g:266:26: ',' member_initializer
			{
			DebugLocation(266, 26);
			char_literal245=(IToken)Match(input,74,Follow._74_in_member_initializer_list2784); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal245_tree = (object)adaptor.Create(char_literal245, retval);
			adaptor.AddChild(root_0, char_literal245_tree);
			}
			DebugLocation(266, 30);
			PushFollow(Follow._member_initializer_in_member_initializer_list2786);
			member_initializer246=member_initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, member_initializer246.Tree, member_initializer246, retval);

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("member_initializer_list", 62);
			LeaveRule("member_initializer_list", 62);
			LeaveRule_member_initializer_list();
			if (state.backtracking > 0) { Memoize(input, 62, member_initializer_list_StartIndex); }

		}
		DebugLocation(266, 49);
		} finally { DebugExitRule(GrammarFileName, "member_initializer_list"); }
		return retval;

	}
	// $ANTLR end "member_initializer_list"

	partial void EnterRule_member_initializer();
	partial void LeaveRule_member_initializer();

	// $ANTLR start "member_initializer"
	// cs.g:267:1: member_initializer : identifier '=' initializer_value ;
	[GrammarRule("member_initializer")]
	public XAstParserRuleReturnScope member_initializer()
	{
		EnterRule_member_initializer();
		EnterRule("member_initializer", 63);
		var retval = new XAstParserRuleReturnScope("member_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int member_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal248 = default(IToken);
		XAstParserRuleReturnScope identifier247 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope initializer_value249 = default(XAstParserRuleReturnScope);

		object char_literal248_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "member_initializer");
		DebugLocation(267, 41);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }

			// cs.g:267:19: ( identifier '=' initializer_value )
			DebugEnterAlt(1);
			// cs.g:268:5: identifier '=' initializer_value
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(268, 5);
			PushFollow(Follow._identifier_in_member_initializer2799);
			identifier247=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier247.Tree, identifier247, retval);
			DebugLocation(268, 18);
			char_literal248=(IToken)Match(input,85,Follow._85_in_member_initializer2803); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal248_tree = (object)adaptor.Create(char_literal248, retval);
			adaptor.AddChild(root_0, char_literal248_tree);
			}
			DebugLocation(268, 24);
			PushFollow(Follow._initializer_value_in_member_initializer2807);
			initializer_value249=initializer_value();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, initializer_value249.Tree, initializer_value249, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("member_initializer", 63);
			LeaveRule("member_initializer", 63);
			LeaveRule_member_initializer();
			if (state.backtracking > 0) { Memoize(input, 63, member_initializer_StartIndex); }

		}
		DebugLocation(268, 41);
		} finally { DebugExitRule(GrammarFileName, "member_initializer"); }
		return retval;

	}
	// $ANTLR end "member_initializer"

	partial void EnterRule_initializer_value();
	partial void LeaveRule_initializer_value();

	// $ANTLR start "initializer_value"
	// cs.g:269:1: initializer_value : ( expression | object_or_collection_initializer );
	[GrammarRule("initializer_value")]
	public XAstParserRuleReturnScope initializer_value()
	{
		EnterRule_initializer_value();
		EnterRule("initializer_value", 64);
		var retval = new XAstParserRuleReturnScope("initializer_value");
		
		retval.Start = (IToken)input.LT(1);
		int initializer_value_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope expression250 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope object_or_collection_initializer251 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "initializer_value");
		DebugLocation(269, 39);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }

			// cs.g:269:18: ( expression | object_or_collection_initializer )
			int alt70=2;
			try { DebugEnterDecision(70, false);
			int LA70_0 = input.LA(1);

			if ((LA70_0==Character_literal||LA70_0==FALSE||(LA70_0>=Hex_number && LA70_0<=IDENTIFIER)||(LA70_0>=MINUS && LA70_0<=NUMBER)||LA70_0==Real_literal||LA70_0==STRINGLITERAL||LA70_0==TRUE||LA70_0==Verbatim_string_literal||LA70_0==61||LA70_0==66||(LA70_0>=68 && LA70_0<=69)||(LA70_0>=71 && LA70_0<=72)||LA70_0==75||LA70_0==95||(LA70_0>=97 && LA70_0<=98)||(LA70_0>=100 && LA70_0<=103)||(LA70_0>=105 && LA70_0<=106)||(LA70_0>=109 && LA70_0<=110)||(LA70_0>=114 && LA70_0<=117)||(LA70_0>=119 && LA70_0<=120)||LA70_0==122||LA70_0==126||LA70_0==129||LA70_0==132||LA70_0==135||LA70_0==138||LA70_0==141||(LA70_0>=143 && LA70_0<=144)||(LA70_0>=146 && LA70_0<=148)||(LA70_0>=150 && LA70_0<=152)||LA70_0==154||LA70_0==157||LA70_0==160||LA70_0==162||LA70_0==167||LA70_0==169||(LA70_0>=171 && LA70_0<=174)||LA70_0==177||LA70_0==180||(LA70_0>=183 && LA70_0<=187)||(LA70_0>=189 && LA70_0<=190)||LA70_0==194||LA70_0==196||LA70_0==202))
			{
				alt70 = 1;
			}
			else if ((LA70_0==197))
			{
				alt70 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 70, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:270:5: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(270, 5);
				PushFollow(Follow._expression_in_initializer_value2819);
				expression250=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression250.Tree, expression250, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:271:7: object_or_collection_initializer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(271, 7);
				PushFollow(Follow._object_or_collection_initializer_in_initializer_value2828);
				object_or_collection_initializer251=object_or_collection_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, object_or_collection_initializer251.Tree, object_or_collection_initializer251, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("initializer_value", 64);
			LeaveRule("initializer_value", 64);
			LeaveRule_initializer_value();
			if (state.backtracking > 0) { Memoize(input, 64, initializer_value_StartIndex); }

		}
		DebugLocation(271, 39);
		} finally { DebugExitRule(GrammarFileName, "initializer_value"); }
		return retval;

	}
	// $ANTLR end "initializer_value"

	partial void EnterRule_typeof_expression();
	partial void LeaveRule_typeof_expression();

	// $ANTLR start "typeof_expression"
	// cs.g:275:1: typeof_expression : 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | 'void' ) ')' ;
	[GrammarRule("typeof_expression")]
	public XAstParserRuleReturnScope typeof_expression()
	{
		EnterRule_typeof_expression();
		EnterRule("typeof_expression", 65);
		var retval = new XAstParserRuleReturnScope("typeof_expression");
		
		retval.Start = (IToken)input.LT(1);
		int typeof_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal252 = default(IToken);
		IToken char_literal253 = default(IToken);
		IToken string_literal256 = default(IToken);
		IToken char_literal257 = default(IToken);
		XAstParserRuleReturnScope unbound_type_name254 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type255 = default(XAstParserRuleReturnScope);

		object string_literal252_tree = default(object);
		object char_literal253_tree = default(object);
		object string_literal256_tree = default(object);
		object char_literal257_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "typeof_expression");
		DebugLocation(275, 38);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }

			// cs.g:275:18: ( 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | 'void' ) ')' )
			DebugEnterAlt(1);
			// cs.g:276:5: 'typeof' '(' ( ( unbound_type_name )=> unbound_type_name | type | 'void' ) ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(276, 5);
			string_literal252=(IToken)Match(input,184,Follow._184_in_typeof_expression2843); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal252_tree = (object)adaptor.Create(string_literal252, retval);
			adaptor.AddChild(root_0, string_literal252_tree);
			}
			DebugLocation(276, 16);
			char_literal253=(IToken)Match(input,68,Follow._68_in_typeof_expression2847); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal253_tree = (object)adaptor.Create(char_literal253, retval);
			adaptor.AddChild(root_0, char_literal253_tree);
			}
			DebugLocation(276, 22);
			// cs.g:276:22: ( ( unbound_type_name )=> unbound_type_name | type | 'void' )
			int alt71=3;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			try
			{
				alt71 = dfa71.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:276:23: ( unbound_type_name )=> unbound_type_name
				{
				DebugLocation(276, 46);
				PushFollow(Follow._unbound_type_name_in_typeof_expression2858);
				unbound_type_name254=unbound_type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unbound_type_name254.Tree, unbound_type_name254, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:277:25: type
				{
				DebugLocation(277, 25);
				PushFollow(Follow._type_in_typeof_expression2884);
				type255=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type255.Tree, type255, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:278:25: 'void'
				{
				DebugLocation(278, 25);
				string_literal256=(IToken)Match(input,192,Follow._192_in_typeof_expression2911); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal256_tree = (object)adaptor.Create(string_literal256, retval);
				adaptor.AddChild(root_0, string_literal256_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(71); }

			DebugLocation(278, 35);
			char_literal257=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_typeof_expression2916), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal257_tree = (object)adaptor.Create(char_literal257, retval);
			adaptor.AddChild(root_0, char_literal257_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("typeof_expression", 65);
			LeaveRule("typeof_expression", 65);
			LeaveRule_typeof_expression();
			if (state.backtracking > 0) { Memoize(input, 65, typeof_expression_StartIndex); }

		}
		DebugLocation(278, 38);
		} finally { DebugExitRule(GrammarFileName, "typeof_expression"); }
		return retval;

	}
	// $ANTLR end "typeof_expression"

	partial void EnterRule_unbound_type_name();
	partial void LeaveRule_unbound_type_name();

	// $ANTLR start "unbound_type_name"
	// cs.g:283:1: unbound_type_name : unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier ;
	[GrammarRule("unbound_type_name")]
	public XAstParserRuleReturnScope unbound_type_name()
	{
		EnterRule_unbound_type_name();
		EnterRule("unbound_type_name", 66);
		var retval = new XAstParserRuleReturnScope("unbound_type_name");
		
		retval.Start = (IToken)input.LT(1);
		int unbound_type_name_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope unbound_type_name_start258 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope generic_dimension_specifier259 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unbound_type_name_part260 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unbound_type_name_part261 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope generic_dimension_specifier262 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "unbound_type_name");
		DebugLocation(283, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }

			// cs.g:283:18: ( unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier )
			DebugEnterAlt(1);
			// cs.g:285:5: unbound_type_name_start ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )* generic_dimension_specifier
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(285, 5);
			PushFollow(Follow._unbound_type_name_start_in_unbound_type_name2934);
			unbound_type_name_start258=unbound_type_name_start();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unbound_type_name_start258.Tree, unbound_type_name_start258, retval);
			DebugLocation(286, 9);
			// cs.g:286:9: ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )*
			try { DebugEnterSubRule(72);
			while (true)
			{
				int alt72=3;
				try { DebugEnterDecision(72, false);
				try
				{
					alt72 = dfa72.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(72); }
				switch ( alt72 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:286:10: ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part )
					{
					DebugLocation(286, 10);
					// cs.g:286:10: ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part )
					DebugEnterAlt(1);
					// cs.g:286:11: ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part
					{
					DebugLocation(286, 50);
					PushFollow(Follow._generic_dimension_specifier_in_unbound_type_name2959);
					generic_dimension_specifier259=generic_dimension_specifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, generic_dimension_specifier259.Tree, generic_dimension_specifier259, retval);
					DebugLocation(286, 80);
					PushFollow(Follow._unbound_type_name_part_in_unbound_type_name2963);
					unbound_type_name_part260=unbound_type_name_part();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unbound_type_name_part260.Tree, unbound_type_name_part260, retval);

					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:287:11: unbound_type_name_part
					{
					DebugLocation(287, 11);
					PushFollow(Follow._unbound_type_name_part_in_unbound_type_name2976);
					unbound_type_name_part261=unbound_type_name_part();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unbound_type_name_part261.Tree, unbound_type_name_part261, retval);

					}
					break;

				default:
					goto loop72;
				}
			}

			loop72:
				;

			} finally { DebugExitSubRule(72); }

			DebugLocation(288, 13);
			PushFollow(Follow._generic_dimension_specifier_in_unbound_type_name2995);
			generic_dimension_specifier262=generic_dimension_specifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, generic_dimension_specifier262.Tree, generic_dimension_specifier262, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unbound_type_name", 66);
			LeaveRule("unbound_type_name", 66);
			LeaveRule_unbound_type_name();
			if (state.backtracking > 0) { Memoize(input, 66, unbound_type_name_StartIndex); }

		}
		DebugLocation(289, 4);
		} finally { DebugExitRule(GrammarFileName, "unbound_type_name"); }
		return retval;

	}
	// $ANTLR end "unbound_type_name"

	partial void EnterRule_unbound_type_name_start();
	partial void LeaveRule_unbound_type_name_start();

	// $ANTLR start "unbound_type_name_start"
	// cs.g:291:1: unbound_type_name_start : identifier ( '::' identifier )? ;
	[GrammarRule("unbound_type_name_start")]
	public XAstParserRuleReturnScope unbound_type_name_start()
	{
		EnterRule_unbound_type_name_start();
		EnterRule("unbound_type_name_start", 67);
		var retval = new XAstParserRuleReturnScope("unbound_type_name_start");
		
		retval.Start = (IToken)input.LT(1);
		int unbound_type_name_start_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal264 = default(IToken);
		XAstParserRuleReturnScope identifier263 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier265 = default(XAstParserRuleReturnScope);

		object string_literal264_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unbound_type_name_start");
		DebugLocation(291, 33);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return retval; }

			// cs.g:291:24: ( identifier ( '::' identifier )? )
			DebugEnterAlt(1);
			// cs.g:292:5: identifier ( '::' identifier )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(292, 5);
			PushFollow(Follow._identifier_in_unbound_type_name_start3011);
			identifier263=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier263.Tree, identifier263, retval);
			DebugLocation(292, 16);
			// cs.g:292:16: ( '::' identifier )?
			int alt73=2;
			try { DebugEnterSubRule(73);
			try { DebugEnterDecision(73, false);
			int LA73_0 = input.LA(1);

			if ((LA73_0==80))
			{
				alt73 = 1;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:292:17: '::' identifier
				{
				DebugLocation(292, 17);
				string_literal264=(IToken)Match(input,80,Follow._80_in_unbound_type_name_start3014); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal264_tree = (object)adaptor.Create(string_literal264, retval);
				adaptor.AddChild(root_0, string_literal264_tree);
				}
				DebugLocation(292, 22);
				PushFollow(Follow._identifier_in_unbound_type_name_start3016);
				identifier265=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier265.Tree, identifier265, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(73); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unbound_type_name_start", 67);
			LeaveRule("unbound_type_name_start", 67);
			LeaveRule_unbound_type_name_start();
			if (state.backtracking > 0) { Memoize(input, 67, unbound_type_name_start_StartIndex); }

		}
		DebugLocation(292, 33);
		} finally { DebugExitRule(GrammarFileName, "unbound_type_name_start"); }
		return retval;

	}
	// $ANTLR end "unbound_type_name_start"

	partial void EnterRule_unbound_type_name_part();
	partial void LeaveRule_unbound_type_name_part();

	// $ANTLR start "unbound_type_name_part"
	// cs.g:293:1: unbound_type_name_part : '.' identifier ;
	[GrammarRule("unbound_type_name_part")]
	public XAstParserRuleReturnScope unbound_type_name_part()
	{
		EnterRule_unbound_type_name_part();
		EnterRule("unbound_type_name_part", 68);
		var retval = new XAstParserRuleReturnScope("unbound_type_name_part");
		
		retval.Start = (IToken)input.LT(1);
		int unbound_type_name_part_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal266 = default(IToken);
		XAstParserRuleReturnScope identifier267 = default(XAstParserRuleReturnScope);

		object char_literal266_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unbound_type_name_part");
		DebugLocation(293, 20);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return retval; }

			// cs.g:293:23: ( '.' identifier )
			DebugEnterAlt(1);
			// cs.g:294:5: '.' identifier
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(294, 5);
			char_literal266=(IToken)new XToken((IToken)Match(input,DOT,Follow._DOT_in_unbound_type_name_part3028), "DOT"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal266_tree = (object)adaptor.Create(char_literal266, retval);
			adaptor.AddChild(root_0, char_literal266_tree);
			}
			DebugLocation(294, 11);
			PushFollow(Follow._identifier_in_unbound_type_name_part3032);
			identifier267=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier267.Tree, identifier267, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unbound_type_name_part", 68);
			LeaveRule("unbound_type_name_part", 68);
			LeaveRule_unbound_type_name_part();
			if (state.backtracking > 0) { Memoize(input, 68, unbound_type_name_part_StartIndex); }

		}
		DebugLocation(294, 20);
		} finally { DebugExitRule(GrammarFileName, "unbound_type_name_part"); }
		return retval;

	}
	// $ANTLR end "unbound_type_name_part"

	partial void EnterRule_generic_dimension_specifier();
	partial void LeaveRule_generic_dimension_specifier();

	// $ANTLR start "generic_dimension_specifier"
	// cs.g:295:1: generic_dimension_specifier : '<' ( commas )? '>' ;
	[GrammarRule("generic_dimension_specifier")]
	public XAstParserRuleReturnScope generic_dimension_specifier()
	{
		EnterRule_generic_dimension_specifier();
		EnterRule("generic_dimension_specifier", 69);
		var retval = new XAstParserRuleReturnScope("generic_dimension_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int generic_dimension_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal268 = default(IToken);
		IToken char_literal270 = default(IToken);
		XAstParserRuleReturnScope commas269 = default(XAstParserRuleReturnScope);

		object char_literal268_tree = default(object);
		object char_literal270_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "generic_dimension_specifier");
		DebugLocation(295, 24);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return retval; }

			// cs.g:295:28: ( '<' ( commas )? '>' )
			DebugEnterAlt(1);
			// cs.g:296:5: '<' ( commas )? '>'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(296, 5);
			char_literal268=(IToken)Match(input,81,Follow._81_in_generic_dimension_specifier3043); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal268_tree = (object)adaptor.Create(char_literal268, retval);
			adaptor.AddChild(root_0, char_literal268_tree);
			}
			DebugLocation(296, 11);
			// cs.g:296:11: ( commas )?
			int alt74=2;
			try { DebugEnterSubRule(74);
			try { DebugEnterDecision(74, false);
			int LA74_0 = input.LA(1);

			if ((LA74_0==74))
			{
				alt74 = 1;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:296:11: commas
				{
				DebugLocation(296, 11);
				PushFollow(Follow._commas_in_generic_dimension_specifier3047);
				commas269=commas();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, commas269.Tree, commas269, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(74); }

			DebugLocation(296, 21);
			char_literal270=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_generic_dimension_specifier3052), "GT"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal270_tree = (object)adaptor.Create(char_literal270, retval);
			adaptor.AddChild(root_0, char_literal270_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_dimension_specifier", 69);
			LeaveRule("generic_dimension_specifier", 69);
			LeaveRule_generic_dimension_specifier();
			if (state.backtracking > 0) { Memoize(input, 69, generic_dimension_specifier_StartIndex); }

		}
		DebugLocation(296, 24);
		} finally { DebugExitRule(GrammarFileName, "generic_dimension_specifier"); }
		return retval;

	}
	// $ANTLR end "generic_dimension_specifier"

	partial void EnterRule_commas();
	partial void LeaveRule_commas();

	// $ANTLR start "commas"
	// cs.g:297:1: commas : ( ',' )+ ;
	[GrammarRule("commas")]
	public XAstParserRuleReturnScope commas()
	{
		EnterRule_commas();
		EnterRule("commas", 70);
		var retval = new XAstParserRuleReturnScope("commas");
		
		retval.Start = (IToken)input.LT(1);
		int commas_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal271 = default(IToken);

		object char_literal271_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "commas");
		DebugLocation(297, 9);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return retval; }

			// cs.g:297:7: ( ( ',' )+ )
			DebugEnterAlt(1);
			// cs.g:298:5: ( ',' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(298, 5);
			// cs.g:298:5: ( ',' )+
			int cnt75=0;
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_0 = input.LA(1);

				if ((LA75_0==74))
				{
					alt75 = 1;
				}


				} finally { DebugExitDecision(75); }
				switch (alt75)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:298:5: ','
					{
					DebugLocation(298, 5);
					char_literal271=(IToken)Match(input,74,Follow._74_in_commas3064); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal271_tree = (object)adaptor.Create(char_literal271, retval);
					adaptor.AddChild(root_0, char_literal271_tree);
					}

					}
					break;

				default:
					if (cnt75 >= 1)
						goto loop75;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee75 = new EarlyExitException( 75, input );
					DebugRecognitionException(eee75);
					throw eee75;
				}
				cnt75++;
			}
			loop75:
				;

			} finally { DebugExitSubRule(75); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commas", 70);
			LeaveRule("commas", 70);
			LeaveRule_commas();
			if (state.backtracking > 0) { Memoize(input, 70, commas_StartIndex); }

		}
		DebugLocation(298, 9);
		} finally { DebugExitRule(GrammarFileName, "commas"); }
		return retval;

	}
	// $ANTLR end "commas"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// cs.g:304:1: type_name : namespace_or_type_name ;
	[GrammarRule("type_name")]
	public XAstParserRuleReturnScope type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 71);
		var retval = new XAstParserRuleReturnScope("type_name");
		
		retval.Start = (IToken)input.LT(1);
		int type_name_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope namespace_or_type_name272 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(304, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return retval; }

			// cs.g:304:10: ( namespace_or_type_name )
			DebugEnterAlt(1);
			// cs.g:305:5: namespace_or_type_name
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(305, 5);
			PushFollow(Follow._namespace_or_type_name_in_type_name3083);
			namespace_or_type_name272=namespace_or_type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_or_type_name272.Tree, namespace_or_type_name272, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 71);
			LeaveRule("type_name", 71);
			LeaveRule_type_name();
			if (state.backtracking > 0) { Memoize(input, 71, type_name_StartIndex); }

		}
		DebugLocation(305, 27);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_namespace_or_type_name();
	partial void LeaveRule_namespace_or_type_name();

	// $ANTLR start "namespace_or_type_name"
	// cs.g:306:1: namespace_or_type_name : type_or_generic ( '::' type_or_generic )? ( '.' type_or_generic )* ;
	[GrammarRule("namespace_or_type_name")]
	public XAstParserRuleReturnScope namespace_or_type_name()
	{
		EnterRule_namespace_or_type_name();
		EnterRule("namespace_or_type_name", 72);
		var retval = new XAstParserRuleReturnScope("namespace_or_type_name");
		
		retval.Start = (IToken)input.LT(1);
		int namespace_or_type_name_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal274 = default(IToken);
		IToken char_literal276 = default(IToken);
		XAstParserRuleReturnScope type_or_generic273 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_or_generic275 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_or_generic277 = default(XAstParserRuleReturnScope);

		object string_literal274_tree = default(object);
		object char_literal276_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "namespace_or_type_name");
		DebugLocation(306, 72);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return retval; }

			// cs.g:306:23: ( type_or_generic ( '::' type_or_generic )? ( '.' type_or_generic )* )
			DebugEnterAlt(1);
			// cs.g:307:6: type_or_generic ( '::' type_or_generic )? ( '.' type_or_generic )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(307, 6);
			PushFollow(Follow._type_or_generic_in_namespace_or_type_name3095);
			type_or_generic273=type_or_generic();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_or_generic273.Tree, type_or_generic273, retval);
			DebugLocation(307, 24);
			// cs.g:307:24: ( '::' type_or_generic )?
			int alt76=2;
			try { DebugEnterSubRule(76);
			try { DebugEnterDecision(76, false);
			int LA76_0 = input.LA(1);

			if ((LA76_0==80))
			{
				alt76 = 1;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:307:25: '::' type_or_generic
				{
				DebugLocation(307, 25);
				string_literal274=(IToken)Match(input,80,Follow._80_in_namespace_or_type_name3100); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal274_tree = (object)adaptor.Create(string_literal274, retval);
				adaptor.AddChild(root_0, string_literal274_tree);
				}
				DebugLocation(307, 30);
				PushFollow(Follow._type_or_generic_in_namespace_or_type_name3102);
				type_or_generic275=type_or_generic();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_or_generic275.Tree, type_or_generic275, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(76); }

			DebugLocation(307, 48);
			// cs.g:307:48: ( '.' type_or_generic )*
			try { DebugEnterSubRule(77);
			while (true)
			{
				int alt77=2;
				try { DebugEnterDecision(77, false);
				int LA77_0 = input.LA(1);

				if ((LA77_0==DOT))
				{
					int LA77_2 = input.LA(2);

					if ((LA77_2==IDENTIFIER||LA77_2==95||(LA77_2>=97 && LA77_2<=98)||(LA77_2>=100 && LA77_2<=101)||LA77_2==105||LA77_2==117||LA77_2==120||LA77_2==122||LA77_2==126||LA77_2==132||LA77_2==135||LA77_2==141||(LA77_2>=143 && LA77_2<=144)||(LA77_2>=147 && LA77_2<=148)||LA77_2==152||LA77_2==154||LA77_2==157||LA77_2==160||LA77_2==162||LA77_2==167||(LA77_2>=171 && LA77_2<=172)||LA77_2==183||LA77_2==190||LA77_2==194||LA77_2==196))
					{
						alt77 = 1;
					}


				}


				} finally { DebugExitDecision(77); }
				switch ( alt77 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:307:49: '.' type_or_generic
					{
					DebugLocation(307, 49);
					char_literal276=(IToken)new XToken((IToken)Match(input,DOT,Follow._DOT_in_namespace_or_type_name3107), "DOT"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal276_tree = (object)adaptor.Create(char_literal276, retval);
					adaptor.AddChild(root_0, char_literal276_tree);
					}
					DebugLocation(307, 55);
					PushFollow(Follow._type_or_generic_in_namespace_or_type_name3111);
					type_or_generic277=type_or_generic();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_or_generic277.Tree, type_or_generic277, retval);

					}
					break;

				default:
					goto loop77;
				}
			}

			loop77:
				;

			} finally { DebugExitSubRule(77); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_or_type_name", 72);
			LeaveRule("namespace_or_type_name", 72);
			LeaveRule_namespace_or_type_name();
			if (state.backtracking > 0) { Memoize(input, 72, namespace_or_type_name_StartIndex); }

		}
		DebugLocation(307, 72);
		} finally { DebugExitRule(GrammarFileName, "namespace_or_type_name"); }
		return retval;

	}
	// $ANTLR end "namespace_or_type_name"

	partial void EnterRule_type_or_generic();
	partial void LeaveRule_type_or_generic();

	// $ANTLR start "type_or_generic"
	// cs.g:308:1: type_or_generic : ( ( identifier '<' )=> identifier generic_argument_list | identifier );
	[GrammarRule("type_or_generic")]
	public XAstParserRuleReturnScope type_or_generic()
	{
		EnterRule_type_or_generic();
		EnterRule("type_or_generic", 73);
		var retval = new XAstParserRuleReturnScope("type_or_generic");
		
		retval.Start = (IToken)input.LT(1);
		int type_or_generic_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope identifier278 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope generic_argument_list279 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier280 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "type_or_generic");
		DebugLocation(308, 17);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return retval; }

			// cs.g:308:16: ( ( identifier '<' )=> identifier generic_argument_list | identifier )
			int alt78=2;
			try { DebugEnterDecision(78, false);
			int LA78_0 = input.LA(1);

			if ((LA78_0==IDENTIFIER||LA78_0==95||(LA78_0>=97 && LA78_0<=98)||(LA78_0>=100 && LA78_0<=101)||LA78_0==105||LA78_0==117||LA78_0==120||LA78_0==122||LA78_0==126||LA78_0==132||LA78_0==135||LA78_0==141||(LA78_0>=143 && LA78_0<=144)||(LA78_0>=147 && LA78_0<=148)||LA78_0==152||LA78_0==154||LA78_0==157||LA78_0==160||LA78_0==162||LA78_0==167||(LA78_0>=171 && LA78_0<=172)||LA78_0==183||LA78_0==190||LA78_0==194||LA78_0==196))
			{
				int LA78_1 = input.LA(2);

				if ((EvaluatePredicate(synpred15_cs_fragment)))
				{
					alt78 = 1;
				}
				else if ((true))
				{
					alt78 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 78, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 78, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:309:5: ( identifier '<' )=> identifier generic_argument_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(309, 27);
				PushFollow(Follow._identifier_in_type_or_generic3134);
				identifier278=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier278.Tree, identifier278, retval);
				DebugLocation(309, 40);
				PushFollow(Follow._generic_argument_list_in_type_or_generic3138);
				generic_argument_list279=generic_argument_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, generic_argument_list279.Tree, generic_argument_list279, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:310:7: identifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(310, 7);
				PushFollow(Follow._identifier_in_type_or_generic3146);
				identifier280=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier280.Tree, identifier280, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_or_generic", 73);
			LeaveRule("type_or_generic", 73);
			LeaveRule_type_or_generic();
			if (state.backtracking > 0) { Memoize(input, 73, type_or_generic_StartIndex); }

		}
		DebugLocation(310, 17);
		} finally { DebugExitRule(GrammarFileName, "type_or_generic"); }
		return retval;

	}
	// $ANTLR end "type_or_generic"

	partial void EnterRule_qid();
	partial void LeaveRule_qid();

	// $ANTLR start "qid"
	// cs.g:312:1: qid : qid_start ( qid_part )* ;
	[GrammarRule("qid")]
	public XAstParserRuleReturnScope qid()
	{
		EnterRule_qid();
		EnterRule("qid", 74);
		var retval = new XAstParserRuleReturnScope("qid");
		
		retval.Start = (IToken)input.LT(1);
		int qid_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope qid_start281 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope qid_part282 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "qid");
		DebugLocation(312, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return retval; }

			// cs.g:312:4: ( qid_start ( qid_part )* )
			DebugEnterAlt(1);
			// cs.g:313:5: qid_start ( qid_part )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(313, 5);
			PushFollow(Follow._qid_start_in_qid3160);
			qid_start281=qid_start();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qid_start281.Tree, qid_start281, retval);
			DebugLocation(313, 17);
			// cs.g:313:17: ( qid_part )*
			try { DebugEnterSubRule(79);
			while (true)
			{
				int alt79=2;
				try { DebugEnterDecision(79, false);
				int LA79_0 = input.LA(1);

				if ((LA79_0==DOT))
				{
					int LA79_2 = input.LA(2);

					if ((LA79_2==IDENTIFIER||LA79_2==95||(LA79_2>=97 && LA79_2<=98)||(LA79_2>=100 && LA79_2<=101)||LA79_2==105||LA79_2==117||LA79_2==120||LA79_2==122||LA79_2==126||LA79_2==132||LA79_2==135||LA79_2==141||(LA79_2>=143 && LA79_2<=144)||(LA79_2>=147 && LA79_2<=148)||LA79_2==152||LA79_2==154||LA79_2==157||LA79_2==160||LA79_2==162||LA79_2==167||(LA79_2>=171 && LA79_2<=172)||LA79_2==183||LA79_2==190||LA79_2==194||LA79_2==196))
					{
						alt79 = 1;
					}


				}
				else if ((LA79_0==PTR))
				{
					alt79 = 1;
				}


				} finally { DebugExitDecision(79); }
				switch ( alt79 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:313:17: qid_part
					{
					DebugLocation(313, 17);
					PushFollow(Follow._qid_part_in_qid3164);
					qid_part282=qid_part();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, qid_part282.Tree, qid_part282, retval);

					}
					break;

				default:
					goto loop79;
				}
			}

			loop79:
				;

			} finally { DebugExitSubRule(79); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qid", 74);
			LeaveRule("qid", 74);
			LeaveRule_qid();
			if (state.backtracking > 0) { Memoize(input, 74, qid_StartIndex); }

		}
		DebugLocation(314, 4);
		} finally { DebugExitRule(GrammarFileName, "qid"); }
		return retval;

	}
	// $ANTLR end "qid"

	partial void EnterRule_qid_start();
	partial void LeaveRule_qid_start();

	// $ANTLR start "qid_start"
	// cs.g:315:1: qid_start : ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | identifier ( '::' identifier )? | literal );
	[GrammarRule("qid_start")]
	public XAstParserRuleReturnScope qid_start()
	{
		EnterRule_qid_start();
		EnterRule("qid_start", 75);
		var retval = new XAstParserRuleReturnScope("qid_start");
		
		retval.Start = (IToken)input.LT(1);
		int qid_start_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal287 = default(IToken);
		XAstParserRuleReturnScope predefined_type283 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier284 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope generic_argument_list285 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier286 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier288 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope literal289 = default(XAstParserRuleReturnScope);

		object string_literal287_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "qid_start");
		DebugLocation(315, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 75)) { return retval; }

			// cs.g:315:10: ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | identifier ( '::' identifier )? | literal )
			int alt81=4;
			try { DebugEnterDecision(81, false);
			switch (input.LA(1))
			{
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				alt81 = 1;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA81_2 = input.LA(2);

				if ((LA81_2==81) && (EvaluatePredicate(synpred16_cs_fragment)))
				{
					alt81 = 2;
				}
				else if ((LA81_2==DOT||LA81_2==PTR||LA81_2==68||LA81_2==80||LA81_2==197))
				{
					alt81 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 81, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
				{
				alt81 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 81, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:316:5: predefined_type
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(316, 5);
				PushFollow(Follow._predefined_type_in_qid_start3180);
				predefined_type283=predefined_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, predefined_type283.Tree, predefined_type283, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:317:7: ( identifier '<' )=> identifier generic_argument_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(317, 30);
				PushFollow(Follow._identifier_in_qid_start3199);
				identifier284=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier284.Tree, identifier284, retval);
				DebugLocation(317, 43);
				PushFollow(Follow._generic_argument_list_in_qid_start3203);
				generic_argument_list285=generic_argument_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, generic_argument_list285.Tree, generic_argument_list285, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:320:7: identifier ( '::' identifier )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(320, 7);
				PushFollow(Follow._identifier_in_qid_start3213);
				identifier286=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier286.Tree, identifier286, retval);
				DebugLocation(320, 20);
				// cs.g:320:20: ( '::' identifier )?
				int alt80=2;
				try { DebugEnterSubRule(80);
				try { DebugEnterDecision(80, false);
				int LA80_0 = input.LA(1);

				if ((LA80_0==80))
				{
					alt80 = 1;
				}
				} finally { DebugExitDecision(80); }
				switch (alt80)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:320:21: '::' identifier
					{
					DebugLocation(320, 21);
					string_literal287=(IToken)Match(input,80,Follow._80_in_qid_start3218); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal287_tree = (object)adaptor.Create(string_literal287, retval);
					adaptor.AddChild(root_0, string_literal287_tree);
					}
					DebugLocation(320, 28);
					PushFollow(Follow._identifier_in_qid_start3222);
					identifier288=identifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, identifier288.Tree, identifier288, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(80); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:321:7: literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(321, 7);
				PushFollow(Follow._literal_in_qid_start3232);
				literal289=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal289.Tree, literal289, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qid_start", 75);
			LeaveRule("qid_start", 75);
			LeaveRule_qid_start();
			if (state.backtracking > 0) { Memoize(input, 75, qid_start_StartIndex); }

		}
		DebugLocation(322, 4);
		} finally { DebugExitRule(GrammarFileName, "qid_start"); }
		return retval;

	}
	// $ANTLR end "qid_start"

	partial void EnterRule_qid_part();
	partial void LeaveRule_qid_part();

	// $ANTLR start "qid_part"
	// cs.g:325:1: qid_part : access_identifier ;
	[GrammarRule("qid_part")]
	public XAstParserRuleReturnScope qid_part()
	{
		EnterRule_qid_part();
		EnterRule("qid_part", 76);
		var retval = new XAstParserRuleReturnScope("qid_part");
		
		retval.Start = (IToken)input.LT(1);
		int qid_part_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope access_identifier290 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "qid_part");
		DebugLocation(325, 22);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 76)) { return retval; }

			// cs.g:325:9: ( access_identifier )
			DebugEnterAlt(1);
			// cs.g:326:5: access_identifier
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(326, 5);
			PushFollow(Follow._access_identifier_in_qid_part3252);
			access_identifier290=access_identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, access_identifier290.Tree, access_identifier290, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("qid_part", 76);
			LeaveRule("qid_part", 76);
			LeaveRule_qid_part();
			if (state.backtracking > 0) { Memoize(input, 76, qid_part_StartIndex); }

		}
		DebugLocation(326, 22);
		} finally { DebugExitRule(GrammarFileName, "qid_part"); }
		return retval;

	}
	// $ANTLR end "qid_part"

	partial void EnterRule_generic_argument_list();
	partial void LeaveRule_generic_argument_list();

	// $ANTLR start "generic_argument_list"
	// cs.g:328:1: generic_argument_list : '<' type_arguments '>' ;
	[GrammarRule("generic_argument_list")]
	public XAstParserRuleReturnScope generic_argument_list()
	{
		EnterRule_generic_argument_list();
		EnterRule("generic_argument_list", 77);
		var retval = new XAstParserRuleReturnScope("generic_argument_list");
		
		retval.Start = (IToken)input.LT(1);
		int generic_argument_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal291 = default(IToken);
		IToken char_literal293 = default(IToken);
		XAstParserRuleReturnScope type_arguments292 = default(XAstParserRuleReturnScope);

		object char_literal291_tree = default(object);
		object char_literal293_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "generic_argument_list");
		DebugLocation(328, 31);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 77)) { return retval; }

			// cs.g:328:22: ( '<' type_arguments '>' )
			DebugEnterAlt(1);
			// cs.g:329:5: '<' type_arguments '>'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(329, 5);
			char_literal291=(IToken)Match(input,81,Follow._81_in_generic_argument_list3265); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal291_tree = (object)adaptor.Create(char_literal291, retval);
			adaptor.AddChild(root_0, char_literal291_tree);
			}
			DebugLocation(329, 11);
			PushFollow(Follow._type_arguments_in_generic_argument_list3269);
			type_arguments292=type_arguments();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_arguments292.Tree, type_arguments292, retval);
			DebugLocation(329, 28);
			char_literal293=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_generic_argument_list3273), "GT"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal293_tree = (object)adaptor.Create(char_literal293, retval);
			adaptor.AddChild(root_0, char_literal293_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_argument_list", 77);
			LeaveRule("generic_argument_list", 77);
			LeaveRule_generic_argument_list();
			if (state.backtracking > 0) { Memoize(input, 77, generic_argument_list_StartIndex); }

		}
		DebugLocation(329, 31);
		} finally { DebugExitRule(GrammarFileName, "generic_argument_list"); }
		return retval;

	}
	// $ANTLR end "generic_argument_list"

	partial void EnterRule_type_arguments();
	partial void LeaveRule_type_arguments();

	// $ANTLR start "type_arguments"
	// cs.g:330:1: type_arguments : type ( ',' type )* ;
	[GrammarRule("type_arguments")]
	public XAstParserRuleReturnScope type_arguments()
	{
		EnterRule_type_arguments();
		EnterRule("type_arguments", 78);
		var retval = new XAstParserRuleReturnScope("type_arguments");
		
		retval.Start = (IToken)input.LT(1);
		int type_arguments_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal295 = default(IToken);
		XAstParserRuleReturnScope type294 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type296 = default(XAstParserRuleReturnScope);

		object char_literal295_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_arguments");
		DebugLocation(330, 21);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 78)) { return retval; }

			// cs.g:330:15: ( type ( ',' type )* )
			DebugEnterAlt(1);
			// cs.g:331:5: type ( ',' type )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(331, 5);
			PushFollow(Follow._type_in_type_arguments3285);
			type294=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type294.Tree, type294, retval);
			DebugLocation(331, 10);
			// cs.g:331:10: ( ',' type )*
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, false);
				int LA82_0 = input.LA(1);

				if ((LA82_0==74))
				{
					alt82 = 1;
				}


				} finally { DebugExitDecision(82); }
				switch ( alt82 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:331:11: ',' type
					{
					DebugLocation(331, 11);
					char_literal295=(IToken)Match(input,74,Follow._74_in_type_arguments3288); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal295_tree = (object)adaptor.Create(char_literal295, retval);
					adaptor.AddChild(root_0, char_literal295_tree);
					}
					DebugLocation(331, 15);
					PushFollow(Follow._type_in_type_arguments3290);
					type296=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type296.Tree, type296, retval);

					}
					break;

				default:
					goto loop82;
				}
			}

			loop82:
				;

			} finally { DebugExitSubRule(82); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_arguments", 78);
			LeaveRule("type_arguments", 78);
			LeaveRule_type_arguments();
			if (state.backtracking > 0) { Memoize(input, 78, type_arguments_StartIndex); }

		}
		DebugLocation(331, 21);
		} finally { DebugExitRule(GrammarFileName, "type_arguments"); }
		return retval;

	}
	// $ANTLR end "type_arguments"

	partial void EnterRule_type();
	partial void LeaveRule_type();

	// $ANTLR start "type"
	// cs.g:333:1: type : ( ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )* | ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' ) | ( predefined_type | type_name ) | 'void' ( '*' )+ );
	[GrammarRule("type")]
	public XAstParserRuleReturnScope type()
	{
		EnterRule_type();
		EnterRule("type", 79);
		var retval = new XAstParserRuleReturnScope("type");
		
		retval.Start = (IToken)input.LT(1);
		int type_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal300 = default(IToken);
		IToken char_literal303 = default(IToken);
		IToken char_literal304 = default(IToken);
		IToken string_literal307 = default(IToken);
		IToken char_literal308 = default(IToken);
		XAstParserRuleReturnScope predefined_type297 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name298 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope rank_specifiers299 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope predefined_type301 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name302 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope predefined_type305 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name306 = default(XAstParserRuleReturnScope);

		object char_literal300_tree = default(object);
		object char_literal303_tree = default(object);
		object char_literal304_tree = default(object);
		object string_literal307_tree = default(object);
		object char_literal308_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type");
		DebugLocation(333, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 79)) { return retval; }

			// cs.g:333:5: ( ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )* | ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' ) | ( predefined_type | type_name ) | 'void' ( '*' )+ )
			int alt90=4;
			try { DebugEnterDecision(90, false);
			switch (input.LA(1))
			{
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				int LA90_1 = input.LA(2);

				if ((EvaluatePredicate(synpred17_cs_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred18_cs_fragment)))
				{
					alt90 = 2;
				}
				else if ((true))
				{
					alt90 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA90_2 = input.LA(2);

				if ((EvaluatePredicate(synpred17_cs_fragment)))
				{
					alt90 = 1;
				}
				else if ((EvaluatePredicate(synpred18_cs_fragment)))
				{
					alt90 = 2;
				}
				else if ((true))
				{
					alt90 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 192:
				{
				alt90 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:334:7: ( ( predefined_type | type_name ) rank_specifiers )=> ( predefined_type | type_name ) rank_specifiers ( '*' )*
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(334, 59);
				// cs.g:334:59: ( predefined_type | type_name )
				int alt83=2;
				try { DebugEnterSubRule(83);
				try { DebugEnterDecision(83, false);
				int LA83_0 = input.LA(1);

				if ((LA83_0==103||LA83_0==106||LA83_0==109||LA83_0==114||LA83_0==119||LA83_0==129||LA83_0==138||LA83_0==146||LA83_0==151||LA83_0==169||LA83_0==173||LA83_0==177||(LA83_0>=185 && LA83_0<=186)||LA83_0==189))
				{
					alt83 = 1;
				}
				else if ((LA83_0==IDENTIFIER||LA83_0==95||(LA83_0>=97 && LA83_0<=98)||(LA83_0>=100 && LA83_0<=101)||LA83_0==105||LA83_0==117||LA83_0==120||LA83_0==122||LA83_0==126||LA83_0==132||LA83_0==135||LA83_0==141||(LA83_0>=143 && LA83_0<=144)||(LA83_0>=147 && LA83_0<=148)||LA83_0==152||LA83_0==154||LA83_0==157||LA83_0==160||LA83_0==162||LA83_0==167||(LA83_0>=171 && LA83_0<=172)||LA83_0==183||LA83_0==190||LA83_0==194||LA83_0==196))
				{
					alt83 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 83, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(83); }
				switch (alt83)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:334:60: predefined_type
					{
					DebugLocation(334, 60);
					PushFollow(Follow._predefined_type_in_type3322);
					predefined_type297=predefined_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, predefined_type297.Tree, predefined_type297, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:334:78: type_name
					{
					DebugLocation(334, 78);
					PushFollow(Follow._type_name_in_type3326);
					type_name298=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_name298.Tree, type_name298, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(83); }

				DebugLocation(334, 91);
				PushFollow(Follow._rank_specifiers_in_type3331);
				rank_specifiers299=rank_specifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, rank_specifiers299.Tree, rank_specifiers299, retval);
				DebugLocation(334, 109);
				// cs.g:334:109: ( '*' )*
				try { DebugEnterSubRule(84);
				while (true)
				{
					int alt84=2;
					try { DebugEnterDecision(84, false);
					int LA84_0 = input.LA(1);

					if ((LA84_0==69))
					{
						alt84 = 1;
					}


					} finally { DebugExitDecision(84); }
					switch ( alt84 )
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:334:109: '*'
						{
						DebugLocation(334, 109);
						char_literal300=(IToken)Match(input,69,Follow._69_in_type3335); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal300_tree = (object)adaptor.Create(char_literal300, retval);
						adaptor.AddChild(root_0, char_literal300_tree);
						}

						}
						break;

					default:
						goto loop84;
					}
				}

				loop84:
					;

				} finally { DebugExitSubRule(84); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:335:7: ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )=> ( predefined_type | type_name ) ( ( '*' )+ | '?' )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(335, 56);
				// cs.g:335:56: ( predefined_type | type_name )
				int alt85=2;
				try { DebugEnterSubRule(85);
				try { DebugEnterDecision(85, false);
				int LA85_0 = input.LA(1);

				if ((LA85_0==103||LA85_0==106||LA85_0==109||LA85_0==114||LA85_0==119||LA85_0==129||LA85_0==138||LA85_0==146||LA85_0==151||LA85_0==169||LA85_0==173||LA85_0==177||(LA85_0>=185 && LA85_0<=186)||LA85_0==189))
				{
					alt85 = 1;
				}
				else if ((LA85_0==IDENTIFIER||LA85_0==95||(LA85_0>=97 && LA85_0<=98)||(LA85_0>=100 && LA85_0<=101)||LA85_0==105||LA85_0==117||LA85_0==120||LA85_0==122||LA85_0==126||LA85_0==132||LA85_0==135||LA85_0==141||(LA85_0>=143 && LA85_0<=144)||(LA85_0>=147 && LA85_0<=148)||LA85_0==152||LA85_0==154||LA85_0==157||LA85_0==160||LA85_0==162||LA85_0==167||(LA85_0>=171 && LA85_0<=172)||LA85_0==183||LA85_0==190||LA85_0==194||LA85_0==196))
				{
					alt85 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 85, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(85); }
				switch (alt85)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:335:57: predefined_type
					{
					DebugLocation(335, 57);
					PushFollow(Follow._predefined_type_in_type3367);
					predefined_type301=predefined_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, predefined_type301.Tree, predefined_type301, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:335:75: type_name
					{
					DebugLocation(335, 75);
					PushFollow(Follow._type_name_in_type3371);
					type_name302=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_name302.Tree, type_name302, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(85); }

				DebugLocation(335, 88);
				// cs.g:335:88: ( ( '*' )+ | '?' )
				int alt87=2;
				try { DebugEnterSubRule(87);
				try { DebugEnterDecision(87, false);
				int LA87_0 = input.LA(1);

				if ((LA87_0==69))
				{
					alt87 = 1;
				}
				else if ((LA87_0==89))
				{
					alt87 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 87, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(87); }
				switch (alt87)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:335:89: ( '*' )+
					{
					DebugLocation(335, 89);
					// cs.g:335:89: ( '*' )+
					int cnt86=0;
					try { DebugEnterSubRule(86);
					while (true)
					{
						int alt86=2;
						try { DebugEnterDecision(86, false);
						int LA86_0 = input.LA(1);

						if ((LA86_0==69))
						{
							alt86 = 1;
						}


						} finally { DebugExitDecision(86); }
						switch (alt86)
						{
						case 1:
							DebugEnterAlt(1);
							// cs.g:335:89: '*'
							{
							DebugLocation(335, 89);
							char_literal303=(IToken)Match(input,69,Follow._69_in_type3377); if (state.failed) return retval;
							if (state.backtracking == 0) {
							char_literal303_tree = (object)adaptor.Create(char_literal303, retval);
							adaptor.AddChild(root_0, char_literal303_tree);
							}

							}
							break;

						default:
							if (cnt86 >= 1)
								goto loop86;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee86 = new EarlyExitException( 86, input );
							DebugRecognitionException(eee86);
							throw eee86;
						}
						cnt86++;
					}
					loop86:
						;

					} finally { DebugExitSubRule(86); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:335:96: '?'
					{
					DebugLocation(335, 96);
					char_literal304=(IToken)Match(input,89,Follow._89_in_type3382); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal304_tree = (object)adaptor.Create(char_literal304, retval);
					adaptor.AddChild(root_0, char_literal304_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(87); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:336:7: ( predefined_type | type_name )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(336, 7);
				// cs.g:336:7: ( predefined_type | type_name )
				int alt88=2;
				try { DebugEnterSubRule(88);
				try { DebugEnterDecision(88, false);
				int LA88_0 = input.LA(1);

				if ((LA88_0==103||LA88_0==106||LA88_0==109||LA88_0==114||LA88_0==119||LA88_0==129||LA88_0==138||LA88_0==146||LA88_0==151||LA88_0==169||LA88_0==173||LA88_0==177||(LA88_0>=185 && LA88_0<=186)||LA88_0==189))
				{
					alt88 = 1;
				}
				else if ((LA88_0==IDENTIFIER||LA88_0==95||(LA88_0>=97 && LA88_0<=98)||(LA88_0>=100 && LA88_0<=101)||LA88_0==105||LA88_0==117||LA88_0==120||LA88_0==122||LA88_0==126||LA88_0==132||LA88_0==135||LA88_0==141||(LA88_0>=143 && LA88_0<=144)||(LA88_0>=147 && LA88_0<=148)||LA88_0==152||LA88_0==154||LA88_0==157||LA88_0==160||LA88_0==162||LA88_0==167||(LA88_0>=171 && LA88_0<=172)||LA88_0==183||LA88_0==190||LA88_0==194||LA88_0==196))
				{
					alt88 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(88); }
				switch (alt88)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:336:8: predefined_type
					{
					DebugLocation(336, 8);
					PushFollow(Follow._predefined_type_in_type3392);
					predefined_type305=predefined_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, predefined_type305.Tree, predefined_type305, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:336:26: type_name
					{
					DebugLocation(336, 26);
					PushFollow(Follow._type_name_in_type3396);
					type_name306=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_name306.Tree, type_name306, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(88); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:337:7: 'void' ( '*' )+
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(337, 7);
				string_literal307=(IToken)Match(input,192,Follow._192_in_type3405); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal307_tree = (object)adaptor.Create(string_literal307, retval);
				adaptor.AddChild(root_0, string_literal307_tree);
				}
				DebugLocation(337, 14);
				// cs.g:337:14: ( '*' )+
				int cnt89=0;
				try { DebugEnterSubRule(89);
				while (true)
				{
					int alt89=2;
					try { DebugEnterDecision(89, false);
					int LA89_0 = input.LA(1);

					if ((LA89_0==69))
					{
						alt89 = 1;
					}


					} finally { DebugExitDecision(89); }
					switch (alt89)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:337:14: '*'
						{
						DebugLocation(337, 14);
						char_literal308=(IToken)Match(input,69,Follow._69_in_type3407); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal308_tree = (object)adaptor.Create(char_literal308, retval);
						adaptor.AddChild(root_0, char_literal308_tree);
						}

						}
						break;

					default:
						if (cnt89 >= 1)
							goto loop89;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee89 = new EarlyExitException( 89, input );
						DebugRecognitionException(eee89);
						throw eee89;
					}
					cnt89++;
				}
				loop89:
					;

				} finally { DebugExitSubRule(89); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type", 79);
			LeaveRule("type", 79);
			LeaveRule_type();
			if (state.backtracking > 0) { Memoize(input, 79, type_StartIndex); }

		}
		DebugLocation(338, 4);
		} finally { DebugExitRule(GrammarFileName, "type"); }
		return retval;

	}
	// $ANTLR end "type"

	partial void EnterRule_non_nullable_type();
	partial void LeaveRule_non_nullable_type();

	// $ANTLR start "non_nullable_type"
	// cs.g:339:1: non_nullable_type : ( ( predefined_type | type_name ) ( rank_specifiers ( '*' )* | ( ( '*' )+ )? ) | 'void' ( '*' )+ );
	[GrammarRule("non_nullable_type")]
	public XAstParserRuleReturnScope non_nullable_type()
	{
		EnterRule_non_nullable_type();
		EnterRule("non_nullable_type", 80);
		var retval = new XAstParserRuleReturnScope("non_nullable_type");
		
		retval.Start = (IToken)input.LT(1);
		int non_nullable_type_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal312 = default(IToken);
		IToken char_literal313 = default(IToken);
		IToken string_literal314 = default(IToken);
		IToken char_literal315 = default(IToken);
		XAstParserRuleReturnScope predefined_type309 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name310 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope rank_specifiers311 = default(XAstParserRuleReturnScope);

		object char_literal312_tree = default(object);
		object char_literal313_tree = default(object);
		object string_literal314_tree = default(object);
		object char_literal315_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "non_nullable_type");
		DebugLocation(339, 20);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 80)) { return retval; }

			// cs.g:339:18: ( ( predefined_type | type_name ) ( rank_specifiers ( '*' )* | ( ( '*' )+ )? ) | 'void' ( '*' )+ )
			int alt97=2;
			try { DebugEnterDecision(97, false);
			int LA97_0 = input.LA(1);

			if ((LA97_0==IDENTIFIER||LA97_0==95||(LA97_0>=97 && LA97_0<=98)||(LA97_0>=100 && LA97_0<=101)||LA97_0==103||(LA97_0>=105 && LA97_0<=106)||LA97_0==109||LA97_0==114||LA97_0==117||(LA97_0>=119 && LA97_0<=120)||LA97_0==122||LA97_0==126||LA97_0==129||LA97_0==132||LA97_0==135||LA97_0==138||LA97_0==141||(LA97_0>=143 && LA97_0<=144)||(LA97_0>=146 && LA97_0<=148)||(LA97_0>=151 && LA97_0<=152)||LA97_0==154||LA97_0==157||LA97_0==160||LA97_0==162||LA97_0==167||LA97_0==169||(LA97_0>=171 && LA97_0<=173)||LA97_0==177||LA97_0==183||(LA97_0>=185 && LA97_0<=186)||(LA97_0>=189 && LA97_0<=190)||LA97_0==194||LA97_0==196))
			{
				alt97 = 1;
			}
			else if ((LA97_0==192))
			{
				alt97 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 97, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:340:5: ( predefined_type | type_name ) ( rank_specifiers ( '*' )* | ( ( '*' )+ )? )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(340, 5);
				// cs.g:340:5: ( predefined_type | type_name )
				int alt91=2;
				try { DebugEnterSubRule(91);
				try { DebugEnterDecision(91, false);
				int LA91_0 = input.LA(1);

				if ((LA91_0==103||LA91_0==106||LA91_0==109||LA91_0==114||LA91_0==119||LA91_0==129||LA91_0==138||LA91_0==146||LA91_0==151||LA91_0==169||LA91_0==173||LA91_0==177||(LA91_0>=185 && LA91_0<=186)||LA91_0==189))
				{
					alt91 = 1;
				}
				else if ((LA91_0==IDENTIFIER||LA91_0==95||(LA91_0>=97 && LA91_0<=98)||(LA91_0>=100 && LA91_0<=101)||LA91_0==105||LA91_0==117||LA91_0==120||LA91_0==122||LA91_0==126||LA91_0==132||LA91_0==135||LA91_0==141||(LA91_0>=143 && LA91_0<=144)||(LA91_0>=147 && LA91_0<=148)||LA91_0==152||LA91_0==154||LA91_0==157||LA91_0==160||LA91_0==162||LA91_0==167||(LA91_0>=171 && LA91_0<=172)||LA91_0==183||LA91_0==190||LA91_0==194||LA91_0==196))
				{
					alt91 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 91, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(91); }
				switch (alt91)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:340:6: predefined_type
					{
					DebugLocation(340, 6);
					PushFollow(Follow._predefined_type_in_non_nullable_type3424);
					predefined_type309=predefined_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, predefined_type309.Tree, predefined_type309, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:340:24: type_name
					{
					DebugLocation(340, 24);
					PushFollow(Follow._type_name_in_non_nullable_type3428);
					type_name310=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_name310.Tree, type_name310, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(91); }

				DebugLocation(341, 9);
				// cs.g:341:9: ( rank_specifiers ( '*' )* | ( ( '*' )+ )? )
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, false);
				int LA95_0 = input.LA(1);

				if ((LA95_0==91))
				{
					alt95 = 1;
				}
				else if ((LA95_0==EOF||LA95_0==GT||LA95_0==IDENTIFIER||LA95_0==RPAREN||LA95_0==SEMI||LA95_0==62||(LA95_0>=65 && LA95_0<=66)||LA95_0==69||LA95_0==74||LA95_0==79||LA95_0==81||LA95_0==84||LA95_0==86||(LA95_0>=88 && LA95_0<=90)||(LA95_0>=92 && LA95_0<=93)||LA95_0==95||(LA95_0>=97 && LA95_0<=101)||LA95_0==105||LA95_0==117||LA95_0==120||LA95_0==122||LA95_0==126||LA95_0==132||LA95_0==135||(LA95_0>=141 && LA95_0<=144)||(LA95_0>=147 && LA95_0<=148)||LA95_0==152||LA95_0==154||LA95_0==157||LA95_0==160||LA95_0==162||LA95_0==167||(LA95_0>=171 && LA95_0<=172)||LA95_0==183||LA95_0==190||LA95_0==194||LA95_0==196||LA95_0==198||(LA95_0>=200 && LA95_0<=201)))
				{
					alt95 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:341:13: rank_specifiers ( '*' )*
					{
					DebugLocation(341, 13);
					PushFollow(Follow._rank_specifiers_in_non_nullable_type3443);
					rank_specifiers311=rank_specifiers();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, rank_specifiers311.Tree, rank_specifiers311, retval);
					DebugLocation(341, 31);
					// cs.g:341:31: ( '*' )*
					try { DebugEnterSubRule(92);
					while (true)
					{
						int alt92=2;
						try { DebugEnterDecision(92, false);
						int LA92_0 = input.LA(1);

						if ((LA92_0==69))
						{
							alt92 = 1;
						}


						} finally { DebugExitDecision(92); }
						switch ( alt92 )
						{
						case 1:
							DebugEnterAlt(1);
							// cs.g:341:31: '*'
							{
							DebugLocation(341, 31);
							char_literal312=(IToken)Match(input,69,Follow._69_in_non_nullable_type3447); if (state.failed) return retval;
							if (state.backtracking == 0) {
							char_literal312_tree = (object)adaptor.Create(char_literal312, retval);
							adaptor.AddChild(root_0, char_literal312_tree);
							}

							}
							break;

						default:
							goto loop92;
						}
					}

					loop92:
						;

					} finally { DebugExitSubRule(92); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:342:15: ( ( '*' )+ )?
					{
					DebugLocation(342, 15);
					// cs.g:342:15: ( ( '*' )+ )?
					int alt94=2;
					try { DebugEnterSubRule(94);
					try { DebugEnterDecision(94, false);
					int LA94_0 = input.LA(1);

					if ((LA94_0==69))
					{
						alt94 = 1;
					}
					} finally { DebugExitDecision(94); }
					switch (alt94)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:342:16: ( '*' )+
						{
						DebugLocation(342, 16);
						// cs.g:342:16: ( '*' )+
						int cnt93=0;
						try { DebugEnterSubRule(93);
						while (true)
						{
							int alt93=2;
							try { DebugEnterDecision(93, false);
							int LA93_0 = input.LA(1);

							if ((LA93_0==69))
							{
								alt93 = 1;
							}


							} finally { DebugExitDecision(93); }
							switch (alt93)
							{
							case 1:
								DebugEnterAlt(1);
								// cs.g:342:16: '*'
								{
								DebugLocation(342, 16);
								char_literal313=(IToken)Match(input,69,Follow._69_in_non_nullable_type3465); if (state.failed) return retval;
								if (state.backtracking == 0) {
								char_literal313_tree = (object)adaptor.Create(char_literal313, retval);
								adaptor.AddChild(root_0, char_literal313_tree);
								}

								}
								break;

							default:
								if (cnt93 >= 1)
									goto loop93;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee93 = new EarlyExitException( 93, input );
								DebugRecognitionException(eee93);
								throw eee93;
							}
							cnt93++;
						}
						loop93:
							;

						} finally { DebugExitSubRule(93); }


						}
						break;

					}
					} finally { DebugExitSubRule(94); }


					}
					break;

				}
				} finally { DebugExitSubRule(95); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:344:7: 'void' ( '*' )+
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(344, 7);
				string_literal314=(IToken)Match(input,192,Follow._192_in_non_nullable_type3486); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal314_tree = (object)adaptor.Create(string_literal314, retval);
				adaptor.AddChild(root_0, string_literal314_tree);
				}
				DebugLocation(344, 16);
				// cs.g:344:16: ( '*' )+
				int cnt96=0;
				try { DebugEnterSubRule(96);
				while (true)
				{
					int alt96=2;
					try { DebugEnterDecision(96, false);
					int LA96_0 = input.LA(1);

					if ((LA96_0==69))
					{
						alt96 = 1;
					}


					} finally { DebugExitDecision(96); }
					switch (alt96)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:344:16: '*'
						{
						DebugLocation(344, 16);
						char_literal315=(IToken)Match(input,69,Follow._69_in_non_nullable_type3490); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal315_tree = (object)adaptor.Create(char_literal315, retval);
						adaptor.AddChild(root_0, char_literal315_tree);
						}

						}
						break;

					default:
						if (cnt96 >= 1)
							goto loop96;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee96 = new EarlyExitException( 96, input );
						DebugRecognitionException(eee96);
						throw eee96;
					}
					cnt96++;
				}
				loop96:
					;

				} finally { DebugExitSubRule(96); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("non_nullable_type", 80);
			LeaveRule("non_nullable_type", 80);
			LeaveRule_non_nullable_type();
			if (state.backtracking > 0) { Memoize(input, 80, non_nullable_type_StartIndex); }

		}
		DebugLocation(344, 20);
		} finally { DebugExitRule(GrammarFileName, "non_nullable_type"); }
		return retval;

	}
	// $ANTLR end "non_nullable_type"

	partial void EnterRule_non_array_type();
	partial void LeaveRule_non_array_type();

	// $ANTLR start "non_array_type"
	// cs.g:346:1: non_array_type : type ;
	[GrammarRule("non_array_type")]
	public XAstParserRuleReturnScope non_array_type()
	{
		EnterRule_non_array_type();
		EnterRule("non_array_type", 81);
		var retval = new XAstParserRuleReturnScope("non_array_type");
		
		retval.Start = (IToken)input.LT(1);
		int non_array_type_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope type316 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "non_array_type");
		DebugLocation(346, 8);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 81)) { return retval; }

			// cs.g:346:15: ( type )
			DebugEnterAlt(1);
			// cs.g:347:5: type
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(347, 5);
			PushFollow(Follow._type_in_non_array_type3507);
			type316=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type316.Tree, type316, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("non_array_type", 81);
			LeaveRule("non_array_type", 81);
			LeaveRule_non_array_type();
			if (state.backtracking > 0) { Memoize(input, 81, non_array_type_StartIndex); }

		}
		DebugLocation(347, 8);
		} finally { DebugExitRule(GrammarFileName, "non_array_type"); }
		return retval;

	}
	// $ANTLR end "non_array_type"

	partial void EnterRule_array_type();
	partial void LeaveRule_array_type();

	// $ANTLR start "array_type"
	// cs.g:348:1: array_type : type ;
	[GrammarRule("array_type")]
	public XAstParserRuleReturnScope array_type()
	{
		EnterRule_array_type();
		EnterRule("array_type", 82);
		var retval = new XAstParserRuleReturnScope("array_type");
		
		retval.Start = (IToken)input.LT(1);
		int array_type_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope type317 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "array_type");
		DebugLocation(348, 8);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 82)) { return retval; }

			// cs.g:348:11: ( type )
			DebugEnterAlt(1);
			// cs.g:349:5: type
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(349, 5);
			PushFollow(Follow._type_in_array_type3517);
			type317=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type317.Tree, type317, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("array_type", 82);
			LeaveRule("array_type", 82);
			LeaveRule_array_type();
			if (state.backtracking > 0) { Memoize(input, 82, array_type_StartIndex); }

		}
		DebugLocation(349, 8);
		} finally { DebugExitRule(GrammarFileName, "array_type"); }
		return retval;

	}
	// $ANTLR end "array_type"

	partial void EnterRule_unmanaged_type();
	partial void LeaveRule_unmanaged_type();

	// $ANTLR start "unmanaged_type"
	// cs.g:350:1: unmanaged_type : type ;
	[GrammarRule("unmanaged_type")]
	public XAstParserRuleReturnScope unmanaged_type()
	{
		EnterRule_unmanaged_type();
		EnterRule("unmanaged_type", 83);
		var retval = new XAstParserRuleReturnScope("unmanaged_type");
		
		retval.Start = (IToken)input.LT(1);
		int unmanaged_type_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope type318 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "unmanaged_type");
		DebugLocation(350, 8);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 83)) { return retval; }

			// cs.g:350:15: ( type )
			DebugEnterAlt(1);
			// cs.g:351:5: type
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(351, 5);
			PushFollow(Follow._type_in_unmanaged_type3527);
			type318=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type318.Tree, type318, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unmanaged_type", 83);
			LeaveRule("unmanaged_type", 83);
			LeaveRule_unmanaged_type();
			if (state.backtracking > 0) { Memoize(input, 83, unmanaged_type_StartIndex); }

		}
		DebugLocation(351, 8);
		} finally { DebugExitRule(GrammarFileName, "unmanaged_type"); }
		return retval;

	}
	// $ANTLR end "unmanaged_type"

	partial void EnterRule_class_type();
	partial void LeaveRule_class_type();

	// $ANTLR start "class_type"
	// cs.g:352:1: class_type : type ;
	[GrammarRule("class_type")]
	public XAstParserRuleReturnScope class_type()
	{
		EnterRule_class_type();
		EnterRule("class_type", 84);
		var retval = new XAstParserRuleReturnScope("class_type");
		
		retval.Start = (IToken)input.LT(1);
		int class_type_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope type319 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "class_type");
		DebugLocation(352, 8);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 84)) { return retval; }

			// cs.g:352:11: ( type )
			DebugEnterAlt(1);
			// cs.g:353:5: type
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(353, 5);
			PushFollow(Follow._type_in_class_type3537);
			type319=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type319.Tree, type319, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_type", 84);
			LeaveRule("class_type", 84);
			LeaveRule_class_type();
			if (state.backtracking > 0) { Memoize(input, 84, class_type_StartIndex); }

		}
		DebugLocation(353, 8);
		} finally { DebugExitRule(GrammarFileName, "class_type"); }
		return retval;

	}
	// $ANTLR end "class_type"

	partial void EnterRule_pointer_type();
	partial void LeaveRule_pointer_type();

	// $ANTLR start "pointer_type"
	// cs.g:354:1: pointer_type : type ;
	[GrammarRule("pointer_type")]
	public XAstParserRuleReturnScope pointer_type()
	{
		EnterRule_pointer_type();
		EnterRule("pointer_type", 85);
		var retval = new XAstParserRuleReturnScope("pointer_type");
		
		retval.Start = (IToken)input.LT(1);
		int pointer_type_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope type320 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "pointer_type");
		DebugLocation(354, 8);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 85)) { return retval; }

			// cs.g:354:13: ( type )
			DebugEnterAlt(1);
			// cs.g:355:5: type
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(355, 5);
			PushFollow(Follow._type_in_pointer_type3547);
			type320=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type320.Tree, type320, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pointer_type", 85);
			LeaveRule("pointer_type", 85);
			LeaveRule_pointer_type();
			if (state.backtracking > 0) { Memoize(input, 85, pointer_type_StartIndex); }

		}
		DebugLocation(355, 8);
		} finally { DebugExitRule(GrammarFileName, "pointer_type"); }
		return retval;

	}
	// $ANTLR end "pointer_type"

	partial void EnterRule_block();
	partial void LeaveRule_block();

	// $ANTLR start "block"
	// cs.g:361:1: block : ( ';' | '{' ( statement_list )? '}' );
	[GrammarRule("block")]
	public XAstParserRuleReturnScope block()
	{
		EnterRule_block();
		EnterRule("block", 86);
		var retval = new XAstParserRuleReturnScope("block");
		
		retval.Start = (IToken)input.LT(1);
		int block_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal321 = default(IToken);
		IToken char_literal322 = default(IToken);
		IToken char_literal324 = default(IToken);
		XAstParserRuleReturnScope statement_list323 = default(XAstParserRuleReturnScope);

		object char_literal321_tree = default(object);
		object char_literal322_tree = default(object);
		object char_literal324_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(361, 33);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 86)) { return retval; }

			// cs.g:361:6: ( ';' | '{' ( statement_list )? '}' )
			int alt99=2;
			try { DebugEnterDecision(99, false);
			int LA99_0 = input.LA(1);

			if ((LA99_0==SEMI))
			{
				alt99 = 1;
			}
			else if ((LA99_0==197))
			{
				alt99 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 99, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:362:5: ';'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(362, 5);
				char_literal321=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_block3562), "SEMI"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal321_tree = (object)adaptor.Create(char_literal321, retval);
				adaptor.AddChild(root_0, char_literal321_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:363:7: '{' ( statement_list )? '}'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(363, 7);
				char_literal322=(IToken)Match(input,197,Follow._197_in_block3570); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal322_tree = (object)adaptor.Create(char_literal322, retval);
				adaptor.AddChild(root_0, char_literal322_tree);
				}
				DebugLocation(363, 13);
				// cs.g:363:13: ( statement_list )?
				int alt98=2;
				try { DebugEnterSubRule(98);
				try { DebugEnterDecision(98, false);
				int LA98_0 = input.LA(1);

				if ((LA98_0==Character_literal||LA98_0==FALSE||(LA98_0>=Hex_number && LA98_0<=IF)||(LA98_0>=MINUS && LA98_0<=NUMBER)||LA98_0==Real_literal||(LA98_0>=SEMI && LA98_0<=STRINGLITERAL)||LA98_0==TRUE||(LA98_0>=USING && LA98_0<=Verbatim_string_literal)||LA98_0==61||LA98_0==66||(LA98_0>=68 && LA98_0<=69)||(LA98_0>=71 && LA98_0<=72)||LA98_0==75||LA98_0==95||(LA98_0>=97 && LA98_0<=98)||(LA98_0>=100 && LA98_0<=106)||(LA98_0>=109 && LA98_0<=110)||(LA98_0>=112 && LA98_0<=120)||LA98_0==122||LA98_0==126||(LA98_0>=128 && LA98_0<=132)||(LA98_0>=134 && LA98_0<=135)||LA98_0==138||LA98_0==141||(LA98_0>=143 && LA98_0<=148)||(LA98_0>=150 && LA98_0<=152)||LA98_0==154||LA98_0==157||LA98_0==160||LA98_0==162||(LA98_0>=167 && LA98_0<=169)||(LA98_0>=171 && LA98_0<=174)||LA98_0==177||(LA98_0>=179 && LA98_0<=190)||LA98_0==192||(LA98_0>=194 && LA98_0<=197)||LA98_0==202))
				{
					alt98 = 1;
				}
				} finally { DebugExitDecision(98); }
				switch (alt98)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:363:13: statement_list
					{
					DebugLocation(363, 13);
					PushFollow(Follow._statement_list_in_block3574);
					statement_list323=statement_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement_list323.Tree, statement_list323, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(98); }

				DebugLocation(363, 31);
				char_literal324=(IToken)Match(input,201,Follow._201_in_block3579); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal324_tree = (object)adaptor.Create(char_literal324, retval);
				adaptor.AddChild(root_0, char_literal324_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 86);
			LeaveRule("block", 86);
			LeaveRule_block();
			if (state.backtracking > 0) { Memoize(input, 86, block_StartIndex); }

		}
		DebugLocation(363, 33);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_statement_list();
	partial void LeaveRule_statement_list();

	// $ANTLR start "statement_list"
	// cs.g:364:1: statement_list : ( statement )+ ;
	[GrammarRule("statement_list")]
	public XAstParserRuleReturnScope statement_list()
	{
		EnterRule_statement_list();
		EnterRule("statement_list", 87);
		var retval = new XAstParserRuleReturnScope("statement_list");
		
		retval.Start = (IToken)input.LT(1);
		int statement_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope statement325 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "statement_list");
		DebugLocation(364, 15);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 87)) { return retval; }

			// cs.g:364:15: ( ( statement )+ )
			DebugEnterAlt(1);
			// cs.g:365:5: ( statement )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(365, 5);
			// cs.g:365:5: ( statement )+
			int cnt100=0;
			try { DebugEnterSubRule(100);
			while (true)
			{
				int alt100=2;
				try { DebugEnterDecision(100, false);
				int LA100_0 = input.LA(1);

				if ((LA100_0==115))
				{
					int LA100_2 = input.LA(2);

					if ((LA100_2==68))
					{
						alt100 = 1;
					}


				}
				else if ((LA100_0==Character_literal||LA100_0==FALSE||(LA100_0>=Hex_number && LA100_0<=IF)||(LA100_0>=MINUS && LA100_0<=NUMBER)||LA100_0==Real_literal||(LA100_0>=SEMI && LA100_0<=STRINGLITERAL)||LA100_0==TRUE||(LA100_0>=USING && LA100_0<=Verbatim_string_literal)||LA100_0==61||LA100_0==66||(LA100_0>=68 && LA100_0<=69)||(LA100_0>=71 && LA100_0<=72)||LA100_0==75||LA100_0==95||(LA100_0>=97 && LA100_0<=98)||(LA100_0>=100 && LA100_0<=106)||(LA100_0>=109 && LA100_0<=110)||(LA100_0>=112 && LA100_0<=114)||(LA100_0>=116 && LA100_0<=120)||LA100_0==122||LA100_0==126||(LA100_0>=128 && LA100_0<=132)||(LA100_0>=134 && LA100_0<=135)||LA100_0==138||LA100_0==141||(LA100_0>=143 && LA100_0<=148)||(LA100_0>=150 && LA100_0<=152)||LA100_0==154||LA100_0==157||LA100_0==160||LA100_0==162||(LA100_0>=167 && LA100_0<=169)||(LA100_0>=171 && LA100_0<=174)||LA100_0==177||(LA100_0>=179 && LA100_0<=190)||LA100_0==192||(LA100_0>=194 && LA100_0<=197)||LA100_0==202))
				{
					alt100 = 1;
				}


				} finally { DebugExitDecision(100); }
				switch (alt100)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:365:5: statement
					{
					DebugLocation(365, 5);
					PushFollow(Follow._statement_in_statement_list3589);
					statement325=statement();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement325.Tree, statement325, retval);

					}
					break;

				default:
					if (cnt100 >= 1)
						goto loop100;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee100 = new EarlyExitException( 100, input );
					DebugRecognitionException(eee100);
					throw eee100;
				}
				cnt100++;
			}
			loop100:
				;

			} finally { DebugExitSubRule(100); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement_list", 87);
			LeaveRule("statement_list", 87);
			LeaveRule_statement_list();
			if (state.backtracking > 0) { Memoize(input, 87, statement_list_StartIndex); }

		}
		DebugLocation(365, 15);
		} finally { DebugExitRule(GrammarFileName, "statement_list"); }
		return retval;

	}
	// $ANTLR end "statement_list"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();

	// $ANTLR start "expression"
	// cs.g:370:1: expression : ( ( unary_expression assignment_operator )=> assignment | non_assignment_expression );
	[GrammarRule("expression")]
	public XAstParserRuleReturnScope expression()
	{
		EnterRule_expression();
		EnterRule("expression", 88);
		var retval = new XAstParserRuleReturnScope("expression");
		
		retval.Start = (IToken)input.LT(1);
		int expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope assignment326 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope non_assignment_expression327 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(370, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 88)) { return retval; }

			// cs.g:370:11: ( ( unary_expression assignment_operator )=> assignment | non_assignment_expression )
			int alt101=2;
			try { DebugEnterDecision(101, false);
			switch (input.LA(1))
			{
			case 68:
				{
				int LA101_1 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 150:
				{
				int LA101_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 180:
				{
				int LA101_3 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				int LA101_4 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 132:
				{
				int LA101_5 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 102:
				{
				int LA101_6 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 184:
				{
				int LA101_7 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
				{
				int LA101_8 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 174:
				{
				int LA101_9 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 9, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 110:
				{
				int LA101_10 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 10, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 187:
				{
				int LA101_11 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 11, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 115:
				{
				int LA101_12 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 12, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 116:
				{
				int LA101_13 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 13, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 71:
				{
				int LA101_14 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 14, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MINUS:
				{
				int LA101_15 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 15, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 61:
				{
				int LA101_16 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 16, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 202:
				{
				int LA101_17 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 17, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 72:
				{
				int LA101_18 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 18, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 75:
				{
				int LA101_19 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 19, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 69:
				{
				int LA101_20 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 20, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 66:
				{
				int LA101_21 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 21, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA101_22 = input.LA(2);

				if ((EvaluatePredicate(synpred19_cs_fragment)))
				{
					alt101 = 1;
				}
				else if ((true))
				{
					alt101 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 22, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:371:5: ( unary_expression assignment_operator )=> assignment
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(371, 49);
				PushFollow(Follow._assignment_in_expression3620);
				assignment326=assignment();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assignment326.Tree, assignment326, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:372:7: non_assignment_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(372, 7);
				PushFollow(Follow._non_assignment_expression_in_expression3629);
				non_assignment_expression327=non_assignment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, non_assignment_expression327.Tree, non_assignment_expression327, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 88);
			LeaveRule("expression", 88);
			LeaveRule_expression();
			if (state.backtracking > 0) { Memoize(input, 88, expression_StartIndex); }

		}
		DebugLocation(373, 4);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_expression_list();
	partial void LeaveRule_expression_list();

	// $ANTLR start "expression_list"
	// cs.g:374:1: expression_list : expression ( ',' expression )* ;
	[GrammarRule("expression_list")]
	public XAstParserRuleReturnScope expression_list()
	{
		EnterRule_expression_list();
		EnterRule("expression_list", 89);
		var retval = new XAstParserRuleReturnScope("expression_list");
		
		retval.Start = (IToken)input.LT(1);
		int expression_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal329 = default(IToken);
		XAstParserRuleReturnScope expression328 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression330 = default(XAstParserRuleReturnScope);

		object char_literal329_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expression_list");
		DebugLocation(374, 36);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 89)) { return retval; }

			// cs.g:374:16: ( expression ( ',' expression )* )
			DebugEnterAlt(1);
			// cs.g:375:5: expression ( ',' expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(375, 5);
			PushFollow(Follow._expression_in_expression_list3644);
			expression328=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression328.Tree, expression328, retval);
			DebugLocation(375, 17);
			// cs.g:375:17: ( ',' expression )*
			try { DebugEnterSubRule(102);
			while (true)
			{
				int alt102=2;
				try { DebugEnterDecision(102, false);
				int LA102_0 = input.LA(1);

				if ((LA102_0==74))
				{
					alt102 = 1;
				}


				} finally { DebugExitDecision(102); }
				switch ( alt102 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:375:18: ',' expression
					{
					DebugLocation(375, 18);
					char_literal329=(IToken)Match(input,74,Follow._74_in_expression_list3648); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal329_tree = (object)adaptor.Create(char_literal329, retval);
					adaptor.AddChild(root_0, char_literal329_tree);
					}
					DebugLocation(375, 24);
					PushFollow(Follow._expression_in_expression_list3652);
					expression330=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression330.Tree, expression330, retval);

					}
					break;

				default:
					goto loop102;
				}
			}

			loop102:
				;

			} finally { DebugExitSubRule(102); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list", 89);
			LeaveRule("expression_list", 89);
			LeaveRule_expression_list();
			if (state.backtracking > 0) { Memoize(input, 89, expression_list_StartIndex); }

		}
		DebugLocation(375, 36);
		} finally { DebugExitRule(GrammarFileName, "expression_list"); }
		return retval;

	}
	// $ANTLR end "expression_list"

	partial void EnterRule_assignment();
	partial void LeaveRule_assignment();

	// $ANTLR start "assignment"
	// cs.g:376:1: assignment : unary_expression assignment_operator expression ;
	[GrammarRule("assignment")]
	public XAstParserRuleReturnScope assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 90);
		var retval = new XAstParserRuleReturnScope("assignment");
		
		retval.Start = (IToken)input.LT(1);
		int assignment_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope unary_expression331 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope assignment_operator332 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression333 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(376, 56);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 90)) { return retval; }

			// cs.g:376:11: ( unary_expression assignment_operator expression )
			DebugEnterAlt(1);
			// cs.g:377:5: unary_expression assignment_operator expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(377, 5);
			PushFollow(Follow._unary_expression_in_assignment3665);
			unary_expression331=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression331.Tree, unary_expression331, retval);
			DebugLocation(377, 24);
			PushFollow(Follow._assignment_operator_in_assignment3669);
			assignment_operator332=assignment_operator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignment_operator332.Tree, assignment_operator332, retval);
			DebugLocation(377, 46);
			PushFollow(Follow._expression_in_assignment3673);
			expression333=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression333.Tree, expression333, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment", 90);
			LeaveRule("assignment", 90);
			LeaveRule_assignment();
			if (state.backtracking > 0) { Memoize(input, 90, assignment_StartIndex); }

		}
		DebugLocation(377, 56);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return retval;

	}
	// $ANTLR end "assignment"

	partial void EnterRule_unary_expression();
	partial void LeaveRule_unary_expression();

	// $ANTLR start "unary_expression"
	// cs.g:378:1: unary_expression : ( ( cast_expression )=> cast_expression | primary_or_array_creation_expression ( '++' )? ( '--' )? | '+' unary_expression | '-' unary_expression | '!' unary_expression | '~' unary_expression | pre_increment_expression | pre_decrement_expression | pointer_indirection_expression | addressof_expression );
	[GrammarRule("unary_expression")]
	public XAstParserRuleReturnScope unary_expression()
	{
		EnterRule_unary_expression();
		EnterRule("unary_expression", 91);
		var retval = new XAstParserRuleReturnScope("unary_expression");
		
		retval.Start = (IToken)input.LT(1);
		int unary_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal336 = default(IToken);
		IToken string_literal337 = default(IToken);
		IToken char_literal338 = default(IToken);
		IToken char_literal340 = default(IToken);
		IToken char_literal342 = default(IToken);
		IToken char_literal344 = default(IToken);
		XAstParserRuleReturnScope cast_expression334 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope primary_or_array_creation_expression335 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression339 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression341 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression343 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression345 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope pre_increment_expression346 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope pre_decrement_expression347 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope pointer_indirection_expression348 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope addressof_expression349 = default(XAstParserRuleReturnScope);

		object string_literal336_tree = default(object);
		object string_literal337_tree = default(object);
		object char_literal338_tree = default(object);
		object char_literal340_tree = default(object);
		object char_literal342_tree = default(object);
		object char_literal344_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unary_expression");
		DebugLocation(378, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 91)) { return retval; }

			// cs.g:378:17: ( ( cast_expression )=> cast_expression | primary_or_array_creation_expression ( '++' )? ( '--' )? | '+' unary_expression | '-' unary_expression | '!' unary_expression | '~' unary_expression | pre_increment_expression | pre_decrement_expression | pointer_indirection_expression | addressof_expression )
			int alt105=10;
			try { DebugEnterDecision(105, false);
			switch (input.LA(1))
			{
			case 68:
				{
				int LA105_1 = input.LA(2);

				if ((EvaluatePredicate(synpred20_cs_fragment)))
				{
					alt105 = 1;
				}
				else if ((true))
				{
					alt105 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 105, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case IDENTIFIER:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 102:
			case 103:
			case 105:
			case 106:
			case 109:
			case 110:
			case 114:
			case 115:
			case 116:
			case 117:
			case 119:
			case 120:
			case 122:
			case 126:
			case 129:
			case 132:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 150:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 174:
			case 177:
			case 180:
			case 183:
			case 184:
			case 185:
			case 186:
			case 187:
			case 189:
			case 190:
			case 194:
			case 196:
				{
				alt105 = 2;
				}
				break;
			case 71:
				{
				alt105 = 3;
				}
				break;
			case MINUS:
				{
				alt105 = 4;
				}
				break;
			case 61:
				{
				alt105 = 5;
				}
				break;
			case 202:
				{
				alt105 = 6;
				}
				break;
			case 72:
				{
				alt105 = 7;
				}
				break;
			case 75:
				{
				alt105 = 8;
				}
				break;
			case 69:
				{
				alt105 = 9;
				}
				break;
			case 66:
				{
				alt105 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 105, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(105); }
			switch (alt105)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:380:5: ( cast_expression )=> cast_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(380, 26);
				PushFollow(Follow._cast_expression_in_unary_expression3696);
				cast_expression334=cast_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cast_expression334.Tree, cast_expression334, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:381:7: primary_or_array_creation_expression ( '++' )? ( '--' )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(381, 7);
				PushFollow(Follow._primary_or_array_creation_expression_in_unary_expression3704);
				primary_or_array_creation_expression335=primary_or_array_creation_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, primary_or_array_creation_expression335.Tree, primary_or_array_creation_expression335, retval);
				DebugLocation(381, 46);
				// cs.g:381:46: ( '++' )?
				int alt103=2;
				try { DebugEnterSubRule(103);
				try { DebugEnterDecision(103, false);
				int LA103_0 = input.LA(1);

				if ((LA103_0==72))
				{
					alt103 = 1;
				}
				} finally { DebugExitDecision(103); }
				switch (alt103)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:381:46: '++'
					{
					DebugLocation(381, 46);
					string_literal336=(IToken)Match(input,72,Follow._72_in_unary_expression3708); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal336_tree = (object)adaptor.Create(string_literal336, retval);
					adaptor.AddChild(root_0, string_literal336_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(103); }

				DebugLocation(381, 54);
				// cs.g:381:54: ( '--' )?
				int alt104=2;
				try { DebugEnterSubRule(104);
				try { DebugEnterDecision(104, false);
				int LA104_0 = input.LA(1);

				if ((LA104_0==75))
				{
					alt104 = 1;
				}
				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:381:54: '--'
					{
					DebugLocation(381, 54);
					string_literal337=(IToken)Match(input,75,Follow._75_in_unary_expression3713); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal337_tree = (object)adaptor.Create(string_literal337, retval);
					adaptor.AddChild(root_0, string_literal337_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(104); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:382:7: '+' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(382, 7);
				char_literal338=(IToken)Match(input,71,Follow._71_in_unary_expression3722); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal338_tree = (object)adaptor.Create(char_literal338, retval);
				adaptor.AddChild(root_0, char_literal338_tree);
				}
				DebugLocation(382, 13);
				PushFollow(Follow._unary_expression_in_unary_expression3726);
				unary_expression339=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression339.Tree, unary_expression339, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:383:7: '-' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(383, 7);
				char_literal340=(IToken)new XToken((IToken)Match(input,MINUS,Follow._MINUS_in_unary_expression3735), "MINUS"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal340_tree = (object)adaptor.Create(char_literal340, retval);
				adaptor.AddChild(root_0, char_literal340_tree);
				}
				DebugLocation(383, 13);
				PushFollow(Follow._unary_expression_in_unary_expression3739);
				unary_expression341=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression341.Tree, unary_expression341, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// cs.g:384:7: '!' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(384, 7);
				char_literal342=(IToken)Match(input,61,Follow._61_in_unary_expression3748); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal342_tree = (object)adaptor.Create(char_literal342, retval);
				adaptor.AddChild(root_0, char_literal342_tree);
				}
				DebugLocation(384, 13);
				PushFollow(Follow._unary_expression_in_unary_expression3752);
				unary_expression343=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression343.Tree, unary_expression343, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// cs.g:385:7: '~' unary_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(385, 7);
				char_literal344=(IToken)Match(input,202,Follow._202_in_unary_expression3761); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal344_tree = (object)adaptor.Create(char_literal344, retval);
				adaptor.AddChild(root_0, char_literal344_tree);
				}
				DebugLocation(385, 13);
				PushFollow(Follow._unary_expression_in_unary_expression3765);
				unary_expression345=unary_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression345.Tree, unary_expression345, retval);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// cs.g:386:7: pre_increment_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(386, 7);
				PushFollow(Follow._pre_increment_expression_in_unary_expression3774);
				pre_increment_expression346=pre_increment_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pre_increment_expression346.Tree, pre_increment_expression346, retval);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// cs.g:387:7: pre_decrement_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(387, 7);
				PushFollow(Follow._pre_decrement_expression_in_unary_expression3783);
				pre_decrement_expression347=pre_decrement_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pre_decrement_expression347.Tree, pre_decrement_expression347, retval);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// cs.g:388:7: pointer_indirection_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(388, 7);
				PushFollow(Follow._pointer_indirection_expression_in_unary_expression3792);
				pointer_indirection_expression348=pointer_indirection_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pointer_indirection_expression348.Tree, pointer_indirection_expression348, retval);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// cs.g:389:7: addressof_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(389, 7);
				PushFollow(Follow._addressof_expression_in_unary_expression3800);
				addressof_expression349=addressof_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, addressof_expression349.Tree, addressof_expression349, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_expression", 91);
			LeaveRule("unary_expression", 91);
			LeaveRule_unary_expression();
			if (state.backtracking > 0) { Memoize(input, 91, unary_expression_StartIndex); }

		}
		DebugLocation(390, 4);
		} finally { DebugExitRule(GrammarFileName, "unary_expression"); }
		return retval;

	}
	// $ANTLR end "unary_expression"

	partial void EnterRule_cast_expression();
	partial void LeaveRule_cast_expression();

	// $ANTLR start "cast_expression"
	// cs.g:391:1: cast_expression : '(' type ')' unary_expression ;
	[GrammarRule("cast_expression")]
	public XAstParserRuleReturnScope cast_expression()
	{
		EnterRule_cast_expression();
		EnterRule("cast_expression", 92);
		var retval = new XAstParserRuleReturnScope("cast_expression");
		
		retval.Start = (IToken)input.LT(1);
		int cast_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal350 = default(IToken);
		IToken char_literal352 = default(IToken);
		XAstParserRuleReturnScope type351 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression353 = default(XAstParserRuleReturnScope);

		object char_literal350_tree = default(object);
		object char_literal352_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "cast_expression");
		DebugLocation(391, 40);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 92)) { return retval; }

			// cs.g:391:16: ( '(' type ')' unary_expression )
			DebugEnterAlt(1);
			// cs.g:392:5: '(' type ')' unary_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(392, 5);
			char_literal350=(IToken)Match(input,68,Follow._68_in_cast_expression3816); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal350_tree = (object)adaptor.Create(char_literal350, retval);
			adaptor.AddChild(root_0, char_literal350_tree);
			}
			DebugLocation(392, 11);
			PushFollow(Follow._type_in_cast_expression3820);
			type351=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type351.Tree, type351, retval);
			DebugLocation(392, 18);
			char_literal352=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_cast_expression3824), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal352_tree = (object)adaptor.Create(char_literal352, retval);
			adaptor.AddChild(root_0, char_literal352_tree);
			}
			DebugLocation(392, 24);
			PushFollow(Follow._unary_expression_in_cast_expression3828);
			unary_expression353=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression353.Tree, unary_expression353, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expression", 92);
			LeaveRule("cast_expression", 92);
			LeaveRule_cast_expression();
			if (state.backtracking > 0) { Memoize(input, 92, cast_expression_StartIndex); }

		}
		DebugLocation(392, 40);
		} finally { DebugExitRule(GrammarFileName, "cast_expression"); }
		return retval;

	}
	// $ANTLR end "cast_expression"

	partial void EnterRule_assignment_operator();
	partial void LeaveRule_assignment_operator();

	// $ANTLR start "assignment_operator"
	// cs.g:393:1: assignment_operator : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>' '>=' );
	[GrammarRule("assignment_operator")]
	public XAstParserRuleReturnScope assignment_operator()
	{
		EnterRule_assignment_operator();
		EnterRule("assignment_operator", 93);
		var retval = new XAstParserRuleReturnScope("assignment_operator");
		
		retval.Start = (IToken)input.LT(1);
		int assignment_operator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal354 = default(IToken);
		IToken string_literal355 = default(IToken);
		IToken string_literal356 = default(IToken);
		IToken string_literal357 = default(IToken);
		IToken string_literal358 = default(IToken);
		IToken string_literal359 = default(IToken);
		IToken string_literal360 = default(IToken);
		IToken string_literal361 = default(IToken);
		IToken string_literal362 = default(IToken);
		IToken string_literal363 = default(IToken);
		IToken char_literal364 = default(IToken);
		IToken string_literal365 = default(IToken);

		object char_literal354_tree = default(object);
		object string_literal355_tree = default(object);
		object string_literal356_tree = default(object);
		object string_literal357_tree = default(object);
		object string_literal358_tree = default(object);
		object string_literal359_tree = default(object);
		object string_literal360_tree = default(object);
		object string_literal361_tree = default(object);
		object string_literal362_tree = default(object);
		object string_literal363_tree = default(object);
		object char_literal364_tree = default(object);
		object string_literal365_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assignment_operator");
		DebugLocation(393, 83);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 93)) { return retval; }

			// cs.g:393:20: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>' '>=' )
			int alt106=11;
			try { DebugEnterDecision(106, false);
			switch (input.LA(1))
			{
			case 85:
				{
				alt106 = 1;
				}
				break;
			case 73:
				{
				alt106 = 2;
				}
				break;
			case 76:
				{
				alt106 = 3;
				}
				break;
			case 70:
				{
				alt106 = 4;
				}
				break;
			case 78:
				{
				alt106 = 5;
				}
				break;
			case 64:
				{
				alt106 = 6;
				}
				break;
			case 67:
				{
				alt106 = 7;
				}
				break;
			case 199:
				{
				alt106 = 8;
				}
				break;
			case 94:
				{
				alt106 = 9;
				}
				break;
			case 83:
				{
				alt106 = 10;
				}
				break;
			case GT:
				{
				alt106 = 11;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 106, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(106); }
			switch (alt106)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:394:5: '='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 5);
				char_literal354=(IToken)Match(input,85,Follow._85_in_assignment_operator3839); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal354_tree = (object)adaptor.Create(char_literal354, retval);
				adaptor.AddChild(root_0, char_literal354_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:394:11: '+='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 11);
				string_literal355=(IToken)Match(input,73,Follow._73_in_assignment_operator3843); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal355_tree = (object)adaptor.Create(string_literal355, retval);
				adaptor.AddChild(root_0, string_literal355_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:394:18: '-='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 18);
				string_literal356=(IToken)Match(input,76,Follow._76_in_assignment_operator3847); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal356_tree = (object)adaptor.Create(string_literal356, retval);
				adaptor.AddChild(root_0, string_literal356_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:394:25: '*='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 25);
				string_literal357=(IToken)Match(input,70,Follow._70_in_assignment_operator3851); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal357_tree = (object)adaptor.Create(string_literal357, retval);
				adaptor.AddChild(root_0, string_literal357_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// cs.g:394:32: '/='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 32);
				string_literal358=(IToken)Match(input,78,Follow._78_in_assignment_operator3855); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal358_tree = (object)adaptor.Create(string_literal358, retval);
				adaptor.AddChild(root_0, string_literal358_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// cs.g:394:39: '%='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 39);
				string_literal359=(IToken)Match(input,64,Follow._64_in_assignment_operator3859); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal359_tree = (object)adaptor.Create(string_literal359, retval);
				adaptor.AddChild(root_0, string_literal359_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// cs.g:394:46: '&='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 46);
				string_literal360=(IToken)Match(input,67,Follow._67_in_assignment_operator3863); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal360_tree = (object)adaptor.Create(string_literal360, retval);
				adaptor.AddChild(root_0, string_literal360_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// cs.g:394:53: '|='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 53);
				string_literal361=(IToken)Match(input,199,Follow._199_in_assignment_operator3867); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal361_tree = (object)adaptor.Create(string_literal361, retval);
				adaptor.AddChild(root_0, string_literal361_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// cs.g:394:60: '^='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 60);
				string_literal362=(IToken)Match(input,94,Follow._94_in_assignment_operator3871); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal362_tree = (object)adaptor.Create(string_literal362, retval);
				adaptor.AddChild(root_0, string_literal362_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// cs.g:394:67: '<<='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 67);
				string_literal363=(IToken)Match(input,83,Follow._83_in_assignment_operator3875); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal363_tree = (object)adaptor.Create(string_literal363, retval);
				adaptor.AddChild(root_0, string_literal363_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// cs.g:394:75: '>' '>='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(394, 75);
				char_literal364=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_assignment_operator3879), "GT"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal364_tree = (object)adaptor.Create(char_literal364, retval);
				adaptor.AddChild(root_0, char_literal364_tree);
				}
				DebugLocation(394, 79);
				string_literal365=(IToken)Match(input,88,Follow._88_in_assignment_operator3881); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal365_tree = (object)adaptor.Create(string_literal365, retval);
				adaptor.AddChild(root_0, string_literal365_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment_operator", 93);
			LeaveRule("assignment_operator", 93);
			LeaveRule_assignment_operator();
			if (state.backtracking > 0) { Memoize(input, 93, assignment_operator_StartIndex); }

		}
		DebugLocation(394, 83);
		} finally { DebugExitRule(GrammarFileName, "assignment_operator"); }
		return retval;

	}
	// $ANTLR end "assignment_operator"

	partial void EnterRule_pre_increment_expression();
	partial void LeaveRule_pre_increment_expression();

	// $ANTLR start "pre_increment_expression"
	// cs.g:395:1: pre_increment_expression : '++' unary_expression ;
	[GrammarRule("pre_increment_expression")]
	public XAstParserRuleReturnScope pre_increment_expression()
	{
		EnterRule_pre_increment_expression();
		EnterRule("pre_increment_expression", 94);
		var retval = new XAstParserRuleReturnScope("pre_increment_expression");
		
		retval.Start = (IToken)input.LT(1);
		int pre_increment_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal366 = default(IToken);
		XAstParserRuleReturnScope unary_expression367 = default(XAstParserRuleReturnScope);

		object string_literal366_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "pre_increment_expression");
		DebugLocation(395, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 94)) { return retval; }

			// cs.g:395:25: ( '++' unary_expression )
			DebugEnterAlt(1);
			// cs.g:396:5: '++' unary_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(396, 5);
			string_literal366=(IToken)Match(input,72,Follow._72_in_pre_increment_expression3893); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal366_tree = (object)adaptor.Create(string_literal366, retval);
			adaptor.AddChild(root_0, string_literal366_tree);
			}
			DebugLocation(396, 12);
			PushFollow(Follow._unary_expression_in_pre_increment_expression3897);
			unary_expression367=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression367.Tree, unary_expression367, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pre_increment_expression", 94);
			LeaveRule("pre_increment_expression", 94);
			LeaveRule_pre_increment_expression();
			if (state.backtracking > 0) { Memoize(input, 94, pre_increment_expression_StartIndex); }

		}
		DebugLocation(396, 28);
		} finally { DebugExitRule(GrammarFileName, "pre_increment_expression"); }
		return retval;

	}
	// $ANTLR end "pre_increment_expression"

	partial void EnterRule_pre_decrement_expression();
	partial void LeaveRule_pre_decrement_expression();

	// $ANTLR start "pre_decrement_expression"
	// cs.g:397:1: pre_decrement_expression : '--' unary_expression ;
	[GrammarRule("pre_decrement_expression")]
	public XAstParserRuleReturnScope pre_decrement_expression()
	{
		EnterRule_pre_decrement_expression();
		EnterRule("pre_decrement_expression", 95);
		var retval = new XAstParserRuleReturnScope("pre_decrement_expression");
		
		retval.Start = (IToken)input.LT(1);
		int pre_decrement_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal368 = default(IToken);
		XAstParserRuleReturnScope unary_expression369 = default(XAstParserRuleReturnScope);

		object string_literal368_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "pre_decrement_expression");
		DebugLocation(397, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 95)) { return retval; }

			// cs.g:397:25: ( '--' unary_expression )
			DebugEnterAlt(1);
			// cs.g:398:5: '--' unary_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(398, 5);
			string_literal368=(IToken)Match(input,75,Follow._75_in_pre_decrement_expression3909); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal368_tree = (object)adaptor.Create(string_literal368, retval);
			adaptor.AddChild(root_0, string_literal368_tree);
			}
			DebugLocation(398, 12);
			PushFollow(Follow._unary_expression_in_pre_decrement_expression3913);
			unary_expression369=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression369.Tree, unary_expression369, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pre_decrement_expression", 95);
			LeaveRule("pre_decrement_expression", 95);
			LeaveRule_pre_decrement_expression();
			if (state.backtracking > 0) { Memoize(input, 95, pre_decrement_expression_StartIndex); }

		}
		DebugLocation(398, 28);
		} finally { DebugExitRule(GrammarFileName, "pre_decrement_expression"); }
		return retval;

	}
	// $ANTLR end "pre_decrement_expression"

	partial void EnterRule_pointer_indirection_expression();
	partial void LeaveRule_pointer_indirection_expression();

	// $ANTLR start "pointer_indirection_expression"
	// cs.g:399:1: pointer_indirection_expression : '*' unary_expression ;
	[GrammarRule("pointer_indirection_expression")]
	public XAstParserRuleReturnScope pointer_indirection_expression()
	{
		EnterRule_pointer_indirection_expression();
		EnterRule("pointer_indirection_expression", 96);
		var retval = new XAstParserRuleReturnScope("pointer_indirection_expression");
		
		retval.Start = (IToken)input.LT(1);
		int pointer_indirection_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal370 = default(IToken);
		XAstParserRuleReturnScope unary_expression371 = default(XAstParserRuleReturnScope);

		object char_literal370_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "pointer_indirection_expression");
		DebugLocation(399, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 96)) { return retval; }

			// cs.g:399:31: ( '*' unary_expression )
			DebugEnterAlt(1);
			// cs.g:400:5: '*' unary_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(400, 5);
			char_literal370=(IToken)Match(input,69,Follow._69_in_pointer_indirection_expression3924); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal370_tree = (object)adaptor.Create(char_literal370, retval);
			adaptor.AddChild(root_0, char_literal370_tree);
			}
			DebugLocation(400, 11);
			PushFollow(Follow._unary_expression_in_pointer_indirection_expression3928);
			unary_expression371=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression371.Tree, unary_expression371, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pointer_indirection_expression", 96);
			LeaveRule("pointer_indirection_expression", 96);
			LeaveRule_pointer_indirection_expression();
			if (state.backtracking > 0) { Memoize(input, 96, pointer_indirection_expression_StartIndex); }

		}
		DebugLocation(400, 27);
		} finally { DebugExitRule(GrammarFileName, "pointer_indirection_expression"); }
		return retval;

	}
	// $ANTLR end "pointer_indirection_expression"

	partial void EnterRule_addressof_expression();
	partial void LeaveRule_addressof_expression();

	// $ANTLR start "addressof_expression"
	// cs.g:401:1: addressof_expression : '&' unary_expression ;
	[GrammarRule("addressof_expression")]
	public XAstParserRuleReturnScope addressof_expression()
	{
		EnterRule_addressof_expression();
		EnterRule("addressof_expression", 97);
		var retval = new XAstParserRuleReturnScope("addressof_expression");
		
		retval.Start = (IToken)input.LT(1);
		int addressof_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal372 = default(IToken);
		XAstParserRuleReturnScope unary_expression373 = default(XAstParserRuleReturnScope);

		object char_literal372_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "addressof_expression");
		DebugLocation(401, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 97)) { return retval; }

			// cs.g:401:21: ( '&' unary_expression )
			DebugEnterAlt(1);
			// cs.g:402:5: '&' unary_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(402, 5);
			char_literal372=(IToken)Match(input,66,Follow._66_in_addressof_expression3939); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal372_tree = (object)adaptor.Create(char_literal372, retval);
			adaptor.AddChild(root_0, char_literal372_tree);
			}
			DebugLocation(402, 11);
			PushFollow(Follow._unary_expression_in_addressof_expression3943);
			unary_expression373=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression373.Tree, unary_expression373, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("addressof_expression", 97);
			LeaveRule("addressof_expression", 97);
			LeaveRule_addressof_expression();
			if (state.backtracking > 0) { Memoize(input, 97, addressof_expression_StartIndex); }

		}
		DebugLocation(402, 27);
		} finally { DebugExitRule(GrammarFileName, "addressof_expression"); }
		return retval;

	}
	// $ANTLR end "addressof_expression"

	partial void EnterRule_non_assignment_expression();
	partial void LeaveRule_non_assignment_expression();

	// $ANTLR start "non_assignment_expression"
	// cs.g:404:1: non_assignment_expression : ( ( anonymous_function_signature '=>' )=> lambda_expression | ( query_expression )=> query_expression | conditional_expression );
	[GrammarRule("non_assignment_expression")]
	public XAstParserRuleReturnScope non_assignment_expression()
	{
		EnterRule_non_assignment_expression();
		EnterRule("non_assignment_expression", 98);
		var retval = new XAstParserRuleReturnScope("non_assignment_expression");
		
		retval.Start = (IToken)input.LT(1);
		int non_assignment_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope lambda_expression374 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope query_expression375 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conditional_expression376 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "non_assignment_expression");
		DebugLocation(404, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 98)) { return retval; }

			// cs.g:404:26: ( ( anonymous_function_signature '=>' )=> lambda_expression | ( query_expression )=> query_expression | conditional_expression )
			int alt107=3;
			try { DebugEnterDecision(107, false);
			switch (input.LA(1))
			{
			case 68:
				{
				int LA107_1 = input.LA(2);

				if ((EvaluatePredicate(synpred21_cs_fragment)))
				{
					alt107 = 1;
				}
				else if ((true))
				{
					alt107 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 107, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 132:
				{
				int LA107_2 = input.LA(2);

				if ((EvaluatePredicate(synpred21_cs_fragment)))
				{
					alt107 = 1;
				}
				else if ((EvaluatePredicate(synpred22_cs_fragment)))
				{
					alt107 = 2;
				}
				else if ((true))
				{
					alt107 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 107, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA107_3 = input.LA(2);

				if ((EvaluatePredicate(synpred21_cs_fragment)))
				{
					alt107 = 1;
				}
				else if ((true))
				{
					alt107 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 107, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case MINUS:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 61:
			case 66:
			case 69:
			case 71:
			case 72:
			case 75:
			case 102:
			case 103:
			case 106:
			case 109:
			case 110:
			case 114:
			case 115:
			case 116:
			case 119:
			case 129:
			case 138:
			case 146:
			case 150:
			case 151:
			case 169:
			case 173:
			case 174:
			case 177:
			case 180:
			case 184:
			case 185:
			case 186:
			case 187:
			case 189:
			case 202:
				{
				alt107 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 107, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(107); }
			switch (alt107)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:406:5: ( anonymous_function_signature '=>' )=> lambda_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(406, 46);
				PushFollow(Follow._lambda_expression_in_non_assignment_expression3970);
				lambda_expression374=lambda_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lambda_expression374.Tree, lambda_expression374, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:407:7: ( query_expression )=> query_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(407, 29);
				PushFollow(Follow._query_expression_in_non_assignment_expression3984);
				query_expression375=query_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, query_expression375.Tree, query_expression375, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:408:7: conditional_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(408, 7);
				PushFollow(Follow._conditional_expression_in_non_assignment_expression3993);
				conditional_expression376=conditional_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_expression376.Tree, conditional_expression376, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("non_assignment_expression", 98);
			LeaveRule("non_assignment_expression", 98);
			LeaveRule_non_assignment_expression();
			if (state.backtracking > 0) { Memoize(input, 98, non_assignment_expression_StartIndex); }

		}
		DebugLocation(409, 4);
		} finally { DebugExitRule(GrammarFileName, "non_assignment_expression"); }
		return retval;

	}
	// $ANTLR end "non_assignment_expression"

	partial void EnterRule_multiplicative_expression();
	partial void LeaveRule_multiplicative_expression();

	// $ANTLR start "multiplicative_expression"
	// cs.g:415:1: multiplicative_expression : unary_expression ( ( '*' | '/' | '%' ) unary_expression )* ;
	[GrammarRule("multiplicative_expression")]
	public XAstParserRuleReturnScope multiplicative_expression()
	{
		EnterRule_multiplicative_expression();
		EnterRule("multiplicative_expression", 99);
		var retval = new XAstParserRuleReturnScope("multiplicative_expression");
		
		retval.Start = (IToken)input.LT(1);
		int multiplicative_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set378 = default(IToken);
		XAstParserRuleReturnScope unary_expression377 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_expression379 = default(XAstParserRuleReturnScope);

		object set378_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "multiplicative_expression");
		DebugLocation(415, 59);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 99)) { return retval; }

			// cs.g:415:26: ( unary_expression ( ( '*' | '/' | '%' ) unary_expression )* )
			DebugEnterAlt(1);
			// cs.g:416:5: unary_expression ( ( '*' | '/' | '%' ) unary_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(416, 5);
			PushFollow(Follow._unary_expression_in_multiplicative_expression4013);
			unary_expression377=unary_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression377.Tree, unary_expression377, retval);
			DebugLocation(416, 22);
			// cs.g:416:22: ( ( '*' | '/' | '%' ) unary_expression )*
			try { DebugEnterSubRule(108);
			while (true)
			{
				int alt108=2;
				try { DebugEnterDecision(108, false);
				int LA108_0 = input.LA(1);

				if ((LA108_0==63||LA108_0==69||LA108_0==77))
				{
					alt108 = 1;
				}


				} finally { DebugExitDecision(108); }
				switch ( alt108 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:416:25: ( '*' | '/' | '%' ) unary_expression
					{
					DebugLocation(416, 25);

					set378=(IToken)input.LT(1);
					if (input.LA(1)==63||input.LA(1)==69||input.LA(1)==77)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set378, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(416, 41);
					PushFollow(Follow._unary_expression_in_multiplicative_expression4028);
					unary_expression379=unary_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression379.Tree, unary_expression379, retval);

					}
					break;

				default:
					goto loop108;
				}
			}

			loop108:
				;

			} finally { DebugExitSubRule(108); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicative_expression", 99);
			LeaveRule("multiplicative_expression", 99);
			LeaveRule_multiplicative_expression();
			if (state.backtracking > 0) { Memoize(input, 99, multiplicative_expression_StartIndex); }

		}
		DebugLocation(416, 59);
		} finally { DebugExitRule(GrammarFileName, "multiplicative_expression"); }
		return retval;

	}
	// $ANTLR end "multiplicative_expression"

	partial void EnterRule_additive_expression();
	partial void LeaveRule_additive_expression();

	// $ANTLR start "additive_expression"
	// cs.g:417:1: additive_expression : multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )* ;
	[GrammarRule("additive_expression")]
	public XAstParserRuleReturnScope additive_expression()
	{
		EnterRule_additive_expression();
		EnterRule("additive_expression", 100);
		var retval = new XAstParserRuleReturnScope("additive_expression");
		
		retval.Start = (IToken)input.LT(1);
		int additive_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set381 = default(IToken);
		XAstParserRuleReturnScope multiplicative_expression380 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope multiplicative_expression382 = default(XAstParserRuleReturnScope);

		object set381_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "additive_expression");
		DebugLocation(417, 71);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 100)) { return retval; }

			// cs.g:417:20: ( multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )* )
			DebugEnterAlt(1);
			// cs.g:418:5: multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(418, 5);
			PushFollow(Follow._multiplicative_expression_in_additive_expression4041);
			multiplicative_expression380=multiplicative_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression380.Tree, multiplicative_expression380, retval);
			DebugLocation(418, 31);
			// cs.g:418:31: ( ( '+' | '-' ) multiplicative_expression )*
			try { DebugEnterSubRule(109);
			while (true)
			{
				int alt109=2;
				try { DebugEnterDecision(109, false);
				int LA109_0 = input.LA(1);

				if ((LA109_0==MINUS||LA109_0==71))
				{
					alt109 = 1;
				}


				} finally { DebugExitDecision(109); }
				switch ( alt109 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:418:32: ( '+' | '-' ) multiplicative_expression
					{
					DebugLocation(418, 32);

					set381=(IToken)input.LT(1);
					if (input.LA(1)==MINUS||input.LA(1)==71)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set381, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(418, 44);
					PushFollow(Follow._multiplicative_expression_in_additive_expression4052);
					multiplicative_expression382=multiplicative_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, multiplicative_expression382.Tree, multiplicative_expression382, retval);

					}
					break;

				default:
					goto loop109;
				}
			}

			loop109:
				;

			} finally { DebugExitSubRule(109); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additive_expression", 100);
			LeaveRule("additive_expression", 100);
			LeaveRule_additive_expression();
			if (state.backtracking > 0) { Memoize(input, 100, additive_expression_StartIndex); }

		}
		DebugLocation(418, 71);
		} finally { DebugExitRule(GrammarFileName, "additive_expression"); }
		return retval;

	}
	// $ANTLR end "additive_expression"

	partial void EnterRule_shift_expression();
	partial void LeaveRule_shift_expression();

	// $ANTLR start "shift_expression"
	// cs.g:420:1: shift_expression : additive_expression ( ( '<<' | '>' '>' ) additive_expression )* ;
	[GrammarRule("shift_expression")]
	public XAstParserRuleReturnScope shift_expression()
	{
		EnterRule_shift_expression();
		EnterRule("shift_expression", 101);
		var retval = new XAstParserRuleReturnScope("shift_expression");
		
		retval.Start = (IToken)input.LT(1);
		int shift_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal384 = default(IToken);
		IToken char_literal385 = default(IToken);
		IToken char_literal386 = default(IToken);
		XAstParserRuleReturnScope additive_expression383 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope additive_expression387 = default(XAstParserRuleReturnScope);

		object string_literal384_tree = default(object);
		object char_literal385_tree = default(object);
		object char_literal386_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "shift_expression");
		DebugLocation(420, 62);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 101)) { return retval; }

			// cs.g:420:17: ( additive_expression ( ( '<<' | '>' '>' ) additive_expression )* )
			DebugEnterAlt(1);
			// cs.g:421:5: additive_expression ( ( '<<' | '>' '>' ) additive_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(421, 5);
			PushFollow(Follow._additive_expression_in_shift_expression4066);
			additive_expression383=additive_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, additive_expression383.Tree, additive_expression383, retval);
			DebugLocation(421, 25);
			// cs.g:421:25: ( ( '<<' | '>' '>' ) additive_expression )*
			try { DebugEnterSubRule(111);
			while (true)
			{
				int alt111=2;
				try { DebugEnterDecision(111, false);
				int LA111_0 = input.LA(1);

				if ((LA111_0==GT))
				{
					int LA111_1 = input.LA(2);

					if ((LA111_1==GT))
					{
						alt111 = 1;
					}


				}
				else if ((LA111_0==82))
				{
					alt111 = 1;
				}


				} finally { DebugExitDecision(111); }
				switch ( alt111 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:421:26: ( '<<' | '>' '>' ) additive_expression
					{
					DebugLocation(421, 26);
					// cs.g:421:26: ( '<<' | '>' '>' )
					int alt110=2;
					try { DebugEnterSubRule(110);
					try { DebugEnterDecision(110, false);
					int LA110_0 = input.LA(1);

					if ((LA110_0==82))
					{
						alt110 = 1;
					}
					else if ((LA110_0==GT))
					{
						alt110 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 110, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(110); }
					switch (alt110)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:421:27: '<<'
						{
						DebugLocation(421, 27);
						string_literal384=(IToken)Match(input,82,Follow._82_in_shift_expression4070); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal384_tree = (object)adaptor.Create(string_literal384, retval);
						adaptor.AddChild(root_0, string_literal384_tree);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// cs.g:421:32: '>' '>'
						{
						DebugLocation(421, 32);
						char_literal385=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_shift_expression4072), "GT"); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal385_tree = (object)adaptor.Create(char_literal385, retval);
						adaptor.AddChild(root_0, char_literal385_tree);
						}
						DebugLocation(421, 36);
						char_literal386=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_shift_expression4074), "GT"); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal386_tree = (object)adaptor.Create(char_literal386, retval);
						adaptor.AddChild(root_0, char_literal386_tree);
						}

						}
						break;

					}
					} finally { DebugExitSubRule(110); }

					DebugLocation(421, 41);
					PushFollow(Follow._additive_expression_in_shift_expression4077);
					additive_expression387=additive_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, additive_expression387.Tree, additive_expression387, retval);

					}
					break;

				default:
					goto loop111;
				}
			}

			loop111:
				;

			} finally { DebugExitSubRule(111); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expression", 101);
			LeaveRule("shift_expression", 101);
			LeaveRule_shift_expression();
			if (state.backtracking > 0) { Memoize(input, 101, shift_expression_StartIndex); }

		}
		DebugLocation(421, 62);
		} finally { DebugExitRule(GrammarFileName, "shift_expression"); }
		return retval;

	}
	// $ANTLR end "shift_expression"

	partial void EnterRule_relational_expression();
	partial void LeaveRule_relational_expression();

	// $ANTLR start "relational_expression"
	// cs.g:422:1: relational_expression : shift_expression ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )* ;
	[GrammarRule("relational_expression")]
	public XAstParserRuleReturnScope relational_expression()
	{
		EnterRule_relational_expression();
		EnterRule("relational_expression", 102);
		var retval = new XAstParserRuleReturnScope("relational_expression");
		
		retval.Start = (IToken)input.LT(1);
		int relational_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set389 = default(IToken);
		IToken set391 = default(IToken);
		XAstParserRuleReturnScope shift_expression388 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope shift_expression390 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope non_nullable_type392 = default(XAstParserRuleReturnScope);

		object set389_tree = default(object);
		object set391_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "relational_expression");
		DebugLocation(422, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 102)) { return retval; }

			// cs.g:422:22: ( shift_expression ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )* )
			DebugEnterAlt(1);
			// cs.g:423:5: shift_expression ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(423, 5);
			PushFollow(Follow._shift_expression_in_relational_expression4090);
			shift_expression388=shift_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expression388.Tree, shift_expression388, retval);
			DebugLocation(424, 9);
			// cs.g:424:9: ( ( ( '<' | '>' | '>=' | '<=' ) shift_expression ) | ( ( 'is' | 'as' ) non_nullable_type ) )*
			try { DebugEnterSubRule(112);
			while (true)
			{
				int alt112=3;
				try { DebugEnterDecision(112, false);
				int LA112_0 = input.LA(1);

				if ((LA112_0==GT||LA112_0==81||LA112_0==84||LA112_0==88))
				{
					alt112 = 1;
				}
				else if ((LA112_0==99||LA112_0==142))
				{
					alt112 = 2;
				}


				} finally { DebugExitDecision(112); }
				switch ( alt112 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:424:11: ( ( '<' | '>' | '>=' | '<=' ) shift_expression )
					{
					DebugLocation(424, 11);
					// cs.g:424:11: ( ( '<' | '>' | '>=' | '<=' ) shift_expression )
					DebugEnterAlt(1);
					// cs.g:424:12: ( '<' | '>' | '>=' | '<=' ) shift_expression
					{
					DebugLocation(424, 12);

					set389=(IToken)input.LT(1);
					if (input.LA(1)==GT||input.LA(1)==81||input.LA(1)==84||input.LA(1)==88)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set389, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(424, 32);
					PushFollow(Follow._shift_expression_in_relational_expression4113);
					shift_expression390=shift_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expression390.Tree, shift_expression390, retval);

					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:425:15: ( ( 'is' | 'as' ) non_nullable_type )
					{
					DebugLocation(425, 15);
					// cs.g:425:15: ( ( 'is' | 'as' ) non_nullable_type )
					DebugEnterAlt(1);
					// cs.g:425:16: ( 'is' | 'as' ) non_nullable_type
					{
					DebugLocation(425, 16);

					set391=(IToken)input.LT(1);
					if (input.LA(1)==99||input.LA(1)==142)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set391, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(425, 30);
					PushFollow(Follow._non_nullable_type_in_relational_expression4139);
					non_nullable_type392=non_nullable_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, non_nullable_type392.Tree, non_nullable_type392, retval);

					}


					}
					break;

				default:
					goto loop112;
				}
			}

			loop112:
				;

			} finally { DebugExitSubRule(112); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relational_expression", 102);
			LeaveRule("relational_expression", 102);
			LeaveRule_relational_expression();
			if (state.backtracking > 0) { Memoize(input, 102, relational_expression_StartIndex); }

		}
		DebugLocation(426, 11);
		} finally { DebugExitRule(GrammarFileName, "relational_expression"); }
		return retval;

	}
	// $ANTLR end "relational_expression"

	partial void EnterRule_equality_expression();
	partial void LeaveRule_equality_expression();

	// $ANTLR start "equality_expression"
	// cs.g:427:1: equality_expression : relational_expression ( ( '==' | '!=' ) relational_expression )* ;
	[GrammarRule("equality_expression")]
	public XAstParserRuleReturnScope equality_expression()
	{
		EnterRule_equality_expression();
		EnterRule("equality_expression", 103);
		var retval = new XAstParserRuleReturnScope("equality_expression");
		
		retval.Start = (IToken)input.LT(1);
		int equality_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set394 = default(IToken);
		XAstParserRuleReturnScope relational_expression393 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope relational_expression395 = default(XAstParserRuleReturnScope);

		object set394_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "equality_expression");
		DebugLocation(427, 46);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 103)) { return retval; }

			// cs.g:427:20: ( relational_expression ( ( '==' | '!=' ) relational_expression )* )
			DebugEnterAlt(1);
			// cs.g:428:5: relational_expression ( ( '==' | '!=' ) relational_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(428, 5);
			PushFollow(Follow._relational_expression_in_equality_expression4162);
			relational_expression393=relational_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, relational_expression393.Tree, relational_expression393, retval);
			DebugLocation(429, 8);
			// cs.g:429:8: ( ( '==' | '!=' ) relational_expression )*
			try { DebugEnterSubRule(113);
			while (true)
			{
				int alt113=2;
				try { DebugEnterDecision(113, false);
				int LA113_0 = input.LA(1);

				if ((LA113_0==62||LA113_0==86))
				{
					alt113 = 1;
				}


				} finally { DebugExitDecision(113); }
				switch ( alt113 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:429:9: ( '==' | '!=' ) relational_expression
					{
					DebugLocation(429, 9);

					set394=(IToken)input.LT(1);
					if (input.LA(1)==62||input.LA(1)==86)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set394, retval));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(429, 23);
					PushFollow(Follow._relational_expression_in_equality_expression4180);
					relational_expression395=relational_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, relational_expression395.Tree, relational_expression395, retval);

					}
					break;

				default:
					goto loop113;
				}
			}

			loop113:
				;

			} finally { DebugExitSubRule(113); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equality_expression", 103);
			LeaveRule("equality_expression", 103);
			LeaveRule_equality_expression();
			if (state.backtracking > 0) { Memoize(input, 103, equality_expression_StartIndex); }

		}
		DebugLocation(429, 46);
		} finally { DebugExitRule(GrammarFileName, "equality_expression"); }
		return retval;

	}
	// $ANTLR end "equality_expression"

	partial void EnterRule_and_expression();
	partial void LeaveRule_and_expression();

	// $ANTLR start "and_expression"
	// cs.g:430:1: and_expression : equality_expression ( '&' equality_expression )* ;
	[GrammarRule("and_expression")]
	public XAstParserRuleReturnScope and_expression()
	{
		EnterRule_and_expression();
		EnterRule("and_expression", 104);
		var retval = new XAstParserRuleReturnScope("and_expression");
		
		retval.Start = (IToken)input.LT(1);
		int and_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal397 = default(IToken);
		XAstParserRuleReturnScope equality_expression396 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope equality_expression398 = default(XAstParserRuleReturnScope);

		object char_literal397_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "and_expression");
		DebugLocation(430, 53);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 104)) { return retval; }

			// cs.g:430:15: ( equality_expression ( '&' equality_expression )* )
			DebugEnterAlt(1);
			// cs.g:431:5: equality_expression ( '&' equality_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(431, 5);
			PushFollow(Follow._equality_expression_in_and_expression4193);
			equality_expression396=equality_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, equality_expression396.Tree, equality_expression396, retval);
			DebugLocation(431, 25);
			// cs.g:431:25: ( '&' equality_expression )*
			try { DebugEnterSubRule(114);
			while (true)
			{
				int alt114=2;
				try { DebugEnterDecision(114, false);
				int LA114_0 = input.LA(1);

				if ((LA114_0==66))
				{
					alt114 = 1;
				}


				} finally { DebugExitDecision(114); }
				switch ( alt114 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:431:26: '&' equality_expression
					{
					DebugLocation(431, 26);
					char_literal397=(IToken)Match(input,66,Follow._66_in_and_expression4196); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal397_tree = (object)adaptor.Create(char_literal397, retval);
					adaptor.AddChild(root_0, char_literal397_tree);
					}
					DebugLocation(431, 32);
					PushFollow(Follow._equality_expression_in_and_expression4200);
					equality_expression398=equality_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, equality_expression398.Tree, equality_expression398, retval);

					}
					break;

				default:
					goto loop114;
				}
			}

			loop114:
				;

			} finally { DebugExitSubRule(114); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expression", 104);
			LeaveRule("and_expression", 104);
			LeaveRule_and_expression();
			if (state.backtracking > 0) { Memoize(input, 104, and_expression_StartIndex); }

		}
		DebugLocation(431, 53);
		} finally { DebugExitRule(GrammarFileName, "and_expression"); }
		return retval;

	}
	// $ANTLR end "and_expression"

	partial void EnterRule_exclusive_or_expression();
	partial void LeaveRule_exclusive_or_expression();

	// $ANTLR start "exclusive_or_expression"
	// cs.g:432:1: exclusive_or_expression : and_expression ( '^' and_expression )* ;
	[GrammarRule("exclusive_or_expression")]
	public XAstParserRuleReturnScope exclusive_or_expression()
	{
		EnterRule_exclusive_or_expression();
		EnterRule("exclusive_or_expression", 105);
		var retval = new XAstParserRuleReturnScope("exclusive_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int exclusive_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal400 = default(IToken);
		XAstParserRuleReturnScope and_expression399 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope and_expression401 = default(XAstParserRuleReturnScope);

		object char_literal400_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "exclusive_or_expression");
		DebugLocation(432, 43);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 105)) { return retval; }

			// cs.g:432:24: ( and_expression ( '^' and_expression )* )
			DebugEnterAlt(1);
			// cs.g:433:5: and_expression ( '^' and_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(433, 5);
			PushFollow(Follow._and_expression_in_exclusive_or_expression4213);
			and_expression399=and_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, and_expression399.Tree, and_expression399, retval);
			DebugLocation(433, 20);
			// cs.g:433:20: ( '^' and_expression )*
			try { DebugEnterSubRule(115);
			while (true)
			{
				int alt115=2;
				try { DebugEnterDecision(115, false);
				int LA115_0 = input.LA(1);

				if ((LA115_0==93))
				{
					alt115 = 1;
				}


				} finally { DebugExitDecision(115); }
				switch ( alt115 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:433:21: '^' and_expression
					{
					DebugLocation(433, 21);
					char_literal400=(IToken)Match(input,93,Follow._93_in_exclusive_or_expression4216); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal400_tree = (object)adaptor.Create(char_literal400, retval);
					adaptor.AddChild(root_0, char_literal400_tree);
					}
					DebugLocation(433, 27);
					PushFollow(Follow._and_expression_in_exclusive_or_expression4220);
					and_expression401=and_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, and_expression401.Tree, and_expression401, retval);

					}
					break;

				default:
					goto loop115;
				}
			}

			loop115:
				;

			} finally { DebugExitSubRule(115); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exclusive_or_expression", 105);
			LeaveRule("exclusive_or_expression", 105);
			LeaveRule_exclusive_or_expression();
			if (state.backtracking > 0) { Memoize(input, 105, exclusive_or_expression_StartIndex); }

		}
		DebugLocation(433, 43);
		} finally { DebugExitRule(GrammarFileName, "exclusive_or_expression"); }
		return retval;

	}
	// $ANTLR end "exclusive_or_expression"

	partial void EnterRule_inclusive_or_expression();
	partial void LeaveRule_inclusive_or_expression();

	// $ANTLR start "inclusive_or_expression"
	// cs.g:434:1: inclusive_or_expression : exclusive_or_expression ( '|' exclusive_or_expression )* ;
	[GrammarRule("inclusive_or_expression")]
	public XAstParserRuleReturnScope inclusive_or_expression()
	{
		EnterRule_inclusive_or_expression();
		EnterRule("inclusive_or_expression", 106);
		var retval = new XAstParserRuleReturnScope("inclusive_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int inclusive_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal403 = default(IToken);
		XAstParserRuleReturnScope exclusive_or_expression402 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope exclusive_or_expression404 = default(XAstParserRuleReturnScope);

		object char_literal403_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "inclusive_or_expression");
		DebugLocation(434, 63);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 106)) { return retval; }

			// cs.g:434:24: ( exclusive_or_expression ( '|' exclusive_or_expression )* )
			DebugEnterAlt(1);
			// cs.g:435:5: exclusive_or_expression ( '|' exclusive_or_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(435, 5);
			PushFollow(Follow._exclusive_or_expression_in_inclusive_or_expression4233);
			exclusive_or_expression402=exclusive_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, exclusive_or_expression402.Tree, exclusive_or_expression402, retval);
			DebugLocation(435, 31);
			// cs.g:435:31: ( '|' exclusive_or_expression )*
			try { DebugEnterSubRule(116);
			while (true)
			{
				int alt116=2;
				try { DebugEnterDecision(116, false);
				int LA116_0 = input.LA(1);

				if ((LA116_0==198))
				{
					alt116 = 1;
				}


				} finally { DebugExitDecision(116); }
				switch ( alt116 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:435:32: '|' exclusive_or_expression
					{
					DebugLocation(435, 32);
					char_literal403=(IToken)Match(input,198,Follow._198_in_inclusive_or_expression4238); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal403_tree = (object)adaptor.Create(char_literal403, retval);
					adaptor.AddChild(root_0, char_literal403_tree);
					}
					DebugLocation(435, 38);
					PushFollow(Follow._exclusive_or_expression_in_inclusive_or_expression4242);
					exclusive_or_expression404=exclusive_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, exclusive_or_expression404.Tree, exclusive_or_expression404, retval);

					}
					break;

				default:
					goto loop116;
				}
			}

			loop116:
				;

			} finally { DebugExitSubRule(116); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inclusive_or_expression", 106);
			LeaveRule("inclusive_or_expression", 106);
			LeaveRule_inclusive_or_expression();
			if (state.backtracking > 0) { Memoize(input, 106, inclusive_or_expression_StartIndex); }

		}
		DebugLocation(435, 63);
		} finally { DebugExitRule(GrammarFileName, "inclusive_or_expression"); }
		return retval;

	}
	// $ANTLR end "inclusive_or_expression"

	partial void EnterRule_conditional_and_expression();
	partial void LeaveRule_conditional_and_expression();

	// $ANTLR start "conditional_and_expression"
	// cs.g:436:1: conditional_and_expression : inclusive_or_expression ( '&&' inclusive_or_expression )* ;
	[GrammarRule("conditional_and_expression")]
	public XAstParserRuleReturnScope conditional_and_expression()
	{
		EnterRule_conditional_and_expression();
		EnterRule("conditional_and_expression", 107);
		var retval = new XAstParserRuleReturnScope("conditional_and_expression");
		
		retval.Start = (IToken)input.LT(1);
		int conditional_and_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal406 = default(IToken);
		XAstParserRuleReturnScope inclusive_or_expression405 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope inclusive_or_expression407 = default(XAstParserRuleReturnScope);

		object string_literal406_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditional_and_expression");
		DebugLocation(436, 64);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 107)) { return retval; }

			// cs.g:436:27: ( inclusive_or_expression ( '&&' inclusive_or_expression )* )
			DebugEnterAlt(1);
			// cs.g:437:5: inclusive_or_expression ( '&&' inclusive_or_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(437, 5);
			PushFollow(Follow._inclusive_or_expression_in_conditional_and_expression4255);
			inclusive_or_expression405=inclusive_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, inclusive_or_expression405.Tree, inclusive_or_expression405, retval);
			DebugLocation(437, 31);
			// cs.g:437:31: ( '&&' inclusive_or_expression )*
			try { DebugEnterSubRule(117);
			while (true)
			{
				int alt117=2;
				try { DebugEnterDecision(117, false);
				int LA117_0 = input.LA(1);

				if ((LA117_0==65))
				{
					alt117 = 1;
				}


				} finally { DebugExitDecision(117); }
				switch ( alt117 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:437:32: '&&' inclusive_or_expression
					{
					DebugLocation(437, 32);
					string_literal406=(IToken)Match(input,65,Follow._65_in_conditional_and_expression4260); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal406_tree = (object)adaptor.Create(string_literal406, retval);
					adaptor.AddChild(root_0, string_literal406_tree);
					}
					DebugLocation(437, 39);
					PushFollow(Follow._inclusive_or_expression_in_conditional_and_expression4264);
					inclusive_or_expression407=inclusive_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, inclusive_or_expression407.Tree, inclusive_or_expression407, retval);

					}
					break;

				default:
					goto loop117;
				}
			}

			loop117:
				;

			} finally { DebugExitSubRule(117); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditional_and_expression", 107);
			LeaveRule("conditional_and_expression", 107);
			LeaveRule_conditional_and_expression();
			if (state.backtracking > 0) { Memoize(input, 107, conditional_and_expression_StartIndex); }

		}
		DebugLocation(437, 64);
		} finally { DebugExitRule(GrammarFileName, "conditional_and_expression"); }
		return retval;

	}
	// $ANTLR end "conditional_and_expression"

	partial void EnterRule_conditional_or_expression();
	partial void LeaveRule_conditional_or_expression();

	// $ANTLR start "conditional_or_expression"
	// cs.g:438:1: conditional_or_expression : conditional_and_expression ( '||' conditional_and_expression )* ;
	[GrammarRule("conditional_or_expression")]
	public XAstParserRuleReturnScope conditional_or_expression()
	{
		EnterRule_conditional_or_expression();
		EnterRule("conditional_or_expression", 108);
		var retval = new XAstParserRuleReturnScope("conditional_or_expression");
		
		retval.Start = (IToken)input.LT(1);
		int conditional_or_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal409 = default(IToken);
		XAstParserRuleReturnScope conditional_and_expression408 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conditional_and_expression410 = default(XAstParserRuleReturnScope);

		object string_literal409_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditional_or_expression");
		DebugLocation(438, 69);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 108)) { return retval; }

			// cs.g:438:26: ( conditional_and_expression ( '||' conditional_and_expression )* )
			DebugEnterAlt(1);
			// cs.g:439:5: conditional_and_expression ( '||' conditional_and_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(439, 5);
			PushFollow(Follow._conditional_and_expression_in_conditional_or_expression4277);
			conditional_and_expression408=conditional_and_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_and_expression408.Tree, conditional_and_expression408, retval);
			DebugLocation(439, 33);
			// cs.g:439:33: ( '||' conditional_and_expression )*
			try { DebugEnterSubRule(118);
			while (true)
			{
				int alt118=2;
				try { DebugEnterDecision(118, false);
				int LA118_0 = input.LA(1);

				if ((LA118_0==200))
				{
					alt118 = 1;
				}


				} finally { DebugExitDecision(118); }
				switch ( alt118 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:439:34: '||' conditional_and_expression
					{
					DebugLocation(439, 34);
					string_literal409=(IToken)Match(input,200,Follow._200_in_conditional_or_expression4281); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal409_tree = (object)adaptor.Create(string_literal409, retval);
					adaptor.AddChild(root_0, string_literal409_tree);
					}
					DebugLocation(439, 41);
					PushFollow(Follow._conditional_and_expression_in_conditional_or_expression4285);
					conditional_and_expression410=conditional_and_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_and_expression410.Tree, conditional_and_expression410, retval);

					}
					break;

				default:
					goto loop118;
				}
			}

			loop118:
				;

			} finally { DebugExitSubRule(118); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditional_or_expression", 108);
			LeaveRule("conditional_or_expression", 108);
			LeaveRule_conditional_or_expression();
			if (state.backtracking > 0) { Memoize(input, 108, conditional_or_expression_StartIndex); }

		}
		DebugLocation(439, 69);
		} finally { DebugExitRule(GrammarFileName, "conditional_or_expression"); }
		return retval;

	}
	// $ANTLR end "conditional_or_expression"

	partial void EnterRule_null_coalescing_expression();
	partial void LeaveRule_null_coalescing_expression();

	// $ANTLR start "null_coalescing_expression"
	// cs.g:441:1: null_coalescing_expression : conditional_or_expression ( '??' conditional_or_expression )* ;
	[GrammarRule("null_coalescing_expression")]
	public XAstParserRuleReturnScope null_coalescing_expression()
	{
		EnterRule_null_coalescing_expression();
		EnterRule("null_coalescing_expression", 109);
		var retval = new XAstParserRuleReturnScope("null_coalescing_expression");
		
		retval.Start = (IToken)input.LT(1);
		int null_coalescing_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal412 = default(IToken);
		XAstParserRuleReturnScope conditional_or_expression411 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conditional_or_expression413 = default(XAstParserRuleReturnScope);

		object string_literal412_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "null_coalescing_expression");
		DebugLocation(441, 68);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 109)) { return retval; }

			// cs.g:441:27: ( conditional_or_expression ( '??' conditional_or_expression )* )
			DebugEnterAlt(1);
			// cs.g:442:5: conditional_or_expression ( '??' conditional_or_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(442, 5);
			PushFollow(Follow._conditional_or_expression_in_null_coalescing_expression4299);
			conditional_or_expression411=conditional_or_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_or_expression411.Tree, conditional_or_expression411, retval);
			DebugLocation(442, 33);
			// cs.g:442:33: ( '??' conditional_or_expression )*
			try { DebugEnterSubRule(119);
			while (true)
			{
				int alt119=2;
				try { DebugEnterDecision(119, false);
				int LA119_0 = input.LA(1);

				if ((LA119_0==90))
				{
					alt119 = 1;
				}


				} finally { DebugExitDecision(119); }
				switch ( alt119 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:442:34: '??' conditional_or_expression
					{
					DebugLocation(442, 34);
					string_literal412=(IToken)Match(input,90,Follow._90_in_null_coalescing_expression4304); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal412_tree = (object)adaptor.Create(string_literal412, retval);
					adaptor.AddChild(root_0, string_literal412_tree);
					}
					DebugLocation(442, 41);
					PushFollow(Follow._conditional_or_expression_in_null_coalescing_expression4308);
					conditional_or_expression413=conditional_or_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, conditional_or_expression413.Tree, conditional_or_expression413, retval);

					}
					break;

				default:
					goto loop119;
				}
			}

			loop119:
				;

			} finally { DebugExitSubRule(119); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("null_coalescing_expression", 109);
			LeaveRule("null_coalescing_expression", 109);
			LeaveRule_null_coalescing_expression();
			if (state.backtracking > 0) { Memoize(input, 109, null_coalescing_expression_StartIndex); }

		}
		DebugLocation(442, 68);
		} finally { DebugExitRule(GrammarFileName, "null_coalescing_expression"); }
		return retval;

	}
	// $ANTLR end "null_coalescing_expression"

	partial void EnterRule_conditional_expression();
	partial void LeaveRule_conditional_expression();

	// $ANTLR start "conditional_expression"
	// cs.g:443:1: conditional_expression : null_coalescing_expression ( '?' expression ':' expression )? ;
	[GrammarRule("conditional_expression")]
	public XAstParserRuleReturnScope conditional_expression()
	{
		EnterRule_conditional_expression();
		EnterRule("conditional_expression", 110);
		var retval = new XAstParserRuleReturnScope("conditional_expression");
		
		retval.Start = (IToken)input.LT(1);
		int conditional_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal415 = default(IToken);
		IToken char_literal417 = default(IToken);
		XAstParserRuleReturnScope null_coalescing_expression414 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression416 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression418 = default(XAstParserRuleReturnScope);

		object char_literal415_tree = default(object);
		object char_literal417_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conditional_expression");
		DebugLocation(443, 72);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 110)) { return retval; }

			// cs.g:443:23: ( null_coalescing_expression ( '?' expression ':' expression )? )
			DebugEnterAlt(1);
			// cs.g:444:5: null_coalescing_expression ( '?' expression ':' expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(444, 5);
			PushFollow(Follow._null_coalescing_expression_in_conditional_expression4321);
			null_coalescing_expression414=null_coalescing_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, null_coalescing_expression414.Tree, null_coalescing_expression414, retval);
			DebugLocation(444, 34);
			// cs.g:444:34: ( '?' expression ':' expression )?
			int alt120=2;
			try { DebugEnterSubRule(120);
			try { DebugEnterDecision(120, false);
			int LA120_0 = input.LA(1);

			if ((LA120_0==89))
			{
				alt120 = 1;
			}
			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:444:35: '?' expression ':' expression
				{
				DebugLocation(444, 35);
				char_literal415=(IToken)Match(input,89,Follow._89_in_conditional_expression4326); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal415_tree = (object)adaptor.Create(char_literal415, retval);
				adaptor.AddChild(root_0, char_literal415_tree);
				}
				DebugLocation(444, 41);
				PushFollow(Follow._expression_in_conditional_expression4330);
				expression416=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression416.Tree, expression416, retval);
				DebugLocation(444, 54);
				char_literal417=(IToken)Match(input,79,Follow._79_in_conditional_expression4334); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal417_tree = (object)adaptor.Create(char_literal417, retval);
				adaptor.AddChild(root_0, char_literal417_tree);
				}
				DebugLocation(444, 60);
				PushFollow(Follow._expression_in_conditional_expression4338);
				expression418=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression418.Tree, expression418, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(120); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conditional_expression", 110);
			LeaveRule("conditional_expression", 110);
			LeaveRule_conditional_expression();
			if (state.backtracking > 0) { Memoize(input, 110, conditional_expression_StartIndex); }

		}
		DebugLocation(444, 72);
		} finally { DebugExitRule(GrammarFileName, "conditional_expression"); }
		return retval;

	}
	// $ANTLR end "conditional_expression"

	partial void EnterRule_lambda_expression();
	partial void LeaveRule_lambda_expression();

	// $ANTLR start "lambda_expression"
	// cs.g:449:1: lambda_expression : anonymous_function_signature '=>' anonymous_function_body ;
	[GrammarRule("lambda_expression")]
	public XAstParserRuleReturnScope lambda_expression()
	{
		EnterRule_lambda_expression();
		EnterRule("lambda_expression", 111);
		var retval = new XAstParserRuleReturnScope("lambda_expression");
		
		retval.Start = (IToken)input.LT(1);
		int lambda_expression_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal420 = default(IToken);
		XAstParserRuleReturnScope anonymous_function_signature419 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope anonymous_function_body421 = default(XAstParserRuleReturnScope);

		object string_literal420_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "lambda_expression");
		DebugLocation(449, 65);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 111)) { return retval; }

			// cs.g:449:18: ( anonymous_function_signature '=>' anonymous_function_body )
			DebugEnterAlt(1);
			// cs.g:450:5: anonymous_function_signature '=>' anonymous_function_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(450, 5);
			PushFollow(Follow._anonymous_function_signature_in_lambda_expression4361);
			anonymous_function_signature419=anonymous_function_signature();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, anonymous_function_signature419.Tree, anonymous_function_signature419, retval);
			DebugLocation(450, 36);
			string_literal420=(IToken)Match(input,87,Follow._87_in_lambda_expression4365); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal420_tree = (object)adaptor.Create(string_literal420, retval);
			adaptor.AddChild(root_0, string_literal420_tree);
			}
			DebugLocation(450, 43);
			PushFollow(Follow._anonymous_function_body_in_lambda_expression4369);
			anonymous_function_body421=anonymous_function_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, anonymous_function_body421.Tree, anonymous_function_body421, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expression", 111);
			LeaveRule("lambda_expression", 111);
			LeaveRule_lambda_expression();
			if (state.backtracking > 0) { Memoize(input, 111, lambda_expression_StartIndex); }

		}
		DebugLocation(450, 65);
		} finally { DebugExitRule(GrammarFileName, "lambda_expression"); }
		return retval;

	}
	// $ANTLR end "lambda_expression"

	partial void EnterRule_anonymous_function_signature();
	partial void LeaveRule_anonymous_function_signature();

	// $ANTLR start "anonymous_function_signature"
	// cs.g:451:1: anonymous_function_signature : ( '(' ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )? ')' | implicit_anonymous_function_parameter_list );
	[GrammarRule("anonymous_function_signature")]
	public XAstParserRuleReturnScope anonymous_function_signature()
	{
		EnterRule_anonymous_function_signature();
		EnterRule("anonymous_function_signature", 112);
		var retval = new XAstParserRuleReturnScope("anonymous_function_signature");
		
		retval.Start = (IToken)input.LT(1);
		int anonymous_function_signature_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal422 = default(IToken);
		IToken char_literal425 = default(IToken);
		XAstParserRuleReturnScope explicit_anonymous_function_parameter_list423 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope implicit_anonymous_function_parameter_list424 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope implicit_anonymous_function_parameter_list426 = default(XAstParserRuleReturnScope);

		object char_literal422_tree = default(object);
		object char_literal425_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "anonymous_function_signature");
		DebugLocation(451, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 112)) { return retval; }

			// cs.g:451:29: ( '(' ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )? ')' | implicit_anonymous_function_parameter_list )
			int alt122=2;
			try { DebugEnterDecision(122, false);
			int LA122_0 = input.LA(1);

			if ((LA122_0==68))
			{
				alt122 = 1;
			}
			else if ((LA122_0==IDENTIFIER||LA122_0==95||(LA122_0>=97 && LA122_0<=98)||(LA122_0>=100 && LA122_0<=101)||LA122_0==105||LA122_0==117||LA122_0==120||LA122_0==122||LA122_0==126||LA122_0==132||LA122_0==135||LA122_0==141||(LA122_0>=143 && LA122_0<=144)||(LA122_0>=147 && LA122_0<=148)||LA122_0==152||LA122_0==154||LA122_0==157||LA122_0==160||LA122_0==162||LA122_0==167||(LA122_0>=171 && LA122_0<=172)||LA122_0==183||LA122_0==190||LA122_0==194||LA122_0==196))
			{
				alt122 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 122, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:452:5: '(' ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )? ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(452, 5);
				char_literal422=(IToken)Match(input,68,Follow._68_in_anonymous_function_signature4379); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal422_tree = (object)adaptor.Create(char_literal422, retval);
				adaptor.AddChild(root_0, char_literal422_tree);
				}
				DebugLocation(452, 9);
				// cs.g:452:9: ( explicit_anonymous_function_parameter_list | implicit_anonymous_function_parameter_list )?
				int alt121=3;
				try { DebugEnterSubRule(121);
				try { DebugEnterDecision(121, false);
				int LA121_0 = input.LA(1);

				if ((LA121_0==103||LA121_0==106||LA121_0==109||LA121_0==114||LA121_0==119||LA121_0==129||LA121_0==138||LA121_0==146||LA121_0==151||LA121_0==155||LA121_0==166||LA121_0==169||LA121_0==173||LA121_0==177||(LA121_0>=185 && LA121_0<=186)||LA121_0==189||LA121_0==192))
				{
					alt121 = 1;
				}
				else if ((LA121_0==IDENTIFIER||LA121_0==95||(LA121_0>=97 && LA121_0<=98)||(LA121_0>=100 && LA121_0<=101)||LA121_0==105||LA121_0==117||LA121_0==120||LA121_0==122||LA121_0==126||LA121_0==132||LA121_0==135||LA121_0==141||(LA121_0>=143 && LA121_0<=144)||(LA121_0>=147 && LA121_0<=148)||LA121_0==152||LA121_0==154||LA121_0==157||LA121_0==160||LA121_0==162||LA121_0==167||(LA121_0>=171 && LA121_0<=172)||LA121_0==183||LA121_0==190||LA121_0==194||LA121_0==196))
				{
					int LA121_2 = input.LA(2);

					if ((LA121_2==DOT||LA121_2==IDENTIFIER||LA121_2==69||(LA121_2>=80 && LA121_2<=81)||LA121_2==89||LA121_2==91||LA121_2==95||(LA121_2>=97 && LA121_2<=98)||(LA121_2>=100 && LA121_2<=101)||LA121_2==105||LA121_2==117||LA121_2==120||LA121_2==122||LA121_2==126||LA121_2==132||LA121_2==135||LA121_2==141||(LA121_2>=143 && LA121_2<=144)||(LA121_2>=147 && LA121_2<=148)||LA121_2==152||LA121_2==154||LA121_2==157||LA121_2==160||LA121_2==162||LA121_2==167||(LA121_2>=171 && LA121_2<=172)||LA121_2==183||LA121_2==190||LA121_2==194||LA121_2==196))
					{
						alt121 = 1;
					}
					else if ((LA121_2==RPAREN||LA121_2==74))
					{
						alt121 = 2;
					}
				}
				} finally { DebugExitDecision(121); }
				switch (alt121)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:452:10: explicit_anonymous_function_parameter_list
					{
					DebugLocation(452, 10);
					PushFollow(Follow._explicit_anonymous_function_parameter_list_in_anonymous_function_signature4382);
					explicit_anonymous_function_parameter_list423=explicit_anonymous_function_parameter_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, explicit_anonymous_function_parameter_list423.Tree, explicit_anonymous_function_parameter_list423, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:453:11: implicit_anonymous_function_parameter_list
					{
					DebugLocation(453, 11);
					PushFollow(Follow._implicit_anonymous_function_parameter_list_in_anonymous_function_signature4394);
					implicit_anonymous_function_parameter_list424=implicit_anonymous_function_parameter_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, implicit_anonymous_function_parameter_list424.Tree, implicit_anonymous_function_parameter_list424, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(121); }

				DebugLocation(453, 56);
				char_literal425=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_anonymous_function_signature4398), "RPAREN"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal425_tree = (object)adaptor.Create(char_literal425, retval);
				adaptor.AddChild(root_0, char_literal425_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:454:7: implicit_anonymous_function_parameter_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(454, 7);
				PushFollow(Follow._implicit_anonymous_function_parameter_list_in_anonymous_function_signature4406);
				implicit_anonymous_function_parameter_list426=implicit_anonymous_function_parameter_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, implicit_anonymous_function_parameter_list426.Tree, implicit_anonymous_function_parameter_list426, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymous_function_signature", 112);
			LeaveRule("anonymous_function_signature", 112);
			LeaveRule_anonymous_function_signature();
			if (state.backtracking > 0) { Memoize(input, 112, anonymous_function_signature_StartIndex); }

		}
		DebugLocation(455, 4);
		} finally { DebugExitRule(GrammarFileName, "anonymous_function_signature"); }
		return retval;

	}
	// $ANTLR end "anonymous_function_signature"

	partial void EnterRule_implicit_anonymous_function_parameter_list();
	partial void LeaveRule_implicit_anonymous_function_parameter_list();

	// $ANTLR start "implicit_anonymous_function_parameter_list"
	// cs.g:456:1: implicit_anonymous_function_parameter_list : implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )* ;
	[GrammarRule("implicit_anonymous_function_parameter_list")]
	public XAstParserRuleReturnScope implicit_anonymous_function_parameter_list()
	{
		EnterRule_implicit_anonymous_function_parameter_list();
		EnterRule("implicit_anonymous_function_parameter_list", 113);
		var retval = new XAstParserRuleReturnScope("implicit_anonymous_function_parameter_list");
		
		retval.Start = (IToken)input.LT(1);
		int implicit_anonymous_function_parameter_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal428 = default(IToken);
		XAstParserRuleReturnScope implicit_anonymous_function_parameter427 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope implicit_anonymous_function_parameter429 = default(XAstParserRuleReturnScope);

		object char_literal428_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "implicit_anonymous_function_parameter_list");
		DebugLocation(456, 91);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 113)) { return retval; }

			// cs.g:456:43: ( implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )* )
			DebugEnterAlt(1);
			// cs.g:457:5: implicit_anonymous_function_parameter ( ',' implicit_anonymous_function_parameter )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(457, 5);
			PushFollow(Follow._implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list4421);
			implicit_anonymous_function_parameter427=implicit_anonymous_function_parameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, implicit_anonymous_function_parameter427.Tree, implicit_anonymous_function_parameter427, retval);
			DebugLocation(457, 45);
			// cs.g:457:45: ( ',' implicit_anonymous_function_parameter )*
			try { DebugEnterSubRule(123);
			while (true)
			{
				int alt123=2;
				try { DebugEnterDecision(123, false);
				int LA123_0 = input.LA(1);

				if ((LA123_0==74))
				{
					alt123 = 1;
				}


				} finally { DebugExitDecision(123); }
				switch ( alt123 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:457:46: ',' implicit_anonymous_function_parameter
					{
					DebugLocation(457, 46);
					char_literal428=(IToken)Match(input,74,Follow._74_in_implicit_anonymous_function_parameter_list4426); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal428_tree = (object)adaptor.Create(char_literal428, retval);
					adaptor.AddChild(root_0, char_literal428_tree);
					}
					DebugLocation(457, 52);
					PushFollow(Follow._implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list4430);
					implicit_anonymous_function_parameter429=implicit_anonymous_function_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, implicit_anonymous_function_parameter429.Tree, implicit_anonymous_function_parameter429, retval);

					}
					break;

				default:
					goto loop123;
				}
			}

			loop123:
				;

			} finally { DebugExitSubRule(123); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("implicit_anonymous_function_parameter_list", 113);
			LeaveRule("implicit_anonymous_function_parameter_list", 113);
			LeaveRule_implicit_anonymous_function_parameter_list();
			if (state.backtracking > 0) { Memoize(input, 113, implicit_anonymous_function_parameter_list_StartIndex); }

		}
		DebugLocation(457, 91);
		} finally { DebugExitRule(GrammarFileName, "implicit_anonymous_function_parameter_list"); }
		return retval;

	}
	// $ANTLR end "implicit_anonymous_function_parameter_list"

	partial void EnterRule_implicit_anonymous_function_parameter();
	partial void LeaveRule_implicit_anonymous_function_parameter();

	// $ANTLR start "implicit_anonymous_function_parameter"
	// cs.g:458:1: implicit_anonymous_function_parameter : identifier ;
	[GrammarRule("implicit_anonymous_function_parameter")]
	public XAstParserRuleReturnScope implicit_anonymous_function_parameter()
	{
		EnterRule_implicit_anonymous_function_parameter();
		EnterRule("implicit_anonymous_function_parameter", 114);
		var retval = new XAstParserRuleReturnScope("implicit_anonymous_function_parameter");
		
		retval.Start = (IToken)input.LT(1);
		int implicit_anonymous_function_parameter_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope identifier430 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "implicit_anonymous_function_parameter");
		DebugLocation(458, 14);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 114)) { return retval; }

			// cs.g:458:38: ( identifier )
			DebugEnterAlt(1);
			// cs.g:459:5: identifier
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(459, 5);
			PushFollow(Follow._identifier_in_implicit_anonymous_function_parameter4443);
			identifier430=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier430.Tree, identifier430, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("implicit_anonymous_function_parameter", 114);
			LeaveRule("implicit_anonymous_function_parameter", 114);
			LeaveRule_implicit_anonymous_function_parameter();
			if (state.backtracking > 0) { Memoize(input, 114, implicit_anonymous_function_parameter_StartIndex); }

		}
		DebugLocation(459, 14);
		} finally { DebugExitRule(GrammarFileName, "implicit_anonymous_function_parameter"); }
		return retval;

	}
	// $ANTLR end "implicit_anonymous_function_parameter"

	partial void EnterRule_anonymous_function_body();
	partial void LeaveRule_anonymous_function_body();

	// $ANTLR start "anonymous_function_body"
	// cs.g:460:1: anonymous_function_body : ( expression | block );
	[GrammarRule("anonymous_function_body")]
	public XAstParserRuleReturnScope anonymous_function_body()
	{
		EnterRule_anonymous_function_body();
		EnterRule("anonymous_function_body", 115);
		var retval = new XAstParserRuleReturnScope("anonymous_function_body");
		
		retval.Start = (IToken)input.LT(1);
		int anonymous_function_body_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope expression431 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope block432 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "anonymous_function_body");
		DebugLocation(460, 12);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 115)) { return retval; }

			// cs.g:460:24: ( expression | block )
			int alt124=2;
			try { DebugEnterDecision(124, false);
			int LA124_0 = input.LA(1);

			if ((LA124_0==Character_literal||LA124_0==FALSE||(LA124_0>=Hex_number && LA124_0<=IDENTIFIER)||(LA124_0>=MINUS && LA124_0<=NUMBER)||LA124_0==Real_literal||LA124_0==STRINGLITERAL||LA124_0==TRUE||LA124_0==Verbatim_string_literal||LA124_0==61||LA124_0==66||(LA124_0>=68 && LA124_0<=69)||(LA124_0>=71 && LA124_0<=72)||LA124_0==75||LA124_0==95||(LA124_0>=97 && LA124_0<=98)||(LA124_0>=100 && LA124_0<=103)||(LA124_0>=105 && LA124_0<=106)||(LA124_0>=109 && LA124_0<=110)||(LA124_0>=114 && LA124_0<=117)||(LA124_0>=119 && LA124_0<=120)||LA124_0==122||LA124_0==126||LA124_0==129||LA124_0==132||LA124_0==135||LA124_0==138||LA124_0==141||(LA124_0>=143 && LA124_0<=144)||(LA124_0>=146 && LA124_0<=148)||(LA124_0>=150 && LA124_0<=152)||LA124_0==154||LA124_0==157||LA124_0==160||LA124_0==162||LA124_0==167||LA124_0==169||(LA124_0>=171 && LA124_0<=174)||LA124_0==177||LA124_0==180||(LA124_0>=183 && LA124_0<=187)||(LA124_0>=189 && LA124_0<=190)||LA124_0==194||LA124_0==196||LA124_0==202))
			{
				alt124 = 1;
			}
			else if ((LA124_0==SEMI||LA124_0==197))
			{
				alt124 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 124, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(124); }
			switch (alt124)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:461:5: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(461, 5);
				PushFollow(Follow._expression_in_anonymous_function_body4453);
				expression431=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression431.Tree, expression431, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:462:7: block
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(462, 7);
				PushFollow(Follow._block_in_anonymous_function_body4461);
				block432=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block432.Tree, block432, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("anonymous_function_body", 115);
			LeaveRule("anonymous_function_body", 115);
			LeaveRule_anonymous_function_body();
			if (state.backtracking > 0) { Memoize(input, 115, anonymous_function_body_StartIndex); }

		}
		DebugLocation(462, 12);
		} finally { DebugExitRule(GrammarFileName, "anonymous_function_body"); }
		return retval;

	}
	// $ANTLR end "anonymous_function_body"

	partial void EnterRule_query_expression();
	partial void LeaveRule_query_expression();

	// $ANTLR start "query_expression"
	// cs.g:467:1: query_expression : from_clause query_body ;
	[GrammarRule("query_expression")]
	public XAstParserRuleReturnScope query_expression()
	{
		EnterRule_query_expression();
		EnterRule("query_expression", 116);
		var retval = new XAstParserRuleReturnScope("query_expression");
		
		retval.Start = (IToken)input.LT(1);
		int query_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope from_clause433 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope query_body434 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "query_expression");
		DebugLocation(467, 29);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 116)) { return retval; }

			// cs.g:467:17: ( from_clause query_body )
			DebugEnterAlt(1);
			// cs.g:468:5: from_clause query_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(468, 5);
			PushFollow(Follow._from_clause_in_query_expression4476);
			from_clause433=from_clause();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, from_clause433.Tree, from_clause433, retval);
			DebugLocation(468, 19);
			PushFollow(Follow._query_body_in_query_expression4480);
			query_body434=query_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, query_body434.Tree, query_body434, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("query_expression", 116);
			LeaveRule("query_expression", 116);
			LeaveRule_query_expression();
			if (state.backtracking > 0) { Memoize(input, 116, query_expression_StartIndex); }

		}
		DebugLocation(468, 29);
		} finally { DebugExitRule(GrammarFileName, "query_expression"); }
		return retval;

	}
	// $ANTLR end "query_expression"

	partial void EnterRule_query_body();
	partial void LeaveRule_query_body();

	// $ANTLR start "query_body"
	// cs.g:469:1: query_body : ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )? ;
	[GrammarRule("query_body")]
	public XAstParserRuleReturnScope query_body()
	{
		EnterRule_query_body();
		EnterRule("query_body", 117);
		var retval = new XAstParserRuleReturnScope("query_body");
		
		retval.Start = (IToken)input.LT(1);
		int query_body_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope query_body_clauses435 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope select_or_group_clause436 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope query_continuation437 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "query_body");
		DebugLocation(469, 85);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 117)) { return retval; }

			// cs.g:469:11: ( ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )? )
			DebugEnterAlt(1);
			// cs.g:471:5: ( query_body_clauses )? select_or_group_clause ( ( 'into' )=> query_continuation )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(471, 5);
			// cs.g:471:5: ( query_body_clauses )?
			int alt125=2;
			try { DebugEnterSubRule(125);
			try { DebugEnterDecision(125, false);
			int LA125_0 = input.LA(1);

			if ((LA125_0==132||(LA125_0>=143 && LA125_0<=144)||LA125_0==154||LA125_0==194))
			{
				alt125 = 1;
			}
			} finally { DebugExitDecision(125); }
			switch (alt125)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:471:5: query_body_clauses
				{
				DebugLocation(471, 5);
				PushFollow(Follow._query_body_clauses_in_query_body4496);
				query_body_clauses435=query_body_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, query_body_clauses435.Tree, query_body_clauses435, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(125); }

			DebugLocation(471, 27);
			PushFollow(Follow._select_or_group_clause_in_query_body4501);
			select_or_group_clause436=select_or_group_clause();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, select_or_group_clause436.Tree, select_or_group_clause436, retval);
			DebugLocation(471, 52);
			// cs.g:471:52: ( ( 'into' )=> query_continuation )?
			int alt126=2;
			try { DebugEnterSubRule(126);
			try { DebugEnterDecision(126, false);
			int LA126_0 = input.LA(1);

			if ((LA126_0==141))
			{
				int LA126_1 = input.LA(2);

				if ((EvaluatePredicate(synpred23_cs_fragment)))
				{
					alt126 = 1;
				}
			}
			} finally { DebugExitDecision(126); }
			switch (alt126)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:471:53: ( 'into' )=> query_continuation
				{
				DebugLocation(471, 65);
				PushFollow(Follow._query_continuation_in_query_body4512);
				query_continuation437=query_continuation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, query_continuation437.Tree, query_continuation437, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(126); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("query_body", 117);
			LeaveRule("query_body", 117);
			LeaveRule_query_body();
			if (state.backtracking > 0) { Memoize(input, 117, query_body_StartIndex); }

		}
		DebugLocation(471, 85);
		} finally { DebugExitRule(GrammarFileName, "query_body"); }
		return retval;

	}
	// $ANTLR end "query_body"

	partial void EnterRule_query_continuation();
	partial void LeaveRule_query_continuation();

	// $ANTLR start "query_continuation"
	// cs.g:472:1: query_continuation : 'into' identifier query_body ;
	[GrammarRule("query_continuation")]
	public XAstParserRuleReturnScope query_continuation()
	{
		EnterRule_query_continuation();
		EnterRule("query_continuation", 118);
		var retval = new XAstParserRuleReturnScope("query_continuation");
		
		retval.Start = (IToken)input.LT(1);
		int query_continuation_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal438 = default(IToken);
		XAstParserRuleReturnScope identifier439 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope query_body440 = default(XAstParserRuleReturnScope);

		object string_literal438_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "query_continuation");
		DebugLocation(472, 36);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 118)) { return retval; }

			// cs.g:472:19: ( 'into' identifier query_body )
			DebugEnterAlt(1);
			// cs.g:473:5: 'into' identifier query_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(473, 5);
			string_literal438=(IToken)Match(input,141,Follow._141_in_query_continuation4525); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal438_tree = (object)adaptor.Create(string_literal438, retval);
			adaptor.AddChild(root_0, string_literal438_tree);
			}
			DebugLocation(473, 14);
			PushFollow(Follow._identifier_in_query_continuation4529);
			identifier439=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier439.Tree, identifier439, retval);
			DebugLocation(473, 27);
			PushFollow(Follow._query_body_in_query_continuation4533);
			query_body440=query_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, query_body440.Tree, query_body440, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("query_continuation", 118);
			LeaveRule("query_continuation", 118);
			LeaveRule_query_continuation();
			if (state.backtracking > 0) { Memoize(input, 118, query_continuation_StartIndex); }

		}
		DebugLocation(473, 36);
		} finally { DebugExitRule(GrammarFileName, "query_continuation"); }
		return retval;

	}
	// $ANTLR end "query_continuation"

	partial void EnterRule_query_body_clauses();
	partial void LeaveRule_query_body_clauses();

	// $ANTLR start "query_body_clauses"
	// cs.g:474:1: query_body_clauses : ( query_body_clause )+ ;
	[GrammarRule("query_body_clauses")]
	public XAstParserRuleReturnScope query_body_clauses()
	{
		EnterRule_query_body_clauses();
		EnterRule("query_body_clauses", 119);
		var retval = new XAstParserRuleReturnScope("query_body_clauses");
		
		retval.Start = (IToken)input.LT(1);
		int query_body_clauses_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope query_body_clause441 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "query_body_clauses");
		DebugLocation(474, 23);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 119)) { return retval; }

			// cs.g:474:19: ( ( query_body_clause )+ )
			DebugEnterAlt(1);
			// cs.g:475:5: ( query_body_clause )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(475, 5);
			// cs.g:475:5: ( query_body_clause )+
			int cnt127=0;
			try { DebugEnterSubRule(127);
			while (true)
			{
				int alt127=2;
				try { DebugEnterDecision(127, false);
				int LA127_0 = input.LA(1);

				if ((LA127_0==132||(LA127_0>=143 && LA127_0<=144)||LA127_0==154||LA127_0==194))
				{
					alt127 = 1;
				}


				} finally { DebugExitDecision(127); }
				switch (alt127)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:475:5: query_body_clause
					{
					DebugLocation(475, 5);
					PushFollow(Follow._query_body_clause_in_query_body_clauses4543);
					query_body_clause441=query_body_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, query_body_clause441.Tree, query_body_clause441, retval);

					}
					break;

				default:
					if (cnt127 >= 1)
						goto loop127;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee127 = new EarlyExitException( 127, input );
					DebugRecognitionException(eee127);
					throw eee127;
				}
				cnt127++;
			}
			loop127:
				;

			} finally { DebugExitSubRule(127); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("query_body_clauses", 119);
			LeaveRule("query_body_clauses", 119);
			LeaveRule_query_body_clauses();
			if (state.backtracking > 0) { Memoize(input, 119, query_body_clauses_StartIndex); }

		}
		DebugLocation(475, 23);
		} finally { DebugExitRule(GrammarFileName, "query_body_clauses"); }
		return retval;

	}
	// $ANTLR end "query_body_clauses"

	partial void EnterRule_query_body_clause();
	partial void LeaveRule_query_body_clause();

	// $ANTLR start "query_body_clause"
	// cs.g:476:1: query_body_clause : ( from_clause | let_clause | where_clause | join_clause | orderby_clause );
	[GrammarRule("query_body_clause")]
	public XAstParserRuleReturnScope query_body_clause()
	{
		EnterRule_query_body_clause();
		EnterRule("query_body_clause", 120);
		var retval = new XAstParserRuleReturnScope("query_body_clause");
		
		retval.Start = (IToken)input.LT(1);
		int query_body_clause_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope from_clause442 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope let_clause443 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope where_clause444 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope join_clause445 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope orderby_clause446 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "query_body_clause");
		DebugLocation(476, 20);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 120)) { return retval; }

			// cs.g:476:18: ( from_clause | let_clause | where_clause | join_clause | orderby_clause )
			int alt128=5;
			try { DebugEnterDecision(128, false);
			switch (input.LA(1))
			{
			case 132:
				{
				alt128 = 1;
				}
				break;
			case 144:
				{
				alt128 = 2;
				}
				break;
			case 194:
				{
				alt128 = 3;
				}
				break;
			case 143:
				{
				alt128 = 4;
				}
				break;
			case 154:
				{
				alt128 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 128, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(128); }
			switch (alt128)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:477:5: from_clause
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(477, 5);
				PushFollow(Follow._from_clause_in_query_body_clause4555);
				from_clause442=from_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, from_clause442.Tree, from_clause442, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:478:7: let_clause
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(478, 7);
				PushFollow(Follow._let_clause_in_query_body_clause4563);
				let_clause443=let_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, let_clause443.Tree, let_clause443, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:479:7: where_clause
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(479, 7);
				PushFollow(Follow._where_clause_in_query_body_clause4571);
				where_clause444=where_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, where_clause444.Tree, where_clause444, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:480:7: join_clause
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(480, 7);
				PushFollow(Follow._join_clause_in_query_body_clause4579);
				join_clause445=join_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, join_clause445.Tree, join_clause445, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// cs.g:481:7: orderby_clause
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(481, 7);
				PushFollow(Follow._orderby_clause_in_query_body_clause4587);
				orderby_clause446=orderby_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, orderby_clause446.Tree, orderby_clause446, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("query_body_clause", 120);
			LeaveRule("query_body_clause", 120);
			LeaveRule_query_body_clause();
			if (state.backtracking > 0) { Memoize(input, 120, query_body_clause_StartIndex); }

		}
		DebugLocation(481, 20);
		} finally { DebugExitRule(GrammarFileName, "query_body_clause"); }
		return retval;

	}
	// $ANTLR end "query_body_clause"

	partial void EnterRule_from_clause();
	partial void LeaveRule_from_clause();

	// $ANTLR start "from_clause"
	// cs.g:482:1: from_clause : 'from' ( type )? identifier 'in' expression ;
	[GrammarRule("from_clause")]
	public XAstParserRuleReturnScope from_clause()
	{
		EnterRule_from_clause();
		EnterRule("from_clause", 121);
		var retval = new XAstParserRuleReturnScope("from_clause");
		
		retval.Start = (IToken)input.LT(1);
		int from_clause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal447 = default(IToken);
		IToken string_literal450 = default(IToken);
		XAstParserRuleReturnScope type448 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier449 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression451 = default(XAstParserRuleReturnScope);

		object string_literal447_tree = default(object);
		object string_literal450_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "from_clause");
		DebugLocation(482, 52);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 121)) { return retval; }

			// cs.g:482:12: ( 'from' ( type )? identifier 'in' expression )
			DebugEnterAlt(1);
			// cs.g:483:5: 'from' ( type )? identifier 'in' expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(483, 5);
			string_literal447=(IToken)Match(input,132,Follow._132_in_from_clause4597); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal447_tree = (object)adaptor.Create(string_literal447, retval);
			adaptor.AddChild(root_0, string_literal447_tree);
			}
			DebugLocation(483, 14);
			// cs.g:483:14: ( type )?
			int alt129=2;
			try { DebugEnterSubRule(129);
			try { DebugEnterDecision(129, false);
			int LA129_0 = input.LA(1);

			if ((LA129_0==103||LA129_0==106||LA129_0==109||LA129_0==114||LA129_0==119||LA129_0==129||LA129_0==138||LA129_0==146||LA129_0==151||LA129_0==169||LA129_0==173||LA129_0==177||(LA129_0>=185 && LA129_0<=186)||LA129_0==189||LA129_0==192))
			{
				alt129 = 1;
			}
			else if ((LA129_0==IDENTIFIER||LA129_0==95||(LA129_0>=97 && LA129_0<=98)||(LA129_0>=100 && LA129_0<=101)||LA129_0==105||LA129_0==117||LA129_0==120||LA129_0==122||LA129_0==126||LA129_0==132||LA129_0==135||LA129_0==141||(LA129_0>=143 && LA129_0<=144)||(LA129_0>=147 && LA129_0<=148)||LA129_0==152||LA129_0==154||LA129_0==157||LA129_0==160||LA129_0==162||LA129_0==167||(LA129_0>=171 && LA129_0<=172)||LA129_0==183||LA129_0==190||LA129_0==194||LA129_0==196))
			{
				int LA129_2 = input.LA(2);

				if ((LA129_2==DOT||LA129_2==IDENTIFIER||LA129_2==69||(LA129_2>=80 && LA129_2<=81)||LA129_2==89||LA129_2==91||LA129_2==95||(LA129_2>=97 && LA129_2<=98)||(LA129_2>=100 && LA129_2<=101)||LA129_2==105||LA129_2==117||LA129_2==120||LA129_2==122||LA129_2==126||LA129_2==132||LA129_2==135||LA129_2==141||(LA129_2>=143 && LA129_2<=144)||(LA129_2>=147 && LA129_2<=148)||LA129_2==152||LA129_2==154||LA129_2==157||LA129_2==160||LA129_2==162||LA129_2==167||(LA129_2>=171 && LA129_2<=172)||LA129_2==183||LA129_2==190||LA129_2==194||LA129_2==196))
				{
					alt129 = 1;
				}
			}
			} finally { DebugExitDecision(129); }
			switch (alt129)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:483:14: type
				{
				DebugLocation(483, 14);
				PushFollow(Follow._type_in_from_clause4601);
				type448=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type448.Tree, type448, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(129); }

			DebugLocation(483, 22);
			PushFollow(Follow._identifier_in_from_clause4606);
			identifier449=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier449.Tree, identifier449, retval);
			DebugLocation(483, 35);
			string_literal450=(IToken)Match(input,137,Follow._137_in_from_clause4610); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal450_tree = (object)adaptor.Create(string_literal450, retval);
			adaptor.AddChild(root_0, string_literal450_tree);
			}
			DebugLocation(483, 42);
			PushFollow(Follow._expression_in_from_clause4614);
			expression451=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression451.Tree, expression451, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause", 121);
			LeaveRule("from_clause", 121);
			LeaveRule_from_clause();
			if (state.backtracking > 0) { Memoize(input, 121, from_clause_StartIndex); }

		}
		DebugLocation(483, 52);
		} finally { DebugExitRule(GrammarFileName, "from_clause"); }
		return retval;

	}
	// $ANTLR end "from_clause"

	partial void EnterRule_join_clause();
	partial void LeaveRule_join_clause();

	// $ANTLR start "join_clause"
	// cs.g:484:1: join_clause : 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )? ;
	[GrammarRule("join_clause")]
	public XAstParserRuleReturnScope join_clause()
	{
		EnterRule_join_clause();
		EnterRule("join_clause", 122);
		var retval = new XAstParserRuleReturnScope("join_clause");
		
		retval.Start = (IToken)input.LT(1);
		int join_clause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal452 = default(IToken);
		IToken string_literal455 = default(IToken);
		IToken string_literal457 = default(IToken);
		IToken string_literal459 = default(IToken);
		IToken string_literal461 = default(IToken);
		XAstParserRuleReturnScope type453 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier454 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression456 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression458 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression460 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier462 = default(XAstParserRuleReturnScope);

		object string_literal452_tree = default(object);
		object string_literal455_tree = default(object);
		object string_literal457_tree = default(object);
		object string_literal459_tree = default(object);
		object string_literal461_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "join_clause");
		DebugLocation(484, 117);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 122)) { return retval; }

			// cs.g:484:12: ( 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )? )
			DebugEnterAlt(1);
			// cs.g:485:5: 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(485, 5);
			string_literal452=(IToken)Match(input,143,Follow._143_in_join_clause4625); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal452_tree = (object)adaptor.Create(string_literal452, retval);
			adaptor.AddChild(root_0, string_literal452_tree);
			}
			DebugLocation(485, 14);
			// cs.g:485:14: ( type )?
			int alt130=2;
			try { DebugEnterSubRule(130);
			try { DebugEnterDecision(130, false);
			int LA130_0 = input.LA(1);

			if ((LA130_0==103||LA130_0==106||LA130_0==109||LA130_0==114||LA130_0==119||LA130_0==129||LA130_0==138||LA130_0==146||LA130_0==151||LA130_0==169||LA130_0==173||LA130_0==177||(LA130_0>=185 && LA130_0<=186)||LA130_0==189||LA130_0==192))
			{
				alt130 = 1;
			}
			else if ((LA130_0==IDENTIFIER||LA130_0==95||(LA130_0>=97 && LA130_0<=98)||(LA130_0>=100 && LA130_0<=101)||LA130_0==105||LA130_0==117||LA130_0==120||LA130_0==122||LA130_0==126||LA130_0==132||LA130_0==135||LA130_0==141||(LA130_0>=143 && LA130_0<=144)||(LA130_0>=147 && LA130_0<=148)||LA130_0==152||LA130_0==154||LA130_0==157||LA130_0==160||LA130_0==162||LA130_0==167||(LA130_0>=171 && LA130_0<=172)||LA130_0==183||LA130_0==190||LA130_0==194||LA130_0==196))
			{
				int LA130_2 = input.LA(2);

				if ((LA130_2==DOT||LA130_2==IDENTIFIER||LA130_2==69||(LA130_2>=80 && LA130_2<=81)||LA130_2==89||LA130_2==91||LA130_2==95||(LA130_2>=97 && LA130_2<=98)||(LA130_2>=100 && LA130_2<=101)||LA130_2==105||LA130_2==117||LA130_2==120||LA130_2==122||LA130_2==126||LA130_2==132||LA130_2==135||LA130_2==141||(LA130_2>=143 && LA130_2<=144)||(LA130_2>=147 && LA130_2<=148)||LA130_2==152||LA130_2==154||LA130_2==157||LA130_2==160||LA130_2==162||LA130_2==167||(LA130_2>=171 && LA130_2<=172)||LA130_2==183||LA130_2==190||LA130_2==194||LA130_2==196))
				{
					alt130 = 1;
				}
			}
			} finally { DebugExitDecision(130); }
			switch (alt130)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:485:14: type
				{
				DebugLocation(485, 14);
				PushFollow(Follow._type_in_join_clause4629);
				type453=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type453.Tree, type453, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(130); }

			DebugLocation(485, 22);
			PushFollow(Follow._identifier_in_join_clause4634);
			identifier454=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier454.Tree, identifier454, retval);
			DebugLocation(485, 35);
			string_literal455=(IToken)Match(input,137,Follow._137_in_join_clause4638); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal455_tree = (object)adaptor.Create(string_literal455, retval);
			adaptor.AddChild(root_0, string_literal455_tree);
			}
			DebugLocation(485, 42);
			PushFollow(Follow._expression_in_join_clause4642);
			expression456=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression456.Tree, expression456, retval);
			DebugLocation(485, 55);
			string_literal457=(IToken)Match(input,152,Follow._152_in_join_clause4646); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal457_tree = (object)adaptor.Create(string_literal457, retval);
			adaptor.AddChild(root_0, string_literal457_tree);
			}
			DebugLocation(485, 62);
			PushFollow(Follow._expression_in_join_clause4650);
			expression458=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression458.Tree, expression458, retval);
			DebugLocation(485, 75);
			string_literal459=(IToken)Match(input,122,Follow._122_in_join_clause4654); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal459_tree = (object)adaptor.Create(string_literal459, retval);
			adaptor.AddChild(root_0, string_literal459_tree);
			}
			DebugLocation(485, 86);
			PushFollow(Follow._expression_in_join_clause4658);
			expression460=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression460.Tree, expression460, retval);
			DebugLocation(485, 97);
			// cs.g:485:97: ( 'into' identifier )?
			int alt131=2;
			try { DebugEnterSubRule(131);
			try { DebugEnterDecision(131, false);
			int LA131_0 = input.LA(1);

			if ((LA131_0==141))
			{
				alt131 = 1;
			}
			} finally { DebugExitDecision(131); }
			switch (alt131)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:485:98: 'into' identifier
				{
				DebugLocation(485, 98);
				string_literal461=(IToken)Match(input,141,Follow._141_in_join_clause4661); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal461_tree = (object)adaptor.Create(string_literal461, retval);
				adaptor.AddChild(root_0, string_literal461_tree);
				}
				DebugLocation(485, 105);
				PushFollow(Follow._identifier_in_join_clause4663);
				identifier462=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier462.Tree, identifier462, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(131); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("join_clause", 122);
			LeaveRule("join_clause", 122);
			LeaveRule_join_clause();
			if (state.backtracking > 0) { Memoize(input, 122, join_clause_StartIndex); }

		}
		DebugLocation(485, 117);
		} finally { DebugExitRule(GrammarFileName, "join_clause"); }
		return retval;

	}
	// $ANTLR end "join_clause"

	partial void EnterRule_let_clause();
	partial void LeaveRule_let_clause();

	// $ANTLR start "let_clause"
	// cs.g:486:1: let_clause : 'let' identifier '=' expression ;
	[GrammarRule("let_clause")]
	public XAstParserRuleReturnScope let_clause()
	{
		EnterRule_let_clause();
		EnterRule("let_clause", 123);
		var retval = new XAstParserRuleReturnScope("let_clause");
		
		retval.Start = (IToken)input.LT(1);
		int let_clause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal463 = default(IToken);
		IToken char_literal465 = default(IToken);
		XAstParserRuleReturnScope identifier464 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression466 = default(XAstParserRuleReturnScope);

		object string_literal463_tree = default(object);
		object char_literal465_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "let_clause");
		DebugLocation(486, 41);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 123)) { return retval; }

			// cs.g:486:11: ( 'let' identifier '=' expression )
			DebugEnterAlt(1);
			// cs.g:487:5: 'let' identifier '=' expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(487, 5);
			string_literal463=(IToken)Match(input,144,Follow._144_in_let_clause4676); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal463_tree = (object)adaptor.Create(string_literal463, retval);
			adaptor.AddChild(root_0, string_literal463_tree);
			}
			DebugLocation(487, 13);
			PushFollow(Follow._identifier_in_let_clause4680);
			identifier464=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier464.Tree, identifier464, retval);
			DebugLocation(487, 26);
			char_literal465=(IToken)Match(input,85,Follow._85_in_let_clause4684); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal465_tree = (object)adaptor.Create(char_literal465, retval);
			adaptor.AddChild(root_0, char_literal465_tree);
			}
			DebugLocation(487, 32);
			PushFollow(Follow._expression_in_let_clause4688);
			expression466=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression466.Tree, expression466, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("let_clause", 123);
			LeaveRule("let_clause", 123);
			LeaveRule_let_clause();
			if (state.backtracking > 0) { Memoize(input, 123, let_clause_StartIndex); }

		}
		DebugLocation(487, 41);
		} finally { DebugExitRule(GrammarFileName, "let_clause"); }
		return retval;

	}
	// $ANTLR end "let_clause"

	partial void EnterRule_orderby_clause();
	partial void LeaveRule_orderby_clause();

	// $ANTLR start "orderby_clause"
	// cs.g:488:1: orderby_clause : 'orderby' ordering_list ;
	[GrammarRule("orderby_clause")]
	public XAstParserRuleReturnScope orderby_clause()
	{
		EnterRule_orderby_clause();
		EnterRule("orderby_clause", 124);
		var retval = new XAstParserRuleReturnScope("orderby_clause");
		
		retval.Start = (IToken)input.LT(1);
		int orderby_clause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal467 = default(IToken);
		XAstParserRuleReturnScope ordering_list468 = default(XAstParserRuleReturnScope);

		object string_literal467_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orderby_clause");
		DebugLocation(488, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 124)) { return retval; }

			// cs.g:488:15: ( 'orderby' ordering_list )
			DebugEnterAlt(1);
			// cs.g:489:5: 'orderby' ordering_list
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(489, 5);
			string_literal467=(IToken)Match(input,154,Follow._154_in_orderby_clause4698); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal467_tree = (object)adaptor.Create(string_literal467, retval);
			adaptor.AddChild(root_0, string_literal467_tree);
			}
			DebugLocation(489, 17);
			PushFollow(Follow._ordering_list_in_orderby_clause4702);
			ordering_list468=ordering_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ordering_list468.Tree, ordering_list468, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_clause", 124);
			LeaveRule("orderby_clause", 124);
			LeaveRule_orderby_clause();
			if (state.backtracking > 0) { Memoize(input, 124, orderby_clause_StartIndex); }

		}
		DebugLocation(489, 30);
		} finally { DebugExitRule(GrammarFileName, "orderby_clause"); }
		return retval;

	}
	// $ANTLR end "orderby_clause"

	partial void EnterRule_ordering_list();
	partial void LeaveRule_ordering_list();

	// $ANTLR start "ordering_list"
	// cs.g:490:1: ordering_list : ordering ( ',' ordering )* ;
	[GrammarRule("ordering_list")]
	public XAstParserRuleReturnScope ordering_list()
	{
		EnterRule_ordering_list();
		EnterRule("ordering_list", 125);
		var retval = new XAstParserRuleReturnScope("ordering_list");
		
		retval.Start = (IToken)input.LT(1);
		int ordering_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal470 = default(IToken);
		XAstParserRuleReturnScope ordering469 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope ordering471 = default(XAstParserRuleReturnScope);

		object char_literal470_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "ordering_list");
		DebugLocation(490, 33);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 125)) { return retval; }

			// cs.g:490:14: ( ordering ( ',' ordering )* )
			DebugEnterAlt(1);
			// cs.g:491:5: ordering ( ',' ordering )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(491, 5);
			PushFollow(Follow._ordering_in_ordering_list4713);
			ordering469=ordering();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ordering469.Tree, ordering469, retval);
			DebugLocation(491, 16);
			// cs.g:491:16: ( ',' ordering )*
			try { DebugEnterSubRule(132);
			while (true)
			{
				int alt132=2;
				try { DebugEnterDecision(132, false);
				int LA132_0 = input.LA(1);

				if ((LA132_0==74))
				{
					alt132 = 1;
				}


				} finally { DebugExitDecision(132); }
				switch ( alt132 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:491:17: ',' ordering
					{
					DebugLocation(491, 17);
					char_literal470=(IToken)Match(input,74,Follow._74_in_ordering_list4718); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal470_tree = (object)adaptor.Create(char_literal470, retval);
					adaptor.AddChild(root_0, char_literal470_tree);
					}
					DebugLocation(491, 23);
					PushFollow(Follow._ordering_in_ordering_list4722);
					ordering471=ordering();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, ordering471.Tree, ordering471, retval);

					}
					break;

				default:
					goto loop132;
				}
			}

			loop132:
				;

			} finally { DebugExitSubRule(132); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ordering_list", 125);
			LeaveRule("ordering_list", 125);
			LeaveRule_ordering_list();
			if (state.backtracking > 0) { Memoize(input, 125, ordering_list_StartIndex); }

		}
		DebugLocation(491, 33);
		} finally { DebugExitRule(GrammarFileName, "ordering_list"); }
		return retval;

	}
	// $ANTLR end "ordering_list"

	partial void EnterRule_ordering();
	partial void LeaveRule_ordering();

	// $ANTLR start "ordering"
	// cs.g:492:1: ordering : expression ordering_direction ;
	[GrammarRule("ordering")]
	public XAstParserRuleReturnScope ordering()
	{
		EnterRule_ordering();
		EnterRule("ordering", 126);
		var retval = new XAstParserRuleReturnScope("ordering");
		
		retval.Start = (IToken)input.LT(1);
		int ordering_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope expression472 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope ordering_direction473 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "ordering");
		DebugLocation(492, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 126)) { return retval; }

			// cs.g:492:9: ( expression ordering_direction )
			DebugEnterAlt(1);
			// cs.g:493:5: expression ordering_direction
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(493, 5);
			PushFollow(Follow._expression_in_ordering4735);
			expression472=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression472.Tree, expression472, retval);
			DebugLocation(493, 19);
			PushFollow(Follow._ordering_direction_in_ordering4740);
			ordering_direction473=ordering_direction();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ordering_direction473.Tree, ordering_direction473, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ordering", 126);
			LeaveRule("ordering", 126);
			LeaveRule_ordering();
			if (state.backtracking > 0) { Memoize(input, 126, ordering_StartIndex); }

		}
		DebugLocation(494, 4);
		} finally { DebugExitRule(GrammarFileName, "ordering"); }
		return retval;

	}
	// $ANTLR end "ordering"

	partial void EnterRule_ordering_direction();
	partial void LeaveRule_ordering_direction();

	// $ANTLR start "ordering_direction"
	// cs.g:495:1: ordering_direction : ( 'ascending' | 'descending' );
	[GrammarRule("ordering_direction")]
	public XAstParserRuleReturnScope ordering_direction()
	{
		EnterRule_ordering_direction();
		EnterRule("ordering_direction", 127);
		var retval = new XAstParserRuleReturnScope("ordering_direction");
		
		retval.Start = (IToken)input.LT(1);
		int ordering_direction_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set474 = default(IToken);

		object set474_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "ordering_direction");
		DebugLocation(495, 19);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 127)) { return retval; }

			// cs.g:495:19: ( 'ascending' | 'descending' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(495, 19);

			set474=(IToken)input.LT(1);
			if (input.LA(1)==100||input.LA(1)==117)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set474, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ordering_direction", 127);
			LeaveRule("ordering_direction", 127);
			LeaveRule_ordering_direction();
			if (state.backtracking > 0) { Memoize(input, 127, ordering_direction_StartIndex); }

		}
		DebugLocation(497, 19);
		} finally { DebugExitRule(GrammarFileName, "ordering_direction"); }
		return retval;

	}
	// $ANTLR end "ordering_direction"

	partial void EnterRule_select_or_group_clause();
	partial void LeaveRule_select_or_group_clause();

	// $ANTLR start "select_or_group_clause"
	// cs.g:498:1: select_or_group_clause : ( select_clause | group_clause );
	[GrammarRule("select_or_group_clause")]
	public XAstParserRuleReturnScope select_or_group_clause()
	{
		EnterRule_select_or_group_clause();
		EnterRule("select_or_group_clause", 128);
		var retval = new XAstParserRuleReturnScope("select_or_group_clause");
		
		retval.Start = (IToken)input.LT(1);
		int select_or_group_clause_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope select_clause475 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope group_clause476 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "select_or_group_clause");
		DebugLocation(498, 19);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 128)) { return retval; }

			// cs.g:498:23: ( select_clause | group_clause )
			int alt133=2;
			try { DebugEnterDecision(133, false);
			int LA133_0 = input.LA(1);

			if ((LA133_0==171))
			{
				alt133 = 1;
			}
			else if ((LA133_0==135))
			{
				alt133 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 133, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(133); }
			switch (alt133)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:499:5: select_clause
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(499, 5);
				PushFollow(Follow._select_clause_in_select_or_group_clause4774);
				select_clause475=select_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, select_clause475.Tree, select_clause475, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:500:7: group_clause
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(500, 7);
				PushFollow(Follow._group_clause_in_select_or_group_clause4782);
				group_clause476=group_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, group_clause476.Tree, group_clause476, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_or_group_clause", 128);
			LeaveRule("select_or_group_clause", 128);
			LeaveRule_select_or_group_clause();
			if (state.backtracking > 0) { Memoize(input, 128, select_or_group_clause_StartIndex); }

		}
		DebugLocation(500, 19);
		} finally { DebugExitRule(GrammarFileName, "select_or_group_clause"); }
		return retval;

	}
	// $ANTLR end "select_or_group_clause"

	partial void EnterRule_select_clause();
	partial void LeaveRule_select_clause();

	// $ANTLR start "select_clause"
	// cs.g:501:1: select_clause : 'select' expression ;
	[GrammarRule("select_clause")]
	public XAstParserRuleReturnScope select_clause()
	{
		EnterRule_select_clause();
		EnterRule("select_clause", 129);
		var retval = new XAstParserRuleReturnScope("select_clause");
		
		retval.Start = (IToken)input.LT(1);
		int select_clause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal477 = default(IToken);
		XAstParserRuleReturnScope expression478 = default(XAstParserRuleReturnScope);

		object string_literal477_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "select_clause");
		DebugLocation(501, 26);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 129)) { return retval; }

			// cs.g:501:14: ( 'select' expression )
			DebugEnterAlt(1);
			// cs.g:502:5: 'select' expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(502, 5);
			string_literal477=(IToken)Match(input,171,Follow._171_in_select_clause4793); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal477_tree = (object)adaptor.Create(string_literal477, retval);
			adaptor.AddChild(root_0, string_literal477_tree);
			}
			DebugLocation(502, 16);
			PushFollow(Follow._expression_in_select_clause4797);
			expression478=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression478.Tree, expression478, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_clause", 129);
			LeaveRule("select_clause", 129);
			LeaveRule_select_clause();
			if (state.backtracking > 0) { Memoize(input, 129, select_clause_StartIndex); }

		}
		DebugLocation(502, 26);
		} finally { DebugExitRule(GrammarFileName, "select_clause"); }
		return retval;

	}
	// $ANTLR end "select_clause"

	partial void EnterRule_group_clause();
	partial void LeaveRule_group_clause();

	// $ANTLR start "group_clause"
	// cs.g:503:1: group_clause : 'group' expression 'by' expression ;
	[GrammarRule("group_clause")]
	public XAstParserRuleReturnScope group_clause()
	{
		EnterRule_group_clause();
		EnterRule("group_clause", 130);
		var retval = new XAstParserRuleReturnScope("group_clause");
		
		retval.Start = (IToken)input.LT(1);
		int group_clause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal479 = default(IToken);
		IToken string_literal481 = default(IToken);
		XAstParserRuleReturnScope expression480 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression482 = default(XAstParserRuleReturnScope);

		object string_literal479_tree = default(object);
		object string_literal481_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "group_clause");
		DebugLocation(503, 45);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 130)) { return retval; }

			// cs.g:503:13: ( 'group' expression 'by' expression )
			DebugEnterAlt(1);
			// cs.g:504:5: 'group' expression 'by' expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(504, 5);
			string_literal479=(IToken)Match(input,135,Follow._135_in_group_clause4808); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal479_tree = (object)adaptor.Create(string_literal479, retval);
			adaptor.AddChild(root_0, string_literal479_tree);
			}
			DebugLocation(504, 15);
			PushFollow(Follow._expression_in_group_clause4812);
			expression480=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression480.Tree, expression480, retval);
			DebugLocation(504, 28);
			string_literal481=(IToken)Match(input,105,Follow._105_in_group_clause4816); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal481_tree = (object)adaptor.Create(string_literal481, retval);
			adaptor.AddChild(root_0, string_literal481_tree);
			}
			DebugLocation(504, 35);
			PushFollow(Follow._expression_in_group_clause4820);
			expression482=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression482.Tree, expression482, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("group_clause", 130);
			LeaveRule("group_clause", 130);
			LeaveRule_group_clause();
			if (state.backtracking > 0) { Memoize(input, 130, group_clause_StartIndex); }

		}
		DebugLocation(504, 45);
		} finally { DebugExitRule(GrammarFileName, "group_clause"); }
		return retval;

	}
	// $ANTLR end "group_clause"

	partial void EnterRule_where_clause();
	partial void LeaveRule_where_clause();

	// $ANTLR start "where_clause"
	// cs.g:505:1: where_clause : 'where' boolean_expression ;
	[GrammarRule("where_clause")]
	public XAstParserRuleReturnScope where_clause()
	{
		EnterRule_where_clause();
		EnterRule("where_clause", 131);
		var retval = new XAstParserRuleReturnScope("where_clause");
		
		retval.Start = (IToken)input.LT(1);
		int where_clause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal483 = default(IToken);
		XAstParserRuleReturnScope boolean_expression484 = default(XAstParserRuleReturnScope);

		object string_literal483_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "where_clause");
		DebugLocation(505, 33);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 131)) { return retval; }

			// cs.g:505:13: ( 'where' boolean_expression )
			DebugEnterAlt(1);
			// cs.g:506:5: 'where' boolean_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(506, 5);
			string_literal483=(IToken)Match(input,194,Follow._194_in_where_clause4831); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal483_tree = (object)adaptor.Create(string_literal483, retval);
			adaptor.AddChild(root_0, string_literal483_tree);
			}
			DebugLocation(506, 15);
			PushFollow(Follow._boolean_expression_in_where_clause4835);
			boolean_expression484=boolean_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, boolean_expression484.Tree, boolean_expression484, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_clause", 131);
			LeaveRule("where_clause", 131);
			LeaveRule_where_clause();
			if (state.backtracking > 0) { Memoize(input, 131, where_clause_StartIndex); }

		}
		DebugLocation(506, 33);
		} finally { DebugExitRule(GrammarFileName, "where_clause"); }
		return retval;

	}
	// $ANTLR end "where_clause"

	partial void EnterRule_boolean_expression();
	partial void LeaveRule_boolean_expression();

	// $ANTLR start "boolean_expression"
	// cs.g:507:1: boolean_expression : expression ;
	[GrammarRule("boolean_expression")]
	public XAstParserRuleReturnScope boolean_expression()
	{
		EnterRule_boolean_expression();
		EnterRule("boolean_expression", 132);
		var retval = new XAstParserRuleReturnScope("boolean_expression");
		
		retval.Start = (IToken)input.LT(1);
		int boolean_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope expression485 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "boolean_expression");
		DebugLocation(507, 14);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 132)) { return retval; }

			// cs.g:507:19: ( expression )
			DebugEnterAlt(1);
			// cs.g:508:5: expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(508, 5);
			PushFollow(Follow._expression_in_boolean_expression4846);
			expression485=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression485.Tree, expression485, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("boolean_expression", 132);
			LeaveRule("boolean_expression", 132);
			LeaveRule_boolean_expression();
			if (state.backtracking > 0) { Memoize(input, 132, boolean_expression_StartIndex); }

		}
		DebugLocation(508, 14);
		} finally { DebugExitRule(GrammarFileName, "boolean_expression"); }
		return retval;

	}
	// $ANTLR end "boolean_expression"

	partial void EnterRule_global_attributes();
	partial void LeaveRule_global_attributes();

	// $ANTLR start "global_attributes"
	// cs.g:513:1: global_attributes : ( global_attribute )+ ;
	[GrammarRule("global_attributes")]
	public XAstParserRuleReturnScope global_attributes()
	{
		EnterRule_global_attributes();
		EnterRule("global_attributes", 133);
		var retval = new XAstParserRuleReturnScope("global_attributes");
		
		retval.Start = (IToken)input.LT(1);
		int global_attributes_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope global_attribute486 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "global_attributes");
		DebugLocation(513, 22);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 133)) { return retval; }

			// cs.g:513:18: ( ( global_attribute )+ )
			DebugEnterAlt(1);
			// cs.g:514:5: ( global_attribute )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(514, 5);
			// cs.g:514:5: ( global_attribute )+
			int cnt134=0;
			try { DebugEnterSubRule(134);
			while (true)
			{
				int alt134=2;
				try { DebugEnterDecision(134, false);
				int LA134_0 = input.LA(1);

				if ((LA134_0==91))
				{
					int LA134_2 = input.LA(2);

					if ((LA134_2==101||LA134_2==148))
					{
						int LA134_3 = input.LA(3);

						if ((LA134_3==79))
						{
							alt134 = 1;
						}


					}


				}


				} finally { DebugExitDecision(134); }
				switch (alt134)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:514:5: global_attribute
					{
					DebugLocation(514, 5);
					PushFollow(Follow._global_attribute_in_global_attributes4861);
					global_attribute486=global_attribute();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, global_attribute486.Tree, global_attribute486, retval);

					}
					break;

				default:
					if (cnt134 >= 1)
						goto loop134;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee134 = new EarlyExitException( 134, input );
					DebugRecognitionException(eee134);
					throw eee134;
				}
				cnt134++;
			}
			loop134:
				;

			} finally { DebugExitSubRule(134); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_attributes", 133);
			LeaveRule("global_attributes", 133);
			LeaveRule_global_attributes();
			if (state.backtracking > 0) { Memoize(input, 133, global_attributes_StartIndex); }

		}
		DebugLocation(514, 22);
		} finally { DebugExitRule(GrammarFileName, "global_attributes"); }
		return retval;

	}
	// $ANTLR end "global_attributes"

	partial void EnterRule_global_attribute();
	partial void LeaveRule_global_attribute();

	// $ANTLR start "global_attribute"
	// cs.g:515:1: global_attribute : '[' global_attribute_target_specifier attribute_list ( ',' )? ']' ;
	[GrammarRule("global_attribute")]
	public XAstParserRuleReturnScope global_attribute()
	{
		EnterRule_global_attribute();
		EnterRule("global_attribute", 134);
		var retval = new XAstParserRuleReturnScope("global_attribute");
		
		retval.Start = (IToken)input.LT(1);
		int global_attribute_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal487 = default(IToken);
		IToken char_literal490 = default(IToken);
		IToken char_literal491 = default(IToken);
		XAstParserRuleReturnScope global_attribute_target_specifier488 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attribute_list489 = default(XAstParserRuleReturnScope);

		object char_literal487_tree = default(object);
		object char_literal490_tree = default(object);
		object char_literal491_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "global_attribute");
		DebugLocation(515, 74);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 134)) { return retval; }

			// cs.g:515:17: ( '[' global_attribute_target_specifier attribute_list ( ',' )? ']' )
			DebugEnterAlt(1);
			// cs.g:516:5: '[' global_attribute_target_specifier attribute_list ( ',' )? ']'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(516, 5);
			char_literal487=(IToken)Match(input,91,Follow._91_in_global_attribute4874); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal487_tree = (object)adaptor.Create(char_literal487, retval);
			adaptor.AddChild(root_0, char_literal487_tree);
			}
			DebugLocation(516, 11);
			PushFollow(Follow._global_attribute_target_specifier_in_global_attribute4878);
			global_attribute_target_specifier488=global_attribute_target_specifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, global_attribute_target_specifier488.Tree, global_attribute_target_specifier488, retval);
			DebugLocation(516, 47);
			PushFollow(Follow._attribute_list_in_global_attribute4882);
			attribute_list489=attribute_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_list489.Tree, attribute_list489, retval);
			DebugLocation(516, 64);
			// cs.g:516:64: ( ',' )?
			int alt135=2;
			try { DebugEnterSubRule(135);
			try { DebugEnterDecision(135, false);
			int LA135_0 = input.LA(1);

			if ((LA135_0==74))
			{
				alt135 = 1;
			}
			} finally { DebugExitDecision(135); }
			switch (alt135)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:516:64: ','
				{
				DebugLocation(516, 64);
				char_literal490=(IToken)Match(input,74,Follow._74_in_global_attribute4886); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal490_tree = (object)adaptor.Create(char_literal490, retval);
				adaptor.AddChild(root_0, char_literal490_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(135); }

			DebugLocation(516, 71);
			char_literal491=(IToken)Match(input,92,Follow._92_in_global_attribute4891); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal491_tree = (object)adaptor.Create(char_literal491, retval);
			adaptor.AddChild(root_0, char_literal491_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_attribute", 134);
			LeaveRule("global_attribute", 134);
			LeaveRule_global_attribute();
			if (state.backtracking > 0) { Memoize(input, 134, global_attribute_StartIndex); }

		}
		DebugLocation(516, 74);
		} finally { DebugExitRule(GrammarFileName, "global_attribute"); }
		return retval;

	}
	// $ANTLR end "global_attribute"

	partial void EnterRule_global_attribute_target_specifier();
	partial void LeaveRule_global_attribute_target_specifier();

	// $ANTLR start "global_attribute_target_specifier"
	// cs.g:517:1: global_attribute_target_specifier : global_attribute_target ':' ;
	[GrammarRule("global_attribute_target_specifier")]
	public XAstParserRuleReturnScope global_attribute_target_specifier()
	{
		EnterRule_global_attribute_target_specifier();
		EnterRule("global_attribute_target_specifier", 135);
		var retval = new XAstParserRuleReturnScope("global_attribute_target_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int global_attribute_target_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal493 = default(IToken);
		XAstParserRuleReturnScope global_attribute_target492 = default(XAstParserRuleReturnScope);

		object char_literal493_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "global_attribute_target_specifier");
		DebugLocation(517, 34);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 135)) { return retval; }

			// cs.g:517:34: ( global_attribute_target ':' )
			DebugEnterAlt(1);
			// cs.g:518:5: global_attribute_target ':'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(518, 5);
			PushFollow(Follow._global_attribute_target_in_global_attribute_target_specifier4903);
			global_attribute_target492=global_attribute_target();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, global_attribute_target492.Tree, global_attribute_target492, retval);
			DebugLocation(518, 31);
			char_literal493=(IToken)Match(input,79,Follow._79_in_global_attribute_target_specifier4907); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal493_tree = (object)adaptor.Create(char_literal493, retval);
			adaptor.AddChild(root_0, char_literal493_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_attribute_target_specifier", 135);
			LeaveRule("global_attribute_target_specifier", 135);
			LeaveRule_global_attribute_target_specifier();
			if (state.backtracking > 0) { Memoize(input, 135, global_attribute_target_specifier_StartIndex); }

		}
		DebugLocation(518, 34);
		} finally { DebugExitRule(GrammarFileName, "global_attribute_target_specifier"); }
		return retval;

	}
	// $ANTLR end "global_attribute_target_specifier"

	partial void EnterRule_global_attribute_target();
	partial void LeaveRule_global_attribute_target();

	// $ANTLR start "global_attribute_target"
	// cs.g:519:1: global_attribute_target : ( 'assembly' | 'module' );
	[GrammarRule("global_attribute_target")]
	public XAstParserRuleReturnScope global_attribute_target()
	{
		EnterRule_global_attribute_target();
		EnterRule("global_attribute_target", 136);
		var retval = new XAstParserRuleReturnScope("global_attribute_target");
		
		retval.Start = (IToken)input.LT(1);
		int global_attribute_target_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set494 = default(IToken);

		object set494_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "global_attribute_target");
		DebugLocation(519, 26);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 136)) { return retval; }

			// cs.g:519:24: ( 'assembly' | 'module' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(519, 24);

			set494=(IToken)input.LT(1);
			if (input.LA(1)==101||input.LA(1)==148)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set494, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_attribute_target", 136);
			LeaveRule("global_attribute_target", 136);
			LeaveRule_global_attribute_target();
			if (state.backtracking > 0) { Memoize(input, 136, global_attribute_target_StartIndex); }

		}
		DebugLocation(520, 26);
		} finally { DebugExitRule(GrammarFileName, "global_attribute_target"); }
		return retval;

	}
	// $ANTLR end "global_attribute_target"

	partial void EnterRule_attributes();
	partial void LeaveRule_attributes();

	// $ANTLR start "attributes"
	// cs.g:521:1: attributes : attribute_sections ;
	[GrammarRule("attributes")]
	public XAstParserRuleReturnScope attributes()
	{
		EnterRule_attributes();
		EnterRule("attributes", 137);
		var retval = new XAstParserRuleReturnScope("attributes");
		
		retval.Start = (IToken)input.LT(1);
		int attributes_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope attribute_sections495 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "attributes");
		DebugLocation(521, 23);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 137)) { return retval; }

			// cs.g:521:11: ( attribute_sections )
			DebugEnterAlt(1);
			// cs.g:522:5: attribute_sections
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(522, 5);
			PushFollow(Follow._attribute_sections_in_attributes4935);
			attribute_sections495=attribute_sections();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_sections495.Tree, attribute_sections495, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attributes", 137);
			LeaveRule("attributes", 137);
			LeaveRule_attributes();
			if (state.backtracking > 0) { Memoize(input, 137, attributes_StartIndex); }

		}
		DebugLocation(522, 23);
		} finally { DebugExitRule(GrammarFileName, "attributes"); }
		return retval;

	}
	// $ANTLR end "attributes"

	partial void EnterRule_attribute_sections();
	partial void LeaveRule_attribute_sections();

	// $ANTLR start "attribute_sections"
	// cs.g:523:1: attribute_sections : ( attribute_section )+ ;
	[GrammarRule("attribute_sections")]
	public XAstParserRuleReturnScope attribute_sections()
	{
		EnterRule_attribute_sections();
		EnterRule("attribute_sections", 138);
		var retval = new XAstParserRuleReturnScope("attribute_sections");
		
		retval.Start = (IToken)input.LT(1);
		int attribute_sections_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope attribute_section496 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "attribute_sections");
		DebugLocation(523, 23);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 138)) { return retval; }

			// cs.g:523:19: ( ( attribute_section )+ )
			DebugEnterAlt(1);
			// cs.g:524:5: ( attribute_section )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(524, 5);
			// cs.g:524:5: ( attribute_section )+
			int cnt136=0;
			try { DebugEnterSubRule(136);
			while (true)
			{
				int alt136=2;
				try { DebugEnterDecision(136, false);
				int LA136_0 = input.LA(1);

				if ((LA136_0==91))
				{
					alt136 = 1;
				}


				} finally { DebugExitDecision(136); }
				switch (alt136)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:524:5: attribute_section
					{
					DebugLocation(524, 5);
					PushFollow(Follow._attribute_section_in_attribute_sections4947);
					attribute_section496=attribute_section();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_section496.Tree, attribute_section496, retval);

					}
					break;

				default:
					if (cnt136 >= 1)
						goto loop136;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee136 = new EarlyExitException( 136, input );
					DebugRecognitionException(eee136);
					throw eee136;
				}
				cnt136++;
			}
			loop136:
				;

			} finally { DebugExitSubRule(136); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_sections", 138);
			LeaveRule("attribute_sections", 138);
			LeaveRule_attribute_sections();
			if (state.backtracking > 0) { Memoize(input, 138, attribute_sections_StartIndex); }

		}
		DebugLocation(524, 23);
		} finally { DebugExitRule(GrammarFileName, "attribute_sections"); }
		return retval;

	}
	// $ANTLR end "attribute_sections"

	partial void EnterRule_attribute_section();
	partial void LeaveRule_attribute_section();

	// $ANTLR start "attribute_section"
	// cs.g:525:1: attribute_section : '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']' ;
	[GrammarRule("attribute_section")]
	public XAstParserRuleReturnScope attribute_section()
	{
		EnterRule_attribute_section();
		EnterRule("attribute_section", 139);
		var retval = new XAstParserRuleReturnScope("attribute_section");
		
		retval.Start = (IToken)input.LT(1);
		int attribute_section_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal497 = default(IToken);
		IToken char_literal500 = default(IToken);
		IToken char_literal501 = default(IToken);
		XAstParserRuleReturnScope attribute_target_specifier498 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attribute_list499 = default(XAstParserRuleReturnScope);

		object char_literal497_tree = default(object);
		object char_literal500_tree = default(object);
		object char_literal501_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "attribute_section");
		DebugLocation(525, 68);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 139)) { return retval; }

			// cs.g:525:18: ( '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']' )
			DebugEnterAlt(1);
			// cs.g:526:5: '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(526, 5);
			char_literal497=(IToken)Match(input,91,Follow._91_in_attribute_section4960); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal497_tree = (object)adaptor.Create(char_literal497, retval);
			adaptor.AddChild(root_0, char_literal497_tree);
			}
			DebugLocation(526, 11);
			// cs.g:526:11: ( attribute_target_specifier )?
			int alt137=2;
			try { DebugEnterSubRule(137);
			try { DebugEnterDecision(137, false);
			int LA137_0 = input.LA(1);

			if ((LA137_0==126||LA137_0==147||LA137_0==157||LA137_0==162||LA137_0==183))
			{
				int LA137_1 = input.LA(2);

				if ((LA137_1==79))
				{
					alt137 = 1;
				}
			}
			else if ((LA137_0==123||LA137_0==168))
			{
				alt137 = 1;
			}
			} finally { DebugExitDecision(137); }
			switch (alt137)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:526:11: attribute_target_specifier
				{
				DebugLocation(526, 11);
				PushFollow(Follow._attribute_target_specifier_in_attribute_section4964);
				attribute_target_specifier498=attribute_target_specifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_target_specifier498.Tree, attribute_target_specifier498, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(137); }

			DebugLocation(526, 41);
			PushFollow(Follow._attribute_list_in_attribute_section4969);
			attribute_list499=attribute_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_list499.Tree, attribute_list499, retval);
			DebugLocation(526, 58);
			// cs.g:526:58: ( ',' )?
			int alt138=2;
			try { DebugEnterSubRule(138);
			try { DebugEnterDecision(138, false);
			int LA138_0 = input.LA(1);

			if ((LA138_0==74))
			{
				alt138 = 1;
			}
			} finally { DebugExitDecision(138); }
			switch (alt138)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:526:58: ','
				{
				DebugLocation(526, 58);
				char_literal500=(IToken)Match(input,74,Follow._74_in_attribute_section4973); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal500_tree = (object)adaptor.Create(char_literal500, retval);
				adaptor.AddChild(root_0, char_literal500_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(138); }

			DebugLocation(526, 65);
			char_literal501=(IToken)Match(input,92,Follow._92_in_attribute_section4978); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal501_tree = (object)adaptor.Create(char_literal501, retval);
			adaptor.AddChild(root_0, char_literal501_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_section", 139);
			LeaveRule("attribute_section", 139);
			LeaveRule_attribute_section();
			if (state.backtracking > 0) { Memoize(input, 139, attribute_section_StartIndex); }

		}
		DebugLocation(526, 68);
		} finally { DebugExitRule(GrammarFileName, "attribute_section"); }
		return retval;

	}
	// $ANTLR end "attribute_section"

	partial void EnterRule_attribute_target_specifier();
	partial void LeaveRule_attribute_target_specifier();

	// $ANTLR start "attribute_target_specifier"
	// cs.g:527:1: attribute_target_specifier : attribute_target ':' ;
	[GrammarRule("attribute_target_specifier")]
	public XAstParserRuleReturnScope attribute_target_specifier()
	{
		EnterRule_attribute_target_specifier();
		EnterRule("attribute_target_specifier", 140);
		var retval = new XAstParserRuleReturnScope("attribute_target_specifier");
		
		retval.Start = (IToken)input.LT(1);
		int attribute_target_specifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal503 = default(IToken);
		XAstParserRuleReturnScope attribute_target502 = default(XAstParserRuleReturnScope);

		object char_literal503_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "attribute_target_specifier");
		DebugLocation(527, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 140)) { return retval; }

			// cs.g:527:27: ( attribute_target ':' )
			DebugEnterAlt(1);
			// cs.g:528:5: attribute_target ':'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(528, 5);
			PushFollow(Follow._attribute_target_in_attribute_target_specifier4990);
			attribute_target502=attribute_target();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_target502.Tree, attribute_target502, retval);
			DebugLocation(528, 24);
			char_literal503=(IToken)Match(input,79,Follow._79_in_attribute_target_specifier4994); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal503_tree = (object)adaptor.Create(char_literal503, retval);
			adaptor.AddChild(root_0, char_literal503_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_target_specifier", 140);
			LeaveRule("attribute_target_specifier", 140);
			LeaveRule_attribute_target_specifier();
			if (state.backtracking > 0) { Memoize(input, 140, attribute_target_specifier_StartIndex); }

		}
		DebugLocation(528, 27);
		} finally { DebugExitRule(GrammarFileName, "attribute_target_specifier"); }
		return retval;

	}
	// $ANTLR end "attribute_target_specifier"

	partial void EnterRule_attribute_target();
	partial void LeaveRule_attribute_target();

	// $ANTLR start "attribute_target"
	// cs.g:529:1: attribute_target : ( 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' );
	[GrammarRule("attribute_target")]
	public XAstParserRuleReturnScope attribute_target()
	{
		EnterRule_attribute_target();
		EnterRule("attribute_target", 141);
		var retval = new XAstParserRuleReturnScope("attribute_target");
		
		retval.Start = (IToken)input.LT(1);
		int attribute_target_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set504 = default(IToken);

		object set504_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "attribute_target");
		DebugLocation(529, 76);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 141)) { return retval; }

			// cs.g:529:17: ( 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(529, 17);

			set504=(IToken)input.LT(1);
			if (input.LA(1)==123||input.LA(1)==126||input.LA(1)==147||input.LA(1)==157||input.LA(1)==162||input.LA(1)==168||input.LA(1)==183)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set504, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_target", 141);
			LeaveRule("attribute_target", 141);
			LeaveRule_attribute_target();
			if (state.backtracking > 0) { Memoize(input, 141, attribute_target_StartIndex); }

		}
		DebugLocation(530, 76);
		} finally { DebugExitRule(GrammarFileName, "attribute_target"); }
		return retval;

	}
	// $ANTLR end "attribute_target"

	partial void EnterRule_attribute_list();
	partial void LeaveRule_attribute_list();

	// $ANTLR start "attribute_list"
	// cs.g:531:1: attribute_list : attribute ( ',' attribute )* ;
	[GrammarRule("attribute_list")]
	public XAstParserRuleReturnScope attribute_list()
	{
		EnterRule_attribute_list();
		EnterRule("attribute_list", 142);
		var retval = new XAstParserRuleReturnScope("attribute_list");
		
		retval.Start = (IToken)input.LT(1);
		int attribute_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal506 = default(IToken);
		XAstParserRuleReturnScope attribute505 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attribute507 = default(XAstParserRuleReturnScope);

		object char_literal506_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "attribute_list");
		DebugLocation(531, 31);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 142)) { return retval; }

			// cs.g:531:15: ( attribute ( ',' attribute )* )
			DebugEnterAlt(1);
			// cs.g:532:5: attribute ( ',' attribute )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(532, 5);
			PushFollow(Follow._attribute_in_attribute_list5042);
			attribute505=attribute();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, attribute505.Tree, attribute505, retval);
			DebugLocation(532, 15);
			// cs.g:532:15: ( ',' attribute )*
			try { DebugEnterSubRule(139);
			while (true)
			{
				int alt139=2;
				try { DebugEnterDecision(139, false);
				int LA139_0 = input.LA(1);

				if ((LA139_0==74))
				{
					int LA139_1 = input.LA(2);

					if ((LA139_1==IDENTIFIER||LA139_1==95||(LA139_1>=97 && LA139_1<=98)||(LA139_1>=100 && LA139_1<=101)||LA139_1==105||LA139_1==117||LA139_1==120||LA139_1==122||LA139_1==126||LA139_1==132||LA139_1==135||LA139_1==141||(LA139_1>=143 && LA139_1<=144)||(LA139_1>=147 && LA139_1<=148)||LA139_1==152||LA139_1==154||LA139_1==157||LA139_1==160||LA139_1==162||LA139_1==167||(LA139_1>=171 && LA139_1<=172)||LA139_1==183||LA139_1==190||LA139_1==194||LA139_1==196))
					{
						alt139 = 1;
					}


				}


				} finally { DebugExitDecision(139); }
				switch ( alt139 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:532:16: ',' attribute
					{
					DebugLocation(532, 16);
					char_literal506=(IToken)Match(input,74,Follow._74_in_attribute_list5045); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal506_tree = (object)adaptor.Create(char_literal506, retval);
					adaptor.AddChild(root_0, char_literal506_tree);
					}
					DebugLocation(532, 20);
					PushFollow(Follow._attribute_in_attribute_list5047);
					attribute507=attribute();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attribute507.Tree, attribute507, retval);

					}
					break;

				default:
					goto loop139;
				}
			}

			loop139:
				;

			} finally { DebugExitSubRule(139); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_list", 142);
			LeaveRule("attribute_list", 142);
			LeaveRule_attribute_list();
			if (state.backtracking > 0) { Memoize(input, 142, attribute_list_StartIndex); }

		}
		DebugLocation(532, 31);
		} finally { DebugExitRule(GrammarFileName, "attribute_list"); }
		return retval;

	}
	// $ANTLR end "attribute_list"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// cs.g:533:1: attribute : type_name ( attribute_arguments )? ;
	[GrammarRule("attribute")]
	public XAstParserRuleReturnScope attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 143);
		var retval = new XAstParserRuleReturnScope("attribute");
		
		retval.Start = (IToken)input.LT(1);
		int attribute_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope type_name508 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attribute_arguments509 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(533, 37);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 143)) { return retval; }

			// cs.g:533:10: ( type_name ( attribute_arguments )? )
			DebugEnterAlt(1);
			// cs.g:534:5: type_name ( attribute_arguments )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(534, 5);
			PushFollow(Follow._type_name_in_attribute5062);
			type_name508=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name508.Tree, type_name508, retval);
			DebugLocation(534, 17);
			// cs.g:534:17: ( attribute_arguments )?
			int alt140=2;
			try { DebugEnterSubRule(140);
			try { DebugEnterDecision(140, false);
			int LA140_0 = input.LA(1);

			if ((LA140_0==68))
			{
				alt140 = 1;
			}
			} finally { DebugExitDecision(140); }
			switch (alt140)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:534:17: attribute_arguments
				{
				DebugLocation(534, 17);
				PushFollow(Follow._attribute_arguments_in_attribute5066);
				attribute_arguments509=attribute_arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_arguments509.Tree, attribute_arguments509, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(140); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 143);
			LeaveRule("attribute", 143);
			LeaveRule_attribute();
			if (state.backtracking > 0) { Memoize(input, 143, attribute_StartIndex); }

		}
		DebugLocation(534, 37);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_attribute_arguments();
	partial void LeaveRule_attribute_arguments();

	// $ANTLR start "attribute_arguments"
	// cs.g:536:1: attribute_arguments : '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' ) ;
	[GrammarRule("attribute_arguments")]
	public XAstParserRuleReturnScope attribute_arguments()
	{
		EnterRule_attribute_arguments();
		EnterRule("attribute_arguments", 144);
		var retval = new XAstParserRuleReturnScope("attribute_arguments");
		
		retval.Start = (IToken)input.LT(1);
		int attribute_arguments_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal510 = default(IToken);
		IToken char_literal511 = default(IToken);
		IToken char_literal514 = default(IToken);
		IToken char_literal516 = default(IToken);
		XAstParserRuleReturnScope positional_argument512 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope named_argument513 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope positional_argument515 = default(XAstParserRuleReturnScope);

		object char_literal510_tree = default(object);
		object char_literal511_tree = default(object);
		object char_literal514_tree = default(object);
		object char_literal516_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "attribute_arguments");
		DebugLocation(536, 14);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 144)) { return retval; }

			// cs.g:536:20: ( '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' ) )
			DebugEnterAlt(1);
			// cs.g:537:5: '(' ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(537, 5);
			char_literal510=(IToken)Match(input,68,Follow._68_in_attribute_arguments5080); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal510_tree = (object)adaptor.Create(char_literal510, retval);
			adaptor.AddChild(root_0, char_literal510_tree);
			}
			DebugLocation(537, 11);
			// cs.g:537:11: ( ')' | ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')' )
			int alt142=2;
			try { DebugEnterSubRule(142);
			try { DebugEnterDecision(142, false);
			int LA142_0 = input.LA(1);

			if ((LA142_0==RPAREN))
			{
				alt142 = 1;
			}
			else if ((LA142_0==Character_literal||LA142_0==FALSE||(LA142_0>=Hex_number && LA142_0<=IDENTIFIER)||(LA142_0>=MINUS && LA142_0<=NUMBER)||LA142_0==Real_literal||LA142_0==STRINGLITERAL||LA142_0==TRUE||LA142_0==Verbatim_string_literal||LA142_0==61||LA142_0==66||(LA142_0>=68 && LA142_0<=69)||(LA142_0>=71 && LA142_0<=72)||LA142_0==75||LA142_0==95||(LA142_0>=97 && LA142_0<=98)||(LA142_0>=100 && LA142_0<=103)||(LA142_0>=105 && LA142_0<=106)||(LA142_0>=109 && LA142_0<=110)||(LA142_0>=114 && LA142_0<=117)||(LA142_0>=119 && LA142_0<=120)||LA142_0==122||LA142_0==126||LA142_0==129||LA142_0==132||LA142_0==135||LA142_0==138||LA142_0==141||(LA142_0>=143 && LA142_0<=144)||(LA142_0>=146 && LA142_0<=148)||(LA142_0>=150 && LA142_0<=152)||LA142_0==154||LA142_0==157||LA142_0==160||LA142_0==162||LA142_0==167||LA142_0==169||(LA142_0>=171 && LA142_0<=174)||LA142_0==177||LA142_0==180||(LA142_0>=183 && LA142_0<=187)||(LA142_0>=189 && LA142_0<=190)||LA142_0==194||LA142_0==196||LA142_0==202))
			{
				alt142 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 142, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(142); }
			switch (alt142)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:537:12: ')'
				{
				DebugLocation(537, 12);
				char_literal511=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_attribute_arguments5085), "RPAREN"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal511_tree = (object)adaptor.Create(char_literal511, retval);
				adaptor.AddChild(root_0, char_literal511_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:538:14: ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* ) ')'
				{
				DebugLocation(538, 14);
				// cs.g:538:14: ( positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )* )
				DebugEnterAlt(1);
				// cs.g:538:15: positional_argument ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )*
				{
				DebugLocation(538, 15);
				PushFollow(Follow._positional_argument_in_attribute_arguments5111);
				positional_argument512=positional_argument();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, positional_argument512.Tree, positional_argument512, retval);
				DebugLocation(538, 37);
				// cs.g:538:37: ( ( ',' identifier '=' )=> named_argument | ',' positional_argument )*
				try { DebugEnterSubRule(141);
				while (true)
				{
					int alt141=3;
					try { DebugEnterDecision(141, false);
					int LA141_0 = input.LA(1);

					if ((LA141_0==IDENTIFIER||LA141_0==95||(LA141_0>=97 && LA141_0<=98)||(LA141_0>=100 && LA141_0<=101)||LA141_0==105||LA141_0==117||LA141_0==120||LA141_0==122||LA141_0==126||LA141_0==132||LA141_0==135||LA141_0==141||(LA141_0>=143 && LA141_0<=144)||(LA141_0>=147 && LA141_0<=148)||LA141_0==152||LA141_0==154||LA141_0==157||LA141_0==160||LA141_0==162||LA141_0==167||(LA141_0>=171 && LA141_0<=172)||LA141_0==183||LA141_0==190||LA141_0==194||LA141_0==196) && (EvaluatePredicate(synpred24_cs_fragment)))
					{
						alt141 = 1;
					}
					else if ((LA141_0==74))
					{
						alt141 = 2;
					}


					} finally { DebugExitDecision(141); }
					switch ( alt141 )
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:538:38: ( ',' identifier '=' )=> named_argument
						{
						DebugLocation(538, 66);
						PushFollow(Follow._named_argument_in_attribute_arguments5130);
						named_argument513=named_argument();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, named_argument513.Tree, named_argument513, retval);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// cs.g:539:39: ',' positional_argument
						{
						DebugLocation(539, 39);
						char_literal514=(IToken)Match(input,74,Follow._74_in_attribute_arguments5170); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal514_tree = (object)adaptor.Create(char_literal514, retval);
						adaptor.AddChild(root_0, char_literal514_tree);
						}
						DebugLocation(539, 43);
						PushFollow(Follow._positional_argument_in_attribute_arguments5172);
						positional_argument515=positional_argument();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, positional_argument515.Tree, positional_argument515, retval);

						}
						break;

					default:
						goto loop141;
					}
				}

				loop141:
					;

				} finally { DebugExitSubRule(141); }


				}

				DebugLocation(540, 17);
				char_literal516=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_attribute_arguments5192), "RPAREN"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal516_tree = (object)adaptor.Create(char_literal516, retval);
				adaptor.AddChild(root_0, char_literal516_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(142); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_arguments", 144);
			LeaveRule("attribute_arguments", 144);
			LeaveRule_attribute_arguments();
			if (state.backtracking > 0) { Memoize(input, 144, attribute_arguments_StartIndex); }

		}
		DebugLocation(541, 14);
		} finally { DebugExitRule(GrammarFileName, "attribute_arguments"); }
		return retval;

	}
	// $ANTLR end "attribute_arguments"

	partial void EnterRule_positional_argument_list();
	partial void LeaveRule_positional_argument_list();

	// $ANTLR start "positional_argument_list"
	// cs.g:542:1: positional_argument_list : positional_argument ( ',' positional_argument )* ;
	[GrammarRule("positional_argument_list")]
	public XAstParserRuleReturnScope positional_argument_list()
	{
		EnterRule_positional_argument_list();
		EnterRule("positional_argument_list", 145);
		var retval = new XAstParserRuleReturnScope("positional_argument_list");
		
		retval.Start = (IToken)input.LT(1);
		int positional_argument_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal518 = default(IToken);
		XAstParserRuleReturnScope positional_argument517 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope positional_argument519 = default(XAstParserRuleReturnScope);

		object char_literal518_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "positional_argument_list");
		DebugLocation(542, 51);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 145)) { return retval; }

			// cs.g:542:25: ( positional_argument ( ',' positional_argument )* )
			DebugEnterAlt(1);
			// cs.g:543:5: positional_argument ( ',' positional_argument )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(543, 5);
			PushFollow(Follow._positional_argument_in_positional_argument_list5218);
			positional_argument517=positional_argument();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, positional_argument517.Tree, positional_argument517, retval);
			DebugLocation(543, 25);
			// cs.g:543:25: ( ',' positional_argument )*
			try { DebugEnterSubRule(143);
			while (true)
			{
				int alt143=2;
				try { DebugEnterDecision(143, false);
				int LA143_0 = input.LA(1);

				if ((LA143_0==74))
				{
					alt143 = 1;
				}


				} finally { DebugExitDecision(143); }
				switch ( alt143 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:543:26: ',' positional_argument
					{
					DebugLocation(543, 26);
					char_literal518=(IToken)Match(input,74,Follow._74_in_positional_argument_list5221); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal518_tree = (object)adaptor.Create(char_literal518, retval);
					adaptor.AddChild(root_0, char_literal518_tree);
					}
					DebugLocation(543, 30);
					PushFollow(Follow._positional_argument_in_positional_argument_list5223);
					positional_argument519=positional_argument();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, positional_argument519.Tree, positional_argument519, retval);

					}
					break;

				default:
					goto loop143;
				}
			}

			loop143:
				;

			} finally { DebugExitSubRule(143); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("positional_argument_list", 145);
			LeaveRule("positional_argument_list", 145);
			LeaveRule_positional_argument_list();
			if (state.backtracking > 0) { Memoize(input, 145, positional_argument_list_StartIndex); }

		}
		DebugLocation(543, 51);
		} finally { DebugExitRule(GrammarFileName, "positional_argument_list"); }
		return retval;

	}
	// $ANTLR end "positional_argument_list"

	partial void EnterRule_positional_argument();
	partial void LeaveRule_positional_argument();

	// $ANTLR start "positional_argument"
	// cs.g:544:1: positional_argument : attribute_argument_expression ;
	[GrammarRule("positional_argument")]
	public XAstParserRuleReturnScope positional_argument()
	{
		EnterRule_positional_argument();
		EnterRule("positional_argument", 146);
		var retval = new XAstParserRuleReturnScope("positional_argument");
		
		retval.Start = (IToken)input.LT(1);
		int positional_argument_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope attribute_argument_expression520 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "positional_argument");
		DebugLocation(544, 34);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 146)) { return retval; }

			// cs.g:544:20: ( attribute_argument_expression )
			DebugEnterAlt(1);
			// cs.g:545:5: attribute_argument_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(545, 5);
			PushFollow(Follow._attribute_argument_expression_in_positional_argument5237);
			attribute_argument_expression520=attribute_argument_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_argument_expression520.Tree, attribute_argument_expression520, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("positional_argument", 146);
			LeaveRule("positional_argument", 146);
			LeaveRule_positional_argument();
			if (state.backtracking > 0) { Memoize(input, 146, positional_argument_StartIndex); }

		}
		DebugLocation(545, 34);
		} finally { DebugExitRule(GrammarFileName, "positional_argument"); }
		return retval;

	}
	// $ANTLR end "positional_argument"

	partial void EnterRule_named_argument_list();
	partial void LeaveRule_named_argument_list();

	// $ANTLR start "named_argument_list"
	// cs.g:546:1: named_argument_list : named_argument ( ',' named_argument )* ;
	[GrammarRule("named_argument_list")]
	public XAstParserRuleReturnScope named_argument_list()
	{
		EnterRule_named_argument_list();
		EnterRule("named_argument_list", 147);
		var retval = new XAstParserRuleReturnScope("named_argument_list");
		
		retval.Start = (IToken)input.LT(1);
		int named_argument_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal522 = default(IToken);
		XAstParserRuleReturnScope named_argument521 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope named_argument523 = default(XAstParserRuleReturnScope);

		object char_literal522_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "named_argument_list");
		DebugLocation(546, 41);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 147)) { return retval; }

			// cs.g:546:20: ( named_argument ( ',' named_argument )* )
			DebugEnterAlt(1);
			// cs.g:547:5: named_argument ( ',' named_argument )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(547, 5);
			PushFollow(Follow._named_argument_in_named_argument_list5249);
			named_argument521=named_argument();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, named_argument521.Tree, named_argument521, retval);
			DebugLocation(547, 20);
			// cs.g:547:20: ( ',' named_argument )*
			try { DebugEnterSubRule(144);
			while (true)
			{
				int alt144=2;
				try { DebugEnterDecision(144, false);
				int LA144_0 = input.LA(1);

				if ((LA144_0==74))
				{
					alt144 = 1;
				}


				} finally { DebugExitDecision(144); }
				switch ( alt144 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:547:21: ',' named_argument
					{
					DebugLocation(547, 21);
					char_literal522=(IToken)Match(input,74,Follow._74_in_named_argument_list5252); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal522_tree = (object)adaptor.Create(char_literal522, retval);
					adaptor.AddChild(root_0, char_literal522_tree);
					}
					DebugLocation(547, 25);
					PushFollow(Follow._named_argument_in_named_argument_list5254);
					named_argument523=named_argument();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, named_argument523.Tree, named_argument523, retval);

					}
					break;

				default:
					goto loop144;
				}
			}

			loop144:
				;

			} finally { DebugExitSubRule(144); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("named_argument_list", 147);
			LeaveRule("named_argument_list", 147);
			LeaveRule_named_argument_list();
			if (state.backtracking > 0) { Memoize(input, 147, named_argument_list_StartIndex); }

		}
		DebugLocation(547, 41);
		} finally { DebugExitRule(GrammarFileName, "named_argument_list"); }
		return retval;

	}
	// $ANTLR end "named_argument_list"

	partial void EnterRule_named_argument();
	partial void LeaveRule_named_argument();

	// $ANTLR start "named_argument"
	// cs.g:548:1: named_argument : identifier '=' attribute_argument_expression ;
	[GrammarRule("named_argument")]
	public XAstParserRuleReturnScope named_argument()
	{
		EnterRule_named_argument();
		EnterRule("named_argument", 148);
		var retval = new XAstParserRuleReturnScope("named_argument");
		
		retval.Start = (IToken)input.LT(1);
		int named_argument_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal525 = default(IToken);
		XAstParserRuleReturnScope identifier524 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attribute_argument_expression526 = default(XAstParserRuleReturnScope);

		object char_literal525_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "named_argument");
		DebugLocation(548, 53);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 148)) { return retval; }

			// cs.g:548:15: ( identifier '=' attribute_argument_expression )
			DebugEnterAlt(1);
			// cs.g:549:5: identifier '=' attribute_argument_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(549, 5);
			PushFollow(Follow._identifier_in_named_argument5268);
			identifier524=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier524.Tree, identifier524, retval);
			DebugLocation(549, 18);
			char_literal525=(IToken)Match(input,85,Follow._85_in_named_argument5272); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal525_tree = (object)adaptor.Create(char_literal525, retval);
			adaptor.AddChild(root_0, char_literal525_tree);
			}
			DebugLocation(549, 24);
			PushFollow(Follow._attribute_argument_expression_in_named_argument5276);
			attribute_argument_expression526=attribute_argument_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, attribute_argument_expression526.Tree, attribute_argument_expression526, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("named_argument", 148);
			LeaveRule("named_argument", 148);
			LeaveRule_named_argument();
			if (state.backtracking > 0) { Memoize(input, 148, named_argument_StartIndex); }

		}
		DebugLocation(549, 53);
		} finally { DebugExitRule(GrammarFileName, "named_argument"); }
		return retval;

	}
	// $ANTLR end "named_argument"

	partial void EnterRule_attribute_argument_expression();
	partial void LeaveRule_attribute_argument_expression();

	// $ANTLR start "attribute_argument_expression"
	// cs.g:550:1: attribute_argument_expression : expression ;
	[GrammarRule("attribute_argument_expression")]
	public XAstParserRuleReturnScope attribute_argument_expression()
	{
		EnterRule_attribute_argument_expression();
		EnterRule("attribute_argument_expression", 149);
		var retval = new XAstParserRuleReturnScope("attribute_argument_expression");
		
		retval.Start = (IToken)input.LT(1);
		int attribute_argument_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope expression527 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "attribute_argument_expression");
		DebugLocation(550, 15);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 149)) { return retval; }

			// cs.g:550:30: ( expression )
			DebugEnterAlt(1);
			// cs.g:551:5: expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(551, 5);
			PushFollow(Follow._expression_in_attribute_argument_expression5288);
			expression527=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression527.Tree, expression527, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_argument_expression", 149);
			LeaveRule("attribute_argument_expression", 149);
			LeaveRule_attribute_argument_expression();
			if (state.backtracking > 0) { Memoize(input, 149, attribute_argument_expression_StartIndex); }

		}
		DebugLocation(551, 15);
		} finally { DebugExitRule(GrammarFileName, "attribute_argument_expression"); }
		return retval;

	}
	// $ANTLR end "attribute_argument_expression"

	partial void EnterRule_class_declaration();
	partial void LeaveRule_class_declaration();

	// $ANTLR start "class_declaration"
	// cs.g:557:1: class_declaration : 'class' type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? ;
	[GrammarRule("class_declaration")]
	public XAstParserRuleReturnScope class_declaration()
	{
		EnterRule_class_declaration();
		EnterRule("class_declaration", 150);
		var retval = new XAstParserRuleReturnScope("class_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int class_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal528 = default(IToken);
		IToken char_literal533 = default(IToken);
		XAstParserRuleReturnScope type_or_generic529 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope class_base530 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_parameter_constraints_clauses531 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope class_body532 = default(XAstParserRuleReturnScope);

		object string_literal528_tree = default(object);
		object char_literal533_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "class_declaration");
		DebugLocation(557, 101);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 150)) { return retval; }

			// cs.g:557:18: ( 'class' type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? )
			DebugEnterAlt(1);
			// cs.g:558:5: 'class' type_or_generic ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(558, 5);
			string_literal528=(IToken)Match(input,111,Follow._111_in_class_declaration5304); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal528_tree = (object)adaptor.Create(string_literal528, retval);
			adaptor.AddChild(root_0, string_literal528_tree);
			}
			DebugLocation(558, 14);
			PushFollow(Follow._type_or_generic_in_class_declaration5307);
			type_or_generic529=type_or_generic();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_or_generic529.Tree, type_or_generic529, retval);
			DebugLocation(558, 32);
			// cs.g:558:32: ( class_base )?
			int alt145=2;
			try { DebugEnterSubRule(145);
			try { DebugEnterDecision(145, false);
			int LA145_0 = input.LA(1);

			if ((LA145_0==79))
			{
				alt145 = 1;
			}
			} finally { DebugExitDecision(145); }
			switch (alt145)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:558:32: class_base
				{
				DebugLocation(558, 32);
				PushFollow(Follow._class_base_in_class_declaration5311);
				class_base530=class_base();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_base530.Tree, class_base530, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(145); }

			DebugLocation(558, 46);
			// cs.g:558:46: ( type_parameter_constraints_clauses )?
			int alt146=2;
			try { DebugEnterSubRule(146);
			try { DebugEnterDecision(146, false);
			int LA146_0 = input.LA(1);

			if ((LA146_0==194))
			{
				alt146 = 1;
			}
			} finally { DebugExitDecision(146); }
			switch (alt146)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:558:46: type_parameter_constraints_clauses
				{
				DebugLocation(558, 46);
				PushFollow(Follow._type_parameter_constraints_clauses_in_class_declaration5316);
				type_parameter_constraints_clauses531=type_parameter_constraints_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraints_clauses531.Tree, type_parameter_constraints_clauses531, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(146); }

			DebugLocation(558, 84);
			PushFollow(Follow._class_body_in_class_declaration5321);
			class_body532=class_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, class_body532.Tree, class_body532, retval);
			DebugLocation(558, 97);
			// cs.g:558:97: ( ';' )?
			int alt147=2;
			try { DebugEnterSubRule(147);
			try { DebugEnterDecision(147, false);
			int LA147_0 = input.LA(1);

			if ((LA147_0==SEMI))
			{
				alt147 = 1;
			}
			} finally { DebugExitDecision(147); }
			switch (alt147)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:558:97: ';'
				{
				DebugLocation(558, 97);
				char_literal533=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_class_declaration5325), "SEMI"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal533_tree = (object)adaptor.Create(char_literal533, retval);
				adaptor.AddChild(root_0, char_literal533_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(147); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_declaration", 150);
			LeaveRule("class_declaration", 150);
			LeaveRule_class_declaration();
			if (state.backtracking > 0) { Memoize(input, 150, class_declaration_StartIndex); }

		}
		DebugLocation(558, 101);
		} finally { DebugExitRule(GrammarFileName, "class_declaration"); }
		return retval;

	}
	// $ANTLR end "class_declaration"

	partial void EnterRule_class_base();
	partial void LeaveRule_class_base();

	// $ANTLR start "class_base"
	// cs.g:559:1: class_base : ':' interface_type_list ;
	[GrammarRule("class_base")]
	public XAstParserRuleReturnScope class_base()
	{
		EnterRule_class_base();
		EnterRule("class_base", 151);
		var retval = new XAstParserRuleReturnScope("class_base");
		
		retval.Start = (IToken)input.LT(1);
		int class_base_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal534 = default(IToken);
		XAstParserRuleReturnScope interface_type_list535 = default(XAstParserRuleReturnScope);

		object char_literal534_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "class_base");
		DebugLocation(559, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 151)) { return retval; }

			// cs.g:559:11: ( ':' interface_type_list )
			DebugEnterAlt(1);
			// cs.g:562:5: ':' interface_type_list
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(562, 5);
			char_literal534=(IToken)Match(input,79,Follow._79_in_class_base5347); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal534_tree = (object)adaptor.Create(char_literal534, retval);
			adaptor.AddChild(root_0, char_literal534_tree);
			}
			DebugLocation(562, 11);
			PushFollow(Follow._interface_type_list_in_class_base5351);
			interface_type_list535=interface_type_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, interface_type_list535.Tree, interface_type_list535, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_base", 151);
			LeaveRule("class_base", 151);
			LeaveRule_class_base();
			if (state.backtracking > 0) { Memoize(input, 151, class_base_StartIndex); }

		}
		DebugLocation(562, 30);
		} finally { DebugExitRule(GrammarFileName, "class_base"); }
		return retval;

	}
	// $ANTLR end "class_base"

	partial void EnterRule_interface_type_list();
	partial void LeaveRule_interface_type_list();

	// $ANTLR start "interface_type_list"
	// cs.g:564:1: interface_type_list : type ( ',' type )* ;
	[GrammarRule("interface_type_list")]
	public XAstParserRuleReturnScope interface_type_list()
	{
		EnterRule_interface_type_list();
		EnterRule("interface_type_list", 152);
		var retval = new XAstParserRuleReturnScope("interface_type_list");
		
		retval.Start = (IToken)input.LT(1);
		int interface_type_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal537 = default(IToken);
		XAstParserRuleReturnScope type536 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type538 = default(XAstParserRuleReturnScope);

		object char_literal537_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interface_type_list");
		DebugLocation(564, 23);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 152)) { return retval; }

			// cs.g:564:20: ( type ( ',' type )* )
			DebugEnterAlt(1);
			// cs.g:565:5: type ( ',' type )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(565, 5);
			PushFollow(Follow._type_in_interface_type_list5367);
			type536=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type536.Tree, type536, retval);
			DebugLocation(565, 10);
			// cs.g:565:10: ( ',' type )*
			try { DebugEnterSubRule(148);
			while (true)
			{
				int alt148=2;
				try { DebugEnterDecision(148, false);
				int LA148_0 = input.LA(1);

				if ((LA148_0==74))
				{
					alt148 = 1;
				}


				} finally { DebugExitDecision(148); }
				switch ( alt148 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:565:11: ',' type
					{
					DebugLocation(565, 11);
					char_literal537=(IToken)Match(input,74,Follow._74_in_interface_type_list5370); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal537_tree = (object)adaptor.Create(char_literal537, retval);
					adaptor.AddChild(root_0, char_literal537_tree);
					}
					DebugLocation(565, 17);
					PushFollow(Follow._type_in_interface_type_list5374);
					type538=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type538.Tree, type538, retval);

					}
					break;

				default:
					goto loop148;
				}
			}

			loop148:
				;

			} finally { DebugExitSubRule(148); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_type_list", 152);
			LeaveRule("interface_type_list", 152);
			LeaveRule_interface_type_list();
			if (state.backtracking > 0) { Memoize(input, 152, interface_type_list_StartIndex); }

		}
		DebugLocation(565, 23);
		} finally { DebugExitRule(GrammarFileName, "interface_type_list"); }
		return retval;

	}
	// $ANTLR end "interface_type_list"

	partial void EnterRule_class_body();
	partial void LeaveRule_class_body();

	// $ANTLR start "class_body"
	// cs.g:567:1: class_body : '{' ( class_member_declarations )? '}' ;
	[GrammarRule("class_body")]
	public XAstParserRuleReturnScope class_body()
	{
		EnterRule_class_body();
		EnterRule("class_body", 153);
		var retval = new XAstParserRuleReturnScope("class_body");
		
		retval.Start = (IToken)input.LT(1);
		int class_body_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal539 = default(IToken);
		IToken char_literal541 = default(IToken);
		XAstParserRuleReturnScope class_member_declarations540 = default(XAstParserRuleReturnScope);

		object char_literal539_tree = default(object);
		object char_literal541_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "class_body");
		DebugLocation(567, 43);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 153)) { return retval; }

			// cs.g:567:11: ( '{' ( class_member_declarations )? '}' )
			DebugEnterAlt(1);
			// cs.g:568:5: '{' ( class_member_declarations )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(568, 5);
			char_literal539=(IToken)Match(input,197,Follow._197_in_class_body5388); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal539_tree = (object)adaptor.Create(char_literal539, retval);
			adaptor.AddChild(root_0, char_literal539_tree);
			}
			DebugLocation(568, 11);
			// cs.g:568:11: ( class_member_declarations )?
			int alt149=2;
			try { DebugEnterSubRule(149);
			try { DebugEnterDecision(149, false);
			int LA149_0 = input.LA(1);

			if ((LA149_0==ENUM||LA149_0==IDENTIFIER||LA149_0==91||(LA149_0>=95 && LA149_0<=98)||(LA149_0>=100 && LA149_0<=101)||LA149_0==103||(LA149_0>=105 && LA149_0<=106)||LA149_0==109||(LA149_0>=111 && LA149_0<=112)||LA149_0==114||(LA149_0>=116 && LA149_0<=117)||(LA149_0>=119 && LA149_0<=120)||(LA149_0>=122 && LA149_0<=126)||LA149_0==129||LA149_0==132||(LA149_0>=135 && LA149_0<=136)||(LA149_0>=138 && LA149_0<=141)||(LA149_0>=143 && LA149_0<=144)||(LA149_0>=146 && LA149_0<=148)||(LA149_0>=150 && LA149_0<=152)||LA149_0==154||(LA149_0>=156 && LA149_0<=157)||(LA149_0>=159 && LA149_0<=165)||LA149_0==167||(LA149_0>=169 && LA149_0<=173)||(LA149_0>=176 && LA149_0<=178)||LA149_0==183||(LA149_0>=185 && LA149_0<=186)||(LA149_0>=188 && LA149_0<=194)||LA149_0==196||LA149_0==202))
			{
				alt149 = 1;
			}
			} finally { DebugExitDecision(149); }
			switch (alt149)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:568:11: class_member_declarations
				{
				DebugLocation(568, 11);
				PushFollow(Follow._class_member_declarations_in_class_body5392);
				class_member_declarations540=class_member_declarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_member_declarations540.Tree, class_member_declarations540, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(149); }

			DebugLocation(568, 40);
			char_literal541=(IToken)Match(input,201,Follow._201_in_class_body5397); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal541_tree = (object)adaptor.Create(char_literal541, retval);
			adaptor.AddChild(root_0, char_literal541_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_body", 153);
			LeaveRule("class_body", 153);
			LeaveRule_class_body();
			if (state.backtracking > 0) { Memoize(input, 153, class_body_StartIndex); }

		}
		DebugLocation(568, 43);
		} finally { DebugExitRule(GrammarFileName, "class_body"); }
		return retval;

	}
	// $ANTLR end "class_body"

	partial void EnterRule_class_member_declarations();
	partial void LeaveRule_class_member_declarations();

	// $ANTLR start "class_member_declarations"
	// cs.g:569:1: class_member_declarations : ( class_member_declaration )+ ;
	[GrammarRule("class_member_declarations")]
	public XAstParserRuleReturnScope class_member_declarations()
	{
		EnterRule_class_member_declarations();
		EnterRule("class_member_declarations", 154);
		var retval = new XAstParserRuleReturnScope("class_member_declarations");
		
		retval.Start = (IToken)input.LT(1);
		int class_member_declarations_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope class_member_declaration542 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "class_member_declarations");
		DebugLocation(569, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 154)) { return retval; }

			// cs.g:569:26: ( ( class_member_declaration )+ )
			DebugEnterAlt(1);
			// cs.g:570:5: ( class_member_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(570, 5);
			// cs.g:570:5: ( class_member_declaration )+
			int cnt150=0;
			try { DebugEnterSubRule(150);
			while (true)
			{
				int alt150=2;
				try { DebugEnterDecision(150, false);
				int LA150_0 = input.LA(1);

				if ((LA150_0==ENUM||LA150_0==IDENTIFIER||LA150_0==91||(LA150_0>=95 && LA150_0<=98)||(LA150_0>=100 && LA150_0<=101)||LA150_0==103||(LA150_0>=105 && LA150_0<=106)||LA150_0==109||(LA150_0>=111 && LA150_0<=112)||LA150_0==114||(LA150_0>=116 && LA150_0<=117)||(LA150_0>=119 && LA150_0<=120)||(LA150_0>=122 && LA150_0<=126)||LA150_0==129||LA150_0==132||(LA150_0>=135 && LA150_0<=136)||(LA150_0>=138 && LA150_0<=141)||(LA150_0>=143 && LA150_0<=144)||(LA150_0>=146 && LA150_0<=148)||(LA150_0>=150 && LA150_0<=152)||LA150_0==154||(LA150_0>=156 && LA150_0<=157)||(LA150_0>=159 && LA150_0<=165)||LA150_0==167||(LA150_0>=169 && LA150_0<=173)||(LA150_0>=176 && LA150_0<=178)||LA150_0==183||(LA150_0>=185 && LA150_0<=186)||(LA150_0>=188 && LA150_0<=194)||LA150_0==196||LA150_0==202))
				{
					alt150 = 1;
				}


				} finally { DebugExitDecision(150); }
				switch (alt150)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:570:5: class_member_declaration
					{
					DebugLocation(570, 5);
					PushFollow(Follow._class_member_declaration_in_class_member_declarations5408);
					class_member_declaration542=class_member_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, class_member_declaration542.Tree, class_member_declaration542, retval);

					}
					break;

				default:
					if (cnt150 >= 1)
						goto loop150;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee150 = new EarlyExitException( 150, input );
					DebugRecognitionException(eee150);
					throw eee150;
				}
				cnt150++;
			}
			loop150:
				;

			} finally { DebugExitSubRule(150); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_member_declarations", 154);
			LeaveRule("class_member_declarations", 154);
			LeaveRule_class_member_declarations();
			if (state.backtracking > 0) { Memoize(input, 154, class_member_declarations_StartIndex); }

		}
		DebugLocation(570, 30);
		} finally { DebugExitRule(GrammarFileName, "class_member_declarations"); }
		return retval;

	}
	// $ANTLR end "class_member_declarations"

	partial void EnterRule_constant_declaration();
	partial void LeaveRule_constant_declaration();

	// $ANTLR start "constant_declaration"
	// cs.g:573:1: constant_declaration : 'const' type constant_declarators ';' ;
	[GrammarRule("constant_declaration")]
	public XAstParserRuleReturnScope constant_declaration()
	{
		EnterRule_constant_declaration();
		EnterRule("constant_declaration", 155);
		var retval = new XAstParserRuleReturnScope("constant_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int constant_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal543 = default(IToken);
		IToken char_literal546 = default(IToken);
		XAstParserRuleReturnScope type544 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_declarators545 = default(XAstParserRuleReturnScope);

		object string_literal543_tree = default(object);
		object char_literal546_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constant_declaration");
		DebugLocation(573, 48);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 155)) { return retval; }

			// cs.g:573:21: ( 'const' type constant_declarators ';' )
			DebugEnterAlt(1);
			// cs.g:574:5: 'const' type constant_declarators ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(574, 5);
			string_literal543=(IToken)Match(input,112,Follow._112_in_constant_declaration5422); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal543_tree = (object)adaptor.Create(string_literal543, retval);
			adaptor.AddChild(root_0, string_literal543_tree);
			}
			DebugLocation(574, 15);
			PushFollow(Follow._type_in_constant_declaration5426);
			type544=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type544.Tree, type544, retval);
			DebugLocation(574, 22);
			PushFollow(Follow._constant_declarators_in_constant_declaration5430);
			constant_declarators545=constant_declarators();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, constant_declarators545.Tree, constant_declarators545, retval);
			DebugLocation(574, 45);
			char_literal546=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_constant_declaration5434), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal546_tree = (object)adaptor.Create(char_literal546, retval);
			adaptor.AddChild(root_0, char_literal546_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant_declaration", 155);
			LeaveRule("constant_declaration", 155);
			LeaveRule_constant_declaration();
			if (state.backtracking > 0) { Memoize(input, 155, constant_declaration_StartIndex); }

		}
		DebugLocation(574, 48);
		} finally { DebugExitRule(GrammarFileName, "constant_declaration"); }
		return retval;

	}
	// $ANTLR end "constant_declaration"

	partial void EnterRule_constant_declarators();
	partial void LeaveRule_constant_declarators();

	// $ANTLR start "constant_declarators"
	// cs.g:575:1: constant_declarators : constant_declarator ( ',' constant_declarator )* ;
	[GrammarRule("constant_declarators")]
	public XAstParserRuleReturnScope constant_declarators()
	{
		EnterRule_constant_declarators();
		EnterRule("constant_declarators", 156);
		var retval = new XAstParserRuleReturnScope("constant_declarators");
		
		retval.Start = (IToken)input.LT(1);
		int constant_declarators_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal548 = default(IToken);
		XAstParserRuleReturnScope constant_declarator547 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_declarator549 = default(XAstParserRuleReturnScope);

		object char_literal548_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constant_declarators");
		DebugLocation(575, 51);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 156)) { return retval; }

			// cs.g:575:21: ( constant_declarator ( ',' constant_declarator )* )
			DebugEnterAlt(1);
			// cs.g:576:5: constant_declarator ( ',' constant_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(576, 5);
			PushFollow(Follow._constant_declarator_in_constant_declarators5445);
			constant_declarator547=constant_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, constant_declarator547.Tree, constant_declarator547, retval);
			DebugLocation(576, 25);
			// cs.g:576:25: ( ',' constant_declarator )*
			try { DebugEnterSubRule(151);
			while (true)
			{
				int alt151=2;
				try { DebugEnterDecision(151, false);
				int LA151_0 = input.LA(1);

				if ((LA151_0==74))
				{
					alt151 = 1;
				}


				} finally { DebugExitDecision(151); }
				switch ( alt151 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:576:26: ',' constant_declarator
					{
					DebugLocation(576, 26);
					char_literal548=(IToken)Match(input,74,Follow._74_in_constant_declarators5448); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal548_tree = (object)adaptor.Create(char_literal548, retval);
					adaptor.AddChild(root_0, char_literal548_tree);
					}
					DebugLocation(576, 30);
					PushFollow(Follow._constant_declarator_in_constant_declarators5450);
					constant_declarator549=constant_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constant_declarator549.Tree, constant_declarator549, retval);

					}
					break;

				default:
					goto loop151;
				}
			}

			loop151:
				;

			} finally { DebugExitSubRule(151); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant_declarators", 156);
			LeaveRule("constant_declarators", 156);
			LeaveRule_constant_declarators();
			if (state.backtracking > 0) { Memoize(input, 156, constant_declarators_StartIndex); }

		}
		DebugLocation(576, 51);
		} finally { DebugExitRule(GrammarFileName, "constant_declarators"); }
		return retval;

	}
	// $ANTLR end "constant_declarators"

	partial void EnterRule_constant_declarator();
	partial void LeaveRule_constant_declarator();

	// $ANTLR start "constant_declarator"
	// cs.g:577:1: constant_declarator : identifier ( '=' constant_expression )? ;
	[GrammarRule("constant_declarator")]
	public XAstParserRuleReturnScope constant_declarator()
	{
		EnterRule_constant_declarator();
		EnterRule("constant_declarator", 157);
		var retval = new XAstParserRuleReturnScope("constant_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int constant_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal551 = default(IToken);
		XAstParserRuleReturnScope identifier550 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression552 = default(XAstParserRuleReturnScope);

		object char_literal551_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constant_declarator");
		DebugLocation(577, 46);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 157)) { return retval; }

			// cs.g:577:20: ( identifier ( '=' constant_expression )? )
			DebugEnterAlt(1);
			// cs.g:578:5: identifier ( '=' constant_expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(578, 5);
			PushFollow(Follow._identifier_in_constant_declarator5463);
			identifier550=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier550.Tree, identifier550, retval);
			DebugLocation(578, 18);
			// cs.g:578:18: ( '=' constant_expression )?
			int alt152=2;
			try { DebugEnterSubRule(152);
			try { DebugEnterDecision(152, false);
			int LA152_0 = input.LA(1);

			if ((LA152_0==85))
			{
				alt152 = 1;
			}
			} finally { DebugExitDecision(152); }
			switch (alt152)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:578:19: '=' constant_expression
				{
				DebugLocation(578, 19);
				char_literal551=(IToken)Match(input,85,Follow._85_in_constant_declarator5468); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal551_tree = (object)adaptor.Create(char_literal551, retval);
				adaptor.AddChild(root_0, char_literal551_tree);
				}
				DebugLocation(578, 25);
				PushFollow(Follow._constant_expression_in_constant_declarator5472);
				constant_expression552=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression552.Tree, constant_expression552, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(152); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant_declarator", 157);
			LeaveRule("constant_declarator", 157);
			LeaveRule_constant_declarator();
			if (state.backtracking > 0) { Memoize(input, 157, constant_declarator_StartIndex); }

		}
		DebugLocation(578, 46);
		} finally { DebugExitRule(GrammarFileName, "constant_declarator"); }
		return retval;

	}
	// $ANTLR end "constant_declarator"

	partial void EnterRule_constant_expression();
	partial void LeaveRule_constant_expression();

	// $ANTLR start "constant_expression"
	// cs.g:579:1: constant_expression : expression ;
	[GrammarRule("constant_expression")]
	public XAstParserRuleReturnScope constant_expression()
	{
		EnterRule_constant_expression();
		EnterRule("constant_expression", 158);
		var retval = new XAstParserRuleReturnScope("constant_expression");
		
		retval.Start = (IToken)input.LT(1);
		int constant_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope expression553 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "constant_expression");
		DebugLocation(579, 14);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 158)) { return retval; }

			// cs.g:579:20: ( expression )
			DebugEnterAlt(1);
			// cs.g:580:5: expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(580, 5);
			PushFollow(Follow._expression_in_constant_expression5485);
			expression553=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression553.Tree, expression553, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant_expression", 158);
			LeaveRule("constant_expression", 158);
			LeaveRule_constant_expression();
			if (state.backtracking > 0) { Memoize(input, 158, constant_expression_StartIndex); }

		}
		DebugLocation(580, 14);
		} finally { DebugExitRule(GrammarFileName, "constant_expression"); }
		return retval;

	}
	// $ANTLR end "constant_expression"

	partial void EnterRule_field_declaration();
	partial void LeaveRule_field_declaration();

	// $ANTLR start "field_declaration"
	// cs.g:583:1: field_declaration : variable_declarators ';' ;
	[GrammarRule("field_declaration")]
	public XAstParserRuleReturnScope field_declaration()
	{
		EnterRule_field_declaration();
		EnterRule("field_declaration", 159);
		var retval = new XAstParserRuleReturnScope("field_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int field_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal555 = default(IToken);
		XAstParserRuleReturnScope variable_declarators554 = default(XAstParserRuleReturnScope);

		object char_literal555_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "field_declaration");
		DebugLocation(583, 31);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 159)) { return retval; }

			// cs.g:583:18: ( variable_declarators ';' )
			DebugEnterAlt(1);
			// cs.g:584:5: variable_declarators ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(584, 5);
			PushFollow(Follow._variable_declarators_in_field_declaration5497);
			variable_declarators554=variable_declarators();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variable_declarators554.Tree, variable_declarators554, retval);
			DebugLocation(584, 28);
			char_literal555=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_field_declaration5501), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal555_tree = (object)adaptor.Create(char_literal555, retval);
			adaptor.AddChild(root_0, char_literal555_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("field_declaration", 159);
			LeaveRule("field_declaration", 159);
			LeaveRule_field_declaration();
			if (state.backtracking > 0) { Memoize(input, 159, field_declaration_StartIndex); }

		}
		DebugLocation(584, 31);
		} finally { DebugExitRule(GrammarFileName, "field_declaration"); }
		return retval;

	}
	// $ANTLR end "field_declaration"

	partial void EnterRule_variable_declarators();
	partial void LeaveRule_variable_declarators();

	// $ANTLR start "variable_declarators"
	// cs.g:585:1: variable_declarators : variable_declarator ( ',' variable_declarator )* ;
	[GrammarRule("variable_declarators")]
	public XAstParserRuleReturnScope variable_declarators()
	{
		EnterRule_variable_declarators();
		EnterRule("variable_declarators", 160);
		var retval = new XAstParserRuleReturnScope("variable_declarators");
		
		retval.Start = (IToken)input.LT(1);
		int variable_declarators_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal557 = default(IToken);
		XAstParserRuleReturnScope variable_declarator556 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variable_declarator558 = default(XAstParserRuleReturnScope);

		object char_literal557_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variable_declarators");
		DebugLocation(585, 53);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 160)) { return retval; }

			// cs.g:585:21: ( variable_declarator ( ',' variable_declarator )* )
			DebugEnterAlt(1);
			// cs.g:586:5: variable_declarator ( ',' variable_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(586, 5);
			PushFollow(Follow._variable_declarator_in_variable_declarators5512);
			variable_declarator556=variable_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variable_declarator556.Tree, variable_declarator556, retval);
			DebugLocation(586, 25);
			// cs.g:586:25: ( ',' variable_declarator )*
			try { DebugEnterSubRule(153);
			while (true)
			{
				int alt153=2;
				try { DebugEnterDecision(153, false);
				int LA153_0 = input.LA(1);

				if ((LA153_0==74))
				{
					alt153 = 1;
				}


				} finally { DebugExitDecision(153); }
				switch ( alt153 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:586:26: ',' variable_declarator
					{
					DebugLocation(586, 26);
					char_literal557=(IToken)Match(input,74,Follow._74_in_variable_declarators5515); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal557_tree = (object)adaptor.Create(char_literal557, retval);
					adaptor.AddChild(root_0, char_literal557_tree);
					}
					DebugLocation(586, 32);
					PushFollow(Follow._variable_declarator_in_variable_declarators5519);
					variable_declarator558=variable_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variable_declarator558.Tree, variable_declarator558, retval);

					}
					break;

				default:
					goto loop153;
				}
			}

			loop153:
				;

			} finally { DebugExitSubRule(153); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable_declarators", 160);
			LeaveRule("variable_declarators", 160);
			LeaveRule_variable_declarators();
			if (state.backtracking > 0) { Memoize(input, 160, variable_declarators_StartIndex); }

		}
		DebugLocation(586, 53);
		} finally { DebugExitRule(GrammarFileName, "variable_declarators"); }
		return retval;

	}
	// $ANTLR end "variable_declarators"

	partial void EnterRule_variable_declarator();
	partial void LeaveRule_variable_declarator();

	// $ANTLR start "variable_declarator"
	// cs.g:587:1: variable_declarator : type_name ( '=' variable_initializer )? ;
	[GrammarRule("variable_declarator")]
	public XAstParserRuleReturnScope variable_declarator()
	{
		EnterRule_variable_declarator();
		EnterRule("variable_declarator", 161);
		var retval = new XAstParserRuleReturnScope("variable_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int variable_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal560 = default(IToken);
		XAstParserRuleReturnScope type_name559 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variable_initializer561 = default(XAstParserRuleReturnScope);

		object char_literal560_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variable_declarator");
		DebugLocation(587, 44);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 161)) { return retval; }

			// cs.g:587:20: ( type_name ( '=' variable_initializer )? )
			DebugEnterAlt(1);
			// cs.g:588:5: type_name ( '=' variable_initializer )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(588, 5);
			PushFollow(Follow._type_name_in_variable_declarator5532);
			type_name559=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name559.Tree, type_name559, retval);
			DebugLocation(588, 15);
			// cs.g:588:15: ( '=' variable_initializer )?
			int alt154=2;
			try { DebugEnterSubRule(154);
			try { DebugEnterDecision(154, false);
			int LA154_0 = input.LA(1);

			if ((LA154_0==85))
			{
				alt154 = 1;
			}
			} finally { DebugExitDecision(154); }
			switch (alt154)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:588:16: '=' variable_initializer
				{
				DebugLocation(588, 16);
				char_literal560=(IToken)Match(input,85,Follow._85_in_variable_declarator5535); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal560_tree = (object)adaptor.Create(char_literal560, retval);
				adaptor.AddChild(root_0, char_literal560_tree);
				}
				DebugLocation(588, 22);
				PushFollow(Follow._variable_initializer_in_variable_declarator5539);
				variable_initializer561=variable_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable_initializer561.Tree, variable_initializer561, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(154); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variable_declarator", 161);
			LeaveRule("variable_declarator", 161);
			LeaveRule_variable_declarator();
			if (state.backtracking > 0) { Memoize(input, 161, variable_declarator_StartIndex); }

		}
		DebugLocation(588, 44);
		} finally { DebugExitRule(GrammarFileName, "variable_declarator"); }
		return retval;

	}
	// $ANTLR end "variable_declarator"

	partial void EnterRule_method_declaration();
	partial void LeaveRule_method_declaration();

	// $ANTLR start "method_declaration"
	// cs.g:591:1: method_declaration : method_header method_body ;
	[GrammarRule("method_declaration")]
	public XAstParserRuleReturnScope method_declaration()
	{
		EnterRule_method_declaration();
		EnterRule("method_declaration", 162);
		var retval = new XAstParserRuleReturnScope("method_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int method_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope method_header562 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope method_body563 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "method_declaration");
		DebugLocation(591, 32);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 162)) { return retval; }

			// cs.g:591:19: ( method_header method_body )
			DebugEnterAlt(1);
			// cs.g:592:5: method_header method_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(592, 5);
			PushFollow(Follow._method_header_in_method_declaration5556);
			method_header562=method_header();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, method_header562.Tree, method_header562, retval);
			DebugLocation(592, 21);
			PushFollow(Follow._method_body_in_method_declaration5560);
			method_body563=method_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, method_body563.Tree, method_body563, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("method_declaration", 162);
			LeaveRule("method_declaration", 162);
			LeaveRule_method_declaration();
			if (state.backtracking > 0) { Memoize(input, 162, method_declaration_StartIndex); }

		}
		DebugLocation(592, 32);
		} finally { DebugExitRule(GrammarFileName, "method_declaration"); }
		return retval;

	}
	// $ANTLR end "method_declaration"

	partial void EnterRule_method_header();
	partial void LeaveRule_method_header();

	// $ANTLR start "method_header"
	// cs.g:593:1: method_header : member_name '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ;
	[GrammarRule("method_header")]
	public XAstParserRuleReturnScope method_header()
	{
		EnterRule_method_header();
		EnterRule("method_header", 163);
		var retval = new XAstParserRuleReturnScope("method_header");
		
		retval.Start = (IToken)input.LT(1);
		int method_header_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal565 = default(IToken);
		IToken char_literal567 = default(IToken);
		XAstParserRuleReturnScope member_name564 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope formal_parameter_list566 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_parameter_constraints_clauses568 = default(XAstParserRuleReturnScope);

		object char_literal565_tree = default(object);
		object char_literal567_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "method_header");
		DebugLocation(593, 90);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 163)) { return retval; }

			// cs.g:593:14: ( member_name '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? )
			DebugEnterAlt(1);
			// cs.g:594:5: member_name '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(594, 5);
			PushFollow(Follow._member_name_in_method_header5571);
			member_name564=member_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, member_name564.Tree, member_name564, retval);
			DebugLocation(594, 18);
			char_literal565=(IToken)Match(input,68,Follow._68_in_method_header5574); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal565_tree = (object)adaptor.Create(char_literal565, retval);
			adaptor.AddChild(root_0, char_literal565_tree);
			}
			DebugLocation(594, 24);
			// cs.g:594:24: ( formal_parameter_list )?
			int alt155=2;
			try { DebugEnterSubRule(155);
			try { DebugEnterDecision(155, false);
			int LA155_0 = input.LA(1);

			if ((LA155_0==IDENTIFIER||LA155_0==91||LA155_0==95||(LA155_0>=97 && LA155_0<=98)||(LA155_0>=100 && LA155_0<=101)||LA155_0==103||(LA155_0>=105 && LA155_0<=106)||LA155_0==109||LA155_0==114||LA155_0==117||(LA155_0>=119 && LA155_0<=120)||LA155_0==122||LA155_0==126||LA155_0==129||LA155_0==132||LA155_0==135||LA155_0==138||LA155_0==141||(LA155_0>=143 && LA155_0<=144)||(LA155_0>=146 && LA155_0<=148)||(LA155_0>=151 && LA155_0<=152)||(LA155_0>=154 && LA155_0<=155)||(LA155_0>=157 && LA155_0<=158)||LA155_0==160||LA155_0==162||(LA155_0>=166 && LA155_0<=167)||LA155_0==169||(LA155_0>=171 && LA155_0<=173)||LA155_0==177||LA155_0==180||LA155_0==183||(LA155_0>=185 && LA155_0<=186)||(LA155_0>=189 && LA155_0<=190)||LA155_0==192||LA155_0==194||LA155_0==196))
			{
				alt155 = 1;
			}
			} finally { DebugExitDecision(155); }
			switch (alt155)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:594:24: formal_parameter_list
				{
				DebugLocation(594, 24);
				PushFollow(Follow._formal_parameter_list_in_method_header5578);
				formal_parameter_list566=formal_parameter_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, formal_parameter_list566.Tree, formal_parameter_list566, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(155); }

			DebugLocation(594, 49);
			char_literal567=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_method_header5583), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal567_tree = (object)adaptor.Create(char_literal567, retval);
			adaptor.AddChild(root_0, char_literal567_tree);
			}
			DebugLocation(594, 55);
			// cs.g:594:55: ( type_parameter_constraints_clauses )?
			int alt156=2;
			try { DebugEnterSubRule(156);
			try { DebugEnterDecision(156, false);
			int LA156_0 = input.LA(1);

			if ((LA156_0==194))
			{
				alt156 = 1;
			}
			} finally { DebugExitDecision(156); }
			switch (alt156)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:594:55: type_parameter_constraints_clauses
				{
				DebugLocation(594, 55);
				PushFollow(Follow._type_parameter_constraints_clauses_in_method_header5587);
				type_parameter_constraints_clauses568=type_parameter_constraints_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraints_clauses568.Tree, type_parameter_constraints_clauses568, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(156); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("method_header", 163);
			LeaveRule("method_header", 163);
			LeaveRule_method_header();
			if (state.backtracking > 0) { Memoize(input, 163, method_header_StartIndex); }

		}
		DebugLocation(594, 90);
		} finally { DebugExitRule(GrammarFileName, "method_header"); }
		return retval;

	}
	// $ANTLR end "method_header"

	partial void EnterRule_method_body();
	partial void LeaveRule_method_body();

	// $ANTLR start "method_body"
	// cs.g:595:1: method_body : block ;
	[GrammarRule("method_body")]
	public XAstParserRuleReturnScope method_body()
	{
		EnterRule_method_body();
		EnterRule("method_body", 164);
		var retval = new XAstParserRuleReturnScope("method_body");
		
		retval.Start = (IToken)input.LT(1);
		int method_body_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope block569 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "method_body");
		DebugLocation(595, 10);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 164)) { return retval; }

			// cs.g:595:12: ( block )
			DebugEnterAlt(1);
			// cs.g:596:5: block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(596, 5);
			PushFollow(Follow._block_in_method_body5599);
			block569=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block569.Tree, block569, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("method_body", 164);
			LeaveRule("method_body", 164);
			LeaveRule_method_body();
			if (state.backtracking > 0) { Memoize(input, 164, method_body_StartIndex); }

		}
		DebugLocation(596, 10);
		} finally { DebugExitRule(GrammarFileName, "method_body"); }
		return retval;

	}
	// $ANTLR end "method_body"

	partial void EnterRule_member_name();
	partial void LeaveRule_member_name();

	// $ANTLR start "member_name"
	// cs.g:597:1: member_name : qid ;
	[GrammarRule("member_name")]
	public XAstParserRuleReturnScope member_name()
	{
		EnterRule_member_name();
		EnterRule("member_name", 165);
		var retval = new XAstParserRuleReturnScope("member_name");
		
		retval.Start = (IToken)input.LT(1);
		int member_name_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope qid570 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "member_name");
		DebugLocation(597, 8);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 165)) { return retval; }

			// cs.g:597:12: ( qid )
			DebugEnterAlt(1);
			// cs.g:598:5: qid
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(598, 5);
			PushFollow(Follow._qid_in_member_name5610);
			qid570=qid();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, qid570.Tree, qid570, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("member_name", 165);
			LeaveRule("member_name", 165);
			LeaveRule_member_name();
			if (state.backtracking > 0) { Memoize(input, 165, member_name_StartIndex); }

		}
		DebugLocation(598, 8);
		} finally { DebugExitRule(GrammarFileName, "member_name"); }
		return retval;

	}
	// $ANTLR end "member_name"

	partial void EnterRule_property_declaration();
	partial void LeaveRule_property_declaration();

	// $ANTLR start "property_declaration"
	// cs.g:601:1: property_declaration : member_name '{' accessor_declarations '}' ;
	[GrammarRule("property_declaration")]
	public XAstParserRuleReturnScope property_declaration()
	{
		EnterRule_property_declaration();
		EnterRule("property_declaration", 166);
		var retval = new XAstParserRuleReturnScope("property_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int property_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal572 = default(IToken);
		IToken char_literal574 = default(IToken);
		XAstParserRuleReturnScope member_name571 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope accessor_declarations573 = default(XAstParserRuleReturnScope);

		object char_literal572_tree = default(object);
		object char_literal574_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "property_declaration");
		DebugLocation(601, 52);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 166)) { return retval; }

			// cs.g:601:21: ( member_name '{' accessor_declarations '}' )
			DebugEnterAlt(1);
			// cs.g:602:5: member_name '{' accessor_declarations '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(602, 5);
			PushFollow(Follow._member_name_in_property_declaration5625);
			member_name571=member_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, member_name571.Tree, member_name571, retval);
			DebugLocation(602, 19);
			char_literal572=(IToken)Match(input,197,Follow._197_in_property_declaration5629); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal572_tree = (object)adaptor.Create(char_literal572, retval);
			adaptor.AddChild(root_0, char_literal572_tree);
			}
			DebugLocation(602, 25);
			PushFollow(Follow._accessor_declarations_in_property_declaration5633);
			accessor_declarations573=accessor_declarations();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, accessor_declarations573.Tree, accessor_declarations573, retval);
			DebugLocation(602, 49);
			char_literal574=(IToken)Match(input,201,Follow._201_in_property_declaration5637); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal574_tree = (object)adaptor.Create(char_literal574, retval);
			adaptor.AddChild(root_0, char_literal574_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("property_declaration", 166);
			LeaveRule("property_declaration", 166);
			LeaveRule_property_declaration();
			if (state.backtracking > 0) { Memoize(input, 166, property_declaration_StartIndex); }

		}
		DebugLocation(602, 52);
		} finally { DebugExitRule(GrammarFileName, "property_declaration"); }
		return retval;

	}
	// $ANTLR end "property_declaration"

	partial void EnterRule_accessor_declarations();
	partial void LeaveRule_accessor_declarations();

	// $ANTLR start "accessor_declarations"
	// cs.g:603:1: accessor_declarations : ( attributes )? ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? ) ;
	[GrammarRule("accessor_declarations")]
	public XAstParserRuleReturnScope accessor_declarations()
	{
		EnterRule_accessor_declarations();
		EnterRule("accessor_declarations", 167);
		var retval = new XAstParserRuleReturnScope("accessor_declarations");
		
		retval.Start = (IToken)input.LT(1);
		int accessor_declarations_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope attributes575 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope get_accessor_declaration576 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attributes577 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope set_accessor_declaration578 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope set_accessor_declaration579 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attributes580 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope get_accessor_declaration581 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "accessor_declarations");
		DebugLocation(603, 78);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 167)) { return retval; }

			// cs.g:603:22: ( ( attributes )? ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? ) )
			DebugEnterAlt(1);
			// cs.g:604:5: ( attributes )? ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(604, 5);
			// cs.g:604:5: ( attributes )?
			int alt157=2;
			try { DebugEnterSubRule(157);
			try { DebugEnterDecision(157, false);
			int LA157_0 = input.LA(1);

			if ((LA157_0==91))
			{
				alt157 = 1;
			}
			} finally { DebugExitDecision(157); }
			switch (alt157)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:604:5: attributes
				{
				DebugLocation(604, 5);
				PushFollow(Follow._attributes_in_accessor_declarations5648);
				attributes575=attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attributes575.Tree, attributes575, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(157); }

			DebugLocation(605, 9);
			// cs.g:605:9: ( get_accessor_declaration ( attributes )? ( set_accessor_declaration )? | set_accessor_declaration ( attributes )? ( get_accessor_declaration )? )
			int alt162=2;
			try { DebugEnterSubRule(162);
			try { DebugEnterDecision(162, false);
			switch (input.LA(1))
			{
			case 140:
			case 161:
			case 163:
			case 164:
				{
				int LA162_1 = input.LA(2);

				if ((LA162_1==133))
				{
					alt162 = 1;
				}
				else if ((LA162_1==172))
				{
					alt162 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 162, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 133:
				{
				alt162 = 1;
				}
				break;
			case 172:
				{
				alt162 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 162, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(162); }
			switch (alt162)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:605:10: get_accessor_declaration ( attributes )? ( set_accessor_declaration )?
				{
				DebugLocation(605, 10);
				PushFollow(Follow._get_accessor_declaration_in_accessor_declarations5660);
				get_accessor_declaration576=get_accessor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, get_accessor_declaration576.Tree, get_accessor_declaration576, retval);
				DebugLocation(605, 37);
				// cs.g:605:37: ( attributes )?
				int alt158=2;
				try { DebugEnterSubRule(158);
				try { DebugEnterDecision(158, false);
				int LA158_0 = input.LA(1);

				if ((LA158_0==91))
				{
					alt158 = 1;
				}
				} finally { DebugExitDecision(158); }
				switch (alt158)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:605:37: attributes
					{
					DebugLocation(605, 37);
					PushFollow(Follow._attributes_in_accessor_declarations5664);
					attributes577=attributes();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attributes577.Tree, attributes577, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(158); }

				DebugLocation(605, 51);
				// cs.g:605:51: ( set_accessor_declaration )?
				int alt159=2;
				try { DebugEnterSubRule(159);
				try { DebugEnterDecision(159, false);
				int LA159_0 = input.LA(1);

				if ((LA159_0==140||LA159_0==161||(LA159_0>=163 && LA159_0<=164)||LA159_0==172))
				{
					alt159 = 1;
				}
				} finally { DebugExitDecision(159); }
				switch (alt159)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:605:51: set_accessor_declaration
					{
					DebugLocation(605, 51);
					PushFollow(Follow._set_accessor_declaration_in_accessor_declarations5669);
					set_accessor_declaration578=set_accessor_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, set_accessor_declaration578.Tree, set_accessor_declaration578, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(159); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:606:11: set_accessor_declaration ( attributes )? ( get_accessor_declaration )?
				{
				DebugLocation(606, 11);
				PushFollow(Follow._set_accessor_declaration_in_accessor_declarations5682);
				set_accessor_declaration579=set_accessor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, set_accessor_declaration579.Tree, set_accessor_declaration579, retval);
				DebugLocation(606, 38);
				// cs.g:606:38: ( attributes )?
				int alt160=2;
				try { DebugEnterSubRule(160);
				try { DebugEnterDecision(160, false);
				int LA160_0 = input.LA(1);

				if ((LA160_0==91))
				{
					alt160 = 1;
				}
				} finally { DebugExitDecision(160); }
				switch (alt160)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:606:38: attributes
					{
					DebugLocation(606, 38);
					PushFollow(Follow._attributes_in_accessor_declarations5686);
					attributes580=attributes();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attributes580.Tree, attributes580, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(160); }

				DebugLocation(606, 52);
				// cs.g:606:52: ( get_accessor_declaration )?
				int alt161=2;
				try { DebugEnterSubRule(161);
				try { DebugEnterDecision(161, false);
				int LA161_0 = input.LA(1);

				if ((LA161_0==133||LA161_0==140||LA161_0==161||(LA161_0>=163 && LA161_0<=164)))
				{
					alt161 = 1;
				}
				} finally { DebugExitDecision(161); }
				switch (alt161)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:606:52: get_accessor_declaration
					{
					DebugLocation(606, 52);
					PushFollow(Follow._get_accessor_declaration_in_accessor_declarations5691);
					get_accessor_declaration581=get_accessor_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, get_accessor_declaration581.Tree, get_accessor_declaration581, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(161); }


				}
				break;

			}
			} finally { DebugExitSubRule(162); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("accessor_declarations", 167);
			LeaveRule("accessor_declarations", 167);
			LeaveRule_accessor_declarations();
			if (state.backtracking > 0) { Memoize(input, 167, accessor_declarations_StartIndex); }

		}
		DebugLocation(606, 78);
		} finally { DebugExitRule(GrammarFileName, "accessor_declarations"); }
		return retval;

	}
	// $ANTLR end "accessor_declarations"

	partial void EnterRule_get_accessor_declaration();
	partial void LeaveRule_get_accessor_declaration();

	// $ANTLR start "get_accessor_declaration"
	// cs.g:607:1: get_accessor_declaration : ( accessor_modifier )? 'get' accessor_body ;
	[GrammarRule("get_accessor_declaration")]
	public XAstParserRuleReturnScope get_accessor_declaration()
	{
		EnterRule_get_accessor_declaration();
		EnterRule("get_accessor_declaration", 168);
		var retval = new XAstParserRuleReturnScope("get_accessor_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int get_accessor_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal583 = default(IToken);
		XAstParserRuleReturnScope accessor_modifier582 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope accessor_body584 = default(XAstParserRuleReturnScope);

		object string_literal583_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "get_accessor_declaration");
		DebugLocation(607, 47);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 168)) { return retval; }

			// cs.g:607:25: ( ( accessor_modifier )? 'get' accessor_body )
			DebugEnterAlt(1);
			// cs.g:608:5: ( accessor_modifier )? 'get' accessor_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(608, 5);
			// cs.g:608:5: ( accessor_modifier )?
			int alt163=2;
			try { DebugEnterSubRule(163);
			try { DebugEnterDecision(163, false);
			int LA163_0 = input.LA(1);

			if ((LA163_0==140||LA163_0==161||(LA163_0>=163 && LA163_0<=164)))
			{
				alt163 = 1;
			}
			} finally { DebugExitDecision(163); }
			switch (alt163)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:608:5: accessor_modifier
				{
				DebugLocation(608, 5);
				PushFollow(Follow._accessor_modifier_in_get_accessor_declaration5704);
				accessor_modifier582=accessor_modifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, accessor_modifier582.Tree, accessor_modifier582, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(163); }

			DebugLocation(608, 26);
			string_literal583=(IToken)Match(input,133,Follow._133_in_get_accessor_declaration5709); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal583_tree = (object)adaptor.Create(string_literal583, retval);
			adaptor.AddChild(root_0, string_literal583_tree);
			}
			DebugLocation(608, 34);
			PushFollow(Follow._accessor_body_in_get_accessor_declaration5713);
			accessor_body584=accessor_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, accessor_body584.Tree, accessor_body584, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("get_accessor_declaration", 168);
			LeaveRule("get_accessor_declaration", 168);
			LeaveRule_get_accessor_declaration();
			if (state.backtracking > 0) { Memoize(input, 168, get_accessor_declaration_StartIndex); }

		}
		DebugLocation(608, 47);
		} finally { DebugExitRule(GrammarFileName, "get_accessor_declaration"); }
		return retval;

	}
	// $ANTLR end "get_accessor_declaration"

	partial void EnterRule_set_accessor_declaration();
	partial void LeaveRule_set_accessor_declaration();

	// $ANTLR start "set_accessor_declaration"
	// cs.g:609:1: set_accessor_declaration : ( accessor_modifier )? 'set' accessor_body ;
	[GrammarRule("set_accessor_declaration")]
	public XAstParserRuleReturnScope set_accessor_declaration()
	{
		EnterRule_set_accessor_declaration();
		EnterRule("set_accessor_declaration", 169);
		var retval = new XAstParserRuleReturnScope("set_accessor_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int set_accessor_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal586 = default(IToken);
		XAstParserRuleReturnScope accessor_modifier585 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope accessor_body587 = default(XAstParserRuleReturnScope);

		object string_literal586_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "set_accessor_declaration");
		DebugLocation(609, 47);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 169)) { return retval; }

			// cs.g:609:25: ( ( accessor_modifier )? 'set' accessor_body )
			DebugEnterAlt(1);
			// cs.g:610:5: ( accessor_modifier )? 'set' accessor_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(610, 5);
			// cs.g:610:5: ( accessor_modifier )?
			int alt164=2;
			try { DebugEnterSubRule(164);
			try { DebugEnterDecision(164, false);
			int LA164_0 = input.LA(1);

			if ((LA164_0==140||LA164_0==161||(LA164_0>=163 && LA164_0<=164)))
			{
				alt164 = 1;
			}
			} finally { DebugExitDecision(164); }
			switch (alt164)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:610:5: accessor_modifier
				{
				DebugLocation(610, 5);
				PushFollow(Follow._accessor_modifier_in_set_accessor_declaration5724);
				accessor_modifier585=accessor_modifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, accessor_modifier585.Tree, accessor_modifier585, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(164); }

			DebugLocation(610, 26);
			string_literal586=(IToken)Match(input,172,Follow._172_in_set_accessor_declaration5729); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal586_tree = (object)adaptor.Create(string_literal586, retval);
			adaptor.AddChild(root_0, string_literal586_tree);
			}
			DebugLocation(610, 34);
			PushFollow(Follow._accessor_body_in_set_accessor_declaration5733);
			accessor_body587=accessor_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, accessor_body587.Tree, accessor_body587, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("set_accessor_declaration", 169);
			LeaveRule("set_accessor_declaration", 169);
			LeaveRule_set_accessor_declaration();
			if (state.backtracking > 0) { Memoize(input, 169, set_accessor_declaration_StartIndex); }

		}
		DebugLocation(610, 47);
		} finally { DebugExitRule(GrammarFileName, "set_accessor_declaration"); }
		return retval;

	}
	// $ANTLR end "set_accessor_declaration"

	partial void EnterRule_accessor_modifier();
	partial void LeaveRule_accessor_modifier();

	// $ANTLR start "accessor_modifier"
	// cs.g:611:1: accessor_modifier : ( 'public' | 'protected' | 'private' | 'internal' );
	[GrammarRule("accessor_modifier")]
	public XAstParserRuleReturnScope accessor_modifier()
	{
		EnterRule_accessor_modifier();
		EnterRule("accessor_modifier", 170);
		var retval = new XAstParserRuleReturnScope("accessor_modifier");
		
		retval.Start = (IToken)input.LT(1);
		int accessor_modifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set588 = default(IToken);

		object set588_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "accessor_modifier");
		DebugLocation(611, 52);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 170)) { return retval; }

			// cs.g:611:18: ( 'public' | 'protected' | 'private' | 'internal' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(611, 18);

			set588=(IToken)input.LT(1);
			if (input.LA(1)==140||input.LA(1)==161||(input.LA(1)>=163 && input.LA(1)<=164))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set588, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("accessor_modifier", 170);
			LeaveRule("accessor_modifier", 170);
			LeaveRule_accessor_modifier();
			if (state.backtracking > 0) { Memoize(input, 170, accessor_modifier_StartIndex); }

		}
		DebugLocation(612, 52);
		} finally { DebugExitRule(GrammarFileName, "accessor_modifier"); }
		return retval;

	}
	// $ANTLR end "accessor_modifier"

	partial void EnterRule_accessor_body();
	partial void LeaveRule_accessor_body();

	// $ANTLR start "accessor_body"
	// cs.g:613:1: accessor_body : block ;
	[GrammarRule("accessor_body")]
	public XAstParserRuleReturnScope accessor_body()
	{
		EnterRule_accessor_body();
		EnterRule("accessor_body", 171);
		var retval = new XAstParserRuleReturnScope("accessor_body");
		
		retval.Start = (IToken)input.LT(1);
		int accessor_body_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope block589 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "accessor_body");
		DebugLocation(613, 10);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 171)) { return retval; }

			// cs.g:613:14: ( block )
			DebugEnterAlt(1);
			// cs.g:614:5: block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(614, 5);
			PushFollow(Follow._block_in_accessor_body5767);
			block589=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block589.Tree, block589, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("accessor_body", 171);
			LeaveRule("accessor_body", 171);
			LeaveRule_accessor_body();
			if (state.backtracking > 0) { Memoize(input, 171, accessor_body_StartIndex); }

		}
		DebugLocation(614, 10);
		} finally { DebugExitRule(GrammarFileName, "accessor_body"); }
		return retval;

	}
	// $ANTLR end "accessor_body"

	partial void EnterRule_event_declaration();
	partial void LeaveRule_event_declaration();

	// $ANTLR start "event_declaration"
	// cs.g:617:1: event_declaration : 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' ) ;
	[GrammarRule("event_declaration")]
	public XAstParserRuleReturnScope event_declaration()
	{
		EnterRule_event_declaration();
		EnterRule("event_declaration", 172);
		var retval = new XAstParserRuleReturnScope("event_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int event_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal590 = default(IToken);
		IToken char_literal593 = default(IToken);
		IToken char_literal595 = default(IToken);
		IToken char_literal597 = default(IToken);
		XAstParserRuleReturnScope type591 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope member_name592 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope event_accessor_declarations594 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variable_declarators596 = default(XAstParserRuleReturnScope);

		object string_literal590_tree = default(object);
		object char_literal593_tree = default(object);
		object char_literal595_tree = default(object);
		object char_literal597_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "event_declaration");
		DebugLocation(617, 8);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 172)) { return retval; }

			// cs.g:617:18: ( 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' ) )
			DebugEnterAlt(1);
			// cs.g:618:5: 'event' type ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(618, 5);
			string_literal590=(IToken)Match(input,123,Follow._123_in_event_declaration5780); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal590_tree = (object)adaptor.Create(string_literal590, retval);
			adaptor.AddChild(root_0, string_literal590_tree);
			}
			DebugLocation(618, 15);
			PushFollow(Follow._type_in_event_declaration5784);
			type591=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type591.Tree, type591, retval);
			DebugLocation(619, 9);
			// cs.g:619:9: ( ( member_name '{' )=> member_name '{' event_accessor_declarations '}' | variable_declarators ';' )
			int alt165=2;
			try { DebugEnterSubRule(165);
			try { DebugEnterDecision(165, false);
			int LA165_0 = input.LA(1);

			if ((LA165_0==103||LA165_0==106||LA165_0==109||LA165_0==114||LA165_0==119||LA165_0==129||LA165_0==138||LA165_0==146||LA165_0==151||LA165_0==169||LA165_0==173||LA165_0==177||(LA165_0>=185 && LA165_0<=186)||LA165_0==189) && (EvaluatePredicate(synpred25_cs_fragment)))
			{
				alt165 = 1;
			}
			else if ((LA165_0==IDENTIFIER||LA165_0==95||(LA165_0>=97 && LA165_0<=98)||(LA165_0>=100 && LA165_0<=101)||LA165_0==105||LA165_0==117||LA165_0==120||LA165_0==122||LA165_0==126||LA165_0==132||LA165_0==135||LA165_0==141||(LA165_0>=143 && LA165_0<=144)||(LA165_0>=147 && LA165_0<=148)||LA165_0==152||LA165_0==154||LA165_0==157||LA165_0==160||LA165_0==162||LA165_0==167||(LA165_0>=171 && LA165_0<=172)||LA165_0==183||LA165_0==190||LA165_0==194||LA165_0==196))
			{
				int LA165_2 = input.LA(2);

				if ((EvaluatePredicate(synpred25_cs_fragment)))
				{
					alt165 = 1;
				}
				else if ((true))
				{
					alt165 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 165, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA165_0==Character_literal||LA165_0==FALSE||LA165_0==Hex_number||(LA165_0>=NULL && LA165_0<=NUMBER)||LA165_0==Real_literal||LA165_0==STRINGLITERAL||LA165_0==TRUE||LA165_0==Verbatim_string_literal) && (EvaluatePredicate(synpred25_cs_fragment)))
			{
				alt165 = 1;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 165, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(165); }
			switch (alt165)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:619:10: ( member_name '{' )=> member_name '{' event_accessor_declarations '}'
				{
				DebugLocation(619, 33);
				PushFollow(Follow._member_name_in_event_declaration5805);
				member_name592=member_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, member_name592.Tree, member_name592, retval);
				DebugLocation(619, 47);
				char_literal593=(IToken)Match(input,197,Follow._197_in_event_declaration5809); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal593_tree = (object)adaptor.Create(char_literal593, retval);
				adaptor.AddChild(root_0, char_literal593_tree);
				}
				DebugLocation(619, 53);
				PushFollow(Follow._event_accessor_declarations_in_event_declaration5813);
				event_accessor_declarations594=event_accessor_declarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, event_accessor_declarations594.Tree, event_accessor_declarations594, retval);
				DebugLocation(619, 83);
				char_literal595=(IToken)Match(input,201,Follow._201_in_event_declaration5817); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal595_tree = (object)adaptor.Create(char_literal595, retval);
				adaptor.AddChild(root_0, char_literal595_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:620:11: variable_declarators ';'
				{
				DebugLocation(620, 11);
				PushFollow(Follow._variable_declarators_in_event_declaration5829);
				variable_declarators596=variable_declarators();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variable_declarators596.Tree, variable_declarators596, retval);
				DebugLocation(620, 34);
				char_literal597=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_event_declaration5833), "SEMI"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal597_tree = (object)adaptor.Create(char_literal597, retval);
				adaptor.AddChild(root_0, char_literal597_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(165); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("event_declaration", 172);
			LeaveRule("event_declaration", 172);
			LeaveRule_event_declaration();
			if (state.backtracking > 0) { Memoize(input, 172, event_declaration_StartIndex); }

		}
		DebugLocation(621, 8);
		} finally { DebugExitRule(GrammarFileName, "event_declaration"); }
		return retval;

	}
	// $ANTLR end "event_declaration"

	partial void EnterRule_event_modifiers();
	partial void LeaveRule_event_modifiers();

	// $ANTLR start "event_modifiers"
	// cs.g:622:1: event_modifiers : ( modifier )+ ;
	[GrammarRule("event_modifiers")]
	public XAstParserRuleReturnScope event_modifiers()
	{
		EnterRule_event_modifiers();
		EnterRule("event_modifiers", 173);
		var retval = new XAstParserRuleReturnScope("event_modifiers");
		
		retval.Start = (IToken)input.LT(1);
		int event_modifiers_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope modifier598 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "event_modifiers");
		DebugLocation(622, 14);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 173)) { return retval; }

			// cs.g:622:16: ( ( modifier )+ )
			DebugEnterAlt(1);
			// cs.g:623:5: ( modifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(623, 5);
			// cs.g:623:5: ( modifier )+
			int cnt166=0;
			try { DebugEnterSubRule(166);
			while (true)
			{
				int alt166=2;
				try { DebugEnterDecision(166, false);
				int LA166_0 = input.LA(1);

				if ((LA166_0==96||LA166_0==125||LA166_0==140||LA166_0==150||LA166_0==156||LA166_0==161||(LA166_0>=163 && LA166_0<=165)||LA166_0==170||LA166_0==176||LA166_0==188||LA166_0==191||LA166_0==193))
				{
					alt166 = 1;
				}


				} finally { DebugExitDecision(166); }
				switch (alt166)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:623:5: modifier
					{
					DebugLocation(623, 5);
					PushFollow(Follow._modifier_in_event_modifiers5854);
					modifier598=modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modifier598.Tree, modifier598, retval);

					}
					break;

				default:
					if (cnt166 >= 1)
						goto loop166;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee166 = new EarlyExitException( 166, input );
					DebugRecognitionException(eee166);
					throw eee166;
				}
				cnt166++;
			}
			loop166:
				;

			} finally { DebugExitSubRule(166); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("event_modifiers", 173);
			LeaveRule("event_modifiers", 173);
			LeaveRule_event_modifiers();
			if (state.backtracking > 0) { Memoize(input, 173, event_modifiers_StartIndex); }

		}
		DebugLocation(623, 14);
		} finally { DebugExitRule(GrammarFileName, "event_modifiers"); }
		return retval;

	}
	// $ANTLR end "event_modifiers"

	partial void EnterRule_event_accessor_declarations();
	partial void LeaveRule_event_accessor_declarations();

	// $ANTLR start "event_accessor_declarations"
	// cs.g:624:1: event_accessor_declarations : ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) ) ;
	[GrammarRule("event_accessor_declarations")]
	public XAstParserRuleReturnScope event_accessor_declarations()
	{
		EnterRule_event_accessor_declarations();
		EnterRule("event_accessor_declarations", 174);
		var retval = new XAstParserRuleReturnScope("event_accessor_declarations");
		
		retval.Start = (IToken)input.LT(1);
		int event_accessor_declarations_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope attributes599 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope add_accessor_declaration600 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attributes601 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope remove_accessor_declaration602 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope remove_accessor_declaration603 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attributes604 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope add_accessor_declaration605 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "event_accessor_declarations");
		DebugLocation(624, 92);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 174)) { return retval; }

			// cs.g:624:28: ( ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) ) )
			DebugEnterAlt(1);
			// cs.g:625:5: ( attributes )? ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(625, 5);
			// cs.g:625:5: ( attributes )?
			int alt167=2;
			try { DebugEnterSubRule(167);
			try { DebugEnterDecision(167, false);
			int LA167_0 = input.LA(1);

			if ((LA167_0==91))
			{
				alt167 = 1;
			}
			} finally { DebugExitDecision(167); }
			switch (alt167)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:625:5: attributes
				{
				DebugLocation(625, 5);
				PushFollow(Follow._attributes_in_event_accessor_declarations5866);
				attributes599=attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attributes599.Tree, attributes599, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(167); }

			DebugLocation(625, 19);
			// cs.g:625:19: ( ( add_accessor_declaration ( attributes )? remove_accessor_declaration ) | ( remove_accessor_declaration ( attributes )? add_accessor_declaration ) )
			int alt170=2;
			try { DebugEnterSubRule(170);
			try { DebugEnterDecision(170, false);
			int LA170_0 = input.LA(1);

			if ((LA170_0==97))
			{
				alt170 = 1;
			}
			else if ((LA170_0==167))
			{
				alt170 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 170, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(170); }
			switch (alt170)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:625:20: ( add_accessor_declaration ( attributes )? remove_accessor_declaration )
				{
				DebugLocation(625, 20);
				// cs.g:625:20: ( add_accessor_declaration ( attributes )? remove_accessor_declaration )
				DebugEnterAlt(1);
				// cs.g:625:21: add_accessor_declaration ( attributes )? remove_accessor_declaration
				{
				DebugLocation(625, 21);
				PushFollow(Follow._add_accessor_declaration_in_event_accessor_declarations5873);
				add_accessor_declaration600=add_accessor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, add_accessor_declaration600.Tree, add_accessor_declaration600, retval);
				DebugLocation(625, 48);
				// cs.g:625:48: ( attributes )?
				int alt168=2;
				try { DebugEnterSubRule(168);
				try { DebugEnterDecision(168, false);
				int LA168_0 = input.LA(1);

				if ((LA168_0==91))
				{
					alt168 = 1;
				}
				} finally { DebugExitDecision(168); }
				switch (alt168)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:625:48: attributes
					{
					DebugLocation(625, 48);
					PushFollow(Follow._attributes_in_event_accessor_declarations5877);
					attributes601=attributes();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attributes601.Tree, attributes601, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(168); }

				DebugLocation(625, 62);
				PushFollow(Follow._remove_accessor_declaration_in_event_accessor_declarations5882);
				remove_accessor_declaration602=remove_accessor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, remove_accessor_declaration602.Tree, remove_accessor_declaration602, retval);

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:626:21: ( remove_accessor_declaration ( attributes )? add_accessor_declaration )
				{
				DebugLocation(626, 21);
				// cs.g:626:21: ( remove_accessor_declaration ( attributes )? add_accessor_declaration )
				DebugEnterAlt(1);
				// cs.g:626:22: remove_accessor_declaration ( attributes )? add_accessor_declaration
				{
				DebugLocation(626, 22);
				PushFollow(Follow._remove_accessor_declaration_in_event_accessor_declarations5906);
				remove_accessor_declaration603=remove_accessor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, remove_accessor_declaration603.Tree, remove_accessor_declaration603, retval);
				DebugLocation(626, 52);
				// cs.g:626:52: ( attributes )?
				int alt169=2;
				try { DebugEnterSubRule(169);
				try { DebugEnterDecision(169, false);
				int LA169_0 = input.LA(1);

				if ((LA169_0==91))
				{
					alt169 = 1;
				}
				} finally { DebugExitDecision(169); }
				switch (alt169)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:626:52: attributes
					{
					DebugLocation(626, 52);
					PushFollow(Follow._attributes_in_event_accessor_declarations5910);
					attributes604=attributes();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attributes604.Tree, attributes604, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(169); }

				DebugLocation(626, 66);
				PushFollow(Follow._add_accessor_declaration_in_event_accessor_declarations5915);
				add_accessor_declaration605=add_accessor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, add_accessor_declaration605.Tree, add_accessor_declaration605, retval);

				}


				}
				break;

			}
			} finally { DebugExitSubRule(170); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("event_accessor_declarations", 174);
			LeaveRule("event_accessor_declarations", 174);
			LeaveRule_event_accessor_declarations();
			if (state.backtracking > 0) { Memoize(input, 174, event_accessor_declarations_StartIndex); }

		}
		DebugLocation(626, 92);
		} finally { DebugExitRule(GrammarFileName, "event_accessor_declarations"); }
		return retval;

	}
	// $ANTLR end "event_accessor_declarations"

	partial void EnterRule_add_accessor_declaration();
	partial void LeaveRule_add_accessor_declaration();

	// $ANTLR start "add_accessor_declaration"
	// cs.g:627:1: add_accessor_declaration : 'add' block ;
	[GrammarRule("add_accessor_declaration")]
	public XAstParserRuleReturnScope add_accessor_declaration()
	{
		EnterRule_add_accessor_declaration();
		EnterRule("add_accessor_declaration", 175);
		var retval = new XAstParserRuleReturnScope("add_accessor_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int add_accessor_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal606 = default(IToken);
		XAstParserRuleReturnScope block607 = default(XAstParserRuleReturnScope);

		object string_literal606_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "add_accessor_declaration");
		DebugLocation(627, 18);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 175)) { return retval; }

			// cs.g:627:25: ( 'add' block )
			DebugEnterAlt(1);
			// cs.g:628:5: 'add' block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(628, 5);
			string_literal606=(IToken)Match(input,97,Follow._97_in_add_accessor_declaration5928); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal606_tree = (object)adaptor.Create(string_literal606, retval);
			adaptor.AddChild(root_0, string_literal606_tree);
			}
			DebugLocation(628, 13);
			PushFollow(Follow._block_in_add_accessor_declaration5932);
			block607=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block607.Tree, block607, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_accessor_declaration", 175);
			LeaveRule("add_accessor_declaration", 175);
			LeaveRule_add_accessor_declaration();
			if (state.backtracking > 0) { Memoize(input, 175, add_accessor_declaration_StartIndex); }

		}
		DebugLocation(628, 18);
		} finally { DebugExitRule(GrammarFileName, "add_accessor_declaration"); }
		return retval;

	}
	// $ANTLR end "add_accessor_declaration"

	partial void EnterRule_remove_accessor_declaration();
	partial void LeaveRule_remove_accessor_declaration();

	// $ANTLR start "remove_accessor_declaration"
	// cs.g:629:1: remove_accessor_declaration : 'remove' block ;
	[GrammarRule("remove_accessor_declaration")]
	public XAstParserRuleReturnScope remove_accessor_declaration()
	{
		EnterRule_remove_accessor_declaration();
		EnterRule("remove_accessor_declaration", 176);
		var retval = new XAstParserRuleReturnScope("remove_accessor_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int remove_accessor_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal608 = default(IToken);
		XAstParserRuleReturnScope block609 = default(XAstParserRuleReturnScope);

		object string_literal608_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "remove_accessor_declaration");
		DebugLocation(629, 21);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 176)) { return retval; }

			// cs.g:629:28: ( 'remove' block )
			DebugEnterAlt(1);
			// cs.g:630:5: 'remove' block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(630, 5);
			string_literal608=(IToken)Match(input,167,Follow._167_in_remove_accessor_declaration5943); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal608_tree = (object)adaptor.Create(string_literal608, retval);
			adaptor.AddChild(root_0, string_literal608_tree);
			}
			DebugLocation(630, 16);
			PushFollow(Follow._block_in_remove_accessor_declaration5947);
			block609=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block609.Tree, block609, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("remove_accessor_declaration", 176);
			LeaveRule("remove_accessor_declaration", 176);
			LeaveRule_remove_accessor_declaration();
			if (state.backtracking > 0) { Memoize(input, 176, remove_accessor_declaration_StartIndex); }

		}
		DebugLocation(630, 21);
		} finally { DebugExitRule(GrammarFileName, "remove_accessor_declaration"); }
		return retval;

	}
	// $ANTLR end "remove_accessor_declaration"

	partial void EnterRule_enum_declaration();
	partial void LeaveRule_enum_declaration();

	// $ANTLR start "enum_declaration"
	// cs.g:635:1: enum_declaration : 'enum' identifier ( enum_base )? enum_body ( ';' )? ;
	[GrammarRule("enum_declaration")]
	public XAstParserRuleReturnScope enum_declaration()
	{
		EnterRule_enum_declaration();
		EnterRule("enum_declaration", 177);
		var retval = new XAstParserRuleReturnScope("enum_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int enum_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal610 = default(IToken);
		IToken char_literal614 = default(IToken);
		XAstParserRuleReturnScope identifier611 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enum_base612 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enum_body613 = default(XAstParserRuleReturnScope);

		object string_literal610_tree = default(object);
		object char_literal614_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enum_declaration");
		DebugLocation(635, 56);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 177)) { return retval; }

			// cs.g:635:17: ( 'enum' identifier ( enum_base )? enum_body ( ';' )? )
			DebugEnterAlt(1);
			// cs.g:636:5: 'enum' identifier ( enum_base )? enum_body ( ';' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(636, 5);
			string_literal610=(IToken)new XToken((IToken)Match(input,ENUM,Follow._ENUM_in_enum_declaration5962), "ENUM"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal610_tree = (object)adaptor.Create(string_literal610, retval);
			adaptor.AddChild(root_0, string_literal610_tree);
			}
			DebugLocation(636, 14);
			PushFollow(Follow._identifier_in_enum_declaration5966);
			identifier611=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier611.Tree, identifier611, retval);
			DebugLocation(636, 27);
			// cs.g:636:27: ( enum_base )?
			int alt171=2;
			try { DebugEnterSubRule(171);
			try { DebugEnterDecision(171, false);
			int LA171_0 = input.LA(1);

			if ((LA171_0==79))
			{
				alt171 = 1;
			}
			} finally { DebugExitDecision(171); }
			switch (alt171)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:636:27: enum_base
				{
				DebugLocation(636, 27);
				PushFollow(Follow._enum_base_in_enum_declaration5970);
				enum_base612=enum_base();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_base612.Tree, enum_base612, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(171); }

			DebugLocation(636, 40);
			PushFollow(Follow._enum_body_in_enum_declaration5975);
			enum_body613=enum_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enum_body613.Tree, enum_body613, retval);
			DebugLocation(636, 52);
			// cs.g:636:52: ( ';' )?
			int alt172=2;
			try { DebugEnterSubRule(172);
			try { DebugEnterDecision(172, false);
			int LA172_0 = input.LA(1);

			if ((LA172_0==SEMI))
			{
				alt172 = 1;
			}
			} finally { DebugExitDecision(172); }
			switch (alt172)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:636:52: ';'
				{
				DebugLocation(636, 52);
				char_literal614=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_enum_declaration5979), "SEMI"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal614_tree = (object)adaptor.Create(char_literal614, retval);
				adaptor.AddChild(root_0, char_literal614_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(172); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_declaration", 177);
			LeaveRule("enum_declaration", 177);
			LeaveRule_enum_declaration();
			if (state.backtracking > 0) { Memoize(input, 177, enum_declaration_StartIndex); }

		}
		DebugLocation(636, 56);
		} finally { DebugExitRule(GrammarFileName, "enum_declaration"); }
		return retval;

	}
	// $ANTLR end "enum_declaration"

	partial void EnterRule_enum_base();
	partial void LeaveRule_enum_base();

	// $ANTLR start "enum_base"
	// cs.g:637:1: enum_base : ':' integral_type ;
	[GrammarRule("enum_base")]
	public XAstParserRuleReturnScope enum_base()
	{
		EnterRule_enum_base();
		EnterRule("enum_base", 178);
		var retval = new XAstParserRuleReturnScope("enum_base");
		
		retval.Start = (IToken)input.LT(1);
		int enum_base_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal615 = default(IToken);
		XAstParserRuleReturnScope integral_type616 = default(XAstParserRuleReturnScope);

		object char_literal615_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enum_base");
		DebugLocation(637, 24);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 178)) { return retval; }

			// cs.g:637:10: ( ':' integral_type )
			DebugEnterAlt(1);
			// cs.g:638:5: ':' integral_type
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(638, 5);
			char_literal615=(IToken)Match(input,79,Follow._79_in_enum_base5991); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal615_tree = (object)adaptor.Create(char_literal615, retval);
			adaptor.AddChild(root_0, char_literal615_tree);
			}
			DebugLocation(638, 11);
			PushFollow(Follow._integral_type_in_enum_base5995);
			integral_type616=integral_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, integral_type616.Tree, integral_type616, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_base", 178);
			LeaveRule("enum_base", 178);
			LeaveRule_enum_base();
			if (state.backtracking > 0) { Memoize(input, 178, enum_base_StartIndex); }

		}
		DebugLocation(638, 24);
		} finally { DebugExitRule(GrammarFileName, "enum_base"); }
		return retval;

	}
	// $ANTLR end "enum_base"

	partial void EnterRule_enum_body();
	partial void LeaveRule_enum_body();

	// $ANTLR start "enum_body"
	// cs.g:639:1: enum_body : '{' ( enum_member_declarations ( ',' )? )? '}' ;
	[GrammarRule("enum_body")]
	public XAstParserRuleReturnScope enum_body()
	{
		EnterRule_enum_body();
		EnterRule("enum_body", 179);
		var retval = new XAstParserRuleReturnScope("enum_body");
		
		retval.Start = (IToken)input.LT(1);
		int enum_body_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal617 = default(IToken);
		IToken char_literal619 = default(IToken);
		IToken char_literal620 = default(IToken);
		XAstParserRuleReturnScope enum_member_declarations618 = default(XAstParserRuleReturnScope);

		object char_literal617_tree = default(object);
		object char_literal619_tree = default(object);
		object char_literal620_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enum_body");
		DebugLocation(639, 47);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 179)) { return retval; }

			// cs.g:639:10: ( '{' ( enum_member_declarations ( ',' )? )? '}' )
			DebugEnterAlt(1);
			// cs.g:640:5: '{' ( enum_member_declarations ( ',' )? )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(640, 5);
			char_literal617=(IToken)Match(input,197,Follow._197_in_enum_body6006); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal617_tree = (object)adaptor.Create(char_literal617, retval);
			adaptor.AddChild(root_0, char_literal617_tree);
			}
			DebugLocation(640, 9);
			// cs.g:640:9: ( enum_member_declarations ( ',' )? )?
			int alt174=2;
			try { DebugEnterSubRule(174);
			try { DebugEnterDecision(174, false);
			int LA174_0 = input.LA(1);

			if ((LA174_0==IDENTIFIER||LA174_0==91||LA174_0==95||(LA174_0>=97 && LA174_0<=98)||(LA174_0>=100 && LA174_0<=101)||LA174_0==105||LA174_0==117||LA174_0==120||LA174_0==122||LA174_0==126||LA174_0==132||LA174_0==135||LA174_0==141||(LA174_0>=143 && LA174_0<=144)||(LA174_0>=147 && LA174_0<=148)||LA174_0==152||LA174_0==154||LA174_0==157||LA174_0==160||LA174_0==162||LA174_0==167||(LA174_0>=171 && LA174_0<=172)||LA174_0==183||LA174_0==190||LA174_0==194||LA174_0==196))
			{
				alt174 = 1;
			}
			} finally { DebugExitDecision(174); }
			switch (alt174)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:640:10: enum_member_declarations ( ',' )?
				{
				DebugLocation(640, 10);
				PushFollow(Follow._enum_member_declarations_in_enum_body6009);
				enum_member_declarations618=enum_member_declarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_member_declarations618.Tree, enum_member_declarations618, retval);
				DebugLocation(640, 35);
				// cs.g:640:35: ( ',' )?
				int alt173=2;
				try { DebugEnterSubRule(173);
				try { DebugEnterDecision(173, false);
				int LA173_0 = input.LA(1);

				if ((LA173_0==74))
				{
					alt173 = 1;
				}
				} finally { DebugExitDecision(173); }
				switch (alt173)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:640:35: ','
					{
					DebugLocation(640, 35);
					char_literal619=(IToken)Match(input,74,Follow._74_in_enum_body6011); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal619_tree = (object)adaptor.Create(char_literal619, retval);
					adaptor.AddChild(root_0, char_literal619_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(173); }


				}
				break;

			}
			} finally { DebugExitSubRule(174); }

			DebugLocation(640, 44);
			char_literal620=(IToken)Match(input,201,Follow._201_in_enum_body6018); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal620_tree = (object)adaptor.Create(char_literal620, retval);
			adaptor.AddChild(root_0, char_literal620_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_body", 179);
			LeaveRule("enum_body", 179);
			LeaveRule_enum_body();
			if (state.backtracking > 0) { Memoize(input, 179, enum_body_StartIndex); }

		}
		DebugLocation(640, 47);
		} finally { DebugExitRule(GrammarFileName, "enum_body"); }
		return retval;

	}
	// $ANTLR end "enum_body"

	partial void EnterRule_enum_member_declarations();
	partial void LeaveRule_enum_member_declarations();

	// $ANTLR start "enum_member_declarations"
	// cs.g:641:1: enum_member_declarations : enum_member_declaration ( ',' enum_member_declaration )* ;
	[GrammarRule("enum_member_declarations")]
	public XAstParserRuleReturnScope enum_member_declarations()
	{
		EnterRule_enum_member_declarations();
		EnterRule("enum_member_declarations", 180);
		var retval = new XAstParserRuleReturnScope("enum_member_declarations");
		
		retval.Start = (IToken)input.LT(1);
		int enum_member_declarations_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal622 = default(IToken);
		XAstParserRuleReturnScope enum_member_declaration621 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enum_member_declaration623 = default(XAstParserRuleReturnScope);

		object char_literal622_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enum_member_declarations");
		DebugLocation(641, 59);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 180)) { return retval; }

			// cs.g:641:25: ( enum_member_declaration ( ',' enum_member_declaration )* )
			DebugEnterAlt(1);
			// cs.g:642:5: enum_member_declaration ( ',' enum_member_declaration )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(642, 5);
			PushFollow(Follow._enum_member_declaration_in_enum_member_declarations6029);
			enum_member_declaration621=enum_member_declaration();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, enum_member_declaration621.Tree, enum_member_declaration621, retval);
			DebugLocation(642, 29);
			// cs.g:642:29: ( ',' enum_member_declaration )*
			try { DebugEnterSubRule(175);
			while (true)
			{
				int alt175=2;
				try { DebugEnterDecision(175, false);
				int LA175_0 = input.LA(1);

				if ((LA175_0==74))
				{
					int LA175_1 = input.LA(2);

					if ((LA175_1==IDENTIFIER||LA175_1==91||LA175_1==95||(LA175_1>=97 && LA175_1<=98)||(LA175_1>=100 && LA175_1<=101)||LA175_1==105||LA175_1==117||LA175_1==120||LA175_1==122||LA175_1==126||LA175_1==132||LA175_1==135||LA175_1==141||(LA175_1>=143 && LA175_1<=144)||(LA175_1>=147 && LA175_1<=148)||LA175_1==152||LA175_1==154||LA175_1==157||LA175_1==160||LA175_1==162||LA175_1==167||(LA175_1>=171 && LA175_1<=172)||LA175_1==183||LA175_1==190||LA175_1==194||LA175_1==196))
					{
						alt175 = 1;
					}


				}


				} finally { DebugExitDecision(175); }
				switch ( alt175 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:642:30: ',' enum_member_declaration
					{
					DebugLocation(642, 30);
					char_literal622=(IToken)Match(input,74,Follow._74_in_enum_member_declarations6032); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal622_tree = (object)adaptor.Create(char_literal622, retval);
					adaptor.AddChild(root_0, char_literal622_tree);
					}
					DebugLocation(642, 34);
					PushFollow(Follow._enum_member_declaration_in_enum_member_declarations6034);
					enum_member_declaration623=enum_member_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, enum_member_declaration623.Tree, enum_member_declaration623, retval);

					}
					break;

				default:
					goto loop175;
				}
			}

			loop175:
				;

			} finally { DebugExitSubRule(175); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_member_declarations", 180);
			LeaveRule("enum_member_declarations", 180);
			LeaveRule_enum_member_declarations();
			if (state.backtracking > 0) { Memoize(input, 180, enum_member_declarations_StartIndex); }

		}
		DebugLocation(642, 59);
		} finally { DebugExitRule(GrammarFileName, "enum_member_declarations"); }
		return retval;

	}
	// $ANTLR end "enum_member_declarations"

	partial void EnterRule_enum_member_declaration();
	partial void LeaveRule_enum_member_declaration();

	// $ANTLR start "enum_member_declaration"
	// cs.g:643:1: enum_member_declaration : ( attributes )? identifier ( '=' expression )? ;
	[GrammarRule("enum_member_declaration")]
	public XAstParserRuleReturnScope enum_member_declaration()
	{
		EnterRule_enum_member_declaration();
		EnterRule("enum_member_declaration", 181);
		var retval = new XAstParserRuleReturnScope("enum_member_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int enum_member_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal626 = default(IToken);
		XAstParserRuleReturnScope attributes624 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier625 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression627 = default(XAstParserRuleReturnScope);

		object char_literal626_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "enum_member_declaration");
		DebugLocation(643, 51);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 181)) { return retval; }

			// cs.g:643:24: ( ( attributes )? identifier ( '=' expression )? )
			DebugEnterAlt(1);
			// cs.g:644:5: ( attributes )? identifier ( '=' expression )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(644, 5);
			// cs.g:644:5: ( attributes )?
			int alt176=2;
			try { DebugEnterSubRule(176);
			try { DebugEnterDecision(176, false);
			int LA176_0 = input.LA(1);

			if ((LA176_0==91))
			{
				alt176 = 1;
			}
			} finally { DebugExitDecision(176); }
			switch (alt176)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:644:5: attributes
				{
				DebugLocation(644, 5);
				PushFollow(Follow._attributes_in_enum_member_declaration6047);
				attributes624=attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attributes624.Tree, attributes624, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(176); }

			DebugLocation(644, 19);
			PushFollow(Follow._identifier_in_enum_member_declaration6052);
			identifier625=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier625.Tree, identifier625, retval);
			DebugLocation(644, 32);
			// cs.g:644:32: ( '=' expression )?
			int alt177=2;
			try { DebugEnterSubRule(177);
			try { DebugEnterDecision(177, false);
			int LA177_0 = input.LA(1);

			if ((LA177_0==85))
			{
				alt177 = 1;
			}
			} finally { DebugExitDecision(177); }
			switch (alt177)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:644:33: '=' expression
				{
				DebugLocation(644, 33);
				char_literal626=(IToken)Match(input,85,Follow._85_in_enum_member_declaration6057); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal626_tree = (object)adaptor.Create(char_literal626, retval);
				adaptor.AddChild(root_0, char_literal626_tree);
				}
				DebugLocation(644, 39);
				PushFollow(Follow._expression_in_enum_member_declaration6061);
				expression627=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression627.Tree, expression627, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(177); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_member_declaration", 181);
			LeaveRule("enum_member_declaration", 181);
			LeaveRule_enum_member_declaration();
			if (state.backtracking > 0) { Memoize(input, 181, enum_member_declaration_StartIndex); }

		}
		DebugLocation(644, 51);
		} finally { DebugExitRule(GrammarFileName, "enum_member_declaration"); }
		return retval;

	}
	// $ANTLR end "enum_member_declaration"

	partial void EnterRule_integral_type();
	partial void LeaveRule_integral_type();

	// $ANTLR start "integral_type"
	// cs.g:649:1: integral_type : ( 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' );
	[GrammarRule("integral_type")]
	public XAstParserRuleReturnScope integral_type()
	{
		EnterRule_integral_type();
		EnterRule("integral_type", 182);
		var retval = new XAstParserRuleReturnScope("integral_type");
		
		retval.Start = (IToken)input.LT(1);
		int integral_type_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set628 = default(IToken);

		object set628_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "integral_type");
		DebugLocation(649, 87);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 182)) { return retval; }

			// cs.g:649:14: ( 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(649, 14);

			set628=(IToken)input.LT(1);
			if (input.LA(1)==106||input.LA(1)==109||input.LA(1)==138||input.LA(1)==146||input.LA(1)==169||input.LA(1)==173||(input.LA(1)>=185 && input.LA(1)<=186)||input.LA(1)==189)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set628, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("integral_type", 182);
			LeaveRule("integral_type", 182);
			LeaveRule_integral_type();
			if (state.backtracking > 0) { Memoize(input, 182, integral_type_StartIndex); }

		}
		DebugLocation(650, 87);
		} finally { DebugExitRule(GrammarFileName, "integral_type"); }
		return retval;

	}
	// $ANTLR end "integral_type"

	partial void EnterRule_delegate_declaration();
	partial void LeaveRule_delegate_declaration();

	// $ANTLR start "delegate_declaration"
	// cs.g:653:1: delegate_declaration : 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' ;
	[GrammarRule("delegate_declaration")]
	public XAstParserRuleReturnScope delegate_declaration()
	{
		EnterRule_delegate_declaration();
		EnterRule("delegate_declaration", 183);
		var retval = new XAstParserRuleReturnScope("delegate_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int delegate_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal629 = default(IToken);
		IToken char_literal633 = default(IToken);
		IToken char_literal635 = default(IToken);
		IToken char_literal637 = default(IToken);
		XAstParserRuleReturnScope return_type630 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier631 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variant_generic_parameter_list632 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope formal_parameter_list634 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_parameter_constraints_clauses636 = default(XAstParserRuleReturnScope);

		object string_literal629_tree = default(object);
		object char_literal633_tree = default(object);
		object char_literal635_tree = default(object);
		object char_literal637_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "delegate_declaration");
		DebugLocation(653, 87);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 183)) { return retval; }

			// cs.g:653:21: ( 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' )
			DebugEnterAlt(1);
			// cs.g:654:5: 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(654, 5);
			string_literal629=(IToken)Match(input,116,Follow._116_in_delegate_declaration6124); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal629_tree = (object)adaptor.Create(string_literal629, retval);
			adaptor.AddChild(root_0, string_literal629_tree);
			}
			DebugLocation(654, 18);
			PushFollow(Follow._return_type_in_delegate_declaration6128);
			return_type630=return_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, return_type630.Tree, return_type630, retval);
			DebugLocation(654, 32);
			PushFollow(Follow._identifier_in_delegate_declaration6132);
			identifier631=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier631.Tree, identifier631, retval);
			DebugLocation(654, 44);
			// cs.g:654:44: ( variant_generic_parameter_list )?
			int alt178=2;
			try { DebugEnterSubRule(178);
			try { DebugEnterDecision(178, false);
			int LA178_0 = input.LA(1);

			if ((LA178_0==81))
			{
				alt178 = 1;
			}
			} finally { DebugExitDecision(178); }
			switch (alt178)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:654:44: variant_generic_parameter_list
				{
				DebugLocation(654, 44);
				PushFollow(Follow._variant_generic_parameter_list_in_delegate_declaration6135);
				variant_generic_parameter_list632=variant_generic_parameter_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variant_generic_parameter_list632.Tree, variant_generic_parameter_list632, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(178); }

			DebugLocation(655, 9);
			char_literal633=(IToken)Match(input,68,Follow._68_in_delegate_declaration6149); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal633_tree = (object)adaptor.Create(char_literal633, retval);
			adaptor.AddChild(root_0, char_literal633_tree);
			}
			DebugLocation(655, 15);
			// cs.g:655:15: ( formal_parameter_list )?
			int alt179=2;
			try { DebugEnterSubRule(179);
			try { DebugEnterDecision(179, false);
			int LA179_0 = input.LA(1);

			if ((LA179_0==IDENTIFIER||LA179_0==91||LA179_0==95||(LA179_0>=97 && LA179_0<=98)||(LA179_0>=100 && LA179_0<=101)||LA179_0==103||(LA179_0>=105 && LA179_0<=106)||LA179_0==109||LA179_0==114||LA179_0==117||(LA179_0>=119 && LA179_0<=120)||LA179_0==122||LA179_0==126||LA179_0==129||LA179_0==132||LA179_0==135||LA179_0==138||LA179_0==141||(LA179_0>=143 && LA179_0<=144)||(LA179_0>=146 && LA179_0<=148)||(LA179_0>=151 && LA179_0<=152)||(LA179_0>=154 && LA179_0<=155)||(LA179_0>=157 && LA179_0<=158)||LA179_0==160||LA179_0==162||(LA179_0>=166 && LA179_0<=167)||LA179_0==169||(LA179_0>=171 && LA179_0<=173)||LA179_0==177||LA179_0==180||LA179_0==183||(LA179_0>=185 && LA179_0<=186)||(LA179_0>=189 && LA179_0<=190)||LA179_0==192||LA179_0==194||LA179_0==196))
			{
				alt179 = 1;
			}
			} finally { DebugExitDecision(179); }
			switch (alt179)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:655:15: formal_parameter_list
				{
				DebugLocation(655, 15);
				PushFollow(Follow._formal_parameter_list_in_delegate_declaration6153);
				formal_parameter_list634=formal_parameter_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, formal_parameter_list634.Tree, formal_parameter_list634, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(179); }

			DebugLocation(655, 40);
			char_literal635=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_delegate_declaration6158), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal635_tree = (object)adaptor.Create(char_literal635, retval);
			adaptor.AddChild(root_0, char_literal635_tree);
			}
			DebugLocation(655, 46);
			// cs.g:655:46: ( type_parameter_constraints_clauses )?
			int alt180=2;
			try { DebugEnterSubRule(180);
			try { DebugEnterDecision(180, false);
			int LA180_0 = input.LA(1);

			if ((LA180_0==194))
			{
				alt180 = 1;
			}
			} finally { DebugExitDecision(180); }
			switch (alt180)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:655:46: type_parameter_constraints_clauses
				{
				DebugLocation(655, 46);
				PushFollow(Follow._type_parameter_constraints_clauses_in_delegate_declaration6162);
				type_parameter_constraints_clauses636=type_parameter_constraints_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraints_clauses636.Tree, type_parameter_constraints_clauses636, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(180); }

			DebugLocation(655, 84);
			char_literal637=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_delegate_declaration6167), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal637_tree = (object)adaptor.Create(char_literal637, retval);
			adaptor.AddChild(root_0, char_literal637_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("delegate_declaration", 183);
			LeaveRule("delegate_declaration", 183);
			LeaveRule_delegate_declaration();
			if (state.backtracking > 0) { Memoize(input, 183, delegate_declaration_StartIndex); }

		}
		DebugLocation(655, 87);
		} finally { DebugExitRule(GrammarFileName, "delegate_declaration"); }
		return retval;

	}
	// $ANTLR end "delegate_declaration"

	partial void EnterRule_delegate_modifiers();
	partial void LeaveRule_delegate_modifiers();

	// $ANTLR start "delegate_modifiers"
	// cs.g:656:1: delegate_modifiers : ( modifier )+ ;
	[GrammarRule("delegate_modifiers")]
	public XAstParserRuleReturnScope delegate_modifiers()
	{
		EnterRule_delegate_modifiers();
		EnterRule("delegate_modifiers", 184);
		var retval = new XAstParserRuleReturnScope("delegate_modifiers");
		
		retval.Start = (IToken)input.LT(1);
		int delegate_modifiers_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope modifier638 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "delegate_modifiers");
		DebugLocation(656, 14);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 184)) { return retval; }

			// cs.g:656:19: ( ( modifier )+ )
			DebugEnterAlt(1);
			// cs.g:657:5: ( modifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(657, 5);
			// cs.g:657:5: ( modifier )+
			int cnt181=0;
			try { DebugEnterSubRule(181);
			while (true)
			{
				int alt181=2;
				try { DebugEnterDecision(181, false);
				int LA181_0 = input.LA(1);

				if ((LA181_0==96||LA181_0==125||LA181_0==140||LA181_0==150||LA181_0==156||LA181_0==161||(LA181_0>=163 && LA181_0<=165)||LA181_0==170||LA181_0==176||LA181_0==188||LA181_0==191||LA181_0==193))
				{
					alt181 = 1;
				}


				} finally { DebugExitDecision(181); }
				switch (alt181)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:657:5: modifier
					{
					DebugLocation(657, 5);
					PushFollow(Follow._modifier_in_delegate_modifiers6178);
					modifier638=modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modifier638.Tree, modifier638, retval);

					}
					break;

				default:
					if (cnt181 >= 1)
						goto loop181;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee181 = new EarlyExitException( 181, input );
					DebugRecognitionException(eee181);
					throw eee181;
				}
				cnt181++;
			}
			loop181:
				;

			} finally { DebugExitSubRule(181); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("delegate_modifiers", 184);
			LeaveRule("delegate_modifiers", 184);
			LeaveRule_delegate_modifiers();
			if (state.backtracking > 0) { Memoize(input, 184, delegate_modifiers_StartIndex); }

		}
		DebugLocation(657, 14);
		} finally { DebugExitRule(GrammarFileName, "delegate_modifiers"); }
		return retval;

	}
	// $ANTLR end "delegate_modifiers"

	partial void EnterRule_variant_generic_parameter_list();
	partial void LeaveRule_variant_generic_parameter_list();

	// $ANTLR start "variant_generic_parameter_list"
	// cs.g:659:1: variant_generic_parameter_list : '<' variant_type_parameters '>' ;
	[GrammarRule("variant_generic_parameter_list")]
	public XAstParserRuleReturnScope variant_generic_parameter_list()
	{
		EnterRule_variant_generic_parameter_list();
		EnterRule("variant_generic_parameter_list", 185);
		var retval = new XAstParserRuleReturnScope("variant_generic_parameter_list");
		
		retval.Start = (IToken)input.LT(1);
		int variant_generic_parameter_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal639 = default(IToken);
		IToken char_literal641 = default(IToken);
		XAstParserRuleReturnScope variant_type_parameters640 = default(XAstParserRuleReturnScope);

		object char_literal639_tree = default(object);
		object char_literal641_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variant_generic_parameter_list");
		DebugLocation(659, 40);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 185)) { return retval; }

			// cs.g:659:31: ( '<' variant_type_parameters '>' )
			DebugEnterAlt(1);
			// cs.g:660:5: '<' variant_type_parameters '>'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(660, 5);
			char_literal639=(IToken)Match(input,81,Follow._81_in_variant_generic_parameter_list6191); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal639_tree = (object)adaptor.Create(char_literal639, retval);
			adaptor.AddChild(root_0, char_literal639_tree);
			}
			DebugLocation(660, 11);
			PushFollow(Follow._variant_type_parameters_in_variant_generic_parameter_list6195);
			variant_type_parameters640=variant_type_parameters();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variant_type_parameters640.Tree, variant_type_parameters640, retval);
			DebugLocation(660, 37);
			char_literal641=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_variant_generic_parameter_list6199), "GT"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal641_tree = (object)adaptor.Create(char_literal641, retval);
			adaptor.AddChild(root_0, char_literal641_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variant_generic_parameter_list", 185);
			LeaveRule("variant_generic_parameter_list", 185);
			LeaveRule_variant_generic_parameter_list();
			if (state.backtracking > 0) { Memoize(input, 185, variant_generic_parameter_list_StartIndex); }

		}
		DebugLocation(660, 40);
		} finally { DebugExitRule(GrammarFileName, "variant_generic_parameter_list"); }
		return retval;

	}
	// $ANTLR end "variant_generic_parameter_list"

	partial void EnterRule_variant_type_parameters();
	partial void LeaveRule_variant_type_parameters();

	// $ANTLR start "variant_type_parameters"
	// cs.g:661:1: variant_type_parameters : variant_type_variable_name ( ',' variant_type_variable_name )* ;
	[GrammarRule("variant_type_parameters")]
	public XAstParserRuleReturnScope variant_type_parameters()
	{
		EnterRule_variant_type_parameters();
		EnterRule("variant_type_parameters", 186);
		var retval = new XAstParserRuleReturnScope("variant_type_parameters");
		
		retval.Start = (IToken)input.LT(1);
		int variant_type_parameters_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal643 = default(IToken);
		XAstParserRuleReturnScope variant_type_variable_name642 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variant_type_variable_name644 = default(XAstParserRuleReturnScope);

		object char_literal643_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variant_type_parameters");
		DebugLocation(661, 65);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 186)) { return retval; }

			// cs.g:661:24: ( variant_type_variable_name ( ',' variant_type_variable_name )* )
			DebugEnterAlt(1);
			// cs.g:662:5: variant_type_variable_name ( ',' variant_type_variable_name )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(662, 5);
			PushFollow(Follow._variant_type_variable_name_in_variant_type_parameters6210);
			variant_type_variable_name642=variant_type_variable_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, variant_type_variable_name642.Tree, variant_type_variable_name642, retval);
			DebugLocation(662, 32);
			// cs.g:662:32: ( ',' variant_type_variable_name )*
			try { DebugEnterSubRule(182);
			while (true)
			{
				int alt182=2;
				try { DebugEnterDecision(182, false);
				int LA182_0 = input.LA(1);

				if ((LA182_0==74))
				{
					alt182 = 1;
				}


				} finally { DebugExitDecision(182); }
				switch ( alt182 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:662:33: ',' variant_type_variable_name
					{
					DebugLocation(662, 33);
					char_literal643=(IToken)Match(input,74,Follow._74_in_variant_type_parameters6213); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal643_tree = (object)adaptor.Create(char_literal643, retval);
					adaptor.AddChild(root_0, char_literal643_tree);
					}
					DebugLocation(662, 37);
					PushFollow(Follow._variant_type_variable_name_in_variant_type_parameters6215);
					variant_type_variable_name644=variant_type_variable_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, variant_type_variable_name644.Tree, variant_type_variable_name644, retval);

					}
					break;

				default:
					goto loop182;
				}
			}

			loop182:
				;

			} finally { DebugExitSubRule(182); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variant_type_parameters", 186);
			LeaveRule("variant_type_parameters", 186);
			LeaveRule_variant_type_parameters();
			if (state.backtracking > 0) { Memoize(input, 186, variant_type_parameters_StartIndex); }

		}
		DebugLocation(662, 65);
		} finally { DebugExitRule(GrammarFileName, "variant_type_parameters"); }
		return retval;

	}
	// $ANTLR end "variant_type_parameters"

	partial void EnterRule_variant_type_variable_name();
	partial void LeaveRule_variant_type_variable_name();

	// $ANTLR start "variant_type_variable_name"
	// cs.g:663:1: variant_type_variable_name : ( attributes )? ( variance_annotation )? type_variable_name ;
	[GrammarRule("variant_type_variable_name")]
	public XAstParserRuleReturnScope variant_type_variable_name()
	{
		EnterRule_variant_type_variable_name();
		EnterRule("variant_type_variable_name", 187);
		var retval = new XAstParserRuleReturnScope("variant_type_variable_name");
		
		retval.Start = (IToken)input.LT(1);
		int variant_type_variable_name_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope attributes645 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variance_annotation646 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_variable_name647 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "variant_type_variable_name");
		DebugLocation(663, 60);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 187)) { return retval; }

			// cs.g:663:27: ( ( attributes )? ( variance_annotation )? type_variable_name )
			DebugEnterAlt(1);
			// cs.g:664:5: ( attributes )? ( variance_annotation )? type_variable_name
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(664, 5);
			// cs.g:664:5: ( attributes )?
			int alt183=2;
			try { DebugEnterSubRule(183);
			try { DebugEnterDecision(183, false);
			int LA183_0 = input.LA(1);

			if ((LA183_0==91))
			{
				alt183 = 1;
			}
			} finally { DebugExitDecision(183); }
			switch (alt183)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:664:5: attributes
				{
				DebugLocation(664, 5);
				PushFollow(Follow._attributes_in_variant_type_variable_name6228);
				attributes645=attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attributes645.Tree, attributes645, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(183); }

			DebugLocation(664, 19);
			// cs.g:664:19: ( variance_annotation )?
			int alt184=2;
			try { DebugEnterSubRule(184);
			try { DebugEnterDecision(184, false);
			int LA184_0 = input.LA(1);

			if ((LA184_0==137||LA184_0==155))
			{
				alt184 = 1;
			}
			} finally { DebugExitDecision(184); }
			switch (alt184)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:664:19: variance_annotation
				{
				DebugLocation(664, 19);
				PushFollow(Follow._variance_annotation_in_variant_type_variable_name6233);
				variance_annotation646=variance_annotation();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variance_annotation646.Tree, variance_annotation646, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(184); }

			DebugLocation(664, 42);
			PushFollow(Follow._type_variable_name_in_variant_type_variable_name6238);
			type_variable_name647=type_variable_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_variable_name647.Tree, type_variable_name647, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variant_type_variable_name", 187);
			LeaveRule("variant_type_variable_name", 187);
			LeaveRule_variant_type_variable_name();
			if (state.backtracking > 0) { Memoize(input, 187, variant_type_variable_name_StartIndex); }

		}
		DebugLocation(664, 60);
		} finally { DebugExitRule(GrammarFileName, "variant_type_variable_name"); }
		return retval;

	}
	// $ANTLR end "variant_type_variable_name"

	partial void EnterRule_variance_annotation();
	partial void LeaveRule_variance_annotation();

	// $ANTLR start "variance_annotation"
	// cs.g:665:1: variance_annotation : ( 'in' | 'out' );
	[GrammarRule("variance_annotation")]
	public XAstParserRuleReturnScope variance_annotation()
	{
		EnterRule_variance_annotation();
		EnterRule("variance_annotation", 188);
		var retval = new XAstParserRuleReturnScope("variance_annotation");
		
		retval.Start = (IToken)input.LT(1);
		int variance_annotation_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set648 = default(IToken);

		object set648_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "variance_annotation");
		DebugLocation(665, 17);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 188)) { return retval; }

			// cs.g:665:20: ( 'in' | 'out' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(665, 20);

			set648=(IToken)input.LT(1);
			if (input.LA(1)==137||input.LA(1)==155)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set648, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("variance_annotation", 188);
			LeaveRule("variance_annotation", 188);
			LeaveRule_variance_annotation();
			if (state.backtracking > 0) { Memoize(input, 188, variance_annotation_StartIndex); }

		}
		DebugLocation(666, 17);
		} finally { DebugExitRule(GrammarFileName, "variance_annotation"); }
		return retval;

	}
	// $ANTLR end "variance_annotation"

	partial void EnterRule_type_parameter_constraints_clauses();
	partial void LeaveRule_type_parameter_constraints_clauses();

	// $ANTLR start "type_parameter_constraints_clauses"
	// cs.g:668:1: type_parameter_constraints_clauses : type_parameter_constraints_clause ( ',' type_parameter_constraints_clause )* ;
	[GrammarRule("type_parameter_constraints_clauses")]
	public XAstParserRuleReturnScope type_parameter_constraints_clauses()
	{
		EnterRule_type_parameter_constraints_clauses();
		EnterRule("type_parameter_constraints_clauses", 189);
		var retval = new XAstParserRuleReturnScope("type_parameter_constraints_clauses");
		
		retval.Start = (IToken)input.LT(1);
		int type_parameter_constraints_clauses_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal650 = default(IToken);
		XAstParserRuleReturnScope type_parameter_constraints_clause649 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_parameter_constraints_clause651 = default(XAstParserRuleReturnScope);

		object char_literal650_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_parameter_constraints_clauses");
		DebugLocation(668, 83);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 189)) { return retval; }

			// cs.g:668:35: ( type_parameter_constraints_clause ( ',' type_parameter_constraints_clause )* )
			DebugEnterAlt(1);
			// cs.g:669:5: type_parameter_constraints_clause ( ',' type_parameter_constraints_clause )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(669, 5);
			PushFollow(Follow._type_parameter_constraints_clause_in_type_parameter_constraints_clauses6265);
			type_parameter_constraints_clause649=type_parameter_constraints_clause();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraints_clause649.Tree, type_parameter_constraints_clause649, retval);
			DebugLocation(669, 41);
			// cs.g:669:41: ( ',' type_parameter_constraints_clause )*
			try { DebugEnterSubRule(185);
			while (true)
			{
				int alt185=2;
				try { DebugEnterDecision(185, false);
				int LA185_0 = input.LA(1);

				if ((LA185_0==74))
				{
					alt185 = 1;
				}


				} finally { DebugExitDecision(185); }
				switch ( alt185 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:669:42: ',' type_parameter_constraints_clause
					{
					DebugLocation(669, 42);
					char_literal650=(IToken)Match(input,74,Follow._74_in_type_parameter_constraints_clauses6270); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal650_tree = (object)adaptor.Create(char_literal650, retval);
					adaptor.AddChild(root_0, char_literal650_tree);
					}
					DebugLocation(669, 48);
					PushFollow(Follow._type_parameter_constraints_clause_in_type_parameter_constraints_clauses6274);
					type_parameter_constraints_clause651=type_parameter_constraints_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraints_clause651.Tree, type_parameter_constraints_clause651, retval);

					}
					break;

				default:
					goto loop185;
				}
			}

			loop185:
				;

			} finally { DebugExitSubRule(185); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_parameter_constraints_clauses", 189);
			LeaveRule("type_parameter_constraints_clauses", 189);
			LeaveRule_type_parameter_constraints_clauses();
			if (state.backtracking > 0) { Memoize(input, 189, type_parameter_constraints_clauses_StartIndex); }

		}
		DebugLocation(669, 83);
		} finally { DebugExitRule(GrammarFileName, "type_parameter_constraints_clauses"); }
		return retval;

	}
	// $ANTLR end "type_parameter_constraints_clauses"

	partial void EnterRule_type_parameter_constraints_clause();
	partial void LeaveRule_type_parameter_constraints_clause();

	// $ANTLR start "type_parameter_constraints_clause"
	// cs.g:670:1: type_parameter_constraints_clause : 'where' type_variable_name ':' type_parameter_constraint_list ;
	[GrammarRule("type_parameter_constraints_clause")]
	public XAstParserRuleReturnScope type_parameter_constraints_clause()
	{
		EnterRule_type_parameter_constraints_clause();
		EnterRule("type_parameter_constraints_clause", 190);
		var retval = new XAstParserRuleReturnScope("type_parameter_constraints_clause");
		
		retval.Start = (IToken)input.LT(1);
		int type_parameter_constraints_clause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal652 = default(IToken);
		IToken char_literal654 = default(IToken);
		XAstParserRuleReturnScope type_variable_name653 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_parameter_constraint_list655 = default(XAstParserRuleReturnScope);

		object string_literal652_tree = default(object);
		object char_literal654_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_parameter_constraints_clause");
		DebugLocation(670, 72);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 190)) { return retval; }

			// cs.g:670:34: ( 'where' type_variable_name ':' type_parameter_constraint_list )
			DebugEnterAlt(1);
			// cs.g:671:5: 'where' type_variable_name ':' type_parameter_constraint_list
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(671, 5);
			string_literal652=(IToken)Match(input,194,Follow._194_in_type_parameter_constraints_clause6287); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal652_tree = (object)adaptor.Create(string_literal652, retval);
			adaptor.AddChild(root_0, string_literal652_tree);
			}
			DebugLocation(671, 15);
			PushFollow(Follow._type_variable_name_in_type_parameter_constraints_clause6291);
			type_variable_name653=type_variable_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_variable_name653.Tree, type_variable_name653, retval);
			DebugLocation(671, 36);
			char_literal654=(IToken)Match(input,79,Follow._79_in_type_parameter_constraints_clause6295); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal654_tree = (object)adaptor.Create(char_literal654, retval);
			adaptor.AddChild(root_0, char_literal654_tree);
			}
			DebugLocation(671, 42);
			PushFollow(Follow._type_parameter_constraint_list_in_type_parameter_constraints_clause6299);
			type_parameter_constraint_list655=type_parameter_constraint_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraint_list655.Tree, type_parameter_constraint_list655, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_parameter_constraints_clause", 190);
			LeaveRule("type_parameter_constraints_clause", 190);
			LeaveRule_type_parameter_constraints_clause();
			if (state.backtracking > 0) { Memoize(input, 190, type_parameter_constraints_clause_StartIndex); }

		}
		DebugLocation(671, 72);
		} finally { DebugExitRule(GrammarFileName, "type_parameter_constraints_clause"); }
		return retval;

	}
	// $ANTLR end "type_parameter_constraints_clause"

	partial void EnterRule_type_parameter_constraint_list();
	partial void LeaveRule_type_parameter_constraint_list();

	// $ANTLR start "type_parameter_constraint_list"
	// cs.g:673:1: type_parameter_constraint_list : ( ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )? | secondary_constraint_list ( ',' constructor_constraint )? | constructor_constraint );
	[GrammarRule("type_parameter_constraint_list")]
	public XAstParserRuleReturnScope type_parameter_constraint_list()
	{
		EnterRule_type_parameter_constraint_list();
		EnterRule("type_parameter_constraint_list", 191);
		var retval = new XAstParserRuleReturnScope("type_parameter_constraint_list");
		
		retval.Start = (IToken)input.LT(1);
		int type_parameter_constraint_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set656 = default(IToken);
		IToken char_literal657 = default(IToken);
		IToken char_literal659 = default(IToken);
		IToken char_literal662 = default(IToken);
		XAstParserRuleReturnScope secondary_constraint_list658 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constructor_constraint660 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope secondary_constraint_list661 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constructor_constraint663 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constructor_constraint664 = default(XAstParserRuleReturnScope);

		object set656_tree = default(object);
		object char_literal657_tree = default(object);
		object char_literal659_tree = default(object);
		object char_literal662_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "type_parameter_constraint_list");
		DebugLocation(673, 29);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 191)) { return retval; }

			// cs.g:673:31: ( ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )? | secondary_constraint_list ( ',' constructor_constraint )? | constructor_constraint )
			int alt189=3;
			try { DebugEnterDecision(189, false);
			switch (input.LA(1))
			{
			case 111:
			case 178:
				{
				alt189 = 1;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				alt189 = 2;
				}
				break;
			case 150:
				{
				alt189 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 189, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(189); }
			switch (alt189)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:674:5: ( 'class' | 'struct' ) ( ',' secondary_constraint_list )? ( ',' constructor_constraint )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(674, 5);

				set656=(IToken)input.LT(1);
				if (input.LA(1)==111||input.LA(1)==178)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set656, retval));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(674, 28);
				// cs.g:674:28: ( ',' secondary_constraint_list )?
				int alt186=2;
				try { DebugEnterSubRule(186);
				try { DebugEnterDecision(186, false);
				int LA186_0 = input.LA(1);

				if ((LA186_0==74))
				{
					int LA186_1 = input.LA(2);

					if ((LA186_1==194))
					{
						int LA186_3 = input.LA(3);

						if ((LA186_3==DOT||LA186_3==SEMI||LA186_3==74||(LA186_3>=80 && LA186_3<=81)||LA186_3==197))
						{
							alt186 = 1;
						}
					}
					else if ((LA186_1==IDENTIFIER||LA186_1==95||(LA186_1>=97 && LA186_1<=98)||(LA186_1>=100 && LA186_1<=101)||LA186_1==105||LA186_1==117||LA186_1==120||LA186_1==122||LA186_1==126||LA186_1==132||LA186_1==135||LA186_1==141||(LA186_1>=143 && LA186_1<=144)||(LA186_1>=147 && LA186_1<=148)||LA186_1==152||LA186_1==154||LA186_1==157||LA186_1==160||LA186_1==162||LA186_1==167||(LA186_1>=171 && LA186_1<=172)||LA186_1==183||LA186_1==190||LA186_1==196))
					{
						alt186 = 1;
					}
				}
				} finally { DebugExitDecision(186); }
				switch (alt186)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:674:29: ',' secondary_constraint_list
					{
					DebugLocation(674, 29);
					char_literal657=(IToken)Match(input,74,Follow._74_in_type_parameter_constraint_list6373); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal657_tree = (object)adaptor.Create(char_literal657, retval);
					adaptor.AddChild(root_0, char_literal657_tree);
					}
					DebugLocation(674, 35);
					PushFollow(Follow._secondary_constraint_list_in_type_parameter_constraint_list6377);
					secondary_constraint_list658=secondary_constraint_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, secondary_constraint_list658.Tree, secondary_constraint_list658, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(186); }

				DebugLocation(674, 65);
				// cs.g:674:65: ( ',' constructor_constraint )?
				int alt187=2;
				try { DebugEnterSubRule(187);
				try { DebugEnterDecision(187, false);
				int LA187_0 = input.LA(1);

				if ((LA187_0==74))
				{
					int LA187_1 = input.LA(2);

					if ((LA187_1==150))
					{
						alt187 = 1;
					}
				}
				} finally { DebugExitDecision(187); }
				switch (alt187)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:674:66: ',' constructor_constraint
					{
					DebugLocation(674, 66);
					char_literal659=(IToken)Match(input,74,Follow._74_in_type_parameter_constraint_list6384); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal659_tree = (object)adaptor.Create(char_literal659, retval);
					adaptor.AddChild(root_0, char_literal659_tree);
					}
					DebugLocation(674, 72);
					PushFollow(Follow._constructor_constraint_in_type_parameter_constraint_list6388);
					constructor_constraint660=constructor_constraint();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constructor_constraint660.Tree, constructor_constraint660, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(187); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:675:7: secondary_constraint_list ( ',' constructor_constraint )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(675, 7);
				PushFollow(Follow._secondary_constraint_list_in_type_parameter_constraint_list6398);
				secondary_constraint_list661=secondary_constraint_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, secondary_constraint_list661.Tree, secondary_constraint_list661, retval);
				DebugLocation(675, 35);
				// cs.g:675:35: ( ',' constructor_constraint )?
				int alt188=2;
				try { DebugEnterSubRule(188);
				try { DebugEnterDecision(188, false);
				int LA188_0 = input.LA(1);

				if ((LA188_0==74))
				{
					int LA188_1 = input.LA(2);

					if ((LA188_1==150))
					{
						alt188 = 1;
					}
				}
				} finally { DebugExitDecision(188); }
				switch (alt188)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:675:36: ',' constructor_constraint
					{
					DebugLocation(675, 36);
					char_literal662=(IToken)Match(input,74,Follow._74_in_type_parameter_constraint_list6403); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal662_tree = (object)adaptor.Create(char_literal662, retval);
					adaptor.AddChild(root_0, char_literal662_tree);
					}
					DebugLocation(675, 42);
					PushFollow(Follow._constructor_constraint_in_type_parameter_constraint_list6407);
					constructor_constraint663=constructor_constraint();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constructor_constraint663.Tree, constructor_constraint663, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(188); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:676:7: constructor_constraint
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(676, 7);
				PushFollow(Follow._constructor_constraint_in_type_parameter_constraint_list6417);
				constructor_constraint664=constructor_constraint();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constructor_constraint664.Tree, constructor_constraint664, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_parameter_constraint_list", 191);
			LeaveRule("type_parameter_constraint_list", 191);
			LeaveRule_type_parameter_constraint_list();
			if (state.backtracking > 0) { Memoize(input, 191, type_parameter_constraint_list_StartIndex); }

		}
		DebugLocation(676, 29);
		} finally { DebugExitRule(GrammarFileName, "type_parameter_constraint_list"); }
		return retval;

	}
	// $ANTLR end "type_parameter_constraint_list"

	partial void EnterRule_secondary_constraint_list();
	partial void LeaveRule_secondary_constraint_list();

	// $ANTLR start "secondary_constraint_list"
	// cs.g:681:1: secondary_constraint_list : secondary_constraint ( ',' secondary_constraint )* ;
	[GrammarRule("secondary_constraint_list")]
	public XAstParserRuleReturnScope secondary_constraint_list()
	{
		EnterRule_secondary_constraint_list();
		EnterRule("secondary_constraint_list", 192);
		var retval = new XAstParserRuleReturnScope("secondary_constraint_list");
		
		retval.Start = (IToken)input.LT(1);
		int secondary_constraint_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal666 = default(IToken);
		XAstParserRuleReturnScope secondary_constraint665 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope secondary_constraint667 = default(XAstParserRuleReturnScope);

		object char_literal666_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "secondary_constraint_list");
		DebugLocation(681, 53);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 192)) { return retval; }

			// cs.g:681:26: ( secondary_constraint ( ',' secondary_constraint )* )
			DebugEnterAlt(1);
			// cs.g:682:5: secondary_constraint ( ',' secondary_constraint )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(682, 5);
			PushFollow(Follow._secondary_constraint_in_secondary_constraint_list6432);
			secondary_constraint665=secondary_constraint();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, secondary_constraint665.Tree, secondary_constraint665, retval);
			DebugLocation(682, 26);
			// cs.g:682:26: ( ',' secondary_constraint )*
			try { DebugEnterSubRule(190);
			while (true)
			{
				int alt190=2;
				try { DebugEnterDecision(190, false);
				int LA190_0 = input.LA(1);

				if ((LA190_0==74))
				{
					int LA190_1 = input.LA(2);

					if ((LA190_1==194))
					{
						int LA190_3 = input.LA(3);

						if ((LA190_3==DOT||LA190_3==SEMI||LA190_3==74||(LA190_3>=80 && LA190_3<=81)||LA190_3==197))
						{
							alt190 = 1;
						}


					}
					else if ((LA190_1==IDENTIFIER||LA190_1==95||(LA190_1>=97 && LA190_1<=98)||(LA190_1>=100 && LA190_1<=101)||LA190_1==105||LA190_1==117||LA190_1==120||LA190_1==122||LA190_1==126||LA190_1==132||LA190_1==135||LA190_1==141||(LA190_1>=143 && LA190_1<=144)||(LA190_1>=147 && LA190_1<=148)||LA190_1==152||LA190_1==154||LA190_1==157||LA190_1==160||LA190_1==162||LA190_1==167||(LA190_1>=171 && LA190_1<=172)||LA190_1==183||LA190_1==190||LA190_1==196))
					{
						alt190 = 1;
					}


				}


				} finally { DebugExitDecision(190); }
				switch ( alt190 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:682:27: ',' secondary_constraint
					{
					DebugLocation(682, 27);
					char_literal666=(IToken)Match(input,74,Follow._74_in_secondary_constraint_list6435); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal666_tree = (object)adaptor.Create(char_literal666, retval);
					adaptor.AddChild(root_0, char_literal666_tree);
					}
					DebugLocation(682, 31);
					PushFollow(Follow._secondary_constraint_in_secondary_constraint_list6437);
					secondary_constraint667=secondary_constraint();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, secondary_constraint667.Tree, secondary_constraint667, retval);

					}
					break;

				default:
					goto loop190;
				}
			}

			loop190:
				;

			} finally { DebugExitSubRule(190); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("secondary_constraint_list", 192);
			LeaveRule("secondary_constraint_list", 192);
			LeaveRule_secondary_constraint_list();
			if (state.backtracking > 0) { Memoize(input, 192, secondary_constraint_list_StartIndex); }

		}
		DebugLocation(682, 53);
		} finally { DebugExitRule(GrammarFileName, "secondary_constraint_list"); }
		return retval;

	}
	// $ANTLR end "secondary_constraint_list"

	partial void EnterRule_secondary_constraint();
	partial void LeaveRule_secondary_constraint();

	// $ANTLR start "secondary_constraint"
	// cs.g:683:1: secondary_constraint : type_name ;
	[GrammarRule("secondary_constraint")]
	public XAstParserRuleReturnScope secondary_constraint()
	{
		EnterRule_secondary_constraint();
		EnterRule("secondary_constraint", 193);
		var retval = new XAstParserRuleReturnScope("secondary_constraint");
		
		retval.Start = (IToken)input.LT(1);
		int secondary_constraint_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope type_name668 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "secondary_constraint");
		DebugLocation(683, 14);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 193)) { return retval; }

			// cs.g:683:21: ( type_name )
			DebugEnterAlt(1);
			// cs.g:684:5: type_name
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(684, 5);
			PushFollow(Follow._type_name_in_secondary_constraint6450);
			type_name668=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name668.Tree, type_name668, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("secondary_constraint", 193);
			LeaveRule("secondary_constraint", 193);
			LeaveRule_secondary_constraint();
			if (state.backtracking > 0) { Memoize(input, 193, secondary_constraint_StartIndex); }

		}
		DebugLocation(684, 14);
		} finally { DebugExitRule(GrammarFileName, "secondary_constraint"); }
		return retval;

	}
	// $ANTLR end "secondary_constraint"

	partial void EnterRule_type_variable_name();
	partial void LeaveRule_type_variable_name();

	// $ANTLR start "type_variable_name"
	// cs.g:685:1: type_variable_name : identifier ;
	[GrammarRule("type_variable_name")]
	public XAstParserRuleReturnScope type_variable_name()
	{
		EnterRule_type_variable_name();
		EnterRule("type_variable_name", 194);
		var retval = new XAstParserRuleReturnScope("type_variable_name");
		
		retval.Start = (IToken)input.LT(1);
		int type_variable_name_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope identifier669 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "type_variable_name");
		DebugLocation(685, 15);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 194)) { return retval; }

			// cs.g:685:19: ( identifier )
			DebugEnterAlt(1);
			// cs.g:686:5: identifier
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(686, 5);
			PushFollow(Follow._identifier_in_type_variable_name6463);
			identifier669=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier669.Tree, identifier669, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_variable_name", 194);
			LeaveRule("type_variable_name", 194);
			LeaveRule_type_variable_name();
			if (state.backtracking > 0) { Memoize(input, 194, type_variable_name_StartIndex); }

		}
		DebugLocation(686, 15);
		} finally { DebugExitRule(GrammarFileName, "type_variable_name"); }
		return retval;

	}
	// $ANTLR end "type_variable_name"

	partial void EnterRule_constructor_constraint();
	partial void LeaveRule_constructor_constraint();

	// $ANTLR start "constructor_constraint"
	// cs.g:687:1: constructor_constraint : 'new' '(' ')' ;
	[GrammarRule("constructor_constraint")]
	public XAstParserRuleReturnScope constructor_constraint()
	{
		EnterRule_constructor_constraint();
		EnterRule("constructor_constraint", 195);
		var retval = new XAstParserRuleReturnScope("constructor_constraint");
		
		retval.Start = (IToken)input.LT(1);
		int constructor_constraint_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal670 = default(IToken);
		IToken char_literal671 = default(IToken);
		IToken char_literal672 = default(IToken);

		object string_literal670_tree = default(object);
		object char_literal671_tree = default(object);
		object char_literal672_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constructor_constraint");
		DebugLocation(687, 22);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 195)) { return retval; }

			// cs.g:687:23: ( 'new' '(' ')' )
			DebugEnterAlt(1);
			// cs.g:688:5: 'new' '(' ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(688, 5);
			string_literal670=(IToken)Match(input,150,Follow._150_in_constructor_constraint6474); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal670_tree = (object)adaptor.Create(string_literal670, retval);
			adaptor.AddChild(root_0, string_literal670_tree);
			}
			DebugLocation(688, 13);
			char_literal671=(IToken)Match(input,68,Follow._68_in_constructor_constraint6478); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal671_tree = (object)adaptor.Create(char_literal671, retval);
			adaptor.AddChild(root_0, char_literal671_tree);
			}
			DebugLocation(688, 19);
			char_literal672=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_constructor_constraint6482), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal672_tree = (object)adaptor.Create(char_literal672, retval);
			adaptor.AddChild(root_0, char_literal672_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constructor_constraint", 195);
			LeaveRule("constructor_constraint", 195);
			LeaveRule_constructor_constraint();
			if (state.backtracking > 0) { Memoize(input, 195, constructor_constraint_StartIndex); }

		}
		DebugLocation(688, 22);
		} finally { DebugExitRule(GrammarFileName, "constructor_constraint"); }
		return retval;

	}
	// $ANTLR end "constructor_constraint"

	partial void EnterRule_return_type();
	partial void LeaveRule_return_type();

	// $ANTLR start "return_type"
	// cs.g:689:1: return_type : ( type | 'void' );
	[GrammarRule("return_type")]
	public XAstParserRuleReturnScope return_type()
	{
		EnterRule_return_type();
		EnterRule("return_type", 196);
		var retval = new XAstParserRuleReturnScope("return_type");
		
		retval.Start = (IToken)input.LT(1);
		int return_type_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal674 = default(IToken);
		XAstParserRuleReturnScope type673 = default(XAstParserRuleReturnScope);

		object string_literal674_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "return_type");
		DebugLocation(689, 13);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 196)) { return retval; }

			// cs.g:689:12: ( type | 'void' )
			int alt191=2;
			try { DebugEnterDecision(191, false);
			int LA191_0 = input.LA(1);

			if ((LA191_0==IDENTIFIER||LA191_0==95||(LA191_0>=97 && LA191_0<=98)||(LA191_0>=100 && LA191_0<=101)||LA191_0==103||(LA191_0>=105 && LA191_0<=106)||LA191_0==109||LA191_0==114||LA191_0==117||(LA191_0>=119 && LA191_0<=120)||LA191_0==122||LA191_0==126||LA191_0==129||LA191_0==132||LA191_0==135||LA191_0==138||LA191_0==141||(LA191_0>=143 && LA191_0<=144)||(LA191_0>=146 && LA191_0<=148)||(LA191_0>=151 && LA191_0<=152)||LA191_0==154||LA191_0==157||LA191_0==160||LA191_0==162||LA191_0==167||LA191_0==169||(LA191_0>=171 && LA191_0<=173)||LA191_0==177||LA191_0==183||(LA191_0>=185 && LA191_0<=186)||(LA191_0>=189 && LA191_0<=190)||LA191_0==194||LA191_0==196))
			{
				alt191 = 1;
			}
			else if ((LA191_0==192))
			{
				int LA191_2 = input.LA(2);

				if ((LA191_2==69))
				{
					alt191 = 1;
				}
				else if ((LA191_2==IDENTIFIER||LA191_2==95||(LA191_2>=97 && LA191_2<=98)||(LA191_2>=100 && LA191_2<=101)||LA191_2==105||LA191_2==117||LA191_2==120||LA191_2==122||LA191_2==126||LA191_2==132||LA191_2==135||LA191_2==141||(LA191_2>=143 && LA191_2<=144)||(LA191_2>=147 && LA191_2<=148)||LA191_2==152||LA191_2==154||LA191_2==157||LA191_2==160||LA191_2==162||LA191_2==167||(LA191_2>=171 && LA191_2<=172)||LA191_2==183||LA191_2==190||LA191_2==194||LA191_2==196))
				{
					alt191 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 191, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 191, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(191); }
			switch (alt191)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:690:5: type
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(690, 5);
				PushFollow(Follow._type_in_return_type6493);
				type673=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type673.Tree, type673, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:691:8: 'void'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(691, 8);
				string_literal674=(IToken)Match(input,192,Follow._192_in_return_type6502); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal674_tree = (object)adaptor.Create(string_literal674, retval);
				adaptor.AddChild(root_0, string_literal674_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("return_type", 196);
			LeaveRule("return_type", 196);
			LeaveRule_return_type();
			if (state.backtracking > 0) { Memoize(input, 196, return_type_StartIndex); }

		}
		DebugLocation(691, 13);
		} finally { DebugExitRule(GrammarFileName, "return_type"); }
		return retval;

	}
	// $ANTLR end "return_type"

	partial void EnterRule_formal_parameter_list();
	partial void LeaveRule_formal_parameter_list();

	// $ANTLR start "formal_parameter_list"
	// cs.g:692:1: formal_parameter_list : formal_parameter ( ',' formal_parameter )* ;
	[GrammarRule("formal_parameter_list")]
	public XAstParserRuleReturnScope formal_parameter_list()
	{
		EnterRule_formal_parameter_list();
		EnterRule("formal_parameter_list", 197);
		var retval = new XAstParserRuleReturnScope("formal_parameter_list");
		
		retval.Start = (IToken)input.LT(1);
		int formal_parameter_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal676 = default(IToken);
		XAstParserRuleReturnScope formal_parameter675 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope formal_parameter677 = default(XAstParserRuleReturnScope);

		object char_literal676_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "formal_parameter_list");
		DebugLocation(692, 45);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 197)) { return retval; }

			// cs.g:692:22: ( formal_parameter ( ',' formal_parameter )* )
			DebugEnterAlt(1);
			// cs.g:693:5: formal_parameter ( ',' formal_parameter )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(693, 5);
			PushFollow(Follow._formal_parameter_in_formal_parameter_list6512);
			formal_parameter675=formal_parameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, formal_parameter675.Tree, formal_parameter675, retval);
			DebugLocation(693, 22);
			// cs.g:693:22: ( ',' formal_parameter )*
			try { DebugEnterSubRule(192);
			while (true)
			{
				int alt192=2;
				try { DebugEnterDecision(192, false);
				int LA192_0 = input.LA(1);

				if ((LA192_0==74))
				{
					alt192 = 1;
				}


				} finally { DebugExitDecision(192); }
				switch ( alt192 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:693:23: ',' formal_parameter
					{
					DebugLocation(693, 23);
					char_literal676=(IToken)Match(input,74,Follow._74_in_formal_parameter_list6515); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal676_tree = (object)adaptor.Create(char_literal676, retval);
					adaptor.AddChild(root_0, char_literal676_tree);
					}
					DebugLocation(693, 27);
					PushFollow(Follow._formal_parameter_in_formal_parameter_list6517);
					formal_parameter677=formal_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, formal_parameter677.Tree, formal_parameter677, retval);

					}
					break;

				default:
					goto loop192;
				}
			}

			loop192:
				;

			} finally { DebugExitSubRule(192); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formal_parameter_list", 197);
			LeaveRule("formal_parameter_list", 197);
			LeaveRule_formal_parameter_list();
			if (state.backtracking > 0) { Memoize(input, 197, formal_parameter_list_StartIndex); }

		}
		DebugLocation(693, 45);
		} finally { DebugExitRule(GrammarFileName, "formal_parameter_list"); }
		return retval;

	}
	// $ANTLR end "formal_parameter_list"

	partial void EnterRule_formal_parameter();
	partial void LeaveRule_formal_parameter();

	// $ANTLR start "formal_parameter"
	// cs.g:694:1: formal_parameter : ( ( attributes )? ( fixed_parameter | parameter_array ) | '__arglist' );
	[GrammarRule("formal_parameter")]
	public XAstParserRuleReturnScope formal_parameter()
	{
		EnterRule_formal_parameter();
		EnterRule("formal_parameter", 198);
		var retval = new XAstParserRuleReturnScope("formal_parameter");
		
		retval.Start = (IToken)input.LT(1);
		int formal_parameter_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal681 = default(IToken);
		XAstParserRuleReturnScope attributes678 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope fixed_parameter679 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope parameter_array680 = default(XAstParserRuleReturnScope);

		object string_literal681_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "formal_parameter");
		DebugLocation(694, 17);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 198)) { return retval; }

			// cs.g:694:17: ( ( attributes )? ( fixed_parameter | parameter_array ) | '__arglist' )
			int alt195=2;
			try { DebugEnterDecision(195, false);
			int LA195_0 = input.LA(1);

			if ((LA195_0==IDENTIFIER||LA195_0==91||(LA195_0>=97 && LA195_0<=98)||(LA195_0>=100 && LA195_0<=101)||LA195_0==103||(LA195_0>=105 && LA195_0<=106)||LA195_0==109||LA195_0==114||LA195_0==117||(LA195_0>=119 && LA195_0<=120)||LA195_0==122||LA195_0==126||LA195_0==129||LA195_0==132||LA195_0==135||LA195_0==138||LA195_0==141||(LA195_0>=143 && LA195_0<=144)||(LA195_0>=146 && LA195_0<=148)||(LA195_0>=151 && LA195_0<=152)||(LA195_0>=154 && LA195_0<=155)||(LA195_0>=157 && LA195_0<=158)||LA195_0==160||LA195_0==162||(LA195_0>=166 && LA195_0<=167)||LA195_0==169||(LA195_0>=171 && LA195_0<=173)||LA195_0==177||LA195_0==180||LA195_0==183||(LA195_0>=185 && LA195_0<=186)||(LA195_0>=189 && LA195_0<=190)||LA195_0==192||LA195_0==194||LA195_0==196))
			{
				alt195 = 1;
			}
			else if ((LA195_0==95))
			{
				int LA195_2 = input.LA(2);

				if ((LA195_2==DOT||LA195_2==IDENTIFIER||LA195_2==69||(LA195_2>=80 && LA195_2<=81)||LA195_2==89||LA195_2==91||LA195_2==95||(LA195_2>=97 && LA195_2<=98)||(LA195_2>=100 && LA195_2<=101)||LA195_2==105||LA195_2==117||LA195_2==120||LA195_2==122||LA195_2==126||LA195_2==132||LA195_2==135||LA195_2==141||(LA195_2>=143 && LA195_2<=144)||(LA195_2>=147 && LA195_2<=148)||LA195_2==152||LA195_2==154||LA195_2==157||LA195_2==160||LA195_2==162||LA195_2==167||(LA195_2>=171 && LA195_2<=172)||LA195_2==183||LA195_2==190||LA195_2==194||LA195_2==196))
				{
					alt195 = 1;
				}
				else if ((LA195_2==RPAREN||LA195_2==74||LA195_2==92))
				{
					alt195 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 195, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 195, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(195); }
			switch (alt195)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:695:5: ( attributes )? ( fixed_parameter | parameter_array )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(695, 5);
				// cs.g:695:5: ( attributes )?
				int alt193=2;
				try { DebugEnterSubRule(193);
				try { DebugEnterDecision(193, false);
				int LA193_0 = input.LA(1);

				if ((LA193_0==91))
				{
					alt193 = 1;
				}
				} finally { DebugExitDecision(193); }
				switch (alt193)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:695:5: attributes
					{
					DebugLocation(695, 5);
					PushFollow(Follow._attributes_in_formal_parameter6530);
					attributes678=attributes();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attributes678.Tree, attributes678, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(193); }

				DebugLocation(695, 19);
				// cs.g:695:19: ( fixed_parameter | parameter_array )
				int alt194=2;
				try { DebugEnterSubRule(194);
				try { DebugEnterDecision(194, false);
				int LA194_0 = input.LA(1);

				if ((LA194_0==IDENTIFIER||LA194_0==95||(LA194_0>=97 && LA194_0<=98)||(LA194_0>=100 && LA194_0<=101)||LA194_0==103||(LA194_0>=105 && LA194_0<=106)||LA194_0==109||LA194_0==114||LA194_0==117||(LA194_0>=119 && LA194_0<=120)||LA194_0==122||LA194_0==126||LA194_0==129||LA194_0==132||LA194_0==135||LA194_0==138||LA194_0==141||(LA194_0>=143 && LA194_0<=144)||(LA194_0>=146 && LA194_0<=148)||(LA194_0>=151 && LA194_0<=152)||(LA194_0>=154 && LA194_0<=155)||LA194_0==157||LA194_0==160||LA194_0==162||(LA194_0>=166 && LA194_0<=167)||LA194_0==169||(LA194_0>=171 && LA194_0<=173)||LA194_0==177||LA194_0==180||LA194_0==183||(LA194_0>=185 && LA194_0<=186)||(LA194_0>=189 && LA194_0<=190)||LA194_0==192||LA194_0==194||LA194_0==196))
				{
					alt194 = 1;
				}
				else if ((LA194_0==158))
				{
					alt194 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 194, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(194); }
				switch (alt194)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:695:20: fixed_parameter
					{
					DebugLocation(695, 20);
					PushFollow(Follow._fixed_parameter_in_formal_parameter6536);
					fixed_parameter679=fixed_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, fixed_parameter679.Tree, fixed_parameter679, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:695:38: parameter_array
					{
					DebugLocation(695, 38);
					PushFollow(Follow._parameter_array_in_formal_parameter6540);
					parameter_array680=parameter_array();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_array680.Tree, parameter_array680, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(194); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:696:7: '__arglist'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(696, 7);
				string_literal681=(IToken)Match(input,95,Follow._95_in_formal_parameter6550); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal681_tree = (object)adaptor.Create(string_literal681, retval);
				adaptor.AddChild(root_0, string_literal681_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formal_parameter", 198);
			LeaveRule("formal_parameter", 198);
			LeaveRule_formal_parameter();
			if (state.backtracking > 0) { Memoize(input, 198, formal_parameter_StartIndex); }

		}
		DebugLocation(696, 17);
		} finally { DebugExitRule(GrammarFileName, "formal_parameter"); }
		return retval;

	}
	// $ANTLR end "formal_parameter"

	partial void EnterRule_fixed_parameters();
	partial void LeaveRule_fixed_parameters();

	// $ANTLR start "fixed_parameters"
	// cs.g:697:1: fixed_parameters : fixed_parameter ( ',' fixed_parameter )* ;
	[GrammarRule("fixed_parameters")]
	public XAstParserRuleReturnScope fixed_parameters()
	{
		EnterRule_fixed_parameters();
		EnterRule("fixed_parameters", 199);
		var retval = new XAstParserRuleReturnScope("fixed_parameters");
		
		retval.Start = (IToken)input.LT(1);
		int fixed_parameters_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal683 = default(IToken);
		XAstParserRuleReturnScope fixed_parameter682 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope fixed_parameter684 = default(XAstParserRuleReturnScope);

		object char_literal683_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "fixed_parameters");
		DebugLocation(697, 47);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 199)) { return retval; }

			// cs.g:697:17: ( fixed_parameter ( ',' fixed_parameter )* )
			DebugEnterAlt(1);
			// cs.g:698:5: fixed_parameter ( ',' fixed_parameter )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(698, 5);
			PushFollow(Follow._fixed_parameter_in_fixed_parameters6561);
			fixed_parameter682=fixed_parameter();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, fixed_parameter682.Tree, fixed_parameter682, retval);
			DebugLocation(698, 23);
			// cs.g:698:23: ( ',' fixed_parameter )*
			try { DebugEnterSubRule(196);
			while (true)
			{
				int alt196=2;
				try { DebugEnterDecision(196, false);
				int LA196_0 = input.LA(1);

				if ((LA196_0==74))
				{
					alt196 = 1;
				}


				} finally { DebugExitDecision(196); }
				switch ( alt196 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:698:24: ',' fixed_parameter
					{
					DebugLocation(698, 24);
					char_literal683=(IToken)Match(input,74,Follow._74_in_fixed_parameters6566); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal683_tree = (object)adaptor.Create(char_literal683, retval);
					adaptor.AddChild(root_0, char_literal683_tree);
					}
					DebugLocation(698, 30);
					PushFollow(Follow._fixed_parameter_in_fixed_parameters6570);
					fixed_parameter684=fixed_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, fixed_parameter684.Tree, fixed_parameter684, retval);

					}
					break;

				default:
					goto loop196;
				}
			}

			loop196:
				;

			} finally { DebugExitSubRule(196); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fixed_parameters", 199);
			LeaveRule("fixed_parameters", 199);
			LeaveRule_fixed_parameters();
			if (state.backtracking > 0) { Memoize(input, 199, fixed_parameters_StartIndex); }

		}
		DebugLocation(698, 47);
		} finally { DebugExitRule(GrammarFileName, "fixed_parameters"); }
		return retval;

	}
	// $ANTLR end "fixed_parameters"

	partial void EnterRule_fixed_parameter();
	partial void LeaveRule_fixed_parameter();

	// $ANTLR start "fixed_parameter"
	// cs.g:700:1: fixed_parameter : ( parameter_modifier )? type identifier ( default_argument )? ;
	[GrammarRule("fixed_parameter")]
	public XAstParserRuleReturnScope fixed_parameter()
	{
		EnterRule_fixed_parameter();
		EnterRule("fixed_parameter", 200);
		var retval = new XAstParserRuleReturnScope("fixed_parameter");
		
		retval.Start = (IToken)input.LT(1);
		int fixed_parameter_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope parameter_modifier685 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type686 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier687 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope default_argument688 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "fixed_parameter");
		DebugLocation(700, 64);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 200)) { return retval; }

			// cs.g:700:16: ( ( parameter_modifier )? type identifier ( default_argument )? )
			DebugEnterAlt(1);
			// cs.g:701:5: ( parameter_modifier )? type identifier ( default_argument )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(701, 5);
			// cs.g:701:5: ( parameter_modifier )?
			int alt197=2;
			try { DebugEnterSubRule(197);
			try { DebugEnterDecision(197, false);
			int LA197_0 = input.LA(1);

			if ((LA197_0==155||LA197_0==166||LA197_0==180))
			{
				alt197 = 1;
			}
			} finally { DebugExitDecision(197); }
			switch (alt197)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:701:5: parameter_modifier
				{
				DebugLocation(701, 5);
				PushFollow(Follow._parameter_modifier_in_fixed_parameter6584);
				parameter_modifier685=parameter_modifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, parameter_modifier685.Tree, parameter_modifier685, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(197); }

			DebugLocation(701, 27);
			PushFollow(Follow._type_in_fixed_parameter6589);
			type686=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type686.Tree, type686, retval);
			DebugLocation(701, 34);
			PushFollow(Follow._identifier_in_fixed_parameter6593);
			identifier687=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier687.Tree, identifier687, retval);
			DebugLocation(701, 47);
			// cs.g:701:47: ( default_argument )?
			int alt198=2;
			try { DebugEnterSubRule(198);
			try { DebugEnterDecision(198, false);
			int LA198_0 = input.LA(1);

			if ((LA198_0==85))
			{
				alt198 = 1;
			}
			} finally { DebugExitDecision(198); }
			switch (alt198)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:701:47: default_argument
				{
				DebugLocation(701, 47);
				PushFollow(Follow._default_argument_in_fixed_parameter6597);
				default_argument688=default_argument();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, default_argument688.Tree, default_argument688, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(198); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fixed_parameter", 200);
			LeaveRule("fixed_parameter", 200);
			LeaveRule_fixed_parameter();
			if (state.backtracking > 0) { Memoize(input, 200, fixed_parameter_StartIndex); }

		}
		DebugLocation(701, 64);
		} finally { DebugExitRule(GrammarFileName, "fixed_parameter"); }
		return retval;

	}
	// $ANTLR end "fixed_parameter"

	partial void EnterRule_default_argument();
	partial void LeaveRule_default_argument();

	// $ANTLR start "default_argument"
	// cs.g:703:1: default_argument : '=' expression ;
	[GrammarRule("default_argument")]
	public XAstParserRuleReturnScope default_argument()
	{
		EnterRule_default_argument();
		EnterRule("default_argument", 201);
		var retval = new XAstParserRuleReturnScope("default_argument");
		
		retval.Start = (IToken)input.LT(1);
		int default_argument_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal689 = default(IToken);
		XAstParserRuleReturnScope expression690 = default(XAstParserRuleReturnScope);

		object char_literal689_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "default_argument");
		DebugLocation(703, 18);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 201)) { return retval; }

			// cs.g:703:17: ( '=' expression )
			DebugEnterAlt(1);
			// cs.g:704:5: '=' expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(704, 5);
			char_literal689=(IToken)Match(input,85,Follow._85_in_default_argument6610); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal689_tree = (object)adaptor.Create(char_literal689, retval);
			adaptor.AddChild(root_0, char_literal689_tree);
			}
			DebugLocation(704, 9);
			PushFollow(Follow._expression_in_default_argument6612);
			expression690=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression690.Tree, expression690, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("default_argument", 201);
			LeaveRule("default_argument", 201);
			LeaveRule_default_argument();
			if (state.backtracking > 0) { Memoize(input, 201, default_argument_StartIndex); }

		}
		DebugLocation(704, 18);
		} finally { DebugExitRule(GrammarFileName, "default_argument"); }
		return retval;

	}
	// $ANTLR end "default_argument"

	partial void EnterRule_parameter_modifier();
	partial void LeaveRule_parameter_modifier();

	// $ANTLR start "parameter_modifier"
	// cs.g:705:1: parameter_modifier : ( 'ref' | 'out' | 'this' );
	[GrammarRule("parameter_modifier")]
	public XAstParserRuleReturnScope parameter_modifier()
	{
		EnterRule_parameter_modifier();
		EnterRule("parameter_modifier", 202);
		var retval = new XAstParserRuleReturnScope("parameter_modifier");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_modifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set691 = default(IToken);

		object set691_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parameter_modifier");
		DebugLocation(705, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 202)) { return retval; }

			// cs.g:705:19: ( 'ref' | 'out' | 'this' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(705, 19);

			set691=(IToken)input.LT(1);
			if (input.LA(1)==155||input.LA(1)==166||input.LA(1)==180)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set691, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_modifier", 202);
			LeaveRule("parameter_modifier", 202);
			LeaveRule_parameter_modifier();
			if (state.backtracking > 0) { Memoize(input, 202, parameter_modifier_StartIndex); }

		}
		DebugLocation(706, 27);
		} finally { DebugExitRule(GrammarFileName, "parameter_modifier"); }
		return retval;

	}
	// $ANTLR end "parameter_modifier"

	partial void EnterRule_parameter_array();
	partial void LeaveRule_parameter_array();

	// $ANTLR start "parameter_array"
	// cs.g:707:1: parameter_array : 'params' type identifier ;
	[GrammarRule("parameter_array")]
	public XAstParserRuleReturnScope parameter_array()
	{
		EnterRule_parameter_array();
		EnterRule("parameter_array", 203);
		var retval = new XAstParserRuleReturnScope("parameter_array");
		
		retval.Start = (IToken)input.LT(1);
		int parameter_array_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal692 = default(IToken);
		XAstParserRuleReturnScope type693 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier694 = default(XAstParserRuleReturnScope);

		object string_literal692_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parameter_array");
		DebugLocation(707, 33);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 203)) { return retval; }

			// cs.g:707:16: ( 'params' type identifier )
			DebugEnterAlt(1);
			// cs.g:708:5: 'params' type identifier
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(708, 5);
			string_literal692=(IToken)Match(input,158,Follow._158_in_parameter_array6641); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal692_tree = (object)adaptor.Create(string_literal692, retval);
			adaptor.AddChild(root_0, string_literal692_tree);
			}
			DebugLocation(708, 16);
			PushFollow(Follow._type_in_parameter_array6645);
			type693=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type693.Tree, type693, retval);
			DebugLocation(708, 23);
			PushFollow(Follow._identifier_in_parameter_array6649);
			identifier694=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier694.Tree, identifier694, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parameter_array", 203);
			LeaveRule("parameter_array", 203);
			LeaveRule_parameter_array();
			if (state.backtracking > 0) { Memoize(input, 203, parameter_array_StartIndex); }

		}
		DebugLocation(708, 33);
		} finally { DebugExitRule(GrammarFileName, "parameter_array"); }
		return retval;

	}
	// $ANTLR end "parameter_array"

	partial void EnterRule_interface_declaration();
	partial void LeaveRule_interface_declaration();

	// $ANTLR start "interface_declaration"
	// cs.g:711:1: interface_declaration : 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )? ;
	[GrammarRule("interface_declaration")]
	public XAstParserRuleReturnScope interface_declaration()
	{
		EnterRule_interface_declaration();
		EnterRule("interface_declaration", 204);
		var retval = new XAstParserRuleReturnScope("interface_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int interface_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal695 = default(IToken);
		IToken char_literal701 = default(IToken);
		XAstParserRuleReturnScope identifier696 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope variant_generic_parameter_list697 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_base698 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_parameter_constraints_clauses699 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_body700 = default(XAstParserRuleReturnScope);

		object string_literal695_tree = default(object);
		object char_literal701_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interface_declaration");
		DebugLocation(711, 86);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 204)) { return retval; }

			// cs.g:711:22: ( 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )? )
			DebugEnterAlt(1);
			// cs.g:712:5: 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(712, 5);
			string_literal695=(IToken)Match(input,139,Follow._139_in_interface_declaration6662); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal695_tree = (object)adaptor.Create(string_literal695, retval);
			adaptor.AddChild(root_0, string_literal695_tree);
			}
			DebugLocation(712, 19);
			PushFollow(Follow._identifier_in_interface_declaration6666);
			identifier696=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier696.Tree, identifier696, retval);
			DebugLocation(712, 32);
			// cs.g:712:32: ( variant_generic_parameter_list )?
			int alt199=2;
			try { DebugEnterSubRule(199);
			try { DebugEnterDecision(199, false);
			int LA199_0 = input.LA(1);

			if ((LA199_0==81))
			{
				alt199 = 1;
			}
			} finally { DebugExitDecision(199); }
			switch (alt199)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:712:32: variant_generic_parameter_list
				{
				DebugLocation(712, 32);
				PushFollow(Follow._variant_generic_parameter_list_in_interface_declaration6670);
				variant_generic_parameter_list697=variant_generic_parameter_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, variant_generic_parameter_list697.Tree, variant_generic_parameter_list697, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(199); }

			DebugLocation(713, 9);
			// cs.g:713:9: ( interface_base )?
			int alt200=2;
			try { DebugEnterSubRule(200);
			try { DebugEnterDecision(200, false);
			int LA200_0 = input.LA(1);

			if ((LA200_0==79))
			{
				alt200 = 1;
			}
			} finally { DebugExitDecision(200); }
			switch (alt200)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:713:9: interface_base
				{
				DebugLocation(713, 9);
				PushFollow(Follow._interface_base_in_interface_declaration6682);
				interface_base698=interface_base();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_base698.Tree, interface_base698, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(200); }

			DebugLocation(713, 27);
			// cs.g:713:27: ( type_parameter_constraints_clauses )?
			int alt201=2;
			try { DebugEnterSubRule(201);
			try { DebugEnterDecision(201, false);
			int LA201_0 = input.LA(1);

			if ((LA201_0==194))
			{
				alt201 = 1;
			}
			} finally { DebugExitDecision(201); }
			switch (alt201)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:713:27: type_parameter_constraints_clauses
				{
				DebugLocation(713, 27);
				PushFollow(Follow._type_parameter_constraints_clauses_in_interface_declaration6687);
				type_parameter_constraints_clauses699=type_parameter_constraints_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraints_clauses699.Tree, type_parameter_constraints_clauses699, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(201); }

			DebugLocation(713, 65);
			PushFollow(Follow._interface_body_in_interface_declaration6692);
			interface_body700=interface_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, interface_body700.Tree, interface_body700, retval);
			DebugLocation(713, 82);
			// cs.g:713:82: ( ';' )?
			int alt202=2;
			try { DebugEnterSubRule(202);
			try { DebugEnterDecision(202, false);
			int LA202_0 = input.LA(1);

			if ((LA202_0==SEMI))
			{
				alt202 = 1;
			}
			} finally { DebugExitDecision(202); }
			switch (alt202)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:713:82: ';'
				{
				DebugLocation(713, 82);
				char_literal701=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_interface_declaration6696), "SEMI"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal701_tree = (object)adaptor.Create(char_literal701, retval);
				adaptor.AddChild(root_0, char_literal701_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(202); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_declaration", 204);
			LeaveRule("interface_declaration", 204);
			LeaveRule_interface_declaration();
			if (state.backtracking > 0) { Memoize(input, 204, interface_declaration_StartIndex); }

		}
		DebugLocation(713, 86);
		} finally { DebugExitRule(GrammarFileName, "interface_declaration"); }
		return retval;

	}
	// $ANTLR end "interface_declaration"

	partial void EnterRule_interface_modifiers();
	partial void LeaveRule_interface_modifiers();

	// $ANTLR start "interface_modifiers"
	// cs.g:714:1: interface_modifiers : ( modifier )+ ;
	[GrammarRule("interface_modifiers")]
	public XAstParserRuleReturnScope interface_modifiers()
	{
		EnterRule_interface_modifiers();
		EnterRule("interface_modifiers", 205);
		var retval = new XAstParserRuleReturnScope("interface_modifiers");
		
		retval.Start = (IToken)input.LT(1);
		int interface_modifiers_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope modifier702 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "interface_modifiers");
		DebugLocation(714, 14);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 205)) { return retval; }

			// cs.g:714:20: ( ( modifier )+ )
			DebugEnterAlt(1);
			// cs.g:715:5: ( modifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(715, 5);
			// cs.g:715:5: ( modifier )+
			int cnt203=0;
			try { DebugEnterSubRule(203);
			while (true)
			{
				int alt203=2;
				try { DebugEnterDecision(203, false);
				int LA203_0 = input.LA(1);

				if ((LA203_0==96||LA203_0==125||LA203_0==140||LA203_0==150||LA203_0==156||LA203_0==161||(LA203_0>=163 && LA203_0<=165)||LA203_0==170||LA203_0==176||LA203_0==188||LA203_0==191||LA203_0==193))
				{
					alt203 = 1;
				}


				} finally { DebugExitDecision(203); }
				switch (alt203)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:715:5: modifier
					{
					DebugLocation(715, 5);
					PushFollow(Follow._modifier_in_interface_modifiers6709);
					modifier702=modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modifier702.Tree, modifier702, retval);

					}
					break;

				default:
					if (cnt203 >= 1)
						goto loop203;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee203 = new EarlyExitException( 203, input );
					DebugRecognitionException(eee203);
					throw eee203;
				}
				cnt203++;
			}
			loop203:
				;

			} finally { DebugExitSubRule(203); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_modifiers", 205);
			LeaveRule("interface_modifiers", 205);
			LeaveRule_interface_modifiers();
			if (state.backtracking > 0) { Memoize(input, 205, interface_modifiers_StartIndex); }

		}
		DebugLocation(715, 14);
		} finally { DebugExitRule(GrammarFileName, "interface_modifiers"); }
		return retval;

	}
	// $ANTLR end "interface_modifiers"

	partial void EnterRule_interface_base();
	partial void LeaveRule_interface_base();

	// $ANTLR start "interface_base"
	// cs.g:716:1: interface_base : ':' interface_type_list ;
	[GrammarRule("interface_base")]
	public XAstParserRuleReturnScope interface_base()
	{
		EnterRule_interface_base();
		EnterRule("interface_base", 206);
		var retval = new XAstParserRuleReturnScope("interface_base");
		
		retval.Start = (IToken)input.LT(1);
		int interface_base_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal703 = default(IToken);
		XAstParserRuleReturnScope interface_type_list704 = default(XAstParserRuleReturnScope);

		object char_literal703_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interface_base");
		DebugLocation(716, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 206)) { return retval; }

			// cs.g:716:15: ( ':' interface_type_list )
			DebugEnterAlt(1);
			// cs.g:717:5: ':' interface_type_list
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(717, 5);
			char_literal703=(IToken)Match(input,79,Follow._79_in_interface_base6722); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal703_tree = (object)adaptor.Create(char_literal703, retval);
			adaptor.AddChild(root_0, char_literal703_tree);
			}
			DebugLocation(717, 9);
			PushFollow(Follow._interface_type_list_in_interface_base6724);
			interface_type_list704=interface_type_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, interface_type_list704.Tree, interface_type_list704, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_base", 206);
			LeaveRule("interface_base", 206);
			LeaveRule_interface_base();
			if (state.backtracking > 0) { Memoize(input, 206, interface_base_StartIndex); }

		}
		DebugLocation(717, 28);
		} finally { DebugExitRule(GrammarFileName, "interface_base"); }
		return retval;

	}
	// $ANTLR end "interface_base"

	partial void EnterRule_interface_body();
	partial void LeaveRule_interface_body();

	// $ANTLR start "interface_body"
	// cs.g:718:1: interface_body : '{' ( interface_member_declarations )? '}' ;
	[GrammarRule("interface_body")]
	public XAstParserRuleReturnScope interface_body()
	{
		EnterRule_interface_body();
		EnterRule("interface_body", 207);
		var retval = new XAstParserRuleReturnScope("interface_body");
		
		retval.Start = (IToken)input.LT(1);
		int interface_body_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal705 = default(IToken);
		IToken char_literal707 = default(IToken);
		XAstParserRuleReturnScope interface_member_declarations706 = default(XAstParserRuleReturnScope);

		object char_literal705_tree = default(object);
		object char_literal707_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interface_body");
		DebugLocation(718, 47);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 207)) { return retval; }

			// cs.g:718:15: ( '{' ( interface_member_declarations )? '}' )
			DebugEnterAlt(1);
			// cs.g:719:5: '{' ( interface_member_declarations )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(719, 5);
			char_literal705=(IToken)Match(input,197,Follow._197_in_interface_body6735); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal705_tree = (object)adaptor.Create(char_literal705, retval);
			adaptor.AddChild(root_0, char_literal705_tree);
			}
			DebugLocation(719, 11);
			// cs.g:719:11: ( interface_member_declarations )?
			int alt204=2;
			try { DebugEnterSubRule(204);
			try { DebugEnterDecision(204, false);
			int LA204_0 = input.LA(1);

			if ((LA204_0==IDENTIFIER||LA204_0==91||(LA204_0>=95 && LA204_0<=98)||(LA204_0>=100 && LA204_0<=101)||LA204_0==103||(LA204_0>=105 && LA204_0<=106)||LA204_0==109||LA204_0==114||LA204_0==117||(LA204_0>=119 && LA204_0<=120)||(LA204_0>=122 && LA204_0<=123)||(LA204_0>=125 && LA204_0<=126)||LA204_0==129||LA204_0==132||LA204_0==135||LA204_0==138||(LA204_0>=140 && LA204_0<=141)||(LA204_0>=143 && LA204_0<=144)||(LA204_0>=146 && LA204_0<=148)||(LA204_0>=150 && LA204_0<=152)||LA204_0==154||(LA204_0>=156 && LA204_0<=157)||(LA204_0>=160 && LA204_0<=165)||LA204_0==167||(LA204_0>=169 && LA204_0<=173)||(LA204_0>=176 && LA204_0<=177)||LA204_0==183||(LA204_0>=185 && LA204_0<=186)||(LA204_0>=188 && LA204_0<=194)||LA204_0==196))
			{
				alt204 = 1;
			}
			} finally { DebugExitDecision(204); }
			switch (alt204)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:719:11: interface_member_declarations
				{
				DebugLocation(719, 11);
				PushFollow(Follow._interface_member_declarations_in_interface_body6739);
				interface_member_declarations706=interface_member_declarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_member_declarations706.Tree, interface_member_declarations706, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(204); }

			DebugLocation(719, 44);
			char_literal707=(IToken)Match(input,201,Follow._201_in_interface_body6744); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal707_tree = (object)adaptor.Create(char_literal707, retval);
			adaptor.AddChild(root_0, char_literal707_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_body", 207);
			LeaveRule("interface_body", 207);
			LeaveRule_interface_body();
			if (state.backtracking > 0) { Memoize(input, 207, interface_body_StartIndex); }

		}
		DebugLocation(719, 47);
		} finally { DebugExitRule(GrammarFileName, "interface_body"); }
		return retval;

	}
	// $ANTLR end "interface_body"

	partial void EnterRule_interface_member_declarations();
	partial void LeaveRule_interface_member_declarations();

	// $ANTLR start "interface_member_declarations"
	// cs.g:720:1: interface_member_declarations : ( interface_member_declaration )+ ;
	[GrammarRule("interface_member_declarations")]
	public XAstParserRuleReturnScope interface_member_declarations()
	{
		EnterRule_interface_member_declarations();
		EnterRule("interface_member_declarations", 208);
		var retval = new XAstParserRuleReturnScope("interface_member_declarations");
		
		retval.Start = (IToken)input.LT(1);
		int interface_member_declarations_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope interface_member_declaration708 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "interface_member_declarations");
		DebugLocation(720, 34);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 208)) { return retval; }

			// cs.g:720:30: ( ( interface_member_declaration )+ )
			DebugEnterAlt(1);
			// cs.g:721:5: ( interface_member_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(721, 5);
			// cs.g:721:5: ( interface_member_declaration )+
			int cnt205=0;
			try { DebugEnterSubRule(205);
			while (true)
			{
				int alt205=2;
				try { DebugEnterDecision(205, false);
				int LA205_0 = input.LA(1);

				if ((LA205_0==IDENTIFIER||LA205_0==91||(LA205_0>=95 && LA205_0<=98)||(LA205_0>=100 && LA205_0<=101)||LA205_0==103||(LA205_0>=105 && LA205_0<=106)||LA205_0==109||LA205_0==114||LA205_0==117||(LA205_0>=119 && LA205_0<=120)||(LA205_0>=122 && LA205_0<=123)||(LA205_0>=125 && LA205_0<=126)||LA205_0==129||LA205_0==132||LA205_0==135||LA205_0==138||(LA205_0>=140 && LA205_0<=141)||(LA205_0>=143 && LA205_0<=144)||(LA205_0>=146 && LA205_0<=148)||(LA205_0>=150 && LA205_0<=152)||LA205_0==154||(LA205_0>=156 && LA205_0<=157)||(LA205_0>=160 && LA205_0<=165)||LA205_0==167||(LA205_0>=169 && LA205_0<=173)||(LA205_0>=176 && LA205_0<=177)||LA205_0==183||(LA205_0>=185 && LA205_0<=186)||(LA205_0>=188 && LA205_0<=194)||LA205_0==196))
				{
					alt205 = 1;
				}


				} finally { DebugExitDecision(205); }
				switch (alt205)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:721:5: interface_member_declaration
					{
					DebugLocation(721, 5);
					PushFollow(Follow._interface_member_declaration_in_interface_member_declarations6755);
					interface_member_declaration708=interface_member_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_member_declaration708.Tree, interface_member_declaration708, retval);

					}
					break;

				default:
					if (cnt205 >= 1)
						goto loop205;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee205 = new EarlyExitException( 205, input );
					DebugRecognitionException(eee205);
					throw eee205;
				}
				cnt205++;
			}
			loop205:
				;

			} finally { DebugExitSubRule(205); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_member_declarations", 208);
			LeaveRule("interface_member_declarations", 208);
			LeaveRule_interface_member_declarations();
			if (state.backtracking > 0) { Memoize(input, 208, interface_member_declarations_StartIndex); }

		}
		DebugLocation(721, 34);
		} finally { DebugExitRule(GrammarFileName, "interface_member_declarations"); }
		return retval;

	}
	// $ANTLR end "interface_member_declarations"

	partial void EnterRule_interface_member_declaration();
	partial void LeaveRule_interface_member_declaration();

	// $ANTLR start "interface_member_declaration"
	// cs.g:722:1: interface_member_declaration : ( attributes )? ( modifiers )? ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) ) ;
	[GrammarRule("interface_member_declaration")]
	public XAstParserRuleReturnScope interface_member_declaration()
	{
		EnterRule_interface_member_declaration();
		EnterRule("interface_member_declaration", 209);
		var retval = new XAstParserRuleReturnScope("interface_member_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int interface_member_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal711 = default(IToken);
		XAstParserRuleReturnScope attributes709 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope modifiers710 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_method_declaration712 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_event_declaration713 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type714 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_method_declaration715 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_property_declaration716 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_indexer_declaration717 = default(XAstParserRuleReturnScope);

		object string_literal711_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interface_member_declaration");
		DebugLocation(722, 8);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 209)) { return retval; }

			// cs.g:722:29: ( ( attributes )? ( modifiers )? ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) ) )
			DebugEnterAlt(1);
			// cs.g:723:5: ( attributes )? ( modifiers )? ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(723, 5);
			// cs.g:723:5: ( attributes )?
			int alt206=2;
			try { DebugEnterSubRule(206);
			try { DebugEnterDecision(206, false);
			int LA206_0 = input.LA(1);

			if ((LA206_0==91))
			{
				alt206 = 1;
			}
			} finally { DebugExitDecision(206); }
			switch (alt206)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:723:5: attributes
				{
				DebugLocation(723, 5);
				PushFollow(Follow._attributes_in_interface_member_declaration6767);
				attributes709=attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attributes709.Tree, attributes709, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(206); }

			DebugLocation(723, 20);
			// cs.g:723:20: ( modifiers )?
			int alt207=2;
			try { DebugEnterSubRule(207);
			try { DebugEnterDecision(207, false);
			int LA207_0 = input.LA(1);

			if ((LA207_0==96||LA207_0==125||LA207_0==140||LA207_0==150||LA207_0==156||LA207_0==161||(LA207_0>=163 && LA207_0<=165)||LA207_0==170||LA207_0==176||LA207_0==188||LA207_0==191||LA207_0==193))
			{
				alt207 = 1;
			}
			} finally { DebugExitDecision(207); }
			switch (alt207)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:723:20: modifiers
				{
				DebugLocation(723, 20);
				PushFollow(Follow._modifiers_in_interface_member_declaration6773);
				modifiers710=modifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers710.Tree, modifiers710, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(207); }

			DebugLocation(724, 9);
			// cs.g:724:9: ( 'void' interface_method_declaration | interface_event_declaration | type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration ) )
			int alt209=3;
			try { DebugEnterSubRule(209);
			try { DebugEnterDecision(209, false);
			switch (input.LA(1))
			{
			case 192:
				{
				int LA209_1 = input.LA(2);

				if ((LA209_1==IDENTIFIER||LA209_1==95||(LA209_1>=97 && LA209_1<=98)||(LA209_1>=100 && LA209_1<=101)||LA209_1==105||LA209_1==117||LA209_1==120||LA209_1==122||LA209_1==126||LA209_1==132||LA209_1==135||LA209_1==141||(LA209_1>=143 && LA209_1<=144)||(LA209_1>=147 && LA209_1<=148)||LA209_1==152||LA209_1==154||LA209_1==157||LA209_1==160||LA209_1==162||LA209_1==167||(LA209_1>=171 && LA209_1<=172)||LA209_1==183||LA209_1==190||LA209_1==194||LA209_1==196))
				{
					alt209 = 1;
				}
				else if ((LA209_1==69))
				{
					alt209 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 209, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 123:
				{
				alt209 = 2;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 103:
			case 105:
			case 106:
			case 109:
			case 114:
			case 117:
			case 119:
			case 120:
			case 122:
			case 126:
			case 129:
			case 132:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 177:
			case 183:
			case 185:
			case 186:
			case 189:
			case 190:
			case 194:
			case 196:
				{
				alt209 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 209, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(209); }
			switch (alt209)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:724:10: 'void' interface_method_declaration
				{
				DebugLocation(724, 10);
				string_literal711=(IToken)Match(input,192,Follow._192_in_interface_member_declaration6785); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal711_tree = (object)adaptor.Create(string_literal711, retval);
				adaptor.AddChild(root_0, string_literal711_tree);
				}
				DebugLocation(724, 19);
				PushFollow(Follow._interface_method_declaration_in_interface_member_declaration6789);
				interface_method_declaration712=interface_method_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_method_declaration712.Tree, interface_method_declaration712, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:725:11: interface_event_declaration
				{
				DebugLocation(725, 11);
				PushFollow(Follow._interface_event_declaration_in_interface_member_declaration6801);
				interface_event_declaration713=interface_event_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_event_declaration713.Tree, interface_event_declaration713, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:726:11: type ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration )
				{
				DebugLocation(726, 11);
				PushFollow(Follow._type_in_interface_member_declaration6813);
				type714=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type714.Tree, type714, retval);
				DebugLocation(726, 18);
				// cs.g:726:18: ( ( member_name '(' )=> interface_method_declaration | ( member_name '{' )=> interface_property_declaration | interface_indexer_declaration )
				int alt208=3;
				try { DebugEnterSubRule(208);
				try { DebugEnterDecision(208, false);
				int LA208_0 = input.LA(1);

				if ((LA208_0==IDENTIFIER||LA208_0==95||(LA208_0>=97 && LA208_0<=98)||(LA208_0>=100 && LA208_0<=101)||LA208_0==105||LA208_0==117||LA208_0==120||LA208_0==122||LA208_0==126||LA208_0==132||LA208_0==135||LA208_0==141||(LA208_0>=143 && LA208_0<=144)||(LA208_0>=147 && LA208_0<=148)||LA208_0==152||LA208_0==154||LA208_0==157||LA208_0==160||LA208_0==162||LA208_0==167||(LA208_0>=171 && LA208_0<=172)||LA208_0==183||LA208_0==190||LA208_0==194||LA208_0==196))
				{
					int LA208_1 = input.LA(2);

					if ((LA208_1==81) && (EvaluatePredicate(synpred26_cs_fragment)))
					{
						alt208 = 1;
					}
					else if ((LA208_1==68) && (EvaluatePredicate(synpred26_cs_fragment)))
					{
						alt208 = 1;
					}
					else if ((LA208_1==197) && (EvaluatePredicate(synpred27_cs_fragment)))
					{
						alt208 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 208, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA208_0==180))
				{
					alt208 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 208, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(208); }
				switch (alt208)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:726:20: ( member_name '(' )=> interface_method_declaration
					{
					DebugLocation(726, 43);
					PushFollow(Follow._interface_method_declaration_in_interface_member_declaration6829);
					interface_method_declaration715=interface_method_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_method_declaration715.Tree, interface_method_declaration715, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:727:20: ( member_name '{' )=> interface_property_declaration
					{
					DebugLocation(727, 43);
					PushFollow(Follow._interface_property_declaration_in_interface_member_declaration6860);
					interface_property_declaration716=interface_property_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_property_declaration716.Tree, interface_property_declaration716, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// cs.g:728:20: interface_indexer_declaration
					{
					DebugLocation(728, 20);
					PushFollow(Follow._interface_indexer_declaration_in_interface_member_declaration6882);
					interface_indexer_declaration717=interface_indexer_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_indexer_declaration717.Tree, interface_indexer_declaration717, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(208); }


				}
				break;

			}
			} finally { DebugExitSubRule(209); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_member_declaration", 209);
			LeaveRule("interface_member_declaration", 209);
			LeaveRule_interface_member_declaration();
			if (state.backtracking > 0) { Memoize(input, 209, interface_member_declaration_StartIndex); }

		}
		DebugLocation(730, 8);
		} finally { DebugExitRule(GrammarFileName, "interface_member_declaration"); }
		return retval;

	}
	// $ANTLR end "interface_member_declaration"

	partial void EnterRule_interface_property_declaration();
	partial void LeaveRule_interface_property_declaration();

	// $ANTLR start "interface_property_declaration"
	// cs.g:731:1: interface_property_declaration : identifier '{' interface_accessor_declarations '}' ;
	[GrammarRule("interface_property_declaration")]
	public XAstParserRuleReturnScope interface_property_declaration()
	{
		EnterRule_interface_property_declaration();
		EnterRule("interface_property_declaration", 210);
		var retval = new XAstParserRuleReturnScope("interface_property_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int interface_property_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal719 = default(IToken);
		IToken char_literal721 = default(IToken);
		XAstParserRuleReturnScope identifier718 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_accessor_declarations720 = default(XAstParserRuleReturnScope);

		object char_literal719_tree = default(object);
		object char_literal721_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interface_property_declaration");
		DebugLocation(731, 61);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 210)) { return retval; }

			// cs.g:731:31: ( identifier '{' interface_accessor_declarations '}' )
			DebugEnterAlt(1);
			// cs.g:732:5: identifier '{' interface_accessor_declarations '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(732, 5);
			PushFollow(Follow._identifier_in_interface_property_declaration6914);
			identifier718=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier718.Tree, identifier718, retval);
			DebugLocation(732, 18);
			char_literal719=(IToken)Match(input,197,Follow._197_in_interface_property_declaration6918); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal719_tree = (object)adaptor.Create(char_literal719, retval);
			adaptor.AddChild(root_0, char_literal719_tree);
			}
			DebugLocation(732, 24);
			PushFollow(Follow._interface_accessor_declarations_in_interface_property_declaration6922);
			interface_accessor_declarations720=interface_accessor_declarations();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, interface_accessor_declarations720.Tree, interface_accessor_declarations720, retval);
			DebugLocation(732, 58);
			char_literal721=(IToken)Match(input,201,Follow._201_in_interface_property_declaration6926); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal721_tree = (object)adaptor.Create(char_literal721, retval);
			adaptor.AddChild(root_0, char_literal721_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_property_declaration", 210);
			LeaveRule("interface_property_declaration", 210);
			LeaveRule_interface_property_declaration();
			if (state.backtracking > 0) { Memoize(input, 210, interface_property_declaration_StartIndex); }

		}
		DebugLocation(732, 61);
		} finally { DebugExitRule(GrammarFileName, "interface_property_declaration"); }
		return retval;

	}
	// $ANTLR end "interface_property_declaration"

	partial void EnterRule_interface_method_declaration();
	partial void LeaveRule_interface_method_declaration();

	// $ANTLR start "interface_method_declaration"
	// cs.g:733:1: interface_method_declaration : identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' ;
	[GrammarRule("interface_method_declaration")]
	public XAstParserRuleReturnScope interface_method_declaration()
	{
		EnterRule_interface_method_declaration();
		EnterRule("interface_method_declaration", 211);
		var retval = new XAstParserRuleReturnScope("interface_method_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int interface_method_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal724 = default(IToken);
		IToken char_literal726 = default(IToken);
		IToken char_literal728 = default(IToken);
		XAstParserRuleReturnScope identifier722 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope generic_argument_list723 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope formal_parameter_list725 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_parameter_constraints_clauses727 = default(XAstParserRuleReturnScope);

		object char_literal724_tree = default(object);
		object char_literal726_tree = default(object);
		object char_literal728_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interface_method_declaration");
		DebugLocation(733, 87);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 211)) { return retval; }

			// cs.g:733:29: ( identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' )
			DebugEnterAlt(1);
			// cs.g:734:5: identifier ( generic_argument_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(734, 5);
			PushFollow(Follow._identifier_in_interface_method_declaration6937);
			identifier722=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier722.Tree, identifier722, retval);
			DebugLocation(734, 18);
			// cs.g:734:18: ( generic_argument_list )?
			int alt210=2;
			try { DebugEnterSubRule(210);
			try { DebugEnterDecision(210, false);
			int LA210_0 = input.LA(1);

			if ((LA210_0==81))
			{
				alt210 = 1;
			}
			} finally { DebugExitDecision(210); }
			switch (alt210)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:734:18: generic_argument_list
				{
				DebugLocation(734, 18);
				PushFollow(Follow._generic_argument_list_in_interface_method_declaration6941);
				generic_argument_list723=generic_argument_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, generic_argument_list723.Tree, generic_argument_list723, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(210); }

			DebugLocation(735, 9);
			char_literal724=(IToken)Match(input,68,Follow._68_in_interface_method_declaration6952); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal724_tree = (object)adaptor.Create(char_literal724, retval);
			adaptor.AddChild(root_0, char_literal724_tree);
			}
			DebugLocation(735, 15);
			// cs.g:735:15: ( formal_parameter_list )?
			int alt211=2;
			try { DebugEnterSubRule(211);
			try { DebugEnterDecision(211, false);
			int LA211_0 = input.LA(1);

			if ((LA211_0==IDENTIFIER||LA211_0==91||LA211_0==95||(LA211_0>=97 && LA211_0<=98)||(LA211_0>=100 && LA211_0<=101)||LA211_0==103||(LA211_0>=105 && LA211_0<=106)||LA211_0==109||LA211_0==114||LA211_0==117||(LA211_0>=119 && LA211_0<=120)||LA211_0==122||LA211_0==126||LA211_0==129||LA211_0==132||LA211_0==135||LA211_0==138||LA211_0==141||(LA211_0>=143 && LA211_0<=144)||(LA211_0>=146 && LA211_0<=148)||(LA211_0>=151 && LA211_0<=152)||(LA211_0>=154 && LA211_0<=155)||(LA211_0>=157 && LA211_0<=158)||LA211_0==160||LA211_0==162||(LA211_0>=166 && LA211_0<=167)||LA211_0==169||(LA211_0>=171 && LA211_0<=173)||LA211_0==177||LA211_0==180||LA211_0==183||(LA211_0>=185 && LA211_0<=186)||(LA211_0>=189 && LA211_0<=190)||LA211_0==192||LA211_0==194||LA211_0==196))
			{
				alt211 = 1;
			}
			} finally { DebugExitDecision(211); }
			switch (alt211)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:735:15: formal_parameter_list
				{
				DebugLocation(735, 15);
				PushFollow(Follow._formal_parameter_list_in_interface_method_declaration6956);
				formal_parameter_list725=formal_parameter_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, formal_parameter_list725.Tree, formal_parameter_list725, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(211); }

			DebugLocation(735, 40);
			char_literal726=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_interface_method_declaration6961), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal726_tree = (object)adaptor.Create(char_literal726, retval);
			adaptor.AddChild(root_0, char_literal726_tree);
			}
			DebugLocation(735, 46);
			// cs.g:735:46: ( type_parameter_constraints_clauses )?
			int alt212=2;
			try { DebugEnterSubRule(212);
			try { DebugEnterDecision(212, false);
			int LA212_0 = input.LA(1);

			if ((LA212_0==194))
			{
				alt212 = 1;
			}
			} finally { DebugExitDecision(212); }
			switch (alt212)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:735:46: type_parameter_constraints_clauses
				{
				DebugLocation(735, 46);
				PushFollow(Follow._type_parameter_constraints_clauses_in_interface_method_declaration6965);
				type_parameter_constraints_clauses727=type_parameter_constraints_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraints_clauses727.Tree, type_parameter_constraints_clauses727, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(212); }

			DebugLocation(735, 84);
			char_literal728=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_interface_method_declaration6970), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal728_tree = (object)adaptor.Create(char_literal728, retval);
			adaptor.AddChild(root_0, char_literal728_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_method_declaration", 211);
			LeaveRule("interface_method_declaration", 211);
			LeaveRule_interface_method_declaration();
			if (state.backtracking > 0) { Memoize(input, 211, interface_method_declaration_StartIndex); }

		}
		DebugLocation(735, 87);
		} finally { DebugExitRule(GrammarFileName, "interface_method_declaration"); }
		return retval;

	}
	// $ANTLR end "interface_method_declaration"

	partial void EnterRule_interface_event_declaration();
	partial void LeaveRule_interface_event_declaration();

	// $ANTLR start "interface_event_declaration"
	// cs.g:736:1: interface_event_declaration : 'event' type identifier ';' ;
	[GrammarRule("interface_event_declaration")]
	public XAstParserRuleReturnScope interface_event_declaration()
	{
		EnterRule_interface_event_declaration();
		EnterRule("interface_event_declaration", 212);
		var retval = new XAstParserRuleReturnScope("interface_event_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int interface_event_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal729 = default(IToken);
		IToken char_literal732 = default(IToken);
		XAstParserRuleReturnScope type730 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier731 = default(XAstParserRuleReturnScope);

		object string_literal729_tree = default(object);
		object char_literal732_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interface_event_declaration");
		DebugLocation(736, 38);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 212)) { return retval; }

			// cs.g:736:28: ( 'event' type identifier ';' )
			DebugEnterAlt(1);
			// cs.g:738:5: 'event' type identifier ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(738, 5);
			string_literal729=(IToken)Match(input,123,Follow._123_in_interface_event_declaration6987); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal729_tree = (object)adaptor.Create(string_literal729, retval);
			adaptor.AddChild(root_0, string_literal729_tree);
			}
			DebugLocation(738, 15);
			PushFollow(Follow._type_in_interface_event_declaration6991);
			type730=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type730.Tree, type730, retval);
			DebugLocation(738, 22);
			PushFollow(Follow._identifier_in_interface_event_declaration6995);
			identifier731=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier731.Tree, identifier731, retval);
			DebugLocation(738, 35);
			char_literal732=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_interface_event_declaration6999), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal732_tree = (object)adaptor.Create(char_literal732, retval);
			adaptor.AddChild(root_0, char_literal732_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_event_declaration", 212);
			LeaveRule("interface_event_declaration", 212);
			LeaveRule_interface_event_declaration();
			if (state.backtracking > 0) { Memoize(input, 212, interface_event_declaration_StartIndex); }

		}
		DebugLocation(738, 38);
		} finally { DebugExitRule(GrammarFileName, "interface_event_declaration"); }
		return retval;

	}
	// $ANTLR end "interface_event_declaration"

	partial void EnterRule_interface_indexer_declaration();
	partial void LeaveRule_interface_indexer_declaration();

	// $ANTLR start "interface_indexer_declaration"
	// cs.g:739:1: interface_indexer_declaration : 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}' ;
	[GrammarRule("interface_indexer_declaration")]
	public XAstParserRuleReturnScope interface_indexer_declaration()
	{
		EnterRule_interface_indexer_declaration();
		EnterRule("interface_indexer_declaration", 213);
		var retval = new XAstParserRuleReturnScope("interface_indexer_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int interface_indexer_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal733 = default(IToken);
		IToken char_literal734 = default(IToken);
		IToken char_literal736 = default(IToken);
		IToken char_literal737 = default(IToken);
		IToken char_literal739 = default(IToken);
		XAstParserRuleReturnScope formal_parameter_list735 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_accessor_declarations738 = default(XAstParserRuleReturnScope);

		object string_literal733_tree = default(object);
		object char_literal734_tree = default(object);
		object char_literal736_tree = default(object);
		object char_literal737_tree = default(object);
		object char_literal739_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interface_indexer_declaration");
		DebugLocation(739, 93);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 213)) { return retval; }

			// cs.g:739:30: ( 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}' )
			DebugEnterAlt(1);
			// cs.g:741:5: 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(741, 5);
			string_literal733=(IToken)Match(input,180,Follow._180_in_interface_indexer_declaration7017); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal733_tree = (object)adaptor.Create(string_literal733, retval);
			adaptor.AddChild(root_0, string_literal733_tree);
			}
			DebugLocation(741, 14);
			char_literal734=(IToken)Match(input,91,Follow._91_in_interface_indexer_declaration7021); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal734_tree = (object)adaptor.Create(char_literal734, retval);
			adaptor.AddChild(root_0, char_literal734_tree);
			}
			DebugLocation(741, 20);
			PushFollow(Follow._formal_parameter_list_in_interface_indexer_declaration7025);
			formal_parameter_list735=formal_parameter_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, formal_parameter_list735.Tree, formal_parameter_list735, retval);
			DebugLocation(741, 44);
			char_literal736=(IToken)Match(input,92,Follow._92_in_interface_indexer_declaration7029); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal736_tree = (object)adaptor.Create(char_literal736, retval);
			adaptor.AddChild(root_0, char_literal736_tree);
			}
			DebugLocation(741, 50);
			char_literal737=(IToken)Match(input,197,Follow._197_in_interface_indexer_declaration7033); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal737_tree = (object)adaptor.Create(char_literal737, retval);
			adaptor.AddChild(root_0, char_literal737_tree);
			}
			DebugLocation(741, 56);
			PushFollow(Follow._interface_accessor_declarations_in_interface_indexer_declaration7037);
			interface_accessor_declarations738=interface_accessor_declarations();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, interface_accessor_declarations738.Tree, interface_accessor_declarations738, retval);
			DebugLocation(741, 90);
			char_literal739=(IToken)Match(input,201,Follow._201_in_interface_indexer_declaration7041); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal739_tree = (object)adaptor.Create(char_literal739, retval);
			adaptor.AddChild(root_0, char_literal739_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_indexer_declaration", 213);
			LeaveRule("interface_indexer_declaration", 213);
			LeaveRule_interface_indexer_declaration();
			if (state.backtracking > 0) { Memoize(input, 213, interface_indexer_declaration_StartIndex); }

		}
		DebugLocation(741, 93);
		} finally { DebugExitRule(GrammarFileName, "interface_indexer_declaration"); }
		return retval;

	}
	// $ANTLR end "interface_indexer_declaration"

	partial void EnterRule_interface_accessor_declarations();
	partial void LeaveRule_interface_accessor_declarations();

	// $ANTLR start "interface_accessor_declarations"
	// cs.g:742:1: interface_accessor_declarations : ( attributes )? ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? ) ;
	[GrammarRule("interface_accessor_declarations")]
	public XAstParserRuleReturnScope interface_accessor_declarations()
	{
		EnterRule_interface_accessor_declarations();
		EnterRule("interface_accessor_declarations", 214);
		var retval = new XAstParserRuleReturnScope("interface_accessor_declarations");
		
		retval.Start = (IToken)input.LT(1);
		int interface_accessor_declarations_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope attributes740 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_get_accessor_declaration741 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attributes742 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_set_accessor_declaration743 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_set_accessor_declaration744 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attributes745 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_get_accessor_declaration746 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "interface_accessor_declarations");
		DebugLocation(742, 98);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 214)) { return retval; }

			// cs.g:742:32: ( ( attributes )? ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? ) )
			DebugEnterAlt(1);
			// cs.g:743:5: ( attributes )? ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(743, 5);
			// cs.g:743:5: ( attributes )?
			int alt213=2;
			try { DebugEnterSubRule(213);
			try { DebugEnterDecision(213, false);
			int LA213_0 = input.LA(1);

			if ((LA213_0==91))
			{
				alt213 = 1;
			}
			} finally { DebugExitDecision(213); }
			switch (alt213)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:743:5: attributes
				{
				DebugLocation(743, 5);
				PushFollow(Follow._attributes_in_interface_accessor_declarations7052);
				attributes740=attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attributes740.Tree, attributes740, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(213); }

			DebugLocation(744, 9);
			// cs.g:744:9: ( interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )? )
			int alt218=2;
			try { DebugEnterSubRule(218);
			try { DebugEnterDecision(218, false);
			int LA218_0 = input.LA(1);

			if ((LA218_0==133))
			{
				alt218 = 1;
			}
			else if ((LA218_0==172))
			{
				alt218 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 218, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(218); }
			switch (alt218)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:744:10: interface_get_accessor_declaration ( attributes )? ( interface_set_accessor_declaration )?
				{
				DebugLocation(744, 10);
				PushFollow(Follow._interface_get_accessor_declaration_in_interface_accessor_declarations7067);
				interface_get_accessor_declaration741=interface_get_accessor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_get_accessor_declaration741.Tree, interface_get_accessor_declaration741, retval);
				DebugLocation(744, 47);
				// cs.g:744:47: ( attributes )?
				int alt214=2;
				try { DebugEnterSubRule(214);
				try { DebugEnterDecision(214, false);
				int LA214_0 = input.LA(1);

				if ((LA214_0==91))
				{
					alt214 = 1;
				}
				} finally { DebugExitDecision(214); }
				switch (alt214)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:744:47: attributes
					{
					DebugLocation(744, 47);
					PushFollow(Follow._attributes_in_interface_accessor_declarations7071);
					attributes742=attributes();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attributes742.Tree, attributes742, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(214); }

				DebugLocation(744, 61);
				// cs.g:744:61: ( interface_set_accessor_declaration )?
				int alt215=2;
				try { DebugEnterSubRule(215);
				try { DebugEnterDecision(215, false);
				int LA215_0 = input.LA(1);

				if ((LA215_0==172))
				{
					alt215 = 1;
				}
				} finally { DebugExitDecision(215); }
				switch (alt215)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:744:61: interface_set_accessor_declaration
					{
					DebugLocation(744, 61);
					PushFollow(Follow._interface_set_accessor_declaration_in_interface_accessor_declarations7076);
					interface_set_accessor_declaration743=interface_set_accessor_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_set_accessor_declaration743.Tree, interface_set_accessor_declaration743, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(215); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:745:11: interface_set_accessor_declaration ( attributes )? ( interface_get_accessor_declaration )?
				{
				DebugLocation(745, 11);
				PushFollow(Follow._interface_set_accessor_declaration_in_interface_accessor_declarations7089);
				interface_set_accessor_declaration744=interface_set_accessor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_set_accessor_declaration744.Tree, interface_set_accessor_declaration744, retval);
				DebugLocation(745, 48);
				// cs.g:745:48: ( attributes )?
				int alt216=2;
				try { DebugEnterSubRule(216);
				try { DebugEnterDecision(216, false);
				int LA216_0 = input.LA(1);

				if ((LA216_0==91))
				{
					alt216 = 1;
				}
				} finally { DebugExitDecision(216); }
				switch (alt216)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:745:48: attributes
					{
					DebugLocation(745, 48);
					PushFollow(Follow._attributes_in_interface_accessor_declarations7093);
					attributes745=attributes();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attributes745.Tree, attributes745, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(216); }

				DebugLocation(745, 62);
				// cs.g:745:62: ( interface_get_accessor_declaration )?
				int alt217=2;
				try { DebugEnterSubRule(217);
				try { DebugEnterDecision(217, false);
				int LA217_0 = input.LA(1);

				if ((LA217_0==133))
				{
					alt217 = 1;
				}
				} finally { DebugExitDecision(217); }
				switch (alt217)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:745:62: interface_get_accessor_declaration
					{
					DebugLocation(745, 62);
					PushFollow(Follow._interface_get_accessor_declaration_in_interface_accessor_declarations7098);
					interface_get_accessor_declaration746=interface_get_accessor_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_get_accessor_declaration746.Tree, interface_get_accessor_declaration746, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(217); }


				}
				break;

			}
			} finally { DebugExitSubRule(218); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_accessor_declarations", 214);
			LeaveRule("interface_accessor_declarations", 214);
			LeaveRule_interface_accessor_declarations();
			if (state.backtracking > 0) { Memoize(input, 214, interface_accessor_declarations_StartIndex); }

		}
		DebugLocation(745, 98);
		} finally { DebugExitRule(GrammarFileName, "interface_accessor_declarations"); }
		return retval;

	}
	// $ANTLR end "interface_accessor_declarations"

	partial void EnterRule_interface_get_accessor_declaration();
	partial void LeaveRule_interface_get_accessor_declaration();

	// $ANTLR start "interface_get_accessor_declaration"
	// cs.g:746:1: interface_get_accessor_declaration : 'get' ';' ;
	[GrammarRule("interface_get_accessor_declaration")]
	public XAstParserRuleReturnScope interface_get_accessor_declaration()
	{
		EnterRule_interface_get_accessor_declaration();
		EnterRule("interface_get_accessor_declaration", 215);
		var retval = new XAstParserRuleReturnScope("interface_get_accessor_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int interface_get_accessor_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal747 = default(IToken);
		IToken char_literal748 = default(IToken);

		object string_literal747_tree = default(object);
		object char_literal748_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interface_get_accessor_declaration");
		DebugLocation(746, 16);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 215)) { return retval; }

			// cs.g:746:35: ( 'get' ';' )
			DebugEnterAlt(1);
			// cs.g:747:5: 'get' ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(747, 5);
			string_literal747=(IToken)Match(input,133,Follow._133_in_interface_get_accessor_declaration7111); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal747_tree = (object)adaptor.Create(string_literal747, retval);
			adaptor.AddChild(root_0, string_literal747_tree);
			}
			DebugLocation(747, 13);
			char_literal748=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_interface_get_accessor_declaration7115), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal748_tree = (object)adaptor.Create(char_literal748, retval);
			adaptor.AddChild(root_0, char_literal748_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_get_accessor_declaration", 215);
			LeaveRule("interface_get_accessor_declaration", 215);
			LeaveRule_interface_get_accessor_declaration();
			if (state.backtracking > 0) { Memoize(input, 215, interface_get_accessor_declaration_StartIndex); }

		}
		DebugLocation(747, 16);
		} finally { DebugExitRule(GrammarFileName, "interface_get_accessor_declaration"); }
		return retval;

	}
	// $ANTLR end "interface_get_accessor_declaration"

	partial void EnterRule_interface_set_accessor_declaration();
	partial void LeaveRule_interface_set_accessor_declaration();

	// $ANTLR start "interface_set_accessor_declaration"
	// cs.g:748:1: interface_set_accessor_declaration : 'set' ';' ;
	[GrammarRule("interface_set_accessor_declaration")]
	public XAstParserRuleReturnScope interface_set_accessor_declaration()
	{
		EnterRule_interface_set_accessor_declaration();
		EnterRule("interface_set_accessor_declaration", 216);
		var retval = new XAstParserRuleReturnScope("interface_set_accessor_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int interface_set_accessor_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal749 = default(IToken);
		IToken char_literal750 = default(IToken);

		object string_literal749_tree = default(object);
		object char_literal750_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "interface_set_accessor_declaration");
		DebugLocation(748, 16);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 216)) { return retval; }

			// cs.g:748:35: ( 'set' ';' )
			DebugEnterAlt(1);
			// cs.g:749:5: 'set' ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(749, 5);
			string_literal749=(IToken)Match(input,172,Follow._172_in_interface_set_accessor_declaration7128); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal749_tree = (object)adaptor.Create(string_literal749, retval);
			adaptor.AddChild(root_0, string_literal749_tree);
			}
			DebugLocation(749, 13);
			char_literal750=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_interface_set_accessor_declaration7132), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal750_tree = (object)adaptor.Create(char_literal750, retval);
			adaptor.AddChild(root_0, char_literal750_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("interface_set_accessor_declaration", 216);
			LeaveRule("interface_set_accessor_declaration", 216);
			LeaveRule_interface_set_accessor_declaration();
			if (state.backtracking > 0) { Memoize(input, 216, interface_set_accessor_declaration_StartIndex); }

		}
		DebugLocation(749, 16);
		} finally { DebugExitRule(GrammarFileName, "interface_set_accessor_declaration"); }
		return retval;

	}
	// $ANTLR end "interface_set_accessor_declaration"

	partial void EnterRule_method_modifiers();
	partial void LeaveRule_method_modifiers();

	// $ANTLR start "method_modifiers"
	// cs.g:750:1: method_modifiers : ( modifier )+ ;
	[GrammarRule("method_modifiers")]
	public XAstParserRuleReturnScope method_modifiers()
	{
		EnterRule_method_modifiers();
		EnterRule("method_modifiers", 217);
		var retval = new XAstParserRuleReturnScope("method_modifiers");
		
		retval.Start = (IToken)input.LT(1);
		int method_modifiers_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope modifier751 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "method_modifiers");
		DebugLocation(750, 14);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 217)) { return retval; }

			// cs.g:750:17: ( ( modifier )+ )
			DebugEnterAlt(1);
			// cs.g:751:5: ( modifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(751, 5);
			// cs.g:751:5: ( modifier )+
			int cnt219=0;
			try { DebugEnterSubRule(219);
			while (true)
			{
				int alt219=2;
				try { DebugEnterDecision(219, false);
				int LA219_0 = input.LA(1);

				if ((LA219_0==96||LA219_0==125||LA219_0==140||LA219_0==150||LA219_0==156||LA219_0==161||(LA219_0>=163 && LA219_0<=165)||LA219_0==170||LA219_0==176||LA219_0==188||LA219_0==191||LA219_0==193))
				{
					alt219 = 1;
				}


				} finally { DebugExitDecision(219); }
				switch (alt219)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:751:5: modifier
					{
					DebugLocation(751, 5);
					PushFollow(Follow._modifier_in_method_modifiers7145);
					modifier751=modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, modifier751.Tree, modifier751, retval);

					}
					break;

				default:
					if (cnt219 >= 1)
						goto loop219;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee219 = new EarlyExitException( 219, input );
					DebugRecognitionException(eee219);
					throw eee219;
				}
				cnt219++;
			}
			loop219:
				;

			} finally { DebugExitSubRule(219); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("method_modifiers", 217);
			LeaveRule("method_modifiers", 217);
			LeaveRule_method_modifiers();
			if (state.backtracking > 0) { Memoize(input, 217, method_modifiers_StartIndex); }

		}
		DebugLocation(751, 14);
		} finally { DebugExitRule(GrammarFileName, "method_modifiers"); }
		return retval;

	}
	// $ANTLR end "method_modifiers"

	partial void EnterRule_struct_declaration();
	partial void LeaveRule_struct_declaration();

	// $ANTLR start "struct_declaration"
	// cs.g:754:1: struct_declaration : 'struct' type_or_generic ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )? ;
	[GrammarRule("struct_declaration")]
	public XAstParserRuleReturnScope struct_declaration()
	{
		EnterRule_struct_declaration();
		EnterRule("struct_declaration", 218);
		var retval = new XAstParserRuleReturnScope("struct_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int struct_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal752 = default(IToken);
		IToken char_literal757 = default(IToken);
		XAstParserRuleReturnScope type_or_generic753 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_interfaces754 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_parameter_constraints_clauses755 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_body756 = default(XAstParserRuleReturnScope);

		object string_literal752_tree = default(object);
		object char_literal757_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_declaration");
		DebugLocation(754, 111);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 218)) { return retval; }

			// cs.g:754:19: ( 'struct' type_or_generic ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )? )
			DebugEnterAlt(1);
			// cs.g:755:5: 'struct' type_or_generic ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(755, 5);
			string_literal752=(IToken)Match(input,178,Follow._178_in_struct_declaration7163); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal752_tree = (object)adaptor.Create(string_literal752, retval);
			adaptor.AddChild(root_0, string_literal752_tree);
			}
			DebugLocation(755, 16);
			PushFollow(Follow._type_or_generic_in_struct_declaration7167);
			type_or_generic753=type_or_generic();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_or_generic753.Tree, type_or_generic753, retval);
			DebugLocation(755, 34);
			// cs.g:755:34: ( struct_interfaces )?
			int alt220=2;
			try { DebugEnterSubRule(220);
			try { DebugEnterDecision(220, false);
			int LA220_0 = input.LA(1);

			if ((LA220_0==79))
			{
				alt220 = 1;
			}
			} finally { DebugExitDecision(220); }
			switch (alt220)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:755:34: struct_interfaces
				{
				DebugLocation(755, 34);
				PushFollow(Follow._struct_interfaces_in_struct_declaration7171);
				struct_interfaces754=struct_interfaces();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_interfaces754.Tree, struct_interfaces754, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(220); }

			DebugLocation(755, 55);
			// cs.g:755:55: ( type_parameter_constraints_clauses )?
			int alt221=2;
			try { DebugEnterSubRule(221);
			try { DebugEnterDecision(221, false);
			int LA221_0 = input.LA(1);

			if ((LA221_0==194))
			{
				alt221 = 1;
			}
			} finally { DebugExitDecision(221); }
			switch (alt221)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:755:55: type_parameter_constraints_clauses
				{
				DebugLocation(755, 55);
				PushFollow(Follow._type_parameter_constraints_clauses_in_struct_declaration7176);
				type_parameter_constraints_clauses755=type_parameter_constraints_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type_parameter_constraints_clauses755.Tree, type_parameter_constraints_clauses755, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(221); }

			DebugLocation(755, 93);
			PushFollow(Follow._struct_body_in_struct_declaration7181);
			struct_body756=struct_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, struct_body756.Tree, struct_body756, retval);
			DebugLocation(755, 107);
			// cs.g:755:107: ( ';' )?
			int alt222=2;
			try { DebugEnterSubRule(222);
			try { DebugEnterDecision(222, false);
			int LA222_0 = input.LA(1);

			if ((LA222_0==SEMI))
			{
				alt222 = 1;
			}
			} finally { DebugExitDecision(222); }
			switch (alt222)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:755:107: ';'
				{
				DebugLocation(755, 107);
				char_literal757=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_struct_declaration7185), "SEMI"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal757_tree = (object)adaptor.Create(char_literal757, retval);
				adaptor.AddChild(root_0, char_literal757_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(222); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_declaration", 218);
			LeaveRule("struct_declaration", 218);
			LeaveRule_struct_declaration();
			if (state.backtracking > 0) { Memoize(input, 218, struct_declaration_StartIndex); }

		}
		DebugLocation(755, 111);
		} finally { DebugExitRule(GrammarFileName, "struct_declaration"); }
		return retval;

	}
	// $ANTLR end "struct_declaration"

	partial void EnterRule_struct_modifiers();
	partial void LeaveRule_struct_modifiers();

	// $ANTLR start "struct_modifiers"
	// cs.g:756:1: struct_modifiers : ( struct_modifier )+ ;
	[GrammarRule("struct_modifiers")]
	public XAstParserRuleReturnScope struct_modifiers()
	{
		EnterRule_struct_modifiers();
		EnterRule("struct_modifiers", 219);
		var retval = new XAstParserRuleReturnScope("struct_modifiers");
		
		retval.Start = (IToken)input.LT(1);
		int struct_modifiers_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope struct_modifier758 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "struct_modifiers");
		DebugLocation(756, 21);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 219)) { return retval; }

			// cs.g:756:17: ( ( struct_modifier )+ )
			DebugEnterAlt(1);
			// cs.g:757:5: ( struct_modifier )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(757, 5);
			// cs.g:757:5: ( struct_modifier )+
			int cnt223=0;
			try { DebugEnterSubRule(223);
			while (true)
			{
				int alt223=2;
				try { DebugEnterDecision(223, false);
				int LA223_0 = input.LA(1);

				if ((LA223_0==140||LA223_0==150||LA223_0==161||(LA223_0>=163 && LA223_0<=164)||LA223_0==188))
				{
					alt223 = 1;
				}


				} finally { DebugExitDecision(223); }
				switch (alt223)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:757:5: struct_modifier
					{
					DebugLocation(757, 5);
					PushFollow(Follow._struct_modifier_in_struct_modifiers7197);
					struct_modifier758=struct_modifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_modifier758.Tree, struct_modifier758, retval);

					}
					break;

				default:
					if (cnt223 >= 1)
						goto loop223;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee223 = new EarlyExitException( 223, input );
					DebugRecognitionException(eee223);
					throw eee223;
				}
				cnt223++;
			}
			loop223:
				;

			} finally { DebugExitSubRule(223); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_modifiers", 219);
			LeaveRule("struct_modifiers", 219);
			LeaveRule_struct_modifiers();
			if (state.backtracking > 0) { Memoize(input, 219, struct_modifiers_StartIndex); }

		}
		DebugLocation(757, 21);
		} finally { DebugExitRule(GrammarFileName, "struct_modifiers"); }
		return retval;

	}
	// $ANTLR end "struct_modifiers"

	partial void EnterRule_struct_modifier();
	partial void LeaveRule_struct_modifier();

	// $ANTLR start "struct_modifier"
	// cs.g:758:1: struct_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' );
	[GrammarRule("struct_modifier")]
	public XAstParserRuleReturnScope struct_modifier()
	{
		EnterRule_struct_modifier();
		EnterRule("struct_modifier", 220);
		var retval = new XAstParserRuleReturnScope("struct_modifier");
		
		retval.Start = (IToken)input.LT(1);
		int struct_modifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set759 = default(IToken);

		object set759_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_modifier");
		DebugLocation(758, 71);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 220)) { return retval; }

			// cs.g:758:16: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(758, 16);

			set759=(IToken)input.LT(1);
			if (input.LA(1)==140||input.LA(1)==150||input.LA(1)==161||(input.LA(1)>=163 && input.LA(1)<=164)||input.LA(1)==188)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set759, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_modifier", 220);
			LeaveRule("struct_modifier", 220);
			LeaveRule_struct_modifier();
			if (state.backtracking > 0) { Memoize(input, 220, struct_modifier_StartIndex); }

		}
		DebugLocation(759, 71);
		} finally { DebugExitRule(GrammarFileName, "struct_modifier"); }
		return retval;

	}
	// $ANTLR end "struct_modifier"

	partial void EnterRule_struct_interfaces();
	partial void LeaveRule_struct_interfaces();

	// $ANTLR start "struct_interfaces"
	// cs.g:760:1: struct_interfaces : ':' interface_type_list ;
	[GrammarRule("struct_interfaces")]
	public XAstParserRuleReturnScope struct_interfaces()
	{
		EnterRule_struct_interfaces();
		EnterRule("struct_interfaces", 221);
		var retval = new XAstParserRuleReturnScope("struct_interfaces");
		
		retval.Start = (IToken)input.LT(1);
		int struct_interfaces_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal760 = default(IToken);
		XAstParserRuleReturnScope interface_type_list761 = default(XAstParserRuleReturnScope);

		object char_literal760_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_interfaces");
		DebugLocation(760, 29);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 221)) { return retval; }

			// cs.g:760:18: ( ':' interface_type_list )
			DebugEnterAlt(1);
			// cs.g:761:5: ':' interface_type_list
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(761, 5);
			char_literal760=(IToken)Match(input,79,Follow._79_in_struct_interfaces7240); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal760_tree = (object)adaptor.Create(char_literal760, retval);
			adaptor.AddChild(root_0, char_literal760_tree);
			}
			DebugLocation(761, 11);
			PushFollow(Follow._interface_type_list_in_struct_interfaces7244);
			interface_type_list761=interface_type_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, interface_type_list761.Tree, interface_type_list761, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_interfaces", 221);
			LeaveRule("struct_interfaces", 221);
			LeaveRule_struct_interfaces();
			if (state.backtracking > 0) { Memoize(input, 221, struct_interfaces_StartIndex); }

		}
		DebugLocation(761, 29);
		} finally { DebugExitRule(GrammarFileName, "struct_interfaces"); }
		return retval;

	}
	// $ANTLR end "struct_interfaces"

	partial void EnterRule_struct_body();
	partial void LeaveRule_struct_body();

	// $ANTLR start "struct_body"
	// cs.g:762:1: struct_body : '{' ( struct_member_declarations )? '}' ;
	[GrammarRule("struct_body")]
	public XAstParserRuleReturnScope struct_body()
	{
		EnterRule_struct_body();
		EnterRule("struct_body", 222);
		var retval = new XAstParserRuleReturnScope("struct_body");
		
		retval.Start = (IToken)input.LT(1);
		int struct_body_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal762 = default(IToken);
		IToken char_literal764 = default(IToken);
		XAstParserRuleReturnScope struct_member_declarations763 = default(XAstParserRuleReturnScope);

		object char_literal762_tree = default(object);
		object char_literal764_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_body");
		DebugLocation(762, 43);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 222)) { return retval; }

			// cs.g:762:12: ( '{' ( struct_member_declarations )? '}' )
			DebugEnterAlt(1);
			// cs.g:763:5: '{' ( struct_member_declarations )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(763, 5);
			char_literal762=(IToken)Match(input,197,Follow._197_in_struct_body7254); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal762_tree = (object)adaptor.Create(char_literal762, retval);
			adaptor.AddChild(root_0, char_literal762_tree);
			}
			DebugLocation(763, 11);
			// cs.g:763:11: ( struct_member_declarations )?
			int alt224=2;
			try { DebugEnterSubRule(224);
			try { DebugEnterDecision(224, false);
			int LA224_0 = input.LA(1);

			if ((LA224_0==ENUM||LA224_0==IDENTIFIER||LA224_0==91||(LA224_0>=95 && LA224_0<=98)||(LA224_0>=100 && LA224_0<=101)||LA224_0==103||(LA224_0>=105 && LA224_0<=106)||LA224_0==109||(LA224_0>=111 && LA224_0<=112)||LA224_0==114||(LA224_0>=116 && LA224_0<=117)||(LA224_0>=119 && LA224_0<=120)||(LA224_0>=122 && LA224_0<=126)||LA224_0==129||LA224_0==132||(LA224_0>=135 && LA224_0<=136)||(LA224_0>=138 && LA224_0<=141)||(LA224_0>=143 && LA224_0<=144)||(LA224_0>=146 && LA224_0<=148)||(LA224_0>=150 && LA224_0<=152)||LA224_0==154||(LA224_0>=156 && LA224_0<=157)||(LA224_0>=159 && LA224_0<=165)||LA224_0==167||(LA224_0>=169 && LA224_0<=173)||(LA224_0>=176 && LA224_0<=178)||LA224_0==183||(LA224_0>=185 && LA224_0<=186)||(LA224_0>=188 && LA224_0<=194)||LA224_0==196))
			{
				alt224 = 1;
			}
			} finally { DebugExitDecision(224); }
			switch (alt224)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:763:11: struct_member_declarations
				{
				DebugLocation(763, 11);
				PushFollow(Follow._struct_member_declarations_in_struct_body7258);
				struct_member_declarations763=struct_member_declarations();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_member_declarations763.Tree, struct_member_declarations763, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(224); }

			DebugLocation(763, 41);
			char_literal764=(IToken)Match(input,201,Follow._201_in_struct_body7263); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal764_tree = (object)adaptor.Create(char_literal764, retval);
			adaptor.AddChild(root_0, char_literal764_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_body", 222);
			LeaveRule("struct_body", 222);
			LeaveRule_struct_body();
			if (state.backtracking > 0) { Memoize(input, 222, struct_body_StartIndex); }

		}
		DebugLocation(763, 43);
		} finally { DebugExitRule(GrammarFileName, "struct_body"); }
		return retval;

	}
	// $ANTLR end "struct_body"

	partial void EnterRule_struct_member_declarations();
	partial void LeaveRule_struct_member_declarations();

	// $ANTLR start "struct_member_declarations"
	// cs.g:764:1: struct_member_declarations : ( struct_member_declaration )+ ;
	[GrammarRule("struct_member_declarations")]
	public XAstParserRuleReturnScope struct_member_declarations()
	{
		EnterRule_struct_member_declarations();
		EnterRule("struct_member_declarations", 223);
		var retval = new XAstParserRuleReturnScope("struct_member_declarations");
		
		retval.Start = (IToken)input.LT(1);
		int struct_member_declarations_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope struct_member_declaration765 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "struct_member_declarations");
		DebugLocation(764, 31);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 223)) { return retval; }

			// cs.g:764:27: ( ( struct_member_declaration )+ )
			DebugEnterAlt(1);
			// cs.g:765:5: ( struct_member_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(765, 5);
			// cs.g:765:5: ( struct_member_declaration )+
			int cnt225=0;
			try { DebugEnterSubRule(225);
			while (true)
			{
				int alt225=2;
				try { DebugEnterDecision(225, false);
				int LA225_0 = input.LA(1);

				if ((LA225_0==ENUM||LA225_0==IDENTIFIER||LA225_0==91||(LA225_0>=95 && LA225_0<=98)||(LA225_0>=100 && LA225_0<=101)||LA225_0==103||(LA225_0>=105 && LA225_0<=106)||LA225_0==109||(LA225_0>=111 && LA225_0<=112)||LA225_0==114||(LA225_0>=116 && LA225_0<=117)||(LA225_0>=119 && LA225_0<=120)||(LA225_0>=122 && LA225_0<=126)||LA225_0==129||LA225_0==132||(LA225_0>=135 && LA225_0<=136)||(LA225_0>=138 && LA225_0<=141)||(LA225_0>=143 && LA225_0<=144)||(LA225_0>=146 && LA225_0<=148)||(LA225_0>=150 && LA225_0<=152)||LA225_0==154||(LA225_0>=156 && LA225_0<=157)||(LA225_0>=159 && LA225_0<=165)||LA225_0==167||(LA225_0>=169 && LA225_0<=173)||(LA225_0>=176 && LA225_0<=178)||LA225_0==183||(LA225_0>=185 && LA225_0<=186)||(LA225_0>=188 && LA225_0<=194)||LA225_0==196))
				{
					alt225 = 1;
				}


				} finally { DebugExitDecision(225); }
				switch (alt225)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:765:5: struct_member_declaration
					{
					DebugLocation(765, 5);
					PushFollow(Follow._struct_member_declaration_in_struct_member_declarations7273);
					struct_member_declaration765=struct_member_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_member_declaration765.Tree, struct_member_declaration765, retval);

					}
					break;

				default:
					if (cnt225 >= 1)
						goto loop225;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee225 = new EarlyExitException( 225, input );
					DebugRecognitionException(eee225);
					throw eee225;
				}
				cnt225++;
			}
			loop225:
				;

			} finally { DebugExitSubRule(225); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_member_declarations", 223);
			LeaveRule("struct_member_declarations", 223);
			LeaveRule_struct_member_declarations();
			if (state.backtracking > 0) { Memoize(input, 223, struct_member_declarations_StartIndex); }

		}
		DebugLocation(765, 31);
		} finally { DebugExitRule(GrammarFileName, "struct_member_declarations"); }
		return retval;

	}
	// $ANTLR end "struct_member_declarations"

	partial void EnterRule_struct_member_declaration();
	partial void LeaveRule_struct_member_declaration();

	// $ANTLR start "struct_member_declaration"
	// cs.g:766:1: struct_member_declaration : ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration ) ;
	[GrammarRule("struct_member_declaration")]
	public XAstParserRuleReturnScope struct_member_declaration()
	{
		EnterRule_struct_member_declaration();
		EnterRule("struct_member_declaration", 224);
		var retval = new XAstParserRuleReturnScope("struct_member_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int struct_member_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal767 = default(IToken);
		IToken char_literal770 = default(IToken);
		IToken string_literal772 = default(IToken);
		IToken string_literal779 = default(IToken);
		IToken char_literal785 = default(IToken);
		XAstParserRuleReturnScope m = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope attributes766 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type768 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_declarators769 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope event_declaration771 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope method_declaration773 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_declaration774 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope class_declaration775 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declaration776 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope interface_declaration777 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope class_declaration778 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope method_declaration780 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type781 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope method_declaration782 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope property_declaration783 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type_name784 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope indexer_declaration786 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope indexer_declaration787 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope field_declaration788 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope operator_declaration789 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope struct_declaration790 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope enum_declaration791 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope delegate_declaration792 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope conversion_operator_declaration793 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constructor_declaration794 = default(XAstParserRuleReturnScope);

		object string_literal767_tree = default(object);
		object char_literal770_tree = default(object);
		object string_literal772_tree = default(object);
		object string_literal779_tree = default(object);
		object char_literal785_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "struct_member_declaration");
		DebugLocation(766, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 224)) { return retval; }

			// cs.g:766:26: ( ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration ) )
			DebugEnterAlt(1);
			// cs.g:767:5: ( attributes )? (m= modifiers )? ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(767, 5);
			// cs.g:767:5: ( attributes )?
			int alt226=2;
			try { DebugEnterSubRule(226);
			try { DebugEnterDecision(226, false);
			int LA226_0 = input.LA(1);

			if ((LA226_0==91))
			{
				alt226 = 1;
			}
			} finally { DebugExitDecision(226); }
			switch (alt226)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:767:5: attributes
				{
				DebugLocation(767, 5);
				PushFollow(Follow._attributes_in_struct_member_declaration7285);
				attributes766=attributes();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attributes766.Tree, attributes766, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(226); }

			DebugLocation(767, 20);
			// cs.g:767:20: (m= modifiers )?
			int alt227=2;
			try { DebugEnterSubRule(227);
			try { DebugEnterDecision(227, false);
			int LA227_0 = input.LA(1);

			if ((LA227_0==96||LA227_0==125||LA227_0==140||LA227_0==150||LA227_0==156||LA227_0==161||(LA227_0>=163 && LA227_0<=165)||LA227_0==170||LA227_0==176||LA227_0==188||LA227_0==191||LA227_0==193))
			{
				alt227 = 1;
			}
			} finally { DebugExitDecision(227); }
			switch (alt227)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:767:20: m= modifiers
				{
				DebugLocation(767, 20);
				PushFollow(Follow._modifiers_in_struct_member_declaration7292);
				m=modifiers();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, m.Tree, m, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(227); }

			DebugLocation(768, 5);
			// cs.g:768:5: ( 'const' type constant_declarators ';' | event_declaration | 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration ) | interface_declaration | class_declaration | 'void' method_declaration | type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration ) | struct_declaration | enum_declaration | delegate_declaration | conversion_operator_declaration | constructor_declaration )
			int alt230=12;
			try { DebugEnterSubRule(230);
			try { DebugEnterDecision(230, false);
			switch (input.LA(1))
			{
			case 112:
				{
				alt230 = 1;
				}
				break;
			case 123:
				{
				alt230 = 2;
				}
				break;
			case 159:
				{
				alt230 = 3;
				}
				break;
			case 139:
				{
				alt230 = 4;
				}
				break;
			case 111:
				{
				alt230 = 5;
				}
				break;
			case 192:
				{
				int LA230_6 = input.LA(2);

				if ((LA230_6==Character_literal||LA230_6==FALSE||(LA230_6>=Hex_number && LA230_6<=IDENTIFIER)||(LA230_6>=NULL && LA230_6<=NUMBER)||LA230_6==Real_literal||LA230_6==STRINGLITERAL||LA230_6==TRUE||LA230_6==Verbatim_string_literal||LA230_6==95||(LA230_6>=97 && LA230_6<=98)||(LA230_6>=100 && LA230_6<=101)||LA230_6==103||(LA230_6>=105 && LA230_6<=106)||LA230_6==109||LA230_6==114||LA230_6==117||(LA230_6>=119 && LA230_6<=120)||LA230_6==122||LA230_6==126||LA230_6==129||LA230_6==132||LA230_6==135||LA230_6==138||LA230_6==141||(LA230_6>=143 && LA230_6<=144)||(LA230_6>=146 && LA230_6<=148)||(LA230_6>=151 && LA230_6<=152)||LA230_6==154||LA230_6==157||LA230_6==160||LA230_6==162||LA230_6==167||LA230_6==169||(LA230_6>=171 && LA230_6<=173)||LA230_6==177||LA230_6==183||(LA230_6>=185 && LA230_6<=186)||(LA230_6>=189 && LA230_6<=190)||LA230_6==194||LA230_6==196))
				{
					alt230 = 6;
				}
				else if ((LA230_6==69))
				{
					alt230 = 7;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 230, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				alt230 = 7;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA230_8 = input.LA(2);

				if ((LA230_8==Character_literal||LA230_8==DOT||LA230_8==FALSE||(LA230_8>=Hex_number && LA230_8<=IDENTIFIER)||(LA230_8>=NULL && LA230_8<=NUMBER)||LA230_8==Real_literal||LA230_8==STRINGLITERAL||LA230_8==TRUE||LA230_8==Verbatim_string_literal||LA230_8==69||(LA230_8>=80 && LA230_8<=81)||LA230_8==89||LA230_8==91||LA230_8==95||(LA230_8>=97 && LA230_8<=98)||(LA230_8>=100 && LA230_8<=101)||LA230_8==103||(LA230_8>=105 && LA230_8<=106)||LA230_8==109||LA230_8==114||LA230_8==117||(LA230_8>=119 && LA230_8<=120)||LA230_8==122||LA230_8==126||LA230_8==129||LA230_8==132||LA230_8==135||LA230_8==138||LA230_8==141||(LA230_8>=143 && LA230_8<=144)||(LA230_8>=146 && LA230_8<=148)||(LA230_8>=151 && LA230_8<=154)||LA230_8==157||LA230_8==160||LA230_8==162||LA230_8==167||LA230_8==169||(LA230_8>=171 && LA230_8<=173)||LA230_8==177||LA230_8==180||LA230_8==183||(LA230_8>=185 && LA230_8<=186)||(LA230_8>=189 && LA230_8<=190)||LA230_8==194||LA230_8==196))
				{
					alt230 = 7;
				}
				else if ((LA230_8==68))
				{
					alt230 = 12;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 230, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 178:
				{
				alt230 = 8;
				}
				break;
			case ENUM:
				{
				alt230 = 9;
				}
				break;
			case 116:
				{
				alt230 = 10;
				}
				break;
			case 124:
			case 136:
				{
				alt230 = 11;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 230, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(230); }
			switch (alt230)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:768:7: 'const' type constant_declarators ';'
				{
				DebugLocation(768, 7);
				string_literal767=(IToken)Match(input,112,Follow._112_in_struct_member_declaration7301); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal767_tree = (object)adaptor.Create(string_literal767, retval);
				adaptor.AddChild(root_0, string_literal767_tree);
				}
				DebugLocation(768, 17);
				PushFollow(Follow._type_in_struct_member_declaration7305);
				type768=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type768.Tree, type768, retval);
				DebugLocation(768, 24);
				PushFollow(Follow._constant_declarators_in_struct_member_declaration7309);
				constant_declarators769=constant_declarators();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_declarators769.Tree, constant_declarators769, retval);
				DebugLocation(768, 47);
				char_literal770=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_struct_member_declaration7313), "SEMI"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal770_tree = (object)adaptor.Create(char_literal770, retval);
				adaptor.AddChild(root_0, char_literal770_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:769:7: event_declaration
				{
				DebugLocation(769, 7);
				PushFollow(Follow._event_declaration_in_struct_member_declaration7321);
				event_declaration771=event_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, event_declaration771.Tree, event_declaration771, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:770:7: 'partial' ( method_declaration | interface_declaration | class_declaration | struct_declaration )
				{
				DebugLocation(770, 7);
				string_literal772=(IToken)Match(input,159,Follow._159_in_struct_member_declaration7331); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal772_tree = (object)adaptor.Create(string_literal772, retval);
				adaptor.AddChild(root_0, string_literal772_tree);
				}
				DebugLocation(770, 17);
				// cs.g:770:17: ( method_declaration | interface_declaration | class_declaration | struct_declaration )
				int alt228=4;
				try { DebugEnterSubRule(228);
				try { DebugEnterDecision(228, false);
				switch (input.LA(1))
				{
				case Character_literal:
				case FALSE:
				case Hex_number:
				case IDENTIFIER:
				case NULL:
				case NUMBER:
				case Real_literal:
				case STRINGLITERAL:
				case TRUE:
				case Verbatim_string_literal:
				case 95:
				case 97:
				case 98:
				case 100:
				case 101:
				case 103:
				case 105:
				case 106:
				case 109:
				case 114:
				case 117:
				case 119:
				case 120:
				case 122:
				case 126:
				case 129:
				case 132:
				case 135:
				case 138:
				case 141:
				case 143:
				case 144:
				case 146:
				case 147:
				case 148:
				case 151:
				case 152:
				case 154:
				case 157:
				case 160:
				case 162:
				case 167:
				case 169:
				case 171:
				case 172:
				case 173:
				case 177:
				case 183:
				case 185:
				case 186:
				case 189:
				case 190:
				case 194:
				case 196:
					{
					alt228 = 1;
					}
					break;
				case 139:
					{
					alt228 = 2;
					}
					break;
				case 111:
					{
					alt228 = 3;
					}
					break;
				case 178:
					{
					alt228 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 228, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(228); }
				switch (alt228)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:770:18: method_declaration
					{
					DebugLocation(770, 18);
					PushFollow(Follow._method_declaration_in_struct_member_declaration7334);
					method_declaration773=method_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, method_declaration773.Tree, method_declaration773, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:771:18: interface_declaration
					{
					DebugLocation(771, 18);
					PushFollow(Follow._interface_declaration_in_struct_member_declaration7354);
					interface_declaration774=interface_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, interface_declaration774.Tree, interface_declaration774, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// cs.g:772:18: class_declaration
					{
					DebugLocation(772, 18);
					PushFollow(Follow._class_declaration_in_struct_member_declaration7374);
					class_declaration775=class_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, class_declaration775.Tree, class_declaration775, retval);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// cs.g:773:18: struct_declaration
					{
					DebugLocation(773, 18);
					PushFollow(Follow._struct_declaration_in_struct_member_declaration7394);
					struct_declaration776=struct_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration776.Tree, struct_declaration776, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(228); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:775:7: interface_declaration
				{
				DebugLocation(775, 7);
				PushFollow(Follow._interface_declaration_in_struct_member_declaration7404);
				interface_declaration777=interface_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, interface_declaration777.Tree, interface_declaration777, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// cs.g:776:7: class_declaration
				{
				DebugLocation(776, 7);
				PushFollow(Follow._class_declaration_in_struct_member_declaration7413);
				class_declaration778=class_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_declaration778.Tree, class_declaration778, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// cs.g:777:7: 'void' method_declaration
				{
				DebugLocation(777, 7);
				string_literal779=(IToken)Match(input,192,Follow._192_in_struct_member_declaration7423); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal779_tree = (object)adaptor.Create(string_literal779, retval);
				adaptor.AddChild(root_0, string_literal779_tree);
				}
				DebugLocation(777, 16);
				PushFollow(Follow._method_declaration_in_struct_member_declaration7427);
				method_declaration780=method_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, method_declaration780.Tree, method_declaration780, retval);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// cs.g:778:7: type ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
				{
				DebugLocation(778, 7);
				PushFollow(Follow._type_in_struct_member_declaration7435);
				type781=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type781.Tree, type781, retval);
				DebugLocation(778, 12);
				// cs.g:778:12: ( ( member_name '(' )=> method_declaration | ( member_name '{' )=> property_declaration | ( member_name '.' 'this' )=> type_name '.' indexer_declaration | indexer_declaration | field_declaration | operator_declaration )
				int alt229=6;
				try { DebugEnterSubRule(229);
				try { DebugEnterDecision(229, false);
				switch (input.LA(1))
				{
				case 103:
				case 106:
				case 109:
				case 114:
				case 119:
				case 129:
				case 138:
				case 146:
				case 151:
				case 169:
				case 173:
				case 177:
				case 185:
				case 186:
				case 189:
					{
					int LA229_1 = input.LA(2);

					if ((EvaluatePredicate(synpred28_cs_fragment)))
					{
						alt229 = 1;
					}
					else if ((EvaluatePredicate(synpred29_cs_fragment)))
					{
						alt229 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 229, 1, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case IDENTIFIER:
				case 95:
				case 97:
				case 98:
				case 100:
				case 101:
				case 105:
				case 117:
				case 120:
				case 122:
				case 126:
				case 132:
				case 135:
				case 141:
				case 143:
				case 144:
				case 147:
				case 148:
				case 152:
				case 154:
				case 157:
				case 160:
				case 162:
				case 167:
				case 171:
				case 172:
				case 183:
				case 190:
				case 194:
				case 196:
					{
					int LA229_2 = input.LA(2);

					if ((EvaluatePredicate(synpred28_cs_fragment)))
					{
						alt229 = 1;
					}
					else if ((EvaluatePredicate(synpred29_cs_fragment)))
					{
						alt229 = 2;
					}
					else if ((EvaluatePredicate(synpred30_cs_fragment)))
					{
						alt229 = 3;
					}
					else if ((true))
					{
						alt229 = 5;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 229, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case Character_literal:
				case FALSE:
				case Hex_number:
				case NULL:
				case NUMBER:
				case Real_literal:
				case STRINGLITERAL:
				case TRUE:
				case Verbatim_string_literal:
					{
					int LA229_3 = input.LA(2);

					if ((EvaluatePredicate(synpred28_cs_fragment)))
					{
						alt229 = 1;
					}
					else if ((EvaluatePredicate(synpred29_cs_fragment)))
					{
						alt229 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 229, 3, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 180:
					{
					alt229 = 4;
					}
					break;
				case 153:
					{
					alt229 = 6;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 229, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(229); }
				switch (alt229)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:778:14: ( member_name '(' )=> method_declaration
					{
					DebugLocation(778, 37);
					PushFollow(Follow._method_declaration_in_struct_member_declaration7449);
					method_declaration782=method_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, method_declaration782.Tree, method_declaration782, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:779:14: ( member_name '{' )=> property_declaration
					{
					DebugLocation(779, 37);
					PushFollow(Follow._property_declaration_in_struct_member_declaration7474);
					property_declaration783=property_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, property_declaration783.Tree, property_declaration783, retval);

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// cs.g:780:14: ( member_name '.' 'this' )=> type_name '.' indexer_declaration
					{
					DebugLocation(780, 46);
					PushFollow(Follow._type_name_in_struct_member_declaration7503);
					type_name784=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type_name784.Tree, type_name784, retval);
					DebugLocation(780, 56);
					char_literal785=(IToken)new XToken((IToken)Match(input,DOT,Follow._DOT_in_struct_member_declaration7505), "DOT"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal785_tree = (object)adaptor.Create(char_literal785, retval);
					adaptor.AddChild(root_0, char_literal785_tree);
					}
					DebugLocation(780, 60);
					PushFollow(Follow._indexer_declaration_in_struct_member_declaration7507);
					indexer_declaration786=indexer_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, indexer_declaration786.Tree, indexer_declaration786, retval);

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// cs.g:781:14: indexer_declaration
					{
					DebugLocation(781, 14);
					PushFollow(Follow._indexer_declaration_in_struct_member_declaration7522);
					indexer_declaration787=indexer_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, indexer_declaration787.Tree, indexer_declaration787, retval);

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// cs.g:782:14: field_declaration
					{
					DebugLocation(782, 14);
					PushFollow(Follow._field_declaration_in_struct_member_declaration7538);
					field_declaration788=field_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, field_declaration788.Tree, field_declaration788, retval);

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// cs.g:783:14: operator_declaration
					{
					DebugLocation(783, 14);
					PushFollow(Follow._operator_declaration_in_struct_member_declaration7559);
					operator_declaration789=operator_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, operator_declaration789.Tree, operator_declaration789, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(229); }


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// cs.g:787:7: struct_declaration
				{
				DebugLocation(787, 7);
				PushFollow(Follow._struct_declaration_in_struct_member_declaration7586);
				struct_declaration790=struct_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, struct_declaration790.Tree, struct_declaration790, retval);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// cs.g:788:7: enum_declaration
				{
				DebugLocation(788, 7);
				PushFollow(Follow._enum_declaration_in_struct_member_declaration7595);
				enum_declaration791=enum_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_declaration791.Tree, enum_declaration791, retval);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// cs.g:789:7: delegate_declaration
				{
				DebugLocation(789, 7);
				PushFollow(Follow._delegate_declaration_in_struct_member_declaration7605);
				delegate_declaration792=delegate_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, delegate_declaration792.Tree, delegate_declaration792, retval);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// cs.g:790:7: conversion_operator_declaration
				{
				DebugLocation(790, 7);
				PushFollow(Follow._conversion_operator_declaration_in_struct_member_declaration7614);
				conversion_operator_declaration793=conversion_operator_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, conversion_operator_declaration793.Tree, conversion_operator_declaration793, retval);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// cs.g:791:7: constructor_declaration
				{
				DebugLocation(791, 7);
				PushFollow(Follow._constructor_declaration_in_struct_member_declaration7622);
				constructor_declaration794=constructor_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constructor_declaration794.Tree, constructor_declaration794, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(230); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("struct_member_declaration", 224);
			LeaveRule("struct_member_declaration", 224);
			LeaveRule_struct_member_declaration();
			if (state.backtracking > 0) { Memoize(input, 224, struct_member_declaration_StartIndex); }

		}
		DebugLocation(793, 4);
		} finally { DebugExitRule(GrammarFileName, "struct_member_declaration"); }
		return retval;

	}
	// $ANTLR end "struct_member_declaration"

	partial void EnterRule_indexer_declaration();
	partial void LeaveRule_indexer_declaration();

	// $ANTLR start "indexer_declaration"
	// cs.g:797:1: indexer_declaration : indexer_declarator '{' accessor_declarations '}' ;
	[GrammarRule("indexer_declaration")]
	public XAstParserRuleReturnScope indexer_declaration()
	{
		EnterRule_indexer_declaration();
		EnterRule("indexer_declaration", 225);
		var retval = new XAstParserRuleReturnScope("indexer_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int indexer_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal796 = default(IToken);
		IToken char_literal798 = default(IToken);
		XAstParserRuleReturnScope indexer_declarator795 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope accessor_declarations797 = default(XAstParserRuleReturnScope);

		object char_literal796_tree = default(object);
		object char_literal798_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "indexer_declaration");
		DebugLocation(797, 59);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 225)) { return retval; }

			// cs.g:797:20: ( indexer_declarator '{' accessor_declarations '}' )
			DebugEnterAlt(1);
			// cs.g:798:5: indexer_declarator '{' accessor_declarations '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(798, 5);
			PushFollow(Follow._indexer_declarator_in_indexer_declaration7648);
			indexer_declarator795=indexer_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, indexer_declarator795.Tree, indexer_declarator795, retval);
			DebugLocation(798, 26);
			char_literal796=(IToken)Match(input,197,Follow._197_in_indexer_declaration7652); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal796_tree = (object)adaptor.Create(char_literal796, retval);
			adaptor.AddChild(root_0, char_literal796_tree);
			}
			DebugLocation(798, 32);
			PushFollow(Follow._accessor_declarations_in_indexer_declaration7656);
			accessor_declarations797=accessor_declarations();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, accessor_declarations797.Tree, accessor_declarations797, retval);
			DebugLocation(798, 56);
			char_literal798=(IToken)Match(input,201,Follow._201_in_indexer_declaration7660); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal798_tree = (object)adaptor.Create(char_literal798, retval);
			adaptor.AddChild(root_0, char_literal798_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("indexer_declaration", 225);
			LeaveRule("indexer_declaration", 225);
			LeaveRule_indexer_declaration();
			if (state.backtracking > 0) { Memoize(input, 225, indexer_declaration_StartIndex); }

		}
		DebugLocation(798, 59);
		} finally { DebugExitRule(GrammarFileName, "indexer_declaration"); }
		return retval;

	}
	// $ANTLR end "indexer_declaration"

	partial void EnterRule_indexer_declarator();
	partial void LeaveRule_indexer_declarator();

	// $ANTLR start "indexer_declarator"
	// cs.g:799:1: indexer_declarator : 'this' '[' formal_parameter_list ']' ;
	[GrammarRule("indexer_declarator")]
	public XAstParserRuleReturnScope indexer_declarator()
	{
		EnterRule_indexer_declarator();
		EnterRule("indexer_declarator", 226);
		var retval = new XAstParserRuleReturnScope("indexer_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int indexer_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal799 = default(IToken);
		IToken char_literal800 = default(IToken);
		IToken char_literal802 = default(IToken);
		XAstParserRuleReturnScope formal_parameter_list801 = default(XAstParserRuleReturnScope);

		object string_literal799_tree = default(object);
		object char_literal800_tree = default(object);
		object char_literal802_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "indexer_declarator");
		DebugLocation(799, 47);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 226)) { return retval; }

			// cs.g:799:19: ( 'this' '[' formal_parameter_list ']' )
			DebugEnterAlt(1);
			// cs.g:801:5: 'this' '[' formal_parameter_list ']'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(801, 5);
			string_literal799=(IToken)Match(input,180,Follow._180_in_indexer_declarator7676); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal799_tree = (object)adaptor.Create(string_literal799, retval);
			adaptor.AddChild(root_0, string_literal799_tree);
			}
			DebugLocation(801, 14);
			char_literal800=(IToken)Match(input,91,Follow._91_in_indexer_declarator7680); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal800_tree = (object)adaptor.Create(char_literal800, retval);
			adaptor.AddChild(root_0, char_literal800_tree);
			}
			DebugLocation(801, 20);
			PushFollow(Follow._formal_parameter_list_in_indexer_declarator7684);
			formal_parameter_list801=formal_parameter_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, formal_parameter_list801.Tree, formal_parameter_list801, retval);
			DebugLocation(801, 44);
			char_literal802=(IToken)Match(input,92,Follow._92_in_indexer_declarator7688); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal802_tree = (object)adaptor.Create(char_literal802, retval);
			adaptor.AddChild(root_0, char_literal802_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("indexer_declarator", 226);
			LeaveRule("indexer_declarator", 226);
			LeaveRule_indexer_declarator();
			if (state.backtracking > 0) { Memoize(input, 226, indexer_declarator_StartIndex); }

		}
		DebugLocation(801, 47);
		} finally { DebugExitRule(GrammarFileName, "indexer_declarator"); }
		return retval;

	}
	// $ANTLR end "indexer_declarator"

	partial void EnterRule_operator_declaration();
	partial void LeaveRule_operator_declaration();

	// $ANTLR start "operator_declaration"
	// cs.g:804:1: operator_declaration : operator_declarator operator_body ;
	[GrammarRule("operator_declaration")]
	public XAstParserRuleReturnScope operator_declaration()
	{
		EnterRule_operator_declaration();
		EnterRule("operator_declaration", 227);
		var retval = new XAstParserRuleReturnScope("operator_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int operator_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope operator_declarator803 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope operator_body804 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "operator_declaration");
		DebugLocation(804, 40);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 227)) { return retval; }

			// cs.g:804:21: ( operator_declarator operator_body )
			DebugEnterAlt(1);
			// cs.g:805:5: operator_declarator operator_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(805, 5);
			PushFollow(Follow._operator_declarator_in_operator_declaration7705);
			operator_declarator803=operator_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, operator_declarator803.Tree, operator_declarator803, retval);
			DebugLocation(805, 27);
			PushFollow(Follow._operator_body_in_operator_declaration7709);
			operator_body804=operator_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, operator_body804.Tree, operator_body804, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator_declaration", 227);
			LeaveRule("operator_declaration", 227);
			LeaveRule_operator_declaration();
			if (state.backtracking > 0) { Memoize(input, 227, operator_declaration_StartIndex); }

		}
		DebugLocation(805, 40);
		} finally { DebugExitRule(GrammarFileName, "operator_declaration"); }
		return retval;

	}
	// $ANTLR end "operator_declaration"

	partial void EnterRule_operator_declarator();
	partial void LeaveRule_operator_declarator();

	// $ANTLR start "operator_declarator"
	// cs.g:806:1: operator_declarator : 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator unary_operator_declarator | overloadable_binary_operator binary_operator_declarator ) ;
	[GrammarRule("operator_declarator")]
	public XAstParserRuleReturnScope operator_declarator()
	{
		EnterRule_operator_declarator();
		EnterRule("operator_declarator", 228);
		var retval = new XAstParserRuleReturnScope("operator_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int operator_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal805 = default(IToken);
		IToken set806 = default(IToken);
		IToken char_literal807 = default(IToken);
		XAstParserRuleReturnScope type808 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier809 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope binary_operator_declarator810 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_operator_declarator811 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope overloadable_unary_operator812 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unary_operator_declarator813 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope overloadable_binary_operator814 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope binary_operator_declarator815 = default(XAstParserRuleReturnScope);

		object string_literal805_tree = default(object);
		object set806_tree = default(object);
		object char_literal807_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "operator_declarator");
		DebugLocation(806, 69);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 228)) { return retval; }

			// cs.g:806:20: ( 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator unary_operator_declarator | overloadable_binary_operator binary_operator_declarator ) )
			DebugEnterAlt(1);
			// cs.g:807:5: 'operator' ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator unary_operator_declarator | overloadable_binary_operator binary_operator_declarator )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(807, 5);
			string_literal805=(IToken)Match(input,153,Follow._153_in_operator_declarator7720); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal805_tree = (object)adaptor.Create(string_literal805, retval);
			adaptor.AddChild(root_0, string_literal805_tree);
			}
			DebugLocation(808, 9);
			// cs.g:808:9: ( ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator ) | overloadable_unary_operator unary_operator_declarator | overloadable_binary_operator binary_operator_declarator )
			int alt232=3;
			try { DebugEnterSubRule(232);
			try { DebugEnterDecision(232, false);
			switch (input.LA(1))
			{
			case MINUS:
			case 71:
				{
				alt232 = 1;
				}
				break;
			case FALSE:
			case TRUE:
			case 61:
			case 72:
			case 75:
			case 202:
				{
				alt232 = 2;
				}
				break;
			case GT:
			case 62:
			case 63:
			case 66:
			case 69:
			case 77:
			case 81:
			case 82:
			case 84:
			case 86:
			case 88:
			case 93:
			case 198:
				{
				alt232 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 232, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(232); }
			switch (alt232)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:808:10: ( '+' | '-' ) '(' type identifier ( binary_operator_declarator | unary_operator_declarator )
				{
				DebugLocation(808, 10);

				set806=(IToken)input.LT(1);
				if (input.LA(1)==MINUS||input.LA(1)==71)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set806, retval));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(808, 24);
				char_literal807=(IToken)Match(input,68,Follow._68_in_operator_declarator7744); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal807_tree = (object)adaptor.Create(char_literal807, retval);
				adaptor.AddChild(root_0, char_literal807_tree);
				}
				DebugLocation(808, 30);
				PushFollow(Follow._type_in_operator_declarator7748);
				type808=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type808.Tree, type808, retval);
				DebugLocation(808, 37);
				PushFollow(Follow._identifier_in_operator_declarator7752);
				identifier809=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier809.Tree, identifier809, retval);
				DebugLocation(808, 48);
				// cs.g:808:48: ( binary_operator_declarator | unary_operator_declarator )
				int alt231=2;
				try { DebugEnterSubRule(231);
				try { DebugEnterDecision(231, false);
				int LA231_0 = input.LA(1);

				if ((LA231_0==74))
				{
					alt231 = 1;
				}
				else if ((LA231_0==RPAREN))
				{
					alt231 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 231, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(231); }
				switch (alt231)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:808:49: binary_operator_declarator
					{
					DebugLocation(808, 49);
					PushFollow(Follow._binary_operator_declarator_in_operator_declarator7755);
					binary_operator_declarator810=binary_operator_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, binary_operator_declarator810.Tree, binary_operator_declarator810, retval);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:808:78: unary_operator_declarator
					{
					DebugLocation(808, 78);
					PushFollow(Follow._unary_operator_declarator_in_operator_declarator7759);
					unary_operator_declarator811=unary_operator_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unary_operator_declarator811.Tree, unary_operator_declarator811, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(231); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:809:11: overloadable_unary_operator unary_operator_declarator
				{
				DebugLocation(809, 11);
				PushFollow(Follow._overloadable_unary_operator_in_operator_declarator7772);
				overloadable_unary_operator812=overloadable_unary_operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, overloadable_unary_operator812.Tree, overloadable_unary_operator812, retval);
				DebugLocation(809, 41);
				PushFollow(Follow._unary_operator_declarator_in_operator_declarator7776);
				unary_operator_declarator813=unary_operator_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unary_operator_declarator813.Tree, unary_operator_declarator813, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:810:11: overloadable_binary_operator binary_operator_declarator
				{
				DebugLocation(810, 11);
				PushFollow(Follow._overloadable_binary_operator_in_operator_declarator7788);
				overloadable_binary_operator814=overloadable_binary_operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, overloadable_binary_operator814.Tree, overloadable_binary_operator814, retval);
				DebugLocation(810, 42);
				PushFollow(Follow._binary_operator_declarator_in_operator_declarator7792);
				binary_operator_declarator815=binary_operator_declarator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, binary_operator_declarator815.Tree, binary_operator_declarator815, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(232); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator_declarator", 228);
			LeaveRule("operator_declarator", 228);
			LeaveRule_operator_declarator();
			if (state.backtracking > 0) { Memoize(input, 228, operator_declarator_StartIndex); }

		}
		DebugLocation(810, 69);
		} finally { DebugExitRule(GrammarFileName, "operator_declarator"); }
		return retval;

	}
	// $ANTLR end "operator_declarator"

	partial void EnterRule_unary_operator_declarator();
	partial void LeaveRule_unary_operator_declarator();

	// $ANTLR start "unary_operator_declarator"
	// cs.g:811:1: unary_operator_declarator : ')' ;
	[GrammarRule("unary_operator_declarator")]
	public XAstParserRuleReturnScope unary_operator_declarator()
	{
		EnterRule_unary_operator_declarator();
		EnterRule("unary_operator_declarator", 229);
		var retval = new XAstParserRuleReturnScope("unary_operator_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int unary_operator_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal816 = default(IToken);

		object char_literal816_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unary_operator_declarator");
		DebugLocation(811, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 229)) { return retval; }

			// cs.g:811:26: ( ')' )
			DebugEnterAlt(1);
			// cs.g:812:8: ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(812, 8);
			char_literal816=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_unary_operator_declarator7807), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal816_tree = (object)adaptor.Create(char_literal816, retval);
			adaptor.AddChild(root_0, char_literal816_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_operator_declarator", 229);
			LeaveRule("unary_operator_declarator", 229);
			LeaveRule_unary_operator_declarator();
			if (state.backtracking > 0) { Memoize(input, 229, unary_operator_declarator_StartIndex); }

		}
		DebugLocation(812, 11);
		} finally { DebugExitRule(GrammarFileName, "unary_operator_declarator"); }
		return retval;

	}
	// $ANTLR end "unary_operator_declarator"

	partial void EnterRule_overloadable_unary_operator();
	partial void LeaveRule_overloadable_unary_operator();

	// $ANTLR start "overloadable_unary_operator"
	// cs.g:813:1: overloadable_unary_operator : ( '!' | '~' | '++' | '--' | 'true' | 'false' );
	[GrammarRule("overloadable_unary_operator")]
	public XAstParserRuleReturnScope overloadable_unary_operator()
	{
		EnterRule_overloadable_unary_operator();
		EnterRule("overloadable_unary_operator", 230);
		var retval = new XAstParserRuleReturnScope("overloadable_unary_operator");
		
		retval.Start = (IToken)input.LT(1);
		int overloadable_unary_operator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set817 = default(IToken);

		object set817_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "overloadable_unary_operator");
		DebugLocation(813, 70);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 230)) { return retval; }

			// cs.g:813:28: ( '!' | '~' | '++' | '--' | 'true' | 'false' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(813, 28);

			set817=(IToken)input.LT(1);
			if (input.LA(1)==FALSE||input.LA(1)==TRUE||input.LA(1)==61||input.LA(1)==72||input.LA(1)==75||input.LA(1)==202)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set817, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("overloadable_unary_operator", 230);
			LeaveRule("overloadable_unary_operator", 230);
			LeaveRule_overloadable_unary_operator();
			if (state.backtracking > 0) { Memoize(input, 230, overloadable_unary_operator_StartIndex); }

		}
		DebugLocation(814, 70);
		} finally { DebugExitRule(GrammarFileName, "overloadable_unary_operator"); }
		return retval;

	}
	// $ANTLR end "overloadable_unary_operator"

	partial void EnterRule_binary_operator_declarator();
	partial void LeaveRule_binary_operator_declarator();

	// $ANTLR start "binary_operator_declarator"
	// cs.g:815:1: binary_operator_declarator : ',' type identifier ')' ;
	[GrammarRule("binary_operator_declarator")]
	public XAstParserRuleReturnScope binary_operator_declarator()
	{
		EnterRule_binary_operator_declarator();
		EnterRule("binary_operator_declarator", 231);
		var retval = new XAstParserRuleReturnScope("binary_operator_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int binary_operator_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal818 = default(IToken);
		IToken char_literal821 = default(IToken);
		XAstParserRuleReturnScope type819 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier820 = default(XAstParserRuleReturnScope);

		object char_literal818_tree = default(object);
		object char_literal821_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "binary_operator_declarator");
		DebugLocation(815, 34);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 231)) { return retval; }

			// cs.g:815:27: ( ',' type identifier ')' )
			DebugEnterAlt(1);
			// cs.g:816:5: ',' type identifier ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(816, 5);
			char_literal818=(IToken)Match(input,74,Follow._74_in_binary_operator_declarator7856); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal818_tree = (object)adaptor.Create(char_literal818, retval);
			adaptor.AddChild(root_0, char_literal818_tree);
			}
			DebugLocation(816, 11);
			PushFollow(Follow._type_in_binary_operator_declarator7860);
			type819=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type819.Tree, type819, retval);
			DebugLocation(816, 18);
			PushFollow(Follow._identifier_in_binary_operator_declarator7864);
			identifier820=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier820.Tree, identifier820, retval);
			DebugLocation(816, 31);
			char_literal821=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_binary_operator_declarator7868), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal821_tree = (object)adaptor.Create(char_literal821, retval);
			adaptor.AddChild(root_0, char_literal821_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("binary_operator_declarator", 231);
			LeaveRule("binary_operator_declarator", 231);
			LeaveRule_binary_operator_declarator();
			if (state.backtracking > 0) { Memoize(input, 231, binary_operator_declarator_StartIndex); }

		}
		DebugLocation(816, 34);
		} finally { DebugExitRule(GrammarFileName, "binary_operator_declarator"); }
		return retval;

	}
	// $ANTLR end "binary_operator_declarator"

	partial void EnterRule_overloadable_binary_operator();
	partial void LeaveRule_overloadable_binary_operator();

	// $ANTLR start "overloadable_binary_operator"
	// cs.g:818:1: overloadable_binary_operator : ( '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' );
	[GrammarRule("overloadable_binary_operator")]
	public XAstParserRuleReturnScope overloadable_binary_operator()
	{
		EnterRule_overloadable_binary_operator();
		EnterRule("overloadable_binary_operator", 232);
		var retval = new XAstParserRuleReturnScope("overloadable_binary_operator");
		
		retval.Start = (IToken)input.LT(1);
		int overloadable_binary_operator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal822 = default(IToken);
		IToken char_literal823 = default(IToken);
		IToken char_literal824 = default(IToken);
		IToken char_literal825 = default(IToken);
		IToken char_literal826 = default(IToken);
		IToken char_literal827 = default(IToken);
		IToken string_literal828 = default(IToken);
		IToken char_literal829 = default(IToken);
		IToken char_literal830 = default(IToken);
		IToken string_literal831 = default(IToken);
		IToken string_literal832 = default(IToken);
		IToken char_literal833 = default(IToken);
		IToken char_literal834 = default(IToken);
		IToken string_literal835 = default(IToken);
		IToken string_literal836 = default(IToken);

		object char_literal822_tree = default(object);
		object char_literal823_tree = default(object);
		object char_literal824_tree = default(object);
		object char_literal825_tree = default(object);
		object char_literal826_tree = default(object);
		object char_literal827_tree = default(object);
		object string_literal828_tree = default(object);
		object char_literal829_tree = default(object);
		object char_literal830_tree = default(object);
		object string_literal831_tree = default(object);
		object string_literal832_tree = default(object);
		object char_literal833_tree = default(object);
		object char_literal834_tree = default(object);
		object string_literal835_tree = default(object);
		object string_literal836_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "overloadable_binary_operator");
		DebugLocation(818, 112);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 232)) { return retval; }

			// cs.g:818:29: ( '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' )
			int alt233=14;
			try { DebugEnterDecision(233, false);
			switch (input.LA(1))
			{
			case 69:
				{
				alt233 = 1;
				}
				break;
			case 77:
				{
				alt233 = 2;
				}
				break;
			case 63:
				{
				alt233 = 3;
				}
				break;
			case 66:
				{
				alt233 = 4;
				}
				break;
			case 198:
				{
				alt233 = 5;
				}
				break;
			case 93:
				{
				alt233 = 6;
				}
				break;
			case 82:
				{
				alt233 = 7;
				}
				break;
			case GT:
				{
				int LA233_8 = input.LA(2);

				if ((LA233_8==GT))
				{
					alt233 = 8;
				}
				else if ((LA233_8==74))
				{
					alt233 = 11;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 233, 8, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 86:
				{
				alt233 = 9;
				}
				break;
			case 62:
				{
				alt233 = 10;
				}
				break;
			case 81:
				{
				alt233 = 12;
				}
				break;
			case 88:
				{
				alt233 = 13;
				}
				break;
			case 84:
				{
				alt233 = 14;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 233, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(233); }
			switch (alt233)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:819:22: '*'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 22);
				char_literal822=(IToken)Match(input,69,Follow._69_in_overloadable_binary_operator7882); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal822_tree = (object)adaptor.Create(char_literal822, retval);
				adaptor.AddChild(root_0, char_literal822_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:819:28: '/'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 28);
				char_literal823=(IToken)Match(input,77,Follow._77_in_overloadable_binary_operator7886); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal823_tree = (object)adaptor.Create(char_literal823, retval);
				adaptor.AddChild(root_0, char_literal823_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:819:34: '%'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 34);
				char_literal824=(IToken)Match(input,63,Follow._63_in_overloadable_binary_operator7890); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal824_tree = (object)adaptor.Create(char_literal824, retval);
				adaptor.AddChild(root_0, char_literal824_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:819:40: '&'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 40);
				char_literal825=(IToken)Match(input,66,Follow._66_in_overloadable_binary_operator7894); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal825_tree = (object)adaptor.Create(char_literal825, retval);
				adaptor.AddChild(root_0, char_literal825_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// cs.g:819:46: '|'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 46);
				char_literal826=(IToken)Match(input,198,Follow._198_in_overloadable_binary_operator7898); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal826_tree = (object)adaptor.Create(char_literal826, retval);
				adaptor.AddChild(root_0, char_literal826_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// cs.g:819:52: '^'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 52);
				char_literal827=(IToken)Match(input,93,Follow._93_in_overloadable_binary_operator7902); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal827_tree = (object)adaptor.Create(char_literal827, retval);
				adaptor.AddChild(root_0, char_literal827_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// cs.g:819:58: '<<'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 58);
				string_literal828=(IToken)Match(input,82,Follow._82_in_overloadable_binary_operator7906); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal828_tree = (object)adaptor.Create(string_literal828, retval);
				adaptor.AddChild(root_0, string_literal828_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// cs.g:819:65: '>' '>'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 65);
				char_literal829=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_overloadable_binary_operator7910), "GT"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal829_tree = (object)adaptor.Create(char_literal829, retval);
				adaptor.AddChild(root_0, char_literal829_tree);
				}
				DebugLocation(819, 69);
				char_literal830=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_overloadable_binary_operator7912), "GT"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal830_tree = (object)adaptor.Create(char_literal830, retval);
				adaptor.AddChild(root_0, char_literal830_tree);
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// cs.g:819:75: '=='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 75);
				string_literal831=(IToken)Match(input,86,Follow._86_in_overloadable_binary_operator7916); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal831_tree = (object)adaptor.Create(string_literal831, retval);
				adaptor.AddChild(root_0, string_literal831_tree);
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// cs.g:819:82: '!='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 82);
				string_literal832=(IToken)Match(input,62,Follow._62_in_overloadable_binary_operator7920); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal832_tree = (object)adaptor.Create(string_literal832, retval);
				adaptor.AddChild(root_0, string_literal832_tree);
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// cs.g:819:89: '>'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 89);
				char_literal833=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_overloadable_binary_operator7924), "GT"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal833_tree = (object)adaptor.Create(char_literal833, retval);
				adaptor.AddChild(root_0, char_literal833_tree);
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// cs.g:819:95: '<'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 95);
				char_literal834=(IToken)Match(input,81,Follow._81_in_overloadable_binary_operator7928); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal834_tree = (object)adaptor.Create(char_literal834, retval);
				adaptor.AddChild(root_0, char_literal834_tree);
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// cs.g:819:101: '>='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 101);
				string_literal835=(IToken)Match(input,88,Follow._88_in_overloadable_binary_operator7932); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal835_tree = (object)adaptor.Create(string_literal835, retval);
				adaptor.AddChild(root_0, string_literal835_tree);
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// cs.g:819:108: '<='
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(819, 108);
				string_literal836=(IToken)Match(input,84,Follow._84_in_overloadable_binary_operator7936); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal836_tree = (object)adaptor.Create(string_literal836, retval);
				adaptor.AddChild(root_0, string_literal836_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("overloadable_binary_operator", 232);
			LeaveRule("overloadable_binary_operator", 232);
			LeaveRule_overloadable_binary_operator();
			if (state.backtracking > 0) { Memoize(input, 232, overloadable_binary_operator_StartIndex); }

		}
		DebugLocation(819, 112);
		} finally { DebugExitRule(GrammarFileName, "overloadable_binary_operator"); }
		return retval;

	}
	// $ANTLR end "overloadable_binary_operator"

	partial void EnterRule_conversion_operator_declaration();
	partial void LeaveRule_conversion_operator_declaration();

	// $ANTLR start "conversion_operator_declaration"
	// cs.g:821:1: conversion_operator_declaration : conversion_operator_declarator operator_body ;
	[GrammarRule("conversion_operator_declaration")]
	public XAstParserRuleReturnScope conversion_operator_declaration()
	{
		EnterRule_conversion_operator_declaration();
		EnterRule("conversion_operator_declaration", 233);
		var retval = new XAstParserRuleReturnScope("conversion_operator_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int conversion_operator_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope conversion_operator_declarator837 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope operator_body838 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "conversion_operator_declaration");
		DebugLocation(821, 51);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 233)) { return retval; }

			// cs.g:821:32: ( conversion_operator_declarator operator_body )
			DebugEnterAlt(1);
			// cs.g:822:5: conversion_operator_declarator operator_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(822, 5);
			PushFollow(Follow._conversion_operator_declarator_in_conversion_operator_declaration7949);
			conversion_operator_declarator837=conversion_operator_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, conversion_operator_declarator837.Tree, conversion_operator_declarator837, retval);
			DebugLocation(822, 38);
			PushFollow(Follow._operator_body_in_conversion_operator_declaration7953);
			operator_body838=operator_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, operator_body838.Tree, operator_body838, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conversion_operator_declaration", 233);
			LeaveRule("conversion_operator_declaration", 233);
			LeaveRule_conversion_operator_declaration();
			if (state.backtracking > 0) { Memoize(input, 233, conversion_operator_declaration_StartIndex); }

		}
		DebugLocation(822, 51);
		} finally { DebugExitRule(GrammarFileName, "conversion_operator_declaration"); }
		return retval;

	}
	// $ANTLR end "conversion_operator_declaration"

	partial void EnterRule_conversion_operator_declarator();
	partial void LeaveRule_conversion_operator_declarator();

	// $ANTLR start "conversion_operator_declarator"
	// cs.g:823:1: conversion_operator_declarator : ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')' ;
	[GrammarRule("conversion_operator_declarator")]
	public XAstParserRuleReturnScope conversion_operator_declarator()
	{
		EnterRule_conversion_operator_declarator();
		EnterRule("conversion_operator_declarator", 234);
		var retval = new XAstParserRuleReturnScope("conversion_operator_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int conversion_operator_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set839 = default(IToken);
		IToken string_literal840 = default(IToken);
		IToken char_literal842 = default(IToken);
		IToken char_literal845 = default(IToken);
		XAstParserRuleReturnScope type841 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type843 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier844 = default(XAstParserRuleReturnScope);

		object set839_tree = default(object);
		object string_literal840_tree = default(object);
		object char_literal842_tree = default(object);
		object char_literal845_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conversion_operator_declarator");
		DebugLocation(823, 81);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 234)) { return retval; }

			// cs.g:823:31: ( ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')' )
			DebugEnterAlt(1);
			// cs.g:824:5: ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(824, 5);

			set839=(IToken)input.LT(1);
			if (input.LA(1)==124||input.LA(1)==136)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set839, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(824, 32);
			string_literal840=(IToken)Match(input,153,Follow._153_in_conversion_operator_declarator7973); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal840_tree = (object)adaptor.Create(string_literal840, retval);
			adaptor.AddChild(root_0, string_literal840_tree);
			}
			DebugLocation(824, 45);
			PushFollow(Follow._type_in_conversion_operator_declarator7977);
			type841=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type841.Tree, type841, retval);
			DebugLocation(824, 52);
			char_literal842=(IToken)Match(input,68,Follow._68_in_conversion_operator_declarator7981); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal842_tree = (object)adaptor.Create(char_literal842, retval);
			adaptor.AddChild(root_0, char_literal842_tree);
			}
			DebugLocation(824, 58);
			PushFollow(Follow._type_in_conversion_operator_declarator7985);
			type843=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type843.Tree, type843, retval);
			DebugLocation(824, 65);
			PushFollow(Follow._identifier_in_conversion_operator_declarator7989);
			identifier844=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier844.Tree, identifier844, retval);
			DebugLocation(824, 78);
			char_literal845=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_conversion_operator_declarator7993), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal845_tree = (object)adaptor.Create(char_literal845, retval);
			adaptor.AddChild(root_0, char_literal845_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conversion_operator_declarator", 234);
			LeaveRule("conversion_operator_declarator", 234);
			LeaveRule_conversion_operator_declarator();
			if (state.backtracking > 0) { Memoize(input, 234, conversion_operator_declarator_StartIndex); }

		}
		DebugLocation(824, 81);
		} finally { DebugExitRule(GrammarFileName, "conversion_operator_declarator"); }
		return retval;

	}
	// $ANTLR end "conversion_operator_declarator"

	partial void EnterRule_operator_body();
	partial void LeaveRule_operator_body();

	// $ANTLR start "operator_body"
	// cs.g:825:1: operator_body : block ;
	[GrammarRule("operator_body")]
	public XAstParserRuleReturnScope operator_body()
	{
		EnterRule_operator_body();
		EnterRule("operator_body", 235);
		var retval = new XAstParserRuleReturnScope("operator_body");
		
		retval.Start = (IToken)input.LT(1);
		int operator_body_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope block846 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "operator_body");
		DebugLocation(825, 10);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 235)) { return retval; }

			// cs.g:825:14: ( block )
			DebugEnterAlt(1);
			// cs.g:826:5: block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(826, 5);
			PushFollow(Follow._block_in_operator_body8004);
			block846=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block846.Tree, block846, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator_body", 235);
			LeaveRule("operator_body", 235);
			LeaveRule_operator_body();
			if (state.backtracking > 0) { Memoize(input, 235, operator_body_StartIndex); }

		}
		DebugLocation(826, 10);
		} finally { DebugExitRule(GrammarFileName, "operator_body"); }
		return retval;

	}
	// $ANTLR end "operator_body"

	partial void EnterRule_constructor_declaration();
	partial void LeaveRule_constructor_declaration();

	// $ANTLR start "constructor_declaration"
	// cs.g:829:1: constructor_declaration : constructor_declarator constructor_body ;
	[GrammarRule("constructor_declaration")]
	public XAstParserRuleReturnScope constructor_declaration()
	{
		EnterRule_constructor_declaration();
		EnterRule("constructor_declaration", 236);
		var retval = new XAstParserRuleReturnScope("constructor_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int constructor_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope constructor_declarator847 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constructor_body848 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "constructor_declaration");
		DebugLocation(829, 46);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 236)) { return retval; }

			// cs.g:829:24: ( constructor_declarator constructor_body )
			DebugEnterAlt(1);
			// cs.g:830:5: constructor_declarator constructor_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(830, 5);
			PushFollow(Follow._constructor_declarator_in_constructor_declaration8017);
			constructor_declarator847=constructor_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, constructor_declarator847.Tree, constructor_declarator847, retval);
			DebugLocation(830, 30);
			PushFollow(Follow._constructor_body_in_constructor_declaration8021);
			constructor_body848=constructor_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, constructor_body848.Tree, constructor_body848, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constructor_declaration", 236);
			LeaveRule("constructor_declaration", 236);
			LeaveRule_constructor_declaration();
			if (state.backtracking > 0) { Memoize(input, 236, constructor_declaration_StartIndex); }

		}
		DebugLocation(830, 46);
		} finally { DebugExitRule(GrammarFileName, "constructor_declaration"); }
		return retval;

	}
	// $ANTLR end "constructor_declaration"

	partial void EnterRule_constructor_declarator();
	partial void LeaveRule_constructor_declarator();

	// $ANTLR start "constructor_declarator"
	// cs.g:831:1: constructor_declarator : identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )? ;
	[GrammarRule("constructor_declarator")]
	public XAstParserRuleReturnScope constructor_declarator()
	{
		EnterRule_constructor_declarator();
		EnterRule("constructor_declarator", 237);
		var retval = new XAstParserRuleReturnScope("constructor_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int constructor_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal850 = default(IToken);
		IToken char_literal852 = default(IToken);
		XAstParserRuleReturnScope identifier849 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope formal_parameter_list851 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constructor_initializer853 = default(XAstParserRuleReturnScope);

		object char_literal850_tree = default(object);
		object char_literal852_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constructor_declarator");
		DebugLocation(831, 79);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 237)) { return retval; }

			// cs.g:831:23: ( identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )? )
			DebugEnterAlt(1);
			// cs.g:832:5: identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(832, 5);
			PushFollow(Follow._identifier_in_constructor_declarator8032);
			identifier849=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier849.Tree, identifier849, retval);
			DebugLocation(832, 18);
			char_literal850=(IToken)Match(input,68,Follow._68_in_constructor_declarator8036); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal850_tree = (object)adaptor.Create(char_literal850, retval);
			adaptor.AddChild(root_0, char_literal850_tree);
			}
			DebugLocation(832, 24);
			// cs.g:832:24: ( formal_parameter_list )?
			int alt234=2;
			try { DebugEnterSubRule(234);
			try { DebugEnterDecision(234, false);
			int LA234_0 = input.LA(1);

			if ((LA234_0==IDENTIFIER||LA234_0==91||LA234_0==95||(LA234_0>=97 && LA234_0<=98)||(LA234_0>=100 && LA234_0<=101)||LA234_0==103||(LA234_0>=105 && LA234_0<=106)||LA234_0==109||LA234_0==114||LA234_0==117||(LA234_0>=119 && LA234_0<=120)||LA234_0==122||LA234_0==126||LA234_0==129||LA234_0==132||LA234_0==135||LA234_0==138||LA234_0==141||(LA234_0>=143 && LA234_0<=144)||(LA234_0>=146 && LA234_0<=148)||(LA234_0>=151 && LA234_0<=152)||(LA234_0>=154 && LA234_0<=155)||(LA234_0>=157 && LA234_0<=158)||LA234_0==160||LA234_0==162||(LA234_0>=166 && LA234_0<=167)||LA234_0==169||(LA234_0>=171 && LA234_0<=173)||LA234_0==177||LA234_0==180||LA234_0==183||(LA234_0>=185 && LA234_0<=186)||(LA234_0>=189 && LA234_0<=190)||LA234_0==192||LA234_0==194||LA234_0==196))
			{
				alt234 = 1;
			}
			} finally { DebugExitDecision(234); }
			switch (alt234)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:832:24: formal_parameter_list
				{
				DebugLocation(832, 24);
				PushFollow(Follow._formal_parameter_list_in_constructor_declarator8040);
				formal_parameter_list851=formal_parameter_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, formal_parameter_list851.Tree, formal_parameter_list851, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(234); }

			DebugLocation(832, 49);
			char_literal852=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_constructor_declarator8045), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal852_tree = (object)adaptor.Create(char_literal852, retval);
			adaptor.AddChild(root_0, char_literal852_tree);
			}
			DebugLocation(832, 55);
			// cs.g:832:55: ( constructor_initializer )?
			int alt235=2;
			try { DebugEnterSubRule(235);
			try { DebugEnterDecision(235, false);
			int LA235_0 = input.LA(1);

			if ((LA235_0==79))
			{
				alt235 = 1;
			}
			} finally { DebugExitDecision(235); }
			switch (alt235)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:832:55: constructor_initializer
				{
				DebugLocation(832, 55);
				PushFollow(Follow._constructor_initializer_in_constructor_declarator8049);
				constructor_initializer853=constructor_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constructor_initializer853.Tree, constructor_initializer853, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(235); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constructor_declarator", 237);
			LeaveRule("constructor_declarator", 237);
			LeaveRule_constructor_declarator();
			if (state.backtracking > 0) { Memoize(input, 237, constructor_declarator_StartIndex); }

		}
		DebugLocation(832, 79);
		} finally { DebugExitRule(GrammarFileName, "constructor_declarator"); }
		return retval;

	}
	// $ANTLR end "constructor_declarator"

	partial void EnterRule_constructor_initializer();
	partial void LeaveRule_constructor_initializer();

	// $ANTLR start "constructor_initializer"
	// cs.g:833:1: constructor_initializer : ':' ( 'base' | 'this' ) '(' ( argument_list )? ')' ;
	[GrammarRule("constructor_initializer")]
	public XAstParserRuleReturnScope constructor_initializer()
	{
		EnterRule_constructor_initializer();
		EnterRule("constructor_initializer", 238);
		var retval = new XAstParserRuleReturnScope("constructor_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int constructor_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal854 = default(IToken);
		IToken set855 = default(IToken);
		IToken char_literal856 = default(IToken);
		IToken char_literal858 = default(IToken);
		XAstParserRuleReturnScope argument_list857 = default(XAstParserRuleReturnScope);

		object char_literal854_tree = default(object);
		object set855_tree = default(object);
		object char_literal856_tree = default(object);
		object char_literal858_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constructor_initializer");
		DebugLocation(833, 57);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 238)) { return retval; }

			// cs.g:833:24: ( ':' ( 'base' | 'this' ) '(' ( argument_list )? ')' )
			DebugEnterAlt(1);
			// cs.g:834:5: ':' ( 'base' | 'this' ) '(' ( argument_list )? ')'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(834, 5);
			char_literal854=(IToken)Match(input,79,Follow._79_in_constructor_initializer8061); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal854_tree = (object)adaptor.Create(char_literal854, retval);
			adaptor.AddChild(root_0, char_literal854_tree);
			}
			DebugLocation(834, 11);

			set855=(IToken)input.LT(1);
			if (input.LA(1)==102||input.LA(1)==180)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set855, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(834, 31);
			char_literal856=(IToken)Match(input,68,Follow._68_in_constructor_initializer8075); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal856_tree = (object)adaptor.Create(char_literal856, retval);
			adaptor.AddChild(root_0, char_literal856_tree);
			}
			DebugLocation(834, 37);
			// cs.g:834:37: ( argument_list )?
			int alt236=2;
			try { DebugEnterSubRule(236);
			try { DebugEnterDecision(236, false);
			int LA236_0 = input.LA(1);

			if ((LA236_0==Character_literal||LA236_0==FALSE||(LA236_0>=Hex_number && LA236_0<=IDENTIFIER)||(LA236_0>=MINUS && LA236_0<=NUMBER)||LA236_0==Real_literal||LA236_0==STRINGLITERAL||LA236_0==TRUE||LA236_0==Verbatim_string_literal||LA236_0==61||LA236_0==66||(LA236_0>=68 && LA236_0<=69)||(LA236_0>=71 && LA236_0<=72)||LA236_0==75||LA236_0==95||(LA236_0>=97 && LA236_0<=98)||(LA236_0>=100 && LA236_0<=103)||(LA236_0>=105 && LA236_0<=106)||(LA236_0>=109 && LA236_0<=110)||(LA236_0>=114 && LA236_0<=117)||(LA236_0>=119 && LA236_0<=120)||LA236_0==122||LA236_0==126||LA236_0==129||LA236_0==132||LA236_0==135||LA236_0==138||LA236_0==141||(LA236_0>=143 && LA236_0<=144)||(LA236_0>=146 && LA236_0<=148)||(LA236_0>=150 && LA236_0<=152)||(LA236_0>=154 && LA236_0<=155)||LA236_0==157||LA236_0==160||LA236_0==162||(LA236_0>=166 && LA236_0<=167)||LA236_0==169||(LA236_0>=171 && LA236_0<=174)||LA236_0==177||LA236_0==180||(LA236_0>=183 && LA236_0<=187)||(LA236_0>=189 && LA236_0<=190)||LA236_0==194||LA236_0==196||LA236_0==202))
			{
				alt236 = 1;
			}
			} finally { DebugExitDecision(236); }
			switch (alt236)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:834:37: argument_list
				{
				DebugLocation(834, 37);
				PushFollow(Follow._argument_list_in_constructor_initializer8079);
				argument_list857=argument_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, argument_list857.Tree, argument_list857, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(236); }

			DebugLocation(834, 54);
			char_literal858=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_constructor_initializer8084), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal858_tree = (object)adaptor.Create(char_literal858, retval);
			adaptor.AddChild(root_0, char_literal858_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constructor_initializer", 238);
			LeaveRule("constructor_initializer", 238);
			LeaveRule_constructor_initializer();
			if (state.backtracking > 0) { Memoize(input, 238, constructor_initializer_StartIndex); }

		}
		DebugLocation(834, 57);
		} finally { DebugExitRule(GrammarFileName, "constructor_initializer"); }
		return retval;

	}
	// $ANTLR end "constructor_initializer"

	partial void EnterRule_constructor_body();
	partial void LeaveRule_constructor_body();

	// $ANTLR start "constructor_body"
	// cs.g:835:1: constructor_body : block ;
	[GrammarRule("constructor_body")]
	public XAstParserRuleReturnScope constructor_body()
	{
		EnterRule_constructor_body();
		EnterRule("constructor_body", 239);
		var retval = new XAstParserRuleReturnScope("constructor_body");
		
		retval.Start = (IToken)input.LT(1);
		int constructor_body_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope block859 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "constructor_body");
		DebugLocation(835, 10);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 239)) { return retval; }

			// cs.g:835:17: ( block )
			DebugEnterAlt(1);
			// cs.g:836:5: block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(836, 5);
			PushFollow(Follow._block_in_constructor_body8095);
			block859=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block859.Tree, block859, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constructor_body", 239);
			LeaveRule("constructor_body", 239);
			LeaveRule_constructor_body();
			if (state.backtracking > 0) { Memoize(input, 239, constructor_body_StartIndex); }

		}
		DebugLocation(836, 10);
		} finally { DebugExitRule(GrammarFileName, "constructor_body"); }
		return retval;

	}
	// $ANTLR end "constructor_body"

	partial void EnterRule_destructor_declaration();
	partial void LeaveRule_destructor_declaration();

	// $ANTLR start "destructor_declaration"
	// cs.g:845:1: destructor_declaration : '~' identifier '(' ')' destructor_body ;
	[GrammarRule("destructor_declaration")]
	public XAstParserRuleReturnScope destructor_declaration()
	{
		EnterRule_destructor_declaration();
		EnterRule("destructor_declaration", 240);
		var retval = new XAstParserRuleReturnScope("destructor_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int destructor_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal860 = default(IToken);
		IToken char_literal862 = default(IToken);
		IToken char_literal863 = default(IToken);
		XAstParserRuleReturnScope identifier861 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope destructor_body864 = default(XAstParserRuleReturnScope);

		object char_literal860_tree = default(object);
		object char_literal862_tree = default(object);
		object char_literal863_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "destructor_declaration");
		DebugLocation(845, 51);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 240)) { return retval; }

			// cs.g:845:23: ( '~' identifier '(' ')' destructor_body )
			DebugEnterAlt(1);
			// cs.g:846:5: '~' identifier '(' ')' destructor_body
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(846, 5);
			char_literal860=(IToken)Match(input,202,Follow._202_in_destructor_declaration8114); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal860_tree = (object)adaptor.Create(char_literal860, retval);
			adaptor.AddChild(root_0, char_literal860_tree);
			}
			DebugLocation(846, 10);
			PushFollow(Follow._identifier_in_destructor_declaration8117);
			identifier861=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier861.Tree, identifier861, retval);
			DebugLocation(846, 23);
			char_literal862=(IToken)Match(input,68,Follow._68_in_destructor_declaration8121); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal862_tree = (object)adaptor.Create(char_literal862, retval);
			adaptor.AddChild(root_0, char_literal862_tree);
			}
			DebugLocation(846, 29);
			char_literal863=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_destructor_declaration8125), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal863_tree = (object)adaptor.Create(char_literal863, retval);
			adaptor.AddChild(root_0, char_literal863_tree);
			}
			DebugLocation(846, 36);
			PushFollow(Follow._destructor_body_in_destructor_declaration8130);
			destructor_body864=destructor_body();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, destructor_body864.Tree, destructor_body864, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("destructor_declaration", 240);
			LeaveRule("destructor_declaration", 240);
			LeaveRule_destructor_declaration();
			if (state.backtracking > 0) { Memoize(input, 240, destructor_declaration_StartIndex); }

		}
		DebugLocation(846, 51);
		} finally { DebugExitRule(GrammarFileName, "destructor_declaration"); }
		return retval;

	}
	// $ANTLR end "destructor_declaration"

	partial void EnterRule_destructor_body();
	partial void LeaveRule_destructor_body();

	// $ANTLR start "destructor_body"
	// cs.g:847:1: destructor_body : block ;
	[GrammarRule("destructor_body")]
	public XAstParserRuleReturnScope destructor_body()
	{
		EnterRule_destructor_body();
		EnterRule("destructor_body", 241);
		var retval = new XAstParserRuleReturnScope("destructor_body");
		
		retval.Start = (IToken)input.LT(1);
		int destructor_body_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope block865 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "destructor_body");
		DebugLocation(847, 10);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 241)) { return retval; }

			// cs.g:847:16: ( block )
			DebugEnterAlt(1);
			// cs.g:848:5: block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(848, 5);
			PushFollow(Follow._block_in_destructor_body8141);
			block865=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block865.Tree, block865, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("destructor_body", 241);
			LeaveRule("destructor_body", 241);
			LeaveRule_destructor_body();
			if (state.backtracking > 0) { Memoize(input, 241, destructor_body_StartIndex); }

		}
		DebugLocation(848, 10);
		} finally { DebugExitRule(GrammarFileName, "destructor_body"); }
		return retval;

	}
	// $ANTLR end "destructor_body"

	partial void EnterRule_invocation_expression();
	partial void LeaveRule_invocation_expression();

	// $ANTLR start "invocation_expression"
	// cs.g:851:1: invocation_expression : invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments ;
	[GrammarRule("invocation_expression")]
	public XAstParserRuleReturnScope invocation_expression()
	{
		EnterRule_invocation_expression();
		EnterRule("invocation_expression", 242);
		var retval = new XAstParserRuleReturnScope("invocation_expression");
		
		retval.Start = (IToken)input.LT(1);
		int invocation_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope invocation_start866 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope arguments867 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope invocation_part868 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope invocation_part869 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope arguments870 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "invocation_expression");
		DebugLocation(851, 56);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 242)) { return retval; }

			// cs.g:851:22: ( invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )
			DebugEnterAlt(1);
			// cs.g:852:5: invocation_start ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(852, 5);
			PushFollow(Follow._invocation_start_in_invocation_expression8154);
			invocation_start866=invocation_start();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, invocation_start866.Tree, invocation_start866, retval);
			DebugLocation(852, 24);
			// cs.g:852:24: ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )*
			try { DebugEnterSubRule(237);
			while (true)
			{
				int alt237=3;
				try { DebugEnterDecision(237, false);
				int LA237_0 = input.LA(1);

				if ((LA237_0==68))
				{
					int LA237_1 = input.LA(2);

					if ((EvaluatePredicate(synpred31_cs_fragment)))
					{
						alt237 = 1;
					}


				}
				else if ((LA237_0==DOT||LA237_0==PTR||LA237_0==91))
				{
					alt237 = 2;
				}


				} finally { DebugExitDecision(237); }
				switch ( alt237 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:852:25: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
					{
					DebugLocation(852, 25);
					// cs.g:852:25: ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part )
					DebugEnterAlt(1);
					// cs.g:852:26: ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part
					{
					DebugLocation(852, 58);
					PushFollow(Follow._arguments_in_invocation_expression8176);
					arguments867=arguments();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, arguments867.Tree, arguments867, retval);
					DebugLocation(852, 70);
					PushFollow(Follow._invocation_part_in_invocation_expression8180);
					invocation_part868=invocation_part();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, invocation_part868.Tree, invocation_part868, retval);

					}


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// cs.g:853:27: invocation_part
					{
					DebugLocation(853, 27);
					PushFollow(Follow._invocation_part_in_invocation_expression8209);
					invocation_part869=invocation_part();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, invocation_part869.Tree, invocation_part869, retval);

					}
					break;

				default:
					goto loop237;
				}
			}

			loop237:
				;

			} finally { DebugExitSubRule(237); }

			DebugLocation(853, 47);
			PushFollow(Follow._arguments_in_invocation_expression8215);
			arguments870=arguments();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, arguments870.Tree, arguments870, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("invocation_expression", 242);
			LeaveRule("invocation_expression", 242);
			LeaveRule_invocation_expression();
			if (state.backtracking > 0) { Memoize(input, 242, invocation_expression_StartIndex); }

		}
		DebugLocation(853, 56);
		} finally { DebugExitRule(GrammarFileName, "invocation_expression"); }
		return retval;

	}
	// $ANTLR end "invocation_expression"

	partial void EnterRule_invocation_start();
	partial void LeaveRule_invocation_start();

	// $ANTLR start "invocation_start"
	// cs.g:854:1: invocation_start : ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | 'this' | 'base' | identifier ( '::' identifier )? | typeof_expression );
	[GrammarRule("invocation_start")]
	public XAstParserRuleReturnScope invocation_start()
	{
		EnterRule_invocation_start();
		EnterRule("invocation_start", 243);
		var retval = new XAstParserRuleReturnScope("invocation_start");
		
		retval.Start = (IToken)input.LT(1);
		int invocation_start_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal874 = default(IToken);
		IToken string_literal875 = default(IToken);
		IToken string_literal877 = default(IToken);
		XAstParserRuleReturnScope predefined_type871 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier872 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope generic_argument_list873 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier876 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier878 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope typeof_expression879 = default(XAstParserRuleReturnScope);

		object string_literal874_tree = default(object);
		object string_literal875_tree = default(object);
		object string_literal877_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "invocation_start");
		DebugLocation(854, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 243)) { return retval; }

			// cs.g:854:17: ( predefined_type | ( identifier '<' )=> identifier generic_argument_list | 'this' | 'base' | identifier ( '::' identifier )? | typeof_expression )
			int alt239=6;
			try { DebugEnterDecision(239, false);
			switch (input.LA(1))
			{
			case 103:
			case 106:
			case 109:
			case 114:
			case 119:
			case 129:
			case 138:
			case 146:
			case 151:
			case 169:
			case 173:
			case 177:
			case 185:
			case 186:
			case 189:
				{
				alt239 = 1;
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				int LA239_2 = input.LA(2);

				if ((LA239_2==81) && (EvaluatePredicate(synpred32_cs_fragment)))
				{
					alt239 = 2;
				}
				else if ((LA239_2==DOT||LA239_2==PTR||LA239_2==68||LA239_2==80||LA239_2==91))
				{
					alt239 = 5;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 239, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 180:
				{
				alt239 = 3;
				}
				break;
			case 102:
				{
				alt239 = 4;
				}
				break;
			case 184:
				{
				alt239 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 239, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(239); }
			switch (alt239)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:855:5: predefined_type
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(855, 5);
				PushFollow(Follow._predefined_type_in_invocation_start8226);
				predefined_type871=predefined_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, predefined_type871.Tree, predefined_type871, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:856:7: ( identifier '<' )=> identifier generic_argument_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(856, 30);
				PushFollow(Follow._identifier_in_invocation_start8246);
				identifier872=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier872.Tree, identifier872, retval);
				DebugLocation(856, 43);
				PushFollow(Follow._generic_argument_list_in_invocation_start8250);
				generic_argument_list873=generic_argument_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, generic_argument_list873.Tree, generic_argument_list873, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:857:7: 'this'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(857, 7);
				string_literal874=(IToken)Match(input,180,Follow._180_in_invocation_start8258); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal874_tree = (object)adaptor.Create(string_literal874, retval);
				adaptor.AddChild(root_0, string_literal874_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:858:7: 'base'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(858, 7);
				string_literal875=(IToken)Match(input,102,Follow._102_in_invocation_start8267); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal875_tree = (object)adaptor.Create(string_literal875, retval);
				adaptor.AddChild(root_0, string_literal875_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// cs.g:859:7: identifier ( '::' identifier )?
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(859, 7);
				PushFollow(Follow._identifier_in_invocation_start8275);
				identifier876=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier876.Tree, identifier876, retval);
				DebugLocation(859, 20);
				// cs.g:859:20: ( '::' identifier )?
				int alt238=2;
				try { DebugEnterSubRule(238);
				try { DebugEnterDecision(238, false);
				int LA238_0 = input.LA(1);

				if ((LA238_0==80))
				{
					alt238 = 1;
				}
				} finally { DebugExitDecision(238); }
				switch (alt238)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:859:21: '::' identifier
					{
					DebugLocation(859, 21);
					string_literal877=(IToken)Match(input,80,Follow._80_in_invocation_start8280); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal877_tree = (object)adaptor.Create(string_literal877, retval);
					adaptor.AddChild(root_0, string_literal877_tree);
					}
					DebugLocation(859, 28);
					PushFollow(Follow._identifier_in_invocation_start8284);
					identifier878=identifier();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, identifier878.Tree, identifier878, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(238); }


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// cs.g:860:7: typeof_expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(860, 7);
				PushFollow(Follow._typeof_expression_in_invocation_start8294);
				typeof_expression879=typeof_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, typeof_expression879.Tree, typeof_expression879, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("invocation_start", 243);
			LeaveRule("invocation_start", 243);
			LeaveRule_invocation_start();
			if (state.backtracking > 0) { Memoize(input, 243, invocation_start_StartIndex); }

		}
		DebugLocation(861, 4);
		} finally { DebugExitRule(GrammarFileName, "invocation_start"); }
		return retval;

	}
	// $ANTLR end "invocation_start"

	partial void EnterRule_invocation_part();
	partial void LeaveRule_invocation_part();

	// $ANTLR start "invocation_part"
	// cs.g:862:1: invocation_part : ( access_identifier | brackets );
	[GrammarRule("invocation_part")]
	public XAstParserRuleReturnScope invocation_part()
	{
		EnterRule_invocation_part();
		EnterRule("invocation_part", 244);
		var retval = new XAstParserRuleReturnScope("invocation_part");
		
		retval.Start = (IToken)input.LT(1);
		int invocation_part_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope access_identifier880 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope brackets881 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "invocation_part");
		DebugLocation(862, 15);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 244)) { return retval; }

			// cs.g:862:16: ( access_identifier | brackets )
			int alt240=2;
			try { DebugEnterDecision(240, false);
			int LA240_0 = input.LA(1);

			if ((LA240_0==DOT||LA240_0==PTR))
			{
				alt240 = 1;
			}
			else if ((LA240_0==91))
			{
				alt240 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 240, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(240); }
			switch (alt240)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:863:6: access_identifier
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(863, 6);
				PushFollow(Follow._access_identifier_in_invocation_part8323);
				access_identifier880=access_identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, access_identifier880.Tree, access_identifier880, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:864:7: brackets
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(864, 7);
				PushFollow(Follow._brackets_in_invocation_part8331);
				brackets881=brackets();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, brackets881.Tree, brackets881, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("invocation_part", 244);
			LeaveRule("invocation_part", 244);
			LeaveRule_invocation_part();
			if (state.backtracking > 0) { Memoize(input, 244, invocation_part_StartIndex); }

		}
		DebugLocation(864, 15);
		} finally { DebugExitRule(GrammarFileName, "invocation_part"); }
		return retval;

	}
	// $ANTLR end "invocation_part"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();

	// $ANTLR start "statement"
	// cs.g:868:1: statement : ( ( declaration_statement )=> declaration_statement | ( identifier ':' )=> labeled_statement | embedded_statement );
	[GrammarRule("statement")]
	public XAstParserRuleReturnScope statement()
	{
		EnterRule_statement();
		EnterRule("statement", 245);
		var retval = new XAstParserRuleReturnScope("statement");
		
		retval.Start = (IToken)input.LT(1);
		int statement_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope declaration_statement882 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope labeled_statement883 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope embedded_statement884 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(868, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 245)) { return retval; }

			// cs.g:868:10: ( ( declaration_statement )=> declaration_statement | ( identifier ':' )=> labeled_statement | embedded_statement )
			int alt241=3;
			try { DebugEnterDecision(241, false);
			int LA241_0 = input.LA(1);

			if ((LA241_0==190))
			{
				int LA241_1 = input.LA(2);

				if ((EvaluatePredicate(synpred33_cs_fragment)))
				{
					alt241 = 1;
				}
				else if ((EvaluatePredicate(synpred34_cs_fragment)))
				{
					alt241 = 2;
				}
				else if ((true))
				{
					alt241 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 241, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA241_0==120))
			{
				int LA241_2 = input.LA(2);

				if ((EvaluatePredicate(synpred33_cs_fragment)))
				{
					alt241 = 1;
				}
				else if ((EvaluatePredicate(synpred34_cs_fragment)))
				{
					alt241 = 2;
				}
				else if ((true))
				{
					alt241 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 241, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA241_0==103||LA241_0==106||LA241_0==109||LA241_0==114||LA241_0==119||LA241_0==129||LA241_0==138||LA241_0==146||LA241_0==151||LA241_0==169||LA241_0==173||LA241_0==177||(LA241_0>=185 && LA241_0<=186)||LA241_0==189))
			{
				int LA241_3 = input.LA(2);

				if ((EvaluatePredicate(synpred33_cs_fragment)))
				{
					alt241 = 1;
				}
				else if ((true))
				{
					alt241 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 241, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA241_0==196))
			{
				int LA241_4 = input.LA(2);

				if ((EvaluatePredicate(synpred33_cs_fragment)))
				{
					alt241 = 1;
				}
				else if ((EvaluatePredicate(synpred34_cs_fragment)))
				{
					alt241 = 2;
				}
				else if ((true))
				{
					alt241 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 241, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA241_0==192) && (EvaluatePredicate(synpred33_cs_fragment)))
			{
				alt241 = 1;
			}
			else if ((LA241_0==112) && (EvaluatePredicate(synpred33_cs_fragment)))
			{
				alt241 = 1;
			}
			else if ((LA241_0==Character_literal||LA241_0==FALSE||LA241_0==Hex_number||LA241_0==IF||(LA241_0>=MINUS && LA241_0<=NUMBER)||LA241_0==Real_literal||(LA241_0>=SEMI && LA241_0<=STRINGLITERAL)||LA241_0==TRUE||(LA241_0>=USING && LA241_0<=Verbatim_string_literal)||LA241_0==61||LA241_0==66||(LA241_0>=68 && LA241_0<=69)||(LA241_0>=71 && LA241_0<=72)||LA241_0==75||LA241_0==102||LA241_0==104||LA241_0==110||LA241_0==113||(LA241_0>=115 && LA241_0<=116)||LA241_0==118||LA241_0==128||(LA241_0>=130 && LA241_0<=131)||LA241_0==134||LA241_0==145||LA241_0==150||LA241_0==168||LA241_0==174||(LA241_0>=179 && LA241_0<=182)||LA241_0==184||(LA241_0>=187 && LA241_0<=188)||LA241_0==195||LA241_0==197||LA241_0==202))
			{
				alt241 = 3;
			}
			else if ((LA241_0==132))
			{
				int LA241_25 = input.LA(2);

				if ((EvaluatePredicate(synpred33_cs_fragment)))
				{
					alt241 = 1;
				}
				else if ((EvaluatePredicate(synpred34_cs_fragment)))
				{
					alt241 = 2;
				}
				else if ((true))
				{
					alt241 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 241, 25, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA241_0==IDENTIFIER||LA241_0==95||(LA241_0>=97 && LA241_0<=98)||(LA241_0>=100 && LA241_0<=101)||LA241_0==105||LA241_0==117||LA241_0==122||LA241_0==126||LA241_0==135||LA241_0==141||(LA241_0>=143 && LA241_0<=144)||(LA241_0>=147 && LA241_0<=148)||LA241_0==152||LA241_0==154||LA241_0==157||LA241_0==160||LA241_0==162||LA241_0==167||(LA241_0>=171 && LA241_0<=172)||LA241_0==183||LA241_0==194))
			{
				int LA241_45 = input.LA(2);

				if ((EvaluatePredicate(synpred33_cs_fragment)))
				{
					alt241 = 1;
				}
				else if ((EvaluatePredicate(synpred34_cs_fragment)))
				{
					alt241 = 2;
				}
				else if ((true))
				{
					alt241 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 241, 45, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 241, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(241); }
			switch (alt241)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:869:5: ( declaration_statement )=> declaration_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(869, 32);
				PushFollow(Follow._declaration_statement_in_statement8351);
				declaration_statement882=declaration_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, declaration_statement882.Tree, declaration_statement882, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:870:7: ( identifier ':' )=> labeled_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(870, 29);
				PushFollow(Follow._labeled_statement_in_statement8369);
				labeled_statement883=labeled_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, labeled_statement883.Tree, labeled_statement883, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:871:7: embedded_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(871, 7);
				PushFollow(Follow._embedded_statement_in_statement8377);
				embedded_statement884=embedded_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement884.Tree, embedded_statement884, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement", 245);
			LeaveRule("statement", 245);
			LeaveRule_statement();
			if (state.backtracking > 0) { Memoize(input, 245, statement_StartIndex); }

		}
		DebugLocation(872, 4);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_embedded_statement();
	partial void LeaveRule_embedded_statement();

	// $ANTLR start "embedded_statement"
	// cs.g:873:1: embedded_statement : ( block | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement | unsafe_statement | fixed_statement | expression_statement );
	[GrammarRule("embedded_statement")]
	public XAstParserRuleReturnScope embedded_statement()
	{
		EnterRule_embedded_statement();
		EnterRule("embedded_statement", 246);
		var retval = new XAstParserRuleReturnScope("embedded_statement");
		
		retval.Start = (IToken)input.LT(1);
		int embedded_statement_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope block885 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope selection_statement886 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope iteration_statement887 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope jump_statement888 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope try_statement889 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope checked_statement890 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unchecked_statement891 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope lock_statement892 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope using_statement893 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope yield_statement894 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope unsafe_statement895 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope fixed_statement896 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression_statement897 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "embedded_statement");
		DebugLocation(873, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 246)) { return retval; }

			// cs.g:873:19: ( block | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement | unsafe_statement | fixed_statement | expression_statement )
			int alt242=13;
			try { DebugEnterDecision(242, false);
			switch (input.LA(1))
			{
			case SEMI:
			case 197:
				{
				alt242 = 1;
				}
				break;
			case IF:
			case 179:
				{
				alt242 = 2;
				}
				break;
			case 118:
			case 130:
			case 131:
			case 195:
				{
				alt242 = 3;
				}
				break;
			case 104:
			case 113:
			case 134:
			case 168:
			case 181:
				{
				alt242 = 4;
				}
				break;
			case 182:
				{
				alt242 = 5;
				}
				break;
			case 110:
				{
				int LA242_6 = input.LA(2);

				if ((LA242_6==68))
				{
					alt242 = 13;
				}
				else if ((LA242_6==SEMI||LA242_6==197))
				{
					alt242 = 6;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 242, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 187:
				{
				int LA242_7 = input.LA(2);

				if ((LA242_7==68))
				{
					alt242 = 13;
				}
				else if ((LA242_7==SEMI||LA242_7==197))
				{
					alt242 = 7;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 242, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 145:
				{
				alt242 = 8;
				}
				break;
			case USING:
				{
				alt242 = 9;
				}
				break;
			case 196:
				{
				int LA242_10 = input.LA(2);

				if ((LA242_10==104||LA242_10==168))
				{
					alt242 = 10;
				}
				else if ((LA242_10==DOT||LA242_10==GT||LA242_10==MINUS||LA242_10==PTR||LA242_10==SEMI||(LA242_10>=62 && LA242_10<=78)||(LA242_10>=80 && LA242_10<=91)||(LA242_10>=93 && LA242_10<=94)||LA242_10==99||LA242_10==142||(LA242_10>=198 && LA242_10<=200)))
				{
					alt242 = 13;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 242, 10, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 188:
				{
				alt242 = 11;
				}
				break;
			case 128:
				{
				alt242 = 12;
				}
				break;
			case Character_literal:
			case FALSE:
			case Hex_number:
			case IDENTIFIER:
			case MINUS:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 61:
			case 66:
			case 68:
			case 69:
			case 71:
			case 72:
			case 75:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 102:
			case 103:
			case 105:
			case 106:
			case 109:
			case 114:
			case 115:
			case 116:
			case 117:
			case 119:
			case 120:
			case 122:
			case 126:
			case 129:
			case 132:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 150:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 174:
			case 177:
			case 180:
			case 183:
			case 184:
			case 185:
			case 186:
			case 189:
			case 190:
			case 194:
			case 202:
				{
				alt242 = 13;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 242, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(242); }
			switch (alt242)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:874:5: block
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(874, 5);
				PushFollow(Follow._block_in_embedded_statement8393);
				block885=block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, block885.Tree, block885, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:875:7: selection_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(875, 7);
				PushFollow(Follow._selection_statement_in_embedded_statement8401);
				selection_statement886=selection_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, selection_statement886.Tree, selection_statement886, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:876:7: iteration_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(876, 7);
				PushFollow(Follow._iteration_statement_in_embedded_statement8410);
				iteration_statement887=iteration_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, iteration_statement887.Tree, iteration_statement887, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:877:7: jump_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(877, 7);
				PushFollow(Follow._jump_statement_in_embedded_statement8419);
				jump_statement888=jump_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, jump_statement888.Tree, jump_statement888, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// cs.g:878:7: try_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(878, 7);
				PushFollow(Follow._try_statement_in_embedded_statement8429);
				try_statement889=try_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, try_statement889.Tree, try_statement889, retval);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// cs.g:879:7: checked_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(879, 7);
				PushFollow(Follow._checked_statement_in_embedded_statement8437);
				checked_statement890=checked_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, checked_statement890.Tree, checked_statement890, retval);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// cs.g:880:7: unchecked_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(880, 7);
				PushFollow(Follow._unchecked_statement_in_embedded_statement8445);
				unchecked_statement891=unchecked_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unchecked_statement891.Tree, unchecked_statement891, retval);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// cs.g:881:7: lock_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(881, 7);
				PushFollow(Follow._lock_statement_in_embedded_statement8453);
				lock_statement892=lock_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lock_statement892.Tree, lock_statement892, retval);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// cs.g:882:7: using_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(882, 7);
				PushFollow(Follow._using_statement_in_embedded_statement8461);
				using_statement893=using_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, using_statement893.Tree, using_statement893, retval);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// cs.g:883:7: yield_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(883, 7);
				PushFollow(Follow._yield_statement_in_embedded_statement8470);
				yield_statement894=yield_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, yield_statement894.Tree, yield_statement894, retval);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// cs.g:884:7: unsafe_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(884, 7);
				PushFollow(Follow._unsafe_statement_in_embedded_statement8479);
				unsafe_statement895=unsafe_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, unsafe_statement895.Tree, unsafe_statement895, retval);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// cs.g:885:7: fixed_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(885, 7);
				PushFollow(Follow._fixed_statement_in_embedded_statement8487);
				fixed_statement896=fixed_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, fixed_statement896.Tree, fixed_statement896, retval);

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// cs.g:886:7: expression_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(886, 7);
				PushFollow(Follow._expression_statement_in_embedded_statement8495);
				expression_statement897=expression_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression_statement897.Tree, expression_statement897, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("embedded_statement", 246);
			LeaveRule("embedded_statement", 246);
			LeaveRule_embedded_statement();
			if (state.backtracking > 0) { Memoize(input, 246, embedded_statement_StartIndex); }

		}
		DebugLocation(887, 4);
		} finally { DebugExitRule(GrammarFileName, "embedded_statement"); }
		return retval;

	}
	// $ANTLR end "embedded_statement"

	partial void EnterRule_fixed_statement();
	partial void LeaveRule_fixed_statement();

	// $ANTLR start "fixed_statement"
	// cs.g:888:1: fixed_statement : 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement ;
	[GrammarRule("fixed_statement")]
	public XAstParserRuleReturnScope fixed_statement()
	{
		EnterRule_fixed_statement();
		EnterRule("fixed_statement", 247);
		var retval = new XAstParserRuleReturnScope("fixed_statement");
		
		retval.Start = (IToken)input.LT(1);
		int fixed_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal898 = default(IToken);
		IToken char_literal899 = default(IToken);
		IToken char_literal902 = default(IToken);
		XAstParserRuleReturnScope pointer_type900 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope fixed_pointer_declarators901 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope embedded_statement903 = default(XAstParserRuleReturnScope);

		object string_literal898_tree = default(object);
		object char_literal899_tree = default(object);
		object char_literal902_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "fixed_statement");
		DebugLocation(888, 86);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 247)) { return retval; }

			// cs.g:888:16: ( 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement )
			DebugEnterAlt(1);
			// cs.g:889:5: 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(889, 5);
			string_literal898=(IToken)Match(input,128,Follow._128_in_fixed_statement8511); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal898_tree = (object)adaptor.Create(string_literal898, retval);
			adaptor.AddChild(root_0, string_literal898_tree);
			}
			DebugLocation(889, 15);
			char_literal899=(IToken)Match(input,68,Follow._68_in_fixed_statement8515); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal899_tree = (object)adaptor.Create(char_literal899, retval);
			adaptor.AddChild(root_0, char_literal899_tree);
			}
			DebugLocation(889, 21);
			PushFollow(Follow._pointer_type_in_fixed_statement8519);
			pointer_type900=pointer_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, pointer_type900.Tree, pointer_type900, retval);
			DebugLocation(889, 34);
			PushFollow(Follow._fixed_pointer_declarators_in_fixed_statement8521);
			fixed_pointer_declarators901=fixed_pointer_declarators();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, fixed_pointer_declarators901.Tree, fixed_pointer_declarators901, retval);
			DebugLocation(889, 62);
			char_literal902=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_fixed_statement8525), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal902_tree = (object)adaptor.Create(char_literal902, retval);
			adaptor.AddChild(root_0, char_literal902_tree);
			}
			DebugLocation(889, 68);
			PushFollow(Follow._embedded_statement_in_fixed_statement8529);
			embedded_statement903=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement903.Tree, embedded_statement903, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fixed_statement", 247);
			LeaveRule("fixed_statement", 247);
			LeaveRule_fixed_statement();
			if (state.backtracking > 0) { Memoize(input, 247, fixed_statement_StartIndex); }

		}
		DebugLocation(889, 86);
		} finally { DebugExitRule(GrammarFileName, "fixed_statement"); }
		return retval;

	}
	// $ANTLR end "fixed_statement"

	partial void EnterRule_fixed_pointer_declarators();
	partial void LeaveRule_fixed_pointer_declarators();

	// $ANTLR start "fixed_pointer_declarators"
	// cs.g:890:1: fixed_pointer_declarators : fixed_pointer_declarator ( ',' fixed_pointer_declarator )* ;
	[GrammarRule("fixed_pointer_declarators")]
	public XAstParserRuleReturnScope fixed_pointer_declarators()
	{
		EnterRule_fixed_pointer_declarators();
		EnterRule("fixed_pointer_declarators", 248);
		var retval = new XAstParserRuleReturnScope("fixed_pointer_declarators");
		
		retval.Start = (IToken)input.LT(1);
		int fixed_pointer_declarators_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal905 = default(IToken);
		XAstParserRuleReturnScope fixed_pointer_declarator904 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope fixed_pointer_declarator906 = default(XAstParserRuleReturnScope);

		object char_literal905_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "fixed_pointer_declarators");
		DebugLocation(890, 65);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 248)) { return retval; }

			// cs.g:890:26: ( fixed_pointer_declarator ( ',' fixed_pointer_declarator )* )
			DebugEnterAlt(1);
			// cs.g:891:5: fixed_pointer_declarator ( ',' fixed_pointer_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(891, 5);
			PushFollow(Follow._fixed_pointer_declarator_in_fixed_pointer_declarators8540);
			fixed_pointer_declarator904=fixed_pointer_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, fixed_pointer_declarator904.Tree, fixed_pointer_declarator904, retval);
			DebugLocation(891, 32);
			// cs.g:891:32: ( ',' fixed_pointer_declarator )*
			try { DebugEnterSubRule(243);
			while (true)
			{
				int alt243=2;
				try { DebugEnterDecision(243, false);
				int LA243_0 = input.LA(1);

				if ((LA243_0==74))
				{
					alt243 = 1;
				}


				} finally { DebugExitDecision(243); }
				switch ( alt243 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:891:33: ',' fixed_pointer_declarator
					{
					DebugLocation(891, 33);
					char_literal905=(IToken)Match(input,74,Follow._74_in_fixed_pointer_declarators8545); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal905_tree = (object)adaptor.Create(char_literal905, retval);
					adaptor.AddChild(root_0, char_literal905_tree);
					}
					DebugLocation(891, 39);
					PushFollow(Follow._fixed_pointer_declarator_in_fixed_pointer_declarators8549);
					fixed_pointer_declarator906=fixed_pointer_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, fixed_pointer_declarator906.Tree, fixed_pointer_declarator906, retval);

					}
					break;

				default:
					goto loop243;
				}
			}

			loop243:
				;

			} finally { DebugExitSubRule(243); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fixed_pointer_declarators", 248);
			LeaveRule("fixed_pointer_declarators", 248);
			LeaveRule_fixed_pointer_declarators();
			if (state.backtracking > 0) { Memoize(input, 248, fixed_pointer_declarators_StartIndex); }

		}
		DebugLocation(891, 65);
		} finally { DebugExitRule(GrammarFileName, "fixed_pointer_declarators"); }
		return retval;

	}
	// $ANTLR end "fixed_pointer_declarators"

	partial void EnterRule_fixed_pointer_declarator();
	partial void LeaveRule_fixed_pointer_declarator();

	// $ANTLR start "fixed_pointer_declarator"
	// cs.g:892:1: fixed_pointer_declarator : identifier '=' fixed_pointer_initializer ;
	[GrammarRule("fixed_pointer_declarator")]
	public XAstParserRuleReturnScope fixed_pointer_declarator()
	{
		EnterRule_fixed_pointer_declarator();
		EnterRule("fixed_pointer_declarator", 249);
		var retval = new XAstParserRuleReturnScope("fixed_pointer_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int fixed_pointer_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal908 = default(IToken);
		XAstParserRuleReturnScope identifier907 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope fixed_pointer_initializer909 = default(XAstParserRuleReturnScope);

		object char_literal908_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "fixed_pointer_declarator");
		DebugLocation(892, 49);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 249)) { return retval; }

			// cs.g:892:25: ( identifier '=' fixed_pointer_initializer )
			DebugEnterAlt(1);
			// cs.g:893:5: identifier '=' fixed_pointer_initializer
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(893, 5);
			PushFollow(Follow._identifier_in_fixed_pointer_declarator8562);
			identifier907=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier907.Tree, identifier907, retval);
			DebugLocation(893, 18);
			char_literal908=(IToken)Match(input,85,Follow._85_in_fixed_pointer_declarator8566); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal908_tree = (object)adaptor.Create(char_literal908, retval);
			adaptor.AddChild(root_0, char_literal908_tree);
			}
			DebugLocation(893, 24);
			PushFollow(Follow._fixed_pointer_initializer_in_fixed_pointer_declarator8570);
			fixed_pointer_initializer909=fixed_pointer_initializer();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, fixed_pointer_initializer909.Tree, fixed_pointer_initializer909, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fixed_pointer_declarator", 249);
			LeaveRule("fixed_pointer_declarator", 249);
			LeaveRule_fixed_pointer_declarator();
			if (state.backtracking > 0) { Memoize(input, 249, fixed_pointer_declarator_StartIndex); }

		}
		DebugLocation(893, 49);
		} finally { DebugExitRule(GrammarFileName, "fixed_pointer_declarator"); }
		return retval;

	}
	// $ANTLR end "fixed_pointer_declarator"

	partial void EnterRule_fixed_pointer_initializer();
	partial void LeaveRule_fixed_pointer_initializer();

	// $ANTLR start "fixed_pointer_initializer"
	// cs.g:894:1: fixed_pointer_initializer : expression ;
	[GrammarRule("fixed_pointer_initializer")]
	public XAstParserRuleReturnScope fixed_pointer_initializer()
	{
		EnterRule_fixed_pointer_initializer();
		EnterRule("fixed_pointer_initializer", 250);
		var retval = new XAstParserRuleReturnScope("fixed_pointer_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int fixed_pointer_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope expression910 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "fixed_pointer_initializer");
		DebugLocation(894, 14);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 250)) { return retval; }

			// cs.g:894:26: ( expression )
			DebugEnterAlt(1);
			// cs.g:896:5: expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(896, 5);
			PushFollow(Follow._expression_in_fixed_pointer_initializer8586);
			expression910=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression910.Tree, expression910, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("fixed_pointer_initializer", 250);
			LeaveRule("fixed_pointer_initializer", 250);
			LeaveRule_fixed_pointer_initializer();
			if (state.backtracking > 0) { Memoize(input, 250, fixed_pointer_initializer_StartIndex); }

		}
		DebugLocation(896, 14);
		} finally { DebugExitRule(GrammarFileName, "fixed_pointer_initializer"); }
		return retval;

	}
	// $ANTLR end "fixed_pointer_initializer"

	partial void EnterRule_unsafe_statement();
	partial void LeaveRule_unsafe_statement();

	// $ANTLR start "unsafe_statement"
	// cs.g:897:1: unsafe_statement : 'unsafe' block ;
	[GrammarRule("unsafe_statement")]
	public XAstParserRuleReturnScope unsafe_statement()
	{
		EnterRule_unsafe_statement();
		EnterRule("unsafe_statement", 251);
		var retval = new XAstParserRuleReturnScope("unsafe_statement");
		
		retval.Start = (IToken)input.LT(1);
		int unsafe_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal911 = default(IToken);
		XAstParserRuleReturnScope block912 = default(XAstParserRuleReturnScope);

		object string_literal911_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unsafe_statement");
		DebugLocation(897, 20);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 251)) { return retval; }

			// cs.g:897:17: ( 'unsafe' block )
			DebugEnterAlt(1);
			// cs.g:898:5: 'unsafe' block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(898, 5);
			string_literal911=(IToken)Match(input,188,Follow._188_in_unsafe_statement8596); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal911_tree = (object)adaptor.Create(string_literal911, retval);
			adaptor.AddChild(root_0, string_literal911_tree);
			}
			DebugLocation(898, 16);
			PushFollow(Follow._block_in_unsafe_statement8600);
			block912=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block912.Tree, block912, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unsafe_statement", 251);
			LeaveRule("unsafe_statement", 251);
			LeaveRule_unsafe_statement();
			if (state.backtracking > 0) { Memoize(input, 251, unsafe_statement_StartIndex); }

		}
		DebugLocation(898, 20);
		} finally { DebugExitRule(GrammarFileName, "unsafe_statement"); }
		return retval;

	}
	// $ANTLR end "unsafe_statement"

	partial void EnterRule_labeled_statement();
	partial void LeaveRule_labeled_statement();

	// $ANTLR start "labeled_statement"
	// cs.g:899:1: labeled_statement : identifier ':' statement ;
	[GrammarRule("labeled_statement")]
	public XAstParserRuleReturnScope labeled_statement()
	{
		EnterRule_labeled_statement();
		EnterRule("labeled_statement", 252);
		var retval = new XAstParserRuleReturnScope("labeled_statement");
		
		retval.Start = (IToken)input.LT(1);
		int labeled_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal914 = default(IToken);
		XAstParserRuleReturnScope identifier913 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement915 = default(XAstParserRuleReturnScope);

		object char_literal914_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "labeled_statement");
		DebugLocation(899, 33);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 252)) { return retval; }

			// cs.g:899:18: ( identifier ':' statement )
			DebugEnterAlt(1);
			// cs.g:900:5: identifier ':' statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(900, 5);
			PushFollow(Follow._identifier_in_labeled_statement8610);
			identifier913=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier913.Tree, identifier913, retval);
			DebugLocation(900, 18);
			char_literal914=(IToken)Match(input,79,Follow._79_in_labeled_statement8614); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal914_tree = (object)adaptor.Create(char_literal914, retval);
			adaptor.AddChild(root_0, char_literal914_tree);
			}
			DebugLocation(900, 24);
			PushFollow(Follow._statement_in_labeled_statement8618);
			statement915=statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statement915.Tree, statement915, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("labeled_statement", 252);
			LeaveRule("labeled_statement", 252);
			LeaveRule_labeled_statement();
			if (state.backtracking > 0) { Memoize(input, 252, labeled_statement_StartIndex); }

		}
		DebugLocation(900, 33);
		} finally { DebugExitRule(GrammarFileName, "labeled_statement"); }
		return retval;

	}
	// $ANTLR end "labeled_statement"

	partial void EnterRule_declaration_statement();
	partial void LeaveRule_declaration_statement();

	// $ANTLR start "declaration_statement"
	// cs.g:901:1: declaration_statement : ( local_variable_declaration | local_constant_declaration ) ';' ;
	[GrammarRule("declaration_statement")]
	public XAstParserRuleReturnScope declaration_statement()
	{
		EnterRule_declaration_statement();
		EnterRule("declaration_statement", 253);
		var retval = new XAstParserRuleReturnScope("declaration_statement");
		
		retval.Start = (IToken)input.LT(1);
		int declaration_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal918 = default(IToken);
		XAstParserRuleReturnScope local_variable_declaration916 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope local_constant_declaration917 = default(XAstParserRuleReturnScope);

		object char_literal918_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "declaration_statement");
		DebugLocation(901, 38);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 253)) { return retval; }

			// cs.g:901:22: ( ( local_variable_declaration | local_constant_declaration ) ';' )
			DebugEnterAlt(1);
			// cs.g:902:5: ( local_variable_declaration | local_constant_declaration ) ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(902, 5);
			// cs.g:902:5: ( local_variable_declaration | local_constant_declaration )
			int alt244=2;
			try { DebugEnterSubRule(244);
			try { DebugEnterDecision(244, false);
			int LA244_0 = input.LA(1);

			if ((LA244_0==IDENTIFIER||LA244_0==95||(LA244_0>=97 && LA244_0<=98)||(LA244_0>=100 && LA244_0<=101)||LA244_0==103||(LA244_0>=105 && LA244_0<=106)||LA244_0==109||LA244_0==114||LA244_0==117||(LA244_0>=119 && LA244_0<=120)||LA244_0==122||LA244_0==126||LA244_0==129||LA244_0==132||LA244_0==135||LA244_0==138||LA244_0==141||(LA244_0>=143 && LA244_0<=144)||(LA244_0>=146 && LA244_0<=148)||(LA244_0>=151 && LA244_0<=152)||LA244_0==154||LA244_0==157||LA244_0==160||LA244_0==162||LA244_0==167||LA244_0==169||(LA244_0>=171 && LA244_0<=173)||LA244_0==177||LA244_0==183||(LA244_0>=185 && LA244_0<=186)||(LA244_0>=189 && LA244_0<=190)||LA244_0==192||LA244_0==194||LA244_0==196))
			{
				alt244 = 1;
			}
			else if ((LA244_0==112))
			{
				alt244 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 244, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(244); }
			switch (alt244)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:902:6: local_variable_declaration
				{
				DebugLocation(902, 6);
				PushFollow(Follow._local_variable_declaration_in_declaration_statement8630);
				local_variable_declaration916=local_variable_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_declaration916.Tree, local_variable_declaration916, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:903:7: local_constant_declaration
				{
				DebugLocation(903, 7);
				PushFollow(Follow._local_constant_declaration_in_declaration_statement8639);
				local_constant_declaration917=local_constant_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, local_constant_declaration917.Tree, local_constant_declaration917, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(244); }

			DebugLocation(903, 35);
			char_literal918=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_declaration_statement8642), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal918_tree = (object)adaptor.Create(char_literal918, retval);
			adaptor.AddChild(root_0, char_literal918_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration_statement", 253);
			LeaveRule("declaration_statement", 253);
			LeaveRule_declaration_statement();
			if (state.backtracking > 0) { Memoize(input, 253, declaration_statement_StartIndex); }

		}
		DebugLocation(903, 38);
		} finally { DebugExitRule(GrammarFileName, "declaration_statement"); }
		return retval;

	}
	// $ANTLR end "declaration_statement"

	partial void EnterRule_local_variable_declaration();
	partial void LeaveRule_local_variable_declaration();

	// $ANTLR start "local_variable_declaration"
	// cs.g:904:1: local_variable_declaration : local_variable_type local_variable_declarators ;
	[GrammarRule("local_variable_declaration")]
	public XAstParserRuleReturnScope local_variable_declaration()
	{
		EnterRule_local_variable_declaration();
		EnterRule("local_variable_declaration", 254);
		var retval = new XAstParserRuleReturnScope("local_variable_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int local_variable_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope local_variable_type919 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope local_variable_declarators920 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "local_variable_declaration");
		DebugLocation(904, 53);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 254)) { return retval; }

			// cs.g:904:27: ( local_variable_type local_variable_declarators )
			DebugEnterAlt(1);
			// cs.g:905:5: local_variable_type local_variable_declarators
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(905, 5);
			PushFollow(Follow._local_variable_type_in_local_variable_declaration8653);
			local_variable_type919=local_variable_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_type919.Tree, local_variable_type919, retval);
			DebugLocation(905, 27);
			PushFollow(Follow._local_variable_declarators_in_local_variable_declaration8657);
			local_variable_declarators920=local_variable_declarators();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_declarators920.Tree, local_variable_declarators920, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("local_variable_declaration", 254);
			LeaveRule("local_variable_declaration", 254);
			LeaveRule_local_variable_declaration();
			if (state.backtracking > 0) { Memoize(input, 254, local_variable_declaration_StartIndex); }

		}
		DebugLocation(905, 53);
		} finally { DebugExitRule(GrammarFileName, "local_variable_declaration"); }
		return retval;

	}
	// $ANTLR end "local_variable_declaration"

	partial void EnterRule_local_variable_type();
	partial void LeaveRule_local_variable_type();

	// $ANTLR start "local_variable_type"
	// cs.g:906:1: local_variable_type : ( ( 'var' )=> 'var' | ( 'dynamic' )=> 'dynamic' | type );
	[GrammarRule("local_variable_type")]
	public XAstParserRuleReturnScope local_variable_type()
	{
		EnterRule_local_variable_type();
		EnterRule("local_variable_type", 255);
		var retval = new XAstParserRuleReturnScope("local_variable_type");
		
		retval.Start = (IToken)input.LT(1);
		int local_variable_type_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal921 = default(IToken);
		IToken string_literal922 = default(IToken);
		XAstParserRuleReturnScope type923 = default(XAstParserRuleReturnScope);

		object string_literal921_tree = default(object);
		object string_literal922_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "local_variable_type");
		DebugLocation(906, 11);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 255)) { return retval; }

			// cs.g:906:20: ( ( 'var' )=> 'var' | ( 'dynamic' )=> 'dynamic' | type )
			int alt245=3;
			try { DebugEnterDecision(245, false);
			switch (input.LA(1))
			{
			case 190:
				{
				int LA245_1 = input.LA(2);

				if ((EvaluatePredicate(synpred35_cs_fragment)))
				{
					alt245 = 1;
				}
				else if ((true))
				{
					alt245 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 245, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 120:
				{
				int LA245_2 = input.LA(2);

				if ((EvaluatePredicate(synpred36_cs_fragment)))
				{
					alt245 = 2;
				}
				else if ((true))
				{
					alt245 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 245, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 103:
			case 105:
			case 106:
			case 109:
			case 114:
			case 117:
			case 119:
			case 122:
			case 126:
			case 129:
			case 132:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 177:
			case 183:
			case 185:
			case 186:
			case 189:
			case 192:
			case 194:
			case 196:
				{
				alt245 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 245, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(245); }
			switch (alt245)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:907:5: ( 'var' )=> 'var'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(907, 16);
				string_literal921=(IToken)Match(input,190,Follow._190_in_local_variable_type8674); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal921_tree = (object)adaptor.Create(string_literal921, retval);
				adaptor.AddChild(root_0, string_literal921_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:908:7: ( 'dynamic' )=> 'dynamic'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(908, 22);
				string_literal922=(IToken)Match(input,120,Follow._120_in_local_variable_type8688); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal922_tree = (object)adaptor.Create(string_literal922, retval);
				adaptor.AddChild(root_0, string_literal922_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:909:7: type
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(909, 7);
				PushFollow(Follow._type_in_local_variable_type8696);
				type923=type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, type923.Tree, type923, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("local_variable_type", 255);
			LeaveRule("local_variable_type", 255);
			LeaveRule_local_variable_type();
			if (state.backtracking > 0) { Memoize(input, 255, local_variable_type_StartIndex); }

		}
		DebugLocation(909, 11);
		} finally { DebugExitRule(GrammarFileName, "local_variable_type"); }
		return retval;

	}
	// $ANTLR end "local_variable_type"

	partial void EnterRule_local_variable_declarators();
	partial void LeaveRule_local_variable_declarators();

	// $ANTLR start "local_variable_declarators"
	// cs.g:910:1: local_variable_declarators : local_variable_declarator ( ',' local_variable_declarator )* ;
	[GrammarRule("local_variable_declarators")]
	public XAstParserRuleReturnScope local_variable_declarators()
	{
		EnterRule_local_variable_declarators();
		EnterRule("local_variable_declarators", 256);
		var retval = new XAstParserRuleReturnScope("local_variable_declarators");
		
		retval.Start = (IToken)input.LT(1);
		int local_variable_declarators_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal925 = default(IToken);
		XAstParserRuleReturnScope local_variable_declarator924 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope local_variable_declarator926 = default(XAstParserRuleReturnScope);

		object char_literal925_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "local_variable_declarators");
		DebugLocation(910, 63);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 256)) { return retval; }

			// cs.g:910:27: ( local_variable_declarator ( ',' local_variable_declarator )* )
			DebugEnterAlt(1);
			// cs.g:911:5: local_variable_declarator ( ',' local_variable_declarator )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(911, 5);
			PushFollow(Follow._local_variable_declarator_in_local_variable_declarators8707);
			local_variable_declarator924=local_variable_declarator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_declarator924.Tree, local_variable_declarator924, retval);
			DebugLocation(911, 31);
			// cs.g:911:31: ( ',' local_variable_declarator )*
			try { DebugEnterSubRule(246);
			while (true)
			{
				int alt246=2;
				try { DebugEnterDecision(246, false);
				int LA246_0 = input.LA(1);

				if ((LA246_0==74))
				{
					alt246 = 1;
				}


				} finally { DebugExitDecision(246); }
				switch ( alt246 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:911:32: ',' local_variable_declarator
					{
					DebugLocation(911, 32);
					char_literal925=(IToken)Match(input,74,Follow._74_in_local_variable_declarators8710); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal925_tree = (object)adaptor.Create(char_literal925, retval);
					adaptor.AddChild(root_0, char_literal925_tree);
					}
					DebugLocation(911, 36);
					PushFollow(Follow._local_variable_declarator_in_local_variable_declarators8712);
					local_variable_declarator926=local_variable_declarator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_declarator926.Tree, local_variable_declarator926, retval);

					}
					break;

				default:
					goto loop246;
				}
			}

			loop246:
				;

			} finally { DebugExitSubRule(246); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("local_variable_declarators", 256);
			LeaveRule("local_variable_declarators", 256);
			LeaveRule_local_variable_declarators();
			if (state.backtracking > 0) { Memoize(input, 256, local_variable_declarators_StartIndex); }

		}
		DebugLocation(911, 63);
		} finally { DebugExitRule(GrammarFileName, "local_variable_declarators"); }
		return retval;

	}
	// $ANTLR end "local_variable_declarators"

	partial void EnterRule_local_variable_declarator();
	partial void LeaveRule_local_variable_declarator();

	// $ANTLR start "local_variable_declarator"
	// cs.g:912:1: local_variable_declarator : identifier ( '=' local_variable_initializer )? ;
	[GrammarRule("local_variable_declarator")]
	public XAstParserRuleReturnScope local_variable_declarator()
	{
		EnterRule_local_variable_declarator();
		EnterRule("local_variable_declarator", 257);
		var retval = new XAstParserRuleReturnScope("local_variable_declarator");
		
		retval.Start = (IToken)input.LT(1);
		int local_variable_declarator_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal928 = default(IToken);
		XAstParserRuleReturnScope identifier927 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope local_variable_initializer929 = default(XAstParserRuleReturnScope);

		object char_literal928_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "local_variable_declarator");
		DebugLocation(912, 51);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 257)) { return retval; }

			// cs.g:912:26: ( identifier ( '=' local_variable_initializer )? )
			DebugEnterAlt(1);
			// cs.g:913:5: identifier ( '=' local_variable_initializer )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(913, 5);
			PushFollow(Follow._identifier_in_local_variable_declarator8725);
			identifier927=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier927.Tree, identifier927, retval);
			DebugLocation(913, 16);
			// cs.g:913:16: ( '=' local_variable_initializer )?
			int alt247=2;
			try { DebugEnterSubRule(247);
			try { DebugEnterDecision(247, false);
			int LA247_0 = input.LA(1);

			if ((LA247_0==85))
			{
				alt247 = 1;
			}
			} finally { DebugExitDecision(247); }
			switch (alt247)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:913:17: '=' local_variable_initializer
				{
				DebugLocation(913, 17);
				char_literal928=(IToken)Match(input,85,Follow._85_in_local_variable_declarator8728); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal928_tree = (object)adaptor.Create(char_literal928, retval);
				adaptor.AddChild(root_0, char_literal928_tree);
				}
				DebugLocation(913, 23);
				PushFollow(Follow._local_variable_initializer_in_local_variable_declarator8732);
				local_variable_initializer929=local_variable_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_initializer929.Tree, local_variable_initializer929, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(247); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("local_variable_declarator", 257);
			LeaveRule("local_variable_declarator", 257);
			LeaveRule_local_variable_declarator();
			if (state.backtracking > 0) { Memoize(input, 257, local_variable_declarator_StartIndex); }

		}
		DebugLocation(913, 51);
		} finally { DebugExitRule(GrammarFileName, "local_variable_declarator"); }
		return retval;

	}
	// $ANTLR end "local_variable_declarator"

	partial void EnterRule_local_variable_initializer();
	partial void LeaveRule_local_variable_initializer();

	// $ANTLR start "local_variable_initializer"
	// cs.g:914:1: local_variable_initializer : ( expression | array_initializer | stackalloc_initializer );
	[GrammarRule("local_variable_initializer")]
	public XAstParserRuleReturnScope local_variable_initializer()
	{
		EnterRule_local_variable_initializer();
		EnterRule("local_variable_initializer", 258);
		var retval = new XAstParserRuleReturnScope("local_variable_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int local_variable_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope expression930 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope array_initializer931 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope stackalloc_initializer932 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "local_variable_initializer");
		DebugLocation(914, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 258)) { return retval; }

			// cs.g:914:27: ( expression | array_initializer | stackalloc_initializer )
			int alt248=3;
			try { DebugEnterDecision(248, false);
			switch (input.LA(1))
			{
			case Character_literal:
			case FALSE:
			case Hex_number:
			case IDENTIFIER:
			case MINUS:
			case NULL:
			case NUMBER:
			case Real_literal:
			case STRINGLITERAL:
			case TRUE:
			case Verbatim_string_literal:
			case 61:
			case 66:
			case 68:
			case 69:
			case 71:
			case 72:
			case 75:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 102:
			case 103:
			case 105:
			case 106:
			case 109:
			case 110:
			case 114:
			case 115:
			case 116:
			case 117:
			case 119:
			case 120:
			case 122:
			case 126:
			case 129:
			case 132:
			case 135:
			case 138:
			case 141:
			case 143:
			case 144:
			case 146:
			case 147:
			case 148:
			case 150:
			case 151:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 169:
			case 171:
			case 172:
			case 173:
			case 174:
			case 177:
			case 180:
			case 183:
			case 184:
			case 185:
			case 186:
			case 187:
			case 189:
			case 190:
			case 194:
			case 196:
			case 202:
				{
				alt248 = 1;
				}
				break;
			case 197:
				{
				alt248 = 2;
				}
				break;
			case 175:
				{
				alt248 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 248, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(248); }
			switch (alt248)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:915:5: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(915, 5);
				PushFollow(Follow._expression_in_local_variable_initializer8746);
				expression930=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression930.Tree, expression930, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:916:7: array_initializer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(916, 7);
				PushFollow(Follow._array_initializer_in_local_variable_initializer8754);
				array_initializer931=array_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, array_initializer931.Tree, array_initializer931, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:917:7: stackalloc_initializer
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(917, 7);
				PushFollow(Follow._stackalloc_initializer_in_local_variable_initializer8763);
				stackalloc_initializer932=stackalloc_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stackalloc_initializer932.Tree, stackalloc_initializer932, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("local_variable_initializer", 258);
			LeaveRule("local_variable_initializer", 258);
			LeaveRule_local_variable_initializer();
			if (state.backtracking > 0) { Memoize(input, 258, local_variable_initializer_StartIndex); }

		}
		DebugLocation(917, 28);
		} finally { DebugExitRule(GrammarFileName, "local_variable_initializer"); }
		return retval;

	}
	// $ANTLR end "local_variable_initializer"

	partial void EnterRule_stackalloc_initializer();
	partial void LeaveRule_stackalloc_initializer();

	// $ANTLR start "stackalloc_initializer"
	// cs.g:918:1: stackalloc_initializer : 'stackalloc' unmanaged_type '[' expression ']' ;
	[GrammarRule("stackalloc_initializer")]
	public XAstParserRuleReturnScope stackalloc_initializer()
	{
		EnterRule_stackalloc_initializer();
		EnterRule("stackalloc_initializer", 259);
		var retval = new XAstParserRuleReturnScope("stackalloc_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int stackalloc_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal933 = default(IToken);
		IToken char_literal935 = default(IToken);
		IToken char_literal937 = default(IToken);
		XAstParserRuleReturnScope unmanaged_type934 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression936 = default(XAstParserRuleReturnScope);

		object string_literal933_tree = default(object);
		object char_literal935_tree = default(object);
		object char_literal937_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "stackalloc_initializer");
		DebugLocation(918, 59);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 259)) { return retval; }

			// cs.g:918:23: ( 'stackalloc' unmanaged_type '[' expression ']' )
			DebugEnterAlt(1);
			// cs.g:919:5: 'stackalloc' unmanaged_type '[' expression ']'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(919, 5);
			string_literal933=(IToken)Match(input,175,Follow._175_in_stackalloc_initializer8773); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal933_tree = (object)adaptor.Create(string_literal933, retval);
			adaptor.AddChild(root_0, string_literal933_tree);
			}
			DebugLocation(919, 20);
			PushFollow(Follow._unmanaged_type_in_stackalloc_initializer8777);
			unmanaged_type934=unmanaged_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, unmanaged_type934.Tree, unmanaged_type934, retval);
			DebugLocation(919, 37);
			char_literal935=(IToken)Match(input,91,Follow._91_in_stackalloc_initializer8781); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal935_tree = (object)adaptor.Create(char_literal935, retval);
			adaptor.AddChild(root_0, char_literal935_tree);
			}
			DebugLocation(919, 43);
			PushFollow(Follow._expression_in_stackalloc_initializer8785);
			expression936=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression936.Tree, expression936, retval);
			DebugLocation(919, 56);
			char_literal937=(IToken)Match(input,92,Follow._92_in_stackalloc_initializer8789); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal937_tree = (object)adaptor.Create(char_literal937, retval);
			adaptor.AddChild(root_0, char_literal937_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stackalloc_initializer", 259);
			LeaveRule("stackalloc_initializer", 259);
			LeaveRule_stackalloc_initializer();
			if (state.backtracking > 0) { Memoize(input, 259, stackalloc_initializer_StartIndex); }

		}
		DebugLocation(919, 59);
		} finally { DebugExitRule(GrammarFileName, "stackalloc_initializer"); }
		return retval;

	}
	// $ANTLR end "stackalloc_initializer"

	partial void EnterRule_local_constant_declaration();
	partial void LeaveRule_local_constant_declaration();

	// $ANTLR start "local_constant_declaration"
	// cs.g:920:1: local_constant_declaration : 'const' type constant_declarators ;
	[GrammarRule("local_constant_declaration")]
	public XAstParserRuleReturnScope local_constant_declaration()
	{
		EnterRule_local_constant_declaration();
		EnterRule("local_constant_declaration", 260);
		var retval = new XAstParserRuleReturnScope("local_constant_declaration");
		
		retval.Start = (IToken)input.LT(1);
		int local_constant_declaration_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal938 = default(IToken);
		XAstParserRuleReturnScope type939 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_declarators940 = default(XAstParserRuleReturnScope);

		object string_literal938_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "local_constant_declaration");
		DebugLocation(920, 42);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 260)) { return retval; }

			// cs.g:920:27: ( 'const' type constant_declarators )
			DebugEnterAlt(1);
			// cs.g:921:5: 'const' type constant_declarators
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(921, 5);
			string_literal938=(IToken)Match(input,112,Follow._112_in_local_constant_declaration8800); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal938_tree = (object)adaptor.Create(string_literal938, retval);
			adaptor.AddChild(root_0, string_literal938_tree);
			}
			DebugLocation(921, 15);
			PushFollow(Follow._type_in_local_constant_declaration8804);
			type939=type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type939.Tree, type939, retval);
			DebugLocation(921, 22);
			PushFollow(Follow._constant_declarators_in_local_constant_declaration8808);
			constant_declarators940=constant_declarators();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, constant_declarators940.Tree, constant_declarators940, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("local_constant_declaration", 260);
			LeaveRule("local_constant_declaration", 260);
			LeaveRule_local_constant_declaration();
			if (state.backtracking > 0) { Memoize(input, 260, local_constant_declaration_StartIndex); }

		}
		DebugLocation(921, 42);
		} finally { DebugExitRule(GrammarFileName, "local_constant_declaration"); }
		return retval;

	}
	// $ANTLR end "local_constant_declaration"

	partial void EnterRule_expression_statement();
	partial void LeaveRule_expression_statement();

	// $ANTLR start "expression_statement"
	// cs.g:922:1: expression_statement : expression ';' ;
	[GrammarRule("expression_statement")]
	public XAstParserRuleReturnScope expression_statement()
	{
		EnterRule_expression_statement();
		EnterRule("expression_statement", 261);
		var retval = new XAstParserRuleReturnScope("expression_statement");
		
		retval.Start = (IToken)input.LT(1);
		int expression_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal942 = default(IToken);
		XAstParserRuleReturnScope expression941 = default(XAstParserRuleReturnScope);

		object char_literal942_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expression_statement");
		DebugLocation(922, 21);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 261)) { return retval; }

			// cs.g:922:21: ( expression ';' )
			DebugEnterAlt(1);
			// cs.g:923:5: expression ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(923, 5);
			PushFollow(Follow._expression_in_expression_statement8819);
			expression941=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression941.Tree, expression941, retval);
			DebugLocation(923, 18);
			char_literal942=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_expression_statement8823), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal942_tree = (object)adaptor.Create(char_literal942, retval);
			adaptor.AddChild(root_0, char_literal942_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_statement", 261);
			LeaveRule("expression_statement", 261);
			LeaveRule_expression_statement();
			if (state.backtracking > 0) { Memoize(input, 261, expression_statement_StartIndex); }

		}
		DebugLocation(923, 21);
		} finally { DebugExitRule(GrammarFileName, "expression_statement"); }
		return retval;

	}
	// $ANTLR end "expression_statement"

	partial void EnterRule_statement_expression();
	partial void LeaveRule_statement_expression();

	// $ANTLR start "statement_expression"
	// cs.g:926:1: statement_expression : expression ;
	[GrammarRule("statement_expression")]
	public XAstParserRuleReturnScope statement_expression()
	{
		EnterRule_statement_expression();
		EnterRule("statement_expression", 262);
		var retval = new XAstParserRuleReturnScope("statement_expression");
		
		retval.Start = (IToken)input.LT(1);
		int statement_expression_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope expression943 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "statement_expression");
		DebugLocation(926, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 262)) { return retval; }

			// cs.g:926:21: ( expression )
			DebugEnterAlt(1);
			// cs.g:927:5: expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(927, 5);
			PushFollow(Follow._expression_in_statement_expression8836);
			expression943=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression943.Tree, expression943, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement_expression", 262);
			LeaveRule("statement_expression", 262);
			LeaveRule_statement_expression();
			if (state.backtracking > 0) { Memoize(input, 262, statement_expression_StartIndex); }

		}
		DebugLocation(928, 4);
		} finally { DebugExitRule(GrammarFileName, "statement_expression"); }
		return retval;

	}
	// $ANTLR end "statement_expression"

	partial void EnterRule_selection_statement();
	partial void LeaveRule_selection_statement();

	// $ANTLR start "selection_statement"
	// cs.g:929:1: selection_statement : ( if_statement | switch_statement );
	[GrammarRule("selection_statement")]
	public XAstParserRuleReturnScope selection_statement()
	{
		EnterRule_selection_statement();
		EnterRule("selection_statement", 263);
		var retval = new XAstParserRuleReturnScope("selection_statement");
		
		retval.Start = (IToken)input.LT(1);
		int selection_statement_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope if_statement944 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope switch_statement945 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "selection_statement");
		DebugLocation(929, 23);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 263)) { return retval; }

			// cs.g:929:20: ( if_statement | switch_statement )
			int alt249=2;
			try { DebugEnterDecision(249, false);
			int LA249_0 = input.LA(1);

			if ((LA249_0==IF))
			{
				alt249 = 1;
			}
			else if ((LA249_0==179))
			{
				alt249 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 249, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(249); }
			switch (alt249)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:930:5: if_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(930, 5);
				PushFollow(Follow._if_statement_in_selection_statement8851);
				if_statement944=if_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, if_statement944.Tree, if_statement944, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:931:7: switch_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(931, 7);
				PushFollow(Follow._switch_statement_in_selection_statement8859);
				switch_statement945=switch_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, switch_statement945.Tree, switch_statement945, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selection_statement", 263);
			LeaveRule("selection_statement", 263);
			LeaveRule_selection_statement();
			if (state.backtracking > 0) { Memoize(input, 263, selection_statement_StartIndex); }

		}
		DebugLocation(931, 23);
		} finally { DebugExitRule(GrammarFileName, "selection_statement"); }
		return retval;

	}
	// $ANTLR end "selection_statement"

	partial void EnterRule_if_statement();
	partial void LeaveRule_if_statement();

	// $ANTLR start "if_statement"
	// cs.g:932:1: if_statement : 'if' '(' boolean_expression ')' embedded_statement ( ( 'else' )=> else_statement )? ;
	[GrammarRule("if_statement")]
	public XAstParserRuleReturnScope if_statement()
	{
		EnterRule_if_statement();
		EnterRule("if_statement", 264);
		var retval = new XAstParserRuleReturnScope("if_statement");
		
		retval.Start = (IToken)input.LT(1);
		int if_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal946 = default(IToken);
		IToken char_literal947 = default(IToken);
		IToken char_literal949 = default(IToken);
		XAstParserRuleReturnScope boolean_expression948 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope embedded_statement950 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope else_statement951 = default(XAstParserRuleReturnScope);

		object string_literal946_tree = default(object);
		object char_literal947_tree = default(object);
		object char_literal949_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "if_statement");
		DebugLocation(932, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 264)) { return retval; }

			// cs.g:932:13: ( 'if' '(' boolean_expression ')' embedded_statement ( ( 'else' )=> else_statement )? )
			DebugEnterAlt(1);
			// cs.g:934:5: 'if' '(' boolean_expression ')' embedded_statement ( ( 'else' )=> else_statement )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(934, 5);
			string_literal946=(IToken)new XToken((IToken)Match(input,IF,Follow._IF_in_if_statement8875), "IF"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal946_tree = (object)adaptor.Create(string_literal946, retval);
			adaptor.AddChild(root_0, string_literal946_tree);
			}
			DebugLocation(934, 12);
			char_literal947=(IToken)Match(input,68,Follow._68_in_if_statement8879); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal947_tree = (object)adaptor.Create(char_literal947, retval);
			adaptor.AddChild(root_0, char_literal947_tree);
			}
			DebugLocation(934, 18);
			PushFollow(Follow._boolean_expression_in_if_statement8883);
			boolean_expression948=boolean_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, boolean_expression948.Tree, boolean_expression948, retval);
			DebugLocation(934, 39);
			char_literal949=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_if_statement8887), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal949_tree = (object)adaptor.Create(char_literal949, retval);
			adaptor.AddChild(root_0, char_literal949_tree);
			}
			DebugLocation(934, 45);
			PushFollow(Follow._embedded_statement_in_if_statement8891);
			embedded_statement950=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement950.Tree, embedded_statement950, retval);
			DebugLocation(934, 64);
			// cs.g:934:64: ( ( 'else' )=> else_statement )?
			int alt250=2;
			try { DebugEnterSubRule(250);
			try { DebugEnterDecision(250, false);
			int LA250_0 = input.LA(1);

			if ((LA250_0==121))
			{
				int LA250_1 = input.LA(2);

				if ((EvaluatePredicate(synpred37_cs_fragment)))
				{
					alt250 = 1;
				}
			}
			} finally { DebugExitDecision(250); }
			switch (alt250)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:934:65: ( 'else' )=> else_statement
				{
				DebugLocation(934, 77);
				PushFollow(Follow._else_statement_in_if_statement8900);
				else_statement951=else_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, else_statement951.Tree, else_statement951, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(250); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("if_statement", 264);
			LeaveRule("if_statement", 264);
			LeaveRule_if_statement();
			if (state.backtracking > 0) { Memoize(input, 264, if_statement_StartIndex); }

		}
		DebugLocation(935, 4);
		} finally { DebugExitRule(GrammarFileName, "if_statement"); }
		return retval;

	}
	// $ANTLR end "if_statement"

	partial void EnterRule_else_statement();
	partial void LeaveRule_else_statement();

	// $ANTLR start "else_statement"
	// cs.g:936:1: else_statement : 'else' embedded_statement ;
	[GrammarRule("else_statement")]
	public XAstParserRuleReturnScope else_statement()
	{
		EnterRule_else_statement();
		EnterRule("else_statement", 265);
		var retval = new XAstParserRuleReturnScope("else_statement");
		
		retval.Start = (IToken)input.LT(1);
		int else_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal952 = default(IToken);
		XAstParserRuleReturnScope embedded_statement953 = default(XAstParserRuleReturnScope);

		object string_literal952_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "else_statement");
		DebugLocation(936, 32);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 265)) { return retval; }

			// cs.g:936:15: ( 'else' embedded_statement )
			DebugEnterAlt(1);
			// cs.g:937:5: 'else' embedded_statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(937, 5);
			string_literal952=(IToken)Match(input,121,Follow._121_in_else_statement8917); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal952_tree = (object)adaptor.Create(string_literal952, retval);
			adaptor.AddChild(root_0, string_literal952_tree);
			}
			DebugLocation(937, 14);
			PushFollow(Follow._embedded_statement_in_else_statement8921);
			embedded_statement953=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement953.Tree, embedded_statement953, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("else_statement", 265);
			LeaveRule("else_statement", 265);
			LeaveRule_else_statement();
			if (state.backtracking > 0) { Memoize(input, 265, else_statement_StartIndex); }

		}
		DebugLocation(937, 32);
		} finally { DebugExitRule(GrammarFileName, "else_statement"); }
		return retval;

	}
	// $ANTLR end "else_statement"

	partial void EnterRule_switch_statement();
	partial void LeaveRule_switch_statement();

	// $ANTLR start "switch_statement"
	// cs.g:938:1: switch_statement : 'switch' '(' expression ')' switch_block ;
	[GrammarRule("switch_statement")]
	public XAstParserRuleReturnScope switch_statement()
	{
		EnterRule_switch_statement();
		EnterRule("switch_statement", 266);
		var retval = new XAstParserRuleReturnScope("switch_statement");
		
		retval.Start = (IToken)input.LT(1);
		int switch_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal954 = default(IToken);
		IToken char_literal955 = default(IToken);
		IToken char_literal957 = default(IToken);
		XAstParserRuleReturnScope expression956 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope switch_block958 = default(XAstParserRuleReturnScope);

		object string_literal954_tree = default(object);
		object char_literal955_tree = default(object);
		object char_literal957_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "switch_statement");
		DebugLocation(938, 53);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 266)) { return retval; }

			// cs.g:938:17: ( 'switch' '(' expression ')' switch_block )
			DebugEnterAlt(1);
			// cs.g:939:5: 'switch' '(' expression ')' switch_block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(939, 5);
			string_literal954=(IToken)Match(input,179,Follow._179_in_switch_statement8932); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal954_tree = (object)adaptor.Create(string_literal954, retval);
			adaptor.AddChild(root_0, string_literal954_tree);
			}
			DebugLocation(939, 16);
			char_literal955=(IToken)Match(input,68,Follow._68_in_switch_statement8936); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal955_tree = (object)adaptor.Create(char_literal955, retval);
			adaptor.AddChild(root_0, char_literal955_tree);
			}
			DebugLocation(939, 22);
			PushFollow(Follow._expression_in_switch_statement8940);
			expression956=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression956.Tree, expression956, retval);
			DebugLocation(939, 35);
			char_literal957=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_switch_statement8944), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal957_tree = (object)adaptor.Create(char_literal957, retval);
			adaptor.AddChild(root_0, char_literal957_tree);
			}
			DebugLocation(939, 41);
			PushFollow(Follow._switch_block_in_switch_statement8948);
			switch_block958=switch_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, switch_block958.Tree, switch_block958, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_statement", 266);
			LeaveRule("switch_statement", 266);
			LeaveRule_switch_statement();
			if (state.backtracking > 0) { Memoize(input, 266, switch_statement_StartIndex); }

		}
		DebugLocation(939, 53);
		} finally { DebugExitRule(GrammarFileName, "switch_statement"); }
		return retval;

	}
	// $ANTLR end "switch_statement"

	partial void EnterRule_switch_block();
	partial void LeaveRule_switch_block();

	// $ANTLR start "switch_block"
	// cs.g:940:1: switch_block : '{' ( switch_sections )? '}' ;
	[GrammarRule("switch_block")]
	public XAstParserRuleReturnScope switch_block()
	{
		EnterRule_switch_block();
		EnterRule("switch_block", 267);
		var retval = new XAstParserRuleReturnScope("switch_block");
		
		retval.Start = (IToken)input.LT(1);
		int switch_block_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal959 = default(IToken);
		IToken char_literal961 = default(IToken);
		XAstParserRuleReturnScope switch_sections960 = default(XAstParserRuleReturnScope);

		object char_literal959_tree = default(object);
		object char_literal961_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "switch_block");
		DebugLocation(940, 33);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 267)) { return retval; }

			// cs.g:940:13: ( '{' ( switch_sections )? '}' )
			DebugEnterAlt(1);
			// cs.g:941:5: '{' ( switch_sections )? '}'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(941, 5);
			char_literal959=(IToken)Match(input,197,Follow._197_in_switch_block8959); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal959_tree = (object)adaptor.Create(char_literal959, retval);
			adaptor.AddChild(root_0, char_literal959_tree);
			}
			DebugLocation(941, 11);
			// cs.g:941:11: ( switch_sections )?
			int alt251=2;
			try { DebugEnterSubRule(251);
			try { DebugEnterDecision(251, false);
			int LA251_0 = input.LA(1);

			if ((LA251_0==107||LA251_0==115))
			{
				alt251 = 1;
			}
			} finally { DebugExitDecision(251); }
			switch (alt251)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:941:11: switch_sections
				{
				DebugLocation(941, 11);
				PushFollow(Follow._switch_sections_in_switch_block8963);
				switch_sections960=switch_sections();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, switch_sections960.Tree, switch_sections960, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(251); }

			DebugLocation(941, 30);
			char_literal961=(IToken)Match(input,201,Follow._201_in_switch_block8968); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal961_tree = (object)adaptor.Create(char_literal961, retval);
			adaptor.AddChild(root_0, char_literal961_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_block", 267);
			LeaveRule("switch_block", 267);
			LeaveRule_switch_block();
			if (state.backtracking > 0) { Memoize(input, 267, switch_block_StartIndex); }

		}
		DebugLocation(941, 33);
		} finally { DebugExitRule(GrammarFileName, "switch_block"); }
		return retval;

	}
	// $ANTLR end "switch_block"

	partial void EnterRule_switch_sections();
	partial void LeaveRule_switch_sections();

	// $ANTLR start "switch_sections"
	// cs.g:942:1: switch_sections : ( switch_section )+ ;
	[GrammarRule("switch_sections")]
	public XAstParserRuleReturnScope switch_sections()
	{
		EnterRule_switch_sections();
		EnterRule("switch_sections", 268);
		var retval = new XAstParserRuleReturnScope("switch_sections");
		
		retval.Start = (IToken)input.LT(1);
		int switch_sections_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope switch_section962 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "switch_sections");
		DebugLocation(942, 20);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 268)) { return retval; }

			// cs.g:942:16: ( ( switch_section )+ )
			DebugEnterAlt(1);
			// cs.g:943:5: ( switch_section )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(943, 5);
			// cs.g:943:5: ( switch_section )+
			int cnt252=0;
			try { DebugEnterSubRule(252);
			while (true)
			{
				int alt252=2;
				try { DebugEnterDecision(252, false);
				int LA252_0 = input.LA(1);

				if ((LA252_0==107||LA252_0==115))
				{
					alt252 = 1;
				}


				} finally { DebugExitDecision(252); }
				switch (alt252)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:943:5: switch_section
					{
					DebugLocation(943, 5);
					PushFollow(Follow._switch_section_in_switch_sections8979);
					switch_section962=switch_section();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, switch_section962.Tree, switch_section962, retval);

					}
					break;

				default:
					if (cnt252 >= 1)
						goto loop252;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee252 = new EarlyExitException( 252, input );
					DebugRecognitionException(eee252);
					throw eee252;
				}
				cnt252++;
			}
			loop252:
				;

			} finally { DebugExitSubRule(252); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_sections", 268);
			LeaveRule("switch_sections", 268);
			LeaveRule_switch_sections();
			if (state.backtracking > 0) { Memoize(input, 268, switch_sections_StartIndex); }

		}
		DebugLocation(943, 20);
		} finally { DebugExitRule(GrammarFileName, "switch_sections"); }
		return retval;

	}
	// $ANTLR end "switch_sections"

	partial void EnterRule_switch_section();
	partial void LeaveRule_switch_section();

	// $ANTLR start "switch_section"
	// cs.g:944:1: switch_section : switch_labels statement_list ;
	[GrammarRule("switch_section")]
	public XAstParserRuleReturnScope switch_section()
	{
		EnterRule_switch_section();
		EnterRule("switch_section", 269);
		var retval = new XAstParserRuleReturnScope("switch_section");
		
		retval.Start = (IToken)input.LT(1);
		int switch_section_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope switch_labels963 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement_list964 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "switch_section");
		DebugLocation(944, 35);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 269)) { return retval; }

			// cs.g:944:15: ( switch_labels statement_list )
			DebugEnterAlt(1);
			// cs.g:945:5: switch_labels statement_list
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(945, 5);
			PushFollow(Follow._switch_labels_in_switch_section8991);
			switch_labels963=switch_labels();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, switch_labels963.Tree, switch_labels963, retval);
			DebugLocation(945, 21);
			PushFollow(Follow._statement_list_in_switch_section8995);
			statement_list964=statement_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statement_list964.Tree, statement_list964, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_section", 269);
			LeaveRule("switch_section", 269);
			LeaveRule_switch_section();
			if (state.backtracking > 0) { Memoize(input, 269, switch_section_StartIndex); }

		}
		DebugLocation(945, 35);
		} finally { DebugExitRule(GrammarFileName, "switch_section"); }
		return retval;

	}
	// $ANTLR end "switch_section"

	partial void EnterRule_switch_labels();
	partial void LeaveRule_switch_labels();

	// $ANTLR start "switch_labels"
	// cs.g:946:1: switch_labels : ( switch_label )+ ;
	[GrammarRule("switch_labels")]
	public XAstParserRuleReturnScope switch_labels()
	{
		EnterRule_switch_labels();
		EnterRule("switch_labels", 270);
		var retval = new XAstParserRuleReturnScope("switch_labels");
		
		retval.Start = (IToken)input.LT(1);
		int switch_labels_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope switch_label965 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "switch_labels");
		DebugLocation(946, 18);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 270)) { return retval; }

			// cs.g:946:14: ( ( switch_label )+ )
			DebugEnterAlt(1);
			// cs.g:947:5: ( switch_label )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(947, 5);
			// cs.g:947:5: ( switch_label )+
			int cnt253=0;
			try { DebugEnterSubRule(253);
			while (true)
			{
				int alt253=2;
				try { DebugEnterDecision(253, false);
				int LA253_0 = input.LA(1);

				if ((LA253_0==115))
				{
					int LA253_2 = input.LA(2);

					if ((LA253_2==79))
					{
						alt253 = 1;
					}


				}
				else if ((LA253_0==107))
				{
					alt253 = 1;
				}


				} finally { DebugExitDecision(253); }
				switch (alt253)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:947:5: switch_label
					{
					DebugLocation(947, 5);
					PushFollow(Follow._switch_label_in_switch_labels9006);
					switch_label965=switch_label();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, switch_label965.Tree, switch_label965, retval);

					}
					break;

				default:
					if (cnt253 >= 1)
						goto loop253;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee253 = new EarlyExitException( 253, input );
					DebugRecognitionException(eee253);
					throw eee253;
				}
				cnt253++;
			}
			loop253:
				;

			} finally { DebugExitSubRule(253); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_labels", 270);
			LeaveRule("switch_labels", 270);
			LeaveRule_switch_labels();
			if (state.backtracking > 0) { Memoize(input, 270, switch_labels_StartIndex); }

		}
		DebugLocation(947, 18);
		} finally { DebugExitRule(GrammarFileName, "switch_labels"); }
		return retval;

	}
	// $ANTLR end "switch_labels"

	partial void EnterRule_switch_label();
	partial void LeaveRule_switch_label();

	// $ANTLR start "switch_label"
	// cs.g:948:1: switch_label : ( ( 'case' constant_expression ':' ) | ( 'default' ':' ) );
	[GrammarRule("switch_label")]
	public XAstParserRuleReturnScope switch_label()
	{
		EnterRule_switch_label();
		EnterRule("switch_label", 271);
		var retval = new XAstParserRuleReturnScope("switch_label");
		
		retval.Start = (IToken)input.LT(1);
		int switch_label_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal966 = default(IToken);
		IToken char_literal968 = default(IToken);
		IToken string_literal969 = default(IToken);
		IToken char_literal970 = default(IToken);
		XAstParserRuleReturnScope constant_expression967 = default(XAstParserRuleReturnScope);

		object string_literal966_tree = default(object);
		object char_literal968_tree = default(object);
		object string_literal969_tree = default(object);
		object char_literal970_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "switch_label");
		DebugLocation(948, 24);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 271)) { return retval; }

			// cs.g:948:13: ( ( 'case' constant_expression ':' ) | ( 'default' ':' ) )
			int alt254=2;
			try { DebugEnterDecision(254, false);
			int LA254_0 = input.LA(1);

			if ((LA254_0==107))
			{
				alt254 = 1;
			}
			else if ((LA254_0==115))
			{
				alt254 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 254, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(254); }
			switch (alt254)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:949:5: ( 'case' constant_expression ':' )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(949, 5);
				// cs.g:949:5: ( 'case' constant_expression ':' )
				DebugEnterAlt(1);
				// cs.g:949:6: 'case' constant_expression ':'
				{
				DebugLocation(949, 6);
				string_literal966=(IToken)Match(input,107,Follow._107_in_switch_label9019); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal966_tree = (object)adaptor.Create(string_literal966, retval);
				adaptor.AddChild(root_0, string_literal966_tree);
				}
				DebugLocation(949, 15);
				PushFollow(Follow._constant_expression_in_switch_label9023);
				constant_expression967=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression967.Tree, constant_expression967, retval);
				DebugLocation(949, 37);
				char_literal968=(IToken)Match(input,79,Follow._79_in_switch_label9027); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal968_tree = (object)adaptor.Create(char_literal968, retval);
				adaptor.AddChild(root_0, char_literal968_tree);
				}

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:950:7: ( 'default' ':' )
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(950, 7);
				// cs.g:950:7: ( 'default' ':' )
				DebugEnterAlt(1);
				// cs.g:950:8: 'default' ':'
				{
				DebugLocation(950, 8);
				string_literal969=(IToken)Match(input,115,Follow._115_in_switch_label9037); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal969_tree = (object)adaptor.Create(string_literal969, retval);
				adaptor.AddChild(root_0, string_literal969_tree);
				}
				DebugLocation(950, 20);
				char_literal970=(IToken)Match(input,79,Follow._79_in_switch_label9041); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal970_tree = (object)adaptor.Create(char_literal970, retval);
				adaptor.AddChild(root_0, char_literal970_tree);
				}

				}


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_label", 271);
			LeaveRule("switch_label", 271);
			LeaveRule_switch_label();
			if (state.backtracking > 0) { Memoize(input, 271, switch_label_StartIndex); }

		}
		DebugLocation(950, 24);
		} finally { DebugExitRule(GrammarFileName, "switch_label"); }
		return retval;

	}
	// $ANTLR end "switch_label"

	partial void EnterRule_iteration_statement();
	partial void LeaveRule_iteration_statement();

	// $ANTLR start "iteration_statement"
	// cs.g:951:1: iteration_statement : ( while_statement | do_statement | for_statement | foreach_statement );
	[GrammarRule("iteration_statement")]
	public XAstParserRuleReturnScope iteration_statement()
	{
		EnterRule_iteration_statement();
		EnterRule("iteration_statement", 272);
		var retval = new XAstParserRuleReturnScope("iteration_statement");
		
		retval.Start = (IToken)input.LT(1);
		int iteration_statement_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope while_statement971 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope do_statement972 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope for_statement973 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope foreach_statement974 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "iteration_statement");
		DebugLocation(951, 24);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 272)) { return retval; }

			// cs.g:951:20: ( while_statement | do_statement | for_statement | foreach_statement )
			int alt255=4;
			try { DebugEnterDecision(255, false);
			switch (input.LA(1))
			{
			case 195:
				{
				alt255 = 1;
				}
				break;
			case 118:
				{
				alt255 = 2;
				}
				break;
			case 130:
				{
				alt255 = 3;
				}
				break;
			case 131:
				{
				alt255 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 255, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(255); }
			switch (alt255)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:952:5: while_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(952, 5);
				PushFollow(Follow._while_statement_in_iteration_statement9053);
				while_statement971=while_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, while_statement971.Tree, while_statement971, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:953:7: do_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(953, 7);
				PushFollow(Follow._do_statement_in_iteration_statement9061);
				do_statement972=do_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, do_statement972.Tree, do_statement972, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:954:7: for_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(954, 7);
				PushFollow(Follow._for_statement_in_iteration_statement9069);
				for_statement973=for_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_statement973.Tree, for_statement973, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:955:7: foreach_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(955, 7);
				PushFollow(Follow._foreach_statement_in_iteration_statement9077);
				foreach_statement974=foreach_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, foreach_statement974.Tree, foreach_statement974, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("iteration_statement", 272);
			LeaveRule("iteration_statement", 272);
			LeaveRule_iteration_statement();
			if (state.backtracking > 0) { Memoize(input, 272, iteration_statement_StartIndex); }

		}
		DebugLocation(955, 24);
		} finally { DebugExitRule(GrammarFileName, "iteration_statement"); }
		return retval;

	}
	// $ANTLR end "iteration_statement"

	partial void EnterRule_while_statement();
	partial void LeaveRule_while_statement();

	// $ANTLR start "while_statement"
	// cs.g:956:1: while_statement : 'while' '(' boolean_expression ')' embedded_statement ;
	[GrammarRule("while_statement")]
	public XAstParserRuleReturnScope while_statement()
	{
		EnterRule_while_statement();
		EnterRule("while_statement", 273);
		var retval = new XAstParserRuleReturnScope("while_statement");
		
		retval.Start = (IToken)input.LT(1);
		int while_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal975 = default(IToken);
		IToken char_literal976 = default(IToken);
		IToken char_literal978 = default(IToken);
		XAstParserRuleReturnScope boolean_expression977 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope embedded_statement979 = default(XAstParserRuleReturnScope);

		object string_literal975_tree = default(object);
		object char_literal976_tree = default(object);
		object char_literal978_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "while_statement");
		DebugLocation(956, 66);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 273)) { return retval; }

			// cs.g:956:16: ( 'while' '(' boolean_expression ')' embedded_statement )
			DebugEnterAlt(1);
			// cs.g:957:5: 'while' '(' boolean_expression ')' embedded_statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(957, 5);
			string_literal975=(IToken)Match(input,195,Follow._195_in_while_statement9088); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal975_tree = (object)adaptor.Create(string_literal975, retval);
			adaptor.AddChild(root_0, string_literal975_tree);
			}
			DebugLocation(957, 15);
			char_literal976=(IToken)Match(input,68,Follow._68_in_while_statement9092); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal976_tree = (object)adaptor.Create(char_literal976, retval);
			adaptor.AddChild(root_0, char_literal976_tree);
			}
			DebugLocation(957, 21);
			PushFollow(Follow._boolean_expression_in_while_statement9096);
			boolean_expression977=boolean_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, boolean_expression977.Tree, boolean_expression977, retval);
			DebugLocation(957, 42);
			char_literal978=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_while_statement9100), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal978_tree = (object)adaptor.Create(char_literal978, retval);
			adaptor.AddChild(root_0, char_literal978_tree);
			}
			DebugLocation(957, 48);
			PushFollow(Follow._embedded_statement_in_while_statement9104);
			embedded_statement979=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement979.Tree, embedded_statement979, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("while_statement", 273);
			LeaveRule("while_statement", 273);
			LeaveRule_while_statement();
			if (state.backtracking > 0) { Memoize(input, 273, while_statement_StartIndex); }

		}
		DebugLocation(957, 66);
		} finally { DebugExitRule(GrammarFileName, "while_statement"); }
		return retval;

	}
	// $ANTLR end "while_statement"

	partial void EnterRule_do_statement();
	partial void LeaveRule_do_statement();

	// $ANTLR start "do_statement"
	// cs.g:958:1: do_statement : 'do' embedded_statement 'while' '(' boolean_expression ')' ';' ;
	[GrammarRule("do_statement")]
	public XAstParserRuleReturnScope do_statement()
	{
		EnterRule_do_statement();
		EnterRule("do_statement", 274);
		var retval = new XAstParserRuleReturnScope("do_statement");
		
		retval.Start = (IToken)input.LT(1);
		int do_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal980 = default(IToken);
		IToken string_literal982 = default(IToken);
		IToken char_literal983 = default(IToken);
		IToken char_literal985 = default(IToken);
		IToken char_literal986 = default(IToken);
		XAstParserRuleReturnScope embedded_statement981 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope boolean_expression984 = default(XAstParserRuleReturnScope);

		object string_literal980_tree = default(object);
		object string_literal982_tree = default(object);
		object char_literal983_tree = default(object);
		object char_literal985_tree = default(object);
		object char_literal986_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "do_statement");
		DebugLocation(958, 79);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 274)) { return retval; }

			// cs.g:958:13: ( 'do' embedded_statement 'while' '(' boolean_expression ')' ';' )
			DebugEnterAlt(1);
			// cs.g:959:5: 'do' embedded_statement 'while' '(' boolean_expression ')' ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(959, 5);
			string_literal980=(IToken)Match(input,118,Follow._118_in_do_statement9115); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal980_tree = (object)adaptor.Create(string_literal980, retval);
			adaptor.AddChild(root_0, string_literal980_tree);
			}
			DebugLocation(959, 12);
			PushFollow(Follow._embedded_statement_in_do_statement9119);
			embedded_statement981=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement981.Tree, embedded_statement981, retval);
			DebugLocation(959, 33);
			string_literal982=(IToken)Match(input,195,Follow._195_in_do_statement9123); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal982_tree = (object)adaptor.Create(string_literal982, retval);
			adaptor.AddChild(root_0, string_literal982_tree);
			}
			DebugLocation(959, 43);
			char_literal983=(IToken)Match(input,68,Follow._68_in_do_statement9127); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal983_tree = (object)adaptor.Create(char_literal983, retval);
			adaptor.AddChild(root_0, char_literal983_tree);
			}
			DebugLocation(959, 49);
			PushFollow(Follow._boolean_expression_in_do_statement9131);
			boolean_expression984=boolean_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, boolean_expression984.Tree, boolean_expression984, retval);
			DebugLocation(959, 70);
			char_literal985=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_do_statement9135), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal985_tree = (object)adaptor.Create(char_literal985, retval);
			adaptor.AddChild(root_0, char_literal985_tree);
			}
			DebugLocation(959, 76);
			char_literal986=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_do_statement9139), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal986_tree = (object)adaptor.Create(char_literal986, retval);
			adaptor.AddChild(root_0, char_literal986_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("do_statement", 274);
			LeaveRule("do_statement", 274);
			LeaveRule_do_statement();
			if (state.backtracking > 0) { Memoize(input, 274, do_statement_StartIndex); }

		}
		DebugLocation(959, 79);
		} finally { DebugExitRule(GrammarFileName, "do_statement"); }
		return retval;

	}
	// $ANTLR end "do_statement"

	partial void EnterRule_for_statement();
	partial void LeaveRule_for_statement();

	// $ANTLR start "for_statement"
	// cs.g:960:1: for_statement : 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement ;
	[GrammarRule("for_statement")]
	public XAstParserRuleReturnScope for_statement()
	{
		EnterRule_for_statement();
		EnterRule("for_statement", 275);
		var retval = new XAstParserRuleReturnScope("for_statement");
		
		retval.Start = (IToken)input.LT(1);
		int for_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal987 = default(IToken);
		IToken char_literal988 = default(IToken);
		IToken char_literal990 = default(IToken);
		IToken char_literal992 = default(IToken);
		IToken char_literal994 = default(IToken);
		XAstParserRuleReturnScope for_initializer989 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope for_condition991 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope for_iterator993 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope embedded_statement995 = default(XAstParserRuleReturnScope);

		object string_literal987_tree = default(object);
		object char_literal988_tree = default(object);
		object char_literal990_tree = default(object);
		object char_literal992_tree = default(object);
		object char_literal994_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "for_statement");
		DebugLocation(960, 107);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 275)) { return retval; }

			// cs.g:960:14: ( 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement )
			DebugEnterAlt(1);
			// cs.g:961:5: 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(961, 5);
			string_literal987=(IToken)Match(input,130,Follow._130_in_for_statement9150); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal987_tree = (object)adaptor.Create(string_literal987, retval);
			adaptor.AddChild(root_0, string_literal987_tree);
			}
			DebugLocation(961, 13);
			char_literal988=(IToken)Match(input,68,Follow._68_in_for_statement9154); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal988_tree = (object)adaptor.Create(char_literal988, retval);
			adaptor.AddChild(root_0, char_literal988_tree);
			}
			DebugLocation(961, 19);
			// cs.g:961:19: ( for_initializer )?
			int alt256=2;
			try { DebugEnterSubRule(256);
			try { DebugEnterDecision(256, false);
			int LA256_0 = input.LA(1);

			if ((LA256_0==Character_literal||LA256_0==FALSE||(LA256_0>=Hex_number && LA256_0<=IDENTIFIER)||(LA256_0>=MINUS && LA256_0<=NUMBER)||LA256_0==Real_literal||LA256_0==STRINGLITERAL||LA256_0==TRUE||LA256_0==Verbatim_string_literal||LA256_0==61||LA256_0==66||(LA256_0>=68 && LA256_0<=69)||(LA256_0>=71 && LA256_0<=72)||LA256_0==75||LA256_0==95||(LA256_0>=97 && LA256_0<=98)||(LA256_0>=100 && LA256_0<=103)||(LA256_0>=105 && LA256_0<=106)||(LA256_0>=109 && LA256_0<=110)||(LA256_0>=114 && LA256_0<=117)||(LA256_0>=119 && LA256_0<=120)||LA256_0==122||LA256_0==126||LA256_0==129||LA256_0==132||LA256_0==135||LA256_0==138||LA256_0==141||(LA256_0>=143 && LA256_0<=144)||(LA256_0>=146 && LA256_0<=148)||(LA256_0>=150 && LA256_0<=152)||LA256_0==154||LA256_0==157||LA256_0==160||LA256_0==162||LA256_0==167||LA256_0==169||(LA256_0>=171 && LA256_0<=174)||LA256_0==177||LA256_0==180||(LA256_0>=183 && LA256_0<=187)||(LA256_0>=189 && LA256_0<=190)||LA256_0==192||LA256_0==194||LA256_0==196||LA256_0==202))
			{
				alt256 = 1;
			}
			} finally { DebugExitDecision(256); }
			switch (alt256)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:961:19: for_initializer
				{
				DebugLocation(961, 19);
				PushFollow(Follow._for_initializer_in_for_statement9158);
				for_initializer989=for_initializer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_initializer989.Tree, for_initializer989, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(256); }

			DebugLocation(961, 38);
			char_literal990=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_for_statement9163), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal990_tree = (object)adaptor.Create(char_literal990, retval);
			adaptor.AddChild(root_0, char_literal990_tree);
			}
			DebugLocation(961, 44);
			// cs.g:961:44: ( for_condition )?
			int alt257=2;
			try { DebugEnterSubRule(257);
			try { DebugEnterDecision(257, false);
			int LA257_0 = input.LA(1);

			if ((LA257_0==Character_literal||LA257_0==FALSE||(LA257_0>=Hex_number && LA257_0<=IDENTIFIER)||(LA257_0>=MINUS && LA257_0<=NUMBER)||LA257_0==Real_literal||LA257_0==STRINGLITERAL||LA257_0==TRUE||LA257_0==Verbatim_string_literal||LA257_0==61||LA257_0==66||(LA257_0>=68 && LA257_0<=69)||(LA257_0>=71 && LA257_0<=72)||LA257_0==75||LA257_0==95||(LA257_0>=97 && LA257_0<=98)||(LA257_0>=100 && LA257_0<=103)||(LA257_0>=105 && LA257_0<=106)||(LA257_0>=109 && LA257_0<=110)||(LA257_0>=114 && LA257_0<=117)||(LA257_0>=119 && LA257_0<=120)||LA257_0==122||LA257_0==126||LA257_0==129||LA257_0==132||LA257_0==135||LA257_0==138||LA257_0==141||(LA257_0>=143 && LA257_0<=144)||(LA257_0>=146 && LA257_0<=148)||(LA257_0>=150 && LA257_0<=152)||LA257_0==154||LA257_0==157||LA257_0==160||LA257_0==162||LA257_0==167||LA257_0==169||(LA257_0>=171 && LA257_0<=174)||LA257_0==177||LA257_0==180||(LA257_0>=183 && LA257_0<=187)||(LA257_0>=189 && LA257_0<=190)||LA257_0==194||LA257_0==196||LA257_0==202))
			{
				alt257 = 1;
			}
			} finally { DebugExitDecision(257); }
			switch (alt257)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:961:44: for_condition
				{
				DebugLocation(961, 44);
				PushFollow(Follow._for_condition_in_for_statement9167);
				for_condition991=for_condition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_condition991.Tree, for_condition991, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(257); }

			DebugLocation(961, 61);
			char_literal992=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_for_statement9172), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal992_tree = (object)adaptor.Create(char_literal992, retval);
			adaptor.AddChild(root_0, char_literal992_tree);
			}
			DebugLocation(961, 67);
			// cs.g:961:67: ( for_iterator )?
			int alt258=2;
			try { DebugEnterSubRule(258);
			try { DebugEnterDecision(258, false);
			int LA258_0 = input.LA(1);

			if ((LA258_0==Character_literal||LA258_0==FALSE||(LA258_0>=Hex_number && LA258_0<=IDENTIFIER)||(LA258_0>=MINUS && LA258_0<=NUMBER)||LA258_0==Real_literal||LA258_0==STRINGLITERAL||LA258_0==TRUE||LA258_0==Verbatim_string_literal||LA258_0==61||LA258_0==66||(LA258_0>=68 && LA258_0<=69)||(LA258_0>=71 && LA258_0<=72)||LA258_0==75||LA258_0==95||(LA258_0>=97 && LA258_0<=98)||(LA258_0>=100 && LA258_0<=103)||(LA258_0>=105 && LA258_0<=106)||(LA258_0>=109 && LA258_0<=110)||(LA258_0>=114 && LA258_0<=117)||(LA258_0>=119 && LA258_0<=120)||LA258_0==122||LA258_0==126||LA258_0==129||LA258_0==132||LA258_0==135||LA258_0==138||LA258_0==141||(LA258_0>=143 && LA258_0<=144)||(LA258_0>=146 && LA258_0<=148)||(LA258_0>=150 && LA258_0<=152)||LA258_0==154||LA258_0==157||LA258_0==160||LA258_0==162||LA258_0==167||LA258_0==169||(LA258_0>=171 && LA258_0<=174)||LA258_0==177||LA258_0==180||(LA258_0>=183 && LA258_0<=187)||(LA258_0>=189 && LA258_0<=190)||LA258_0==194||LA258_0==196||LA258_0==202))
			{
				alt258 = 1;
			}
			} finally { DebugExitDecision(258); }
			switch (alt258)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:961:67: for_iterator
				{
				DebugLocation(961, 67);
				PushFollow(Follow._for_iterator_in_for_statement9176);
				for_iterator993=for_iterator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_iterator993.Tree, for_iterator993, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(258); }

			DebugLocation(961, 83);
			char_literal994=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_for_statement9181), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal994_tree = (object)adaptor.Create(char_literal994, retval);
			adaptor.AddChild(root_0, char_literal994_tree);
			}
			DebugLocation(961, 89);
			PushFollow(Follow._embedded_statement_in_for_statement9185);
			embedded_statement995=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement995.Tree, embedded_statement995, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_statement", 275);
			LeaveRule("for_statement", 275);
			LeaveRule_for_statement();
			if (state.backtracking > 0) { Memoize(input, 275, for_statement_StartIndex); }

		}
		DebugLocation(961, 107);
		} finally { DebugExitRule(GrammarFileName, "for_statement"); }
		return retval;

	}
	// $ANTLR end "for_statement"

	partial void EnterRule_for_initializer();
	partial void LeaveRule_for_initializer();

	// $ANTLR start "for_initializer"
	// cs.g:962:1: for_initializer : ( ( local_variable_declaration )=> local_variable_declaration | statement_expression_list );
	[GrammarRule("for_initializer")]
	public XAstParserRuleReturnScope for_initializer()
	{
		EnterRule_for_initializer();
		EnterRule("for_initializer", 276);
		var retval = new XAstParserRuleReturnScope("for_initializer");
		
		retval.Start = (IToken)input.LT(1);
		int for_initializer_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope local_variable_declaration996 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement_expression_list997 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "for_initializer");
		DebugLocation(962, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 276)) { return retval; }

			// cs.g:962:16: ( ( local_variable_declaration )=> local_variable_declaration | statement_expression_list )
			int alt259=2;
			try { DebugEnterDecision(259, false);
			int LA259_0 = input.LA(1);

			if ((LA259_0==190))
			{
				int LA259_1 = input.LA(2);

				if ((EvaluatePredicate(synpred38_cs_fragment)))
				{
					alt259 = 1;
				}
				else if ((true))
				{
					alt259 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 259, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA259_0==120))
			{
				int LA259_2 = input.LA(2);

				if ((EvaluatePredicate(synpred38_cs_fragment)))
				{
					alt259 = 1;
				}
				else if ((true))
				{
					alt259 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 259, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA259_0==103||LA259_0==106||LA259_0==109||LA259_0==114||LA259_0==119||LA259_0==129||LA259_0==138||LA259_0==146||LA259_0==151||LA259_0==169||LA259_0==173||LA259_0==177||(LA259_0>=185 && LA259_0<=186)||LA259_0==189))
			{
				int LA259_3 = input.LA(2);

				if ((EvaluatePredicate(synpred38_cs_fragment)))
				{
					alt259 = 1;
				}
				else if ((true))
				{
					alt259 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 259, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA259_0==132))
			{
				int LA259_4 = input.LA(2);

				if ((EvaluatePredicate(synpred38_cs_fragment)))
				{
					alt259 = 1;
				}
				else if ((true))
				{
					alt259 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 259, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA259_0==192) && (EvaluatePredicate(synpred38_cs_fragment)))
			{
				alt259 = 1;
			}
			else if ((LA259_0==Character_literal||LA259_0==FALSE||LA259_0==Hex_number||(LA259_0>=MINUS && LA259_0<=NUMBER)||LA259_0==Real_literal||LA259_0==STRINGLITERAL||LA259_0==TRUE||LA259_0==Verbatim_string_literal||LA259_0==61||LA259_0==66||(LA259_0>=68 && LA259_0<=69)||(LA259_0>=71 && LA259_0<=72)||LA259_0==75||LA259_0==102||LA259_0==110||(LA259_0>=115 && LA259_0<=116)||LA259_0==150||LA259_0==174||LA259_0==180||LA259_0==184||LA259_0==187||LA259_0==202))
			{
				alt259 = 2;
			}
			else if ((LA259_0==IDENTIFIER||LA259_0==95||(LA259_0>=97 && LA259_0<=98)||(LA259_0>=100 && LA259_0<=101)||LA259_0==105||LA259_0==117||LA259_0==122||LA259_0==126||LA259_0==135||LA259_0==141||(LA259_0>=143 && LA259_0<=144)||(LA259_0>=147 && LA259_0<=148)||LA259_0==152||LA259_0==154||LA259_0==157||LA259_0==160||LA259_0==162||LA259_0==167||(LA259_0>=171 && LA259_0<=172)||LA259_0==183||LA259_0==194||LA259_0==196))
			{
				int LA259_25 = input.LA(2);

				if ((EvaluatePredicate(synpred38_cs_fragment)))
				{
					alt259 = 1;
				}
				else if ((true))
				{
					alt259 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 259, 25, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 259, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(259); }
			switch (alt259)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:963:5: ( local_variable_declaration )=> local_variable_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(963, 37);
				PushFollow(Follow._local_variable_declaration_in_for_initializer9202);
				local_variable_declaration996=local_variable_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_declaration996.Tree, local_variable_declaration996, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:964:7: statement_expression_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(964, 7);
				PushFollow(Follow._statement_expression_list_in_for_initializer9210);
				statement_expression_list997=statement_expression_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, statement_expression_list997.Tree, statement_expression_list997, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_initializer", 276);
			LeaveRule("for_initializer", 276);
			LeaveRule_for_initializer();
			if (state.backtracking > 0) { Memoize(input, 276, for_initializer_StartIndex); }

		}
		DebugLocation(965, 4);
		} finally { DebugExitRule(GrammarFileName, "for_initializer"); }
		return retval;

	}
	// $ANTLR end "for_initializer"

	partial void EnterRule_for_condition();
	partial void LeaveRule_for_condition();

	// $ANTLR start "for_condition"
	// cs.g:966:1: for_condition : boolean_expression ;
	[GrammarRule("for_condition")]
	public XAstParserRuleReturnScope for_condition()
	{
		EnterRule_for_condition();
		EnterRule("for_condition", 277);
		var retval = new XAstParserRuleReturnScope("for_condition");
		
		retval.Start = (IToken)input.LT(1);
		int for_condition_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope boolean_expression998 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "for_condition");
		DebugLocation(966, 23);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 277)) { return retval; }

			// cs.g:966:14: ( boolean_expression )
			DebugEnterAlt(1);
			// cs.g:967:5: boolean_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(967, 5);
			PushFollow(Follow._boolean_expression_in_for_condition9226);
			boolean_expression998=boolean_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, boolean_expression998.Tree, boolean_expression998, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_condition", 277);
			LeaveRule("for_condition", 277);
			LeaveRule_for_condition();
			if (state.backtracking > 0) { Memoize(input, 277, for_condition_StartIndex); }

		}
		DebugLocation(967, 23);
		} finally { DebugExitRule(GrammarFileName, "for_condition"); }
		return retval;

	}
	// $ANTLR end "for_condition"

	partial void EnterRule_for_iterator();
	partial void LeaveRule_for_iterator();

	// $ANTLR start "for_iterator"
	// cs.g:968:1: for_iterator : statement_expression_list ;
	[GrammarRule("for_iterator")]
	public XAstParserRuleReturnScope for_iterator()
	{
		EnterRule_for_iterator();
		EnterRule("for_iterator", 278);
		var retval = new XAstParserRuleReturnScope("for_iterator");
		
		retval.Start = (IToken)input.LT(1);
		int for_iterator_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope statement_expression_list999 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "for_iterator");
		DebugLocation(968, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 278)) { return retval; }

			// cs.g:968:13: ( statement_expression_list )
			DebugEnterAlt(1);
			// cs.g:969:5: statement_expression_list
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(969, 5);
			PushFollow(Follow._statement_expression_list_in_for_iterator9237);
			statement_expression_list999=statement_expression_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statement_expression_list999.Tree, statement_expression_list999, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_iterator", 278);
			LeaveRule("for_iterator", 278);
			LeaveRule_for_iterator();
			if (state.backtracking > 0) { Memoize(input, 278, for_iterator_StartIndex); }

		}
		DebugLocation(969, 30);
		} finally { DebugExitRule(GrammarFileName, "for_iterator"); }
		return retval;

	}
	// $ANTLR end "for_iterator"

	partial void EnterRule_statement_expression_list();
	partial void LeaveRule_statement_expression_list();

	// $ANTLR start "statement_expression_list"
	// cs.g:970:1: statement_expression_list : statement_expression ( ',' statement_expression )* ;
	[GrammarRule("statement_expression_list")]
	public XAstParserRuleReturnScope statement_expression_list()
	{
		EnterRule_statement_expression_list();
		EnterRule("statement_expression_list", 279);
		var retval = new XAstParserRuleReturnScope("statement_expression_list");
		
		retval.Start = (IToken)input.LT(1);
		int statement_expression_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal1001 = default(IToken);
		XAstParserRuleReturnScope statement_expression1000 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope statement_expression1002 = default(XAstParserRuleReturnScope);

		object char_literal1001_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "statement_expression_list");
		DebugLocation(970, 53);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 279)) { return retval; }

			// cs.g:970:26: ( statement_expression ( ',' statement_expression )* )
			DebugEnterAlt(1);
			// cs.g:971:5: statement_expression ( ',' statement_expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(971, 5);
			PushFollow(Follow._statement_expression_in_statement_expression_list9248);
			statement_expression1000=statement_expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, statement_expression1000.Tree, statement_expression1000, retval);
			DebugLocation(971, 26);
			// cs.g:971:26: ( ',' statement_expression )*
			try { DebugEnterSubRule(260);
			while (true)
			{
				int alt260=2;
				try { DebugEnterDecision(260, false);
				int LA260_0 = input.LA(1);

				if ((LA260_0==74))
				{
					alt260 = 1;
				}


				} finally { DebugExitDecision(260); }
				switch ( alt260 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:971:27: ',' statement_expression
					{
					DebugLocation(971, 27);
					char_literal1001=(IToken)Match(input,74,Follow._74_in_statement_expression_list9251); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1001_tree = (object)adaptor.Create(char_literal1001, retval);
					adaptor.AddChild(root_0, char_literal1001_tree);
					}
					DebugLocation(971, 31);
					PushFollow(Follow._statement_expression_in_statement_expression_list9253);
					statement_expression1002=statement_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, statement_expression1002.Tree, statement_expression1002, retval);

					}
					break;

				default:
					goto loop260;
				}
			}

			loop260:
				;

			} finally { DebugExitSubRule(260); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("statement_expression_list", 279);
			LeaveRule("statement_expression_list", 279);
			LeaveRule_statement_expression_list();
			if (state.backtracking > 0) { Memoize(input, 279, statement_expression_list_StartIndex); }

		}
		DebugLocation(971, 53);
		} finally { DebugExitRule(GrammarFileName, "statement_expression_list"); }
		return retval;

	}
	// $ANTLR end "statement_expression_list"

	partial void EnterRule_foreach_statement();
	partial void LeaveRule_foreach_statement();

	// $ANTLR start "foreach_statement"
	// cs.g:972:1: foreach_statement : 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement ;
	[GrammarRule("foreach_statement")]
	public XAstParserRuleReturnScope foreach_statement()
	{
		EnterRule_foreach_statement();
		EnterRule("foreach_statement", 280);
		var retval = new XAstParserRuleReturnScope("foreach_statement");
		
		retval.Start = (IToken)input.LT(1);
		int foreach_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1003 = default(IToken);
		IToken char_literal1004 = default(IToken);
		IToken string_literal1007 = default(IToken);
		IToken char_literal1009 = default(IToken);
		XAstParserRuleReturnScope local_variable_type1005 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier1006 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression1008 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope embedded_statement1010 = default(XAstParserRuleReturnScope);

		object string_literal1003_tree = default(object);
		object char_literal1004_tree = default(object);
		object string_literal1007_tree = default(object);
		object char_literal1009_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "foreach_statement");
		DebugLocation(972, 102);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 280)) { return retval; }

			// cs.g:972:18: ( 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement )
			DebugEnterAlt(1);
			// cs.g:973:5: 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(973, 5);
			string_literal1003=(IToken)Match(input,131,Follow._131_in_foreach_statement9266); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1003_tree = (object)adaptor.Create(string_literal1003, retval);
			adaptor.AddChild(root_0, string_literal1003_tree);
			}
			DebugLocation(973, 17);
			char_literal1004=(IToken)Match(input,68,Follow._68_in_foreach_statement9270); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1004_tree = (object)adaptor.Create(char_literal1004, retval);
			adaptor.AddChild(root_0, char_literal1004_tree);
			}
			DebugLocation(973, 23);
			PushFollow(Follow._local_variable_type_in_foreach_statement9274);
			local_variable_type1005=local_variable_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_type1005.Tree, local_variable_type1005, retval);
			DebugLocation(973, 45);
			PushFollow(Follow._identifier_in_foreach_statement9278);
			identifier1006=identifier();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, identifier1006.Tree, identifier1006, retval);
			DebugLocation(973, 58);
			string_literal1007=(IToken)Match(input,137,Follow._137_in_foreach_statement9282); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1007_tree = (object)adaptor.Create(string_literal1007, retval);
			adaptor.AddChild(root_0, string_literal1007_tree);
			}
			DebugLocation(973, 65);
			PushFollow(Follow._expression_in_foreach_statement9286);
			expression1008=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression1008.Tree, expression1008, retval);
			DebugLocation(973, 78);
			char_literal1009=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_foreach_statement9290), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1009_tree = (object)adaptor.Create(char_literal1009, retval);
			adaptor.AddChild(root_0, char_literal1009_tree);
			}
			DebugLocation(973, 84);
			PushFollow(Follow._embedded_statement_in_foreach_statement9294);
			embedded_statement1010=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement1010.Tree, embedded_statement1010, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("foreach_statement", 280);
			LeaveRule("foreach_statement", 280);
			LeaveRule_foreach_statement();
			if (state.backtracking > 0) { Memoize(input, 280, foreach_statement_StartIndex); }

		}
		DebugLocation(973, 102);
		} finally { DebugExitRule(GrammarFileName, "foreach_statement"); }
		return retval;

	}
	// $ANTLR end "foreach_statement"

	partial void EnterRule_jump_statement();
	partial void LeaveRule_jump_statement();

	// $ANTLR start "jump_statement"
	// cs.g:974:1: jump_statement : ( break_statement | continue_statement | goto_statement | return_statement | throw_statement );
	[GrammarRule("jump_statement")]
	public XAstParserRuleReturnScope jump_statement()
	{
		EnterRule_jump_statement();
		EnterRule("jump_statement", 281);
		var retval = new XAstParserRuleReturnScope("jump_statement");
		
		retval.Start = (IToken)input.LT(1);
		int jump_statement_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope break_statement1011 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope continue_statement1012 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope goto_statement1013 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope return_statement1014 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope throw_statement1015 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "jump_statement");
		DebugLocation(974, 22);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 281)) { return retval; }

			// cs.g:974:15: ( break_statement | continue_statement | goto_statement | return_statement | throw_statement )
			int alt261=5;
			try { DebugEnterDecision(261, false);
			switch (input.LA(1))
			{
			case 104:
				{
				alt261 = 1;
				}
				break;
			case 113:
				{
				alt261 = 2;
				}
				break;
			case 134:
				{
				alt261 = 3;
				}
				break;
			case 168:
				{
				alt261 = 4;
				}
				break;
			case 181:
				{
				alt261 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 261, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(261); }
			switch (alt261)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:975:5: break_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(975, 5);
				PushFollow(Follow._break_statement_in_jump_statement9305);
				break_statement1011=break_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, break_statement1011.Tree, break_statement1011, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:976:7: continue_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(976, 7);
				PushFollow(Follow._continue_statement_in_jump_statement9313);
				continue_statement1012=continue_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, continue_statement1012.Tree, continue_statement1012, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:977:7: goto_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(977, 7);
				PushFollow(Follow._goto_statement_in_jump_statement9321);
				goto_statement1013=goto_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, goto_statement1013.Tree, goto_statement1013, retval);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// cs.g:978:7: return_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(978, 7);
				PushFollow(Follow._return_statement_in_jump_statement9329);
				return_statement1014=return_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, return_statement1014.Tree, return_statement1014, retval);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// cs.g:979:7: throw_statement
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(979, 7);
				PushFollow(Follow._throw_statement_in_jump_statement9337);
				throw_statement1015=throw_statement();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, throw_statement1015.Tree, throw_statement1015, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("jump_statement", 281);
			LeaveRule("jump_statement", 281);
			LeaveRule_jump_statement();
			if (state.backtracking > 0) { Memoize(input, 281, jump_statement_StartIndex); }

		}
		DebugLocation(979, 22);
		} finally { DebugExitRule(GrammarFileName, "jump_statement"); }
		return retval;

	}
	// $ANTLR end "jump_statement"

	partial void EnterRule_break_statement();
	partial void LeaveRule_break_statement();

	// $ANTLR start "break_statement"
	// cs.g:980:1: break_statement : 'break' ';' ;
	[GrammarRule("break_statement")]
	public XAstParserRuleReturnScope break_statement()
	{
		EnterRule_break_statement();
		EnterRule("break_statement", 282);
		var retval = new XAstParserRuleReturnScope("break_statement");
		
		retval.Start = (IToken)input.LT(1);
		int break_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1016 = default(IToken);
		IToken char_literal1017 = default(IToken);

		object string_literal1016_tree = default(object);
		object char_literal1017_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "break_statement");
		DebugLocation(980, 18);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 282)) { return retval; }

			// cs.g:980:16: ( 'break' ';' )
			DebugEnterAlt(1);
			// cs.g:981:5: 'break' ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(981, 5);
			string_literal1016=(IToken)Match(input,104,Follow._104_in_break_statement9348); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1016_tree = (object)adaptor.Create(string_literal1016, retval);
			adaptor.AddChild(root_0, string_literal1016_tree);
			}
			DebugLocation(981, 15);
			char_literal1017=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_break_statement9352), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1017_tree = (object)adaptor.Create(char_literal1017, retval);
			adaptor.AddChild(root_0, char_literal1017_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("break_statement", 282);
			LeaveRule("break_statement", 282);
			LeaveRule_break_statement();
			if (state.backtracking > 0) { Memoize(input, 282, break_statement_StartIndex); }

		}
		DebugLocation(981, 18);
		} finally { DebugExitRule(GrammarFileName, "break_statement"); }
		return retval;

	}
	// $ANTLR end "break_statement"

	partial void EnterRule_continue_statement();
	partial void LeaveRule_continue_statement();

	// $ANTLR start "continue_statement"
	// cs.g:982:1: continue_statement : 'continue' ';' ;
	[GrammarRule("continue_statement")]
	public XAstParserRuleReturnScope continue_statement()
	{
		EnterRule_continue_statement();
		EnterRule("continue_statement", 283);
		var retval = new XAstParserRuleReturnScope("continue_statement");
		
		retval.Start = (IToken)input.LT(1);
		int continue_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1018 = default(IToken);
		IToken char_literal1019 = default(IToken);

		object string_literal1018_tree = default(object);
		object char_literal1019_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "continue_statement");
		DebugLocation(982, 21);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 283)) { return retval; }

			// cs.g:982:19: ( 'continue' ';' )
			DebugEnterAlt(1);
			// cs.g:983:5: 'continue' ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(983, 5);
			string_literal1018=(IToken)Match(input,113,Follow._113_in_continue_statement9363); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1018_tree = (object)adaptor.Create(string_literal1018, retval);
			adaptor.AddChild(root_0, string_literal1018_tree);
			}
			DebugLocation(983, 18);
			char_literal1019=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_continue_statement9367), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1019_tree = (object)adaptor.Create(char_literal1019, retval);
			adaptor.AddChild(root_0, char_literal1019_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("continue_statement", 283);
			LeaveRule("continue_statement", 283);
			LeaveRule_continue_statement();
			if (state.backtracking > 0) { Memoize(input, 283, continue_statement_StartIndex); }

		}
		DebugLocation(983, 21);
		} finally { DebugExitRule(GrammarFileName, "continue_statement"); }
		return retval;

	}
	// $ANTLR end "continue_statement"

	partial void EnterRule_goto_statement();
	partial void LeaveRule_goto_statement();

	// $ANTLR start "goto_statement"
	// cs.g:984:1: goto_statement : 'goto' ( identifier | 'case' constant_expression | 'default' ) ';' ;
	[GrammarRule("goto_statement")]
	public XAstParserRuleReturnScope goto_statement()
	{
		EnterRule_goto_statement();
		EnterRule("goto_statement", 284);
		var retval = new XAstParserRuleReturnScope("goto_statement");
		
		retval.Start = (IToken)input.LT(1);
		int goto_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1020 = default(IToken);
		IToken string_literal1022 = default(IToken);
		IToken string_literal1024 = default(IToken);
		IToken char_literal1025 = default(IToken);
		XAstParserRuleReturnScope identifier1021 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope constant_expression1023 = default(XAstParserRuleReturnScope);

		object string_literal1020_tree = default(object);
		object string_literal1022_tree = default(object);
		object string_literal1024_tree = default(object);
		object char_literal1025_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "goto_statement");
		DebugLocation(984, 32);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 284)) { return retval; }

			// cs.g:984:15: ( 'goto' ( identifier | 'case' constant_expression | 'default' ) ';' )
			DebugEnterAlt(1);
			// cs.g:985:5: 'goto' ( identifier | 'case' constant_expression | 'default' ) ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(985, 5);
			string_literal1020=(IToken)Match(input,134,Follow._134_in_goto_statement9378); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1020_tree = (object)adaptor.Create(string_literal1020, retval);
			adaptor.AddChild(root_0, string_literal1020_tree);
			}
			DebugLocation(985, 14);
			// cs.g:985:14: ( identifier | 'case' constant_expression | 'default' )
			int alt262=3;
			try { DebugEnterSubRule(262);
			try { DebugEnterDecision(262, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
			case 95:
			case 97:
			case 98:
			case 100:
			case 101:
			case 105:
			case 117:
			case 120:
			case 122:
			case 126:
			case 132:
			case 135:
			case 141:
			case 143:
			case 144:
			case 147:
			case 148:
			case 152:
			case 154:
			case 157:
			case 160:
			case 162:
			case 167:
			case 171:
			case 172:
			case 183:
			case 190:
			case 194:
			case 196:
				{
				alt262 = 1;
				}
				break;
			case 107:
				{
				alt262 = 2;
				}
				break;
			case 115:
				{
				alt262 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 262, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(262); }
			switch (alt262)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:985:16: identifier
				{
				DebugLocation(985, 16);
				PushFollow(Follow._identifier_in_goto_statement9384);
				identifier1021=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier1021.Tree, identifier1021, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:986:16: 'case' constant_expression
				{
				DebugLocation(986, 16);
				string_literal1022=(IToken)Match(input,107,Follow._107_in_goto_statement9401); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal1022_tree = (object)adaptor.Create(string_literal1022, retval);
				adaptor.AddChild(root_0, string_literal1022_tree);
				}
				DebugLocation(986, 25);
				PushFollow(Follow._constant_expression_in_goto_statement9405);
				constant_expression1023=constant_expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant_expression1023.Tree, constant_expression1023, retval);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// cs.g:987:16: 'default'
				{
				DebugLocation(987, 16);
				string_literal1024=(IToken)Match(input,115,Follow._115_in_goto_statement9422); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal1024_tree = (object)adaptor.Create(string_literal1024, retval);
				adaptor.AddChild(root_0, string_literal1024_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(262); }

			DebugLocation(987, 29);
			char_literal1025=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_goto_statement9427), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1025_tree = (object)adaptor.Create(char_literal1025, retval);
			adaptor.AddChild(root_0, char_literal1025_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("goto_statement", 284);
			LeaveRule("goto_statement", 284);
			LeaveRule_goto_statement();
			if (state.backtracking > 0) { Memoize(input, 284, goto_statement_StartIndex); }

		}
		DebugLocation(987, 32);
		} finally { DebugExitRule(GrammarFileName, "goto_statement"); }
		return retval;

	}
	// $ANTLR end "goto_statement"

	partial void EnterRule_return_statement();
	partial void LeaveRule_return_statement();

	// $ANTLR start "return_statement"
	// cs.g:988:1: return_statement : 'return' ( expression )? ';' ;
	[GrammarRule("return_statement")]
	public XAstParserRuleReturnScope return_statement()
	{
		EnterRule_return_statement();
		EnterRule("return_statement", 285);
		var retval = new XAstParserRuleReturnScope("return_statement");
		
		retval.Start = (IToken)input.LT(1);
		int return_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1026 = default(IToken);
		IToken char_literal1028 = default(IToken);
		XAstParserRuleReturnScope expression1027 = default(XAstParserRuleReturnScope);

		object string_literal1026_tree = default(object);
		object char_literal1028_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "return_statement");
		DebugLocation(988, 33);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 285)) { return retval; }

			// cs.g:988:17: ( 'return' ( expression )? ';' )
			DebugEnterAlt(1);
			// cs.g:989:5: 'return' ( expression )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(989, 5);
			string_literal1026=(IToken)Match(input,168,Follow._168_in_return_statement9438); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1026_tree = (object)adaptor.Create(string_literal1026, retval);
			adaptor.AddChild(root_0, string_literal1026_tree);
			}
			DebugLocation(989, 16);
			// cs.g:989:16: ( expression )?
			int alt263=2;
			try { DebugEnterSubRule(263);
			try { DebugEnterDecision(263, false);
			int LA263_0 = input.LA(1);

			if ((LA263_0==Character_literal||LA263_0==FALSE||(LA263_0>=Hex_number && LA263_0<=IDENTIFIER)||(LA263_0>=MINUS && LA263_0<=NUMBER)||LA263_0==Real_literal||LA263_0==STRINGLITERAL||LA263_0==TRUE||LA263_0==Verbatim_string_literal||LA263_0==61||LA263_0==66||(LA263_0>=68 && LA263_0<=69)||(LA263_0>=71 && LA263_0<=72)||LA263_0==75||LA263_0==95||(LA263_0>=97 && LA263_0<=98)||(LA263_0>=100 && LA263_0<=103)||(LA263_0>=105 && LA263_0<=106)||(LA263_0>=109 && LA263_0<=110)||(LA263_0>=114 && LA263_0<=117)||(LA263_0>=119 && LA263_0<=120)||LA263_0==122||LA263_0==126||LA263_0==129||LA263_0==132||LA263_0==135||LA263_0==138||LA263_0==141||(LA263_0>=143 && LA263_0<=144)||(LA263_0>=146 && LA263_0<=148)||(LA263_0>=150 && LA263_0<=152)||LA263_0==154||LA263_0==157||LA263_0==160||LA263_0==162||LA263_0==167||LA263_0==169||(LA263_0>=171 && LA263_0<=174)||LA263_0==177||LA263_0==180||(LA263_0>=183 && LA263_0<=187)||(LA263_0>=189 && LA263_0<=190)||LA263_0==194||LA263_0==196||LA263_0==202))
			{
				alt263 = 1;
			}
			} finally { DebugExitDecision(263); }
			switch (alt263)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:989:16: expression
				{
				DebugLocation(989, 16);
				PushFollow(Follow._expression_in_return_statement9442);
				expression1027=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression1027.Tree, expression1027, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(263); }

			DebugLocation(989, 30);
			char_literal1028=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_return_statement9447), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1028_tree = (object)adaptor.Create(char_literal1028, retval);
			adaptor.AddChild(root_0, char_literal1028_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("return_statement", 285);
			LeaveRule("return_statement", 285);
			LeaveRule_return_statement();
			if (state.backtracking > 0) { Memoize(input, 285, return_statement_StartIndex); }

		}
		DebugLocation(989, 33);
		} finally { DebugExitRule(GrammarFileName, "return_statement"); }
		return retval;

	}
	// $ANTLR end "return_statement"

	partial void EnterRule_throw_statement();
	partial void LeaveRule_throw_statement();

	// $ANTLR start "throw_statement"
	// cs.g:990:1: throw_statement : 'throw' ( expression )? ';' ;
	[GrammarRule("throw_statement")]
	public XAstParserRuleReturnScope throw_statement()
	{
		EnterRule_throw_statement();
		EnterRule("throw_statement", 286);
		var retval = new XAstParserRuleReturnScope("throw_statement");
		
		retval.Start = (IToken)input.LT(1);
		int throw_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1029 = default(IToken);
		IToken char_literal1031 = default(IToken);
		XAstParserRuleReturnScope expression1030 = default(XAstParserRuleReturnScope);

		object string_literal1029_tree = default(object);
		object char_literal1031_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "throw_statement");
		DebugLocation(990, 32);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 286)) { return retval; }

			// cs.g:990:16: ( 'throw' ( expression )? ';' )
			DebugEnterAlt(1);
			// cs.g:991:5: 'throw' ( expression )? ';'
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(991, 5);
			string_literal1029=(IToken)Match(input,181,Follow._181_in_throw_statement9458); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1029_tree = (object)adaptor.Create(string_literal1029, retval);
			adaptor.AddChild(root_0, string_literal1029_tree);
			}
			DebugLocation(991, 15);
			// cs.g:991:15: ( expression )?
			int alt264=2;
			try { DebugEnterSubRule(264);
			try { DebugEnterDecision(264, false);
			int LA264_0 = input.LA(1);

			if ((LA264_0==Character_literal||LA264_0==FALSE||(LA264_0>=Hex_number && LA264_0<=IDENTIFIER)||(LA264_0>=MINUS && LA264_0<=NUMBER)||LA264_0==Real_literal||LA264_0==STRINGLITERAL||LA264_0==TRUE||LA264_0==Verbatim_string_literal||LA264_0==61||LA264_0==66||(LA264_0>=68 && LA264_0<=69)||(LA264_0>=71 && LA264_0<=72)||LA264_0==75||LA264_0==95||(LA264_0>=97 && LA264_0<=98)||(LA264_0>=100 && LA264_0<=103)||(LA264_0>=105 && LA264_0<=106)||(LA264_0>=109 && LA264_0<=110)||(LA264_0>=114 && LA264_0<=117)||(LA264_0>=119 && LA264_0<=120)||LA264_0==122||LA264_0==126||LA264_0==129||LA264_0==132||LA264_0==135||LA264_0==138||LA264_0==141||(LA264_0>=143 && LA264_0<=144)||(LA264_0>=146 && LA264_0<=148)||(LA264_0>=150 && LA264_0<=152)||LA264_0==154||LA264_0==157||LA264_0==160||LA264_0==162||LA264_0==167||LA264_0==169||(LA264_0>=171 && LA264_0<=174)||LA264_0==177||LA264_0==180||(LA264_0>=183 && LA264_0<=187)||(LA264_0>=189 && LA264_0<=190)||LA264_0==194||LA264_0==196||LA264_0==202))
			{
				alt264 = 1;
			}
			} finally { DebugExitDecision(264); }
			switch (alt264)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:991:15: expression
				{
				DebugLocation(991, 15);
				PushFollow(Follow._expression_in_throw_statement9462);
				expression1030=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression1030.Tree, expression1030, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(264); }

			DebugLocation(991, 29);
			char_literal1031=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_throw_statement9467), "SEMI"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1031_tree = (object)adaptor.Create(char_literal1031, retval);
			adaptor.AddChild(root_0, char_literal1031_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("throw_statement", 286);
			LeaveRule("throw_statement", 286);
			LeaveRule_throw_statement();
			if (state.backtracking > 0) { Memoize(input, 286, throw_statement_StartIndex); }

		}
		DebugLocation(991, 32);
		} finally { DebugExitRule(GrammarFileName, "throw_statement"); }
		return retval;

	}
	// $ANTLR end "throw_statement"

	partial void EnterRule_try_statement();
	partial void LeaveRule_try_statement();

	// $ANTLR start "try_statement"
	// cs.g:992:1: try_statement : 'try' block ( catch_clauses ( finally_clause )? | finally_clause ) ;
	[GrammarRule("try_statement")]
	public XAstParserRuleReturnScope try_statement()
	{
		EnterRule_try_statement();
		EnterRule("try_statement", 287);
		var retval = new XAstParserRuleReturnScope("try_statement");
		
		retval.Start = (IToken)input.LT(1);
		int try_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1032 = default(IToken);
		XAstParserRuleReturnScope block1033 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope catch_clauses1034 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope finally_clause1035 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope finally_clause1036 = default(XAstParserRuleReturnScope);

		object string_literal1032_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "try_statement");
		DebugLocation(992, 39);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 287)) { return retval; }

			// cs.g:992:14: ( 'try' block ( catch_clauses ( finally_clause )? | finally_clause ) )
			DebugEnterAlt(1);
			// cs.g:993:7: 'try' block ( catch_clauses ( finally_clause )? | finally_clause )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(993, 7);
			string_literal1032=(IToken)Match(input,182,Follow._182_in_try_statement9480); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1032_tree = (object)adaptor.Create(string_literal1032, retval);
			adaptor.AddChild(root_0, string_literal1032_tree);
			}
			DebugLocation(993, 15);
			PushFollow(Follow._block_in_try_statement9484);
			block1033=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block1033.Tree, block1033, retval);
			DebugLocation(993, 23);
			// cs.g:993:23: ( catch_clauses ( finally_clause )? | finally_clause )
			int alt266=2;
			try { DebugEnterSubRule(266);
			try { DebugEnterDecision(266, false);
			int LA266_0 = input.LA(1);

			if ((LA266_0==108))
			{
				alt266 = 1;
			}
			else if ((LA266_0==127))
			{
				alt266 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 266, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(266); }
			switch (alt266)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:993:25: catch_clauses ( finally_clause )?
				{
				DebugLocation(993, 25);
				PushFollow(Follow._catch_clauses_in_try_statement9490);
				catch_clauses1034=catch_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, catch_clauses1034.Tree, catch_clauses1034, retval);
				DebugLocation(993, 41);
				// cs.g:993:41: ( finally_clause )?
				int alt265=2;
				try { DebugEnterSubRule(265);
				try { DebugEnterDecision(265, false);
				int LA265_0 = input.LA(1);

				if ((LA265_0==127))
				{
					alt265 = 1;
				}
				} finally { DebugExitDecision(265); }
				switch (alt265)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:993:41: finally_clause
					{
					DebugLocation(993, 41);
					PushFollow(Follow._finally_clause_in_try_statement9494);
					finally_clause1035=finally_clause();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, finally_clause1035.Tree, finally_clause1035, retval);

					}
					break;

				}
				} finally { DebugExitSubRule(265); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:994:25: finally_clause
				{
				DebugLocation(994, 25);
				PushFollow(Follow._finally_clause_in_try_statement9521);
				finally_clause1036=finally_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, finally_clause1036.Tree, finally_clause1036, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(266); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("try_statement", 287);
			LeaveRule("try_statement", 287);
			LeaveRule_try_statement();
			if (state.backtracking > 0) { Memoize(input, 287, try_statement_StartIndex); }

		}
		DebugLocation(994, 39);
		} finally { DebugExitRule(GrammarFileName, "try_statement"); }
		return retval;

	}
	// $ANTLR end "try_statement"

	partial void EnterRule_catch_clauses();
	partial void LeaveRule_catch_clauses();

	// $ANTLR start "catch_clauses"
	// cs.g:996:1: catch_clauses : 'catch' ( specific_catch_clauses | general_catch_clause ) ;
	[GrammarRule("catch_clauses")]
	public XAstParserRuleReturnScope catch_clauses()
	{
		EnterRule_catch_clauses();
		EnterRule("catch_clauses", 288);
		var retval = new XAstParserRuleReturnScope("catch_clauses");
		
		retval.Start = (IToken)input.LT(1);
		int catch_clauses_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1037 = default(IToken);
		XAstParserRuleReturnScope specific_catch_clauses1038 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope general_catch_clause1039 = default(XAstParserRuleReturnScope);

		object string_literal1037_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "catch_clauses");
		DebugLocation(996, 62);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 288)) { return retval; }

			// cs.g:996:14: ( 'catch' ( specific_catch_clauses | general_catch_clause ) )
			DebugEnterAlt(1);
			// cs.g:997:5: 'catch' ( specific_catch_clauses | general_catch_clause )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(997, 5);
			string_literal1037=(IToken)Match(input,108,Follow._108_in_catch_clauses9533); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1037_tree = (object)adaptor.Create(string_literal1037, retval);
			adaptor.AddChild(root_0, string_literal1037_tree);
			}
			DebugLocation(997, 15);
			// cs.g:997:15: ( specific_catch_clauses | general_catch_clause )
			int alt267=2;
			try { DebugEnterSubRule(267);
			try { DebugEnterDecision(267, false);
			int LA267_0 = input.LA(1);

			if ((LA267_0==68))
			{
				alt267 = 1;
			}
			else if ((LA267_0==SEMI||LA267_0==197))
			{
				alt267 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 267, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(267); }
			switch (alt267)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:997:16: specific_catch_clauses
				{
				DebugLocation(997, 16);
				PushFollow(Follow._specific_catch_clauses_in_catch_clauses9538);
				specific_catch_clauses1038=specific_catch_clauses();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, specific_catch_clauses1038.Tree, specific_catch_clauses1038, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:997:41: general_catch_clause
				{
				DebugLocation(997, 41);
				PushFollow(Follow._general_catch_clause_in_catch_clauses9542);
				general_catch_clause1039=general_catch_clause();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, general_catch_clause1039.Tree, general_catch_clause1039, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(267); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("catch_clauses", 288);
			LeaveRule("catch_clauses", 288);
			LeaveRule_catch_clauses();
			if (state.backtracking > 0) { Memoize(input, 288, catch_clauses_StartIndex); }

		}
		DebugLocation(997, 62);
		} finally { DebugExitRule(GrammarFileName, "catch_clauses"); }
		return retval;

	}
	// $ANTLR end "catch_clauses"

	partial void EnterRule_specific_catch_clauses();
	partial void LeaveRule_specific_catch_clauses();

	// $ANTLR start "specific_catch_clauses"
	// cs.g:998:1: specific_catch_clauses : specific_catch_clause ( 'catch' ( specific_catch_clause | general_catch_clause ) )* ;
	[GrammarRule("specific_catch_clauses")]
	public XAstParserRuleReturnScope specific_catch_clauses()
	{
		EnterRule_specific_catch_clauses();
		EnterRule("specific_catch_clauses", 289);
		var retval = new XAstParserRuleReturnScope("specific_catch_clauses");
		
		retval.Start = (IToken)input.LT(1);
		int specific_catch_clauses_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1041 = default(IToken);
		XAstParserRuleReturnScope specific_catch_clause1040 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope specific_catch_clause1042 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope general_catch_clause1043 = default(XAstParserRuleReturnScope);

		object string_literal1041_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "specific_catch_clauses");
		DebugLocation(998, 87);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 289)) { return retval; }

			// cs.g:998:23: ( specific_catch_clause ( 'catch' ( specific_catch_clause | general_catch_clause ) )* )
			DebugEnterAlt(1);
			// cs.g:999:5: specific_catch_clause ( 'catch' ( specific_catch_clause | general_catch_clause ) )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(999, 5);
			PushFollow(Follow._specific_catch_clause_in_specific_catch_clauses9554);
			specific_catch_clause1040=specific_catch_clause();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, specific_catch_clause1040.Tree, specific_catch_clause1040, retval);
			DebugLocation(999, 29);
			// cs.g:999:29: ( 'catch' ( specific_catch_clause | general_catch_clause ) )*
			try { DebugEnterSubRule(269);
			while (true)
			{
				int alt269=2;
				try { DebugEnterDecision(269, false);
				int LA269_0 = input.LA(1);

				if ((LA269_0==108))
				{
					alt269 = 1;
				}


				} finally { DebugExitDecision(269); }
				switch ( alt269 )
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:999:30: 'catch' ( specific_catch_clause | general_catch_clause )
					{
					DebugLocation(999, 30);
					string_literal1041=(IToken)Match(input,108,Follow._108_in_specific_catch_clauses9559); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal1041_tree = (object)adaptor.Create(string_literal1041, retval);
					adaptor.AddChild(root_0, string_literal1041_tree);
					}
					DebugLocation(999, 40);
					// cs.g:999:40: ( specific_catch_clause | general_catch_clause )
					int alt268=2;
					try { DebugEnterSubRule(268);
					try { DebugEnterDecision(268, false);
					int LA268_0 = input.LA(1);

					if ((LA268_0==68))
					{
						alt268 = 1;
					}
					else if ((LA268_0==SEMI||LA268_0==197))
					{
						alt268 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 268, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(268); }
					switch (alt268)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:999:41: specific_catch_clause
						{
						DebugLocation(999, 41);
						PushFollow(Follow._specific_catch_clause_in_specific_catch_clauses9564);
						specific_catch_clause1042=specific_catch_clause();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, specific_catch_clause1042.Tree, specific_catch_clause1042, retval);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// cs.g:999:65: general_catch_clause
						{
						DebugLocation(999, 65);
						PushFollow(Follow._general_catch_clause_in_specific_catch_clauses9568);
						general_catch_clause1043=general_catch_clause();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, general_catch_clause1043.Tree, general_catch_clause1043, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(268); }


					}
					break;

				default:
					goto loop269;
				}
			}

			loop269:
				;

			} finally { DebugExitSubRule(269); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("specific_catch_clauses", 289);
			LeaveRule("specific_catch_clauses", 289);
			LeaveRule_specific_catch_clauses();
			if (state.backtracking > 0) { Memoize(input, 289, specific_catch_clauses_StartIndex); }

		}
		DebugLocation(999, 87);
		} finally { DebugExitRule(GrammarFileName, "specific_catch_clauses"); }
		return retval;

	}
	// $ANTLR end "specific_catch_clauses"

	partial void EnterRule_specific_catch_clause();
	partial void LeaveRule_specific_catch_clause();

	// $ANTLR start "specific_catch_clause"
	// cs.g:1000:1: specific_catch_clause : '(' class_type ( identifier )? ')' block ;
	[GrammarRule("specific_catch_clause")]
	public XAstParserRuleReturnScope specific_catch_clause()
	{
		EnterRule_specific_catch_clause();
		EnterRule("specific_catch_clause", 290);
		var retval = new XAstParserRuleReturnScope("specific_catch_clause");
		
		retval.Start = (IToken)input.LT(1);
		int specific_catch_clause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal1044 = default(IToken);
		IToken char_literal1047 = default(IToken);
		XAstParserRuleReturnScope class_type1045 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope identifier1046 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope block1048 = default(XAstParserRuleReturnScope);

		object char_literal1044_tree = default(object);
		object char_literal1047_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "specific_catch_clause");
		DebugLocation(1000, 49);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 290)) { return retval; }

			// cs.g:1000:22: ( '(' class_type ( identifier )? ')' block )
			DebugEnterAlt(1);
			// cs.g:1001:5: '(' class_type ( identifier )? ')' block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1001, 5);
			char_literal1044=(IToken)Match(input,68,Follow._68_in_specific_catch_clause9581); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1044_tree = (object)adaptor.Create(char_literal1044, retval);
			adaptor.AddChild(root_0, char_literal1044_tree);
			}
			DebugLocation(1001, 11);
			PushFollow(Follow._class_type_in_specific_catch_clause9585);
			class_type1045=class_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, class_type1045.Tree, class_type1045, retval);
			DebugLocation(1001, 24);
			// cs.g:1001:24: ( identifier )?
			int alt270=2;
			try { DebugEnterSubRule(270);
			try { DebugEnterDecision(270, false);
			int LA270_0 = input.LA(1);

			if ((LA270_0==IDENTIFIER||LA270_0==95||(LA270_0>=97 && LA270_0<=98)||(LA270_0>=100 && LA270_0<=101)||LA270_0==105||LA270_0==117||LA270_0==120||LA270_0==122||LA270_0==126||LA270_0==132||LA270_0==135||LA270_0==141||(LA270_0>=143 && LA270_0<=144)||(LA270_0>=147 && LA270_0<=148)||LA270_0==152||LA270_0==154||LA270_0==157||LA270_0==160||LA270_0==162||LA270_0==167||(LA270_0>=171 && LA270_0<=172)||LA270_0==183||LA270_0==190||LA270_0==194||LA270_0==196))
			{
				alt270 = 1;
			}
			} finally { DebugExitDecision(270); }
			switch (alt270)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:1001:24: identifier
				{
				DebugLocation(1001, 24);
				PushFollow(Follow._identifier_in_specific_catch_clause9589);
				identifier1046=identifier();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, identifier1046.Tree, identifier1046, retval);

				}
				break;

			}
			} finally { DebugExitSubRule(270); }

			DebugLocation(1001, 38);
			char_literal1047=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_specific_catch_clause9594), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1047_tree = (object)adaptor.Create(char_literal1047, retval);
			adaptor.AddChild(root_0, char_literal1047_tree);
			}
			DebugLocation(1001, 44);
			PushFollow(Follow._block_in_specific_catch_clause9598);
			block1048=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block1048.Tree, block1048, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("specific_catch_clause", 290);
			LeaveRule("specific_catch_clause", 290);
			LeaveRule_specific_catch_clause();
			if (state.backtracking > 0) { Memoize(input, 290, specific_catch_clause_StartIndex); }

		}
		DebugLocation(1001, 49);
		} finally { DebugExitRule(GrammarFileName, "specific_catch_clause"); }
		return retval;

	}
	// $ANTLR end "specific_catch_clause"

	partial void EnterRule_general_catch_clause();
	partial void LeaveRule_general_catch_clause();

	// $ANTLR start "general_catch_clause"
	// cs.g:1002:1: general_catch_clause : block ;
	[GrammarRule("general_catch_clause")]
	public XAstParserRuleReturnScope general_catch_clause()
	{
		EnterRule_general_catch_clause();
		EnterRule("general_catch_clause", 291);
		var retval = new XAstParserRuleReturnScope("general_catch_clause");
		
		retval.Start = (IToken)input.LT(1);
		int general_catch_clause_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope block1049 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "general_catch_clause");
		DebugLocation(1002, 10);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 291)) { return retval; }

			// cs.g:1002:21: ( block )
			DebugEnterAlt(1);
			// cs.g:1003:5: block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1003, 5);
			PushFollow(Follow._block_in_general_catch_clause9609);
			block1049=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block1049.Tree, block1049, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("general_catch_clause", 291);
			LeaveRule("general_catch_clause", 291);
			LeaveRule_general_catch_clause();
			if (state.backtracking > 0) { Memoize(input, 291, general_catch_clause_StartIndex); }

		}
		DebugLocation(1003, 10);
		} finally { DebugExitRule(GrammarFileName, "general_catch_clause"); }
		return retval;

	}
	// $ANTLR end "general_catch_clause"

	partial void EnterRule_finally_clause();
	partial void LeaveRule_finally_clause();

	// $ANTLR start "finally_clause"
	// cs.g:1004:1: finally_clause : 'finally' block ;
	[GrammarRule("finally_clause")]
	public XAstParserRuleReturnScope finally_clause()
	{
		EnterRule_finally_clause();
		EnterRule("finally_clause", 292);
		var retval = new XAstParserRuleReturnScope("finally_clause");
		
		retval.Start = (IToken)input.LT(1);
		int finally_clause_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1050 = default(IToken);
		XAstParserRuleReturnScope block1051 = default(XAstParserRuleReturnScope);

		object string_literal1050_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "finally_clause");
		DebugLocation(1004, 22);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 292)) { return retval; }

			// cs.g:1004:15: ( 'finally' block )
			DebugEnterAlt(1);
			// cs.g:1005:5: 'finally' block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1005, 5);
			string_literal1050=(IToken)Match(input,127,Follow._127_in_finally_clause9620); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1050_tree = (object)adaptor.Create(string_literal1050, retval);
			adaptor.AddChild(root_0, string_literal1050_tree);
			}
			DebugLocation(1005, 17);
			PushFollow(Follow._block_in_finally_clause9624);
			block1051=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block1051.Tree, block1051, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("finally_clause", 292);
			LeaveRule("finally_clause", 292);
			LeaveRule_finally_clause();
			if (state.backtracking > 0) { Memoize(input, 292, finally_clause_StartIndex); }

		}
		DebugLocation(1005, 22);
		} finally { DebugExitRule(GrammarFileName, "finally_clause"); }
		return retval;

	}
	// $ANTLR end "finally_clause"

	partial void EnterRule_checked_statement();
	partial void LeaveRule_checked_statement();

	// $ANTLR start "checked_statement"
	// cs.g:1006:1: checked_statement : 'checked' block ;
	[GrammarRule("checked_statement")]
	public XAstParserRuleReturnScope checked_statement()
	{
		EnterRule_checked_statement();
		EnterRule("checked_statement", 293);
		var retval = new XAstParserRuleReturnScope("checked_statement");
		
		retval.Start = (IToken)input.LT(1);
		int checked_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1052 = default(IToken);
		XAstParserRuleReturnScope block1053 = default(XAstParserRuleReturnScope);

		object string_literal1052_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "checked_statement");
		DebugLocation(1006, 22);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 293)) { return retval; }

			// cs.g:1006:18: ( 'checked' block )
			DebugEnterAlt(1);
			// cs.g:1007:5: 'checked' block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1007, 5);
			string_literal1052=(IToken)Match(input,110,Follow._110_in_checked_statement9635); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1052_tree = (object)adaptor.Create(string_literal1052, retval);
			adaptor.AddChild(root_0, string_literal1052_tree);
			}
			DebugLocation(1007, 17);
			PushFollow(Follow._block_in_checked_statement9639);
			block1053=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block1053.Tree, block1053, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("checked_statement", 293);
			LeaveRule("checked_statement", 293);
			LeaveRule_checked_statement();
			if (state.backtracking > 0) { Memoize(input, 293, checked_statement_StartIndex); }

		}
		DebugLocation(1007, 22);
		} finally { DebugExitRule(GrammarFileName, "checked_statement"); }
		return retval;

	}
	// $ANTLR end "checked_statement"

	partial void EnterRule_unchecked_statement();
	partial void LeaveRule_unchecked_statement();

	// $ANTLR start "unchecked_statement"
	// cs.g:1008:1: unchecked_statement : 'unchecked' block ;
	[GrammarRule("unchecked_statement")]
	public XAstParserRuleReturnScope unchecked_statement()
	{
		EnterRule_unchecked_statement();
		EnterRule("unchecked_statement", 294);
		var retval = new XAstParserRuleReturnScope("unchecked_statement");
		
		retval.Start = (IToken)input.LT(1);
		int unchecked_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1054 = default(IToken);
		XAstParserRuleReturnScope block1055 = default(XAstParserRuleReturnScope);

		object string_literal1054_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unchecked_statement");
		DebugLocation(1008, 24);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 294)) { return retval; }

			// cs.g:1008:20: ( 'unchecked' block )
			DebugEnterAlt(1);
			// cs.g:1009:5: 'unchecked' block
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1009, 5);
			string_literal1054=(IToken)Match(input,187,Follow._187_in_unchecked_statement9650); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1054_tree = (object)adaptor.Create(string_literal1054, retval);
			adaptor.AddChild(root_0, string_literal1054_tree);
			}
			DebugLocation(1009, 19);
			PushFollow(Follow._block_in_unchecked_statement9654);
			block1055=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block1055.Tree, block1055, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unchecked_statement", 294);
			LeaveRule("unchecked_statement", 294);
			LeaveRule_unchecked_statement();
			if (state.backtracking > 0) { Memoize(input, 294, unchecked_statement_StartIndex); }

		}
		DebugLocation(1009, 24);
		} finally { DebugExitRule(GrammarFileName, "unchecked_statement"); }
		return retval;

	}
	// $ANTLR end "unchecked_statement"

	partial void EnterRule_lock_statement();
	partial void LeaveRule_lock_statement();

	// $ANTLR start "lock_statement"
	// cs.g:1010:1: lock_statement : 'lock' '(' expression ')' embedded_statement ;
	[GrammarRule("lock_statement")]
	public XAstParserRuleReturnScope lock_statement()
	{
		EnterRule_lock_statement();
		EnterRule("lock_statement", 295);
		var retval = new XAstParserRuleReturnScope("lock_statement");
		
		retval.Start = (IToken)input.LT(1);
		int lock_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1056 = default(IToken);
		IToken char_literal1057 = default(IToken);
		IToken char_literal1059 = default(IToken);
		XAstParserRuleReturnScope expression1058 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope embedded_statement1060 = default(XAstParserRuleReturnScope);

		object string_literal1056_tree = default(object);
		object char_literal1057_tree = default(object);
		object char_literal1059_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "lock_statement");
		DebugLocation(1010, 56);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 295)) { return retval; }

			// cs.g:1010:15: ( 'lock' '(' expression ')' embedded_statement )
			DebugEnterAlt(1);
			// cs.g:1011:5: 'lock' '(' expression ')' embedded_statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1011, 5);
			string_literal1056=(IToken)Match(input,145,Follow._145_in_lock_statement9665); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1056_tree = (object)adaptor.Create(string_literal1056, retval);
			adaptor.AddChild(root_0, string_literal1056_tree);
			}
			DebugLocation(1011, 14);
			char_literal1057=(IToken)Match(input,68,Follow._68_in_lock_statement9669); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1057_tree = (object)adaptor.Create(char_literal1057, retval);
			adaptor.AddChild(root_0, char_literal1057_tree);
			}
			DebugLocation(1011, 19);
			PushFollow(Follow._expression_in_lock_statement9672);
			expression1058=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expression1058.Tree, expression1058, retval);
			DebugLocation(1011, 32);
			char_literal1059=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_lock_statement9676), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1059_tree = (object)adaptor.Create(char_literal1059, retval);
			adaptor.AddChild(root_0, char_literal1059_tree);
			}
			DebugLocation(1011, 38);
			PushFollow(Follow._embedded_statement_in_lock_statement9680);
			embedded_statement1060=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement1060.Tree, embedded_statement1060, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lock_statement", 295);
			LeaveRule("lock_statement", 295);
			LeaveRule_lock_statement();
			if (state.backtracking > 0) { Memoize(input, 295, lock_statement_StartIndex); }

		}
		DebugLocation(1011, 56);
		} finally { DebugExitRule(GrammarFileName, "lock_statement"); }
		return retval;

	}
	// $ANTLR end "lock_statement"

	partial void EnterRule_using_statement();
	partial void LeaveRule_using_statement();

	// $ANTLR start "using_statement"
	// cs.g:1012:1: using_statement : 'using' '(' resource_acquisition ')' embedded_statement ;
	[GrammarRule("using_statement")]
	public XAstParserRuleReturnScope using_statement()
	{
		EnterRule_using_statement();
		EnterRule("using_statement", 296);
		var retval = new XAstParserRuleReturnScope("using_statement");
		
		retval.Start = (IToken)input.LT(1);
		int using_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1061 = default(IToken);
		IToken char_literal1062 = default(IToken);
		IToken char_literal1064 = default(IToken);
		XAstParserRuleReturnScope resource_acquisition1063 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope embedded_statement1065 = default(XAstParserRuleReturnScope);

		object string_literal1061_tree = default(object);
		object char_literal1062_tree = default(object);
		object char_literal1064_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "using_statement");
		DebugLocation(1012, 70);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 296)) { return retval; }

			// cs.g:1012:16: ( 'using' '(' resource_acquisition ')' embedded_statement )
			DebugEnterAlt(1);
			// cs.g:1013:5: 'using' '(' resource_acquisition ')' embedded_statement
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1013, 5);
			string_literal1061=(IToken)new XToken((IToken)Match(input,USING,Follow._USING_in_using_statement9691), "USING"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1061_tree = (object)adaptor.Create(string_literal1061, retval);
			adaptor.AddChild(root_0, string_literal1061_tree);
			}
			DebugLocation(1013, 15);
			char_literal1062=(IToken)Match(input,68,Follow._68_in_using_statement9695); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1062_tree = (object)adaptor.Create(char_literal1062, retval);
			adaptor.AddChild(root_0, char_literal1062_tree);
			}
			DebugLocation(1013, 22);
			PushFollow(Follow._resource_acquisition_in_using_statement9700);
			resource_acquisition1063=resource_acquisition();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, resource_acquisition1063.Tree, resource_acquisition1063, retval);
			DebugLocation(1013, 45);
			char_literal1064=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_using_statement9704), "RPAREN"); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal1064_tree = (object)adaptor.Create(char_literal1064, retval);
			adaptor.AddChild(root_0, char_literal1064_tree);
			}
			DebugLocation(1013, 52);
			PushFollow(Follow._embedded_statement_in_using_statement9709);
			embedded_statement1065=embedded_statement();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, embedded_statement1065.Tree, embedded_statement1065, retval);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("using_statement", 296);
			LeaveRule("using_statement", 296);
			LeaveRule_using_statement();
			if (state.backtracking > 0) { Memoize(input, 296, using_statement_StartIndex); }

		}
		DebugLocation(1013, 70);
		} finally { DebugExitRule(GrammarFileName, "using_statement"); }
		return retval;

	}
	// $ANTLR end "using_statement"

	partial void EnterRule_resource_acquisition();
	partial void LeaveRule_resource_acquisition();

	// $ANTLR start "resource_acquisition"
	// cs.g:1014:1: resource_acquisition : ( ( local_variable_declaration )=> local_variable_declaration | expression );
	[GrammarRule("resource_acquisition")]
	public XAstParserRuleReturnScope resource_acquisition()
	{
		EnterRule_resource_acquisition();
		EnterRule("resource_acquisition", 297);
		var retval = new XAstParserRuleReturnScope("resource_acquisition");
		
		retval.Start = (IToken)input.LT(1);
		int resource_acquisition_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope local_variable_declaration1066 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope expression1067 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "resource_acquisition");
		DebugLocation(1014, 17);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 297)) { return retval; }

			// cs.g:1014:21: ( ( local_variable_declaration )=> local_variable_declaration | expression )
			int alt271=2;
			try { DebugEnterDecision(271, false);
			int LA271_0 = input.LA(1);

			if ((LA271_0==190))
			{
				int LA271_1 = input.LA(2);

				if ((EvaluatePredicate(synpred39_cs_fragment)))
				{
					alt271 = 1;
				}
				else if ((true))
				{
					alt271 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 271, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA271_0==120))
			{
				int LA271_2 = input.LA(2);

				if ((EvaluatePredicate(synpred39_cs_fragment)))
				{
					alt271 = 1;
				}
				else if ((true))
				{
					alt271 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 271, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA271_0==103||LA271_0==106||LA271_0==109||LA271_0==114||LA271_0==119||LA271_0==129||LA271_0==138||LA271_0==146||LA271_0==151||LA271_0==169||LA271_0==173||LA271_0==177||(LA271_0>=185 && LA271_0<=186)||LA271_0==189))
			{
				int LA271_3 = input.LA(2);

				if ((EvaluatePredicate(synpred39_cs_fragment)))
				{
					alt271 = 1;
				}
				else if ((true))
				{
					alt271 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 271, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA271_0==132))
			{
				int LA271_4 = input.LA(2);

				if ((EvaluatePredicate(synpred39_cs_fragment)))
				{
					alt271 = 1;
				}
				else if ((true))
				{
					alt271 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 271, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA271_0==192) && (EvaluatePredicate(synpred39_cs_fragment)))
			{
				alt271 = 1;
			}
			else if ((LA271_0==Character_literal||LA271_0==FALSE||LA271_0==Hex_number||(LA271_0>=MINUS && LA271_0<=NUMBER)||LA271_0==Real_literal||LA271_0==STRINGLITERAL||LA271_0==TRUE||LA271_0==Verbatim_string_literal||LA271_0==61||LA271_0==66||(LA271_0>=68 && LA271_0<=69)||(LA271_0>=71 && LA271_0<=72)||LA271_0==75||LA271_0==102||LA271_0==110||(LA271_0>=115 && LA271_0<=116)||LA271_0==150||LA271_0==174||LA271_0==180||LA271_0==184||LA271_0==187||LA271_0==202))
			{
				alt271 = 2;
			}
			else if ((LA271_0==IDENTIFIER||LA271_0==95||(LA271_0>=97 && LA271_0<=98)||(LA271_0>=100 && LA271_0<=101)||LA271_0==105||LA271_0==117||LA271_0==122||LA271_0==126||LA271_0==135||LA271_0==141||(LA271_0>=143 && LA271_0<=144)||(LA271_0>=147 && LA271_0<=148)||LA271_0==152||LA271_0==154||LA271_0==157||LA271_0==160||LA271_0==162||LA271_0==167||(LA271_0>=171 && LA271_0<=172)||LA271_0==183||LA271_0==194||LA271_0==196))
			{
				int LA271_25 = input.LA(2);

				if ((EvaluatePredicate(synpred39_cs_fragment)))
				{
					alt271 = 1;
				}
				else if ((true))
				{
					alt271 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 271, 25, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 271, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(271); }
			switch (alt271)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:1015:5: ( local_variable_declaration )=> local_variable_declaration
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1015, 37);
				PushFollow(Follow._local_variable_declaration_in_resource_acquisition9726);
				local_variable_declaration1066=local_variable_declaration();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_declaration1066.Tree, local_variable_declaration1066, retval);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:1016:7: expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(1016, 7);
				PushFollow(Follow._expression_in_resource_acquisition9734);
				expression1067=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression1067.Tree, expression1067, retval);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("resource_acquisition", 297);
			LeaveRule("resource_acquisition", 297);
			LeaveRule_resource_acquisition();
			if (state.backtracking > 0) { Memoize(input, 297, resource_acquisition_StartIndex); }

		}
		DebugLocation(1016, 17);
		} finally { DebugExitRule(GrammarFileName, "resource_acquisition"); }
		return retval;

	}
	// $ANTLR end "resource_acquisition"

	partial void EnterRule_yield_statement();
	partial void LeaveRule_yield_statement();

	// $ANTLR start "yield_statement"
	// cs.g:1017:1: yield_statement : 'yield' ( 'return' expression ';' | 'break' ';' ) ;
	[GrammarRule("yield_statement")]
	public XAstParserRuleReturnScope yield_statement()
	{
		EnterRule_yield_statement();
		EnterRule("yield_statement", 298);
		var retval = new XAstParserRuleReturnScope("yield_statement");
		
		retval.Start = (IToken)input.LT(1);
		int yield_statement_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1068 = default(IToken);
		IToken string_literal1069 = default(IToken);
		IToken char_literal1071 = default(IToken);
		IToken string_literal1072 = default(IToken);
		IToken char_literal1073 = default(IToken);
		XAstParserRuleReturnScope expression1070 = default(XAstParserRuleReturnScope);

		object string_literal1068_tree = default(object);
		object string_literal1069_tree = default(object);
		object char_literal1071_tree = default(object);
		object string_literal1072_tree = default(object);
		object char_literal1073_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "yield_statement");
		DebugLocation(1017, 31);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 298)) { return retval; }

			// cs.g:1017:16: ( 'yield' ( 'return' expression ';' | 'break' ';' ) )
			DebugEnterAlt(1);
			// cs.g:1018:5: 'yield' ( 'return' expression ';' | 'break' ';' )
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1018, 5);
			string_literal1068=(IToken)Match(input,196,Follow._196_in_yield_statement9745); if (state.failed) return retval;
			if (state.backtracking == 0) {
			string_literal1068_tree = (object)adaptor.Create(string_literal1068, retval);
			adaptor.AddChild(root_0, string_literal1068_tree);
			}
			DebugLocation(1018, 15);
			// cs.g:1018:15: ( 'return' expression ';' | 'break' ';' )
			int alt272=2;
			try { DebugEnterSubRule(272);
			try { DebugEnterDecision(272, false);
			int LA272_0 = input.LA(1);

			if ((LA272_0==168))
			{
				alt272 = 1;
			}
			else if ((LA272_0==104))
			{
				alt272 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 272, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(272); }
			switch (alt272)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:1018:16: 'return' expression ';'
				{
				DebugLocation(1018, 16);
				string_literal1069=(IToken)Match(input,168,Follow._168_in_yield_statement9750); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal1069_tree = (object)adaptor.Create(string_literal1069, retval);
				adaptor.AddChild(root_0, string_literal1069_tree);
				}
				DebugLocation(1018, 27);
				PushFollow(Follow._expression_in_yield_statement9754);
				expression1070=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression1070.Tree, expression1070, retval);
				DebugLocation(1018, 40);
				char_literal1071=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_yield_statement9758), "SEMI"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal1071_tree = (object)adaptor.Create(char_literal1071, retval);
				adaptor.AddChild(root_0, char_literal1071_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:1019:17: 'break' ';'
				{
				DebugLocation(1019, 17);
				string_literal1072=(IToken)Match(input,104,Follow._104_in_yield_statement9776); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal1072_tree = (object)adaptor.Create(string_literal1072, retval);
				adaptor.AddChild(root_0, string_literal1072_tree);
				}
				DebugLocation(1019, 27);
				char_literal1073=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_yield_statement9780), "SEMI"); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal1073_tree = (object)adaptor.Create(char_literal1073, retval);
				adaptor.AddChild(root_0, char_literal1073_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(272); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("yield_statement", 298);
			LeaveRule("yield_statement", 298);
			LeaveRule_yield_statement();
			if (state.backtracking > 0) { Memoize(input, 298, yield_statement_StartIndex); }

		}
		DebugLocation(1019, 31);
		} finally { DebugExitRule(GrammarFileName, "yield_statement"); }
		return retval;

	}
	// $ANTLR end "yield_statement"

	partial void EnterRule_predefined_type();
	partial void LeaveRule_predefined_type();

	// $ANTLR start "predefined_type"
	// cs.g:1025:1: predefined_type : ( 'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' );
	[GrammarRule("predefined_type")]
	public XAstParserRuleReturnScope predefined_type()
	{
		EnterRule_predefined_type();
		EnterRule("predefined_type", 299);
		var retval = new XAstParserRuleReturnScope("predefined_type");
		
		retval.Start = (IToken)input.LT(1);
		int predefined_type_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set1074 = default(IToken);

		object set1074_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "predefined_type");
		DebugLocation(1025, 59);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 299)) { return retval; }

			// cs.g:1025:16: ( 'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1025, 16);

			set1074=(IToken)input.LT(1);
			if (input.LA(1)==103||input.LA(1)==106||input.LA(1)==109||input.LA(1)==114||input.LA(1)==119||input.LA(1)==129||input.LA(1)==138||input.LA(1)==146||input.LA(1)==151||input.LA(1)==169||input.LA(1)==173||input.LA(1)==177||(input.LA(1)>=185 && input.LA(1)<=186)||input.LA(1)==189)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set1074, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("predefined_type", 299);
			LeaveRule("predefined_type", 299);
			LeaveRule_predefined_type();
			if (state.backtracking > 0) { Memoize(input, 299, predefined_type_StartIndex); }

		}
		DebugLocation(1027, 59);
		} finally { DebugExitRule(GrammarFileName, "predefined_type"); }
		return retval;

	}
	// $ANTLR end "predefined_type"

	partial void EnterRule_identifier();
	partial void LeaveRule_identifier();

	// $ANTLR start "identifier"
	// cs.g:1029:1: identifier : ( IDENTIFIER | 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' | 'dynamic' );
	[GrammarRule("identifier")]
	public XAstParserRuleReturnScope identifier()
	{
		EnterRule_identifier();
		EnterRule("identifier", 300);
		var retval = new XAstParserRuleReturnScope("identifier");
		
		retval.Start = (IToken)input.LT(1);
		int identifier_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set1075 = default(IToken);

		object set1075_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "identifier");
		DebugLocation(1029, 209);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 300)) { return retval; }

			// cs.g:1029:11: ( IDENTIFIER | 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' | 'dynamic' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1029, 11);

			set1075=(IToken)input.LT(1);
			if (input.LA(1)==IDENTIFIER||input.LA(1)==95||(input.LA(1)>=97 && input.LA(1)<=98)||(input.LA(1)>=100 && input.LA(1)<=101)||input.LA(1)==105||input.LA(1)==117||input.LA(1)==120||input.LA(1)==122||input.LA(1)==126||input.LA(1)==132||input.LA(1)==135||input.LA(1)==141||(input.LA(1)>=143 && input.LA(1)<=144)||(input.LA(1)>=147 && input.LA(1)<=148)||input.LA(1)==152||input.LA(1)==154||input.LA(1)==157||input.LA(1)==160||input.LA(1)==162||input.LA(1)==167||(input.LA(1)>=171 && input.LA(1)<=172)||input.LA(1)==183||input.LA(1)==190||input.LA(1)==194||input.LA(1)==196)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set1075, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("identifier", 300);
			LeaveRule("identifier", 300);
			LeaveRule_identifier();
			if (state.backtracking > 0) { Memoize(input, 300, identifier_StartIndex); }

		}
		DebugLocation(1031, 209);
		} finally { DebugExitRule(GrammarFileName, "identifier"); }
		return retval;

	}
	// $ANTLR end "identifier"

	partial void EnterRule_keyword();
	partial void LeaveRule_keyword();

	// $ANTLR start "keyword"
	// cs.g:1033:1: keyword : ( 'abstract' | 'as' | 'base' | 'bool' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' | 'double' | 'else' | 'enum' | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'string' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' );
	[GrammarRule("keyword")]
	public XAstParserRuleReturnScope keyword()
	{
		EnterRule_keyword();
		EnterRule("keyword", 301);
		var retval = new XAstParserRuleReturnScope("keyword");
		
		retval.Start = (IToken)input.LT(1);
		int keyword_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set1076 = default(IToken);

		object set1076_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "keyword");
		DebugLocation(1033, 804);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 301)) { return retval; }

			// cs.g:1033:8: ( 'abstract' | 'as' | 'base' | 'bool' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' | 'double' | 'else' | 'enum' | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'string' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1033, 8);

			set1076=(IToken)input.LT(1);
			if (input.LA(1)==ENUM||input.LA(1)==FALSE||input.LA(1)==IF||input.LA(1)==NULL||input.LA(1)==TRUE||input.LA(1)==USING||input.LA(1)==96||input.LA(1)==99||(input.LA(1)>=102 && input.LA(1)<=104)||(input.LA(1)>=106 && input.LA(1)<=116)||(input.LA(1)>=118 && input.LA(1)<=119)||input.LA(1)==121||(input.LA(1)>=123 && input.LA(1)<=125)||(input.LA(1)>=127 && input.LA(1)<=131)||input.LA(1)==134||(input.LA(1)>=136 && input.LA(1)<=140)||input.LA(1)==142||(input.LA(1)>=145 && input.LA(1)<=146)||(input.LA(1)>=149 && input.LA(1)<=151)||input.LA(1)==153||(input.LA(1)>=155 && input.LA(1)<=156)||input.LA(1)==158||input.LA(1)==161||(input.LA(1)>=163 && input.LA(1)<=166)||(input.LA(1)>=168 && input.LA(1)<=170)||(input.LA(1)>=173 && input.LA(1)<=182)||(input.LA(1)>=184 && input.LA(1)<=189)||(input.LA(1)>=191 && input.LA(1)<=193))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set1076, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("keyword", 301);
			LeaveRule("keyword", 301);
			LeaveRule_keyword();
			if (state.backtracking > 0) { Memoize(input, 301, keyword_StartIndex); }

		}
		DebugLocation(1034, 804);
		} finally { DebugExitRule(GrammarFileName, "keyword"); }
		return retval;

	}
	// $ANTLR end "keyword"

	partial void EnterRule_also_keyword();
	partial void LeaveRule_also_keyword();

	// $ANTLR start "also_keyword"
	// cs.g:1036:1: also_keyword : ( 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'event' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' | 'dynamic' );
	[GrammarRule("also_keyword")]
	public XAstParserRuleReturnScope also_keyword()
	{
		EnterRule_also_keyword();
		EnterRule("also_keyword", 302);
		var retval = new XAstParserRuleReturnScope("also_keyword");
		
		retval.Start = (IToken)input.LT(1);
		int also_keyword_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set1077 = default(IToken);

		object set1077_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "also_keyword");
		DebugLocation(1036, 97);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 302)) { return retval; }

			// cs.g:1036:13: ( 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'event' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' | 'dynamic' )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1036, 13);

			set1077=(IToken)input.LT(1);
			if (input.LA(1)==95||(input.LA(1)>=97 && input.LA(1)<=98)||(input.LA(1)>=100 && input.LA(1)<=101)||input.LA(1)==105||input.LA(1)==117||input.LA(1)==120||(input.LA(1)>=122 && input.LA(1)<=123)||input.LA(1)==126||input.LA(1)==132||input.LA(1)==135||input.LA(1)==141||(input.LA(1)>=143 && input.LA(1)<=144)||(input.LA(1)>=147 && input.LA(1)<=148)||input.LA(1)==152||input.LA(1)==154||input.LA(1)==157||input.LA(1)==160||input.LA(1)==162||input.LA(1)==167||(input.LA(1)>=171 && input.LA(1)<=172)||input.LA(1)==183||input.LA(1)==190||input.LA(1)==194||input.LA(1)==196)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set1077, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("also_keyword", 302);
			LeaveRule("also_keyword", 302);
			LeaveRule_also_keyword();
			if (state.backtracking > 0) { Memoize(input, 302, also_keyword_StartIndex); }

		}
		DebugLocation(1039, 97);
		} finally { DebugExitRule(GrammarFileName, "also_keyword"); }
		return retval;

	}
	// $ANTLR end "also_keyword"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();

	// $ANTLR start "literal"
	// cs.g:1041:1: literal : ( Real_literal | NUMBER | Hex_number | Character_literal | STRINGLITERAL | Verbatim_string_literal | TRUE | FALSE | NULL );
	[GrammarRule("literal")]
	public XAstParserRuleReturnScope literal()
	{
		EnterRule_literal();
		EnterRule("literal", 303);
		var retval = new XAstParserRuleReturnScope("literal");
		
		retval.Start = (IToken)input.LT(1);
		int literal_StartIndex = input.Index;

		object root_0 = default(object);

		IToken set1078 = default(IToken);

		object set1078_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(1041, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 303)) { return retval; }

			// cs.g:1041:8: ( Real_literal | NUMBER | Hex_number | Character_literal | STRINGLITERAL | Verbatim_string_literal | TRUE | FALSE | NULL )
			DebugEnterAlt(1);
			// cs.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1041, 8);

			set1078=(IToken)input.LT(1);
			if (input.LA(1)==Character_literal||input.LA(1)==FALSE||input.LA(1)==Hex_number||(input.LA(1)>=NULL && input.LA(1)<=NUMBER)||input.LA(1)==Real_literal||input.LA(1)==STRINGLITERAL||input.LA(1)==TRUE||input.LA(1)==Verbatim_string_literal)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set1078, retval));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 303);
			LeaveRule("literal", 303);
			LeaveRule_literal();
			if (state.backtracking > 0) { Memoize(input, 303, literal_StartIndex); }

		}
		DebugLocation(1051, 4);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_assignment_list();
	partial void LeaveRule_assignment_list();

	// $ANTLR start "assignment_list"
	// cs.g:1322:1: assignment_list : ( assignment ';' )+ ;
	[GrammarRule("assignment_list")]
	public XAstParserRuleReturnScope assignment_list()
	{
		EnterRule_assignment_list();
		EnterRule("assignment_list", 304);
		var retval = new XAstParserRuleReturnScope("assignment_list");
		
		retval.Start = (IToken)input.LT(1);
		int assignment_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal1080 = default(IToken);
		XAstParserRuleReturnScope assignment1079 = default(XAstParserRuleReturnScope);

		object char_literal1080_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assignment_list");
		DebugLocation(1322, 22);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 304)) { return retval; }

			// cs.g:1322:16: ( ( assignment ';' )+ )
			DebugEnterAlt(1);
			// cs.g:1323:5: ( assignment ';' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1323, 5);
			// cs.g:1323:5: ( assignment ';' )+
			int cnt273=0;
			try { DebugEnterSubRule(273);
			while (true)
			{
				int alt273=2;
				try { DebugEnterDecision(273, false);
				int LA273_0 = input.LA(1);

				if ((LA273_0==Character_literal||LA273_0==FALSE||(LA273_0>=Hex_number && LA273_0<=IDENTIFIER)||(LA273_0>=MINUS && LA273_0<=NUMBER)||LA273_0==Real_literal||LA273_0==STRINGLITERAL||LA273_0==TRUE||LA273_0==Verbatim_string_literal||LA273_0==61||LA273_0==66||(LA273_0>=68 && LA273_0<=69)||(LA273_0>=71 && LA273_0<=72)||LA273_0==75||LA273_0==95||(LA273_0>=97 && LA273_0<=98)||(LA273_0>=100 && LA273_0<=103)||(LA273_0>=105 && LA273_0<=106)||(LA273_0>=109 && LA273_0<=110)||(LA273_0>=114 && LA273_0<=117)||(LA273_0>=119 && LA273_0<=120)||LA273_0==122||LA273_0==126||LA273_0==129||LA273_0==132||LA273_0==135||LA273_0==138||LA273_0==141||(LA273_0>=143 && LA273_0<=144)||(LA273_0>=146 && LA273_0<=148)||(LA273_0>=150 && LA273_0<=152)||LA273_0==154||LA273_0==157||LA273_0==160||LA273_0==162||LA273_0==167||LA273_0==169||(LA273_0>=171 && LA273_0<=174)||LA273_0==177||LA273_0==180||(LA273_0>=183 && LA273_0<=187)||(LA273_0>=189 && LA273_0<=190)||LA273_0==194||LA273_0==196||LA273_0==202))
				{
					alt273 = 1;
				}


				} finally { DebugExitDecision(273); }
				switch (alt273)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1323:6: assignment ';'
					{
					DebugLocation(1323, 6);
					PushFollow(Follow._assignment_in_assignment_list12736);
					assignment1079=assignment();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, assignment1079.Tree, assignment1079, retval);
					DebugLocation(1323, 17);
					char_literal1080=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_assignment_list12738), "SEMI"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1080_tree = (object)adaptor.Create(char_literal1080, retval);
					adaptor.AddChild(root_0, char_literal1080_tree);
					}

					}
					break;

				default:
					if (cnt273 >= 1)
						goto loop273;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee273 = new EarlyExitException( 273, input );
					DebugRecognitionException(eee273);
					throw eee273;
				}
				cnt273++;
			}
			loop273:
				;

			} finally { DebugExitSubRule(273); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("assignment_list", 304);
			LeaveRule("assignment_list", 304);
			LeaveRule_assignment_list();
			if (state.backtracking > 0) { Memoize(input, 304, assignment_list_StartIndex); }

		}
		DebugLocation(1323, 22);
		} finally { DebugExitRule(GrammarFileName, "assignment_list"); }
		return retval;

	}
	// $ANTLR end "assignment_list"

	partial void EnterRule_field_declarations();
	partial void LeaveRule_field_declarations();

	// $ANTLR start "field_declarations"
	// cs.g:1324:1: field_declarations : ( ( attributes )? ( modifiers )? type field_declaration )+ ;
	[GrammarRule("field_declarations")]
	public XAstParserRuleReturnScope field_declarations()
	{
		EnterRule_field_declarations();
		EnterRule("field_declarations", 305);
		var retval = new XAstParserRuleReturnScope("field_declarations");
		
		retval.Start = (IToken)input.LT(1);
		int field_declarations_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope attributes1081 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope modifiers1082 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type1083 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope field_declaration1084 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "field_declarations");
		DebugLocation(1324, 59);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 305)) { return retval; }

			// cs.g:1324:19: ( ( ( attributes )? ( modifiers )? type field_declaration )+ )
			DebugEnterAlt(1);
			// cs.g:1325:5: ( ( attributes )? ( modifiers )? type field_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1325, 5);
			// cs.g:1325:5: ( ( attributes )? ( modifiers )? type field_declaration )+
			int cnt276=0;
			try { DebugEnterSubRule(276);
			while (true)
			{
				int alt276=2;
				try { DebugEnterDecision(276, false);
				int LA276_0 = input.LA(1);

				if ((LA276_0==IDENTIFIER||LA276_0==91||(LA276_0>=95 && LA276_0<=98)||(LA276_0>=100 && LA276_0<=101)||LA276_0==103||(LA276_0>=105 && LA276_0<=106)||LA276_0==109||LA276_0==114||LA276_0==117||(LA276_0>=119 && LA276_0<=120)||LA276_0==122||(LA276_0>=125 && LA276_0<=126)||LA276_0==129||LA276_0==132||LA276_0==135||LA276_0==138||(LA276_0>=140 && LA276_0<=141)||(LA276_0>=143 && LA276_0<=144)||(LA276_0>=146 && LA276_0<=148)||(LA276_0>=150 && LA276_0<=152)||LA276_0==154||(LA276_0>=156 && LA276_0<=157)||(LA276_0>=160 && LA276_0<=165)||LA276_0==167||(LA276_0>=169 && LA276_0<=173)||(LA276_0>=176 && LA276_0<=177)||LA276_0==183||(LA276_0>=185 && LA276_0<=186)||(LA276_0>=188 && LA276_0<=194)||LA276_0==196))
				{
					alt276 = 1;
				}


				} finally { DebugExitDecision(276); }
				switch (alt276)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1325:6: ( attributes )? ( modifiers )? type field_declaration
					{
					DebugLocation(1325, 6);
					// cs.g:1325:6: ( attributes )?
					int alt274=2;
					try { DebugEnterSubRule(274);
					try { DebugEnterDecision(274, false);
					int LA274_0 = input.LA(1);

					if ((LA274_0==91))
					{
						alt274 = 1;
					}
					} finally { DebugExitDecision(274); }
					switch (alt274)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:1325:6: attributes
						{
						DebugLocation(1325, 6);
						PushFollow(Follow._attributes_in_field_declarations12752);
						attributes1081=attributes();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, attributes1081.Tree, attributes1081, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(274); }

					DebugLocation(1325, 20);
					// cs.g:1325:20: ( modifiers )?
					int alt275=2;
					try { DebugEnterSubRule(275);
					try { DebugEnterDecision(275, false);
					int LA275_0 = input.LA(1);

					if ((LA275_0==96||LA275_0==125||LA275_0==140||LA275_0==150||LA275_0==156||LA275_0==161||(LA275_0>=163 && LA275_0<=165)||LA275_0==170||LA275_0==176||LA275_0==188||LA275_0==191||LA275_0==193))
					{
						alt275 = 1;
					}
					} finally { DebugExitDecision(275); }
					switch (alt275)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:1325:20: modifiers
						{
						DebugLocation(1325, 20);
						PushFollow(Follow._modifiers_in_field_declarations12757);
						modifiers1082=modifiers();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers1082.Tree, modifiers1082, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(275); }

					DebugLocation(1325, 33);
					PushFollow(Follow._type_in_field_declarations12762);
					type1083=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type1083.Tree, type1083, retval);
					DebugLocation(1325, 40);
					PushFollow(Follow._field_declaration_in_field_declarations12766);
					field_declaration1084=field_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, field_declaration1084.Tree, field_declaration1084, retval);

					}
					break;

				default:
					if (cnt276 >= 1)
						goto loop276;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee276 = new EarlyExitException( 276, input );
					DebugRecognitionException(eee276);
					throw eee276;
				}
				cnt276++;
			}
			loop276:
				;

			} finally { DebugExitSubRule(276); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("field_declarations", 305);
			LeaveRule("field_declarations", 305);
			LeaveRule_field_declarations();
			if (state.backtracking > 0) { Memoize(input, 305, field_declarations_StartIndex); }

		}
		DebugLocation(1325, 59);
		} finally { DebugExitRule(GrammarFileName, "field_declarations"); }
		return retval;

	}
	// $ANTLR end "field_declarations"

	partial void EnterRule_property_declaration_list();
	partial void LeaveRule_property_declaration_list();

	// $ANTLR start "property_declaration_list"
	// cs.g:1326:1: property_declaration_list : ( ( attributes )? ( modifiers )? type property_declaration )+ ;
	[GrammarRule("property_declaration_list")]
	public XAstParserRuleReturnScope property_declaration_list()
	{
		EnterRule_property_declaration_list();
		EnterRule("property_declaration_list", 306);
		var retval = new XAstParserRuleReturnScope("property_declaration_list");
		
		retval.Start = (IToken)input.LT(1);
		int property_declaration_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope attributes1085 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope modifiers1086 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type1087 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope property_declaration1088 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "property_declaration_list");
		DebugLocation(1326, 62);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 306)) { return retval; }

			// cs.g:1326:26: ( ( ( attributes )? ( modifiers )? type property_declaration )+ )
			DebugEnterAlt(1);
			// cs.g:1327:5: ( ( attributes )? ( modifiers )? type property_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1327, 5);
			// cs.g:1327:5: ( ( attributes )? ( modifiers )? type property_declaration )+
			int cnt279=0;
			try { DebugEnterSubRule(279);
			while (true)
			{
				int alt279=2;
				try { DebugEnterDecision(279, false);
				int LA279_0 = input.LA(1);

				if ((LA279_0==IDENTIFIER||LA279_0==91||(LA279_0>=95 && LA279_0<=98)||(LA279_0>=100 && LA279_0<=101)||LA279_0==103||(LA279_0>=105 && LA279_0<=106)||LA279_0==109||LA279_0==114||LA279_0==117||(LA279_0>=119 && LA279_0<=120)||LA279_0==122||(LA279_0>=125 && LA279_0<=126)||LA279_0==129||LA279_0==132||LA279_0==135||LA279_0==138||(LA279_0>=140 && LA279_0<=141)||(LA279_0>=143 && LA279_0<=144)||(LA279_0>=146 && LA279_0<=148)||(LA279_0>=150 && LA279_0<=152)||LA279_0==154||(LA279_0>=156 && LA279_0<=157)||(LA279_0>=160 && LA279_0<=165)||LA279_0==167||(LA279_0>=169 && LA279_0<=173)||(LA279_0>=176 && LA279_0<=177)||LA279_0==183||(LA279_0>=185 && LA279_0<=186)||(LA279_0>=188 && LA279_0<=194)||LA279_0==196))
				{
					alt279 = 1;
				}


				} finally { DebugExitDecision(279); }
				switch (alt279)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1327:6: ( attributes )? ( modifiers )? type property_declaration
					{
					DebugLocation(1327, 6);
					// cs.g:1327:6: ( attributes )?
					int alt277=2;
					try { DebugEnterSubRule(277);
					try { DebugEnterDecision(277, false);
					int LA277_0 = input.LA(1);

					if ((LA277_0==91))
					{
						alt277 = 1;
					}
					} finally { DebugExitDecision(277); }
					switch (alt277)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:1327:6: attributes
						{
						DebugLocation(1327, 6);
						PushFollow(Follow._attributes_in_property_declaration_list12780);
						attributes1085=attributes();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, attributes1085.Tree, attributes1085, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(277); }

					DebugLocation(1327, 20);
					// cs.g:1327:20: ( modifiers )?
					int alt278=2;
					try { DebugEnterSubRule(278);
					try { DebugEnterDecision(278, false);
					int LA278_0 = input.LA(1);

					if ((LA278_0==96||LA278_0==125||LA278_0==140||LA278_0==150||LA278_0==156||LA278_0==161||(LA278_0>=163 && LA278_0<=165)||LA278_0==170||LA278_0==176||LA278_0==188||LA278_0==191||LA278_0==193))
					{
						alt278 = 1;
					}
					} finally { DebugExitDecision(278); }
					switch (alt278)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:1327:20: modifiers
						{
						DebugLocation(1327, 20);
						PushFollow(Follow._modifiers_in_property_declaration_list12785);
						modifiers1086=modifiers();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers1086.Tree, modifiers1086, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(278); }

					DebugLocation(1327, 33);
					PushFollow(Follow._type_in_property_declaration_list12790);
					type1087=type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, type1087.Tree, type1087, retval);
					DebugLocation(1327, 40);
					PushFollow(Follow._property_declaration_in_property_declaration_list12794);
					property_declaration1088=property_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, property_declaration1088.Tree, property_declaration1088, retval);

					}
					break;

				default:
					if (cnt279 >= 1)
						goto loop279;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee279 = new EarlyExitException( 279, input );
					DebugRecognitionException(eee279);
					throw eee279;
				}
				cnt279++;
			}
			loop279:
				;

			} finally { DebugExitSubRule(279); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("property_declaration_list", 306);
			LeaveRule("property_declaration_list", 306);
			LeaveRule_property_declaration_list();
			if (state.backtracking > 0) { Memoize(input, 306, property_declaration_list_StartIndex); }

		}
		DebugLocation(1327, 62);
		} finally { DebugExitRule(GrammarFileName, "property_declaration_list"); }
		return retval;

	}
	// $ANTLR end "property_declaration_list"

	partial void EnterRule_constant_declarations();
	partial void LeaveRule_constant_declarations();

	// $ANTLR start "constant_declarations"
	// cs.g:1328:1: constant_declarations : ( constant_declaration )+ ;
	[GrammarRule("constant_declarations")]
	public XAstParserRuleReturnScope constant_declarations()
	{
		EnterRule_constant_declarations();
		EnterRule("constant_declarations", 307);
		var retval = new XAstParserRuleReturnScope("constant_declarations");
		
		retval.Start = (IToken)input.LT(1);
		int constant_declarations_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope constant_declaration1089 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "constant_declarations");
		DebugLocation(1328, 25);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 307)) { return retval; }

			// cs.g:1328:22: ( ( constant_declaration )+ )
			DebugEnterAlt(1);
			// cs.g:1329:5: ( constant_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1329, 5);
			// cs.g:1329:5: ( constant_declaration )+
			int cnt280=0;
			try { DebugEnterSubRule(280);
			while (true)
			{
				int alt280=2;
				try { DebugEnterDecision(280, false);
				int LA280_0 = input.LA(1);

				if ((LA280_0==112))
				{
					alt280 = 1;
				}


				} finally { DebugExitDecision(280); }
				switch (alt280)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1329:5: constant_declaration
					{
					DebugLocation(1329, 5);
					PushFollow(Follow._constant_declaration_in_constant_declarations12807);
					constant_declaration1089=constant_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, constant_declaration1089.Tree, constant_declaration1089, retval);

					}
					break;

				default:
					if (cnt280 >= 1)
						goto loop280;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee280 = new EarlyExitException( 280, input );
					DebugRecognitionException(eee280);
					throw eee280;
				}
				cnt280++;
			}
			loop280:
				;

			} finally { DebugExitSubRule(280); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("constant_declarations", 307);
			LeaveRule("constant_declarations", 307);
			LeaveRule_constant_declarations();
			if (state.backtracking > 0) { Memoize(input, 307, constant_declarations_StartIndex); }

		}
		DebugLocation(1329, 25);
		} finally { DebugExitRule(GrammarFileName, "constant_declarations"); }
		return retval;

	}
	// $ANTLR end "constant_declarations"

	partial void EnterRule_literals();
	partial void LeaveRule_literals();

	// $ANTLR start "literals"
	// cs.g:1330:1: literals : ( literal )+ ;
	[GrammarRule("literals")]
	public XAstParserRuleReturnScope literals()
	{
		EnterRule_literals();
		EnterRule("literals", 308);
		var retval = new XAstParserRuleReturnScope("literals");
		
		retval.Start = (IToken)input.LT(1);
		int literals_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope literal1090 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "literals");
		DebugLocation(1330, 13);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 308)) { return retval; }

			// cs.g:1330:9: ( ( literal )+ )
			DebugEnterAlt(1);
			// cs.g:1331:5: ( literal )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1331, 5);
			// cs.g:1331:5: ( literal )+
			int cnt281=0;
			try { DebugEnterSubRule(281);
			while (true)
			{
				int alt281=2;
				try { DebugEnterDecision(281, false);
				int LA281_0 = input.LA(1);

				if ((LA281_0==Character_literal||LA281_0==FALSE||LA281_0==Hex_number||(LA281_0>=NULL && LA281_0<=NUMBER)||LA281_0==Real_literal||LA281_0==STRINGLITERAL||LA281_0==TRUE||LA281_0==Verbatim_string_literal))
				{
					alt281 = 1;
				}


				} finally { DebugExitDecision(281); }
				switch (alt281)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1331:5: literal
					{
					DebugLocation(1331, 5);
					PushFollow(Follow._literal_in_literals12818);
					literal1090=literal();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, literal1090.Tree, literal1090, retval);

					}
					break;

				default:
					if (cnt281 >= 1)
						goto loop281;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee281 = new EarlyExitException( 281, input );
					DebugRecognitionException(eee281);
					throw eee281;
				}
				cnt281++;
			}
			loop281:
				;

			} finally { DebugExitSubRule(281); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literals", 308);
			LeaveRule("literals", 308);
			LeaveRule_literals();
			if (state.backtracking > 0) { Memoize(input, 308, literals_StartIndex); }

		}
		DebugLocation(1331, 13);
		} finally { DebugExitRule(GrammarFileName, "literals"); }
		return retval;

	}
	// $ANTLR end "literals"

	partial void EnterRule_delegate_declaration_list();
	partial void LeaveRule_delegate_declaration_list();

	// $ANTLR start "delegate_declaration_list"
	// cs.g:1332:1: delegate_declaration_list : ( ( attributes )? ( modifiers )? delegate_declaration )+ ;
	[GrammarRule("delegate_declaration_list")]
	public XAstParserRuleReturnScope delegate_declaration_list()
	{
		EnterRule_delegate_declaration_list();
		EnterRule("delegate_declaration_list", 309);
		var retval = new XAstParserRuleReturnScope("delegate_declaration_list");
		
		retval.Start = (IToken)input.LT(1);
		int delegate_declaration_list_StartIndex = input.Index;

		object root_0 = default(object);

		XAstParserRuleReturnScope attributes1091 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope modifiers1092 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope delegate_declaration1093 = default(XAstParserRuleReturnScope);

		try { DebugEnterRule(GrammarFileName, "delegate_declaration_list");
		DebugLocation(1332, 55);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 309)) { return retval; }

			// cs.g:1332:26: ( ( ( attributes )? ( modifiers )? delegate_declaration )+ )
			DebugEnterAlt(1);
			// cs.g:1333:5: ( ( attributes )? ( modifiers )? delegate_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1333, 5);
			// cs.g:1333:5: ( ( attributes )? ( modifiers )? delegate_declaration )+
			int cnt284=0;
			try { DebugEnterSubRule(284);
			while (true)
			{
				int alt284=2;
				try { DebugEnterDecision(284, false);
				int LA284_0 = input.LA(1);

				if ((LA284_0==91||LA284_0==96||LA284_0==116||LA284_0==125||LA284_0==140||LA284_0==150||LA284_0==156||LA284_0==161||(LA284_0>=163 && LA284_0<=165)||LA284_0==170||LA284_0==176||LA284_0==188||LA284_0==191||LA284_0==193))
				{
					alt284 = 1;
				}


				} finally { DebugExitDecision(284); }
				switch (alt284)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1333:6: ( attributes )? ( modifiers )? delegate_declaration
					{
					DebugLocation(1333, 6);
					// cs.g:1333:6: ( attributes )?
					int alt282=2;
					try { DebugEnterSubRule(282);
					try { DebugEnterDecision(282, false);
					int LA282_0 = input.LA(1);

					if ((LA282_0==91))
					{
						alt282 = 1;
					}
					} finally { DebugExitDecision(282); }
					switch (alt282)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:1333:6: attributes
						{
						DebugLocation(1333, 6);
						PushFollow(Follow._attributes_in_delegate_declaration_list12831);
						attributes1091=attributes();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, attributes1091.Tree, attributes1091, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(282); }

					DebugLocation(1333, 20);
					// cs.g:1333:20: ( modifiers )?
					int alt283=2;
					try { DebugEnterSubRule(283);
					try { DebugEnterDecision(283, false);
					int LA283_0 = input.LA(1);

					if ((LA283_0==96||LA283_0==125||LA283_0==140||LA283_0==150||LA283_0==156||LA283_0==161||(LA283_0>=163 && LA283_0<=165)||LA283_0==170||LA283_0==176||LA283_0==188||LA283_0==191||LA283_0==193))
					{
						alt283 = 1;
					}
					} finally { DebugExitDecision(283); }
					switch (alt283)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:1333:20: modifiers
						{
						DebugLocation(1333, 20);
						PushFollow(Follow._modifiers_in_delegate_declaration_list12836);
						modifiers1092=modifiers();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers1092.Tree, modifiers1092, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(283); }

					DebugLocation(1333, 33);
					PushFollow(Follow._delegate_declaration_in_delegate_declaration_list12841);
					delegate_declaration1093=delegate_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, delegate_declaration1093.Tree, delegate_declaration1093, retval);

					}
					break;

				default:
					if (cnt284 >= 1)
						goto loop284;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee284 = new EarlyExitException( 284, input );
					DebugRecognitionException(eee284);
					throw eee284;
				}
				cnt284++;
			}
			loop284:
				;

			} finally { DebugExitSubRule(284); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("delegate_declaration_list", 309);
			LeaveRule("delegate_declaration_list", 309);
			LeaveRule_delegate_declaration_list();
			if (state.backtracking > 0) { Memoize(input, 309, delegate_declaration_list_StartIndex); }

		}
		DebugLocation(1333, 55);
		} finally { DebugExitRule(GrammarFileName, "delegate_declaration_list"); }
		return retval;

	}
	// $ANTLR end "delegate_declaration_list"

	partial void EnterRule_local_variable_declaration_list();
	partial void LeaveRule_local_variable_declaration_list();

	// $ANTLR start "local_variable_declaration_list"
	// cs.g:1334:1: local_variable_declaration_list : ( local_variable_declaration ';' )+ ;
	[GrammarRule("local_variable_declaration_list")]
	public XAstParserRuleReturnScope local_variable_declaration_list()
	{
		EnterRule_local_variable_declaration_list();
		EnterRule("local_variable_declaration_list", 310);
		var retval = new XAstParserRuleReturnScope("local_variable_declaration_list");
		
		retval.Start = (IToken)input.LT(1);
		int local_variable_declaration_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal1095 = default(IToken);
		XAstParserRuleReturnScope local_variable_declaration1094 = default(XAstParserRuleReturnScope);

		object char_literal1095_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "local_variable_declaration_list");
		DebugLocation(1334, 38);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 310)) { return retval; }

			// cs.g:1334:32: ( ( local_variable_declaration ';' )+ )
			DebugEnterAlt(1);
			// cs.g:1335:5: ( local_variable_declaration ';' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1335, 5);
			// cs.g:1335:5: ( local_variable_declaration ';' )+
			int cnt285=0;
			try { DebugEnterSubRule(285);
			while (true)
			{
				int alt285=2;
				try { DebugEnterDecision(285, false);
				int LA285_0 = input.LA(1);

				if ((LA285_0==IDENTIFIER||LA285_0==95||(LA285_0>=97 && LA285_0<=98)||(LA285_0>=100 && LA285_0<=101)||LA285_0==103||(LA285_0>=105 && LA285_0<=106)||LA285_0==109||LA285_0==114||LA285_0==117||(LA285_0>=119 && LA285_0<=120)||LA285_0==122||LA285_0==126||LA285_0==129||LA285_0==132||LA285_0==135||LA285_0==138||LA285_0==141||(LA285_0>=143 && LA285_0<=144)||(LA285_0>=146 && LA285_0<=148)||(LA285_0>=151 && LA285_0<=152)||LA285_0==154||LA285_0==157||LA285_0==160||LA285_0==162||LA285_0==167||LA285_0==169||(LA285_0>=171 && LA285_0<=173)||LA285_0==177||LA285_0==183||(LA285_0>=185 && LA285_0<=186)||(LA285_0>=189 && LA285_0<=190)||LA285_0==192||LA285_0==194||LA285_0==196))
				{
					alt285 = 1;
				}


				} finally { DebugExitDecision(285); }
				switch (alt285)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1335:6: local_variable_declaration ';'
					{
					DebugLocation(1335, 6);
					PushFollow(Follow._local_variable_declaration_in_local_variable_declaration_list12855);
					local_variable_declaration1094=local_variable_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_declaration1094.Tree, local_variable_declaration1094, retval);
					DebugLocation(1335, 33);
					char_literal1095=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_local_variable_declaration_list12857), "SEMI"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1095_tree = (object)adaptor.Create(char_literal1095, retval);
					adaptor.AddChild(root_0, char_literal1095_tree);
					}

					}
					break;

				default:
					if (cnt285 >= 1)
						goto loop285;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee285 = new EarlyExitException( 285, input );
					DebugRecognitionException(eee285);
					throw eee285;
				}
				cnt285++;
			}
			loop285:
				;

			} finally { DebugExitSubRule(285); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("local_variable_declaration_list", 310);
			LeaveRule("local_variable_declaration_list", 310);
			LeaveRule_local_variable_declaration_list();
			if (state.backtracking > 0) { Memoize(input, 310, local_variable_declaration_list_StartIndex); }

		}
		DebugLocation(1335, 38);
		} finally { DebugExitRule(GrammarFileName, "local_variable_declaration_list"); }
		return retval;

	}
	// $ANTLR end "local_variable_declaration_list"

	partial void EnterRule_local_variable_initializer_list();
	partial void LeaveRule_local_variable_initializer_list();

	// $ANTLR start "local_variable_initializer_list"
	// cs.g:1336:1: local_variable_initializer_list : ( local_variable_initializer ';' )+ ;
	[GrammarRule("local_variable_initializer_list")]
	public XAstParserRuleReturnScope local_variable_initializer_list()
	{
		EnterRule_local_variable_initializer_list();
		EnterRule("local_variable_initializer_list", 311);
		var retval = new XAstParserRuleReturnScope("local_variable_initializer_list");
		
		retval.Start = (IToken)input.LT(1);
		int local_variable_initializer_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal1097 = default(IToken);
		XAstParserRuleReturnScope local_variable_initializer1096 = default(XAstParserRuleReturnScope);

		object char_literal1097_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "local_variable_initializer_list");
		DebugLocation(1336, 38);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 311)) { return retval; }

			// cs.g:1336:32: ( ( local_variable_initializer ';' )+ )
			DebugEnterAlt(1);
			// cs.g:1337:5: ( local_variable_initializer ';' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1337, 5);
			// cs.g:1337:5: ( local_variable_initializer ';' )+
			int cnt286=0;
			try { DebugEnterSubRule(286);
			while (true)
			{
				int alt286=2;
				try { DebugEnterDecision(286, false);
				int LA286_0 = input.LA(1);

				if ((LA286_0==Character_literal||LA286_0==FALSE||(LA286_0>=Hex_number && LA286_0<=IDENTIFIER)||(LA286_0>=MINUS && LA286_0<=NUMBER)||LA286_0==Real_literal||LA286_0==STRINGLITERAL||LA286_0==TRUE||LA286_0==Verbatim_string_literal||LA286_0==61||LA286_0==66||(LA286_0>=68 && LA286_0<=69)||(LA286_0>=71 && LA286_0<=72)||LA286_0==75||LA286_0==95||(LA286_0>=97 && LA286_0<=98)||(LA286_0>=100 && LA286_0<=103)||(LA286_0>=105 && LA286_0<=106)||(LA286_0>=109 && LA286_0<=110)||(LA286_0>=114 && LA286_0<=117)||(LA286_0>=119 && LA286_0<=120)||LA286_0==122||LA286_0==126||LA286_0==129||LA286_0==132||LA286_0==135||LA286_0==138||LA286_0==141||(LA286_0>=143 && LA286_0<=144)||(LA286_0>=146 && LA286_0<=148)||(LA286_0>=150 && LA286_0<=152)||LA286_0==154||LA286_0==157||LA286_0==160||LA286_0==162||LA286_0==167||LA286_0==169||(LA286_0>=171 && LA286_0<=175)||LA286_0==177||LA286_0==180||(LA286_0>=183 && LA286_0<=187)||(LA286_0>=189 && LA286_0<=190)||LA286_0==194||(LA286_0>=196 && LA286_0<=197)||LA286_0==202))
				{
					alt286 = 1;
				}


				} finally { DebugExitDecision(286); }
				switch (alt286)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1337:6: local_variable_initializer ';'
					{
					DebugLocation(1337, 6);
					PushFollow(Follow._local_variable_initializer_in_local_variable_initializer_list12871);
					local_variable_initializer1096=local_variable_initializer();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, local_variable_initializer1096.Tree, local_variable_initializer1096, retval);
					DebugLocation(1337, 33);
					char_literal1097=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_local_variable_initializer_list12873), "SEMI"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1097_tree = (object)adaptor.Create(char_literal1097, retval);
					adaptor.AddChild(root_0, char_literal1097_tree);
					}

					}
					break;

				default:
					if (cnt286 >= 1)
						goto loop286;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee286 = new EarlyExitException( 286, input );
					DebugRecognitionException(eee286);
					throw eee286;
				}
				cnt286++;
			}
			loop286:
				;

			} finally { DebugExitSubRule(286); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("local_variable_initializer_list", 311);
			LeaveRule("local_variable_initializer_list", 311);
			LeaveRule_local_variable_initializer_list();
			if (state.backtracking > 0) { Memoize(input, 311, local_variable_initializer_list_StartIndex); }

		}
		DebugLocation(1337, 38);
		} finally { DebugExitRule(GrammarFileName, "local_variable_initializer_list"); }
		return retval;

	}
	// $ANTLR end "local_variable_initializer_list"

	partial void EnterRule_expression_list_test();
	partial void LeaveRule_expression_list_test();

	// $ANTLR start "expression_list_test"
	// cs.g:1338:1: expression_list_test : ( expression ';' )+ ;
	[GrammarRule("expression_list_test")]
	public XAstParserRuleReturnScope expression_list_test()
	{
		EnterRule_expression_list_test();
		EnterRule("expression_list_test", 312);
		var retval = new XAstParserRuleReturnScope("expression_list_test");
		
		retval.Start = (IToken)input.LT(1);
		int expression_list_test_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal1099 = default(IToken);
		XAstParserRuleReturnScope expression1098 = default(XAstParserRuleReturnScope);

		object char_literal1099_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "expression_list_test");
		DebugLocation(1338, 22);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 312)) { return retval; }

			// cs.g:1338:21: ( ( expression ';' )+ )
			DebugEnterAlt(1);
			// cs.g:1339:5: ( expression ';' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1339, 5);
			// cs.g:1339:5: ( expression ';' )+
			int cnt287=0;
			try { DebugEnterSubRule(287);
			while (true)
			{
				int alt287=2;
				try { DebugEnterDecision(287, false);
				int LA287_0 = input.LA(1);

				if ((LA287_0==Character_literal||LA287_0==FALSE||(LA287_0>=Hex_number && LA287_0<=IDENTIFIER)||(LA287_0>=MINUS && LA287_0<=NUMBER)||LA287_0==Real_literal||LA287_0==STRINGLITERAL||LA287_0==TRUE||LA287_0==Verbatim_string_literal||LA287_0==61||LA287_0==66||(LA287_0>=68 && LA287_0<=69)||(LA287_0>=71 && LA287_0<=72)||LA287_0==75||LA287_0==95||(LA287_0>=97 && LA287_0<=98)||(LA287_0>=100 && LA287_0<=103)||(LA287_0>=105 && LA287_0<=106)||(LA287_0>=109 && LA287_0<=110)||(LA287_0>=114 && LA287_0<=117)||(LA287_0>=119 && LA287_0<=120)||LA287_0==122||LA287_0==126||LA287_0==129||LA287_0==132||LA287_0==135||LA287_0==138||LA287_0==141||(LA287_0>=143 && LA287_0<=144)||(LA287_0>=146 && LA287_0<=148)||(LA287_0>=150 && LA287_0<=152)||LA287_0==154||LA287_0==157||LA287_0==160||LA287_0==162||LA287_0==167||LA287_0==169||(LA287_0>=171 && LA287_0<=174)||LA287_0==177||LA287_0==180||(LA287_0>=183 && LA287_0<=187)||(LA287_0>=189 && LA287_0<=190)||LA287_0==194||LA287_0==196||LA287_0==202))
				{
					alt287 = 1;
				}


				} finally { DebugExitDecision(287); }
				switch (alt287)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1339:6: expression ';'
					{
					DebugLocation(1339, 6);
					PushFollow(Follow._expression_in_expression_list_test12887);
					expression1098=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expression1098.Tree, expression1098, retval);
					DebugLocation(1339, 17);
					char_literal1099=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_expression_list_test12889), "SEMI"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1099_tree = (object)adaptor.Create(char_literal1099, retval);
					adaptor.AddChild(root_0, char_literal1099_tree);
					}

					}
					break;

				default:
					if (cnt287 >= 1)
						goto loop287;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee287 = new EarlyExitException( 287, input );
					DebugRecognitionException(eee287);
					throw eee287;
				}
				cnt287++;
			}
			loop287:
				;

			} finally { DebugExitSubRule(287); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list_test", 312);
			LeaveRule("expression_list_test", 312);
			LeaveRule_expression_list_test();
			if (state.backtracking > 0) { Memoize(input, 312, expression_list_test_StartIndex); }

		}
		DebugLocation(1339, 22);
		} finally { DebugExitRule(GrammarFileName, "expression_list_test"); }
		return retval;

	}
	// $ANTLR end "expression_list_test"

	partial void EnterRule_unary_expression_list();
	partial void LeaveRule_unary_expression_list();

	// $ANTLR start "unary_expression_list"
	// cs.g:1340:1: unary_expression_list : ( unary_expression ';' )+ ;
	[GrammarRule("unary_expression_list")]
	public XAstParserRuleReturnScope unary_expression_list()
	{
		EnterRule_unary_expression_list();
		EnterRule("unary_expression_list", 313);
		var retval = new XAstParserRuleReturnScope("unary_expression_list");
		
		retval.Start = (IToken)input.LT(1);
		int unary_expression_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal1101 = default(IToken);
		XAstParserRuleReturnScope unary_expression1100 = default(XAstParserRuleReturnScope);

		object char_literal1101_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unary_expression_list");
		DebugLocation(1340, 28);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 313)) { return retval; }

			// cs.g:1340:22: ( ( unary_expression ';' )+ )
			DebugEnterAlt(1);
			// cs.g:1341:5: ( unary_expression ';' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1341, 5);
			// cs.g:1341:5: ( unary_expression ';' )+
			int cnt288=0;
			try { DebugEnterSubRule(288);
			while (true)
			{
				int alt288=2;
				try { DebugEnterDecision(288, false);
				int LA288_0 = input.LA(1);

				if ((LA288_0==Character_literal||LA288_0==FALSE||(LA288_0>=Hex_number && LA288_0<=IDENTIFIER)||(LA288_0>=MINUS && LA288_0<=NUMBER)||LA288_0==Real_literal||LA288_0==STRINGLITERAL||LA288_0==TRUE||LA288_0==Verbatim_string_literal||LA288_0==61||LA288_0==66||(LA288_0>=68 && LA288_0<=69)||(LA288_0>=71 && LA288_0<=72)||LA288_0==75||LA288_0==95||(LA288_0>=97 && LA288_0<=98)||(LA288_0>=100 && LA288_0<=103)||(LA288_0>=105 && LA288_0<=106)||(LA288_0>=109 && LA288_0<=110)||(LA288_0>=114 && LA288_0<=117)||(LA288_0>=119 && LA288_0<=120)||LA288_0==122||LA288_0==126||LA288_0==129||LA288_0==132||LA288_0==135||LA288_0==138||LA288_0==141||(LA288_0>=143 && LA288_0<=144)||(LA288_0>=146 && LA288_0<=148)||(LA288_0>=150 && LA288_0<=152)||LA288_0==154||LA288_0==157||LA288_0==160||LA288_0==162||LA288_0==167||LA288_0==169||(LA288_0>=171 && LA288_0<=174)||LA288_0==177||LA288_0==180||(LA288_0>=183 && LA288_0<=187)||(LA288_0>=189 && LA288_0<=190)||LA288_0==194||LA288_0==196||LA288_0==202))
				{
					alt288 = 1;
				}


				} finally { DebugExitDecision(288); }
				switch (alt288)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1341:6: unary_expression ';'
					{
					DebugLocation(1341, 6);
					PushFollow(Follow._unary_expression_in_unary_expression_list12903);
					unary_expression1100=unary_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unary_expression1100.Tree, unary_expression1100, retval);
					DebugLocation(1341, 23);
					char_literal1101=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_unary_expression_list12905), "SEMI"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1101_tree = (object)adaptor.Create(char_literal1101, retval);
					adaptor.AddChild(root_0, char_literal1101_tree);
					}

					}
					break;

				default:
					if (cnt288 >= 1)
						goto loop288;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee288 = new EarlyExitException( 288, input );
					DebugRecognitionException(eee288);
					throw eee288;
				}
				cnt288++;
			}
			loop288:
				;

			} finally { DebugExitSubRule(288); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_expression_list", 313);
			LeaveRule("unary_expression_list", 313);
			LeaveRule_unary_expression_list();
			if (state.backtracking > 0) { Memoize(input, 313, unary_expression_list_StartIndex); }

		}
		DebugLocation(1341, 28);
		} finally { DebugExitRule(GrammarFileName, "unary_expression_list"); }
		return retval;

	}
	// $ANTLR end "unary_expression_list"

	partial void EnterRule_invocation_expression_list();
	partial void LeaveRule_invocation_expression_list();

	// $ANTLR start "invocation_expression_list"
	// cs.g:1342:1: invocation_expression_list : ( invocation_expression ';' )+ ;
	[GrammarRule("invocation_expression_list")]
	public XAstParserRuleReturnScope invocation_expression_list()
	{
		EnterRule_invocation_expression_list();
		EnterRule("invocation_expression_list", 314);
		var retval = new XAstParserRuleReturnScope("invocation_expression_list");
		
		retval.Start = (IToken)input.LT(1);
		int invocation_expression_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal1103 = default(IToken);
		XAstParserRuleReturnScope invocation_expression1102 = default(XAstParserRuleReturnScope);

		object char_literal1103_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "invocation_expression_list");
		DebugLocation(1342, 33);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 314)) { return retval; }

			// cs.g:1342:27: ( ( invocation_expression ';' )+ )
			DebugEnterAlt(1);
			// cs.g:1343:5: ( invocation_expression ';' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1343, 5);
			// cs.g:1343:5: ( invocation_expression ';' )+
			int cnt289=0;
			try { DebugEnterSubRule(289);
			while (true)
			{
				int alt289=2;
				try { DebugEnterDecision(289, false);
				int LA289_0 = input.LA(1);

				if ((LA289_0==IDENTIFIER||LA289_0==95||(LA289_0>=97 && LA289_0<=98)||(LA289_0>=100 && LA289_0<=103)||(LA289_0>=105 && LA289_0<=106)||LA289_0==109||LA289_0==114||LA289_0==117||(LA289_0>=119 && LA289_0<=120)||LA289_0==122||LA289_0==126||LA289_0==129||LA289_0==132||LA289_0==135||LA289_0==138||LA289_0==141||(LA289_0>=143 && LA289_0<=144)||(LA289_0>=146 && LA289_0<=148)||(LA289_0>=151 && LA289_0<=152)||LA289_0==154||LA289_0==157||LA289_0==160||LA289_0==162||LA289_0==167||LA289_0==169||(LA289_0>=171 && LA289_0<=173)||LA289_0==177||LA289_0==180||(LA289_0>=183 && LA289_0<=186)||(LA289_0>=189 && LA289_0<=190)||LA289_0==194||LA289_0==196))
				{
					alt289 = 1;
				}


				} finally { DebugExitDecision(289); }
				switch (alt289)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1343:6: invocation_expression ';'
					{
					DebugLocation(1343, 6);
					PushFollow(Follow._invocation_expression_in_invocation_expression_list12919);
					invocation_expression1102=invocation_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, invocation_expression1102.Tree, invocation_expression1102, retval);
					DebugLocation(1343, 28);
					char_literal1103=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_invocation_expression_list12921), "SEMI"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1103_tree = (object)adaptor.Create(char_literal1103, retval);
					adaptor.AddChild(root_0, char_literal1103_tree);
					}

					}
					break;

				default:
					if (cnt289 >= 1)
						goto loop289;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee289 = new EarlyExitException( 289, input );
					DebugRecognitionException(eee289);
					throw eee289;
				}
				cnt289++;
			}
			loop289:
				;

			} finally { DebugExitSubRule(289); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("invocation_expression_list", 314);
			LeaveRule("invocation_expression_list", 314);
			LeaveRule_invocation_expression_list();
			if (state.backtracking > 0) { Memoize(input, 314, invocation_expression_list_StartIndex); }

		}
		DebugLocation(1343, 33);
		} finally { DebugExitRule(GrammarFileName, "invocation_expression_list"); }
		return retval;

	}
	// $ANTLR end "invocation_expression_list"

	partial void EnterRule_primary_expression_list();
	partial void LeaveRule_primary_expression_list();

	// $ANTLR start "primary_expression_list"
	// cs.g:1344:1: primary_expression_list : ( primary_expression ';' )+ ;
	[GrammarRule("primary_expression_list")]
	public XAstParserRuleReturnScope primary_expression_list()
	{
		EnterRule_primary_expression_list();
		EnterRule("primary_expression_list", 315);
		var retval = new XAstParserRuleReturnScope("primary_expression_list");
		
		retval.Start = (IToken)input.LT(1);
		int primary_expression_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal1105 = default(IToken);
		XAstParserRuleReturnScope primary_expression1104 = default(XAstParserRuleReturnScope);

		object char_literal1105_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primary_expression_list");
		DebugLocation(1344, 30);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 315)) { return retval; }

			// cs.g:1344:24: ( ( primary_expression ';' )+ )
			DebugEnterAlt(1);
			// cs.g:1345:5: ( primary_expression ';' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1345, 5);
			// cs.g:1345:5: ( primary_expression ';' )+
			int cnt290=0;
			try { DebugEnterSubRule(290);
			while (true)
			{
				int alt290=2;
				try { DebugEnterDecision(290, false);
				int LA290_0 = input.LA(1);

				if ((LA290_0==Character_literal||LA290_0==FALSE||(LA290_0>=Hex_number && LA290_0<=IDENTIFIER)||(LA290_0>=NULL && LA290_0<=NUMBER)||LA290_0==Real_literal||LA290_0==STRINGLITERAL||LA290_0==TRUE||LA290_0==Verbatim_string_literal||LA290_0==68||LA290_0==95||(LA290_0>=97 && LA290_0<=98)||(LA290_0>=100 && LA290_0<=103)||(LA290_0>=105 && LA290_0<=106)||(LA290_0>=109 && LA290_0<=110)||(LA290_0>=114 && LA290_0<=117)||(LA290_0>=119 && LA290_0<=120)||LA290_0==122||LA290_0==126||LA290_0==129||LA290_0==132||LA290_0==135||LA290_0==138||LA290_0==141||(LA290_0>=143 && LA290_0<=144)||(LA290_0>=146 && LA290_0<=148)||(LA290_0>=150 && LA290_0<=152)||LA290_0==154||LA290_0==157||LA290_0==160||LA290_0==162||LA290_0==167||LA290_0==169||(LA290_0>=171 && LA290_0<=174)||LA290_0==177||LA290_0==180||(LA290_0>=183 && LA290_0<=187)||(LA290_0>=189 && LA290_0<=190)||LA290_0==194||LA290_0==196))
				{
					alt290 = 1;
				}


				} finally { DebugExitDecision(290); }
				switch (alt290)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1345:6: primary_expression ';'
					{
					DebugLocation(1345, 6);
					PushFollow(Follow._primary_expression_in_primary_expression_list12935);
					primary_expression1104=primary_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, primary_expression1104.Tree, primary_expression1104, retval);
					DebugLocation(1345, 25);
					char_literal1105=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_primary_expression_list12937), "SEMI"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1105_tree = (object)adaptor.Create(char_literal1105, retval);
					adaptor.AddChild(root_0, char_literal1105_tree);
					}

					}
					break;

				default:
					if (cnt290 >= 1)
						goto loop290;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee290 = new EarlyExitException( 290, input );
					DebugRecognitionException(eee290);
					throw eee290;
				}
				cnt290++;
			}
			loop290:
				;

			} finally { DebugExitSubRule(290); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_expression_list", 315);
			LeaveRule("primary_expression_list", 315);
			LeaveRule_primary_expression_list();
			if (state.backtracking > 0) { Memoize(input, 315, primary_expression_list_StartIndex); }

		}
		DebugLocation(1345, 30);
		} finally { DebugExitRule(GrammarFileName, "primary_expression_list"); }
		return retval;

	}
	// $ANTLR end "primary_expression_list"

	partial void EnterRule_non_assignment_expression_list();
	partial void LeaveRule_non_assignment_expression_list();

	// $ANTLR start "non_assignment_expression_list"
	// cs.g:1346:1: non_assignment_expression_list : ( non_assignment_expression ';' )+ ;
	[GrammarRule("non_assignment_expression_list")]
	public XAstParserRuleReturnScope non_assignment_expression_list()
	{
		EnterRule_non_assignment_expression_list();
		EnterRule("non_assignment_expression_list", 316);
		var retval = new XAstParserRuleReturnScope("non_assignment_expression_list");
		
		retval.Start = (IToken)input.LT(1);
		int non_assignment_expression_list_StartIndex = input.Index;

		object root_0 = default(object);

		IToken char_literal1107 = default(IToken);
		XAstParserRuleReturnScope non_assignment_expression1106 = default(XAstParserRuleReturnScope);

		object char_literal1107_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "non_assignment_expression_list");
		DebugLocation(1346, 37);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 316)) { return retval; }

			// cs.g:1346:31: ( ( non_assignment_expression ';' )+ )
			DebugEnterAlt(1);
			// cs.g:1347:5: ( non_assignment_expression ';' )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1347, 5);
			// cs.g:1347:5: ( non_assignment_expression ';' )+
			int cnt291=0;
			try { DebugEnterSubRule(291);
			while (true)
			{
				int alt291=2;
				try { DebugEnterDecision(291, false);
				int LA291_0 = input.LA(1);

				if ((LA291_0==Character_literal||LA291_0==FALSE||(LA291_0>=Hex_number && LA291_0<=IDENTIFIER)||(LA291_0>=MINUS && LA291_0<=NUMBER)||LA291_0==Real_literal||LA291_0==STRINGLITERAL||LA291_0==TRUE||LA291_0==Verbatim_string_literal||LA291_0==61||LA291_0==66||(LA291_0>=68 && LA291_0<=69)||(LA291_0>=71 && LA291_0<=72)||LA291_0==75||LA291_0==95||(LA291_0>=97 && LA291_0<=98)||(LA291_0>=100 && LA291_0<=103)||(LA291_0>=105 && LA291_0<=106)||(LA291_0>=109 && LA291_0<=110)||(LA291_0>=114 && LA291_0<=117)||(LA291_0>=119 && LA291_0<=120)||LA291_0==122||LA291_0==126||LA291_0==129||LA291_0==132||LA291_0==135||LA291_0==138||LA291_0==141||(LA291_0>=143 && LA291_0<=144)||(LA291_0>=146 && LA291_0<=148)||(LA291_0>=150 && LA291_0<=152)||LA291_0==154||LA291_0==157||LA291_0==160||LA291_0==162||LA291_0==167||LA291_0==169||(LA291_0>=171 && LA291_0<=174)||LA291_0==177||LA291_0==180||(LA291_0>=183 && LA291_0<=187)||(LA291_0>=189 && LA291_0<=190)||LA291_0==194||LA291_0==196||LA291_0==202))
				{
					alt291 = 1;
				}


				} finally { DebugExitDecision(291); }
				switch (alt291)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1347:6: non_assignment_expression ';'
					{
					DebugLocation(1347, 6);
					PushFollow(Follow._non_assignment_expression_in_non_assignment_expression_list12951);
					non_assignment_expression1106=non_assignment_expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, non_assignment_expression1106.Tree, non_assignment_expression1106, retval);
					DebugLocation(1347, 32);
					char_literal1107=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_non_assignment_expression_list12953), "SEMI"); if (state.failed) return retval;
					if (state.backtracking == 0) {
					char_literal1107_tree = (object)adaptor.Create(char_literal1107, retval);
					adaptor.AddChild(root_0, char_literal1107_tree);
					}

					}
					break;

				default:
					if (cnt291 >= 1)
						goto loop291;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee291 = new EarlyExitException( 291, input );
					DebugRecognitionException(eee291);
					throw eee291;
				}
				cnt291++;
			}
			loop291:
				;

			} finally { DebugExitSubRule(291); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("non_assignment_expression_list", 316);
			LeaveRule("non_assignment_expression_list", 316);
			LeaveRule_non_assignment_expression_list();
			if (state.backtracking > 0) { Memoize(input, 316, non_assignment_expression_list_StartIndex); }

		}
		DebugLocation(1347, 37);
		} finally { DebugExitRule(GrammarFileName, "non_assignment_expression_list"); }
		return retval;

	}
	// $ANTLR end "non_assignment_expression_list"

	partial void EnterRule_method_declarations();
	partial void LeaveRule_method_declarations();

	// $ANTLR start "method_declarations"
	// cs.g:1348:1: method_declarations : ( ( modifiers )? ( 'void' | type ) method_declaration )+ ;
	[GrammarRule("method_declarations")]
	public XAstParserRuleReturnScope method_declarations()
	{
		EnterRule_method_declarations();
		EnterRule("method_declarations", 317);
		var retval = new XAstParserRuleReturnScope("method_declarations");
		
		retval.Start = (IToken)input.LT(1);
		int method_declarations_StartIndex = input.Index;

		object root_0 = default(object);

		IToken string_literal1109 = default(IToken);
		XAstParserRuleReturnScope modifiers1108 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope type1110 = default(XAstParserRuleReturnScope);
		XAstParserRuleReturnScope method_declaration1111 = default(XAstParserRuleReturnScope);

		object string_literal1109_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "method_declarations");
		DebugLocation(1348, 53);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 317)) { return retval; }

			// cs.g:1348:20: ( ( ( modifiers )? ( 'void' | type ) method_declaration )+ )
			DebugEnterAlt(1);
			// cs.g:1349:5: ( ( modifiers )? ( 'void' | type ) method_declaration )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(1349, 5);
			// cs.g:1349:5: ( ( modifiers )? ( 'void' | type ) method_declaration )+
			int cnt294=0;
			try { DebugEnterSubRule(294);
			while (true)
			{
				int alt294=2;
				try { DebugEnterDecision(294, false);
				int LA294_0 = input.LA(1);

				if ((LA294_0==IDENTIFIER||(LA294_0>=95 && LA294_0<=98)||(LA294_0>=100 && LA294_0<=101)||LA294_0==103||(LA294_0>=105 && LA294_0<=106)||LA294_0==109||LA294_0==114||LA294_0==117||(LA294_0>=119 && LA294_0<=120)||LA294_0==122||(LA294_0>=125 && LA294_0<=126)||LA294_0==129||LA294_0==132||LA294_0==135||LA294_0==138||(LA294_0>=140 && LA294_0<=141)||(LA294_0>=143 && LA294_0<=144)||(LA294_0>=146 && LA294_0<=148)||(LA294_0>=150 && LA294_0<=152)||LA294_0==154||(LA294_0>=156 && LA294_0<=157)||(LA294_0>=160 && LA294_0<=165)||LA294_0==167||(LA294_0>=169 && LA294_0<=173)||(LA294_0>=176 && LA294_0<=177)||LA294_0==183||(LA294_0>=185 && LA294_0<=186)||(LA294_0>=188 && LA294_0<=194)||LA294_0==196))
				{
					alt294 = 1;
				}


				} finally { DebugExitDecision(294); }
				switch (alt294)
				{
				case 1:
					DebugEnterAlt(1);
					// cs.g:1349:6: ( modifiers )? ( 'void' | type ) method_declaration
					{
					DebugLocation(1349, 6);
					// cs.g:1349:6: ( modifiers )?
					int alt292=2;
					try { DebugEnterSubRule(292);
					try { DebugEnterDecision(292, false);
					int LA292_0 = input.LA(1);

					if ((LA292_0==96||LA292_0==125||LA292_0==140||LA292_0==150||LA292_0==156||LA292_0==161||(LA292_0>=163 && LA292_0<=165)||LA292_0==170||LA292_0==176||LA292_0==188||LA292_0==191||LA292_0==193))
					{
						alt292 = 1;
					}
					} finally { DebugExitDecision(292); }
					switch (alt292)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:1349:6: modifiers
						{
						DebugLocation(1349, 6);
						PushFollow(Follow._modifiers_in_method_declarations12967);
						modifiers1108=modifiers();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, modifiers1108.Tree, modifiers1108, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(292); }

					DebugLocation(1349, 17);
					// cs.g:1349:17: ( 'void' | type )
					int alt293=2;
					try { DebugEnterSubRule(293);
					try { DebugEnterDecision(293, false);
					int LA293_0 = input.LA(1);

					if ((LA293_0==192))
					{
						int LA293_1 = input.LA(2);

						if ((LA293_1==Character_literal||LA293_1==FALSE||(LA293_1>=Hex_number && LA293_1<=IDENTIFIER)||(LA293_1>=NULL && LA293_1<=NUMBER)||LA293_1==Real_literal||LA293_1==STRINGLITERAL||LA293_1==TRUE||LA293_1==Verbatim_string_literal||LA293_1==95||(LA293_1>=97 && LA293_1<=98)||(LA293_1>=100 && LA293_1<=101)||LA293_1==103||(LA293_1>=105 && LA293_1<=106)||LA293_1==109||LA293_1==114||LA293_1==117||(LA293_1>=119 && LA293_1<=120)||LA293_1==122||LA293_1==126||LA293_1==129||LA293_1==132||LA293_1==135||LA293_1==138||LA293_1==141||(LA293_1>=143 && LA293_1<=144)||(LA293_1>=146 && LA293_1<=148)||(LA293_1>=151 && LA293_1<=152)||LA293_1==154||LA293_1==157||LA293_1==160||LA293_1==162||LA293_1==167||LA293_1==169||(LA293_1>=171 && LA293_1<=173)||LA293_1==177||LA293_1==183||(LA293_1>=185 && LA293_1<=186)||(LA293_1>=189 && LA293_1<=190)||LA293_1==194||LA293_1==196))
						{
							alt293 = 1;
						}
						else if ((LA293_1==69))
						{
							alt293 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 293, 1, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA293_0==IDENTIFIER||LA293_0==95||(LA293_0>=97 && LA293_0<=98)||(LA293_0>=100 && LA293_0<=101)||LA293_0==103||(LA293_0>=105 && LA293_0<=106)||LA293_0==109||LA293_0==114||LA293_0==117||(LA293_0>=119 && LA293_0<=120)||LA293_0==122||LA293_0==126||LA293_0==129||LA293_0==132||LA293_0==135||LA293_0==138||LA293_0==141||(LA293_0>=143 && LA293_0<=144)||(LA293_0>=146 && LA293_0<=148)||(LA293_0>=151 && LA293_0<=152)||LA293_0==154||LA293_0==157||LA293_0==160||LA293_0==162||LA293_0==167||LA293_0==169||(LA293_0>=171 && LA293_0<=173)||LA293_0==177||LA293_0==183||(LA293_0>=185 && LA293_0<=186)||(LA293_0>=189 && LA293_0<=190)||LA293_0==194||LA293_0==196))
					{
						alt293 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 293, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(293); }
					switch (alt293)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:1349:18: 'void'
						{
						DebugLocation(1349, 18);
						string_literal1109=(IToken)Match(input,192,Follow._192_in_method_declarations12971); if (state.failed) return retval;
						if (state.backtracking == 0) {
						string_literal1109_tree = (object)adaptor.Create(string_literal1109, retval);
						adaptor.AddChild(root_0, string_literal1109_tree);
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// cs.g:1349:27: type
						{
						DebugLocation(1349, 27);
						PushFollow(Follow._type_in_method_declarations12975);
						type1110=type();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, type1110.Tree, type1110, retval);

						}
						break;

					}
					} finally { DebugExitSubRule(293); }

					DebugLocation(1349, 33);
					PushFollow(Follow._method_declaration_in_method_declarations12978);
					method_declaration1111=method_declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, method_declaration1111.Tree, method_declaration1111, retval);

					}
					break;

				default:
					if (cnt294 >= 1)
						goto loop294;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee294 = new EarlyExitException( 294, input );
					DebugRecognitionException(eee294);
					throw eee294;
				}
				cnt294++;
			}
			loop294:
				;

			} finally { DebugExitSubRule(294); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("method_declarations", 317);
			LeaveRule("method_declarations", 317);
			LeaveRule_method_declarations();
			if (state.backtracking > 0) { Memoize(input, 317, method_declarations_StartIndex); }

		}
		DebugLocation(1349, 53);
		} finally { DebugExitRule(GrammarFileName, "method_declarations"); }
		return retval;

	}
	// $ANTLR end "method_declarations"

	partial void EnterRule_synpred1_cs_fragment();
	partial void LeaveRule_synpred1_cs_fragment();

	// $ANTLR start synpred1_cs
	public void synpred1_cs_fragment()
	{
		EnterRule_synpred1_cs_fragment();
		EnterRule("synpred1_cs_fragment", 318);
		var retval = new XAstParserRuleReturnScope("synpred1_cs_fragment");
		try
		{
			// cs.g:60:5: ( 'partial' )
			DebugEnterAlt(1);
			// cs.g:60:6: 'partial'
			{
			DebugLocation(60, 6);
			Match(input,159,Follow._159_in_synpred1_cs315); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_cs_fragment", 318);
			LeaveRule("synpred1_cs_fragment", 318);
			LeaveRule_synpred1_cs_fragment();
		}
	}
	// $ANTLR end synpred1_cs

	partial void EnterRule_synpred2_cs_fragment();
	partial void LeaveRule_synpred2_cs_fragment();

	// $ANTLR start synpred2_cs
	public void synpred2_cs_fragment()
	{
		EnterRule_synpred2_cs_fragment();
		EnterRule("synpred2_cs_fragment", 319);
		var retval = new XAstParserRuleReturnScope("synpred2_cs_fragment");
		try
		{
			// cs.g:91:14: ( member_name '(' )
			DebugEnterAlt(1);
			// cs.g:91:15: member_name '('
			{
			DebugLocation(91, 15);
			PushFollow(Follow._member_name_in_synpred2_cs711);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(91, 29);
			Match(input,68,Follow._68_in_synpred2_cs715); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_cs_fragment", 319);
			LeaveRule("synpred2_cs_fragment", 319);
			LeaveRule_synpred2_cs_fragment();
		}
	}
	// $ANTLR end synpred2_cs

	partial void EnterRule_synpred3_cs_fragment();
	partial void LeaveRule_synpred3_cs_fragment();

	// $ANTLR start synpred3_cs
	public void synpred3_cs_fragment()
	{
		EnterRule_synpred3_cs_fragment();
		EnterRule("synpred3_cs_fragment", 320);
		var retval = new XAstParserRuleReturnScope("synpred3_cs_fragment");
		try
		{
			// cs.g:92:14: ( member_name '{' )
			DebugEnterAlt(1);
			// cs.g:92:15: member_name '{'
			{
			DebugLocation(92, 15);
			PushFollow(Follow._member_name_in_synpred3_cs736);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(92, 29);
			Match(input,197,Follow._197_in_synpred3_cs740); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_cs_fragment", 320);
			LeaveRule("synpred3_cs_fragment", 320);
			LeaveRule_synpred3_cs_fragment();
		}
	}
	// $ANTLR end synpred3_cs

	partial void EnterRule_synpred4_cs_fragment();
	partial void LeaveRule_synpred4_cs_fragment();

	// $ANTLR start synpred4_cs
	public void synpred4_cs_fragment()
	{
		EnterRule_synpred4_cs_fragment();
		EnterRule("synpred4_cs_fragment", 321);
		var retval = new XAstParserRuleReturnScope("synpred4_cs_fragment");
		try
		{
			// cs.g:93:14: ( member_name '.' 'this' )
			DebugEnterAlt(1);
			// cs.g:93:15: member_name '.' 'this'
			{
			DebugLocation(93, 15);
			PushFollow(Follow._member_name_in_synpred4_cs761);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(93, 29);
			new XToken((IToken)Match(input,DOT,Follow._DOT_in_synpred4_cs765), "DOT"); if (state.failed) return;
			DebugLocation(93, 35);
			Match(input,180,Follow._180_in_synpred4_cs769); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred4_cs_fragment", 321);
			LeaveRule("synpred4_cs_fragment", 321);
			LeaveRule_synpred4_cs_fragment();
		}
	}
	// $ANTLR end synpred4_cs

	partial void EnterRule_synpred5_cs_fragment();
	partial void LeaveRule_synpred5_cs_fragment();

	// $ANTLR start synpred5_cs
	public void synpred5_cs_fragment()
	{
		EnterRule_synpred5_cs_fragment();
		EnterRule("synpred5_cs_fragment", 322);
		var retval = new XAstParserRuleReturnScope("synpred5_cs_fragment");
		try
		{
			// cs.g:111:5: ( 'this' brackets )
			DebugEnterAlt(1);
			// cs.g:111:6: 'this' brackets
			{
			DebugLocation(111, 6);
			Match(input,180,Follow._180_in_synpred5_cs937); if (state.failed) return;
			DebugLocation(111, 16);
			PushFollow(Follow._brackets_in_synpred5_cs942);
			brackets();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred5_cs_fragment", 322);
			LeaveRule("synpred5_cs_fragment", 322);
			LeaveRule_synpred5_cs_fragment();
		}
	}
	// $ANTLR end synpred5_cs

	partial void EnterRule_synpred6_cs_fragment();
	partial void LeaveRule_synpred6_cs_fragment();

	// $ANTLR start synpred6_cs
	public void synpred6_cs_fragment()
	{
		EnterRule_synpred6_cs_fragment();
		EnterRule("synpred6_cs_fragment", 323);
		var retval = new XAstParserRuleReturnScope("synpred6_cs_fragment");
		try
		{
			// cs.g:112:7: ( 'base' brackets )
			DebugEnterAlt(1);
			// cs.g:112:8: 'base' brackets
			{
			DebugLocation(112, 8);
			Match(input,102,Follow._102_in_synpred6_cs965); if (state.failed) return;
			DebugLocation(112, 17);
			PushFollow(Follow._brackets_in_synpred6_cs969);
			brackets();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred6_cs_fragment", 323);
			LeaveRule("synpred6_cs_fragment", 323);
			LeaveRule_synpred6_cs_fragment();
		}
	}
	// $ANTLR end synpred6_cs

	partial void EnterRule_synpred7_cs_fragment();
	partial void LeaveRule_synpred7_cs_fragment();

	// $ANTLR start synpred7_cs
	public void synpred7_cs_fragment()
	{
		EnterRule_synpred7_cs_fragment();
		EnterRule("synpred7_cs_fragment", 324);
		var retval = new XAstParserRuleReturnScope("synpred7_cs_fragment");
		try
		{
			// cs.g:114:17: ( object_creation_expression ( '.' | '->' | '[' ) )
			DebugEnterAlt(1);
			// cs.g:114:18: object_creation_expression ( '.' | '->' | '[' )
			{
			DebugLocation(114, 18);
			PushFollow(Follow._object_creation_expression_in_synpred7_cs1011);
			object_creation_expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(114, 47);
			if (input.LA(1)==DOT||input.LA(1)==PTR||input.LA(1)==91)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred7_cs_fragment", 324);
			LeaveRule("synpred7_cs_fragment", 324);
			LeaveRule_synpred7_cs_fragment();
		}
	}
	// $ANTLR end synpred7_cs

	partial void EnterRule_synpred8_cs_fragment();
	partial void LeaveRule_synpred8_cs_fragment();

	// $ANTLR start synpred8_cs
	public void synpred8_cs_fragment()
	{
		EnterRule_synpred8_cs_fragment();
		EnterRule("synpred8_cs_fragment", 325);
		var retval = new XAstParserRuleReturnScope("synpred8_cs_fragment");
		try
		{
			// cs.g:118:19: ( delegate_creation_expression )
			DebugEnterAlt(1);
			// cs.g:118:20: delegate_creation_expression
			{
			DebugLocation(118, 20);
			PushFollow(Follow._delegate_creation_expression_in_synpred8_cs1110);
			delegate_creation_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred8_cs_fragment", 325);
			LeaveRule("synpred8_cs_fragment", 325);
			LeaveRule_synpred8_cs_fragment();
		}
	}
	// $ANTLR end synpred8_cs

	partial void EnterRule_synpred9_cs_fragment();
	partial void LeaveRule_synpred9_cs_fragment();

	// $ANTLR start synpred9_cs
	public void synpred9_cs_fragment()
	{
		EnterRule_synpred9_cs_fragment();
		EnterRule("synpred9_cs_fragment", 326);
		var retval = new XAstParserRuleReturnScope("synpred9_cs_fragment");
		try
		{
			// cs.g:130:7: ( identifier '<' )
			DebugEnterAlt(1);
			// cs.g:130:8: identifier '<'
			{
			DebugLocation(130, 8);
			PushFollow(Follow._identifier_in_synpred9_cs1283);
			identifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(130, 22);
			Match(input,81,Follow._81_in_synpred9_cs1288); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred9_cs_fragment", 326);
			LeaveRule("synpred9_cs_fragment", 326);
			LeaveRule_synpred9_cs_fragment();
		}
	}
	// $ANTLR end synpred9_cs

	partial void EnterRule_synpred10_cs_fragment();
	partial void LeaveRule_synpred10_cs_fragment();

	// $ANTLR start synpred10_cs
	public void synpred10_cs_fragment()
	{
		EnterRule_synpred10_cs_fragment();
		EnterRule("synpred10_cs_fragment", 327);
		var retval = new XAstParserRuleReturnScope("synpred10_cs_fragment");
		try
		{
			// cs.g:168:10: ( '(' type ')' )
			DebugEnterAlt(1);
			// cs.g:168:11: '(' type ')'
			{
			DebugLocation(168, 11);
			Match(input,68,Follow._68_in_synpred10_cs1615); if (state.failed) return;
			DebugLocation(168, 17);
			PushFollow(Follow._type_in_synpred10_cs1619);
			type();
			PopFollow();
			if (state.failed) return;
			DebugLocation(168, 24);
			new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_synpred10_cs1623), "RPAREN"); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred10_cs_fragment", 327);
			LeaveRule("synpred10_cs_fragment", 327);
			LeaveRule_synpred10_cs_fragment();
		}
	}
	// $ANTLR end synpred10_cs

	partial void EnterRule_synpred11_cs_fragment();
	partial void LeaveRule_synpred11_cs_fragment();

	// $ANTLR start synpred11_cs
	public void synpred11_cs_fragment()
	{
		EnterRule_synpred11_cs_fragment();
		EnterRule("synpred11_cs_fragment", 328);
		var retval = new XAstParserRuleReturnScope("synpred11_cs_fragment");
		try
		{
			// cs.g:196:5: ( array_creation_expression )
			DebugEnterAlt(1);
			// cs.g:196:6: array_creation_expression
			{
			DebugLocation(196, 6);
			PushFollow(Follow._array_creation_expression_in_synpred11_cs2006);
			array_creation_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred11_cs_fragment", 328);
			LeaveRule("synpred11_cs_fragment", 328);
			LeaveRule_synpred11_cs_fragment();
		}
	}
	// $ANTLR end synpred11_cs

	partial void EnterRule_synpred12_cs_fragment();
	partial void LeaveRule_synpred12_cs_fragment();

	// $ANTLR start synpred12_cs
	public void synpred12_cs_fragment()
	{
		EnterRule_synpred12_cs_fragment();
		EnterRule("synpred12_cs_fragment", 329);
		var retval = new XAstParserRuleReturnScope("synpred12_cs_fragment");
		try
		{
			// cs.g:205:26: ( arguments ( '[' | '.' | '->' ) )
			DebugEnterAlt(1);
			// cs.g:205:27: arguments ( '[' | '.' | '->' )
			{
			DebugLocation(205, 27);
			PushFollow(Follow._arguments_in_synpred12_cs2146);
			arguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(205, 39);
			if (input.LA(1)==DOT||input.LA(1)==PTR||input.LA(1)==91)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred12_cs_fragment", 329);
			LeaveRule("synpred12_cs_fragment", 329);
			LeaveRule_synpred12_cs_fragment();
		}
	}
	// $ANTLR end synpred12_cs

	partial void EnterRule_synpred13_cs_fragment();
	partial void LeaveRule_synpred13_cs_fragment();

	// $ANTLR start synpred13_cs
	public void synpred13_cs_fragment()
	{
		EnterRule_synpred13_cs_fragment();
		EnterRule("synpred13_cs_fragment", 330);
		var retval = new XAstParserRuleReturnScope("synpred13_cs_fragment");
		try
		{
			// cs.g:276:23: ( unbound_type_name )
			DebugEnterAlt(1);
			// cs.g:276:24: unbound_type_name
			{
			DebugLocation(276, 24);
			PushFollow(Follow._unbound_type_name_in_synpred13_cs2853);
			unbound_type_name();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred13_cs_fragment", 330);
			LeaveRule("synpred13_cs_fragment", 330);
			LeaveRule_synpred13_cs_fragment();
		}
	}
	// $ANTLR end synpred13_cs

	partial void EnterRule_synpred14_cs_fragment();
	partial void LeaveRule_synpred14_cs_fragment();

	// $ANTLR start synpred14_cs
	public void synpred14_cs_fragment()
	{
		EnterRule_synpred14_cs_fragment();
		EnterRule("synpred14_cs_fragment", 331);
		var retval = new XAstParserRuleReturnScope("synpred14_cs_fragment");
		try
		{
			// cs.g:286:11: ( generic_dimension_specifier '.' )
			DebugEnterAlt(1);
			// cs.g:286:12: generic_dimension_specifier '.'
			{
			DebugLocation(286, 12);
			PushFollow(Follow._generic_dimension_specifier_in_synpred14_cs2950);
			generic_dimension_specifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(286, 42);
			new XToken((IToken)Match(input,DOT,Follow._DOT_in_synpred14_cs2954), "DOT"); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred14_cs_fragment", 331);
			LeaveRule("synpred14_cs_fragment", 331);
			LeaveRule_synpred14_cs_fragment();
		}
	}
	// $ANTLR end synpred14_cs

	partial void EnterRule_synpred15_cs_fragment();
	partial void LeaveRule_synpred15_cs_fragment();

	// $ANTLR start synpred15_cs
	public void synpred15_cs_fragment()
	{
		EnterRule_synpred15_cs_fragment();
		EnterRule("synpred15_cs_fragment", 332);
		var retval = new XAstParserRuleReturnScope("synpred15_cs_fragment");
		try
		{
			// cs.g:309:5: ( identifier '<' )
			DebugEnterAlt(1);
			// cs.g:309:6: identifier '<'
			{
			DebugLocation(309, 6);
			PushFollow(Follow._identifier_in_synpred15_cs3125);
			identifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(309, 19);
			Match(input,81,Follow._81_in_synpred15_cs3129); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred15_cs_fragment", 332);
			LeaveRule("synpred15_cs_fragment", 332);
			LeaveRule_synpred15_cs_fragment();
		}
	}
	// $ANTLR end synpred15_cs

	partial void EnterRule_synpred16_cs_fragment();
	partial void LeaveRule_synpred16_cs_fragment();

	// $ANTLR start synpred16_cs
	public void synpred16_cs_fragment()
	{
		EnterRule_synpred16_cs_fragment();
		EnterRule("synpred16_cs_fragment", 333);
		var retval = new XAstParserRuleReturnScope("synpred16_cs_fragment");
		try
		{
			// cs.g:317:7: ( identifier '<' )
			DebugEnterAlt(1);
			// cs.g:317:8: identifier '<'
			{
			DebugLocation(317, 8);
			PushFollow(Follow._identifier_in_synpred16_cs3189);
			identifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(317, 22);
			Match(input,81,Follow._81_in_synpred16_cs3194); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred16_cs_fragment", 333);
			LeaveRule("synpred16_cs_fragment", 333);
			LeaveRule_synpred16_cs_fragment();
		}
	}
	// $ANTLR end synpred16_cs

	partial void EnterRule_synpred17_cs_fragment();
	partial void LeaveRule_synpred17_cs_fragment();

	// $ANTLR start synpred17_cs
	public void synpred17_cs_fragment()
	{
		EnterRule_synpred17_cs_fragment();
		EnterRule("synpred17_cs_fragment", 334);
		var retval = new XAstParserRuleReturnScope("synpred17_cs_fragment");
		try
		{
			// cs.g:334:7: ( ( predefined_type | type_name ) rank_specifiers )
			DebugEnterAlt(1);
			// cs.g:334:8: ( predefined_type | type_name ) rank_specifiers
			{
			DebugLocation(334, 8);
			// cs.g:334:8: ( predefined_type | type_name )
			int alt295=2;
			try { DebugEnterSubRule(295);
			try { DebugEnterDecision(295, false);
			int LA295_0 = input.LA(1);

			if ((LA295_0==103||LA295_0==106||LA295_0==109||LA295_0==114||LA295_0==119||LA295_0==129||LA295_0==138||LA295_0==146||LA295_0==151||LA295_0==169||LA295_0==173||LA295_0==177||(LA295_0>=185 && LA295_0<=186)||LA295_0==189))
			{
				alt295 = 1;
			}
			else if ((LA295_0==IDENTIFIER||LA295_0==95||(LA295_0>=97 && LA295_0<=98)||(LA295_0>=100 && LA295_0<=101)||LA295_0==105||LA295_0==117||LA295_0==120||LA295_0==122||LA295_0==126||LA295_0==132||LA295_0==135||LA295_0==141||(LA295_0>=143 && LA295_0<=144)||(LA295_0>=147 && LA295_0<=148)||LA295_0==152||LA295_0==154||LA295_0==157||LA295_0==160||LA295_0==162||LA295_0==167||(LA295_0>=171 && LA295_0<=172)||LA295_0==183||LA295_0==190||LA295_0==194||LA295_0==196))
			{
				alt295 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 295, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(295); }
			switch (alt295)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:334:9: predefined_type
				{
				DebugLocation(334, 9);
				PushFollow(Follow._predefined_type_in_synpred17_cs3308);
				predefined_type();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:334:27: type_name
				{
				DebugLocation(334, 27);
				PushFollow(Follow._type_name_in_synpred17_cs3312);
				type_name();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(295); }

			DebugLocation(334, 39);
			PushFollow(Follow._rank_specifiers_in_synpred17_cs3316);
			rank_specifiers();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred17_cs_fragment", 334);
			LeaveRule("synpred17_cs_fragment", 334);
			LeaveRule_synpred17_cs_fragment();
		}
	}
	// $ANTLR end synpred17_cs

	partial void EnterRule_synpred18_cs_fragment();
	partial void LeaveRule_synpred18_cs_fragment();

	// $ANTLR start synpred18_cs
	public void synpred18_cs_fragment()
	{
		EnterRule_synpred18_cs_fragment();
		EnterRule("synpred18_cs_fragment", 335);
		var retval = new XAstParserRuleReturnScope("synpred18_cs_fragment");
		try
		{
			// cs.g:335:7: ( ( predefined_type | type_name ) ( ( '*' )+ | '?' ) )
			DebugEnterAlt(1);
			// cs.g:335:8: ( predefined_type | type_name ) ( ( '*' )+ | '?' )
			{
			DebugLocation(335, 8);
			// cs.g:335:8: ( predefined_type | type_name )
			int alt296=2;
			try { DebugEnterSubRule(296);
			try { DebugEnterDecision(296, false);
			int LA296_0 = input.LA(1);

			if ((LA296_0==103||LA296_0==106||LA296_0==109||LA296_0==114||LA296_0==119||LA296_0==129||LA296_0==138||LA296_0==146||LA296_0==151||LA296_0==169||LA296_0==173||LA296_0==177||(LA296_0>=185 && LA296_0<=186)||LA296_0==189))
			{
				alt296 = 1;
			}
			else if ((LA296_0==IDENTIFIER||LA296_0==95||(LA296_0>=97 && LA296_0<=98)||(LA296_0>=100 && LA296_0<=101)||LA296_0==105||LA296_0==117||LA296_0==120||LA296_0==122||LA296_0==126||LA296_0==132||LA296_0==135||LA296_0==141||(LA296_0>=143 && LA296_0<=144)||(LA296_0>=147 && LA296_0<=148)||LA296_0==152||LA296_0==154||LA296_0==157||LA296_0==160||LA296_0==162||LA296_0==167||(LA296_0>=171 && LA296_0<=172)||LA296_0==183||LA296_0==190||LA296_0==194||LA296_0==196))
			{
				alt296 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 296, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(296); }
			switch (alt296)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:335:9: predefined_type
				{
				DebugLocation(335, 9);
				PushFollow(Follow._predefined_type_in_synpred18_cs3346);
				predefined_type();
				PopFollow();
				if (state.failed) return;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:335:27: type_name
				{
				DebugLocation(335, 27);
				PushFollow(Follow._type_name_in_synpred18_cs3350);
				type_name();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(296); }

			DebugLocation(335, 39);
			// cs.g:335:39: ( ( '*' )+ | '?' )
			int alt298=2;
			try { DebugEnterSubRule(298);
			try { DebugEnterDecision(298, false);
			int LA298_0 = input.LA(1);

			if ((LA298_0==69))
			{
				alt298 = 1;
			}
			else if ((LA298_0==89))
			{
				alt298 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae = new NoViableAltException("", 298, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(298); }
			switch (alt298)
			{
			case 1:
				DebugEnterAlt(1);
				// cs.g:335:40: ( '*' )+
				{
				DebugLocation(335, 40);
				// cs.g:335:40: ( '*' )+
				int cnt297=0;
				try { DebugEnterSubRule(297);
				while (true)
				{
					int alt297=2;
					try { DebugEnterDecision(297, false);
					int LA297_0 = input.LA(1);

					if ((LA297_0==69))
					{
						alt297 = 1;
					}


					} finally { DebugExitDecision(297); }
					switch (alt297)
					{
					case 1:
						DebugEnterAlt(1);
						// cs.g:335:40: '*'
						{
						DebugLocation(335, 40);
						Match(input,69,Follow._69_in_synpred18_cs3355); if (state.failed) return;

						}
						break;

					default:
						if (cnt297 >= 1)
							goto loop297;

						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee297 = new EarlyExitException( 297, input );
						DebugRecognitionException(eee297);
						throw eee297;
					}
					cnt297++;
				}
				loop297:
					;

				} finally { DebugExitSubRule(297); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// cs.g:335:47: '?'
				{
				DebugLocation(335, 47);
				Match(input,89,Follow._89_in_synpred18_cs3360); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(298); }


			}

		}
		finally
		{
			TraceOut("synpred18_cs_fragment", 335);
			LeaveRule("synpred18_cs_fragment", 335);
			LeaveRule_synpred18_cs_fragment();
		}
	}
	// $ANTLR end synpred18_cs

	partial void EnterRule_synpred19_cs_fragment();
	partial void LeaveRule_synpred19_cs_fragment();

	// $ANTLR start synpred19_cs
	public void synpred19_cs_fragment()
	{
		EnterRule_synpred19_cs_fragment();
		EnterRule("synpred19_cs_fragment", 336);
		var retval = new XAstParserRuleReturnScope("synpred19_cs_fragment");
		try
		{
			// cs.g:371:5: ( unary_expression assignment_operator )
			DebugEnterAlt(1);
			// cs.g:371:6: unary_expression assignment_operator
			{
			DebugLocation(371, 6);
			PushFollow(Follow._unary_expression_in_synpred19_cs3611);
			unary_expression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(371, 25);
			PushFollow(Follow._assignment_operator_in_synpred19_cs3615);
			assignment_operator();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred19_cs_fragment", 336);
			LeaveRule("synpred19_cs_fragment", 336);
			LeaveRule_synpred19_cs_fragment();
		}
	}
	// $ANTLR end synpred19_cs

	partial void EnterRule_synpred20_cs_fragment();
	partial void LeaveRule_synpred20_cs_fragment();

	// $ANTLR start synpred20_cs
	public void synpred20_cs_fragment()
	{
		EnterRule_synpred20_cs_fragment();
		EnterRule("synpred20_cs_fragment", 337);
		var retval = new XAstParserRuleReturnScope("synpred20_cs_fragment");
		try
		{
			// cs.g:380:5: ( cast_expression )
			DebugEnterAlt(1);
			// cs.g:380:6: cast_expression
			{
			DebugLocation(380, 6);
			PushFollow(Follow._cast_expression_in_synpred20_cs3691);
			cast_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred20_cs_fragment", 337);
			LeaveRule("synpred20_cs_fragment", 337);
			LeaveRule_synpred20_cs_fragment();
		}
	}
	// $ANTLR end synpred20_cs

	partial void EnterRule_synpred21_cs_fragment();
	partial void LeaveRule_synpred21_cs_fragment();

	// $ANTLR start synpred21_cs
	public void synpred21_cs_fragment()
	{
		EnterRule_synpred21_cs_fragment();
		EnterRule("synpred21_cs_fragment", 338);
		var retval = new XAstParserRuleReturnScope("synpred21_cs_fragment");
		try
		{
			// cs.g:406:5: ( anonymous_function_signature '=>' )
			DebugEnterAlt(1);
			// cs.g:406:6: anonymous_function_signature '=>'
			{
			DebugLocation(406, 6);
			PushFollow(Follow._anonymous_function_signature_in_synpred21_cs3961);
			anonymous_function_signature();
			PopFollow();
			if (state.failed) return;
			DebugLocation(406, 37);
			Match(input,87,Follow._87_in_synpred21_cs3965); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred21_cs_fragment", 338);
			LeaveRule("synpred21_cs_fragment", 338);
			LeaveRule_synpred21_cs_fragment();
		}
	}
	// $ANTLR end synpred21_cs

	partial void EnterRule_synpred22_cs_fragment();
	partial void LeaveRule_synpred22_cs_fragment();

	// $ANTLR start synpred22_cs
	public void synpred22_cs_fragment()
	{
		EnterRule_synpred22_cs_fragment();
		EnterRule("synpred22_cs_fragment", 339);
		var retval = new XAstParserRuleReturnScope("synpred22_cs_fragment");
		try
		{
			// cs.g:407:7: ( query_expression )
			DebugEnterAlt(1);
			// cs.g:407:8: query_expression
			{
			DebugLocation(407, 8);
			PushFollow(Follow._query_expression_in_synpred22_cs3979);
			query_expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred22_cs_fragment", 339);
			LeaveRule("synpred22_cs_fragment", 339);
			LeaveRule_synpred22_cs_fragment();
		}
	}
	// $ANTLR end synpred22_cs

	partial void EnterRule_synpred23_cs_fragment();
	partial void LeaveRule_synpred23_cs_fragment();

	// $ANTLR start synpred23_cs
	public void synpred23_cs_fragment()
	{
		EnterRule_synpred23_cs_fragment();
		EnterRule("synpred23_cs_fragment", 340);
		var retval = new XAstParserRuleReturnScope("synpred23_cs_fragment");
		try
		{
			// cs.g:471:53: ( 'into' )
			DebugEnterAlt(1);
			// cs.g:471:54: 'into'
			{
			DebugLocation(471, 54);
			Match(input,141,Follow._141_in_synpred23_cs4507); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred23_cs_fragment", 340);
			LeaveRule("synpred23_cs_fragment", 340);
			LeaveRule_synpred23_cs_fragment();
		}
	}
	// $ANTLR end synpred23_cs

	partial void EnterRule_synpred24_cs_fragment();
	partial void LeaveRule_synpred24_cs_fragment();

	// $ANTLR start synpred24_cs
	public void synpred24_cs_fragment()
	{
		EnterRule_synpred24_cs_fragment();
		EnterRule("synpred24_cs_fragment", 341);
		var retval = new XAstParserRuleReturnScope("synpred24_cs_fragment");
		try
		{
			// cs.g:538:38: ( ',' identifier '=' )
			DebugEnterAlt(1);
			// cs.g:538:39: ',' identifier '='
			{
			DebugLocation(538, 39);
			Match(input,74,Follow._74_in_synpred24_cs5117); if (state.failed) return;
			DebugLocation(538, 45);
			PushFollow(Follow._identifier_in_synpred24_cs5121);
			identifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(538, 58);
			Match(input,85,Follow._85_in_synpred24_cs5125); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred24_cs_fragment", 341);
			LeaveRule("synpred24_cs_fragment", 341);
			LeaveRule_synpred24_cs_fragment();
		}
	}
	// $ANTLR end synpred24_cs

	partial void EnterRule_synpred25_cs_fragment();
	partial void LeaveRule_synpred25_cs_fragment();

	// $ANTLR start synpred25_cs
	public void synpred25_cs_fragment()
	{
		EnterRule_synpred25_cs_fragment();
		EnterRule("synpred25_cs_fragment", 342);
		var retval = new XAstParserRuleReturnScope("synpred25_cs_fragment");
		try
		{
			// cs.g:619:10: ( member_name '{' )
			DebugEnterAlt(1);
			// cs.g:619:11: member_name '{'
			{
			DebugLocation(619, 11);
			PushFollow(Follow._member_name_in_synpred25_cs5796);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(619, 25);
			Match(input,197,Follow._197_in_synpred25_cs5800); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred25_cs_fragment", 342);
			LeaveRule("synpred25_cs_fragment", 342);
			LeaveRule_synpred25_cs_fragment();
		}
	}
	// $ANTLR end synpred25_cs

	partial void EnterRule_synpred26_cs_fragment();
	partial void LeaveRule_synpred26_cs_fragment();

	// $ANTLR start synpred26_cs
	public void synpred26_cs_fragment()
	{
		EnterRule_synpred26_cs_fragment();
		EnterRule("synpred26_cs_fragment", 343);
		var retval = new XAstParserRuleReturnScope("synpred26_cs_fragment");
		try
		{
			// cs.g:726:20: ( member_name '(' )
			DebugEnterAlt(1);
			// cs.g:726:21: member_name '('
			{
			DebugLocation(726, 21);
			PushFollow(Follow._member_name_in_synpred26_cs6820);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(726, 35);
			Match(input,68,Follow._68_in_synpred26_cs6824); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred26_cs_fragment", 343);
			LeaveRule("synpred26_cs_fragment", 343);
			LeaveRule_synpred26_cs_fragment();
		}
	}
	// $ANTLR end synpred26_cs

	partial void EnterRule_synpred27_cs_fragment();
	partial void LeaveRule_synpred27_cs_fragment();

	// $ANTLR start synpred27_cs
	public void synpred27_cs_fragment()
	{
		EnterRule_synpred27_cs_fragment();
		EnterRule("synpred27_cs_fragment", 344);
		var retval = new XAstParserRuleReturnScope("synpred27_cs_fragment");
		try
		{
			// cs.g:727:20: ( member_name '{' )
			DebugEnterAlt(1);
			// cs.g:727:21: member_name '{'
			{
			DebugLocation(727, 21);
			PushFollow(Follow._member_name_in_synpred27_cs6851);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(727, 35);
			Match(input,197,Follow._197_in_synpred27_cs6855); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred27_cs_fragment", 344);
			LeaveRule("synpred27_cs_fragment", 344);
			LeaveRule_synpred27_cs_fragment();
		}
	}
	// $ANTLR end synpred27_cs

	partial void EnterRule_synpred28_cs_fragment();
	partial void LeaveRule_synpred28_cs_fragment();

	// $ANTLR start synpred28_cs
	public void synpred28_cs_fragment()
	{
		EnterRule_synpred28_cs_fragment();
		EnterRule("synpred28_cs_fragment", 345);
		var retval = new XAstParserRuleReturnScope("synpred28_cs_fragment");
		try
		{
			// cs.g:778:14: ( member_name '(' )
			DebugEnterAlt(1);
			// cs.g:778:15: member_name '('
			{
			DebugLocation(778, 15);
			PushFollow(Follow._member_name_in_synpred28_cs7440);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(778, 29);
			Match(input,68,Follow._68_in_synpred28_cs7444); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred28_cs_fragment", 345);
			LeaveRule("synpred28_cs_fragment", 345);
			LeaveRule_synpred28_cs_fragment();
		}
	}
	// $ANTLR end synpred28_cs

	partial void EnterRule_synpred29_cs_fragment();
	partial void LeaveRule_synpred29_cs_fragment();

	// $ANTLR start synpred29_cs
	public void synpred29_cs_fragment()
	{
		EnterRule_synpred29_cs_fragment();
		EnterRule("synpred29_cs_fragment", 346);
		var retval = new XAstParserRuleReturnScope("synpred29_cs_fragment");
		try
		{
			// cs.g:779:14: ( member_name '{' )
			DebugEnterAlt(1);
			// cs.g:779:15: member_name '{'
			{
			DebugLocation(779, 15);
			PushFollow(Follow._member_name_in_synpred29_cs7465);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(779, 29);
			Match(input,197,Follow._197_in_synpred29_cs7469); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred29_cs_fragment", 346);
			LeaveRule("synpred29_cs_fragment", 346);
			LeaveRule_synpred29_cs_fragment();
		}
	}
	// $ANTLR end synpred29_cs

	partial void EnterRule_synpred30_cs_fragment();
	partial void LeaveRule_synpred30_cs_fragment();

	// $ANTLR start synpred30_cs
	public void synpred30_cs_fragment()
	{
		EnterRule_synpred30_cs_fragment();
		EnterRule("synpred30_cs_fragment", 347);
		var retval = new XAstParserRuleReturnScope("synpred30_cs_fragment");
		try
		{
			// cs.g:780:14: ( member_name '.' 'this' )
			DebugEnterAlt(1);
			// cs.g:780:15: member_name '.' 'this'
			{
			DebugLocation(780, 15);
			PushFollow(Follow._member_name_in_synpred30_cs7490);
			member_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(780, 29);
			new XToken((IToken)Match(input,DOT,Follow._DOT_in_synpred30_cs7494), "DOT"); if (state.failed) return;
			DebugLocation(780, 35);
			Match(input,180,Follow._180_in_synpred30_cs7498); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred30_cs_fragment", 347);
			LeaveRule("synpred30_cs_fragment", 347);
			LeaveRule_synpred30_cs_fragment();
		}
	}
	// $ANTLR end synpred30_cs

	partial void EnterRule_synpred31_cs_fragment();
	partial void LeaveRule_synpred31_cs_fragment();

	// $ANTLR start synpred31_cs
	public void synpred31_cs_fragment()
	{
		EnterRule_synpred31_cs_fragment();
		EnterRule("synpred31_cs_fragment", 348);
		var retval = new XAstParserRuleReturnScope("synpred31_cs_fragment");
		try
		{
			// cs.g:852:26: ( arguments ( '[' | '.' | '->' ) )
			DebugEnterAlt(1);
			// cs.g:852:27: arguments ( '[' | '.' | '->' )
			{
			DebugLocation(852, 27);
			PushFollow(Follow._arguments_in_synpred31_cs8161);
			arguments();
			PopFollow();
			if (state.failed) return;
			DebugLocation(852, 39);
			if (input.LA(1)==DOT||input.LA(1)==PTR||input.LA(1)==91)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred31_cs_fragment", 348);
			LeaveRule("synpred31_cs_fragment", 348);
			LeaveRule_synpred31_cs_fragment();
		}
	}
	// $ANTLR end synpred31_cs

	partial void EnterRule_synpred32_cs_fragment();
	partial void LeaveRule_synpred32_cs_fragment();

	// $ANTLR start synpred32_cs
	public void synpred32_cs_fragment()
	{
		EnterRule_synpred32_cs_fragment();
		EnterRule("synpred32_cs_fragment", 349);
		var retval = new XAstParserRuleReturnScope("synpred32_cs_fragment");
		try
		{
			// cs.g:856:7: ( identifier '<' )
			DebugEnterAlt(1);
			// cs.g:856:8: identifier '<'
			{
			DebugLocation(856, 8);
			PushFollow(Follow._identifier_in_synpred32_cs8236);
			identifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(856, 22);
			Match(input,81,Follow._81_in_synpred32_cs8241); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred32_cs_fragment", 349);
			LeaveRule("synpred32_cs_fragment", 349);
			LeaveRule_synpred32_cs_fragment();
		}
	}
	// $ANTLR end synpred32_cs

	partial void EnterRule_synpred33_cs_fragment();
	partial void LeaveRule_synpred33_cs_fragment();

	// $ANTLR start synpred33_cs
	public void synpred33_cs_fragment()
	{
		EnterRule_synpred33_cs_fragment();
		EnterRule("synpred33_cs_fragment", 350);
		var retval = new XAstParserRuleReturnScope("synpred33_cs_fragment");
		try
		{
			// cs.g:869:5: ( declaration_statement )
			DebugEnterAlt(1);
			// cs.g:869:6: declaration_statement
			{
			DebugLocation(869, 6);
			PushFollow(Follow._declaration_statement_in_synpred33_cs8346);
			declaration_statement();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred33_cs_fragment", 350);
			LeaveRule("synpred33_cs_fragment", 350);
			LeaveRule_synpred33_cs_fragment();
		}
	}
	// $ANTLR end synpred33_cs

	partial void EnterRule_synpred34_cs_fragment();
	partial void LeaveRule_synpred34_cs_fragment();

	// $ANTLR start synpred34_cs
	public void synpred34_cs_fragment()
	{
		EnterRule_synpred34_cs_fragment();
		EnterRule("synpred34_cs_fragment", 351);
		var retval = new XAstParserRuleReturnScope("synpred34_cs_fragment");
		try
		{
			// cs.g:870:7: ( identifier ':' )
			DebugEnterAlt(1);
			// cs.g:870:8: identifier ':'
			{
			DebugLocation(870, 8);
			PushFollow(Follow._identifier_in_synpred34_cs8360);
			identifier();
			PopFollow();
			if (state.failed) return;
			DebugLocation(870, 21);
			Match(input,79,Follow._79_in_synpred34_cs8364); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred34_cs_fragment", 351);
			LeaveRule("synpred34_cs_fragment", 351);
			LeaveRule_synpred34_cs_fragment();
		}
	}
	// $ANTLR end synpred34_cs

	partial void EnterRule_synpred35_cs_fragment();
	partial void LeaveRule_synpred35_cs_fragment();

	// $ANTLR start synpred35_cs
	public void synpred35_cs_fragment()
	{
		EnterRule_synpred35_cs_fragment();
		EnterRule("synpred35_cs_fragment", 352);
		var retval = new XAstParserRuleReturnScope("synpred35_cs_fragment");
		try
		{
			// cs.g:907:5: ( 'var' )
			DebugEnterAlt(1);
			// cs.g:907:6: 'var'
			{
			DebugLocation(907, 6);
			Match(input,190,Follow._190_in_synpred35_cs8669); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred35_cs_fragment", 352);
			LeaveRule("synpred35_cs_fragment", 352);
			LeaveRule_synpred35_cs_fragment();
		}
	}
	// $ANTLR end synpred35_cs

	partial void EnterRule_synpred36_cs_fragment();
	partial void LeaveRule_synpred36_cs_fragment();

	// $ANTLR start synpred36_cs
	public void synpred36_cs_fragment()
	{
		EnterRule_synpred36_cs_fragment();
		EnterRule("synpred36_cs_fragment", 353);
		var retval = new XAstParserRuleReturnScope("synpred36_cs_fragment");
		try
		{
			// cs.g:908:7: ( 'dynamic' )
			DebugEnterAlt(1);
			// cs.g:908:8: 'dynamic'
			{
			DebugLocation(908, 8);
			Match(input,120,Follow._120_in_synpred36_cs8683); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred36_cs_fragment", 353);
			LeaveRule("synpred36_cs_fragment", 353);
			LeaveRule_synpred36_cs_fragment();
		}
	}
	// $ANTLR end synpred36_cs

	partial void EnterRule_synpred37_cs_fragment();
	partial void LeaveRule_synpred37_cs_fragment();

	// $ANTLR start synpred37_cs
	public void synpred37_cs_fragment()
	{
		EnterRule_synpred37_cs_fragment();
		EnterRule("synpred37_cs_fragment", 354);
		var retval = new XAstParserRuleReturnScope("synpred37_cs_fragment");
		try
		{
			// cs.g:934:65: ( 'else' )
			DebugEnterAlt(1);
			// cs.g:934:66: 'else'
			{
			DebugLocation(934, 66);
			Match(input,121,Follow._121_in_synpred37_cs8895); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred37_cs_fragment", 354);
			LeaveRule("synpred37_cs_fragment", 354);
			LeaveRule_synpred37_cs_fragment();
		}
	}
	// $ANTLR end synpred37_cs

	partial void EnterRule_synpred38_cs_fragment();
	partial void LeaveRule_synpred38_cs_fragment();

	// $ANTLR start synpred38_cs
	public void synpred38_cs_fragment()
	{
		EnterRule_synpred38_cs_fragment();
		EnterRule("synpred38_cs_fragment", 355);
		var retval = new XAstParserRuleReturnScope("synpred38_cs_fragment");
		try
		{
			// cs.g:963:5: ( local_variable_declaration )
			DebugEnterAlt(1);
			// cs.g:963:6: local_variable_declaration
			{
			DebugLocation(963, 6);
			PushFollow(Follow._local_variable_declaration_in_synpred38_cs9197);
			local_variable_declaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred38_cs_fragment", 355);
			LeaveRule("synpred38_cs_fragment", 355);
			LeaveRule_synpred38_cs_fragment();
		}
	}
	// $ANTLR end synpred38_cs

	partial void EnterRule_synpred39_cs_fragment();
	partial void LeaveRule_synpred39_cs_fragment();

	// $ANTLR start synpred39_cs
	public void synpred39_cs_fragment()
	{
		EnterRule_synpred39_cs_fragment();
		EnterRule("synpred39_cs_fragment", 356);
		var retval = new XAstParserRuleReturnScope("synpred39_cs_fragment");
		try
		{
			// cs.g:1015:5: ( local_variable_declaration )
			DebugEnterAlt(1);
			// cs.g:1015:6: local_variable_declaration
			{
			DebugLocation(1015, 6);
			PushFollow(Follow._local_variable_declaration_in_synpred39_cs9721);
			local_variable_declaration();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred39_cs_fragment", 356);
			LeaveRule("synpred39_cs_fragment", 356);
			LeaveRule_synpred39_cs_fragment();
		}
	}
	// $ANTLR end synpred39_cs
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA50 dfa50;
	private DFA71 dfa71;
	private DFA72 dfa72;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa50 = new DFA50( this );
		dfa71 = new DFA71( this, SpecialStateTransition71 );
		dfa72 = new DFA72( this, SpecialStateTransition72 );
	}

	private class DFA50 : DFA
	{
		private const string DFA50_eotS =
			"\x5\xFFFF";
		private const string DFA50_eofS =
			"\x1\x2\x3\xFFFF\x1\x2";
		private const string DFA50_minS =
			"\x1\xA\x1\x5\x2\xFFFF\x1\xA";
		private const string DFA50_maxS =
			"\x1\xC9\x1\xCA\x2\xFFFF\x1\xC9";
		private const string DFA50_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2\x1\xFFFF";
		private const string DFA50_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA50_transitionS =
			{
				"\x1\x3\xA\xFFFF\x1\x2\x5\xFFFF\x1\x2\x6\xFFFF\x1\x2\xA\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x2\x2\xFFFF\x1\x2\xB\xFFFF\x6\x2\x1\x3\xB\x2\x1\xFFFF\x6\x2"+
				"\x1\xFFFF\x3\x2\x1\x1\x4\x2\x1\xFFFF\x5\x2\x3\xFFFF\x1\x2\xB\xFFFF\x1"+
				"\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x3\xFFFF\x1\x2\x5\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x5\xFFFF\x4\x2\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\x2\x3\xFFFF\x2"+
				"\x2\xA\xFFFF\x1\x2\x6\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x6\x2",
				"\x1\x3\xE\xFFFF\x1\x3\x5\xFFFF\x2\x3\x6\xFFFF\x3\x3\xB\xFFFF\x1\x3"+
				"\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1\x2\x1\x3\x10\xFFFF"+
				"\x1\x4\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF\x4\x3\x1\xFFFF\x2\x3\x2"+
				"\xFFFF\x2\x3\x3\xFFFF\x4\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1\x3\x3\xFFFF\x1"+
				"\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF\x3\x3\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1"+
				"\x3\x1\xFFFF\x4\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x5\x3\x1\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1\x3",
				"",
				"",
				"\x1\x3\xA\xFFFF\x1\x2\x5\xFFFF\x1\x2\x6\xFFFF\x1\x2\xA\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\xB\xFFFF\x6\x2\x1\x3\xB\x2\x1\xFFFF\x6"+
				"\x2\x1\xFFFF\x3\x2\x1\x1\x4\x2\x1\xFFFF\x5\x2\x3\xFFFF\x1\x2\xB\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x3\xFFFF\x1\x2\x5\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x2\x5\xFFFF\x4\x2\x2\xFFFF\x2\x2\x3\xFFFF\x1\x2\x1\xFFFF\x1"+
				"\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\x2\x3\xFFFF"+
				"\x2\x2\xA\xFFFF\x1\x2\x6\xFFFF\x1\x2\x3\xFFFF\x1\x2\x1\xFFFF\x6\x2"
			};

		private static readonly short[] DFA50_eot = DFA.UnpackEncodedString(DFA50_eotS);
		private static readonly short[] DFA50_eof = DFA.UnpackEncodedString(DFA50_eofS);
		private static readonly char[] DFA50_min = DFA.UnpackEncodedStringToUnsignedChars(DFA50_minS);
		private static readonly char[] DFA50_max = DFA.UnpackEncodedStringToUnsignedChars(DFA50_maxS);
		private static readonly short[] DFA50_accept = DFA.UnpackEncodedString(DFA50_acceptS);
		private static readonly short[] DFA50_special = DFA.UnpackEncodedString(DFA50_specialS);
		private static readonly short[][] DFA50_transition;

		static DFA50()
		{
			int numStates = DFA50_transitionS.Length;
			DFA50_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA50_transition[i] = DFA.UnpackEncodedString(DFA50_transitionS[i]);
			}
		}

		public DFA50( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 50;
			this.eot = DFA50_eot;
			this.eof = DFA50_eof;
			this.min = DFA50_min;
			this.max = DFA50_max;
			this.accept = DFA50_accept;
			this.special = DFA50_special;
			this.transition = DFA50_transition;
		}

		public override string Description { get { return "203:21: ( ( rank_specifiers )? ( array_initializer )? | ( ( ( arguments ( '[' | '.' | '->' ) )=> arguments invocation_part ) | invocation_part )* arguments )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA71 : DFA
	{
		private const string DFA71_eotS =
			"\xE\xFFFF";
		private const string DFA71_eofS =
			"\xE\xFFFF";
		private const string DFA71_minS =
			"\x1\x1B\x1\xA\x1\xFFFF\x1\x2F\x1\x1B\x1\x15\x1\x1B\x1\xFFFF\x1\xA\x2"+
			"\xFFFF\x1\xA\x2\x15";
		private const string DFA71_maxS =
			"\x1\xC4\x1\x5B\x1\xFFFF\x1\x45\x3\xC4\x1\xFFFF\x1\x5B\x2\xFFFF\x1\x5B"+
			"\x2\xC4";
		private const string DFA71_acceptS =
			"\x2\xFFFF\x1\x2\x4\xFFFF\x1\x3\x1\xFFFF\x2\x1\x3\xFFFF";
		private const string DFA71_specialS =
			"\x5\xFFFF\x1\x1\x6\xFFFF\x1\x2\x1\x0}>";
		private static readonly string[] DFA71_transitionS =
			{
				"\x1\x1\x43\xFFFF\x1\x1\x1\xFFFF\x2\x1\x1\xFFFF\x2\x1\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\x2\x2\xFFFF\x1\x2\x4\xFFFF\x1\x2\x2\xFFFF\x1\x1\x1"+
				"\xFFFF\x1\x2\x1\x1\x1\xFFFF\x1\x1\x3\xFFFF\x1\x1\x2\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x1\x2\xFFFF\x1\x1\x2\xFFFF\x1\x2\x2\xFFFF\x1\x1\x1\xFFFF\x2\x1\x1"+
				"\xFFFF\x1\x2\x2\x1\x2\xFFFF\x1\x2\x1\x1\x1\xFFFF\x1\x1\x2\xFFFF\x1\x1"+
				"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x1\x4\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF"+
				"\x2\x1\x1\x2\x3\xFFFF\x1\x2\x5\xFFFF\x1\x1\x1\xFFFF\x2\x2\x2\xFFFF\x1"+
				"\x2\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\x1\xFFFF\x1\x1",
				"\x1\x6\x24\xFFFF\x1\x2\x15\xFFFF\x1\x2\xA\xFFFF\x1\x4\x1\x5\x7\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2",
				"",
				"\x1\x7\x15\xFFFF\x1\x2",
				"\x1\x8\x43\xFFFF\x1\x8\x1\xFFFF\x2\x8\x1\xFFFF\x2\x8\x3\xFFFF\x1\x8"+
				"\xB\xFFFF\x1\x8\x2\xFFFF\x1\x8\x1\xFFFF\x1\x8\x3\xFFFF\x1\x8\x5\xFFFF"+
				"\x1\x8\x2\xFFFF\x1\x8\x5\xFFFF\x1\x8\x1\xFFFF\x2\x8\x2\xFFFF\x2\x8\x3"+
				"\xFFFF\x1\x8\x1\xFFFF\x1\x8\x2\xFFFF\x1\x8\x2\xFFFF\x1\x8\x1\xFFFF\x1"+
				"\x8\x4\xFFFF\x1\x8\x3\xFFFF\x2\x8\xA\xFFFF\x1\x8\x6\xFFFF\x1\x8\x3\xFFFF"+
				"\x1\x8\x1\xFFFF\x1\x8",
				"\x1\xA\x5\xFFFF\x1\x2\x2E\xFFFF\x1\x9\x14\xFFFF\x1\x2\x1\xFFFF\x2\x2"+
				"\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x2\x4\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x2\x1\xFFFF\x2\x2\x1\xFFFF\x3\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x3\x2\x3\xFFFF\x1\x2\x5\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2"+
				"\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2",
				"\x1\xB\x43\xFFFF\x1\xB\x1\xFFFF\x2\xB\x1\xFFFF\x2\xB\x3\xFFFF\x1\xB"+
				"\xB\xFFFF\x1\xB\x2\xFFFF\x1\xB\x1\xFFFF\x1\xB\x3\xFFFF\x1\xB\x5\xFFFF"+
				"\x1\xB\x2\xFFFF\x1\xB\x5\xFFFF\x1\xB\x1\xFFFF\x2\xB\x2\xFFFF\x2\xB\x3"+
				"\xFFFF\x1\xB\x1\xFFFF\x1\xB\x2\xFFFF\x1\xB\x2\xFFFF\x1\xB\x1\xFFFF\x1"+
				"\xB\x4\xFFFF\x1\xB\x3\xFFFF\x2\xB\xA\xFFFF\x1\xB\x6\xFFFF\x1\xB\x3\xFFFF"+
				"\x1\xB\x1\xFFFF\x1\xB",
				"",
				"\x1\x6\x24\xFFFF\x1\x2\x15\xFFFF\x1\x2\xB\xFFFF\x1\xC\x7\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2",
				"",
				"",
				"\x1\x6\x24\xFFFF\x1\x2\x15\xFFFF\x1\x2\xB\xFFFF\x1\xD\x7\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2",
				"\x1\xA\x5\xFFFF\x1\x2\x2E\xFFFF\x1\x9\x14\xFFFF\x1\x2\x1\xFFFF\x2\x2"+
				"\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x2\x4\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x2\x1\xFFFF\x2\x2\x1\xFFFF\x3\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x3\x2\x3\xFFFF\x1\x2\x5\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2"+
				"\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2",
				"\x1\xA\x5\xFFFF\x1\x2\x2E\xFFFF\x1\x9\x14\xFFFF\x1\x2\x1\xFFFF\x2\x2"+
				"\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x1\x2\x4\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x2\x3\xFFFF\x1\x2\x2"+
				"\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x2\x1\xFFFF\x2\x2\x1\xFFFF\x3\x2\x2\xFFFF\x2\x2\x1\xFFFF\x1\x2\x2\xFFFF"+
				"\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x3\x2\x3\xFFFF\x1\x2\x5\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2"+
				"\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2"
			};

		private static readonly short[] DFA71_eot = DFA.UnpackEncodedString(DFA71_eotS);
		private static readonly short[] DFA71_eof = DFA.UnpackEncodedString(DFA71_eofS);
		private static readonly char[] DFA71_min = DFA.UnpackEncodedStringToUnsignedChars(DFA71_minS);
		private static readonly char[] DFA71_max = DFA.UnpackEncodedStringToUnsignedChars(DFA71_maxS);
		private static readonly short[] DFA71_accept = DFA.UnpackEncodedString(DFA71_acceptS);
		private static readonly short[] DFA71_special = DFA.UnpackEncodedString(DFA71_specialS);
		private static readonly short[][] DFA71_transition;

		static DFA71()
		{
			int numStates = DFA71_transitionS.Length;
			DFA71_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA71_transition[i] = DFA.UnpackEncodedString(DFA71_transitionS[i]);
			}
		}

		public DFA71( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 71;
			this.eot = DFA71_eot;
			this.eof = DFA71_eof;
			this.min = DFA71_min;
			this.max = DFA71_max;
			this.accept = DFA71_accept;
			this.special = DFA71_special;
			this.transition = DFA71_transition;
		}

		public override string Description { get { return "276:22: ( ( unbound_type_name )=> unbound_type_name | type | 'void' )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition71(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA71_13 = input.LA(1);


				int index71_13 = input.Index;
				input.Rewind();
				s = -1;
				if ((LA71_13==74) && (EvaluatePredicate(synpred13_cs_fragment))) {s = 9;}

				else if ((LA71_13==GT) && (EvaluatePredicate(synpred13_cs_fragment))) {s = 10;}

				else if ((LA71_13==IDENTIFIER||LA71_13==95||(LA71_13>=97 && LA71_13<=98)||(LA71_13>=100 && LA71_13<=101)||LA71_13==103||(LA71_13>=105 && LA71_13<=106)||LA71_13==109||LA71_13==114||LA71_13==117||(LA71_13>=119 && LA71_13<=120)||LA71_13==122||LA71_13==126||LA71_13==129||LA71_13==132||LA71_13==135||LA71_13==138||LA71_13==141||(LA71_13>=143 && LA71_13<=144)||(LA71_13>=146 && LA71_13<=148)||(LA71_13>=151 && LA71_13<=152)||LA71_13==154||LA71_13==157||LA71_13==160||LA71_13==162||LA71_13==167||LA71_13==169||(LA71_13>=171 && LA71_13<=173)||LA71_13==177||LA71_13==183||(LA71_13>=185 && LA71_13<=186)||(LA71_13>=189 && LA71_13<=190)||LA71_13==192||LA71_13==194||LA71_13==196)) {s = 2;}


				input.Seek(index71_13);
				if (s >= 0) return s;
				break;

			case 1:
				int LA71_5 = input.LA(1);


				int index71_5 = input.Index;
				input.Rewind();
				s = -1;
				if ((LA71_5==74) && (EvaluatePredicate(synpred13_cs_fragment))) {s = 9;}

				else if ((LA71_5==GT) && (EvaluatePredicate(synpred13_cs_fragment))) {s = 10;}

				else if ((LA71_5==IDENTIFIER||LA71_5==95||(LA71_5>=97 && LA71_5<=98)||(LA71_5>=100 && LA71_5<=101)||LA71_5==103||(LA71_5>=105 && LA71_5<=106)||LA71_5==109||LA71_5==114||LA71_5==117||(LA71_5>=119 && LA71_5<=120)||LA71_5==122||LA71_5==126||LA71_5==129||LA71_5==132||LA71_5==135||LA71_5==138||LA71_5==141||(LA71_5>=143 && LA71_5<=144)||(LA71_5>=146 && LA71_5<=148)||(LA71_5>=151 && LA71_5<=152)||LA71_5==154||LA71_5==157||LA71_5==160||LA71_5==162||LA71_5==167||LA71_5==169||(LA71_5>=171 && LA71_5<=173)||LA71_5==177||LA71_5==183||(LA71_5>=185 && LA71_5<=186)||(LA71_5>=189 && LA71_5<=190)||LA71_5==192||LA71_5==194||LA71_5==196)) {s = 2;}


				input.Seek(index71_5);
				if (s >= 0) return s;
				break;

			case 2:
				int LA71_12 = input.LA(1);


				int index71_12 = input.Index;
				input.Rewind();
				s = -1;
				if ((LA71_12==74) && (EvaluatePredicate(synpred13_cs_fragment))) {s = 9;}

				else if ((LA71_12==GT) && (EvaluatePredicate(synpred13_cs_fragment))) {s = 10;}

				else if ((LA71_12==IDENTIFIER||LA71_12==95||(LA71_12>=97 && LA71_12<=98)||(LA71_12>=100 && LA71_12<=101)||LA71_12==103||(LA71_12>=105 && LA71_12<=106)||LA71_12==109||LA71_12==114||LA71_12==117||(LA71_12>=119 && LA71_12<=120)||LA71_12==122||LA71_12==126||LA71_12==129||LA71_12==132||LA71_12==135||LA71_12==138||LA71_12==141||(LA71_12>=143 && LA71_12<=144)||(LA71_12>=146 && LA71_12<=148)||(LA71_12>=151 && LA71_12<=152)||LA71_12==154||LA71_12==157||LA71_12==160||LA71_12==162||LA71_12==167||LA71_12==169||(LA71_12>=171 && LA71_12<=173)||LA71_12==177||LA71_12==183||(LA71_12>=185 && LA71_12<=186)||(LA71_12>=189 && LA71_12<=190)||LA71_12==192||LA71_12==194||LA71_12==196)) {s = 2;}


				input.Seek(index71_12);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 71, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA72 : DFA
	{
		private const string DFA72_eotS =
			"\x7\xFFFF";
		private const string DFA72_eofS =
			"\x4\xFFFF\x1\x5\x2\xFFFF";
		private const string DFA72_minS =
			"\x1\xA\x1\x15\x1\xFFFF\x1\x15\x1\xA\x2\xFFFF";
		private const string DFA72_maxS =
			"\x1\x51\x1\x4A\x1\xFFFF\x1\x4A\x1\x2F\x2\xFFFF";
		private const string DFA72_acceptS =
			"\x2\xFFFF\x1\x2\x2\xFFFF\x1\x3\x1\x1";
		private const string DFA72_specialS =
			"\x4\xFFFF\x1\x0\x2\xFFFF}>";
		private static readonly string[] DFA72_transitionS =
			{
				"\x1\x2\x46\xFFFF\x1\x1",
				"\x1\x4\x34\xFFFF\x1\x3",
				"",
				"\x1\x4\x34\xFFFF\x1\x3",
				"\x1\x6\x24\xFFFF\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA72_eot = DFA.UnpackEncodedString(DFA72_eotS);
		private static readonly short[] DFA72_eof = DFA.UnpackEncodedString(DFA72_eofS);
		private static readonly char[] DFA72_min = DFA.UnpackEncodedStringToUnsignedChars(DFA72_minS);
		private static readonly char[] DFA72_max = DFA.UnpackEncodedStringToUnsignedChars(DFA72_maxS);
		private static readonly short[] DFA72_accept = DFA.UnpackEncodedString(DFA72_acceptS);
		private static readonly short[] DFA72_special = DFA.UnpackEncodedString(DFA72_specialS);
		private static readonly short[][] DFA72_transition;

		static DFA72()
		{
			int numStates = DFA72_transitionS.Length;
			DFA72_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA72_transition[i] = DFA.UnpackEncodedString(DFA72_transitionS[i]);
			}
		}

		public DFA72( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 72;
			this.eot = DFA72_eot;
			this.eof = DFA72_eof;
			this.min = DFA72_min;
			this.max = DFA72_max;
			this.accept = DFA72_accept;
			this.special = DFA72_special;
			this.transition = DFA72_transition;
		}

		public override string Description { get { return "()* loopback of 286:9: ( ( ( generic_dimension_specifier '.' )=> generic_dimension_specifier unbound_type_name_part ) | unbound_type_name_part )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition72(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA72_4 = input.LA(1);


				int index72_4 = input.Index;
				input.Rewind();
				s = -1;
				if ((LA72_4==EOF||LA72_4==RPAREN)) {s = 5;}

				else if ((LA72_4==DOT) && (EvaluatePredicate(synpred14_cs_fragment))) {s = 6;}


				input.Seek(index72_4);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 72, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _namespace_body_in_compilation_unit76 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_namespace_declaration88 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _qualified_identifier_in_namespace_declaration92 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _namespace_block_in_namespace_declaration96 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _SEMI_in_namespace_declaration100 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_namespace_block112 = new BitSet(new ulong[]{0x200000000020000UL,0x2010800108000000UL,0x9005043A90601800UL,0x202UL});
		public static readonly BitSet _namespace_body_in_namespace_block116 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_namespace_block121 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _extern_alias_directives_in_namespace_body133 = new BitSet(new ulong[]{0x200000000020002UL,0x2010800108000000UL,0x9005043A90601800UL,0x2UL});
		public static readonly BitSet _using_directives_in_namespace_body138 = new BitSet(new ulong[]{0x20002UL,0x2010800108000000UL,0x9005043A90601800UL,0x2UL});
		public static readonly BitSet _global_attributes_in_namespace_body143 = new BitSet(new ulong[]{0x20002UL,0x2010800108000000UL,0x9005043A90601800UL,0x2UL});
		public static readonly BitSet _namespace_member_declarations_in_namespace_body148 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _extern_alias_directive_in_extern_alias_directives160 = new BitSet(new ulong[]{0x2UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_extern_alias_directive172 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _98_in_extern_alias_directive176 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_extern_alias_directive180 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_extern_alias_directive183 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _using_directive_in_using_directives194 = new BitSet(new ulong[]{0x200000000000002UL});
		public static readonly BitSet _using_alias_directive_in_using_directive207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _using_namespace_directive_in_using_directive215 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USING_in_using_alias_directive227 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_using_alias_directive231 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_using_alias_directive235 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _namespace_or_type_name_in_using_alias_directive239 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_using_alias_directive243 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USING_in_using_namespace_directive254 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _namespace_name_in_using_namespace_directive258 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_using_namespace_directive262 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_member_declaration_in_namespace_member_declarations273 = new BitSet(new ulong[]{0x20002UL,0x2010800108000000UL,0x9005043A90601800UL,0x2UL});
		public static readonly BitSet _namespace_declaration_in_namespace_member_declaration285 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attributes_in_namespace_member_declaration293 = new BitSet(new ulong[]{0x20000UL,0x2010800100000000UL,0x9005043A90401800UL,0x2UL});
		public static readonly BitSet _modifiers_in_namespace_member_declaration298 = new BitSet(new ulong[]{0x20000UL,0x10800000000000UL,0x4000080000800UL});
		public static readonly BitSet _type_declaration_in_namespace_member_declaration303 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_type_declaration320 = new BitSet(new ulong[]{0x0UL,0x800000000000UL,0x4000000000800UL});
		public static readonly BitSet _class_declaration_in_type_declaration325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_type_declaration361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_declaration_in_type_declaration397 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_declaration_in_type_declaration406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_type_declaration414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_declaration_in_type_declaration422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_declaration_in_type_declaration430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _delegate_declaration_in_type_declaration438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_qualified_identifier450 = new BitSet(new ulong[]{0x402UL});
		public static readonly BitSet _DOT_in_qualified_identifier453 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_qualified_identifier455 = new BitSet(new ulong[]{0x402UL});
		public static readonly BitSet _namespace_or_type_name_in_namespace_name469 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifier_in_modifiers481 = new BitSet(new ulong[]{0x2UL,0x2000000100000000UL,0x9001043A10401000UL,0x2UL});
		public static readonly BitSet _attributes_in_class_member_declaration565 = new BitSet(new ulong[]{0x8020000UL,0x7DB5A6B780000000UL,0xF6873EBFB5DDBD92UL,0x417UL});
		public static readonly BitSet _modifiers_in_class_member_declaration574 = new BitSet(new ulong[]{0x8020000UL,0x5DB5A6B680000000UL,0x66863A85A59DAD92UL,0x415UL});
		public static readonly BitSet _112_in_class_member_declaration583 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_class_member_declaration587 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _constant_declarators_in_class_member_declaration591 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_class_member_declaration595 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _event_declaration_in_class_member_declaration603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_class_member_declaration613 = new BitSet(new ulong[]{0x42900180C100020UL,0x45A4A6B680000000UL,0x66863A85259DAC92UL,0x14UL});
		public static readonly BitSet _method_declaration_in_class_member_declaration616 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_declaration_in_class_member_declaration636 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_declaration_in_class_member_declaration656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_class_member_declaration676 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_declaration_in_class_member_declaration685 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _192_in_class_member_declaration694 = new BitSet(new ulong[]{0x42900180C100020UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x14UL});
		public static readonly BitSet _method_declaration_in_class_member_declaration698 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_class_member_declaration706 = new BitSet(new ulong[]{0x42900180C100020UL,0x45A426B680000000UL,0x66923A85279DA492UL,0x14UL});
		public static readonly BitSet _method_declaration_in_class_member_declaration720 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _property_declaration_in_class_member_declaration745 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_class_member_declaration774 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _DOT_in_class_member_declaration776 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _indexer_declaration_in_class_member_declaration778 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexer_declaration_in_class_member_declaration793 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _field_declaration_in_class_member_declaration809 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operator_declaration_in_class_member_declaration830 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_declaration_in_class_member_declaration857 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_class_member_declaration867 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_declaration_in_class_member_declaration876 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _delegate_declaration_in_class_member_declaration886 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conversion_operator_declaration_in_class_member_declaration895 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constructor_declaration_in_class_member_declaration903 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _destructor_declaration_in_class_member_declaration912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_primary_expression947 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _brackets_in_primary_expression951 = new BitSet(new ulong[]{0x200000000402UL,0x8000010UL});
		public static readonly BitSet _primary_expression_part_in_primary_expression955 = new BitSet(new ulong[]{0x200000000402UL,0x8000010UL});
		public static readonly BitSet _180_in_primary_expression974 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _brackets_in_primary_expression978 = new BitSet(new ulong[]{0x200000000402UL,0x8000010UL});
		public static readonly BitSet _primary_expression_part_in_primary_expression982 = new BitSet(new ulong[]{0x200000000402UL,0x8000010UL});
		public static readonly BitSet _primary_expression_start_in_primary_expression991 = new BitSet(new ulong[]{0x200000000402UL,0x8000010UL});
		public static readonly BitSet _primary_expression_part_in_primary_expression995 = new BitSet(new ulong[]{0x200000000402UL,0x8000010UL});
		public static readonly BitSet _150_in_primary_expression1004 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x35UL});
		public static readonly BitSet _object_creation_expression_in_primary_expression1047 = new BitSet(new ulong[]{0x200000000400UL,0x8000010UL});
		public static readonly BitSet _primary_expression_part_in_primary_expression1051 = new BitSet(new ulong[]{0x200000000402UL,0x8000010UL});
		public static readonly BitSet _delegate_creation_expression_in_primary_expression1115 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _object_creation_expression_in_primary_expression1135 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _anonymous_object_creation_expression_in_primary_expression1155 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sizeof_expression_in_primary_expression1171 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _checked_expression_in_primary_expression1185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unchecked_expression_in_primary_expression1207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _default_value_expression_in_primary_expression1227 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _anonymous_method_expression_in_primary_expression1243 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _predefined_type_in_primary_expression_start1262 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_primary_expression_start1293 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _generic_argument_list_in_primary_expression_start1297 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_primary_expression_start1305 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _80_in_primary_expression_start1308 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_primary_expression_start1312 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_primary_expression_start1322 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_primary_expression_start1331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _paren_expression_in_primary_expression_start1339 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeof_expression_in_primary_expression_start1347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_primary_expression_start1368 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _access_identifier_in_primary_expression_part1385 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _brackets_or_arguments_in_primary_expression_part1393 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _access_operator_in_access_identifier1404 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _type_or_generic_in_access_identifier1408 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _brackets_in_brackets_or_arguments1436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_brackets_or_arguments1440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_brackets1451 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6900009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_list_in_brackets1455 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_brackets1460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_paren_expression1473 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_paren_expression1477 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_paren_expression1481 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_arguments1493 = new BitSet(new ulong[]{0x2429801C0C100020UL,0x45BC66F6800009B4UL,0x6F927AC52DDDA492UL,0x414UL});
		public static readonly BitSet _argument_list_in_arguments1497 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_arguments1502 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _argument_in_argument_list1514 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_argument_list1517 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927AC52DDDA492UL,0x414UL});
		public static readonly BitSet _argument_in_argument_list1519 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _argument_name_in_argument1532 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927AC52DDDA492UL,0x414UL});
		public static readonly BitSet _argument_value_in_argument1536 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _argument_value_in_argument1544 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_argument_name1554 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_argument_name1558 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_argument_value1569 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ref_variable_reference_in_argument_value1578 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_argument_value1587 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _variable_reference_in_argument_value1591 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_ref_variable_reference1602 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _68_in_ref_variable_reference1630 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_ref_variable_reference1634 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_ref_variable_reference1638 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927AC525DDA492UL,0x414UL});
		public static readonly BitSet _ref_variable_reference_in_ref_variable_reference1643 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_reference_in_ref_variable_reference1647 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_reference_in_ref_variable_reference1764 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_variable_reference1777 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _rank_specifier_in_rank_specifiers1788 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_rank_specifier1809 = new BitSet(new ulong[]{0x0UL,0x10000400UL});
		public static readonly BitSet _dim_separators_in_rank_specifier1813 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_rank_specifier1818 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _74_in_dim_separators1830 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _type_name_in_delegate_creation_expression1849 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_delegate_creation_expression1853 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _type_name_in_delegate_creation_expression1857 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_delegate_creation_expression1861 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _anonymous_object_initializer_in_anonymous_object_creation_expression1878 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_anonymous_object_initializer1890 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000400UL,0x408018852519A090UL,0x214UL});
		public static readonly BitSet _member_declarator_list_in_anonymous_object_initializer1894 = new BitSet(new ulong[]{0x0UL,0x400UL,0x0UL,0x200UL});
		public static readonly BitSet _74_in_anonymous_object_initializer1899 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_anonymous_object_initializer1904 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_declarator_in_member_declarator_list1915 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_member_declarator_list1919 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _member_declarator_in_member_declarator_list1921 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _identifier_in_member_declarator1936 = new BitSet(new ulong[]{0x400UL,0x220000UL});
		public static readonly BitSet _generic_argument_list_in_member_declarator1941 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_member_declarator1963 = new BitSet(new ulong[]{0x42900180C100020UL,0x45BC66F680000010UL,0x6F927A8525DDA492UL,0x14UL});
		public static readonly BitSet _primary_or_array_creation_expression_in_member_declarator1967 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _85_in_member_declarator1989 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_member_declarator1993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _array_creation_expression_in_primary_or_array_creation_expression2011 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_expression_in_primary_or_array_creation_expression2019 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_array_creation_expression2036 = new BitSet(new ulong[]{0x8000000UL,0x45A426B688000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_array_creation_expression2050 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x0UL,0x20UL});
		public static readonly BitSet _91_in_array_creation_expression2055 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_list_in_array_creation_expression2059 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_array_creation_expression2063 = new BitSet(new ulong[]{0x200000000402UL,0x8000010UL,0x0UL,0x20UL});
		public static readonly BitSet _rank_specifiers_in_array_creation_expression2090 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _array_initializer_in_array_creation_expression2095 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_array_creation_expression2161 = new BitSet(new ulong[]{0x200000000400UL,0x8000000UL});
		public static readonly BitSet _invocation_part_in_array_creation_expression2165 = new BitSet(new ulong[]{0x200000000400UL,0x8000010UL});
		public static readonly BitSet _invocation_part_in_array_creation_expression2192 = new BitSet(new ulong[]{0x200000000400UL,0x8000010UL});
		public static readonly BitSet _arguments_in_array_creation_expression2198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _array_initializer_in_array_creation_expression2247 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _rank_specifier_in_array_creation_expression2279 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _array_initializer_in_array_creation_expression2297 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_array_initializer2333 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F680000DB4UL,0x6F927A8525DDA492UL,0x634UL});
		public static readonly BitSet _variable_initializer_list_in_array_initializer2337 = new BitSet(new ulong[]{0x0UL,0x400UL,0x0UL,0x200UL});
		public static readonly BitSet _74_in_array_initializer2342 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_array_initializer2347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_initializer_in_variable_initializer_list2358 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_variable_initializer_list2361 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x434UL});
		public static readonly BitSet _variable_initializer_in_variable_initializer_list2363 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _expression_in_variable_initializer2376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _array_initializer_in_variable_initializer2380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _174_in_sizeof_expression2391 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_sizeof_expression2395 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _unmanaged_type_in_sizeof_expression2399 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_sizeof_expression2403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_checked_expression2414 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_checked_expression2418 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_checked_expression2422 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_checked_expression2426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _187_in_unchecked_expression2438 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_unchecked_expression2442 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_unchecked_expression2446 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_unchecked_expression2450 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_default_value_expression2462 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_default_value_expression2466 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_default_value_expression2470 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_default_value_expression2474 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_anonymous_method_expression2485 = new BitSet(new ulong[]{0x4000000000000UL,0x10UL,0x0UL,0x20UL});
		public static readonly BitSet _explicit_anonymous_function_signature_in_anonymous_method_expression2489 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_anonymous_method_expression2494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_explicit_anonymous_function_signature2504 = new BitSet(new ulong[]{0x800008000000UL,0x45A426B680000000UL,0x66823AC52D9DA492UL,0x15UL});
		public static readonly BitSet _explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature2508 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_explicit_anonymous_function_signature2513 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list2524 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_explicit_anonymous_function_parameter_list2529 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823AC52D9DA492UL,0x15UL});
		public static readonly BitSet _explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list2533 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter2547 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_explicit_anonymous_function_parameter2552 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_explicit_anonymous_function_parameter2556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_object_creation_expression2589 = new BitSet(new ulong[]{0x0UL,0x10UL,0x0UL,0x20UL});
		public static readonly BitSet _68_in_object_creation_expression2604 = new BitSet(new ulong[]{0x2429801C0C100020UL,0x45BC66F6800009B4UL,0x6F927AC52DDDA492UL,0x414UL});
		public static readonly BitSet _argument_list_in_object_creation_expression2608 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_object_creation_expression2613 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _object_or_collection_initializer_in_object_creation_expression2617 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _object_or_collection_initializer_in_object_creation_expression2634 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_object_or_collection_initializer2652 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F680000DB4UL,0x6F927A8525DDA492UL,0x634UL});
		public static readonly BitSet _object_initializer_in_object_or_collection_initializer2656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collection_initializer_in_object_or_collection_initializer2669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _element_initializer_list_in_collection_initializer2682 = new BitSet(new ulong[]{0x0UL,0x400UL,0x0UL,0x200UL});
		public static readonly BitSet _74_in_collection_initializer2686 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_collection_initializer2691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _element_initializer_in_element_initializer_list2703 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_element_initializer_list2707 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x434UL});
		public static readonly BitSet _element_initializer_in_element_initializer_list2709 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _non_assignment_expression_in_element_initializer2723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_element_initializer2732 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_list_in_element_initializer2736 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_element_initializer2740 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_initializer_list_in_object_initializer2758 = new BitSet(new ulong[]{0x0UL,0x400UL,0x0UL,0x200UL});
		public static readonly BitSet _74_in_object_initializer2763 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_object_initializer2768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_initializer_in_member_initializer_list2780 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _74_in_member_initializer_list2784 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _member_initializer_in_member_initializer_list2786 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_member_initializer2799 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_member_initializer2803 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x434UL});
		public static readonly BitSet _initializer_value_in_member_initializer2807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_initializer_value2819 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _object_or_collection_initializer_in_initializer_value2828 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _184_in_typeof_expression2843 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_typeof_expression2847 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _unbound_type_name_in_typeof_expression2858 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _type_in_typeof_expression2884 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _192_in_typeof_expression2911 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_typeof_expression2916 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unbound_type_name_start_in_unbound_type_name2934 = new BitSet(new ulong[]{0x400UL,0x20000UL});
		public static readonly BitSet _generic_dimension_specifier_in_unbound_type_name2959 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _unbound_type_name_part_in_unbound_type_name2963 = new BitSet(new ulong[]{0x400UL,0x20000UL});
		public static readonly BitSet _unbound_type_name_part_in_unbound_type_name2976 = new BitSet(new ulong[]{0x400UL,0x20000UL});
		public static readonly BitSet _generic_dimension_specifier_in_unbound_type_name2995 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_unbound_type_name_start3011 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _80_in_unbound_type_name_start3014 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_unbound_type_name_start3016 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_unbound_type_name_part3028 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_unbound_type_name_part3032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_generic_dimension_specifier3043 = new BitSet(new ulong[]{0x200000UL,0x400UL});
		public static readonly BitSet _commas_in_generic_dimension_specifier3047 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _GT_in_generic_dimension_specifier3052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _74_in_commas3064 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _namespace_or_type_name_in_type_name3083 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_or_generic_in_namespace_or_type_name3095 = new BitSet(new ulong[]{0x402UL,0x10000UL});
		public static readonly BitSet _80_in_namespace_or_type_name3100 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _type_or_generic_in_namespace_or_type_name3102 = new BitSet(new ulong[]{0x402UL});
		public static readonly BitSet _DOT_in_namespace_or_type_name3107 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _type_or_generic_in_namespace_or_type_name3111 = new BitSet(new ulong[]{0x402UL});
		public static readonly BitSet _identifier_in_type_or_generic3134 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _generic_argument_list_in_type_or_generic3138 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_type_or_generic3146 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qid_start_in_qid3160 = new BitSet(new ulong[]{0x200000000402UL});
		public static readonly BitSet _qid_part_in_qid3164 = new BitSet(new ulong[]{0x200000000402UL});
		public static readonly BitSet _predefined_type_in_qid_start3180 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_qid_start3199 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _generic_argument_list_in_qid_start3203 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_qid_start3213 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _80_in_qid_start3218 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_qid_start3222 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_qid_start3232 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _access_identifier_in_qid_part3252 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_generic_argument_list3265 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_arguments_in_generic_argument_list3269 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _GT_in_generic_argument_list3273 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_type_arguments3285 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_type_arguments3288 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_type_arguments3290 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _predefined_type_in_type3322 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _type_name_in_type3326 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _rank_specifiers_in_type3331 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _69_in_type3335 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _predefined_type_in_type3367 = new BitSet(new ulong[]{0x0UL,0x2000020UL});
		public static readonly BitSet _type_name_in_type3371 = new BitSet(new ulong[]{0x0UL,0x2000020UL});
		public static readonly BitSet _69_in_type3377 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _89_in_type3382 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _predefined_type_in_type3392 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_type3396 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _192_in_type3405 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_type3407 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _predefined_type_in_non_nullable_type3424 = new BitSet(new ulong[]{0x2UL,0x8000020UL});
		public static readonly BitSet _type_name_in_non_nullable_type3428 = new BitSet(new ulong[]{0x2UL,0x8000020UL});
		public static readonly BitSet _rank_specifiers_in_non_nullable_type3443 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _69_in_non_nullable_type3447 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _69_in_non_nullable_type3465 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _192_in_non_nullable_type3486 = new BitSet(new ulong[]{0x0UL,0x20UL});
		public static readonly BitSet _69_in_non_nullable_type3490 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _type_in_non_array_type3507 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_array_type3517 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_unmanaged_type3527 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_class_type3537 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_pointer_type3547 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SEMI_in_block3562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_block3570 = new BitSet(new ulong[]{0x262D001C1C100020UL,0x45FF67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x63DUL});
		public static readonly BitSet _statement_list_in_block3574 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_block3579 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_in_statement_list3589 = new BitSet(new ulong[]{0x262D001C1C100022UL,0x45FF67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x43DUL});
		public static readonly BitSet _assignment_in_expression3620 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _non_assignment_expression_in_expression3629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_list3644 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_expression_list3648 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_expression_list3652 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _unary_expression_in_assignment3665 = new BitSet(new ulong[]{0x200000UL,0x40285249UL,0x0UL,0x80UL});
		public static readonly BitSet _assignment_operator_in_assignment3669 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_assignment3673 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cast_expression_in_unary_expression3696 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_or_array_creation_expression_in_unary_expression3704 = new BitSet(new ulong[]{0x2UL,0x900UL});
		public static readonly BitSet _72_in_unary_expression3708 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _75_in_unary_expression3713 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_unary_expression3722 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _unary_expression_in_unary_expression3726 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MINUS_in_unary_expression3735 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _unary_expression_in_unary_expression3739 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _61_in_unary_expression3748 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _unary_expression_in_unary_expression3752 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _202_in_unary_expression3761 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _unary_expression_in_unary_expression3765 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pre_increment_expression_in_unary_expression3774 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pre_decrement_expression_in_unary_expression3783 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pointer_indirection_expression_in_unary_expression3792 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addressof_expression_in_unary_expression3800 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_cast_expression3816 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_cast_expression3820 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_cast_expression3824 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _unary_expression_in_cast_expression3828 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _85_in_assignment_operator3839 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _73_in_assignment_operator3843 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _76_in_assignment_operator3847 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _70_in_assignment_operator3851 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _78_in_assignment_operator3855 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_assignment_operator3859 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _67_in_assignment_operator3863 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _199_in_assignment_operator3867 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _94_in_assignment_operator3871 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_assignment_operator3875 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_assignment_operator3879 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_assignment_operator3881 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _72_in_pre_increment_expression3893 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _unary_expression_in_pre_increment_expression3897 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _75_in_pre_decrement_expression3909 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _unary_expression_in_pre_decrement_expression3913 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _69_in_pointer_indirection_expression3924 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _unary_expression_in_pointer_indirection_expression3928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _66_in_addressof_expression3939 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _unary_expression_in_addressof_expression3943 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expression_in_non_assignment_expression3970 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_expression_in_non_assignment_expression3984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditional_expression_in_non_assignment_expression3993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expression_in_multiplicative_expression4013 = new BitSet(new ulong[]{0x8000000000000002UL,0x2020UL});
		public static readonly BitSet _set_in_multiplicative_expression4018 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _unary_expression_in_multiplicative_expression4028 = new BitSet(new ulong[]{0x8000000000000002UL,0x2020UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression4041 = new BitSet(new ulong[]{0x400000002UL,0x80UL});
		public static readonly BitSet _set_in_additive_expression4044 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression4052 = new BitSet(new ulong[]{0x400000002UL,0x80UL});
		public static readonly BitSet _additive_expression_in_shift_expression4066 = new BitSet(new ulong[]{0x200002UL,0x40000UL});
		public static readonly BitSet _82_in_shift_expression4070 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _GT_in_shift_expression4072 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _GT_in_shift_expression4074 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _additive_expression_in_shift_expression4077 = new BitSet(new ulong[]{0x200002UL,0x40000UL});
		public static readonly BitSet _shift_expression_in_relational_expression4090 = new BitSet(new ulong[]{0x200002UL,0x801120000UL,0x4000UL});
		public static readonly BitSet _set_in_relational_expression4103 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _shift_expression_in_relational_expression4113 = new BitSet(new ulong[]{0x200002UL,0x801120000UL,0x4000UL});
		public static readonly BitSet _set_in_relational_expression4131 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _non_nullable_type_in_relational_expression4139 = new BitSet(new ulong[]{0x200002UL,0x801120000UL,0x4000UL});
		public static readonly BitSet _relational_expression_in_equality_expression4162 = new BitSet(new ulong[]{0x4000000000000002UL,0x400000UL});
		public static readonly BitSet _set_in_equality_expression4172 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _relational_expression_in_equality_expression4180 = new BitSet(new ulong[]{0x4000000000000002UL,0x400000UL});
		public static readonly BitSet _equality_expression_in_and_expression4193 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _66_in_and_expression4196 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _equality_expression_in_and_expression4200 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _and_expression_in_exclusive_or_expression4213 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_exclusive_or_expression4216 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _and_expression_in_exclusive_or_expression4220 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _exclusive_or_expression_in_inclusive_or_expression4233 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _198_in_inclusive_or_expression4238 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _exclusive_or_expression_in_inclusive_or_expression4242 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _inclusive_or_expression_in_conditional_and_expression4255 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _65_in_conditional_and_expression4260 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _inclusive_or_expression_in_conditional_and_expression4264 = new BitSet(new ulong[]{0x2UL,0x2UL});
		public static readonly BitSet _conditional_and_expression_in_conditional_or_expression4277 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _200_in_conditional_or_expression4281 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _conditional_and_expression_in_conditional_or_expression4285 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _conditional_or_expression_in_null_coalescing_expression4299 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_null_coalescing_expression4304 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _conditional_or_expression_in_null_coalescing_expression4308 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _null_coalescing_expression_in_conditional_expression4321 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _89_in_conditional_expression4326 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_conditional_expression4330 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_conditional_expression4334 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_conditional_expression4338 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _anonymous_function_signature_in_lambda_expression4361 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_lambda_expression4365 = new BitSet(new ulong[]{0x242D001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x434UL});
		public static readonly BitSet _anonymous_function_body_in_lambda_expression4369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_anonymous_function_signature4379 = new BitSet(new ulong[]{0x800008000000UL,0x45A426B680000000UL,0x66823AC52D9DA492UL,0x15UL});
		public static readonly BitSet _explicit_anonymous_function_parameter_list_in_anonymous_function_signature4382 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _implicit_anonymous_function_parameter_list_in_anonymous_function_signature4394 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_anonymous_function_signature4398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _implicit_anonymous_function_parameter_list_in_anonymous_function_signature4406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list4421 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_implicit_anonymous_function_parameter_list4426 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list4430 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _identifier_in_implicit_anonymous_function_parameter4443 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_anonymous_function_body4453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_anonymous_function_body4461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _from_clause_in_query_expression4476 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80004018090UL,0x4UL});
		public static readonly BitSet _query_body_in_query_expression4480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_body_clauses_in_query_body4496 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000080UL});
		public static readonly BitSet _select_or_group_clause_in_query_body4501 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000UL});
		public static readonly BitSet _query_continuation_in_query_body4512 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_query_continuation4525 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_query_continuation4529 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80004018090UL,0x4UL});
		public static readonly BitSet _query_body_in_query_continuation4533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_body_clause_in_query_body_clauses4543 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4018010UL,0x4UL});
		public static readonly BitSet _from_clause_in_query_body_clause4555 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _let_clause_in_query_body_clause4563 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _where_clause_in_query_body_clause4571 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _join_clause_in_query_body_clause4579 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderby_clause_in_query_body_clause4587 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_from_clause4597 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_from_clause4601 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_from_clause4606 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_from_clause4610 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_from_clause4614 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_join_clause4625 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_join_clause4629 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_join_clause4634 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_join_clause4638 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_join_clause4642 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_join_clause4646 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_join_clause4650 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _122_in_join_clause4654 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_join_clause4658 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_join_clause4661 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_join_clause4663 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _144_in_let_clause4676 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_let_clause4680 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_let_clause4684 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_let_clause4688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _154_in_orderby_clause4698 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _ordering_list_in_orderby_clause4702 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ordering_in_ordering_list4713 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_ordering_list4718 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _ordering_in_ordering_list4722 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _expression_in_ordering4735 = new BitSet(new ulong[]{0x0UL,0x20001000000000UL});
		public static readonly BitSet _ordering_direction_in_ordering4740 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_clause_in_select_or_group_clause4774 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _group_clause_in_select_or_group_clause4782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _171_in_select_clause4793 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_select_clause4797 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_group_clause4808 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_group_clause4812 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _105_in_group_clause4816 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_group_clause4820 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _194_in_where_clause4831 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _boolean_expression_in_where_clause4835 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_boolean_expression4846 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_attribute_in_global_attributes4861 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_global_attribute4874 = new BitSet(new ulong[]{0x0UL,0x2000000000UL,0x100000UL});
		public static readonly BitSet _global_attribute_target_specifier_in_global_attribute4878 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _attribute_list_in_global_attribute4882 = new BitSet(new ulong[]{0x0UL,0x10000400UL});
		public static readonly BitSet _74_in_global_attribute4886 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_global_attribute4891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_attribute_target_in_global_attribute_target_specifier4903 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_global_attribute_target_specifier4907 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_sections_in_attributes4935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_section_in_attribute_sections4947 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_attribute_section4960 = new BitSet(new ulong[]{0x8000000UL,0x4D20023680000000UL,0x408019852519A090UL,0x14UL});
		public static readonly BitSet _attribute_target_specifier_in_attribute_section4964 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _attribute_list_in_attribute_section4969 = new BitSet(new ulong[]{0x0UL,0x10000400UL});
		public static readonly BitSet _74_in_attribute_section4973 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_attribute_section4978 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_target_in_attribute_target_specifier4990 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_attribute_target_specifier4994 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_attribute_list5042 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_attribute_list5045 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _attribute_in_attribute_list5047 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _type_name_in_attribute5062 = new BitSet(new ulong[]{0x2UL,0x10UL});
		public static readonly BitSet _attribute_arguments_in_attribute5066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_attribute_arguments5080 = new BitSet(new ulong[]{0x2429801C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _RPAREN_in_attribute_arguments5085 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _positional_argument_in_attribute_arguments5111 = new BitSet(new ulong[]{0x800008000000UL,0x4520023680000400UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _named_argument_in_attribute_arguments5130 = new BitSet(new ulong[]{0x800008000000UL,0x4520023680000400UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _74_in_attribute_arguments5170 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _positional_argument_in_attribute_arguments5172 = new BitSet(new ulong[]{0x800008000000UL,0x4520023680000400UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _RPAREN_in_attribute_arguments5192 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _positional_argument_in_positional_argument_list5218 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_positional_argument_list5221 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _positional_argument_in_positional_argument_list5223 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _attribute_argument_expression_in_positional_argument5237 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _named_argument_in_named_argument_list5249 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_named_argument_list5252 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _named_argument_in_named_argument_list5254 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _identifier_in_named_argument5268 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_named_argument5272 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _attribute_argument_expression_in_named_argument5276 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_attribute_argument_expression5288 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_class_declaration5304 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _type_or_generic_in_class_declaration5307 = new BitSet(new ulong[]{0x0UL,0x8000UL,0x0UL,0x24UL});
		public static readonly BitSet _class_base_in_class_declaration5311 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x24UL});
		public static readonly BitSet _type_parameter_constraints_clauses_in_class_declaration5316 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _class_body_in_class_declaration5321 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _SEMI_in_class_declaration5325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_class_base5347 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _interface_type_list_in_class_base5351 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_interface_type_list5367 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_interface_type_list5370 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_interface_type_list5374 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _197_in_class_body5388 = new BitSet(new ulong[]{0x8020000UL,0x7DB5A6B788000000UL,0xF6873EBFB5DDBD92UL,0x617UL});
		public static readonly BitSet _class_member_declarations_in_class_body5392 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_class_body5397 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_member_declaration_in_class_member_declarations5408 = new BitSet(new ulong[]{0x8020002UL,0x7DB5A6B788000000UL,0xF6873EBFB5DDBD92UL,0x417UL});
		public static readonly BitSet _112_in_constant_declaration5422 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_constant_declaration5426 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _constant_declarators_in_constant_declaration5430 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_constant_declaration5434 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_declarator_in_constant_declarators5445 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_constant_declarators5448 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _constant_declarator_in_constant_declarators5450 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _identifier_in_constant_declarator5463 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _85_in_constant_declarator5468 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _constant_expression_in_constant_declarator5472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_constant_expression5485 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_declarators_in_field_declaration5497 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_field_declaration5501 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_declarator_in_variable_declarators5512 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_variable_declarators5515 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _variable_declarator_in_variable_declarators5519 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _type_name_in_variable_declarator5532 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _85_in_variable_declarator5535 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x434UL});
		public static readonly BitSet _variable_initializer_in_variable_declarator5539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _method_header_in_method_declaration5556 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _method_body_in_method_declaration5560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_method_header5571 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_method_header5574 = new BitSet(new ulong[]{0x800008000000UL,0x45A426B688000000UL,0x66923AC56D9DA492UL,0x15UL});
		public static readonly BitSet _formal_parameter_list_in_method_header5578 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_method_header5583 = new BitSet(new ulong[]{0x2UL,0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _type_parameter_constraints_clauses_in_method_header5587 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_method_body5599 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _qid_in_member_name5610 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_property_declaration5625 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_property_declaration5629 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x101A00001020UL});
		public static readonly BitSet _accessor_declarations_in_property_declaration5633 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_property_declaration5637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attributes_in_accessor_declarations5648 = new BitSet(new ulong[]{0x0UL,0x0UL,0x101A00001020UL});
		public static readonly BitSet _get_accessor_declaration_in_accessor_declarations5660 = new BitSet(new ulong[]{0x2UL,0x8000000UL,0x101A00001000UL});
		public static readonly BitSet _attributes_in_accessor_declarations5664 = new BitSet(new ulong[]{0x2UL,0x0UL,0x101A00001000UL});
		public static readonly BitSet _set_accessor_declaration_in_accessor_declarations5669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_accessor_declaration_in_accessor_declarations5682 = new BitSet(new ulong[]{0x2UL,0x8000000UL,0x1A00001020UL});
		public static readonly BitSet _attributes_in_accessor_declarations5686 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1A00001020UL});
		public static readonly BitSet _get_accessor_declaration_in_accessor_declarations5691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _accessor_modifier_in_get_accessor_declaration5704 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_get_accessor_declaration5709 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _accessor_body_in_get_accessor_declaration5713 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _accessor_modifier_in_set_accessor_declaration5724 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_set_accessor_declaration5729 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _accessor_body_in_set_accessor_declaration5733 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_accessor_body5767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_event_declaration5780 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_event_declaration5784 = new BitSet(new ulong[]{0x42900180C100020UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x14UL});
		public static readonly BitSet _member_name_in_event_declaration5805 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_event_declaration5809 = new BitSet(new ulong[]{0x0UL,0x208000000UL,0x8000000000UL});
		public static readonly BitSet _event_accessor_declarations_in_event_declaration5813 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_event_declaration5817 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variable_declarators_in_event_declaration5829 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_event_declaration5833 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifier_in_event_modifiers5854 = new BitSet(new ulong[]{0x2UL,0x2000000100000000UL,0x9001043A10401000UL,0x2UL});
		public static readonly BitSet _attributes_in_event_accessor_declarations5866 = new BitSet(new ulong[]{0x0UL,0x200000000UL,0x8000000000UL});
		public static readonly BitSet _add_accessor_declaration_in_event_accessor_declarations5873 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x8000000000UL});
		public static readonly BitSet _attributes_in_event_accessor_declarations5877 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _remove_accessor_declaration_in_event_accessor_declarations5882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _remove_accessor_declaration_in_event_accessor_declarations5906 = new BitSet(new ulong[]{0x0UL,0x208000000UL});
		public static readonly BitSet _attributes_in_event_accessor_declarations5910 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _add_accessor_declaration_in_event_accessor_declarations5915 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _97_in_add_accessor_declaration5928 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_add_accessor_declaration5932 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _167_in_remove_accessor_declaration5943 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_remove_accessor_declaration5947 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ENUM_in_enum_declaration5962 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_enum_declaration5966 = new BitSet(new ulong[]{0x0UL,0x8000UL,0x0UL,0x20UL});
		public static readonly BitSet _enum_base_in_enum_declaration5970 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _enum_body_in_enum_declaration5975 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _SEMI_in_enum_declaration5979 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_enum_base5991 = new BitSet(new ulong[]{0x0UL,0x240000000000UL,0x2600220000040400UL});
		public static readonly BitSet _integral_type_in_enum_base5995 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_enum_body6006 = new BitSet(new ulong[]{0x8000000UL,0x4520023688000000UL,0x408018852519A090UL,0x214UL});
		public static readonly BitSet _enum_member_declarations_in_enum_body6009 = new BitSet(new ulong[]{0x0UL,0x400UL,0x0UL,0x200UL});
		public static readonly BitSet _74_in_enum_body6011 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_enum_body6018 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_member_declaration_in_enum_member_declarations6029 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_enum_member_declarations6032 = new BitSet(new ulong[]{0x8000000UL,0x4520023688000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _enum_member_declaration_in_enum_member_declarations6034 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _attributes_in_enum_member_declaration6047 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_enum_member_declaration6052 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _85_in_enum_member_declaration6057 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_enum_member_declaration6061 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_delegate_declaration6124 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _return_type_in_delegate_declaration6128 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_delegate_declaration6132 = new BitSet(new ulong[]{0x0UL,0x20010UL});
		public static readonly BitSet _variant_generic_parameter_list_in_delegate_declaration6135 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_delegate_declaration6149 = new BitSet(new ulong[]{0x800008000000UL,0x45A426B688000000UL,0x66923AC56D9DA492UL,0x15UL});
		public static readonly BitSet _formal_parameter_list_in_delegate_declaration6153 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_delegate_declaration6158 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _type_parameter_constraints_clauses_in_delegate_declaration6162 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_delegate_declaration6167 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifier_in_delegate_modifiers6178 = new BitSet(new ulong[]{0x2UL,0x2000000100000000UL,0x9001043A10401000UL,0x2UL});
		public static readonly BitSet _81_in_variant_generic_parameter_list6191 = new BitSet(new ulong[]{0x8000000UL,0x4520023688000000UL,0x408018852D19A290UL,0x14UL});
		public static readonly BitSet _variant_type_parameters_in_variant_generic_parameter_list6195 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _GT_in_variant_generic_parameter_list6199 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variant_type_variable_name_in_variant_type_parameters6210 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_variant_type_parameters6213 = new BitSet(new ulong[]{0x8000000UL,0x4520023688000000UL,0x408018852D19A290UL,0x14UL});
		public static readonly BitSet _variant_type_variable_name_in_variant_type_parameters6215 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _attributes_in_variant_type_variable_name6228 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852D19A290UL,0x14UL});
		public static readonly BitSet _variance_annotation_in_variant_type_variable_name6233 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _type_variable_name_in_variant_type_variable_name6238 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_parameter_constraints_clause_in_type_parameter_constraints_clauses6265 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_type_parameter_constraints_clauses6270 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _type_parameter_constraints_clause_in_type_parameter_constraints_clauses6274 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _194_in_type_parameter_constraints_clause6287 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _type_variable_name_in_type_parameter_constraints_clause6291 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_type_parameter_constraints_clause6295 = new BitSet(new ulong[]{0x8000000UL,0x4520823680000000UL,0x408418852559A090UL,0x14UL});
		public static readonly BitSet _type_parameter_constraint_list_in_type_parameter_constraints_clause6299 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_type_parameter_constraint_list6362 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_type_parameter_constraint_list6373 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _secondary_constraint_list_in_type_parameter_constraint_list6377 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_type_parameter_constraint_list6384 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _constructor_constraint_in_type_parameter_constraint_list6388 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _secondary_constraint_list_in_type_parameter_constraint_list6398 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_type_parameter_constraint_list6403 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _constructor_constraint_in_type_parameter_constraint_list6407 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constructor_constraint_in_type_parameter_constraint_list6417 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _secondary_constraint_in_secondary_constraint_list6432 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_secondary_constraint_list6435 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _secondary_constraint_in_secondary_constraint_list6437 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _type_name_in_secondary_constraint6450 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_type_variable_name6463 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_constructor_constraint6474 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_constructor_constraint6478 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_constructor_constraint6482 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_return_type6493 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _192_in_return_type6502 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _formal_parameter_in_formal_parameter_list6512 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_formal_parameter_list6515 = new BitSet(new ulong[]{0x8000000UL,0x45A426B688000000UL,0x66923AC56D9DA492UL,0x15UL});
		public static readonly BitSet _formal_parameter_in_formal_parameter_list6517 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _attributes_in_formal_parameter6530 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66923AC56D9DA492UL,0x15UL});
		public static readonly BitSet _fixed_parameter_in_formal_parameter6536 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameter_array_in_formal_parameter6540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _95_in_formal_parameter6550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fixed_parameter_in_fixed_parameters6561 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_fixed_parameters6566 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66923AC52D9DA492UL,0x15UL});
		public static readonly BitSet _fixed_parameter_in_fixed_parameters6570 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _parameter_modifier_in_fixed_parameter6584 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_fixed_parameter6589 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_fixed_parameter6593 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _default_argument_in_fixed_parameter6597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _85_in_default_argument6610 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_default_argument6612 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _158_in_parameter_array6641 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_parameter_array6645 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_parameter_array6649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _139_in_interface_declaration6662 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_interface_declaration6666 = new BitSet(new ulong[]{0x0UL,0x28000UL,0x0UL,0x24UL});
		public static readonly BitSet _variant_generic_parameter_list_in_interface_declaration6670 = new BitSet(new ulong[]{0x0UL,0x8000UL,0x0UL,0x24UL});
		public static readonly BitSet _interface_base_in_interface_declaration6682 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x24UL});
		public static readonly BitSet _type_parameter_constraints_clauses_in_interface_declaration6687 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _interface_body_in_interface_declaration6692 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _SEMI_in_interface_declaration6696 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifier_in_interface_modifiers6709 = new BitSet(new ulong[]{0x2UL,0x2000000100000000UL,0x9001043A10401000UL,0x2UL});
		public static readonly BitSet _79_in_interface_base6722 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _interface_type_list_in_interface_base6724 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_interface_body6735 = new BitSet(new ulong[]{0x8000000UL,0x6DA426B788000000UL,0xF6833EBF35DDB492UL,0x217UL});
		public static readonly BitSet _interface_member_declarations_in_interface_body6739 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_interface_body6744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_member_declaration_in_interface_member_declarations6755 = new BitSet(new ulong[]{0x8000002UL,0x6DA426B788000000UL,0xF6833EBF35DDB492UL,0x17UL});
		public static readonly BitSet _attributes_in_interface_member_declaration6767 = new BitSet(new ulong[]{0x8000000UL,0x6DA426B780000000UL,0xF6833EBF35DDB492UL,0x17UL});
		public static readonly BitSet _modifiers_in_interface_member_declaration6773 = new BitSet(new ulong[]{0x8000000UL,0x4DA426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _192_in_interface_member_declaration6785 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _interface_method_declaration_in_interface_member_declaration6789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_event_declaration_in_interface_member_declaration6801 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_interface_member_declaration6813 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x409018852519A090UL,0x14UL});
		public static readonly BitSet _interface_method_declaration_in_interface_member_declaration6829 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_property_declaration_in_interface_member_declaration6860 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_indexer_declaration_in_interface_member_declaration6882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_interface_property_declaration6914 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_interface_property_declaration6918 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x100000000020UL});
		public static readonly BitSet _interface_accessor_declarations_in_interface_property_declaration6922 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_interface_property_declaration6926 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_interface_method_declaration6937 = new BitSet(new ulong[]{0x0UL,0x20010UL});
		public static readonly BitSet _generic_argument_list_in_interface_method_declaration6941 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_interface_method_declaration6952 = new BitSet(new ulong[]{0x800008000000UL,0x45A426B688000000UL,0x66923AC56D9DA492UL,0x15UL});
		public static readonly BitSet _formal_parameter_list_in_interface_method_declaration6956 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_interface_method_declaration6961 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _type_parameter_constraints_clauses_in_interface_method_declaration6965 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_interface_method_declaration6970 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_interface_event_declaration6987 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_interface_event_declaration6991 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_interface_event_declaration6995 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_interface_event_declaration6999 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_interface_indexer_declaration7017 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_interface_indexer_declaration7021 = new BitSet(new ulong[]{0x8000000UL,0x45A426B688000000UL,0x66923AC56D9DA492UL,0x15UL});
		public static readonly BitSet _formal_parameter_list_in_interface_indexer_declaration7025 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_interface_indexer_declaration7029 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_interface_indexer_declaration7033 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x100000000020UL});
		public static readonly BitSet _interface_accessor_declarations_in_interface_indexer_declaration7037 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_interface_indexer_declaration7041 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attributes_in_interface_accessor_declarations7052 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000020UL});
		public static readonly BitSet _interface_get_accessor_declaration_in_interface_accessor_declarations7067 = new BitSet(new ulong[]{0x2UL,0x8000000UL,0x100000000000UL});
		public static readonly BitSet _attributes_in_interface_accessor_declarations7071 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _interface_set_accessor_declaration_in_interface_accessor_declarations7076 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_set_accessor_declaration_in_interface_accessor_declarations7089 = new BitSet(new ulong[]{0x2UL,0x8000000UL,0x20UL});
		public static readonly BitSet _attributes_in_interface_accessor_declarations7093 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20UL});
		public static readonly BitSet _interface_get_accessor_declaration_in_interface_accessor_declarations7098 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _133_in_interface_get_accessor_declaration7111 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_interface_get_accessor_declaration7115 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _172_in_interface_set_accessor_declaration7128 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_interface_set_accessor_declaration7132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifier_in_method_modifiers7145 = new BitSet(new ulong[]{0x2UL,0x2000000100000000UL,0x9001043A10401000UL,0x2UL});
		public static readonly BitSet _178_in_struct_declaration7163 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _type_or_generic_in_struct_declaration7167 = new BitSet(new ulong[]{0x0UL,0x8000UL,0x0UL,0x24UL});
		public static readonly BitSet _struct_interfaces_in_struct_declaration7171 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x24UL});
		public static readonly BitSet _type_parameter_constraints_clauses_in_struct_declaration7176 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _struct_body_in_struct_declaration7181 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _SEMI_in_struct_declaration7185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_modifier_in_struct_modifiers7197 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000001A00401000UL});
		public static readonly BitSet _79_in_struct_interfaces7240 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _interface_type_list_in_struct_interfaces7244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_struct_body7254 = new BitSet(new ulong[]{0x8020000UL,0x7DB5A6B788000000UL,0xF6873EBFB5DDBD92UL,0x217UL});
		public static readonly BitSet _struct_member_declarations_in_struct_body7258 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_struct_body7263 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_member_declaration_in_struct_member_declarations7273 = new BitSet(new ulong[]{0x8020002UL,0x7DB5A6B788000000UL,0xF6873EBFB5DDBD92UL,0x17UL});
		public static readonly BitSet _attributes_in_struct_member_declaration7285 = new BitSet(new ulong[]{0x8020000UL,0x7DB5A6B780000000UL,0xF6873EBFB5DDBD92UL,0x17UL});
		public static readonly BitSet _modifiers_in_struct_member_declaration7292 = new BitSet(new ulong[]{0x8020000UL,0x5DB5A6B680000000UL,0x66863A85A59DAD92UL,0x15UL});
		public static readonly BitSet _112_in_struct_member_declaration7301 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_struct_member_declaration7305 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _constant_declarators_in_struct_member_declaration7309 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_struct_member_declaration7313 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _event_declaration_in_struct_member_declaration7321 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_struct_member_declaration7331 = new BitSet(new ulong[]{0x42900180C100020UL,0x45A4A6B680000000UL,0x66863A85259DAC92UL,0x14UL});
		public static readonly BitSet _method_declaration_in_struct_member_declaration7334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_declaration_in_struct_member_declaration7354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_declaration_in_struct_member_declaration7374 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_struct_member_declaration7394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _interface_declaration_in_struct_member_declaration7404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_declaration_in_struct_member_declaration7413 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _192_in_struct_member_declaration7423 = new BitSet(new ulong[]{0x42900180C100020UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x14UL});
		public static readonly BitSet _method_declaration_in_struct_member_declaration7427 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_struct_member_declaration7435 = new BitSet(new ulong[]{0x42900180C100020UL,0x45A426B680000000UL,0x66923A85279DA492UL,0x14UL});
		public static readonly BitSet _method_declaration_in_struct_member_declaration7449 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _property_declaration_in_struct_member_declaration7474 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_struct_member_declaration7503 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _DOT_in_struct_member_declaration7505 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _indexer_declaration_in_struct_member_declaration7507 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexer_declaration_in_struct_member_declaration7522 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _field_declaration_in_struct_member_declaration7538 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operator_declaration_in_struct_member_declaration7559 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _struct_declaration_in_struct_member_declaration7586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_declaration_in_struct_member_declaration7595 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _delegate_declaration_in_struct_member_declaration7605 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conversion_operator_declaration_in_struct_member_declaration7614 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constructor_declaration_in_struct_member_declaration7622 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _indexer_declarator_in_indexer_declaration7648 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_indexer_declaration7652 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x101A00001020UL});
		public static readonly BitSet _accessor_declarations_in_indexer_declaration7656 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_indexer_declaration7660 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_indexer_declarator7676 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_indexer_declarator7680 = new BitSet(new ulong[]{0x8000000UL,0x45A426B688000000UL,0x66923AC56D9DA492UL,0x15UL});
		public static readonly BitSet _formal_parameter_list_in_indexer_declarator7684 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_indexer_declarator7688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operator_declarator_in_operator_declaration7705 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _operator_body_in_operator_declaration7709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _153_in_operator_declarator7720 = new BitSet(new ulong[]{0xE020000400300000UL,0x215629A4UL,0x0UL,0x440UL});
		public static readonly BitSet _set_in_operator_declarator7734 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_operator_declarator7744 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_operator_declarator7748 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_operator_declarator7752 = new BitSet(new ulong[]{0x800000000000UL,0x400UL});
		public static readonly BitSet _binary_operator_declarator_in_operator_declarator7755 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_operator_declarator_in_operator_declarator7759 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _overloadable_unary_operator_in_operator_declarator7772 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _unary_operator_declarator_in_operator_declarator7776 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _overloadable_binary_operator_in_operator_declarator7788 = new BitSet(new ulong[]{0x0UL,0x400UL});
		public static readonly BitSet _binary_operator_declarator_in_operator_declarator7792 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _RPAREN_in_unary_operator_declarator7807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _74_in_binary_operator_declarator7856 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_binary_operator_declarator7860 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_binary_operator_declarator7864 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_binary_operator_declarator7868 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _69_in_overloadable_binary_operator7882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _77_in_overloadable_binary_operator7886 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_overloadable_binary_operator7890 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _66_in_overloadable_binary_operator7894 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _198_in_overloadable_binary_operator7898 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_overloadable_binary_operator7902 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_overloadable_binary_operator7906 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_overloadable_binary_operator7910 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _GT_in_overloadable_binary_operator7912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_overloadable_binary_operator7916 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _62_in_overloadable_binary_operator7920 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GT_in_overloadable_binary_operator7924 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _81_in_overloadable_binary_operator7928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_overloadable_binary_operator7932 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _84_in_overloadable_binary_operator7936 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conversion_operator_declarator_in_conversion_operator_declaration7949 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _operator_body_in_conversion_operator_declaration7953 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_conversion_operator_declarator7964 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000UL});
		public static readonly BitSet _153_in_conversion_operator_declarator7973 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_conversion_operator_declarator7977 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_conversion_operator_declarator7981 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_conversion_operator_declarator7985 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_conversion_operator_declarator7989 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_conversion_operator_declarator7993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_operator_body8004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constructor_declarator_in_constructor_declaration8017 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _constructor_body_in_constructor_declaration8021 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_constructor_declarator8032 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_constructor_declarator8036 = new BitSet(new ulong[]{0x800008000000UL,0x45A426B688000000UL,0x66923AC56D9DA492UL,0x15UL});
		public static readonly BitSet _formal_parameter_list_in_constructor_declarator8040 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_constructor_declarator8045 = new BitSet(new ulong[]{0x2UL,0x8000UL});
		public static readonly BitSet _constructor_initializer_in_constructor_declarator8049 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_constructor_initializer8061 = new BitSet(new ulong[]{0x0UL,0x4000000000UL,0x10000000000000UL});
		public static readonly BitSet _set_in_constructor_initializer8065 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_constructor_initializer8075 = new BitSet(new ulong[]{0x2429801C0C100020UL,0x45BC66F6800009B4UL,0x6F927AC52DDDA492UL,0x414UL});
		public static readonly BitSet _argument_list_in_constructor_initializer8079 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_constructor_initializer8084 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_constructor_body8095 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _202_in_destructor_declaration8114 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_destructor_declaration8117 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_destructor_declaration8121 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_destructor_declaration8125 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _destructor_body_in_destructor_declaration8130 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_destructor_body8141 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _invocation_start_in_invocation_expression8154 = new BitSet(new ulong[]{0x200000000400UL,0x8000010UL});
		public static readonly BitSet _arguments_in_invocation_expression8176 = new BitSet(new ulong[]{0x200000000400UL,0x8000000UL});
		public static readonly BitSet _invocation_part_in_invocation_expression8180 = new BitSet(new ulong[]{0x200000000400UL,0x8000010UL});
		public static readonly BitSet _invocation_part_in_invocation_expression8209 = new BitSet(new ulong[]{0x200000000400UL,0x8000010UL});
		public static readonly BitSet _arguments_in_invocation_expression8215 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _predefined_type_in_invocation_start8226 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_invocation_start8246 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _generic_argument_list_in_invocation_start8250 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_invocation_start8258 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_invocation_start8267 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_invocation_start8275 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _80_in_invocation_start8280 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_invocation_start8284 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeof_expression_in_invocation_start8294 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _access_identifier_in_invocation_part8323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _brackets_in_invocation_part8331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_statement_in_statement8351 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _labeled_statement_in_statement8369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _embedded_statement_in_statement8377 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_embedded_statement8393 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selection_statement_in_embedded_statement8401 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _iteration_statement_in_embedded_statement8410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _jump_statement_in_embedded_statement8419 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _try_statement_in_embedded_statement8429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _checked_statement_in_embedded_statement8437 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unchecked_statement_in_embedded_statement8445 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lock_statement_in_embedded_statement8453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _using_statement_in_embedded_statement8461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _yield_statement_in_embedded_statement8470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unsafe_statement_in_embedded_statement8479 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fixed_statement_in_embedded_statement8487 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_statement_in_embedded_statement8495 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_fixed_statement8511 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_fixed_statement8515 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _pointer_type_in_fixed_statement8519 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _fixed_pointer_declarators_in_fixed_statement8521 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_fixed_statement8525 = new BitSet(new ulong[]{0x262D001C1C100020UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_fixed_statement8529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fixed_pointer_declarator_in_fixed_pointer_declarators8540 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_fixed_pointer_declarators8545 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _fixed_pointer_declarator_in_fixed_pointer_declarators8549 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _identifier_in_fixed_pointer_declarator8562 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_fixed_pointer_declarator8566 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _fixed_pointer_initializer_in_fixed_pointer_declarator8570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_fixed_pointer_initializer8586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _188_in_unsafe_statement8596 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_unsafe_statement8600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_labeled_statement8610 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_labeled_statement8614 = new BitSet(new ulong[]{0x262D001C1C100020UL,0x45FF67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x43DUL});
		public static readonly BitSet _statement_in_labeled_statement8618 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _local_variable_declaration_in_declaration_statement8630 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _local_constant_declaration_in_declaration_statement8639 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_declaration_statement8642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _local_variable_type_in_local_variable_declaration8653 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _local_variable_declarators_in_local_variable_declaration8657 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _190_in_local_variable_type8674 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_local_variable_type8688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_in_local_variable_type8696 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _local_variable_declarator_in_local_variable_declarators8707 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_local_variable_declarators8710 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _local_variable_declarator_in_local_variable_declarators8712 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _identifier_in_local_variable_declarator8725 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _85_in_local_variable_declarator8728 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F92FA8525DDA492UL,0x434UL});
		public static readonly BitSet _local_variable_initializer_in_local_variable_declarator8732 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_local_variable_initializer8746 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _array_initializer_in_local_variable_initializer8754 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stackalloc_initializer_in_local_variable_initializer8763 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _175_in_stackalloc_initializer8773 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _unmanaged_type_in_stackalloc_initializer8777 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_stackalloc_initializer8781 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_stackalloc_initializer8785 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_stackalloc_initializer8789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_local_constant_declaration8800 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_local_constant_declaration8804 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _constant_declarators_in_local_constant_declaration8808 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_statement8819 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_expression_statement8823 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_statement_expression8836 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _if_statement_in_selection_statement8851 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switch_statement_in_selection_statement8859 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_if_statement8875 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_if_statement8879 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _boolean_expression_in_if_statement8883 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_if_statement8887 = new BitSet(new ulong[]{0x262D001C1C100020UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_if_statement8891 = new BitSet(new ulong[]{0x2UL,0x200000000000000UL});
		public static readonly BitSet _else_statement_in_if_statement8900 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_else_statement8917 = new BitSet(new ulong[]{0x262D001C1C100020UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_else_statement8921 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _179_in_switch_statement8932 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_switch_statement8936 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_switch_statement8940 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_switch_statement8944 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _switch_block_in_switch_statement8948 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _197_in_switch_block8959 = new BitSet(new ulong[]{0x0UL,0x8080000000000UL,0x0UL,0x200UL});
		public static readonly BitSet _switch_sections_in_switch_block8963 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _201_in_switch_block8968 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switch_section_in_switch_sections8979 = new BitSet(new ulong[]{0x2UL,0x8080000000000UL});
		public static readonly BitSet _switch_labels_in_switch_section8991 = new BitSet(new ulong[]{0x262D001C1C100020UL,0x45FF67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x43DUL});
		public static readonly BitSet _statement_list_in_switch_section8995 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switch_label_in_switch_labels9006 = new BitSet(new ulong[]{0x2UL,0x8080000000000UL});
		public static readonly BitSet _107_in_switch_label9019 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _constant_expression_in_switch_label9023 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_switch_label9027 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_switch_label9037 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_switch_label9041 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _while_statement_in_iteration_statement9053 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _do_statement_in_iteration_statement9061 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_statement_in_iteration_statement9069 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _foreach_statement_in_iteration_statement9077 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _195_in_while_statement9088 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_while_statement9092 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _boolean_expression_in_while_statement9096 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_while_statement9100 = new BitSet(new ulong[]{0x262D001C1C100020UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_while_statement9104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _118_in_do_statement9115 = new BitSet(new ulong[]{0x262D001C1C100020UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_do_statement9119 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x8UL});
		public static readonly BitSet _195_in_do_statement9123 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_do_statement9127 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _boolean_expression_in_do_statement9131 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_do_statement9135 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_do_statement9139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_for_statement9150 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_for_statement9154 = new BitSet(new ulong[]{0x242D001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x415UL});
		public static readonly BitSet _for_initializer_in_for_statement9158 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_for_statement9163 = new BitSet(new ulong[]{0x242D001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _for_condition_in_for_statement9167 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_for_statement9172 = new BitSet(new ulong[]{0x2429801C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _for_iterator_in_for_statement9176 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_for_statement9181 = new BitSet(new ulong[]{0x262D001C1C100020UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_for_statement9185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _local_variable_declaration_in_for_initializer9202 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_expression_list_in_for_initializer9210 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _boolean_expression_in_for_condition9226 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_expression_list_in_for_iterator9237 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _statement_expression_in_statement_expression_list9248 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _74_in_statement_expression_list9251 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _statement_expression_in_statement_expression_list9253 = new BitSet(new ulong[]{0x2UL,0x400UL});
		public static readonly BitSet _131_in_foreach_statement9266 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_foreach_statement9270 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _local_variable_type_in_foreach_statement9274 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_foreach_statement9278 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_foreach_statement9282 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_foreach_statement9286 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_foreach_statement9290 = new BitSet(new ulong[]{0x262D001C1C100020UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_foreach_statement9294 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _break_statement_in_jump_statement9305 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _continue_statement_in_jump_statement9313 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _goto_statement_in_jump_statement9321 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _return_statement_in_jump_statement9329 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _throw_statement_in_jump_statement9337 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_break_statement9348 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_break_statement9352 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_continue_statement9363 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_continue_statement9367 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_goto_statement9378 = new BitSet(new ulong[]{0x8000000UL,0x45280A3680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_goto_statement9384 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _107_in_goto_statement9401 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _constant_expression_in_goto_statement9405 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _115_in_goto_statement9422 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_goto_statement9427 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_return_statement9438 = new BitSet(new ulong[]{0x242D001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_return_statement9442 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_return_statement9447 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _181_in_throw_statement9458 = new BitSet(new ulong[]{0x242D001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_throw_statement9462 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_throw_statement9467 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _182_in_try_statement9480 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_try_statement9484 = new BitSet(new ulong[]{0x0UL,0x8000100000000000UL});
		public static readonly BitSet _catch_clauses_in_try_statement9490 = new BitSet(new ulong[]{0x2UL,0x8000000000000000UL});
		public static readonly BitSet _finally_clause_in_try_statement9494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _finally_clause_in_try_statement9521 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _108_in_catch_clauses9533 = new BitSet(new ulong[]{0x4000000000000UL,0x10UL,0x0UL,0x20UL});
		public static readonly BitSet _specific_catch_clauses_in_catch_clauses9538 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _general_catch_clause_in_catch_clauses9542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _specific_catch_clause_in_specific_catch_clauses9554 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _108_in_specific_catch_clauses9559 = new BitSet(new ulong[]{0x4000000000000UL,0x10UL,0x0UL,0x20UL});
		public static readonly BitSet _specific_catch_clause_in_specific_catch_clauses9564 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _general_catch_clause_in_specific_catch_clauses9568 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _68_in_specific_catch_clause9581 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _class_type_in_specific_catch_clause9585 = new BitSet(new ulong[]{0x800008000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_specific_catch_clause9589 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_specific_catch_clause9594 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_specific_catch_clause9598 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_general_catch_clause9609 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_finally_clause9620 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_finally_clause9624 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_checked_statement9635 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_checked_statement9639 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _187_in_unchecked_statement9650 = new BitSet(new ulong[]{0x4000000000000UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _block_in_unchecked_statement9654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _145_in_lock_statement9665 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_lock_statement9669 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_lock_statement9672 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_lock_statement9676 = new BitSet(new ulong[]{0x262D001C1C100020UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_lock_statement9680 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USING_in_using_statement9691 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_using_statement9695 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x415UL});
		public static readonly BitSet _resource_acquisition_in_using_statement9700 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_using_statement9704 = new BitSet(new ulong[]{0x262D001C1C100020UL,0x45FE67F6800009B4UL,0x7FFA7B8525DFA4DFUL,0x43CUL});
		public static readonly BitSet _embedded_statement_in_using_statement9709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _local_variable_declaration_in_resource_acquisition9726 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_resource_acquisition9734 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _196_in_yield_statement9745 = new BitSet(new ulong[]{0x0UL,0x10000000000UL,0x10000000000UL});
		public static readonly BitSet _168_in_yield_statement9750 = new BitSet(new ulong[]{0x2429001C0C100020UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _expression_in_yield_statement9754 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_yield_statement9758 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_yield_statement9776 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_yield_statement9780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignment_in_assignment_list12736 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_assignment_list12738 = new BitSet(new ulong[]{0x2429001C0C100022UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _attributes_in_field_declarations12752 = new BitSet(new ulong[]{0x8000000UL,0x65A426B780000000UL,0xF6833EBF35DDB492UL,0x17UL});
		public static readonly BitSet _modifiers_in_field_declarations12757 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_field_declarations12762 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _field_declaration_in_field_declarations12766 = new BitSet(new ulong[]{0x8000002UL,0x65A426B788000000UL,0xF6833EBF35DDB492UL,0x17UL});
		public static readonly BitSet _attributes_in_property_declaration_list12780 = new BitSet(new ulong[]{0x8000000UL,0x65A426B780000000UL,0xF6833EBF35DDB492UL,0x17UL});
		public static readonly BitSet _modifiers_in_property_declaration_list12785 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_property_declaration_list12790 = new BitSet(new ulong[]{0x42900180C100020UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x14UL});
		public static readonly BitSet _property_declaration_in_property_declaration_list12794 = new BitSet(new ulong[]{0x8000002UL,0x65A426B788000000UL,0xF6833EBF35DDB492UL,0x17UL});
		public static readonly BitSet _constant_declaration_in_constant_declarations12807 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _literal_in_literals12818 = new BitSet(new ulong[]{0x429001804100022UL});
		public static readonly BitSet _attributes_in_delegate_declaration_list12831 = new BitSet(new ulong[]{0x0UL,0x2010000100000000UL,0x9001043A10401000UL,0x2UL});
		public static readonly BitSet _modifiers_in_delegate_declaration_list12836 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _delegate_declaration_in_delegate_declaration_list12841 = new BitSet(new ulong[]{0x2UL,0x2010000108000000UL,0x9001043A10401000UL,0x2UL});
		public static readonly BitSet _local_variable_declaration_in_local_variable_declaration_list12855 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_local_variable_declaration_list12857 = new BitSet(new ulong[]{0x8000002UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _local_variable_initializer_in_local_variable_initializer_list12871 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_local_variable_initializer_list12873 = new BitSet(new ulong[]{0x2429001C0C100022UL,0x45BC66F6800009B4UL,0x6F92FA8525DDA492UL,0x434UL});
		public static readonly BitSet _expression_in_expression_list_test12887 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_expression_list_test12889 = new BitSet(new ulong[]{0x2429001C0C100022UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _unary_expression_in_unary_expression_list12903 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_unary_expression_list12905 = new BitSet(new ulong[]{0x2429001C0C100022UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _invocation_expression_in_invocation_expression_list12919 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_invocation_expression_list12921 = new BitSet(new ulong[]{0x8000002UL,0x45A426F680000000UL,0x67923A85259DA492UL,0x14UL});
		public static readonly BitSet _primary_expression_in_primary_expression_list12935 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_primary_expression_list12937 = new BitSet(new ulong[]{0x42900180C100022UL,0x45BC66F680000010UL,0x6F927A8525DDA492UL,0x14UL});
		public static readonly BitSet _non_assignment_expression_in_non_assignment_expression_list12951 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _SEMI_in_non_assignment_expression_list12953 = new BitSet(new ulong[]{0x2429001C0C100022UL,0x45BC66F6800009B4UL,0x6F927A8525DDA492UL,0x414UL});
		public static readonly BitSet _modifiers_in_method_declarations12967 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _192_in_method_declarations12971 = new BitSet(new ulong[]{0x42900180C100020UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x14UL});
		public static readonly BitSet _type_in_method_declarations12975 = new BitSet(new ulong[]{0x42900180C100020UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x14UL});
		public static readonly BitSet _method_declaration_in_method_declarations12978 = new BitSet(new ulong[]{0x8000002UL,0x65A426B780000000UL,0xF6833EBF35DDB492UL,0x17UL});
		public static readonly BitSet _159_in_synpred1_cs315 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred2_cs711 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_synpred2_cs715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred3_cs736 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_synpred3_cs740 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred4_cs761 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _DOT_in_synpred4_cs765 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _180_in_synpred4_cs769 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_synpred5_cs937 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _brackets_in_synpred5_cs942 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_synpred6_cs965 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _brackets_in_synpred6_cs969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _object_creation_expression_in_synpred7_cs1011 = new BitSet(new ulong[]{0x200000000400UL,0x8000000UL});
		public static readonly BitSet _set_in_synpred7_cs1015 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _delegate_creation_expression_in_synpred8_cs1110 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_synpred9_cs1283 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _81_in_synpred9_cs1288 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _68_in_synpred10_cs1615 = new BitSet(new ulong[]{0x8000000UL,0x45A426B680000000UL,0x66823A85259DA492UL,0x15UL});
		public static readonly BitSet _type_in_synpred10_cs1619 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _RPAREN_in_synpred10_cs1623 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _array_creation_expression_in_synpred11_cs2006 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_synpred12_cs2146 = new BitSet(new ulong[]{0x200000000400UL,0x8000000UL});
		public static readonly BitSet _set_in_synpred12_cs2150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unbound_type_name_in_synpred13_cs2853 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _generic_dimension_specifier_in_synpred14_cs2950 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _DOT_in_synpred14_cs2954 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_synpred15_cs3125 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _81_in_synpred15_cs3129 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_synpred16_cs3189 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _81_in_synpred16_cs3194 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _predefined_type_in_synpred17_cs3308 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _type_name_in_synpred17_cs3312 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _rank_specifiers_in_synpred17_cs3316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _predefined_type_in_synpred18_cs3346 = new BitSet(new ulong[]{0x0UL,0x2000020UL});
		public static readonly BitSet _type_name_in_synpred18_cs3350 = new BitSet(new ulong[]{0x0UL,0x2000020UL});
		public static readonly BitSet _69_in_synpred18_cs3355 = new BitSet(new ulong[]{0x2UL,0x20UL});
		public static readonly BitSet _89_in_synpred18_cs3360 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expression_in_synpred19_cs3611 = new BitSet(new ulong[]{0x200000UL,0x40285249UL,0x0UL,0x80UL});
		public static readonly BitSet _assignment_operator_in_synpred19_cs3615 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cast_expression_in_synpred20_cs3691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _anonymous_function_signature_in_synpred21_cs3961 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_synpred21_cs3965 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_expression_in_synpred22_cs3979 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_synpred23_cs4507 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _74_in_synpred24_cs5117 = new BitSet(new ulong[]{0x8000000UL,0x4520023680000000UL,0x408018852519A090UL,0x14UL});
		public static readonly BitSet _identifier_in_synpred24_cs5121 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_synpred24_cs5125 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred25_cs5796 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_synpred25_cs5800 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred26_cs6820 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_synpred26_cs6824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred27_cs6851 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_synpred27_cs6855 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred28_cs7440 = new BitSet(new ulong[]{0x0UL,0x10UL});
		public static readonly BitSet _68_in_synpred28_cs7444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred29_cs7465 = new BitSet(new ulong[]{0x0UL,0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _197_in_synpred29_cs7469 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _member_name_in_synpred30_cs7490 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _DOT_in_synpred30_cs7494 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _180_in_synpred30_cs7498 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arguments_in_synpred31_cs8161 = new BitSet(new ulong[]{0x200000000400UL,0x8000000UL});
		public static readonly BitSet _set_in_synpred31_cs8165 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_synpred32_cs8236 = new BitSet(new ulong[]{0x0UL,0x20000UL});
		public static readonly BitSet _81_in_synpred32_cs8241 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _declaration_statement_in_synpred33_cs8346 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_synpred34_cs8360 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_synpred34_cs8364 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _190_in_synpred35_cs8669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_synpred36_cs8683 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_synpred37_cs8895 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _local_variable_declaration_in_synpred38_cs9197 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _local_variable_declaration_in_synpred39_cs9721 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
