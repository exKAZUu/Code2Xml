using Code2Xml.Core.Antlr;
using System;
// $ANTLR 3.3 Nov 30, 2010 12:50:56 cs.g 2011-06-08 19:03:52

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162


	using System.Collections.Generic;
	using System.Text;


using System;
using System.Collections.Generic;
using Antlr.Runtime;
using Stack = System.Collections.Generic.Stack<object>;
using List = System.Collections.IList;
using ArrayList = System.Collections.Generic.List<object>;
using Map = System.Collections.IDictionary;
using HashMap = System.Collections.Generic.Dictionary<object, object>;

using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3 Nov 30, 2010 12:50:56")]
[System.CLSCompliant(false)]
public partial class csParser : Antlr.Runtime.Parser, IAntlrParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ASSIGNMENT", "BLOCK", "CAST_EXPRESSION", "CLASS_DECL", "DELEGATE_DECL", "ELSE", "ENUM_DECL", "EXPRESSION", "FIELD_DECL", "IF", "INTERFACE_DECL", "INVOCATION_EXPRESSION", "LOCAL_VARIABLE_DECLARATOR", "MEMBER_ACCESS", "METHOD_DECL", "NAMESPACE_DECL", "NAMESPACE_OR_TYPE_NAME", "PREDEFINED_TYPE", "PROPERTY_DECLARATION", "QID_PART", "RETURN_TYPE", "UNARY_EXPRESSION", "USING_DIRECTIVE", "TELEMENT", "TMEMBER", "TINVOCATION", "IDENTIFIER", "Real_literal", "NUMBER", "Hex_number", "Character_literal", "STRINGLITERAL", "Verbatim_string_literal", "TRUE", "FALSE", "NULL", "DOT", "PTR", "MINUS", "GT", "USING", "ENUM", "GET", "SET", "ELIF", "ENDIF", "DEFINE", "UNDEF", "SEMI", "RPAREN", "WS", "TS", "DOC_LINE_COMMENT", "LINE_COMMENT", "COMMENT", "EscapeSequence", "Verbatim_string_literal_character", "Decimal_digits", "INTEGER_TYPE_SUFFIX", "Decimal_integer_literal", "GooBallIdentifier", "GooBall", "IdentifierStart", "IdentifierPart", "Exponent_part", "Real_type_suffix", "Pragma", "PP_CONDITIONAL", "PREPROCESSOR_DIRECTIVE", "IF_TOKEN", "DEFINE_TOKEN", "ELSE_TOKEN", "ENDIF_TOKEN", "UNDEF_TOKEN", "PP_EXPRESSION", "PP_OR_EXPRESSION", "PP_AND_EXPRESSION", "PP_EQUALITY_EXPRESSION", "PP_UNARY_EXPRESSION", "PP_PRIMARY_EXPRESSION", "HEX_DIGIT", "HEX_DIGITS", "DECIMAL_DIGIT", "Sign", "'namespace'", "'::'", "'this'", "'base'", "'{'", "'}'", "'extern'", "'alias'", "'='", "'['", "','", "']'", "':'", "'assembly'", "'module'", "'field'", "'event'", "'method'", "'param'", "'property'", "'return'", "'type'", "'('", "'*'", "'?'", "'void'", "'sbyte'", "'byte'", "'short'", "'ushort'", "'int'", "'uint'", "'long'", "'ulong'", "'char'", "'<'", "'+'", "'!'", "'~'", "'++'", "'--'", "'&'", "'out'", "'ref'", "'bool'", "'decimal'", "'double'", "'float'", "'object'", "'string'", "'new'", "'sizeof'", "'typeof'", "'checked'", "'unchecked'", "'default'", "'delegate'", "'in'", "'/'", "'%'", "'<<'", "'<='", "'>='", "'is'", "'as'", "'=='", "'!='", "'^'", "'|'", "'&&'", "'||'", "'??'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", "'=>'", "'public'", "'protected'", "'internal'", "'private'", "'unsafe'", "'from'", "'into'", "'join'", "'on'", "'equals'", "'let'", "'orderby'", "'ascending'", "'descending'", "'select'", "'group'", "'by'", "'where'", "'partial'", "'class'", "'abstract'", "'sealed'", "'static'", "'struct'", "'const'", "'readonly'", "'volatile'", "'virtual'", "'override'", "'__arglist'", "'params'", "'add'", "'remove'", "'operator'", "'implicit'", "'explicit'", "'interface'", "'fixed'", "'var'", "'dynamic'", "'stackalloc'", "'switch'", "'case'", "'while'", "'do'", "'for'", "'foreach'", "'break'", "'continue'", "'goto'", "'throw'", "'try'", "'catch'", "'finally'", "'lock'", "'yield'", "'pragma'"
	};
	public const int EOF=-1;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int T__178=178;
	public const int T__179=179;
	public const int T__180=180;
	public const int T__181=181;
	public const int T__182=182;
	public const int T__183=183;
	public const int T__184=184;
	public const int T__185=185;
	public const int T__186=186;
	public const int T__187=187;
	public const int T__188=188;
	public const int T__189=189;
	public const int T__190=190;
	public const int T__191=191;
	public const int T__192=192;
	public const int T__193=193;
	public const int T__194=194;
	public const int T__195=195;
	public const int T__196=196;
	public const int T__197=197;
	public const int T__198=198;
	public const int T__199=199;
	public const int T__200=200;
	public const int T__201=201;
	public const int T__202=202;
	public const int T__203=203;
	public const int T__204=204;
	public const int T__205=205;
	public const int T__206=206;
	public const int T__207=207;
	public const int T__208=208;
	public const int T__209=209;
	public const int T__210=210;
	public const int T__211=211;
	public const int T__212=212;
	public const int T__213=213;
	public const int T__214=214;
	public const int T__215=215;
	public const int T__216=216;
	public const int T__217=217;
	public const int T__218=218;
	public const int T__219=219;
	public const int T__220=220;
	public const int T__221=221;
	public const int T__222=222;
	public const int T__223=223;
	public const int T__224=224;
	public const int T__225=225;
	public const int T__226=226;
	public const int ASSIGNMENT=4;
	public const int BLOCK=5;
	public const int CAST_EXPRESSION=6;
	public const int CLASS_DECL=7;
	public const int DELEGATE_DECL=8;
	public const int ELSE=9;
	public const int ENUM_DECL=10;
	public const int EXPRESSION=11;
	public const int FIELD_DECL=12;
	public const int IF=13;
	public const int INTERFACE_DECL=14;
	public const int INVOCATION_EXPRESSION=15;
	public const int LOCAL_VARIABLE_DECLARATOR=16;
	public const int MEMBER_ACCESS=17;
	public const int METHOD_DECL=18;
	public const int NAMESPACE_DECL=19;
	public const int NAMESPACE_OR_TYPE_NAME=20;
	public const int PREDEFINED_TYPE=21;
	public const int PROPERTY_DECLARATION=22;
	public const int QID_PART=23;
	public const int RETURN_TYPE=24;
	public const int UNARY_EXPRESSION=25;
	public const int USING_DIRECTIVE=26;
	public const int TELEMENT=27;
	public const int TMEMBER=28;
	public const int TINVOCATION=29;
	public const int IDENTIFIER=30;
	public const int Real_literal=31;
	public const int NUMBER=32;
	public const int Hex_number=33;
	public const int Character_literal=34;
	public const int STRINGLITERAL=35;
	public const int Verbatim_string_literal=36;
	public const int TRUE=37;
	public const int FALSE=38;
	public const int NULL=39;
	public const int DOT=40;
	public const int PTR=41;
	public const int MINUS=42;
	public const int GT=43;
	public const int USING=44;
	public const int ENUM=45;
	public const int GET=46;
	public const int SET=47;
	public const int ELIF=48;
	public const int ENDIF=49;
	public const int DEFINE=50;
	public const int UNDEF=51;
	public const int SEMI=52;
	public const int RPAREN=53;
	public const int WS=54;
	public const int TS=55;
	public const int DOC_LINE_COMMENT=56;
	public const int LINE_COMMENT=57;
	public const int COMMENT=58;
	public const int EscapeSequence=59;
	public const int Verbatim_string_literal_character=60;
	public const int Decimal_digits=61;
	public const int INTEGER_TYPE_SUFFIX=62;
	public const int Decimal_integer_literal=63;
	public const int GooBallIdentifier=64;
	public const int GooBall=65;
	public const int IdentifierStart=66;
	public const int IdentifierPart=67;
	public const int Exponent_part=68;
	public const int Real_type_suffix=69;
	public const int Pragma=70;
	public const int PP_CONDITIONAL=71;
	public const int PREPROCESSOR_DIRECTIVE=72;
	public const int IF_TOKEN=73;
	public const int DEFINE_TOKEN=74;
	public const int ELSE_TOKEN=75;
	public const int ENDIF_TOKEN=76;
	public const int UNDEF_TOKEN=77;
	public const int PP_EXPRESSION=78;
	public const int PP_OR_EXPRESSION=79;
	public const int PP_AND_EXPRESSION=80;
	public const int PP_EQUALITY_EXPRESSION=81;
	public const int PP_UNARY_EXPRESSION=82;
	public const int PP_PRIMARY_EXPRESSION=83;
	public const int HEX_DIGIT=84;
	public const int HEX_DIGITS=85;
	public const int DECIMAL_DIGIT=86;
	public const int Sign=87;

	// delegates
	// delegators

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				true, false, true, false, false, false, false, true, false, true, false, 
				false, false, false, true, false, false, false, true, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, true, true, false, false, false, false, false, false, 
				true, false, true, true, true, true, true, false, false, false, false, 
				false, true, true, true, true, true, false, false, false, false, false, 
				false, false, false, false, true, true, false, false, false, false, 
				true, false, false, false, false, true, false, true, true, false, true, 
				true, true, true, false, true, false, true, false, false, false, false, 
				true, true, true, true, false, false, false, false, true, true, false, 
				true, true, false, false, false, false, false, false, false, true, false, 
				false, false, false, false, false, false, true, false, true, false, 
				true, true, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, true, false, true, true, false, 
				false, false, false, true, false, true, false, false, false, false, 
				true, false, false, false, false, false, true, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				true, false, false, false, false, true, true, false, false, false, false, 
				false, false, false, false, false, false, true, false, false, true, 
				false, false, true, false, false, true, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, true, false, true, false, false, false, 
				false, false, false, false, false, false, true, false, false, true, 
				false, false, false, false, false, false, false, false, false, true, 
				false, true, false, false, false, false, false, false, false, false, 
				true, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, true, false, 
				false, false, false, false, false, false, false, false, false, true, 
				false, false, false, false, false, false, false, false, false, false, 
				true, false, true, false, false, false, false, false, false, false, 
				false, true, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, true, true, 
				false, true, false, false, false, false, true, false, false, false, 
				false, false, true, false, true, false, false, false, false, false, 
				false, false, false, true, false, false, false, false, false, false, 
				true, false, false, true, false, false, true, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, , , , , false, false, false, false, false, false, false, 
				false, false, false, false, , , , false, false, false, false, false, 
				false, false, false, false, false, false, , , , , , , , , , , , , , 
				, , , false, false, false, false, false, false, false, false, false, 
				false, false, false, false, , false, , false, false, false, false, , 
				, , , false, false, , false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public csParser( ITokenStream input )
		: this( input, new RecognizerSharedState() )
	{
	}
	public csParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[1138+1];

		XmlTreeAdaptor treeAdaptor = null;
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new XmlTreeAdaptor();

		OnCreated();
	}
		
	// Implement this function in your helper file to use a custom tree adaptor
	void CreateTreeAdaptor(ref XmlTreeAdaptor adaptor) {}

	private XmlTreeAdaptor adaptor;

	public XmlTreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}
		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return csParser.tokenNames; } }
	public override string GrammarFileName { get { return "cs.g"; } }



 	protected virtual void OnCreated() {}
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

    public class compilation_unit_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_compilation_unit() {}
    protected virtual void Leave_compilation_unit() {}

    // $ANTLR start "compilation_unit"
    // cs.g:71:1: compilation_unit : ( using_directives )? ( global_attributes )? ( namespace_declaration )? namespace_body ;
    [GrammarRule("compilation_unit")]
    public csParser.compilation_unit_return compilation_unit()
    {

        csParser.compilation_unit_return retval = new csParser.compilation_unit_return();
        retval.Start = (IToken)input.LT(1);
        int compilation_unit_StartIndex = input.Index;
        object root_0 = null;

        csParser.using_directives_return using_directives1 = default(csParser.using_directives_return);
        csParser.global_attributes_return global_attributes2 = default(csParser.global_attributes_return);
        csParser.namespace_declaration_return namespace_declaration3 = default(csParser.namespace_declaration_return);
        csParser.namespace_body_return namespace_body4 = default(csParser.namespace_body_return);


    	try { DebugEnterRule(GrammarFileName, "compilation_unit");
    	DebugLocation(71, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }
    		// cs.g:76:17: ( ( using_directives )? ( global_attributes )? ( namespace_declaration )? namespace_body )
    		DebugEnterAlt(1);
    		// cs.g:78:2: ( using_directives )? ( global_attributes )? ( namespace_declaration )? namespace_body
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(78, 2);
    		// cs.g:78:2: ( using_directives )?
    		int alt1=2;
    		try { DebugEnterSubRule(1);
    		try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    		try
    		{
    			alt1 = dfa1.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(1); }
    		switch (alt1)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: using_directives
    			{
    			DebugLocation(78, 2);
    			PushFollow(Follow._using_directives_in_compilation_unit192);
    			using_directives1=using_directives();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, using_directives1.Tree, using_directives1, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(1); }

    		DebugLocation(79, 2);
    		// cs.g:79:2: ( global_attributes )?
    		int alt2=2;
    		try { DebugEnterSubRule(2);
    		try { DebugEnterDecision(2, decisionCanBacktrack[2]);
    		int LA2_0 = input.LA(1);

    		if ((LA2_0==97))
    		{
    			int LA2_1 = input.LA(2);

    			if (((LA2_1>=101 && LA2_1<=102)))
    			{
    				int LA2_3 = input.LA(3);

    				if ((LA2_3==100))
    				{
    					alt2=1;
    				}
    			}
    		}
    		} finally { DebugExitDecision(2); }
    		switch (alt2)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: global_attributes
    			{
    			DebugLocation(79, 2);
    			PushFollow(Follow._global_attributes_in_compilation_unit199);
    			global_attributes2=global_attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, global_attributes2.Tree, global_attributes2, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(2); }

    		DebugLocation(80, 2);
    		// cs.g:80:2: ( namespace_declaration )?
    		int alt3=2;
    		try { DebugEnterSubRule(3);
    		try { DebugEnterDecision(3, decisionCanBacktrack[3]);
    		try
    		{
    			alt3 = dfa3.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(3); }
    		switch (alt3)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: namespace_declaration
    			{
    			DebugLocation(80, 2);
    			PushFollow(Follow._namespace_declaration_in_compilation_unit206);
    			namespace_declaration3=namespace_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, namespace_declaration3.Tree, namespace_declaration3, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(3); }

    		DebugLocation(81, 2);
    		PushFollow(Follow._namespace_body_in_compilation_unit211);
    		namespace_body4=namespace_body();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, namespace_body4.Tree, namespace_body4, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 1, compilation_unit_StartIndex); }
        }
     	DebugLocation(82, 1);
    	} finally { DebugExitRule(GrammarFileName, "compilation_unit"); }
    	return retval;

    }
    // $ANTLR end "compilation_unit"

    public class namespace_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_namespace_declaration() {}
    protected virtual void Leave_namespace_declaration() {}

    // $ANTLR start "namespace_declaration"
    // cs.g:83:1: namespace_declaration : 'namespace' qualified_identifier namespace_block ( ';' )? ;
    [GrammarRule("namespace_declaration")]
    public csParser.namespace_declaration_return namespace_declaration()
    {

        csParser.namespace_declaration_return retval = new csParser.namespace_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int namespace_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal5=null;
        IToken char_literal8=null;
        csParser.qualified_identifier_return qualified_identifier6 = default(csParser.qualified_identifier_return);
        csParser.namespace_block_return namespace_block7 = default(csParser.namespace_block_return);

        object string_literal5_tree=null;
        object char_literal8_tree=null;

    	try { DebugEnterRule(GrammarFileName, "namespace_declaration");
    	DebugLocation(83, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }
    		// cs.g:83:22: ( 'namespace' qualified_identifier namespace_block ( ';' )? )
    		DebugEnterAlt(1);
    		// cs.g:84:2: 'namespace' qualified_identifier namespace_block ( ';' )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(84, 2);
    		string_literal5=(IToken)Match(input,88,Follow._88_in_namespace_declaration220); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal5_tree = (object)adaptor.Create(string_literal5, retval);
    		adaptor.AddChild(root_0, string_literal5_tree);
    		}
    		DebugLocation(84, 16);
    		PushFollow(Follow._qualified_identifier_in_namespace_declaration224);
    		qualified_identifier6=qualified_identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, qualified_identifier6.Tree, qualified_identifier6, retval);
    		DebugLocation(84, 39);
    		PushFollow(Follow._namespace_block_in_namespace_declaration228);
    		namespace_block7=namespace_block();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, namespace_block7.Tree, namespace_block7, retval);
    		DebugLocation(84, 57);
    		// cs.g:84:57: ( ';' )?
    		int alt4=2;
    		try { DebugEnterSubRule(4);
    		try { DebugEnterDecision(4, decisionCanBacktrack[4]);
    		int LA4_0 = input.LA(1);

    		if ((LA4_0==SEMI))
    		{
    			alt4=1;
    		}
    		} finally { DebugExitDecision(4); }
    		switch (alt4)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: ';'
    			{
    			DebugLocation(84, 57);
    			char_literal8=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_namespace_declaration232), "SEMI"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal8_tree = (object)adaptor.Create(char_literal8, retval);
    			adaptor.AddChild(root_0, char_literal8_tree);
    			}

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(4); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 2, namespace_declaration_StartIndex); }
        }
     	DebugLocation(85, 1);
    	} finally { DebugExitRule(GrammarFileName, "namespace_declaration"); }
    	return retval;

    }
    // $ANTLR end "namespace_declaration"

    public class qualified_identifier_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_qualified_identifier() {}
    protected virtual void Leave_qualified_identifier() {}

    // $ANTLR start "qualified_identifier"
    // cs.g:86:1: qualified_identifier : identifier ( '.' identifier )* ;
    [GrammarRule("qualified_identifier")]
    public csParser.qualified_identifier_return qualified_identifier()
    {

        csParser.qualified_identifier_return retval = new csParser.qualified_identifier_return();
        retval.Start = (IToken)input.LT(1);
        int qualified_identifier_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal10=null;
        csParser.identifier_return identifier9 = default(csParser.identifier_return);
        csParser.identifier_return identifier11 = default(csParser.identifier_return);

        object char_literal10_tree=null;

    	try { DebugEnterRule(GrammarFileName, "qualified_identifier");
    	DebugLocation(86, 30);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }
    		// cs.g:86:21: ( identifier ( '.' identifier )* )
    		DebugEnterAlt(1);
    		// cs.g:87:2: identifier ( '.' identifier )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(87, 2);
    		PushFollow(Follow._identifier_in_qualified_identifier243);
    		identifier9=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier9.Tree, identifier9, retval);
    		DebugLocation(87, 13);
    		// cs.g:87:13: ( '.' identifier )*
    		try { DebugEnterSubRule(5);
    		while (true)
    		{
    			int alt5=2;
    			try { DebugEnterDecision(5, decisionCanBacktrack[5]);
    			int LA5_0 = input.LA(1);

    			if ((LA5_0==DOT))
    			{
    				alt5=1;
    			}


    			} finally { DebugExitDecision(5); }
    			switch ( alt5 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:87:14: '.' identifier
    				{
    				DebugLocation(87, 14);
    				char_literal10=(IToken)new XToken((IToken)Match(input,DOT,Follow._DOT_in_qualified_identifier246), "DOT"); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal10_tree = (object)adaptor.Create(char_literal10, retval);
    				adaptor.AddChild(root_0, char_literal10_tree);
    				}
    				DebugLocation(87, 18);
    				PushFollow(Follow._identifier_in_qualified_identifier248);
    				identifier11=identifier();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier11.Tree, identifier11, retval);

    				}
    				break;

    			default:
    				goto loop5;
    			}
    		}

    		loop5:
    			;

    		} finally { DebugExitSubRule(5); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 3, qualified_identifier_StartIndex); }
        }
     	DebugLocation(87, 30);
    	} finally { DebugExitRule(GrammarFileName, "qualified_identifier"); }
    	return retval;

    }
    // $ANTLR end "qualified_identifier"

    public class qid_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_qid() {}
    protected virtual void Leave_qid() {}

    // $ANTLR start "qid"
    // cs.g:89:1: qid : qid_start ( qid_part )* ;
    [GrammarRule("qid")]
    public csParser.qid_return qid()
    {

        csParser.qid_return retval = new csParser.qid_return();
        retval.Start = (IToken)input.LT(1);
        int qid_StartIndex = input.Index;
        object root_0 = null;

        csParser.qid_start_return qid_start12 = default(csParser.qid_start_return);
        csParser.qid_part_return qid_part13 = default(csParser.qid_part_return);


    	try { DebugEnterRule(GrammarFileName, "qid");
    	DebugLocation(89, 21);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }
    		// cs.g:89:4: ( qid_start ( qid_part )* )
    		DebugEnterAlt(1);
    		// cs.g:90:2: qid_start ( qid_part )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(90, 2);
    		PushFollow(Follow._qid_start_in_qid261);
    		qid_start12=qid_start();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, qid_start12.Tree, qid_start12, retval);
    		DebugLocation(90, 12);
    		// cs.g:90:12: ( qid_part )*
    		try { DebugEnterSubRule(6);
    		while (true)
    		{
    			int alt6=2;
    			try { DebugEnterDecision(6, decisionCanBacktrack[6]);
    			int LA6_0 = input.LA(1);

    			if (((LA6_0>=DOT && LA6_0<=PTR)))
    			{
    				alt6=1;
    			}


    			} finally { DebugExitDecision(6); }
    			switch ( alt6 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: qid_part
    				{
    				DebugLocation(90, 12);
    				PushFollow(Follow._qid_part_in_qid263);
    				qid_part13=qid_part();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, qid_part13.Tree, qid_part13, retval);

    				}
    				break;

    			default:
    				goto loop6;
    			}
    		}

    		loop6:
    			;

    		} finally { DebugExitSubRule(6); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 4, qid_StartIndex); }
        }
     	DebugLocation(90, 21);
    	} finally { DebugExitRule(GrammarFileName, "qid"); }
    	return retval;

    }
    // $ANTLR end "qid"

    public class qid_start_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_qid_start() {}
    protected virtual void Leave_qid_start() {}

    // $ANTLR start "qid_start"
    // cs.g:91:1: qid_start : ( identifier ( '::' identifier )? ( generic_argument_list )? | 'this' | 'base' | predefined_type | literal );
    [GrammarRule("qid_start")]
    public csParser.qid_start_return qid_start()
    {

        csParser.qid_start_return retval = new csParser.qid_start_return();
        retval.Start = (IToken)input.LT(1);
        int qid_start_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal15=null;
        IToken string_literal18=null;
        IToken string_literal19=null;
        csParser.identifier_return identifier14 = default(csParser.identifier_return);
        csParser.identifier_return identifier16 = default(csParser.identifier_return);
        csParser.generic_argument_list_return generic_argument_list17 = default(csParser.generic_argument_list_return);
        csParser.predefined_type_return predefined_type20 = default(csParser.predefined_type_return);
        csParser.literal_return literal21 = default(csParser.literal_return);

        object string_literal15_tree=null;
        object string_literal18_tree=null;
        object string_literal19_tree=null;

    	try { DebugEnterRule(GrammarFileName, "qid_start");
    	DebugLocation(91, 11);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }
    		// cs.g:91:10: ( identifier ( '::' identifier )? ( generic_argument_list )? | 'this' | 'base' | predefined_type | literal )
    		int alt9=5;
    		try { DebugEnterDecision(9, decisionCanBacktrack[9]);
    		switch (input.LA(1))
    		{
    		case IDENTIFIER:
    		case SET:
    		case 95:
    		case 101:
    		case 102:
    		case 103:
    		case 104:
    		case 105:
    		case 106:
    		case 107:
    		case 109:
    		case 175:
    		case 176:
    		case 177:
    		case 178:
    		case 179:
    		case 180:
    		case 181:
    		case 182:
    		case 183:
    		case 184:
    		case 185:
    		case 186:
    		case 187:
    		case 199:
    		case 201:
    		case 202:
    		case 208:
    		case 225:
    		case 226:
    			{
    			alt9=1;
    			}
    			break;
    		case 90:
    			{
    			alt9=2;
    			}
    			break;
    		case 91:
    			{
    			alt9=3;
    			}
    			break;
    		case 114:
    		case 115:
    		case 116:
    		case 117:
    		case 118:
    		case 119:
    		case 120:
    		case 121:
    		case 122:
    		case 132:
    		case 133:
    		case 134:
    		case 135:
    		case 136:
    		case 137:
    			{
    			alt9=4;
    			}
    			break;
    		case Real_literal:
    		case NUMBER:
    		case Hex_number:
    		case Character_literal:
    		case STRINGLITERAL:
    		case Verbatim_string_literal:
    		case TRUE:
    		case FALSE:
    		case NULL:
    			{
    			alt9=5;
    			}
    			break;
    		default:
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 9, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(9); }
    		switch (alt9)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:92:2: identifier ( '::' identifier )? ( generic_argument_list )?
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(92, 2);
    			PushFollow(Follow._identifier_in_qid_start272);
    			identifier14=identifier();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier14.Tree, identifier14, retval);
    			DebugLocation(92, 13);
    			// cs.g:92:13: ( '::' identifier )?
    			int alt7=2;
    			try { DebugEnterSubRule(7);
    			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
    			int LA7_0 = input.LA(1);

    			if ((LA7_0==89))
    			{
    				alt7=1;
    			}
    			} finally { DebugExitDecision(7); }
    			switch (alt7)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:92:14: '::' identifier
    				{
    				DebugLocation(92, 14);
    				string_literal15=(IToken)Match(input,89,Follow._89_in_qid_start275); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				string_literal15_tree = (object)adaptor.Create(string_literal15, retval);
    				adaptor.AddChild(root_0, string_literal15_tree);
    				}
    				DebugLocation(92, 19);
    				PushFollow(Follow._identifier_in_qid_start277);
    				identifier16=identifier();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier16.Tree, identifier16, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(7); }

    			DebugLocation(92, 32);
    			// cs.g:92:32: ( generic_argument_list )?
    			int alt8=2;
    			try { DebugEnterSubRule(8);
    			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
    			try
    			{
    				alt8 = dfa8.Predict(input);
    			}
    			catch (NoViableAltException nvae)
    			{
    				DebugRecognitionException(nvae);
    				throw;
    			}
    			} finally { DebugExitDecision(8); }
    			switch (alt8)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: generic_argument_list
    				{
    				DebugLocation(92, 32);
    				PushFollow(Follow._generic_argument_list_in_qid_start281);
    				generic_argument_list17=generic_argument_list();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, generic_argument_list17.Tree, generic_argument_list17, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(8); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:93:4: 'this'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(93, 4);
    			string_literal18=(IToken)Match(input,90,Follow._90_in_qid_start287); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal18_tree = (object)adaptor.Create(string_literal18, retval);
    			adaptor.AddChild(root_0, string_literal18_tree);
    			}

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:94:4: 'base'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(94, 4);
    			string_literal19=(IToken)Match(input,91,Follow._91_in_qid_start292); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal19_tree = (object)adaptor.Create(string_literal19, retval);
    			adaptor.AddChild(root_0, string_literal19_tree);
    			}

    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// cs.g:95:4: predefined_type
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(95, 4);
    			PushFollow(Follow._predefined_type_in_qid_start297);
    			predefined_type20=predefined_type();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, predefined_type20.Tree, predefined_type20, retval);

    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// cs.g:96:4: literal
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(96, 4);
    			PushFollow(Follow._literal_in_qid_start302);
    			literal21=literal();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, literal21.Tree, literal21, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 5, qid_start_StartIndex); }
        }
     	DebugLocation(96, 11);
    	} finally { DebugExitRule(GrammarFileName, "qid_start"); }
    	return retval;

    }
    // $ANTLR end "qid_start"

    public class qid_part_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_qid_part() {}
    protected virtual void Leave_qid_part() {}

    // $ANTLR start "qid_part"
    // cs.g:97:1: qid_part : access_operator identifier ( generic_argument_list )? ;
    [GrammarRule("qid_part")]
    public csParser.qid_part_return qid_part()
    {

        csParser.qid_part_return retval = new csParser.qid_part_return();
        retval.Start = (IToken)input.LT(1);
        int qid_part_StartIndex = input.Index;
        object root_0 = null;

        csParser.access_operator_return access_operator22 = default(csParser.access_operator_return);
        csParser.identifier_return identifier23 = default(csParser.identifier_return);
        csParser.generic_argument_list_return generic_argument_list24 = default(csParser.generic_argument_list_return);


    	try { DebugEnterRule(GrammarFileName, "qid_part");
    	DebugLocation(97, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }
    		// cs.g:97:9: ( access_operator identifier ( generic_argument_list )? )
    		DebugEnterAlt(1);
    		// cs.g:98:2: access_operator identifier ( generic_argument_list )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(98, 2);
    		PushFollow(Follow._access_operator_in_qid_part312);
    		access_operator22=access_operator();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, access_operator22.Tree, access_operator22, retval);
    		DebugLocation(98, 20);
    		PushFollow(Follow._identifier_in_qid_part316);
    		identifier23=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier23.Tree, identifier23, retval);
    		DebugLocation(98, 33);
    		// cs.g:98:33: ( generic_argument_list )?
    		int alt10=2;
    		try { DebugEnterSubRule(10);
    		try { DebugEnterDecision(10, decisionCanBacktrack[10]);
    		try
    		{
    			alt10 = dfa10.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(10); }
    		switch (alt10)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: generic_argument_list
    			{
    			DebugLocation(98, 33);
    			PushFollow(Follow._generic_argument_list_in_qid_part320);
    			generic_argument_list24=generic_argument_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, generic_argument_list24.Tree, generic_argument_list24, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(10); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 6, qid_part_StartIndex); }
        }
     	DebugLocation(99, 1);
    	} finally { DebugExitRule(GrammarFileName, "qid_part"); }
    	return retval;

    }
    // $ANTLR end "qid_part"

    public class namespace_block_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_namespace_block() {}
    protected virtual void Leave_namespace_block() {}

    // $ANTLR start "namespace_block"
    // cs.g:101:1: namespace_block : '{' namespace_body '}' ;
    [GrammarRule("namespace_block")]
    public csParser.namespace_block_return namespace_block()
    {

        csParser.namespace_block_return retval = new csParser.namespace_block_return();
        retval.Start = (IToken)input.LT(1);
        int namespace_block_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal25=null;
        IToken char_literal27=null;
        csParser.namespace_body_return namespace_body26 = default(csParser.namespace_body_return);

        object char_literal25_tree=null;
        object char_literal27_tree=null;

    	try { DebugEnterRule(GrammarFileName, "namespace_block");
    	DebugLocation(101, 28);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }
    		// cs.g:101:16: ( '{' namespace_body '}' )
    		DebugEnterAlt(1);
    		// cs.g:102:2: '{' namespace_body '}'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(102, 2);
    		char_literal25=(IToken)Match(input,92,Follow._92_in_namespace_block331); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal25_tree = (object)adaptor.Create(char_literal25, retval);
    		adaptor.AddChild(root_0, char_literal25_tree);
    		}
    		DebugLocation(102, 8);
    		PushFollow(Follow._namespace_body_in_namespace_block335);
    		namespace_body26=namespace_body();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, namespace_body26.Tree, namespace_body26, retval);
    		DebugLocation(102, 25);
    		char_literal27=(IToken)Match(input,93,Follow._93_in_namespace_block339); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal27_tree = (object)adaptor.Create(char_literal27, retval);
    		adaptor.AddChild(root_0, char_literal27_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 7, namespace_block_StartIndex); }
        }
     	DebugLocation(102, 28);
    	} finally { DebugExitRule(GrammarFileName, "namespace_block"); }
    	return retval;

    }
    // $ANTLR end "namespace_block"

    public class namespace_body_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_namespace_body() {}
    protected virtual void Leave_namespace_body() {}

    // $ANTLR start "namespace_body"
    // cs.g:103:1: namespace_body : ( extern_alias_directives )? ( using_directives )? ( namespace_member_declarations )? ;
    [GrammarRule("namespace_body")]
    public csParser.namespace_body_return namespace_body()
    {

        csParser.namespace_body_return retval = new csParser.namespace_body_return();
        retval.Start = (IToken)input.LT(1);
        int namespace_body_StartIndex = input.Index;
        object root_0 = null;

        csParser.extern_alias_directives_return extern_alias_directives28 = default(csParser.extern_alias_directives_return);
        csParser.using_directives_return using_directives29 = default(csParser.using_directives_return);
        csParser.namespace_member_declarations_return namespace_member_declarations30 = default(csParser.namespace_member_declarations_return);


    	try { DebugEnterRule(GrammarFileName, "namespace_body");
    	DebugLocation(103, 79);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }
    		// cs.g:103:15: ( ( extern_alias_directives )? ( using_directives )? ( namespace_member_declarations )? )
    		DebugEnterAlt(1);
    		// cs.g:104:2: ( extern_alias_directives )? ( using_directives )? ( namespace_member_declarations )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(104, 2);
    		// cs.g:104:2: ( extern_alias_directives )?
    		int alt11=2;
    		try { DebugEnterSubRule(11);
    		try { DebugEnterDecision(11, decisionCanBacktrack[11]);
    		int LA11_0 = input.LA(1);

    		if ((LA11_0==94))
    		{
    			alt11=1;
    		}
    		} finally { DebugExitDecision(11); }
    		switch (alt11)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: extern_alias_directives
    			{
    			DebugLocation(104, 2);
    			PushFollow(Follow._extern_alias_directives_in_namespace_body347);
    			extern_alias_directives28=extern_alias_directives();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, extern_alias_directives28.Tree, extern_alias_directives28, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(11); }

    		DebugLocation(104, 29);
    		// cs.g:104:29: ( using_directives )?
    		int alt12=2;
    		try { DebugEnterSubRule(12);
    		try { DebugEnterDecision(12, decisionCanBacktrack[12]);
    		int LA12_0 = input.LA(1);

    		if ((LA12_0==USING))
    		{
    			alt12=1;
    		}
    		} finally { DebugExitDecision(12); }
    		switch (alt12)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: using_directives
    			{
    			DebugLocation(104, 29);
    			PushFollow(Follow._using_directives_in_namespace_body352);
    			using_directives29=using_directives();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, using_directives29.Tree, using_directives29, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(12); }

    		DebugLocation(104, 49);
    		// cs.g:104:49: ( namespace_member_declarations )?
    		int alt13=2;
    		try { DebugEnterSubRule(13);
    		try { DebugEnterDecision(13, decisionCanBacktrack[13]);
    		int LA13_0 = input.LA(1);

    		if ((LA13_0==ENUM||LA13_0==88||LA13_0==97||LA13_0==138||LA13_0==144||(LA13_0>=170 && LA13_0<=174)||(LA13_0>=188 && LA13_0<=193)||LA13_0==206))
    		{
    			alt13=1;
    		}
    		} finally { DebugExitDecision(13); }
    		switch (alt13)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: namespace_member_declarations
    			{
    			DebugLocation(104, 49);
    			PushFollow(Follow._namespace_member_declarations_in_namespace_body357);
    			namespace_member_declarations30=namespace_member_declarations();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, namespace_member_declarations30.Tree, namespace_member_declarations30, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(13); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 8, namespace_body_StartIndex); }
        }
     	DebugLocation(104, 79);
    	} finally { DebugExitRule(GrammarFileName, "namespace_body"); }
    	return retval;

    }
    // $ANTLR end "namespace_body"

    public class extern_alias_directives_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_extern_alias_directives() {}
    protected virtual void Leave_extern_alias_directives() {}

    // $ANTLR start "extern_alias_directives"
    // cs.g:105:1: extern_alias_directives : ( extern_alias_directive )+ ;
    [GrammarRule("extern_alias_directives")]
    public csParser.extern_alias_directives_return extern_alias_directives()
    {

        csParser.extern_alias_directives_return retval = new csParser.extern_alias_directives_return();
        retval.Start = (IToken)input.LT(1);
        int extern_alias_directives_StartIndex = input.Index;
        object root_0 = null;

        csParser.extern_alias_directive_return extern_alias_directive31 = default(csParser.extern_alias_directive_return);


    	try { DebugEnterRule(GrammarFileName, "extern_alias_directives");
    	DebugLocation(105, 25);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }
    		// cs.g:105:24: ( ( extern_alias_directive )+ )
    		DebugEnterAlt(1);
    		// cs.g:106:2: ( extern_alias_directive )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(106, 2);
    		// cs.g:106:2: ( extern_alias_directive )+
    		int cnt14=0;
    		try { DebugEnterSubRule(14);
    		while (true)
    		{
    			int alt14=2;
    			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
    			int LA14_0 = input.LA(1);

    			if ((LA14_0==94))
    			{
    				alt14=1;
    			}


    			} finally { DebugExitDecision(14); }
    			switch (alt14)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: extern_alias_directive
    				{
    				DebugLocation(106, 2);
    				PushFollow(Follow._extern_alias_directive_in_extern_alias_directives366);
    				extern_alias_directive31=extern_alias_directive();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, extern_alias_directive31.Tree, extern_alias_directive31, retval);

    				}
    				break;

    			default:
    				if (cnt14 >= 1)
    					goto loop14;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee14 = new EarlyExitException( 14, input );
    				DebugRecognitionException(eee14);
    				throw eee14;
    			}
    			cnt14++;
    		}
    		loop14:
    			;

    		} finally { DebugExitSubRule(14); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 9, extern_alias_directives_StartIndex); }
        }
     	DebugLocation(106, 25);
    	} finally { DebugExitRule(GrammarFileName, "extern_alias_directives"); }
    	return retval;

    }
    // $ANTLR end "extern_alias_directives"

    public class extern_alias_directive_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_extern_alias_directive() {}
    protected virtual void Leave_extern_alias_directive() {}

    // $ANTLR start "extern_alias_directive"
    // cs.g:107:1: extern_alias_directive : 'extern' 'alias' identifier ';' ;
    [GrammarRule("extern_alias_directive")]
    public csParser.extern_alias_directive_return extern_alias_directive()
    {

        csParser.extern_alias_directive_return retval = new csParser.extern_alias_directive_return();
        retval.Start = (IToken)input.LT(1);
        int extern_alias_directive_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal32=null;
        IToken string_literal33=null;
        IToken char_literal35=null;
        csParser.identifier_return identifier34 = default(csParser.identifier_return);

        object string_literal32_tree=null;
        object string_literal33_tree=null;
        object char_literal35_tree=null;

    	try { DebugEnterRule(GrammarFileName, "extern_alias_directive");
    	DebugLocation(107, 38);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }
    		// cs.g:107:23: ( 'extern' 'alias' identifier ';' )
    		DebugEnterAlt(1);
    		// cs.g:108:2: 'extern' 'alias' identifier ';'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(108, 2);
    		string_literal32=(IToken)Match(input,94,Follow._94_in_extern_alias_directive375); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal32_tree = (object)adaptor.Create(string_literal32, retval);
    		adaptor.AddChild(root_0, string_literal32_tree);
    		}
    		DebugLocation(108, 13);
    		string_literal33=(IToken)Match(input,95,Follow._95_in_extern_alias_directive379); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal33_tree = (object)adaptor.Create(string_literal33, retval);
    		adaptor.AddChild(root_0, string_literal33_tree);
    		}
    		DebugLocation(108, 23);
    		PushFollow(Follow._identifier_in_extern_alias_directive383);
    		identifier34=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier34.Tree, identifier34, retval);
    		DebugLocation(108, 35);
    		char_literal35=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_extern_alias_directive386), "SEMI"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal35_tree = (object)adaptor.Create(char_literal35, retval);
    		adaptor.AddChild(root_0, char_literal35_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 10, extern_alias_directive_StartIndex); }
        }
     	DebugLocation(108, 38);
    	} finally { DebugExitRule(GrammarFileName, "extern_alias_directive"); }
    	return retval;

    }
    // $ANTLR end "extern_alias_directive"

    public class using_directives_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_using_directives() {}
    protected virtual void Leave_using_directives() {}

    // $ANTLR start "using_directives"
    // cs.g:109:1: using_directives : ( using_directive )+ ;
    [GrammarRule("using_directives")]
    public csParser.using_directives_return using_directives()
    {

        csParser.using_directives_return retval = new csParser.using_directives_return();
        retval.Start = (IToken)input.LT(1);
        int using_directives_StartIndex = input.Index;
        object root_0 = null;

        csParser.using_directive_return using_directive36 = default(csParser.using_directive_return);


    	try { DebugEnterRule(GrammarFileName, "using_directives");
    	DebugLocation(109, 18);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }
    		// cs.g:109:17: ( ( using_directive )+ )
    		DebugEnterAlt(1);
    		// cs.g:110:2: ( using_directive )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(110, 2);
    		// cs.g:110:2: ( using_directive )+
    		int cnt15=0;
    		try { DebugEnterSubRule(15);
    		while (true)
    		{
    			int alt15=2;
    			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
    			int LA15_0 = input.LA(1);

    			if ((LA15_0==USING))
    			{
    				int LA15_2 = input.LA(2);

    				if ((EvaluatePredicate(synpred18_cs_fragment)))
    				{
    					alt15=1;
    				}


    			}


    			} finally { DebugExitDecision(15); }
    			switch (alt15)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: using_directive
    				{
    				DebugLocation(110, 2);
    				PushFollow(Follow._using_directive_in_using_directives394);
    				using_directive36=using_directive();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, using_directive36.Tree, using_directive36, retval);

    				}
    				break;

    			default:
    				if (cnt15 >= 1)
    					goto loop15;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee15 = new EarlyExitException( 15, input );
    				DebugRecognitionException(eee15);
    				throw eee15;
    			}
    			cnt15++;
    		}
    		loop15:
    			;

    		} finally { DebugExitSubRule(15); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 11, using_directives_StartIndex); }
        }
     	DebugLocation(110, 18);
    	} finally { DebugExitRule(GrammarFileName, "using_directives"); }
    	return retval;

    }
    // $ANTLR end "using_directives"

    public class using_directive_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_using_directive() {}
    protected virtual void Leave_using_directive() {}

    // $ANTLR start "using_directive"
    // cs.g:111:1: using_directive : ( using_alias_directive | using_namespace_directive ) ;
    [GrammarRule("using_directive")]
    public csParser.using_directive_return using_directive()
    {

        csParser.using_directive_return retval = new csParser.using_directive_return();
        retval.Start = (IToken)input.LT(1);
        int using_directive_StartIndex = input.Index;
        object root_0 = null;

        csParser.using_alias_directive_return using_alias_directive37 = default(csParser.using_alias_directive_return);
        csParser.using_namespace_directive_return using_namespace_directive38 = default(csParser.using_namespace_directive_return);


    	try { DebugEnterRule(GrammarFileName, "using_directive");
    	DebugLocation(111, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }
    		// cs.g:111:16: ( ( using_alias_directive | using_namespace_directive ) )
    		DebugEnterAlt(1);
    		// cs.g:112:2: ( using_alias_directive | using_namespace_directive )
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(112, 2);
    		// cs.g:112:2: ( using_alias_directive | using_namespace_directive )
    		int alt16=2;
    		try { DebugEnterSubRule(16);
    		try { DebugEnterDecision(16, decisionCanBacktrack[16]);
    		int LA16_0 = input.LA(1);

    		if ((LA16_0==USING))
    		{
    			int LA16_1 = input.LA(2);

    			if ((LA16_1==IDENTIFIER))
    			{
    				int LA16_2 = input.LA(3);

    				if ((LA16_2==96))
    				{
    					alt16=1;
    				}
    				else if ((LA16_2==DOT||LA16_2==SEMI||LA16_2==89||LA16_2==123))
    				{
    					alt16=2;
    				}
    				else
    				{
    					if (state.backtracking>0) {state.failed=true; return retval;}
    					NoViableAltException nvae = new NoViableAltException("", 16, 2, input);

    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    			}
    			else if ((LA16_1==SET||LA16_1==95||(LA16_1>=101 && LA16_1<=107)||LA16_1==109||(LA16_1>=175 && LA16_1<=187)||LA16_1==199||(LA16_1>=201 && LA16_1<=202)||LA16_1==208||(LA16_1>=225 && LA16_1<=226)))
    			{
    				int LA16_3 = input.LA(3);

    				if ((LA16_3==96))
    				{
    					alt16=1;
    				}
    				else if ((LA16_3==DOT||LA16_3==SEMI||LA16_3==89||LA16_3==123))
    				{
    					alt16=2;
    				}
    				else
    				{
    					if (state.backtracking>0) {state.failed=true; return retval;}
    					NoViableAltException nvae = new NoViableAltException("", 16, 3, input);

    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 16, 1, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 16, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(16); }
    		switch (alt16)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:112:3: using_alias_directive
    			{
    			DebugLocation(112, 3);
    			PushFollow(Follow._using_alias_directive_in_using_directive404);
    			using_alias_directive37=using_alias_directive();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, using_alias_directive37.Tree, using_alias_directive37, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:113:4: using_namespace_directive
    			{
    			DebugLocation(113, 4);
    			PushFollow(Follow._using_namespace_directive_in_using_directive409);
    			using_namespace_directive38=using_namespace_directive();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, using_namespace_directive38.Tree, using_namespace_directive38, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(16); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 12, using_directive_StartIndex); }
        }
     	DebugLocation(114, 1);
    	} finally { DebugExitRule(GrammarFileName, "using_directive"); }
    	return retval;

    }
    // $ANTLR end "using_directive"

    public class using_alias_directive_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_using_alias_directive() {}
    protected virtual void Leave_using_alias_directive() {}

    // $ANTLR start "using_alias_directive"
    // cs.g:115:1: using_alias_directive : 'using' identifier '=' namespace_or_type_name ';' ;
    [GrammarRule("using_alias_directive")]
    public csParser.using_alias_directive_return using_alias_directive()
    {

        csParser.using_alias_directive_return retval = new csParser.using_alias_directive_return();
        retval.Start = (IToken)input.LT(1);
        int using_alias_directive_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal39=null;
        IToken char_literal41=null;
        IToken char_literal43=null;
        csParser.identifier_return identifier40 = default(csParser.identifier_return);
        csParser.namespace_or_type_name_return namespace_or_type_name42 = default(csParser.namespace_or_type_name_return);

        object string_literal39_tree=null;
        object char_literal41_tree=null;
        object char_literal43_tree=null;

    	try { DebugEnterRule(GrammarFileName, "using_alias_directive");
    	DebugLocation(115, 59);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }
    		// cs.g:115:22: ( 'using' identifier '=' namespace_or_type_name ';' )
    		DebugEnterAlt(1);
    		// cs.g:116:2: 'using' identifier '=' namespace_or_type_name ';'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(116, 2);
    		string_literal39=(IToken)new XToken((IToken)Match(input,USING,Follow._USING_in_using_alias_directive419), "USING"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal39_tree = (object)adaptor.Create(string_literal39, retval);
    		adaptor.AddChild(root_0, string_literal39_tree);
    		}
    		DebugLocation(116, 12);
    		PushFollow(Follow._identifier_in_using_alias_directive423);
    		identifier40=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier40.Tree, identifier40, retval);
    		DebugLocation(116, 25);
    		char_literal41=(IToken)Match(input,96,Follow._96_in_using_alias_directive427); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal41_tree = (object)adaptor.Create(char_literal41, retval);
    		adaptor.AddChild(root_0, char_literal41_tree);
    		}
    		DebugLocation(116, 31);
    		PushFollow(Follow._namespace_or_type_name_in_using_alias_directive431);
    		namespace_or_type_name42=namespace_or_type_name();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, namespace_or_type_name42.Tree, namespace_or_type_name42, retval);
    		DebugLocation(116, 56);
    		char_literal43=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_using_alias_directive435), "SEMI"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal43_tree = (object)adaptor.Create(char_literal43, retval);
    		adaptor.AddChild(root_0, char_literal43_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 13, using_alias_directive_StartIndex); }
        }
     	DebugLocation(116, 59);
    	} finally { DebugExitRule(GrammarFileName, "using_alias_directive"); }
    	return retval;

    }
    // $ANTLR end "using_alias_directive"

    public class using_namespace_directive_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_using_namespace_directive() {}
    protected virtual void Leave_using_namespace_directive() {}

    // $ANTLR start "using_namespace_directive"
    // cs.g:117:1: using_namespace_directive : 'using' namespace_name ';' ;
    [GrammarRule("using_namespace_directive")]
    public csParser.using_namespace_directive_return using_namespace_directive()
    {

        csParser.using_namespace_directive_return retval = new csParser.using_namespace_directive_return();
        retval.Start = (IToken)input.LT(1);
        int using_namespace_directive_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal44=null;
        IToken char_literal46=null;
        csParser.namespace_name_return namespace_name45 = default(csParser.namespace_name_return);

        object string_literal44_tree=null;
        object char_literal46_tree=null;

    	try { DebugEnterRule(GrammarFileName, "using_namespace_directive");
    	DebugLocation(117, 32);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }
    		// cs.g:117:26: ( 'using' namespace_name ';' )
    		DebugEnterAlt(1);
    		// cs.g:118:2: 'using' namespace_name ';'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(118, 2);
    		string_literal44=(IToken)new XToken((IToken)Match(input,USING,Follow._USING_in_using_namespace_directive443), "USING"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal44_tree = (object)adaptor.Create(string_literal44, retval);
    		adaptor.AddChild(root_0, string_literal44_tree);
    		}
    		DebugLocation(118, 12);
    		PushFollow(Follow._namespace_name_in_using_namespace_directive447);
    		namespace_name45=namespace_name();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, namespace_name45.Tree, namespace_name45, retval);
    		DebugLocation(118, 29);
    		char_literal46=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_using_namespace_directive451), "SEMI"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal46_tree = (object)adaptor.Create(char_literal46, retval);
    		adaptor.AddChild(root_0, char_literal46_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 14, using_namespace_directive_StartIndex); }
        }
     	DebugLocation(118, 32);
    	} finally { DebugExitRule(GrammarFileName, "using_namespace_directive"); }
    	return retval;

    }
    // $ANTLR end "using_namespace_directive"

    public class namespace_member_declarations_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_namespace_member_declarations() {}
    protected virtual void Leave_namespace_member_declarations() {}

    // $ANTLR start "namespace_member_declarations"
    // cs.g:119:1: namespace_member_declarations : ( namespace_member_declaration )+ ;
    [GrammarRule("namespace_member_declarations")]
    public csParser.namespace_member_declarations_return namespace_member_declarations()
    {

        csParser.namespace_member_declarations_return retval = new csParser.namespace_member_declarations_return();
        retval.Start = (IToken)input.LT(1);
        int namespace_member_declarations_StartIndex = input.Index;
        object root_0 = null;

        csParser.namespace_member_declaration_return namespace_member_declaration47 = default(csParser.namespace_member_declaration_return);


    	try { DebugEnterRule(GrammarFileName, "namespace_member_declarations");
    	DebugLocation(119, 31);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }
    		// cs.g:119:30: ( ( namespace_member_declaration )+ )
    		DebugEnterAlt(1);
    		// cs.g:120:2: ( namespace_member_declaration )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(120, 2);
    		// cs.g:120:2: ( namespace_member_declaration )+
    		int cnt17=0;
    		try { DebugEnterSubRule(17);
    		while (true)
    		{
    			int alt17=2;
    			try { DebugEnterDecision(17, decisionCanBacktrack[17]);
    			int LA17_0 = input.LA(1);

    			if ((LA17_0==ENUM||LA17_0==88||LA17_0==97||LA17_0==138||LA17_0==144||(LA17_0>=170 && LA17_0<=174)||(LA17_0>=188 && LA17_0<=193)||LA17_0==206))
    			{
    				alt17=1;
    			}


    			} finally { DebugExitDecision(17); }
    			switch (alt17)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: namespace_member_declaration
    				{
    				DebugLocation(120, 2);
    				PushFollow(Follow._namespace_member_declaration_in_namespace_member_declarations459);
    				namespace_member_declaration47=namespace_member_declaration();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, namespace_member_declaration47.Tree, namespace_member_declaration47, retval);

    				}
    				break;

    			default:
    				if (cnt17 >= 1)
    					goto loop17;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee17 = new EarlyExitException( 17, input );
    				DebugRecognitionException(eee17);
    				throw eee17;
    			}
    			cnt17++;
    		}
    		loop17:
    			;

    		} finally { DebugExitSubRule(17); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 15, namespace_member_declarations_StartIndex); }
        }
     	DebugLocation(120, 31);
    	} finally { DebugExitRule(GrammarFileName, "namespace_member_declarations"); }
    	return retval;

    }
    // $ANTLR end "namespace_member_declarations"

    public class namespace_member_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_namespace_member_declaration() {}
    protected virtual void Leave_namespace_member_declaration() {}

    // $ANTLR start "namespace_member_declaration"
    // cs.g:121:1: namespace_member_declaration : ( namespace_declaration | type_declaration );
    [GrammarRule("namespace_member_declaration")]
    public csParser.namespace_member_declaration_return namespace_member_declaration()
    {

        csParser.namespace_member_declaration_return retval = new csParser.namespace_member_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int namespace_member_declaration_StartIndex = input.Index;
        object root_0 = null;

        csParser.namespace_declaration_return namespace_declaration48 = default(csParser.namespace_declaration_return);
        csParser.type_declaration_return type_declaration49 = default(csParser.type_declaration_return);


    	try { DebugEnterRule(GrammarFileName, "namespace_member_declaration");
    	DebugLocation(121, 20);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }
    		// cs.g:121:29: ( namespace_declaration | type_declaration )
    		int alt18=2;
    		try { DebugEnterDecision(18, decisionCanBacktrack[18]);
    		int LA18_0 = input.LA(1);

    		if ((LA18_0==88))
    		{
    			alt18=1;
    		}
    		else if ((LA18_0==ENUM||LA18_0==97||LA18_0==138||LA18_0==144||(LA18_0>=170 && LA18_0<=174)||(LA18_0>=188 && LA18_0<=193)||LA18_0==206))
    		{
    			alt18=2;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 18, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(18); }
    		switch (alt18)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:122:2: namespace_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(122, 2);
    			PushFollow(Follow._namespace_declaration_in_namespace_member_declaration468);
    			namespace_declaration48=namespace_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, namespace_declaration48.Tree, namespace_declaration48, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:123:4: type_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(123, 4);
    			PushFollow(Follow._type_declaration_in_namespace_member_declaration473);
    			type_declaration49=type_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_declaration49.Tree, type_declaration49, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 16, namespace_member_declaration_StartIndex); }
        }
     	DebugLocation(123, 20);
    	} finally { DebugExitRule(GrammarFileName, "namespace_member_declaration"); }
    	return retval;

    }
    // $ANTLR end "namespace_member_declaration"

    public class type_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_type_declaration() {}
    protected virtual void Leave_type_declaration() {}

    // $ANTLR start "type_declaration"
    // cs.g:124:1: type_declaration : ( class_declaration | struct_declaration | interface_declaration | enum_declaration | delegate_declaration );
    [GrammarRule("type_declaration")]
    public csParser.type_declaration_return type_declaration()
    {

        csParser.type_declaration_return retval = new csParser.type_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int type_declaration_StartIndex = input.Index;
        object root_0 = null;

        csParser.class_declaration_return class_declaration50 = default(csParser.class_declaration_return);
        csParser.struct_declaration_return struct_declaration51 = default(csParser.struct_declaration_return);
        csParser.interface_declaration_return interface_declaration52 = default(csParser.interface_declaration_return);
        csParser.enum_declaration_return enum_declaration53 = default(csParser.enum_declaration_return);
        csParser.delegate_declaration_return delegate_declaration54 = default(csParser.delegate_declaration_return);


    	try { DebugEnterRule(GrammarFileName, "type_declaration");
    	DebugLocation(124, 24);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }
    		// cs.g:124:17: ( class_declaration | struct_declaration | interface_declaration | enum_declaration | delegate_declaration )
    		int alt19=5;
    		try { DebugEnterDecision(19, decisionCanBacktrack[19]);
    		try
    		{
    			alt19 = dfa19.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(19); }
    		switch (alt19)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:125:2: class_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(125, 2);
    			PushFollow(Follow._class_declaration_in_type_declaration481);
    			class_declaration50=class_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, class_declaration50.Tree, class_declaration50, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:126:4: struct_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(126, 4);
    			PushFollow(Follow._struct_declaration_in_type_declaration486);
    			struct_declaration51=struct_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, struct_declaration51.Tree, struct_declaration51, retval);

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:127:4: interface_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(127, 4);
    			PushFollow(Follow._interface_declaration_in_type_declaration491);
    			interface_declaration52=interface_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, interface_declaration52.Tree, interface_declaration52, retval);

    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// cs.g:128:4: enum_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(128, 4);
    			PushFollow(Follow._enum_declaration_in_type_declaration496);
    			enum_declaration53=enum_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, enum_declaration53.Tree, enum_declaration53, retval);

    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// cs.g:129:4: delegate_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(129, 4);
    			PushFollow(Follow._delegate_declaration_in_type_declaration501);
    			delegate_declaration54=delegate_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, delegate_declaration54.Tree, delegate_declaration54, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 17, type_declaration_StartIndex); }
        }
     	DebugLocation(129, 24);
    	} finally { DebugExitRule(GrammarFileName, "type_declaration"); }
    	return retval;

    }
    // $ANTLR end "type_declaration"

    public class qualified_alias_member_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_qualified_alias_member() {}
    protected virtual void Leave_qualified_alias_member() {}

    // $ANTLR start "qualified_alias_member"
    // cs.g:130:1: qualified_alias_member : identifier '::' identifier ( generic_argument_list )? ;
    [GrammarRule("qualified_alias_member")]
    public csParser.qualified_alias_member_return qualified_alias_member()
    {

        csParser.qualified_alias_member_return retval = new csParser.qualified_alias_member_return();
        retval.Start = (IToken)input.LT(1);
        int qualified_alias_member_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal56=null;
        csParser.identifier_return identifier55 = default(csParser.identifier_return);
        csParser.identifier_return identifier57 = default(csParser.identifier_return);
        csParser.generic_argument_list_return generic_argument_list58 = default(csParser.generic_argument_list_return);

        object string_literal56_tree=null;

    	try { DebugEnterRule(GrammarFileName, "qualified_alias_member");
    	DebugLocation(130, 57);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }
    		// cs.g:130:23: ( identifier '::' identifier ( generic_argument_list )? )
    		DebugEnterAlt(1);
    		// cs.g:131:2: identifier '::' identifier ( generic_argument_list )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(131, 2);
    		PushFollow(Follow._identifier_in_qualified_alias_member509);
    		identifier55=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier55.Tree, identifier55, retval);
    		DebugLocation(131, 15);
    		string_literal56=(IToken)Match(input,89,Follow._89_in_qualified_alias_member513); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal56_tree = (object)adaptor.Create(string_literal56, retval);
    		adaptor.AddChild(root_0, string_literal56_tree);
    		}
    		DebugLocation(131, 22);
    		PushFollow(Follow._identifier_in_qualified_alias_member517);
    		identifier57=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier57.Tree, identifier57, retval);
    		DebugLocation(131, 35);
    		// cs.g:131:35: ( generic_argument_list )?
    		int alt20=2;
    		try { DebugEnterSubRule(20);
    		try { DebugEnterDecision(20, decisionCanBacktrack[20]);
    		int LA20_0 = input.LA(1);

    		if ((LA20_0==123))
    		{
    			alt20=1;
    		}
    		} finally { DebugExitDecision(20); }
    		switch (alt20)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: generic_argument_list
    			{
    			DebugLocation(131, 35);
    			PushFollow(Follow._generic_argument_list_in_qualified_alias_member521);
    			generic_argument_list58=generic_argument_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, generic_argument_list58.Tree, generic_argument_list58, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(20); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 18, qualified_alias_member_StartIndex); }
        }
     	DebugLocation(131, 57);
    	} finally { DebugExitRule(GrammarFileName, "qualified_alias_member"); }
    	return retval;

    }
    // $ANTLR end "qualified_alias_member"

    public class namespace_name_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_namespace_name() {}
    protected virtual void Leave_namespace_name() {}

    // $ANTLR start "namespace_name"
    // cs.g:134:1: namespace_name : namespace_or_type_name ;
    [GrammarRule("namespace_name")]
    public csParser.namespace_name_return namespace_name()
    {

        csParser.namespace_name_return retval = new csParser.namespace_name_return();
        retval.Start = (IToken)input.LT(1);
        int namespace_name_StartIndex = input.Index;
        object root_0 = null;

        csParser.namespace_or_type_name_return namespace_or_type_name59 = default(csParser.namespace_or_type_name_return);


    	try { DebugEnterRule(GrammarFileName, "namespace_name");
    	DebugLocation(134, 26);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }
    		// cs.g:135:2: ( namespace_or_type_name )
    		DebugEnterAlt(1);
    		// cs.g:135:4: namespace_or_type_name
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(135, 4);
    		PushFollow(Follow._namespace_or_type_name_in_namespace_name533);
    		namespace_or_type_name59=namespace_or_type_name();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, namespace_or_type_name59.Tree, namespace_or_type_name59, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 19, namespace_name_StartIndex); }
        }
     	DebugLocation(135, 26);
    	} finally { DebugExitRule(GrammarFileName, "namespace_name"); }
    	return retval;

    }
    // $ANTLR end "namespace_name"

    public class type_name_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_type_name() {}
    protected virtual void Leave_type_name() {}

    // $ANTLR start "type_name"
    // cs.g:136:1: type_name : namespace_or_type_name ;
    [GrammarRule("type_name")]
    public csParser.type_name_return type_name()
    {

        csParser.type_name_return retval = new csParser.type_name_return();
        retval.Start = (IToken)input.LT(1);
        int type_name_StartIndex = input.Index;
        object root_0 = null;

        csParser.namespace_or_type_name_return namespace_or_type_name60 = default(csParser.namespace_or_type_name_return);


    	try { DebugEnterRule(GrammarFileName, "type_name");
    	DebugLocation(136, 24);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }
    		// cs.g:136:10: ( namespace_or_type_name )
    		DebugEnterAlt(1);
    		// cs.g:137:2: namespace_or_type_name
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(137, 2);
    		PushFollow(Follow._namespace_or_type_name_in_type_name542);
    		namespace_or_type_name60=namespace_or_type_name();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, namespace_or_type_name60.Tree, namespace_or_type_name60, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 20, type_name_StartIndex); }
        }
     	DebugLocation(137, 24);
    	} finally { DebugExitRule(GrammarFileName, "type_name"); }
    	return retval;

    }
    // $ANTLR end "type_name"

    public class namespace_or_type_name_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_namespace_or_type_name() {}
    protected virtual void Leave_namespace_or_type_name() {}

    // $ANTLR start "namespace_or_type_name"
    // cs.g:138:1: namespace_or_type_name : id1= identifier (ga1= generic_argument_list )? ( '::' id2= identifier (ga2= generic_argument_list )? )? ( '.' id3= identifier (ga3= generic_argument_list )? )* ;
    [GrammarRule("namespace_or_type_name")]
    public csParser.namespace_or_type_name_return namespace_or_type_name()
    {

        csParser.namespace_or_type_name_return retval = new csParser.namespace_or_type_name_return();
        retval.Start = (IToken)input.LT(1);
        int namespace_or_type_name_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal61=null;
        IToken char_literal62=null;
        csParser.identifier_return id1 = default(csParser.identifier_return);
        csParser.generic_argument_list_return ga1 = default(csParser.generic_argument_list_return);
        csParser.identifier_return id2 = default(csParser.identifier_return);
        csParser.generic_argument_list_return ga2 = default(csParser.generic_argument_list_return);
        csParser.identifier_return id3 = default(csParser.identifier_return);
        csParser.generic_argument_list_return ga3 = default(csParser.generic_argument_list_return);

        object string_literal61_tree=null;
        object char_literal62_tree=null;

    	try { DebugEnterRule(GrammarFileName, "namespace_or_type_name");
    	DebugLocation(138, 4);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }
    		// cs.g:138:23: (id1= identifier (ga1= generic_argument_list )? ( '::' id2= identifier (ga2= generic_argument_list )? )? ( '.' id3= identifier (ga3= generic_argument_list )? )* )
    		DebugEnterAlt(1);
    		// cs.g:139:2: id1= identifier (ga1= generic_argument_list )? ( '::' id2= identifier (ga2= generic_argument_list )? )? ( '.' id3= identifier (ga3= generic_argument_list )? )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(139, 6);
    		PushFollow(Follow._identifier_in_namespace_or_type_name554);
    		id1=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, id1.Tree, id1, retval);
    		DebugLocation(139, 25);
    		// cs.g:139:25: (ga1= generic_argument_list )?
    		int alt21=2;
    		try { DebugEnterSubRule(21);
    		try { DebugEnterDecision(21, decisionCanBacktrack[21]);
    		int LA21_0 = input.LA(1);

    		if ((LA21_0==123))
    		{
    			alt21=1;
    		}
    		} finally { DebugExitDecision(21); }
    		switch (alt21)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: ga1= generic_argument_list
    			{
    			DebugLocation(139, 25);
    			PushFollow(Follow._generic_argument_list_in_namespace_or_type_name562);
    			ga1=generic_argument_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, ga1.Tree, ga1, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(21); }

    		DebugLocation(139, 51);
    		// cs.g:139:51: ( '::' id2= identifier (ga2= generic_argument_list )? )?
    		int alt23=2;
    		try { DebugEnterSubRule(23);
    		try { DebugEnterDecision(23, decisionCanBacktrack[23]);
    		int LA23_0 = input.LA(1);

    		if ((LA23_0==89))
    		{
    			alt23=1;
    		}
    		} finally { DebugExitDecision(23); }
    		switch (alt23)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:139:52: '::' id2= identifier (ga2= generic_argument_list )?
    			{
    			DebugLocation(139, 52);
    			string_literal61=(IToken)Match(input,89,Follow._89_in_namespace_or_type_name567); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal61_tree = (object)adaptor.Create(string_literal61, retval);
    			adaptor.AddChild(root_0, string_literal61_tree);
    			}
    			DebugLocation(139, 61);
    			PushFollow(Follow._identifier_in_namespace_or_type_name573);
    			id2=identifier();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, id2.Tree, id2, retval);
    			DebugLocation(139, 80);
    			// cs.g:139:80: (ga2= generic_argument_list )?
    			int alt22=2;
    			try { DebugEnterSubRule(22);
    			try { DebugEnterDecision(22, decisionCanBacktrack[22]);
    			int LA22_0 = input.LA(1);

    			if ((LA22_0==123))
    			{
    				alt22=1;
    			}
    			} finally { DebugExitDecision(22); }
    			switch (alt22)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: ga2= generic_argument_list
    				{
    				DebugLocation(139, 80);
    				PushFollow(Follow._generic_argument_list_in_namespace_or_type_name581);
    				ga2=generic_argument_list();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, ga2.Tree, ga2, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(22); }


    			}
    			break;

    		}
    		} finally { DebugExitSubRule(23); }

    		DebugLocation(139, 107);
    		// cs.g:139:107: ( '.' id3= identifier (ga3= generic_argument_list )? )*
    		try { DebugEnterSubRule(25);
    		while (true)
    		{
    			int alt25=2;
    			try { DebugEnterDecision(25, decisionCanBacktrack[25]);
    			int LA25_0 = input.LA(1);

    			if ((LA25_0==DOT))
    			{
    				int LA25_2 = input.LA(2);

    				if ((LA25_2==IDENTIFIER||LA25_2==SET||LA25_2==95||(LA25_2>=101 && LA25_2<=107)||LA25_2==109||(LA25_2>=175 && LA25_2<=187)||LA25_2==199||(LA25_2>=201 && LA25_2<=202)||LA25_2==208||(LA25_2>=225 && LA25_2<=226)))
    				{
    					alt25=1;
    				}


    			}


    			} finally { DebugExitDecision(25); }
    			switch ( alt25 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:139:108: '.' id3= identifier (ga3= generic_argument_list )?
    				{
    				DebugLocation(139, 108);
    				char_literal62=(IToken)new XToken((IToken)Match(input,DOT,Follow._DOT_in_namespace_or_type_name587), "DOT"); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal62_tree = (object)adaptor.Create(char_literal62, retval);
    				adaptor.AddChild(root_0, char_literal62_tree);
    				}
    				DebugLocation(139, 118);
    				PushFollow(Follow._identifier_in_namespace_or_type_name595);
    				id3=identifier();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, id3.Tree, id3, retval);
    				DebugLocation(139, 137);
    				// cs.g:139:137: (ga3= generic_argument_list )?
    				int alt24=2;
    				try { DebugEnterSubRule(24);
    				try { DebugEnterDecision(24, decisionCanBacktrack[24]);
    				int LA24_0 = input.LA(1);

    				if ((LA24_0==123))
    				{
    					alt24=1;
    				}
    				} finally { DebugExitDecision(24); }
    				switch (alt24)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:0:0: ga3= generic_argument_list
    					{
    					DebugLocation(139, 137);
    					PushFollow(Follow._generic_argument_list_in_namespace_or_type_name603);
    					ga3=generic_argument_list();
    					PopFollow();
    					if (state.failed) return retval;
    					if ( (state.backtracking==0) ) adaptor.AddChild(root_0, ga3.Tree, ga3, retval);

    					}
    					break;

    				}
    				} finally { DebugExitSubRule(24); }


    				}
    				break;

    			default:
    				goto loop25;
    			}
    		}

    		loop25:
    			;

    		} finally { DebugExitSubRule(25); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 21, namespace_or_type_name_StartIndex); }
        }
     	DebugLocation(141, 4);
    	} finally { DebugExitRule(GrammarFileName, "namespace_or_type_name"); }
    	return retval;

    }
    // $ANTLR end "namespace_or_type_name"

    public class global_attributes_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_global_attributes() {}
    protected virtual void Leave_global_attributes() {}

    // $ANTLR start "global_attributes"
    // cs.g:144:1: global_attributes : ( global_attribute )+ ;
    [GrammarRule("global_attributes")]
    public csParser.global_attributes_return global_attributes()
    {

        csParser.global_attributes_return retval = new csParser.global_attributes_return();
        retval.Start = (IToken)input.LT(1);
        int global_attributes_StartIndex = input.Index;
        object root_0 = null;

        csParser.global_attribute_return global_attribute63 = default(csParser.global_attribute_return);


    	try { DebugEnterRule(GrammarFileName, "global_attributes");
    	DebugLocation(144, 19);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }
    		// cs.g:144:18: ( ( global_attribute )+ )
    		DebugEnterAlt(1);
    		// cs.g:145:2: ( global_attribute )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(145, 2);
    		// cs.g:145:2: ( global_attribute )+
    		int cnt26=0;
    		try { DebugEnterSubRule(26);
    		while (true)
    		{
    			int alt26=2;
    			try { DebugEnterDecision(26, decisionCanBacktrack[26]);
    			int LA26_0 = input.LA(1);

    			if ((LA26_0==97))
    			{
    				int LA26_2 = input.LA(2);

    				if (((LA26_2>=101 && LA26_2<=102)))
    				{
    					int LA26_3 = input.LA(3);

    					if ((LA26_3==100))
    					{
    						alt26=1;
    					}


    				}


    			}


    			} finally { DebugExitDecision(26); }
    			switch (alt26)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: global_attribute
    				{
    				DebugLocation(145, 2);
    				PushFollow(Follow._global_attribute_in_global_attributes636);
    				global_attribute63=global_attribute();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, global_attribute63.Tree, global_attribute63, retval);

    				}
    				break;

    			default:
    				if (cnt26 >= 1)
    					goto loop26;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee26 = new EarlyExitException( 26, input );
    				DebugRecognitionException(eee26);
    				throw eee26;
    			}
    			cnt26++;
    		}
    		loop26:
    			;

    		} finally { DebugExitSubRule(26); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 22, global_attributes_StartIndex); }
        }
     	DebugLocation(145, 19);
    	} finally { DebugExitRule(GrammarFileName, "global_attributes"); }
    	return retval;

    }
    // $ANTLR end "global_attributes"

    public class global_attribute_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_global_attribute() {}
    protected virtual void Leave_global_attribute() {}

    // $ANTLR start "global_attribute"
    // cs.g:146:1: global_attribute : '[' global_attribute_target_specifier attribute_list ( ',' )? ']' ;
    [GrammarRule("global_attribute")]
    public csParser.global_attribute_return global_attribute()
    {

        csParser.global_attribute_return retval = new csParser.global_attribute_return();
        retval.Start = (IToken)input.LT(1);
        int global_attribute_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal64=null;
        IToken char_literal67=null;
        IToken char_literal68=null;
        csParser.global_attribute_target_specifier_return global_attribute_target_specifier65 = default(csParser.global_attribute_target_specifier_return);
        csParser.attribute_list_return attribute_list66 = default(csParser.attribute_list_return);

        object char_literal64_tree=null;
        object char_literal67_tree=null;
        object char_literal68_tree=null;

    	try { DebugEnterRule(GrammarFileName, "global_attribute");
    	DebugLocation(146, 71);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }
    		// cs.g:146:17: ( '[' global_attribute_target_specifier attribute_list ( ',' )? ']' )
    		DebugEnterAlt(1);
    		// cs.g:147:2: '[' global_attribute_target_specifier attribute_list ( ',' )? ']'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(147, 2);
    		char_literal64=(IToken)Match(input,97,Follow._97_in_global_attribute646); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal64_tree = (object)adaptor.Create(char_literal64, retval);
    		adaptor.AddChild(root_0, char_literal64_tree);
    		}
    		DebugLocation(147, 8);
    		PushFollow(Follow._global_attribute_target_specifier_in_global_attribute650);
    		global_attribute_target_specifier65=global_attribute_target_specifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, global_attribute_target_specifier65.Tree, global_attribute_target_specifier65, retval);
    		DebugLocation(147, 44);
    		PushFollow(Follow._attribute_list_in_global_attribute654);
    		attribute_list66=attribute_list();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attribute_list66.Tree, attribute_list66, retval);
    		DebugLocation(147, 61);
    		// cs.g:147:61: ( ',' )?
    		int alt27=2;
    		try { DebugEnterSubRule(27);
    		try { DebugEnterDecision(27, decisionCanBacktrack[27]);
    		int LA27_0 = input.LA(1);

    		if ((LA27_0==98))
    		{
    			alt27=1;
    		}
    		} finally { DebugExitDecision(27); }
    		switch (alt27)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: ','
    			{
    			DebugLocation(147, 61);
    			char_literal67=(IToken)Match(input,98,Follow._98_in_global_attribute658); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal67_tree = (object)adaptor.Create(char_literal67, retval);
    			adaptor.AddChild(root_0, char_literal67_tree);
    			}

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(27); }

    		DebugLocation(147, 68);
    		char_literal68=(IToken)Match(input,99,Follow._99_in_global_attribute663); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal68_tree = (object)adaptor.Create(char_literal68, retval);
    		adaptor.AddChild(root_0, char_literal68_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 23, global_attribute_StartIndex); }
        }
     	DebugLocation(147, 71);
    	} finally { DebugExitRule(GrammarFileName, "global_attribute"); }
    	return retval;

    }
    // $ANTLR end "global_attribute"

    public class global_attribute_target_specifier_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_global_attribute_target_specifier() {}
    protected virtual void Leave_global_attribute_target_specifier() {}

    // $ANTLR start "global_attribute_target_specifier"
    // cs.g:148:1: global_attribute_target_specifier : global_attribute_target ':' ;
    [GrammarRule("global_attribute_target_specifier")]
    public csParser.global_attribute_target_specifier_return global_attribute_target_specifier()
    {

        csParser.global_attribute_target_specifier_return retval = new csParser.global_attribute_target_specifier_return();
        retval.Start = (IToken)input.LT(1);
        int global_attribute_target_specifier_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal70=null;
        csParser.global_attribute_target_return global_attribute_target69 = default(csParser.global_attribute_target_return);

        object char_literal70_tree=null;

    	try { DebugEnterRule(GrammarFileName, "global_attribute_target_specifier");
    	DebugLocation(148, 31);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }
    		// cs.g:148:34: ( global_attribute_target ':' )
    		DebugEnterAlt(1);
    		// cs.g:149:2: global_attribute_target ':'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(149, 2);
    		PushFollow(Follow._global_attribute_target_in_global_attribute_target_specifier672);
    		global_attribute_target69=global_attribute_target();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, global_attribute_target69.Tree, global_attribute_target69, retval);
    		DebugLocation(149, 28);
    		char_literal70=(IToken)Match(input,100,Follow._100_in_global_attribute_target_specifier676); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal70_tree = (object)adaptor.Create(char_literal70, retval);
    		adaptor.AddChild(root_0, char_literal70_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 24, global_attribute_target_specifier_StartIndex); }
        }
     	DebugLocation(149, 31);
    	} finally { DebugExitRule(GrammarFileName, "global_attribute_target_specifier"); }
    	return retval;

    }
    // $ANTLR end "global_attribute_target_specifier"

    public class global_attribute_target_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_global_attribute_target() {}
    protected virtual void Leave_global_attribute_target() {}

    // $ANTLR start "global_attribute_target"
    // cs.g:150:1: global_attribute_target : ( 'assembly' | 'module' );
    [GrammarRule("global_attribute_target")]
    public csParser.global_attribute_target_return global_attribute_target()
    {

        csParser.global_attribute_target_return retval = new csParser.global_attribute_target_return();
        retval.Start = (IToken)input.LT(1);
        int global_attribute_target_StartIndex = input.Index;
        object root_0 = null;

        IToken set71=null;

        object set71_tree=null;

    	try { DebugEnterRule(GrammarFileName, "global_attribute_target");
    	DebugLocation(150, 23);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }
    		// cs.g:150:24: ( 'assembly' | 'module' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(150, 24);
    		set71=(IToken)input.LT(1);
    		if ((input.LA(1)>=101 && input.LA(1)<=102))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set71, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 25, global_attribute_target_StartIndex); }
        }
     	DebugLocation(151, 23);
    	} finally { DebugExitRule(GrammarFileName, "global_attribute_target"); }
    	return retval;

    }
    // $ANTLR end "global_attribute_target"

    public class attributes_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_attributes() {}
    protected virtual void Leave_attributes() {}

    // $ANTLR start "attributes"
    // cs.g:152:1: attributes : attribute_sections ;
    [GrammarRule("attributes")]
    public csParser.attributes_return attributes()
    {

        csParser.attributes_return retval = new csParser.attributes_return();
        retval.Start = (IToken)input.LT(1);
        int attributes_StartIndex = input.Index;
        object root_0 = null;

        csParser.attribute_sections_return attribute_sections72 = default(csParser.attribute_sections_return);


    	try { DebugEnterRule(GrammarFileName, "attributes");
    	DebugLocation(152, 20);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }
    		// cs.g:152:11: ( attribute_sections )
    		DebugEnterAlt(1);
    		// cs.g:153:2: attribute_sections
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(153, 2);
    		PushFollow(Follow._attribute_sections_in_attributes698);
    		attribute_sections72=attribute_sections();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attribute_sections72.Tree, attribute_sections72, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 26, attributes_StartIndex); }
        }
     	DebugLocation(153, 20);
    	} finally { DebugExitRule(GrammarFileName, "attributes"); }
    	return retval;

    }
    // $ANTLR end "attributes"

    public class attribute_sections_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_attribute_sections() {}
    protected virtual void Leave_attribute_sections() {}

    // $ANTLR start "attribute_sections"
    // cs.g:154:1: attribute_sections : ( attribute_section )+ ;
    [GrammarRule("attribute_sections")]
    public csParser.attribute_sections_return attribute_sections()
    {

        csParser.attribute_sections_return retval = new csParser.attribute_sections_return();
        retval.Start = (IToken)input.LT(1);
        int attribute_sections_StartIndex = input.Index;
        object root_0 = null;

        csParser.attribute_section_return attribute_section73 = default(csParser.attribute_section_return);


    	try { DebugEnterRule(GrammarFileName, "attribute_sections");
    	DebugLocation(154, 20);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }
    		// cs.g:154:19: ( ( attribute_section )+ )
    		DebugEnterAlt(1);
    		// cs.g:155:2: ( attribute_section )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(155, 2);
    		// cs.g:155:2: ( attribute_section )+
    		int cnt28=0;
    		try { DebugEnterSubRule(28);
    		while (true)
    		{
    			int alt28=2;
    			try { DebugEnterDecision(28, decisionCanBacktrack[28]);
    			int LA28_0 = input.LA(1);

    			if ((LA28_0==97))
    			{
    				alt28=1;
    			}


    			} finally { DebugExitDecision(28); }
    			switch (alt28)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: attribute_section
    				{
    				DebugLocation(155, 2);
    				PushFollow(Follow._attribute_section_in_attribute_sections707);
    				attribute_section73=attribute_section();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attribute_section73.Tree, attribute_section73, retval);

    				}
    				break;

    			default:
    				if (cnt28 >= 1)
    					goto loop28;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee28 = new EarlyExitException( 28, input );
    				DebugRecognitionException(eee28);
    				throw eee28;
    			}
    			cnt28++;
    		}
    		loop28:
    			;

    		} finally { DebugExitSubRule(28); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 27, attribute_sections_StartIndex); }
        }
     	DebugLocation(155, 20);
    	} finally { DebugExitRule(GrammarFileName, "attribute_sections"); }
    	return retval;

    }
    // $ANTLR end "attribute_sections"

    public class attribute_section_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_attribute_section() {}
    protected virtual void Leave_attribute_section() {}

    // $ANTLR start "attribute_section"
    // cs.g:156:1: attribute_section : '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']' ;
    [GrammarRule("attribute_section")]
    public csParser.attribute_section_return attribute_section()
    {

        csParser.attribute_section_return retval = new csParser.attribute_section_return();
        retval.Start = (IToken)input.LT(1);
        int attribute_section_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal74=null;
        IToken char_literal77=null;
        IToken char_literal78=null;
        csParser.attribute_target_specifier_return attribute_target_specifier75 = default(csParser.attribute_target_specifier_return);
        csParser.attribute_list_return attribute_list76 = default(csParser.attribute_list_return);

        object char_literal74_tree=null;
        object char_literal77_tree=null;
        object char_literal78_tree=null;

    	try { DebugEnterRule(GrammarFileName, "attribute_section");
    	DebugLocation(156, 65);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }
    		// cs.g:156:18: ( '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']' )
    		DebugEnterAlt(1);
    		// cs.g:157:2: '[' ( attribute_target_specifier )? attribute_list ( ',' )? ']'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(157, 2);
    		char_literal74=(IToken)Match(input,97,Follow._97_in_attribute_section717); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal74_tree = (object)adaptor.Create(char_literal74, retval);
    		adaptor.AddChild(root_0, char_literal74_tree);
    		}
    		DebugLocation(157, 8);
    		// cs.g:157:8: ( attribute_target_specifier )?
    		int alt29=2;
    		try { DebugEnterSubRule(29);
    		try { DebugEnterDecision(29, decisionCanBacktrack[29]);
    		int LA29_0 = input.LA(1);

    		if (((LA29_0>=103 && LA29_0<=107)||LA29_0==109))
    		{
    			int LA29_1 = input.LA(2);

    			if ((LA29_1==100))
    			{
    				alt29=1;
    			}
    		}
    		else if ((LA29_0==108))
    		{
    			alt29=1;
    		}
    		} finally { DebugExitDecision(29); }
    		switch (alt29)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attribute_target_specifier
    			{
    			DebugLocation(157, 8);
    			PushFollow(Follow._attribute_target_specifier_in_attribute_section721);
    			attribute_target_specifier75=attribute_target_specifier();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attribute_target_specifier75.Tree, attribute_target_specifier75, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(29); }

    		DebugLocation(157, 38);
    		PushFollow(Follow._attribute_list_in_attribute_section726);
    		attribute_list76=attribute_list();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attribute_list76.Tree, attribute_list76, retval);
    		DebugLocation(157, 55);
    		// cs.g:157:55: ( ',' )?
    		int alt30=2;
    		try { DebugEnterSubRule(30);
    		try { DebugEnterDecision(30, decisionCanBacktrack[30]);
    		int LA30_0 = input.LA(1);

    		if ((LA30_0==98))
    		{
    			alt30=1;
    		}
    		} finally { DebugExitDecision(30); }
    		switch (alt30)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: ','
    			{
    			DebugLocation(157, 55);
    			char_literal77=(IToken)Match(input,98,Follow._98_in_attribute_section730); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal77_tree = (object)adaptor.Create(char_literal77, retval);
    			adaptor.AddChild(root_0, char_literal77_tree);
    			}

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(30); }

    		DebugLocation(157, 62);
    		char_literal78=(IToken)Match(input,99,Follow._99_in_attribute_section735); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal78_tree = (object)adaptor.Create(char_literal78, retval);
    		adaptor.AddChild(root_0, char_literal78_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 28, attribute_section_StartIndex); }
        }
     	DebugLocation(157, 65);
    	} finally { DebugExitRule(GrammarFileName, "attribute_section"); }
    	return retval;

    }
    // $ANTLR end "attribute_section"

    public class attribute_target_specifier_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_attribute_target_specifier() {}
    protected virtual void Leave_attribute_target_specifier() {}

    // $ANTLR start "attribute_target_specifier"
    // cs.g:158:1: attribute_target_specifier : attribute_target ':' ;
    [GrammarRule("attribute_target_specifier")]
    public csParser.attribute_target_specifier_return attribute_target_specifier()
    {

        csParser.attribute_target_specifier_return retval = new csParser.attribute_target_specifier_return();
        retval.Start = (IToken)input.LT(1);
        int attribute_target_specifier_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal80=null;
        csParser.attribute_target_return attribute_target79 = default(csParser.attribute_target_return);

        object char_literal80_tree=null;

    	try { DebugEnterRule(GrammarFileName, "attribute_target_specifier");
    	DebugLocation(158, 24);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }
    		// cs.g:158:27: ( attribute_target ':' )
    		DebugEnterAlt(1);
    		// cs.g:159:2: attribute_target ':'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(159, 2);
    		PushFollow(Follow._attribute_target_in_attribute_target_specifier744);
    		attribute_target79=attribute_target();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attribute_target79.Tree, attribute_target79, retval);
    		DebugLocation(159, 21);
    		char_literal80=(IToken)Match(input,100,Follow._100_in_attribute_target_specifier748); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal80_tree = (object)adaptor.Create(char_literal80, retval);
    		adaptor.AddChild(root_0, char_literal80_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 29, attribute_target_specifier_StartIndex); }
        }
     	DebugLocation(159, 24);
    	} finally { DebugExitRule(GrammarFileName, "attribute_target_specifier"); }
    	return retval;

    }
    // $ANTLR end "attribute_target_specifier"

    public class attribute_target_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_attribute_target() {}
    protected virtual void Leave_attribute_target() {}

    // $ANTLR start "attribute_target"
    // cs.g:160:1: attribute_target : ( 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' );
    [GrammarRule("attribute_target")]
    public csParser.attribute_target_return attribute_target()
    {

        csParser.attribute_target_return retval = new csParser.attribute_target_return();
        retval.Start = (IToken)input.LT(1);
        int attribute_target_StartIndex = input.Index;
        object root_0 = null;

        IToken set81=null;

        object set81_tree=null;

    	try { DebugEnterRule(GrammarFileName, "attribute_target");
    	DebugLocation(160, 73);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }
    		// cs.g:160:17: ( 'field' | 'event' | 'method' | 'param' | 'property' | 'return' | 'type' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(160, 17);
    		set81=(IToken)input.LT(1);
    		if ((input.LA(1)>=103 && input.LA(1)<=109))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set81, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 30, attribute_target_StartIndex); }
        }
     	DebugLocation(161, 73);
    	} finally { DebugExitRule(GrammarFileName, "attribute_target"); }
    	return retval;

    }
    // $ANTLR end "attribute_target"

    public class attribute_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_attribute_list() {}
    protected virtual void Leave_attribute_list() {}

    // $ANTLR start "attribute_list"
    // cs.g:162:1: attribute_list : a+= attribute ( ',' a+= attribute )* ;
    [GrammarRule("attribute_list")]
    public csParser.attribute_list_return attribute_list()
    {

        csParser.attribute_list_return retval = new csParser.attribute_list_return();
        retval.Start = (IToken)input.LT(1);
        int attribute_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal82=null;
        List list_a=null;
        csParser.attribute_return a = default(csParser.attribute_return);
        object char_literal82_tree=null;

    	try { DebugEnterRule(GrammarFileName, "attribute_list");
    	DebugLocation(162, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }
    		// cs.g:162:15: (a+= attribute ( ',' a+= attribute )* )
    		DebugEnterAlt(1);
    		// cs.g:163:2: a+= attribute ( ',' a+= attribute )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(163, 4);
    		PushFollow(Follow._attribute_in_attribute_list794);
    		a=attribute();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, a.Tree, a, retval);
    		if (list_a==null) list_a=new ArrayList();
    		list_a.Add(a.Tree);

    		DebugLocation(163, 17);
    		// cs.g:163:17: ( ',' a+= attribute )*
    		try { DebugEnterSubRule(31);
    		while (true)
    		{
    			int alt31=2;
    			try { DebugEnterDecision(31, decisionCanBacktrack[31]);
    			int LA31_0 = input.LA(1);

    			if ((LA31_0==98))
    			{
    				int LA31_1 = input.LA(2);

    				if ((LA31_1==IDENTIFIER||LA31_1==SET||LA31_1==95||(LA31_1>=101 && LA31_1<=107)||LA31_1==109||(LA31_1>=175 && LA31_1<=187)||LA31_1==199||(LA31_1>=201 && LA31_1<=202)||LA31_1==208||(LA31_1>=225 && LA31_1<=226)))
    				{
    					alt31=1;
    				}


    			}


    			} finally { DebugExitDecision(31); }
    			switch ( alt31 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:163:18: ',' a+= attribute
    				{
    				DebugLocation(163, 18);
    				char_literal82=(IToken)Match(input,98,Follow._98_in_attribute_list797); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal82_tree = (object)adaptor.Create(char_literal82, retval);
    				adaptor.AddChild(root_0, char_literal82_tree);
    				}
    				DebugLocation(163, 24);
    				PushFollow(Follow._attribute_in_attribute_list803);
    				a=attribute();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, a.Tree, a, retval);
    				if (list_a==null) list_a=new ArrayList();
    				list_a.Add(a.Tree);


    				}
    				break;

    			default:
    				goto loop31;
    			}
    		}

    		loop31:
    			;

    		} finally { DebugExitSubRule(31); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 31, attribute_list_StartIndex); }
        }
     	DebugLocation(164, 1);
    	} finally { DebugExitRule(GrammarFileName, "attribute_list"); }
    	return retval;

    }
    // $ANTLR end "attribute_list"

    public class attribute_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_attribute() {}
    protected virtual void Leave_attribute() {}

    // $ANTLR start "attribute"
    // cs.g:165:1: attribute : type_name ( attribute_arguments )? ;
    [GrammarRule("attribute")]
    public csParser.attribute_return attribute()
    {

        csParser.attribute_return retval = new csParser.attribute_return();
        retval.Start = (IToken)input.LT(1);
        int attribute_StartIndex = input.Index;
        object root_0 = null;

        csParser.type_name_return type_name83 = default(csParser.type_name_return);
        csParser.attribute_arguments_return attribute_arguments84 = default(csParser.attribute_arguments_return);


    	try { DebugEnterRule(GrammarFileName, "attribute");
    	DebugLocation(165, 34);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }
    		// cs.g:165:10: ( type_name ( attribute_arguments )? )
    		DebugEnterAlt(1);
    		// cs.g:166:2: type_name ( attribute_arguments )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(166, 2);
    		PushFollow(Follow._type_name_in_attribute817);
    		type_name83=type_name();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_name83.Tree, type_name83, retval);
    		DebugLocation(166, 14);
    		// cs.g:166:14: ( attribute_arguments )?
    		int alt32=2;
    		try { DebugEnterSubRule(32);
    		try { DebugEnterDecision(32, decisionCanBacktrack[32]);
    		int LA32_0 = input.LA(1);

    		if ((LA32_0==110))
    		{
    			alt32=1;
    		}
    		} finally { DebugExitDecision(32); }
    		switch (alt32)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attribute_arguments
    			{
    			DebugLocation(166, 14);
    			PushFollow(Follow._attribute_arguments_in_attribute821);
    			attribute_arguments84=attribute_arguments();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attribute_arguments84.Tree, attribute_arguments84, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(32); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 32, attribute_StartIndex); }
        }
     	DebugLocation(166, 34);
    	} finally { DebugExitRule(GrammarFileName, "attribute"); }
    	return retval;

    }
    // $ANTLR end "attribute"

    public class attribute_arguments_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_attribute_arguments() {}
    protected virtual void Leave_attribute_arguments() {}

    // $ANTLR start "attribute_arguments"
    // cs.g:167:1: attribute_arguments : ( '(' ( positional_argument_list )? ')' | '(' positional_argument_list ',' named_argument_list ')' | '(' named_argument_list ')' );
    [GrammarRule("attribute_arguments")]
    public csParser.attribute_arguments_return attribute_arguments()
    {

        csParser.attribute_arguments_return retval = new csParser.attribute_arguments_return();
        retval.Start = (IToken)input.LT(1);
        int attribute_arguments_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal85=null;
        IToken char_literal87=null;
        IToken char_literal88=null;
        IToken char_literal90=null;
        IToken char_literal92=null;
        IToken char_literal93=null;
        IToken char_literal95=null;
        csParser.positional_argument_list_return positional_argument_list86 = default(csParser.positional_argument_list_return);
        csParser.positional_argument_list_return positional_argument_list89 = default(csParser.positional_argument_list_return);
        csParser.named_argument_list_return named_argument_list91 = default(csParser.named_argument_list_return);
        csParser.named_argument_list_return named_argument_list94 = default(csParser.named_argument_list_return);

        object char_literal85_tree=null;
        object char_literal87_tree=null;
        object char_literal88_tree=null;
        object char_literal90_tree=null;
        object char_literal92_tree=null;
        object char_literal93_tree=null;
        object char_literal95_tree=null;

    	try { DebugEnterRule(GrammarFileName, "attribute_arguments");
    	DebugLocation(167, 35);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }
    		// cs.g:167:20: ( '(' ( positional_argument_list )? ')' | '(' positional_argument_list ',' named_argument_list ')' | '(' named_argument_list ')' )
    		int alt34=3;
    		try { DebugEnterDecision(34, decisionCanBacktrack[34]);
    		int LA34_0 = input.LA(1);

    		if ((LA34_0==110))
    		{
    			int LA34_1 = input.LA(2);

    			if ((EvaluatePredicate(synpred47_cs_fragment)))
    			{
    				alt34=1;
    			}
    			else if ((EvaluatePredicate(synpred48_cs_fragment)))
    			{
    				alt34=2;
    			}
    			else if ((true))
    			{
    				alt34=3;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 34, 1, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 34, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(34); }
    		switch (alt34)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:168:2: '(' ( positional_argument_list )? ')'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(168, 2);
    			char_literal85=(IToken)Match(input,110,Follow._110_in_attribute_arguments831); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal85_tree = (object)adaptor.Create(char_literal85, retval);
    			adaptor.AddChild(root_0, char_literal85_tree);
    			}
    			DebugLocation(168, 8);
    			// cs.g:168:8: ( positional_argument_list )?
    			int alt33=2;
    			try { DebugEnterSubRule(33);
    			try { DebugEnterDecision(33, decisionCanBacktrack[33]);
    			int LA33_0 = input.LA(1);

    			if (((LA33_0>=IDENTIFIER && LA33_0<=NULL)||LA33_0==MINUS||LA33_0==SET||(LA33_0>=90 && LA33_0<=91)||LA33_0==95||(LA33_0>=101 && LA33_0<=107)||(LA33_0>=109 && LA33_0<=111)||(LA33_0>=114 && LA33_0<=122)||(LA33_0>=124 && LA33_0<=129)||(LA33_0>=132 && LA33_0<=144)||(LA33_0>=175 && LA33_0<=187)||LA33_0==199||(LA33_0>=201 && LA33_0<=202)||LA33_0==208||(LA33_0>=225 && LA33_0<=226)))
    			{
    				alt33=1;
    			}
    			} finally { DebugExitDecision(33); }
    			switch (alt33)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: positional_argument_list
    				{
    				DebugLocation(168, 8);
    				PushFollow(Follow._positional_argument_list_in_attribute_arguments835);
    				positional_argument_list86=positional_argument_list();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, positional_argument_list86.Tree, positional_argument_list86, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(33); }

    			DebugLocation(168, 35);
    			char_literal87=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_attribute_arguments839), "RPAREN"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal87_tree = (object)adaptor.Create(char_literal87, retval);
    			adaptor.AddChild(root_0, char_literal87_tree);
    			}

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:169:4: '(' positional_argument_list ',' named_argument_list ')'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(169, 4);
    			char_literal88=(IToken)Match(input,110,Follow._110_in_attribute_arguments845); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal88_tree = (object)adaptor.Create(char_literal88, retval);
    			adaptor.AddChild(root_0, char_literal88_tree);
    			}
    			DebugLocation(169, 10);
    			PushFollow(Follow._positional_argument_list_in_attribute_arguments849);
    			positional_argument_list89=positional_argument_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, positional_argument_list89.Tree, positional_argument_list89, retval);
    			DebugLocation(169, 37);
    			char_literal90=(IToken)Match(input,98,Follow._98_in_attribute_arguments853); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal90_tree = (object)adaptor.Create(char_literal90, retval);
    			adaptor.AddChild(root_0, char_literal90_tree);
    			}
    			DebugLocation(169, 43);
    			PushFollow(Follow._named_argument_list_in_attribute_arguments857);
    			named_argument_list91=named_argument_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, named_argument_list91.Tree, named_argument_list91, retval);
    			DebugLocation(169, 65);
    			char_literal92=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_attribute_arguments861), "RPAREN"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal92_tree = (object)adaptor.Create(char_literal92, retval);
    			adaptor.AddChild(root_0, char_literal92_tree);
    			}

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:170:4: '(' named_argument_list ')'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(170, 4);
    			char_literal93=(IToken)Match(input,110,Follow._110_in_attribute_arguments867); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal93_tree = (object)adaptor.Create(char_literal93, retval);
    			adaptor.AddChild(root_0, char_literal93_tree);
    			}
    			DebugLocation(170, 10);
    			PushFollow(Follow._named_argument_list_in_attribute_arguments871);
    			named_argument_list94=named_argument_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, named_argument_list94.Tree, named_argument_list94, retval);
    			DebugLocation(170, 32);
    			char_literal95=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_attribute_arguments875), "RPAREN"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal95_tree = (object)adaptor.Create(char_literal95, retval);
    			adaptor.AddChild(root_0, char_literal95_tree);
    			}

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 33, attribute_arguments_StartIndex); }
        }
     	DebugLocation(170, 35);
    	} finally { DebugExitRule(GrammarFileName, "attribute_arguments"); }
    	return retval;

    }
    // $ANTLR end "attribute_arguments"

    public class positional_argument_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_positional_argument_list() {}
    protected virtual void Leave_positional_argument_list() {}

    // $ANTLR start "positional_argument_list"
    // cs.g:171:1: positional_argument_list : pa+= positional_argument ( ',' pa+= positional_argument )* ;
    [GrammarRule("positional_argument_list")]
    public csParser.positional_argument_list_return positional_argument_list()
    {

        csParser.positional_argument_list_return retval = new csParser.positional_argument_list_return();
        retval.Start = (IToken)input.LT(1);
        int positional_argument_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal96=null;
        List list_pa=null;
        csParser.positional_argument_return pa = default(csParser.positional_argument_return);
        object char_literal96_tree=null;

    	try { DebugEnterRule(GrammarFileName, "positional_argument_list");
    	DebugLocation(171, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }
    		// cs.g:171:25: (pa+= positional_argument ( ',' pa+= positional_argument )* )
    		DebugEnterAlt(1);
    		// cs.g:172:2: pa+= positional_argument ( ',' pa+= positional_argument )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(172, 5);
    		PushFollow(Follow._positional_argument_in_positional_argument_list888);
    		pa=positional_argument();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, pa.Tree, pa, retval);
    		if (list_pa==null) list_pa=new ArrayList();
    		list_pa.Add(pa.Tree);

    		DebugLocation(172, 28);
    		// cs.g:172:28: ( ',' pa+= positional_argument )*
    		try { DebugEnterSubRule(35);
    		while (true)
    		{
    			int alt35=2;
    			try { DebugEnterDecision(35, decisionCanBacktrack[35]);
    			int LA35_0 = input.LA(1);

    			if ((LA35_0==98))
    			{
    				int LA35_2 = input.LA(2);

    				if ((EvaluatePredicate(synpred49_cs_fragment)))
    				{
    					alt35=1;
    				}


    			}


    			} finally { DebugExitDecision(35); }
    			switch ( alt35 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:172:29: ',' pa+= positional_argument
    				{
    				DebugLocation(172, 29);
    				char_literal96=(IToken)Match(input,98,Follow._98_in_positional_argument_list891); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal96_tree = (object)adaptor.Create(char_literal96, retval);
    				adaptor.AddChild(root_0, char_literal96_tree);
    				}
    				DebugLocation(172, 36);
    				PushFollow(Follow._positional_argument_in_positional_argument_list897);
    				pa=positional_argument();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, pa.Tree, pa, retval);
    				if (list_pa==null) list_pa=new ArrayList();
    				list_pa.Add(pa.Tree);


    				}
    				break;

    			default:
    				goto loop35;
    			}
    		}

    		loop35:
    			;

    		} finally { DebugExitSubRule(35); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 34, positional_argument_list_StartIndex); }
        }
     	DebugLocation(173, 1);
    	} finally { DebugExitRule(GrammarFileName, "positional_argument_list"); }
    	return retval;

    }
    // $ANTLR end "positional_argument_list"

    public class positional_argument_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_positional_argument() {}
    protected virtual void Leave_positional_argument() {}

    // $ANTLR start "positional_argument"
    // cs.g:174:1: positional_argument : attribute_argument_expression ;
    [GrammarRule("positional_argument")]
    public csParser.positional_argument_return positional_argument()
    {

        csParser.positional_argument_return retval = new csParser.positional_argument_return();
        retval.Start = (IToken)input.LT(1);
        int positional_argument_StartIndex = input.Index;
        object root_0 = null;

        csParser.attribute_argument_expression_return attribute_argument_expression97 = default(csParser.attribute_argument_expression_return);


    	try { DebugEnterRule(GrammarFileName, "positional_argument");
    	DebugLocation(174, 31);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }
    		// cs.g:174:20: ( attribute_argument_expression )
    		DebugEnterAlt(1);
    		// cs.g:175:2: attribute_argument_expression
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(175, 2);
    		PushFollow(Follow._attribute_argument_expression_in_positional_argument910);
    		attribute_argument_expression97=attribute_argument_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attribute_argument_expression97.Tree, attribute_argument_expression97, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 35, positional_argument_StartIndex); }
        }
     	DebugLocation(175, 31);
    	} finally { DebugExitRule(GrammarFileName, "positional_argument"); }
    	return retval;

    }
    // $ANTLR end "positional_argument"

    public class named_argument_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_named_argument_list() {}
    protected virtual void Leave_named_argument_list() {}

    // $ANTLR start "named_argument_list"
    // cs.g:176:1: named_argument_list : na+= named_argument ( ',' na+= named_argument )* ;
    [GrammarRule("named_argument_list")]
    public csParser.named_argument_list_return named_argument_list()
    {

        csParser.named_argument_list_return retval = new csParser.named_argument_list_return();
        retval.Start = (IToken)input.LT(1);
        int named_argument_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal98=null;
        List list_na=null;
        csParser.named_argument_return na = default(csParser.named_argument_return);
        object char_literal98_tree=null;

    	try { DebugEnterRule(GrammarFileName, "named_argument_list");
    	DebugLocation(176, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }
    		// cs.g:176:20: (na+= named_argument ( ',' na+= named_argument )* )
    		DebugEnterAlt(1);
    		// cs.g:177:2: na+= named_argument ( ',' na+= named_argument )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(177, 5);
    		PushFollow(Follow._named_argument_in_named_argument_list923);
    		na=named_argument();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, na.Tree, na, retval);
    		if (list_na==null) list_na=new ArrayList();
    		list_na.Add(na.Tree);

    		DebugLocation(177, 23);
    		// cs.g:177:23: ( ',' na+= named_argument )*
    		try { DebugEnterSubRule(36);
    		while (true)
    		{
    			int alt36=2;
    			try { DebugEnterDecision(36, decisionCanBacktrack[36]);
    			int LA36_0 = input.LA(1);

    			if ((LA36_0==98))
    			{
    				alt36=1;
    			}


    			} finally { DebugExitDecision(36); }
    			switch ( alt36 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:177:24: ',' na+= named_argument
    				{
    				DebugLocation(177, 24);
    				char_literal98=(IToken)Match(input,98,Follow._98_in_named_argument_list926); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal98_tree = (object)adaptor.Create(char_literal98, retval);
    				adaptor.AddChild(root_0, char_literal98_tree);
    				}
    				DebugLocation(177, 31);
    				PushFollow(Follow._named_argument_in_named_argument_list932);
    				na=named_argument();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, na.Tree, na, retval);
    				if (list_na==null) list_na=new ArrayList();
    				list_na.Add(na.Tree);


    				}
    				break;

    			default:
    				goto loop36;
    			}
    		}

    		loop36:
    			;

    		} finally { DebugExitSubRule(36); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 36, named_argument_list_StartIndex); }
        }
     	DebugLocation(178, 1);
    	} finally { DebugExitRule(GrammarFileName, "named_argument_list"); }
    	return retval;

    }
    // $ANTLR end "named_argument_list"

    public class named_argument_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_named_argument() {}
    protected virtual void Leave_named_argument() {}

    // $ANTLR start "named_argument"
    // cs.g:179:1: named_argument : identifier '=' attribute_argument_expression ;
    [GrammarRule("named_argument")]
    public csParser.named_argument_return named_argument()
    {

        csParser.named_argument_return retval = new csParser.named_argument_return();
        retval.Start = (IToken)input.LT(1);
        int named_argument_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal100=null;
        csParser.identifier_return identifier99 = default(csParser.identifier_return);
        csParser.attribute_argument_expression_return attribute_argument_expression101 = default(csParser.attribute_argument_expression_return);

        object char_literal100_tree=null;

    	try { DebugEnterRule(GrammarFileName, "named_argument");
    	DebugLocation(179, 50);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }
    		// cs.g:179:15: ( identifier '=' attribute_argument_expression )
    		DebugEnterAlt(1);
    		// cs.g:180:2: identifier '=' attribute_argument_expression
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(180, 2);
    		PushFollow(Follow._identifier_in_named_argument945);
    		identifier99=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier99.Tree, identifier99, retval);
    		DebugLocation(180, 15);
    		char_literal100=(IToken)Match(input,96,Follow._96_in_named_argument949); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal100_tree = (object)adaptor.Create(char_literal100, retval);
    		adaptor.AddChild(root_0, char_literal100_tree);
    		}
    		DebugLocation(180, 21);
    		PushFollow(Follow._attribute_argument_expression_in_named_argument953);
    		attribute_argument_expression101=attribute_argument_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attribute_argument_expression101.Tree, attribute_argument_expression101, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 37, named_argument_StartIndex); }
        }
     	DebugLocation(180, 50);
    	} finally { DebugExitRule(GrammarFileName, "named_argument"); }
    	return retval;

    }
    // $ANTLR end "named_argument"

    public class attribute_argument_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_attribute_argument_expression() {}
    protected virtual void Leave_attribute_argument_expression() {}

    // $ANTLR start "attribute_argument_expression"
    // cs.g:181:1: attribute_argument_expression : expression ;
    [GrammarRule("attribute_argument_expression")]
    public csParser.attribute_argument_expression_return attribute_argument_expression()
    {

        csParser.attribute_argument_expression_return retval = new csParser.attribute_argument_expression_return();
        retval.Start = (IToken)input.LT(1);
        int attribute_argument_expression_StartIndex = input.Index;
        object root_0 = null;

        csParser.expression_return expression102 = default(csParser.expression_return);


    	try { DebugEnterRule(GrammarFileName, "attribute_argument_expression");
    	DebugLocation(181, 12);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }
    		// cs.g:181:30: ( expression )
    		DebugEnterAlt(1);
    		// cs.g:182:2: expression
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(182, 2);
    		PushFollow(Follow._expression_in_attribute_argument_expression962);
    		expression102=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression102.Tree, expression102, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 38, attribute_argument_expression_StartIndex); }
        }
     	DebugLocation(182, 12);
    	} finally { DebugExitRule(GrammarFileName, "attribute_argument_expression"); }
    	return retval;

    }
    // $ANTLR end "attribute_argument_expression"

    public class type_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_type() {}
    protected virtual void Leave_type() {}

    // $ANTLR start "type"
    // cs.g:187:1: type : ( ( type_name | predefined_type ) rank_specifiers ( '*' )* | type_name ( '*' )+ | type_name '?' | type_name | predefined_type ( '*' )+ | predefined_type '?' | predefined_type | 'void' ( '*' )+ );
    [GrammarRule("type")]
    public csParser.type_return type()
    {

        csParser.type_return retval = new csParser.type_return();
        retval.Start = (IToken)input.LT(1);
        int type_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal106=null;
        IToken char_literal108=null;
        IToken char_literal110=null;
        IToken char_literal113=null;
        IToken char_literal115=null;
        IToken string_literal117=null;
        IToken char_literal118=null;
        csParser.type_name_return type_name103 = default(csParser.type_name_return);
        csParser.predefined_type_return predefined_type104 = default(csParser.predefined_type_return);
        csParser.rank_specifiers_return rank_specifiers105 = default(csParser.rank_specifiers_return);
        csParser.type_name_return type_name107 = default(csParser.type_name_return);
        csParser.type_name_return type_name109 = default(csParser.type_name_return);
        csParser.type_name_return type_name111 = default(csParser.type_name_return);
        csParser.predefined_type_return predefined_type112 = default(csParser.predefined_type_return);
        csParser.predefined_type_return predefined_type114 = default(csParser.predefined_type_return);
        csParser.predefined_type_return predefined_type116 = default(csParser.predefined_type_return);

        object char_literal106_tree=null;
        object char_literal108_tree=null;
        object char_literal110_tree=null;
        object char_literal113_tree=null;
        object char_literal115_tree=null;
        object string_literal117_tree=null;
        object char_literal118_tree=null;

    	try { DebugEnterRule(GrammarFileName, "type");
    	DebugLocation(187, 17);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }
    		// cs.g:187:5: ( ( type_name | predefined_type ) rank_specifiers ( '*' )* | type_name ( '*' )+ | type_name '?' | type_name | predefined_type ( '*' )+ | predefined_type '?' | predefined_type | 'void' ( '*' )+ )
    		int alt42=8;
    		try { DebugEnterDecision(42, decisionCanBacktrack[42]);
    		try
    		{
    			alt42 = dfa42.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(42); }
    		switch (alt42)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:188:2: ( type_name | predefined_type ) rank_specifiers ( '*' )*
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(188, 2);
    			// cs.g:188:2: ( type_name | predefined_type )
    			int alt37=2;
    			try { DebugEnterSubRule(37);
    			try { DebugEnterDecision(37, decisionCanBacktrack[37]);
    			int LA37_0 = input.LA(1);

    			if ((LA37_0==IDENTIFIER||LA37_0==SET||LA37_0==95||(LA37_0>=101 && LA37_0<=107)||LA37_0==109||(LA37_0>=175 && LA37_0<=187)||LA37_0==199||(LA37_0>=201 && LA37_0<=202)||LA37_0==208||(LA37_0>=225 && LA37_0<=226)))
    			{
    				alt37=1;
    			}
    			else if (((LA37_0>=114 && LA37_0<=122)||(LA37_0>=132 && LA37_0<=137)))
    			{
    				alt37=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 37, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			} finally { DebugExitDecision(37); }
    			switch (alt37)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:188:3: type_name
    				{
    				DebugLocation(188, 3);
    				PushFollow(Follow._type_name_in_type976);
    				type_name103=type_name();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_name103.Tree, type_name103, retval);

    				}
    				break;
    			case 2:
    				DebugEnterAlt(2);
    				// cs.g:188:19: predefined_type
    				{
    				DebugLocation(188, 19);
    				PushFollow(Follow._predefined_type_in_type984);
    				predefined_type104=predefined_type();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, predefined_type104.Tree, predefined_type104, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(37); }

    			DebugLocation(188, 38);
    			PushFollow(Follow._rank_specifiers_in_type989);
    			rank_specifiers105=rank_specifiers();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, rank_specifiers105.Tree, rank_specifiers105, retval);
    			DebugLocation(188, 56);
    			// cs.g:188:56: ( '*' )*
    			try { DebugEnterSubRule(38);
    			while (true)
    			{
    				int alt38=2;
    				try { DebugEnterDecision(38, decisionCanBacktrack[38]);
    				int LA38_0 = input.LA(1);

    				if ((LA38_0==111))
    				{
    					alt38=1;
    				}


    				} finally { DebugExitDecision(38); }
    				switch ( alt38 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:0:0: '*'
    					{
    					DebugLocation(188, 56);
    					char_literal106=(IToken)Match(input,111,Follow._111_in_type993); if (state.failed) return retval;
    					if ( state.backtracking==0 ) {
    					char_literal106_tree = (object)adaptor.Create(char_literal106, retval);
    					adaptor.AddChild(root_0, char_literal106_tree);
    					}

    					}
    					break;

    				default:
    					goto loop38;
    				}
    			}

    			loop38:
    				;

    			} finally { DebugExitSubRule(38); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:189:4: type_name ( '*' )+
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(189, 4);
    			PushFollow(Follow._type_name_in_type999);
    			type_name107=type_name();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_name107.Tree, type_name107, retval);
    			DebugLocation(189, 14);
    			// cs.g:189:14: ( '*' )+
    			int cnt39=0;
    			try { DebugEnterSubRule(39);
    			while (true)
    			{
    				int alt39=2;
    				try { DebugEnterDecision(39, decisionCanBacktrack[39]);
    				int LA39_0 = input.LA(1);

    				if ((LA39_0==111))
    				{
    					alt39=1;
    				}


    				} finally { DebugExitDecision(39); }
    				switch (alt39)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:0:0: '*'
    					{
    					DebugLocation(189, 14);
    					char_literal108=(IToken)Match(input,111,Follow._111_in_type1001); if (state.failed) return retval;
    					if ( state.backtracking==0 ) {
    					char_literal108_tree = (object)adaptor.Create(char_literal108, retval);
    					adaptor.AddChild(root_0, char_literal108_tree);
    					}

    					}
    					break;

    				default:
    					if (cnt39 >= 1)
    						goto loop39;

    					if (state.backtracking>0) {state.failed=true; return retval;}
    					EarlyExitException eee39 = new EarlyExitException( 39, input );
    					DebugRecognitionException(eee39);
    					throw eee39;
    				}
    				cnt39++;
    			}
    			loop39:
    				;

    			} finally { DebugExitSubRule(39); }


    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:190:4: type_name '?'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(190, 4);
    			PushFollow(Follow._type_name_in_type1007);
    			type_name109=type_name();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_name109.Tree, type_name109, retval);
    			DebugLocation(190, 14);
    			char_literal110=(IToken)Match(input,112,Follow._112_in_type1009); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal110_tree = (object)adaptor.Create(char_literal110, retval);
    			adaptor.AddChild(root_0, char_literal110_tree);
    			}

    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// cs.g:191:4: type_name
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(191, 4);
    			PushFollow(Follow._type_name_in_type1014);
    			type_name111=type_name();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_name111.Tree, type_name111, retval);

    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// cs.g:192:4: predefined_type ( '*' )+
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(192, 4);
    			PushFollow(Follow._predefined_type_in_type1019);
    			predefined_type112=predefined_type();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, predefined_type112.Tree, predefined_type112, retval);
    			DebugLocation(192, 20);
    			// cs.g:192:20: ( '*' )+
    			int cnt40=0;
    			try { DebugEnterSubRule(40);
    			while (true)
    			{
    				int alt40=2;
    				try { DebugEnterDecision(40, decisionCanBacktrack[40]);
    				int LA40_0 = input.LA(1);

    				if ((LA40_0==111))
    				{
    					alt40=1;
    				}


    				} finally { DebugExitDecision(40); }
    				switch (alt40)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:0:0: '*'
    					{
    					DebugLocation(192, 20);
    					char_literal113=(IToken)Match(input,111,Follow._111_in_type1021); if (state.failed) return retval;
    					if ( state.backtracking==0 ) {
    					char_literal113_tree = (object)adaptor.Create(char_literal113, retval);
    					adaptor.AddChild(root_0, char_literal113_tree);
    					}

    					}
    					break;

    				default:
    					if (cnt40 >= 1)
    						goto loop40;

    					if (state.backtracking>0) {state.failed=true; return retval;}
    					EarlyExitException eee40 = new EarlyExitException( 40, input );
    					DebugRecognitionException(eee40);
    					throw eee40;
    				}
    				cnt40++;
    			}
    			loop40:
    				;

    			} finally { DebugExitSubRule(40); }


    			}
    			break;
    		case 6:
    			DebugEnterAlt(6);
    			// cs.g:193:4: predefined_type '?'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(193, 4);
    			PushFollow(Follow._predefined_type_in_type1027);
    			predefined_type114=predefined_type();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, predefined_type114.Tree, predefined_type114, retval);
    			DebugLocation(193, 20);
    			char_literal115=(IToken)Match(input,112,Follow._112_in_type1029); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal115_tree = (object)adaptor.Create(char_literal115, retval);
    			adaptor.AddChild(root_0, char_literal115_tree);
    			}

    			}
    			break;
    		case 7:
    			DebugEnterAlt(7);
    			// cs.g:194:4: predefined_type
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(194, 4);
    			PushFollow(Follow._predefined_type_in_type1034);
    			predefined_type116=predefined_type();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, predefined_type116.Tree, predefined_type116, retval);

    			}
    			break;
    		case 8:
    			DebugEnterAlt(8);
    			// cs.g:195:4: 'void' ( '*' )+
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(195, 4);
    			string_literal117=(IToken)Match(input,113,Follow._113_in_type1039); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal117_tree = (object)adaptor.Create(string_literal117, retval);
    			adaptor.AddChild(root_0, string_literal117_tree);
    			}
    			DebugLocation(195, 13);
    			// cs.g:195:13: ( '*' )+
    			int cnt41=0;
    			try { DebugEnterSubRule(41);
    			while (true)
    			{
    				int alt41=2;
    				try { DebugEnterDecision(41, decisionCanBacktrack[41]);
    				int LA41_0 = input.LA(1);

    				if ((LA41_0==111))
    				{
    					alt41=1;
    				}


    				} finally { DebugExitDecision(41); }
    				switch (alt41)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:0:0: '*'
    					{
    					DebugLocation(195, 13);
    					char_literal118=(IToken)Match(input,111,Follow._111_in_type1043); if (state.failed) return retval;
    					if ( state.backtracking==0 ) {
    					char_literal118_tree = (object)adaptor.Create(char_literal118, retval);
    					adaptor.AddChild(root_0, char_literal118_tree);
    					}

    					}
    					break;

    				default:
    					if (cnt41 >= 1)
    						goto loop41;

    					if (state.backtracking>0) {state.failed=true; return retval;}
    					EarlyExitException eee41 = new EarlyExitException( 41, input );
    					DebugRecognitionException(eee41);
    					throw eee41;
    				}
    				cnt41++;
    			}
    			loop41:
    				;

    			} finally { DebugExitSubRule(41); }


    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 39, type_StartIndex); }
        }
     	DebugLocation(195, 17);
    	} finally { DebugExitRule(GrammarFileName, "type"); }
    	return retval;

    }
    // $ANTLR end "type"

    public class non_nullable_type_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_non_nullable_type() {}
    protected virtual void Leave_non_nullable_type() {}

    // $ANTLR start "non_nullable_type"
    // cs.g:196:1: non_nullable_type : ( ( type_name | predefined_type ) rank_specifiers ( '*' )* | type_name ( '*' )+ | type_name | predefined_type ( '*' )+ | predefined_type | 'void' ( '*' )+ );
    [GrammarRule("non_nullable_type")]
    public csParser.non_nullable_type_return non_nullable_type()
    {

        csParser.non_nullable_type_return retval = new csParser.non_nullable_type_return();
        retval.Start = (IToken)input.LT(1);
        int non_nullable_type_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal122=null;
        IToken char_literal124=null;
        IToken char_literal127=null;
        IToken string_literal129=null;
        IToken char_literal130=null;
        csParser.type_name_return type_name119 = default(csParser.type_name_return);
        csParser.predefined_type_return predefined_type120 = default(csParser.predefined_type_return);
        csParser.rank_specifiers_return rank_specifiers121 = default(csParser.rank_specifiers_return);
        csParser.type_name_return type_name123 = default(csParser.type_name_return);
        csParser.type_name_return type_name125 = default(csParser.type_name_return);
        csParser.predefined_type_return predefined_type126 = default(csParser.predefined_type_return);
        csParser.predefined_type_return predefined_type128 = default(csParser.predefined_type_return);

        object char_literal122_tree=null;
        object char_literal124_tree=null;
        object char_literal127_tree=null;
        object string_literal129_tree=null;
        object char_literal130_tree=null;

    	try { DebugEnterRule(GrammarFileName, "non_nullable_type");
    	DebugLocation(196, 17);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }
    		// cs.g:196:18: ( ( type_name | predefined_type ) rank_specifiers ( '*' )* | type_name ( '*' )+ | type_name | predefined_type ( '*' )+ | predefined_type | 'void' ( '*' )+ )
    		int alt48=6;
    		try { DebugEnterDecision(48, decisionCanBacktrack[48]);
    		try
    		{
    			alt48 = dfa48.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(48); }
    		switch (alt48)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:197:2: ( type_name | predefined_type ) rank_specifiers ( '*' )*
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(197, 2);
    			// cs.g:197:2: ( type_name | predefined_type )
    			int alt43=2;
    			try { DebugEnterSubRule(43);
    			try { DebugEnterDecision(43, decisionCanBacktrack[43]);
    			int LA43_0 = input.LA(1);

    			if ((LA43_0==IDENTIFIER||LA43_0==SET||LA43_0==95||(LA43_0>=101 && LA43_0<=107)||LA43_0==109||(LA43_0>=175 && LA43_0<=187)||LA43_0==199||(LA43_0>=201 && LA43_0<=202)||LA43_0==208||(LA43_0>=225 && LA43_0<=226)))
    			{
    				alt43=1;
    			}
    			else if (((LA43_0>=114 && LA43_0<=122)||(LA43_0>=132 && LA43_0<=137)))
    			{
    				alt43=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 43, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			} finally { DebugExitDecision(43); }
    			switch (alt43)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:197:3: type_name
    				{
    				DebugLocation(197, 3);
    				PushFollow(Follow._type_name_in_non_nullable_type1053);
    				type_name119=type_name();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_name119.Tree, type_name119, retval);

    				}
    				break;
    			case 2:
    				DebugEnterAlt(2);
    				// cs.g:197:19: predefined_type
    				{
    				DebugLocation(197, 19);
    				PushFollow(Follow._predefined_type_in_non_nullable_type1061);
    				predefined_type120=predefined_type();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, predefined_type120.Tree, predefined_type120, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(43); }

    			DebugLocation(197, 38);
    			PushFollow(Follow._rank_specifiers_in_non_nullable_type1066);
    			rank_specifiers121=rank_specifiers();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, rank_specifiers121.Tree, rank_specifiers121, retval);
    			DebugLocation(197, 56);
    			// cs.g:197:56: ( '*' )*
    			try { DebugEnterSubRule(44);
    			while (true)
    			{
    				int alt44=2;
    				try { DebugEnterDecision(44, decisionCanBacktrack[44]);
    				try
    				{
    					alt44 = dfa44.Predict(input);
    				}
    				catch (NoViableAltException nvae)
    				{
    					DebugRecognitionException(nvae);
    					throw;
    				}
    				} finally { DebugExitDecision(44); }
    				switch ( alt44 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:0:0: '*'
    					{
    					DebugLocation(197, 56);
    					char_literal122=(IToken)Match(input,111,Follow._111_in_non_nullable_type1070); if (state.failed) return retval;
    					if ( state.backtracking==0 ) {
    					char_literal122_tree = (object)adaptor.Create(char_literal122, retval);
    					adaptor.AddChild(root_0, char_literal122_tree);
    					}

    					}
    					break;

    				default:
    					goto loop44;
    				}
    			}

    			loop44:
    				;

    			} finally { DebugExitSubRule(44); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:198:4: type_name ( '*' )+
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(198, 4);
    			PushFollow(Follow._type_name_in_non_nullable_type1076);
    			type_name123=type_name();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_name123.Tree, type_name123, retval);
    			DebugLocation(198, 14);
    			// cs.g:198:14: ( '*' )+
    			int cnt45=0;
    			try { DebugEnterSubRule(45);
    			while (true)
    			{
    				int alt45=2;
    				try { DebugEnterDecision(45, decisionCanBacktrack[45]);
    				try
    				{
    					alt45 = dfa45.Predict(input);
    				}
    				catch (NoViableAltException nvae)
    				{
    					DebugRecognitionException(nvae);
    					throw;
    				}
    				} finally { DebugExitDecision(45); }
    				switch (alt45)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:0:0: '*'
    					{
    					DebugLocation(198, 14);
    					char_literal124=(IToken)Match(input,111,Follow._111_in_non_nullable_type1078); if (state.failed) return retval;
    					if ( state.backtracking==0 ) {
    					char_literal124_tree = (object)adaptor.Create(char_literal124, retval);
    					adaptor.AddChild(root_0, char_literal124_tree);
    					}

    					}
    					break;

    				default:
    					if (cnt45 >= 1)
    						goto loop45;

    					if (state.backtracking>0) {state.failed=true; return retval;}
    					EarlyExitException eee45 = new EarlyExitException( 45, input );
    					DebugRecognitionException(eee45);
    					throw eee45;
    				}
    				cnt45++;
    			}
    			loop45:
    				;

    			} finally { DebugExitSubRule(45); }


    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:199:4: type_name
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(199, 4);
    			PushFollow(Follow._type_name_in_non_nullable_type1084);
    			type_name125=type_name();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_name125.Tree, type_name125, retval);

    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// cs.g:200:4: predefined_type ( '*' )+
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(200, 4);
    			PushFollow(Follow._predefined_type_in_non_nullable_type1089);
    			predefined_type126=predefined_type();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, predefined_type126.Tree, predefined_type126, retval);
    			DebugLocation(200, 20);
    			// cs.g:200:20: ( '*' )+
    			int cnt46=0;
    			try { DebugEnterSubRule(46);
    			while (true)
    			{
    				int alt46=2;
    				try { DebugEnterDecision(46, decisionCanBacktrack[46]);
    				try
    				{
    					alt46 = dfa46.Predict(input);
    				}
    				catch (NoViableAltException nvae)
    				{
    					DebugRecognitionException(nvae);
    					throw;
    				}
    				} finally { DebugExitDecision(46); }
    				switch (alt46)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:0:0: '*'
    					{
    					DebugLocation(200, 20);
    					char_literal127=(IToken)Match(input,111,Follow._111_in_non_nullable_type1091); if (state.failed) return retval;
    					if ( state.backtracking==0 ) {
    					char_literal127_tree = (object)adaptor.Create(char_literal127, retval);
    					adaptor.AddChild(root_0, char_literal127_tree);
    					}

    					}
    					break;

    				default:
    					if (cnt46 >= 1)
    						goto loop46;

    					if (state.backtracking>0) {state.failed=true; return retval;}
    					EarlyExitException eee46 = new EarlyExitException( 46, input );
    					DebugRecognitionException(eee46);
    					throw eee46;
    				}
    				cnt46++;
    			}
    			loop46:
    				;

    			} finally { DebugExitSubRule(46); }


    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// cs.g:201:4: predefined_type
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(201, 4);
    			PushFollow(Follow._predefined_type_in_non_nullable_type1097);
    			predefined_type128=predefined_type();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, predefined_type128.Tree, predefined_type128, retval);

    			}
    			break;
    		case 6:
    			DebugEnterAlt(6);
    			// cs.g:202:4: 'void' ( '*' )+
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(202, 4);
    			string_literal129=(IToken)Match(input,113,Follow._113_in_non_nullable_type1102); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal129_tree = (object)adaptor.Create(string_literal129, retval);
    			adaptor.AddChild(root_0, string_literal129_tree);
    			}
    			DebugLocation(202, 13);
    			// cs.g:202:13: ( '*' )+
    			int cnt47=0;
    			try { DebugEnterSubRule(47);
    			while (true)
    			{
    				int alt47=2;
    				try { DebugEnterDecision(47, decisionCanBacktrack[47]);
    				try
    				{
    					alt47 = dfa47.Predict(input);
    				}
    				catch (NoViableAltException nvae)
    				{
    					DebugRecognitionException(nvae);
    					throw;
    				}
    				} finally { DebugExitDecision(47); }
    				switch (alt47)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:0:0: '*'
    					{
    					DebugLocation(202, 13);
    					char_literal130=(IToken)Match(input,111,Follow._111_in_non_nullable_type1106); if (state.failed) return retval;
    					if ( state.backtracking==0 ) {
    					char_literal130_tree = (object)adaptor.Create(char_literal130, retval);
    					adaptor.AddChild(root_0, char_literal130_tree);
    					}

    					}
    					break;

    				default:
    					if (cnt47 >= 1)
    						goto loop47;

    					if (state.backtracking>0) {state.failed=true; return retval;}
    					EarlyExitException eee47 = new EarlyExitException( 47, input );
    					DebugRecognitionException(eee47);
    					throw eee47;
    				}
    				cnt47++;
    			}
    			loop47:
    				;

    			} finally { DebugExitSubRule(47); }


    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 40, non_nullable_type_StartIndex); }
        }
     	DebugLocation(202, 17);
    	} finally { DebugExitRule(GrammarFileName, "non_nullable_type"); }
    	return retval;

    }
    // $ANTLR end "non_nullable_type"

    public class type_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_type_list() {}
    protected virtual void Leave_type_list() {}

    // $ANTLR start "type_list"
    // cs.g:203:1: type_list : type ( ',' type )* ;
    [GrammarRule("type_list")]
    public csParser.type_list_return type_list()
    {

        csParser.type_list_return retval = new csParser.type_list_return();
        retval.Start = (IToken)input.LT(1);
        int type_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal132=null;
        csParser.type_return type131 = default(csParser.type_return);
        csParser.type_return type133 = default(csParser.type_return);

        object char_literal132_tree=null;

    	try { DebugEnterRule(GrammarFileName, "type_list");
    	DebugLocation(203, 18);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }
    		// cs.g:203:10: ( type ( ',' type )* )
    		DebugEnterAlt(1);
    		// cs.g:204:2: type ( ',' type )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(204, 2);
    		PushFollow(Follow._type_in_type_list1115);
    		type131=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type131.Tree, type131, retval);
    		DebugLocation(204, 7);
    		// cs.g:204:7: ( ',' type )*
    		try { DebugEnterSubRule(49);
    		while (true)
    		{
    			int alt49=2;
    			try { DebugEnterDecision(49, decisionCanBacktrack[49]);
    			int LA49_0 = input.LA(1);

    			if ((LA49_0==98))
    			{
    				alt49=1;
    			}


    			} finally { DebugExitDecision(49); }
    			switch ( alt49 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:204:8: ',' type
    				{
    				DebugLocation(204, 8);
    				char_literal132=(IToken)Match(input,98,Follow._98_in_type_list1118); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal132_tree = (object)adaptor.Create(char_literal132, retval);
    				adaptor.AddChild(root_0, char_literal132_tree);
    				}
    				DebugLocation(204, 12);
    				PushFollow(Follow._type_in_type_list1120);
    				type133=type();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type133.Tree, type133, retval);

    				}
    				break;

    			default:
    				goto loop49;
    			}
    		}

    		loop49:
    			;

    		} finally { DebugExitSubRule(49); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 41, type_list_StartIndex); }
        }
     	DebugLocation(204, 18);
    	} finally { DebugExitRule(GrammarFileName, "type_list"); }
    	return retval;

    }
    // $ANTLR end "type_list"

    public class class_type_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_class_type() {}
    protected virtual void Leave_class_type() {}

    // $ANTLR start "class_type"
    // cs.g:205:1: class_type : type ;
    [GrammarRule("class_type")]
    public csParser.class_type_return class_type()
    {

        csParser.class_type_return retval = new csParser.class_type_return();
        retval.Start = (IToken)input.LT(1);
        int class_type_StartIndex = input.Index;
        object root_0 = null;

        csParser.type_return type134 = default(csParser.type_return);


    	try { DebugEnterRule(GrammarFileName, "class_type");
    	DebugLocation(205, 5);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }
    		// cs.g:205:11: ( type )
    		DebugEnterAlt(1);
    		// cs.g:206:2: type
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(206, 2);
    		PushFollow(Follow._type_in_class_type1130);
    		type134=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type134.Tree, type134, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 42, class_type_StartIndex); }
        }
     	DebugLocation(206, 5);
    	} finally { DebugExitRule(GrammarFileName, "class_type"); }
    	return retval;

    }
    // $ANTLR end "class_type"

    public class non_array_type_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_non_array_type() {}
    protected virtual void Leave_non_array_type() {}

    // $ANTLR start "non_array_type"
    // cs.g:207:1: non_array_type : type ;
    [GrammarRule("non_array_type")]
    public csParser.non_array_type_return non_array_type()
    {

        csParser.non_array_type_return retval = new csParser.non_array_type_return();
        retval.Start = (IToken)input.LT(1);
        int non_array_type_StartIndex = input.Index;
        object root_0 = null;

        csParser.type_return type135 = default(csParser.type_return);


    	try { DebugEnterRule(GrammarFileName, "non_array_type");
    	DebugLocation(207, 5);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }
    		// cs.g:207:15: ( type )
    		DebugEnterAlt(1);
    		// cs.g:208:2: type
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(208, 2);
    		PushFollow(Follow._type_in_non_array_type1137);
    		type135=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type135.Tree, type135, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 43, non_array_type_StartIndex); }
        }
     	DebugLocation(208, 5);
    	} finally { DebugExitRule(GrammarFileName, "non_array_type"); }
    	return retval;

    }
    // $ANTLR end "non_array_type"

    public class array_type_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_array_type() {}
    protected virtual void Leave_array_type() {}

    // $ANTLR start "array_type"
    // cs.g:209:1: array_type : type ;
    [GrammarRule("array_type")]
    public csParser.array_type_return array_type()
    {

        csParser.array_type_return retval = new csParser.array_type_return();
        retval.Start = (IToken)input.LT(1);
        int array_type_StartIndex = input.Index;
        object root_0 = null;

        csParser.type_return type136 = default(csParser.type_return);


    	try { DebugEnterRule(GrammarFileName, "array_type");
    	DebugLocation(209, 5);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }
    		// cs.g:209:11: ( type )
    		DebugEnterAlt(1);
    		// cs.g:210:2: type
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(210, 2);
    		PushFollow(Follow._type_in_array_type1144);
    		type136=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type136.Tree, type136, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 44, array_type_StartIndex); }
        }
     	DebugLocation(210, 5);
    	} finally { DebugExitRule(GrammarFileName, "array_type"); }
    	return retval;

    }
    // $ANTLR end "array_type"

    public class integral_type_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_integral_type() {}
    protected virtual void Leave_integral_type() {}

    // $ANTLR start "integral_type"
    // cs.g:211:1: integral_type : ( 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' );
    [GrammarRule("integral_type")]
    public csParser.integral_type_return integral_type()
    {

        csParser.integral_type_return retval = new csParser.integral_type_return();
        retval.Start = (IToken)input.LT(1);
        int integral_type_StartIndex = input.Index;
        object root_0 = null;

        IToken set137=null;

        object set137_tree=null;

    	try { DebugEnterRule(GrammarFileName, "integral_type");
    	DebugLocation(211, 84);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }
    		// cs.g:211:14: ( 'sbyte' | 'byte' | 'short' | 'ushort' | 'int' | 'uint' | 'long' | 'ulong' | 'char' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(211, 14);
    		set137=(IToken)input.LT(1);
    		if ((input.LA(1)>=114 && input.LA(1)<=122))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set137, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 45, integral_type_StartIndex); }
        }
     	DebugLocation(212, 84);
    	} finally { DebugExitRule(GrammarFileName, "integral_type"); }
    	return retval;

    }
    // $ANTLR end "integral_type"

    public class unmanaged_type_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_unmanaged_type() {}
    protected virtual void Leave_unmanaged_type() {}

    // $ANTLR start "unmanaged_type"
    // cs.g:213:1: unmanaged_type : type ;
    [GrammarRule("unmanaged_type")]
    public csParser.unmanaged_type_return unmanaged_type()
    {

        csParser.unmanaged_type_return retval = new csParser.unmanaged_type_return();
        retval.Start = (IToken)input.LT(1);
        int unmanaged_type_StartIndex = input.Index;
        object root_0 = null;

        csParser.type_return type138 = default(csParser.type_return);


    	try { DebugEnterRule(GrammarFileName, "unmanaged_type");
    	DebugLocation(213, 5);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }
    		// cs.g:213:15: ( type )
    		DebugEnterAlt(1);
    		// cs.g:214:2: type
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(214, 2);
    		PushFollow(Follow._type_in_unmanaged_type1192);
    		type138=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type138.Tree, type138, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 46, unmanaged_type_StartIndex); }
        }
     	DebugLocation(214, 5);
    	} finally { DebugExitRule(GrammarFileName, "unmanaged_type"); }
    	return retval;

    }
    // $ANTLR end "unmanaged_type"

    public class pointer_type_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_pointer_type() {}
    protected virtual void Leave_pointer_type() {}

    // $ANTLR start "pointer_type"
    // cs.g:215:1: pointer_type : type ;
    [GrammarRule("pointer_type")]
    public csParser.pointer_type_return pointer_type()
    {

        csParser.pointer_type_return retval = new csParser.pointer_type_return();
        retval.Start = (IToken)input.LT(1);
        int pointer_type_StartIndex = input.Index;
        object root_0 = null;

        csParser.type_return type139 = default(csParser.type_return);


    	try { DebugEnterRule(GrammarFileName, "pointer_type");
    	DebugLocation(215, 5);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }
    		// cs.g:215:13: ( type )
    		DebugEnterAlt(1);
    		// cs.g:216:2: type
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(216, 2);
    		PushFollow(Follow._type_in_pointer_type1199);
    		type139=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type139.Tree, type139, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 47, pointer_type_StartIndex); }
        }
     	DebugLocation(216, 5);
    	} finally { DebugExitRule(GrammarFileName, "pointer_type"); }
    	return retval;

    }
    // $ANTLR end "pointer_type"

    public class rank_specifiers_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_rank_specifiers() {}
    protected virtual void Leave_rank_specifiers() {}

    // $ANTLR start "rank_specifiers"
    // cs.g:217:1: rank_specifiers : ( rank_specifier )+ ;
    [GrammarRule("rank_specifiers")]
    public csParser.rank_specifiers_return rank_specifiers()
    {

        csParser.rank_specifiers_return retval = new csParser.rank_specifiers_return();
        retval.Start = (IToken)input.LT(1);
        int rank_specifiers_StartIndex = input.Index;
        object root_0 = null;

        csParser.rank_specifier_return rank_specifier140 = default(csParser.rank_specifier_return);


    	try { DebugEnterRule(GrammarFileName, "rank_specifiers");
    	DebugLocation(217, 17);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }
    		// cs.g:217:16: ( ( rank_specifier )+ )
    		DebugEnterAlt(1);
    		// cs.g:218:2: ( rank_specifier )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(218, 2);
    		// cs.g:218:2: ( rank_specifier )+
    		int cnt50=0;
    		try { DebugEnterSubRule(50);
    		while (true)
    		{
    			int alt50=2;
    			try { DebugEnterDecision(50, decisionCanBacktrack[50]);
    			int LA50_0 = input.LA(1);

    			if ((LA50_0==97))
    			{
    				int LA50_2 = input.LA(2);

    				if (((LA50_2>=98 && LA50_2<=99)))
    				{
    					alt50=1;
    				}


    			}


    			} finally { DebugExitDecision(50); }
    			switch (alt50)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: rank_specifier
    				{
    				DebugLocation(218, 2);
    				PushFollow(Follow._rank_specifier_in_rank_specifiers1207);
    				rank_specifier140=rank_specifier();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, rank_specifier140.Tree, rank_specifier140, retval);

    				}
    				break;

    			default:
    				if (cnt50 >= 1)
    					goto loop50;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee50 = new EarlyExitException( 50, input );
    				DebugRecognitionException(eee50);
    				throw eee50;
    			}
    			cnt50++;
    		}
    		loop50:
    			;

    		} finally { DebugExitSubRule(50); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 48, rank_specifiers_StartIndex); }
        }
     	DebugLocation(218, 17);
    	} finally { DebugExitRule(GrammarFileName, "rank_specifiers"); }
    	return retval;

    }
    // $ANTLR end "rank_specifiers"

    public class rank_specifier_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_rank_specifier() {}
    protected virtual void Leave_rank_specifier() {}

    // $ANTLR start "rank_specifier"
    // cs.g:219:1: rank_specifier : '[' ( dim_separators )? ']' ;
    [GrammarRule("rank_specifier")]
    public csParser.rank_specifier_return rank_specifier()
    {

        csParser.rank_specifier_return retval = new csParser.rank_specifier_return();
        retval.Start = (IToken)input.LT(1);
        int rank_specifier_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal141=null;
        IToken char_literal143=null;
        csParser.dim_separators_return dim_separators142 = default(csParser.dim_separators_return);

        object char_literal141_tree=null;
        object char_literal143_tree=null;

    	try { DebugEnterRule(GrammarFileName, "rank_specifier");
    	DebugLocation(219, 29);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }
    		// cs.g:219:15: ( '[' ( dim_separators )? ']' )
    		DebugEnterAlt(1);
    		// cs.g:220:2: '[' ( dim_separators )? ']'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(220, 2);
    		char_literal141=(IToken)Match(input,97,Follow._97_in_rank_specifier1225); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal141_tree = (object)adaptor.Create(char_literal141, retval);
    		adaptor.AddChild(root_0, char_literal141_tree);
    		}
    		DebugLocation(220, 8);
    		// cs.g:220:8: ( dim_separators )?
    		int alt51=2;
    		try { DebugEnterSubRule(51);
    		try { DebugEnterDecision(51, decisionCanBacktrack[51]);
    		int LA51_0 = input.LA(1);

    		if ((LA51_0==98))
    		{
    			alt51=1;
    		}
    		} finally { DebugExitDecision(51); }
    		switch (alt51)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: dim_separators
    			{
    			DebugLocation(220, 8);
    			PushFollow(Follow._dim_separators_in_rank_specifier1229);
    			dim_separators142=dim_separators();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, dim_separators142.Tree, dim_separators142, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(51); }

    		DebugLocation(220, 26);
    		char_literal143=(IToken)Match(input,99,Follow._99_in_rank_specifier1234); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal143_tree = (object)adaptor.Create(char_literal143, retval);
    		adaptor.AddChild(root_0, char_literal143_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 49, rank_specifier_StartIndex); }
        }
     	DebugLocation(220, 29);
    	} finally { DebugExitRule(GrammarFileName, "rank_specifier"); }
    	return retval;

    }
    // $ANTLR end "rank_specifier"

    public class dim_separators_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_dim_separators() {}
    protected virtual void Leave_dim_separators() {}

    // $ANTLR start "dim_separators"
    // cs.g:221:2: dim_separators : ( ',' )+ ;
    [GrammarRule("dim_separators")]
    public csParser.dim_separators_return dim_separators()
    {

        csParser.dim_separators_return retval = new csParser.dim_separators_return();
        retval.Start = (IToken)input.LT(1);
        int dim_separators_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal144=null;

        object char_literal144_tree=null;

    	try { DebugEnterRule(GrammarFileName, "dim_separators");
    	DebugLocation(221, 6);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }
    		// cs.g:221:16: ( ( ',' )+ )
    		DebugEnterAlt(1);
    		// cs.g:222:2: ( ',' )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(222, 2);
    		// cs.g:222:2: ( ',' )+
    		int cnt52=0;
    		try { DebugEnterSubRule(52);
    		while (true)
    		{
    			int alt52=2;
    			try { DebugEnterDecision(52, decisionCanBacktrack[52]);
    			int LA52_0 = input.LA(1);

    			if ((LA52_0==98))
    			{
    				alt52=1;
    			}


    			} finally { DebugExitDecision(52); }
    			switch (alt52)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: ','
    				{
    				DebugLocation(222, 2);
    				char_literal144=(IToken)Match(input,98,Follow._98_in_dim_separators1244); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal144_tree = (object)adaptor.Create(char_literal144, retval);
    				adaptor.AddChild(root_0, char_literal144_tree);
    				}

    				}
    				break;

    			default:
    				if (cnt52 >= 1)
    					goto loop52;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee52 = new EarlyExitException( 52, input );
    				DebugRecognitionException(eee52);
    				throw eee52;
    			}
    			cnt52++;
    		}
    		loop52:
    			;

    		} finally { DebugExitSubRule(52); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 50, dim_separators_StartIndex); }
        }
     	DebugLocation(222, 6);
    	} finally { DebugExitRule(GrammarFileName, "dim_separators"); }
    	return retval;

    }
    // $ANTLR end "dim_separators"

    public class generic_argument_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_generic_argument_list() {}
    protected virtual void Leave_generic_argument_list() {}

    // $ANTLR start "generic_argument_list"
    // cs.g:223:1: generic_argument_list : '<' type_arguments '>' ;
    [GrammarRule("generic_argument_list")]
    public csParser.generic_argument_list_return generic_argument_list()
    {

        csParser.generic_argument_list_return retval = new csParser.generic_argument_list_return();
        retval.Start = (IToken)input.LT(1);
        int generic_argument_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal145=null;
        IToken char_literal147=null;
        csParser.type_arguments_return type_arguments146 = default(csParser.type_arguments_return);

        object char_literal145_tree=null;
        object char_literal147_tree=null;

    	try { DebugEnterRule(GrammarFileName, "generic_argument_list");
    	DebugLocation(223, 28);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }
    		// cs.g:223:22: ( '<' type_arguments '>' )
    		DebugEnterAlt(1);
    		// cs.g:224:2: '<' type_arguments '>'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(224, 2);
    		char_literal145=(IToken)Match(input,123,Follow._123_in_generic_argument_list1254); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal145_tree = (object)adaptor.Create(char_literal145, retval);
    		adaptor.AddChild(root_0, char_literal145_tree);
    		}
    		DebugLocation(224, 8);
    		PushFollow(Follow._type_arguments_in_generic_argument_list1258);
    		type_arguments146=type_arguments();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_arguments146.Tree, type_arguments146, retval);
    		DebugLocation(224, 25);
    		char_literal147=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_generic_argument_list1262), "GT"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal147_tree = (object)adaptor.Create(char_literal147, retval);
    		adaptor.AddChild(root_0, char_literal147_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 51, generic_argument_list_StartIndex); }
        }
     	DebugLocation(224, 28);
    	} finally { DebugExitRule(GrammarFileName, "generic_argument_list"); }
    	return retval;

    }
    // $ANTLR end "generic_argument_list"

    public class type_arguments_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_type_arguments() {}
    protected virtual void Leave_type_arguments() {}

    // $ANTLR start "type_arguments"
    // cs.g:225:1: type_arguments : ta+= type_argument ( ',' ta+= type_argument )* ;
    [GrammarRule("type_arguments")]
    public csParser.type_arguments_return type_arguments()
    {

        csParser.type_arguments_return retval = new csParser.type_arguments_return();
        retval.Start = (IToken)input.LT(1);
        int type_arguments_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal148=null;
        List list_ta=null;
        csParser.type_argument_return ta = default(csParser.type_argument_return);
        object char_literal148_tree=null;

    	try { DebugEnterRule(GrammarFileName, "type_arguments");
    	DebugLocation(225, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }
    		// cs.g:225:15: (ta+= type_argument ( ',' ta+= type_argument )* )
    		DebugEnterAlt(1);
    		// cs.g:226:2: ta+= type_argument ( ',' ta+= type_argument )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(226, 5);
    		PushFollow(Follow._type_argument_in_type_arguments1275);
    		ta=type_argument();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, ta.Tree, ta, retval);
    		if (list_ta==null) list_ta=new ArrayList();
    		list_ta.Add(ta.Tree);

    		DebugLocation(226, 22);
    		// cs.g:226:22: ( ',' ta+= type_argument )*
    		try { DebugEnterSubRule(53);
    		while (true)
    		{
    			int alt53=2;
    			try { DebugEnterDecision(53, decisionCanBacktrack[53]);
    			int LA53_0 = input.LA(1);

    			if ((LA53_0==98))
    			{
    				alt53=1;
    			}


    			} finally { DebugExitDecision(53); }
    			switch ( alt53 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:226:23: ',' ta+= type_argument
    				{
    				DebugLocation(226, 23);
    				char_literal148=(IToken)Match(input,98,Follow._98_in_type_arguments1278); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal148_tree = (object)adaptor.Create(char_literal148, retval);
    				adaptor.AddChild(root_0, char_literal148_tree);
    				}
    				DebugLocation(226, 30);
    				PushFollow(Follow._type_argument_in_type_arguments1284);
    				ta=type_argument();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, ta.Tree, ta, retval);
    				if (list_ta==null) list_ta=new ArrayList();
    				list_ta.Add(ta.Tree);


    				}
    				break;

    			default:
    				goto loop53;
    			}
    		}

    		loop53:
    			;

    		} finally { DebugExitSubRule(53); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 52, type_arguments_StartIndex); }
        }
     	DebugLocation(227, 1);
    	} finally { DebugExitRule(GrammarFileName, "type_arguments"); }
    	return retval;

    }
    // $ANTLR end "type_arguments"

    public class type_argument_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_type_argument() {}
    protected virtual void Leave_type_argument() {}

    // $ANTLR start "type_argument"
    // cs.g:228:1: type_argument : type ;
    [GrammarRule("type_argument")]
    public csParser.type_argument_return type_argument()
    {

        csParser.type_argument_return retval = new csParser.type_argument_return();
        retval.Start = (IToken)input.LT(1);
        int type_argument_StartIndex = input.Index;
        object root_0 = null;

        csParser.type_return type149 = default(csParser.type_return);


    	try { DebugEnterRule(GrammarFileName, "type_argument");
    	DebugLocation(228, 6);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }
    		// cs.g:228:14: ( type )
    		DebugEnterAlt(1);
    		// cs.g:229:2: type
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(229, 2);
    		PushFollow(Follow._type_in_type_argument1298);
    		type149=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type149.Tree, type149, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 53, type_argument_StartIndex); }
        }
     	DebugLocation(229, 6);
    	} finally { DebugExitRule(GrammarFileName, "type_argument"); }
    	return retval;

    }
    // $ANTLR end "type_argument"

    public class type_variable_name_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_type_variable_name() {}
    protected virtual void Leave_type_variable_name() {}

    // $ANTLR start "type_variable_name"
    // cs.g:230:1: type_variable_name : identifier ;
    [GrammarRule("type_variable_name")]
    public csParser.type_variable_name_return type_variable_name()
    {

        csParser.type_variable_name_return retval = new csParser.type_variable_name_return();
        retval.Start = (IToken)input.LT(1);
        int type_variable_name_StartIndex = input.Index;
        object root_0 = null;

        csParser.identifier_return identifier150 = default(csParser.identifier_return);


    	try { DebugEnterRule(GrammarFileName, "type_variable_name");
    	DebugLocation(230, 12);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }
    		// cs.g:230:19: ( identifier )
    		DebugEnterAlt(1);
    		// cs.g:231:2: identifier
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(231, 2);
    		PushFollow(Follow._identifier_in_type_variable_name1307);
    		identifier150=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier150.Tree, identifier150, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 54, type_variable_name_StartIndex); }
        }
     	DebugLocation(231, 12);
    	} finally { DebugExitRule(GrammarFileName, "type_variable_name"); }
    	return retval;

    }
    // $ANTLR end "type_variable_name"

    public class expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_expression() {}
    protected virtual void Leave_expression() {}

    // $ANTLR start "expression"
    // cs.g:235:1: expression : ( non_assignment_expression | assignment );
    [GrammarRule("expression")]
    public csParser.expression_return expression()
    {

        csParser.expression_return retval = new csParser.expression_return();
        retval.Start = (IToken)input.LT(1);
        int expression_StartIndex = input.Index;
        object root_0 = null;

        csParser.non_assignment_expression_return non_assignment_expression151 = default(csParser.non_assignment_expression_return);
        csParser.assignment_return assignment152 = default(csParser.assignment_return);


    	try { DebugEnterRule(GrammarFileName, "expression");
    	DebugLocation(235, 13);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }
    		// cs.g:235:11: ( non_assignment_expression | assignment )
    		int alt54=2;
    		try { DebugEnterDecision(54, decisionCanBacktrack[54]);
    		try
    		{
    			alt54 = dfa54.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(54); }
    		switch (alt54)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:236:2: non_assignment_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(236, 2);
    			PushFollow(Follow._non_assignment_expression_in_expression1319);
    			non_assignment_expression151=non_assignment_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, non_assignment_expression151.Tree, non_assignment_expression151, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:237:4: assignment
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(237, 4);
    			PushFollow(Follow._assignment_in_expression1324);
    			assignment152=assignment();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, assignment152.Tree, assignment152, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 55, expression_StartIndex); }
        }
     	DebugLocation(237, 13);
    	} finally { DebugExitRule(GrammarFileName, "expression"); }
    	return retval;

    }
    // $ANTLR end "expression"

    public class unary_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_unary_expression() {}
    protected virtual void Leave_unary_expression() {}

    // $ANTLR start "unary_expression"
    // cs.g:238:1: unary_expression : ( cast_expression | '+' unary_expression | '-' unary_expression | '!' unary_expression | '~' unary_expression | '*' unary_expression | pre_increment_expression | pre_decrement_expression | primary_or_array_creation_expression ( '++' )? ( '--' )? | pointer_indirection_expression | addressof_expression );
    [GrammarRule("unary_expression")]
    public csParser.unary_expression_return unary_expression()
    {

        csParser.unary_expression_return retval = new csParser.unary_expression_return();
        retval.Start = (IToken)input.LT(1);
        int unary_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal154=null;
        IToken char_literal156=null;
        IToken char_literal158=null;
        IToken char_literal160=null;
        IToken char_literal162=null;
        IToken string_literal167=null;
        IToken string_literal168=null;
        csParser.cast_expression_return cast_expression153 = default(csParser.cast_expression_return);
        csParser.unary_expression_return unary_expression155 = default(csParser.unary_expression_return);
        csParser.unary_expression_return unary_expression157 = default(csParser.unary_expression_return);
        csParser.unary_expression_return unary_expression159 = default(csParser.unary_expression_return);
        csParser.unary_expression_return unary_expression161 = default(csParser.unary_expression_return);
        csParser.unary_expression_return unary_expression163 = default(csParser.unary_expression_return);
        csParser.pre_increment_expression_return pre_increment_expression164 = default(csParser.pre_increment_expression_return);
        csParser.pre_decrement_expression_return pre_decrement_expression165 = default(csParser.pre_decrement_expression_return);
        csParser.primary_or_array_creation_expression_return primary_or_array_creation_expression166 = default(csParser.primary_or_array_creation_expression_return);
        csParser.pointer_indirection_expression_return pointer_indirection_expression169 = default(csParser.pointer_indirection_expression_return);
        csParser.addressof_expression_return addressof_expression170 = default(csParser.addressof_expression_return);

        object char_literal154_tree=null;
        object char_literal156_tree=null;
        object char_literal158_tree=null;
        object char_literal160_tree=null;
        object char_literal162_tree=null;
        object string_literal167_tree=null;
        object string_literal168_tree=null;

    	try { DebugEnterRule(GrammarFileName, "unary_expression");
    	DebugLocation(238, 24);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }
    		// cs.g:238:17: ( cast_expression | '+' unary_expression | '-' unary_expression | '!' unary_expression | '~' unary_expression | '*' unary_expression | pre_increment_expression | pre_decrement_expression | primary_or_array_creation_expression ( '++' )? ( '--' )? | pointer_indirection_expression | addressof_expression )
    		int alt57=11;
    		try { DebugEnterDecision(57, decisionCanBacktrack[57]);
    		try
    		{
    			alt57 = dfa57.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(57); }
    		switch (alt57)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:239:2: cast_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(239, 2);
    			PushFollow(Follow._cast_expression_in_unary_expression1332);
    			cast_expression153=cast_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, cast_expression153.Tree, cast_expression153, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:240:4: '+' unary_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(240, 4);
    			char_literal154=(IToken)Match(input,124,Follow._124_in_unary_expression1341); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal154_tree = (object)adaptor.Create(char_literal154, retval);
    			adaptor.AddChild(root_0, char_literal154_tree);
    			}
    			DebugLocation(240, 10);
    			PushFollow(Follow._unary_expression_in_unary_expression1345);
    			unary_expression155=unary_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, unary_expression155.Tree, unary_expression155, retval);

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:241:4: '-' unary_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(241, 4);
    			char_literal156=(IToken)new XToken((IToken)Match(input,MINUS,Follow._MINUS_in_unary_expression1351), "MINUS"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal156_tree = (object)adaptor.Create(char_literal156, retval);
    			adaptor.AddChild(root_0, char_literal156_tree);
    			}
    			DebugLocation(241, 10);
    			PushFollow(Follow._unary_expression_in_unary_expression1355);
    			unary_expression157=unary_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, unary_expression157.Tree, unary_expression157, retval);

    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// cs.g:242:4: '!' unary_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(242, 4);
    			char_literal158=(IToken)Match(input,125,Follow._125_in_unary_expression1361); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal158_tree = (object)adaptor.Create(char_literal158, retval);
    			adaptor.AddChild(root_0, char_literal158_tree);
    			}
    			DebugLocation(242, 10);
    			PushFollow(Follow._unary_expression_in_unary_expression1365);
    			unary_expression159=unary_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, unary_expression159.Tree, unary_expression159, retval);

    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// cs.g:243:4: '~' unary_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(243, 4);
    			char_literal160=(IToken)Match(input,126,Follow._126_in_unary_expression1371); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal160_tree = (object)adaptor.Create(char_literal160, retval);
    			adaptor.AddChild(root_0, char_literal160_tree);
    			}
    			DebugLocation(243, 10);
    			PushFollow(Follow._unary_expression_in_unary_expression1375);
    			unary_expression161=unary_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, unary_expression161.Tree, unary_expression161, retval);

    			}
    			break;
    		case 6:
    			DebugEnterAlt(6);
    			// cs.g:244:4: '*' unary_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(244, 4);
    			char_literal162=(IToken)Match(input,111,Follow._111_in_unary_expression1381); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal162_tree = (object)adaptor.Create(char_literal162, retval);
    			adaptor.AddChild(root_0, char_literal162_tree);
    			}
    			DebugLocation(244, 10);
    			PushFollow(Follow._unary_expression_in_unary_expression1385);
    			unary_expression163=unary_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, unary_expression163.Tree, unary_expression163, retval);

    			}
    			break;
    		case 7:
    			DebugEnterAlt(7);
    			// cs.g:245:4: pre_increment_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(245, 4);
    			PushFollow(Follow._pre_increment_expression_in_unary_expression1390);
    			pre_increment_expression164=pre_increment_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, pre_increment_expression164.Tree, pre_increment_expression164, retval);

    			}
    			break;
    		case 8:
    			DebugEnterAlt(8);
    			// cs.g:246:4: pre_decrement_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(246, 4);
    			PushFollow(Follow._pre_decrement_expression_in_unary_expression1396);
    			pre_decrement_expression165=pre_decrement_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, pre_decrement_expression165.Tree, pre_decrement_expression165, retval);

    			}
    			break;
    		case 9:
    			DebugEnterAlt(9);
    			// cs.g:247:4: primary_or_array_creation_expression ( '++' )? ( '--' )?
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(247, 4);
    			PushFollow(Follow._primary_or_array_creation_expression_in_unary_expression1402);
    			primary_or_array_creation_expression166=primary_or_array_creation_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, primary_or_array_creation_expression166.Tree, primary_or_array_creation_expression166, retval);
    			DebugLocation(247, 43);
    			// cs.g:247:43: ( '++' )?
    			int alt55=2;
    			try { DebugEnterSubRule(55);
    			try { DebugEnterDecision(55, decisionCanBacktrack[55]);
    			try
    			{
    				alt55 = dfa55.Predict(input);
    			}
    			catch (NoViableAltException nvae)
    			{
    				DebugRecognitionException(nvae);
    				throw;
    			}
    			} finally { DebugExitDecision(55); }
    			switch (alt55)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: '++'
    				{
    				DebugLocation(247, 43);
    				string_literal167=(IToken)Match(input,127,Follow._127_in_unary_expression1406); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				string_literal167_tree = (object)adaptor.Create(string_literal167, retval);
    				adaptor.AddChild(root_0, string_literal167_tree);
    				}

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(55); }

    			DebugLocation(247, 51);
    			// cs.g:247:51: ( '--' )?
    			int alt56=2;
    			try { DebugEnterSubRule(56);
    			try { DebugEnterDecision(56, decisionCanBacktrack[56]);
    			try
    			{
    				alt56 = dfa56.Predict(input);
    			}
    			catch (NoViableAltException nvae)
    			{
    				DebugRecognitionException(nvae);
    				throw;
    			}
    			} finally { DebugExitDecision(56); }
    			switch (alt56)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: '--'
    				{
    				DebugLocation(247, 51);
    				string_literal168=(IToken)Match(input,128,Follow._128_in_unary_expression1411); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				string_literal168_tree = (object)adaptor.Create(string_literal168, retval);
    				adaptor.AddChild(root_0, string_literal168_tree);
    				}

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(56); }


    			}
    			break;
    		case 10:
    			DebugEnterAlt(10);
    			// cs.g:248:4: pointer_indirection_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(248, 4);
    			PushFollow(Follow._pointer_indirection_expression_in_unary_expression1417);
    			pointer_indirection_expression169=pointer_indirection_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, pointer_indirection_expression169.Tree, pointer_indirection_expression169, retval);

    			}
    			break;
    		case 11:
    			DebugEnterAlt(11);
    			// cs.g:249:4: addressof_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(249, 4);
    			PushFollow(Follow._addressof_expression_in_unary_expression1422);
    			addressof_expression170=addressof_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, addressof_expression170.Tree, addressof_expression170, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 56, unary_expression_StartIndex); }
        }
     	DebugLocation(249, 24);
    	} finally { DebugExitRule(GrammarFileName, "unary_expression"); }
    	return retval;

    }
    // $ANTLR end "unary_expression"

    public class pre_increment_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_pre_increment_expression() {}
    protected virtual void Leave_pre_increment_expression() {}

    // $ANTLR start "pre_increment_expression"
    // cs.g:250:1: pre_increment_expression : '++' unary_expression ;
    [GrammarRule("pre_increment_expression")]
    public csParser.pre_increment_expression_return pre_increment_expression()
    {

        csParser.pre_increment_expression_return retval = new csParser.pre_increment_expression_return();
        retval.Start = (IToken)input.LT(1);
        int pre_increment_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal171=null;
        csParser.unary_expression_return unary_expression172 = default(csParser.unary_expression_return);

        object string_literal171_tree=null;

    	try { DebugEnterRule(GrammarFileName, "pre_increment_expression");
    	DebugLocation(250, 25);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }
    		// cs.g:250:25: ( '++' unary_expression )
    		DebugEnterAlt(1);
    		// cs.g:251:2: '++' unary_expression
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(251, 2);
    		string_literal171=(IToken)Match(input,127,Follow._127_in_pre_increment_expression1431); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal171_tree = (object)adaptor.Create(string_literal171, retval);
    		adaptor.AddChild(root_0, string_literal171_tree);
    		}
    		DebugLocation(251, 9);
    		PushFollow(Follow._unary_expression_in_pre_increment_expression1435);
    		unary_expression172=unary_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, unary_expression172.Tree, unary_expression172, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 57, pre_increment_expression_StartIndex); }
        }
     	DebugLocation(251, 25);
    	} finally { DebugExitRule(GrammarFileName, "pre_increment_expression"); }
    	return retval;

    }
    // $ANTLR end "pre_increment_expression"

    public class pre_decrement_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_pre_decrement_expression() {}
    protected virtual void Leave_pre_decrement_expression() {}

    // $ANTLR start "pre_decrement_expression"
    // cs.g:252:1: pre_decrement_expression : '--' unary_expression ;
    [GrammarRule("pre_decrement_expression")]
    public csParser.pre_decrement_expression_return pre_decrement_expression()
    {

        csParser.pre_decrement_expression_return retval = new csParser.pre_decrement_expression_return();
        retval.Start = (IToken)input.LT(1);
        int pre_decrement_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal173=null;
        csParser.unary_expression_return unary_expression174 = default(csParser.unary_expression_return);

        object string_literal173_tree=null;

    	try { DebugEnterRule(GrammarFileName, "pre_decrement_expression");
    	DebugLocation(252, 25);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }
    		// cs.g:252:25: ( '--' unary_expression )
    		DebugEnterAlt(1);
    		// cs.g:253:2: '--' unary_expression
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(253, 2);
    		string_literal173=(IToken)Match(input,128,Follow._128_in_pre_decrement_expression1444); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal173_tree = (object)adaptor.Create(string_literal173, retval);
    		adaptor.AddChild(root_0, string_literal173_tree);
    		}
    		DebugLocation(253, 9);
    		PushFollow(Follow._unary_expression_in_pre_decrement_expression1448);
    		unary_expression174=unary_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, unary_expression174.Tree, unary_expression174, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 58, pre_decrement_expression_StartIndex); }
        }
     	DebugLocation(253, 25);
    	} finally { DebugExitRule(GrammarFileName, "pre_decrement_expression"); }
    	return retval;

    }
    // $ANTLR end "pre_decrement_expression"

    public class pointer_indirection_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_pointer_indirection_expression() {}
    protected virtual void Leave_pointer_indirection_expression() {}

    // $ANTLR start "pointer_indirection_expression"
    // cs.g:254:1: pointer_indirection_expression : '*' unary_expression ;
    [GrammarRule("pointer_indirection_expression")]
    public csParser.pointer_indirection_expression_return pointer_indirection_expression()
    {

        csParser.pointer_indirection_expression_return retval = new csParser.pointer_indirection_expression_return();
        retval.Start = (IToken)input.LT(1);
        int pointer_indirection_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal175=null;
        csParser.unary_expression_return unary_expression176 = default(csParser.unary_expression_return);

        object char_literal175_tree=null;

    	try { DebugEnterRule(GrammarFileName, "pointer_indirection_expression");
    	DebugLocation(254, 24);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }
    		// cs.g:254:31: ( '*' unary_expression )
    		DebugEnterAlt(1);
    		// cs.g:255:2: '*' unary_expression
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(255, 2);
    		char_literal175=(IToken)Match(input,111,Follow._111_in_pointer_indirection_expression1456); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal175_tree = (object)adaptor.Create(char_literal175, retval);
    		adaptor.AddChild(root_0, char_literal175_tree);
    		}
    		DebugLocation(255, 8);
    		PushFollow(Follow._unary_expression_in_pointer_indirection_expression1460);
    		unary_expression176=unary_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, unary_expression176.Tree, unary_expression176, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 59, pointer_indirection_expression_StartIndex); }
        }
     	DebugLocation(255, 24);
    	} finally { DebugExitRule(GrammarFileName, "pointer_indirection_expression"); }
    	return retval;

    }
    // $ANTLR end "pointer_indirection_expression"

    public class addressof_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_addressof_expression() {}
    protected virtual void Leave_addressof_expression() {}

    // $ANTLR start "addressof_expression"
    // cs.g:256:1: addressof_expression : '&' unary_expression ;
    [GrammarRule("addressof_expression")]
    public csParser.addressof_expression_return addressof_expression()
    {

        csParser.addressof_expression_return retval = new csParser.addressof_expression_return();
        retval.Start = (IToken)input.LT(1);
        int addressof_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal177=null;
        csParser.unary_expression_return unary_expression178 = default(csParser.unary_expression_return);

        object char_literal177_tree=null;

    	try { DebugEnterRule(GrammarFileName, "addressof_expression");
    	DebugLocation(256, 24);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }
    		// cs.g:256:21: ( '&' unary_expression )
    		DebugEnterAlt(1);
    		// cs.g:257:2: '&' unary_expression
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(257, 2);
    		char_literal177=(IToken)Match(input,129,Follow._129_in_addressof_expression1468); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal177_tree = (object)adaptor.Create(char_literal177, retval);
    		adaptor.AddChild(root_0, char_literal177_tree);
    		}
    		DebugLocation(257, 8);
    		PushFollow(Follow._unary_expression_in_addressof_expression1472);
    		unary_expression178=unary_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, unary_expression178.Tree, unary_expression178, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 60, addressof_expression_StartIndex); }
        }
     	DebugLocation(257, 24);
    	} finally { DebugExitRule(GrammarFileName, "addressof_expression"); }
    	return retval;

    }
    // $ANTLR end "addressof_expression"

    public class non_assignment_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_non_assignment_expression() {}
    protected virtual void Leave_non_assignment_expression() {}

    // $ANTLR start "non_assignment_expression"
    // cs.g:258:1: non_assignment_expression : ( conditional_expression | lambda_expression | query_expression );
    [GrammarRule("non_assignment_expression")]
    public csParser.non_assignment_expression_return non_assignment_expression()
    {

        csParser.non_assignment_expression_return retval = new csParser.non_assignment_expression_return();
        retval.Start = (IToken)input.LT(1);
        int non_assignment_expression_StartIndex = input.Index;
        object root_0 = null;

        csParser.conditional_expression_return conditional_expression179 = default(csParser.conditional_expression_return);
        csParser.lambda_expression_return lambda_expression180 = default(csParser.lambda_expression_return);
        csParser.query_expression_return query_expression181 = default(csParser.query_expression_return);


    	try { DebugEnterRule(GrammarFileName, "non_assignment_expression");
    	DebugLocation(258, 19);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }
    		// cs.g:258:26: ( conditional_expression | lambda_expression | query_expression )
    		int alt58=3;
    		try { DebugEnterDecision(58, decisionCanBacktrack[58]);
    		try
    		{
    			alt58 = dfa58.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(58); }
    		switch (alt58)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:259:2: conditional_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(259, 2);
    			PushFollow(Follow._conditional_expression_in_non_assignment_expression1480);
    			conditional_expression179=conditional_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, conditional_expression179.Tree, conditional_expression179, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:260:4: lambda_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(260, 4);
    			PushFollow(Follow._lambda_expression_in_non_assignment_expression1485);
    			lambda_expression180=lambda_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, lambda_expression180.Tree, lambda_expression180, retval);

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:261:4: query_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(261, 4);
    			PushFollow(Follow._query_expression_in_non_assignment_expression1490);
    			query_expression181=query_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, query_expression181.Tree, query_expression181, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 61, non_assignment_expression_StartIndex); }
        }
     	DebugLocation(261, 19);
    	} finally { DebugExitRule(GrammarFileName, "non_assignment_expression"); }
    	return retval;

    }
    // $ANTLR end "non_assignment_expression"

    public class assignment_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_assignment() {}
    protected virtual void Leave_assignment() {}

    // $ANTLR start "assignment"
    // cs.g:262:1: assignment : unary_expression assignment_operator expression ;
    [GrammarRule("assignment")]
    public csParser.assignment_return assignment()
    {

        csParser.assignment_return retval = new csParser.assignment_return();
        retval.Start = (IToken)input.LT(1);
        int assignment_StartIndex = input.Index;
        object root_0 = null;

        csParser.unary_expression_return unary_expression182 = default(csParser.unary_expression_return);
        csParser.assignment_operator_return assignment_operator183 = default(csParser.assignment_operator_return);
        csParser.expression_return expression184 = default(csParser.expression_return);


    	try { DebugEnterRule(GrammarFileName, "assignment");
    	DebugLocation(262, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }
    		// cs.g:262:11: ( unary_expression assignment_operator expression )
    		DebugEnterAlt(1);
    		// cs.g:263:2: unary_expression assignment_operator expression
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(263, 2);
    		PushFollow(Follow._unary_expression_in_assignment1497);
    		unary_expression182=unary_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, unary_expression182.Tree, unary_expression182, retval);
    		DebugLocation(263, 21);
    		PushFollow(Follow._assignment_operator_in_assignment1501);
    		assignment_operator183=assignment_operator();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, assignment_operator183.Tree, assignment_operator183, retval);
    		DebugLocation(263, 43);
    		PushFollow(Follow._expression_in_assignment1505);
    		expression184=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression184.Tree, expression184, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 62, assignment_StartIndex); }
        }
     	DebugLocation(264, 1);
    	} finally { DebugExitRule(GrammarFileName, "assignment"); }
    	return retval;

    }
    // $ANTLR end "assignment"

    public class variable_reference_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_variable_reference() {}
    protected virtual void Leave_variable_reference() {}

    // $ANTLR start "variable_reference"
    // cs.g:265:1: variable_reference : expression ;
    [GrammarRule("variable_reference")]
    public csParser.variable_reference_return variable_reference()
    {

        csParser.variable_reference_return retval = new csParser.variable_reference_return();
        retval.Start = (IToken)input.LT(1);
        int variable_reference_StartIndex = input.Index;
        object root_0 = null;

        csParser.expression_return expression185 = default(csParser.expression_return);


    	try { DebugEnterRule(GrammarFileName, "variable_reference");
    	DebugLocation(265, 13);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 63)) { return retval; }
    		// cs.g:265:19: ( expression )
    		DebugEnterAlt(1);
    		// cs.g:266:2: expression
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(266, 2);
    		PushFollow(Follow._expression_in_variable_reference1515);
    		expression185=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression185.Tree, expression185, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 63, variable_reference_StartIndex); }
        }
     	DebugLocation(266, 13);
    	} finally { DebugExitRule(GrammarFileName, "variable_reference"); }
    	return retval;

    }
    // $ANTLR end "variable_reference"

    public class argument_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_argument_list() {}
    protected virtual void Leave_argument_list() {}

    // $ANTLR start "argument_list"
    // cs.g:268:1: argument_list : a+= argument ( ',' a+= argument )* ;
    [GrammarRule("argument_list")]
    public csParser.argument_list_return argument_list()
    {

        csParser.argument_list_return retval = new csParser.argument_list_return();
        retval.Start = (IToken)input.LT(1);
        int argument_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal186=null;
        List list_a=null;
        csParser.argument_return a = default(csParser.argument_return);
        object char_literal186_tree=null;

    	try { DebugEnterRule(GrammarFileName, "argument_list");
    	DebugLocation(268, 35);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 64)) { return retval; }
    		// cs.g:268:14: (a+= argument ( ',' a+= argument )* )
    		DebugEnterAlt(1);
    		// cs.g:269:2: a+= argument ( ',' a+= argument )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(269, 4);
    		PushFollow(Follow._argument_in_argument_list1530);
    		a=argument();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, a.Tree, a, retval);
    		if (list_a==null) list_a=new ArrayList();
    		list_a.Add(a.Tree);

    		DebugLocation(269, 16);
    		// cs.g:269:16: ( ',' a+= argument )*
    		try { DebugEnterSubRule(59);
    		while (true)
    		{
    			int alt59=2;
    			try { DebugEnterDecision(59, decisionCanBacktrack[59]);
    			int LA59_0 = input.LA(1);

    			if ((LA59_0==98))
    			{
    				alt59=1;
    			}


    			} finally { DebugExitDecision(59); }
    			switch ( alt59 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:269:17: ',' a+= argument
    				{
    				DebugLocation(269, 17);
    				char_literal186=(IToken)Match(input,98,Follow._98_in_argument_list1533); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal186_tree = (object)adaptor.Create(char_literal186, retval);
    				adaptor.AddChild(root_0, char_literal186_tree);
    				}
    				DebugLocation(269, 23);
    				PushFollow(Follow._argument_in_argument_list1539);
    				a=argument();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, a.Tree, a, retval);
    				if (list_a==null) list_a=new ArrayList();
    				list_a.Add(a.Tree);


    				}
    				break;

    			default:
    				goto loop59;
    			}
    		}

    		loop59:
    			;

    		} finally { DebugExitSubRule(59); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 64, argument_list_StartIndex); }
        }
     	DebugLocation(269, 35);
    	} finally { DebugExitRule(GrammarFileName, "argument_list"); }
    	return retval;

    }
    // $ANTLR end "argument_list"

    public class argument_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_argument() {}
    protected virtual void Leave_argument() {}

    // $ANTLR start "argument"
    // cs.g:271:1: argument : ( argument_name argument_value | argument_value );
    [GrammarRule("argument")]
    public csParser.argument_return argument()
    {

        csParser.argument_return retval = new csParser.argument_return();
        retval.Start = (IToken)input.LT(1);
        int argument_StartIndex = input.Index;
        object root_0 = null;

        csParser.argument_name_return argument_name187 = default(csParser.argument_name_return);
        csParser.argument_value_return argument_value188 = default(csParser.argument_value_return);
        csParser.argument_value_return argument_value189 = default(csParser.argument_value_return);


    	try { DebugEnterRule(GrammarFileName, "argument");
    	DebugLocation(271, 17);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 65)) { return retval; }
    		// cs.g:271:9: ( argument_name argument_value | argument_value )
    		int alt60=2;
    		try { DebugEnterDecision(60, decisionCanBacktrack[60]);
    		switch (input.LA(1))
    		{
    		case IDENTIFIER:
    			{
    			int LA60_1 = input.LA(2);

    			if ((LA60_1==100))
    			{
    				alt60=1;
    			}
    			else if ((LA60_1==EOF||LA60_1==IDENTIFIER||(LA60_1>=DOT && LA60_1<=GT)||LA60_1==SET||LA60_1==RPAREN||LA60_1==89||(LA60_1>=95 && LA60_1<=98)||(LA60_1>=101 && LA60_1<=107)||(LA60_1>=109 && LA60_1<=112)||(LA60_1>=123 && LA60_1<=124)||(LA60_1>=127 && LA60_1<=129)||(LA60_1>=146 && LA60_1<=169)||(LA60_1>=175 && LA60_1<=187)||LA60_1==199||(LA60_1>=201 && LA60_1<=202)||LA60_1==208||(LA60_1>=225 && LA60_1<=226)))
    			{
    				alt60=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 60, 1, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case 175:
    			{
    			int LA60_2 = input.LA(2);

    			if ((LA60_2==100))
    			{
    				alt60=1;
    			}
    			else if ((LA60_2==EOF||LA60_2==IDENTIFIER||(LA60_2>=DOT && LA60_2<=GT)||LA60_2==SET||LA60_2==RPAREN||LA60_2==89||(LA60_2>=95 && LA60_2<=98)||(LA60_2>=101 && LA60_2<=107)||(LA60_2>=109 && LA60_2<=124)||(LA60_2>=127 && LA60_2<=129)||(LA60_2>=132 && LA60_2<=137)||(LA60_2>=146 && LA60_2<=169)||(LA60_2>=175 && LA60_2<=187)||LA60_2==199||(LA60_2>=201 && LA60_2<=202)||LA60_2==208||(LA60_2>=225 && LA60_2<=226)))
    			{
    				alt60=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 60, 2, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case Real_literal:
    		case NUMBER:
    		case Hex_number:
    		case Character_literal:
    		case STRINGLITERAL:
    		case Verbatim_string_literal:
    		case TRUE:
    		case FALSE:
    		case NULL:
    		case MINUS:
    		case 90:
    		case 91:
    		case 110:
    		case 111:
    		case 114:
    		case 115:
    		case 116:
    		case 117:
    		case 118:
    		case 119:
    		case 120:
    		case 121:
    		case 122:
    		case 124:
    		case 125:
    		case 126:
    		case 127:
    		case 128:
    		case 129:
    		case 130:
    		case 131:
    		case 132:
    		case 133:
    		case 134:
    		case 135:
    		case 136:
    		case 137:
    		case 138:
    		case 139:
    		case 140:
    		case 141:
    		case 142:
    		case 143:
    		case 144:
    			{
    			alt60=2;
    			}
    			break;
    		case SET:
    		case 95:
    		case 101:
    		case 102:
    		case 103:
    		case 104:
    		case 105:
    		case 106:
    		case 107:
    		case 109:
    		case 176:
    		case 177:
    		case 178:
    		case 179:
    		case 180:
    		case 181:
    		case 182:
    		case 183:
    		case 184:
    		case 185:
    		case 186:
    		case 187:
    		case 199:
    		case 201:
    		case 202:
    		case 208:
    		case 225:
    		case 226:
    			{
    			int LA60_4 = input.LA(2);

    			if ((LA60_4==100))
    			{
    				alt60=1;
    			}
    			else if ((LA60_4==EOF||LA60_4==IDENTIFIER||(LA60_4>=DOT && LA60_4<=GT)||LA60_4==SET||LA60_4==RPAREN||LA60_4==89||(LA60_4>=95 && LA60_4<=98)||(LA60_4>=101 && LA60_4<=107)||(LA60_4>=109 && LA60_4<=112)||(LA60_4>=123 && LA60_4<=124)||(LA60_4>=127 && LA60_4<=129)||(LA60_4>=146 && LA60_4<=169)||(LA60_4>=175 && LA60_4<=187)||LA60_4==199||(LA60_4>=201 && LA60_4<=202)||LA60_4==208||(LA60_4>=225 && LA60_4<=226)))
    			{
    				alt60=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 60, 4, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		default:
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 60, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(60); }
    		switch (alt60)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:272:2: argument_name argument_value
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(272, 2);
    			PushFollow(Follow._argument_name_in_argument1549);
    			argument_name187=argument_name();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, argument_name187.Tree, argument_name187, retval);
    			DebugLocation(272, 18);
    			PushFollow(Follow._argument_value_in_argument1553);
    			argument_value188=argument_value();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, argument_value188.Tree, argument_value188, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:273:4: argument_value
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(273, 4);
    			PushFollow(Follow._argument_value_in_argument1558);
    			argument_value189=argument_value();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, argument_value189.Tree, argument_value189, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 65, argument_StartIndex); }
        }
     	DebugLocation(273, 17);
    	} finally { DebugExitRule(GrammarFileName, "argument"); }
    	return retval;

    }
    // $ANTLR end "argument"

    public class argument_name_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_argument_name() {}
    protected virtual void Leave_argument_name() {}

    // $ANTLR start "argument_name"
    // cs.g:274:1: argument_name : identifier ':' ;
    [GrammarRule("argument_name")]
    public csParser.argument_name_return argument_name()
    {

        csParser.argument_name_return retval = new csParser.argument_name_return();
        retval.Start = (IToken)input.LT(1);
        int argument_name_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal191=null;
        csParser.identifier_return identifier190 = default(csParser.identifier_return);

        object char_literal191_tree=null;

    	try { DebugEnterRule(GrammarFileName, "argument_name");
    	DebugLocation(274, 17);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 66)) { return retval; }
    		// cs.g:274:14: ( identifier ':' )
    		DebugEnterAlt(1);
    		// cs.g:275:2: identifier ':'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(275, 2);
    		PushFollow(Follow._identifier_in_argument_name1565);
    		identifier190=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier190.Tree, identifier190, retval);
    		DebugLocation(275, 15);
    		char_literal191=(IToken)Match(input,100,Follow._100_in_argument_name1569); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal191_tree = (object)adaptor.Create(char_literal191, retval);
    		adaptor.AddChild(root_0, char_literal191_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 66, argument_name_StartIndex); }
        }
     	DebugLocation(275, 17);
    	} finally { DebugExitRule(GrammarFileName, "argument_name"); }
    	return retval;

    }
    // $ANTLR end "argument_name"

    public class argument_value_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_argument_value() {}
    protected virtual void Leave_argument_value() {}

    // $ANTLR start "argument_value"
    // cs.g:276:1: argument_value : ( expression | ref_variable_reference | 'out' variable_reference );
    [GrammarRule("argument_value")]
    public csParser.argument_value_return argument_value()
    {

        csParser.argument_value_return retval = new csParser.argument_value_return();
        retval.Start = (IToken)input.LT(1);
        int argument_value_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal194=null;
        csParser.expression_return expression192 = default(csParser.expression_return);
        csParser.ref_variable_reference_return ref_variable_reference193 = default(csParser.ref_variable_reference_return);
        csParser.variable_reference_return variable_reference195 = default(csParser.variable_reference_return);

        object string_literal194_tree=null;

    	try { DebugEnterRule(GrammarFileName, "argument_value");
    	DebugLocation(276, 30);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 67)) { return retval; }
    		// cs.g:276:15: ( expression | ref_variable_reference | 'out' variable_reference )
    		int alt61=3;
    		try { DebugEnterDecision(61, decisionCanBacktrack[61]);
    		switch (input.LA(1))
    		{
    		case IDENTIFIER:
    		case Real_literal:
    		case NUMBER:
    		case Hex_number:
    		case Character_literal:
    		case STRINGLITERAL:
    		case Verbatim_string_literal:
    		case TRUE:
    		case FALSE:
    		case NULL:
    		case MINUS:
    		case SET:
    		case 90:
    		case 91:
    		case 95:
    		case 101:
    		case 102:
    		case 103:
    		case 104:
    		case 105:
    		case 106:
    		case 107:
    		case 109:
    		case 110:
    		case 111:
    		case 114:
    		case 115:
    		case 116:
    		case 117:
    		case 118:
    		case 119:
    		case 120:
    		case 121:
    		case 122:
    		case 124:
    		case 125:
    		case 126:
    		case 127:
    		case 128:
    		case 129:
    		case 132:
    		case 133:
    		case 134:
    		case 135:
    		case 136:
    		case 137:
    		case 138:
    		case 139:
    		case 140:
    		case 141:
    		case 142:
    		case 143:
    		case 144:
    		case 175:
    		case 176:
    		case 177:
    		case 178:
    		case 179:
    		case 180:
    		case 181:
    		case 182:
    		case 183:
    		case 184:
    		case 185:
    		case 186:
    		case 187:
    		case 199:
    		case 201:
    		case 202:
    		case 208:
    		case 225:
    		case 226:
    			{
    			alt61=1;
    			}
    			break;
    		case 131:
    			{
    			alt61=2;
    			}
    			break;
    		case 130:
    			{
    			alt61=3;
    			}
    			break;
    		default:
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 61, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(61); }
    		switch (alt61)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:277:2: expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(277, 2);
    			PushFollow(Follow._expression_in_argument_value1577);
    			expression192=expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression192.Tree, expression192, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:278:4: ref_variable_reference
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(278, 4);
    			PushFollow(Follow._ref_variable_reference_in_argument_value1583);
    			ref_variable_reference193=ref_variable_reference();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, ref_variable_reference193.Tree, ref_variable_reference193, retval);

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:279:4: 'out' variable_reference
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(279, 4);
    			string_literal194=(IToken)Match(input,130,Follow._130_in_argument_value1589); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal194_tree = (object)adaptor.Create(string_literal194, retval);
    			adaptor.AddChild(root_0, string_literal194_tree);
    			}
    			DebugLocation(279, 12);
    			PushFollow(Follow._variable_reference_in_argument_value1593);
    			variable_reference195=variable_reference();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, variable_reference195.Tree, variable_reference195, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 67, argument_value_StartIndex); }
        }
     	DebugLocation(279, 30);
    	} finally { DebugExitRule(GrammarFileName, "argument_value"); }
    	return retval;

    }
    // $ANTLR end "argument_value"

    public class ref_variable_reference_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_ref_variable_reference() {}
    protected virtual void Leave_ref_variable_reference() {}

    // $ANTLR start "ref_variable_reference"
    // cs.g:280:1: ref_variable_reference : ( 'ref' '(' ( ( namespace_or_type_name | predefined_type ) ( '*' )* ( rank_specifiers )? | 'void' ( '*' )+ ( rank_specifiers )? ) ')' ref_variable_reference | 'ref' variable_reference );
    [GrammarRule("ref_variable_reference")]
    public csParser.ref_variable_reference_return ref_variable_reference()
    {

        csParser.ref_variable_reference_return retval = new csParser.ref_variable_reference_return();
        retval.Start = (IToken)input.LT(1);
        int ref_variable_reference_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal196=null;
        IToken char_literal197=null;
        IToken char_literal200=null;
        IToken string_literal202=null;
        IToken char_literal203=null;
        IToken char_literal205=null;
        IToken string_literal207=null;
        csParser.namespace_or_type_name_return namespace_or_type_name198 = default(csParser.namespace_or_type_name_return);
        csParser.predefined_type_return predefined_type199 = default(csParser.predefined_type_return);
        csParser.rank_specifiers_return rank_specifiers201 = default(csParser.rank_specifiers_return);
        csParser.rank_specifiers_return rank_specifiers204 = default(csParser.rank_specifiers_return);
        csParser.ref_variable_reference_return ref_variable_reference206 = default(csParser.ref_variable_reference_return);
        csParser.variable_reference_return variable_reference208 = default(csParser.variable_reference_return);

        object string_literal196_tree=null;
        object char_literal197_tree=null;
        object char_literal200_tree=null;
        object string_literal202_tree=null;
        object char_literal203_tree=null;
        object char_literal205_tree=null;
        object string_literal207_tree=null;

    	try { DebugEnterRule(GrammarFileName, "ref_variable_reference");
    	DebugLocation(280, 27);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 68)) { return retval; }
    		// cs.g:280:23: ( 'ref' '(' ( ( namespace_or_type_name | predefined_type ) ( '*' )* ( rank_specifiers )? | 'void' ( '*' )+ ( rank_specifiers )? ) ')' ref_variable_reference | 'ref' variable_reference )
    		int alt68=2;
    		try { DebugEnterDecision(68, decisionCanBacktrack[68]);
    		int LA68_0 = input.LA(1);

    		if ((LA68_0==131))
    		{
    			int LA68_1 = input.LA(2);

    			if ((EvaluatePredicate(synpred111_cs_fragment)))
    			{
    				alt68=1;
    			}
    			else if ((true))
    			{
    				alt68=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 68, 1, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 68, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(68); }
    		switch (alt68)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:281:2: 'ref' '(' ( ( namespace_or_type_name | predefined_type ) ( '*' )* ( rank_specifiers )? | 'void' ( '*' )+ ( rank_specifiers )? ) ')' ref_variable_reference
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(281, 2);
    			string_literal196=(IToken)Match(input,131,Follow._131_in_ref_variable_reference1601); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal196_tree = (object)adaptor.Create(string_literal196, retval);
    			adaptor.AddChild(root_0, string_literal196_tree);
    			}
    			DebugLocation(281, 8);
    			char_literal197=(IToken)Match(input,110,Follow._110_in_ref_variable_reference1603); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal197_tree = (object)adaptor.Create(char_literal197, retval);
    			adaptor.AddChild(root_0, char_literal197_tree);
    			}
    			DebugLocation(282, 3);
    			// cs.g:282:3: ( ( namespace_or_type_name | predefined_type ) ( '*' )* ( rank_specifiers )? | 'void' ( '*' )+ ( rank_specifiers )? )
    			int alt67=2;
    			try { DebugEnterSubRule(67);
    			try { DebugEnterDecision(67, decisionCanBacktrack[67]);
    			int LA67_0 = input.LA(1);

    			if ((LA67_0==IDENTIFIER||LA67_0==SET||LA67_0==95||(LA67_0>=101 && LA67_0<=107)||LA67_0==109||(LA67_0>=114 && LA67_0<=122)||(LA67_0>=132 && LA67_0<=137)||(LA67_0>=175 && LA67_0<=187)||LA67_0==199||(LA67_0>=201 && LA67_0<=202)||LA67_0==208||(LA67_0>=225 && LA67_0<=226)))
    			{
    				alt67=1;
    			}
    			else if ((LA67_0==113))
    			{
    				alt67=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 67, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			} finally { DebugExitDecision(67); }
    			switch (alt67)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:282:4: ( namespace_or_type_name | predefined_type ) ( '*' )* ( rank_specifiers )?
    				{
    				DebugLocation(282, 4);
    				// cs.g:282:4: ( namespace_or_type_name | predefined_type )
    				int alt62=2;
    				try { DebugEnterSubRule(62);
    				try { DebugEnterDecision(62, decisionCanBacktrack[62]);
    				int LA62_0 = input.LA(1);

    				if ((LA62_0==IDENTIFIER||LA62_0==SET||LA62_0==95||(LA62_0>=101 && LA62_0<=107)||LA62_0==109||(LA62_0>=175 && LA62_0<=187)||LA62_0==199||(LA62_0>=201 && LA62_0<=202)||LA62_0==208||(LA62_0>=225 && LA62_0<=226)))
    				{
    					alt62=1;
    				}
    				else if (((LA62_0>=114 && LA62_0<=122)||(LA62_0>=132 && LA62_0<=137)))
    				{
    					alt62=2;
    				}
    				else
    				{
    					if (state.backtracking>0) {state.failed=true; return retval;}
    					NoViableAltException nvae = new NoViableAltException("", 62, 0, input);

    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    				} finally { DebugExitDecision(62); }
    				switch (alt62)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:282:7: namespace_or_type_name
    					{
    					DebugLocation(282, 7);
    					PushFollow(Follow._namespace_or_type_name_in_ref_variable_reference1613);
    					namespace_or_type_name198=namespace_or_type_name();
    					PopFollow();
    					if (state.failed) return retval;
    					if ( (state.backtracking==0) ) adaptor.AddChild(root_0, namespace_or_type_name198.Tree, namespace_or_type_name198, retval);

    					}
    					break;
    				case 2:
    					DebugEnterAlt(2);
    					// cs.g:282:36: predefined_type
    					{
    					DebugLocation(282, 36);
    					PushFollow(Follow._predefined_type_in_ref_variable_reference1621);
    					predefined_type199=predefined_type();
    					PopFollow();
    					if (state.failed) return retval;
    					if ( (state.backtracking==0) ) adaptor.AddChild(root_0, predefined_type199.Tree, predefined_type199, retval);

    					}
    					break;

    				}
    				} finally { DebugExitSubRule(62); }

    				DebugLocation(282, 56);
    				// cs.g:282:56: ( '*' )*
    				try { DebugEnterSubRule(63);
    				while (true)
    				{
    					int alt63=2;
    					try { DebugEnterDecision(63, decisionCanBacktrack[63]);
    					int LA63_0 = input.LA(1);

    					if ((LA63_0==111))
    					{
    						alt63=1;
    					}


    					} finally { DebugExitDecision(63); }
    					switch ( alt63 )
    					{
    					case 1:
    						DebugEnterAlt(1);
    						// cs.g:0:0: '*'
    						{
    						DebugLocation(282, 56);
    						char_literal200=(IToken)Match(input,111,Follow._111_in_ref_variable_reference1627); if (state.failed) return retval;
    						if ( state.backtracking==0 ) {
    						char_literal200_tree = (object)adaptor.Create(char_literal200, retval);
    						adaptor.AddChild(root_0, char_literal200_tree);
    						}

    						}
    						break;

    					default:
    						goto loop63;
    					}
    				}

    				loop63:
    					;

    				} finally { DebugExitSubRule(63); }

    				DebugLocation(282, 63);
    				// cs.g:282:63: ( rank_specifiers )?
    				int alt64=2;
    				try { DebugEnterSubRule(64);
    				try { DebugEnterDecision(64, decisionCanBacktrack[64]);
    				int LA64_0 = input.LA(1);

    				if ((LA64_0==97))
    				{
    					alt64=1;
    				}
    				} finally { DebugExitDecision(64); }
    				switch (alt64)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:0:0: rank_specifiers
    					{
    					DebugLocation(282, 63);
    					PushFollow(Follow._rank_specifiers_in_ref_variable_reference1632);
    					rank_specifiers201=rank_specifiers();
    					PopFollow();
    					if (state.failed) return retval;
    					if ( (state.backtracking==0) ) adaptor.AddChild(root_0, rank_specifiers201.Tree, rank_specifiers201, retval);

    					}
    					break;

    				}
    				} finally { DebugExitSubRule(64); }


    				}
    				break;
    			case 2:
    				DebugEnterAlt(2);
    				// cs.g:283:5: 'void' ( '*' )+ ( rank_specifiers )?
    				{
    				DebugLocation(283, 5);
    				string_literal202=(IToken)Match(input,113,Follow._113_in_ref_variable_reference1639); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				string_literal202_tree = (object)adaptor.Create(string_literal202, retval);
    				adaptor.AddChild(root_0, string_literal202_tree);
    				}
    				DebugLocation(283, 14);
    				// cs.g:283:14: ( '*' )+
    				int cnt65=0;
    				try { DebugEnterSubRule(65);
    				while (true)
    				{
    					int alt65=2;
    					try { DebugEnterDecision(65, decisionCanBacktrack[65]);
    					int LA65_0 = input.LA(1);

    					if ((LA65_0==111))
    					{
    						alt65=1;
    					}


    					} finally { DebugExitDecision(65); }
    					switch (alt65)
    					{
    					case 1:
    						DebugEnterAlt(1);
    						// cs.g:0:0: '*'
    						{
    						DebugLocation(283, 14);
    						char_literal203=(IToken)Match(input,111,Follow._111_in_ref_variable_reference1643); if (state.failed) return retval;
    						if ( state.backtracking==0 ) {
    						char_literal203_tree = (object)adaptor.Create(char_literal203, retval);
    						adaptor.AddChild(root_0, char_literal203_tree);
    						}

    						}
    						break;

    					default:
    						if (cnt65 >= 1)
    							goto loop65;

    						if (state.backtracking>0) {state.failed=true; return retval;}
    						EarlyExitException eee65 = new EarlyExitException( 65, input );
    						DebugRecognitionException(eee65);
    						throw eee65;
    					}
    					cnt65++;
    				}
    				loop65:
    					;

    				} finally { DebugExitSubRule(65); }

    				DebugLocation(283, 21);
    				// cs.g:283:21: ( rank_specifiers )?
    				int alt66=2;
    				try { DebugEnterSubRule(66);
    				try { DebugEnterDecision(66, decisionCanBacktrack[66]);
    				int LA66_0 = input.LA(1);

    				if ((LA66_0==97))
    				{
    					alt66=1;
    				}
    				} finally { DebugExitDecision(66); }
    				switch (alt66)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:0:0: rank_specifiers
    					{
    					DebugLocation(283, 21);
    					PushFollow(Follow._rank_specifiers_in_ref_variable_reference1648);
    					rank_specifiers204=rank_specifiers();
    					PopFollow();
    					if (state.failed) return retval;
    					if ( (state.backtracking==0) ) adaptor.AddChild(root_0, rank_specifiers204.Tree, rank_specifiers204, retval);

    					}
    					break;

    				}
    				} finally { DebugExitSubRule(66); }


    				}
    				break;

    			}
    			} finally { DebugExitSubRule(67); }

    			DebugLocation(284, 7);
    			char_literal205=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_ref_variable_reference1657), "RPAREN"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal205_tree = (object)adaptor.Create(char_literal205, retval);
    			adaptor.AddChild(root_0, char_literal205_tree);
    			}
    			DebugLocation(284, 13);
    			PushFollow(Follow._ref_variable_reference_in_ref_variable_reference1661);
    			ref_variable_reference206=ref_variable_reference();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, ref_variable_reference206.Tree, ref_variable_reference206, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:285:4: 'ref' variable_reference
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(285, 4);
    			string_literal207=(IToken)Match(input,131,Follow._131_in_ref_variable_reference1666); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal207_tree = (object)adaptor.Create(string_literal207, retval);
    			adaptor.AddChild(root_0, string_literal207_tree);
    			}
    			DebugLocation(285, 10);
    			PushFollow(Follow._variable_reference_in_ref_variable_reference1668);
    			variable_reference208=variable_reference();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, variable_reference208.Tree, variable_reference208, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 68, ref_variable_reference_StartIndex); }
        }
     	DebugLocation(285, 27);
    	} finally { DebugExitRule(GrammarFileName, "ref_variable_reference"); }
    	return retval;

    }
    // $ANTLR end "ref_variable_reference"

    public class primary_or_array_creation_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_primary_or_array_creation_expression() {}
    protected virtual void Leave_primary_or_array_creation_expression() {}

    // $ANTLR start "primary_or_array_creation_expression"
    // cs.g:287:1: primary_or_array_creation_expression : ( primary_expression | array_creation_expression );
    [GrammarRule("primary_or_array_creation_expression")]
    public csParser.primary_or_array_creation_expression_return primary_or_array_creation_expression()
    {

        csParser.primary_or_array_creation_expression_return retval = new csParser.primary_or_array_creation_expression_return();
        retval.Start = (IToken)input.LT(1);
        int primary_or_array_creation_expression_StartIndex = input.Index;
        object root_0 = null;

        csParser.primary_expression_return primary_expression209 = default(csParser.primary_expression_return);
        csParser.array_creation_expression_return array_creation_expression210 = default(csParser.array_creation_expression_return);


    	try { DebugEnterRule(GrammarFileName, "primary_or_array_creation_expression");
    	DebugLocation(287, 29);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 69)) { return retval; }
    		// cs.g:287:37: ( primary_expression | array_creation_expression )
    		int alt69=2;
    		try { DebugEnterDecision(69, decisionCanBacktrack[69]);
    		try
    		{
    			alt69 = dfa69.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(69); }
    		switch (alt69)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:288:2: primary_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(288, 2);
    			PushFollow(Follow._primary_expression_in_primary_or_array_creation_expression1678);
    			primary_expression209=primary_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, primary_expression209.Tree, primary_expression209, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:289:4: array_creation_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(289, 4);
    			PushFollow(Follow._array_creation_expression_in_primary_or_array_creation_expression1684);
    			array_creation_expression210=array_creation_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, array_creation_expression210.Tree, array_creation_expression210, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 69, primary_or_array_creation_expression_StartIndex); }
        }
     	DebugLocation(289, 29);
    	} finally { DebugExitRule(GrammarFileName, "primary_or_array_creation_expression"); }
    	return retval;

    }
    // $ANTLR end "primary_or_array_creation_expression"

    public class texpr_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_texpr() {}
    protected virtual void Leave_texpr() {}

    // $ANTLR start "texpr"
    // cs.g:291:1: texpr : tmember ;
    [GrammarRule("texpr")]
    public csParser.texpr_return texpr()
    {

        csParser.texpr_return retval = new csParser.texpr_return();
        retval.Start = (IToken)input.LT(1);
        int texpr_StartIndex = input.Index;
        object root_0 = null;

        csParser.tmember_return tmember211 = default(csParser.tmember_return);


    	try { DebugEnterRule(GrammarFileName, "texpr");
    	DebugLocation(291, 9);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 70)) { return retval; }
    		// cs.g:291:6: ( tmember )
    		DebugEnterAlt(1);
    		// cs.g:292:2: tmember
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(292, 2);
    		PushFollow(Follow._tmember_in_texpr1693);
    		tmember211=tmember();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, tmember211.Tree, tmember211, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 70, texpr_StartIndex); }
        }
     	DebugLocation(292, 9);
    	} finally { DebugExitRule(GrammarFileName, "texpr"); }
    	return retval;

    }
    // $ANTLR end "texpr"

    public class tinvocation_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_tinvocation() {}
    protected virtual void Leave_tinvocation() {}

    // $ANTLR start "tinvocation"
    // cs.g:297:1: tinvocation : tmember ( tinvocation_part )? ;
    [GrammarRule("tinvocation")]
    public csParser.tinvocation_return tinvocation()
    {

        csParser.tinvocation_return retval = new csParser.tinvocation_return();
        retval.Start = (IToken)input.LT(1);
        int tinvocation_StartIndex = input.Index;
        object root_0 = null;

        csParser.tmember_return tmember212 = default(csParser.tmember_return);
        csParser.tinvocation_part_return tinvocation_part213 = default(csParser.tinvocation_part_return);


    	try { DebugEnterRule(GrammarFileName, "tinvocation");
    	DebugLocation(297, 29);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 71)) { return retval; }
    		// cs.g:297:12: ( tmember ( tinvocation_part )? )
    		DebugEnterAlt(1);
    		// cs.g:298:2: tmember ( tinvocation_part )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(298, 2);
    		PushFollow(Follow._tmember_in_tinvocation1705);
    		tmember212=tmember();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, tmember212.Tree, tmember212, retval);
    		DebugLocation(298, 12);
    		// cs.g:298:12: ( tinvocation_part )?
    		int alt70=2;
    		try { DebugEnterSubRule(70);
    		try { DebugEnterDecision(70, decisionCanBacktrack[70]);
    		int LA70_0 = input.LA(1);

    		if ((LA70_0==110))
    		{
    			alt70=1;
    		}
    		} finally { DebugExitDecision(70); }
    		switch (alt70)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: tinvocation_part
    			{
    			DebugLocation(298, 12);
    			PushFollow(Follow._tinvocation_part_in_tinvocation1709);
    			tinvocation_part213=tinvocation_part();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, tinvocation_part213.Tree, tinvocation_part213, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(70); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 71, tinvocation_StartIndex); }
        }
     	DebugLocation(298, 29);
    	} finally { DebugExitRule(GrammarFileName, "tinvocation"); }
    	return retval;

    }
    // $ANTLR end "tinvocation"

    public class tinvocation_part_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_tinvocation_part() {}
    protected virtual void Leave_tinvocation_part() {}

    // $ANTLR start "tinvocation_part"
    // cs.g:299:1: tinvocation_part : ( ( arguments )+ ( access_operator tinvocation ) | ( arguments )+ telement_part | ( arguments )+ );
    [GrammarRule("tinvocation_part")]
    public csParser.tinvocation_part_return tinvocation_part()
    {

        csParser.tinvocation_part_return retval = new csParser.tinvocation_part_return();
        retval.Start = (IToken)input.LT(1);
        int tinvocation_part_StartIndex = input.Index;
        object root_0 = null;

        csParser.arguments_return arguments214 = default(csParser.arguments_return);
        csParser.access_operator_return access_operator215 = default(csParser.access_operator_return);
        csParser.tinvocation_return tinvocation216 = default(csParser.tinvocation_return);
        csParser.arguments_return arguments217 = default(csParser.arguments_return);
        csParser.telement_part_return telement_part218 = default(csParser.telement_part_return);
        csParser.arguments_return arguments219 = default(csParser.arguments_return);


    	try { DebugEnterRule(GrammarFileName, "tinvocation_part");
    	DebugLocation(299, 14);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 72)) { return retval; }
    		// cs.g:299:17: ( ( arguments )+ ( access_operator tinvocation ) | ( arguments )+ telement_part | ( arguments )+ )
    		int alt74=3;
    		try { DebugEnterDecision(74, decisionCanBacktrack[74]);
    		int LA74_0 = input.LA(1);

    		if ((LA74_0==110))
    		{
    			int LA74_1 = input.LA(2);

    			if ((EvaluatePredicate(synpred115_cs_fragment)))
    			{
    				alt74=1;
    			}
    			else if ((EvaluatePredicate(synpred117_cs_fragment)))
    			{
    				alt74=2;
    			}
    			else if ((true))
    			{
    				alt74=3;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 74, 1, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 74, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(74); }
    		switch (alt74)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:300:2: ( arguments )+ ( access_operator tinvocation )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(300, 2);
    			// cs.g:300:2: ( arguments )+
    			int cnt71=0;
    			try { DebugEnterSubRule(71);
    			while (true)
    			{
    				int alt71=2;
    				try { DebugEnterDecision(71, decisionCanBacktrack[71]);
    				int LA71_0 = input.LA(1);

    				if ((LA71_0==110))
    				{
    					alt71=1;
    				}


    				} finally { DebugExitDecision(71); }
    				switch (alt71)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:0:0: arguments
    					{
    					DebugLocation(300, 2);
    					PushFollow(Follow._arguments_in_tinvocation_part1718);
    					arguments214=arguments();
    					PopFollow();
    					if (state.failed) return retval;
    					if ( (state.backtracking==0) ) adaptor.AddChild(root_0, arguments214.Tree, arguments214, retval);

    					}
    					break;

    				default:
    					if (cnt71 >= 1)
    						goto loop71;

    					if (state.backtracking>0) {state.failed=true; return retval;}
    					EarlyExitException eee71 = new EarlyExitException( 71, input );
    					DebugRecognitionException(eee71);
    					throw eee71;
    				}
    				cnt71++;
    			}
    			loop71:
    				;

    			} finally { DebugExitSubRule(71); }

    			DebugLocation(300, 15);
    			// cs.g:300:15: ( access_operator tinvocation )
    			DebugEnterAlt(1);
    			// cs.g:300:16: access_operator tinvocation
    			{
    			DebugLocation(300, 31);
    			PushFollow(Follow._access_operator_in_tinvocation_part1724);
    			access_operator215=access_operator();
    			PopFollow();
    			if (state.failed) return retval;
    			DebugLocation(300, 35);
    			PushFollow(Follow._tinvocation_in_tinvocation_part1729);
    			tinvocation216=tinvocation();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, tinvocation216.Tree, tinvocation216, retval);

    			}


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:301:4: ( arguments )+ telement_part
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(301, 4);
    			// cs.g:301:4: ( arguments )+
    			int cnt72=0;
    			try { DebugEnterSubRule(72);
    			while (true)
    			{
    				int alt72=2;
    				try { DebugEnterDecision(72, decisionCanBacktrack[72]);
    				int LA72_0 = input.LA(1);

    				if ((LA72_0==110))
    				{
    					alt72=1;
    				}


    				} finally { DebugExitDecision(72); }
    				switch (alt72)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:0:0: arguments
    					{
    					DebugLocation(301, 4);
    					PushFollow(Follow._arguments_in_tinvocation_part1735);
    					arguments217=arguments();
    					PopFollow();
    					if (state.failed) return retval;
    					if ( (state.backtracking==0) ) adaptor.AddChild(root_0, arguments217.Tree, arguments217, retval);

    					}
    					break;

    				default:
    					if (cnt72 >= 1)
    						goto loop72;

    					if (state.backtracking>0) {state.failed=true; return retval;}
    					EarlyExitException eee72 = new EarlyExitException( 72, input );
    					DebugRecognitionException(eee72);
    					throw eee72;
    				}
    				cnt72++;
    			}
    			loop72:
    				;

    			} finally { DebugExitSubRule(72); }

    			DebugLocation(301, 17);
    			PushFollow(Follow._telement_part_in_tinvocation_part1740);
    			telement_part218=telement_part();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, telement_part218.Tree, telement_part218, retval);

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:302:4: ( arguments )+
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(302, 4);
    			// cs.g:302:4: ( arguments )+
    			int cnt73=0;
    			try { DebugEnterSubRule(73);
    			while (true)
    			{
    				int alt73=2;
    				try { DebugEnterDecision(73, decisionCanBacktrack[73]);
    				int LA73_0 = input.LA(1);

    				if ((LA73_0==110))
    				{
    					alt73=1;
    				}


    				} finally { DebugExitDecision(73); }
    				switch (alt73)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:0:0: arguments
    					{
    					DebugLocation(302, 4);
    					PushFollow(Follow._arguments_in_tinvocation_part1745);
    					arguments219=arguments();
    					PopFollow();
    					if (state.failed) return retval;
    					if ( (state.backtracking==0) ) adaptor.AddChild(root_0, arguments219.Tree, arguments219, retval);

    					}
    					break;

    				default:
    					if (cnt73 >= 1)
    						goto loop73;

    					if (state.backtracking>0) {state.failed=true; return retval;}
    					EarlyExitException eee73 = new EarlyExitException( 73, input );
    					DebugRecognitionException(eee73);
    					throw eee73;
    				}
    				cnt73++;
    			}
    			loop73:
    				;

    			} finally { DebugExitSubRule(73); }


    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 72, tinvocation_part_StartIndex); }
        }
     	DebugLocation(302, 14);
    	} finally { DebugExitRule(GrammarFileName, "tinvocation_part"); }
    	return retval;

    }
    // $ANTLR end "tinvocation_part"

    public class telement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_telement() {}
    protected virtual void Leave_telement() {}

    // $ANTLR start "telement"
    // cs.g:304:1: telement : tmember ( telement_part )? ;
    [GrammarRule("telement")]
    public csParser.telement_return telement()
    {

        csParser.telement_return retval = new csParser.telement_return();
        retval.Start = (IToken)input.LT(1);
        int telement_StartIndex = input.Index;
        object root_0 = null;

        csParser.tmember_return tmember220 = default(csParser.tmember_return);
        csParser.telement_part_return telement_part221 = default(csParser.telement_part_return);


    	try { DebugEnterRule(GrammarFileName, "telement");
    	DebugLocation(304, 26);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 73)) { return retval; }
    		// cs.g:304:9: ( tmember ( telement_part )? )
    		DebugEnterAlt(1);
    		// cs.g:305:2: tmember ( telement_part )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(305, 2);
    		PushFollow(Follow._tmember_in_telement1775);
    		tmember220=tmember();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, tmember220.Tree, tmember220, retval);
    		DebugLocation(305, 12);
    		// cs.g:305:12: ( telement_part )?
    		int alt75=2;
    		try { DebugEnterSubRule(75);
    		try { DebugEnterDecision(75, decisionCanBacktrack[75]);
    		int LA75_0 = input.LA(1);

    		if ((LA75_0==97))
    		{
    			alt75=1;
    		}
    		} finally { DebugExitDecision(75); }
    		switch (alt75)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: telement_part
    			{
    			DebugLocation(305, 12);
    			PushFollow(Follow._telement_part_in_telement1779);
    			telement_part221=telement_part();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, telement_part221.Tree, telement_part221, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(75); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 73, telement_StartIndex); }
        }
     	DebugLocation(305, 26);
    	} finally { DebugExitRule(GrammarFileName, "telement"); }
    	return retval;

    }
    // $ANTLR end "telement"

    public class telement_part_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_telement_part() {}
    protected virtual void Leave_telement_part() {}

    // $ANTLR start "telement_part"
    // cs.g:306:1: telement_part : ( ( bracket_expression )+ ( access_operator telement ) | ( bracket_expression )+ tinvocation_part | ( bracket_expression )+ );
    [GrammarRule("telement_part")]
    public csParser.telement_part_return telement_part()
    {

        csParser.telement_part_return retval = new csParser.telement_part_return();
        retval.Start = (IToken)input.LT(1);
        int telement_part_StartIndex = input.Index;
        object root_0 = null;

        csParser.bracket_expression_return bracket_expression222 = default(csParser.bracket_expression_return);
        csParser.access_operator_return access_operator223 = default(csParser.access_operator_return);
        csParser.telement_return telement224 = default(csParser.telement_return);
        csParser.bracket_expression_return bracket_expression225 = default(csParser.bracket_expression_return);
        csParser.tinvocation_part_return tinvocation_part226 = default(csParser.tinvocation_part_return);
        csParser.bracket_expression_return bracket_expression227 = default(csParser.bracket_expression_return);


    	try { DebugEnterRule(GrammarFileName, "telement_part");
    	DebugLocation(306, 22);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 74)) { return retval; }
    		// cs.g:306:14: ( ( bracket_expression )+ ( access_operator telement ) | ( bracket_expression )+ tinvocation_part | ( bracket_expression )+ )
    		int alt79=3;
    		try { DebugEnterDecision(79, decisionCanBacktrack[79]);
    		int LA79_0 = input.LA(1);

    		if ((LA79_0==97))
    		{
    			int LA79_1 = input.LA(2);

    			if ((EvaluatePredicate(synpred121_cs_fragment)))
    			{
    				alt79=1;
    			}
    			else if ((EvaluatePredicate(synpred123_cs_fragment)))
    			{
    				alt79=2;
    			}
    			else if ((true))
    			{
    				alt79=3;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 79, 1, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 79, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(79); }
    		switch (alt79)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:307:2: ( bracket_expression )+ ( access_operator telement )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(307, 2);
    			// cs.g:307:2: ( bracket_expression )+
    			int cnt76=0;
    			try { DebugEnterSubRule(76);
    			while (true)
    			{
    				int alt76=2;
    				try { DebugEnterDecision(76, decisionCanBacktrack[76]);
    				int LA76_0 = input.LA(1);

    				if ((LA76_0==97))
    				{
    					alt76=1;
    				}


    				} finally { DebugExitDecision(76); }
    				switch (alt76)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:0:0: bracket_expression
    					{
    					DebugLocation(307, 2);
    					PushFollow(Follow._bracket_expression_in_telement_part1788);
    					bracket_expression222=bracket_expression();
    					PopFollow();
    					if (state.failed) return retval;
    					if ( (state.backtracking==0) ) adaptor.AddChild(root_0, bracket_expression222.Tree, bracket_expression222, retval);

    					}
    					break;

    				default:
    					if (cnt76 >= 1)
    						goto loop76;

    					if (state.backtracking>0) {state.failed=true; return retval;}
    					EarlyExitException eee76 = new EarlyExitException( 76, input );
    					DebugRecognitionException(eee76);
    					throw eee76;
    				}
    				cnt76++;
    			}
    			loop76:
    				;

    			} finally { DebugExitSubRule(76); }

    			DebugLocation(307, 24);
    			// cs.g:307:24: ( access_operator telement )
    			DebugEnterAlt(1);
    			// cs.g:307:25: access_operator telement
    			{
    			DebugLocation(307, 25);
    			PushFollow(Follow._access_operator_in_telement_part1794);
    			access_operator223=access_operator();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, access_operator223.Tree, access_operator223, retval);
    			DebugLocation(307, 43);
    			PushFollow(Follow._telement_in_telement_part1798);
    			telement224=telement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, telement224.Tree, telement224, retval);

    			}


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:308:4: ( bracket_expression )+ tinvocation_part
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(308, 4);
    			// cs.g:308:4: ( bracket_expression )+
    			int cnt77=0;
    			try { DebugEnterSubRule(77);
    			while (true)
    			{
    				int alt77=2;
    				try { DebugEnterDecision(77, decisionCanBacktrack[77]);
    				int LA77_0 = input.LA(1);

    				if ((LA77_0==97))
    				{
    					alt77=1;
    				}


    				} finally { DebugExitDecision(77); }
    				switch (alt77)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:0:0: bracket_expression
    					{
    					DebugLocation(308, 4);
    					PushFollow(Follow._bracket_expression_in_telement_part1804);
    					bracket_expression225=bracket_expression();
    					PopFollow();
    					if (state.failed) return retval;
    					if ( (state.backtracking==0) ) adaptor.AddChild(root_0, bracket_expression225.Tree, bracket_expression225, retval);

    					}
    					break;

    				default:
    					if (cnt77 >= 1)
    						goto loop77;

    					if (state.backtracking>0) {state.failed=true; return retval;}
    					EarlyExitException eee77 = new EarlyExitException( 77, input );
    					DebugRecognitionException(eee77);
    					throw eee77;
    				}
    				cnt77++;
    			}
    			loop77:
    				;

    			} finally { DebugExitSubRule(77); }

    			DebugLocation(308, 26);
    			PushFollow(Follow._tinvocation_part_in_telement_part1809);
    			tinvocation_part226=tinvocation_part();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, tinvocation_part226.Tree, tinvocation_part226, retval);

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:309:4: ( bracket_expression )+
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(309, 4);
    			// cs.g:309:4: ( bracket_expression )+
    			int cnt78=0;
    			try { DebugEnterSubRule(78);
    			while (true)
    			{
    				int alt78=2;
    				try { DebugEnterDecision(78, decisionCanBacktrack[78]);
    				int LA78_0 = input.LA(1);

    				if ((LA78_0==97))
    				{
    					alt78=1;
    				}


    				} finally { DebugExitDecision(78); }
    				switch (alt78)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:0:0: bracket_expression
    					{
    					DebugLocation(309, 4);
    					PushFollow(Follow._bracket_expression_in_telement_part1814);
    					bracket_expression227=bracket_expression();
    					PopFollow();
    					if (state.failed) return retval;
    					if ( (state.backtracking==0) ) adaptor.AddChild(root_0, bracket_expression227.Tree, bracket_expression227, retval);

    					}
    					break;

    				default:
    					if (cnt78 >= 1)
    						goto loop78;

    					if (state.backtracking>0) {state.failed=true; return retval;}
    					EarlyExitException eee78 = new EarlyExitException( 78, input );
    					DebugRecognitionException(eee78);
    					throw eee78;
    				}
    				cnt78++;
    			}
    			loop78:
    				;

    			} finally { DebugExitSubRule(78); }


    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 74, telement_part_StartIndex); }
        }
     	DebugLocation(309, 22);
    	} finally { DebugExitRule(GrammarFileName, "telement_part"); }
    	return retval;

    }
    // $ANTLR end "telement_part"

    public class tmember_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_tmember() {}
    protected virtual void Leave_tmember() {}

    // $ANTLR start "tmember"
    // cs.g:311:1: tmember : identifier ( access_operator identifier )* ;
    [GrammarRule("tmember")]
    public csParser.tmember_return tmember()
    {

        csParser.tmember_return retval = new csParser.tmember_return();
        retval.Start = (IToken)input.LT(1);
        int tmember_StartIndex = input.Index;
        object root_0 = null;

        csParser.identifier_return identifier228 = default(csParser.identifier_return);
        csParser.access_operator_return access_operator229 = default(csParser.access_operator_return);
        csParser.identifier_return identifier230 = default(csParser.identifier_return);


    	try { DebugEnterRule(GrammarFileName, "tmember");
    	DebugLocation(311, 45);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 75)) { return retval; }
    		// cs.g:311:8: ( identifier ( access_operator identifier )* )
    		DebugEnterAlt(1);
    		// cs.g:312:2: identifier ( access_operator identifier )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(312, 2);
    		PushFollow(Follow._identifier_in_tmember1824);
    		identifier228=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier228.Tree, identifier228, retval);
    		DebugLocation(312, 15);
    		// cs.g:312:15: ( access_operator identifier )*
    		try { DebugEnterSubRule(80);
    		while (true)
    		{
    			int alt80=2;
    			try { DebugEnterDecision(80, decisionCanBacktrack[80]);
    			int LA80_0 = input.LA(1);

    			if (((LA80_0>=DOT && LA80_0<=PTR)))
    			{
    				alt80=1;
    			}


    			} finally { DebugExitDecision(80); }
    			switch ( alt80 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:312:16: access_operator identifier
    				{
    				DebugLocation(312, 16);
    				PushFollow(Follow._access_operator_in_tmember1829);
    				access_operator229=access_operator();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, access_operator229.Tree, access_operator229, retval);
    				DebugLocation(312, 34);
    				PushFollow(Follow._identifier_in_tmember1833);
    				identifier230=identifier();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier230.Tree, identifier230, retval);

    				}
    				break;

    			default:
    				goto loop80;
    			}
    		}

    		loop80:
    			;

    		} finally { DebugExitSubRule(80); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 75, tmember_StartIndex); }
        }
     	DebugLocation(312, 45);
    	} finally { DebugExitRule(GrammarFileName, "tmember"); }
    	return retval;

    }
    // $ANTLR end "tmember"

    public class primary_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_primary_expression() {}
    protected virtual void Leave_primary_expression() {}

    // $ANTLR start "primary_expression"
    // cs.g:314:1: primary_expression : ( primary_expression_start ( primary_expression_part )* | delegate_creation_expression | anonymous_object_creation_expression | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression );
    [GrammarRule("primary_expression")]
    public csParser.primary_expression_return primary_expression()
    {

        csParser.primary_expression_return retval = new csParser.primary_expression_return();
        retval.Start = (IToken)input.LT(1);
        int primary_expression_StartIndex = input.Index;
        object root_0 = null;

        csParser.primary_expression_start_return primary_expression_start231 = default(csParser.primary_expression_start_return);
        csParser.primary_expression_part_return primary_expression_part232 = default(csParser.primary_expression_part_return);
        csParser.delegate_creation_expression_return delegate_creation_expression233 = default(csParser.delegate_creation_expression_return);
        csParser.anonymous_object_creation_expression_return anonymous_object_creation_expression234 = default(csParser.anonymous_object_creation_expression_return);
        csParser.sizeof_expression_return sizeof_expression235 = default(csParser.sizeof_expression_return);
        csParser.checked_expression_return checked_expression236 = default(csParser.checked_expression_return);
        csParser.unchecked_expression_return unchecked_expression237 = default(csParser.unchecked_expression_return);
        csParser.default_value_expression_return default_value_expression238 = default(csParser.default_value_expression_return);
        csParser.anonymous_method_expression_return anonymous_method_expression239 = default(csParser.anonymous_method_expression_return);


    	try { DebugEnterRule(GrammarFileName, "primary_expression");
    	DebugLocation(314, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 76)) { return retval; }
    		// cs.g:314:19: ( primary_expression_start ( primary_expression_part )* | delegate_creation_expression | anonymous_object_creation_expression | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression )
    		int alt82=8;
    		try { DebugEnterDecision(82, decisionCanBacktrack[82]);
    		try
    		{
    			alt82 = dfa82.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(82); }
    		switch (alt82)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:315:2: primary_expression_start ( primary_expression_part )*
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(315, 2);
    			PushFollow(Follow._primary_expression_start_in_primary_expression1845);
    			primary_expression_start231=primary_expression_start();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, primary_expression_start231.Tree, primary_expression_start231, retval);
    			DebugLocation(315, 29);
    			// cs.g:315:29: ( primary_expression_part )*
    			try { DebugEnterSubRule(81);
    			while (true)
    			{
    				int alt81=2;
    				try { DebugEnterDecision(81, decisionCanBacktrack[81]);
    				try
    				{
    					alt81 = dfa81.Predict(input);
    				}
    				catch (NoViableAltException nvae)
    				{
    					DebugRecognitionException(nvae);
    					throw;
    				}
    				} finally { DebugExitDecision(81); }
    				switch ( alt81 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:0:0: primary_expression_part
    					{
    					DebugLocation(315, 29);
    					PushFollow(Follow._primary_expression_part_in_primary_expression1849);
    					primary_expression_part232=primary_expression_part();
    					PopFollow();
    					if (state.failed) return retval;
    					if ( (state.backtracking==0) ) adaptor.AddChild(root_0, primary_expression_part232.Tree, primary_expression_part232, retval);

    					}
    					break;

    				default:
    					goto loop81;
    				}
    			}

    			loop81:
    				;

    			} finally { DebugExitSubRule(81); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:316:4: delegate_creation_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(316, 4);
    			PushFollow(Follow._delegate_creation_expression_in_primary_expression1855);
    			delegate_creation_expression233=delegate_creation_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, delegate_creation_expression233.Tree, delegate_creation_expression233, retval);

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:317:4: anonymous_object_creation_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(317, 4);
    			PushFollow(Follow._anonymous_object_creation_expression_in_primary_expression1864);
    			anonymous_object_creation_expression234=anonymous_object_creation_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, anonymous_object_creation_expression234.Tree, anonymous_object_creation_expression234, retval);

    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// cs.g:318:4: sizeof_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(318, 4);
    			PushFollow(Follow._sizeof_expression_in_primary_expression1870);
    			sizeof_expression235=sizeof_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, sizeof_expression235.Tree, sizeof_expression235, retval);

    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// cs.g:319:4: checked_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(319, 4);
    			PushFollow(Follow._checked_expression_in_primary_expression1881);
    			checked_expression236=checked_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, checked_expression236.Tree, checked_expression236, retval);

    			}
    			break;
    		case 6:
    			DebugEnterAlt(6);
    			// cs.g:320:4: unchecked_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(320, 4);
    			PushFollow(Follow._unchecked_expression_in_primary_expression1900);
    			unchecked_expression237=unchecked_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, unchecked_expression237.Tree, unchecked_expression237, retval);

    			}
    			break;
    		case 7:
    			DebugEnterAlt(7);
    			// cs.g:321:4: default_value_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(321, 4);
    			PushFollow(Follow._default_value_expression_in_primary_expression1917);
    			default_value_expression238=default_value_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, default_value_expression238.Tree, default_value_expression238, retval);

    			}
    			break;
    		case 8:
    			DebugEnterAlt(8);
    			// cs.g:322:4: anonymous_method_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(322, 4);
    			PushFollow(Follow._anonymous_method_expression_in_primary_expression1930);
    			anonymous_method_expression239=anonymous_method_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, anonymous_method_expression239.Tree, anonymous_method_expression239, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 76, primary_expression_StartIndex); }
        }
     	DebugLocation(323, 1);
    	} finally { DebugExitRule(GrammarFileName, "primary_expression"); }
    	return retval;

    }
    // $ANTLR end "primary_expression"

    public class primary_expression_start_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_primary_expression_start() {}
    protected virtual void Leave_primary_expression_start() {}

    // $ANTLR start "primary_expression_start"
    // cs.g:324:1: primary_expression_start : ( ( predefined_type | identifier | literal ) ( generic_argument_list )? | 'this' ( bracket_expression )? | 'base' ( bracket_expression )? | identifier '::' identifier | paren_expression ( brackets_or_arguments )? | object_creation_expression | typeof_expression );
    [GrammarRule("primary_expression_start")]
    public csParser.primary_expression_start_return primary_expression_start()
    {

        csParser.primary_expression_start_return retval = new csParser.primary_expression_start_return();
        retval.Start = (IToken)input.LT(1);
        int primary_expression_start_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal244=null;
        IToken string_literal246=null;
        IToken string_literal249=null;
        csParser.predefined_type_return predefined_type240 = default(csParser.predefined_type_return);
        csParser.identifier_return identifier241 = default(csParser.identifier_return);
        csParser.literal_return literal242 = default(csParser.literal_return);
        csParser.generic_argument_list_return generic_argument_list243 = default(csParser.generic_argument_list_return);
        csParser.bracket_expression_return bracket_expression245 = default(csParser.bracket_expression_return);
        csParser.bracket_expression_return bracket_expression247 = default(csParser.bracket_expression_return);
        csParser.identifier_return identifier248 = default(csParser.identifier_return);
        csParser.identifier_return identifier250 = default(csParser.identifier_return);
        csParser.paren_expression_return paren_expression251 = default(csParser.paren_expression_return);
        csParser.brackets_or_arguments_return brackets_or_arguments252 = default(csParser.brackets_or_arguments_return);
        csParser.object_creation_expression_return object_creation_expression253 = default(csParser.object_creation_expression_return);
        csParser.typeof_expression_return typeof_expression254 = default(csParser.typeof_expression_return);

        object string_literal244_tree=null;
        object string_literal246_tree=null;
        object string_literal249_tree=null;

    	try { DebugEnterRule(GrammarFileName, "primary_expression_start");
    	DebugLocation(324, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 77)) { return retval; }
    		// cs.g:324:25: ( ( predefined_type | identifier | literal ) ( generic_argument_list )? | 'this' ( bracket_expression )? | 'base' ( bracket_expression )? | identifier '::' identifier | paren_expression ( brackets_or_arguments )? | object_creation_expression | typeof_expression )
    		int alt88=7;
    		try { DebugEnterDecision(88, decisionCanBacktrack[88]);
    		try
    		{
    			alt88 = dfa88.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(88); }
    		switch (alt88)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:325:2: ( predefined_type | identifier | literal ) ( generic_argument_list )?
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(325, 2);
    			// cs.g:325:2: ( predefined_type | identifier | literal )
    			int alt83=3;
    			try { DebugEnterSubRule(83);
    			try { DebugEnterDecision(83, decisionCanBacktrack[83]);
    			switch (input.LA(1))
    			{
    			case 114:
    			case 115:
    			case 116:
    			case 117:
    			case 118:
    			case 119:
    			case 120:
    			case 121:
    			case 122:
    			case 132:
    			case 133:
    			case 134:
    			case 135:
    			case 136:
    			case 137:
    				{
    				alt83=1;
    				}
    				break;
    			case IDENTIFIER:
    			case SET:
    			case 95:
    			case 101:
    			case 102:
    			case 103:
    			case 104:
    			case 105:
    			case 106:
    			case 107:
    			case 109:
    			case 175:
    			case 176:
    			case 177:
    			case 178:
    			case 179:
    			case 180:
    			case 181:
    			case 182:
    			case 183:
    			case 184:
    			case 185:
    			case 186:
    			case 187:
    			case 199:
    			case 201:
    			case 202:
    			case 208:
    			case 225:
    			case 226:
    				{
    				alt83=2;
    				}
    				break;
    			case Real_literal:
    			case NUMBER:
    			case Hex_number:
    			case Character_literal:
    			case STRINGLITERAL:
    			case Verbatim_string_literal:
    			case TRUE:
    			case FALSE:
    			case NULL:
    				{
    				alt83=3;
    				}
    				break;
    			default:
    				{
    					if (state.backtracking>0) {state.failed=true; return retval;}
    					NoViableAltException nvae = new NoViableAltException("", 83, 0, input);

    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    			}

    			} finally { DebugExitDecision(83); }
    			switch (alt83)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:325:3: predefined_type
    				{
    				DebugLocation(325, 3);
    				PushFollow(Follow._predefined_type_in_primary_expression_start1943);
    				predefined_type240=predefined_type();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, predefined_type240.Tree, predefined_type240, retval);

    				}
    				break;
    			case 2:
    				DebugEnterAlt(2);
    				// cs.g:325:21: identifier
    				{
    				DebugLocation(325, 21);
    				PushFollow(Follow._identifier_in_primary_expression_start1947);
    				identifier241=identifier();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier241.Tree, identifier241, retval);

    				}
    				break;
    			case 3:
    				DebugEnterAlt(3);
    				// cs.g:325:34: literal
    				{
    				DebugLocation(325, 34);
    				PushFollow(Follow._literal_in_primary_expression_start1951);
    				literal242=literal();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, literal242.Tree, literal242, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(83); }

    			DebugLocation(325, 45);
    			// cs.g:325:45: ( generic_argument_list )?
    			int alt84=2;
    			try { DebugEnterSubRule(84);
    			try { DebugEnterDecision(84, decisionCanBacktrack[84]);
    			try
    			{
    				alt84 = dfa84.Predict(input);
    			}
    			catch (NoViableAltException nvae)
    			{
    				DebugRecognitionException(nvae);
    				throw;
    			}
    			} finally { DebugExitDecision(84); }
    			switch (alt84)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: generic_argument_list
    				{
    				DebugLocation(325, 45);
    				PushFollow(Follow._generic_argument_list_in_primary_expression_start1956);
    				generic_argument_list243=generic_argument_list();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, generic_argument_list243.Tree, generic_argument_list243, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(84); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:326:4: 'this' ( bracket_expression )?
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(326, 4);
    			string_literal244=(IToken)Match(input,90,Follow._90_in_primary_expression_start1962); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal244_tree = (object)adaptor.Create(string_literal244, retval);
    			adaptor.AddChild(root_0, string_literal244_tree);
    			}
    			DebugLocation(326, 14);
    			// cs.g:326:14: ( bracket_expression )?
    			int alt85=2;
    			try { DebugEnterSubRule(85);
    			try { DebugEnterDecision(85, decisionCanBacktrack[85]);
    			try
    			{
    				alt85 = dfa85.Predict(input);
    			}
    			catch (NoViableAltException nvae)
    			{
    				DebugRecognitionException(nvae);
    				throw;
    			}
    			} finally { DebugExitDecision(85); }
    			switch (alt85)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: bracket_expression
    				{
    				DebugLocation(326, 14);
    				PushFollow(Follow._bracket_expression_in_primary_expression_start1967);
    				bracket_expression245=bracket_expression();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, bracket_expression245.Tree, bracket_expression245, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(85); }


    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:327:4: 'base' ( bracket_expression )?
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(327, 4);
    			string_literal246=(IToken)Match(input,91,Follow._91_in_primary_expression_start1973); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal246_tree = (object)adaptor.Create(string_literal246, retval);
    			adaptor.AddChild(root_0, string_literal246_tree);
    			}
    			DebugLocation(327, 14);
    			// cs.g:327:14: ( bracket_expression )?
    			int alt86=2;
    			try { DebugEnterSubRule(86);
    			try { DebugEnterDecision(86, decisionCanBacktrack[86]);
    			try
    			{
    				alt86 = dfa86.Predict(input);
    			}
    			catch (NoViableAltException nvae)
    			{
    				DebugRecognitionException(nvae);
    				throw;
    			}
    			} finally { DebugExitDecision(86); }
    			switch (alt86)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: bracket_expression
    				{
    				DebugLocation(327, 14);
    				PushFollow(Follow._bracket_expression_in_primary_expression_start1978);
    				bracket_expression247=bracket_expression();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, bracket_expression247.Tree, bracket_expression247, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(86); }


    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// cs.g:328:4: identifier '::' identifier
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(328, 4);
    			PushFollow(Follow._identifier_in_primary_expression_start1984);
    			identifier248=identifier();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier248.Tree, identifier248, retval);
    			DebugLocation(328, 17);
    			string_literal249=(IToken)Match(input,89,Follow._89_in_primary_expression_start1988); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal249_tree = (object)adaptor.Create(string_literal249, retval);
    			adaptor.AddChild(root_0, string_literal249_tree);
    			}
    			DebugLocation(328, 24);
    			PushFollow(Follow._identifier_in_primary_expression_start1992);
    			identifier250=identifier();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier250.Tree, identifier250, retval);

    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// cs.g:329:4: paren_expression ( brackets_or_arguments )?
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(329, 4);
    			PushFollow(Follow._paren_expression_in_primary_expression_start1997);
    			paren_expression251=paren_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, paren_expression251.Tree, paren_expression251, retval);
    			DebugLocation(329, 23);
    			// cs.g:329:23: ( brackets_or_arguments )?
    			int alt87=2;
    			try { DebugEnterSubRule(87);
    			try { DebugEnterDecision(87, decisionCanBacktrack[87]);
    			try
    			{
    				alt87 = dfa87.Predict(input);
    			}
    			catch (NoViableAltException nvae)
    			{
    				DebugRecognitionException(nvae);
    				throw;
    			}
    			} finally { DebugExitDecision(87); }
    			switch (alt87)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: brackets_or_arguments
    				{
    				DebugLocation(329, 23);
    				PushFollow(Follow._brackets_or_arguments_in_primary_expression_start2001);
    				brackets_or_arguments252=brackets_or_arguments();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, brackets_or_arguments252.Tree, brackets_or_arguments252, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(87); }


    			}
    			break;
    		case 6:
    			DebugEnterAlt(6);
    			// cs.g:330:4: object_creation_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(330, 4);
    			PushFollow(Follow._object_creation_expression_in_primary_expression_start2007);
    			object_creation_expression253=object_creation_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, object_creation_expression253.Tree, object_creation_expression253, retval);

    			}
    			break;
    		case 7:
    			DebugEnterAlt(7);
    			// cs.g:331:4: typeof_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(331, 4);
    			PushFollow(Follow._typeof_expression_in_primary_expression_start2013);
    			typeof_expression254=typeof_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, typeof_expression254.Tree, typeof_expression254, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 77, primary_expression_start_StartIndex); }
        }
     	DebugLocation(332, 1);
    	} finally { DebugExitRule(GrammarFileName, "primary_expression_start"); }
    	return retval;

    }
    // $ANTLR end "primary_expression_start"

    public class primary_expression_part_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_primary_expression_part() {}
    protected virtual void Leave_primary_expression_part() {}

    // $ANTLR start "primary_expression_part"
    // cs.g:333:1: primary_expression_part : ( access_identifier ( brackets_or_arguments )? | brackets_or_arguments );
    [GrammarRule("primary_expression_part")]
    public csParser.primary_expression_part_return primary_expression_part()
    {

        csParser.primary_expression_part_return retval = new csParser.primary_expression_part_return();
        retval.Start = (IToken)input.LT(1);
        int primary_expression_part_StartIndex = input.Index;
        object root_0 = null;

        csParser.access_identifier_return access_identifier255 = default(csParser.access_identifier_return);
        csParser.brackets_or_arguments_return brackets_or_arguments256 = default(csParser.brackets_or_arguments_return);
        csParser.brackets_or_arguments_return brackets_or_arguments257 = default(csParser.brackets_or_arguments_return);


    	try { DebugEnterRule(GrammarFileName, "primary_expression_part");
    	DebugLocation(333, 25);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 78)) { return retval; }
    		// cs.g:333:24: ( access_identifier ( brackets_or_arguments )? | brackets_or_arguments )
    		int alt90=2;
    		try { DebugEnterDecision(90, decisionCanBacktrack[90]);
    		int LA90_0 = input.LA(1);

    		if (((LA90_0>=DOT && LA90_0<=PTR)))
    		{
    			alt90=1;
    		}
    		else if ((LA90_0==97||LA90_0==110))
    		{
    			alt90=2;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 90, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(90); }
    		switch (alt90)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:334:4: access_identifier ( brackets_or_arguments )?
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(334, 4);
    			PushFollow(Follow._access_identifier_in_primary_expression_part2037);
    			access_identifier255=access_identifier();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, access_identifier255.Tree, access_identifier255, retval);
    			DebugLocation(334, 24);
    			// cs.g:334:24: ( brackets_or_arguments )?
    			int alt89=2;
    			try { DebugEnterSubRule(89);
    			try { DebugEnterDecision(89, decisionCanBacktrack[89]);
    			try
    			{
    				alt89 = dfa89.Predict(input);
    			}
    			catch (NoViableAltException nvae)
    			{
    				DebugRecognitionException(nvae);
    				throw;
    			}
    			} finally { DebugExitDecision(89); }
    			switch (alt89)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: brackets_or_arguments
    				{
    				DebugLocation(334, 24);
    				PushFollow(Follow._brackets_or_arguments_in_primary_expression_part2041);
    				brackets_or_arguments256=brackets_or_arguments();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, brackets_or_arguments256.Tree, brackets_or_arguments256, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(89); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:335:4: brackets_or_arguments
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(335, 4);
    			PushFollow(Follow._brackets_or_arguments_in_primary_expression_part2047);
    			brackets_or_arguments257=brackets_or_arguments();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, brackets_or_arguments257.Tree, brackets_or_arguments257, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 78, primary_expression_part_StartIndex); }
        }
     	DebugLocation(335, 25);
    	} finally { DebugExitRule(GrammarFileName, "primary_expression_part"); }
    	return retval;

    }
    // $ANTLR end "primary_expression_part"

    public class element_part_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_element_part() {}
    protected virtual void Leave_element_part() {}

    // $ANTLR start "element_part"
    // cs.g:337:1: element_part : ( access_identifier ( bracket_expression )+ ( primary_expression_part )? | bracket_expression );
    [GrammarRule("element_part")]
    public csParser.element_part_return element_part()
    {

        csParser.element_part_return retval = new csParser.element_part_return();
        retval.Start = (IToken)input.LT(1);
        int element_part_StartIndex = input.Index;
        object root_0 = null;

        csParser.access_identifier_return access_identifier258 = default(csParser.access_identifier_return);
        csParser.bracket_expression_return bracket_expression259 = default(csParser.bracket_expression_return);
        csParser.primary_expression_part_return primary_expression_part260 = default(csParser.primary_expression_part_return);
        csParser.bracket_expression_return bracket_expression261 = default(csParser.bracket_expression_return);


    	try { DebugEnterRule(GrammarFileName, "element_part");
    	DebugLocation(337, 22);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 79)) { return retval; }
    		// cs.g:337:13: ( access_identifier ( bracket_expression )+ ( primary_expression_part )? | bracket_expression )
    		int alt93=2;
    		try { DebugEnterDecision(93, decisionCanBacktrack[93]);
    		int LA93_0 = input.LA(1);

    		if (((LA93_0>=DOT && LA93_0<=PTR)))
    		{
    			alt93=1;
    		}
    		else if ((LA93_0==97))
    		{
    			alt93=2;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 93, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(93); }
    		switch (alt93)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:338:2: access_identifier ( bracket_expression )+ ( primary_expression_part )?
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(338, 2);
    			PushFollow(Follow._access_identifier_in_element_part2056);
    			access_identifier258=access_identifier();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, access_identifier258.Tree, access_identifier258, retval);
    			DebugLocation(338, 22);
    			// cs.g:338:22: ( bracket_expression )+
    			int cnt91=0;
    			try { DebugEnterSubRule(91);
    			while (true)
    			{
    				int alt91=2;
    				try { DebugEnterDecision(91, decisionCanBacktrack[91]);
    				int LA91_0 = input.LA(1);

    				if ((LA91_0==97))
    				{
    					int LA91_2 = input.LA(2);

    					if ((EvaluatePredicate(synpred148_cs_fragment)))
    					{
    						alt91=1;
    					}


    				}


    				} finally { DebugExitDecision(91); }
    				switch (alt91)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:0:0: bracket_expression
    					{
    					DebugLocation(338, 22);
    					PushFollow(Follow._bracket_expression_in_element_part2060);
    					bracket_expression259=bracket_expression();
    					PopFollow();
    					if (state.failed) return retval;
    					if ( (state.backtracking==0) ) adaptor.AddChild(root_0, bracket_expression259.Tree, bracket_expression259, retval);

    					}
    					break;

    				default:
    					if (cnt91 >= 1)
    						goto loop91;

    					if (state.backtracking>0) {state.failed=true; return retval;}
    					EarlyExitException eee91 = new EarlyExitException( 91, input );
    					DebugRecognitionException(eee91);
    					throw eee91;
    				}
    				cnt91++;
    			}
    			loop91:
    				;

    			} finally { DebugExitSubRule(91); }

    			DebugLocation(338, 44);
    			// cs.g:338:44: ( primary_expression_part )?
    			int alt92=2;
    			try { DebugEnterSubRule(92);
    			try { DebugEnterDecision(92, decisionCanBacktrack[92]);
    			int LA92_0 = input.LA(1);

    			if (((LA92_0>=DOT && LA92_0<=PTR)||LA92_0==97||LA92_0==110))
    			{
    				alt92=1;
    			}
    			} finally { DebugExitDecision(92); }
    			switch (alt92)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: primary_expression_part
    				{
    				DebugLocation(338, 44);
    				PushFollow(Follow._primary_expression_part_in_element_part2065);
    				primary_expression_part260=primary_expression_part();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, primary_expression_part260.Tree, primary_expression_part260, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(92); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:339:4: bracket_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(339, 4);
    			PushFollow(Follow._bracket_expression_in_element_part2072);
    			bracket_expression261=bracket_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, bracket_expression261.Tree, bracket_expression261, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 79, element_part_StartIndex); }
        }
     	DebugLocation(339, 22);
    	} finally { DebugExitRule(GrammarFileName, "element_part"); }
    	return retval;

    }
    // $ANTLR end "element_part"

    public class invocation_part_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_invocation_part() {}
    protected virtual void Leave_invocation_part() {}

    // $ANTLR start "invocation_part"
    // cs.g:340:1: invocation_part : ( access_identifier arguments ( primary_expression_start )? | arguments );
    [GrammarRule("invocation_part")]
    public csParser.invocation_part_return invocation_part()
    {

        csParser.invocation_part_return retval = new csParser.invocation_part_return();
        retval.Start = (IToken)input.LT(1);
        int invocation_part_StartIndex = input.Index;
        object root_0 = null;

        csParser.access_identifier_return access_identifier262 = default(csParser.access_identifier_return);
        csParser.arguments_return arguments263 = default(csParser.arguments_return);
        csParser.primary_expression_start_return primary_expression_start264 = default(csParser.primary_expression_start_return);
        csParser.arguments_return arguments265 = default(csParser.arguments_return);


    	try { DebugEnterRule(GrammarFileName, "invocation_part");
    	DebugLocation(340, 12);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 80)) { return retval; }
    		// cs.g:340:16: ( access_identifier arguments ( primary_expression_start )? | arguments )
    		int alt95=2;
    		try { DebugEnterDecision(95, decisionCanBacktrack[95]);
    		int LA95_0 = input.LA(1);

    		if (((LA95_0>=DOT && LA95_0<=PTR)))
    		{
    			alt95=1;
    		}
    		else if ((LA95_0==110))
    		{
    			alt95=2;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 95, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(95); }
    		switch (alt95)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:341:2: access_identifier arguments ( primary_expression_start )?
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(341, 2);
    			PushFollow(Follow._access_identifier_in_invocation_part2080);
    			access_identifier262=access_identifier();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, access_identifier262.Tree, access_identifier262, retval);
    			DebugLocation(341, 22);
    			PushFollow(Follow._arguments_in_invocation_part2084);
    			arguments263=arguments();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, arguments263.Tree, arguments263, retval);
    			DebugLocation(341, 34);
    			// cs.g:341:34: ( primary_expression_start )?
    			int alt94=2;
    			try { DebugEnterSubRule(94);
    			try { DebugEnterDecision(94, decisionCanBacktrack[94]);
    			int LA94_0 = input.LA(1);

    			if (((LA94_0>=IDENTIFIER && LA94_0<=NULL)||LA94_0==SET||(LA94_0>=90 && LA94_0<=91)||LA94_0==95||(LA94_0>=101 && LA94_0<=107)||(LA94_0>=109 && LA94_0<=110)||(LA94_0>=114 && LA94_0<=122)||(LA94_0>=132 && LA94_0<=138)||LA94_0==140||(LA94_0>=175 && LA94_0<=187)||LA94_0==199||(LA94_0>=201 && LA94_0<=202)||LA94_0==208||(LA94_0>=225 && LA94_0<=226)))
    			{
    				alt94=1;
    			}
    			} finally { DebugExitDecision(94); }
    			switch (alt94)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: primary_expression_start
    				{
    				DebugLocation(341, 34);
    				PushFollow(Follow._primary_expression_start_in_invocation_part2088);
    				primary_expression_start264=primary_expression_start();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, primary_expression_start264.Tree, primary_expression_start264, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(94); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:342:4: arguments
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(342, 4);
    			PushFollow(Follow._arguments_in_invocation_part2095);
    			arguments265=arguments();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, arguments265.Tree, arguments265, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 80, invocation_part_StartIndex); }
        }
     	DebugLocation(342, 12);
    	} finally { DebugExitRule(GrammarFileName, "invocation_part"); }
    	return retval;

    }
    // $ANTLR end "invocation_part"

    public class member_part_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_member_part() {}
    protected virtual void Leave_member_part() {}

    // $ANTLR start "member_part"
    // cs.g:344:1: member_part : access_identifier ;
    [GrammarRule("member_part")]
    public csParser.member_part_return member_part()
    {

        csParser.member_part_return retval = new csParser.member_part_return();
        retval.Start = (IToken)input.LT(1);
        int member_part_StartIndex = input.Index;
        object root_0 = null;

        csParser.access_identifier_return access_identifier266 = default(csParser.access_identifier_return);


    	try { DebugEnterRule(GrammarFileName, "member_part");
    	DebugLocation(344, 19);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 81)) { return retval; }
    		// cs.g:344:12: ( access_identifier )
    		DebugEnterAlt(1);
    		// cs.g:345:2: access_identifier
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(345, 2);
    		PushFollow(Follow._access_identifier_in_member_part2104);
    		access_identifier266=access_identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, access_identifier266.Tree, access_identifier266, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 81, member_part_StartIndex); }
        }
     	DebugLocation(345, 19);
    	} finally { DebugExitRule(GrammarFileName, "member_part"); }
    	return retval;

    }
    // $ANTLR end "member_part"

    public class access_identifier_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_access_identifier() {}
    protected virtual void Leave_access_identifier() {}

    // $ANTLR start "access_identifier"
    // cs.g:346:1: access_identifier : access_operator identifier ( generic_argument_list )? ;
    [GrammarRule("access_identifier")]
    public csParser.access_identifier_return access_identifier()
    {

        csParser.access_identifier_return retval = new csParser.access_identifier_return();
        retval.Start = (IToken)input.LT(1);
        int access_identifier_StartIndex = input.Index;
        object root_0 = null;

        csParser.access_operator_return access_operator267 = default(csParser.access_operator_return);
        csParser.identifier_return identifier268 = default(csParser.identifier_return);
        csParser.generic_argument_list_return generic_argument_list269 = default(csParser.generic_argument_list_return);


    	try { DebugEnterRule(GrammarFileName, "access_identifier");
    	DebugLocation(346, 55);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 82)) { return retval; }
    		// cs.g:346:18: ( access_operator identifier ( generic_argument_list )? )
    		DebugEnterAlt(1);
    		// cs.g:347:2: access_operator identifier ( generic_argument_list )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(347, 2);
    		PushFollow(Follow._access_operator_in_access_identifier2112);
    		access_operator267=access_operator();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, access_operator267.Tree, access_operator267, retval);
    		DebugLocation(347, 20);
    		PushFollow(Follow._identifier_in_access_identifier2116);
    		identifier268=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier268.Tree, identifier268, retval);
    		DebugLocation(347, 33);
    		// cs.g:347:33: ( generic_argument_list )?
    		int alt96=2;
    		try { DebugEnterSubRule(96);
    		try { DebugEnterDecision(96, decisionCanBacktrack[96]);
    		try
    		{
    			alt96 = dfa96.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(96); }
    		switch (alt96)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: generic_argument_list
    			{
    			DebugLocation(347, 33);
    			PushFollow(Follow._generic_argument_list_in_access_identifier2120);
    			generic_argument_list269=generic_argument_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, generic_argument_list269.Tree, generic_argument_list269, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(96); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 82, access_identifier_StartIndex); }
        }
     	DebugLocation(347, 55);
    	} finally { DebugExitRule(GrammarFileName, "access_identifier"); }
    	return retval;

    }
    // $ANTLR end "access_identifier"

    public class paren_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_paren_expression() {}
    protected virtual void Leave_paren_expression() {}

    // $ANTLR start "paren_expression"
    // cs.g:348:1: paren_expression : '(' expression ')' ;
    [GrammarRule("paren_expression")]
    public csParser.paren_expression_return paren_expression()
    {

        csParser.paren_expression_return retval = new csParser.paren_expression_return();
        retval.Start = (IToken)input.LT(1);
        int paren_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal270=null;
        IToken char_literal272=null;
        csParser.expression_return expression271 = default(csParser.expression_return);

        object char_literal270_tree=null;
        object char_literal272_tree=null;

    	try { DebugEnterRule(GrammarFileName, "paren_expression");
    	DebugLocation(348, 24);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 83)) { return retval; }
    		// cs.g:348:17: ( '(' expression ')' )
    		DebugEnterAlt(1);
    		// cs.g:349:2: '(' expression ')'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(349, 2);
    		char_literal270=(IToken)Match(input,110,Follow._110_in_paren_expression2130); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal270_tree = (object)adaptor.Create(char_literal270, retval);
    		adaptor.AddChild(root_0, char_literal270_tree);
    		}
    		DebugLocation(349, 8);
    		PushFollow(Follow._expression_in_paren_expression2134);
    		expression271=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression271.Tree, expression271, retval);
    		DebugLocation(349, 21);
    		char_literal272=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_paren_expression2138), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal272_tree = (object)adaptor.Create(char_literal272, retval);
    		adaptor.AddChild(root_0, char_literal272_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 83, paren_expression_StartIndex); }
        }
     	DebugLocation(349, 24);
    	} finally { DebugExitRule(GrammarFileName, "paren_expression"); }
    	return retval;

    }
    // $ANTLR end "paren_expression"

    public class brackets_or_arguments_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_brackets_or_arguments() {}
    protected virtual void Leave_brackets_or_arguments() {}

    // $ANTLR start "brackets_or_arguments"
    // cs.g:350:1: brackets_or_arguments : ( ( bracket_expression )+ ( arguments )? | arguments ( bracket_expression )* );
    [GrammarRule("brackets_or_arguments")]
    public csParser.brackets_or_arguments_return brackets_or_arguments()
    {

        csParser.brackets_or_arguments_return retval = new csParser.brackets_or_arguments_return();
        retval.Start = (IToken)input.LT(1);
        int brackets_or_arguments_StartIndex = input.Index;
        object root_0 = null;

        csParser.bracket_expression_return bracket_expression273 = default(csParser.bracket_expression_return);
        csParser.arguments_return arguments274 = default(csParser.arguments_return);
        csParser.arguments_return arguments275 = default(csParser.arguments_return);
        csParser.bracket_expression_return bracket_expression276 = default(csParser.bracket_expression_return);


    	try { DebugEnterRule(GrammarFileName, "brackets_or_arguments");
    	DebugLocation(350, 35);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 84)) { return retval; }
    		// cs.g:350:22: ( ( bracket_expression )+ ( arguments )? | arguments ( bracket_expression )* )
    		int alt100=2;
    		try { DebugEnterDecision(100, decisionCanBacktrack[100]);
    		int LA100_0 = input.LA(1);

    		if ((LA100_0==97))
    		{
    			alt100=1;
    		}
    		else if ((LA100_0==110))
    		{
    			alt100=2;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 100, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(100); }
    		switch (alt100)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:351:2: ( bracket_expression )+ ( arguments )?
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(351, 2);
    			// cs.g:351:2: ( bracket_expression )+
    			int cnt97=0;
    			try { DebugEnterSubRule(97);
    			while (true)
    			{
    				int alt97=2;
    				try { DebugEnterDecision(97, decisionCanBacktrack[97]);
    				int LA97_0 = input.LA(1);

    				if ((LA97_0==97))
    				{
    					int LA97_2 = input.LA(2);

    					if ((EvaluatePredicate(synpred154_cs_fragment)))
    					{
    						alt97=1;
    					}


    				}


    				} finally { DebugExitDecision(97); }
    				switch (alt97)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:0:0: bracket_expression
    					{
    					DebugLocation(351, 2);
    					PushFollow(Follow._bracket_expression_in_brackets_or_arguments2146);
    					bracket_expression273=bracket_expression();
    					PopFollow();
    					if (state.failed) return retval;
    					if ( (state.backtracking==0) ) adaptor.AddChild(root_0, bracket_expression273.Tree, bracket_expression273, retval);

    					}
    					break;

    				default:
    					if (cnt97 >= 1)
    						goto loop97;

    					if (state.backtracking>0) {state.failed=true; return retval;}
    					EarlyExitException eee97 = new EarlyExitException( 97, input );
    					DebugRecognitionException(eee97);
    					throw eee97;
    				}
    				cnt97++;
    			}
    			loop97:
    				;

    			} finally { DebugExitSubRule(97); }

    			DebugLocation(351, 24);
    			// cs.g:351:24: ( arguments )?
    			int alt98=2;
    			try { DebugEnterSubRule(98);
    			try { DebugEnterDecision(98, decisionCanBacktrack[98]);
    			try
    			{
    				alt98 = dfa98.Predict(input);
    			}
    			catch (NoViableAltException nvae)
    			{
    				DebugRecognitionException(nvae);
    				throw;
    			}
    			} finally { DebugExitDecision(98); }
    			switch (alt98)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: arguments
    				{
    				DebugLocation(351, 24);
    				PushFollow(Follow._arguments_in_brackets_or_arguments2151);
    				arguments274=arguments();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, arguments274.Tree, arguments274, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(98); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:352:4: arguments ( bracket_expression )*
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(352, 4);
    			PushFollow(Follow._arguments_in_brackets_or_arguments2157);
    			arguments275=arguments();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, arguments275.Tree, arguments275, retval);
    			DebugLocation(352, 16);
    			// cs.g:352:16: ( bracket_expression )*
    			try { DebugEnterSubRule(99);
    			while (true)
    			{
    				int alt99=2;
    				try { DebugEnterDecision(99, decisionCanBacktrack[99]);
    				try
    				{
    					alt99 = dfa99.Predict(input);
    				}
    				catch (NoViableAltException nvae)
    				{
    					DebugRecognitionException(nvae);
    					throw;
    				}
    				} finally { DebugExitDecision(99); }
    				switch ( alt99 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:0:0: bracket_expression
    					{
    					DebugLocation(352, 16);
    					PushFollow(Follow._bracket_expression_in_brackets_or_arguments2161);
    					bracket_expression276=bracket_expression();
    					PopFollow();
    					if (state.failed) return retval;
    					if ( (state.backtracking==0) ) adaptor.AddChild(root_0, bracket_expression276.Tree, bracket_expression276, retval);

    					}
    					break;

    				default:
    					goto loop99;
    				}
    			}

    			loop99:
    				;

    			} finally { DebugExitSubRule(99); }


    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 84, brackets_or_arguments_StartIndex); }
        }
     	DebugLocation(352, 35);
    	} finally { DebugExitRule(GrammarFileName, "brackets_or_arguments"); }
    	return retval;

    }
    // $ANTLR end "brackets_or_arguments"

    public class access_operator_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_access_operator() {}
    protected virtual void Leave_access_operator() {}

    // $ANTLR start "access_operator"
    // cs.g:353:1: access_operator : ( '.' | '->' );
    [GrammarRule("access_operator")]
    public csParser.access_operator_return access_operator()
    {

        csParser.access_operator_return retval = new csParser.access_operator_return();
        retval.Start = (IToken)input.LT(1);
        int access_operator_StartIndex = input.Index;
        object root_0 = null;

        IToken set277=null;

        object set277_tree=null;

    	try { DebugEnterRule(GrammarFileName, "access_operator");
    	DebugLocation(353, 14);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 85)) { return retval; }
    		// cs.g:353:16: ( '.' | '->' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(353, 16);
    		set277=(IToken)input.LT(1);
    		if ((input.LA(1)>=DOT && input.LA(1)<=PTR))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set277, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 85, access_operator_StartIndex); }
        }
     	DebugLocation(354, 14);
    	} finally { DebugExitRule(GrammarFileName, "access_operator"); }
    	return retval;

    }
    // $ANTLR end "access_operator"

    public class arguments_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_arguments() {}
    protected virtual void Leave_arguments() {}

    // $ANTLR start "arguments"
    // cs.g:355:1: arguments : '(' ( argument_list )? ')' ;
    [GrammarRule("arguments")]
    public csParser.arguments_return arguments()
    {

        csParser.arguments_return retval = new csParser.arguments_return();
        retval.Start = (IToken)input.LT(1);
        int arguments_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal278=null;
        IToken char_literal280=null;
        csParser.argument_list_return argument_list279 = default(csParser.argument_list_return);

        object char_literal278_tree=null;
        object char_literal280_tree=null;

    	try { DebugEnterRule(GrammarFileName, "arguments");
    	DebugLocation(355, 28);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 86)) { return retval; }
    		// cs.g:355:10: ( '(' ( argument_list )? ')' )
    		DebugEnterAlt(1);
    		// cs.g:356:2: '(' ( argument_list )? ')'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(356, 2);
    		char_literal278=(IToken)Match(input,110,Follow._110_in_arguments2185); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal278_tree = (object)adaptor.Create(char_literal278, retval);
    		adaptor.AddChild(root_0, char_literal278_tree);
    		}
    		DebugLocation(356, 8);
    		// cs.g:356:8: ( argument_list )?
    		int alt101=2;
    		try { DebugEnterSubRule(101);
    		try { DebugEnterDecision(101, decisionCanBacktrack[101]);
    		int LA101_0 = input.LA(1);

    		if (((LA101_0>=IDENTIFIER && LA101_0<=NULL)||LA101_0==MINUS||LA101_0==SET||(LA101_0>=90 && LA101_0<=91)||LA101_0==95||(LA101_0>=101 && LA101_0<=107)||(LA101_0>=109 && LA101_0<=111)||(LA101_0>=114 && LA101_0<=122)||(LA101_0>=124 && LA101_0<=144)||(LA101_0>=175 && LA101_0<=187)||LA101_0==199||(LA101_0>=201 && LA101_0<=202)||LA101_0==208||(LA101_0>=225 && LA101_0<=226)))
    		{
    			alt101=1;
    		}
    		} finally { DebugExitDecision(101); }
    		switch (alt101)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: argument_list
    			{
    			DebugLocation(356, 8);
    			PushFollow(Follow._argument_list_in_arguments2189);
    			argument_list279=argument_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, argument_list279.Tree, argument_list279, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(101); }

    		DebugLocation(356, 25);
    		char_literal280=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_arguments2194), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal280_tree = (object)adaptor.Create(char_literal280, retval);
    		adaptor.AddChild(root_0, char_literal280_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 86, arguments_StartIndex); }
        }
     	DebugLocation(356, 28);
    	} finally { DebugExitRule(GrammarFileName, "arguments"); }
    	return retval;

    }
    // $ANTLR end "arguments"

    public class bracket_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_bracket_expression() {}
    protected virtual void Leave_bracket_expression() {}

    // $ANTLR start "bracket_expression"
    // cs.g:357:1: bracket_expression : '[' ( expression_list )? ']' ;
    [GrammarRule("bracket_expression")]
    public csParser.bracket_expression_return bracket_expression()
    {

        csParser.bracket_expression_return retval = new csParser.bracket_expression_return();
        retval.Start = (IToken)input.LT(1);
        int bracket_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal281=null;
        IToken char_literal283=null;
        csParser.expression_list_return expression_list282 = default(csParser.expression_list_return);

        object char_literal281_tree=null;
        object char_literal283_tree=null;

    	try { DebugEnterRule(GrammarFileName, "bracket_expression");
    	DebugLocation(357, 30);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 87)) { return retval; }
    		// cs.g:357:19: ( '[' ( expression_list )? ']' )
    		DebugEnterAlt(1);
    		// cs.g:358:2: '[' ( expression_list )? ']'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(358, 2);
    		char_literal281=(IToken)Match(input,97,Follow._97_in_bracket_expression2202); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal281_tree = (object)adaptor.Create(char_literal281, retval);
    		adaptor.AddChild(root_0, char_literal281_tree);
    		}
    		DebugLocation(358, 8);
    		// cs.g:358:8: ( expression_list )?
    		int alt102=2;
    		try { DebugEnterSubRule(102);
    		try { DebugEnterDecision(102, decisionCanBacktrack[102]);
    		int LA102_0 = input.LA(1);

    		if (((LA102_0>=IDENTIFIER && LA102_0<=NULL)||LA102_0==MINUS||LA102_0==SET||(LA102_0>=90 && LA102_0<=91)||LA102_0==95||(LA102_0>=101 && LA102_0<=107)||(LA102_0>=109 && LA102_0<=111)||(LA102_0>=114 && LA102_0<=122)||(LA102_0>=124 && LA102_0<=129)||(LA102_0>=132 && LA102_0<=144)||(LA102_0>=175 && LA102_0<=187)||LA102_0==199||(LA102_0>=201 && LA102_0<=202)||LA102_0==208||(LA102_0>=225 && LA102_0<=226)))
    		{
    			alt102=1;
    		}
    		} finally { DebugExitDecision(102); }
    		switch (alt102)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: expression_list
    			{
    			DebugLocation(358, 8);
    			PushFollow(Follow._expression_list_in_bracket_expression2206);
    			expression_list282=expression_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression_list282.Tree, expression_list282, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(102); }

    		DebugLocation(358, 27);
    		char_literal283=(IToken)Match(input,99,Follow._99_in_bracket_expression2211); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal283_tree = (object)adaptor.Create(char_literal283, retval);
    		adaptor.AddChild(root_0, char_literal283_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 87, bracket_expression_StartIndex); }
        }
     	DebugLocation(358, 30);
    	} finally { DebugExitRule(GrammarFileName, "bracket_expression"); }
    	return retval;

    }
    // $ANTLR end "bracket_expression"

    public class member_access_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_member_access() {}
    protected virtual void Leave_member_access() {}

    // $ANTLR start "member_access"
    // cs.g:360:1: member_access : identifier ( '.' primary_or_array_creation_expression )? ;
    [GrammarRule("member_access")]
    public csParser.member_access_return member_access()
    {

        csParser.member_access_return retval = new csParser.member_access_return();
        retval.Start = (IToken)input.LT(1);
        int member_access_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal285=null;
        csParser.identifier_return identifier284 = default(csParser.identifier_return);
        csParser.primary_or_array_creation_expression_return primary_or_array_creation_expression286 = default(csParser.primary_or_array_creation_expression_return);

        object char_literal285_tree=null;

    	try { DebugEnterRule(GrammarFileName, "member_access");
    	DebugLocation(360, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 88)) { return retval; }
    		// cs.g:360:14: ( identifier ( '.' primary_or_array_creation_expression )? )
    		DebugEnterAlt(1);
    		// cs.g:361:2: identifier ( '.' primary_or_array_creation_expression )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(361, 2);
    		PushFollow(Follow._identifier_in_member_access2220);
    		identifier284=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier284.Tree, identifier284, retval);
    		DebugLocation(361, 15);
    		// cs.g:361:15: ( '.' primary_or_array_creation_expression )?
    		int alt103=2;
    		try { DebugEnterSubRule(103);
    		try { DebugEnterDecision(103, decisionCanBacktrack[103]);
    		int LA103_0 = input.LA(1);

    		if ((LA103_0==DOT))
    		{
    			alt103=1;
    		}
    		} finally { DebugExitDecision(103); }
    		switch (alt103)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:361:16: '.' primary_or_array_creation_expression
    			{
    			DebugLocation(361, 16);
    			char_literal285=(IToken)new XToken((IToken)Match(input,DOT,Follow._DOT_in_member_access2225), "DOT"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal285_tree = (object)adaptor.Create(char_literal285, retval);
    			adaptor.AddChild(root_0, char_literal285_tree);
    			}
    			DebugLocation(361, 22);
    			PushFollow(Follow._primary_or_array_creation_expression_in_member_access2229);
    			primary_or_array_creation_expression286=primary_or_array_creation_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, primary_or_array_creation_expression286.Tree, primary_or_array_creation_expression286, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(103); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 88, member_access_StartIndex); }
        }
     	DebugLocation(362, 1);
    	} finally { DebugExitRule(GrammarFileName, "member_access"); }
    	return retval;

    }
    // $ANTLR end "member_access"

    public class predefined_type_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_predefined_type() {}
    protected virtual void Leave_predefined_type() {}

    // $ANTLR start "predefined_type"
    // cs.g:363:1: predefined_type : ( 'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' );
    [GrammarRule("predefined_type")]
    public csParser.predefined_type_return predefined_type()
    {

        csParser.predefined_type_return retval = new csParser.predefined_type_return();
        retval.Start = (IToken)input.LT(1);
        int predefined_type_StartIndex = input.Index;
        object root_0 = null;

        IToken set287=null;

        object set287_tree=null;

    	try { DebugEnterRule(GrammarFileName, "predefined_type");
    	DebugLocation(363, 12);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 89)) { return retval; }
    		// cs.g:363:16: ( 'bool' | 'byte' | 'char' | 'decimal' | 'double' | 'float' | 'int' | 'long' | 'object' | 'sbyte' | 'short' | 'string' | 'uint' | 'ulong' | 'ushort' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(363, 16);
    		set287=(IToken)input.LT(1);
    		if ((input.LA(1)>=114 && input.LA(1)<=122)||(input.LA(1)>=132 && input.LA(1)<=137))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set287, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 89, predefined_type_StartIndex); }
        }
     	DebugLocation(378, 12);
    	} finally { DebugExitRule(GrammarFileName, "predefined_type"); }
    	return retval;

    }
    // $ANTLR end "predefined_type"

    public class invocation_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_invocation_expression() {}
    protected virtual void Leave_invocation_expression() {}

    // $ANTLR start "invocation_expression"
    // cs.g:380:1: invocation_expression : access arguments ;
    [GrammarRule("invocation_expression")]
    public csParser.invocation_expression_return invocation_expression()
    {

        csParser.invocation_expression_return retval = new csParser.invocation_expression_return();
        retval.Start = (IToken)input.LT(1);
        int invocation_expression_StartIndex = input.Index;
        object root_0 = null;

        csParser.access_return access288 = default(csParser.access_return);
        csParser.arguments_return arguments289 = default(csParser.arguments_return);


    	try { DebugEnterRule(GrammarFileName, "invocation_expression");
    	DebugLocation(380, 17);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 90)) { return retval; }
    		// cs.g:380:22: ( access arguments )
    		DebugEnterAlt(1);
    		// cs.g:381:2: access arguments
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(381, 2);
    		PushFollow(Follow._access_in_invocation_expression2353);
    		access288=access();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, access288.Tree, access288, retval);
    		DebugLocation(381, 9);
    		PushFollow(Follow._arguments_in_invocation_expression2355);
    		arguments289=arguments();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, arguments289.Tree, arguments289, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 90, invocation_expression_StartIndex); }
        }
     	DebugLocation(381, 17);
    	} finally { DebugExitRule(GrammarFileName, "invocation_expression"); }
    	return retval;

    }
    // $ANTLR end "invocation_expression"

    public class access_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_access() {}
    protected virtual void Leave_access() {}

    // $ANTLR start "access"
    // cs.g:382:1: access : ( '(' expression ')' ( access | access_part ) | qid_start ( access_part )? );
    [GrammarRule("access")]
    public csParser.access_return access()
    {

        csParser.access_return retval = new csParser.access_return();
        retval.Start = (IToken)input.LT(1);
        int access_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal290=null;
        IToken char_literal292=null;
        csParser.expression_return expression291 = default(csParser.expression_return);
        csParser.access_return access293 = default(csParser.access_return);
        csParser.access_part_return access_part294 = default(csParser.access_part_return);
        csParser.qid_start_return qid_start295 = default(csParser.qid_start_return);
        csParser.access_part_return access_part296 = default(csParser.access_part_return);

        object char_literal290_tree=null;
        object char_literal292_tree=null;

    	try { DebugEnterRule(GrammarFileName, "access");
    	DebugLocation(382, 28);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 91)) { return retval; }
    		// cs.g:382:7: ( '(' expression ')' ( access | access_part ) | qid_start ( access_part )? )
    		int alt106=2;
    		try { DebugEnterDecision(106, decisionCanBacktrack[106]);
    		int LA106_0 = input.LA(1);

    		if ((LA106_0==110))
    		{
    			alt106=1;
    		}
    		else if (((LA106_0>=IDENTIFIER && LA106_0<=NULL)||LA106_0==SET||(LA106_0>=90 && LA106_0<=91)||LA106_0==95||(LA106_0>=101 && LA106_0<=107)||LA106_0==109||(LA106_0>=114 && LA106_0<=122)||(LA106_0>=132 && LA106_0<=137)||(LA106_0>=175 && LA106_0<=187)||LA106_0==199||(LA106_0>=201 && LA106_0<=202)||LA106_0==208||(LA106_0>=225 && LA106_0<=226)))
    		{
    			alt106=2;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 106, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(106); }
    		switch (alt106)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:383:2: '(' expression ')' ( access | access_part )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(383, 2);
    			char_literal290=(IToken)Match(input,110,Follow._110_in_access2362); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal290_tree = (object)adaptor.Create(char_literal290, retval);
    			adaptor.AddChild(root_0, char_literal290_tree);
    			}
    			DebugLocation(383, 6);
    			PushFollow(Follow._expression_in_access2364);
    			expression291=expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression291.Tree, expression291, retval);
    			DebugLocation(383, 17);
    			char_literal292=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_access2366), "RPAREN"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal292_tree = (object)adaptor.Create(char_literal292, retval);
    			adaptor.AddChild(root_0, char_literal292_tree);
    			}
    			DebugLocation(383, 21);
    			// cs.g:383:21: ( access | access_part )
    			int alt104=2;
    			try { DebugEnterSubRule(104);
    			try { DebugEnterDecision(104, decisionCanBacktrack[104]);
    			try
    			{
    				alt104 = dfa104.Predict(input);
    			}
    			catch (NoViableAltException nvae)
    			{
    				DebugRecognitionException(nvae);
    				throw;
    			}
    			} finally { DebugExitDecision(104); }
    			switch (alt104)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:383:24: access
    				{
    				DebugLocation(383, 24);
    				PushFollow(Follow._access_in_access2371);
    				access293=access();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, access293.Tree, access293, retval);

    				}
    				break;
    			case 2:
    				DebugEnterAlt(2);
    				// cs.g:384:9: access_part
    				{
    				DebugLocation(384, 9);
    				PushFollow(Follow._access_part_in_access2383);
    				access_part294=access_part();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, access_part294.Tree, access_part294, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(104); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:385:4: qid_start ( access_part )?
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(385, 4);
    			PushFollow(Follow._qid_start_in_access2391);
    			qid_start295=qid_start();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, qid_start295.Tree, qid_start295, retval);
    			DebugLocation(385, 16);
    			// cs.g:385:16: ( access_part )?
    			int alt105=2;
    			try { DebugEnterSubRule(105);
    			try { DebugEnterDecision(105, decisionCanBacktrack[105]);
    			int LA105_0 = input.LA(1);

    			if (((LA105_0>=DOT && LA105_0<=PTR)||LA105_0==97))
    			{
    				alt105=1;
    			}
    			else if ((LA105_0==110))
    			{
    				int LA105_3 = input.LA(2);

    				if ((EvaluatePredicate(synpred178_cs_fragment)))
    				{
    					alt105=1;
    				}
    			}
    			} finally { DebugExitDecision(105); }
    			switch (alt105)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: access_part
    				{
    				DebugLocation(385, 16);
    				PushFollow(Follow._access_part_in_access2395);
    				access_part296=access_part();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, access_part296.Tree, access_part296, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(105); }


    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 91, access_StartIndex); }
        }
     	DebugLocation(385, 28);
    	} finally { DebugExitRule(GrammarFileName, "access"); }
    	return retval;

    }
    // $ANTLR end "access"

    public class access_part_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_access_part() {}
    protected virtual void Leave_access_part() {}

    // $ANTLR start "access_part"
    // cs.g:387:1: access_part : ( qid_part ( access_part )? | bracket_expression ( access_part )? | arguments access_part );
    [GrammarRule("access_part")]
    public csParser.access_part_return access_part()
    {

        csParser.access_part_return retval = new csParser.access_part_return();
        retval.Start = (IToken)input.LT(1);
        int access_part_StartIndex = input.Index;
        object root_0 = null;

        csParser.qid_part_return qid_part297 = default(csParser.qid_part_return);
        csParser.access_part_return access_part298 = default(csParser.access_part_return);
        csParser.bracket_expression_return bracket_expression299 = default(csParser.bracket_expression_return);
        csParser.access_part_return access_part300 = default(csParser.access_part_return);
        csParser.arguments_return arguments301 = default(csParser.arguments_return);
        csParser.access_part_return access_part302 = default(csParser.access_part_return);


    	try { DebugEnterRule(GrammarFileName, "access_part");
    	DebugLocation(387, 25);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 92)) { return retval; }
    		// cs.g:387:12: ( qid_part ( access_part )? | bracket_expression ( access_part )? | arguments access_part )
    		int alt109=3;
    		try { DebugEnterDecision(109, decisionCanBacktrack[109]);
    		switch (input.LA(1))
    		{
    		case DOT:
    		case PTR:
    			{
    			alt109=1;
    			}
    			break;
    		case 97:
    			{
    			alt109=2;
    			}
    			break;
    		case 110:
    			{
    			alt109=3;
    			}
    			break;
    		default:
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 109, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(109); }
    		switch (alt109)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:388:2: qid_part ( access_part )?
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(388, 2);
    			PushFollow(Follow._qid_part_in_access_part2405);
    			qid_part297=qid_part();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, qid_part297.Tree, qid_part297, retval);
    			DebugLocation(388, 11);
    			// cs.g:388:11: ( access_part )?
    			int alt107=2;
    			try { DebugEnterSubRule(107);
    			try { DebugEnterDecision(107, decisionCanBacktrack[107]);
    			int LA107_0 = input.LA(1);

    			if (((LA107_0>=DOT && LA107_0<=PTR)||LA107_0==97))
    			{
    				alt107=1;
    			}
    			else if ((LA107_0==110))
    			{
    				int LA107_3 = input.LA(2);

    				if ((EvaluatePredicate(synpred179_cs_fragment)))
    				{
    					alt107=1;
    				}
    			}
    			} finally { DebugExitDecision(107); }
    			switch (alt107)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: access_part
    				{
    				DebugLocation(388, 11);
    				PushFollow(Follow._access_part_in_access_part2407);
    				access_part298=access_part();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, access_part298.Tree, access_part298, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(107); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:389:4: bracket_expression ( access_part )?
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(389, 4);
    			PushFollow(Follow._bracket_expression_in_access_part2417);
    			bracket_expression299=bracket_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, bracket_expression299.Tree, bracket_expression299, retval);
    			DebugLocation(389, 23);
    			// cs.g:389:23: ( access_part )?
    			int alt108=2;
    			try { DebugEnterSubRule(108);
    			try { DebugEnterDecision(108, decisionCanBacktrack[108]);
    			int LA108_0 = input.LA(1);

    			if (((LA108_0>=DOT && LA108_0<=PTR)||LA108_0==97))
    			{
    				alt108=1;
    			}
    			else if ((LA108_0==110))
    			{
    				int LA108_3 = input.LA(2);

    				if ((EvaluatePredicate(synpred181_cs_fragment)))
    				{
    					alt108=1;
    				}
    			}
    			} finally { DebugExitDecision(108); }
    			switch (alt108)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: access_part
    				{
    				DebugLocation(389, 23);
    				PushFollow(Follow._access_part_in_access_part2419);
    				access_part300=access_part();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, access_part300.Tree, access_part300, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(108); }


    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:390:4: arguments access_part
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(390, 4);
    			PushFollow(Follow._arguments_in_access_part2429);
    			arguments301=arguments();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, arguments301.Tree, arguments301, retval);
    			DebugLocation(390, 14);
    			PushFollow(Follow._access_part_in_access_part2431);
    			access_part302=access_part();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, access_part302.Tree, access_part302, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 92, access_part_StartIndex); }
        }
     	DebugLocation(390, 25);
    	} finally { DebugExitRule(GrammarFileName, "access_part"); }
    	return retval;

    }
    // $ANTLR end "access_part"

    public class expression_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_expression_list() {}
    protected virtual void Leave_expression_list() {}

    // $ANTLR start "expression_list"
    // cs.g:391:1: expression_list : e+= expression ( ',' e+= expression )* ;
    [GrammarRule("expression_list")]
    public csParser.expression_list_return expression_list()
    {

        csParser.expression_list_return retval = new csParser.expression_list_return();
        retval.Start = (IToken)input.LT(1);
        int expression_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal303=null;
        List list_e=null;
        csParser.expression_return e = default(csParser.expression_return);
        object char_literal303_tree=null;

    	try { DebugEnterRule(GrammarFileName, "expression_list");
    	DebugLocation(391, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 93)) { return retval; }
    		// cs.g:391:16: (e+= expression ( ',' e+= expression )* )
    		DebugEnterAlt(1);
    		// cs.g:392:2: e+= expression ( ',' e+= expression )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(392, 4);
    		PushFollow(Follow._expression_in_expression_list2455);
    		e=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, e.Tree, e, retval);
    		if (list_e==null) list_e=new ArrayList();
    		list_e.Add(e.Tree);

    		DebugLocation(392, 19);
    		// cs.g:392:19: ( ',' e+= expression )*
    		try { DebugEnterSubRule(110);
    		while (true)
    		{
    			int alt110=2;
    			try { DebugEnterDecision(110, decisionCanBacktrack[110]);
    			int LA110_0 = input.LA(1);

    			if ((LA110_0==98))
    			{
    				alt110=1;
    			}


    			} finally { DebugExitDecision(110); }
    			switch ( alt110 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:392:20: ',' e+= expression
    				{
    				DebugLocation(392, 20);
    				char_literal303=(IToken)Match(input,98,Follow._98_in_expression_list2459); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal303_tree = (object)adaptor.Create(char_literal303, retval);
    				adaptor.AddChild(root_0, char_literal303_tree);
    				}
    				DebugLocation(392, 26);
    				PushFollow(Follow._expression_in_expression_list2465);
    				e=expression();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, e.Tree, e, retval);
    				if (list_e==null) list_e=new ArrayList();
    				list_e.Add(e.Tree);


    				}
    				break;

    			default:
    				goto loop110;
    			}
    		}

    		loop110:
    			;

    		} finally { DebugExitSubRule(110); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 93, expression_list_StartIndex); }
        }
     	DebugLocation(393, 1);
    	} finally { DebugExitRule(GrammarFileName, "expression_list"); }
    	return retval;

    }
    // $ANTLR end "expression_list"

    public class object_creation_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_object_creation_expression() {}
    protected virtual void Leave_object_creation_expression() {}

    // $ANTLR start "object_creation_expression"
    // cs.g:394:1: object_creation_expression : 'new' type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer ) ;
    [GrammarRule("object_creation_expression")]
    public csParser.object_creation_expression_return object_creation_expression()
    {

        csParser.object_creation_expression_return retval = new csParser.object_creation_expression_return();
        retval.Start = (IToken)input.LT(1);
        int object_creation_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal304=null;
        IToken char_literal306=null;
        IToken char_literal308=null;
        csParser.type_return type305 = default(csParser.type_return);
        csParser.argument_list_return argument_list307 = default(csParser.argument_list_return);
        csParser.object_or_collection_initializer_return object_or_collection_initializer309 = default(csParser.object_or_collection_initializer_return);
        csParser.object_or_collection_initializer_return object_or_collection_initializer310 = default(csParser.object_or_collection_initializer_return);

        object string_literal304_tree=null;
        object char_literal306_tree=null;
        object char_literal308_tree=null;

    	try { DebugEnterRule(GrammarFileName, "object_creation_expression");
    	DebugLocation(394, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 94)) { return retval; }
    		// cs.g:394:27: ( 'new' type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer ) )
    		DebugEnterAlt(1);
    		// cs.g:395:2: 'new' type ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer )
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(395, 2);
    		string_literal304=(IToken)Match(input,138,Follow._138_in_object_creation_expression2478); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal304_tree = (object)adaptor.Create(string_literal304, retval);
    		adaptor.AddChild(root_0, string_literal304_tree);
    		}
    		DebugLocation(395, 10);
    		PushFollow(Follow._type_in_object_creation_expression2482);
    		type305=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type305.Tree, type305, retval);
    		DebugLocation(396, 3);
    		// cs.g:396:3: ( '(' ( argument_list )? ')' ( object_or_collection_initializer )? | object_or_collection_initializer )
    		int alt113=2;
    		try { DebugEnterSubRule(113);
    		try { DebugEnterDecision(113, decisionCanBacktrack[113]);
    		int LA113_0 = input.LA(1);

    		if ((LA113_0==110))
    		{
    			alt113=1;
    		}
    		else if ((LA113_0==92))
    		{
    			alt113=2;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 113, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(113); }
    		switch (alt113)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:396:5: '(' ( argument_list )? ')' ( object_or_collection_initializer )?
    			{
    			DebugLocation(396, 5);
    			char_literal306=(IToken)Match(input,110,Follow._110_in_object_creation_expression2491); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal306_tree = (object)adaptor.Create(char_literal306, retval);
    			adaptor.AddChild(root_0, char_literal306_tree);
    			}
    			DebugLocation(396, 11);
    			// cs.g:396:11: ( argument_list )?
    			int alt111=2;
    			try { DebugEnterSubRule(111);
    			try { DebugEnterDecision(111, decisionCanBacktrack[111]);
    			int LA111_0 = input.LA(1);

    			if (((LA111_0>=IDENTIFIER && LA111_0<=NULL)||LA111_0==MINUS||LA111_0==SET||(LA111_0>=90 && LA111_0<=91)||LA111_0==95||(LA111_0>=101 && LA111_0<=107)||(LA111_0>=109 && LA111_0<=111)||(LA111_0>=114 && LA111_0<=122)||(LA111_0>=124 && LA111_0<=144)||(LA111_0>=175 && LA111_0<=187)||LA111_0==199||(LA111_0>=201 && LA111_0<=202)||LA111_0==208||(LA111_0>=225 && LA111_0<=226)))
    			{
    				alt111=1;
    			}
    			} finally { DebugExitDecision(111); }
    			switch (alt111)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: argument_list
    				{
    				DebugLocation(396, 11);
    				PushFollow(Follow._argument_list_in_object_creation_expression2495);
    				argument_list307=argument_list();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, argument_list307.Tree, argument_list307, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(111); }

    			DebugLocation(396, 28);
    			char_literal308=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_object_creation_expression2500), "RPAREN"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal308_tree = (object)adaptor.Create(char_literal308, retval);
    			adaptor.AddChild(root_0, char_literal308_tree);
    			}
    			DebugLocation(396, 34);
    			// cs.g:396:34: ( object_or_collection_initializer )?
    			int alt112=2;
    			try { DebugEnterSubRule(112);
    			try { DebugEnterDecision(112, decisionCanBacktrack[112]);
    			int LA112_0 = input.LA(1);

    			if ((LA112_0==92))
    			{
    				alt112=1;
    			}
    			} finally { DebugExitDecision(112); }
    			switch (alt112)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: object_or_collection_initializer
    				{
    				DebugLocation(396, 34);
    				PushFollow(Follow._object_or_collection_initializer_in_object_creation_expression2504);
    				object_or_collection_initializer309=object_or_collection_initializer();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, object_or_collection_initializer309.Tree, object_or_collection_initializer309, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(112); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:397:7: object_or_collection_initializer
    			{
    			DebugLocation(397, 7);
    			PushFollow(Follow._object_or_collection_initializer_in_object_creation_expression2515);
    			object_or_collection_initializer310=object_or_collection_initializer();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, object_or_collection_initializer310.Tree, object_or_collection_initializer310, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(113); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 94, object_creation_expression_StartIndex); }
        }
     	DebugLocation(398, 1);
    	} finally { DebugExitRule(GrammarFileName, "object_creation_expression"); }
    	return retval;

    }
    // $ANTLR end "object_creation_expression"

    public class object_or_collection_initializer_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_object_or_collection_initializer() {}
    protected virtual void Leave_object_or_collection_initializer() {}

    // $ANTLR start "object_or_collection_initializer"
    // cs.g:399:1: object_or_collection_initializer : ( object_initializer | collection_initializer );
    [GrammarRule("object_or_collection_initializer")]
    public csParser.object_or_collection_initializer_return object_or_collection_initializer()
    {

        csParser.object_or_collection_initializer_return retval = new csParser.object_or_collection_initializer_return();
        retval.Start = (IToken)input.LT(1);
        int object_or_collection_initializer_StartIndex = input.Index;
        object root_0 = null;

        csParser.object_initializer_return object_initializer311 = default(csParser.object_initializer_return);
        csParser.collection_initializer_return collection_initializer312 = default(csParser.collection_initializer_return);


    	try { DebugEnterRule(GrammarFileName, "object_or_collection_initializer");
    	DebugLocation(399, 26);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 95)) { return retval; }
    		// cs.g:399:33: ( object_initializer | collection_initializer )
    		int alt114=2;
    		try { DebugEnterDecision(114, decisionCanBacktrack[114]);
    		int LA114_0 = input.LA(1);

    		if ((LA114_0==92))
    		{
    			switch (input.LA(2))
    			{
    			case IDENTIFIER:
    				{
    				int LA114_2 = input.LA(3);

    				if ((LA114_2==96))
    				{
    					alt114=1;
    				}
    				else if ((LA114_2==IDENTIFIER||(LA114_2>=DOT && LA114_2<=GT)||LA114_2==SET||LA114_2==89||LA114_2==93||LA114_2==95||(LA114_2>=97 && LA114_2<=98)||(LA114_2>=101 && LA114_2<=107)||(LA114_2>=109 && LA114_2<=112)||(LA114_2>=123 && LA114_2<=124)||(LA114_2>=127 && LA114_2<=129)||(LA114_2>=146 && LA114_2<=159)||LA114_2==169||(LA114_2>=175 && LA114_2<=187)||LA114_2==199||(LA114_2>=201 && LA114_2<=202)||LA114_2==208||(LA114_2>=225 && LA114_2<=226)))
    				{
    					alt114=2;
    				}
    				else
    				{
    					if (state.backtracking>0) {state.failed=true; return retval;}
    					NoViableAltException nvae = new NoViableAltException("", 114, 2, input);

    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    				}
    				break;
    			case 175:
    				{
    				int LA114_3 = input.LA(3);

    				if ((LA114_3==96))
    				{
    					alt114=1;
    				}
    				else if ((LA114_3==IDENTIFIER||(LA114_3>=DOT && LA114_3<=GT)||LA114_3==SET||LA114_3==89||LA114_3==93||LA114_3==95||(LA114_3>=97 && LA114_3<=98)||(LA114_3>=101 && LA114_3<=107)||(LA114_3>=109 && LA114_3<=124)||(LA114_3>=127 && LA114_3<=129)||(LA114_3>=132 && LA114_3<=137)||(LA114_3>=146 && LA114_3<=159)||LA114_3==169||(LA114_3>=175 && LA114_3<=187)||LA114_3==199||(LA114_3>=201 && LA114_3<=202)||LA114_3==208||(LA114_3>=225 && LA114_3<=226)))
    				{
    					alt114=2;
    				}
    				else
    				{
    					if (state.backtracking>0) {state.failed=true; return retval;}
    					NoViableAltException nvae = new NoViableAltException("", 114, 3, input);

    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    				}
    				break;
    			case 93:
    				{
    				alt114=1;
    				}
    				break;
    			case Real_literal:
    			case NUMBER:
    			case Hex_number:
    			case Character_literal:
    			case STRINGLITERAL:
    			case Verbatim_string_literal:
    			case TRUE:
    			case FALSE:
    			case NULL:
    			case MINUS:
    			case 90:
    			case 91:
    			case 92:
    			case 110:
    			case 111:
    			case 114:
    			case 115:
    			case 116:
    			case 117:
    			case 118:
    			case 119:
    			case 120:
    			case 121:
    			case 122:
    			case 124:
    			case 125:
    			case 126:
    			case 127:
    			case 128:
    			case 129:
    			case 132:
    			case 133:
    			case 134:
    			case 135:
    			case 136:
    			case 137:
    			case 138:
    			case 139:
    			case 140:
    			case 141:
    			case 142:
    			case 143:
    			case 144:
    				{
    				alt114=2;
    				}
    				break;
    			case SET:
    			case 95:
    			case 101:
    			case 102:
    			case 103:
    			case 104:
    			case 105:
    			case 106:
    			case 107:
    			case 109:
    			case 176:
    			case 177:
    			case 178:
    			case 179:
    			case 180:
    			case 181:
    			case 182:
    			case 183:
    			case 184:
    			case 185:
    			case 186:
    			case 187:
    			case 199:
    			case 201:
    			case 202:
    			case 208:
    			case 225:
    			case 226:
    				{
    				int LA114_6 = input.LA(3);

    				if ((LA114_6==96))
    				{
    					alt114=1;
    				}
    				else if ((LA114_6==IDENTIFIER||(LA114_6>=DOT && LA114_6<=GT)||LA114_6==SET||LA114_6==89||LA114_6==93||LA114_6==95||(LA114_6>=97 && LA114_6<=98)||(LA114_6>=101 && LA114_6<=107)||(LA114_6>=109 && LA114_6<=112)||(LA114_6>=123 && LA114_6<=124)||(LA114_6>=127 && LA114_6<=129)||(LA114_6>=146 && LA114_6<=159)||LA114_6==169||(LA114_6>=175 && LA114_6<=187)||LA114_6==199||(LA114_6>=201 && LA114_6<=202)||LA114_6==208||(LA114_6>=225 && LA114_6<=226)))
    				{
    					alt114=2;
    				}
    				else
    				{
    					if (state.backtracking>0) {state.failed=true; return retval;}
    					NoViableAltException nvae = new NoViableAltException("", 114, 6, input);

    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    				}
    				break;
    			default:
    				{
    					if (state.backtracking>0) {state.failed=true; return retval;}
    					NoViableAltException nvae = new NoViableAltException("", 114, 1, input);

    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    			}

    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 114, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(114); }
    		switch (alt114)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:400:2: object_initializer
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(400, 2);
    			PushFollow(Follow._object_initializer_in_object_or_collection_initializer2527);
    			object_initializer311=object_initializer();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, object_initializer311.Tree, object_initializer311, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:401:4: collection_initializer
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(401, 4);
    			PushFollow(Follow._collection_initializer_in_object_or_collection_initializer2533);
    			collection_initializer312=collection_initializer();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, collection_initializer312.Tree, collection_initializer312, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 95, object_or_collection_initializer_StartIndex); }
        }
     	DebugLocation(401, 26);
    	} finally { DebugExitRule(GrammarFileName, "object_or_collection_initializer"); }
    	return retval;

    }
    // $ANTLR end "object_or_collection_initializer"

    public class object_initializer_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_object_initializer() {}
    protected virtual void Leave_object_initializer() {}

    // $ANTLR start "object_initializer"
    // cs.g:408:1: object_initializer : ( '{' ( member_initializer_list )? '}' | '{' member_initializer_list ',' '}' );
    [GrammarRule("object_initializer")]
    public csParser.object_initializer_return object_initializer()
    {

        csParser.object_initializer_return retval = new csParser.object_initializer_return();
        retval.Start = (IToken)input.LT(1);
        int object_initializer_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal313=null;
        IToken char_literal315=null;
        IToken char_literal316=null;
        IToken char_literal318=null;
        IToken char_literal319=null;
        csParser.member_initializer_list_return member_initializer_list314 = default(csParser.member_initializer_list_return);
        csParser.member_initializer_list_return member_initializer_list317 = default(csParser.member_initializer_list_return);

        object char_literal313_tree=null;
        object char_literal315_tree=null;
        object char_literal316_tree=null;
        object char_literal318_tree=null;
        object char_literal319_tree=null;

    	try { DebugEnterRule(GrammarFileName, "object_initializer");
    	DebugLocation(408, 45);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 96)) { return retval; }
    		// cs.g:408:19: ( '{' ( member_initializer_list )? '}' | '{' member_initializer_list ',' '}' )
    		int alt116=2;
    		try { DebugEnterDecision(116, decisionCanBacktrack[116]);
    		int LA116_0 = input.LA(1);

    		if ((LA116_0==92))
    		{
    			int LA116_1 = input.LA(2);

    			if ((EvaluatePredicate(synpred189_cs_fragment)))
    			{
    				alt116=1;
    			}
    			else if ((true))
    			{
    				alt116=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 116, 1, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 116, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(116); }
    		switch (alt116)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:409:2: '{' ( member_initializer_list )? '}'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(409, 2);
    			char_literal313=(IToken)Match(input,92,Follow._92_in_object_initializer2548); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal313_tree = (object)adaptor.Create(char_literal313, retval);
    			adaptor.AddChild(root_0, char_literal313_tree);
    			}
    			DebugLocation(409, 8);
    			// cs.g:409:8: ( member_initializer_list )?
    			int alt115=2;
    			try { DebugEnterSubRule(115);
    			try { DebugEnterDecision(115, decisionCanBacktrack[115]);
    			int LA115_0 = input.LA(1);

    			if ((LA115_0==IDENTIFIER||LA115_0==SET||LA115_0==95||(LA115_0>=101 && LA115_0<=107)||LA115_0==109||(LA115_0>=175 && LA115_0<=187)||LA115_0==199||(LA115_0>=201 && LA115_0<=202)||LA115_0==208||(LA115_0>=225 && LA115_0<=226)))
    			{
    				alt115=1;
    			}
    			} finally { DebugExitDecision(115); }
    			switch (alt115)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: member_initializer_list
    				{
    				DebugLocation(409, 8);
    				PushFollow(Follow._member_initializer_list_in_object_initializer2552);
    				member_initializer_list314=member_initializer_list();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, member_initializer_list314.Tree, member_initializer_list314, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(115); }

    			DebugLocation(409, 35);
    			char_literal315=(IToken)Match(input,93,Follow._93_in_object_initializer2557); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal315_tree = (object)adaptor.Create(char_literal315, retval);
    			adaptor.AddChild(root_0, char_literal315_tree);
    			}

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:410:4: '{' member_initializer_list ',' '}'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(410, 4);
    			char_literal316=(IToken)Match(input,92,Follow._92_in_object_initializer2563); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal316_tree = (object)adaptor.Create(char_literal316, retval);
    			adaptor.AddChild(root_0, char_literal316_tree);
    			}
    			DebugLocation(410, 10);
    			PushFollow(Follow._member_initializer_list_in_object_initializer2567);
    			member_initializer_list317=member_initializer_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, member_initializer_list317.Tree, member_initializer_list317, retval);
    			DebugLocation(410, 36);
    			char_literal318=(IToken)Match(input,98,Follow._98_in_object_initializer2571); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal318_tree = (object)adaptor.Create(char_literal318, retval);
    			adaptor.AddChild(root_0, char_literal318_tree);
    			}
    			DebugLocation(410, 42);
    			char_literal319=(IToken)Match(input,93,Follow._93_in_object_initializer2575); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal319_tree = (object)adaptor.Create(char_literal319, retval);
    			adaptor.AddChild(root_0, char_literal319_tree);
    			}

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 96, object_initializer_StartIndex); }
        }
     	DebugLocation(410, 45);
    	} finally { DebugExitRule(GrammarFileName, "object_initializer"); }
    	return retval;

    }
    // $ANTLR end "object_initializer"

    public class member_initializer_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_member_initializer_list() {}
    protected virtual void Leave_member_initializer_list() {}

    // $ANTLR start "member_initializer_list"
    // cs.g:411:1: member_initializer_list : mi+= member_initializer ( ',' mi+= member_initializer ) ;
    [GrammarRule("member_initializer_list")]
    public csParser.member_initializer_list_return member_initializer_list()
    {

        csParser.member_initializer_list_return retval = new csParser.member_initializer_list_return();
        retval.Start = (IToken)input.LT(1);
        int member_initializer_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal320=null;
        List list_mi=null;
        csParser.member_initializer_return mi = default(csParser.member_initializer_return);
        object char_literal320_tree=null;

    	try { DebugEnterRule(GrammarFileName, "member_initializer_list");
    	DebugLocation(411, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 97)) { return retval; }
    		// cs.g:411:24: (mi+= member_initializer ( ',' mi+= member_initializer ) )
    		DebugEnterAlt(1);
    		// cs.g:412:2: mi+= member_initializer ( ',' mi+= member_initializer )
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(412, 5);
    		PushFollow(Follow._member_initializer_in_member_initializer_list2588);
    		mi=member_initializer();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, mi.Tree, mi, retval);
    		if (list_mi==null) list_mi=new ArrayList();
    		list_mi.Add(mi.Tree);

    		DebugLocation(412, 28);
    		// cs.g:412:28: ( ',' mi+= member_initializer )
    		DebugEnterAlt(1);
    		// cs.g:412:29: ',' mi+= member_initializer
    		{
    		DebugLocation(412, 29);
    		char_literal320=(IToken)Match(input,98,Follow._98_in_member_initializer_list2592); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal320_tree = (object)adaptor.Create(char_literal320, retval);
    		adaptor.AddChild(root_0, char_literal320_tree);
    		}
    		DebugLocation(412, 36);
    		PushFollow(Follow._member_initializer_in_member_initializer_list2598);
    		mi=member_initializer();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, mi.Tree, mi, retval);
    		if (list_mi==null) list_mi=new ArrayList();
    		list_mi.Add(mi.Tree);


    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 97, member_initializer_list_StartIndex); }
        }
     	DebugLocation(413, 1);
    	} finally { DebugExitRule(GrammarFileName, "member_initializer_list"); }
    	return retval;

    }
    // $ANTLR end "member_initializer_list"

    public class member_initializer_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_member_initializer() {}
    protected virtual void Leave_member_initializer() {}

    // $ANTLR start "member_initializer"
    // cs.g:414:1: member_initializer : identifier '=' initializer_value ;
    [GrammarRule("member_initializer")]
    public csParser.member_initializer_return member_initializer()
    {

        csParser.member_initializer_return retval = new csParser.member_initializer_return();
        retval.Start = (IToken)input.LT(1);
        int member_initializer_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal322=null;
        csParser.identifier_return identifier321 = default(csParser.identifier_return);
        csParser.initializer_value_return initializer_value323 = default(csParser.initializer_value_return);

        object char_literal322_tree=null;

    	try { DebugEnterRule(GrammarFileName, "member_initializer");
    	DebugLocation(414, 38);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 98)) { return retval; }
    		// cs.g:414:19: ( identifier '=' initializer_value )
    		DebugEnterAlt(1);
    		// cs.g:415:2: identifier '=' initializer_value
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(415, 2);
    		PushFollow(Follow._identifier_in_member_initializer2611);
    		identifier321=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier321.Tree, identifier321, retval);
    		DebugLocation(415, 15);
    		char_literal322=(IToken)Match(input,96,Follow._96_in_member_initializer2615); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal322_tree = (object)adaptor.Create(char_literal322, retval);
    		adaptor.AddChild(root_0, char_literal322_tree);
    		}
    		DebugLocation(415, 21);
    		PushFollow(Follow._initializer_value_in_member_initializer2619);
    		initializer_value323=initializer_value();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, initializer_value323.Tree, initializer_value323, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 98, member_initializer_StartIndex); }
        }
     	DebugLocation(415, 38);
    	} finally { DebugExitRule(GrammarFileName, "member_initializer"); }
    	return retval;

    }
    // $ANTLR end "member_initializer"

    public class initializer_value_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_initializer_value() {}
    protected virtual void Leave_initializer_value() {}

    // $ANTLR start "initializer_value"
    // cs.g:416:1: initializer_value : ( expression | object_or_collection_initializer );
    [GrammarRule("initializer_value")]
    public csParser.initializer_value_return initializer_value()
    {

        csParser.initializer_value_return retval = new csParser.initializer_value_return();
        retval.Start = (IToken)input.LT(1);
        int initializer_value_StartIndex = input.Index;
        object root_0 = null;

        csParser.expression_return expression324 = default(csParser.expression_return);
        csParser.object_or_collection_initializer_return object_or_collection_initializer325 = default(csParser.object_or_collection_initializer_return);


    	try { DebugEnterRule(GrammarFileName, "initializer_value");
    	DebugLocation(416, 36);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 99)) { return retval; }
    		// cs.g:416:18: ( expression | object_or_collection_initializer )
    		int alt117=2;
    		try { DebugEnterDecision(117, decisionCanBacktrack[117]);
    		int LA117_0 = input.LA(1);

    		if (((LA117_0>=IDENTIFIER && LA117_0<=NULL)||LA117_0==MINUS||LA117_0==SET||(LA117_0>=90 && LA117_0<=91)||LA117_0==95||(LA117_0>=101 && LA117_0<=107)||(LA117_0>=109 && LA117_0<=111)||(LA117_0>=114 && LA117_0<=122)||(LA117_0>=124 && LA117_0<=129)||(LA117_0>=132 && LA117_0<=144)||(LA117_0>=175 && LA117_0<=187)||LA117_0==199||(LA117_0>=201 && LA117_0<=202)||LA117_0==208||(LA117_0>=225 && LA117_0<=226)))
    		{
    			alt117=1;
    		}
    		else if ((LA117_0==92))
    		{
    			alt117=2;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 117, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(117); }
    		switch (alt117)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:417:2: expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(417, 2);
    			PushFollow(Follow._expression_in_initializer_value2628);
    			expression324=expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression324.Tree, expression324, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:418:4: object_or_collection_initializer
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(418, 4);
    			PushFollow(Follow._object_or_collection_initializer_in_initializer_value2634);
    			object_or_collection_initializer325=object_or_collection_initializer();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, object_or_collection_initializer325.Tree, object_or_collection_initializer325, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 99, initializer_value_StartIndex); }
        }
     	DebugLocation(418, 36);
    	} finally { DebugExitRule(GrammarFileName, "initializer_value"); }
    	return retval;

    }
    // $ANTLR end "initializer_value"

    public class collection_initializer_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_collection_initializer() {}
    protected virtual void Leave_collection_initializer() {}

    // $ANTLR start "collection_initializer"
    // cs.g:419:1: collection_initializer : '{' element_initializer_list ( ',' )? '}' ;
    [GrammarRule("collection_initializer")]
    public csParser.collection_initializer_return collection_initializer()
    {

        csParser.collection_initializer_return retval = new csParser.collection_initializer_return();
        retval.Start = (IToken)input.LT(1);
        int collection_initializer_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal326=null;
        IToken char_literal328=null;
        IToken char_literal329=null;
        csParser.element_initializer_list_return element_initializer_list327 = default(csParser.element_initializer_list_return);

        object char_literal326_tree=null;
        object char_literal328_tree=null;
        object char_literal329_tree=null;

    	try { DebugEnterRule(GrammarFileName, "collection_initializer");
    	DebugLocation(419, 45);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 100)) { return retval; }
    		// cs.g:419:23: ( '{' element_initializer_list ( ',' )? '}' )
    		DebugEnterAlt(1);
    		// cs.g:420:2: '{' element_initializer_list ( ',' )? '}'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(420, 2);
    		char_literal326=(IToken)Match(input,92,Follow._92_in_collection_initializer2643); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal326_tree = (object)adaptor.Create(char_literal326, retval);
    		adaptor.AddChild(root_0, char_literal326_tree);
    		}
    		DebugLocation(420, 8);
    		PushFollow(Follow._element_initializer_list_in_collection_initializer2647);
    		element_initializer_list327=element_initializer_list();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, element_initializer_list327.Tree, element_initializer_list327, retval);
    		DebugLocation(420, 35);
    		// cs.g:420:35: ( ',' )?
    		int alt118=2;
    		try { DebugEnterSubRule(118);
    		try { DebugEnterDecision(118, decisionCanBacktrack[118]);
    		int LA118_0 = input.LA(1);

    		if ((LA118_0==98))
    		{
    			alt118=1;
    		}
    		} finally { DebugExitDecision(118); }
    		switch (alt118)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: ','
    			{
    			DebugLocation(420, 35);
    			char_literal328=(IToken)Match(input,98,Follow._98_in_collection_initializer2651); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal328_tree = (object)adaptor.Create(char_literal328, retval);
    			adaptor.AddChild(root_0, char_literal328_tree);
    			}

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(118); }

    		DebugLocation(420, 42);
    		char_literal329=(IToken)Match(input,93,Follow._93_in_collection_initializer2656); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal329_tree = (object)adaptor.Create(char_literal329, retval);
    		adaptor.AddChild(root_0, char_literal329_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 100, collection_initializer_StartIndex); }
        }
     	DebugLocation(420, 45);
    	} finally { DebugExitRule(GrammarFileName, "collection_initializer"); }
    	return retval;

    }
    // $ANTLR end "collection_initializer"

    public class element_initializer_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_element_initializer_list() {}
    protected virtual void Leave_element_initializer_list() {}

    // $ANTLR start "element_initializer_list"
    // cs.g:421:1: element_initializer_list : ei+= element_initializer ( ',' ei+= element_initializer )* ;
    [GrammarRule("element_initializer_list")]
    public csParser.element_initializer_list_return element_initializer_list()
    {

        csParser.element_initializer_list_return retval = new csParser.element_initializer_list_return();
        retval.Start = (IToken)input.LT(1);
        int element_initializer_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal330=null;
        List list_ei=null;
        csParser.element_initializer_return ei = default(csParser.element_initializer_return);
        object char_literal330_tree=null;

    	try { DebugEnterRule(GrammarFileName, "element_initializer_list");
    	DebugLocation(421, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 101)) { return retval; }
    		// cs.g:421:25: (ei+= element_initializer ( ',' ei+= element_initializer )* )
    		DebugEnterAlt(1);
    		// cs.g:422:2: ei+= element_initializer ( ',' ei+= element_initializer )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(422, 5);
    		PushFollow(Follow._element_initializer_in_element_initializer_list2669);
    		ei=element_initializer();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, ei.Tree, ei, retval);
    		if (list_ei==null) list_ei=new ArrayList();
    		list_ei.Add(ei.Tree);

    		DebugLocation(422, 29);
    		// cs.g:422:29: ( ',' ei+= element_initializer )*
    		try { DebugEnterSubRule(119);
    		while (true)
    		{
    			int alt119=2;
    			try { DebugEnterDecision(119, decisionCanBacktrack[119]);
    			int LA119_0 = input.LA(1);

    			if ((LA119_0==98))
    			{
    				int LA119_1 = input.LA(2);

    				if (((LA119_1>=IDENTIFIER && LA119_1<=NULL)||LA119_1==MINUS||LA119_1==SET||(LA119_1>=90 && LA119_1<=92)||LA119_1==95||(LA119_1>=101 && LA119_1<=107)||(LA119_1>=109 && LA119_1<=111)||(LA119_1>=114 && LA119_1<=122)||(LA119_1>=124 && LA119_1<=129)||(LA119_1>=132 && LA119_1<=144)||(LA119_1>=175 && LA119_1<=187)||LA119_1==199||(LA119_1>=201 && LA119_1<=202)||LA119_1==208||(LA119_1>=225 && LA119_1<=226)))
    				{
    					alt119=1;
    				}


    			}


    			} finally { DebugExitDecision(119); }
    			switch ( alt119 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:422:30: ',' ei+= element_initializer
    				{
    				DebugLocation(422, 30);
    				char_literal330=(IToken)Match(input,98,Follow._98_in_element_initializer_list2673); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal330_tree = (object)adaptor.Create(char_literal330, retval);
    				adaptor.AddChild(root_0, char_literal330_tree);
    				}
    				DebugLocation(422, 37);
    				PushFollow(Follow._element_initializer_in_element_initializer_list2679);
    				ei=element_initializer();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, ei.Tree, ei, retval);
    				if (list_ei==null) list_ei=new ArrayList();
    				list_ei.Add(ei.Tree);


    				}
    				break;

    			default:
    				goto loop119;
    			}
    		}

    		loop119:
    			;

    		} finally { DebugExitSubRule(119); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 101, element_initializer_list_StartIndex); }
        }
     	DebugLocation(423, 1);
    	} finally { DebugExitRule(GrammarFileName, "element_initializer_list"); }
    	return retval;

    }
    // $ANTLR end "element_initializer_list"

    public class element_initializer_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_element_initializer() {}
    protected virtual void Leave_element_initializer() {}

    // $ANTLR start "element_initializer"
    // cs.g:424:1: element_initializer : ( non_assignment_expression | '{' expression_list '}' );
    [GrammarRule("element_initializer")]
    public csParser.element_initializer_return element_initializer()
    {

        csParser.element_initializer_return retval = new csParser.element_initializer_return();
        retval.Start = (IToken)input.LT(1);
        int element_initializer_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal332=null;
        IToken char_literal334=null;
        csParser.non_assignment_expression_return non_assignment_expression331 = default(csParser.non_assignment_expression_return);
        csParser.expression_list_return expression_list333 = default(csParser.expression_list_return);

        object char_literal332_tree=null;
        object char_literal334_tree=null;

    	try { DebugEnterRule(GrammarFileName, "element_initializer");
    	DebugLocation(424, 31);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 102)) { return retval; }
    		// cs.g:424:20: ( non_assignment_expression | '{' expression_list '}' )
    		int alt120=2;
    		try { DebugEnterDecision(120, decisionCanBacktrack[120]);
    		int LA120_0 = input.LA(1);

    		if (((LA120_0>=IDENTIFIER && LA120_0<=NULL)||LA120_0==MINUS||LA120_0==SET||(LA120_0>=90 && LA120_0<=91)||LA120_0==95||(LA120_0>=101 && LA120_0<=107)||(LA120_0>=109 && LA120_0<=111)||(LA120_0>=114 && LA120_0<=122)||(LA120_0>=124 && LA120_0<=129)||(LA120_0>=132 && LA120_0<=144)||(LA120_0>=175 && LA120_0<=187)||LA120_0==199||(LA120_0>=201 && LA120_0<=202)||LA120_0==208||(LA120_0>=225 && LA120_0<=226)))
    		{
    			alt120=1;
    		}
    		else if ((LA120_0==92))
    		{
    			alt120=2;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 120, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(120); }
    		switch (alt120)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:425:2: non_assignment_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(425, 2);
    			PushFollow(Follow._non_assignment_expression_in_element_initializer2692);
    			non_assignment_expression331=non_assignment_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, non_assignment_expression331.Tree, non_assignment_expression331, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:426:4: '{' expression_list '}'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(426, 4);
    			char_literal332=(IToken)Match(input,92,Follow._92_in_element_initializer2698); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal332_tree = (object)adaptor.Create(char_literal332, retval);
    			adaptor.AddChild(root_0, char_literal332_tree);
    			}
    			DebugLocation(426, 10);
    			PushFollow(Follow._expression_list_in_element_initializer2702);
    			expression_list333=expression_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression_list333.Tree, expression_list333, retval);
    			DebugLocation(426, 28);
    			char_literal334=(IToken)Match(input,93,Follow._93_in_element_initializer2706); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal334_tree = (object)adaptor.Create(char_literal334, retval);
    			adaptor.AddChild(root_0, char_literal334_tree);
    			}

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 102, element_initializer_StartIndex); }
        }
     	DebugLocation(426, 31);
    	} finally { DebugExitRule(GrammarFileName, "element_initializer"); }
    	return retval;

    }
    // $ANTLR end "element_initializer"

    public class array_creation_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_array_creation_expression() {}
    protected virtual void Leave_array_creation_expression() {}

    // $ANTLR start "array_creation_expression"
    // cs.g:427:1: array_creation_expression : 'new' ( non_array_type '[' expression_list ']' ( rank_specifiers )? ( array_initializer )? ( access_operator primary_expression )* | array_type array_initializer | rank_specifier array_initializer ) ;
    [GrammarRule("array_creation_expression")]
    public csParser.array_creation_expression_return array_creation_expression()
    {

        csParser.array_creation_expression_return retval = new csParser.array_creation_expression_return();
        retval.Start = (IToken)input.LT(1);
        int array_creation_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal335=null;
        IToken char_literal337=null;
        IToken char_literal339=null;
        csParser.non_array_type_return non_array_type336 = default(csParser.non_array_type_return);
        csParser.expression_list_return expression_list338 = default(csParser.expression_list_return);
        csParser.rank_specifiers_return rank_specifiers340 = default(csParser.rank_specifiers_return);
        csParser.array_initializer_return array_initializer341 = default(csParser.array_initializer_return);
        csParser.access_operator_return access_operator342 = default(csParser.access_operator_return);
        csParser.primary_expression_return primary_expression343 = default(csParser.primary_expression_return);
        csParser.array_type_return array_type344 = default(csParser.array_type_return);
        csParser.array_initializer_return array_initializer345 = default(csParser.array_initializer_return);
        csParser.rank_specifier_return rank_specifier346 = default(csParser.rank_specifier_return);
        csParser.array_initializer_return array_initializer347 = default(csParser.array_initializer_return);

        object string_literal335_tree=null;
        object char_literal337_tree=null;
        object char_literal339_tree=null;

    	try { DebugEnterRule(GrammarFileName, "array_creation_expression");
    	DebugLocation(427, 39);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 103)) { return retval; }
    		// cs.g:427:26: ( 'new' ( non_array_type '[' expression_list ']' ( rank_specifiers )? ( array_initializer )? ( access_operator primary_expression )* | array_type array_initializer | rank_specifier array_initializer ) )
    		DebugEnterAlt(1);
    		// cs.g:428:2: 'new' ( non_array_type '[' expression_list ']' ( rank_specifiers )? ( array_initializer )? ( access_operator primary_expression )* | array_type array_initializer | rank_specifier array_initializer )
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(428, 2);
    		string_literal335=(IToken)Match(input,138,Follow._138_in_array_creation_expression2715); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal335_tree = (object)adaptor.Create(string_literal335, retval);
    		adaptor.AddChild(root_0, string_literal335_tree);
    		}
    		DebugLocation(428, 10);
    		// cs.g:428:10: ( non_array_type '[' expression_list ']' ( rank_specifiers )? ( array_initializer )? ( access_operator primary_expression )* | array_type array_initializer | rank_specifier array_initializer )
    		int alt124=3;
    		try { DebugEnterSubRule(124);
    		try { DebugEnterDecision(124, decisionCanBacktrack[124]);
    		switch (input.LA(1))
    		{
    		case IDENTIFIER:
    			{
    			int LA124_1 = input.LA(2);

    			if ((EvaluatePredicate(synpred197_cs_fragment)))
    			{
    				alt124=1;
    			}
    			else if ((EvaluatePredicate(synpred198_cs_fragment)))
    			{
    				alt124=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 124, 1, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case SET:
    		case 95:
    		case 101:
    		case 102:
    		case 103:
    		case 104:
    		case 105:
    		case 106:
    		case 107:
    		case 109:
    		case 175:
    		case 176:
    		case 177:
    		case 178:
    		case 179:
    		case 180:
    		case 181:
    		case 182:
    		case 183:
    		case 184:
    		case 185:
    		case 186:
    		case 187:
    		case 199:
    		case 201:
    		case 202:
    		case 208:
    		case 225:
    		case 226:
    			{
    			int LA124_2 = input.LA(2);

    			if ((EvaluatePredicate(synpred197_cs_fragment)))
    			{
    				alt124=1;
    			}
    			else if ((EvaluatePredicate(synpred198_cs_fragment)))
    			{
    				alt124=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 124, 2, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case 114:
    		case 115:
    		case 116:
    		case 117:
    		case 118:
    		case 119:
    		case 120:
    		case 121:
    		case 122:
    		case 132:
    		case 133:
    		case 134:
    		case 135:
    		case 136:
    		case 137:
    			{
    			int LA124_3 = input.LA(2);

    			if ((EvaluatePredicate(synpred197_cs_fragment)))
    			{
    				alt124=1;
    			}
    			else if ((EvaluatePredicate(synpred198_cs_fragment)))
    			{
    				alt124=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 124, 3, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case 113:
    			{
    			int LA124_4 = input.LA(2);

    			if ((EvaluatePredicate(synpred197_cs_fragment)))
    			{
    				alt124=1;
    			}
    			else if ((EvaluatePredicate(synpred198_cs_fragment)))
    			{
    				alt124=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 124, 4, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case 97:
    			{
    			alt124=3;
    			}
    			break;
    		default:
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 124, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(124); }
    		switch (alt124)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:428:11: non_array_type '[' expression_list ']' ( rank_specifiers )? ( array_initializer )? ( access_operator primary_expression )*
    			{
    			DebugLocation(428, 11);
    			PushFollow(Follow._non_array_type_in_array_creation_expression2720);
    			non_array_type336=non_array_type();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, non_array_type336.Tree, non_array_type336, retval);
    			DebugLocation(428, 26);
    			char_literal337=(IToken)Match(input,97,Follow._97_in_array_creation_expression2722); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal337_tree = (object)adaptor.Create(char_literal337, retval);
    			adaptor.AddChild(root_0, char_literal337_tree);
    			}
    			DebugLocation(428, 32);
    			PushFollow(Follow._expression_list_in_array_creation_expression2726);
    			expression_list338=expression_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression_list338.Tree, expression_list338, retval);
    			DebugLocation(428, 50);
    			char_literal339=(IToken)Match(input,99,Follow._99_in_array_creation_expression2730); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal339_tree = (object)adaptor.Create(char_literal339, retval);
    			adaptor.AddChild(root_0, char_literal339_tree);
    			}
    			DebugLocation(428, 56);
    			// cs.g:428:56: ( rank_specifiers )?
    			int alt121=2;
    			try { DebugEnterSubRule(121);
    			try { DebugEnterDecision(121, decisionCanBacktrack[121]);
    			int LA121_0 = input.LA(1);

    			if ((LA121_0==97))
    			{
    				int LA121_1 = input.LA(2);

    				if (((LA121_1>=98 && LA121_1<=99)))
    				{
    					alt121=1;
    				}
    			}
    			} finally { DebugExitDecision(121); }
    			switch (alt121)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: rank_specifiers
    				{
    				DebugLocation(428, 56);
    				PushFollow(Follow._rank_specifiers_in_array_creation_expression2734);
    				rank_specifiers340=rank_specifiers();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, rank_specifiers340.Tree, rank_specifiers340, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(121); }

    			DebugLocation(428, 75);
    			// cs.g:428:75: ( array_initializer )?
    			int alt122=2;
    			try { DebugEnterSubRule(122);
    			try { DebugEnterDecision(122, decisionCanBacktrack[122]);
    			int LA122_0 = input.LA(1);

    			if ((LA122_0==92))
    			{
    				alt122=1;
    			}
    			} finally { DebugExitDecision(122); }
    			switch (alt122)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: array_initializer
    				{
    				DebugLocation(428, 75);
    				PushFollow(Follow._array_initializer_in_array_creation_expression2739);
    				array_initializer341=array_initializer();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, array_initializer341.Tree, array_initializer341, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(122); }

    			DebugLocation(428, 96);
    			// cs.g:428:96: ( access_operator primary_expression )*
    			try { DebugEnterSubRule(123);
    			while (true)
    			{
    				int alt123=2;
    				try { DebugEnterDecision(123, decisionCanBacktrack[123]);
    				int LA123_0 = input.LA(1);

    				if (((LA123_0>=DOT && LA123_0<=PTR)))
    				{
    					alt123=1;
    				}


    				} finally { DebugExitDecision(123); }
    				switch ( alt123 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:428:97: access_operator primary_expression
    					{
    					DebugLocation(428, 97);
    					PushFollow(Follow._access_operator_in_array_creation_expression2745);
    					access_operator342=access_operator();
    					PopFollow();
    					if (state.failed) return retval;
    					if ( (state.backtracking==0) ) adaptor.AddChild(root_0, access_operator342.Tree, access_operator342, retval);
    					DebugLocation(428, 115);
    					PushFollow(Follow._primary_expression_in_array_creation_expression2749);
    					primary_expression343=primary_expression();
    					PopFollow();
    					if (state.failed) return retval;
    					if ( (state.backtracking==0) ) adaptor.AddChild(root_0, primary_expression343.Tree, primary_expression343, retval);

    					}
    					break;

    				default:
    					goto loop123;
    				}
    			}

    			loop123:
    				;

    			} finally { DebugExitSubRule(123); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:429:5: array_type array_initializer
    			{
    			DebugLocation(429, 5);
    			PushFollow(Follow._array_type_in_array_creation_expression2757);
    			array_type344=array_type();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, array_type344.Tree, array_type344, retval);
    			DebugLocation(429, 18);
    			PushFollow(Follow._array_initializer_in_array_creation_expression2761);
    			array_initializer345=array_initializer();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, array_initializer345.Tree, array_initializer345, retval);

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:430:4: rank_specifier array_initializer
    			{
    			DebugLocation(430, 4);
    			PushFollow(Follow._rank_specifier_in_array_creation_expression2766);
    			rank_specifier346=rank_specifier();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, rank_specifier346.Tree, rank_specifier346, retval);
    			DebugLocation(430, 21);
    			PushFollow(Follow._array_initializer_in_array_creation_expression2770);
    			array_initializer347=array_initializer();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, array_initializer347.Tree, array_initializer347, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(124); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 103, array_creation_expression_StartIndex); }
        }
     	DebugLocation(430, 39);
    	} finally { DebugExitRule(GrammarFileName, "array_creation_expression"); }
    	return retval;

    }
    // $ANTLR end "array_creation_expression"

    public class delegate_creation_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_delegate_creation_expression() {}
    protected virtual void Leave_delegate_creation_expression() {}

    // $ANTLR start "delegate_creation_expression"
    // cs.g:431:1: delegate_creation_expression : 'new' type_name '(' expression ')' ;
    [GrammarRule("delegate_creation_expression")]
    public csParser.delegate_creation_expression_return delegate_creation_expression()
    {

        csParser.delegate_creation_expression_return retval = new csParser.delegate_creation_expression_return();
        retval.Start = (IToken)input.LT(1);
        int delegate_creation_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal348=null;
        IToken char_literal350=null;
        IToken char_literal352=null;
        csParser.type_name_return type_name349 = default(csParser.type_name_return);
        csParser.expression_return expression351 = default(csParser.expression_return);

        object string_literal348_tree=null;
        object char_literal350_tree=null;
        object char_literal352_tree=null;

    	try { DebugEnterRule(GrammarFileName, "delegate_creation_expression");
    	DebugLocation(431, 44);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 104)) { return retval; }
    		// cs.g:431:29: ( 'new' type_name '(' expression ')' )
    		DebugEnterAlt(1);
    		// cs.g:432:2: 'new' type_name '(' expression ')'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(432, 2);
    		string_literal348=(IToken)Match(input,138,Follow._138_in_delegate_creation_expression2780); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal348_tree = (object)adaptor.Create(string_literal348, retval);
    		adaptor.AddChild(root_0, string_literal348_tree);
    		}
    		DebugLocation(432, 10);
    		PushFollow(Follow._type_name_in_delegate_creation_expression2784);
    		type_name349=type_name();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_name349.Tree, type_name349, retval);
    		DebugLocation(432, 22);
    		char_literal350=(IToken)Match(input,110,Follow._110_in_delegate_creation_expression2788); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal350_tree = (object)adaptor.Create(char_literal350, retval);
    		adaptor.AddChild(root_0, char_literal350_tree);
    		}
    		DebugLocation(432, 28);
    		PushFollow(Follow._expression_in_delegate_creation_expression2792);
    		expression351=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression351.Tree, expression351, retval);
    		DebugLocation(432, 41);
    		char_literal352=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_delegate_creation_expression2796), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal352_tree = (object)adaptor.Create(char_literal352, retval);
    		adaptor.AddChild(root_0, char_literal352_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 104, delegate_creation_expression_StartIndex); }
        }
     	DebugLocation(432, 44);
    	} finally { DebugExitRule(GrammarFileName, "delegate_creation_expression"); }
    	return retval;

    }
    // $ANTLR end "delegate_creation_expression"

    public class anonymous_object_creation_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_anonymous_object_creation_expression() {}
    protected virtual void Leave_anonymous_object_creation_expression() {}

    // $ANTLR start "anonymous_object_creation_expression"
    // cs.g:433:1: anonymous_object_creation_expression : 'new' anonymous_object_initializer ;
    [GrammarRule("anonymous_object_creation_expression")]
    public csParser.anonymous_object_creation_expression_return anonymous_object_creation_expression()
    {

        csParser.anonymous_object_creation_expression_return retval = new csParser.anonymous_object_creation_expression_return();
        retval.Start = (IToken)input.LT(1);
        int anonymous_object_creation_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal353=null;
        csParser.anonymous_object_initializer_return anonymous_object_initializer354 = default(csParser.anonymous_object_initializer_return);

        object string_literal353_tree=null;

    	try { DebugEnterRule(GrammarFileName, "anonymous_object_creation_expression");
    	DebugLocation(433, 38);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 105)) { return retval; }
    		// cs.g:433:37: ( 'new' anonymous_object_initializer )
    		DebugEnterAlt(1);
    		// cs.g:434:2: 'new' anonymous_object_initializer
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(434, 2);
    		string_literal353=(IToken)Match(input,138,Follow._138_in_anonymous_object_creation_expression2805); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal353_tree = (object)adaptor.Create(string_literal353, retval);
    		adaptor.AddChild(root_0, string_literal353_tree);
    		}
    		DebugLocation(434, 10);
    		PushFollow(Follow._anonymous_object_initializer_in_anonymous_object_creation_expression2809);
    		anonymous_object_initializer354=anonymous_object_initializer();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, anonymous_object_initializer354.Tree, anonymous_object_initializer354, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 105, anonymous_object_creation_expression_StartIndex); }
        }
     	DebugLocation(434, 38);
    	} finally { DebugExitRule(GrammarFileName, "anonymous_object_creation_expression"); }
    	return retval;

    }
    // $ANTLR end "anonymous_object_creation_expression"

    public class anonymous_object_initializer_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_anonymous_object_initializer() {}
    protected virtual void Leave_anonymous_object_initializer() {}

    // $ANTLR start "anonymous_object_initializer"
    // cs.g:435:1: anonymous_object_initializer : ( '{' ( member_declarator_list )? '}' | '{' member_declarator_list ',' '}' );
    [GrammarRule("anonymous_object_initializer")]
    public csParser.anonymous_object_initializer_return anonymous_object_initializer()
    {

        csParser.anonymous_object_initializer_return retval = new csParser.anonymous_object_initializer_return();
        retval.Start = (IToken)input.LT(1);
        int anonymous_object_initializer_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal355=null;
        IToken char_literal357=null;
        IToken char_literal358=null;
        IToken char_literal360=null;
        IToken char_literal361=null;
        csParser.member_declarator_list_return member_declarator_list356 = default(csParser.member_declarator_list_return);
        csParser.member_declarator_list_return member_declarator_list359 = default(csParser.member_declarator_list_return);

        object char_literal355_tree=null;
        object char_literal357_tree=null;
        object char_literal358_tree=null;
        object char_literal360_tree=null;
        object char_literal361_tree=null;

    	try { DebugEnterRule(GrammarFileName, "anonymous_object_initializer");
    	DebugLocation(435, 43);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 106)) { return retval; }
    		// cs.g:435:29: ( '{' ( member_declarator_list )? '}' | '{' member_declarator_list ',' '}' )
    		int alt126=2;
    		try { DebugEnterDecision(126, decisionCanBacktrack[126]);
    		int LA126_0 = input.LA(1);

    		if ((LA126_0==92))
    		{
    			int LA126_1 = input.LA(2);

    			if ((EvaluatePredicate(synpred200_cs_fragment)))
    			{
    				alt126=1;
    			}
    			else if ((true))
    			{
    				alt126=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 126, 1, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 126, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(126); }
    		switch (alt126)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:436:2: '{' ( member_declarator_list )? '}'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(436, 2);
    			char_literal355=(IToken)Match(input,92,Follow._92_in_anonymous_object_initializer2818); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal355_tree = (object)adaptor.Create(char_literal355, retval);
    			adaptor.AddChild(root_0, char_literal355_tree);
    			}
    			DebugLocation(436, 8);
    			// cs.g:436:8: ( member_declarator_list )?
    			int alt125=2;
    			try { DebugEnterSubRule(125);
    			try { DebugEnterDecision(125, decisionCanBacktrack[125]);
    			int LA125_0 = input.LA(1);

    			if ((LA125_0==IDENTIFIER||LA125_0==SET||LA125_0==95||(LA125_0>=101 && LA125_0<=107)||LA125_0==109||(LA125_0>=175 && LA125_0<=187)||LA125_0==199||(LA125_0>=201 && LA125_0<=202)||LA125_0==208||(LA125_0>=225 && LA125_0<=226)))
    			{
    				alt125=1;
    			}
    			} finally { DebugExitDecision(125); }
    			switch (alt125)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: member_declarator_list
    				{
    				DebugLocation(436, 8);
    				PushFollow(Follow._member_declarator_list_in_anonymous_object_initializer2822);
    				member_declarator_list356=member_declarator_list();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, member_declarator_list356.Tree, member_declarator_list356, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(125); }

    			DebugLocation(436, 34);
    			char_literal357=(IToken)Match(input,93,Follow._93_in_anonymous_object_initializer2827); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal357_tree = (object)adaptor.Create(char_literal357, retval);
    			adaptor.AddChild(root_0, char_literal357_tree);
    			}

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:437:4: '{' member_declarator_list ',' '}'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(437, 4);
    			char_literal358=(IToken)Match(input,92,Follow._92_in_anonymous_object_initializer2833); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal358_tree = (object)adaptor.Create(char_literal358, retval);
    			adaptor.AddChild(root_0, char_literal358_tree);
    			}
    			DebugLocation(437, 10);
    			PushFollow(Follow._member_declarator_list_in_anonymous_object_initializer2837);
    			member_declarator_list359=member_declarator_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, member_declarator_list359.Tree, member_declarator_list359, retval);
    			DebugLocation(437, 35);
    			char_literal360=(IToken)Match(input,98,Follow._98_in_anonymous_object_initializer2841); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal360_tree = (object)adaptor.Create(char_literal360, retval);
    			adaptor.AddChild(root_0, char_literal360_tree);
    			}
    			DebugLocation(437, 41);
    			char_literal361=(IToken)Match(input,93,Follow._93_in_anonymous_object_initializer2845); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal361_tree = (object)adaptor.Create(char_literal361, retval);
    			adaptor.AddChild(root_0, char_literal361_tree);
    			}

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 106, anonymous_object_initializer_StartIndex); }
        }
     	DebugLocation(437, 43);
    	} finally { DebugExitRule(GrammarFileName, "anonymous_object_initializer"); }
    	return retval;

    }
    // $ANTLR end "anonymous_object_initializer"

    public class member_declarator_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_member_declarator_list() {}
    protected virtual void Leave_member_declarator_list() {}

    // $ANTLR start "member_declarator_list"
    // cs.g:438:1: member_declarator_list : md+= member_declarator ( ',' md+= member_declarator ) ;
    [GrammarRule("member_declarator_list")]
    public csParser.member_declarator_list_return member_declarator_list()
    {

        csParser.member_declarator_list_return retval = new csParser.member_declarator_list_return();
        retval.Start = (IToken)input.LT(1);
        int member_declarator_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal362=null;
        List list_md=null;
        csParser.member_declarator_return md = default(csParser.member_declarator_return);
        object char_literal362_tree=null;

    	try { DebugEnterRule(GrammarFileName, "member_declarator_list");
    	DebugLocation(438, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 107)) { return retval; }
    		// cs.g:438:23: (md+= member_declarator ( ',' md+= member_declarator ) )
    		DebugEnterAlt(1);
    		// cs.g:439:2: md+= member_declarator ( ',' md+= member_declarator )
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(439, 5);
    		PushFollow(Follow._member_declarator_in_member_declarator_list2857);
    		md=member_declarator();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, md.Tree, md, retval);
    		if (list_md==null) list_md=new ArrayList();
    		list_md.Add(md.Tree);

    		DebugLocation(439, 27);
    		// cs.g:439:27: ( ',' md+= member_declarator )
    		DebugEnterAlt(1);
    		// cs.g:439:28: ',' md+= member_declarator
    		{
    		DebugLocation(439, 28);
    		char_literal362=(IToken)Match(input,98,Follow._98_in_member_declarator_list2861); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal362_tree = (object)adaptor.Create(char_literal362, retval);
    		adaptor.AddChild(root_0, char_literal362_tree);
    		}
    		DebugLocation(439, 35);
    		PushFollow(Follow._member_declarator_in_member_declarator_list2867);
    		md=member_declarator();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, md.Tree, md, retval);
    		if (list_md==null) list_md=new ArrayList();
    		list_md.Add(md.Tree);


    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 107, member_declarator_list_StartIndex); }
        }
     	DebugLocation(440, 1);
    	} finally { DebugExitRule(GrammarFileName, "member_declarator_list"); }
    	return retval;

    }
    // $ANTLR end "member_declarator_list"

    public class member_declarator_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_member_declarator() {}
    protected virtual void Leave_member_declarator() {}

    // $ANTLR start "member_declarator"
    // cs.g:441:1: member_declarator : ( identifier ( generic_argument_list )? | member_access | identifier '=' expression );
    [GrammarRule("member_declarator")]
    public csParser.member_declarator_return member_declarator()
    {

        csParser.member_declarator_return retval = new csParser.member_declarator_return();
        retval.Start = (IToken)input.LT(1);
        int member_declarator_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal367=null;
        csParser.identifier_return identifier363 = default(csParser.identifier_return);
        csParser.generic_argument_list_return generic_argument_list364 = default(csParser.generic_argument_list_return);
        csParser.member_access_return member_access365 = default(csParser.member_access_return);
        csParser.identifier_return identifier366 = default(csParser.identifier_return);
        csParser.expression_return expression368 = default(csParser.expression_return);

        object char_literal367_tree=null;

    	try { DebugEnterRule(GrammarFileName, "member_declarator");
    	DebugLocation(441, 33);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 108)) { return retval; }
    		// cs.g:441:18: ( identifier ( generic_argument_list )? | member_access | identifier '=' expression )
    		int alt128=3;
    		try { DebugEnterDecision(128, decisionCanBacktrack[128]);
    		int LA128_0 = input.LA(1);

    		if ((LA128_0==IDENTIFIER))
    		{
    			int LA128_1 = input.LA(2);

    			if ((LA128_1==96))
    			{
    				alt128=3;
    			}
    			else if ((EvaluatePredicate(synpred202_cs_fragment)))
    			{
    				alt128=1;
    			}
    			else if ((EvaluatePredicate(synpred203_cs_fragment)))
    			{
    				alt128=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 128, 1, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else if ((LA128_0==SET||LA128_0==95||(LA128_0>=101 && LA128_0<=107)||LA128_0==109||(LA128_0>=175 && LA128_0<=187)||LA128_0==199||(LA128_0>=201 && LA128_0<=202)||LA128_0==208||(LA128_0>=225 && LA128_0<=226)))
    		{
    			int LA128_2 = input.LA(2);

    			if ((LA128_2==96))
    			{
    				alt128=3;
    			}
    			else if ((EvaluatePredicate(synpred202_cs_fragment)))
    			{
    				alt128=1;
    			}
    			else if ((EvaluatePredicate(synpred203_cs_fragment)))
    			{
    				alt128=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 128, 2, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 128, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(128); }
    		switch (alt128)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:442:2: identifier ( generic_argument_list )?
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(442, 2);
    			PushFollow(Follow._identifier_in_member_declarator2880);
    			identifier363=identifier();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier363.Tree, identifier363, retval);
    			DebugLocation(442, 15);
    			// cs.g:442:15: ( generic_argument_list )?
    			int alt127=2;
    			try { DebugEnterSubRule(127);
    			try { DebugEnterDecision(127, decisionCanBacktrack[127]);
    			int LA127_0 = input.LA(1);

    			if ((LA127_0==123))
    			{
    				alt127=1;
    			}
    			} finally { DebugExitDecision(127); }
    			switch (alt127)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: generic_argument_list
    				{
    				DebugLocation(442, 15);
    				PushFollow(Follow._generic_argument_list_in_member_declarator2884);
    				generic_argument_list364=generic_argument_list();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, generic_argument_list364.Tree, generic_argument_list364, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(127); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:443:4: member_access
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(443, 4);
    			PushFollow(Follow._member_access_in_member_declarator2892);
    			member_access365=member_access();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, member_access365.Tree, member_access365, retval);

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:444:4: identifier '=' expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(444, 4);
    			PushFollow(Follow._identifier_in_member_declarator2898);
    			identifier366=identifier();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier366.Tree, identifier366, retval);
    			DebugLocation(444, 17);
    			char_literal367=(IToken)Match(input,96,Follow._96_in_member_declarator2902); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal367_tree = (object)adaptor.Create(char_literal367, retval);
    			adaptor.AddChild(root_0, char_literal367_tree);
    			}
    			DebugLocation(444, 23);
    			PushFollow(Follow._expression_in_member_declarator2906);
    			expression368=expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression368.Tree, expression368, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 108, member_declarator_StartIndex); }
        }
     	DebugLocation(444, 33);
    	} finally { DebugExitRule(GrammarFileName, "member_declarator"); }
    	return retval;

    }
    // $ANTLR end "member_declarator"

    public class sizeof_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_sizeof_expression() {}
    protected virtual void Leave_sizeof_expression() {}

    // $ANTLR start "sizeof_expression"
    // cs.g:445:1: sizeof_expression : 'sizeof' '(' unmanaged_type ')' ;
    [GrammarRule("sizeof_expression")]
    public csParser.sizeof_expression_return sizeof_expression()
    {

        csParser.sizeof_expression_return retval = new csParser.sizeof_expression_return();
        retval.Start = (IToken)input.LT(1);
        int sizeof_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal369=null;
        IToken char_literal370=null;
        IToken char_literal372=null;
        csParser.unmanaged_type_return unmanaged_type371 = default(csParser.unmanaged_type_return);

        object string_literal369_tree=null;
        object char_literal370_tree=null;
        object char_literal372_tree=null;

    	try { DebugEnterRule(GrammarFileName, "sizeof_expression");
    	DebugLocation(445, 38);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 109)) { return retval; }
    		// cs.g:445:18: ( 'sizeof' '(' unmanaged_type ')' )
    		DebugEnterAlt(1);
    		// cs.g:446:2: 'sizeof' '(' unmanaged_type ')'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(446, 2);
    		string_literal369=(IToken)Match(input,139,Follow._139_in_sizeof_expression2914); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal369_tree = (object)adaptor.Create(string_literal369, retval);
    		adaptor.AddChild(root_0, string_literal369_tree);
    		}
    		DebugLocation(446, 13);
    		char_literal370=(IToken)Match(input,110,Follow._110_in_sizeof_expression2918); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal370_tree = (object)adaptor.Create(char_literal370, retval);
    		adaptor.AddChild(root_0, char_literal370_tree);
    		}
    		DebugLocation(446, 19);
    		PushFollow(Follow._unmanaged_type_in_sizeof_expression2922);
    		unmanaged_type371=unmanaged_type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, unmanaged_type371.Tree, unmanaged_type371, retval);
    		DebugLocation(446, 36);
    		char_literal372=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_sizeof_expression2926), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal372_tree = (object)adaptor.Create(char_literal372, retval);
    		adaptor.AddChild(root_0, char_literal372_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 109, sizeof_expression_StartIndex); }
        }
     	DebugLocation(446, 38);
    	} finally { DebugExitRule(GrammarFileName, "sizeof_expression"); }
    	return retval;

    }
    // $ANTLR end "sizeof_expression"

    public class typeof_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_typeof_expression() {}
    protected virtual void Leave_typeof_expression() {}

    // $ANTLR start "typeof_expression"
    // cs.g:447:1: typeof_expression : ( 'typeof' '(' type ')' | 'typeof' '(' unbound_type_name ')' | 'typeof' '(' 'void' ')' );
    [GrammarRule("typeof_expression")]
    public csParser.typeof_expression_return typeof_expression()
    {

        csParser.typeof_expression_return retval = new csParser.typeof_expression_return();
        retval.Start = (IToken)input.LT(1);
        int typeof_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal373=null;
        IToken char_literal374=null;
        IToken char_literal376=null;
        IToken string_literal377=null;
        IToken char_literal378=null;
        IToken char_literal380=null;
        IToken string_literal381=null;
        IToken char_literal382=null;
        IToken string_literal383=null;
        IToken char_literal384=null;
        csParser.type_return type375 = default(csParser.type_return);
        csParser.unbound_type_name_return unbound_type_name379 = default(csParser.unbound_type_name_return);

        object string_literal373_tree=null;
        object char_literal374_tree=null;
        object char_literal376_tree=null;
        object string_literal377_tree=null;
        object char_literal378_tree=null;
        object char_literal380_tree=null;
        object string_literal381_tree=null;
        object char_literal382_tree=null;
        object string_literal383_tree=null;
        object char_literal384_tree=null;

    	try { DebugEnterRule(GrammarFileName, "typeof_expression");
    	DebugLocation(447, 27);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 110)) { return retval; }
    		// cs.g:447:18: ( 'typeof' '(' type ')' | 'typeof' '(' unbound_type_name ')' | 'typeof' '(' 'void' ')' )
    		int alt129=3;
    		try { DebugEnterDecision(129, decisionCanBacktrack[129]);
    		try
    		{
    			alt129 = dfa129.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(129); }
    		switch (alt129)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:448:2: 'typeof' '(' type ')'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(448, 2);
    			string_literal373=(IToken)Match(input,140,Follow._140_in_typeof_expression2934); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal373_tree = (object)adaptor.Create(string_literal373, retval);
    			adaptor.AddChild(root_0, string_literal373_tree);
    			}
    			DebugLocation(448, 13);
    			char_literal374=(IToken)Match(input,110,Follow._110_in_typeof_expression2938); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal374_tree = (object)adaptor.Create(char_literal374, retval);
    			adaptor.AddChild(root_0, char_literal374_tree);
    			}
    			DebugLocation(448, 19);
    			PushFollow(Follow._type_in_typeof_expression2942);
    			type375=type();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type375.Tree, type375, retval);
    			DebugLocation(448, 26);
    			char_literal376=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_typeof_expression2946), "RPAREN"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal376_tree = (object)adaptor.Create(char_literal376, retval);
    			adaptor.AddChild(root_0, char_literal376_tree);
    			}

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:449:4: 'typeof' '(' unbound_type_name ')'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(449, 4);
    			string_literal377=(IToken)Match(input,140,Follow._140_in_typeof_expression2952); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal377_tree = (object)adaptor.Create(string_literal377, retval);
    			adaptor.AddChild(root_0, string_literal377_tree);
    			}
    			DebugLocation(449, 13);
    			char_literal378=(IToken)Match(input,110,Follow._110_in_typeof_expression2954); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal378_tree = (object)adaptor.Create(char_literal378, retval);
    			adaptor.AddChild(root_0, char_literal378_tree);
    			}
    			DebugLocation(449, 19);
    			PushFollow(Follow._unbound_type_name_in_typeof_expression2958);
    			unbound_type_name379=unbound_type_name();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, unbound_type_name379.Tree, unbound_type_name379, retval);
    			DebugLocation(449, 39);
    			char_literal380=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_typeof_expression2962), "RPAREN"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal380_tree = (object)adaptor.Create(char_literal380, retval);
    			adaptor.AddChild(root_0, char_literal380_tree);
    			}

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:450:4: 'typeof' '(' 'void' ')'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(450, 4);
    			string_literal381=(IToken)Match(input,140,Follow._140_in_typeof_expression2968); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal381_tree = (object)adaptor.Create(string_literal381, retval);
    			adaptor.AddChild(root_0, string_literal381_tree);
    			}
    			DebugLocation(450, 13);
    			char_literal382=(IToken)Match(input,110,Follow._110_in_typeof_expression2970); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal382_tree = (object)adaptor.Create(char_literal382, retval);
    			adaptor.AddChild(root_0, char_literal382_tree);
    			}
    			DebugLocation(450, 17);
    			string_literal383=(IToken)Match(input,113,Follow._113_in_typeof_expression2972); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal383_tree = (object)adaptor.Create(string_literal383, retval);
    			adaptor.AddChild(root_0, string_literal383_tree);
    			}
    			DebugLocation(450, 24);
    			char_literal384=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_typeof_expression2974), "RPAREN"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal384_tree = (object)adaptor.Create(char_literal384, retval);
    			adaptor.AddChild(root_0, char_literal384_tree);
    			}

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 110, typeof_expression_StartIndex); }
        }
     	DebugLocation(450, 27);
    	} finally { DebugExitRule(GrammarFileName, "typeof_expression"); }
    	return retval;

    }
    // $ANTLR end "typeof_expression"

    public class unbound_type_name_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_unbound_type_name() {}
    protected virtual void Leave_unbound_type_name() {}

    // $ANTLR start "unbound_type_name"
    // cs.g:455:1: unbound_type_name : unbound_type_name_start ( unbound_type_name_part )* ;
    [GrammarRule("unbound_type_name")]
    public csParser.unbound_type_name_return unbound_type_name()
    {

        csParser.unbound_type_name_return retval = new csParser.unbound_type_name_return();
        retval.Start = (IToken)input.LT(1);
        int unbound_type_name_StartIndex = input.Index;
        object root_0 = null;

        csParser.unbound_type_name_start_return unbound_type_name_start385 = default(csParser.unbound_type_name_start_return);
        csParser.unbound_type_name_part_return unbound_type_name_part386 = default(csParser.unbound_type_name_part_return);


    	try { DebugEnterRule(GrammarFileName, "unbound_type_name");
    	DebugLocation(455, 49);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 111)) { return retval; }
    		// cs.g:455:18: ( unbound_type_name_start ( unbound_type_name_part )* )
    		DebugEnterAlt(1);
    		// cs.g:456:2: unbound_type_name_start ( unbound_type_name_part )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(456, 2);
    		PushFollow(Follow._unbound_type_name_start_in_unbound_type_name2988);
    		unbound_type_name_start385=unbound_type_name_start();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, unbound_type_name_start385.Tree, unbound_type_name_start385, retval);
    		DebugLocation(456, 26);
    		// cs.g:456:26: ( unbound_type_name_part )*
    		try { DebugEnterSubRule(130);
    		while (true)
    		{
    			int alt130=2;
    			try { DebugEnterDecision(130, decisionCanBacktrack[130]);
    			int LA130_0 = input.LA(1);

    			if ((LA130_0==DOT))
    			{
    				alt130=1;
    			}


    			} finally { DebugExitDecision(130); }
    			switch ( alt130 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: unbound_type_name_part
    				{
    				DebugLocation(456, 26);
    				PushFollow(Follow._unbound_type_name_part_in_unbound_type_name2990);
    				unbound_type_name_part386=unbound_type_name_part();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, unbound_type_name_part386.Tree, unbound_type_name_part386, retval);

    				}
    				break;

    			default:
    				goto loop130;
    			}
    		}

    		loop130:
    			;

    		} finally { DebugExitSubRule(130); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 111, unbound_type_name_StartIndex); }
        }
     	DebugLocation(456, 49);
    	} finally { DebugExitRule(GrammarFileName, "unbound_type_name"); }
    	return retval;

    }
    // $ANTLR end "unbound_type_name"

    public class unbound_type_name_start_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_unbound_type_name_start() {}
    protected virtual void Leave_unbound_type_name_start() {}

    // $ANTLR start "unbound_type_name_start"
    // cs.g:457:1: unbound_type_name_start : identifier ( '::' identifier )? ( generic_dimension_specifier )? ;
    [GrammarRule("unbound_type_name_start")]
    public csParser.unbound_type_name_start_return unbound_type_name_start()
    {

        csParser.unbound_type_name_start_return retval = new csParser.unbound_type_name_start_return();
        retval.Start = (IToken)input.LT(1);
        int unbound_type_name_start_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal388=null;
        csParser.identifier_return identifier387 = default(csParser.identifier_return);
        csParser.identifier_return identifier389 = default(csParser.identifier_return);
        csParser.generic_dimension_specifier_return generic_dimension_specifier390 = default(csParser.generic_dimension_specifier_return);

        object string_literal388_tree=null;

    	try { DebugEnterRule(GrammarFileName, "unbound_type_name_start");
    	DebugLocation(457, 59);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 112)) { return retval; }
    		// cs.g:457:24: ( identifier ( '::' identifier )? ( generic_dimension_specifier )? )
    		DebugEnterAlt(1);
    		// cs.g:458:2: identifier ( '::' identifier )? ( generic_dimension_specifier )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(458, 2);
    		PushFollow(Follow._identifier_in_unbound_type_name_start2999);
    		identifier387=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier387.Tree, identifier387, retval);
    		DebugLocation(458, 13);
    		// cs.g:458:13: ( '::' identifier )?
    		int alt131=2;
    		try { DebugEnterSubRule(131);
    		try { DebugEnterDecision(131, decisionCanBacktrack[131]);
    		int LA131_0 = input.LA(1);

    		if ((LA131_0==89))
    		{
    			alt131=1;
    		}
    		} finally { DebugExitDecision(131); }
    		switch (alt131)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:458:14: '::' identifier
    			{
    			DebugLocation(458, 14);
    			string_literal388=(IToken)Match(input,89,Follow._89_in_unbound_type_name_start3002); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal388_tree = (object)adaptor.Create(string_literal388, retval);
    			adaptor.AddChild(root_0, string_literal388_tree);
    			}
    			DebugLocation(458, 19);
    			PushFollow(Follow._identifier_in_unbound_type_name_start3004);
    			identifier389=identifier();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier389.Tree, identifier389, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(131); }

    		DebugLocation(458, 32);
    		// cs.g:458:32: ( generic_dimension_specifier )?
    		int alt132=2;
    		try { DebugEnterSubRule(132);
    		try { DebugEnterDecision(132, decisionCanBacktrack[132]);
    		int LA132_0 = input.LA(1);

    		if ((LA132_0==123))
    		{
    			alt132=1;
    		}
    		} finally { DebugExitDecision(132); }
    		switch (alt132)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: generic_dimension_specifier
    			{
    			DebugLocation(458, 32);
    			PushFollow(Follow._generic_dimension_specifier_in_unbound_type_name_start3008);
    			generic_dimension_specifier390=generic_dimension_specifier();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, generic_dimension_specifier390.Tree, generic_dimension_specifier390, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(132); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 112, unbound_type_name_start_StartIndex); }
        }
     	DebugLocation(458, 59);
    	} finally { DebugExitRule(GrammarFileName, "unbound_type_name_start"); }
    	return retval;

    }
    // $ANTLR end "unbound_type_name_start"

    public class unbound_type_name_part_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_unbound_type_name_part() {}
    protected virtual void Leave_unbound_type_name_part() {}

    // $ANTLR start "unbound_type_name_part"
    // cs.g:459:1: unbound_type_name_part : '.' identifier ( generic_dimension_specifier )? ;
    [GrammarRule("unbound_type_name_part")]
    public csParser.unbound_type_name_part_return unbound_type_name_part()
    {

        csParser.unbound_type_name_part_return retval = new csParser.unbound_type_name_part_return();
        retval.Start = (IToken)input.LT(1);
        int unbound_type_name_part_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal391=null;
        csParser.identifier_return identifier392 = default(csParser.identifier_return);
        csParser.generic_dimension_specifier_return generic_dimension_specifier393 = default(csParser.generic_dimension_specifier_return);

        object char_literal391_tree=null;

    	try { DebugEnterRule(GrammarFileName, "unbound_type_name_part");
    	DebugLocation(459, 49);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 113)) { return retval; }
    		// cs.g:459:23: ( '.' identifier ( generic_dimension_specifier )? )
    		DebugEnterAlt(1);
    		// cs.g:460:2: '.' identifier ( generic_dimension_specifier )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(460, 2);
    		char_literal391=(IToken)new XToken((IToken)Match(input,DOT,Follow._DOT_in_unbound_type_name_part3016), "DOT"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal391_tree = (object)adaptor.Create(char_literal391, retval);
    		adaptor.AddChild(root_0, char_literal391_tree);
    		}
    		DebugLocation(460, 8);
    		PushFollow(Follow._identifier_in_unbound_type_name_part3020);
    		identifier392=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier392.Tree, identifier392, retval);
    		DebugLocation(460, 21);
    		// cs.g:460:21: ( generic_dimension_specifier )?
    		int alt133=2;
    		try { DebugEnterSubRule(133);
    		try { DebugEnterDecision(133, decisionCanBacktrack[133]);
    		int LA133_0 = input.LA(1);

    		if ((LA133_0==123))
    		{
    			alt133=1;
    		}
    		} finally { DebugExitDecision(133); }
    		switch (alt133)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: generic_dimension_specifier
    			{
    			DebugLocation(460, 21);
    			PushFollow(Follow._generic_dimension_specifier_in_unbound_type_name_part3024);
    			generic_dimension_specifier393=generic_dimension_specifier();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, generic_dimension_specifier393.Tree, generic_dimension_specifier393, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(133); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 113, unbound_type_name_part_StartIndex); }
        }
     	DebugLocation(460, 49);
    	} finally { DebugExitRule(GrammarFileName, "unbound_type_name_part"); }
    	return retval;

    }
    // $ANTLR end "unbound_type_name_part"

    public class generic_dimension_specifier_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_generic_dimension_specifier() {}
    protected virtual void Leave_generic_dimension_specifier() {}

    // $ANTLR start "generic_dimension_specifier"
    // cs.g:461:1: generic_dimension_specifier : '<' ( commas )? '>' ;
    [GrammarRule("generic_dimension_specifier")]
    public csParser.generic_dimension_specifier_return generic_dimension_specifier()
    {

        csParser.generic_dimension_specifier_return retval = new csParser.generic_dimension_specifier_return();
        retval.Start = (IToken)input.LT(1);
        int generic_dimension_specifier_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal394=null;
        IToken char_literal396=null;
        csParser.commas_return commas395 = default(csParser.commas_return);

        object char_literal394_tree=null;
        object char_literal396_tree=null;

    	try { DebugEnterRule(GrammarFileName, "generic_dimension_specifier");
    	DebugLocation(461, 21);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 114)) { return retval; }
    		// cs.g:461:28: ( '<' ( commas )? '>' )
    		DebugEnterAlt(1);
    		// cs.g:462:2: '<' ( commas )? '>'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(462, 2);
    		char_literal394=(IToken)Match(input,123,Follow._123_in_generic_dimension_specifier3034); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal394_tree = (object)adaptor.Create(char_literal394, retval);
    		adaptor.AddChild(root_0, char_literal394_tree);
    		}
    		DebugLocation(462, 8);
    		// cs.g:462:8: ( commas )?
    		int alt134=2;
    		try { DebugEnterSubRule(134);
    		try { DebugEnterDecision(134, decisionCanBacktrack[134]);
    		int LA134_0 = input.LA(1);

    		if ((LA134_0==98))
    		{
    			alt134=1;
    		}
    		} finally { DebugExitDecision(134); }
    		switch (alt134)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: commas
    			{
    			DebugLocation(462, 8);
    			PushFollow(Follow._commas_in_generic_dimension_specifier3038);
    			commas395=commas();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, commas395.Tree, commas395, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(134); }

    		DebugLocation(462, 18);
    		char_literal396=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_generic_dimension_specifier3043), "GT"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal396_tree = (object)adaptor.Create(char_literal396, retval);
    		adaptor.AddChild(root_0, char_literal396_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 114, generic_dimension_specifier_StartIndex); }
        }
     	DebugLocation(462, 21);
    	} finally { DebugExitRule(GrammarFileName, "generic_dimension_specifier"); }
    	return retval;

    }
    // $ANTLR end "generic_dimension_specifier"

    public class commas_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_commas() {}
    protected virtual void Leave_commas() {}

    // $ANTLR start "commas"
    // cs.g:463:1: commas : ( ',' )+ ;
    [GrammarRule("commas")]
    public csParser.commas_return commas()
    {

        csParser.commas_return retval = new csParser.commas_return();
        retval.Start = (IToken)input.LT(1);
        int commas_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal397=null;

        object char_literal397_tree=null;

    	try { DebugEnterRule(GrammarFileName, "commas");
    	DebugLocation(463, 6);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 115)) { return retval; }
    		// cs.g:463:7: ( ( ',' )+ )
    		DebugEnterAlt(1);
    		// cs.g:464:2: ( ',' )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(464, 2);
    		// cs.g:464:2: ( ',' )+
    		int cnt135=0;
    		try { DebugEnterSubRule(135);
    		while (true)
    		{
    			int alt135=2;
    			try { DebugEnterDecision(135, decisionCanBacktrack[135]);
    			int LA135_0 = input.LA(1);

    			if ((LA135_0==98))
    			{
    				alt135=1;
    			}


    			} finally { DebugExitDecision(135); }
    			switch (alt135)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: ','
    				{
    				DebugLocation(464, 2);
    				char_literal397=(IToken)Match(input,98,Follow._98_in_commas3052); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal397_tree = (object)adaptor.Create(char_literal397, retval);
    				adaptor.AddChild(root_0, char_literal397_tree);
    				}

    				}
    				break;

    			default:
    				if (cnt135 >= 1)
    					goto loop135;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee135 = new EarlyExitException( 135, input );
    				DebugRecognitionException(eee135);
    				throw eee135;
    			}
    			cnt135++;
    		}
    		loop135:
    			;

    		} finally { DebugExitSubRule(135); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 115, commas_StartIndex); }
        }
     	DebugLocation(464, 6);
    	} finally { DebugExitRule(GrammarFileName, "commas"); }
    	return retval;

    }
    // $ANTLR end "commas"

    public class checked_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_checked_expression() {}
    protected virtual void Leave_checked_expression() {}

    // $ANTLR start "checked_expression"
    // cs.g:465:1: checked_expression : 'checked' '(' expression ')' ;
    [GrammarRule("checked_expression")]
    public csParser.checked_expression_return checked_expression()
    {

        csParser.checked_expression_return retval = new csParser.checked_expression_return();
        retval.Start = (IToken)input.LT(1);
        int checked_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal398=null;
        IToken char_literal399=null;
        IToken char_literal401=null;
        csParser.expression_return expression400 = default(csParser.expression_return);

        object string_literal398_tree=null;
        object char_literal399_tree=null;
        object char_literal401_tree=null;

    	try { DebugEnterRule(GrammarFileName, "checked_expression");
    	DebugLocation(465, 36);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 116)) { return retval; }
    		// cs.g:465:19: ( 'checked' '(' expression ')' )
    		DebugEnterAlt(1);
    		// cs.g:466:2: 'checked' '(' expression ')'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(466, 2);
    		string_literal398=(IToken)Match(input,141,Follow._141_in_checked_expression3063); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal398_tree = (object)adaptor.Create(string_literal398, retval);
    		adaptor.AddChild(root_0, string_literal398_tree);
    		}
    		DebugLocation(466, 14);
    		char_literal399=(IToken)Match(input,110,Follow._110_in_checked_expression3067); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal399_tree = (object)adaptor.Create(char_literal399, retval);
    		adaptor.AddChild(root_0, char_literal399_tree);
    		}
    		DebugLocation(466, 20);
    		PushFollow(Follow._expression_in_checked_expression3071);
    		expression400=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression400.Tree, expression400, retval);
    		DebugLocation(466, 33);
    		char_literal401=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_checked_expression3075), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal401_tree = (object)adaptor.Create(char_literal401, retval);
    		adaptor.AddChild(root_0, char_literal401_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 116, checked_expression_StartIndex); }
        }
     	DebugLocation(466, 36);
    	} finally { DebugExitRule(GrammarFileName, "checked_expression"); }
    	return retval;

    }
    // $ANTLR end "checked_expression"

    public class unchecked_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_unchecked_expression() {}
    protected virtual void Leave_unchecked_expression() {}

    // $ANTLR start "unchecked_expression"
    // cs.g:467:1: unchecked_expression : 'unchecked' '(' expression ')' ;
    [GrammarRule("unchecked_expression")]
    public csParser.unchecked_expression_return unchecked_expression()
    {

        csParser.unchecked_expression_return retval = new csParser.unchecked_expression_return();
        retval.Start = (IToken)input.LT(1);
        int unchecked_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal402=null;
        IToken char_literal403=null;
        IToken char_literal405=null;
        csParser.expression_return expression404 = default(csParser.expression_return);

        object string_literal402_tree=null;
        object char_literal403_tree=null;
        object char_literal405_tree=null;

    	try { DebugEnterRule(GrammarFileName, "unchecked_expression");
    	DebugLocation(467, 38);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 117)) { return retval; }
    		// cs.g:467:21: ( 'unchecked' '(' expression ')' )
    		DebugEnterAlt(1);
    		// cs.g:468:2: 'unchecked' '(' expression ')'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(468, 2);
    		string_literal402=(IToken)Match(input,142,Follow._142_in_unchecked_expression3084); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal402_tree = (object)adaptor.Create(string_literal402, retval);
    		adaptor.AddChild(root_0, string_literal402_tree);
    		}
    		DebugLocation(468, 16);
    		char_literal403=(IToken)Match(input,110,Follow._110_in_unchecked_expression3088); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal403_tree = (object)adaptor.Create(char_literal403, retval);
    		adaptor.AddChild(root_0, char_literal403_tree);
    		}
    		DebugLocation(468, 22);
    		PushFollow(Follow._expression_in_unchecked_expression3092);
    		expression404=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression404.Tree, expression404, retval);
    		DebugLocation(468, 35);
    		char_literal405=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_unchecked_expression3096), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal405_tree = (object)adaptor.Create(char_literal405, retval);
    		adaptor.AddChild(root_0, char_literal405_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 117, unchecked_expression_StartIndex); }
        }
     	DebugLocation(468, 38);
    	} finally { DebugExitRule(GrammarFileName, "unchecked_expression"); }
    	return retval;

    }
    // $ANTLR end "unchecked_expression"

    public class default_value_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_default_value_expression() {}
    protected virtual void Leave_default_value_expression() {}

    // $ANTLR start "default_value_expression"
    // cs.g:469:1: default_value_expression : 'default' '(' type ')' ;
    [GrammarRule("default_value_expression")]
    public csParser.default_value_expression_return default_value_expression()
    {

        csParser.default_value_expression_return retval = new csParser.default_value_expression_return();
        retval.Start = (IToken)input.LT(1);
        int default_value_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal406=null;
        IToken char_literal407=null;
        IToken char_literal409=null;
        csParser.type_return type408 = default(csParser.type_return);

        object string_literal406_tree=null;
        object char_literal407_tree=null;
        object char_literal409_tree=null;

    	try { DebugEnterRule(GrammarFileName, "default_value_expression");
    	DebugLocation(469, 30);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 118)) { return retval; }
    		// cs.g:469:25: ( 'default' '(' type ')' )
    		DebugEnterAlt(1);
    		// cs.g:470:2: 'default' '(' type ')'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(470, 2);
    		string_literal406=(IToken)Match(input,143,Follow._143_in_default_value_expression3105); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal406_tree = (object)adaptor.Create(string_literal406, retval);
    		adaptor.AddChild(root_0, string_literal406_tree);
    		}
    		DebugLocation(470, 14);
    		char_literal407=(IToken)Match(input,110,Follow._110_in_default_value_expression3109); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal407_tree = (object)adaptor.Create(char_literal407, retval);
    		adaptor.AddChild(root_0, char_literal407_tree);
    		}
    		DebugLocation(470, 20);
    		PushFollow(Follow._type_in_default_value_expression3113);
    		type408=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type408.Tree, type408, retval);
    		DebugLocation(470, 27);
    		char_literal409=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_default_value_expression3117), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal409_tree = (object)adaptor.Create(char_literal409, retval);
    		adaptor.AddChild(root_0, char_literal409_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 118, default_value_expression_StartIndex); }
        }
     	DebugLocation(470, 30);
    	} finally { DebugExitRule(GrammarFileName, "default_value_expression"); }
    	return retval;

    }
    // $ANTLR end "default_value_expression"

    public class constant_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_constant_expression() {}
    protected virtual void Leave_constant_expression() {}

    // $ANTLR start "constant_expression"
    // cs.g:471:1: constant_expression : expression ;
    [GrammarRule("constant_expression")]
    public csParser.constant_expression_return constant_expression()
    {

        csParser.constant_expression_return retval = new csParser.constant_expression_return();
        retval.Start = (IToken)input.LT(1);
        int constant_expression_StartIndex = input.Index;
        object root_0 = null;

        csParser.expression_return expression410 = default(csParser.expression_return);


    	try { DebugEnterRule(GrammarFileName, "constant_expression");
    	DebugLocation(471, 11);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 119)) { return retval; }
    		// cs.g:471:20: ( expression )
    		DebugEnterAlt(1);
    		// cs.g:472:2: expression
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(472, 2);
    		PushFollow(Follow._expression_in_constant_expression3125);
    		expression410=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression410.Tree, expression410, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 119, constant_expression_StartIndex); }
        }
     	DebugLocation(472, 11);
    	} finally { DebugExitRule(GrammarFileName, "constant_expression"); }
    	return retval;

    }
    // $ANTLR end "constant_expression"

    public class boolean_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_boolean_expression() {}
    protected virtual void Leave_boolean_expression() {}

    // $ANTLR start "boolean_expression"
    // cs.g:473:1: boolean_expression : expression ;
    [GrammarRule("boolean_expression")]
    public csParser.boolean_expression_return boolean_expression()
    {

        csParser.boolean_expression_return retval = new csParser.boolean_expression_return();
        retval.Start = (IToken)input.LT(1);
        int boolean_expression_StartIndex = input.Index;
        object root_0 = null;

        csParser.expression_return expression411 = default(csParser.expression_return);


    	try { DebugEnterRule(GrammarFileName, "boolean_expression");
    	DebugLocation(473, 11);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 120)) { return retval; }
    		// cs.g:473:19: ( expression )
    		DebugEnterAlt(1);
    		// cs.g:474:2: expression
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(474, 2);
    		PushFollow(Follow._expression_in_boolean_expression3132);
    		expression411=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression411.Tree, expression411, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 120, boolean_expression_StartIndex); }
        }
     	DebugLocation(474, 11);
    	} finally { DebugExitRule(GrammarFileName, "boolean_expression"); }
    	return retval;

    }
    // $ANTLR end "boolean_expression"

    public class anonymous_method_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_anonymous_method_expression() {}
    protected virtual void Leave_anonymous_method_expression() {}

    // $ANTLR start "anonymous_method_expression"
    // cs.g:475:1: anonymous_method_expression : 'delegate' ( explicit_anonymous_function_signature )? block ;
    [GrammarRule("anonymous_method_expression")]
    public csParser.anonymous_method_expression_return anonymous_method_expression()
    {

        csParser.anonymous_method_expression_return retval = new csParser.anonymous_method_expression_return();
        retval.Start = (IToken)input.LT(1);
        int anonymous_method_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal412=null;
        csParser.explicit_anonymous_function_signature_return explicit_anonymous_function_signature413 = default(csParser.explicit_anonymous_function_signature_return);
        csParser.block_return block414 = default(csParser.block_return);

        object string_literal412_tree=null;

    	try { DebugEnterRule(GrammarFileName, "anonymous_method_expression");
    	DebugLocation(475, 60);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 121)) { return retval; }
    		// cs.g:475:28: ( 'delegate' ( explicit_anonymous_function_signature )? block )
    		DebugEnterAlt(1);
    		// cs.g:476:2: 'delegate' ( explicit_anonymous_function_signature )? block
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(476, 2);
    		string_literal412=(IToken)Match(input,144,Follow._144_in_anonymous_method_expression3139); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal412_tree = (object)adaptor.Create(string_literal412, retval);
    		adaptor.AddChild(root_0, string_literal412_tree);
    		}
    		DebugLocation(476, 15);
    		// cs.g:476:15: ( explicit_anonymous_function_signature )?
    		int alt136=2;
    		try { DebugEnterSubRule(136);
    		try { DebugEnterDecision(136, decisionCanBacktrack[136]);
    		int LA136_0 = input.LA(1);

    		if ((LA136_0==110))
    		{
    			alt136=1;
    		}
    		} finally { DebugExitDecision(136); }
    		switch (alt136)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: explicit_anonymous_function_signature
    			{
    			DebugLocation(476, 15);
    			PushFollow(Follow._explicit_anonymous_function_signature_in_anonymous_method_expression3143);
    			explicit_anonymous_function_signature413=explicit_anonymous_function_signature();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, explicit_anonymous_function_signature413.Tree, explicit_anonymous_function_signature413, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(136); }

    		DebugLocation(476, 56);
    		PushFollow(Follow._block_in_anonymous_method_expression3148);
    		block414=block();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, block414.Tree, block414, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 121, anonymous_method_expression_StartIndex); }
        }
     	DebugLocation(476, 60);
    	} finally { DebugExitRule(GrammarFileName, "anonymous_method_expression"); }
    	return retval;

    }
    // $ANTLR end "anonymous_method_expression"

    public class explicit_anonymous_function_signature_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_explicit_anonymous_function_signature() {}
    protected virtual void Leave_explicit_anonymous_function_signature() {}

    // $ANTLR start "explicit_anonymous_function_signature"
    // cs.g:477:1: explicit_anonymous_function_signature : '(' ( explicit_anonymous_function_parameter_list )? ')' ;
    [GrammarRule("explicit_anonymous_function_signature")]
    public csParser.explicit_anonymous_function_signature_return explicit_anonymous_function_signature()
    {

        csParser.explicit_anonymous_function_signature_return retval = new csParser.explicit_anonymous_function_signature_return();
        retval.Start = (IToken)input.LT(1);
        int explicit_anonymous_function_signature_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal415=null;
        IToken char_literal417=null;
        csParser.explicit_anonymous_function_parameter_list_return explicit_anonymous_function_parameter_list416 = default(csParser.explicit_anonymous_function_parameter_list_return);

        object char_literal415_tree=null;
        object char_literal417_tree=null;

    	try { DebugEnterRule(GrammarFileName, "explicit_anonymous_function_signature");
    	DebugLocation(477, 57);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 122)) { return retval; }
    		// cs.g:477:38: ( '(' ( explicit_anonymous_function_parameter_list )? ')' )
    		DebugEnterAlt(1);
    		// cs.g:478:2: '(' ( explicit_anonymous_function_parameter_list )? ')'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(478, 2);
    		char_literal415=(IToken)Match(input,110,Follow._110_in_explicit_anonymous_function_signature3155); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal415_tree = (object)adaptor.Create(char_literal415, retval);
    		adaptor.AddChild(root_0, char_literal415_tree);
    		}
    		DebugLocation(478, 8);
    		// cs.g:478:8: ( explicit_anonymous_function_parameter_list )?
    		int alt137=2;
    		try { DebugEnterSubRule(137);
    		try { DebugEnterDecision(137, decisionCanBacktrack[137]);
    		int LA137_0 = input.LA(1);

    		if ((LA137_0==IDENTIFIER||LA137_0==SET||LA137_0==95||(LA137_0>=101 && LA137_0<=107)||LA137_0==109||(LA137_0>=113 && LA137_0<=122)||(LA137_0>=130 && LA137_0<=137)||(LA137_0>=175 && LA137_0<=187)||LA137_0==199||(LA137_0>=201 && LA137_0<=202)||LA137_0==208||(LA137_0>=225 && LA137_0<=226)))
    		{
    			alt137=1;
    		}
    		} finally { DebugExitDecision(137); }
    		switch (alt137)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: explicit_anonymous_function_parameter_list
    			{
    			DebugLocation(478, 8);
    			PushFollow(Follow._explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature3159);
    			explicit_anonymous_function_parameter_list416=explicit_anonymous_function_parameter_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, explicit_anonymous_function_parameter_list416.Tree, explicit_anonymous_function_parameter_list416, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(137); }

    		DebugLocation(478, 54);
    		char_literal417=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_explicit_anonymous_function_signature3164), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal417_tree = (object)adaptor.Create(char_literal417, retval);
    		adaptor.AddChild(root_0, char_literal417_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 122, explicit_anonymous_function_signature_StartIndex); }
        }
     	DebugLocation(478, 57);
    	} finally { DebugExitRule(GrammarFileName, "explicit_anonymous_function_signature"); }
    	return retval;

    }
    // $ANTLR end "explicit_anonymous_function_signature"

    public class explicit_anonymous_function_parameter_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_explicit_anonymous_function_parameter_list() {}
    protected virtual void Leave_explicit_anonymous_function_parameter_list() {}

    // $ANTLR start "explicit_anonymous_function_parameter_list"
    // cs.g:479:1: explicit_anonymous_function_parameter_list : e+= explicit_anonymous_function_parameter ( ',' e+= explicit_anonymous_function_parameter )* ;
    [GrammarRule("explicit_anonymous_function_parameter_list")]
    public csParser.explicit_anonymous_function_parameter_list_return explicit_anonymous_function_parameter_list()
    {

        csParser.explicit_anonymous_function_parameter_list_return retval = new csParser.explicit_anonymous_function_parameter_list_return();
        retval.Start = (IToken)input.LT(1);
        int explicit_anonymous_function_parameter_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal418=null;
        List list_e=null;
        csParser.explicit_anonymous_function_parameter_return e = default(csParser.explicit_anonymous_function_parameter_return);
        object char_literal418_tree=null;

    	try { DebugEnterRule(GrammarFileName, "explicit_anonymous_function_parameter_list");
    	DebugLocation(479, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 123)) { return retval; }
    		// cs.g:479:43: (e+= explicit_anonymous_function_parameter ( ',' e+= explicit_anonymous_function_parameter )* )
    		DebugEnterAlt(1);
    		// cs.g:480:2: e+= explicit_anonymous_function_parameter ( ',' e+= explicit_anonymous_function_parameter )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(480, 4);
    		PushFollow(Follow._explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list3176);
    		e=explicit_anonymous_function_parameter();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, e.Tree, e, retval);
    		if (list_e==null) list_e=new ArrayList();
    		list_e.Add(e.Tree);

    		DebugLocation(480, 47);
    		// cs.g:480:47: ( ',' e+= explicit_anonymous_function_parameter )*
    		try { DebugEnterSubRule(138);
    		while (true)
    		{
    			int alt138=2;
    			try { DebugEnterDecision(138, decisionCanBacktrack[138]);
    			int LA138_0 = input.LA(1);

    			if ((LA138_0==98))
    			{
    				alt138=1;
    			}


    			} finally { DebugExitDecision(138); }
    			switch ( alt138 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:480:48: ',' e+= explicit_anonymous_function_parameter
    				{
    				DebugLocation(480, 48);
    				char_literal418=(IToken)Match(input,98,Follow._98_in_explicit_anonymous_function_parameter_list3181); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal418_tree = (object)adaptor.Create(char_literal418, retval);
    				adaptor.AddChild(root_0, char_literal418_tree);
    				}
    				DebugLocation(480, 56);
    				PushFollow(Follow._explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list3189);
    				e=explicit_anonymous_function_parameter();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, e.Tree, e, retval);
    				if (list_e==null) list_e=new ArrayList();
    				list_e.Add(e.Tree);


    				}
    				break;

    			default:
    				goto loop138;
    			}
    		}

    		loop138:
    			;

    		} finally { DebugExitSubRule(138); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 123, explicit_anonymous_function_parameter_list_StartIndex); }
        }
     	DebugLocation(481, 1);
    	} finally { DebugExitRule(GrammarFileName, "explicit_anonymous_function_parameter_list"); }
    	return retval;

    }
    // $ANTLR end "explicit_anonymous_function_parameter_list"

    public class explicit_anonymous_function_parameter_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_explicit_anonymous_function_parameter() {}
    protected virtual void Leave_explicit_anonymous_function_parameter() {}

    // $ANTLR start "explicit_anonymous_function_parameter"
    // cs.g:482:1: explicit_anonymous_function_parameter : ( anonymous_function_parameter_modifier )? type identifier ;
    [GrammarRule("explicit_anonymous_function_parameter")]
    public csParser.explicit_anonymous_function_parameter_return explicit_anonymous_function_parameter()
    {

        csParser.explicit_anonymous_function_parameter_return retval = new csParser.explicit_anonymous_function_parameter_return();
        retval.Start = (IToken)input.LT(1);
        int explicit_anonymous_function_parameter_StartIndex = input.Index;
        object root_0 = null;

        csParser.anonymous_function_parameter_modifier_return anonymous_function_parameter_modifier419 = default(csParser.anonymous_function_parameter_modifier_return);
        csParser.type_return type420 = default(csParser.type_return);
        csParser.identifier_return identifier421 = default(csParser.identifier_return);


    	try { DebugEnterRule(GrammarFileName, "explicit_anonymous_function_parameter");
    	DebugLocation(482, 59);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 124)) { return retval; }
    		// cs.g:482:38: ( ( anonymous_function_parameter_modifier )? type identifier )
    		DebugEnterAlt(1);
    		// cs.g:483:2: ( anonymous_function_parameter_modifier )? type identifier
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(483, 2);
    		// cs.g:483:2: ( anonymous_function_parameter_modifier )?
    		int alt139=2;
    		try { DebugEnterSubRule(139);
    		try { DebugEnterDecision(139, decisionCanBacktrack[139]);
    		int LA139_0 = input.LA(1);

    		if (((LA139_0>=130 && LA139_0<=131)))
    		{
    			alt139=1;
    		}
    		} finally { DebugExitDecision(139); }
    		switch (alt139)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: anonymous_function_parameter_modifier
    			{
    			DebugLocation(483, 2);
    			PushFollow(Follow._anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter3200);
    			anonymous_function_parameter_modifier419=anonymous_function_parameter_modifier();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, anonymous_function_parameter_modifier419.Tree, anonymous_function_parameter_modifier419, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(139); }

    		DebugLocation(483, 43);
    		PushFollow(Follow._type_in_explicit_anonymous_function_parameter3205);
    		type420=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type420.Tree, type420, retval);
    		DebugLocation(483, 50);
    		PushFollow(Follow._identifier_in_explicit_anonymous_function_parameter3209);
    		identifier421=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier421.Tree, identifier421, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 124, explicit_anonymous_function_parameter_StartIndex); }
        }
     	DebugLocation(483, 59);
    	} finally { DebugExitRule(GrammarFileName, "explicit_anonymous_function_parameter"); }
    	return retval;

    }
    // $ANTLR end "explicit_anonymous_function_parameter"

    public class anonymous_function_parameter_modifier_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_anonymous_function_parameter_modifier() {}
    protected virtual void Leave_anonymous_function_parameter_modifier() {}

    // $ANTLR start "anonymous_function_parameter_modifier"
    // cs.g:484:1: anonymous_function_parameter_modifier : ( 'ref' | 'out' );
    [GrammarRule("anonymous_function_parameter_modifier")]
    public csParser.anonymous_function_parameter_modifier_return anonymous_function_parameter_modifier()
    {

        csParser.anonymous_function_parameter_modifier_return retval = new csParser.anonymous_function_parameter_modifier_return();
        retval.Start = (IToken)input.LT(1);
        int anonymous_function_parameter_modifier_StartIndex = input.Index;
        object root_0 = null;

        IToken set422=null;

        object set422_tree=null;

    	try { DebugEnterRule(GrammarFileName, "anonymous_function_parameter_modifier");
    	DebugLocation(484, 14);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 125)) { return retval; }
    		// cs.g:484:38: ( 'ref' | 'out' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(484, 38);
    		set422=(IToken)input.LT(1);
    		if ((input.LA(1)>=130 && input.LA(1)<=131))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set422, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 125, anonymous_function_parameter_modifier_StartIndex); }
        }
     	DebugLocation(485, 14);
    	} finally { DebugExitRule(GrammarFileName, "anonymous_function_parameter_modifier"); }
    	return retval;

    }
    // $ANTLR end "anonymous_function_parameter_modifier"

    public class variant_generic_parameter_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_variant_generic_parameter_list() {}
    protected virtual void Leave_variant_generic_parameter_list() {}

    // $ANTLR start "variant_generic_parameter_list"
    // cs.g:487:1: variant_generic_parameter_list : '<' variant_type_parameters '>' ;
    [GrammarRule("variant_generic_parameter_list")]
    public csParser.variant_generic_parameter_list_return variant_generic_parameter_list()
    {

        csParser.variant_generic_parameter_list_return retval = new csParser.variant_generic_parameter_list_return();
        retval.Start = (IToken)input.LT(1);
        int variant_generic_parameter_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal423=null;
        IToken char_literal425=null;
        csParser.variant_type_parameters_return variant_type_parameters424 = default(csParser.variant_type_parameters_return);

        object char_literal423_tree=null;
        object char_literal425_tree=null;

    	try { DebugEnterRule(GrammarFileName, "variant_generic_parameter_list");
    	DebugLocation(487, 37);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 126)) { return retval; }
    		// cs.g:487:31: ( '<' variant_type_parameters '>' )
    		DebugEnterAlt(1);
    		// cs.g:488:2: '<' variant_type_parameters '>'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(488, 2);
    		char_literal423=(IToken)Match(input,123,Follow._123_in_variant_generic_parameter_list3228); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal423_tree = (object)adaptor.Create(char_literal423, retval);
    		adaptor.AddChild(root_0, char_literal423_tree);
    		}
    		DebugLocation(488, 8);
    		PushFollow(Follow._variant_type_parameters_in_variant_generic_parameter_list3232);
    		variant_type_parameters424=variant_type_parameters();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, variant_type_parameters424.Tree, variant_type_parameters424, retval);
    		DebugLocation(488, 34);
    		char_literal425=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_variant_generic_parameter_list3236), "GT"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal425_tree = (object)adaptor.Create(char_literal425, retval);
    		adaptor.AddChild(root_0, char_literal425_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 126, variant_generic_parameter_list_StartIndex); }
        }
     	DebugLocation(488, 37);
    	} finally { DebugExitRule(GrammarFileName, "variant_generic_parameter_list"); }
    	return retval;

    }
    // $ANTLR end "variant_generic_parameter_list"

    public class variant_type_parameters_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_variant_type_parameters() {}
    protected virtual void Leave_variant_type_parameters() {}

    // $ANTLR start "variant_type_parameters"
    // cs.g:489:1: variant_type_parameters : at+= variant_type_variable_name ( ',' at+= variant_type_variable_name )* ;
    [GrammarRule("variant_type_parameters")]
    public csParser.variant_type_parameters_return variant_type_parameters()
    {

        csParser.variant_type_parameters_return retval = new csParser.variant_type_parameters_return();
        retval.Start = (IToken)input.LT(1);
        int variant_type_parameters_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal426=null;
        List list_at=null;
        csParser.variant_type_variable_name_return at = default(csParser.variant_type_variable_name_return);
        object char_literal426_tree=null;

    	try { DebugEnterRule(GrammarFileName, "variant_type_parameters");
    	DebugLocation(489, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 127)) { return retval; }
    		// cs.g:489:24: (at+= variant_type_variable_name ( ',' at+= variant_type_variable_name )* )
    		DebugEnterAlt(1);
    		// cs.g:490:2: at+= variant_type_variable_name ( ',' at+= variant_type_variable_name )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(490, 5);
    		PushFollow(Follow._variant_type_variable_name_in_variant_type_parameters3248);
    		at=variant_type_variable_name();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, at.Tree, at, retval);
    		if (list_at==null) list_at=new ArrayList();
    		list_at.Add(at.Tree);

    		DebugLocation(490, 35);
    		// cs.g:490:35: ( ',' at+= variant_type_variable_name )*
    		try { DebugEnterSubRule(140);
    		while (true)
    		{
    			int alt140=2;
    			try { DebugEnterDecision(140, decisionCanBacktrack[140]);
    			int LA140_0 = input.LA(1);

    			if ((LA140_0==98))
    			{
    				alt140=1;
    			}


    			} finally { DebugExitDecision(140); }
    			switch ( alt140 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:490:36: ',' at+= variant_type_variable_name
    				{
    				DebugLocation(490, 36);
    				char_literal426=(IToken)Match(input,98,Follow._98_in_variant_type_parameters3251); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal426_tree = (object)adaptor.Create(char_literal426, retval);
    				adaptor.AddChild(root_0, char_literal426_tree);
    				}
    				DebugLocation(490, 43);
    				PushFollow(Follow._variant_type_variable_name_in_variant_type_parameters3257);
    				at=variant_type_variable_name();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, at.Tree, at, retval);
    				if (list_at==null) list_at=new ArrayList();
    				list_at.Add(at.Tree);


    				}
    				break;

    			default:
    				goto loop140;
    			}
    		}

    		loop140:
    			;

    		} finally { DebugExitSubRule(140); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 127, variant_type_parameters_StartIndex); }
        }
     	DebugLocation(491, 1);
    	} finally { DebugExitRule(GrammarFileName, "variant_type_parameters"); }
    	return retval;

    }
    // $ANTLR end "variant_type_parameters"

    public class variant_type_variable_name_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_variant_type_variable_name() {}
    protected virtual void Leave_variant_type_variable_name() {}

    // $ANTLR start "variant_type_variable_name"
    // cs.g:492:1: variant_type_variable_name : ( attributes )? ( variance_annotation )? type_variable_name ;
    [GrammarRule("variant_type_variable_name")]
    public csParser.variant_type_variable_name_return variant_type_variable_name()
    {

        csParser.variant_type_variable_name_return retval = new csParser.variant_type_variable_name_return();
        retval.Start = (IToken)input.LT(1);
        int variant_type_variable_name_StartIndex = input.Index;
        object root_0 = null;

        csParser.attributes_return attributes427 = default(csParser.attributes_return);
        csParser.variance_annotation_return variance_annotation428 = default(csParser.variance_annotation_return);
        csParser.type_variable_name_return type_variable_name429 = default(csParser.type_variable_name_return);


    	try { DebugEnterRule(GrammarFileName, "variant_type_variable_name");
    	DebugLocation(492, 57);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 128)) { return retval; }
    		// cs.g:492:27: ( ( attributes )? ( variance_annotation )? type_variable_name )
    		DebugEnterAlt(1);
    		// cs.g:493:2: ( attributes )? ( variance_annotation )? type_variable_name
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(493, 2);
    		// cs.g:493:2: ( attributes )?
    		int alt141=2;
    		try { DebugEnterSubRule(141);
    		try { DebugEnterDecision(141, decisionCanBacktrack[141]);
    		int LA141_0 = input.LA(1);

    		if ((LA141_0==97))
    		{
    			alt141=1;
    		}
    		} finally { DebugExitDecision(141); }
    		switch (alt141)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(493, 2);
    			PushFollow(Follow._attributes_in_variant_type_variable_name3269);
    			attributes427=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes427.Tree, attributes427, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(141); }

    		DebugLocation(493, 16);
    		// cs.g:493:16: ( variance_annotation )?
    		int alt142=2;
    		try { DebugEnterSubRule(142);
    		try { DebugEnterDecision(142, decisionCanBacktrack[142]);
    		int LA142_0 = input.LA(1);

    		if ((LA142_0==130||LA142_0==145))
    		{
    			alt142=1;
    		}
    		} finally { DebugExitDecision(142); }
    		switch (alt142)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: variance_annotation
    			{
    			DebugLocation(493, 16);
    			PushFollow(Follow._variance_annotation_in_variant_type_variable_name3274);
    			variance_annotation428=variance_annotation();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, variance_annotation428.Tree, variance_annotation428, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(142); }

    		DebugLocation(493, 39);
    		PushFollow(Follow._type_variable_name_in_variant_type_variable_name3279);
    		type_variable_name429=type_variable_name();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_variable_name429.Tree, type_variable_name429, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 128, variant_type_variable_name_StartIndex); }
        }
     	DebugLocation(493, 57);
    	} finally { DebugExitRule(GrammarFileName, "variant_type_variable_name"); }
    	return retval;

    }
    // $ANTLR end "variant_type_variable_name"

    public class variance_annotation_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_variance_annotation() {}
    protected virtual void Leave_variance_annotation() {}

    // $ANTLR start "variance_annotation"
    // cs.g:494:1: variance_annotation : ( 'in' | 'out' );
    [GrammarRule("variance_annotation")]
    public csParser.variance_annotation_return variance_annotation()
    {

        csParser.variance_annotation_return retval = new csParser.variance_annotation_return();
        retval.Start = (IToken)input.LT(1);
        int variance_annotation_StartIndex = input.Index;
        object root_0 = null;

        IToken set430=null;

        object set430_tree=null;

    	try { DebugEnterRule(GrammarFileName, "variance_annotation");
    	DebugLocation(494, 14);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 129)) { return retval; }
    		// cs.g:494:20: ( 'in' | 'out' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(494, 20);
    		set430=(IToken)input.LT(1);
    		if (input.LA(1)==130||input.LA(1)==145)
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set430, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 129, variance_annotation_StartIndex); }
        }
     	DebugLocation(495, 14);
    	} finally { DebugExitRule(GrammarFileName, "variance_annotation"); }
    	return retval;

    }
    // $ANTLR end "variance_annotation"

    public class generic_parameter_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_generic_parameter_list() {}
    protected virtual void Leave_generic_parameter_list() {}

    // $ANTLR start "generic_parameter_list"
    // cs.g:497:1: generic_parameter_list : '<' type_parameters '>' ;
    [GrammarRule("generic_parameter_list")]
    public csParser.generic_parameter_list_return generic_parameter_list()
    {

        csParser.generic_parameter_list_return retval = new csParser.generic_parameter_list_return();
        retval.Start = (IToken)input.LT(1);
        int generic_parameter_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal431=null;
        IToken char_literal433=null;
        csParser.type_parameters_return type_parameters432 = default(csParser.type_parameters_return);

        object char_literal431_tree=null;
        object char_literal433_tree=null;

    	try { DebugEnterRule(GrammarFileName, "generic_parameter_list");
    	DebugLocation(497, 29);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 130)) { return retval; }
    		// cs.g:497:23: ( '<' type_parameters '>' )
    		DebugEnterAlt(1);
    		// cs.g:498:2: '<' type_parameters '>'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(498, 2);
    		char_literal431=(IToken)Match(input,123,Follow._123_in_generic_parameter_list3301); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal431_tree = (object)adaptor.Create(char_literal431, retval);
    		adaptor.AddChild(root_0, char_literal431_tree);
    		}
    		DebugLocation(498, 8);
    		PushFollow(Follow._type_parameters_in_generic_parameter_list3305);
    		type_parameters432=type_parameters();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_parameters432.Tree, type_parameters432, retval);
    		DebugLocation(498, 26);
    		char_literal433=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_generic_parameter_list3309), "GT"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal433_tree = (object)adaptor.Create(char_literal433, retval);
    		adaptor.AddChild(root_0, char_literal433_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 130, generic_parameter_list_StartIndex); }
        }
     	DebugLocation(498, 29);
    	} finally { DebugExitRule(GrammarFileName, "generic_parameter_list"); }
    	return retval;

    }
    // $ANTLR end "generic_parameter_list"

    public class type_parameters_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_type_parameters() {}
    protected virtual void Leave_type_parameters() {}

    // $ANTLR start "type_parameters"
    // cs.g:499:1: type_parameters : at+= attributed_type_variable_name ( ',' at+= attributed_type_variable_name )* ;
    [GrammarRule("type_parameters")]
    public csParser.type_parameters_return type_parameters()
    {

        csParser.type_parameters_return retval = new csParser.type_parameters_return();
        retval.Start = (IToken)input.LT(1);
        int type_parameters_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal434=null;
        List list_at=null;
        csParser.attributed_type_variable_name_return at = default(csParser.attributed_type_variable_name_return);
        object char_literal434_tree=null;

    	try { DebugEnterRule(GrammarFileName, "type_parameters");
    	DebugLocation(499, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 131)) { return retval; }
    		// cs.g:499:16: (at+= attributed_type_variable_name ( ',' at+= attributed_type_variable_name )* )
    		DebugEnterAlt(1);
    		// cs.g:500:2: at+= attributed_type_variable_name ( ',' at+= attributed_type_variable_name )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(500, 5);
    		PushFollow(Follow._attributed_type_variable_name_in_type_parameters3321);
    		at=attributed_type_variable_name();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, at.Tree, at, retval);
    		if (list_at==null) list_at=new ArrayList();
    		list_at.Add(at.Tree);

    		DebugLocation(500, 38);
    		// cs.g:500:38: ( ',' at+= attributed_type_variable_name )*
    		try { DebugEnterSubRule(143);
    		while (true)
    		{
    			int alt143=2;
    			try { DebugEnterDecision(143, decisionCanBacktrack[143]);
    			int LA143_0 = input.LA(1);

    			if ((LA143_0==98))
    			{
    				alt143=1;
    			}


    			} finally { DebugExitDecision(143); }
    			switch ( alt143 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:500:39: ',' at+= attributed_type_variable_name
    				{
    				DebugLocation(500, 39);
    				char_literal434=(IToken)Match(input,98,Follow._98_in_type_parameters3324); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal434_tree = (object)adaptor.Create(char_literal434, retval);
    				adaptor.AddChild(root_0, char_literal434_tree);
    				}
    				DebugLocation(500, 46);
    				PushFollow(Follow._attributed_type_variable_name_in_type_parameters3330);
    				at=attributed_type_variable_name();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, at.Tree, at, retval);
    				if (list_at==null) list_at=new ArrayList();
    				list_at.Add(at.Tree);


    				}
    				break;

    			default:
    				goto loop143;
    			}
    		}

    		loop143:
    			;

    		} finally { DebugExitSubRule(143); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 131, type_parameters_StartIndex); }
        }
     	DebugLocation(501, 1);
    	} finally { DebugExitRule(GrammarFileName, "type_parameters"); }
    	return retval;

    }
    // $ANTLR end "type_parameters"

    public class attributed_type_variable_name_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_attributed_type_variable_name() {}
    protected virtual void Leave_attributed_type_variable_name() {}

    // $ANTLR start "attributed_type_variable_name"
    // cs.g:502:1: attributed_type_variable_name : ( attributes )? type_variable_name ;
    [GrammarRule("attributed_type_variable_name")]
    public csParser.attributed_type_variable_name_return attributed_type_variable_name()
    {

        csParser.attributed_type_variable_name_return retval = new csParser.attributed_type_variable_name_return();
        retval.Start = (IToken)input.LT(1);
        int attributed_type_variable_name_StartIndex = input.Index;
        object root_0 = null;

        csParser.attributes_return attributes435 = default(csParser.attributes_return);
        csParser.type_variable_name_return type_variable_name436 = default(csParser.type_variable_name_return);


    	try { DebugEnterRule(GrammarFileName, "attributed_type_variable_name");
    	DebugLocation(502, 34);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 132)) { return retval; }
    		// cs.g:502:30: ( ( attributes )? type_variable_name )
    		DebugEnterAlt(1);
    		// cs.g:503:2: ( attributes )? type_variable_name
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(503, 2);
    		// cs.g:503:2: ( attributes )?
    		int alt144=2;
    		try { DebugEnterSubRule(144);
    		try { DebugEnterDecision(144, decisionCanBacktrack[144]);
    		int LA144_0 = input.LA(1);

    		if ((LA144_0==97))
    		{
    			alt144=1;
    		}
    		} finally { DebugExitDecision(144); }
    		switch (alt144)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(503, 2);
    			PushFollow(Follow._attributes_in_attributed_type_variable_name3342);
    			attributes435=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes435.Tree, attributes435, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(144); }

    		DebugLocation(503, 16);
    		PushFollow(Follow._type_variable_name_in_attributed_type_variable_name3347);
    		type_variable_name436=type_variable_name();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_variable_name436.Tree, type_variable_name436, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 132, attributed_type_variable_name_StartIndex); }
        }
     	DebugLocation(503, 34);
    	} finally { DebugExitRule(GrammarFileName, "attributed_type_variable_name"); }
    	return retval;

    }
    // $ANTLR end "attributed_type_variable_name"

    public class cast_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_cast_expression() {}
    protected virtual void Leave_cast_expression() {}

    // $ANTLR start "cast_expression"
    // cs.g:504:1: cast_expression : '(' ( ( namespace_or_type_name | predefined_type ) ( '*' )+ ( rank_specifiers )? | ( namespace_or_type_name | predefined_type ) '?' ( rank_specifiers )? | ( namespace_or_type_name | predefined_type ) ( rank_specifiers )? | 'void' ( '*' )* ( rank_specifiers )? ) ')' ( bracket_expression )* unary_expression ;
    [GrammarRule("cast_expression")]
    public csParser.cast_expression_return cast_expression()
    {

        csParser.cast_expression_return retval = new csParser.cast_expression_return();
        retval.Start = (IToken)input.LT(1);
        int cast_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal437=null;
        IToken char_literal440=null;
        IToken char_literal444=null;
        IToken string_literal449=null;
        IToken char_literal450=null;
        IToken char_literal452=null;
        csParser.namespace_or_type_name_return namespace_or_type_name438 = default(csParser.namespace_or_type_name_return);
        csParser.predefined_type_return predefined_type439 = default(csParser.predefined_type_return);
        csParser.rank_specifiers_return rank_specifiers441 = default(csParser.rank_specifiers_return);
        csParser.namespace_or_type_name_return namespace_or_type_name442 = default(csParser.namespace_or_type_name_return);
        csParser.predefined_type_return predefined_type443 = default(csParser.predefined_type_return);
        csParser.rank_specifiers_return rank_specifiers445 = default(csParser.rank_specifiers_return);
        csParser.namespace_or_type_name_return namespace_or_type_name446 = default(csParser.namespace_or_type_name_return);
        csParser.predefined_type_return predefined_type447 = default(csParser.predefined_type_return);
        csParser.rank_specifiers_return rank_specifiers448 = default(csParser.rank_specifiers_return);
        csParser.rank_specifiers_return rank_specifiers451 = default(csParser.rank_specifiers_return);
        csParser.bracket_expression_return bracket_expression453 = default(csParser.bracket_expression_return);
        csParser.unary_expression_return unary_expression454 = default(csParser.unary_expression_return);

        object char_literal437_tree=null;
        object char_literal440_tree=null;
        object char_literal444_tree=null;
        object string_literal449_tree=null;
        object char_literal450_tree=null;
        object char_literal452_tree=null;

    	try { DebugEnterRule(GrammarFileName, "cast_expression");
    	DebugLocation(504, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 133)) { return retval; }
    		// cs.g:504:16: ( '(' ( ( namespace_or_type_name | predefined_type ) ( '*' )+ ( rank_specifiers )? | ( namespace_or_type_name | predefined_type ) '?' ( rank_specifiers )? | ( namespace_or_type_name | predefined_type ) ( rank_specifiers )? | 'void' ( '*' )* ( rank_specifiers )? ) ')' ( bracket_expression )* unary_expression )
    		DebugEnterAlt(1);
    		// cs.g:505:2: '(' ( ( namespace_or_type_name | predefined_type ) ( '*' )+ ( rank_specifiers )? | ( namespace_or_type_name | predefined_type ) '?' ( rank_specifiers )? | ( namespace_or_type_name | predefined_type ) ( rank_specifiers )? | 'void' ( '*' )* ( rank_specifiers )? ) ')' ( bracket_expression )* unary_expression
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(505, 2);
    		char_literal437=(IToken)Match(input,110,Follow._110_in_cast_expression3355); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal437_tree = (object)adaptor.Create(char_literal437, retval);
    		adaptor.AddChild(root_0, char_literal437_tree);
    		}
    		DebugLocation(506, 3);
    		// cs.g:506:3: ( ( namespace_or_type_name | predefined_type ) ( '*' )+ ( rank_specifiers )? | ( namespace_or_type_name | predefined_type ) '?' ( rank_specifiers )? | ( namespace_or_type_name | predefined_type ) ( rank_specifiers )? | 'void' ( '*' )* ( rank_specifiers )? )
    		int alt154=4;
    		try { DebugEnterSubRule(154);
    		try { DebugEnterDecision(154, decisionCanBacktrack[154]);
    		switch (input.LA(1))
    		{
    		case IDENTIFIER:
    			{
    			int LA154_1 = input.LA(2);

    			if ((EvaluatePredicate(synpred226_cs_fragment)))
    			{
    				alt154=1;
    			}
    			else if ((EvaluatePredicate(synpred229_cs_fragment)))
    			{
    				alt154=2;
    			}
    			else if ((EvaluatePredicate(synpred232_cs_fragment)))
    			{
    				alt154=3;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 154, 1, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case SET:
    		case 95:
    		case 101:
    		case 102:
    		case 103:
    		case 104:
    		case 105:
    		case 106:
    		case 107:
    		case 109:
    		case 175:
    		case 176:
    		case 177:
    		case 178:
    		case 179:
    		case 180:
    		case 181:
    		case 182:
    		case 183:
    		case 184:
    		case 185:
    		case 186:
    		case 187:
    		case 199:
    		case 201:
    		case 202:
    		case 208:
    		case 225:
    		case 226:
    			{
    			int LA154_2 = input.LA(2);

    			if ((EvaluatePredicate(synpred226_cs_fragment)))
    			{
    				alt154=1;
    			}
    			else if ((EvaluatePredicate(synpred229_cs_fragment)))
    			{
    				alt154=2;
    			}
    			else if ((EvaluatePredicate(synpred232_cs_fragment)))
    			{
    				alt154=3;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 154, 2, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case 114:
    		case 115:
    		case 116:
    		case 117:
    		case 118:
    		case 119:
    		case 120:
    		case 121:
    		case 122:
    		case 132:
    		case 133:
    		case 134:
    		case 135:
    		case 136:
    		case 137:
    			{
    			int LA154_3 = input.LA(2);

    			if ((EvaluatePredicate(synpred226_cs_fragment)))
    			{
    				alt154=1;
    			}
    			else if ((EvaluatePredicate(synpred229_cs_fragment)))
    			{
    				alt154=2;
    			}
    			else if ((EvaluatePredicate(synpred232_cs_fragment)))
    			{
    				alt154=3;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 154, 3, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case 113:
    			{
    			alt154=4;
    			}
    			break;
    		default:
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 154, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(154); }
    		switch (alt154)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:507:3: ( namespace_or_type_name | predefined_type ) ( '*' )+ ( rank_specifiers )?
    			{
    			DebugLocation(507, 3);
    			// cs.g:507:3: ( namespace_or_type_name | predefined_type )
    			int alt145=2;
    			try { DebugEnterSubRule(145);
    			try { DebugEnterDecision(145, decisionCanBacktrack[145]);
    			int LA145_0 = input.LA(1);

    			if ((LA145_0==IDENTIFIER||LA145_0==SET||LA145_0==95||(LA145_0>=101 && LA145_0<=107)||LA145_0==109||(LA145_0>=175 && LA145_0<=187)||LA145_0==199||(LA145_0>=201 && LA145_0<=202)||LA145_0==208||(LA145_0>=225 && LA145_0<=226)))
    			{
    				alt145=1;
    			}
    			else if (((LA145_0>=114 && LA145_0<=122)||(LA145_0>=132 && LA145_0<=137)))
    			{
    				alt145=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 145, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			} finally { DebugExitDecision(145); }
    			switch (alt145)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:507:6: namespace_or_type_name
    				{
    				DebugLocation(507, 6);
    				PushFollow(Follow._namespace_or_type_name_in_cast_expression3368);
    				namespace_or_type_name438=namespace_or_type_name();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, namespace_or_type_name438.Tree, namespace_or_type_name438, retval);

    				}
    				break;
    			case 2:
    				DebugEnterAlt(2);
    				// cs.g:507:32: predefined_type
    				{
    				DebugLocation(507, 32);
    				PushFollow(Follow._predefined_type_in_cast_expression3373);
    				predefined_type439=predefined_type();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, predefined_type439.Tree, predefined_type439, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(145); }

    			DebugLocation(507, 52);
    			// cs.g:507:52: ( '*' )+
    			int cnt146=0;
    			try { DebugEnterSubRule(146);
    			while (true)
    			{
    				int alt146=2;
    				try { DebugEnterDecision(146, decisionCanBacktrack[146]);
    				int LA146_0 = input.LA(1);

    				if ((LA146_0==111))
    				{
    					alt146=1;
    				}


    				} finally { DebugExitDecision(146); }
    				switch (alt146)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:0:0: '*'
    					{
    					DebugLocation(507, 52);
    					char_literal440=(IToken)Match(input,111,Follow._111_in_cast_expression3379); if (state.failed) return retval;
    					if ( state.backtracking==0 ) {
    					char_literal440_tree = (object)adaptor.Create(char_literal440, retval);
    					adaptor.AddChild(root_0, char_literal440_tree);
    					}

    					}
    					break;

    				default:
    					if (cnt146 >= 1)
    						goto loop146;

    					if (state.backtracking>0) {state.failed=true; return retval;}
    					EarlyExitException eee146 = new EarlyExitException( 146, input );
    					DebugRecognitionException(eee146);
    					throw eee146;
    				}
    				cnt146++;
    			}
    			loop146:
    				;

    			} finally { DebugExitSubRule(146); }

    			DebugLocation(507, 59);
    			// cs.g:507:59: ( rank_specifiers )?
    			int alt147=2;
    			try { DebugEnterSubRule(147);
    			try { DebugEnterDecision(147, decisionCanBacktrack[147]);
    			int LA147_0 = input.LA(1);

    			if ((LA147_0==97))
    			{
    				alt147=1;
    			}
    			} finally { DebugExitDecision(147); }
    			switch (alt147)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: rank_specifiers
    				{
    				DebugLocation(507, 59);
    				PushFollow(Follow._rank_specifiers_in_cast_expression3384);
    				rank_specifiers441=rank_specifiers();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, rank_specifiers441.Tree, rank_specifiers441, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(147); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:508:5: ( namespace_or_type_name | predefined_type ) '?' ( rank_specifiers )?
    			{
    			DebugLocation(508, 5);
    			// cs.g:508:5: ( namespace_or_type_name | predefined_type )
    			int alt148=2;
    			try { DebugEnterSubRule(148);
    			try { DebugEnterDecision(148, decisionCanBacktrack[148]);
    			int LA148_0 = input.LA(1);

    			if ((LA148_0==IDENTIFIER||LA148_0==SET||LA148_0==95||(LA148_0>=101 && LA148_0<=107)||LA148_0==109||(LA148_0>=175 && LA148_0<=187)||LA148_0==199||(LA148_0>=201 && LA148_0<=202)||LA148_0==208||(LA148_0>=225 && LA148_0<=226)))
    			{
    				alt148=1;
    			}
    			else if (((LA148_0>=114 && LA148_0<=122)||(LA148_0>=132 && LA148_0<=137)))
    			{
    				alt148=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 148, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			} finally { DebugExitDecision(148); }
    			switch (alt148)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:508:8: namespace_or_type_name
    				{
    				DebugLocation(508, 8);
    				PushFollow(Follow._namespace_or_type_name_in_cast_expression3394);
    				namespace_or_type_name442=namespace_or_type_name();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, namespace_or_type_name442.Tree, namespace_or_type_name442, retval);

    				}
    				break;
    			case 2:
    				DebugEnterAlt(2);
    				// cs.g:508:34: predefined_type
    				{
    				DebugLocation(508, 34);
    				PushFollow(Follow._predefined_type_in_cast_expression3399);
    				predefined_type443=predefined_type();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, predefined_type443.Tree, predefined_type443, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(148); }

    			DebugLocation(508, 54);
    			char_literal444=(IToken)Match(input,112,Follow._112_in_cast_expression3405); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal444_tree = (object)adaptor.Create(char_literal444, retval);
    			adaptor.AddChild(root_0, char_literal444_tree);
    			}
    			DebugLocation(508, 60);
    			// cs.g:508:60: ( rank_specifiers )?
    			int alt149=2;
    			try { DebugEnterSubRule(149);
    			try { DebugEnterDecision(149, decisionCanBacktrack[149]);
    			int LA149_0 = input.LA(1);

    			if ((LA149_0==97))
    			{
    				alt149=1;
    			}
    			} finally { DebugExitDecision(149); }
    			switch (alt149)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: rank_specifiers
    				{
    				DebugLocation(508, 60);
    				PushFollow(Follow._rank_specifiers_in_cast_expression3409);
    				rank_specifiers445=rank_specifiers();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, rank_specifiers445.Tree, rank_specifiers445, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(149); }


    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:509:5: ( namespace_or_type_name | predefined_type ) ( rank_specifiers )?
    			{
    			DebugLocation(509, 5);
    			// cs.g:509:5: ( namespace_or_type_name | predefined_type )
    			int alt150=2;
    			try { DebugEnterSubRule(150);
    			try { DebugEnterDecision(150, decisionCanBacktrack[150]);
    			int LA150_0 = input.LA(1);

    			if ((LA150_0==IDENTIFIER||LA150_0==SET||LA150_0==95||(LA150_0>=101 && LA150_0<=107)||LA150_0==109||(LA150_0>=175 && LA150_0<=187)||LA150_0==199||(LA150_0>=201 && LA150_0<=202)||LA150_0==208||(LA150_0>=225 && LA150_0<=226)))
    			{
    				alt150=1;
    			}
    			else if (((LA150_0>=114 && LA150_0<=122)||(LA150_0>=132 && LA150_0<=137)))
    			{
    				alt150=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 150, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			} finally { DebugExitDecision(150); }
    			switch (alt150)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:509:8: namespace_or_type_name
    				{
    				DebugLocation(509, 8);
    				PushFollow(Follow._namespace_or_type_name_in_cast_expression3419);
    				namespace_or_type_name446=namespace_or_type_name();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, namespace_or_type_name446.Tree, namespace_or_type_name446, retval);

    				}
    				break;
    			case 2:
    				DebugEnterAlt(2);
    				// cs.g:509:34: predefined_type
    				{
    				DebugLocation(509, 34);
    				PushFollow(Follow._predefined_type_in_cast_expression3424);
    				predefined_type447=predefined_type();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, predefined_type447.Tree, predefined_type447, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(150); }

    			DebugLocation(509, 54);
    			// cs.g:509:54: ( rank_specifiers )?
    			int alt151=2;
    			try { DebugEnterSubRule(151);
    			try { DebugEnterDecision(151, decisionCanBacktrack[151]);
    			int LA151_0 = input.LA(1);

    			if ((LA151_0==97))
    			{
    				alt151=1;
    			}
    			} finally { DebugExitDecision(151); }
    			switch (alt151)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: rank_specifiers
    				{
    				DebugLocation(509, 54);
    				PushFollow(Follow._rank_specifiers_in_cast_expression3430);
    				rank_specifiers448=rank_specifiers();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, rank_specifiers448.Tree, rank_specifiers448, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(151); }


    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// cs.g:510:5: 'void' ( '*' )* ( rank_specifiers )?
    			{
    			DebugLocation(510, 5);
    			string_literal449=(IToken)Match(input,113,Follow._113_in_cast_expression3437); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal449_tree = (object)adaptor.Create(string_literal449, retval);
    			adaptor.AddChild(root_0, string_literal449_tree);
    			}
    			DebugLocation(510, 14);
    			// cs.g:510:14: ( '*' )*
    			try { DebugEnterSubRule(152);
    			while (true)
    			{
    				int alt152=2;
    				try { DebugEnterDecision(152, decisionCanBacktrack[152]);
    				int LA152_0 = input.LA(1);

    				if ((LA152_0==111))
    				{
    					alt152=1;
    				}


    				} finally { DebugExitDecision(152); }
    				switch ( alt152 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:0:0: '*'
    					{
    					DebugLocation(510, 14);
    					char_literal450=(IToken)Match(input,111,Follow._111_in_cast_expression3441); if (state.failed) return retval;
    					if ( state.backtracking==0 ) {
    					char_literal450_tree = (object)adaptor.Create(char_literal450, retval);
    					adaptor.AddChild(root_0, char_literal450_tree);
    					}

    					}
    					break;

    				default:
    					goto loop152;
    				}
    			}

    			loop152:
    				;

    			} finally { DebugExitSubRule(152); }

    			DebugLocation(510, 21);
    			// cs.g:510:21: ( rank_specifiers )?
    			int alt153=2;
    			try { DebugEnterSubRule(153);
    			try { DebugEnterDecision(153, decisionCanBacktrack[153]);
    			int LA153_0 = input.LA(1);

    			if ((LA153_0==97))
    			{
    				alt153=1;
    			}
    			} finally { DebugExitDecision(153); }
    			switch (alt153)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: rank_specifiers
    				{
    				DebugLocation(510, 21);
    				PushFollow(Follow._rank_specifiers_in_cast_expression3446);
    				rank_specifiers451=rank_specifiers();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, rank_specifiers451.Tree, rank_specifiers451, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(153); }


    			}
    			break;

    		}
    		} finally { DebugExitSubRule(154); }

    		DebugLocation(512, 5);
    		char_literal452=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_cast_expression3459), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal452_tree = (object)adaptor.Create(char_literal452, retval);
    		adaptor.AddChild(root_0, char_literal452_tree);
    		}
    		DebugLocation(512, 11);
    		// cs.g:512:11: ( bracket_expression )*
    		try { DebugEnterSubRule(155);
    		while (true)
    		{
    			int alt155=2;
    			try { DebugEnterDecision(155, decisionCanBacktrack[155]);
    			int LA155_0 = input.LA(1);

    			if ((LA155_0==97))
    			{
    				alt155=1;
    			}


    			} finally { DebugExitDecision(155); }
    			switch ( alt155 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: bracket_expression
    				{
    				DebugLocation(512, 11);
    				PushFollow(Follow._bracket_expression_in_cast_expression3463);
    				bracket_expression453=bracket_expression();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, bracket_expression453.Tree, bracket_expression453, retval);

    				}
    				break;

    			default:
    				goto loop155;
    			}
    		}

    		loop155:
    			;

    		} finally { DebugExitSubRule(155); }

    		DebugLocation(512, 31);
    		PushFollow(Follow._unary_expression_in_cast_expression3466);
    		unary_expression454=unary_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, unary_expression454.Tree, unary_expression454, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 133, cast_expression_StartIndex); }
        }
     	DebugLocation(513, 1);
    	} finally { DebugExitRule(GrammarFileName, "cast_expression"); }
    	return retval;

    }
    // $ANTLR end "cast_expression"

    public class multiplicative_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_multiplicative_expression() {}
    protected virtual void Leave_multiplicative_expression() {}

    // $ANTLR start "multiplicative_expression"
    // cs.g:514:1: multiplicative_expression : unary_expression ( ( '*' | '/' | '%' ) unary_expression )* ;
    [GrammarRule("multiplicative_expression")]
    public csParser.multiplicative_expression_return multiplicative_expression()
    {

        csParser.multiplicative_expression_return retval = new csParser.multiplicative_expression_return();
        retval.Start = (IToken)input.LT(1);
        int multiplicative_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken set456=null;
        csParser.unary_expression_return unary_expression455 = default(csParser.unary_expression_return);
        csParser.unary_expression_return unary_expression457 = default(csParser.unary_expression_return);

        object set456_tree=null;

    	try { DebugEnterRule(GrammarFileName, "multiplicative_expression");
    	DebugLocation(514, 56);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 134)) { return retval; }
    		// cs.g:514:26: ( unary_expression ( ( '*' | '/' | '%' ) unary_expression )* )
    		DebugEnterAlt(1);
    		// cs.g:515:2: unary_expression ( ( '*' | '/' | '%' ) unary_expression )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(515, 2);
    		PushFollow(Follow._unary_expression_in_multiplicative_expression3476);
    		unary_expression455=unary_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, unary_expression455.Tree, unary_expression455, retval);
    		DebugLocation(515, 19);
    		// cs.g:515:19: ( ( '*' | '/' | '%' ) unary_expression )*
    		try { DebugEnterSubRule(156);
    		while (true)
    		{
    			int alt156=2;
    			try { DebugEnterDecision(156, decisionCanBacktrack[156]);
    			try
    			{
    				alt156 = dfa156.Predict(input);
    			}
    			catch (NoViableAltException nvae)
    			{
    				DebugRecognitionException(nvae);
    				throw;
    			}
    			} finally { DebugExitDecision(156); }
    			switch ( alt156 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:515:22: ( '*' | '/' | '%' ) unary_expression
    				{
    				DebugLocation(515, 22);
    				set456=(IToken)input.LT(1);
    				if (input.LA(1)==111||(input.LA(1)>=146 && input.LA(1)<=147))
    				{
    					input.Consume();
    					if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set456, retval));
    					state.errorRecovery=false;state.failed=false;
    				}
    				else
    				{
    					if (state.backtracking>0) {state.failed=true; return retval;}
    					MismatchedSetException mse = new MismatchedSetException(null,input);
    					DebugRecognitionException(mse);
    					throw mse;
    				}

    				DebugLocation(515, 38);
    				PushFollow(Follow._unary_expression_in_multiplicative_expression3491);
    				unary_expression457=unary_expression();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, unary_expression457.Tree, unary_expression457, retval);

    				}
    				break;

    			default:
    				goto loop156;
    			}
    		}

    		loop156:
    			;

    		} finally { DebugExitSubRule(156); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 134, multiplicative_expression_StartIndex); }
        }
     	DebugLocation(515, 56);
    	} finally { DebugExitRule(GrammarFileName, "multiplicative_expression"); }
    	return retval;

    }
    // $ANTLR end "multiplicative_expression"

    public class additive_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_additive_expression() {}
    protected virtual void Leave_additive_expression() {}

    // $ANTLR start "additive_expression"
    // cs.g:516:1: additive_expression : multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )* ;
    [GrammarRule("additive_expression")]
    public csParser.additive_expression_return additive_expression()
    {

        csParser.additive_expression_return retval = new csParser.additive_expression_return();
        retval.Start = (IToken)input.LT(1);
        int additive_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken set459=null;
        csParser.multiplicative_expression_return multiplicative_expression458 = default(csParser.multiplicative_expression_return);
        csParser.multiplicative_expression_return multiplicative_expression460 = default(csParser.multiplicative_expression_return);

        object set459_tree=null;

    	try { DebugEnterRule(GrammarFileName, "additive_expression");
    	DebugLocation(516, 68);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 135)) { return retval; }
    		// cs.g:516:20: ( multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )* )
    		DebugEnterAlt(1);
    		// cs.g:517:2: multiplicative_expression ( ( '+' | '-' ) multiplicative_expression )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(517, 2);
    		PushFollow(Follow._multiplicative_expression_in_additive_expression3501);
    		multiplicative_expression458=multiplicative_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, multiplicative_expression458.Tree, multiplicative_expression458, retval);
    		DebugLocation(517, 28);
    		// cs.g:517:28: ( ( '+' | '-' ) multiplicative_expression )*
    		try { DebugEnterSubRule(157);
    		while (true)
    		{
    			int alt157=2;
    			try { DebugEnterDecision(157, decisionCanBacktrack[157]);
    			try
    			{
    				alt157 = dfa157.Predict(input);
    			}
    			catch (NoViableAltException nvae)
    			{
    				DebugRecognitionException(nvae);
    				throw;
    			}
    			} finally { DebugExitDecision(157); }
    			switch ( alt157 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:517:29: ( '+' | '-' ) multiplicative_expression
    				{
    				DebugLocation(517, 29);
    				set459=(IToken)input.LT(1);
    				if (input.LA(1)==MINUS||input.LA(1)==124)
    				{
    					input.Consume();
    					if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set459, retval));
    					state.errorRecovery=false;state.failed=false;
    				}
    				else
    				{
    					if (state.backtracking>0) {state.failed=true; return retval;}
    					MismatchedSetException mse = new MismatchedSetException(null,input);
    					DebugRecognitionException(mse);
    					throw mse;
    				}

    				DebugLocation(517, 41);
    				PushFollow(Follow._multiplicative_expression_in_additive_expression3512);
    				multiplicative_expression460=multiplicative_expression();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, multiplicative_expression460.Tree, multiplicative_expression460, retval);

    				}
    				break;

    			default:
    				goto loop157;
    			}
    		}

    		loop157:
    			;

    		} finally { DebugExitSubRule(157); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 135, additive_expression_StartIndex); }
        }
     	DebugLocation(517, 68);
    	} finally { DebugExitRule(GrammarFileName, "additive_expression"); }
    	return retval;

    }
    // $ANTLR end "additive_expression"

    public class shift_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_shift_expression() {}
    protected virtual void Leave_shift_expression() {}

    // $ANTLR start "shift_expression"
    // cs.g:519:1: shift_expression : additive_expression ( ( '<<' | '>' '>' ) additive_expression )* ;
    [GrammarRule("shift_expression")]
    public csParser.shift_expression_return shift_expression()
    {

        csParser.shift_expression_return retval = new csParser.shift_expression_return();
        retval.Start = (IToken)input.LT(1);
        int shift_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal462=null;
        IToken char_literal463=null;
        IToken char_literal464=null;
        csParser.additive_expression_return additive_expression461 = default(csParser.additive_expression_return);
        csParser.additive_expression_return additive_expression465 = default(csParser.additive_expression_return);

        object string_literal462_tree=null;
        object char_literal463_tree=null;
        object char_literal464_tree=null;

    	try { DebugEnterRule(GrammarFileName, "shift_expression");
    	DebugLocation(519, 59);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 136)) { return retval; }
    		// cs.g:519:17: ( additive_expression ( ( '<<' | '>' '>' ) additive_expression )* )
    		DebugEnterAlt(1);
    		// cs.g:520:2: additive_expression ( ( '<<' | '>' '>' ) additive_expression )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(520, 2);
    		PushFollow(Follow._additive_expression_in_shift_expression3523);
    		additive_expression461=additive_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, additive_expression461.Tree, additive_expression461, retval);
    		DebugLocation(520, 22);
    		// cs.g:520:22: ( ( '<<' | '>' '>' ) additive_expression )*
    		try { DebugEnterSubRule(159);
    		while (true)
    		{
    			int alt159=2;
    			try { DebugEnterDecision(159, decisionCanBacktrack[159]);
    			int LA159_0 = input.LA(1);

    			if ((LA159_0==GT))
    			{
    				int LA159_1 = input.LA(2);

    				if ((LA159_1==GT))
    				{
    					alt159=1;
    				}


    			}
    			else if ((LA159_0==148))
    			{
    				alt159=1;
    			}


    			} finally { DebugExitDecision(159); }
    			switch ( alt159 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:520:23: ( '<<' | '>' '>' ) additive_expression
    				{
    				DebugLocation(520, 23);
    				// cs.g:520:23: ( '<<' | '>' '>' )
    				int alt158=2;
    				try { DebugEnterSubRule(158);
    				try { DebugEnterDecision(158, decisionCanBacktrack[158]);
    				int LA158_0 = input.LA(1);

    				if ((LA158_0==148))
    				{
    					alt158=1;
    				}
    				else if ((LA158_0==GT))
    				{
    					alt158=2;
    				}
    				else
    				{
    					if (state.backtracking>0) {state.failed=true; return retval;}
    					NoViableAltException nvae = new NoViableAltException("", 158, 0, input);

    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    				} finally { DebugExitDecision(158); }
    				switch (alt158)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:520:24: '<<'
    					{
    					DebugLocation(520, 24);
    					string_literal462=(IToken)Match(input,148,Follow._148_in_shift_expression3527); if (state.failed) return retval;
    					if ( state.backtracking==0 ) {
    					string_literal462_tree = (object)adaptor.Create(string_literal462, retval);
    					adaptor.AddChild(root_0, string_literal462_tree);
    					}

    					}
    					break;
    				case 2:
    					DebugEnterAlt(2);
    					// cs.g:520:29: '>' '>'
    					{
    					DebugLocation(520, 29);
    					char_literal463=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_shift_expression3529), "GT"); if (state.failed) return retval;
    					if ( state.backtracking==0 ) {
    					char_literal463_tree = (object)adaptor.Create(char_literal463, retval);
    					adaptor.AddChild(root_0, char_literal463_tree);
    					}
    					DebugLocation(520, 33);
    					char_literal464=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_shift_expression3531), "GT"); if (state.failed) return retval;
    					if ( state.backtracking==0 ) {
    					char_literal464_tree = (object)adaptor.Create(char_literal464, retval);
    					adaptor.AddChild(root_0, char_literal464_tree);
    					}

    					}
    					break;

    				}
    				} finally { DebugExitSubRule(158); }

    				DebugLocation(520, 38);
    				PushFollow(Follow._additive_expression_in_shift_expression3534);
    				additive_expression465=additive_expression();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, additive_expression465.Tree, additive_expression465, retval);

    				}
    				break;

    			default:
    				goto loop159;
    			}
    		}

    		loop159:
    			;

    		} finally { DebugExitSubRule(159); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 136, shift_expression_StartIndex); }
        }
     	DebugLocation(520, 59);
    	} finally { DebugExitRule(GrammarFileName, "shift_expression"); }
    	return retval;

    }
    // $ANTLR end "shift_expression"

    public class relational_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_relational_expression() {}
    protected virtual void Leave_relational_expression() {}

    // $ANTLR start "relational_expression"
    // cs.g:521:1: relational_expression : shift_expression ( ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* | ( ( 'is' | 'as' ) non_nullable_type )* ) ;
    [GrammarRule("relational_expression")]
    public csParser.relational_expression_return relational_expression()
    {

        csParser.relational_expression_return retval = new csParser.relational_expression_return();
        retval.Start = (IToken)input.LT(1);
        int relational_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken set467=null;
        IToken set469=null;
        csParser.shift_expression_return shift_expression466 = default(csParser.shift_expression_return);
        csParser.shift_expression_return shift_expression468 = default(csParser.shift_expression_return);
        csParser.non_nullable_type_return non_nullable_type470 = default(csParser.non_nullable_type_return);

        object set467_tree=null;
        object set469_tree=null;

    	try { DebugEnterRule(GrammarFileName, "relational_expression");
    	DebugLocation(521, 4);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 137)) { return retval; }
    		// cs.g:521:22: ( shift_expression ( ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* | ( ( 'is' | 'as' ) non_nullable_type )* ) )
    		DebugEnterAlt(1);
    		// cs.g:522:2: shift_expression ( ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* | ( ( 'is' | 'as' ) non_nullable_type )* )
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(522, 2);
    		PushFollow(Follow._shift_expression_in_relational_expression3544);
    		shift_expression466=shift_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, shift_expression466.Tree, shift_expression466, retval);
    		DebugLocation(523, 3);
    		// cs.g:523:3: ( ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* | ( ( 'is' | 'as' ) non_nullable_type )* )
    		int alt162=2;
    		try { DebugEnterSubRule(162);
    		try { DebugEnterDecision(162, decisionCanBacktrack[162]);
    		try
    		{
    			alt162 = dfa162.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(162); }
    		switch (alt162)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:523:9: ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*
    			{
    			DebugLocation(523, 9);
    			// cs.g:523:9: ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*
    			try { DebugEnterSubRule(160);
    			while (true)
    			{
    				int alt160=2;
    				try { DebugEnterDecision(160, decisionCanBacktrack[160]);
    				int LA160_0 = input.LA(1);

    				if ((LA160_0==GT||LA160_0==123||(LA160_0>=149 && LA160_0<=150)))
    				{
    					alt160=1;
    				}


    				} finally { DebugExitDecision(160); }
    				switch ( alt160 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:523:10: ( '<' | '>' | '<=' | '>=' ) shift_expression
    					{
    					DebugLocation(523, 10);
    					set467=(IToken)input.LT(1);
    					if (input.LA(1)==GT||input.LA(1)==123||(input.LA(1)>=149 && input.LA(1)<=150))
    					{
    						input.Consume();
    						if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set467, retval));
    						state.errorRecovery=false;state.failed=false;
    					}
    					else
    					{
    						if (state.backtracking>0) {state.failed=true; return retval;}
    						MismatchedSetException mse = new MismatchedSetException(null,input);
    						DebugRecognitionException(mse);
    						throw mse;
    					}

    					DebugLocation(523, 32);
    					PushFollow(Follow._shift_expression_in_relational_expression3568);
    					shift_expression468=shift_expression();
    					PopFollow();
    					if (state.failed) return retval;
    					if ( (state.backtracking==0) ) adaptor.AddChild(root_0, shift_expression468.Tree, shift_expression468, retval);

    					}
    					break;

    				default:
    					goto loop160;
    				}
    			}

    			loop160:
    				;

    			} finally { DebugExitSubRule(160); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:524:6: ( ( 'is' | 'as' ) non_nullable_type )*
    			{
    			DebugLocation(524, 6);
    			// cs.g:524:6: ( ( 'is' | 'as' ) non_nullable_type )*
    			try { DebugEnterSubRule(161);
    			while (true)
    			{
    				int alt161=2;
    				try { DebugEnterDecision(161, decisionCanBacktrack[161]);
    				int LA161_0 = input.LA(1);

    				if (((LA161_0>=151 && LA161_0<=152)))
    				{
    					alt161=1;
    				}


    				} finally { DebugExitDecision(161); }
    				switch ( alt161 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:524:7: ( 'is' | 'as' ) non_nullable_type
    					{
    					DebugLocation(524, 7);
    					set469=(IToken)input.LT(1);
    					if ((input.LA(1)>=151 && input.LA(1)<=152))
    					{
    						input.Consume();
    						if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set469, retval));
    						state.errorRecovery=false;state.failed=false;
    					}
    					else
    					{
    						if (state.backtracking>0) {state.failed=true; return retval;}
    						MismatchedSetException mse = new MismatchedSetException(null,input);
    						DebugRecognitionException(mse);
    						throw mse;
    					}

    					DebugLocation(524, 21);
    					PushFollow(Follow._non_nullable_type_in_relational_expression3586);
    					non_nullable_type470=non_nullable_type();
    					PopFollow();
    					if (state.failed) return retval;
    					if ( (state.backtracking==0) ) adaptor.AddChild(root_0, non_nullable_type470.Tree, non_nullable_type470, retval);

    					}
    					break;

    				default:
    					goto loop161;
    				}
    			}

    			loop161:
    				;

    			} finally { DebugExitSubRule(161); }


    			}
    			break;

    		}
    		} finally { DebugExitSubRule(162); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 137, relational_expression_StartIndex); }
        }
     	DebugLocation(525, 4);
    	} finally { DebugExitRule(GrammarFileName, "relational_expression"); }
    	return retval;

    }
    // $ANTLR end "relational_expression"

    public class equality_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_equality_expression() {}
    protected virtual void Leave_equality_expression() {}

    // $ANTLR start "equality_expression"
    // cs.g:526:1: equality_expression : relational_expression ( ( '==' | '!=' ) relational_expression )* ;
    [GrammarRule("equality_expression")]
    public csParser.equality_expression_return equality_expression()
    {

        csParser.equality_expression_return retval = new csParser.equality_expression_return();
        retval.Start = (IToken)input.LT(1);
        int equality_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken set472=null;
        csParser.relational_expression_return relational_expression471 = default(csParser.relational_expression_return);
        csParser.relational_expression_return relational_expression473 = default(csParser.relational_expression_return);

        object set472_tree=null;

    	try { DebugEnterRule(GrammarFileName, "equality_expression");
    	DebugLocation(526, 43);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 138)) { return retval; }
    		// cs.g:526:20: ( relational_expression ( ( '==' | '!=' ) relational_expression )* )
    		DebugEnterAlt(1);
    		// cs.g:527:2: relational_expression ( ( '==' | '!=' ) relational_expression )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(527, 2);
    		PushFollow(Follow._relational_expression_in_equality_expression3601);
    		relational_expression471=relational_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, relational_expression471.Tree, relational_expression471, retval);
    		DebugLocation(528, 5);
    		// cs.g:528:5: ( ( '==' | '!=' ) relational_expression )*
    		try { DebugEnterSubRule(163);
    		while (true)
    		{
    			int alt163=2;
    			try { DebugEnterDecision(163, decisionCanBacktrack[163]);
    			int LA163_0 = input.LA(1);

    			if (((LA163_0>=153 && LA163_0<=154)))
    			{
    				alt163=1;
    			}


    			} finally { DebugExitDecision(163); }
    			switch ( alt163 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:528:6: ( '==' | '!=' ) relational_expression
    				{
    				DebugLocation(528, 6);
    				set472=(IToken)input.LT(1);
    				if ((input.LA(1)>=153 && input.LA(1)<=154))
    				{
    					input.Consume();
    					if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set472, retval));
    					state.errorRecovery=false;state.failed=false;
    				}
    				else
    				{
    					if (state.backtracking>0) {state.failed=true; return retval;}
    					MismatchedSetException mse = new MismatchedSetException(null,input);
    					DebugRecognitionException(mse);
    					throw mse;
    				}

    				DebugLocation(528, 20);
    				PushFollow(Follow._relational_expression_in_equality_expression3616);
    				relational_expression473=relational_expression();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, relational_expression473.Tree, relational_expression473, retval);

    				}
    				break;

    			default:
    				goto loop163;
    			}
    		}

    		loop163:
    			;

    		} finally { DebugExitSubRule(163); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 138, equality_expression_StartIndex); }
        }
     	DebugLocation(528, 43);
    	} finally { DebugExitRule(GrammarFileName, "equality_expression"); }
    	return retval;

    }
    // $ANTLR end "equality_expression"

    public class and_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_and_expression() {}
    protected virtual void Leave_and_expression() {}

    // $ANTLR start "and_expression"
    // cs.g:529:1: and_expression : equality_expression ( '&' equality_expression )* ;
    [GrammarRule("and_expression")]
    public csParser.and_expression_return and_expression()
    {

        csParser.and_expression_return retval = new csParser.and_expression_return();
        retval.Start = (IToken)input.LT(1);
        int and_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal475=null;
        csParser.equality_expression_return equality_expression474 = default(csParser.equality_expression_return);
        csParser.equality_expression_return equality_expression476 = default(csParser.equality_expression_return);

        object char_literal475_tree=null;

    	try { DebugEnterRule(GrammarFileName, "and_expression");
    	DebugLocation(529, 50);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 139)) { return retval; }
    		// cs.g:529:15: ( equality_expression ( '&' equality_expression )* )
    		DebugEnterAlt(1);
    		// cs.g:530:2: equality_expression ( '&' equality_expression )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(530, 2);
    		PushFollow(Follow._equality_expression_in_and_expression3626);
    		equality_expression474=equality_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, equality_expression474.Tree, equality_expression474, retval);
    		DebugLocation(530, 22);
    		// cs.g:530:22: ( '&' equality_expression )*
    		try { DebugEnterSubRule(164);
    		while (true)
    		{
    			int alt164=2;
    			try { DebugEnterDecision(164, decisionCanBacktrack[164]);
    			try
    			{
    				alt164 = dfa164.Predict(input);
    			}
    			catch (NoViableAltException nvae)
    			{
    				DebugRecognitionException(nvae);
    				throw;
    			}
    			} finally { DebugExitDecision(164); }
    			switch ( alt164 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:530:23: '&' equality_expression
    				{
    				DebugLocation(530, 23);
    				char_literal475=(IToken)Match(input,129,Follow._129_in_and_expression3629); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal475_tree = (object)adaptor.Create(char_literal475, retval);
    				adaptor.AddChild(root_0, char_literal475_tree);
    				}
    				DebugLocation(530, 29);
    				PushFollow(Follow._equality_expression_in_and_expression3633);
    				equality_expression476=equality_expression();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, equality_expression476.Tree, equality_expression476, retval);

    				}
    				break;

    			default:
    				goto loop164;
    			}
    		}

    		loop164:
    			;

    		} finally { DebugExitSubRule(164); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 139, and_expression_StartIndex); }
        }
     	DebugLocation(530, 50);
    	} finally { DebugExitRule(GrammarFileName, "and_expression"); }
    	return retval;

    }
    // $ANTLR end "and_expression"

    public class exclusive_or_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_exclusive_or_expression() {}
    protected virtual void Leave_exclusive_or_expression() {}

    // $ANTLR start "exclusive_or_expression"
    // cs.g:531:1: exclusive_or_expression : and_expression ( '^' and_expression )* ;
    [GrammarRule("exclusive_or_expression")]
    public csParser.exclusive_or_expression_return exclusive_or_expression()
    {

        csParser.exclusive_or_expression_return retval = new csParser.exclusive_or_expression_return();
        retval.Start = (IToken)input.LT(1);
        int exclusive_or_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal478=null;
        csParser.and_expression_return and_expression477 = default(csParser.and_expression_return);
        csParser.and_expression_return and_expression479 = default(csParser.and_expression_return);

        object char_literal478_tree=null;

    	try { DebugEnterRule(GrammarFileName, "exclusive_or_expression");
    	DebugLocation(531, 40);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 140)) { return retval; }
    		// cs.g:531:24: ( and_expression ( '^' and_expression )* )
    		DebugEnterAlt(1);
    		// cs.g:532:2: and_expression ( '^' and_expression )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(532, 2);
    		PushFollow(Follow._and_expression_in_exclusive_or_expression3643);
    		and_expression477=and_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, and_expression477.Tree, and_expression477, retval);
    		DebugLocation(532, 17);
    		// cs.g:532:17: ( '^' and_expression )*
    		try { DebugEnterSubRule(165);
    		while (true)
    		{
    			int alt165=2;
    			try { DebugEnterDecision(165, decisionCanBacktrack[165]);
    			int LA165_0 = input.LA(1);

    			if ((LA165_0==155))
    			{
    				alt165=1;
    			}


    			} finally { DebugExitDecision(165); }
    			switch ( alt165 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:532:18: '^' and_expression
    				{
    				DebugLocation(532, 18);
    				char_literal478=(IToken)Match(input,155,Follow._155_in_exclusive_or_expression3646); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal478_tree = (object)adaptor.Create(char_literal478, retval);
    				adaptor.AddChild(root_0, char_literal478_tree);
    				}
    				DebugLocation(532, 24);
    				PushFollow(Follow._and_expression_in_exclusive_or_expression3650);
    				and_expression479=and_expression();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, and_expression479.Tree, and_expression479, retval);

    				}
    				break;

    			default:
    				goto loop165;
    			}
    		}

    		loop165:
    			;

    		} finally { DebugExitSubRule(165); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 140, exclusive_or_expression_StartIndex); }
        }
     	DebugLocation(532, 40);
    	} finally { DebugExitRule(GrammarFileName, "exclusive_or_expression"); }
    	return retval;

    }
    // $ANTLR end "exclusive_or_expression"

    public class inclusive_or_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_inclusive_or_expression() {}
    protected virtual void Leave_inclusive_or_expression() {}

    // $ANTLR start "inclusive_or_expression"
    // cs.g:533:1: inclusive_or_expression : exclusive_or_expression ( '|' exclusive_or_expression )* ;
    [GrammarRule("inclusive_or_expression")]
    public csParser.inclusive_or_expression_return inclusive_or_expression()
    {

        csParser.inclusive_or_expression_return retval = new csParser.inclusive_or_expression_return();
        retval.Start = (IToken)input.LT(1);
        int inclusive_or_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal481=null;
        csParser.exclusive_or_expression_return exclusive_or_expression480 = default(csParser.exclusive_or_expression_return);
        csParser.exclusive_or_expression_return exclusive_or_expression482 = default(csParser.exclusive_or_expression_return);

        object char_literal481_tree=null;

    	try { DebugEnterRule(GrammarFileName, "inclusive_or_expression");
    	DebugLocation(533, 60);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 141)) { return retval; }
    		// cs.g:533:24: ( exclusive_or_expression ( '|' exclusive_or_expression )* )
    		DebugEnterAlt(1);
    		// cs.g:534:2: exclusive_or_expression ( '|' exclusive_or_expression )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(534, 2);
    		PushFollow(Follow._exclusive_or_expression_in_inclusive_or_expression3660);
    		exclusive_or_expression480=exclusive_or_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, exclusive_or_expression480.Tree, exclusive_or_expression480, retval);
    		DebugLocation(534, 28);
    		// cs.g:534:28: ( '|' exclusive_or_expression )*
    		try { DebugEnterSubRule(166);
    		while (true)
    		{
    			int alt166=2;
    			try { DebugEnterDecision(166, decisionCanBacktrack[166]);
    			int LA166_0 = input.LA(1);

    			if ((LA166_0==156))
    			{
    				alt166=1;
    			}


    			} finally { DebugExitDecision(166); }
    			switch ( alt166 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:534:29: '|' exclusive_or_expression
    				{
    				DebugLocation(534, 29);
    				char_literal481=(IToken)Match(input,156,Follow._156_in_inclusive_or_expression3665); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal481_tree = (object)adaptor.Create(char_literal481, retval);
    				adaptor.AddChild(root_0, char_literal481_tree);
    				}
    				DebugLocation(534, 35);
    				PushFollow(Follow._exclusive_or_expression_in_inclusive_or_expression3669);
    				exclusive_or_expression482=exclusive_or_expression();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, exclusive_or_expression482.Tree, exclusive_or_expression482, retval);

    				}
    				break;

    			default:
    				goto loop166;
    			}
    		}

    		loop166:
    			;

    		} finally { DebugExitSubRule(166); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 141, inclusive_or_expression_StartIndex); }
        }
     	DebugLocation(534, 60);
    	} finally { DebugExitRule(GrammarFileName, "inclusive_or_expression"); }
    	return retval;

    }
    // $ANTLR end "inclusive_or_expression"

    public class conditional_and_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_conditional_and_expression() {}
    protected virtual void Leave_conditional_and_expression() {}

    // $ANTLR start "conditional_and_expression"
    // cs.g:535:1: conditional_and_expression : inclusive_or_expression ( '&&' inclusive_or_expression )* ;
    [GrammarRule("conditional_and_expression")]
    public csParser.conditional_and_expression_return conditional_and_expression()
    {

        csParser.conditional_and_expression_return retval = new csParser.conditional_and_expression_return();
        retval.Start = (IToken)input.LT(1);
        int conditional_and_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal484=null;
        csParser.inclusive_or_expression_return inclusive_or_expression483 = default(csParser.inclusive_or_expression_return);
        csParser.inclusive_or_expression_return inclusive_or_expression485 = default(csParser.inclusive_or_expression_return);

        object string_literal484_tree=null;

    	try { DebugEnterRule(GrammarFileName, "conditional_and_expression");
    	DebugLocation(535, 61);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 142)) { return retval; }
    		// cs.g:535:27: ( inclusive_or_expression ( '&&' inclusive_or_expression )* )
    		DebugEnterAlt(1);
    		// cs.g:536:2: inclusive_or_expression ( '&&' inclusive_or_expression )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(536, 2);
    		PushFollow(Follow._inclusive_or_expression_in_conditional_and_expression3679);
    		inclusive_or_expression483=inclusive_or_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, inclusive_or_expression483.Tree, inclusive_or_expression483, retval);
    		DebugLocation(536, 28);
    		// cs.g:536:28: ( '&&' inclusive_or_expression )*
    		try { DebugEnterSubRule(167);
    		while (true)
    		{
    			int alt167=2;
    			try { DebugEnterDecision(167, decisionCanBacktrack[167]);
    			int LA167_0 = input.LA(1);

    			if ((LA167_0==157))
    			{
    				alt167=1;
    			}


    			} finally { DebugExitDecision(167); }
    			switch ( alt167 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:536:29: '&&' inclusive_or_expression
    				{
    				DebugLocation(536, 29);
    				string_literal484=(IToken)Match(input,157,Follow._157_in_conditional_and_expression3684); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				string_literal484_tree = (object)adaptor.Create(string_literal484, retval);
    				adaptor.AddChild(root_0, string_literal484_tree);
    				}
    				DebugLocation(536, 36);
    				PushFollow(Follow._inclusive_or_expression_in_conditional_and_expression3688);
    				inclusive_or_expression485=inclusive_or_expression();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, inclusive_or_expression485.Tree, inclusive_or_expression485, retval);

    				}
    				break;

    			default:
    				goto loop167;
    			}
    		}

    		loop167:
    			;

    		} finally { DebugExitSubRule(167); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 142, conditional_and_expression_StartIndex); }
        }
     	DebugLocation(536, 61);
    	} finally { DebugExitRule(GrammarFileName, "conditional_and_expression"); }
    	return retval;

    }
    // $ANTLR end "conditional_and_expression"

    public class conditional_or_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_conditional_or_expression() {}
    protected virtual void Leave_conditional_or_expression() {}

    // $ANTLR start "conditional_or_expression"
    // cs.g:537:1: conditional_or_expression : conditional_and_expression ( '||' conditional_and_expression )* ;
    [GrammarRule("conditional_or_expression")]
    public csParser.conditional_or_expression_return conditional_or_expression()
    {

        csParser.conditional_or_expression_return retval = new csParser.conditional_or_expression_return();
        retval.Start = (IToken)input.LT(1);
        int conditional_or_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal487=null;
        csParser.conditional_and_expression_return conditional_and_expression486 = default(csParser.conditional_and_expression_return);
        csParser.conditional_and_expression_return conditional_and_expression488 = default(csParser.conditional_and_expression_return);

        object string_literal487_tree=null;

    	try { DebugEnterRule(GrammarFileName, "conditional_or_expression");
    	DebugLocation(537, 66);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 143)) { return retval; }
    		// cs.g:537:26: ( conditional_and_expression ( '||' conditional_and_expression )* )
    		DebugEnterAlt(1);
    		// cs.g:538:2: conditional_and_expression ( '||' conditional_and_expression )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(538, 2);
    		PushFollow(Follow._conditional_and_expression_in_conditional_or_expression3698);
    		conditional_and_expression486=conditional_and_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, conditional_and_expression486.Tree, conditional_and_expression486, retval);
    		DebugLocation(538, 30);
    		// cs.g:538:30: ( '||' conditional_and_expression )*
    		try { DebugEnterSubRule(168);
    		while (true)
    		{
    			int alt168=2;
    			try { DebugEnterDecision(168, decisionCanBacktrack[168]);
    			int LA168_0 = input.LA(1);

    			if ((LA168_0==158))
    			{
    				alt168=1;
    			}


    			} finally { DebugExitDecision(168); }
    			switch ( alt168 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:538:31: '||' conditional_and_expression
    				{
    				DebugLocation(538, 31);
    				string_literal487=(IToken)Match(input,158,Follow._158_in_conditional_or_expression3702); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				string_literal487_tree = (object)adaptor.Create(string_literal487, retval);
    				adaptor.AddChild(root_0, string_literal487_tree);
    				}
    				DebugLocation(538, 38);
    				PushFollow(Follow._conditional_and_expression_in_conditional_or_expression3706);
    				conditional_and_expression488=conditional_and_expression();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, conditional_and_expression488.Tree, conditional_and_expression488, retval);

    				}
    				break;

    			default:
    				goto loop168;
    			}
    		}

    		loop168:
    			;

    		} finally { DebugExitSubRule(168); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 143, conditional_or_expression_StartIndex); }
        }
     	DebugLocation(538, 66);
    	} finally { DebugExitRule(GrammarFileName, "conditional_or_expression"); }
    	return retval;

    }
    // $ANTLR end "conditional_or_expression"

    public class null_coalescing_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_null_coalescing_expression() {}
    protected virtual void Leave_null_coalescing_expression() {}

    // $ANTLR start "null_coalescing_expression"
    // cs.g:539:1: null_coalescing_expression : conditional_or_expression ( '??' null_coalescing_expression )* ;
    [GrammarRule("null_coalescing_expression")]
    public csParser.null_coalescing_expression_return null_coalescing_expression()
    {

        csParser.null_coalescing_expression_return retval = new csParser.null_coalescing_expression_return();
        retval.Start = (IToken)input.LT(1);
        int null_coalescing_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal490=null;
        csParser.conditional_or_expression_return conditional_or_expression489 = default(csParser.conditional_or_expression_return);
        csParser.null_coalescing_expression_return null_coalescing_expression491 = default(csParser.null_coalescing_expression_return);

        object string_literal490_tree=null;

    	try { DebugEnterRule(GrammarFileName, "null_coalescing_expression");
    	DebugLocation(539, 65);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 144)) { return retval; }
    		// cs.g:539:27: ( conditional_or_expression ( '??' null_coalescing_expression )* )
    		DebugEnterAlt(1);
    		// cs.g:540:2: conditional_or_expression ( '??' null_coalescing_expression )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(540, 2);
    		PushFollow(Follow._conditional_or_expression_in_null_coalescing_expression3716);
    		conditional_or_expression489=conditional_or_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, conditional_or_expression489.Tree, conditional_or_expression489, retval);
    		DebugLocation(540, 30);
    		// cs.g:540:30: ( '??' null_coalescing_expression )*
    		try { DebugEnterSubRule(169);
    		while (true)
    		{
    			int alt169=2;
    			try { DebugEnterDecision(169, decisionCanBacktrack[169]);
    			int LA169_0 = input.LA(1);

    			if ((LA169_0==159))
    			{
    				int LA169_1 = input.LA(2);

    				if ((EvaluatePredicate(synpred257_cs_fragment)))
    				{
    					alt169=1;
    				}


    			}


    			} finally { DebugExitDecision(169); }
    			switch ( alt169 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:540:31: '??' null_coalescing_expression
    				{
    				DebugLocation(540, 31);
    				string_literal490=(IToken)Match(input,159,Follow._159_in_null_coalescing_expression3721); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				string_literal490_tree = (object)adaptor.Create(string_literal490, retval);
    				adaptor.AddChild(root_0, string_literal490_tree);
    				}
    				DebugLocation(540, 38);
    				PushFollow(Follow._null_coalescing_expression_in_null_coalescing_expression3725);
    				null_coalescing_expression491=null_coalescing_expression();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, null_coalescing_expression491.Tree, null_coalescing_expression491, retval);

    				}
    				break;

    			default:
    				goto loop169;
    			}
    		}

    		loop169:
    			;

    		} finally { DebugExitSubRule(169); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 144, null_coalescing_expression_StartIndex); }
        }
     	DebugLocation(540, 65);
    	} finally { DebugExitRule(GrammarFileName, "null_coalescing_expression"); }
    	return retval;

    }
    // $ANTLR end "null_coalescing_expression"

    public class conditional_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_conditional_expression() {}
    protected virtual void Leave_conditional_expression() {}

    // $ANTLR start "conditional_expression"
    // cs.g:541:1: conditional_expression : null_coalescing_expression ( '?' expression ':' expression )? ;
    [GrammarRule("conditional_expression")]
    public csParser.conditional_expression_return conditional_expression()
    {

        csParser.conditional_expression_return retval = new csParser.conditional_expression_return();
        retval.Start = (IToken)input.LT(1);
        int conditional_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal493=null;
        IToken char_literal495=null;
        csParser.null_coalescing_expression_return null_coalescing_expression492 = default(csParser.null_coalescing_expression_return);
        csParser.expression_return expression494 = default(csParser.expression_return);
        csParser.expression_return expression496 = default(csParser.expression_return);

        object char_literal493_tree=null;
        object char_literal495_tree=null;

    	try { DebugEnterRule(GrammarFileName, "conditional_expression");
    	DebugLocation(541, 69);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 145)) { return retval; }
    		// cs.g:541:23: ( null_coalescing_expression ( '?' expression ':' expression )? )
    		DebugEnterAlt(1);
    		// cs.g:542:2: null_coalescing_expression ( '?' expression ':' expression )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(542, 2);
    		PushFollow(Follow._null_coalescing_expression_in_conditional_expression3734);
    		null_coalescing_expression492=null_coalescing_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, null_coalescing_expression492.Tree, null_coalescing_expression492, retval);
    		DebugLocation(542, 31);
    		// cs.g:542:31: ( '?' expression ':' expression )?
    		int alt170=2;
    		try { DebugEnterSubRule(170);
    		try { DebugEnterDecision(170, decisionCanBacktrack[170]);
    		int LA170_0 = input.LA(1);

    		if ((LA170_0==112))
    		{
    			alt170=1;
    		}
    		} finally { DebugExitDecision(170); }
    		switch (alt170)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:542:32: '?' expression ':' expression
    			{
    			DebugLocation(542, 32);
    			char_literal493=(IToken)Match(input,112,Follow._112_in_conditional_expression3739); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal493_tree = (object)adaptor.Create(char_literal493, retval);
    			adaptor.AddChild(root_0, char_literal493_tree);
    			}
    			DebugLocation(542, 38);
    			PushFollow(Follow._expression_in_conditional_expression3743);
    			expression494=expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression494.Tree, expression494, retval);
    			DebugLocation(542, 51);
    			char_literal495=(IToken)Match(input,100,Follow._100_in_conditional_expression3747); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal495_tree = (object)adaptor.Create(char_literal495, retval);
    			adaptor.AddChild(root_0, char_literal495_tree);
    			}
    			DebugLocation(542, 57);
    			PushFollow(Follow._expression_in_conditional_expression3751);
    			expression496=expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression496.Tree, expression496, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(170); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 145, conditional_expression_StartIndex); }
        }
     	DebugLocation(542, 69);
    	} finally { DebugExitRule(GrammarFileName, "conditional_expression"); }
    	return retval;

    }
    // $ANTLR end "conditional_expression"

    public class array_initializer_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_array_initializer() {}
    protected virtual void Leave_array_initializer() {}

    // $ANTLR start "array_initializer"
    // cs.g:545:1: array_initializer : '{' ( variable_initializer_list )? ( ',' )? '}' ;
    [GrammarRule("array_initializer")]
    public csParser.array_initializer_return array_initializer()
    {

        csParser.array_initializer_return retval = new csParser.array_initializer_return();
        retval.Start = (IToken)input.LT(1);
        int array_initializer_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal497=null;
        IToken char_literal499=null;
        IToken char_literal500=null;
        csParser.variable_initializer_list_return variable_initializer_list498 = default(csParser.variable_initializer_list_return);

        object char_literal497_tree=null;
        object char_literal499_tree=null;
        object char_literal500_tree=null;

    	try { DebugEnterRule(GrammarFileName, "array_initializer");
    	DebugLocation(545, 47);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 146)) { return retval; }
    		// cs.g:545:18: ( '{' ( variable_initializer_list )? ( ',' )? '}' )
    		DebugEnterAlt(1);
    		// cs.g:546:2: '{' ( variable_initializer_list )? ( ',' )? '}'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(546, 2);
    		char_literal497=(IToken)Match(input,92,Follow._92_in_array_initializer3763); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal497_tree = (object)adaptor.Create(char_literal497, retval);
    		adaptor.AddChild(root_0, char_literal497_tree);
    		}
    		DebugLocation(546, 8);
    		// cs.g:546:8: ( variable_initializer_list )?
    		int alt171=2;
    		try { DebugEnterSubRule(171);
    		try { DebugEnterDecision(171, decisionCanBacktrack[171]);
    		int LA171_0 = input.LA(1);

    		if (((LA171_0>=IDENTIFIER && LA171_0<=NULL)||LA171_0==MINUS||LA171_0==SET||(LA171_0>=90 && LA171_0<=92)||LA171_0==95||(LA171_0>=101 && LA171_0<=107)||(LA171_0>=109 && LA171_0<=111)||(LA171_0>=114 && LA171_0<=122)||(LA171_0>=124 && LA171_0<=129)||(LA171_0>=132 && LA171_0<=144)||(LA171_0>=175 && LA171_0<=187)||LA171_0==199||(LA171_0>=201 && LA171_0<=202)||LA171_0==208||(LA171_0>=225 && LA171_0<=226)))
    		{
    			alt171=1;
    		}
    		} finally { DebugExitDecision(171); }
    		switch (alt171)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: variable_initializer_list
    			{
    			DebugLocation(546, 8);
    			PushFollow(Follow._variable_initializer_list_in_array_initializer3767);
    			variable_initializer_list498=variable_initializer_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, variable_initializer_list498.Tree, variable_initializer_list498, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(171); }

    		DebugLocation(546, 37);
    		// cs.g:546:37: ( ',' )?
    		int alt172=2;
    		try { DebugEnterSubRule(172);
    		try { DebugEnterDecision(172, decisionCanBacktrack[172]);
    		int LA172_0 = input.LA(1);

    		if ((LA172_0==98))
    		{
    			alt172=1;
    		}
    		} finally { DebugExitDecision(172); }
    		switch (alt172)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: ','
    			{
    			DebugLocation(546, 37);
    			char_literal499=(IToken)Match(input,98,Follow._98_in_array_initializer3772); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal499_tree = (object)adaptor.Create(char_literal499, retval);
    			adaptor.AddChild(root_0, char_literal499_tree);
    			}

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(172); }

    		DebugLocation(546, 44);
    		char_literal500=(IToken)Match(input,93,Follow._93_in_array_initializer3777); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal500_tree = (object)adaptor.Create(char_literal500, retval);
    		adaptor.AddChild(root_0, char_literal500_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 146, array_initializer_StartIndex); }
        }
     	DebugLocation(546, 47);
    	} finally { DebugExitRule(GrammarFileName, "array_initializer"); }
    	return retval;

    }
    // $ANTLR end "array_initializer"

    public class variable_initializer_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_variable_initializer_list() {}
    protected virtual void Leave_variable_initializer_list() {}

    // $ANTLR start "variable_initializer_list"
    // cs.g:547:1: variable_initializer_list : variable_initializer ( ',' variable_initializer )* ;
    [GrammarRule("variable_initializer_list")]
    public csParser.variable_initializer_list_return variable_initializer_list()
    {

        csParser.variable_initializer_list_return retval = new csParser.variable_initializer_list_return();
        retval.Start = (IToken)input.LT(1);
        int variable_initializer_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal502=null;
        csParser.variable_initializer_return variable_initializer501 = default(csParser.variable_initializer_return);
        csParser.variable_initializer_return variable_initializer503 = default(csParser.variable_initializer_return);

        object char_literal502_tree=null;

    	try { DebugEnterRule(GrammarFileName, "variable_initializer_list");
    	DebugLocation(547, 50);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 147)) { return retval; }
    		// cs.g:547:26: ( variable_initializer ( ',' variable_initializer )* )
    		DebugEnterAlt(1);
    		// cs.g:548:2: variable_initializer ( ',' variable_initializer )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(548, 2);
    		PushFollow(Follow._variable_initializer_in_variable_initializer_list3785);
    		variable_initializer501=variable_initializer();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, variable_initializer501.Tree, variable_initializer501, retval);
    		DebugLocation(548, 23);
    		// cs.g:548:23: ( ',' variable_initializer )*
    		try { DebugEnterSubRule(173);
    		while (true)
    		{
    			int alt173=2;
    			try { DebugEnterDecision(173, decisionCanBacktrack[173]);
    			int LA173_0 = input.LA(1);

    			if ((LA173_0==98))
    			{
    				int LA173_1 = input.LA(2);

    				if (((LA173_1>=IDENTIFIER && LA173_1<=NULL)||LA173_1==MINUS||LA173_1==SET||(LA173_1>=90 && LA173_1<=92)||LA173_1==95||(LA173_1>=101 && LA173_1<=107)||(LA173_1>=109 && LA173_1<=111)||(LA173_1>=114 && LA173_1<=122)||(LA173_1>=124 && LA173_1<=129)||(LA173_1>=132 && LA173_1<=144)||(LA173_1>=175 && LA173_1<=187)||LA173_1==199||(LA173_1>=201 && LA173_1<=202)||LA173_1==208||(LA173_1>=225 && LA173_1<=226)))
    				{
    					alt173=1;
    				}


    			}


    			} finally { DebugExitDecision(173); }
    			switch ( alt173 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:548:24: ',' variable_initializer
    				{
    				DebugLocation(548, 24);
    				char_literal502=(IToken)Match(input,98,Follow._98_in_variable_initializer_list3788); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal502_tree = (object)adaptor.Create(char_literal502, retval);
    				adaptor.AddChild(root_0, char_literal502_tree);
    				}
    				DebugLocation(548, 28);
    				PushFollow(Follow._variable_initializer_in_variable_initializer_list3790);
    				variable_initializer503=variable_initializer();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, variable_initializer503.Tree, variable_initializer503, retval);

    				}
    				break;

    			default:
    				goto loop173;
    			}
    		}

    		loop173:
    			;

    		} finally { DebugExitSubRule(173); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 147, variable_initializer_list_StartIndex); }
        }
     	DebugLocation(548, 50);
    	} finally { DebugExitRule(GrammarFileName, "variable_initializer_list"); }
    	return retval;

    }
    // $ANTLR end "variable_initializer_list"

    public class assignment_operator_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_assignment_operator() {}
    protected virtual void Leave_assignment_operator() {}

    // $ANTLR start "assignment_operator"
    // cs.g:550:1: assignment_operator : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>' '>=' );
    [GrammarRule("assignment_operator")]
    public csParser.assignment_operator_return assignment_operator()
    {

        csParser.assignment_operator_return retval = new csParser.assignment_operator_return();
        retval.Start = (IToken)input.LT(1);
        int assignment_operator_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal504=null;
        IToken string_literal505=null;
        IToken string_literal506=null;
        IToken string_literal507=null;
        IToken string_literal508=null;
        IToken string_literal509=null;
        IToken string_literal510=null;
        IToken string_literal511=null;
        IToken string_literal512=null;
        IToken string_literal513=null;
        IToken char_literal514=null;
        IToken string_literal515=null;

        object char_literal504_tree=null;
        object string_literal505_tree=null;
        object string_literal506_tree=null;
        object string_literal507_tree=null;
        object string_literal508_tree=null;
        object string_literal509_tree=null;
        object string_literal510_tree=null;
        object string_literal511_tree=null;
        object string_literal512_tree=null;
        object string_literal513_tree=null;
        object char_literal514_tree=null;
        object string_literal515_tree=null;

    	try { DebugEnterRule(GrammarFileName, "assignment_operator");
    	DebugLocation(550, 80);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 148)) { return retval; }
    		// cs.g:550:20: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>' '>=' )
    		int alt174=11;
    		try { DebugEnterDecision(174, decisionCanBacktrack[174]);
    		switch (input.LA(1))
    		{
    		case 96:
    			{
    			alt174=1;
    			}
    			break;
    		case 160:
    			{
    			alt174=2;
    			}
    			break;
    		case 161:
    			{
    			alt174=3;
    			}
    			break;
    		case 162:
    			{
    			alt174=4;
    			}
    			break;
    		case 163:
    			{
    			alt174=5;
    			}
    			break;
    		case 164:
    			{
    			alt174=6;
    			}
    			break;
    		case 165:
    			{
    			alt174=7;
    			}
    			break;
    		case 166:
    			{
    			alt174=8;
    			}
    			break;
    		case 167:
    			{
    			alt174=9;
    			}
    			break;
    		case 168:
    			{
    			alt174=10;
    			}
    			break;
    		case GT:
    			{
    			alt174=11;
    			}
    			break;
    		default:
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 174, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(174); }
    		switch (alt174)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:551:2: '='
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(551, 2);
    			char_literal504=(IToken)Match(input,96,Follow._96_in_assignment_operator3801); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal504_tree = (object)adaptor.Create(char_literal504, retval);
    			adaptor.AddChild(root_0, char_literal504_tree);
    			}

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:551:8: '+='
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(551, 8);
    			string_literal505=(IToken)Match(input,160,Follow._160_in_assignment_operator3805); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal505_tree = (object)adaptor.Create(string_literal505, retval);
    			adaptor.AddChild(root_0, string_literal505_tree);
    			}

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:551:15: '-='
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(551, 15);
    			string_literal506=(IToken)Match(input,161,Follow._161_in_assignment_operator3809); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal506_tree = (object)adaptor.Create(string_literal506, retval);
    			adaptor.AddChild(root_0, string_literal506_tree);
    			}

    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// cs.g:551:22: '*='
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(551, 22);
    			string_literal507=(IToken)Match(input,162,Follow._162_in_assignment_operator3813); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal507_tree = (object)adaptor.Create(string_literal507, retval);
    			adaptor.AddChild(root_0, string_literal507_tree);
    			}

    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// cs.g:551:29: '/='
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(551, 29);
    			string_literal508=(IToken)Match(input,163,Follow._163_in_assignment_operator3817); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal508_tree = (object)adaptor.Create(string_literal508, retval);
    			adaptor.AddChild(root_0, string_literal508_tree);
    			}

    			}
    			break;
    		case 6:
    			DebugEnterAlt(6);
    			// cs.g:551:36: '%='
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(551, 36);
    			string_literal509=(IToken)Match(input,164,Follow._164_in_assignment_operator3821); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal509_tree = (object)adaptor.Create(string_literal509, retval);
    			adaptor.AddChild(root_0, string_literal509_tree);
    			}

    			}
    			break;
    		case 7:
    			DebugEnterAlt(7);
    			// cs.g:551:43: '&='
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(551, 43);
    			string_literal510=(IToken)Match(input,165,Follow._165_in_assignment_operator3825); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal510_tree = (object)adaptor.Create(string_literal510, retval);
    			adaptor.AddChild(root_0, string_literal510_tree);
    			}

    			}
    			break;
    		case 8:
    			DebugEnterAlt(8);
    			// cs.g:551:50: '|='
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(551, 50);
    			string_literal511=(IToken)Match(input,166,Follow._166_in_assignment_operator3829); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal511_tree = (object)adaptor.Create(string_literal511, retval);
    			adaptor.AddChild(root_0, string_literal511_tree);
    			}

    			}
    			break;
    		case 9:
    			DebugEnterAlt(9);
    			// cs.g:551:57: '^='
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(551, 57);
    			string_literal512=(IToken)Match(input,167,Follow._167_in_assignment_operator3833); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal512_tree = (object)adaptor.Create(string_literal512, retval);
    			adaptor.AddChild(root_0, string_literal512_tree);
    			}

    			}
    			break;
    		case 10:
    			DebugEnterAlt(10);
    			// cs.g:551:64: '<<='
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(551, 64);
    			string_literal513=(IToken)Match(input,168,Follow._168_in_assignment_operator3837); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal513_tree = (object)adaptor.Create(string_literal513, retval);
    			adaptor.AddChild(root_0, string_literal513_tree);
    			}

    			}
    			break;
    		case 11:
    			DebugEnterAlt(11);
    			// cs.g:551:72: '>' '>='
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(551, 72);
    			char_literal514=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_assignment_operator3841), "GT"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal514_tree = (object)adaptor.Create(char_literal514, retval);
    			adaptor.AddChild(root_0, char_literal514_tree);
    			}
    			DebugLocation(551, 76);
    			string_literal515=(IToken)Match(input,150,Follow._150_in_assignment_operator3843); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal515_tree = (object)adaptor.Create(string_literal515, retval);
    			adaptor.AddChild(root_0, string_literal515_tree);
    			}

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 148, assignment_operator_StartIndex); }
        }
     	DebugLocation(551, 80);
    	} finally { DebugExitRule(GrammarFileName, "assignment_operator"); }
    	return retval;

    }
    // $ANTLR end "assignment_operator"

    public class lambda_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_lambda_expression() {}
    protected virtual void Leave_lambda_expression() {}

    // $ANTLR start "lambda_expression"
    // cs.g:552:1: lambda_expression : anonymous_function_signature '=>' anonymous_function_body ;
    [GrammarRule("lambda_expression")]
    public csParser.lambda_expression_return lambda_expression()
    {

        csParser.lambda_expression_return retval = new csParser.lambda_expression_return();
        retval.Start = (IToken)input.LT(1);
        int lambda_expression_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal517=null;
        csParser.anonymous_function_signature_return anonymous_function_signature516 = default(csParser.anonymous_function_signature_return);
        csParser.anonymous_function_body_return anonymous_function_body518 = default(csParser.anonymous_function_body_return);

        object string_literal517_tree=null;

    	try { DebugEnterRule(GrammarFileName, "lambda_expression");
    	DebugLocation(552, 62);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 149)) { return retval; }
    		// cs.g:552:18: ( anonymous_function_signature '=>' anonymous_function_body )
    		DebugEnterAlt(1);
    		// cs.g:553:2: anonymous_function_signature '=>' anonymous_function_body
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(553, 2);
    		PushFollow(Follow._anonymous_function_signature_in_lambda_expression3851);
    		anonymous_function_signature516=anonymous_function_signature();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, anonymous_function_signature516.Tree, anonymous_function_signature516, retval);
    		DebugLocation(553, 33);
    		string_literal517=(IToken)Match(input,169,Follow._169_in_lambda_expression3855); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal517_tree = (object)adaptor.Create(string_literal517, retval);
    		adaptor.AddChild(root_0, string_literal517_tree);
    		}
    		DebugLocation(553, 40);
    		PushFollow(Follow._anonymous_function_body_in_lambda_expression3859);
    		anonymous_function_body518=anonymous_function_body();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, anonymous_function_body518.Tree, anonymous_function_body518, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 149, lambda_expression_StartIndex); }
        }
     	DebugLocation(553, 62);
    	} finally { DebugExitRule(GrammarFileName, "lambda_expression"); }
    	return retval;

    }
    // $ANTLR end "lambda_expression"

    public class anonymous_function_signature_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_anonymous_function_signature() {}
    protected virtual void Leave_anonymous_function_signature() {}

    // $ANTLR start "anonymous_function_signature"
    // cs.g:554:1: anonymous_function_signature : ( explicit_anonymous_function_signature | implicit_anonymous_function_signature );
    [GrammarRule("anonymous_function_signature")]
    public csParser.anonymous_function_signature_return anonymous_function_signature()
    {

        csParser.anonymous_function_signature_return retval = new csParser.anonymous_function_signature_return();
        retval.Start = (IToken)input.LT(1);
        int anonymous_function_signature_StartIndex = input.Index;
        object root_0 = null;

        csParser.explicit_anonymous_function_signature_return explicit_anonymous_function_signature519 = default(csParser.explicit_anonymous_function_signature_return);
        csParser.implicit_anonymous_function_signature_return implicit_anonymous_function_signature520 = default(csParser.implicit_anonymous_function_signature_return);


    	try { DebugEnterRule(GrammarFileName, "anonymous_function_signature");
    	DebugLocation(554, 40);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 150)) { return retval; }
    		// cs.g:554:29: ( explicit_anonymous_function_signature | implicit_anonymous_function_signature )
    		int alt175=2;
    		try { DebugEnterDecision(175, decisionCanBacktrack[175]);
    		int LA175_0 = input.LA(1);

    		if ((LA175_0==110))
    		{
    			switch (input.LA(2))
    			{
    			case 113:
    			case 114:
    			case 115:
    			case 116:
    			case 117:
    			case 118:
    			case 119:
    			case 120:
    			case 121:
    			case 122:
    			case 130:
    			case 131:
    			case 132:
    			case 133:
    			case 134:
    			case 135:
    			case 136:
    			case 137:
    				{
    				alt175=1;
    				}
    				break;
    			case IDENTIFIER:
    				{
    				switch (input.LA(3))
    				{
    				case DOT:
    				case 89:
    				case 97:
    				case 111:
    				case 112:
    				case 123:
    					{
    					alt175=1;
    					}
    					break;
    				case IDENTIFIER:
    					{
    					switch (input.LA(4))
    					{
    					case 98:
    						{
    						alt175=1;
    						}
    						break;
    					case RPAREN:
    						{
    						int LA175_6 = input.LA(5);

    						if ((EvaluatePredicate(synpred272_cs_fragment)))
    						{
    							alt175=1;
    						}
    						else if ((true))
    						{
    							alt175=2;
    						}
    						else
    						{
    							if (state.backtracking>0) {state.failed=true; return retval;}
    							NoViableAltException nvae = new NoViableAltException("", 175, 6, input);

    							DebugRecognitionException(nvae);
    							throw nvae;
    						}
    						}
    						break;
    					case IDENTIFIER:
    					case SET:
    					case 95:
    					case 101:
    					case 102:
    					case 103:
    					case 104:
    					case 105:
    					case 106:
    					case 107:
    					case 109:
    					case 175:
    					case 176:
    					case 177:
    					case 178:
    					case 179:
    					case 180:
    					case 181:
    					case 182:
    					case 183:
    					case 184:
    					case 185:
    					case 186:
    					case 187:
    					case 199:
    					case 201:
    					case 202:
    					case 208:
    					case 225:
    					case 226:
    						{
    						alt175=2;
    						}
    						break;
    					default:
    						{
    							if (state.backtracking>0) {state.failed=true; return retval;}
    							NoViableAltException nvae = new NoViableAltException("", 175, 7, input);

    							DebugRecognitionException(nvae);
    							throw nvae;
    						}
    					}

    					}
    					break;
    				case SET:
    				case 95:
    				case 101:
    				case 102:
    				case 103:
    				case 104:
    				case 105:
    				case 106:
    				case 107:
    				case 109:
    				case 175:
    				case 176:
    				case 177:
    				case 178:
    				case 179:
    				case 180:
    				case 181:
    				case 182:
    				case 183:
    				case 184:
    				case 185:
    				case 186:
    				case 187:
    				case 199:
    				case 201:
    				case 202:
    				case 208:
    				case 225:
    				case 226:
    					{
    					switch (input.LA(4))
    					{
    					case 98:
    						{
    						alt175=1;
    						}
    						break;
    					case RPAREN:
    						{
    						int LA175_6 = input.LA(5);

    						if ((EvaluatePredicate(synpred272_cs_fragment)))
    						{
    							alt175=1;
    						}
    						else if ((true))
    						{
    							alt175=2;
    						}
    						else
    						{
    							if (state.backtracking>0) {state.failed=true; return retval;}
    							NoViableAltException nvae = new NoViableAltException("", 175, 6, input);

    							DebugRecognitionException(nvae);
    							throw nvae;
    						}
    						}
    						break;
    					case IDENTIFIER:
    					case SET:
    					case 95:
    					case 101:
    					case 102:
    					case 103:
    					case 104:
    					case 105:
    					case 106:
    					case 107:
    					case 109:
    					case 175:
    					case 176:
    					case 177:
    					case 178:
    					case 179:
    					case 180:
    					case 181:
    					case 182:
    					case 183:
    					case 184:
    					case 185:
    					case 186:
    					case 187:
    					case 199:
    					case 201:
    					case 202:
    					case 208:
    					case 225:
    					case 226:
    						{
    						alt175=2;
    						}
    						break;
    					default:
    						{
    							if (state.backtracking>0) {state.failed=true; return retval;}
    							NoViableAltException nvae = new NoViableAltException("", 175, 8, input);

    							DebugRecognitionException(nvae);
    							throw nvae;
    						}
    					}

    					}
    					break;
    				case RPAREN:
    					{
    					alt175=2;
    					}
    					break;
    				default:
    					{
    						if (state.backtracking>0) {state.failed=true; return retval;}
    						NoViableAltException nvae = new NoViableAltException("", 175, 4, input);

    						DebugRecognitionException(nvae);
    						throw nvae;
    					}
    				}

    				}
    				break;
    			case SET:
    			case 95:
    			case 101:
    			case 102:
    			case 103:
    			case 104:
    			case 105:
    			case 106:
    			case 107:
    			case 109:
    			case 175:
    			case 176:
    			case 177:
    			case 178:
    			case 179:
    			case 180:
    			case 181:
    			case 182:
    			case 183:
    			case 184:
    			case 185:
    			case 186:
    			case 187:
    			case 199:
    			case 201:
    			case 202:
    			case 208:
    			case 225:
    			case 226:
    				{
    				switch (input.LA(3))
    				{
    				case DOT:
    				case 89:
    				case 97:
    				case 111:
    				case 112:
    				case 123:
    					{
    					alt175=1;
    					}
    					break;
    				case IDENTIFIER:
    					{
    					switch (input.LA(4))
    					{
    					case 98:
    						{
    						alt175=1;
    						}
    						break;
    					case RPAREN:
    						{
    						int LA175_6 = input.LA(5);

    						if ((EvaluatePredicate(synpred272_cs_fragment)))
    						{
    							alt175=1;
    						}
    						else if ((true))
    						{
    							alt175=2;
    						}
    						else
    						{
    							if (state.backtracking>0) {state.failed=true; return retval;}
    							NoViableAltException nvae = new NoViableAltException("", 175, 6, input);

    							DebugRecognitionException(nvae);
    							throw nvae;
    						}
    						}
    						break;
    					case IDENTIFIER:
    					case SET:
    					case 95:
    					case 101:
    					case 102:
    					case 103:
    					case 104:
    					case 105:
    					case 106:
    					case 107:
    					case 109:
    					case 175:
    					case 176:
    					case 177:
    					case 178:
    					case 179:
    					case 180:
    					case 181:
    					case 182:
    					case 183:
    					case 184:
    					case 185:
    					case 186:
    					case 187:
    					case 199:
    					case 201:
    					case 202:
    					case 208:
    					case 225:
    					case 226:
    						{
    						alt175=2;
    						}
    						break;
    					default:
    						{
    							if (state.backtracking>0) {state.failed=true; return retval;}
    							NoViableAltException nvae = new NoViableAltException("", 175, 7, input);

    							DebugRecognitionException(nvae);
    							throw nvae;
    						}
    					}

    					}
    					break;
    				case SET:
    				case 95:
    				case 101:
    				case 102:
    				case 103:
    				case 104:
    				case 105:
    				case 106:
    				case 107:
    				case 109:
    				case 175:
    				case 176:
    				case 177:
    				case 178:
    				case 179:
    				case 180:
    				case 181:
    				case 182:
    				case 183:
    				case 184:
    				case 185:
    				case 186:
    				case 187:
    				case 199:
    				case 201:
    				case 202:
    				case 208:
    				case 225:
    				case 226:
    					{
    					switch (input.LA(4))
    					{
    					case 98:
    						{
    						alt175=1;
    						}
    						break;
    					case RPAREN:
    						{
    						int LA175_6 = input.LA(5);

    						if ((EvaluatePredicate(synpred272_cs_fragment)))
    						{
    							alt175=1;
    						}
    						else if ((true))
    						{
    							alt175=2;
    						}
    						else
    						{
    							if (state.backtracking>0) {state.failed=true; return retval;}
    							NoViableAltException nvae = new NoViableAltException("", 175, 6, input);

    							DebugRecognitionException(nvae);
    							throw nvae;
    						}
    						}
    						break;
    					case IDENTIFIER:
    					case SET:
    					case 95:
    					case 101:
    					case 102:
    					case 103:
    					case 104:
    					case 105:
    					case 106:
    					case 107:
    					case 109:
    					case 175:
    					case 176:
    					case 177:
    					case 178:
    					case 179:
    					case 180:
    					case 181:
    					case 182:
    					case 183:
    					case 184:
    					case 185:
    					case 186:
    					case 187:
    					case 199:
    					case 201:
    					case 202:
    					case 208:
    					case 225:
    					case 226:
    						{
    						alt175=2;
    						}
    						break;
    					default:
    						{
    							if (state.backtracking>0) {state.failed=true; return retval;}
    							NoViableAltException nvae = new NoViableAltException("", 175, 8, input);

    							DebugRecognitionException(nvae);
    							throw nvae;
    						}
    					}

    					}
    					break;
    				case RPAREN:
    					{
    					alt175=2;
    					}
    					break;
    				default:
    					{
    						if (state.backtracking>0) {state.failed=true; return retval;}
    						NoViableAltException nvae = new NoViableAltException("", 175, 5, input);

    						DebugRecognitionException(nvae);
    						throw nvae;
    					}
    				}

    				}
    				break;
    			case RPAREN:
    				{
    				int LA175_6 = input.LA(3);

    				if ((EvaluatePredicate(synpred272_cs_fragment)))
    				{
    					alt175=1;
    				}
    				else if ((true))
    				{
    					alt175=2;
    				}
    				else
    				{
    					if (state.backtracking>0) {state.failed=true; return retval;}
    					NoViableAltException nvae = new NoViableAltException("", 175, 6, input);

    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    				}
    				break;
    			default:
    				{
    					if (state.backtracking>0) {state.failed=true; return retval;}
    					NoViableAltException nvae = new NoViableAltException("", 175, 1, input);

    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    			}

    		}
    		else if ((LA175_0==IDENTIFIER||LA175_0==SET||LA175_0==95||(LA175_0>=101 && LA175_0<=107)||LA175_0==109||(LA175_0>=175 && LA175_0<=187)||LA175_0==199||(LA175_0>=201 && LA175_0<=202)||LA175_0==208||(LA175_0>=225 && LA175_0<=226)))
    		{
    			alt175=2;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 175, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(175); }
    		switch (alt175)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:555:2: explicit_anonymous_function_signature
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(555, 2);
    			PushFollow(Follow._explicit_anonymous_function_signature_in_anonymous_function_signature3866);
    			explicit_anonymous_function_signature519=explicit_anonymous_function_signature();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, explicit_anonymous_function_signature519.Tree, explicit_anonymous_function_signature519, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:556:4: implicit_anonymous_function_signature
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(556, 4);
    			PushFollow(Follow._implicit_anonymous_function_signature_in_anonymous_function_signature3872);
    			implicit_anonymous_function_signature520=implicit_anonymous_function_signature();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, implicit_anonymous_function_signature520.Tree, implicit_anonymous_function_signature520, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 150, anonymous_function_signature_StartIndex); }
        }
     	DebugLocation(556, 40);
    	} finally { DebugExitRule(GrammarFileName, "anonymous_function_signature"); }
    	return retval;

    }
    // $ANTLR end "anonymous_function_signature"

    public class implicit_anonymous_function_signature_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_implicit_anonymous_function_signature() {}
    protected virtual void Leave_implicit_anonymous_function_signature() {}

    // $ANTLR start "implicit_anonymous_function_signature"
    // cs.g:557:1: implicit_anonymous_function_signature : ( '(' ( implicit_anonymous_function_parameter_list )? ')' | implicit_anonymous_function_parameter_list ( ',' implicit_anonymous_function_parameter )? );
    [GrammarRule("implicit_anonymous_function_signature")]
    public csParser.implicit_anonymous_function_signature_return implicit_anonymous_function_signature()
    {

        csParser.implicit_anonymous_function_signature_return retval = new csParser.implicit_anonymous_function_signature_return();
        retval.Start = (IToken)input.LT(1);
        int implicit_anonymous_function_signature_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal521=null;
        IToken char_literal523=null;
        IToken char_literal525=null;
        csParser.implicit_anonymous_function_parameter_list_return implicit_anonymous_function_parameter_list522 = default(csParser.implicit_anonymous_function_parameter_list_return);
        csParser.implicit_anonymous_function_parameter_list_return implicit_anonymous_function_parameter_list524 = default(csParser.implicit_anonymous_function_parameter_list_return);
        csParser.implicit_anonymous_function_parameter_return implicit_anonymous_function_parameter526 = default(csParser.implicit_anonymous_function_parameter_return);

        object char_literal521_tree=null;
        object char_literal523_tree=null;
        object char_literal525_tree=null;

    	try { DebugEnterRule(GrammarFileName, "implicit_anonymous_function_signature");
    	DebugLocation(557, 94);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 151)) { return retval; }
    		// cs.g:557:38: ( '(' ( implicit_anonymous_function_parameter_list )? ')' | implicit_anonymous_function_parameter_list ( ',' implicit_anonymous_function_parameter )? )
    		int alt178=2;
    		try { DebugEnterDecision(178, decisionCanBacktrack[178]);
    		int LA178_0 = input.LA(1);

    		if ((LA178_0==110))
    		{
    			alt178=1;
    		}
    		else if ((LA178_0==IDENTIFIER||LA178_0==SET||LA178_0==95||(LA178_0>=101 && LA178_0<=107)||LA178_0==109||(LA178_0>=175 && LA178_0<=187)||LA178_0==199||(LA178_0>=201 && LA178_0<=202)||LA178_0==208||(LA178_0>=225 && LA178_0<=226)))
    		{
    			alt178=2;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 178, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(178); }
    		switch (alt178)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:558:2: '(' ( implicit_anonymous_function_parameter_list )? ')'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(558, 2);
    			char_literal521=(IToken)Match(input,110,Follow._110_in_implicit_anonymous_function_signature3879); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal521_tree = (object)adaptor.Create(char_literal521, retval);
    			adaptor.AddChild(root_0, char_literal521_tree);
    			}
    			DebugLocation(558, 8);
    			// cs.g:558:8: ( implicit_anonymous_function_parameter_list )?
    			int alt176=2;
    			try { DebugEnterSubRule(176);
    			try { DebugEnterDecision(176, decisionCanBacktrack[176]);
    			int LA176_0 = input.LA(1);

    			if ((LA176_0==IDENTIFIER||LA176_0==SET||LA176_0==95||(LA176_0>=101 && LA176_0<=107)||LA176_0==109||(LA176_0>=175 && LA176_0<=187)||LA176_0==199||(LA176_0>=201 && LA176_0<=202)||LA176_0==208||(LA176_0>=225 && LA176_0<=226)))
    			{
    				alt176=1;
    			}
    			} finally { DebugExitDecision(176); }
    			switch (alt176)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: implicit_anonymous_function_parameter_list
    				{
    				DebugLocation(558, 8);
    				PushFollow(Follow._implicit_anonymous_function_parameter_list_in_implicit_anonymous_function_signature3883);
    				implicit_anonymous_function_parameter_list522=implicit_anonymous_function_parameter_list();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, implicit_anonymous_function_parameter_list522.Tree, implicit_anonymous_function_parameter_list522, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(176); }

    			DebugLocation(558, 54);
    			char_literal523=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_implicit_anonymous_function_signature3888), "RPAREN"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal523_tree = (object)adaptor.Create(char_literal523, retval);
    			adaptor.AddChild(root_0, char_literal523_tree);
    			}

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:559:4: implicit_anonymous_function_parameter_list ( ',' implicit_anonymous_function_parameter )?
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(559, 4);
    			PushFollow(Follow._implicit_anonymous_function_parameter_list_in_implicit_anonymous_function_signature3893);
    			implicit_anonymous_function_parameter_list524=implicit_anonymous_function_parameter_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, implicit_anonymous_function_parameter_list524.Tree, implicit_anonymous_function_parameter_list524, retval);
    			DebugLocation(559, 49);
    			// cs.g:559:49: ( ',' implicit_anonymous_function_parameter )?
    			int alt177=2;
    			try { DebugEnterSubRule(177);
    			try { DebugEnterDecision(177, decisionCanBacktrack[177]);
    			int LA177_0 = input.LA(1);

    			if ((LA177_0==98))
    			{
    				alt177=1;
    			}
    			} finally { DebugExitDecision(177); }
    			switch (alt177)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:559:50: ',' implicit_anonymous_function_parameter
    				{
    				DebugLocation(559, 50);
    				char_literal525=(IToken)Match(input,98,Follow._98_in_implicit_anonymous_function_signature3898); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal525_tree = (object)adaptor.Create(char_literal525, retval);
    				adaptor.AddChild(root_0, char_literal525_tree);
    				}
    				DebugLocation(559, 56);
    				PushFollow(Follow._implicit_anonymous_function_parameter_in_implicit_anonymous_function_signature3902);
    				implicit_anonymous_function_parameter526=implicit_anonymous_function_parameter();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, implicit_anonymous_function_parameter526.Tree, implicit_anonymous_function_parameter526, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(177); }


    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 151, implicit_anonymous_function_signature_StartIndex); }
        }
     	DebugLocation(559, 94);
    	} finally { DebugExitRule(GrammarFileName, "implicit_anonymous_function_signature"); }
    	return retval;

    }
    // $ANTLR end "implicit_anonymous_function_signature"

    public class implicit_anonymous_function_parameter_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_implicit_anonymous_function_parameter_list() {}
    protected virtual void Leave_implicit_anonymous_function_parameter_list() {}

    // $ANTLR start "implicit_anonymous_function_parameter_list"
    // cs.g:560:1: implicit_anonymous_function_parameter_list : ( implicit_anonymous_function_parameter )+ ;
    [GrammarRule("implicit_anonymous_function_parameter_list")]
    public csParser.implicit_anonymous_function_parameter_list_return implicit_anonymous_function_parameter_list()
    {

        csParser.implicit_anonymous_function_parameter_list_return retval = new csParser.implicit_anonymous_function_parameter_list_return();
        retval.Start = (IToken)input.LT(1);
        int implicit_anonymous_function_parameter_list_StartIndex = input.Index;
        object root_0 = null;

        csParser.implicit_anonymous_function_parameter_return implicit_anonymous_function_parameter527 = default(csParser.implicit_anonymous_function_parameter_return);


    	try { DebugEnterRule(GrammarFileName, "implicit_anonymous_function_parameter_list");
    	DebugLocation(560, 40);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 152)) { return retval; }
    		// cs.g:560:43: ( ( implicit_anonymous_function_parameter )+ )
    		DebugEnterAlt(1);
    		// cs.g:561:2: ( implicit_anonymous_function_parameter )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(561, 2);
    		// cs.g:561:2: ( implicit_anonymous_function_parameter )+
    		int cnt179=0;
    		try { DebugEnterSubRule(179);
    		while (true)
    		{
    			int alt179=2;
    			try { DebugEnterDecision(179, decisionCanBacktrack[179]);
    			int LA179_0 = input.LA(1);

    			if ((LA179_0==IDENTIFIER||LA179_0==SET||LA179_0==95||(LA179_0>=101 && LA179_0<=107)||LA179_0==109||(LA179_0>=175 && LA179_0<=187)||LA179_0==199||(LA179_0>=201 && LA179_0<=202)||LA179_0==208||(LA179_0>=225 && LA179_0<=226)))
    			{
    				alt179=1;
    			}


    			} finally { DebugExitDecision(179); }
    			switch (alt179)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: implicit_anonymous_function_parameter
    				{
    				DebugLocation(561, 2);
    				PushFollow(Follow._implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3911);
    				implicit_anonymous_function_parameter527=implicit_anonymous_function_parameter();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, implicit_anonymous_function_parameter527.Tree, implicit_anonymous_function_parameter527, retval);

    				}
    				break;

    			default:
    				if (cnt179 >= 1)
    					goto loop179;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee179 = new EarlyExitException( 179, input );
    				DebugRecognitionException(eee179);
    				throw eee179;
    			}
    			cnt179++;
    		}
    		loop179:
    			;

    		} finally { DebugExitSubRule(179); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 152, implicit_anonymous_function_parameter_list_StartIndex); }
        }
     	DebugLocation(561, 40);
    	} finally { DebugExitRule(GrammarFileName, "implicit_anonymous_function_parameter_list"); }
    	return retval;

    }
    // $ANTLR end "implicit_anonymous_function_parameter_list"

    public class implicit_anonymous_function_parameter_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_implicit_anonymous_function_parameter() {}
    protected virtual void Leave_implicit_anonymous_function_parameter() {}

    // $ANTLR start "implicit_anonymous_function_parameter"
    // cs.g:562:1: implicit_anonymous_function_parameter : identifier ;
    [GrammarRule("implicit_anonymous_function_parameter")]
    public csParser.implicit_anonymous_function_parameter_return implicit_anonymous_function_parameter()
    {

        csParser.implicit_anonymous_function_parameter_return retval = new csParser.implicit_anonymous_function_parameter_return();
        retval.Start = (IToken)input.LT(1);
        int implicit_anonymous_function_parameter_StartIndex = input.Index;
        object root_0 = null;

        csParser.identifier_return identifier528 = default(csParser.identifier_return);


    	try { DebugEnterRule(GrammarFileName, "implicit_anonymous_function_parameter");
    	DebugLocation(562, 11);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 153)) { return retval; }
    		// cs.g:562:38: ( identifier )
    		DebugEnterAlt(1);
    		// cs.g:563:2: identifier
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(563, 2);
    		PushFollow(Follow._identifier_in_implicit_anonymous_function_parameter3920);
    		identifier528=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier528.Tree, identifier528, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 153, implicit_anonymous_function_parameter_StartIndex); }
        }
     	DebugLocation(563, 11);
    	} finally { DebugExitRule(GrammarFileName, "implicit_anonymous_function_parameter"); }
    	return retval;

    }
    // $ANTLR end "implicit_anonymous_function_parameter"

    public class anonymous_function_body_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_anonymous_function_body() {}
    protected virtual void Leave_anonymous_function_body() {}

    // $ANTLR start "anonymous_function_body"
    // cs.g:564:1: anonymous_function_body : ( expression | block );
    [GrammarRule("anonymous_function_body")]
    public csParser.anonymous_function_body_return anonymous_function_body()
    {

        csParser.anonymous_function_body_return retval = new csParser.anonymous_function_body_return();
        retval.Start = (IToken)input.LT(1);
        int anonymous_function_body_StartIndex = input.Index;
        object root_0 = null;

        csParser.expression_return expression529 = default(csParser.expression_return);
        csParser.block_return block530 = default(csParser.block_return);


    	try { DebugEnterRule(GrammarFileName, "anonymous_function_body");
    	DebugLocation(564, 9);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 154)) { return retval; }
    		// cs.g:564:24: ( expression | block )
    		int alt180=2;
    		try { DebugEnterDecision(180, decisionCanBacktrack[180]);
    		int LA180_0 = input.LA(1);

    		if (((LA180_0>=IDENTIFIER && LA180_0<=NULL)||LA180_0==MINUS||LA180_0==SET||(LA180_0>=90 && LA180_0<=91)||LA180_0==95||(LA180_0>=101 && LA180_0<=107)||(LA180_0>=109 && LA180_0<=111)||(LA180_0>=114 && LA180_0<=122)||(LA180_0>=124 && LA180_0<=129)||(LA180_0>=132 && LA180_0<=144)||(LA180_0>=175 && LA180_0<=187)||LA180_0==199||(LA180_0>=201 && LA180_0<=202)||LA180_0==208||(LA180_0>=225 && LA180_0<=226)))
    		{
    			alt180=1;
    		}
    		else if ((LA180_0==SEMI||LA180_0==92))
    		{
    			alt180=2;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 180, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(180); }
    		switch (alt180)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:565:2: expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(565, 2);
    			PushFollow(Follow._expression_in_anonymous_function_body3927);
    			expression529=expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression529.Tree, expression529, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:566:4: block
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(566, 4);
    			PushFollow(Follow._block_in_anonymous_function_body3932);
    			block530=block();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, block530.Tree, block530, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 154, anonymous_function_body_StartIndex); }
        }
     	DebugLocation(566, 9);
    	} finally { DebugExitRule(GrammarFileName, "anonymous_function_body"); }
    	return retval;

    }
    // $ANTLR end "anonymous_function_body"

    public class delegate_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_delegate_declaration() {}
    protected virtual void Leave_delegate_declaration() {}

    // $ANTLR start "delegate_declaration"
    // cs.g:569:1: delegate_declaration : ( attributes )? ( delegate_modifiers )? 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' ;
    [GrammarRule("delegate_declaration")]
    public csParser.delegate_declaration_return delegate_declaration()
    {

        csParser.delegate_declaration_return retval = new csParser.delegate_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int delegate_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal533=null;
        IToken char_literal537=null;
        IToken char_literal539=null;
        IToken char_literal541=null;
        csParser.attributes_return attributes531 = default(csParser.attributes_return);
        csParser.delegate_modifiers_return delegate_modifiers532 = default(csParser.delegate_modifiers_return);
        csParser.return_type_return return_type534 = default(csParser.return_type_return);
        csParser.identifier_return identifier535 = default(csParser.identifier_return);
        csParser.variant_generic_parameter_list_return variant_generic_parameter_list536 = default(csParser.variant_generic_parameter_list_return);
        csParser.formal_parameter_list_return formal_parameter_list538 = default(csParser.formal_parameter_list_return);
        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses540 = default(csParser.type_parameter_constraints_clauses_return);

        object string_literal533_tree=null;
        object char_literal537_tree=null;
        object char_literal539_tree=null;
        object char_literal541_tree=null;

    	try { DebugEnterRule(GrammarFileName, "delegate_declaration");
    	DebugLocation(569, 0);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 155)) { return retval; }
    		// cs.g:569:21: ( ( attributes )? ( delegate_modifiers )? 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' )
    		DebugEnterAlt(1);
    		// cs.g:570:2: ( attributes )? ( delegate_modifiers )? 'delegate' return_type identifier ( variant_generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(570, 2);
    		// cs.g:570:2: ( attributes )?
    		int alt181=2;
    		try { DebugEnterSubRule(181);
    		try { DebugEnterDecision(181, decisionCanBacktrack[181]);
    		int LA181_0 = input.LA(1);

    		if ((LA181_0==97))
    		{
    			alt181=1;
    		}
    		} finally { DebugExitDecision(181); }
    		switch (alt181)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(570, 2);
    			PushFollow(Follow._attributes_in_delegate_declaration3942);
    			attributes531=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes531.Tree, attributes531, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(181); }

    		DebugLocation(570, 16);
    		// cs.g:570:16: ( delegate_modifiers )?
    		int alt182=2;
    		try { DebugEnterSubRule(182);
    		try { DebugEnterDecision(182, decisionCanBacktrack[182]);
    		int LA182_0 = input.LA(1);

    		if ((LA182_0==138||(LA182_0>=170 && LA182_0<=174)))
    		{
    			alt182=1;
    		}
    		} finally { DebugExitDecision(182); }
    		switch (alt182)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: delegate_modifiers
    			{
    			DebugLocation(570, 16);
    			PushFollow(Follow._delegate_modifiers_in_delegate_declaration3947);
    			delegate_modifiers532=delegate_modifiers();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, delegate_modifiers532.Tree, delegate_modifiers532, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(182); }

    		DebugLocation(570, 38);
    		string_literal533=(IToken)Match(input,144,Follow._144_in_delegate_declaration3952); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal533_tree = (object)adaptor.Create(string_literal533, retval);
    		adaptor.AddChild(root_0, string_literal533_tree);
    		}
    		DebugLocation(570, 51);
    		PushFollow(Follow._return_type_in_delegate_declaration3956);
    		return_type534=return_type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, return_type534.Tree, return_type534, retval);
    		DebugLocation(570, 65);
    		PushFollow(Follow._identifier_in_delegate_declaration3960);
    		identifier535=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier535.Tree, identifier535, retval);
    		DebugLocation(570, 77);
    		// cs.g:570:77: ( variant_generic_parameter_list )?
    		int alt183=2;
    		try { DebugEnterSubRule(183);
    		try { DebugEnterDecision(183, decisionCanBacktrack[183]);
    		int LA183_0 = input.LA(1);

    		if ((LA183_0==123))
    		{
    			alt183=1;
    		}
    		} finally { DebugExitDecision(183); }
    		switch (alt183)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: variant_generic_parameter_list
    			{
    			DebugLocation(570, 77);
    			PushFollow(Follow._variant_generic_parameter_list_in_delegate_declaration3963);
    			variant_generic_parameter_list536=variant_generic_parameter_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, variant_generic_parameter_list536.Tree, variant_generic_parameter_list536, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(183); }

    		DebugLocation(571, 3);
    		char_literal537=(IToken)Match(input,110,Follow._110_in_delegate_declaration3971); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal537_tree = (object)adaptor.Create(char_literal537, retval);
    		adaptor.AddChild(root_0, char_literal537_tree);
    		}
    		DebugLocation(571, 9);
    		// cs.g:571:9: ( formal_parameter_list )?
    		int alt184=2;
    		try { DebugEnterSubRule(184);
    		try { DebugEnterDecision(184, decisionCanBacktrack[184]);
    		int LA184_0 = input.LA(1);

    		if ((LA184_0==IDENTIFIER||LA184_0==SET||LA184_0==90||LA184_0==95||LA184_0==97||(LA184_0>=101 && LA184_0<=107)||LA184_0==109||(LA184_0>=113 && LA184_0<=122)||(LA184_0>=130 && LA184_0<=137)||(LA184_0>=175 && LA184_0<=187)||(LA184_0>=199 && LA184_0<=202)||LA184_0==208||(LA184_0>=225 && LA184_0<=226)))
    		{
    			alt184=1;
    		}
    		} finally { DebugExitDecision(184); }
    		switch (alt184)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: formal_parameter_list
    			{
    			DebugLocation(571, 9);
    			PushFollow(Follow._formal_parameter_list_in_delegate_declaration3975);
    			formal_parameter_list538=formal_parameter_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, formal_parameter_list538.Tree, formal_parameter_list538, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(184); }

    		DebugLocation(571, 34);
    		char_literal539=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_delegate_declaration3980), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal539_tree = (object)adaptor.Create(char_literal539, retval);
    		adaptor.AddChild(root_0, char_literal539_tree);
    		}
    		DebugLocation(571, 40);
    		// cs.g:571:40: ( type_parameter_constraints_clauses )?
    		int alt185=2;
    		try { DebugEnterSubRule(185);
    		try { DebugEnterDecision(185, decisionCanBacktrack[185]);
    		int LA185_0 = input.LA(1);

    		if ((LA185_0==187))
    		{
    			alt185=1;
    		}
    		} finally { DebugExitDecision(185); }
    		switch (alt185)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: type_parameter_constraints_clauses
    			{
    			DebugLocation(571, 40);
    			PushFollow(Follow._type_parameter_constraints_clauses_in_delegate_declaration3984);
    			type_parameter_constraints_clauses540=type_parameter_constraints_clauses();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_parameter_constraints_clauses540.Tree, type_parameter_constraints_clauses540, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(185); }

    		DebugLocation(571, 78);
    		char_literal541=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_delegate_declaration3989), "SEMI"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal541_tree = (object)adaptor.Create(char_literal541, retval);
    		adaptor.AddChild(root_0, char_literal541_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 155, delegate_declaration_StartIndex); }
        }
     	DebugLocation(572, 0);
    	} finally { DebugExitRule(GrammarFileName, "delegate_declaration"); }
    	return retval;

    }
    // $ANTLR end "delegate_declaration"

    public class delegate_modifiers_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_delegate_modifiers() {}
    protected virtual void Leave_delegate_modifiers() {}

    // $ANTLR start "delegate_modifiers"
    // cs.g:573:1: delegate_modifiers : delegate_modifier ( delegate_modifier )* ;
    [GrammarRule("delegate_modifiers")]
    public csParser.delegate_modifiers_return delegate_modifiers()
    {

        csParser.delegate_modifiers_return retval = new csParser.delegate_modifiers_return();
        retval.Start = (IToken)input.LT(1);
        int delegate_modifiers_StartIndex = input.Index;
        object root_0 = null;

        csParser.delegate_modifier_return delegate_modifier542 = default(csParser.delegate_modifier_return);
        csParser.delegate_modifier_return delegate_modifier543 = default(csParser.delegate_modifier_return);


    	try { DebugEnterRule(GrammarFileName, "delegate_modifiers");
    	DebugLocation(573, 40);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 156)) { return retval; }
    		// cs.g:573:19: ( delegate_modifier ( delegate_modifier )* )
    		DebugEnterAlt(1);
    		// cs.g:574:2: delegate_modifier ( delegate_modifier )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(574, 2);
    		PushFollow(Follow._delegate_modifier_in_delegate_modifiers3997);
    		delegate_modifier542=delegate_modifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, delegate_modifier542.Tree, delegate_modifier542, retval);
    		DebugLocation(574, 20);
    		// cs.g:574:20: ( delegate_modifier )*
    		try { DebugEnterSubRule(186);
    		while (true)
    		{
    			int alt186=2;
    			try { DebugEnterDecision(186, decisionCanBacktrack[186]);
    			int LA186_0 = input.LA(1);

    			if ((LA186_0==138||(LA186_0>=170 && LA186_0<=174)))
    			{
    				alt186=1;
    			}


    			} finally { DebugExitDecision(186); }
    			switch ( alt186 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:574:21: delegate_modifier
    				{
    				DebugLocation(574, 21);
    				PushFollow(Follow._delegate_modifier_in_delegate_modifiers4000);
    				delegate_modifier543=delegate_modifier();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, delegate_modifier543.Tree, delegate_modifier543, retval);

    				}
    				break;

    			default:
    				goto loop186;
    			}
    		}

    		loop186:
    			;

    		} finally { DebugExitSubRule(186); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 156, delegate_modifiers_StartIndex); }
        }
     	DebugLocation(574, 40);
    	} finally { DebugExitRule(GrammarFileName, "delegate_modifiers"); }
    	return retval;

    }
    // $ANTLR end "delegate_modifiers"

    public class delegate_modifier_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_delegate_modifier() {}
    protected virtual void Leave_delegate_modifier() {}

    // $ANTLR start "delegate_modifier"
    // cs.g:575:1: delegate_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' );
    [GrammarRule("delegate_modifier")]
    public csParser.delegate_modifier_return delegate_modifier()
    {

        csParser.delegate_modifier_return retval = new csParser.delegate_modifier_return();
        retval.Start = (IToken)input.LT(1);
        int delegate_modifier_StartIndex = input.Index;
        object root_0 = null;

        IToken set544=null;

        object set544_tree=null;

    	try { DebugEnterRule(GrammarFileName, "delegate_modifier");
    	DebugLocation(575, 68);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 157)) { return retval; }
    		// cs.g:575:18: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(575, 18);
    		set544=(IToken)input.LT(1);
    		if (input.LA(1)==138||(input.LA(1)>=170 && input.LA(1)<=174))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set544, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 157, delegate_modifier_StartIndex); }
        }
     	DebugLocation(576, 68);
    	} finally { DebugExitRule(GrammarFileName, "delegate_modifier"); }
    	return retval;

    }
    // $ANTLR end "delegate_modifier"

    public class query_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_query_expression() {}
    protected virtual void Leave_query_expression() {}

    // $ANTLR start "query_expression"
    // cs.g:577:1: query_expression : from_clause query_body ;
    [GrammarRule("query_expression")]
    public csParser.query_expression_return query_expression()
    {

        csParser.query_expression_return retval = new csParser.query_expression_return();
        retval.Start = (IToken)input.LT(1);
        int query_expression_StartIndex = input.Index;
        object root_0 = null;

        csParser.from_clause_return from_clause545 = default(csParser.from_clause_return);
        csParser.query_body_return query_body546 = default(csParser.query_body_return);


    	try { DebugEnterRule(GrammarFileName, "query_expression");
    	DebugLocation(577, 26);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 158)) { return retval; }
    		// cs.g:577:17: ( from_clause query_body )
    		DebugEnterAlt(1);
    		// cs.g:578:2: from_clause query_body
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(578, 2);
    		PushFollow(Follow._from_clause_in_query_expression4038);
    		from_clause545=from_clause();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, from_clause545.Tree, from_clause545, retval);
    		DebugLocation(578, 16);
    		PushFollow(Follow._query_body_in_query_expression4042);
    		query_body546=query_body();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, query_body546.Tree, query_body546, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 158, query_expression_StartIndex); }
        }
     	DebugLocation(578, 26);
    	} finally { DebugExitRule(GrammarFileName, "query_expression"); }
    	return retval;

    }
    // $ANTLR end "query_expression"

    public class from_clause_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_from_clause() {}
    protected virtual void Leave_from_clause() {}

    // $ANTLR start "from_clause"
    // cs.g:579:1: from_clause : 'from' ( type )? identifier 'in' expression ;
    [GrammarRule("from_clause")]
    public csParser.from_clause_return from_clause()
    {

        csParser.from_clause_return retval = new csParser.from_clause_return();
        retval.Start = (IToken)input.LT(1);
        int from_clause_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal547=null;
        IToken string_literal550=null;
        csParser.type_return type548 = default(csParser.type_return);
        csParser.identifier_return identifier549 = default(csParser.identifier_return);
        csParser.expression_return expression551 = default(csParser.expression_return);

        object string_literal547_tree=null;
        object string_literal550_tree=null;

    	try { DebugEnterRule(GrammarFileName, "from_clause");
    	DebugLocation(579, 49);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 159)) { return retval; }
    		// cs.g:579:12: ( 'from' ( type )? identifier 'in' expression )
    		DebugEnterAlt(1);
    		// cs.g:580:2: 'from' ( type )? identifier 'in' expression
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(580, 2);
    		string_literal547=(IToken)Match(input,175,Follow._175_in_from_clause4050); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal547_tree = (object)adaptor.Create(string_literal547, retval);
    		adaptor.AddChild(root_0, string_literal547_tree);
    		}
    		DebugLocation(580, 11);
    		// cs.g:580:11: ( type )?
    		int alt187=2;
    		try { DebugEnterSubRule(187);
    		try { DebugEnterDecision(187, decisionCanBacktrack[187]);
    		switch (input.LA(1))
    		{
    		case IDENTIFIER:
    			{
    			int LA187_1 = input.LA(2);

    			if ((LA187_1==IDENTIFIER||LA187_1==DOT||LA187_1==SET||LA187_1==89||LA187_1==95||LA187_1==97||(LA187_1>=101 && LA187_1<=107)||LA187_1==109||(LA187_1>=111 && LA187_1<=112)||LA187_1==123||(LA187_1>=175 && LA187_1<=187)||LA187_1==199||(LA187_1>=201 && LA187_1<=202)||LA187_1==208||(LA187_1>=225 && LA187_1<=226)))
    			{
    				alt187=1;
    			}
    			}
    			break;
    		case SET:
    		case 95:
    		case 101:
    		case 102:
    		case 103:
    		case 104:
    		case 105:
    		case 106:
    		case 107:
    		case 109:
    		case 175:
    		case 176:
    		case 177:
    		case 178:
    		case 179:
    		case 180:
    		case 181:
    		case 182:
    		case 183:
    		case 184:
    		case 185:
    		case 186:
    		case 187:
    		case 199:
    		case 201:
    		case 202:
    		case 208:
    		case 225:
    		case 226:
    			{
    			int LA187_2 = input.LA(2);

    			if ((LA187_2==IDENTIFIER||LA187_2==DOT||LA187_2==SET||LA187_2==89||LA187_2==95||LA187_2==97||(LA187_2>=101 && LA187_2<=107)||LA187_2==109||(LA187_2>=111 && LA187_2<=112)||LA187_2==123||(LA187_2>=175 && LA187_2<=187)||LA187_2==199||(LA187_2>=201 && LA187_2<=202)||LA187_2==208||(LA187_2>=225 && LA187_2<=226)))
    			{
    				alt187=1;
    			}
    			}
    			break;
    		case 113:
    		case 114:
    		case 115:
    		case 116:
    		case 117:
    		case 118:
    		case 119:
    		case 120:
    		case 121:
    		case 122:
    		case 132:
    		case 133:
    		case 134:
    		case 135:
    		case 136:
    		case 137:
    			{
    			alt187=1;
    			}
    			break;
    		}

    		} finally { DebugExitDecision(187); }
    		switch (alt187)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: type
    			{
    			DebugLocation(580, 11);
    			PushFollow(Follow._type_in_from_clause4054);
    			type548=type();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type548.Tree, type548, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(187); }

    		DebugLocation(580, 19);
    		PushFollow(Follow._identifier_in_from_clause4059);
    		identifier549=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier549.Tree, identifier549, retval);
    		DebugLocation(580, 32);
    		string_literal550=(IToken)Match(input,145,Follow._145_in_from_clause4063); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal550_tree = (object)adaptor.Create(string_literal550, retval);
    		adaptor.AddChild(root_0, string_literal550_tree);
    		}
    		DebugLocation(580, 39);
    		PushFollow(Follow._expression_in_from_clause4067);
    		expression551=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression551.Tree, expression551, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 159, from_clause_StartIndex); }
        }
     	DebugLocation(580, 49);
    	} finally { DebugExitRule(GrammarFileName, "from_clause"); }
    	return retval;

    }
    // $ANTLR end "from_clause"

    public class query_body_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_query_body() {}
    protected virtual void Leave_query_body() {}

    // $ANTLR start "query_body"
    // cs.g:581:1: query_body : ( query_body_clauses )? select_or_group_clause ( query_continuation )? ;
    [GrammarRule("query_body")]
    public csParser.query_body_return query_body()
    {

        csParser.query_body_return retval = new csParser.query_body_return();
        retval.Start = (IToken)input.LT(1);
        int query_body_StartIndex = input.Index;
        object root_0 = null;

        csParser.query_body_clauses_return query_body_clauses552 = default(csParser.query_body_clauses_return);
        csParser.select_or_group_clause_return select_or_group_clause553 = default(csParser.select_or_group_clause_return);
        csParser.query_continuation_return query_continuation554 = default(csParser.query_continuation_return);


    	try { DebugEnterRule(GrammarFileName, "query_body");
    	DebugLocation(581, 67);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 160)) { return retval; }
    		// cs.g:581:11: ( ( query_body_clauses )? select_or_group_clause ( query_continuation )? )
    		DebugEnterAlt(1);
    		// cs.g:582:2: ( query_body_clauses )? select_or_group_clause ( query_continuation )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(582, 2);
    		// cs.g:582:2: ( query_body_clauses )?
    		int alt188=2;
    		try { DebugEnterSubRule(188);
    		try { DebugEnterDecision(188, decisionCanBacktrack[188]);
    		int LA188_0 = input.LA(1);

    		if ((LA188_0==175||LA188_0==177||(LA188_0>=180 && LA188_0<=181)||LA188_0==187))
    		{
    			alt188=1;
    		}
    		} finally { DebugExitDecision(188); }
    		switch (alt188)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: query_body_clauses
    			{
    			DebugLocation(582, 2);
    			PushFollow(Follow._query_body_clauses_in_query_body4075);
    			query_body_clauses552=query_body_clauses();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, query_body_clauses552.Tree, query_body_clauses552, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(188); }

    		DebugLocation(582, 24);
    		PushFollow(Follow._select_or_group_clause_in_query_body4080);
    		select_or_group_clause553=select_or_group_clause();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, select_or_group_clause553.Tree, select_or_group_clause553, retval);
    		DebugLocation(582, 49);
    		// cs.g:582:49: ( query_continuation )?
    		int alt189=2;
    		try { DebugEnterSubRule(189);
    		try { DebugEnterDecision(189, decisionCanBacktrack[189]);
    		int LA189_0 = input.LA(1);

    		if ((LA189_0==176))
    		{
    			int LA189_1 = input.LA(2);

    			if ((EvaluatePredicate(synpred291_cs_fragment)))
    			{
    				alt189=1;
    			}
    		}
    		} finally { DebugExitDecision(189); }
    		switch (alt189)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: query_continuation
    			{
    			DebugLocation(582, 49);
    			PushFollow(Follow._query_continuation_in_query_body4084);
    			query_continuation554=query_continuation();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, query_continuation554.Tree, query_continuation554, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(189); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 160, query_body_StartIndex); }
        }
     	DebugLocation(582, 67);
    	} finally { DebugExitRule(GrammarFileName, "query_body"); }
    	return retval;

    }
    // $ANTLR end "query_body"

    public class query_continuation_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_query_continuation() {}
    protected virtual void Leave_query_continuation() {}

    // $ANTLR start "query_continuation"
    // cs.g:583:1: query_continuation : 'into' identifier query_body ;
    [GrammarRule("query_continuation")]
    public csParser.query_continuation_return query_continuation()
    {

        csParser.query_continuation_return retval = new csParser.query_continuation_return();
        retval.Start = (IToken)input.LT(1);
        int query_continuation_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal555=null;
        csParser.identifier_return identifier556 = default(csParser.identifier_return);
        csParser.query_body_return query_body557 = default(csParser.query_body_return);

        object string_literal555_tree=null;

    	try { DebugEnterRule(GrammarFileName, "query_continuation");
    	DebugLocation(583, 33);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 161)) { return retval; }
    		// cs.g:583:19: ( 'into' identifier query_body )
    		DebugEnterAlt(1);
    		// cs.g:584:2: 'into' identifier query_body
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(584, 2);
    		string_literal555=(IToken)Match(input,176,Follow._176_in_query_continuation4092); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal555_tree = (object)adaptor.Create(string_literal555, retval);
    		adaptor.AddChild(root_0, string_literal555_tree);
    		}
    		DebugLocation(584, 11);
    		PushFollow(Follow._identifier_in_query_continuation4096);
    		identifier556=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier556.Tree, identifier556, retval);
    		DebugLocation(584, 24);
    		PushFollow(Follow._query_body_in_query_continuation4100);
    		query_body557=query_body();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, query_body557.Tree, query_body557, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 161, query_continuation_StartIndex); }
        }
     	DebugLocation(584, 33);
    	} finally { DebugExitRule(GrammarFileName, "query_continuation"); }
    	return retval;

    }
    // $ANTLR end "query_continuation"

    public class query_body_clauses_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_query_body_clauses() {}
    protected virtual void Leave_query_body_clauses() {}

    // $ANTLR start "query_body_clauses"
    // cs.g:585:1: query_body_clauses : ( query_body_clause )+ ;
    [GrammarRule("query_body_clauses")]
    public csParser.query_body_clauses_return query_body_clauses()
    {

        csParser.query_body_clauses_return retval = new csParser.query_body_clauses_return();
        retval.Start = (IToken)input.LT(1);
        int query_body_clauses_StartIndex = input.Index;
        object root_0 = null;

        csParser.query_body_clause_return query_body_clause558 = default(csParser.query_body_clause_return);


    	try { DebugEnterRule(GrammarFileName, "query_body_clauses");
    	DebugLocation(585, 20);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 162)) { return retval; }
    		// cs.g:585:19: ( ( query_body_clause )+ )
    		DebugEnterAlt(1);
    		// cs.g:586:2: ( query_body_clause )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(586, 2);
    		// cs.g:586:2: ( query_body_clause )+
    		int cnt190=0;
    		try { DebugEnterSubRule(190);
    		while (true)
    		{
    			int alt190=2;
    			try { DebugEnterDecision(190, decisionCanBacktrack[190]);
    			int LA190_0 = input.LA(1);

    			if ((LA190_0==175||LA190_0==177||(LA190_0>=180 && LA190_0<=181)||LA190_0==187))
    			{
    				alt190=1;
    			}


    			} finally { DebugExitDecision(190); }
    			switch (alt190)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: query_body_clause
    				{
    				DebugLocation(586, 2);
    				PushFollow(Follow._query_body_clause_in_query_body_clauses4107);
    				query_body_clause558=query_body_clause();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, query_body_clause558.Tree, query_body_clause558, retval);

    				}
    				break;

    			default:
    				if (cnt190 >= 1)
    					goto loop190;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee190 = new EarlyExitException( 190, input );
    				DebugRecognitionException(eee190);
    				throw eee190;
    			}
    			cnt190++;
    		}
    		loop190:
    			;

    		} finally { DebugExitSubRule(190); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 162, query_body_clauses_StartIndex); }
        }
     	DebugLocation(586, 20);
    	} finally { DebugExitRule(GrammarFileName, "query_body_clauses"); }
    	return retval;

    }
    // $ANTLR end "query_body_clauses"

    public class query_body_clause_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_query_body_clause() {}
    protected virtual void Leave_query_body_clause() {}

    // $ANTLR start "query_body_clause"
    // cs.g:587:1: query_body_clause : ( from_clause | let_clause | where_clause | join_clause | orderby_clause );
    [GrammarRule("query_body_clause")]
    public csParser.query_body_clause_return query_body_clause()
    {

        csParser.query_body_clause_return retval = new csParser.query_body_clause_return();
        retval.Start = (IToken)input.LT(1);
        int query_body_clause_StartIndex = input.Index;
        object root_0 = null;

        csParser.from_clause_return from_clause559 = default(csParser.from_clause_return);
        csParser.let_clause_return let_clause560 = default(csParser.let_clause_return);
        csParser.where_clause_return where_clause561 = default(csParser.where_clause_return);
        csParser.join_clause_return join_clause562 = default(csParser.join_clause_return);
        csParser.orderby_clause_return orderby_clause563 = default(csParser.orderby_clause_return);


    	try { DebugEnterRule(GrammarFileName, "query_body_clause");
    	DebugLocation(587, 17);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 163)) { return retval; }
    		// cs.g:587:18: ( from_clause | let_clause | where_clause | join_clause | orderby_clause )
    		int alt191=5;
    		try { DebugEnterDecision(191, decisionCanBacktrack[191]);
    		switch (input.LA(1))
    		{
    		case 175:
    			{
    			alt191=1;
    			}
    			break;
    		case 180:
    			{
    			alt191=2;
    			}
    			break;
    		case 187:
    			{
    			alt191=3;
    			}
    			break;
    		case 177:
    			{
    			alt191=4;
    			}
    			break;
    		case 181:
    			{
    			alt191=5;
    			}
    			break;
    		default:
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 191, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(191); }
    		switch (alt191)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:588:2: from_clause
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(588, 2);
    			PushFollow(Follow._from_clause_in_query_body_clause4116);
    			from_clause559=from_clause();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, from_clause559.Tree, from_clause559, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:589:4: let_clause
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(589, 4);
    			PushFollow(Follow._let_clause_in_query_body_clause4121);
    			let_clause560=let_clause();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, let_clause560.Tree, let_clause560, retval);

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:590:4: where_clause
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(590, 4);
    			PushFollow(Follow._where_clause_in_query_body_clause4126);
    			where_clause561=where_clause();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, where_clause561.Tree, where_clause561, retval);

    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// cs.g:591:4: join_clause
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(591, 4);
    			PushFollow(Follow._join_clause_in_query_body_clause4131);
    			join_clause562=join_clause();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, join_clause562.Tree, join_clause562, retval);

    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// cs.g:592:4: orderby_clause
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(592, 4);
    			PushFollow(Follow._orderby_clause_in_query_body_clause4136);
    			orderby_clause563=orderby_clause();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, orderby_clause563.Tree, orderby_clause563, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 163, query_body_clause_StartIndex); }
        }
     	DebugLocation(592, 17);
    	} finally { DebugExitRule(GrammarFileName, "query_body_clause"); }
    	return retval;

    }
    // $ANTLR end "query_body_clause"

    public class join_clause_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_join_clause() {}
    protected virtual void Leave_join_clause() {}

    // $ANTLR start "join_clause"
    // cs.g:593:1: join_clause : 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )? ;
    [GrammarRule("join_clause")]
    public csParser.join_clause_return join_clause()
    {

        csParser.join_clause_return retval = new csParser.join_clause_return();
        retval.Start = (IToken)input.LT(1);
        int join_clause_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal564=null;
        IToken string_literal567=null;
        IToken string_literal569=null;
        IToken string_literal571=null;
        IToken string_literal573=null;
        csParser.type_return type565 = default(csParser.type_return);
        csParser.identifier_return identifier566 = default(csParser.identifier_return);
        csParser.expression_return expression568 = default(csParser.expression_return);
        csParser.expression_return expression570 = default(csParser.expression_return);
        csParser.expression_return expression572 = default(csParser.expression_return);
        csParser.identifier_return identifier574 = default(csParser.identifier_return);

        object string_literal564_tree=null;
        object string_literal567_tree=null;
        object string_literal569_tree=null;
        object string_literal571_tree=null;
        object string_literal573_tree=null;

    	try { DebugEnterRule(GrammarFileName, "join_clause");
    	DebugLocation(593, 114);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 164)) { return retval; }
    		// cs.g:593:12: ( 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )? )
    		DebugEnterAlt(1);
    		// cs.g:594:2: 'join' ( type )? identifier 'in' expression 'on' expression 'equals' expression ( 'into' identifier )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(594, 2);
    		string_literal564=(IToken)Match(input,177,Follow._177_in_join_clause4143); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal564_tree = (object)adaptor.Create(string_literal564, retval);
    		adaptor.AddChild(root_0, string_literal564_tree);
    		}
    		DebugLocation(594, 11);
    		// cs.g:594:11: ( type )?
    		int alt192=2;
    		try { DebugEnterSubRule(192);
    		try { DebugEnterDecision(192, decisionCanBacktrack[192]);
    		switch (input.LA(1))
    		{
    		case IDENTIFIER:
    			{
    			int LA192_1 = input.LA(2);

    			if ((LA192_1==IDENTIFIER||LA192_1==DOT||LA192_1==SET||LA192_1==89||LA192_1==95||LA192_1==97||(LA192_1>=101 && LA192_1<=107)||LA192_1==109||(LA192_1>=111 && LA192_1<=112)||LA192_1==123||(LA192_1>=175 && LA192_1<=187)||LA192_1==199||(LA192_1>=201 && LA192_1<=202)||LA192_1==208||(LA192_1>=225 && LA192_1<=226)))
    			{
    				alt192=1;
    			}
    			}
    			break;
    		case SET:
    		case 95:
    		case 101:
    		case 102:
    		case 103:
    		case 104:
    		case 105:
    		case 106:
    		case 107:
    		case 109:
    		case 175:
    		case 176:
    		case 177:
    		case 178:
    		case 179:
    		case 180:
    		case 181:
    		case 182:
    		case 183:
    		case 184:
    		case 185:
    		case 186:
    		case 187:
    		case 199:
    		case 201:
    		case 202:
    		case 208:
    		case 225:
    		case 226:
    			{
    			int LA192_2 = input.LA(2);

    			if ((LA192_2==IDENTIFIER||LA192_2==DOT||LA192_2==SET||LA192_2==89||LA192_2==95||LA192_2==97||(LA192_2>=101 && LA192_2<=107)||LA192_2==109||(LA192_2>=111 && LA192_2<=112)||LA192_2==123||(LA192_2>=175 && LA192_2<=187)||LA192_2==199||(LA192_2>=201 && LA192_2<=202)||LA192_2==208||(LA192_2>=225 && LA192_2<=226)))
    			{
    				alt192=1;
    			}
    			}
    			break;
    		case 113:
    		case 114:
    		case 115:
    		case 116:
    		case 117:
    		case 118:
    		case 119:
    		case 120:
    		case 121:
    		case 122:
    		case 132:
    		case 133:
    		case 134:
    		case 135:
    		case 136:
    		case 137:
    			{
    			alt192=1;
    			}
    			break;
    		}

    		} finally { DebugExitDecision(192); }
    		switch (alt192)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: type
    			{
    			DebugLocation(594, 11);
    			PushFollow(Follow._type_in_join_clause4147);
    			type565=type();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type565.Tree, type565, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(192); }

    		DebugLocation(594, 19);
    		PushFollow(Follow._identifier_in_join_clause4152);
    		identifier566=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier566.Tree, identifier566, retval);
    		DebugLocation(594, 32);
    		string_literal567=(IToken)Match(input,145,Follow._145_in_join_clause4156); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal567_tree = (object)adaptor.Create(string_literal567, retval);
    		adaptor.AddChild(root_0, string_literal567_tree);
    		}
    		DebugLocation(594, 39);
    		PushFollow(Follow._expression_in_join_clause4160);
    		expression568=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression568.Tree, expression568, retval);
    		DebugLocation(594, 52);
    		string_literal569=(IToken)Match(input,178,Follow._178_in_join_clause4164); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal569_tree = (object)adaptor.Create(string_literal569, retval);
    		adaptor.AddChild(root_0, string_literal569_tree);
    		}
    		DebugLocation(594, 59);
    		PushFollow(Follow._expression_in_join_clause4168);
    		expression570=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression570.Tree, expression570, retval);
    		DebugLocation(594, 72);
    		string_literal571=(IToken)Match(input,179,Follow._179_in_join_clause4172); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal571_tree = (object)adaptor.Create(string_literal571, retval);
    		adaptor.AddChild(root_0, string_literal571_tree);
    		}
    		DebugLocation(594, 83);
    		PushFollow(Follow._expression_in_join_clause4176);
    		expression572=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression572.Tree, expression572, retval);
    		DebugLocation(594, 94);
    		// cs.g:594:94: ( 'into' identifier )?
    		int alt193=2;
    		try { DebugEnterSubRule(193);
    		try { DebugEnterDecision(193, decisionCanBacktrack[193]);
    		int LA193_0 = input.LA(1);

    		if ((LA193_0==176))
    		{
    			alt193=1;
    		}
    		} finally { DebugExitDecision(193); }
    		switch (alt193)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:594:95: 'into' identifier
    			{
    			DebugLocation(594, 95);
    			string_literal573=(IToken)Match(input,176,Follow._176_in_join_clause4179); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal573_tree = (object)adaptor.Create(string_literal573, retval);
    			adaptor.AddChild(root_0, string_literal573_tree);
    			}
    			DebugLocation(594, 102);
    			PushFollow(Follow._identifier_in_join_clause4181);
    			identifier574=identifier();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier574.Tree, identifier574, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(193); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 164, join_clause_StartIndex); }
        }
     	DebugLocation(594, 114);
    	} finally { DebugExitRule(GrammarFileName, "join_clause"); }
    	return retval;

    }
    // $ANTLR end "join_clause"

    public class let_clause_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_let_clause() {}
    protected virtual void Leave_let_clause() {}

    // $ANTLR start "let_clause"
    // cs.g:595:1: let_clause : 'let' identifier '=' expression ;
    [GrammarRule("let_clause")]
    public csParser.let_clause_return let_clause()
    {

        csParser.let_clause_return retval = new csParser.let_clause_return();
        retval.Start = (IToken)input.LT(1);
        int let_clause_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal575=null;
        IToken char_literal577=null;
        csParser.identifier_return identifier576 = default(csParser.identifier_return);
        csParser.expression_return expression578 = default(csParser.expression_return);

        object string_literal575_tree=null;
        object char_literal577_tree=null;

    	try { DebugEnterRule(GrammarFileName, "let_clause");
    	DebugLocation(595, 38);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 165)) { return retval; }
    		// cs.g:595:11: ( 'let' identifier '=' expression )
    		DebugEnterAlt(1);
    		// cs.g:596:2: 'let' identifier '=' expression
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(596, 2);
    		string_literal575=(IToken)Match(input,180,Follow._180_in_let_clause4191); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal575_tree = (object)adaptor.Create(string_literal575, retval);
    		adaptor.AddChild(root_0, string_literal575_tree);
    		}
    		DebugLocation(596, 10);
    		PushFollow(Follow._identifier_in_let_clause4195);
    		identifier576=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier576.Tree, identifier576, retval);
    		DebugLocation(596, 23);
    		char_literal577=(IToken)Match(input,96,Follow._96_in_let_clause4199); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal577_tree = (object)adaptor.Create(char_literal577, retval);
    		adaptor.AddChild(root_0, char_literal577_tree);
    		}
    		DebugLocation(596, 29);
    		PushFollow(Follow._expression_in_let_clause4203);
    		expression578=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression578.Tree, expression578, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 165, let_clause_StartIndex); }
        }
     	DebugLocation(596, 38);
    	} finally { DebugExitRule(GrammarFileName, "let_clause"); }
    	return retval;

    }
    // $ANTLR end "let_clause"

    public class orderby_clause_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_orderby_clause() {}
    protected virtual void Leave_orderby_clause() {}

    // $ANTLR start "orderby_clause"
    // cs.g:597:1: orderby_clause : 'orderby' ordering_list ;
    [GrammarRule("orderby_clause")]
    public csParser.orderby_clause_return orderby_clause()
    {

        csParser.orderby_clause_return retval = new csParser.orderby_clause_return();
        retval.Start = (IToken)input.LT(1);
        int orderby_clause_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal579=null;
        csParser.ordering_list_return ordering_list580 = default(csParser.ordering_list_return);

        object string_literal579_tree=null;

    	try { DebugEnterRule(GrammarFileName, "orderby_clause");
    	DebugLocation(597, 27);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 166)) { return retval; }
    		// cs.g:597:15: ( 'orderby' ordering_list )
    		DebugEnterAlt(1);
    		// cs.g:598:2: 'orderby' ordering_list
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(598, 2);
    		string_literal579=(IToken)Match(input,181,Follow._181_in_orderby_clause4210); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal579_tree = (object)adaptor.Create(string_literal579, retval);
    		adaptor.AddChild(root_0, string_literal579_tree);
    		}
    		DebugLocation(598, 14);
    		PushFollow(Follow._ordering_list_in_orderby_clause4214);
    		ordering_list580=ordering_list();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, ordering_list580.Tree, ordering_list580, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 166, orderby_clause_StartIndex); }
        }
     	DebugLocation(598, 27);
    	} finally { DebugExitRule(GrammarFileName, "orderby_clause"); }
    	return retval;

    }
    // $ANTLR end "orderby_clause"

    public class ordering_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_ordering_list() {}
    protected virtual void Leave_ordering_list() {}

    // $ANTLR start "ordering_list"
    // cs.g:599:1: ordering_list : ( ordering )+ ;
    [GrammarRule("ordering_list")]
    public csParser.ordering_list_return ordering_list()
    {

        csParser.ordering_list_return retval = new csParser.ordering_list_return();
        retval.Start = (IToken)input.LT(1);
        int ordering_list_StartIndex = input.Index;
        object root_0 = null;

        csParser.ordering_return ordering581 = default(csParser.ordering_return);


    	try { DebugEnterRule(GrammarFileName, "ordering_list");
    	DebugLocation(599, 11);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 167)) { return retval; }
    		// cs.g:599:14: ( ( ordering )+ )
    		DebugEnterAlt(1);
    		// cs.g:600:2: ( ordering )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(600, 2);
    		// cs.g:600:2: ( ordering )+
    		int cnt194=0;
    		try { DebugEnterSubRule(194);
    		while (true)
    		{
    			int alt194=2;
    			try { DebugEnterDecision(194, decisionCanBacktrack[194]);
    			try
    			{
    				alt194 = dfa194.Predict(input);
    			}
    			catch (NoViableAltException nvae)
    			{
    				DebugRecognitionException(nvae);
    				throw;
    			}
    			} finally { DebugExitDecision(194); }
    			switch (alt194)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: ordering
    				{
    				DebugLocation(600, 2);
    				PushFollow(Follow._ordering_in_ordering_list4222);
    				ordering581=ordering();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, ordering581.Tree, ordering581, retval);

    				}
    				break;

    			default:
    				if (cnt194 >= 1)
    					goto loop194;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee194 = new EarlyExitException( 194, input );
    				DebugRecognitionException(eee194);
    				throw eee194;
    			}
    			cnt194++;
    		}
    		loop194:
    			;

    		} finally { DebugExitSubRule(194); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 167, ordering_list_StartIndex); }
        }
     	DebugLocation(600, 11);
    	} finally { DebugExitRule(GrammarFileName, "ordering_list"); }
    	return retval;

    }
    // $ANTLR end "ordering_list"

    public class ordering_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_ordering() {}
    protected virtual void Leave_ordering() {}

    // $ANTLR start "ordering"
    // cs.g:601:1: ordering : expression ( ordering_direction )? ;
    [GrammarRule("ordering")]
    public csParser.ordering_return ordering()
    {

        csParser.ordering_return retval = new csParser.ordering_return();
        retval.Start = (IToken)input.LT(1);
        int ordering_StartIndex = input.Index;
        object root_0 = null;

        csParser.expression_return expression582 = default(csParser.expression_return);
        csParser.ordering_direction_return ordering_direction583 = default(csParser.ordering_direction_return);


    	try { DebugEnterRule(GrammarFileName, "ordering");
    	DebugLocation(601, 35);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 168)) { return retval; }
    		// cs.g:601:9: ( expression ( ordering_direction )? )
    		DebugEnterAlt(1);
    		// cs.g:602:2: expression ( ordering_direction )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(602, 2);
    		PushFollow(Follow._expression_in_ordering4231);
    		expression582=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression582.Tree, expression582, retval);
    		DebugLocation(602, 16);
    		// cs.g:602:16: ( ordering_direction )?
    		int alt195=2;
    		try { DebugEnterSubRule(195);
    		try { DebugEnterDecision(195, decisionCanBacktrack[195]);
    		int LA195_0 = input.LA(1);

    		if (((LA195_0>=182 && LA195_0<=183)))
    		{
    			int LA195_1 = input.LA(2);

    			if ((EvaluatePredicate(synpred300_cs_fragment)))
    			{
    				alt195=1;
    			}
    		}
    		} finally { DebugExitDecision(195); }
    		switch (alt195)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: ordering_direction
    			{
    			DebugLocation(602, 16);
    			PushFollow(Follow._ordering_direction_in_ordering4236);
    			ordering_direction583=ordering_direction();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, ordering_direction583.Tree, ordering_direction583, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(195); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 168, ordering_StartIndex); }
        }
     	DebugLocation(602, 35);
    	} finally { DebugExitRule(GrammarFileName, "ordering"); }
    	return retval;

    }
    // $ANTLR end "ordering"

    public class ordering_direction_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_ordering_direction() {}
    protected virtual void Leave_ordering_direction() {}

    // $ANTLR start "ordering_direction"
    // cs.g:603:1: ordering_direction : ( 'ascending' | 'descending' );
    [GrammarRule("ordering_direction")]
    public csParser.ordering_direction_return ordering_direction()
    {

        csParser.ordering_direction_return retval = new csParser.ordering_direction_return();
        retval.Start = (IToken)input.LT(1);
        int ordering_direction_StartIndex = input.Index;
        object root_0 = null;

        IToken set584=null;

        object set584_tree=null;

    	try { DebugEnterRule(GrammarFileName, "ordering_direction");
    	DebugLocation(603, 16);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 169)) { return retval; }
    		// cs.g:603:19: ( 'ascending' | 'descending' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(603, 19);
    		set584=(IToken)input.LT(1);
    		if ((input.LA(1)>=182 && input.LA(1)<=183))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set584, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 169, ordering_direction_StartIndex); }
        }
     	DebugLocation(605, 16);
    	} finally { DebugExitRule(GrammarFileName, "ordering_direction"); }
    	return retval;

    }
    // $ANTLR end "ordering_direction"

    public class select_or_group_clause_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_select_or_group_clause() {}
    protected virtual void Leave_select_or_group_clause() {}

    // $ANTLR start "select_or_group_clause"
    // cs.g:606:1: select_or_group_clause : ( select_clause | group_clause );
    [GrammarRule("select_or_group_clause")]
    public csParser.select_or_group_clause_return select_or_group_clause()
    {

        csParser.select_or_group_clause_return retval = new csParser.select_or_group_clause_return();
        retval.Start = (IToken)input.LT(1);
        int select_or_group_clause_StartIndex = input.Index;
        object root_0 = null;

        csParser.select_clause_return select_clause585 = default(csParser.select_clause_return);
        csParser.group_clause_return group_clause586 = default(csParser.group_clause_return);


    	try { DebugEnterRule(GrammarFileName, "select_or_group_clause");
    	DebugLocation(606, 16);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 170)) { return retval; }
    		// cs.g:606:23: ( select_clause | group_clause )
    		int alt196=2;
    		try { DebugEnterDecision(196, decisionCanBacktrack[196]);
    		int LA196_0 = input.LA(1);

    		if ((LA196_0==184))
    		{
    			alt196=1;
    		}
    		else if ((LA196_0==185))
    		{
    			alt196=2;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 196, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(196); }
    		switch (alt196)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:607:2: select_clause
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(607, 2);
    			PushFollow(Follow._select_clause_in_select_or_group_clause4258);
    			select_clause585=select_clause();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, select_clause585.Tree, select_clause585, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:608:4: group_clause
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(608, 4);
    			PushFollow(Follow._group_clause_in_select_or_group_clause4263);
    			group_clause586=group_clause();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, group_clause586.Tree, group_clause586, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 170, select_or_group_clause_StartIndex); }
        }
     	DebugLocation(608, 16);
    	} finally { DebugExitRule(GrammarFileName, "select_or_group_clause"); }
    	return retval;

    }
    // $ANTLR end "select_or_group_clause"

    public class select_clause_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_select_clause() {}
    protected virtual void Leave_select_clause() {}

    // $ANTLR start "select_clause"
    // cs.g:609:1: select_clause : 'select' expression ;
    [GrammarRule("select_clause")]
    public csParser.select_clause_return select_clause()
    {

        csParser.select_clause_return retval = new csParser.select_clause_return();
        retval.Start = (IToken)input.LT(1);
        int select_clause_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal587=null;
        csParser.expression_return expression588 = default(csParser.expression_return);

        object string_literal587_tree=null;

    	try { DebugEnterRule(GrammarFileName, "select_clause");
    	DebugLocation(609, 23);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 171)) { return retval; }
    		// cs.g:609:14: ( 'select' expression )
    		DebugEnterAlt(1);
    		// cs.g:610:2: 'select' expression
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(610, 2);
    		string_literal587=(IToken)Match(input,184,Follow._184_in_select_clause4271); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal587_tree = (object)adaptor.Create(string_literal587, retval);
    		adaptor.AddChild(root_0, string_literal587_tree);
    		}
    		DebugLocation(610, 13);
    		PushFollow(Follow._expression_in_select_clause4275);
    		expression588=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression588.Tree, expression588, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 171, select_clause_StartIndex); }
        }
     	DebugLocation(610, 23);
    	} finally { DebugExitRule(GrammarFileName, "select_clause"); }
    	return retval;

    }
    // $ANTLR end "select_clause"

    public class group_clause_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_group_clause() {}
    protected virtual void Leave_group_clause() {}

    // $ANTLR start "group_clause"
    // cs.g:611:1: group_clause : 'group' expression 'by' expression ;
    [GrammarRule("group_clause")]
    public csParser.group_clause_return group_clause()
    {

        csParser.group_clause_return retval = new csParser.group_clause_return();
        retval.Start = (IToken)input.LT(1);
        int group_clause_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal589=null;
        IToken string_literal591=null;
        csParser.expression_return expression590 = default(csParser.expression_return);
        csParser.expression_return expression592 = default(csParser.expression_return);

        object string_literal589_tree=null;
        object string_literal591_tree=null;

    	try { DebugEnterRule(GrammarFileName, "group_clause");
    	DebugLocation(611, 42);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 172)) { return retval; }
    		// cs.g:611:13: ( 'group' expression 'by' expression )
    		DebugEnterAlt(1);
    		// cs.g:612:2: 'group' expression 'by' expression
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(612, 2);
    		string_literal589=(IToken)Match(input,185,Follow._185_in_group_clause4283); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal589_tree = (object)adaptor.Create(string_literal589, retval);
    		adaptor.AddChild(root_0, string_literal589_tree);
    		}
    		DebugLocation(612, 12);
    		PushFollow(Follow._expression_in_group_clause4287);
    		expression590=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression590.Tree, expression590, retval);
    		DebugLocation(612, 25);
    		string_literal591=(IToken)Match(input,186,Follow._186_in_group_clause4291); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal591_tree = (object)adaptor.Create(string_literal591, retval);
    		adaptor.AddChild(root_0, string_literal591_tree);
    		}
    		DebugLocation(612, 32);
    		PushFollow(Follow._expression_in_group_clause4295);
    		expression592=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression592.Tree, expression592, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 172, group_clause_StartIndex); }
        }
     	DebugLocation(612, 42);
    	} finally { DebugExitRule(GrammarFileName, "group_clause"); }
    	return retval;

    }
    // $ANTLR end "group_clause"

    public class where_clause_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_where_clause() {}
    protected virtual void Leave_where_clause() {}

    // $ANTLR start "where_clause"
    // cs.g:613:1: where_clause : 'where' boolean_expression ;
    [GrammarRule("where_clause")]
    public csParser.where_clause_return where_clause()
    {

        csParser.where_clause_return retval = new csParser.where_clause_return();
        retval.Start = (IToken)input.LT(1);
        int where_clause_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal593=null;
        csParser.boolean_expression_return boolean_expression594 = default(csParser.boolean_expression_return);

        object string_literal593_tree=null;

    	try { DebugEnterRule(GrammarFileName, "where_clause");
    	DebugLocation(613, 30);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 173)) { return retval; }
    		// cs.g:613:13: ( 'where' boolean_expression )
    		DebugEnterAlt(1);
    		// cs.g:614:2: 'where' boolean_expression
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(614, 2);
    		string_literal593=(IToken)Match(input,187,Follow._187_in_where_clause4303); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal593_tree = (object)adaptor.Create(string_literal593, retval);
    		adaptor.AddChild(root_0, string_literal593_tree);
    		}
    		DebugLocation(614, 12);
    		PushFollow(Follow._boolean_expression_in_where_clause4307);
    		boolean_expression594=boolean_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, boolean_expression594.Tree, boolean_expression594, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 173, where_clause_StartIndex); }
        }
     	DebugLocation(614, 30);
    	} finally { DebugExitRule(GrammarFileName, "where_clause"); }
    	return retval;

    }
    // $ANTLR end "where_clause"

    public class class_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_class_declaration() {}
    protected virtual void Leave_class_declaration() {}

    // $ANTLR start "class_declaration"
    // cs.g:618:1: class_declaration : ( attributes )? ( class_modifiers )? ( 'partial' )? 'class' identifier ( generic_parameter_list )? ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? ;
    [GrammarRule("class_declaration")]
    public csParser.class_declaration_return class_declaration()
    {

        csParser.class_declaration_return retval = new csParser.class_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int class_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal597=null;
        IToken string_literal598=null;
        IToken char_literal604=null;
        csParser.attributes_return attributes595 = default(csParser.attributes_return);
        csParser.class_modifiers_return class_modifiers596 = default(csParser.class_modifiers_return);
        csParser.identifier_return identifier599 = default(csParser.identifier_return);
        csParser.generic_parameter_list_return generic_parameter_list600 = default(csParser.generic_parameter_list_return);
        csParser.class_base_return class_base601 = default(csParser.class_base_return);
        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses602 = default(csParser.type_parameter_constraints_clauses_return);
        csParser.class_body_return class_body603 = default(csParser.class_body_return);

        object string_literal597_tree=null;
        object string_literal598_tree=null;
        object char_literal604_tree=null;

    	try { DebugEnterRule(GrammarFileName, "class_declaration");
    	DebugLocation(618, 71);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 174)) { return retval; }
    		// cs.g:619:1: ( ( attributes )? ( class_modifiers )? ( 'partial' )? 'class' identifier ( generic_parameter_list )? ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )? )
    		DebugEnterAlt(1);
    		// cs.g:620:2: ( attributes )? ( class_modifiers )? ( 'partial' )? 'class' identifier ( generic_parameter_list )? ( class_base )? ( type_parameter_constraints_clauses )? class_body ( ';' )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(620, 2);
    		// cs.g:620:2: ( attributes )?
    		int alt197=2;
    		try { DebugEnterSubRule(197);
    		try { DebugEnterDecision(197, decisionCanBacktrack[197]);
    		int LA197_0 = input.LA(1);

    		if ((LA197_0==97))
    		{
    			alt197=1;
    		}
    		} finally { DebugExitDecision(197); }
    		switch (alt197)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(620, 2);
    			PushFollow(Follow._attributes_in_class_declaration4319);
    			attributes595=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes595.Tree, attributes595, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(197); }

    		DebugLocation(620, 14);
    		// cs.g:620:14: ( class_modifiers )?
    		int alt198=2;
    		try { DebugEnterSubRule(198);
    		try { DebugEnterDecision(198, decisionCanBacktrack[198]);
    		int LA198_0 = input.LA(1);

    		if ((LA198_0==138||(LA198_0>=170 && LA198_0<=174)||(LA198_0>=190 && LA198_0<=192)))
    		{
    			alt198=1;
    		}
    		} finally { DebugExitDecision(198); }
    		switch (alt198)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: class_modifiers
    			{
    			DebugLocation(620, 14);
    			PushFollow(Follow._class_modifiers_in_class_declaration4322);
    			class_modifiers596=class_modifiers();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, class_modifiers596.Tree, class_modifiers596, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(198); }

    		DebugLocation(620, 33);
    		// cs.g:620:33: ( 'partial' )?
    		int alt199=2;
    		try { DebugEnterSubRule(199);
    		try { DebugEnterDecision(199, decisionCanBacktrack[199]);
    		int LA199_0 = input.LA(1);

    		if ((LA199_0==188))
    		{
    			alt199=1;
    		}
    		} finally { DebugExitDecision(199); }
    		switch (alt199)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: 'partial'
    			{
    			DebugLocation(620, 33);
    			string_literal597=(IToken)Match(input,188,Follow._188_in_class_declaration4327); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal597_tree = (object)adaptor.Create(string_literal597, retval);
    			adaptor.AddChild(root_0, string_literal597_tree);
    			}

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(199); }

    		DebugLocation(620, 45);
    		string_literal598=(IToken)Match(input,189,Follow._189_in_class_declaration4331); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal598_tree = (object)adaptor.Create(string_literal598, retval);
    		adaptor.AddChild(root_0, string_literal598_tree);
    		}
    		DebugLocation(620, 54);
    		PushFollow(Follow._identifier_in_class_declaration4334);
    		identifier599=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier599.Tree, identifier599, retval);
    		DebugLocation(620, 66);
    		// cs.g:620:66: ( generic_parameter_list )?
    		int alt200=2;
    		try { DebugEnterSubRule(200);
    		try { DebugEnterDecision(200, decisionCanBacktrack[200]);
    		int LA200_0 = input.LA(1);

    		if ((LA200_0==123))
    		{
    			alt200=1;
    		}
    		} finally { DebugExitDecision(200); }
    		switch (alt200)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: generic_parameter_list
    			{
    			DebugLocation(620, 66);
    			PushFollow(Follow._generic_parameter_list_in_class_declaration4337);
    			generic_parameter_list600=generic_parameter_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, generic_parameter_list600.Tree, generic_parameter_list600, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(200); }

    		DebugLocation(621, 3);
    		// cs.g:621:3: ( class_base )?
    		int alt201=2;
    		try { DebugEnterSubRule(201);
    		try { DebugEnterDecision(201, decisionCanBacktrack[201]);
    		int LA201_0 = input.LA(1);

    		if ((LA201_0==100))
    		{
    			alt201=1;
    		}
    		} finally { DebugExitDecision(201); }
    		switch (alt201)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: class_base
    			{
    			DebugLocation(621, 3);
    			PushFollow(Follow._class_base_in_class_declaration4342);
    			class_base601=class_base();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, class_base601.Tree, class_base601, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(201); }

    		DebugLocation(621, 17);
    		// cs.g:621:17: ( type_parameter_constraints_clauses )?
    		int alt202=2;
    		try { DebugEnterSubRule(202);
    		try { DebugEnterDecision(202, decisionCanBacktrack[202]);
    		int LA202_0 = input.LA(1);

    		if ((LA202_0==187))
    		{
    			alt202=1;
    		}
    		} finally { DebugExitDecision(202); }
    		switch (alt202)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: type_parameter_constraints_clauses
    			{
    			DebugLocation(621, 17);
    			PushFollow(Follow._type_parameter_constraints_clauses_in_class_declaration4347);
    			type_parameter_constraints_clauses602=type_parameter_constraints_clauses();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_parameter_constraints_clauses602.Tree, type_parameter_constraints_clauses602, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(202); }

    		DebugLocation(621, 55);
    		PushFollow(Follow._class_body_in_class_declaration4352);
    		class_body603=class_body();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, class_body603.Tree, class_body603, retval);
    		DebugLocation(621, 68);
    		// cs.g:621:68: ( ';' )?
    		int alt203=2;
    		try { DebugEnterSubRule(203);
    		try { DebugEnterDecision(203, decisionCanBacktrack[203]);
    		int LA203_0 = input.LA(1);

    		if ((LA203_0==SEMI))
    		{
    			alt203=1;
    		}
    		} finally { DebugExitDecision(203); }
    		switch (alt203)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: ';'
    			{
    			DebugLocation(621, 68);
    			char_literal604=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_class_declaration4356), "SEMI"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal604_tree = (object)adaptor.Create(char_literal604, retval);
    			adaptor.AddChild(root_0, char_literal604_tree);
    			}

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(203); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 174, class_declaration_StartIndex); }
        }
     	DebugLocation(621, 71);
    	} finally { DebugExitRule(GrammarFileName, "class_declaration"); }
    	return retval;

    }
    // $ANTLR end "class_declaration"

    public class class_modifiers_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_class_modifiers() {}
    protected virtual void Leave_class_modifiers() {}

    // $ANTLR start "class_modifiers"
    // cs.g:622:1: class_modifiers : ( class_modifier )+ ;
    [GrammarRule("class_modifiers")]
    public csParser.class_modifiers_return class_modifiers()
    {

        csParser.class_modifiers_return retval = new csParser.class_modifiers_return();
        retval.Start = (IToken)input.LT(1);
        int class_modifiers_StartIndex = input.Index;
        object root_0 = null;

        csParser.class_modifier_return class_modifier605 = default(csParser.class_modifier_return);


    	try { DebugEnterRule(GrammarFileName, "class_modifiers");
    	DebugLocation(622, 17);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 175)) { return retval; }
    		// cs.g:622:16: ( ( class_modifier )+ )
    		DebugEnterAlt(1);
    		// cs.g:623:2: ( class_modifier )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(623, 2);
    		// cs.g:623:2: ( class_modifier )+
    		int cnt204=0;
    		try { DebugEnterSubRule(204);
    		while (true)
    		{
    			int alt204=2;
    			try { DebugEnterDecision(204, decisionCanBacktrack[204]);
    			int LA204_0 = input.LA(1);

    			if ((LA204_0==138||(LA204_0>=170 && LA204_0<=174)||(LA204_0>=190 && LA204_0<=192)))
    			{
    				alt204=1;
    			}


    			} finally { DebugExitDecision(204); }
    			switch (alt204)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: class_modifier
    				{
    				DebugLocation(623, 2);
    				PushFollow(Follow._class_modifier_in_class_modifiers4364);
    				class_modifier605=class_modifier();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, class_modifier605.Tree, class_modifier605, retval);

    				}
    				break;

    			default:
    				if (cnt204 >= 1)
    					goto loop204;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee204 = new EarlyExitException( 204, input );
    				DebugRecognitionException(eee204);
    				throw eee204;
    			}
    			cnt204++;
    		}
    		loop204:
    			;

    		} finally { DebugExitSubRule(204); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 175, class_modifiers_StartIndex); }
        }
     	DebugLocation(623, 17);
    	} finally { DebugExitRule(GrammarFileName, "class_modifiers"); }
    	return retval;

    }
    // $ANTLR end "class_modifiers"

    public class class_modifier_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_class_modifier() {}
    protected virtual void Leave_class_modifier() {}

    // $ANTLR start "class_modifier"
    // cs.g:624:1: class_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'abstract' | 'sealed' | 'static' | 'unsafe' );
    [GrammarRule("class_modifier")]
    public csParser.class_modifier_return class_modifier()
    {

        csParser.class_modifier_return retval = new csParser.class_modifier_return();
        retval.Start = (IToken)input.LT(1);
        int class_modifier_StartIndex = input.Index;
        object root_0 = null;

        IToken set606=null;

        object set606_tree=null;

    	try { DebugEnterRule(GrammarFileName, "class_modifier");
    	DebugLocation(624, 102);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 176)) { return retval; }
    		// cs.g:624:15: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'abstract' | 'sealed' | 'static' | 'unsafe' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(624, 15);
    		set606=(IToken)input.LT(1);
    		if (input.LA(1)==138||(input.LA(1)>=170 && input.LA(1)<=174)||(input.LA(1)>=190 && input.LA(1)<=192))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set606, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 176, class_modifier_StartIndex); }
        }
     	DebugLocation(625, 102);
    	} finally { DebugExitRule(GrammarFileName, "class_modifier"); }
    	return retval;

    }
    // $ANTLR end "class_modifier"

    public class class_base_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_class_base() {}
    protected virtual void Leave_class_base() {}

    // $ANTLR start "class_base"
    // cs.g:626:1: class_base : ( ':' class_type ( ',' interface_type_list )? | ':' interface_type_list );
    [GrammarRule("class_base")]
    public csParser.class_base_return class_base()
    {

        csParser.class_base_return retval = new csParser.class_base_return();
        retval.Start = (IToken)input.LT(1);
        int class_base_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal607=null;
        IToken char_literal609=null;
        IToken char_literal611=null;
        csParser.class_type_return class_type608 = default(csParser.class_type_return);
        csParser.interface_type_list_return interface_type_list610 = default(csParser.interface_type_list_return);
        csParser.interface_type_list_return interface_type_list612 = default(csParser.interface_type_list_return);

        object char_literal607_tree=null;
        object char_literal609_tree=null;
        object char_literal611_tree=null;

    	try { DebugEnterRule(GrammarFileName, "class_base");
    	DebugLocation(626, 29);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 177)) { return retval; }
    		// cs.g:626:11: ( ':' class_type ( ',' interface_type_list )? | ':' interface_type_list )
    		int alt206=2;
    		try { DebugEnterDecision(206, decisionCanBacktrack[206]);
    		int LA206_0 = input.LA(1);

    		if ((LA206_0==100))
    		{
    			switch (input.LA(2))
    			{
    			case IDENTIFIER:
    				{
    				int LA206_2 = input.LA(3);

    				if ((EvaluatePredicate(synpred320_cs_fragment)))
    				{
    					alt206=1;
    				}
    				else if ((true))
    				{
    					alt206=2;
    				}
    				else
    				{
    					if (state.backtracking>0) {state.failed=true; return retval;}
    					NoViableAltException nvae = new NoViableAltException("", 206, 2, input);

    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    				}
    				break;
    			case SET:
    			case 95:
    			case 101:
    			case 102:
    			case 103:
    			case 104:
    			case 105:
    			case 106:
    			case 107:
    			case 109:
    			case 175:
    			case 176:
    			case 177:
    			case 178:
    			case 179:
    			case 180:
    			case 181:
    			case 182:
    			case 183:
    			case 184:
    			case 185:
    			case 186:
    			case 187:
    			case 199:
    			case 201:
    			case 202:
    			case 208:
    			case 225:
    			case 226:
    				{
    				int LA206_3 = input.LA(3);

    				if ((EvaluatePredicate(synpred320_cs_fragment)))
    				{
    					alt206=1;
    				}
    				else if ((true))
    				{
    					alt206=2;
    				}
    				else
    				{
    					if (state.backtracking>0) {state.failed=true; return retval;}
    					NoViableAltException nvae = new NoViableAltException("", 206, 3, input);

    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    				}
    				break;
    			case 113:
    			case 114:
    			case 115:
    			case 116:
    			case 117:
    			case 118:
    			case 119:
    			case 120:
    			case 121:
    			case 122:
    			case 132:
    			case 133:
    			case 134:
    			case 135:
    			case 136:
    			case 137:
    				{
    				alt206=1;
    				}
    				break;
    			default:
    				{
    					if (state.backtracking>0) {state.failed=true; return retval;}
    					NoViableAltException nvae = new NoViableAltException("", 206, 1, input);

    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    			}

    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 206, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(206); }
    		switch (alt206)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:627:2: ':' class_type ( ',' interface_type_list )?
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(627, 2);
    			char_literal607=(IToken)Match(input,100,Follow._100_in_class_base4412); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal607_tree = (object)adaptor.Create(char_literal607, retval);
    			adaptor.AddChild(root_0, char_literal607_tree);
    			}
    			DebugLocation(627, 8);
    			PushFollow(Follow._class_type_in_class_base4416);
    			class_type608=class_type();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, class_type608.Tree, class_type608, retval);
    			DebugLocation(627, 19);
    			// cs.g:627:19: ( ',' interface_type_list )?
    			int alt205=2;
    			try { DebugEnterSubRule(205);
    			try { DebugEnterDecision(205, decisionCanBacktrack[205]);
    			int LA205_0 = input.LA(1);

    			if ((LA205_0==98))
    			{
    				alt205=1;
    			}
    			} finally { DebugExitDecision(205); }
    			switch (alt205)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:627:20: ',' interface_type_list
    				{
    				DebugLocation(627, 20);
    				char_literal609=(IToken)Match(input,98,Follow._98_in_class_base4419); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal609_tree = (object)adaptor.Create(char_literal609, retval);
    				adaptor.AddChild(root_0, char_literal609_tree);
    				}
    				DebugLocation(627, 24);
    				PushFollow(Follow._interface_type_list_in_class_base4421);
    				interface_type_list610=interface_type_list();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, interface_type_list610.Tree, interface_type_list610, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(205); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:628:4: ':' interface_type_list
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(628, 4);
    			char_literal611=(IToken)Match(input,100,Follow._100_in_class_base4428); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal611_tree = (object)adaptor.Create(char_literal611, retval);
    			adaptor.AddChild(root_0, char_literal611_tree);
    			}
    			DebugLocation(628, 10);
    			PushFollow(Follow._interface_type_list_in_class_base4432);
    			interface_type_list612=interface_type_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, interface_type_list612.Tree, interface_type_list612, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 177, class_base_StartIndex); }
        }
     	DebugLocation(628, 29);
    	} finally { DebugExitRule(GrammarFileName, "class_base"); }
    	return retval;

    }
    // $ANTLR end "class_base"

    public class interface_type_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_interface_type_list() {}
    protected virtual void Leave_interface_type_list() {}

    // $ANTLR start "interface_type_list"
    // cs.g:629:1: interface_type_list : t+= type_name ( ',' t+= type_name )* ;
    [GrammarRule("interface_type_list")]
    public csParser.interface_type_list_return interface_type_list()
    {

        csParser.interface_type_list_return retval = new csParser.interface_type_list_return();
        retval.Start = (IToken)input.LT(1);
        int interface_type_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal613=null;
        List list_t=null;
        csParser.type_name_return t = default(csParser.type_name_return);
        object char_literal613_tree=null;

    	try { DebugEnterRule(GrammarFileName, "interface_type_list");
    	DebugLocation(629, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 178)) { return retval; }
    		// cs.g:629:20: (t+= type_name ( ',' t+= type_name )* )
    		DebugEnterAlt(1);
    		// cs.g:630:2: t+= type_name ( ',' t+= type_name )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(630, 4);
    		PushFollow(Follow._type_name_in_interface_type_list4444);
    		t=type_name();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, t.Tree, t, retval);
    		if (list_t==null) list_t=new ArrayList();
    		list_t.Add(t.Tree);

    		DebugLocation(630, 17);
    		// cs.g:630:17: ( ',' t+= type_name )*
    		try { DebugEnterSubRule(207);
    		while (true)
    		{
    			int alt207=2;
    			try { DebugEnterDecision(207, decisionCanBacktrack[207]);
    			int LA207_0 = input.LA(1);

    			if ((LA207_0==98))
    			{
    				alt207=1;
    			}


    			} finally { DebugExitDecision(207); }
    			switch ( alt207 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:630:18: ',' t+= type_name
    				{
    				DebugLocation(630, 18);
    				char_literal613=(IToken)Match(input,98,Follow._98_in_interface_type_list4447); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal613_tree = (object)adaptor.Create(char_literal613, retval);
    				adaptor.AddChild(root_0, char_literal613_tree);
    				}
    				DebugLocation(630, 26);
    				PushFollow(Follow._type_name_in_interface_type_list4455);
    				t=type_name();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, t.Tree, t, retval);
    				if (list_t==null) list_t=new ArrayList();
    				list_t.Add(t.Tree);


    				}
    				break;

    			default:
    				goto loop207;
    			}
    		}

    		loop207:
    			;

    		} finally { DebugExitSubRule(207); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 178, interface_type_list_StartIndex); }
        }
     	DebugLocation(631, 1);
    	} finally { DebugExitRule(GrammarFileName, "interface_type_list"); }
    	return retval;

    }
    // $ANTLR end "interface_type_list"

    public class type_parameter_constraints_clauses_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_type_parameter_constraints_clauses() {}
    protected virtual void Leave_type_parameter_constraints_clauses() {}

    // $ANTLR start "type_parameter_constraints_clauses"
    // cs.g:632:1: type_parameter_constraints_clauses : ( type_parameter_constraints_clause )+ ;
    [GrammarRule("type_parameter_constraints_clauses")]
    public csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses()
    {

        csParser.type_parameter_constraints_clauses_return retval = new csParser.type_parameter_constraints_clauses_return();
        retval.Start = (IToken)input.LT(1);
        int type_parameter_constraints_clauses_StartIndex = input.Index;
        object root_0 = null;

        csParser.type_parameter_constraints_clause_return type_parameter_constraints_clause614 = default(csParser.type_parameter_constraints_clause_return);


    	try { DebugEnterRule(GrammarFileName, "type_parameter_constraints_clauses");
    	DebugLocation(632, 36);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 179)) { return retval; }
    		// cs.g:632:35: ( ( type_parameter_constraints_clause )+ )
    		DebugEnterAlt(1);
    		// cs.g:633:2: ( type_parameter_constraints_clause )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(633, 2);
    		// cs.g:633:2: ( type_parameter_constraints_clause )+
    		int cnt208=0;
    		try { DebugEnterSubRule(208);
    		while (true)
    		{
    			int alt208=2;
    			try { DebugEnterDecision(208, decisionCanBacktrack[208]);
    			int LA208_0 = input.LA(1);

    			if ((LA208_0==187))
    			{
    				alt208=1;
    			}


    			} finally { DebugExitDecision(208); }
    			switch (alt208)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: type_parameter_constraints_clause
    				{
    				DebugLocation(633, 2);
    				PushFollow(Follow._type_parameter_constraints_clause_in_type_parameter_constraints_clauses4467);
    				type_parameter_constraints_clause614=type_parameter_constraints_clause();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_parameter_constraints_clause614.Tree, type_parameter_constraints_clause614, retval);

    				}
    				break;

    			default:
    				if (cnt208 >= 1)
    					goto loop208;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee208 = new EarlyExitException( 208, input );
    				DebugRecognitionException(eee208);
    				throw eee208;
    			}
    			cnt208++;
    		}
    		loop208:
    			;

    		} finally { DebugExitSubRule(208); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 179, type_parameter_constraints_clauses_StartIndex); }
        }
     	DebugLocation(633, 36);
    	} finally { DebugExitRule(GrammarFileName, "type_parameter_constraints_clauses"); }
    	return retval;

    }
    // $ANTLR end "type_parameter_constraints_clauses"

    public class type_parameter_constraints_clause_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_type_parameter_constraints_clause() {}
    protected virtual void Leave_type_parameter_constraints_clause() {}

    // $ANTLR start "type_parameter_constraints_clause"
    // cs.g:634:1: type_parameter_constraints_clause : 'where' type_variable_name ':' type_parameter_constraint_list ;
    [GrammarRule("type_parameter_constraints_clause")]
    public csParser.type_parameter_constraints_clause_return type_parameter_constraints_clause()
    {

        csParser.type_parameter_constraints_clause_return retval = new csParser.type_parameter_constraints_clause_return();
        retval.Start = (IToken)input.LT(1);
        int type_parameter_constraints_clause_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal615=null;
        IToken char_literal617=null;
        csParser.type_variable_name_return type_variable_name616 = default(csParser.type_variable_name_return);
        csParser.type_parameter_constraint_list_return type_parameter_constraint_list618 = default(csParser.type_parameter_constraint_list_return);

        object string_literal615_tree=null;
        object char_literal617_tree=null;

    	try { DebugEnterRule(GrammarFileName, "type_parameter_constraints_clause");
    	DebugLocation(634, 69);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 180)) { return retval; }
    		// cs.g:634:34: ( 'where' type_variable_name ':' type_parameter_constraint_list )
    		DebugEnterAlt(1);
    		// cs.g:635:2: 'where' type_variable_name ':' type_parameter_constraint_list
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(635, 2);
    		string_literal615=(IToken)Match(input,187,Follow._187_in_type_parameter_constraints_clause4476); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal615_tree = (object)adaptor.Create(string_literal615, retval);
    		adaptor.AddChild(root_0, string_literal615_tree);
    		}
    		DebugLocation(635, 12);
    		PushFollow(Follow._type_variable_name_in_type_parameter_constraints_clause4480);
    		type_variable_name616=type_variable_name();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_variable_name616.Tree, type_variable_name616, retval);
    		DebugLocation(635, 33);
    		char_literal617=(IToken)Match(input,100,Follow._100_in_type_parameter_constraints_clause4484); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal617_tree = (object)adaptor.Create(char_literal617, retval);
    		adaptor.AddChild(root_0, char_literal617_tree);
    		}
    		DebugLocation(635, 39);
    		PushFollow(Follow._type_parameter_constraint_list_in_type_parameter_constraints_clause4488);
    		type_parameter_constraint_list618=type_parameter_constraint_list();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_parameter_constraint_list618.Tree, type_parameter_constraint_list618, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 180, type_parameter_constraints_clause_StartIndex); }
        }
     	DebugLocation(635, 69);
    	} finally { DebugExitRule(GrammarFileName, "type_parameter_constraints_clause"); }
    	return retval;

    }
    // $ANTLR end "type_parameter_constraints_clause"

    public class type_parameter_constraint_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_type_parameter_constraint_list() {}
    protected virtual void Leave_type_parameter_constraint_list() {}

    // $ANTLR start "type_parameter_constraint_list"
    // cs.g:636:1: type_parameter_constraint_list : ( ( primary_constraint ',' secondary_constraint_list ',' constructor_constraint ) | ( primary_constraint ',' secondary_constraint_list ) | ( primary_constraint ',' constructor_constraint ) | ( secondary_constraint_list ',' constructor_constraint ) | primary_constraint | secondary_constraint_list | constructor_constraint );
    [GrammarRule("type_parameter_constraint_list")]
    public csParser.type_parameter_constraint_list_return type_parameter_constraint_list()
    {

        csParser.type_parameter_constraint_list_return retval = new csParser.type_parameter_constraint_list_return();
        retval.Start = (IToken)input.LT(1);
        int type_parameter_constraint_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal620=null;
        IToken char_literal622=null;
        IToken char_literal625=null;
        IToken char_literal628=null;
        IToken char_literal631=null;
        csParser.primary_constraint_return primary_constraint619 = default(csParser.primary_constraint_return);
        csParser.secondary_constraint_list_return secondary_constraint_list621 = default(csParser.secondary_constraint_list_return);
        csParser.constructor_constraint_return constructor_constraint623 = default(csParser.constructor_constraint_return);
        csParser.primary_constraint_return primary_constraint624 = default(csParser.primary_constraint_return);
        csParser.secondary_constraint_list_return secondary_constraint_list626 = default(csParser.secondary_constraint_list_return);
        csParser.primary_constraint_return primary_constraint627 = default(csParser.primary_constraint_return);
        csParser.constructor_constraint_return constructor_constraint629 = default(csParser.constructor_constraint_return);
        csParser.secondary_constraint_list_return secondary_constraint_list630 = default(csParser.secondary_constraint_list_return);
        csParser.constructor_constraint_return constructor_constraint632 = default(csParser.constructor_constraint_return);
        csParser.primary_constraint_return primary_constraint633 = default(csParser.primary_constraint_return);
        csParser.secondary_constraint_list_return secondary_constraint_list634 = default(csParser.secondary_constraint_list_return);
        csParser.constructor_constraint_return constructor_constraint635 = default(csParser.constructor_constraint_return);

        object char_literal620_tree=null;
        object char_literal622_tree=null;
        object char_literal625_tree=null;
        object char_literal628_tree=null;
        object char_literal631_tree=null;

    	try { DebugEnterRule(GrammarFileName, "type_parameter_constraint_list");
    	DebugLocation(636, 26);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 181)) { return retval; }
    		// cs.g:636:31: ( ( primary_constraint ',' secondary_constraint_list ',' constructor_constraint ) | ( primary_constraint ',' secondary_constraint_list ) | ( primary_constraint ',' constructor_constraint ) | ( secondary_constraint_list ',' constructor_constraint ) | primary_constraint | secondary_constraint_list | constructor_constraint )
    		int alt209=7;
    		try { DebugEnterDecision(209, decisionCanBacktrack[209]);
    		try
    		{
    			alt209 = dfa209.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(209); }
    		switch (alt209)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:637:2: ( primary_constraint ',' secondary_constraint_list ',' constructor_constraint )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(637, 2);
    			// cs.g:637:2: ( primary_constraint ',' secondary_constraint_list ',' constructor_constraint )
    			DebugEnterAlt(1);
    			// cs.g:637:3: primary_constraint ',' secondary_constraint_list ',' constructor_constraint
    			{
    			DebugLocation(637, 3);
    			PushFollow(Follow._primary_constraint_in_type_parameter_constraint_list4497);
    			primary_constraint619=primary_constraint();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, primary_constraint619.Tree, primary_constraint619, retval);
    			DebugLocation(637, 26);
    			char_literal620=(IToken)Match(input,98,Follow._98_in_type_parameter_constraint_list4503); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal620_tree = (object)adaptor.Create(char_literal620, retval);
    			adaptor.AddChild(root_0, char_literal620_tree);
    			}
    			DebugLocation(637, 32);
    			PushFollow(Follow._secondary_constraint_list_in_type_parameter_constraint_list4507);
    			secondary_constraint_list621=secondary_constraint_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, secondary_constraint_list621.Tree, secondary_constraint_list621, retval);
    			DebugLocation(637, 60);
    			char_literal622=(IToken)Match(input,98,Follow._98_in_type_parameter_constraint_list4511); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal622_tree = (object)adaptor.Create(char_literal622, retval);
    			adaptor.AddChild(root_0, char_literal622_tree);
    			}
    			DebugLocation(637, 66);
    			PushFollow(Follow._constructor_constraint_in_type_parameter_constraint_list4515);
    			constructor_constraint623=constructor_constraint();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, constructor_constraint623.Tree, constructor_constraint623, retval);

    			}


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:638:4: ( primary_constraint ',' secondary_constraint_list )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(638, 4);
    			// cs.g:638:4: ( primary_constraint ',' secondary_constraint_list )
    			DebugEnterAlt(1);
    			// cs.g:638:5: primary_constraint ',' secondary_constraint_list
    			{
    			DebugLocation(638, 5);
    			PushFollow(Follow._primary_constraint_in_type_parameter_constraint_list4522);
    			primary_constraint624=primary_constraint();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, primary_constraint624.Tree, primary_constraint624, retval);
    			DebugLocation(638, 28);
    			char_literal625=(IToken)Match(input,98,Follow._98_in_type_parameter_constraint_list4528); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal625_tree = (object)adaptor.Create(char_literal625, retval);
    			adaptor.AddChild(root_0, char_literal625_tree);
    			}
    			DebugLocation(638, 34);
    			PushFollow(Follow._secondary_constraint_list_in_type_parameter_constraint_list4532);
    			secondary_constraint_list626=secondary_constraint_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, secondary_constraint_list626.Tree, secondary_constraint_list626, retval);

    			}


    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:639:4: ( primary_constraint ',' constructor_constraint )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(639, 4);
    			// cs.g:639:4: ( primary_constraint ',' constructor_constraint )
    			DebugEnterAlt(1);
    			// cs.g:639:5: primary_constraint ',' constructor_constraint
    			{
    			DebugLocation(639, 5);
    			PushFollow(Follow._primary_constraint_in_type_parameter_constraint_list4539);
    			primary_constraint627=primary_constraint();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, primary_constraint627.Tree, primary_constraint627, retval);
    			DebugLocation(639, 28);
    			char_literal628=(IToken)Match(input,98,Follow._98_in_type_parameter_constraint_list4545); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal628_tree = (object)adaptor.Create(char_literal628, retval);
    			adaptor.AddChild(root_0, char_literal628_tree);
    			}
    			DebugLocation(639, 34);
    			PushFollow(Follow._constructor_constraint_in_type_parameter_constraint_list4549);
    			constructor_constraint629=constructor_constraint();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, constructor_constraint629.Tree, constructor_constraint629, retval);

    			}


    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// cs.g:640:4: ( secondary_constraint_list ',' constructor_constraint )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(640, 4);
    			// cs.g:640:4: ( secondary_constraint_list ',' constructor_constraint )
    			DebugEnterAlt(1);
    			// cs.g:640:5: secondary_constraint_list ',' constructor_constraint
    			{
    			DebugLocation(640, 5);
    			PushFollow(Follow._secondary_constraint_list_in_type_parameter_constraint_list4556);
    			secondary_constraint_list630=secondary_constraint_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, secondary_constraint_list630.Tree, secondary_constraint_list630, retval);
    			DebugLocation(640, 34);
    			char_literal631=(IToken)Match(input,98,Follow._98_in_type_parameter_constraint_list4561); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal631_tree = (object)adaptor.Create(char_literal631, retval);
    			adaptor.AddChild(root_0, char_literal631_tree);
    			}
    			DebugLocation(640, 40);
    			PushFollow(Follow._constructor_constraint_in_type_parameter_constraint_list4565);
    			constructor_constraint632=constructor_constraint();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, constructor_constraint632.Tree, constructor_constraint632, retval);

    			}


    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// cs.g:641:4: primary_constraint
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(641, 4);
    			PushFollow(Follow._primary_constraint_in_type_parameter_constraint_list4571);
    			primary_constraint633=primary_constraint();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, primary_constraint633.Tree, primary_constraint633, retval);

    			}
    			break;
    		case 6:
    			DebugEnterAlt(6);
    			// cs.g:642:4: secondary_constraint_list
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(642, 4);
    			PushFollow(Follow._secondary_constraint_list_in_type_parameter_constraint_list4576);
    			secondary_constraint_list634=secondary_constraint_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, secondary_constraint_list634.Tree, secondary_constraint_list634, retval);

    			}
    			break;
    		case 7:
    			DebugEnterAlt(7);
    			// cs.g:643:4: constructor_constraint
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(643, 4);
    			PushFollow(Follow._constructor_constraint_in_type_parameter_constraint_list4581);
    			constructor_constraint635=constructor_constraint();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, constructor_constraint635.Tree, constructor_constraint635, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 181, type_parameter_constraint_list_StartIndex); }
        }
     	DebugLocation(643, 26);
    	} finally { DebugExitRule(GrammarFileName, "type_parameter_constraint_list"); }
    	return retval;

    }
    // $ANTLR end "type_parameter_constraint_list"

    public class primary_constraint_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_primary_constraint() {}
    protected virtual void Leave_primary_constraint() {}

    // $ANTLR start "primary_constraint"
    // cs.g:645:1: primary_constraint : ( class_type | 'class' | 'struct' );
    [GrammarRule("primary_constraint")]
    public csParser.primary_constraint_return primary_constraint()
    {

        csParser.primary_constraint_return retval = new csParser.primary_constraint_return();
        retval.Start = (IToken)input.LT(1);
        int primary_constraint_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal637=null;
        IToken string_literal638=null;
        csParser.class_type_return class_type636 = default(csParser.class_type_return);

        object string_literal637_tree=null;
        object string_literal638_tree=null;

    	try { DebugEnterRule(GrammarFileName, "primary_constraint");
    	DebugLocation(645, 12);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 182)) { return retval; }
    		// cs.g:645:19: ( class_type | 'class' | 'struct' )
    		int alt210=3;
    		try { DebugEnterDecision(210, decisionCanBacktrack[210]);
    		switch (input.LA(1))
    		{
    		case IDENTIFIER:
    		case SET:
    		case 95:
    		case 101:
    		case 102:
    		case 103:
    		case 104:
    		case 105:
    		case 106:
    		case 107:
    		case 109:
    		case 113:
    		case 114:
    		case 115:
    		case 116:
    		case 117:
    		case 118:
    		case 119:
    		case 120:
    		case 121:
    		case 122:
    		case 132:
    		case 133:
    		case 134:
    		case 135:
    		case 136:
    		case 137:
    		case 175:
    		case 176:
    		case 177:
    		case 178:
    		case 179:
    		case 180:
    		case 181:
    		case 182:
    		case 183:
    		case 184:
    		case 185:
    		case 186:
    		case 187:
    		case 199:
    		case 201:
    		case 202:
    		case 208:
    		case 225:
    		case 226:
    			{
    			alt210=1;
    			}
    			break;
    		case 189:
    			{
    			alt210=2;
    			}
    			break;
    		case 193:
    			{
    			alt210=3;
    			}
    			break;
    		default:
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 210, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(210); }
    		switch (alt210)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:646:2: class_type
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(646, 2);
    			PushFollow(Follow._class_type_in_primary_constraint4590);
    			class_type636=class_type();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, class_type636.Tree, class_type636, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:647:4: 'class'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(647, 4);
    			string_literal637=(IToken)Match(input,189,Follow._189_in_primary_constraint4595); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal637_tree = (object)adaptor.Create(string_literal637, retval);
    			adaptor.AddChild(root_0, string_literal637_tree);
    			}

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:648:4: 'struct'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(648, 4);
    			string_literal638=(IToken)Match(input,193,Follow._193_in_primary_constraint4600); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal638_tree = (object)adaptor.Create(string_literal638, retval);
    			adaptor.AddChild(root_0, string_literal638_tree);
    			}

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 182, primary_constraint_StartIndex); }
        }
     	DebugLocation(648, 12);
    	} finally { DebugExitRule(GrammarFileName, "primary_constraint"); }
    	return retval;

    }
    // $ANTLR end "primary_constraint"

    public class secondary_constraint_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_secondary_constraint_list() {}
    protected virtual void Leave_secondary_constraint_list() {}

    // $ANTLR start "secondary_constraint_list"
    // cs.g:649:1: secondary_constraint_list : sc+= secondary_constraint ( ',' sc+= secondary_constraint )* ;
    [GrammarRule("secondary_constraint_list")]
    public csParser.secondary_constraint_list_return secondary_constraint_list()
    {

        csParser.secondary_constraint_list_return retval = new csParser.secondary_constraint_list_return();
        retval.Start = (IToken)input.LT(1);
        int secondary_constraint_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal639=null;
        List list_sc=null;
        csParser.secondary_constraint_return sc = default(csParser.secondary_constraint_return);
        object char_literal639_tree=null;

    	try { DebugEnterRule(GrammarFileName, "secondary_constraint_list");
    	DebugLocation(649, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 183)) { return retval; }
    		// cs.g:649:26: (sc+= secondary_constraint ( ',' sc+= secondary_constraint )* )
    		DebugEnterAlt(1);
    		// cs.g:650:2: sc+= secondary_constraint ( ',' sc+= secondary_constraint )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(650, 5);
    		PushFollow(Follow._secondary_constraint_in_secondary_constraint_list4612);
    		sc=secondary_constraint();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, sc.Tree, sc, retval);
    		if (list_sc==null) list_sc=new ArrayList();
    		list_sc.Add(sc.Tree);

    		DebugLocation(650, 29);
    		// cs.g:650:29: ( ',' sc+= secondary_constraint )*
    		try { DebugEnterSubRule(211);
    		while (true)
    		{
    			int alt211=2;
    			try { DebugEnterDecision(211, decisionCanBacktrack[211]);
    			int LA211_0 = input.LA(1);

    			if ((LA211_0==98))
    			{
    				int LA211_1 = input.LA(2);

    				if ((LA211_1==IDENTIFIER||LA211_1==SET||LA211_1==95||(LA211_1>=101 && LA211_1<=107)||LA211_1==109||(LA211_1>=175 && LA211_1<=187)||LA211_1==199||(LA211_1>=201 && LA211_1<=202)||LA211_1==208||(LA211_1>=225 && LA211_1<=226)))
    				{
    					alt211=1;
    				}


    			}


    			} finally { DebugExitDecision(211); }
    			switch ( alt211 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:650:30: ',' sc+= secondary_constraint
    				{
    				DebugLocation(650, 30);
    				char_literal639=(IToken)Match(input,98,Follow._98_in_secondary_constraint_list4615); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal639_tree = (object)adaptor.Create(char_literal639, retval);
    				adaptor.AddChild(root_0, char_literal639_tree);
    				}
    				DebugLocation(650, 37);
    				PushFollow(Follow._secondary_constraint_in_secondary_constraint_list4621);
    				sc=secondary_constraint();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, sc.Tree, sc, retval);
    				if (list_sc==null) list_sc=new ArrayList();
    				list_sc.Add(sc.Tree);


    				}
    				break;

    			default:
    				goto loop211;
    			}
    		}

    		loop211:
    			;

    		} finally { DebugExitSubRule(211); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 183, secondary_constraint_list_StartIndex); }
        }
     	DebugLocation(651, 1);
    	} finally { DebugExitRule(GrammarFileName, "secondary_constraint_list"); }
    	return retval;

    }
    // $ANTLR end "secondary_constraint_list"

    public class secondary_constraint_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_secondary_constraint() {}
    protected virtual void Leave_secondary_constraint() {}

    // $ANTLR start "secondary_constraint"
    // cs.g:652:1: secondary_constraint : ( type_name | type_variable_name ) ;
    [GrammarRule("secondary_constraint")]
    public csParser.secondary_constraint_return secondary_constraint()
    {

        csParser.secondary_constraint_return retval = new csParser.secondary_constraint_return();
        retval.Start = (IToken)input.LT(1);
        int secondary_constraint_StartIndex = input.Index;
        object root_0 = null;

        csParser.type_name_return type_name640 = default(csParser.type_name_return);
        csParser.type_variable_name_return type_variable_name641 = default(csParser.type_variable_name_return);


    	try { DebugEnterRule(GrammarFileName, "secondary_constraint");
    	DebugLocation(652, 34);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 184)) { return retval; }
    		// cs.g:652:21: ( ( type_name | type_variable_name ) )
    		DebugEnterAlt(1);
    		// cs.g:653:2: ( type_name | type_variable_name )
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(653, 2);
    		// cs.g:653:2: ( type_name | type_variable_name )
    		int alt212=2;
    		try { DebugEnterSubRule(212);
    		try { DebugEnterDecision(212, decisionCanBacktrack[212]);
    		int LA212_0 = input.LA(1);

    		if ((LA212_0==IDENTIFIER))
    		{
    			int LA212_1 = input.LA(2);

    			if ((EvaluatePredicate(synpred332_cs_fragment)))
    			{
    				alt212=1;
    			}
    			else if ((true))
    			{
    				alt212=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 212, 1, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else if ((LA212_0==SET||LA212_0==95||(LA212_0>=101 && LA212_0<=107)||LA212_0==109||(LA212_0>=175 && LA212_0<=187)||LA212_0==199||(LA212_0>=201 && LA212_0<=202)||LA212_0==208||(LA212_0>=225 && LA212_0<=226)))
    		{
    			int LA212_2 = input.LA(2);

    			if ((EvaluatePredicate(synpred332_cs_fragment)))
    			{
    				alt212=1;
    			}
    			else if ((true))
    			{
    				alt212=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 212, 2, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 212, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(212); }
    		switch (alt212)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:653:3: type_name
    			{
    			DebugLocation(653, 3);
    			PushFollow(Follow._type_name_in_secondary_constraint4634);
    			type_name640=type_name();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_name640.Tree, type_name640, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:653:15: type_variable_name
    			{
    			DebugLocation(653, 15);
    			PushFollow(Follow._type_variable_name_in_secondary_constraint4638);
    			type_variable_name641=type_variable_name();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_variable_name641.Tree, type_variable_name641, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(212); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 184, secondary_constraint_StartIndex); }
        }
     	DebugLocation(653, 34);
    	} finally { DebugExitRule(GrammarFileName, "secondary_constraint"); }
    	return retval;

    }
    // $ANTLR end "secondary_constraint"

    public class constructor_constraint_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_constructor_constraint() {}
    protected virtual void Leave_constructor_constraint() {}

    // $ANTLR start "constructor_constraint"
    // cs.g:654:1: constructor_constraint : 'new' '(' ')' ;
    [GrammarRule("constructor_constraint")]
    public csParser.constructor_constraint_return constructor_constraint()
    {

        csParser.constructor_constraint_return retval = new csParser.constructor_constraint_return();
        retval.Start = (IToken)input.LT(1);
        int constructor_constraint_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal642=null;
        IToken char_literal643=null;
        IToken char_literal644=null;

        object string_literal642_tree=null;
        object char_literal643_tree=null;
        object char_literal644_tree=null;

    	try { DebugEnterRule(GrammarFileName, "constructor_constraint");
    	DebugLocation(654, 19);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 185)) { return retval; }
    		// cs.g:654:23: ( 'new' '(' ')' )
    		DebugEnterAlt(1);
    		// cs.g:655:2: 'new' '(' ')'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(655, 2);
    		string_literal642=(IToken)Match(input,138,Follow._138_in_constructor_constraint4647); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal642_tree = (object)adaptor.Create(string_literal642, retval);
    		adaptor.AddChild(root_0, string_literal642_tree);
    		}
    		DebugLocation(655, 10);
    		char_literal643=(IToken)Match(input,110,Follow._110_in_constructor_constraint4651); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal643_tree = (object)adaptor.Create(char_literal643, retval);
    		adaptor.AddChild(root_0, char_literal643_tree);
    		}
    		DebugLocation(655, 16);
    		char_literal644=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_constructor_constraint4655), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal644_tree = (object)adaptor.Create(char_literal644, retval);
    		adaptor.AddChild(root_0, char_literal644_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 185, constructor_constraint_StartIndex); }
        }
     	DebugLocation(655, 19);
    	} finally { DebugExitRule(GrammarFileName, "constructor_constraint"); }
    	return retval;

    }
    // $ANTLR end "constructor_constraint"

    public class class_body_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_class_body() {}
    protected virtual void Leave_class_body() {}

    // $ANTLR start "class_body"
    // cs.g:656:1: class_body : '{' ( class_member_declarations )? '}' ;
    [GrammarRule("class_body")]
    public csParser.class_body_return class_body()
    {

        csParser.class_body_return retval = new csParser.class_body_return();
        retval.Start = (IToken)input.LT(1);
        int class_body_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal645=null;
        IToken char_literal647=null;
        csParser.class_member_declarations_return class_member_declarations646 = default(csParser.class_member_declarations_return);

        object char_literal645_tree=null;
        object char_literal647_tree=null;

    	try { DebugEnterRule(GrammarFileName, "class_body");
    	DebugLocation(656, 40);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 186)) { return retval; }
    		// cs.g:656:11: ( '{' ( class_member_declarations )? '}' )
    		DebugEnterAlt(1);
    		// cs.g:657:2: '{' ( class_member_declarations )? '}'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(657, 2);
    		char_literal645=(IToken)Match(input,92,Follow._92_in_class_body4663); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal645_tree = (object)adaptor.Create(char_literal645, retval);
    		adaptor.AddChild(root_0, char_literal645_tree);
    		}
    		DebugLocation(657, 8);
    		// cs.g:657:8: ( class_member_declarations )?
    		int alt213=2;
    		try { DebugEnterSubRule(213);
    		try { DebugEnterDecision(213, decisionCanBacktrack[213]);
    		int LA213_0 = input.LA(1);

    		if ((LA213_0==IDENTIFIER||LA213_0==ENUM||LA213_0==SET||(LA213_0>=94 && LA213_0<=95)||LA213_0==97||(LA213_0>=101 && LA213_0<=107)||LA213_0==109||(LA213_0>=113 && LA213_0<=122)||LA213_0==126||(LA213_0>=132 && LA213_0<=138)||LA213_0==144||(LA213_0>=170 && LA213_0<=199)||(LA213_0>=201 && LA213_0<=202)||LA213_0==206||LA213_0==208||(LA213_0>=225 && LA213_0<=226)))
    		{
    			alt213=1;
    		}
    		} finally { DebugExitDecision(213); }
    		switch (alt213)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: class_member_declarations
    			{
    			DebugLocation(657, 8);
    			PushFollow(Follow._class_member_declarations_in_class_body4667);
    			class_member_declarations646=class_member_declarations();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, class_member_declarations646.Tree, class_member_declarations646, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(213); }

    		DebugLocation(657, 37);
    		char_literal647=(IToken)Match(input,93,Follow._93_in_class_body4672); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal647_tree = (object)adaptor.Create(char_literal647, retval);
    		adaptor.AddChild(root_0, char_literal647_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 186, class_body_StartIndex); }
        }
     	DebugLocation(657, 40);
    	} finally { DebugExitRule(GrammarFileName, "class_body"); }
    	return retval;

    }
    // $ANTLR end "class_body"

    public class class_member_declarations_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_class_member_declarations() {}
    protected virtual void Leave_class_member_declarations() {}

    // $ANTLR start "class_member_declarations"
    // cs.g:658:1: class_member_declarations : ( class_member_declaration )+ ;
    [GrammarRule("class_member_declarations")]
    public csParser.class_member_declarations_return class_member_declarations()
    {

        csParser.class_member_declarations_return retval = new csParser.class_member_declarations_return();
        retval.Start = (IToken)input.LT(1);
        int class_member_declarations_StartIndex = input.Index;
        object root_0 = null;

        csParser.class_member_declaration_return class_member_declaration648 = default(csParser.class_member_declaration_return);


    	try { DebugEnterRule(GrammarFileName, "class_member_declarations");
    	DebugLocation(658, 27);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 187)) { return retval; }
    		// cs.g:658:26: ( ( class_member_declaration )+ )
    		DebugEnterAlt(1);
    		// cs.g:659:2: ( class_member_declaration )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(659, 2);
    		// cs.g:659:2: ( class_member_declaration )+
    		int cnt214=0;
    		try { DebugEnterSubRule(214);
    		while (true)
    		{
    			int alt214=2;
    			try { DebugEnterDecision(214, decisionCanBacktrack[214]);
    			int LA214_0 = input.LA(1);

    			if ((LA214_0==IDENTIFIER||LA214_0==ENUM||LA214_0==SET||(LA214_0>=94 && LA214_0<=95)||LA214_0==97||(LA214_0>=101 && LA214_0<=107)||LA214_0==109||(LA214_0>=113 && LA214_0<=122)||LA214_0==126||(LA214_0>=132 && LA214_0<=138)||LA214_0==144||(LA214_0>=170 && LA214_0<=199)||(LA214_0>=201 && LA214_0<=202)||LA214_0==206||LA214_0==208||(LA214_0>=225 && LA214_0<=226)))
    			{
    				alt214=1;
    			}


    			} finally { DebugExitDecision(214); }
    			switch (alt214)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: class_member_declaration
    				{
    				DebugLocation(659, 2);
    				PushFollow(Follow._class_member_declaration_in_class_member_declarations4680);
    				class_member_declaration648=class_member_declaration();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, class_member_declaration648.Tree, class_member_declaration648, retval);

    				}
    				break;

    			default:
    				if (cnt214 >= 1)
    					goto loop214;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee214 = new EarlyExitException( 214, input );
    				DebugRecognitionException(eee214);
    				throw eee214;
    			}
    			cnt214++;
    		}
    		loop214:
    			;

    		} finally { DebugExitSubRule(214); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 187, class_member_declarations_StartIndex); }
        }
     	DebugLocation(659, 27);
    	} finally { DebugExitRule(GrammarFileName, "class_member_declarations"); }
    	return retval;

    }
    // $ANTLR end "class_member_declarations"

    public class class_member_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_class_member_declaration() {}
    protected virtual void Leave_class_member_declaration() {}

    // $ANTLR start "class_member_declaration"
    // cs.g:660:1: class_member_declaration : ( constant_declaration | field_declaration | method_declaration | property_declaration | event_declaration | indexer_declaration | operator_declaration | constructor_declaration | destructor_declaration | static_constructor_declaration | type_declaration | class_declaration );
    [GrammarRule("class_member_declaration")]
    public csParser.class_member_declaration_return class_member_declaration()
    {

        csParser.class_member_declaration_return retval = new csParser.class_member_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int class_member_declaration_StartIndex = input.Index;
        object root_0 = null;

        csParser.constant_declaration_return constant_declaration649 = default(csParser.constant_declaration_return);
        csParser.field_declaration_return field_declaration650 = default(csParser.field_declaration_return);
        csParser.method_declaration_return method_declaration651 = default(csParser.method_declaration_return);
        csParser.property_declaration_return property_declaration652 = default(csParser.property_declaration_return);
        csParser.event_declaration_return event_declaration653 = default(csParser.event_declaration_return);
        csParser.indexer_declaration_return indexer_declaration654 = default(csParser.indexer_declaration_return);
        csParser.operator_declaration_return operator_declaration655 = default(csParser.operator_declaration_return);
        csParser.constructor_declaration_return constructor_declaration656 = default(csParser.constructor_declaration_return);
        csParser.destructor_declaration_return destructor_declaration657 = default(csParser.destructor_declaration_return);
        csParser.static_constructor_declaration_return static_constructor_declaration658 = default(csParser.static_constructor_declaration_return);
        csParser.type_declaration_return type_declaration659 = default(csParser.type_declaration_return);
        csParser.class_declaration_return class_declaration660 = default(csParser.class_declaration_return);


    	try { DebugEnterRule(GrammarFileName, "class_member_declaration");
    	DebugLocation(660, 21);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 188)) { return retval; }
    		// cs.g:660:25: ( constant_declaration | field_declaration | method_declaration | property_declaration | event_declaration | indexer_declaration | operator_declaration | constructor_declaration | destructor_declaration | static_constructor_declaration | type_declaration | class_declaration )
    		int alt215=12;
    		try { DebugEnterDecision(215, decisionCanBacktrack[215]);
    		try
    		{
    			alt215 = dfa215.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(215); }
    		switch (alt215)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:661:2: constant_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(661, 2);
    			PushFollow(Follow._constant_declaration_in_class_member_declaration4689);
    			constant_declaration649=constant_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, constant_declaration649.Tree, constant_declaration649, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:662:4: field_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(662, 4);
    			PushFollow(Follow._field_declaration_in_class_member_declaration4694);
    			field_declaration650=field_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, field_declaration650.Tree, field_declaration650, retval);

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:663:4: method_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(663, 4);
    			PushFollow(Follow._method_declaration_in_class_member_declaration4699);
    			method_declaration651=method_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, method_declaration651.Tree, method_declaration651, retval);

    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// cs.g:664:4: property_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(664, 4);
    			PushFollow(Follow._property_declaration_in_class_member_declaration4704);
    			property_declaration652=property_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, property_declaration652.Tree, property_declaration652, retval);

    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// cs.g:665:4: event_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(665, 4);
    			PushFollow(Follow._event_declaration_in_class_member_declaration4709);
    			event_declaration653=event_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, event_declaration653.Tree, event_declaration653, retval);

    			}
    			break;
    		case 6:
    			DebugEnterAlt(6);
    			// cs.g:666:4: indexer_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(666, 4);
    			PushFollow(Follow._indexer_declaration_in_class_member_declaration4714);
    			indexer_declaration654=indexer_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, indexer_declaration654.Tree, indexer_declaration654, retval);

    			}
    			break;
    		case 7:
    			DebugEnterAlt(7);
    			// cs.g:667:4: operator_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(667, 4);
    			PushFollow(Follow._operator_declaration_in_class_member_declaration4719);
    			operator_declaration655=operator_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, operator_declaration655.Tree, operator_declaration655, retval);

    			}
    			break;
    		case 8:
    			DebugEnterAlt(8);
    			// cs.g:668:4: constructor_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(668, 4);
    			PushFollow(Follow._constructor_declaration_in_class_member_declaration4724);
    			constructor_declaration656=constructor_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, constructor_declaration656.Tree, constructor_declaration656, retval);

    			}
    			break;
    		case 9:
    			DebugEnterAlt(9);
    			// cs.g:669:4: destructor_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(669, 4);
    			PushFollow(Follow._destructor_declaration_in_class_member_declaration4729);
    			destructor_declaration657=destructor_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, destructor_declaration657.Tree, destructor_declaration657, retval);

    			}
    			break;
    		case 10:
    			DebugEnterAlt(10);
    			// cs.g:670:4: static_constructor_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(670, 4);
    			PushFollow(Follow._static_constructor_declaration_in_class_member_declaration4734);
    			static_constructor_declaration658=static_constructor_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, static_constructor_declaration658.Tree, static_constructor_declaration658, retval);

    			}
    			break;
    		case 11:
    			DebugEnterAlt(11);
    			// cs.g:671:4: type_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(671, 4);
    			PushFollow(Follow._type_declaration_in_class_member_declaration4739);
    			type_declaration659=type_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_declaration659.Tree, type_declaration659, retval);

    			}
    			break;
    		case 12:
    			DebugEnterAlt(12);
    			// cs.g:672:4: class_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(672, 4);
    			PushFollow(Follow._class_declaration_in_class_member_declaration4745);
    			class_declaration660=class_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, class_declaration660.Tree, class_declaration660, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 188, class_member_declaration_StartIndex); }
        }
     	DebugLocation(672, 21);
    	} finally { DebugExitRule(GrammarFileName, "class_member_declaration"); }
    	return retval;

    }
    // $ANTLR end "class_member_declaration"

    public class constant_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_constant_declaration() {}
    protected virtual void Leave_constant_declaration() {}

    // $ANTLR start "constant_declaration"
    // cs.g:673:1: constant_declaration : ( attributes )? ( constant_modifiers )? 'const' type constant_declarators ';' ;
    [GrammarRule("constant_declaration")]
    public csParser.constant_declaration_return constant_declaration()
    {

        csParser.constant_declaration_return retval = new csParser.constant_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int constant_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal663=null;
        IToken char_literal666=null;
        csParser.attributes_return attributes661 = default(csParser.attributes_return);
        csParser.constant_modifiers_return constant_modifiers662 = default(csParser.constant_modifiers_return);
        csParser.type_return type664 = default(csParser.type_return);
        csParser.constant_declarators_return constant_declarators665 = default(csParser.constant_declarators_return);

        object string_literal663_tree=null;
        object char_literal666_tree=null;

    	try { DebugEnterRule(GrammarFileName, "constant_declaration");
    	DebugLocation(673, 81);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 189)) { return retval; }
    		// cs.g:673:21: ( ( attributes )? ( constant_modifiers )? 'const' type constant_declarators ';' )
    		DebugEnterAlt(1);
    		// cs.g:674:2: ( attributes )? ( constant_modifiers )? 'const' type constant_declarators ';'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(674, 2);
    		// cs.g:674:2: ( attributes )?
    		int alt216=2;
    		try { DebugEnterSubRule(216);
    		try { DebugEnterDecision(216, decisionCanBacktrack[216]);
    		int LA216_0 = input.LA(1);

    		if ((LA216_0==97))
    		{
    			alt216=1;
    		}
    		} finally { DebugExitDecision(216); }
    		switch (alt216)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(674, 2);
    			PushFollow(Follow._attributes_in_constant_declaration4753);
    			attributes661=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes661.Tree, attributes661, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(216); }

    		DebugLocation(674, 16);
    		// cs.g:674:16: ( constant_modifiers )?
    		int alt217=2;
    		try { DebugEnterSubRule(217);
    		try { DebugEnterDecision(217, decisionCanBacktrack[217]);
    		int LA217_0 = input.LA(1);

    		if ((LA217_0==138||(LA217_0>=170 && LA217_0<=173)))
    		{
    			alt217=1;
    		}
    		} finally { DebugExitDecision(217); }
    		switch (alt217)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: constant_modifiers
    			{
    			DebugLocation(674, 16);
    			PushFollow(Follow._constant_modifiers_in_constant_declaration4758);
    			constant_modifiers662=constant_modifiers();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, constant_modifiers662.Tree, constant_modifiers662, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(217); }

    		DebugLocation(674, 38);
    		string_literal663=(IToken)Match(input,194,Follow._194_in_constant_declaration4763); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal663_tree = (object)adaptor.Create(string_literal663, retval);
    		adaptor.AddChild(root_0, string_literal663_tree);
    		}
    		DebugLocation(674, 48);
    		PushFollow(Follow._type_in_constant_declaration4767);
    		type664=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type664.Tree, type664, retval);
    		DebugLocation(674, 55);
    		PushFollow(Follow._constant_declarators_in_constant_declaration4771);
    		constant_declarators665=constant_declarators();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, constant_declarators665.Tree, constant_declarators665, retval);
    		DebugLocation(674, 78);
    		char_literal666=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_constant_declaration4775), "SEMI"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal666_tree = (object)adaptor.Create(char_literal666, retval);
    		adaptor.AddChild(root_0, char_literal666_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 189, constant_declaration_StartIndex); }
        }
     	DebugLocation(674, 81);
    	} finally { DebugExitRule(GrammarFileName, "constant_declaration"); }
    	return retval;

    }
    // $ANTLR end "constant_declaration"

    public class constant_modifiers_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_constant_modifiers() {}
    protected virtual void Leave_constant_modifiers() {}

    // $ANTLR start "constant_modifiers"
    // cs.g:675:1: constant_modifiers : ( constant_modifier )+ ;
    [GrammarRule("constant_modifiers")]
    public csParser.constant_modifiers_return constant_modifiers()
    {

        csParser.constant_modifiers_return retval = new csParser.constant_modifiers_return();
        retval.Start = (IToken)input.LT(1);
        int constant_modifiers_StartIndex = input.Index;
        object root_0 = null;

        csParser.constant_modifier_return constant_modifier667 = default(csParser.constant_modifier_return);


    	try { DebugEnterRule(GrammarFileName, "constant_modifiers");
    	DebugLocation(675, 20);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 190)) { return retval; }
    		// cs.g:675:19: ( ( constant_modifier )+ )
    		DebugEnterAlt(1);
    		// cs.g:676:2: ( constant_modifier )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(676, 2);
    		// cs.g:676:2: ( constant_modifier )+
    		int cnt218=0;
    		try { DebugEnterSubRule(218);
    		while (true)
    		{
    			int alt218=2;
    			try { DebugEnterDecision(218, decisionCanBacktrack[218]);
    			int LA218_0 = input.LA(1);

    			if ((LA218_0==138||(LA218_0>=170 && LA218_0<=173)))
    			{
    				alt218=1;
    			}


    			} finally { DebugExitDecision(218); }
    			switch (alt218)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: constant_modifier
    				{
    				DebugLocation(676, 2);
    				PushFollow(Follow._constant_modifier_in_constant_modifiers4783);
    				constant_modifier667=constant_modifier();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, constant_modifier667.Tree, constant_modifier667, retval);

    				}
    				break;

    			default:
    				if (cnt218 >= 1)
    					goto loop218;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee218 = new EarlyExitException( 218, input );
    				DebugRecognitionException(eee218);
    				throw eee218;
    			}
    			cnt218++;
    		}
    		loop218:
    			;

    		} finally { DebugExitSubRule(218); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 190, constant_modifiers_StartIndex); }
        }
     	DebugLocation(676, 20);
    	} finally { DebugExitRule(GrammarFileName, "constant_modifiers"); }
    	return retval;

    }
    // $ANTLR end "constant_modifiers"

    public class constant_modifier_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_constant_modifier() {}
    protected virtual void Leave_constant_modifier() {}

    // $ANTLR start "constant_modifier"
    // cs.g:677:1: constant_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' );
    [GrammarRule("constant_modifier")]
    public csParser.constant_modifier_return constant_modifier()
    {

        csParser.constant_modifier_return retval = new csParser.constant_modifier_return();
        retval.Start = (IToken)input.LT(1);
        int constant_modifier_StartIndex = input.Index;
        object root_0 = null;

        IToken set668=null;

        object set668_tree=null;

    	try { DebugEnterRule(GrammarFileName, "constant_modifier");
    	DebugLocation(677, 57);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 191)) { return retval; }
    		// cs.g:677:18: ( 'new' | 'public' | 'protected' | 'internal' | 'private' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(677, 18);
    		set668=(IToken)input.LT(1);
    		if (input.LA(1)==138||(input.LA(1)>=170 && input.LA(1)<=173))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set668, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 191, constant_modifier_StartIndex); }
        }
     	DebugLocation(678, 57);
    	} finally { DebugExitRule(GrammarFileName, "constant_modifier"); }
    	return retval;

    }
    // $ANTLR end "constant_modifier"

    public class field_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_field_declaration() {}
    protected virtual void Leave_field_declaration() {}

    // $ANTLR start "field_declaration"
    // cs.g:679:1: field_declaration : ( attributes )? ( field_modifiers )? type variable_declarators ';' ;
    [GrammarRule("field_declaration")]
    public csParser.field_declaration_return field_declaration()
    {

        csParser.field_declaration_return retval = new csParser.field_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int field_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal673=null;
        csParser.attributes_return attributes669 = default(csParser.attributes_return);
        csParser.field_modifiers_return field_modifiers670 = default(csParser.field_modifiers_return);
        csParser.type_return type671 = default(csParser.type_return);
        csParser.variable_declarators_return variable_declarators672 = default(csParser.variable_declarators_return);

        object char_literal673_tree=null;

    	try { DebugEnterRule(GrammarFileName, "field_declaration");
    	DebugLocation(679, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 192)) { return retval; }
    		// cs.g:679:18: ( ( attributes )? ( field_modifiers )? type variable_declarators ';' )
    		DebugEnterAlt(1);
    		// cs.g:680:2: ( attributes )? ( field_modifiers )? type variable_declarators ';'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(680, 2);
    		// cs.g:680:2: ( attributes )?
    		int alt219=2;
    		try { DebugEnterSubRule(219);
    		try { DebugEnterDecision(219, decisionCanBacktrack[219]);
    		int LA219_0 = input.LA(1);

    		if ((LA219_0==97))
    		{
    			alt219=1;
    		}
    		} finally { DebugExitDecision(219); }
    		switch (alt219)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(680, 2);
    			PushFollow(Follow._attributes_in_field_declaration4816);
    			attributes669=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes669.Tree, attributes669, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(219); }

    		DebugLocation(680, 16);
    		// cs.g:680:16: ( field_modifiers )?
    		int alt220=2;
    		try { DebugEnterSubRule(220);
    		try { DebugEnterDecision(220, decisionCanBacktrack[220]);
    		int LA220_0 = input.LA(1);

    		if ((LA220_0==138||(LA220_0>=170 && LA220_0<=174)||LA220_0==192||(LA220_0>=195 && LA220_0<=196)))
    		{
    			alt220=1;
    		}
    		} finally { DebugExitDecision(220); }
    		switch (alt220)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: field_modifiers
    			{
    			DebugLocation(680, 16);
    			PushFollow(Follow._field_modifiers_in_field_declaration4821);
    			field_modifiers670=field_modifiers();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, field_modifiers670.Tree, field_modifiers670, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(220); }

    		DebugLocation(680, 35);
    		PushFollow(Follow._type_in_field_declaration4826);
    		type671=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type671.Tree, type671, retval);
    		DebugLocation(680, 42);
    		PushFollow(Follow._variable_declarators_in_field_declaration4830);
    		variable_declarators672=variable_declarators();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, variable_declarators672.Tree, variable_declarators672, retval);
    		DebugLocation(680, 65);
    		char_literal673=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_field_declaration4834), "SEMI"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal673_tree = (object)adaptor.Create(char_literal673, retval);
    		adaptor.AddChild(root_0, char_literal673_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 192, field_declaration_StartIndex); }
        }
     	DebugLocation(681, 1);
    	} finally { DebugExitRule(GrammarFileName, "field_declaration"); }
    	return retval;

    }
    // $ANTLR end "field_declaration"

    public class field_modifiers_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_field_modifiers() {}
    protected virtual void Leave_field_modifiers() {}

    // $ANTLR start "field_modifiers"
    // cs.g:682:1: field_modifiers : ( field_modifier )+ ;
    [GrammarRule("field_modifiers")]
    public csParser.field_modifiers_return field_modifiers()
    {

        csParser.field_modifiers_return retval = new csParser.field_modifiers_return();
        retval.Start = (IToken)input.LT(1);
        int field_modifiers_StartIndex = input.Index;
        object root_0 = null;

        csParser.field_modifier_return field_modifier674 = default(csParser.field_modifier_return);


    	try { DebugEnterRule(GrammarFileName, "field_modifiers");
    	DebugLocation(682, 17);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 193)) { return retval; }
    		// cs.g:682:16: ( ( field_modifier )+ )
    		DebugEnterAlt(1);
    		// cs.g:683:2: ( field_modifier )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(683, 2);
    		// cs.g:683:2: ( field_modifier )+
    		int cnt221=0;
    		try { DebugEnterSubRule(221);
    		while (true)
    		{
    			int alt221=2;
    			try { DebugEnterDecision(221, decisionCanBacktrack[221]);
    			int LA221_0 = input.LA(1);

    			if ((LA221_0==138||(LA221_0>=170 && LA221_0<=174)||LA221_0==192||(LA221_0>=195 && LA221_0<=196)))
    			{
    				alt221=1;
    			}


    			} finally { DebugExitDecision(221); }
    			switch (alt221)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: field_modifier
    				{
    				DebugLocation(683, 2);
    				PushFollow(Follow._field_modifier_in_field_modifiers4843);
    				field_modifier674=field_modifier();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, field_modifier674.Tree, field_modifier674, retval);

    				}
    				break;

    			default:
    				if (cnt221 >= 1)
    					goto loop221;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee221 = new EarlyExitException( 221, input );
    				DebugRecognitionException(eee221);
    				throw eee221;
    			}
    			cnt221++;
    		}
    		loop221:
    			;

    		} finally { DebugExitSubRule(221); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 193, field_modifiers_StartIndex); }
        }
     	DebugLocation(683, 17);
    	} finally { DebugExitRule(GrammarFileName, "field_modifiers"); }
    	return retval;

    }
    // $ANTLR end "field_modifiers"

    public class field_modifier_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_field_modifier() {}
    protected virtual void Leave_field_modifier() {}

    // $ANTLR start "field_modifier"
    // cs.g:684:1: field_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'readonly' | 'volatile' | 'unsafe' );
    [GrammarRule("field_modifier")]
    public csParser.field_modifier_return field_modifier()
    {

        csParser.field_modifier_return retval = new csParser.field_modifier_return();
        retval.Start = (IToken)input.LT(1);
        int field_modifier_StartIndex = input.Index;
        object root_0 = null;

        IToken set675=null;

        object set675_tree=null;

    	try { DebugEnterRule(GrammarFileName, "field_modifier");
    	DebugLocation(684, 105);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 194)) { return retval; }
    		// cs.g:684:15: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'readonly' | 'volatile' | 'unsafe' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(684, 15);
    		set675=(IToken)input.LT(1);
    		if (input.LA(1)==138||(input.LA(1)>=170 && input.LA(1)<=174)||input.LA(1)==192||(input.LA(1)>=195 && input.LA(1)<=196))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set675, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 194, field_modifier_StartIndex); }
        }
     	DebugLocation(685, 105);
    	} finally { DebugExitRule(GrammarFileName, "field_modifier"); }
    	return retval;

    }
    // $ANTLR end "field_modifier"

    public class variable_declarators_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_variable_declarators() {}
    protected virtual void Leave_variable_declarators() {}

    // $ANTLR start "variable_declarators"
    // cs.g:686:1: variable_declarators : variable_declarator ( ',' variable_declarator )* ;
    [GrammarRule("variable_declarators")]
    public csParser.variable_declarators_return variable_declarators()
    {

        csParser.variable_declarators_return retval = new csParser.variable_declarators_return();
        retval.Start = (IToken)input.LT(1);
        int variable_declarators_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal677=null;
        csParser.variable_declarator_return variable_declarator676 = default(csParser.variable_declarator_return);
        csParser.variable_declarator_return variable_declarator678 = default(csParser.variable_declarator_return);

        object char_literal677_tree=null;

    	try { DebugEnterRule(GrammarFileName, "variable_declarators");
    	DebugLocation(686, 48);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 195)) { return retval; }
    		// cs.g:686:21: ( variable_declarator ( ',' variable_declarator )* )
    		DebugEnterAlt(1);
    		// cs.g:687:2: variable_declarator ( ',' variable_declarator )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(687, 2);
    		PushFollow(Follow._variable_declarator_in_variable_declarators4892);
    		variable_declarator676=variable_declarator();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, variable_declarator676.Tree, variable_declarator676, retval);
    		DebugLocation(687, 22);
    		// cs.g:687:22: ( ',' variable_declarator )*
    		try { DebugEnterSubRule(222);
    		while (true)
    		{
    			int alt222=2;
    			try { DebugEnterDecision(222, decisionCanBacktrack[222]);
    			int LA222_0 = input.LA(1);

    			if ((LA222_0==98))
    			{
    				alt222=1;
    			}


    			} finally { DebugExitDecision(222); }
    			switch ( alt222 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:687:23: ',' variable_declarator
    				{
    				DebugLocation(687, 23);
    				char_literal677=(IToken)Match(input,98,Follow._98_in_variable_declarators4895); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal677_tree = (object)adaptor.Create(char_literal677, retval);
    				adaptor.AddChild(root_0, char_literal677_tree);
    				}
    				DebugLocation(687, 27);
    				PushFollow(Follow._variable_declarator_in_variable_declarators4897);
    				variable_declarator678=variable_declarator();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, variable_declarator678.Tree, variable_declarator678, retval);

    				}
    				break;

    			default:
    				goto loop222;
    			}
    		}

    		loop222:
    			;

    		} finally { DebugExitSubRule(222); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 195, variable_declarators_StartIndex); }
        }
     	DebugLocation(687, 48);
    	} finally { DebugExitRule(GrammarFileName, "variable_declarators"); }
    	return retval;

    }
    // $ANTLR end "variable_declarators"

    public class variable_declarator_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_variable_declarator() {}
    protected virtual void Leave_variable_declarator() {}

    // $ANTLR start "variable_declarator"
    // cs.g:688:1: variable_declarator : type_name ( '=' variable_initializer )? ;
    [GrammarRule("variable_declarator")]
    public csParser.variable_declarator_return variable_declarator()
    {

        csParser.variable_declarator_return retval = new csParser.variable_declarator_return();
        retval.Start = (IToken)input.LT(1);
        int variable_declarator_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal680=null;
        csParser.type_name_return type_name679 = default(csParser.type_name_return);
        csParser.variable_initializer_return variable_initializer681 = default(csParser.variable_initializer_return);

        object char_literal680_tree=null;

    	try { DebugEnterRule(GrammarFileName, "variable_declarator");
    	DebugLocation(688, 41);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 196)) { return retval; }
    		// cs.g:688:20: ( type_name ( '=' variable_initializer )? )
    		DebugEnterAlt(1);
    		// cs.g:690:2: type_name ( '=' variable_initializer )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(690, 2);
    		PushFollow(Follow._type_name_in_variable_declarator4908);
    		type_name679=type_name();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_name679.Tree, type_name679, retval);
    		DebugLocation(690, 12);
    		// cs.g:690:12: ( '=' variable_initializer )?
    		int alt223=2;
    		try { DebugEnterSubRule(223);
    		try { DebugEnterDecision(223, decisionCanBacktrack[223]);
    		int LA223_0 = input.LA(1);

    		if ((LA223_0==96))
    		{
    			alt223=1;
    		}
    		} finally { DebugExitDecision(223); }
    		switch (alt223)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:690:13: '=' variable_initializer
    			{
    			DebugLocation(690, 13);
    			char_literal680=(IToken)Match(input,96,Follow._96_in_variable_declarator4911); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal680_tree = (object)adaptor.Create(char_literal680, retval);
    			adaptor.AddChild(root_0, char_literal680_tree);
    			}
    			DebugLocation(690, 19);
    			PushFollow(Follow._variable_initializer_in_variable_declarator4915);
    			variable_initializer681=variable_initializer();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, variable_initializer681.Tree, variable_initializer681, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(223); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 196, variable_declarator_StartIndex); }
        }
     	DebugLocation(690, 41);
    	} finally { DebugExitRule(GrammarFileName, "variable_declarator"); }
    	return retval;

    }
    // $ANTLR end "variable_declarator"

    public class variable_initializer_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_variable_initializer() {}
    protected virtual void Leave_variable_initializer() {}

    // $ANTLR start "variable_initializer"
    // cs.g:691:1: variable_initializer : ( expression | array_initializer );
    [GrammarRule("variable_initializer")]
    public csParser.variable_initializer_return variable_initializer()
    {

        csParser.variable_initializer_return retval = new csParser.variable_initializer_return();
        retval.Start = (IToken)input.LT(1);
        int variable_initializer_StartIndex = input.Index;
        object root_0 = null;

        csParser.expression_return expression682 = default(csParser.expression_return);
        csParser.array_initializer_return array_initializer683 = default(csParser.array_initializer_return);


    	try { DebugEnterRule(GrammarFileName, "variable_initializer");
    	DebugLocation(691, 32);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 197)) { return retval; }
    		// cs.g:691:21: ( expression | array_initializer )
    		int alt224=2;
    		try { DebugEnterDecision(224, decisionCanBacktrack[224]);
    		int LA224_0 = input.LA(1);

    		if (((LA224_0>=IDENTIFIER && LA224_0<=NULL)||LA224_0==MINUS||LA224_0==SET||(LA224_0>=90 && LA224_0<=91)||LA224_0==95||(LA224_0>=101 && LA224_0<=107)||(LA224_0>=109 && LA224_0<=111)||(LA224_0>=114 && LA224_0<=122)||(LA224_0>=124 && LA224_0<=129)||(LA224_0>=132 && LA224_0<=144)||(LA224_0>=175 && LA224_0<=187)||LA224_0==199||(LA224_0>=201 && LA224_0<=202)||LA224_0==208||(LA224_0>=225 && LA224_0<=226)))
    		{
    			alt224=1;
    		}
    		else if ((LA224_0==92))
    		{
    			alt224=2;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 224, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(224); }
    		switch (alt224)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:692:2: expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(692, 2);
    			PushFollow(Follow._expression_in_variable_initializer4927);
    			expression682=expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression682.Tree, expression682, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:692:15: array_initializer
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(692, 15);
    			PushFollow(Follow._array_initializer_in_variable_initializer4931);
    			array_initializer683=array_initializer();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, array_initializer683.Tree, array_initializer683, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 197, variable_initializer_StartIndex); }
        }
     	DebugLocation(692, 32);
    	} finally { DebugExitRule(GrammarFileName, "variable_initializer"); }
    	return retval;

    }
    // $ANTLR end "variable_initializer"

    public class method_declarations_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_method_declarations() {}
    protected virtual void Leave_method_declarations() {}

    // $ANTLR start "method_declarations"
    // cs.g:694:1: method_declarations : ( method_declaration )+ ;
    [GrammarRule("method_declarations")]
    public csParser.method_declarations_return method_declarations()
    {

        csParser.method_declarations_return retval = new csParser.method_declarations_return();
        retval.Start = (IToken)input.LT(1);
        int method_declarations_StartIndex = input.Index;
        object root_0 = null;

        csParser.method_declaration_return method_declaration684 = default(csParser.method_declaration_return);


    	try { DebugEnterRule(GrammarFileName, "method_declarations");
    	DebugLocation(694, 21);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 198)) { return retval; }
    		// cs.g:694:20: ( ( method_declaration )+ )
    		DebugEnterAlt(1);
    		// cs.g:695:2: ( method_declaration )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(695, 2);
    		// cs.g:695:2: ( method_declaration )+
    		int cnt225=0;
    		try { DebugEnterSubRule(225);
    		while (true)
    		{
    			int alt225=2;
    			try { DebugEnterDecision(225, decisionCanBacktrack[225]);
    			int LA225_0 = input.LA(1);

    			if ((LA225_0==IDENTIFIER||LA225_0==SET||(LA225_0>=94 && LA225_0<=95)||LA225_0==97||(LA225_0>=101 && LA225_0<=107)||LA225_0==109||(LA225_0>=113 && LA225_0<=122)||(LA225_0>=132 && LA225_0<=138)||(LA225_0>=170 && LA225_0<=188)||(LA225_0>=190 && LA225_0<=192)||(LA225_0>=197 && LA225_0<=199)||(LA225_0>=201 && LA225_0<=202)||LA225_0==208||(LA225_0>=225 && LA225_0<=226)))
    			{
    				alt225=1;
    			}


    			} finally { DebugExitDecision(225); }
    			switch (alt225)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: method_declaration
    				{
    				DebugLocation(695, 2);
    				PushFollow(Follow._method_declaration_in_method_declarations4940);
    				method_declaration684=method_declaration();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, method_declaration684.Tree, method_declaration684, retval);

    				}
    				break;

    			default:
    				if (cnt225 >= 1)
    					goto loop225;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee225 = new EarlyExitException( 225, input );
    				DebugRecognitionException(eee225);
    				throw eee225;
    			}
    			cnt225++;
    		}
    		loop225:
    			;

    		} finally { DebugExitSubRule(225); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 198, method_declarations_StartIndex); }
        }
     	DebugLocation(695, 21);
    	} finally { DebugExitRule(GrammarFileName, "method_declarations"); }
    	return retval;

    }
    // $ANTLR end "method_declarations"

    public class method_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_method_declaration() {}
    protected virtual void Leave_method_declaration() {}

    // $ANTLR start "method_declaration"
    // cs.g:696:1: method_declaration : method_header method_body ;
    [GrammarRule("method_declaration")]
    public csParser.method_declaration_return method_declaration()
    {

        csParser.method_declaration_return retval = new csParser.method_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int method_declaration_StartIndex = input.Index;
        object root_0 = null;

        csParser.method_header_return method_header685 = default(csParser.method_header_return);
        csParser.method_body_return method_body686 = default(csParser.method_body_return);


    	try { DebugEnterRule(GrammarFileName, "method_declaration");
    	DebugLocation(696, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 199)) { return retval; }
    		// cs.g:696:19: ( method_header method_body )
    		DebugEnterAlt(1);
    		// cs.g:697:2: method_header method_body
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(697, 2);
    		PushFollow(Follow._method_header_in_method_declaration4950);
    		method_header685=method_header();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, method_header685.Tree, method_header685, retval);
    		DebugLocation(697, 18);
    		PushFollow(Follow._method_body_in_method_declaration4954);
    		method_body686=method_body();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, method_body686.Tree, method_body686, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 199, method_declaration_StartIndex); }
        }
     	DebugLocation(698, 1);
    	} finally { DebugExitRule(GrammarFileName, "method_declaration"); }
    	return retval;

    }
    // $ANTLR end "method_declaration"

    public class method_header_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_method_header() {}
    protected virtual void Leave_method_header() {}

    // $ANTLR start "method_header"
    // cs.g:699:1: method_header : ( attributes )? ( method_modifiers )? ( 'partial' )? return_type member_name ( generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ;
    [GrammarRule("method_header")]
    public csParser.method_header_return method_header()
    {

        csParser.method_header_return retval = new csParser.method_header_return();
        retval.Start = (IToken)input.LT(1);
        int method_header_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal689=null;
        IToken char_literal693=null;
        IToken char_literal695=null;
        csParser.attributes_return attributes687 = default(csParser.attributes_return);
        csParser.method_modifiers_return method_modifiers688 = default(csParser.method_modifiers_return);
        csParser.return_type_return return_type690 = default(csParser.return_type_return);
        csParser.member_name_return member_name691 = default(csParser.member_name_return);
        csParser.generic_parameter_list_return generic_parameter_list692 = default(csParser.generic_parameter_list_return);
        csParser.formal_parameter_list_return formal_parameter_list694 = default(csParser.formal_parameter_list_return);
        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses696 = default(csParser.type_parameter_constraints_clauses_return);

        object string_literal689_tree=null;
        object char_literal693_tree=null;
        object char_literal695_tree=null;

    	try { DebugEnterRule(GrammarFileName, "method_header");
    	DebugLocation(699, 76);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 200)) { return retval; }
    		// cs.g:699:14: ( ( attributes )? ( method_modifiers )? ( 'partial' )? return_type member_name ( generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? )
    		DebugEnterAlt(1);
    		// cs.g:700:2: ( attributes )? ( method_modifiers )? ( 'partial' )? return_type member_name ( generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(700, 2);
    		// cs.g:700:2: ( attributes )?
    		int alt226=2;
    		try { DebugEnterSubRule(226);
    		try { DebugEnterDecision(226, decisionCanBacktrack[226]);
    		int LA226_0 = input.LA(1);

    		if ((LA226_0==97))
    		{
    			alt226=1;
    		}
    		} finally { DebugExitDecision(226); }
    		switch (alt226)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(700, 2);
    			PushFollow(Follow._attributes_in_method_header4964);
    			attributes687=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes687.Tree, attributes687, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(226); }

    		DebugLocation(700, 16);
    		// cs.g:700:16: ( method_modifiers )?
    		int alt227=2;
    		try { DebugEnterSubRule(227);
    		try { DebugEnterDecision(227, decisionCanBacktrack[227]);
    		int LA227_0 = input.LA(1);

    		if ((LA227_0==94||LA227_0==138||(LA227_0>=170 && LA227_0<=174)||(LA227_0>=190 && LA227_0<=192)||(LA227_0>=197 && LA227_0<=198)))
    		{
    			alt227=1;
    		}
    		} finally { DebugExitDecision(227); }
    		switch (alt227)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: method_modifiers
    			{
    			DebugLocation(700, 16);
    			PushFollow(Follow._method_modifiers_in_method_header4969);
    			method_modifiers688=method_modifiers();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, method_modifiers688.Tree, method_modifiers688, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(227); }

    		DebugLocation(700, 36);
    		// cs.g:700:36: ( 'partial' )?
    		int alt228=2;
    		try { DebugEnterSubRule(228);
    		try { DebugEnterDecision(228, decisionCanBacktrack[228]);
    		int LA228_0 = input.LA(1);

    		if ((LA228_0==188))
    		{
    			alt228=1;
    		}
    		} finally { DebugExitDecision(228); }
    		switch (alt228)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: 'partial'
    			{
    			DebugLocation(700, 36);
    			string_literal689=(IToken)Match(input,188,Follow._188_in_method_header4974); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal689_tree = (object)adaptor.Create(string_literal689, retval);
    			adaptor.AddChild(root_0, string_literal689_tree);
    			}

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(228); }

    		DebugLocation(700, 49);
    		PushFollow(Follow._return_type_in_method_header4979);
    		return_type690=return_type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, return_type690.Tree, return_type690, retval);
    		DebugLocation(700, 63);
    		PushFollow(Follow._member_name_in_method_header4983);
    		member_name691=member_name();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, member_name691.Tree, member_name691, retval);
    		DebugLocation(700, 77);
    		// cs.g:700:77: ( generic_parameter_list )?
    		int alt229=2;
    		try { DebugEnterSubRule(229);
    		try { DebugEnterDecision(229, decisionCanBacktrack[229]);
    		int LA229_0 = input.LA(1);

    		if ((LA229_0==123))
    		{
    			alt229=1;
    		}
    		} finally { DebugExitDecision(229); }
    		switch (alt229)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: generic_parameter_list
    			{
    			DebugLocation(700, 77);
    			PushFollow(Follow._generic_parameter_list_in_method_header4987);
    			generic_parameter_list692=generic_parameter_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, generic_parameter_list692.Tree, generic_parameter_list692, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(229); }

    		DebugLocation(701, 4);
    		char_literal693=(IToken)Match(input,110,Follow._110_in_method_header4993); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal693_tree = (object)adaptor.Create(char_literal693, retval);
    		adaptor.AddChild(root_0, char_literal693_tree);
    		}
    		DebugLocation(701, 10);
    		// cs.g:701:10: ( formal_parameter_list )?
    		int alt230=2;
    		try { DebugEnterSubRule(230);
    		try { DebugEnterDecision(230, decisionCanBacktrack[230]);
    		int LA230_0 = input.LA(1);

    		if ((LA230_0==IDENTIFIER||LA230_0==SET||LA230_0==90||LA230_0==95||LA230_0==97||(LA230_0>=101 && LA230_0<=107)||LA230_0==109||(LA230_0>=113 && LA230_0<=122)||(LA230_0>=130 && LA230_0<=137)||(LA230_0>=175 && LA230_0<=187)||(LA230_0>=199 && LA230_0<=202)||LA230_0==208||(LA230_0>=225 && LA230_0<=226)))
    		{
    			alt230=1;
    		}
    		} finally { DebugExitDecision(230); }
    		switch (alt230)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: formal_parameter_list
    			{
    			DebugLocation(701, 10);
    			PushFollow(Follow._formal_parameter_list_in_method_header4997);
    			formal_parameter_list694=formal_parameter_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, formal_parameter_list694.Tree, formal_parameter_list694, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(230); }

    		DebugLocation(701, 35);
    		char_literal695=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_method_header5002), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal695_tree = (object)adaptor.Create(char_literal695, retval);
    		adaptor.AddChild(root_0, char_literal695_tree);
    		}
    		DebugLocation(701, 41);
    		// cs.g:701:41: ( type_parameter_constraints_clauses )?
    		int alt231=2;
    		try { DebugEnterSubRule(231);
    		try { DebugEnterDecision(231, decisionCanBacktrack[231]);
    		int LA231_0 = input.LA(1);

    		if ((LA231_0==187))
    		{
    			alt231=1;
    		}
    		} finally { DebugExitDecision(231); }
    		switch (alt231)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: type_parameter_constraints_clauses
    			{
    			DebugLocation(701, 41);
    			PushFollow(Follow._type_parameter_constraints_clauses_in_method_header5006);
    			type_parameter_constraints_clauses696=type_parameter_constraints_clauses();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_parameter_constraints_clauses696.Tree, type_parameter_constraints_clauses696, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(231); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 200, method_header_StartIndex); }
        }
     	DebugLocation(701, 76);
    	} finally { DebugExitRule(GrammarFileName, "method_header"); }
    	return retval;

    }
    // $ANTLR end "method_header"

    public class method_modifiers_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_method_modifiers() {}
    protected virtual void Leave_method_modifiers() {}

    // $ANTLR start "method_modifiers"
    // cs.g:702:1: method_modifiers : ( method_modifier )+ ;
    [GrammarRule("method_modifiers")]
    public csParser.method_modifiers_return method_modifiers()
    {

        csParser.method_modifiers_return retval = new csParser.method_modifiers_return();
        retval.Start = (IToken)input.LT(1);
        int method_modifiers_StartIndex = input.Index;
        object root_0 = null;

        csParser.method_modifier_return method_modifier697 = default(csParser.method_modifier_return);


    	try { DebugEnterRule(GrammarFileName, "method_modifiers");
    	DebugLocation(702, 18);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 201)) { return retval; }
    		// cs.g:702:17: ( ( method_modifier )+ )
    		DebugEnterAlt(1);
    		// cs.g:703:2: ( method_modifier )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(703, 2);
    		// cs.g:703:2: ( method_modifier )+
    		int cnt232=0;
    		try { DebugEnterSubRule(232);
    		while (true)
    		{
    			int alt232=2;
    			try { DebugEnterDecision(232, decisionCanBacktrack[232]);
    			int LA232_0 = input.LA(1);

    			if ((LA232_0==94||LA232_0==138||(LA232_0>=170 && LA232_0<=174)||(LA232_0>=190 && LA232_0<=192)||(LA232_0>=197 && LA232_0<=198)))
    			{
    				alt232=1;
    			}


    			} finally { DebugExitDecision(232); }
    			switch (alt232)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: method_modifier
    				{
    				DebugLocation(703, 2);
    				PushFollow(Follow._method_modifier_in_method_modifiers5015);
    				method_modifier697=method_modifier();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, method_modifier697.Tree, method_modifier697, retval);

    				}
    				break;

    			default:
    				if (cnt232 >= 1)
    					goto loop232;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee232 = new EarlyExitException( 232, input );
    				DebugRecognitionException(eee232);
    				throw eee232;
    			}
    			cnt232++;
    		}
    		loop232:
    			;

    		} finally { DebugExitSubRule(232); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 201, method_modifiers_StartIndex); }
        }
     	DebugLocation(703, 18);
    	} finally { DebugExitRule(GrammarFileName, "method_modifiers"); }
    	return retval;

    }
    // $ANTLR end "method_modifiers"

    public class method_modifier_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_method_modifier() {}
    protected virtual void Leave_method_modifier() {}

    // $ANTLR start "method_modifier"
    // cs.g:704:1: method_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'virtual' | 'sealed' | 'override' | 'abstract' | 'extern' | 'unsafe' );
    [GrammarRule("method_modifier")]
    public csParser.method_modifier_return method_modifier()
    {

        csParser.method_modifier_return retval = new csParser.method_modifier_return();
        retval.Start = (IToken)input.LT(1);
        int method_modifier_StartIndex = input.Index;
        object root_0 = null;

        IToken set698=null;

        object set698_tree=null;

    	try { DebugEnterRule(GrammarFileName, "method_modifier");
    	DebugLocation(704, 36);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 202)) { return retval; }
    		// cs.g:704:16: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'virtual' | 'sealed' | 'override' | 'abstract' | 'extern' | 'unsafe' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(704, 16);
    		set698=(IToken)input.LT(1);
    		if (input.LA(1)==94||input.LA(1)==138||(input.LA(1)>=170 && input.LA(1)<=174)||(input.LA(1)>=190 && input.LA(1)<=192)||(input.LA(1)>=197 && input.LA(1)<=198))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set698, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 202, method_modifier_StartIndex); }
        }
     	DebugLocation(706, 36);
    	} finally { DebugExitRule(GrammarFileName, "method_modifier"); }
    	return retval;

    }
    // $ANTLR end "method_modifier"

    public class return_type_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_return_type() {}
    protected virtual void Leave_return_type() {}

    // $ANTLR start "return_type"
    // cs.g:707:1: return_type : ( type | 'void' ( '*' )* );
    [GrammarRule("return_type")]
    public csParser.return_type_return return_type()
    {

        csParser.return_type_return retval = new csParser.return_type_return();
        retval.Start = (IToken)input.LT(1);
        int return_type_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal700=null;
        IToken char_literal701=null;
        csParser.type_return type699 = default(csParser.type_return);

        object string_literal700_tree=null;
        object char_literal701_tree=null;

    	try { DebugEnterRule(GrammarFileName, "return_type");
    	DebugLocation(707, 14);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 203)) { return retval; }
    		// cs.g:707:12: ( type | 'void' ( '*' )* )
    		int alt234=2;
    		try { DebugEnterDecision(234, decisionCanBacktrack[234]);
    		int LA234_0 = input.LA(1);

    		if ((LA234_0==IDENTIFIER||LA234_0==SET||LA234_0==95||(LA234_0>=101 && LA234_0<=107)||LA234_0==109||(LA234_0>=114 && LA234_0<=122)||(LA234_0>=132 && LA234_0<=137)||(LA234_0>=175 && LA234_0<=187)||LA234_0==199||(LA234_0>=201 && LA234_0<=202)||LA234_0==208||(LA234_0>=225 && LA234_0<=226)))
    		{
    			alt234=1;
    		}
    		else if ((LA234_0==113))
    		{
    			int LA234_2 = input.LA(2);

    			if ((LA234_2==111))
    			{
    				int LA234_3 = input.LA(3);

    				if ((EvaluatePredicate(synpred386_cs_fragment)))
    				{
    					alt234=1;
    				}
    				else if ((true))
    				{
    					alt234=2;
    				}
    				else
    				{
    					if (state.backtracking>0) {state.failed=true; return retval;}
    					NoViableAltException nvae = new NoViableAltException("", 234, 3, input);

    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    			}
    			else if (((LA234_2>=IDENTIFIER && LA234_2<=NULL)||LA234_2==SET||(LA234_2>=90 && LA234_2<=91)||LA234_2==95||(LA234_2>=101 && LA234_2<=107)||LA234_2==109||(LA234_2>=114 && LA234_2<=122)||(LA234_2>=132 && LA234_2<=137)||(LA234_2>=175 && LA234_2<=187)||LA234_2==199||(LA234_2>=201 && LA234_2<=202)||LA234_2==208||(LA234_2>=225 && LA234_2<=226)))
    			{
    				alt234=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 234, 2, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 234, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(234); }
    		switch (alt234)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:708:2: type
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(708, 2);
    			PushFollow(Follow._type_in_return_type5077);
    			type699=type();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type699.Tree, type699, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:709:4: 'void' ( '*' )*
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(709, 4);
    			string_literal700=(IToken)Match(input,113,Follow._113_in_return_type5082); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal700_tree = (object)adaptor.Create(string_literal700, retval);
    			adaptor.AddChild(root_0, string_literal700_tree);
    			}
    			DebugLocation(709, 11);
    			// cs.g:709:11: ( '*' )*
    			try { DebugEnterSubRule(233);
    			while (true)
    			{
    				int alt233=2;
    				try { DebugEnterDecision(233, decisionCanBacktrack[233]);
    				int LA233_0 = input.LA(1);

    				if ((LA233_0==111))
    				{
    					alt233=1;
    				}


    				} finally { DebugExitDecision(233); }
    				switch ( alt233 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// cs.g:0:0: '*'
    					{
    					DebugLocation(709, 11);
    					char_literal701=(IToken)Match(input,111,Follow._111_in_return_type5084); if (state.failed) return retval;
    					if ( state.backtracking==0 ) {
    					char_literal701_tree = (object)adaptor.Create(char_literal701, retval);
    					adaptor.AddChild(root_0, char_literal701_tree);
    					}

    					}
    					break;

    				default:
    					goto loop233;
    				}
    			}

    			loop233:
    				;

    			} finally { DebugExitSubRule(233); }


    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 203, return_type_StartIndex); }
        }
     	DebugLocation(709, 14);
    	} finally { DebugExitRule(GrammarFileName, "return_type"); }
    	return retval;

    }
    // $ANTLR end "return_type"

    public class method_body_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_method_body() {}
    protected virtual void Leave_method_body() {}

    // $ANTLR start "method_body"
    // cs.g:710:1: method_body : block ;
    [GrammarRule("method_body")]
    public csParser.method_body_return method_body()
    {

        csParser.method_body_return retval = new csParser.method_body_return();
        retval.Start = (IToken)input.LT(1);
        int method_body_StartIndex = input.Index;
        object root_0 = null;

        csParser.block_return block702 = default(csParser.block_return);


    	try { DebugEnterRule(GrammarFileName, "method_body");
    	DebugLocation(710, 7);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 204)) { return retval; }
    		// cs.g:710:12: ( block )
    		DebugEnterAlt(1);
    		// cs.g:711:2: block
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(711, 2);
    		PushFollow(Follow._block_in_method_body5092);
    		block702=block();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, block702.Tree, block702, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 204, method_body_StartIndex); }
        }
     	DebugLocation(711, 7);
    	} finally { DebugExitRule(GrammarFileName, "method_body"); }
    	return retval;

    }
    // $ANTLR end "method_body"

    public class formal_parameter_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_formal_parameter_list() {}
    protected virtual void Leave_formal_parameter_list() {}

    // $ANTLR start "formal_parameter_list"
    // cs.g:712:1: formal_parameter_list : fp+= formal_parameter ( ',' fp+= formal_parameter )* ;
    [GrammarRule("formal_parameter_list")]
    public csParser.formal_parameter_list_return formal_parameter_list()
    {

        csParser.formal_parameter_list_return retval = new csParser.formal_parameter_list_return();
        retval.Start = (IToken)input.LT(1);
        int formal_parameter_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal703=null;
        List list_fp=null;
        csParser.formal_parameter_return fp = default(csParser.formal_parameter_return);
        object char_literal703_tree=null;

    	try { DebugEnterRule(GrammarFileName, "formal_parameter_list");
    	DebugLocation(712, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 205)) { return retval; }
    		// cs.g:712:22: (fp+= formal_parameter ( ',' fp+= formal_parameter )* )
    		DebugEnterAlt(1);
    		// cs.g:713:2: fp+= formal_parameter ( ',' fp+= formal_parameter )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(713, 5);
    		PushFollow(Follow._formal_parameter_in_formal_parameter_list5104);
    		fp=formal_parameter();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, fp.Tree, fp, retval);
    		if (list_fp==null) list_fp=new ArrayList();
    		list_fp.Add(fp.Tree);

    		DebugLocation(713, 25);
    		// cs.g:713:25: ( ',' fp+= formal_parameter )*
    		try { DebugEnterSubRule(235);
    		while (true)
    		{
    			int alt235=2;
    			try { DebugEnterDecision(235, decisionCanBacktrack[235]);
    			int LA235_0 = input.LA(1);

    			if ((LA235_0==98))
    			{
    				alt235=1;
    			}


    			} finally { DebugExitDecision(235); }
    			switch ( alt235 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:713:26: ',' fp+= formal_parameter
    				{
    				DebugLocation(713, 26);
    				char_literal703=(IToken)Match(input,98,Follow._98_in_formal_parameter_list5107); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal703_tree = (object)adaptor.Create(char_literal703, retval);
    				adaptor.AddChild(root_0, char_literal703_tree);
    				}
    				DebugLocation(713, 33);
    				PushFollow(Follow._formal_parameter_in_formal_parameter_list5113);
    				fp=formal_parameter();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, fp.Tree, fp, retval);
    				if (list_fp==null) list_fp=new ArrayList();
    				list_fp.Add(fp.Tree);


    				}
    				break;

    			default:
    				goto loop235;
    			}
    		}

    		loop235:
    			;

    		} finally { DebugExitSubRule(235); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 205, formal_parameter_list_StartIndex); }
        }
     	DebugLocation(714, 1);
    	} finally { DebugExitRule(GrammarFileName, "formal_parameter_list"); }
    	return retval;

    }
    // $ANTLR end "formal_parameter_list"

    public class formal_parameter_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_formal_parameter() {}
    protected virtual void Leave_formal_parameter() {}

    // $ANTLR start "formal_parameter"
    // cs.g:715:1: formal_parameter : ( fixed_parameter | parameter_array | '__arglist' );
    [GrammarRule("formal_parameter")]
    public csParser.formal_parameter_return formal_parameter()
    {

        csParser.formal_parameter_return retval = new csParser.formal_parameter_return();
        retval.Start = (IToken)input.LT(1);
        int formal_parameter_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal706=null;
        csParser.fixed_parameter_return fixed_parameter704 = default(csParser.fixed_parameter_return);
        csParser.parameter_array_return parameter_array705 = default(csParser.parameter_array_return);

        object string_literal706_tree=null;

    	try { DebugEnterRule(GrammarFileName, "formal_parameter");
    	DebugLocation(715, 48);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 206)) { return retval; }
    		// cs.g:715:17: ( fixed_parameter | parameter_array | '__arglist' )
    		int alt236=3;
    		try { DebugEnterDecision(236, decisionCanBacktrack[236]);
    		try
    		{
    			alt236 = dfa236.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(236); }
    		switch (alt236)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:716:2: fixed_parameter
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(716, 2);
    			PushFollow(Follow._fixed_parameter_in_formal_parameter5125);
    			fixed_parameter704=fixed_parameter();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, fixed_parameter704.Tree, fixed_parameter704, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:716:20: parameter_array
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(716, 20);
    			PushFollow(Follow._parameter_array_in_formal_parameter5129);
    			parameter_array705=parameter_array();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, parameter_array705.Tree, parameter_array705, retval);

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:716:38: '__arglist'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(716, 38);
    			string_literal706=(IToken)Match(input,199,Follow._199_in_formal_parameter5133); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal706_tree = (object)adaptor.Create(string_literal706, retval);
    			adaptor.AddChild(root_0, string_literal706_tree);
    			}

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 206, formal_parameter_StartIndex); }
        }
     	DebugLocation(716, 48);
    	} finally { DebugExitRule(GrammarFileName, "formal_parameter"); }
    	return retval;

    }
    // $ANTLR end "formal_parameter"

    public class fixed_parameters_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_fixed_parameters() {}
    protected virtual void Leave_fixed_parameters() {}

    // $ANTLR start "fixed_parameters"
    // cs.g:717:1: fixed_parameters : ( fixed_parameter )+ ;
    [GrammarRule("fixed_parameters")]
    public csParser.fixed_parameters_return fixed_parameters()
    {

        csParser.fixed_parameters_return retval = new csParser.fixed_parameters_return();
        retval.Start = (IToken)input.LT(1);
        int fixed_parameters_StartIndex = input.Index;
        object root_0 = null;

        csParser.fixed_parameter_return fixed_parameter707 = default(csParser.fixed_parameter_return);


    	try { DebugEnterRule(GrammarFileName, "fixed_parameters");
    	DebugLocation(717, 18);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 207)) { return retval; }
    		// cs.g:717:17: ( ( fixed_parameter )+ )
    		DebugEnterAlt(1);
    		// cs.g:718:2: ( fixed_parameter )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(718, 2);
    		// cs.g:718:2: ( fixed_parameter )+
    		int cnt237=0;
    		try { DebugEnterSubRule(237);
    		while (true)
    		{
    			int alt237=2;
    			try { DebugEnterDecision(237, decisionCanBacktrack[237]);
    			int LA237_0 = input.LA(1);

    			if ((LA237_0==IDENTIFIER||LA237_0==SET||LA237_0==90||LA237_0==95||LA237_0==97||(LA237_0>=101 && LA237_0<=107)||LA237_0==109||(LA237_0>=113 && LA237_0<=122)||(LA237_0>=130 && LA237_0<=137)||(LA237_0>=175 && LA237_0<=187)||LA237_0==199||(LA237_0>=201 && LA237_0<=202)||LA237_0==208||(LA237_0>=225 && LA237_0<=226)))
    			{
    				alt237=1;
    			}


    			} finally { DebugExitDecision(237); }
    			switch (alt237)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: fixed_parameter
    				{
    				DebugLocation(718, 2);
    				PushFollow(Follow._fixed_parameter_in_fixed_parameters5141);
    				fixed_parameter707=fixed_parameter();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, fixed_parameter707.Tree, fixed_parameter707, retval);

    				}
    				break;

    			default:
    				if (cnt237 >= 1)
    					goto loop237;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee237 = new EarlyExitException( 237, input );
    				DebugRecognitionException(eee237);
    				throw eee237;
    			}
    			cnt237++;
    		}
    		loop237:
    			;

    		} finally { DebugExitSubRule(237); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 207, fixed_parameters_StartIndex); }
        }
     	DebugLocation(718, 18);
    	} finally { DebugExitRule(GrammarFileName, "fixed_parameters"); }
    	return retval;

    }
    // $ANTLR end "fixed_parameters"

    public class fixed_parameter_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_fixed_parameter() {}
    protected virtual void Leave_fixed_parameter() {}

    // $ANTLR start "fixed_parameter"
    // cs.g:720:1: fixed_parameter : ( attributes )? ( parameter_modifier )? type identifier ( default_argument )? ;
    [GrammarRule("fixed_parameter")]
    public csParser.fixed_parameter_return fixed_parameter()
    {

        csParser.fixed_parameter_return retval = new csParser.fixed_parameter_return();
        retval.Start = (IToken)input.LT(1);
        int fixed_parameter_StartIndex = input.Index;
        object root_0 = null;

        csParser.attributes_return attributes708 = default(csParser.attributes_return);
        csParser.parameter_modifier_return parameter_modifier709 = default(csParser.parameter_modifier_return);
        csParser.type_return type710 = default(csParser.type_return);
        csParser.identifier_return identifier711 = default(csParser.identifier_return);
        csParser.default_argument_return default_argument712 = default(csParser.default_argument_return);


    	try { DebugEnterRule(GrammarFileName, "fixed_parameter");
    	DebugLocation(720, 72);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 208)) { return retval; }
    		// cs.g:720:16: ( ( attributes )? ( parameter_modifier )? type identifier ( default_argument )? )
    		DebugEnterAlt(1);
    		// cs.g:721:2: ( attributes )? ( parameter_modifier )? type identifier ( default_argument )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(721, 2);
    		// cs.g:721:2: ( attributes )?
    		int alt238=2;
    		try { DebugEnterSubRule(238);
    		try { DebugEnterDecision(238, decisionCanBacktrack[238]);
    		int LA238_0 = input.LA(1);

    		if ((LA238_0==97))
    		{
    			alt238=1;
    		}
    		} finally { DebugExitDecision(238); }
    		switch (alt238)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(721, 2);
    			PushFollow(Follow._attributes_in_fixed_parameter5151);
    			attributes708=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes708.Tree, attributes708, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(238); }

    		DebugLocation(721, 16);
    		// cs.g:721:16: ( parameter_modifier )?
    		int alt239=2;
    		try { DebugEnterSubRule(239);
    		try { DebugEnterDecision(239, decisionCanBacktrack[239]);
    		int LA239_0 = input.LA(1);

    		if ((LA239_0==90||(LA239_0>=130 && LA239_0<=131)))
    		{
    			alt239=1;
    		}
    		} finally { DebugExitDecision(239); }
    		switch (alt239)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: parameter_modifier
    			{
    			DebugLocation(721, 16);
    			PushFollow(Follow._parameter_modifier_in_fixed_parameter5156);
    			parameter_modifier709=parameter_modifier();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, parameter_modifier709.Tree, parameter_modifier709, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(239); }

    		DebugLocation(721, 38);
    		PushFollow(Follow._type_in_fixed_parameter5161);
    		type710=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type710.Tree, type710, retval);
    		DebugLocation(721, 45);
    		PushFollow(Follow._identifier_in_fixed_parameter5165);
    		identifier711=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier711.Tree, identifier711, retval);
    		DebugLocation(721, 56);
    		// cs.g:721:56: ( default_argument )?
    		int alt240=2;
    		try { DebugEnterSubRule(240);
    		try { DebugEnterDecision(240, decisionCanBacktrack[240]);
    		int LA240_0 = input.LA(1);

    		if ((LA240_0==96))
    		{
    			alt240=1;
    		}
    		} finally { DebugExitDecision(240); }
    		switch (alt240)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: default_argument
    			{
    			DebugLocation(721, 56);
    			PushFollow(Follow._default_argument_in_fixed_parameter5167);
    			default_argument712=default_argument();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, default_argument712.Tree, default_argument712, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(240); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 208, fixed_parameter_StartIndex); }
        }
     	DebugLocation(721, 72);
    	} finally { DebugExitRule(GrammarFileName, "fixed_parameter"); }
    	return retval;

    }
    // $ANTLR end "fixed_parameter"

    public class default_argument_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_default_argument() {}
    protected virtual void Leave_default_argument() {}

    // $ANTLR start "default_argument"
    // cs.g:723:1: default_argument : '=' expression ;
    [GrammarRule("default_argument")]
    public csParser.default_argument_return default_argument()
    {

        csParser.default_argument_return retval = new csParser.default_argument_return();
        retval.Start = (IToken)input.LT(1);
        int default_argument_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal713=null;
        csParser.expression_return expression714 = default(csParser.expression_return);

        object char_literal713_tree=null;

    	try { DebugEnterRule(GrammarFileName, "default_argument");
    	DebugLocation(723, 15);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 209)) { return retval; }
    		// cs.g:723:17: ( '=' expression )
    		DebugEnterAlt(1);
    		// cs.g:724:2: '=' expression
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(724, 2);
    		char_literal713=(IToken)Match(input,96,Follow._96_in_default_argument5176); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal713_tree = (object)adaptor.Create(char_literal713, retval);
    		adaptor.AddChild(root_0, char_literal713_tree);
    		}
    		DebugLocation(724, 6);
    		PushFollow(Follow._expression_in_default_argument5178);
    		expression714=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression714.Tree, expression714, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 209, default_argument_StartIndex); }
        }
     	DebugLocation(724, 15);
    	} finally { DebugExitRule(GrammarFileName, "default_argument"); }
    	return retval;

    }
    // $ANTLR end "default_argument"

    public class parameter_modifier_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_parameter_modifier() {}
    protected virtual void Leave_parameter_modifier() {}

    // $ANTLR start "parameter_modifier"
    // cs.g:725:1: parameter_modifier : ( 'ref' | 'out' | 'this' );
    [GrammarRule("parameter_modifier")]
    public csParser.parameter_modifier_return parameter_modifier()
    {

        csParser.parameter_modifier_return retval = new csParser.parameter_modifier_return();
        retval.Start = (IToken)input.LT(1);
        int parameter_modifier_StartIndex = input.Index;
        object root_0 = null;

        IToken set715=null;

        object set715_tree=null;

    	try { DebugEnterRule(GrammarFileName, "parameter_modifier");
    	DebugLocation(725, 24);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 210)) { return retval; }
    		// cs.g:725:19: ( 'ref' | 'out' | 'this' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(725, 19);
    		set715=(IToken)input.LT(1);
    		if (input.LA(1)==90||(input.LA(1)>=130 && input.LA(1)<=131))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set715, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 210, parameter_modifier_StartIndex); }
        }
     	DebugLocation(726, 24);
    	} finally { DebugExitRule(GrammarFileName, "parameter_modifier"); }
    	return retval;

    }
    // $ANTLR end "parameter_modifier"

    public class parameter_array_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_parameter_array() {}
    protected virtual void Leave_parameter_array() {}

    // $ANTLR start "parameter_array"
    // cs.g:727:1: parameter_array : ( attributes )? ( 'params' )? array_type identifier ;
    [GrammarRule("parameter_array")]
    public csParser.parameter_array_return parameter_array()
    {

        csParser.parameter_array_return retval = new csParser.parameter_array_return();
        retval.Start = (IToken)input.LT(1);
        int parameter_array_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal717=null;
        csParser.attributes_return attributes716 = default(csParser.attributes_return);
        csParser.array_type_return array_type718 = default(csParser.array_type_return);
        csParser.identifier_return identifier719 = default(csParser.identifier_return);

        object string_literal717_tree=null;

    	try { DebugEnterRule(GrammarFileName, "parameter_array");
    	DebugLocation(727, 51);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 211)) { return retval; }
    		// cs.g:727:16: ( ( attributes )? ( 'params' )? array_type identifier )
    		DebugEnterAlt(1);
    		// cs.g:728:2: ( attributes )? ( 'params' )? array_type identifier
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(728, 2);
    		// cs.g:728:2: ( attributes )?
    		int alt241=2;
    		try { DebugEnterSubRule(241);
    		try { DebugEnterDecision(241, decisionCanBacktrack[241]);
    		int LA241_0 = input.LA(1);

    		if ((LA241_0==97))
    		{
    			alt241=1;
    		}
    		} finally { DebugExitDecision(241); }
    		switch (alt241)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(728, 2);
    			PushFollow(Follow._attributes_in_parameter_array5201);
    			attributes716=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes716.Tree, attributes716, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(241); }

    		DebugLocation(728, 16);
    		// cs.g:728:16: ( 'params' )?
    		int alt242=2;
    		try { DebugEnterSubRule(242);
    		try { DebugEnterDecision(242, decisionCanBacktrack[242]);
    		int LA242_0 = input.LA(1);

    		if ((LA242_0==200))
    		{
    			alt242=1;
    		}
    		} finally { DebugExitDecision(242); }
    		switch (alt242)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: 'params'
    			{
    			DebugLocation(728, 16);
    			string_literal717=(IToken)Match(input,200,Follow._200_in_parameter_array5206); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal717_tree = (object)adaptor.Create(string_literal717, retval);
    			adaptor.AddChild(root_0, string_literal717_tree);
    			}

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(242); }

    		DebugLocation(728, 28);
    		PushFollow(Follow._array_type_in_parameter_array5211);
    		array_type718=array_type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, array_type718.Tree, array_type718, retval);
    		DebugLocation(728, 41);
    		PushFollow(Follow._identifier_in_parameter_array5215);
    		identifier719=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier719.Tree, identifier719, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 211, parameter_array_StartIndex); }
        }
     	DebugLocation(728, 51);
    	} finally { DebugExitRule(GrammarFileName, "parameter_array"); }
    	return retval;

    }
    // $ANTLR end "parameter_array"

    public class property_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_property_declaration() {}
    protected virtual void Leave_property_declaration() {}

    // $ANTLR start "property_declaration"
    // cs.g:729:1: property_declaration : ( attributes )? ( property_modifiers )? type member_name '{' accessor_declarations '}' ;
    [GrammarRule("property_declaration")]
    public csParser.property_declaration_return property_declaration()
    {

        csParser.property_declaration_return retval = new csParser.property_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int property_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal724=null;
        IToken char_literal726=null;
        csParser.attributes_return attributes720 = default(csParser.attributes_return);
        csParser.property_modifiers_return property_modifiers721 = default(csParser.property_modifiers_return);
        csParser.type_return type722 = default(csParser.type_return);
        csParser.member_name_return member_name723 = default(csParser.member_name_return);
        csParser.accessor_declarations_return accessor_declarations725 = default(csParser.accessor_declarations_return);

        object char_literal724_tree=null;
        object char_literal726_tree=null;

    	try { DebugEnterRule(GrammarFileName, "property_declaration");
    	DebugLocation(729, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 212)) { return retval; }
    		// cs.g:729:21: ( ( attributes )? ( property_modifiers )? type member_name '{' accessor_declarations '}' )
    		DebugEnterAlt(1);
    		// cs.g:730:2: ( attributes )? ( property_modifiers )? type member_name '{' accessor_declarations '}'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(730, 2);
    		// cs.g:730:2: ( attributes )?
    		int alt243=2;
    		try { DebugEnterSubRule(243);
    		try { DebugEnterDecision(243, decisionCanBacktrack[243]);
    		int LA243_0 = input.LA(1);

    		if ((LA243_0==97))
    		{
    			alt243=1;
    		}
    		} finally { DebugExitDecision(243); }
    		switch (alt243)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(730, 2);
    			PushFollow(Follow._attributes_in_property_declaration5223);
    			attributes720=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes720.Tree, attributes720, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(243); }

    		DebugLocation(730, 16);
    		// cs.g:730:16: ( property_modifiers )?
    		int alt244=2;
    		try { DebugEnterSubRule(244);
    		try { DebugEnterDecision(244, decisionCanBacktrack[244]);
    		int LA244_0 = input.LA(1);

    		if ((LA244_0==94||LA244_0==138||(LA244_0>=170 && LA244_0<=174)||(LA244_0>=190 && LA244_0<=192)||(LA244_0>=197 && LA244_0<=198)))
    		{
    			alt244=1;
    		}
    		} finally { DebugExitDecision(244); }
    		switch (alt244)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: property_modifiers
    			{
    			DebugLocation(730, 16);
    			PushFollow(Follow._property_modifiers_in_property_declaration5228);
    			property_modifiers721=property_modifiers();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, property_modifiers721.Tree, property_modifiers721, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(244); }

    		DebugLocation(730, 38);
    		PushFollow(Follow._type_in_property_declaration5233);
    		type722=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type722.Tree, type722, retval);
    		DebugLocation(730, 45);
    		PushFollow(Follow._member_name_in_property_declaration5237);
    		member_name723=member_name();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, member_name723.Tree, member_name723, retval);
    		DebugLocation(730, 59);
    		char_literal724=(IToken)Match(input,92,Follow._92_in_property_declaration5241); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal724_tree = (object)adaptor.Create(char_literal724, retval);
    		adaptor.AddChild(root_0, char_literal724_tree);
    		}
    		DebugLocation(730, 65);
    		PushFollow(Follow._accessor_declarations_in_property_declaration5245);
    		accessor_declarations725=accessor_declarations();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, accessor_declarations725.Tree, accessor_declarations725, retval);
    		DebugLocation(730, 89);
    		char_literal726=(IToken)Match(input,93,Follow._93_in_property_declaration5249); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal726_tree = (object)adaptor.Create(char_literal726, retval);
    		adaptor.AddChild(root_0, char_literal726_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 212, property_declaration_StartIndex); }
        }
     	DebugLocation(731, 1);
    	} finally { DebugExitRule(GrammarFileName, "property_declaration"); }
    	return retval;

    }
    // $ANTLR end "property_declaration"

    public class property_modifiers_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_property_modifiers() {}
    protected virtual void Leave_property_modifiers() {}

    // $ANTLR start "property_modifiers"
    // cs.g:732:1: property_modifiers : ( property_modifier )+ ;
    [GrammarRule("property_modifiers")]
    public csParser.property_modifiers_return property_modifiers()
    {

        csParser.property_modifiers_return retval = new csParser.property_modifiers_return();
        retval.Start = (IToken)input.LT(1);
        int property_modifiers_StartIndex = input.Index;
        object root_0 = null;

        csParser.property_modifier_return property_modifier727 = default(csParser.property_modifier_return);


    	try { DebugEnterRule(GrammarFileName, "property_modifiers");
    	DebugLocation(732, 20);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 213)) { return retval; }
    		// cs.g:732:19: ( ( property_modifier )+ )
    		DebugEnterAlt(1);
    		// cs.g:733:2: ( property_modifier )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(733, 2);
    		// cs.g:733:2: ( property_modifier )+
    		int cnt245=0;
    		try { DebugEnterSubRule(245);
    		while (true)
    		{
    			int alt245=2;
    			try { DebugEnterDecision(245, decisionCanBacktrack[245]);
    			int LA245_0 = input.LA(1);

    			if ((LA245_0==94||LA245_0==138||(LA245_0>=170 && LA245_0<=174)||(LA245_0>=190 && LA245_0<=192)||(LA245_0>=197 && LA245_0<=198)))
    			{
    				alt245=1;
    			}


    			} finally { DebugExitDecision(245); }
    			switch (alt245)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: property_modifier
    				{
    				DebugLocation(733, 2);
    				PushFollow(Follow._property_modifier_in_property_modifiers5258);
    				property_modifier727=property_modifier();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, property_modifier727.Tree, property_modifier727, retval);

    				}
    				break;

    			default:
    				if (cnt245 >= 1)
    					goto loop245;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee245 = new EarlyExitException( 245, input );
    				DebugRecognitionException(eee245);
    				throw eee245;
    			}
    			cnt245++;
    		}
    		loop245:
    			;

    		} finally { DebugExitSubRule(245); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 213, property_modifiers_StartIndex); }
        }
     	DebugLocation(733, 20);
    	} finally { DebugExitRule(GrammarFileName, "property_modifiers"); }
    	return retval;

    }
    // $ANTLR end "property_modifiers"

    public class property_modifier_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_property_modifier() {}
    protected virtual void Leave_property_modifier() {}

    // $ANTLR start "property_modifier"
    // cs.g:734:1: property_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'virtual' | 'sealed' | 'override' | 'abstract' | 'extern' | 'unsafe' );
    [GrammarRule("property_modifier")]
    public csParser.property_modifier_return property_modifier()
    {

        csParser.property_modifier_return retval = new csParser.property_modifier_return();
        retval.Start = (IToken)input.LT(1);
        int property_modifier_StartIndex = input.Index;
        object root_0 = null;

        IToken set728=null;

        object set728_tree=null;

    	try { DebugEnterRule(GrammarFileName, "property_modifier");
    	DebugLocation(734, 139);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 214)) { return retval; }
    		// cs.g:735:2: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'virtual' | 'sealed' | 'override' | 'abstract' | 'extern' | 'unsafe' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(735, 2);
    		set728=(IToken)input.LT(1);
    		if (input.LA(1)==94||input.LA(1)==138||(input.LA(1)>=170 && input.LA(1)<=174)||(input.LA(1)>=190 && input.LA(1)<=192)||(input.LA(1)>=197 && input.LA(1)<=198))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set728, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 214, property_modifier_StartIndex); }
        }
     	DebugLocation(736, 139);
    	} finally { DebugExitRule(GrammarFileName, "property_modifier"); }
    	return retval;

    }
    // $ANTLR end "property_modifier"

    public class member_name_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_member_name() {}
    protected virtual void Leave_member_name() {}

    // $ANTLR start "member_name"
    // cs.g:737:1: member_name : qid ( generic_parameter_list qid_part )? ;
    [GrammarRule("member_name")]
    public csParser.member_name_return member_name()
    {

        csParser.member_name_return retval = new csParser.member_name_return();
        retval.Start = (IToken)input.LT(1);
        int member_name_StartIndex = input.Index;
        object root_0 = null;

        csParser.qid_return qid729 = default(csParser.qid_return);
        csParser.generic_parameter_list_return generic_parameter_list730 = default(csParser.generic_parameter_list_return);
        csParser.qid_part_return qid_part731 = default(csParser.qid_part_return);


    	try { DebugEnterRule(GrammarFileName, "member_name");
    	DebugLocation(737, 40);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 215)) { return retval; }
    		// cs.g:737:12: ( qid ( generic_parameter_list qid_part )? )
    		DebugEnterAlt(1);
    		// cs.g:738:2: qid ( generic_parameter_list qid_part )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(738, 2);
    		PushFollow(Follow._qid_in_member_name5321);
    		qid729=qid();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, qid729.Tree, qid729, retval);
    		DebugLocation(738, 6);
    		// cs.g:738:6: ( generic_parameter_list qid_part )?
    		int alt246=2;
    		try { DebugEnterSubRule(246);
    		try { DebugEnterDecision(246, decisionCanBacktrack[246]);
    		int LA246_0 = input.LA(1);

    		if ((LA246_0==123))
    		{
    			int LA246_1 = input.LA(2);

    			if ((EvaluatePredicate(synpred413_cs_fragment)))
    			{
    				alt246=1;
    			}
    		}
    		} finally { DebugExitDecision(246); }
    		switch (alt246)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:738:7: generic_parameter_list qid_part
    			{
    			DebugLocation(738, 7);
    			PushFollow(Follow._generic_parameter_list_in_member_name5324);
    			generic_parameter_list730=generic_parameter_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, generic_parameter_list730.Tree, generic_parameter_list730, retval);
    			DebugLocation(738, 30);
    			PushFollow(Follow._qid_part_in_member_name5326);
    			qid_part731=qid_part();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, qid_part731.Tree, qid_part731, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(246); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 215, member_name_StartIndex); }
        }
     	DebugLocation(738, 40);
    	} finally { DebugExitRule(GrammarFileName, "member_name"); }
    	return retval;

    }
    // $ANTLR end "member_name"

    public class accessor_declarations_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_accessor_declarations() {}
    protected virtual void Leave_accessor_declarations() {}

    // $ANTLR start "accessor_declarations"
    // cs.g:739:1: accessor_declarations : ( ( get_accessor_declaration ( set_accessor_declaration )? ) | ( set_accessor_declaration ( get_accessor_declaration )? ) );
    [GrammarRule("accessor_declarations")]
    public csParser.accessor_declarations_return accessor_declarations()
    {

        csParser.accessor_declarations_return retval = new csParser.accessor_declarations_return();
        retval.Start = (IToken)input.LT(1);
        int accessor_declarations_StartIndex = input.Index;
        object root_0 = null;

        csParser.get_accessor_declaration_return get_accessor_declaration732 = default(csParser.get_accessor_declaration_return);
        csParser.set_accessor_declaration_return set_accessor_declaration733 = default(csParser.set_accessor_declaration_return);
        csParser.set_accessor_declaration_return set_accessor_declaration734 = default(csParser.set_accessor_declaration_return);
        csParser.get_accessor_declaration_return get_accessor_declaration735 = default(csParser.get_accessor_declaration_return);


    	try { DebugEnterRule(GrammarFileName, "accessor_declarations");
    	DebugLocation(739, 58);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 216)) { return retval; }
    		// cs.g:739:22: ( ( get_accessor_declaration ( set_accessor_declaration )? ) | ( set_accessor_declaration ( get_accessor_declaration )? ) )
    		int alt249=2;
    		try { DebugEnterDecision(249, decisionCanBacktrack[249]);
    		switch (input.LA(1))
    		{
    		case 97:
    			{
    			int LA249_1 = input.LA(2);

    			if ((EvaluatePredicate(synpred415_cs_fragment)))
    			{
    				alt249=1;
    			}
    			else if ((true))
    			{
    				alt249=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 249, 1, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case 170:
    			{
    			int LA249_2 = input.LA(2);

    			if ((EvaluatePredicate(synpred415_cs_fragment)))
    			{
    				alt249=1;
    			}
    			else if ((true))
    			{
    				alt249=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 249, 2, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case 171:
    			{
    			int LA249_3 = input.LA(2);

    			if ((EvaluatePredicate(synpred415_cs_fragment)))
    			{
    				alt249=1;
    			}
    			else if ((true))
    			{
    				alt249=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 249, 3, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case 172:
    			{
    			int LA249_4 = input.LA(2);

    			if ((EvaluatePredicate(synpred415_cs_fragment)))
    			{
    				alt249=1;
    			}
    			else if ((true))
    			{
    				alt249=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 249, 4, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case 173:
    			{
    			int LA249_5 = input.LA(2);

    			if ((EvaluatePredicate(synpred415_cs_fragment)))
    			{
    				alt249=1;
    			}
    			else if ((true))
    			{
    				alt249=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 249, 5, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case GET:
    			{
    			alt249=1;
    			}
    			break;
    		case SET:
    			{
    			alt249=2;
    			}
    			break;
    		default:
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 249, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(249); }
    		switch (alt249)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:740:2: ( get_accessor_declaration ( set_accessor_declaration )? )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(740, 2);
    			// cs.g:740:2: ( get_accessor_declaration ( set_accessor_declaration )? )
    			DebugEnterAlt(1);
    			// cs.g:740:3: get_accessor_declaration ( set_accessor_declaration )?
    			{
    			DebugLocation(740, 3);
    			PushFollow(Follow._get_accessor_declaration_in_accessor_declarations5339);
    			get_accessor_declaration732=get_accessor_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, get_accessor_declaration732.Tree, get_accessor_declaration732, retval);
    			DebugLocation(740, 30);
    			// cs.g:740:30: ( set_accessor_declaration )?
    			int alt247=2;
    			try { DebugEnterSubRule(247);
    			try { DebugEnterDecision(247, decisionCanBacktrack[247]);
    			int LA247_0 = input.LA(1);

    			if ((LA247_0==SET||LA247_0==97||(LA247_0>=170 && LA247_0<=173)))
    			{
    				alt247=1;
    			}
    			} finally { DebugExitDecision(247); }
    			switch (alt247)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: set_accessor_declaration
    				{
    				DebugLocation(740, 30);
    				PushFollow(Follow._set_accessor_declaration_in_accessor_declarations5343);
    				set_accessor_declaration733=set_accessor_declaration();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, set_accessor_declaration733.Tree, set_accessor_declaration733, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(247); }


    			}


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:741:4: ( set_accessor_declaration ( get_accessor_declaration )? )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(741, 4);
    			// cs.g:741:4: ( set_accessor_declaration ( get_accessor_declaration )? )
    			DebugEnterAlt(1);
    			// cs.g:741:5: set_accessor_declaration ( get_accessor_declaration )?
    			{
    			DebugLocation(741, 5);
    			PushFollow(Follow._set_accessor_declaration_in_accessor_declarations5351);
    			set_accessor_declaration734=set_accessor_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, set_accessor_declaration734.Tree, set_accessor_declaration734, retval);
    			DebugLocation(741, 32);
    			// cs.g:741:32: ( get_accessor_declaration )?
    			int alt248=2;
    			try { DebugEnterSubRule(248);
    			try { DebugEnterDecision(248, decisionCanBacktrack[248]);
    			int LA248_0 = input.LA(1);

    			if ((LA248_0==GET||LA248_0==97||(LA248_0>=170 && LA248_0<=173)))
    			{
    				alt248=1;
    			}
    			} finally { DebugExitDecision(248); }
    			switch (alt248)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: get_accessor_declaration
    				{
    				DebugLocation(741, 32);
    				PushFollow(Follow._get_accessor_declaration_in_accessor_declarations5355);
    				get_accessor_declaration735=get_accessor_declaration();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, get_accessor_declaration735.Tree, get_accessor_declaration735, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(248); }


    			}


    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 216, accessor_declarations_StartIndex); }
        }
     	DebugLocation(741, 58);
    	} finally { DebugExitRule(GrammarFileName, "accessor_declarations"); }
    	return retval;

    }
    // $ANTLR end "accessor_declarations"

    public class get_accessor_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_get_accessor_declaration() {}
    protected virtual void Leave_get_accessor_declaration() {}

    // $ANTLR start "get_accessor_declaration"
    // cs.g:742:1: get_accessor_declaration : ( attributes )? ( accessor_modifier )? 'get' accessor_body ;
    [GrammarRule("get_accessor_declaration")]
    public csParser.get_accessor_declaration_return get_accessor_declaration()
    {

        csParser.get_accessor_declaration_return retval = new csParser.get_accessor_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int get_accessor_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal738=null;
        csParser.attributes_return attributes736 = default(csParser.attributes_return);
        csParser.accessor_modifier_return accessor_modifier737 = default(csParser.accessor_modifier_return);
        csParser.accessor_body_return accessor_body739 = default(csParser.accessor_body_return);

        object string_literal738_tree=null;

    	try { DebugEnterRule(GrammarFileName, "get_accessor_declaration");
    	DebugLocation(742, 58);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 217)) { return retval; }
    		// cs.g:742:25: ( ( attributes )? ( accessor_modifier )? 'get' accessor_body )
    		DebugEnterAlt(1);
    		// cs.g:743:2: ( attributes )? ( accessor_modifier )? 'get' accessor_body
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(743, 2);
    		// cs.g:743:2: ( attributes )?
    		int alt250=2;
    		try { DebugEnterSubRule(250);
    		try { DebugEnterDecision(250, decisionCanBacktrack[250]);
    		int LA250_0 = input.LA(1);

    		if ((LA250_0==97))
    		{
    			alt250=1;
    		}
    		} finally { DebugExitDecision(250); }
    		switch (alt250)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(743, 2);
    			PushFollow(Follow._attributes_in_get_accessor_declaration5365);
    			attributes736=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes736.Tree, attributes736, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(250); }

    		DebugLocation(743, 16);
    		// cs.g:743:16: ( accessor_modifier )?
    		int alt251=2;
    		try { DebugEnterSubRule(251);
    		try { DebugEnterDecision(251, decisionCanBacktrack[251]);
    		int LA251_0 = input.LA(1);

    		if (((LA251_0>=170 && LA251_0<=173)))
    		{
    			alt251=1;
    		}
    		} finally { DebugExitDecision(251); }
    		switch (alt251)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: accessor_modifier
    			{
    			DebugLocation(743, 16);
    			PushFollow(Follow._accessor_modifier_in_get_accessor_declaration5370);
    			accessor_modifier737=accessor_modifier();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, accessor_modifier737.Tree, accessor_modifier737, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(251); }

    		DebugLocation(743, 37);
    		string_literal738=(IToken)new XToken((IToken)Match(input,GET,Follow._GET_in_get_accessor_declaration5375), "GET"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal738_tree = (object)adaptor.Create(string_literal738, retval);
    		adaptor.AddChild(root_0, string_literal738_tree);
    		}
    		DebugLocation(743, 45);
    		PushFollow(Follow._accessor_body_in_get_accessor_declaration5379);
    		accessor_body739=accessor_body();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, accessor_body739.Tree, accessor_body739, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 217, get_accessor_declaration_StartIndex); }
        }
     	DebugLocation(743, 58);
    	} finally { DebugExitRule(GrammarFileName, "get_accessor_declaration"); }
    	return retval;

    }
    // $ANTLR end "get_accessor_declaration"

    public class set_accessor_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_set_accessor_declaration() {}
    protected virtual void Leave_set_accessor_declaration() {}

    // $ANTLR start "set_accessor_declaration"
    // cs.g:744:1: set_accessor_declaration : ( attributes )? ( accessor_modifier )? 'set' accessor_body ;
    [GrammarRule("set_accessor_declaration")]
    public csParser.set_accessor_declaration_return set_accessor_declaration()
    {

        csParser.set_accessor_declaration_return retval = new csParser.set_accessor_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int set_accessor_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal742=null;
        csParser.attributes_return attributes740 = default(csParser.attributes_return);
        csParser.accessor_modifier_return accessor_modifier741 = default(csParser.accessor_modifier_return);
        csParser.accessor_body_return accessor_body743 = default(csParser.accessor_body_return);

        object string_literal742_tree=null;

    	try { DebugEnterRule(GrammarFileName, "set_accessor_declaration");
    	DebugLocation(744, 58);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 218)) { return retval; }
    		// cs.g:744:25: ( ( attributes )? ( accessor_modifier )? 'set' accessor_body )
    		DebugEnterAlt(1);
    		// cs.g:745:2: ( attributes )? ( accessor_modifier )? 'set' accessor_body
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(745, 2);
    		// cs.g:745:2: ( attributes )?
    		int alt252=2;
    		try { DebugEnterSubRule(252);
    		try { DebugEnterDecision(252, decisionCanBacktrack[252]);
    		int LA252_0 = input.LA(1);

    		if ((LA252_0==97))
    		{
    			alt252=1;
    		}
    		} finally { DebugExitDecision(252); }
    		switch (alt252)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(745, 2);
    			PushFollow(Follow._attributes_in_set_accessor_declaration5387);
    			attributes740=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes740.Tree, attributes740, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(252); }

    		DebugLocation(745, 16);
    		// cs.g:745:16: ( accessor_modifier )?
    		int alt253=2;
    		try { DebugEnterSubRule(253);
    		try { DebugEnterDecision(253, decisionCanBacktrack[253]);
    		int LA253_0 = input.LA(1);

    		if (((LA253_0>=170 && LA253_0<=173)))
    		{
    			alt253=1;
    		}
    		} finally { DebugExitDecision(253); }
    		switch (alt253)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: accessor_modifier
    			{
    			DebugLocation(745, 16);
    			PushFollow(Follow._accessor_modifier_in_set_accessor_declaration5392);
    			accessor_modifier741=accessor_modifier();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, accessor_modifier741.Tree, accessor_modifier741, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(253); }

    		DebugLocation(745, 37);
    		string_literal742=(IToken)new XToken((IToken)Match(input,SET,Follow._SET_in_set_accessor_declaration5397), "SET"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal742_tree = (object)adaptor.Create(string_literal742, retval);
    		adaptor.AddChild(root_0, string_literal742_tree);
    		}
    		DebugLocation(745, 45);
    		PushFollow(Follow._accessor_body_in_set_accessor_declaration5401);
    		accessor_body743=accessor_body();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, accessor_body743.Tree, accessor_body743, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 218, set_accessor_declaration_StartIndex); }
        }
     	DebugLocation(745, 58);
    	} finally { DebugExitRule(GrammarFileName, "set_accessor_declaration"); }
    	return retval;

    }
    // $ANTLR end "set_accessor_declaration"

    public class accessor_modifier_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_accessor_modifier() {}
    protected virtual void Leave_accessor_modifier() {}

    // $ANTLR start "accessor_modifier"
    // cs.g:746:1: accessor_modifier : ( 'public' | 'protected' | 'internal' | 'private' | ( 'protected' 'internal' ) | ( 'internal' 'protected' ) ) ;
    [GrammarRule("accessor_modifier")]
    public csParser.accessor_modifier_return accessor_modifier()
    {

        csParser.accessor_modifier_return retval = new csParser.accessor_modifier_return();
        retval.Start = (IToken)input.LT(1);
        int accessor_modifier_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal744=null;
        IToken string_literal745=null;
        IToken string_literal746=null;
        IToken string_literal747=null;
        IToken string_literal748=null;
        IToken string_literal749=null;
        IToken string_literal750=null;
        IToken string_literal751=null;

        object string_literal744_tree=null;
        object string_literal745_tree=null;
        object string_literal746_tree=null;
        object string_literal747_tree=null;
        object string_literal748_tree=null;
        object string_literal749_tree=null;
        object string_literal750_tree=null;
        object string_literal751_tree=null;

    	try { DebugEnterRule(GrammarFileName, "accessor_modifier");
    	DebugLocation(746, 109);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 219)) { return retval; }
    		// cs.g:746:18: ( ( 'public' | 'protected' | 'internal' | 'private' | ( 'protected' 'internal' ) | ( 'internal' 'protected' ) ) )
    		DebugEnterAlt(1);
    		// cs.g:747:2: ( 'public' | 'protected' | 'internal' | 'private' | ( 'protected' 'internal' ) | ( 'internal' 'protected' ) )
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(747, 2);
    		// cs.g:747:2: ( 'public' | 'protected' | 'internal' | 'private' | ( 'protected' 'internal' ) | ( 'internal' 'protected' ) )
    		int alt254=6;
    		try { DebugEnterSubRule(254);
    		try { DebugEnterDecision(254, decisionCanBacktrack[254]);
    		switch (input.LA(1))
    		{
    		case 170:
    			{
    			alt254=1;
    			}
    			break;
    		case 171:
    			{
    			int LA254_2 = input.LA(2);

    			if ((LA254_2==172))
    			{
    				alt254=5;
    			}
    			else if ((LA254_2==EOF||(LA254_2>=GET && LA254_2<=SET)))
    			{
    				alt254=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 254, 2, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case 172:
    			{
    			int LA254_3 = input.LA(2);

    			if ((LA254_3==171))
    			{
    				alt254=6;
    			}
    			else if ((LA254_3==EOF||(LA254_3>=GET && LA254_3<=SET)))
    			{
    				alt254=3;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 254, 3, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case 173:
    			{
    			alt254=4;
    			}
    			break;
    		default:
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 254, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(254); }
    		switch (alt254)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:747:3: 'public'
    			{
    			DebugLocation(747, 3);
    			string_literal744=(IToken)Match(input,170,Follow._170_in_accessor_modifier5410); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal744_tree = (object)adaptor.Create(string_literal744, retval);
    			adaptor.AddChild(root_0, string_literal744_tree);
    			}

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:747:14: 'protected'
    			{
    			DebugLocation(747, 14);
    			string_literal745=(IToken)Match(input,171,Follow._171_in_accessor_modifier5414); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal745_tree = (object)adaptor.Create(string_literal745, retval);
    			adaptor.AddChild(root_0, string_literal745_tree);
    			}

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:747:28: 'internal'
    			{
    			DebugLocation(747, 28);
    			string_literal746=(IToken)Match(input,172,Follow._172_in_accessor_modifier5418); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal746_tree = (object)adaptor.Create(string_literal746, retval);
    			adaptor.AddChild(root_0, string_literal746_tree);
    			}

    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// cs.g:747:41: 'private'
    			{
    			DebugLocation(747, 41);
    			string_literal747=(IToken)Match(input,173,Follow._173_in_accessor_modifier5422); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal747_tree = (object)adaptor.Create(string_literal747, retval);
    			adaptor.AddChild(root_0, string_literal747_tree);
    			}

    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// cs.g:747:53: ( 'protected' 'internal' )
    			{
    			DebugLocation(747, 53);
    			// cs.g:747:53: ( 'protected' 'internal' )
    			DebugEnterAlt(1);
    			// cs.g:747:54: 'protected' 'internal'
    			{
    			DebugLocation(747, 54);
    			string_literal748=(IToken)Match(input,171,Follow._171_in_accessor_modifier5427); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal748_tree = (object)adaptor.Create(string_literal748, retval);
    			adaptor.AddChild(root_0, string_literal748_tree);
    			}
    			DebugLocation(747, 68);
    			string_literal749=(IToken)Match(input,172,Follow._172_in_accessor_modifier5431); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal749_tree = (object)adaptor.Create(string_literal749, retval);
    			adaptor.AddChild(root_0, string_literal749_tree);
    			}

    			}


    			}
    			break;
    		case 6:
    			DebugEnterAlt(6);
    			// cs.g:747:82: ( 'internal' 'protected' )
    			{
    			DebugLocation(747, 82);
    			// cs.g:747:82: ( 'internal' 'protected' )
    			DebugEnterAlt(1);
    			// cs.g:747:83: 'internal' 'protected'
    			{
    			DebugLocation(747, 83);
    			string_literal750=(IToken)Match(input,172,Follow._172_in_accessor_modifier5437); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal750_tree = (object)adaptor.Create(string_literal750, retval);
    			adaptor.AddChild(root_0, string_literal750_tree);
    			}
    			DebugLocation(747, 96);
    			string_literal751=(IToken)Match(input,171,Follow._171_in_accessor_modifier5441); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal751_tree = (object)adaptor.Create(string_literal751, retval);
    			adaptor.AddChild(root_0, string_literal751_tree);
    			}

    			}


    			}
    			break;

    		}
    		} finally { DebugExitSubRule(254); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 219, accessor_modifier_StartIndex); }
        }
     	DebugLocation(747, 109);
    	} finally { DebugExitRule(GrammarFileName, "accessor_modifier"); }
    	return retval;

    }
    // $ANTLR end "accessor_modifier"

    public class accessor_body_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_accessor_body() {}
    protected virtual void Leave_accessor_body() {}

    // $ANTLR start "accessor_body"
    // cs.g:748:1: accessor_body : block ;
    [GrammarRule("accessor_body")]
    public csParser.accessor_body_return accessor_body()
    {

        csParser.accessor_body_return retval = new csParser.accessor_body_return();
        retval.Start = (IToken)input.LT(1);
        int accessor_body_StartIndex = input.Index;
        object root_0 = null;

        csParser.block_return block752 = default(csParser.block_return);


    	try { DebugEnterRule(GrammarFileName, "accessor_body");
    	DebugLocation(748, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 220)) { return retval; }
    		// cs.g:748:14: ( block )
    		DebugEnterAlt(1);
    		// cs.g:749:2: block
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(749, 2);
    		PushFollow(Follow._block_in_accessor_body5451);
    		block752=block();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, block752.Tree, block752, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 220, accessor_body_StartIndex); }
        }
     	DebugLocation(750, 1);
    	} finally { DebugExitRule(GrammarFileName, "accessor_body"); }
    	return retval;

    }
    // $ANTLR end "accessor_body"

    public class event_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_event_declaration() {}
    protected virtual void Leave_event_declaration() {}

    // $ANTLR start "event_declaration"
    // cs.g:751:1: event_declaration : ( ( ( attributes )? ( event_modifiers )? 'event' type variable_declarators ';' ) | ( ( attributes )? ( event_modifiers )? 'event' type member_name '{' event_accessor_declarations '}' ) );
    [GrammarRule("event_declaration")]
    public csParser.event_declaration_return event_declaration()
    {

        csParser.event_declaration_return retval = new csParser.event_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int event_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal755=null;
        IToken char_literal758=null;
        IToken string_literal761=null;
        IToken char_literal764=null;
        IToken char_literal766=null;
        csParser.attributes_return attributes753 = default(csParser.attributes_return);
        csParser.event_modifiers_return event_modifiers754 = default(csParser.event_modifiers_return);
        csParser.type_return type756 = default(csParser.type_return);
        csParser.variable_declarators_return variable_declarators757 = default(csParser.variable_declarators_return);
        csParser.attributes_return attributes759 = default(csParser.attributes_return);
        csParser.event_modifiers_return event_modifiers760 = default(csParser.event_modifiers_return);
        csParser.type_return type762 = default(csParser.type_return);
        csParser.member_name_return member_name763 = default(csParser.member_name_return);
        csParser.event_accessor_declarations_return event_accessor_declarations765 = default(csParser.event_accessor_declarations_return);

        object string_literal755_tree=null;
        object char_literal758_tree=null;
        object string_literal761_tree=null;
        object char_literal764_tree=null;
        object char_literal766_tree=null;

    	try { DebugEnterRule(GrammarFileName, "event_declaration");
    	DebugLocation(751, 110);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 221)) { return retval; }
    		// cs.g:751:18: ( ( ( attributes )? ( event_modifiers )? 'event' type variable_declarators ';' ) | ( ( attributes )? ( event_modifiers )? 'event' type member_name '{' event_accessor_declarations '}' ) )
    		int alt259=2;
    		try { DebugEnterDecision(259, decisionCanBacktrack[259]);
    		switch (input.LA(1))
    		{
    		case 97:
    			{
    			int LA259_1 = input.LA(2);

    			if ((EvaluatePredicate(synpred428_cs_fragment)))
    			{
    				alt259=1;
    			}
    			else if ((true))
    			{
    				alt259=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 259, 1, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case 94:
    		case 138:
    		case 170:
    		case 171:
    		case 172:
    		case 173:
    		case 174:
    		case 190:
    		case 191:
    		case 192:
    		case 197:
    		case 198:
    			{
    			int LA259_2 = input.LA(2);

    			if ((EvaluatePredicate(synpred428_cs_fragment)))
    			{
    				alt259=1;
    			}
    			else if ((true))
    			{
    				alt259=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 259, 2, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case 104:
    			{
    			int LA259_3 = input.LA(2);

    			if ((EvaluatePredicate(synpred428_cs_fragment)))
    			{
    				alt259=1;
    			}
    			else if ((true))
    			{
    				alt259=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 259, 3, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		default:
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 259, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(259); }
    		switch (alt259)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:752:2: ( ( attributes )? ( event_modifiers )? 'event' type variable_declarators ';' )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(752, 2);
    			// cs.g:752:2: ( ( attributes )? ( event_modifiers )? 'event' type variable_declarators ';' )
    			DebugEnterAlt(1);
    			// cs.g:752:4: ( attributes )? ( event_modifiers )? 'event' type variable_declarators ';'
    			{
    			DebugLocation(752, 4);
    			// cs.g:752:4: ( attributes )?
    			int alt255=2;
    			try { DebugEnterSubRule(255);
    			try { DebugEnterDecision(255, decisionCanBacktrack[255]);
    			int LA255_0 = input.LA(1);

    			if ((LA255_0==97))
    			{
    				alt255=1;
    			}
    			} finally { DebugExitDecision(255); }
    			switch (alt255)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: attributes
    				{
    				DebugLocation(752, 4);
    				PushFollow(Follow._attributes_in_event_declaration5463);
    				attributes753=attributes();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes753.Tree, attributes753, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(255); }

    			DebugLocation(752, 18);
    			// cs.g:752:18: ( event_modifiers )?
    			int alt256=2;
    			try { DebugEnterSubRule(256);
    			try { DebugEnterDecision(256, decisionCanBacktrack[256]);
    			int LA256_0 = input.LA(1);

    			if ((LA256_0==94||LA256_0==138||(LA256_0>=170 && LA256_0<=174)||(LA256_0>=190 && LA256_0<=192)||(LA256_0>=197 && LA256_0<=198)))
    			{
    				alt256=1;
    			}
    			} finally { DebugExitDecision(256); }
    			switch (alt256)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: event_modifiers
    				{
    				DebugLocation(752, 18);
    				PushFollow(Follow._event_modifiers_in_event_declaration5468);
    				event_modifiers754=event_modifiers();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, event_modifiers754.Tree, event_modifiers754, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(256); }

    			DebugLocation(752, 37);
    			string_literal755=(IToken)Match(input,104,Follow._104_in_event_declaration5473); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal755_tree = (object)adaptor.Create(string_literal755, retval);
    			adaptor.AddChild(root_0, string_literal755_tree);
    			}
    			DebugLocation(752, 47);
    			PushFollow(Follow._type_in_event_declaration5477);
    			type756=type();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type756.Tree, type756, retval);
    			DebugLocation(752, 54);
    			PushFollow(Follow._variable_declarators_in_event_declaration5481);
    			variable_declarators757=variable_declarators();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, variable_declarators757.Tree, variable_declarators757, retval);
    			DebugLocation(752, 77);
    			char_literal758=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_event_declaration5485), "SEMI"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal758_tree = (object)adaptor.Create(char_literal758, retval);
    			adaptor.AddChild(root_0, char_literal758_tree);
    			}

    			}


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:753:4: ( ( attributes )? ( event_modifiers )? 'event' type member_name '{' event_accessor_declarations '}' )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(753, 4);
    			// cs.g:753:4: ( ( attributes )? ( event_modifiers )? 'event' type member_name '{' event_accessor_declarations '}' )
    			DebugEnterAlt(1);
    			// cs.g:753:6: ( attributes )? ( event_modifiers )? 'event' type member_name '{' event_accessor_declarations '}'
    			{
    			DebugLocation(753, 6);
    			// cs.g:753:6: ( attributes )?
    			int alt257=2;
    			try { DebugEnterSubRule(257);
    			try { DebugEnterDecision(257, decisionCanBacktrack[257]);
    			int LA257_0 = input.LA(1);

    			if ((LA257_0==97))
    			{
    				alt257=1;
    			}
    			} finally { DebugExitDecision(257); }
    			switch (alt257)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: attributes
    				{
    				DebugLocation(753, 6);
    				PushFollow(Follow._attributes_in_event_declaration5493);
    				attributes759=attributes();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes759.Tree, attributes759, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(257); }

    			DebugLocation(753, 20);
    			// cs.g:753:20: ( event_modifiers )?
    			int alt258=2;
    			try { DebugEnterSubRule(258);
    			try { DebugEnterDecision(258, decisionCanBacktrack[258]);
    			int LA258_0 = input.LA(1);

    			if ((LA258_0==94||LA258_0==138||(LA258_0>=170 && LA258_0<=174)||(LA258_0>=190 && LA258_0<=192)||(LA258_0>=197 && LA258_0<=198)))
    			{
    				alt258=1;
    			}
    			} finally { DebugExitDecision(258); }
    			switch (alt258)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: event_modifiers
    				{
    				DebugLocation(753, 20);
    				PushFollow(Follow._event_modifiers_in_event_declaration5498);
    				event_modifiers760=event_modifiers();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, event_modifiers760.Tree, event_modifiers760, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(258); }

    			DebugLocation(753, 39);
    			string_literal761=(IToken)Match(input,104,Follow._104_in_event_declaration5503); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal761_tree = (object)adaptor.Create(string_literal761, retval);
    			adaptor.AddChild(root_0, string_literal761_tree);
    			}
    			DebugLocation(753, 49);
    			PushFollow(Follow._type_in_event_declaration5507);
    			type762=type();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type762.Tree, type762, retval);
    			DebugLocation(753, 56);
    			PushFollow(Follow._member_name_in_event_declaration5511);
    			member_name763=member_name();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, member_name763.Tree, member_name763, retval);
    			DebugLocation(753, 70);
    			char_literal764=(IToken)Match(input,92,Follow._92_in_event_declaration5515); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal764_tree = (object)adaptor.Create(char_literal764, retval);
    			adaptor.AddChild(root_0, char_literal764_tree);
    			}
    			DebugLocation(753, 76);
    			PushFollow(Follow._event_accessor_declarations_in_event_declaration5519);
    			event_accessor_declarations765=event_accessor_declarations();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, event_accessor_declarations765.Tree, event_accessor_declarations765, retval);
    			DebugLocation(753, 106);
    			char_literal766=(IToken)Match(input,93,Follow._93_in_event_declaration5523); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal766_tree = (object)adaptor.Create(char_literal766, retval);
    			adaptor.AddChild(root_0, char_literal766_tree);
    			}

    			}


    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 221, event_declaration_StartIndex); }
        }
     	DebugLocation(753, 110);
    	} finally { DebugExitRule(GrammarFileName, "event_declaration"); }
    	return retval;

    }
    // $ANTLR end "event_declaration"

    public class event_modifiers_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_event_modifiers() {}
    protected virtual void Leave_event_modifiers() {}

    // $ANTLR start "event_modifiers"
    // cs.g:754:1: event_modifiers : ( event_modifier )+ ;
    [GrammarRule("event_modifiers")]
    public csParser.event_modifiers_return event_modifiers()
    {

        csParser.event_modifiers_return retval = new csParser.event_modifiers_return();
        retval.Start = (IToken)input.LT(1);
        int event_modifiers_StartIndex = input.Index;
        object root_0 = null;

        csParser.event_modifier_return event_modifier767 = default(csParser.event_modifier_return);


    	try { DebugEnterRule(GrammarFileName, "event_modifiers");
    	DebugLocation(754, 17);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 222)) { return retval; }
    		// cs.g:754:16: ( ( event_modifier )+ )
    		DebugEnterAlt(1);
    		// cs.g:755:2: ( event_modifier )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(755, 2);
    		// cs.g:755:2: ( event_modifier )+
    		int cnt260=0;
    		try { DebugEnterSubRule(260);
    		while (true)
    		{
    			int alt260=2;
    			try { DebugEnterDecision(260, decisionCanBacktrack[260]);
    			int LA260_0 = input.LA(1);

    			if ((LA260_0==94||LA260_0==138||(LA260_0>=170 && LA260_0<=174)||(LA260_0>=190 && LA260_0<=192)||(LA260_0>=197 && LA260_0<=198)))
    			{
    				alt260=1;
    			}


    			} finally { DebugExitDecision(260); }
    			switch (alt260)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: event_modifier
    				{
    				DebugLocation(755, 2);
    				PushFollow(Follow._event_modifier_in_event_modifiers5532);
    				event_modifier767=event_modifier();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, event_modifier767.Tree, event_modifier767, retval);

    				}
    				break;

    			default:
    				if (cnt260 >= 1)
    					goto loop260;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee260 = new EarlyExitException( 260, input );
    				DebugRecognitionException(eee260);
    				throw eee260;
    			}
    			cnt260++;
    		}
    		loop260:
    			;

    		} finally { DebugExitSubRule(260); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 222, event_modifiers_StartIndex); }
        }
     	DebugLocation(755, 17);
    	} finally { DebugExitRule(GrammarFileName, "event_modifiers"); }
    	return retval;

    }
    // $ANTLR end "event_modifiers"

    public class event_modifier_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_event_modifier() {}
    protected virtual void Leave_event_modifier() {}

    // $ANTLR start "event_modifier"
    // cs.g:756:1: event_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'virtual' | 'sealed' | 'override' | 'abstract' | 'extern' | 'unsafe' );
    [GrammarRule("event_modifier")]
    public csParser.event_modifier_return event_modifier()
    {

        csParser.event_modifier_return retval = new csParser.event_modifier_return();
        retval.Start = (IToken)input.LT(1);
        int event_modifier_StartIndex = input.Index;
        object root_0 = null;

        IToken set768=null;

        object set768_tree=null;

    	try { DebugEnterRule(GrammarFileName, "event_modifier");
    	DebugLocation(756, 36);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 223)) { return retval; }
    		// cs.g:756:15: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'static' | 'virtual' | 'sealed' | 'override' | 'abstract' | 'extern' | 'unsafe' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(756, 15);
    		set768=(IToken)input.LT(1);
    		if (input.LA(1)==94||input.LA(1)==138||(input.LA(1)>=170 && input.LA(1)<=174)||(input.LA(1)>=190 && input.LA(1)<=192)||(input.LA(1)>=197 && input.LA(1)<=198))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set768, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 223, event_modifier_StartIndex); }
        }
     	DebugLocation(758, 36);
    	} finally { DebugExitRule(GrammarFileName, "event_modifier"); }
    	return retval;

    }
    // $ANTLR end "event_modifier"

    public class event_accessor_declarations_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_event_accessor_declarations() {}
    protected virtual void Leave_event_accessor_declarations() {}

    // $ANTLR start "event_accessor_declarations"
    // cs.g:759:1: event_accessor_declarations : ( ( add_accessor_declaration remove_accessor_declaration ) | ( remove_accessor_declaration add_accessor_declaration ) );
    [GrammarRule("event_accessor_declarations")]
    public csParser.event_accessor_declarations_return event_accessor_declarations()
    {

        csParser.event_accessor_declarations_return retval = new csParser.event_accessor_declarations_return();
        retval.Start = (IToken)input.LT(1);
        int event_accessor_declarations_StartIndex = input.Index;
        object root_0 = null;

        csParser.add_accessor_declaration_return add_accessor_declaration769 = default(csParser.add_accessor_declaration_return);
        csParser.remove_accessor_declaration_return remove_accessor_declaration770 = default(csParser.remove_accessor_declaration_return);
        csParser.remove_accessor_declaration_return remove_accessor_declaration771 = default(csParser.remove_accessor_declaration_return);
        csParser.add_accessor_declaration_return add_accessor_declaration772 = default(csParser.add_accessor_declaration_return);


    	try { DebugEnterRule(GrammarFileName, "event_accessor_declarations");
    	DebugLocation(759, 60);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 224)) { return retval; }
    		// cs.g:759:28: ( ( add_accessor_declaration remove_accessor_declaration ) | ( remove_accessor_declaration add_accessor_declaration ) )
    		int alt261=2;
    		try { DebugEnterDecision(261, decisionCanBacktrack[261]);
    		switch (input.LA(1))
    		{
    		case 97:
    			{
    			int LA261_1 = input.LA(2);

    			if ((EvaluatePredicate(synpred443_cs_fragment)))
    			{
    				alt261=1;
    			}
    			else if ((true))
    			{
    				alt261=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 261, 1, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case 201:
    			{
    			alt261=1;
    			}
    			break;
    		case 202:
    			{
    			alt261=2;
    			}
    			break;
    		default:
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 261, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(261); }
    		switch (alt261)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:760:2: ( add_accessor_declaration remove_accessor_declaration )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(760, 2);
    			// cs.g:760:2: ( add_accessor_declaration remove_accessor_declaration )
    			DebugEnterAlt(1);
    			// cs.g:760:3: add_accessor_declaration remove_accessor_declaration
    			{
    			DebugLocation(760, 3);
    			PushFollow(Follow._add_accessor_declaration_in_event_accessor_declarations5596);
    			add_accessor_declaration769=add_accessor_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, add_accessor_declaration769.Tree, add_accessor_declaration769, retval);
    			DebugLocation(760, 30);
    			PushFollow(Follow._remove_accessor_declaration_in_event_accessor_declarations5600);
    			remove_accessor_declaration770=remove_accessor_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, remove_accessor_declaration770.Tree, remove_accessor_declaration770, retval);

    			}


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:761:4: ( remove_accessor_declaration add_accessor_declaration )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(761, 4);
    			// cs.g:761:4: ( remove_accessor_declaration add_accessor_declaration )
    			DebugEnterAlt(1);
    			// cs.g:761:5: remove_accessor_declaration add_accessor_declaration
    			{
    			DebugLocation(761, 5);
    			PushFollow(Follow._remove_accessor_declaration_in_event_accessor_declarations5607);
    			remove_accessor_declaration771=remove_accessor_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, remove_accessor_declaration771.Tree, remove_accessor_declaration771, retval);
    			DebugLocation(761, 35);
    			PushFollow(Follow._add_accessor_declaration_in_event_accessor_declarations5611);
    			add_accessor_declaration772=add_accessor_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, add_accessor_declaration772.Tree, add_accessor_declaration772, retval);

    			}


    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 224, event_accessor_declarations_StartIndex); }
        }
     	DebugLocation(761, 60);
    	} finally { DebugExitRule(GrammarFileName, "event_accessor_declarations"); }
    	return retval;

    }
    // $ANTLR end "event_accessor_declarations"

    public class add_accessor_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_add_accessor_declaration() {}
    protected virtual void Leave_add_accessor_declaration() {}

    // $ANTLR start "add_accessor_declaration"
    // cs.g:762:1: add_accessor_declaration : ( attributes )? 'add' block ;
    [GrammarRule("add_accessor_declaration")]
    public csParser.add_accessor_declaration_return add_accessor_declaration()
    {

        csParser.add_accessor_declaration_return retval = new csParser.add_accessor_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int add_accessor_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal774=null;
        csParser.attributes_return attributes773 = default(csParser.attributes_return);
        csParser.block_return block775 = default(csParser.block_return);

        object string_literal774_tree=null;

    	try { DebugEnterRule(GrammarFileName, "add_accessor_declaration");
    	DebugLocation(762, 29);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 225)) { return retval; }
    		// cs.g:762:25: ( ( attributes )? 'add' block )
    		DebugEnterAlt(1);
    		// cs.g:763:2: ( attributes )? 'add' block
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(763, 2);
    		// cs.g:763:2: ( attributes )?
    		int alt262=2;
    		try { DebugEnterSubRule(262);
    		try { DebugEnterDecision(262, decisionCanBacktrack[262]);
    		int LA262_0 = input.LA(1);

    		if ((LA262_0==97))
    		{
    			alt262=1;
    		}
    		} finally { DebugExitDecision(262); }
    		switch (alt262)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(763, 2);
    			PushFollow(Follow._attributes_in_add_accessor_declaration5620);
    			attributes773=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes773.Tree, attributes773, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(262); }

    		DebugLocation(763, 16);
    		string_literal774=(IToken)Match(input,201,Follow._201_in_add_accessor_declaration5625); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal774_tree = (object)adaptor.Create(string_literal774, retval);
    		adaptor.AddChild(root_0, string_literal774_tree);
    		}
    		DebugLocation(763, 24);
    		PushFollow(Follow._block_in_add_accessor_declaration5629);
    		block775=block();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, block775.Tree, block775, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 225, add_accessor_declaration_StartIndex); }
        }
     	DebugLocation(763, 29);
    	} finally { DebugExitRule(GrammarFileName, "add_accessor_declaration"); }
    	return retval;

    }
    // $ANTLR end "add_accessor_declaration"

    public class remove_accessor_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_remove_accessor_declaration() {}
    protected virtual void Leave_remove_accessor_declaration() {}

    // $ANTLR start "remove_accessor_declaration"
    // cs.g:764:1: remove_accessor_declaration : ( attributes )? 'remove' block ;
    [GrammarRule("remove_accessor_declaration")]
    public csParser.remove_accessor_declaration_return remove_accessor_declaration()
    {

        csParser.remove_accessor_declaration_return retval = new csParser.remove_accessor_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int remove_accessor_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal777=null;
        csParser.attributes_return attributes776 = default(csParser.attributes_return);
        csParser.block_return block778 = default(csParser.block_return);

        object string_literal777_tree=null;

    	try { DebugEnterRule(GrammarFileName, "remove_accessor_declaration");
    	DebugLocation(764, 32);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 226)) { return retval; }
    		// cs.g:764:28: ( ( attributes )? 'remove' block )
    		DebugEnterAlt(1);
    		// cs.g:765:2: ( attributes )? 'remove' block
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(765, 2);
    		// cs.g:765:2: ( attributes )?
    		int alt263=2;
    		try { DebugEnterSubRule(263);
    		try { DebugEnterDecision(263, decisionCanBacktrack[263]);
    		int LA263_0 = input.LA(1);

    		if ((LA263_0==97))
    		{
    			alt263=1;
    		}
    		} finally { DebugExitDecision(263); }
    		switch (alt263)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(765, 2);
    			PushFollow(Follow._attributes_in_remove_accessor_declaration5637);
    			attributes776=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes776.Tree, attributes776, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(263); }

    		DebugLocation(765, 16);
    		string_literal777=(IToken)Match(input,202,Follow._202_in_remove_accessor_declaration5642); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal777_tree = (object)adaptor.Create(string_literal777, retval);
    		adaptor.AddChild(root_0, string_literal777_tree);
    		}
    		DebugLocation(765, 27);
    		PushFollow(Follow._block_in_remove_accessor_declaration5646);
    		block778=block();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, block778.Tree, block778, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 226, remove_accessor_declaration_StartIndex); }
        }
     	DebugLocation(765, 32);
    	} finally { DebugExitRule(GrammarFileName, "remove_accessor_declaration"); }
    	return retval;

    }
    // $ANTLR end "remove_accessor_declaration"

    public class indexer_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_indexer_declaration() {}
    protected virtual void Leave_indexer_declaration() {}

    // $ANTLR start "indexer_declaration"
    // cs.g:766:1: indexer_declaration : ( attributes )? ( indexer_modifiers )? indexer_declarator '{' accessor_declarations '}' ;
    [GrammarRule("indexer_declaration")]
    public csParser.indexer_declaration_return indexer_declaration()
    {

        csParser.indexer_declaration_return retval = new csParser.indexer_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int indexer_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal782=null;
        IToken char_literal784=null;
        csParser.attributes_return attributes779 = default(csParser.attributes_return);
        csParser.indexer_modifiers_return indexer_modifiers780 = default(csParser.indexer_modifiers_return);
        csParser.indexer_declarator_return indexer_declarator781 = default(csParser.indexer_declarator_return);
        csParser.accessor_declarations_return accessor_declarations783 = default(csParser.accessor_declarations_return);

        object char_literal782_tree=null;
        object char_literal784_tree=null;

    	try { DebugEnterRule(GrammarFileName, "indexer_declaration");
    	DebugLocation(766, 91);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 227)) { return retval; }
    		// cs.g:766:20: ( ( attributes )? ( indexer_modifiers )? indexer_declarator '{' accessor_declarations '}' )
    		DebugEnterAlt(1);
    		// cs.g:767:2: ( attributes )? ( indexer_modifiers )? indexer_declarator '{' accessor_declarations '}'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(767, 2);
    		// cs.g:767:2: ( attributes )?
    		int alt264=2;
    		try { DebugEnterSubRule(264);
    		try { DebugEnterDecision(264, decisionCanBacktrack[264]);
    		int LA264_0 = input.LA(1);

    		if ((LA264_0==97))
    		{
    			alt264=1;
    		}
    		} finally { DebugExitDecision(264); }
    		switch (alt264)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(767, 2);
    			PushFollow(Follow._attributes_in_indexer_declaration5654);
    			attributes779=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes779.Tree, attributes779, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(264); }

    		DebugLocation(767, 16);
    		// cs.g:767:16: ( indexer_modifiers )?
    		int alt265=2;
    		try { DebugEnterSubRule(265);
    		try { DebugEnterDecision(265, decisionCanBacktrack[265]);
    		int LA265_0 = input.LA(1);

    		if ((LA265_0==94||LA265_0==138||(LA265_0>=170 && LA265_0<=174)||(LA265_0>=190 && LA265_0<=191)||(LA265_0>=197 && LA265_0<=198)))
    		{
    			alt265=1;
    		}
    		} finally { DebugExitDecision(265); }
    		switch (alt265)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: indexer_modifiers
    			{
    			DebugLocation(767, 16);
    			PushFollow(Follow._indexer_modifiers_in_indexer_declaration5659);
    			indexer_modifiers780=indexer_modifiers();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, indexer_modifiers780.Tree, indexer_modifiers780, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(265); }

    		DebugLocation(767, 37);
    		PushFollow(Follow._indexer_declarator_in_indexer_declaration5664);
    		indexer_declarator781=indexer_declarator();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, indexer_declarator781.Tree, indexer_declarator781, retval);
    		DebugLocation(767, 58);
    		char_literal782=(IToken)Match(input,92,Follow._92_in_indexer_declaration5668); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal782_tree = (object)adaptor.Create(char_literal782, retval);
    		adaptor.AddChild(root_0, char_literal782_tree);
    		}
    		DebugLocation(767, 64);
    		PushFollow(Follow._accessor_declarations_in_indexer_declaration5672);
    		accessor_declarations783=accessor_declarations();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, accessor_declarations783.Tree, accessor_declarations783, retval);
    		DebugLocation(767, 88);
    		char_literal784=(IToken)Match(input,93,Follow._93_in_indexer_declaration5676); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal784_tree = (object)adaptor.Create(char_literal784, retval);
    		adaptor.AddChild(root_0, char_literal784_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 227, indexer_declaration_StartIndex); }
        }
     	DebugLocation(767, 91);
    	} finally { DebugExitRule(GrammarFileName, "indexer_declaration"); }
    	return retval;

    }
    // $ANTLR end "indexer_declaration"

    public class indexer_modifiers_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_indexer_modifiers() {}
    protected virtual void Leave_indexer_modifiers() {}

    // $ANTLR start "indexer_modifiers"
    // cs.g:768:1: indexer_modifiers : ( indexer_modifier )+ ;
    [GrammarRule("indexer_modifiers")]
    public csParser.indexer_modifiers_return indexer_modifiers()
    {

        csParser.indexer_modifiers_return retval = new csParser.indexer_modifiers_return();
        retval.Start = (IToken)input.LT(1);
        int indexer_modifiers_StartIndex = input.Index;
        object root_0 = null;

        csParser.indexer_modifier_return indexer_modifier785 = default(csParser.indexer_modifier_return);


    	try { DebugEnterRule(GrammarFileName, "indexer_modifiers");
    	DebugLocation(768, 19);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 228)) { return retval; }
    		// cs.g:768:18: ( ( indexer_modifier )+ )
    		DebugEnterAlt(1);
    		// cs.g:769:2: ( indexer_modifier )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(769, 2);
    		// cs.g:769:2: ( indexer_modifier )+
    		int cnt266=0;
    		try { DebugEnterSubRule(266);
    		while (true)
    		{
    			int alt266=2;
    			try { DebugEnterDecision(266, decisionCanBacktrack[266]);
    			int LA266_0 = input.LA(1);

    			if ((LA266_0==94||LA266_0==138||(LA266_0>=170 && LA266_0<=174)||(LA266_0>=190 && LA266_0<=191)||(LA266_0>=197 && LA266_0<=198)))
    			{
    				alt266=1;
    			}


    			} finally { DebugExitDecision(266); }
    			switch (alt266)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: indexer_modifier
    				{
    				DebugLocation(769, 2);
    				PushFollow(Follow._indexer_modifier_in_indexer_modifiers5684);
    				indexer_modifier785=indexer_modifier();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, indexer_modifier785.Tree, indexer_modifier785, retval);

    				}
    				break;

    			default:
    				if (cnt266 >= 1)
    					goto loop266;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee266 = new EarlyExitException( 266, input );
    				DebugRecognitionException(eee266);
    				throw eee266;
    			}
    			cnt266++;
    		}
    		loop266:
    			;

    		} finally { DebugExitSubRule(266); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 228, indexer_modifiers_StartIndex); }
        }
     	DebugLocation(769, 19);
    	} finally { DebugExitRule(GrammarFileName, "indexer_modifiers"); }
    	return retval;

    }
    // $ANTLR end "indexer_modifiers"

    public class indexer_modifier_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_indexer_modifier() {}
    protected virtual void Leave_indexer_modifier() {}

    // $ANTLR start "indexer_modifier"
    // cs.g:770:1: indexer_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'virtual' | 'sealed' | 'override' | 'abstract' | 'extern' | 'unsafe' );
    [GrammarRule("indexer_modifier")]
    public csParser.indexer_modifier_return indexer_modifier()
    {

        csParser.indexer_modifier_return retval = new csParser.indexer_modifier_return();
        retval.Start = (IToken)input.LT(1);
        int indexer_modifier_StartIndex = input.Index;
        object root_0 = null;

        IToken set786=null;

        object set786_tree=null;

    	try { DebugEnterRule(GrammarFileName, "indexer_modifier");
    	DebugLocation(770, 128);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 229)) { return retval; }
    		// cs.g:770:17: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'virtual' | 'sealed' | 'override' | 'abstract' | 'extern' | 'unsafe' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(770, 17);
    		set786=(IToken)input.LT(1);
    		if (input.LA(1)==94||input.LA(1)==138||(input.LA(1)>=170 && input.LA(1)<=174)||(input.LA(1)>=190 && input.LA(1)<=191)||(input.LA(1)>=197 && input.LA(1)<=198))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set786, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 229, indexer_modifier_StartIndex); }
        }
     	DebugLocation(771, 128);
    	} finally { DebugExitRule(GrammarFileName, "indexer_modifier"); }
    	return retval;

    }
    // $ANTLR end "indexer_modifier"

    public class indexer_declarator_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_indexer_declarator() {}
    protected virtual void Leave_indexer_declarator() {}

    // $ANTLR start "indexer_declarator"
    // cs.g:772:1: indexer_declarator : type ( type_name '.' )? 'this' '[' formal_parameter_list ']' ;
    [GrammarRule("indexer_declarator")]
    public csParser.indexer_declarator_return indexer_declarator()
    {

        csParser.indexer_declarator_return retval = new csParser.indexer_declarator_return();
        retval.Start = (IToken)input.LT(1);
        int indexer_declarator_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal789=null;
        IToken string_literal790=null;
        IToken char_literal791=null;
        IToken char_literal793=null;
        csParser.type_return type787 = default(csParser.type_return);
        csParser.type_name_return type_name788 = default(csParser.type_name_return);
        csParser.formal_parameter_list_return formal_parameter_list792 = default(csParser.formal_parameter_list_return);

        object char_literal789_tree=null;
        object string_literal790_tree=null;
        object char_literal791_tree=null;
        object char_literal793_tree=null;

    	try { DebugEnterRule(GrammarFileName, "indexer_declarator");
    	DebugLocation(772, 68);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 230)) { return retval; }
    		// cs.g:772:19: ( type ( type_name '.' )? 'this' '[' formal_parameter_list ']' )
    		DebugEnterAlt(1);
    		// cs.g:773:2: type ( type_name '.' )? 'this' '[' formal_parameter_list ']'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(773, 2);
    		PushFollow(Follow._type_in_indexer_declarator5741);
    		type787=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type787.Tree, type787, retval);
    		DebugLocation(773, 9);
    		// cs.g:773:9: ( type_name '.' )?
    		int alt267=2;
    		try { DebugEnterSubRule(267);
    		try { DebugEnterDecision(267, decisionCanBacktrack[267]);
    		int LA267_0 = input.LA(1);

    		if ((LA267_0==IDENTIFIER||LA267_0==SET||LA267_0==95||(LA267_0>=101 && LA267_0<=107)||LA267_0==109||(LA267_0>=175 && LA267_0<=187)||LA267_0==199||(LA267_0>=201 && LA267_0<=202)||LA267_0==208||(LA267_0>=225 && LA267_0<=226)))
    		{
    			alt267=1;
    		}
    		} finally { DebugExitDecision(267); }
    		switch (alt267)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:773:10: type_name '.'
    			{
    			DebugLocation(773, 10);
    			PushFollow(Follow._type_name_in_indexer_declarator5746);
    			type_name788=type_name();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_name788.Tree, type_name788, retval);
    			DebugLocation(773, 20);
    			char_literal789=(IToken)new XToken((IToken)Match(input,DOT,Follow._DOT_in_indexer_declarator5748), "DOT"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal789_tree = (object)adaptor.Create(char_literal789, retval);
    			adaptor.AddChild(root_0, char_literal789_tree);
    			}

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(267); }

    		DebugLocation(773, 26);
    		string_literal790=(IToken)Match(input,90,Follow._90_in_indexer_declarator5752); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal790_tree = (object)adaptor.Create(string_literal790, retval);
    		adaptor.AddChild(root_0, string_literal790_tree);
    		}
    		DebugLocation(773, 35);
    		char_literal791=(IToken)Match(input,97,Follow._97_in_indexer_declarator5756); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal791_tree = (object)adaptor.Create(char_literal791, retval);
    		adaptor.AddChild(root_0, char_literal791_tree);
    		}
    		DebugLocation(773, 41);
    		PushFollow(Follow._formal_parameter_list_in_indexer_declarator5760);
    		formal_parameter_list792=formal_parameter_list();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, formal_parameter_list792.Tree, formal_parameter_list792, retval);
    		DebugLocation(773, 65);
    		char_literal793=(IToken)Match(input,99,Follow._99_in_indexer_declarator5764); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal793_tree = (object)adaptor.Create(char_literal793, retval);
    		adaptor.AddChild(root_0, char_literal793_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 230, indexer_declarator_StartIndex); }
        }
     	DebugLocation(773, 68);
    	} finally { DebugExitRule(GrammarFileName, "indexer_declarator"); }
    	return retval;

    }
    // $ANTLR end "indexer_declarator"

    public class operator_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_operator_declaration() {}
    protected virtual void Leave_operator_declaration() {}

    // $ANTLR start "operator_declaration"
    // cs.g:774:1: operator_declaration : ( attributes )? operator_modifiers operator_declarator operator_body ;
    [GrammarRule("operator_declaration")]
    public csParser.operator_declaration_return operator_declaration()
    {

        csParser.operator_declaration_return retval = new csParser.operator_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int operator_declaration_StartIndex = input.Index;
        object root_0 = null;

        csParser.attributes_return attributes794 = default(csParser.attributes_return);
        csParser.operator_modifiers_return operator_modifiers795 = default(csParser.operator_modifiers_return);
        csParser.operator_declarator_return operator_declarator796 = default(csParser.operator_declarator_return);
        csParser.operator_body_return operator_body797 = default(csParser.operator_body_return);


    	try { DebugEnterRule(GrammarFileName, "operator_declaration");
    	DebugLocation(774, 72);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 231)) { return retval; }
    		// cs.g:774:21: ( ( attributes )? operator_modifiers operator_declarator operator_body )
    		DebugEnterAlt(1);
    		// cs.g:775:2: ( attributes )? operator_modifiers operator_declarator operator_body
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(775, 2);
    		// cs.g:775:2: ( attributes )?
    		int alt268=2;
    		try { DebugEnterSubRule(268);
    		try { DebugEnterDecision(268, decisionCanBacktrack[268]);
    		int LA268_0 = input.LA(1);

    		if ((LA268_0==97))
    		{
    			alt268=1;
    		}
    		} finally { DebugExitDecision(268); }
    		switch (alt268)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(775, 2);
    			PushFollow(Follow._attributes_in_operator_declaration5772);
    			attributes794=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes794.Tree, attributes794, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(268); }

    		DebugLocation(775, 16);
    		PushFollow(Follow._operator_modifiers_in_operator_declaration5777);
    		operator_modifiers795=operator_modifiers();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, operator_modifiers795.Tree, operator_modifiers795, retval);
    		DebugLocation(775, 37);
    		PushFollow(Follow._operator_declarator_in_operator_declaration5781);
    		operator_declarator796=operator_declarator();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, operator_declarator796.Tree, operator_declarator796, retval);
    		DebugLocation(775, 59);
    		PushFollow(Follow._operator_body_in_operator_declaration5785);
    		operator_body797=operator_body();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, operator_body797.Tree, operator_body797, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 231, operator_declaration_StartIndex); }
        }
     	DebugLocation(775, 72);
    	} finally { DebugExitRule(GrammarFileName, "operator_declaration"); }
    	return retval;

    }
    // $ANTLR end "operator_declaration"

    public class operator_modifiers_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_operator_modifiers() {}
    protected virtual void Leave_operator_modifiers() {}

    // $ANTLR start "operator_modifiers"
    // cs.g:776:1: operator_modifiers : ( operator_modifier )+ ;
    [GrammarRule("operator_modifiers")]
    public csParser.operator_modifiers_return operator_modifiers()
    {

        csParser.operator_modifiers_return retval = new csParser.operator_modifiers_return();
        retval.Start = (IToken)input.LT(1);
        int operator_modifiers_StartIndex = input.Index;
        object root_0 = null;

        csParser.operator_modifier_return operator_modifier798 = default(csParser.operator_modifier_return);


    	try { DebugEnterRule(GrammarFileName, "operator_modifiers");
    	DebugLocation(776, 20);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 232)) { return retval; }
    		// cs.g:776:19: ( ( operator_modifier )+ )
    		DebugEnterAlt(1);
    		// cs.g:777:2: ( operator_modifier )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(777, 2);
    		// cs.g:777:2: ( operator_modifier )+
    		int cnt269=0;
    		try { DebugEnterSubRule(269);
    		while (true)
    		{
    			int alt269=2;
    			try { DebugEnterDecision(269, decisionCanBacktrack[269]);
    			int LA269_0 = input.LA(1);

    			if ((LA269_0==94||LA269_0==170||LA269_0==174||LA269_0==192))
    			{
    				alt269=1;
    			}


    			} finally { DebugExitDecision(269); }
    			switch (alt269)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: operator_modifier
    				{
    				DebugLocation(777, 2);
    				PushFollow(Follow._operator_modifier_in_operator_modifiers5793);
    				operator_modifier798=operator_modifier();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, operator_modifier798.Tree, operator_modifier798, retval);

    				}
    				break;

    			default:
    				if (cnt269 >= 1)
    					goto loop269;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee269 = new EarlyExitException( 269, input );
    				DebugRecognitionException(eee269);
    				throw eee269;
    			}
    			cnt269++;
    		}
    		loop269:
    			;

    		} finally { DebugExitSubRule(269); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 232, operator_modifiers_StartIndex); }
        }
     	DebugLocation(777, 20);
    	} finally { DebugExitRule(GrammarFileName, "operator_modifiers"); }
    	return retval;

    }
    // $ANTLR end "operator_modifiers"

    public class operator_modifier_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_operator_modifier() {}
    protected virtual void Leave_operator_modifier() {}

    // $ANTLR start "operator_modifier"
    // cs.g:778:1: operator_modifier : ( 'public' | 'static' | 'extern' | 'unsafe' );
    [GrammarRule("operator_modifier")]
    public csParser.operator_modifier_return operator_modifier()
    {

        csParser.operator_modifier_return retval = new csParser.operator_modifier_return();
        retval.Start = (IToken)input.LT(1);
        int operator_modifier_StartIndex = input.Index;
        object root_0 = null;

        IToken set799=null;

        object set799_tree=null;

    	try { DebugEnterRule(GrammarFileName, "operator_modifier");
    	DebugLocation(778, 43);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 233)) { return retval; }
    		// cs.g:778:18: ( 'public' | 'static' | 'extern' | 'unsafe' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(778, 18);
    		set799=(IToken)input.LT(1);
    		if (input.LA(1)==94||input.LA(1)==170||input.LA(1)==174||input.LA(1)==192)
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set799, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 233, operator_modifier_StartIndex); }
        }
     	DebugLocation(779, 43);
    	} finally { DebugExitRule(GrammarFileName, "operator_modifier"); }
    	return retval;

    }
    // $ANTLR end "operator_modifier"

    public class operator_declarator_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_operator_declarator() {}
    protected virtual void Leave_operator_declarator() {}

    // $ANTLR start "operator_declarator"
    // cs.g:780:1: operator_declarator : ( unary_operator_declarator | binary_operator_declarator | conversion_operator_declarator );
    [GrammarRule("operator_declarator")]
    public csParser.operator_declarator_return operator_declarator()
    {

        csParser.operator_declarator_return retval = new csParser.operator_declarator_return();
        retval.Start = (IToken)input.LT(1);
        int operator_declarator_StartIndex = input.Index;
        object root_0 = null;

        csParser.unary_operator_declarator_return unary_operator_declarator800 = default(csParser.unary_operator_declarator_return);
        csParser.binary_operator_declarator_return binary_operator_declarator801 = default(csParser.binary_operator_declarator_return);
        csParser.conversion_operator_declarator_return conversion_operator_declarator802 = default(csParser.conversion_operator_declarator_return);


    	try { DebugEnterRule(GrammarFileName, "operator_declarator");
    	DebugLocation(780, 33);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 234)) { return retval; }
    		// cs.g:780:20: ( unary_operator_declarator | binary_operator_declarator | conversion_operator_declarator )
    		int alt270=3;
    		try { DebugEnterDecision(270, decisionCanBacktrack[270]);
    		switch (input.LA(1))
    		{
    		case IDENTIFIER:
    			{
    			int LA270_1 = input.LA(2);

    			if ((EvaluatePredicate(synpred465_cs_fragment)))
    			{
    				alt270=1;
    			}
    			else if ((EvaluatePredicate(synpred466_cs_fragment)))
    			{
    				alt270=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 270, 1, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case SET:
    		case 95:
    		case 101:
    		case 102:
    		case 103:
    		case 104:
    		case 105:
    		case 106:
    		case 107:
    		case 109:
    		case 175:
    		case 176:
    		case 177:
    		case 178:
    		case 179:
    		case 180:
    		case 181:
    		case 182:
    		case 183:
    		case 184:
    		case 185:
    		case 186:
    		case 187:
    		case 199:
    		case 201:
    		case 202:
    		case 208:
    		case 225:
    		case 226:
    			{
    			int LA270_2 = input.LA(2);

    			if ((EvaluatePredicate(synpred465_cs_fragment)))
    			{
    				alt270=1;
    			}
    			else if ((EvaluatePredicate(synpred466_cs_fragment)))
    			{
    				alt270=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 270, 2, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case 114:
    		case 115:
    		case 116:
    		case 117:
    		case 118:
    		case 119:
    		case 120:
    		case 121:
    		case 122:
    		case 132:
    		case 133:
    		case 134:
    		case 135:
    		case 136:
    		case 137:
    			{
    			int LA270_3 = input.LA(2);

    			if ((EvaluatePredicate(synpred465_cs_fragment)))
    			{
    				alt270=1;
    			}
    			else if ((EvaluatePredicate(synpred466_cs_fragment)))
    			{
    				alt270=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 270, 3, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case 113:
    			{
    			int LA270_4 = input.LA(2);

    			if ((EvaluatePredicate(synpred465_cs_fragment)))
    			{
    				alt270=1;
    			}
    			else if ((EvaluatePredicate(synpred466_cs_fragment)))
    			{
    				alt270=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 270, 4, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case 204:
    		case 205:
    			{
    			alt270=3;
    			}
    			break;
    		default:
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 270, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(270); }
    		switch (alt270)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:781:2: unary_operator_declarator
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(781, 2);
    			PushFollow(Follow._unary_operator_declarator_in_operator_declarator5822);
    			unary_operator_declarator800=unary_operator_declarator();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, unary_operator_declarator800.Tree, unary_operator_declarator800, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:782:4: binary_operator_declarator
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(782, 4);
    			PushFollow(Follow._binary_operator_declarator_in_operator_declarator5827);
    			binary_operator_declarator801=binary_operator_declarator();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, binary_operator_declarator801.Tree, binary_operator_declarator801, retval);

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:783:4: conversion_operator_declarator
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(783, 4);
    			PushFollow(Follow._conversion_operator_declarator_in_operator_declarator5832);
    			conversion_operator_declarator802=conversion_operator_declarator();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, conversion_operator_declarator802.Tree, conversion_operator_declarator802, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 234, operator_declarator_StartIndex); }
        }
     	DebugLocation(783, 33);
    	} finally { DebugExitRule(GrammarFileName, "operator_declarator"); }
    	return retval;

    }
    // $ANTLR end "operator_declarator"

    public class unary_operator_declarator_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_unary_operator_declarator() {}
    protected virtual void Leave_unary_operator_declarator() {}

    // $ANTLR start "unary_operator_declarator"
    // cs.g:784:1: unary_operator_declarator : type 'operator' overloadable_unary_operator '(' type identifier ')' ;
    [GrammarRule("unary_operator_declarator")]
    public csParser.unary_operator_declarator_return unary_operator_declarator()
    {

        csParser.unary_operator_declarator_return retval = new csParser.unary_operator_declarator_return();
        retval.Start = (IToken)input.LT(1);
        int unary_operator_declarator_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal804=null;
        IToken char_literal806=null;
        IToken char_literal809=null;
        csParser.type_return type803 = default(csParser.type_return);
        csParser.overloadable_unary_operator_return overloadable_unary_operator805 = default(csParser.overloadable_unary_operator_return);
        csParser.type_return type807 = default(csParser.type_return);
        csParser.identifier_return identifier808 = default(csParser.identifier_return);

        object string_literal804_tree=null;
        object char_literal806_tree=null;
        object char_literal809_tree=null;

    	try { DebugEnterRule(GrammarFileName, "unary_operator_declarator");
    	DebugLocation(784, 81);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 235)) { return retval; }
    		// cs.g:784:26: ( type 'operator' overloadable_unary_operator '(' type identifier ')' )
    		DebugEnterAlt(1);
    		// cs.g:785:2: type 'operator' overloadable_unary_operator '(' type identifier ')'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(785, 2);
    		PushFollow(Follow._type_in_unary_operator_declarator5839);
    		type803=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type803.Tree, type803, retval);
    		DebugLocation(785, 9);
    		string_literal804=(IToken)Match(input,203,Follow._203_in_unary_operator_declarator5843); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal804_tree = (object)adaptor.Create(string_literal804, retval);
    		adaptor.AddChild(root_0, string_literal804_tree);
    		}
    		DebugLocation(785, 22);
    		PushFollow(Follow._overloadable_unary_operator_in_unary_operator_declarator5847);
    		overloadable_unary_operator805=overloadable_unary_operator();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, overloadable_unary_operator805.Tree, overloadable_unary_operator805, retval);
    		DebugLocation(785, 52);
    		char_literal806=(IToken)Match(input,110,Follow._110_in_unary_operator_declarator5851); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal806_tree = (object)adaptor.Create(char_literal806, retval);
    		adaptor.AddChild(root_0, char_literal806_tree);
    		}
    		DebugLocation(785, 58);
    		PushFollow(Follow._type_in_unary_operator_declarator5855);
    		type807=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type807.Tree, type807, retval);
    		DebugLocation(785, 65);
    		PushFollow(Follow._identifier_in_unary_operator_declarator5859);
    		identifier808=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier808.Tree, identifier808, retval);
    		DebugLocation(785, 78);
    		char_literal809=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_unary_operator_declarator5863), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal809_tree = (object)adaptor.Create(char_literal809, retval);
    		adaptor.AddChild(root_0, char_literal809_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 235, unary_operator_declarator_StartIndex); }
        }
     	DebugLocation(785, 81);
    	} finally { DebugExitRule(GrammarFileName, "unary_operator_declarator"); }
    	return retval;

    }
    // $ANTLR end "unary_operator_declarator"

    public class overloadable_unary_operator_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_overloadable_unary_operator() {}
    protected virtual void Leave_overloadable_unary_operator() {}

    // $ANTLR start "overloadable_unary_operator"
    // cs.g:786:1: overloadable_unary_operator : ( '+' | '-' | '!' | '~' | '++' | '--' | 'true' | 'false' );
    [GrammarRule("overloadable_unary_operator")]
    public csParser.overloadable_unary_operator_return overloadable_unary_operator()
    {

        csParser.overloadable_unary_operator_return retval = new csParser.overloadable_unary_operator_return();
        retval.Start = (IToken)input.LT(1);
        int overloadable_unary_operator_StartIndex = input.Index;
        object root_0 = null;

        IToken set810=null;

        object set810_tree=null;

    	try { DebugEnterRule(GrammarFileName, "overloadable_unary_operator");
    	DebugLocation(786, 63);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 236)) { return retval; }
    		// cs.g:786:28: ( '+' | '-' | '!' | '~' | '++' | '--' | 'true' | 'false' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(786, 28);
    		set810=(IToken)input.LT(1);
    		if ((input.LA(1)>=TRUE && input.LA(1)<=FALSE)||input.LA(1)==MINUS||(input.LA(1)>=124 && input.LA(1)<=128))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set810, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 236, overloadable_unary_operator_StartIndex); }
        }
     	DebugLocation(787, 63);
    	} finally { DebugExitRule(GrammarFileName, "overloadable_unary_operator"); }
    	return retval;

    }
    // $ANTLR end "overloadable_unary_operator"

    public class binary_operator_declarator_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_binary_operator_declarator() {}
    protected virtual void Leave_binary_operator_declarator() {}

    // $ANTLR start "binary_operator_declarator"
    // cs.g:788:1: binary_operator_declarator : type 'operator' overloadable_binary_operator '(' type identifier ',' type identifier ')' ;
    [GrammarRule("binary_operator_declarator")]
    public csParser.binary_operator_declarator_return binary_operator_declarator()
    {

        csParser.binary_operator_declarator_return retval = new csParser.binary_operator_declarator_return();
        retval.Start = (IToken)input.LT(1);
        int binary_operator_declarator_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal812=null;
        IToken char_literal814=null;
        IToken char_literal817=null;
        IToken char_literal820=null;
        csParser.type_return type811 = default(csParser.type_return);
        csParser.overloadable_binary_operator_return overloadable_binary_operator813 = default(csParser.overloadable_binary_operator_return);
        csParser.type_return type815 = default(csParser.type_return);
        csParser.identifier_return identifier816 = default(csParser.identifier_return);
        csParser.type_return type818 = default(csParser.type_return);
        csParser.identifier_return identifier819 = default(csParser.identifier_return);

        object string_literal812_tree=null;
        object char_literal814_tree=null;
        object char_literal817_tree=null;
        object char_literal820_tree=null;

    	try { DebugEnterRule(GrammarFileName, "binary_operator_declarator");
    	DebugLocation(788, 108);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 237)) { return retval; }
    		// cs.g:788:27: ( type 'operator' overloadable_binary_operator '(' type identifier ',' type identifier ')' )
    		DebugEnterAlt(1);
    		// cs.g:789:2: type 'operator' overloadable_binary_operator '(' type identifier ',' type identifier ')'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(789, 2);
    		PushFollow(Follow._type_in_binary_operator_declarator5914);
    		type811=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type811.Tree, type811, retval);
    		DebugLocation(789, 9);
    		string_literal812=(IToken)Match(input,203,Follow._203_in_binary_operator_declarator5918); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal812_tree = (object)adaptor.Create(string_literal812, retval);
    		adaptor.AddChild(root_0, string_literal812_tree);
    		}
    		DebugLocation(789, 22);
    		PushFollow(Follow._overloadable_binary_operator_in_binary_operator_declarator5922);
    		overloadable_binary_operator813=overloadable_binary_operator();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, overloadable_binary_operator813.Tree, overloadable_binary_operator813, retval);
    		DebugLocation(789, 53);
    		char_literal814=(IToken)Match(input,110,Follow._110_in_binary_operator_declarator5926); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal814_tree = (object)adaptor.Create(char_literal814, retval);
    		adaptor.AddChild(root_0, char_literal814_tree);
    		}
    		DebugLocation(789, 59);
    		PushFollow(Follow._type_in_binary_operator_declarator5930);
    		type815=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type815.Tree, type815, retval);
    		DebugLocation(789, 66);
    		PushFollow(Follow._identifier_in_binary_operator_declarator5934);
    		identifier816=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier816.Tree, identifier816, retval);
    		DebugLocation(789, 79);
    		char_literal817=(IToken)Match(input,98,Follow._98_in_binary_operator_declarator5938); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal817_tree = (object)adaptor.Create(char_literal817, retval);
    		adaptor.AddChild(root_0, char_literal817_tree);
    		}
    		DebugLocation(789, 85);
    		PushFollow(Follow._type_in_binary_operator_declarator5942);
    		type818=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type818.Tree, type818, retval);
    		DebugLocation(789, 92);
    		PushFollow(Follow._identifier_in_binary_operator_declarator5946);
    		identifier819=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier819.Tree, identifier819, retval);
    		DebugLocation(789, 105);
    		char_literal820=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_binary_operator_declarator5950), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal820_tree = (object)adaptor.Create(char_literal820, retval);
    		adaptor.AddChild(root_0, char_literal820_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 237, binary_operator_declarator_StartIndex); }
        }
     	DebugLocation(789, 108);
    	} finally { DebugExitRule(GrammarFileName, "binary_operator_declarator"); }
    	return retval;

    }
    // $ANTLR end "binary_operator_declarator"

    public class overloadable_binary_operator_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_overloadable_binary_operator() {}
    protected virtual void Leave_overloadable_binary_operator() {}

    // $ANTLR start "overloadable_binary_operator"
    // cs.g:791:1: overloadable_binary_operator : ( '+' | '-' | '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' );
    [GrammarRule("overloadable_binary_operator")]
    public csParser.overloadable_binary_operator_return overloadable_binary_operator()
    {

        csParser.overloadable_binary_operator_return retval = new csParser.overloadable_binary_operator_return();
        retval.Start = (IToken)input.LT(1);
        int overloadable_binary_operator_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal821=null;
        IToken char_literal822=null;
        IToken char_literal823=null;
        IToken char_literal824=null;
        IToken char_literal825=null;
        IToken char_literal826=null;
        IToken char_literal827=null;
        IToken char_literal828=null;
        IToken string_literal829=null;
        IToken char_literal830=null;
        IToken char_literal831=null;
        IToken string_literal832=null;
        IToken string_literal833=null;
        IToken char_literal834=null;
        IToken char_literal835=null;
        IToken string_literal836=null;
        IToken string_literal837=null;

        object char_literal821_tree=null;
        object char_literal822_tree=null;
        object char_literal823_tree=null;
        object char_literal824_tree=null;
        object char_literal825_tree=null;
        object char_literal826_tree=null;
        object char_literal827_tree=null;
        object char_literal828_tree=null;
        object string_literal829_tree=null;
        object char_literal830_tree=null;
        object char_literal831_tree=null;
        object string_literal832_tree=null;
        object string_literal833_tree=null;
        object char_literal834_tree=null;
        object char_literal835_tree=null;
        object string_literal836_tree=null;
        object string_literal837_tree=null;

    	try { DebugEnterRule(GrammarFileName, "overloadable_binary_operator");
    	DebugLocation(791, 104);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 238)) { return retval; }
    		// cs.g:791:29: ( '+' | '-' | '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' )
    		int alt271=16;
    		try { DebugEnterDecision(271, decisionCanBacktrack[271]);
    		try
    		{
    			alt271 = dfa271.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(271); }
    		switch (alt271)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:792:2: '+'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(792, 2);
    			char_literal821=(IToken)Match(input,124,Follow._124_in_overloadable_binary_operator5959); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal821_tree = (object)adaptor.Create(char_literal821, retval);
    			adaptor.AddChild(root_0, char_literal821_tree);
    			}

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:792:8: '-'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(792, 8);
    			char_literal822=(IToken)new XToken((IToken)Match(input,MINUS,Follow._MINUS_in_overloadable_binary_operator5963), "MINUS"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal822_tree = (object)adaptor.Create(char_literal822, retval);
    			adaptor.AddChild(root_0, char_literal822_tree);
    			}

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:792:14: '*'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(792, 14);
    			char_literal823=(IToken)Match(input,111,Follow._111_in_overloadable_binary_operator5967); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal823_tree = (object)adaptor.Create(char_literal823, retval);
    			adaptor.AddChild(root_0, char_literal823_tree);
    			}

    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// cs.g:792:20: '/'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(792, 20);
    			char_literal824=(IToken)Match(input,146,Follow._146_in_overloadable_binary_operator5971); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal824_tree = (object)adaptor.Create(char_literal824, retval);
    			adaptor.AddChild(root_0, char_literal824_tree);
    			}

    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// cs.g:792:26: '%'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(792, 26);
    			char_literal825=(IToken)Match(input,147,Follow._147_in_overloadable_binary_operator5975); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal825_tree = (object)adaptor.Create(char_literal825, retval);
    			adaptor.AddChild(root_0, char_literal825_tree);
    			}

    			}
    			break;
    		case 6:
    			DebugEnterAlt(6);
    			// cs.g:792:32: '&'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(792, 32);
    			char_literal826=(IToken)Match(input,129,Follow._129_in_overloadable_binary_operator5979); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal826_tree = (object)adaptor.Create(char_literal826, retval);
    			adaptor.AddChild(root_0, char_literal826_tree);
    			}

    			}
    			break;
    		case 7:
    			DebugEnterAlt(7);
    			// cs.g:792:38: '|'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(792, 38);
    			char_literal827=(IToken)Match(input,156,Follow._156_in_overloadable_binary_operator5983); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal827_tree = (object)adaptor.Create(char_literal827, retval);
    			adaptor.AddChild(root_0, char_literal827_tree);
    			}

    			}
    			break;
    		case 8:
    			DebugEnterAlt(8);
    			// cs.g:792:44: '^'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(792, 44);
    			char_literal828=(IToken)Match(input,155,Follow._155_in_overloadable_binary_operator5987); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal828_tree = (object)adaptor.Create(char_literal828, retval);
    			adaptor.AddChild(root_0, char_literal828_tree);
    			}

    			}
    			break;
    		case 9:
    			DebugEnterAlt(9);
    			// cs.g:792:50: '<<'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(792, 50);
    			string_literal829=(IToken)Match(input,148,Follow._148_in_overloadable_binary_operator5991); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal829_tree = (object)adaptor.Create(string_literal829, retval);
    			adaptor.AddChild(root_0, string_literal829_tree);
    			}

    			}
    			break;
    		case 10:
    			DebugEnterAlt(10);
    			// cs.g:792:57: '>' '>'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(792, 57);
    			char_literal830=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_overloadable_binary_operator5995), "GT"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal830_tree = (object)adaptor.Create(char_literal830, retval);
    			adaptor.AddChild(root_0, char_literal830_tree);
    			}
    			DebugLocation(792, 61);
    			char_literal831=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_overloadable_binary_operator5997), "GT"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal831_tree = (object)adaptor.Create(char_literal831, retval);
    			adaptor.AddChild(root_0, char_literal831_tree);
    			}

    			}
    			break;
    		case 11:
    			DebugEnterAlt(11);
    			// cs.g:792:67: '=='
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(792, 67);
    			string_literal832=(IToken)Match(input,153,Follow._153_in_overloadable_binary_operator6001); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal832_tree = (object)adaptor.Create(string_literal832, retval);
    			adaptor.AddChild(root_0, string_literal832_tree);
    			}

    			}
    			break;
    		case 12:
    			DebugEnterAlt(12);
    			// cs.g:792:74: '!='
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(792, 74);
    			string_literal833=(IToken)Match(input,154,Follow._154_in_overloadable_binary_operator6005); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal833_tree = (object)adaptor.Create(string_literal833, retval);
    			adaptor.AddChild(root_0, string_literal833_tree);
    			}

    			}
    			break;
    		case 13:
    			DebugEnterAlt(13);
    			// cs.g:792:81: '>'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(792, 81);
    			char_literal834=(IToken)new XToken((IToken)Match(input,GT,Follow._GT_in_overloadable_binary_operator6009), "GT"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal834_tree = (object)adaptor.Create(char_literal834, retval);
    			adaptor.AddChild(root_0, char_literal834_tree);
    			}

    			}
    			break;
    		case 14:
    			DebugEnterAlt(14);
    			// cs.g:792:87: '<'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(792, 87);
    			char_literal835=(IToken)Match(input,123,Follow._123_in_overloadable_binary_operator6013); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal835_tree = (object)adaptor.Create(char_literal835, retval);
    			adaptor.AddChild(root_0, char_literal835_tree);
    			}

    			}
    			break;
    		case 15:
    			DebugEnterAlt(15);
    			// cs.g:792:93: '>='
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(792, 93);
    			string_literal836=(IToken)Match(input,150,Follow._150_in_overloadable_binary_operator6017); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal836_tree = (object)adaptor.Create(string_literal836, retval);
    			adaptor.AddChild(root_0, string_literal836_tree);
    			}

    			}
    			break;
    		case 16:
    			DebugEnterAlt(16);
    			// cs.g:792:100: '<='
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(792, 100);
    			string_literal837=(IToken)Match(input,149,Follow._149_in_overloadable_binary_operator6021); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal837_tree = (object)adaptor.Create(string_literal837, retval);
    			adaptor.AddChild(root_0, string_literal837_tree);
    			}

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 238, overloadable_binary_operator_StartIndex); }
        }
     	DebugLocation(792, 104);
    	} finally { DebugExitRule(GrammarFileName, "overloadable_binary_operator"); }
    	return retval;

    }
    // $ANTLR end "overloadable_binary_operator"

    public class conversion_operator_declarator_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_conversion_operator_declarator() {}
    protected virtual void Leave_conversion_operator_declarator() {}

    // $ANTLR start "conversion_operator_declarator"
    // cs.g:793:1: conversion_operator_declarator : ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')' ;
    [GrammarRule("conversion_operator_declarator")]
    public csParser.conversion_operator_declarator_return conversion_operator_declarator()
    {

        csParser.conversion_operator_declarator_return retval = new csParser.conversion_operator_declarator_return();
        retval.Start = (IToken)input.LT(1);
        int conversion_operator_declarator_StartIndex = input.Index;
        object root_0 = null;

        IToken set838=null;
        IToken string_literal839=null;
        IToken char_literal841=null;
        IToken char_literal844=null;
        csParser.type_return type840 = default(csParser.type_return);
        csParser.type_return type842 = default(csParser.type_return);
        csParser.identifier_return identifier843 = default(csParser.identifier_return);

        object set838_tree=null;
        object string_literal839_tree=null;
        object char_literal841_tree=null;
        object char_literal844_tree=null;

    	try { DebugEnterRule(GrammarFileName, "conversion_operator_declarator");
    	DebugLocation(793, 78);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 239)) { return retval; }
    		// cs.g:793:31: ( ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')' )
    		DebugEnterAlt(1);
    		// cs.g:794:2: ( 'implicit' | 'explicit' ) 'operator' type '(' type identifier ')'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(794, 2);
    		set838=(IToken)input.LT(1);
    		if ((input.LA(1)>=204 && input.LA(1)<=205))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set838, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}

    		DebugLocation(794, 29);
    		string_literal839=(IToken)Match(input,203,Follow._203_in_conversion_operator_declarator6039); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal839_tree = (object)adaptor.Create(string_literal839, retval);
    		adaptor.AddChild(root_0, string_literal839_tree);
    		}
    		DebugLocation(794, 42);
    		PushFollow(Follow._type_in_conversion_operator_declarator6043);
    		type840=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type840.Tree, type840, retval);
    		DebugLocation(794, 49);
    		char_literal841=(IToken)Match(input,110,Follow._110_in_conversion_operator_declarator6047); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal841_tree = (object)adaptor.Create(char_literal841, retval);
    		adaptor.AddChild(root_0, char_literal841_tree);
    		}
    		DebugLocation(794, 55);
    		PushFollow(Follow._type_in_conversion_operator_declarator6051);
    		type842=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type842.Tree, type842, retval);
    		DebugLocation(794, 62);
    		PushFollow(Follow._identifier_in_conversion_operator_declarator6055);
    		identifier843=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier843.Tree, identifier843, retval);
    		DebugLocation(794, 75);
    		char_literal844=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_conversion_operator_declarator6059), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal844_tree = (object)adaptor.Create(char_literal844, retval);
    		adaptor.AddChild(root_0, char_literal844_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 239, conversion_operator_declarator_StartIndex); }
        }
     	DebugLocation(794, 78);
    	} finally { DebugExitRule(GrammarFileName, "conversion_operator_declarator"); }
    	return retval;

    }
    // $ANTLR end "conversion_operator_declarator"

    public class operator_body_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_operator_body() {}
    protected virtual void Leave_operator_body() {}

    // $ANTLR start "operator_body"
    // cs.g:795:1: operator_body : block ;
    [GrammarRule("operator_body")]
    public csParser.operator_body_return operator_body()
    {

        csParser.operator_body_return retval = new csParser.operator_body_return();
        retval.Start = (IToken)input.LT(1);
        int operator_body_StartIndex = input.Index;
        object root_0 = null;

        csParser.block_return block845 = default(csParser.block_return);


    	try { DebugEnterRule(GrammarFileName, "operator_body");
    	DebugLocation(795, 7);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 240)) { return retval; }
    		// cs.g:795:14: ( block )
    		DebugEnterAlt(1);
    		// cs.g:796:2: block
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(796, 2);
    		PushFollow(Follow._block_in_operator_body6067);
    		block845=block();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, block845.Tree, block845, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 240, operator_body_StartIndex); }
        }
     	DebugLocation(796, 7);
    	} finally { DebugExitRule(GrammarFileName, "operator_body"); }
    	return retval;

    }
    // $ANTLR end "operator_body"

    public class constructor_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_constructor_declaration() {}
    protected virtual void Leave_constructor_declaration() {}

    // $ANTLR start "constructor_declaration"
    // cs.g:797:1: constructor_declaration : ( attributes )? ( constructor_modifiers )? constructor_declarator constructor_body ;
    [GrammarRule("constructor_declaration")]
    public csParser.constructor_declaration_return constructor_declaration()
    {

        csParser.constructor_declaration_return retval = new csParser.constructor_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int constructor_declaration_StartIndex = input.Index;
        object root_0 = null;

        csParser.attributes_return attributes846 = default(csParser.attributes_return);
        csParser.constructor_modifiers_return constructor_modifiers847 = default(csParser.constructor_modifiers_return);
        csParser.constructor_declarator_return constructor_declarator848 = default(csParser.constructor_declarator_return);
        csParser.constructor_body_return constructor_body849 = default(csParser.constructor_body_return);


    	try { DebugEnterRule(GrammarFileName, "constructor_declaration");
    	DebugLocation(797, 82);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 241)) { return retval; }
    		// cs.g:797:24: ( ( attributes )? ( constructor_modifiers )? constructor_declarator constructor_body )
    		DebugEnterAlt(1);
    		// cs.g:798:2: ( attributes )? ( constructor_modifiers )? constructor_declarator constructor_body
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(798, 2);
    		// cs.g:798:2: ( attributes )?
    		int alt272=2;
    		try { DebugEnterSubRule(272);
    		try { DebugEnterDecision(272, decisionCanBacktrack[272]);
    		int LA272_0 = input.LA(1);

    		if ((LA272_0==97))
    		{
    			alt272=1;
    		}
    		} finally { DebugExitDecision(272); }
    		switch (alt272)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(798, 2);
    			PushFollow(Follow._attributes_in_constructor_declaration6075);
    			attributes846=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes846.Tree, attributes846, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(272); }

    		DebugLocation(798, 16);
    		// cs.g:798:16: ( constructor_modifiers )?
    		int alt273=2;
    		try { DebugEnterSubRule(273);
    		try { DebugEnterDecision(273, decisionCanBacktrack[273]);
    		int LA273_0 = input.LA(1);

    		if ((LA273_0==94||(LA273_0>=170 && LA273_0<=174)))
    		{
    			alt273=1;
    		}
    		} finally { DebugExitDecision(273); }
    		switch (alt273)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: constructor_modifiers
    			{
    			DebugLocation(798, 16);
    			PushFollow(Follow._constructor_modifiers_in_constructor_declaration6080);
    			constructor_modifiers847=constructor_modifiers();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, constructor_modifiers847.Tree, constructor_modifiers847, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(273); }

    		DebugLocation(798, 41);
    		PushFollow(Follow._constructor_declarator_in_constructor_declaration6085);
    		constructor_declarator848=constructor_declarator();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, constructor_declarator848.Tree, constructor_declarator848, retval);
    		DebugLocation(798, 66);
    		PushFollow(Follow._constructor_body_in_constructor_declaration6089);
    		constructor_body849=constructor_body();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, constructor_body849.Tree, constructor_body849, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 241, constructor_declaration_StartIndex); }
        }
     	DebugLocation(798, 82);
    	} finally { DebugExitRule(GrammarFileName, "constructor_declaration"); }
    	return retval;

    }
    // $ANTLR end "constructor_declaration"

    public class constructor_modifiers_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_constructor_modifiers() {}
    protected virtual void Leave_constructor_modifiers() {}

    // $ANTLR start "constructor_modifiers"
    // cs.g:799:1: constructor_modifiers : ( constructor_modifier )+ ;
    [GrammarRule("constructor_modifiers")]
    public csParser.constructor_modifiers_return constructor_modifiers()
    {

        csParser.constructor_modifiers_return retval = new csParser.constructor_modifiers_return();
        retval.Start = (IToken)input.LT(1);
        int constructor_modifiers_StartIndex = input.Index;
        object root_0 = null;

        csParser.constructor_modifier_return constructor_modifier850 = default(csParser.constructor_modifier_return);


    	try { DebugEnterRule(GrammarFileName, "constructor_modifiers");
    	DebugLocation(799, 23);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 242)) { return retval; }
    		// cs.g:799:22: ( ( constructor_modifier )+ )
    		DebugEnterAlt(1);
    		// cs.g:800:2: ( constructor_modifier )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(800, 2);
    		// cs.g:800:2: ( constructor_modifier )+
    		int cnt274=0;
    		try { DebugEnterSubRule(274);
    		while (true)
    		{
    			int alt274=2;
    			try { DebugEnterDecision(274, decisionCanBacktrack[274]);
    			int LA274_0 = input.LA(1);

    			if ((LA274_0==94||(LA274_0>=170 && LA274_0<=174)))
    			{
    				alt274=1;
    			}


    			} finally { DebugExitDecision(274); }
    			switch (alt274)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: constructor_modifier
    				{
    				DebugLocation(800, 2);
    				PushFollow(Follow._constructor_modifier_in_constructor_modifiers6097);
    				constructor_modifier850=constructor_modifier();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, constructor_modifier850.Tree, constructor_modifier850, retval);

    				}
    				break;

    			default:
    				if (cnt274 >= 1)
    					goto loop274;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee274 = new EarlyExitException( 274, input );
    				DebugRecognitionException(eee274);
    				throw eee274;
    			}
    			cnt274++;
    		}
    		loop274:
    			;

    		} finally { DebugExitSubRule(274); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 242, constructor_modifiers_StartIndex); }
        }
     	DebugLocation(800, 23);
    	} finally { DebugExitRule(GrammarFileName, "constructor_modifiers"); }
    	return retval;

    }
    // $ANTLR end "constructor_modifiers"

    public class constructor_modifier_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_constructor_modifier() {}
    protected virtual void Leave_constructor_modifier() {}

    // $ANTLR start "constructor_modifier"
    // cs.g:801:1: constructor_modifier : ( 'public' | 'protected' | 'internal' | 'private' | 'extern' | 'unsafe' );
    [GrammarRule("constructor_modifier")]
    public csParser.constructor_modifier_return constructor_modifier()
    {

        csParser.constructor_modifier_return retval = new csParser.constructor_modifier_return();
        retval.Start = (IToken)input.LT(1);
        int constructor_modifier_StartIndex = input.Index;
        object root_0 = null;

        IToken set851=null;

        object set851_tree=null;

    	try { DebugEnterRule(GrammarFileName, "constructor_modifier");
    	DebugLocation(801, 71);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 243)) { return retval; }
    		// cs.g:801:21: ( 'public' | 'protected' | 'internal' | 'private' | 'extern' | 'unsafe' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(801, 21);
    		set851=(IToken)input.LT(1);
    		if (input.LA(1)==94||(input.LA(1)>=170 && input.LA(1)<=174))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set851, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 243, constructor_modifier_StartIndex); }
        }
     	DebugLocation(802, 71);
    	} finally { DebugExitRule(GrammarFileName, "constructor_modifier"); }
    	return retval;

    }
    // $ANTLR end "constructor_modifier"

    public class constructor_declarator_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_constructor_declarator() {}
    protected virtual void Leave_constructor_declarator() {}

    // $ANTLR start "constructor_declarator"
    // cs.g:803:1: constructor_declarator : identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )? ;
    [GrammarRule("constructor_declarator")]
    public csParser.constructor_declarator_return constructor_declarator()
    {

        csParser.constructor_declarator_return retval = new csParser.constructor_declarator_return();
        retval.Start = (IToken)input.LT(1);
        int constructor_declarator_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal853=null;
        IToken char_literal855=null;
        csParser.identifier_return identifier852 = default(csParser.identifier_return);
        csParser.formal_parameter_list_return formal_parameter_list854 = default(csParser.formal_parameter_list_return);
        csParser.constructor_initializer_return constructor_initializer856 = default(csParser.constructor_initializer_return);

        object char_literal853_tree=null;
        object char_literal855_tree=null;

    	try { DebugEnterRule(GrammarFileName, "constructor_declarator");
    	DebugLocation(803, 76);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 244)) { return retval; }
    		// cs.g:803:23: ( identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )? )
    		DebugEnterAlt(1);
    		// cs.g:804:2: identifier '(' ( formal_parameter_list )? ')' ( constructor_initializer )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(804, 2);
    		PushFollow(Follow._identifier_in_constructor_declarator6135);
    		identifier852=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier852.Tree, identifier852, retval);
    		DebugLocation(804, 15);
    		char_literal853=(IToken)Match(input,110,Follow._110_in_constructor_declarator6139); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal853_tree = (object)adaptor.Create(char_literal853, retval);
    		adaptor.AddChild(root_0, char_literal853_tree);
    		}
    		DebugLocation(804, 21);
    		// cs.g:804:21: ( formal_parameter_list )?
    		int alt275=2;
    		try { DebugEnterSubRule(275);
    		try { DebugEnterDecision(275, decisionCanBacktrack[275]);
    		int LA275_0 = input.LA(1);

    		if ((LA275_0==IDENTIFIER||LA275_0==SET||LA275_0==90||LA275_0==95||LA275_0==97||(LA275_0>=101 && LA275_0<=107)||LA275_0==109||(LA275_0>=113 && LA275_0<=122)||(LA275_0>=130 && LA275_0<=137)||(LA275_0>=175 && LA275_0<=187)||(LA275_0>=199 && LA275_0<=202)||LA275_0==208||(LA275_0>=225 && LA275_0<=226)))
    		{
    			alt275=1;
    		}
    		} finally { DebugExitDecision(275); }
    		switch (alt275)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: formal_parameter_list
    			{
    			DebugLocation(804, 21);
    			PushFollow(Follow._formal_parameter_list_in_constructor_declarator6143);
    			formal_parameter_list854=formal_parameter_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, formal_parameter_list854.Tree, formal_parameter_list854, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(275); }

    		DebugLocation(804, 46);
    		char_literal855=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_constructor_declarator6148), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal855_tree = (object)adaptor.Create(char_literal855, retval);
    		adaptor.AddChild(root_0, char_literal855_tree);
    		}
    		DebugLocation(804, 52);
    		// cs.g:804:52: ( constructor_initializer )?
    		int alt276=2;
    		try { DebugEnterSubRule(276);
    		try { DebugEnterDecision(276, decisionCanBacktrack[276]);
    		int LA276_0 = input.LA(1);

    		if ((LA276_0==100))
    		{
    			alt276=1;
    		}
    		} finally { DebugExitDecision(276); }
    		switch (alt276)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: constructor_initializer
    			{
    			DebugLocation(804, 52);
    			PushFollow(Follow._constructor_initializer_in_constructor_declarator6152);
    			constructor_initializer856=constructor_initializer();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, constructor_initializer856.Tree, constructor_initializer856, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(276); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 244, constructor_declarator_StartIndex); }
        }
     	DebugLocation(804, 76);
    	} finally { DebugExitRule(GrammarFileName, "constructor_declarator"); }
    	return retval;

    }
    // $ANTLR end "constructor_declarator"

    public class constructor_initializer_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_constructor_initializer() {}
    protected virtual void Leave_constructor_initializer() {}

    // $ANTLR start "constructor_initializer"
    // cs.g:805:1: constructor_initializer : ':' ( 'base' | 'this' ) '(' ( argument_list )? ')' ;
    [GrammarRule("constructor_initializer")]
    public csParser.constructor_initializer_return constructor_initializer()
    {

        csParser.constructor_initializer_return retval = new csParser.constructor_initializer_return();
        retval.Start = (IToken)input.LT(1);
        int constructor_initializer_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal857=null;
        IToken set858=null;
        IToken char_literal859=null;
        IToken char_literal861=null;
        csParser.argument_list_return argument_list860 = default(csParser.argument_list_return);

        object char_literal857_tree=null;
        object set858_tree=null;
        object char_literal859_tree=null;
        object char_literal861_tree=null;

    	try { DebugEnterRule(GrammarFileName, "constructor_initializer");
    	DebugLocation(805, 54);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 245)) { return retval; }
    		// cs.g:805:24: ( ':' ( 'base' | 'this' ) '(' ( argument_list )? ')' )
    		DebugEnterAlt(1);
    		// cs.g:806:2: ':' ( 'base' | 'this' ) '(' ( argument_list )? ')'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(806, 2);
    		char_literal857=(IToken)Match(input,100,Follow._100_in_constructor_initializer6161); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal857_tree = (object)adaptor.Create(char_literal857, retval);
    		adaptor.AddChild(root_0, char_literal857_tree);
    		}
    		DebugLocation(806, 8);
    		set858=(IToken)input.LT(1);
    		if ((input.LA(1)>=90 && input.LA(1)<=91))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set858, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}

    		DebugLocation(806, 28);
    		char_literal859=(IToken)Match(input,110,Follow._110_in_constructor_initializer6175); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal859_tree = (object)adaptor.Create(char_literal859, retval);
    		adaptor.AddChild(root_0, char_literal859_tree);
    		}
    		DebugLocation(806, 34);
    		// cs.g:806:34: ( argument_list )?
    		int alt277=2;
    		try { DebugEnterSubRule(277);
    		try { DebugEnterDecision(277, decisionCanBacktrack[277]);
    		int LA277_0 = input.LA(1);

    		if (((LA277_0>=IDENTIFIER && LA277_0<=NULL)||LA277_0==MINUS||LA277_0==SET||(LA277_0>=90 && LA277_0<=91)||LA277_0==95||(LA277_0>=101 && LA277_0<=107)||(LA277_0>=109 && LA277_0<=111)||(LA277_0>=114 && LA277_0<=122)||(LA277_0>=124 && LA277_0<=144)||(LA277_0>=175 && LA277_0<=187)||LA277_0==199||(LA277_0>=201 && LA277_0<=202)||LA277_0==208||(LA277_0>=225 && LA277_0<=226)))
    		{
    			alt277=1;
    		}
    		} finally { DebugExitDecision(277); }
    		switch (alt277)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: argument_list
    			{
    			DebugLocation(806, 34);
    			PushFollow(Follow._argument_list_in_constructor_initializer6179);
    			argument_list860=argument_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, argument_list860.Tree, argument_list860, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(277); }

    		DebugLocation(806, 51);
    		char_literal861=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_constructor_initializer6184), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal861_tree = (object)adaptor.Create(char_literal861, retval);
    		adaptor.AddChild(root_0, char_literal861_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 245, constructor_initializer_StartIndex); }
        }
     	DebugLocation(806, 54);
    	} finally { DebugExitRule(GrammarFileName, "constructor_initializer"); }
    	return retval;

    }
    // $ANTLR end "constructor_initializer"

    public class constructor_body_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_constructor_body() {}
    protected virtual void Leave_constructor_body() {}

    // $ANTLR start "constructor_body"
    // cs.g:807:1: constructor_body : block ;
    [GrammarRule("constructor_body")]
    public csParser.constructor_body_return constructor_body()
    {

        csParser.constructor_body_return retval = new csParser.constructor_body_return();
        retval.Start = (IToken)input.LT(1);
        int constructor_body_StartIndex = input.Index;
        object root_0 = null;

        csParser.block_return block862 = default(csParser.block_return);


    	try { DebugEnterRule(GrammarFileName, "constructor_body");
    	DebugLocation(807, 7);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 246)) { return retval; }
    		// cs.g:807:17: ( block )
    		DebugEnterAlt(1);
    		// cs.g:808:2: block
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(808, 2);
    		PushFollow(Follow._block_in_constructor_body6192);
    		block862=block();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, block862.Tree, block862, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 246, constructor_body_StartIndex); }
        }
     	DebugLocation(808, 7);
    	} finally { DebugExitRule(GrammarFileName, "constructor_body"); }
    	return retval;

    }
    // $ANTLR end "constructor_body"

    public class static_constructor_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_static_constructor_declaration() {}
    protected virtual void Leave_static_constructor_declaration() {}

    // $ANTLR start "static_constructor_declaration"
    // cs.g:809:1: static_constructor_declaration : ( attributes )? static_constructor_modifiers identifier '(' ')' static_constructor_body ;
    [GrammarRule("static_constructor_declaration")]
    public csParser.static_constructor_declaration_return static_constructor_declaration()
    {

        csParser.static_constructor_declaration_return retval = new csParser.static_constructor_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int static_constructor_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal866=null;
        IToken char_literal867=null;
        csParser.attributes_return attributes863 = default(csParser.attributes_return);
        csParser.static_constructor_modifiers_return static_constructor_modifiers864 = default(csParser.static_constructor_modifiers_return);
        csParser.identifier_return identifier865 = default(csParser.identifier_return);
        csParser.static_constructor_body_return static_constructor_body868 = default(csParser.static_constructor_body_return);

        object char_literal866_tree=null;
        object char_literal867_tree=null;

    	try { DebugEnterRule(GrammarFileName, "static_constructor_declaration");
    	DebugLocation(809, 93);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 247)) { return retval; }
    		// cs.g:809:31: ( ( attributes )? static_constructor_modifiers identifier '(' ')' static_constructor_body )
    		DebugEnterAlt(1);
    		// cs.g:810:2: ( attributes )? static_constructor_modifiers identifier '(' ')' static_constructor_body
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(810, 2);
    		// cs.g:810:2: ( attributes )?
    		int alt278=2;
    		try { DebugEnterSubRule(278);
    		try { DebugEnterDecision(278, decisionCanBacktrack[278]);
    		int LA278_0 = input.LA(1);

    		if ((LA278_0==97))
    		{
    			alt278=1;
    		}
    		} finally { DebugExitDecision(278); }
    		switch (alt278)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(810, 2);
    			PushFollow(Follow._attributes_in_static_constructor_declaration6200);
    			attributes863=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes863.Tree, attributes863, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(278); }

    		DebugLocation(810, 16);
    		PushFollow(Follow._static_constructor_modifiers_in_static_constructor_declaration6205);
    		static_constructor_modifiers864=static_constructor_modifiers();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, static_constructor_modifiers864.Tree, static_constructor_modifiers864, retval);
    		DebugLocation(810, 46);
    		PushFollow(Follow._identifier_in_static_constructor_declaration6208);
    		identifier865=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier865.Tree, identifier865, retval);
    		DebugLocation(810, 59);
    		char_literal866=(IToken)Match(input,110,Follow._110_in_static_constructor_declaration6212); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal866_tree = (object)adaptor.Create(char_literal866, retval);
    		adaptor.AddChild(root_0, char_literal866_tree);
    		}
    		DebugLocation(810, 65);
    		char_literal867=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_static_constructor_declaration6216), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal867_tree = (object)adaptor.Create(char_literal867, retval);
    		adaptor.AddChild(root_0, char_literal867_tree);
    		}
    		DebugLocation(810, 70);
    		PushFollow(Follow._static_constructor_body_in_static_constructor_declaration6219);
    		static_constructor_body868=static_constructor_body();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, static_constructor_body868.Tree, static_constructor_body868, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 247, static_constructor_declaration_StartIndex); }
        }
     	DebugLocation(810, 93);
    	} finally { DebugExitRule(GrammarFileName, "static_constructor_declaration"); }
    	return retval;

    }
    // $ANTLR end "static_constructor_declaration"

    public class static_constructor_modifiers_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_static_constructor_modifiers() {}
    protected virtual void Leave_static_constructor_modifiers() {}

    // $ANTLR start "static_constructor_modifiers"
    // cs.g:811:1: static_constructor_modifiers : ( 'extern' 'unsafe' 'static' | 'extern' 'static' ( 'unsafe' )? | 'unsafe' 'extern' 'static' | 'unsafe' 'static' ( 'extern' )? | 'static' 'extern' ( 'unsafe' )? | 'static' 'unsafe' ( 'extern' )? | 'extern' | 'unsafe' | 'static' );
    [GrammarRule("static_constructor_modifiers")]
    public csParser.static_constructor_modifiers_return static_constructor_modifiers()
    {

        csParser.static_constructor_modifiers_return retval = new csParser.static_constructor_modifiers_return();
        retval.Start = (IToken)input.LT(1);
        int static_constructor_modifiers_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal869=null;
        IToken string_literal870=null;
        IToken string_literal871=null;
        IToken string_literal872=null;
        IToken string_literal873=null;
        IToken string_literal874=null;
        IToken string_literal875=null;
        IToken string_literal876=null;
        IToken string_literal877=null;
        IToken string_literal878=null;
        IToken string_literal879=null;
        IToken string_literal880=null;
        IToken string_literal881=null;
        IToken string_literal882=null;
        IToken string_literal883=null;
        IToken string_literal884=null;
        IToken string_literal885=null;
        IToken string_literal886=null;
        IToken string_literal887=null;
        IToken string_literal888=null;
        IToken string_literal889=null;

        object string_literal869_tree=null;
        object string_literal870_tree=null;
        object string_literal871_tree=null;
        object string_literal872_tree=null;
        object string_literal873_tree=null;
        object string_literal874_tree=null;
        object string_literal875_tree=null;
        object string_literal876_tree=null;
        object string_literal877_tree=null;
        object string_literal878_tree=null;
        object string_literal879_tree=null;
        object string_literal880_tree=null;
        object string_literal881_tree=null;
        object string_literal882_tree=null;
        object string_literal883_tree=null;
        object string_literal884_tree=null;
        object string_literal885_tree=null;
        object string_literal886_tree=null;
        object string_literal887_tree=null;
        object string_literal888_tree=null;
        object string_literal889_tree=null;

    	try { DebugEnterRule(GrammarFileName, "static_constructor_modifiers");
    	DebugLocation(811, 11);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 248)) { return retval; }
    		// cs.g:811:29: ( 'extern' 'unsafe' 'static' | 'extern' 'static' ( 'unsafe' )? | 'unsafe' 'extern' 'static' | 'unsafe' 'static' ( 'extern' )? | 'static' 'extern' ( 'unsafe' )? | 'static' 'unsafe' ( 'extern' )? | 'extern' | 'unsafe' | 'static' )
    		int alt283=9;
    		try { DebugEnterDecision(283, decisionCanBacktrack[283]);
    		try
    		{
    			alt283 = dfa283.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(283); }
    		switch (alt283)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:812:4: 'extern' 'unsafe' 'static'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(812, 4);
    			string_literal869=(IToken)Match(input,94,Follow._94_in_static_constructor_modifiers6229); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal869_tree = (object)adaptor.Create(string_literal869, retval);
    			adaptor.AddChild(root_0, string_literal869_tree);
    			}
    			DebugLocation(812, 13);
    			string_literal870=(IToken)Match(input,174,Follow._174_in_static_constructor_modifiers6231); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal870_tree = (object)adaptor.Create(string_literal870, retval);
    			adaptor.AddChild(root_0, string_literal870_tree);
    			}
    			DebugLocation(812, 22);
    			string_literal871=(IToken)Match(input,192,Follow._192_in_static_constructor_modifiers6233); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal871_tree = (object)adaptor.Create(string_literal871, retval);
    			adaptor.AddChild(root_0, string_literal871_tree);
    			}

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:813:4: 'extern' 'static' ( 'unsafe' )?
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(813, 4);
    			string_literal872=(IToken)Match(input,94,Follow._94_in_static_constructor_modifiers6238); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal872_tree = (object)adaptor.Create(string_literal872, retval);
    			adaptor.AddChild(root_0, string_literal872_tree);
    			}
    			DebugLocation(813, 13);
    			string_literal873=(IToken)Match(input,192,Follow._192_in_static_constructor_modifiers6240); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal873_tree = (object)adaptor.Create(string_literal873, retval);
    			adaptor.AddChild(root_0, string_literal873_tree);
    			}
    			DebugLocation(813, 22);
    			// cs.g:813:22: ( 'unsafe' )?
    			int alt279=2;
    			try { DebugEnterSubRule(279);
    			try { DebugEnterDecision(279, decisionCanBacktrack[279]);
    			int LA279_0 = input.LA(1);

    			if ((LA279_0==174))
    			{
    				alt279=1;
    			}
    			} finally { DebugExitDecision(279); }
    			switch (alt279)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: 'unsafe'
    				{
    				DebugLocation(813, 22);
    				string_literal874=(IToken)Match(input,174,Follow._174_in_static_constructor_modifiers6242); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				string_literal874_tree = (object)adaptor.Create(string_literal874, retval);
    				adaptor.AddChild(root_0, string_literal874_tree);
    				}

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(279); }


    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:814:4: 'unsafe' 'extern' 'static'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(814, 4);
    			string_literal875=(IToken)Match(input,174,Follow._174_in_static_constructor_modifiers6248); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal875_tree = (object)adaptor.Create(string_literal875, retval);
    			adaptor.AddChild(root_0, string_literal875_tree);
    			}
    			DebugLocation(814, 13);
    			string_literal876=(IToken)Match(input,94,Follow._94_in_static_constructor_modifiers6250); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal876_tree = (object)adaptor.Create(string_literal876, retval);
    			adaptor.AddChild(root_0, string_literal876_tree);
    			}
    			DebugLocation(814, 22);
    			string_literal877=(IToken)Match(input,192,Follow._192_in_static_constructor_modifiers6252); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal877_tree = (object)adaptor.Create(string_literal877, retval);
    			adaptor.AddChild(root_0, string_literal877_tree);
    			}

    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// cs.g:815:4: 'unsafe' 'static' ( 'extern' )?
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(815, 4);
    			string_literal878=(IToken)Match(input,174,Follow._174_in_static_constructor_modifiers6257); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal878_tree = (object)adaptor.Create(string_literal878, retval);
    			adaptor.AddChild(root_0, string_literal878_tree);
    			}
    			DebugLocation(815, 13);
    			string_literal879=(IToken)Match(input,192,Follow._192_in_static_constructor_modifiers6259); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal879_tree = (object)adaptor.Create(string_literal879, retval);
    			adaptor.AddChild(root_0, string_literal879_tree);
    			}
    			DebugLocation(815, 22);
    			// cs.g:815:22: ( 'extern' )?
    			int alt280=2;
    			try { DebugEnterSubRule(280);
    			try { DebugEnterDecision(280, decisionCanBacktrack[280]);
    			int LA280_0 = input.LA(1);

    			if ((LA280_0==94))
    			{
    				alt280=1;
    			}
    			} finally { DebugExitDecision(280); }
    			switch (alt280)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: 'extern'
    				{
    				DebugLocation(815, 22);
    				string_literal880=(IToken)Match(input,94,Follow._94_in_static_constructor_modifiers6261); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				string_literal880_tree = (object)adaptor.Create(string_literal880, retval);
    				adaptor.AddChild(root_0, string_literal880_tree);
    				}

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(280); }


    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// cs.g:816:4: 'static' 'extern' ( 'unsafe' )?
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(816, 4);
    			string_literal881=(IToken)Match(input,192,Follow._192_in_static_constructor_modifiers6267); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal881_tree = (object)adaptor.Create(string_literal881, retval);
    			adaptor.AddChild(root_0, string_literal881_tree);
    			}
    			DebugLocation(816, 13);
    			string_literal882=(IToken)Match(input,94,Follow._94_in_static_constructor_modifiers6269); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal882_tree = (object)adaptor.Create(string_literal882, retval);
    			adaptor.AddChild(root_0, string_literal882_tree);
    			}
    			DebugLocation(816, 22);
    			// cs.g:816:22: ( 'unsafe' )?
    			int alt281=2;
    			try { DebugEnterSubRule(281);
    			try { DebugEnterDecision(281, decisionCanBacktrack[281]);
    			int LA281_0 = input.LA(1);

    			if ((LA281_0==174))
    			{
    				alt281=1;
    			}
    			} finally { DebugExitDecision(281); }
    			switch (alt281)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: 'unsafe'
    				{
    				DebugLocation(816, 22);
    				string_literal883=(IToken)Match(input,174,Follow._174_in_static_constructor_modifiers6271); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				string_literal883_tree = (object)adaptor.Create(string_literal883, retval);
    				adaptor.AddChild(root_0, string_literal883_tree);
    				}

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(281); }


    			}
    			break;
    		case 6:
    			DebugEnterAlt(6);
    			// cs.g:817:4: 'static' 'unsafe' ( 'extern' )?
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(817, 4);
    			string_literal884=(IToken)Match(input,192,Follow._192_in_static_constructor_modifiers6277); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal884_tree = (object)adaptor.Create(string_literal884, retval);
    			adaptor.AddChild(root_0, string_literal884_tree);
    			}
    			DebugLocation(817, 13);
    			string_literal885=(IToken)Match(input,174,Follow._174_in_static_constructor_modifiers6279); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal885_tree = (object)adaptor.Create(string_literal885, retval);
    			adaptor.AddChild(root_0, string_literal885_tree);
    			}
    			DebugLocation(817, 22);
    			// cs.g:817:22: ( 'extern' )?
    			int alt282=2;
    			try { DebugEnterSubRule(282);
    			try { DebugEnterDecision(282, decisionCanBacktrack[282]);
    			int LA282_0 = input.LA(1);

    			if ((LA282_0==94))
    			{
    				alt282=1;
    			}
    			} finally { DebugExitDecision(282); }
    			switch (alt282)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: 'extern'
    				{
    				DebugLocation(817, 22);
    				string_literal886=(IToken)Match(input,94,Follow._94_in_static_constructor_modifiers6281); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				string_literal886_tree = (object)adaptor.Create(string_literal886, retval);
    				adaptor.AddChild(root_0, string_literal886_tree);
    				}

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(282); }


    			}
    			break;
    		case 7:
    			DebugEnterAlt(7);
    			// cs.g:818:4: 'extern'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(818, 4);
    			string_literal887=(IToken)Match(input,94,Follow._94_in_static_constructor_modifiers6288); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal887_tree = (object)adaptor.Create(string_literal887, retval);
    			adaptor.AddChild(root_0, string_literal887_tree);
    			}

    			}
    			break;
    		case 8:
    			DebugEnterAlt(8);
    			// cs.g:819:4: 'unsafe'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(819, 4);
    			string_literal888=(IToken)Match(input,174,Follow._174_in_static_constructor_modifiers6293); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal888_tree = (object)adaptor.Create(string_literal888, retval);
    			adaptor.AddChild(root_0, string_literal888_tree);
    			}

    			}
    			break;
    		case 9:
    			DebugEnterAlt(9);
    			// cs.g:820:4: 'static'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(820, 4);
    			string_literal889=(IToken)Match(input,192,Follow._192_in_static_constructor_modifiers6298); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal889_tree = (object)adaptor.Create(string_literal889, retval);
    			adaptor.AddChild(root_0, string_literal889_tree);
    			}

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 248, static_constructor_modifiers_StartIndex); }
        }
     	DebugLocation(820, 11);
    	} finally { DebugExitRule(GrammarFileName, "static_constructor_modifiers"); }
    	return retval;

    }
    // $ANTLR end "static_constructor_modifiers"

    public class static_constructor_body_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_static_constructor_body() {}
    protected virtual void Leave_static_constructor_body() {}

    // $ANTLR start "static_constructor_body"
    // cs.g:821:1: static_constructor_body : block ;
    [GrammarRule("static_constructor_body")]
    public csParser.static_constructor_body_return static_constructor_body()
    {

        csParser.static_constructor_body_return retval = new csParser.static_constructor_body_return();
        retval.Start = (IToken)input.LT(1);
        int static_constructor_body_StartIndex = input.Index;
        object root_0 = null;

        csParser.block_return block890 = default(csParser.block_return);


    	try { DebugEnterRule(GrammarFileName, "static_constructor_body");
    	DebugLocation(821, 7);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 249)) { return retval; }
    		// cs.g:821:24: ( block )
    		DebugEnterAlt(1);
    		// cs.g:822:2: block
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(822, 2);
    		PushFollow(Follow._block_in_static_constructor_body6305);
    		block890=block();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, block890.Tree, block890, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 249, static_constructor_body_StartIndex); }
        }
     	DebugLocation(822, 7);
    	} finally { DebugExitRule(GrammarFileName, "static_constructor_body"); }
    	return retval;

    }
    // $ANTLR end "static_constructor_body"

    public class destructor_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_destructor_declaration() {}
    protected virtual void Leave_destructor_declaration() {}

    // $ANTLR start "destructor_declaration"
    // cs.g:823:1: destructor_declaration : ( attributes )? ( destructor_modifiers )? '~' identifier '(' ')' destructor_body ;
    [GrammarRule("destructor_declaration")]
    public csParser.destructor_declaration_return destructor_declaration()
    {

        csParser.destructor_declaration_return retval = new csParser.destructor_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int destructor_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal893=null;
        IToken char_literal895=null;
        IToken char_literal896=null;
        csParser.attributes_return attributes891 = default(csParser.attributes_return);
        csParser.destructor_modifiers_return destructor_modifiers892 = default(csParser.destructor_modifiers_return);
        csParser.identifier_return identifier894 = default(csParser.identifier_return);
        csParser.destructor_body_return destructor_body897 = default(csParser.destructor_body_return);

        object char_literal893_tree=null;
        object char_literal895_tree=null;
        object char_literal896_tree=null;

    	try { DebugEnterRule(GrammarFileName, "destructor_declaration");
    	DebugLocation(823, 86);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 250)) { return retval; }
    		// cs.g:823:23: ( ( attributes )? ( destructor_modifiers )? '~' identifier '(' ')' destructor_body )
    		DebugEnterAlt(1);
    		// cs.g:824:2: ( attributes )? ( destructor_modifiers )? '~' identifier '(' ')' destructor_body
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(824, 2);
    		// cs.g:824:2: ( attributes )?
    		int alt284=2;
    		try { DebugEnterSubRule(284);
    		try { DebugEnterDecision(284, decisionCanBacktrack[284]);
    		int LA284_0 = input.LA(1);

    		if ((LA284_0==97))
    		{
    			alt284=1;
    		}
    		} finally { DebugExitDecision(284); }
    		switch (alt284)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(824, 2);
    			PushFollow(Follow._attributes_in_destructor_declaration6313);
    			attributes891=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes891.Tree, attributes891, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(284); }

    		DebugLocation(824, 16);
    		// cs.g:824:16: ( destructor_modifiers )?
    		int alt285=2;
    		try { DebugEnterSubRule(285);
    		try { DebugEnterDecision(285, decisionCanBacktrack[285]);
    		int LA285_0 = input.LA(1);

    		if ((LA285_0==94||LA285_0==174))
    		{
    			alt285=1;
    		}
    		} finally { DebugExitDecision(285); }
    		switch (alt285)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: destructor_modifiers
    			{
    			DebugLocation(824, 16);
    			PushFollow(Follow._destructor_modifiers_in_destructor_declaration6318);
    			destructor_modifiers892=destructor_modifiers();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, destructor_modifiers892.Tree, destructor_modifiers892, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(285); }

    		DebugLocation(824, 40);
    		char_literal893=(IToken)Match(input,126,Follow._126_in_destructor_declaration6323); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal893_tree = (object)adaptor.Create(char_literal893, retval);
    		adaptor.AddChild(root_0, char_literal893_tree);
    		}
    		DebugLocation(824, 45);
    		PushFollow(Follow._identifier_in_destructor_declaration6326);
    		identifier894=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier894.Tree, identifier894, retval);
    		DebugLocation(824, 58);
    		char_literal895=(IToken)Match(input,110,Follow._110_in_destructor_declaration6330); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal895_tree = (object)adaptor.Create(char_literal895, retval);
    		adaptor.AddChild(root_0, char_literal895_tree);
    		}
    		DebugLocation(824, 64);
    		char_literal896=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_destructor_declaration6334), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal896_tree = (object)adaptor.Create(char_literal896, retval);
    		adaptor.AddChild(root_0, char_literal896_tree);
    		}
    		DebugLocation(824, 71);
    		PushFollow(Follow._destructor_body_in_destructor_declaration6339);
    		destructor_body897=destructor_body();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, destructor_body897.Tree, destructor_body897, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 250, destructor_declaration_StartIndex); }
        }
     	DebugLocation(824, 86);
    	} finally { DebugExitRule(GrammarFileName, "destructor_declaration"); }
    	return retval;

    }
    // $ANTLR end "destructor_declaration"

    public class destructor_modifiers_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_destructor_modifiers() {}
    protected virtual void Leave_destructor_modifiers() {}

    // $ANTLR start "destructor_modifiers"
    // cs.g:825:1: destructor_modifiers : ( ( ( 'extern' )? 'unsafe' ) | ( 'extern' ( 'unsafe' )? ) );
    [GrammarRule("destructor_modifiers")]
    public csParser.destructor_modifiers_return destructor_modifiers()
    {

        csParser.destructor_modifiers_return retval = new csParser.destructor_modifiers_return();
        retval.Start = (IToken)input.LT(1);
        int destructor_modifiers_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal898=null;
        IToken string_literal899=null;
        IToken string_literal900=null;
        IToken string_literal901=null;

        object string_literal898_tree=null;
        object string_literal899_tree=null;
        object string_literal900_tree=null;
        object string_literal901_tree=null;

    	try { DebugEnterRule(GrammarFileName, "destructor_modifiers");
    	DebugLocation(825, 24);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 251)) { return retval; }
    		// cs.g:825:21: ( ( ( 'extern' )? 'unsafe' ) | ( 'extern' ( 'unsafe' )? ) )
    		int alt288=2;
    		try { DebugEnterDecision(288, decisionCanBacktrack[288]);
    		int LA288_0 = input.LA(1);

    		if ((LA288_0==94))
    		{
    			int LA288_1 = input.LA(2);

    			if ((LA288_1==174))
    			{
    				int LA288_3 = input.LA(3);

    				if ((EvaluatePredicate(synpred518_cs_fragment)))
    				{
    					alt288=1;
    				}
    				else if ((true))
    				{
    					alt288=2;
    				}
    				else
    				{
    					if (state.backtracking>0) {state.failed=true; return retval;}
    					NoViableAltException nvae = new NoViableAltException("", 288, 3, input);

    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    			}
    			else if ((LA288_1==EOF||LA288_1==126))
    			{
    				alt288=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 288, 1, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else if ((LA288_0==174))
    		{
    			alt288=1;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 288, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(288); }
    		switch (alt288)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:826:2: ( ( 'extern' )? 'unsafe' )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(826, 2);
    			// cs.g:826:2: ( ( 'extern' )? 'unsafe' )
    			DebugEnterAlt(1);
    			// cs.g:826:3: ( 'extern' )? 'unsafe'
    			{
    			DebugLocation(826, 3);
    			// cs.g:826:3: ( 'extern' )?
    			int alt286=2;
    			try { DebugEnterSubRule(286);
    			try { DebugEnterDecision(286, decisionCanBacktrack[286]);
    			int LA286_0 = input.LA(1);

    			if ((LA286_0==94))
    			{
    				alt286=1;
    			}
    			} finally { DebugExitDecision(286); }
    			switch (alt286)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: 'extern'
    				{
    				DebugLocation(826, 3);
    				string_literal898=(IToken)Match(input,94,Follow._94_in_destructor_modifiers6348); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				string_literal898_tree = (object)adaptor.Create(string_literal898, retval);
    				adaptor.AddChild(root_0, string_literal898_tree);
    				}

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(286); }

    			DebugLocation(826, 13);
    			string_literal899=(IToken)Match(input,174,Follow._174_in_destructor_modifiers6351); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal899_tree = (object)adaptor.Create(string_literal899, retval);
    			adaptor.AddChild(root_0, string_literal899_tree);
    			}

    			}


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:827:4: ( 'extern' ( 'unsafe' )? )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(827, 4);
    			// cs.g:827:4: ( 'extern' ( 'unsafe' )? )
    			DebugEnterAlt(1);
    			// cs.g:827:5: 'extern' ( 'unsafe' )?
    			{
    			DebugLocation(827, 5);
    			string_literal900=(IToken)Match(input,94,Follow._94_in_destructor_modifiers6358); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal900_tree = (object)adaptor.Create(string_literal900, retval);
    			adaptor.AddChild(root_0, string_literal900_tree);
    			}
    			DebugLocation(827, 14);
    			// cs.g:827:14: ( 'unsafe' )?
    			int alt287=2;
    			try { DebugEnterSubRule(287);
    			try { DebugEnterDecision(287, decisionCanBacktrack[287]);
    			int LA287_0 = input.LA(1);

    			if ((LA287_0==174))
    			{
    				alt287=1;
    			}
    			} finally { DebugExitDecision(287); }
    			switch (alt287)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: 'unsafe'
    				{
    				DebugLocation(827, 14);
    				string_literal901=(IToken)Match(input,174,Follow._174_in_destructor_modifiers6360); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				string_literal901_tree = (object)adaptor.Create(string_literal901, retval);
    				adaptor.AddChild(root_0, string_literal901_tree);
    				}

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(287); }


    			}


    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 251, destructor_modifiers_StartIndex); }
        }
     	DebugLocation(827, 24);
    	} finally { DebugExitRule(GrammarFileName, "destructor_modifiers"); }
    	return retval;

    }
    // $ANTLR end "destructor_modifiers"

    public class destructor_body_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_destructor_body() {}
    protected virtual void Leave_destructor_body() {}

    // $ANTLR start "destructor_body"
    // cs.g:828:1: destructor_body : block ;
    [GrammarRule("destructor_body")]
    public csParser.destructor_body_return destructor_body()
    {

        csParser.destructor_body_return retval = new csParser.destructor_body_return();
        retval.Start = (IToken)input.LT(1);
        int destructor_body_StartIndex = input.Index;
        object root_0 = null;

        csParser.block_return block902 = default(csParser.block_return);


    	try { DebugEnterRule(GrammarFileName, "destructor_body");
    	DebugLocation(828, 7);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 252)) { return retval; }
    		// cs.g:828:16: ( block )
    		DebugEnterAlt(1);
    		// cs.g:829:2: block
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(829, 2);
    		PushFollow(Follow._block_in_destructor_body6370);
    		block902=block();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, block902.Tree, block902, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 252, destructor_body_StartIndex); }
        }
     	DebugLocation(829, 7);
    	} finally { DebugExitRule(GrammarFileName, "destructor_body"); }
    	return retval;

    }
    // $ANTLR end "destructor_body"

    public class struct_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_struct_declaration() {}
    protected virtual void Leave_struct_declaration() {}

    // $ANTLR start "struct_declaration"
    // cs.g:832:1: struct_declaration : ( attributes )? ( struct_modifiers )? ( 'partial' )? 'struct' identifier ( generic_parameter_list )? ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )? ;
    [GrammarRule("struct_declaration")]
    public csParser.struct_declaration_return struct_declaration()
    {

        csParser.struct_declaration_return retval = new csParser.struct_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int struct_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal905=null;
        IToken string_literal906=null;
        IToken char_literal912=null;
        csParser.attributes_return attributes903 = default(csParser.attributes_return);
        csParser.struct_modifiers_return struct_modifiers904 = default(csParser.struct_modifiers_return);
        csParser.identifier_return identifier907 = default(csParser.identifier_return);
        csParser.generic_parameter_list_return generic_parameter_list908 = default(csParser.generic_parameter_list_return);
        csParser.struct_interfaces_return struct_interfaces909 = default(csParser.struct_interfaces_return);
        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses910 = default(csParser.type_parameter_constraints_clauses_return);
        csParser.struct_body_return struct_body911 = default(csParser.struct_body_return);

        object string_literal905_tree=null;
        object string_literal906_tree=null;
        object char_literal912_tree=null;

    	try { DebugEnterRule(GrammarFileName, "struct_declaration");
    	DebugLocation(832, 81);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 253)) { return retval; }
    		// cs.g:832:19: ( ( attributes )? ( struct_modifiers )? ( 'partial' )? 'struct' identifier ( generic_parameter_list )? ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )? )
    		DebugEnterAlt(1);
    		// cs.g:833:2: ( attributes )? ( struct_modifiers )? ( 'partial' )? 'struct' identifier ( generic_parameter_list )? ( struct_interfaces )? ( type_parameter_constraints_clauses )? struct_body ( ';' )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(833, 2);
    		// cs.g:833:2: ( attributes )?
    		int alt289=2;
    		try { DebugEnterSubRule(289);
    		try { DebugEnterDecision(289, decisionCanBacktrack[289]);
    		int LA289_0 = input.LA(1);

    		if ((LA289_0==97))
    		{
    			alt289=1;
    		}
    		} finally { DebugExitDecision(289); }
    		switch (alt289)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(833, 2);
    			PushFollow(Follow._attributes_in_struct_declaration6380);
    			attributes903=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes903.Tree, attributes903, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(289); }

    		DebugLocation(833, 16);
    		// cs.g:833:16: ( struct_modifiers )?
    		int alt290=2;
    		try { DebugEnterSubRule(290);
    		try { DebugEnterDecision(290, decisionCanBacktrack[290]);
    		int LA290_0 = input.LA(1);

    		if ((LA290_0==138||(LA290_0>=170 && LA290_0<=174)))
    		{
    			alt290=1;
    		}
    		} finally { DebugExitDecision(290); }
    		switch (alt290)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: struct_modifiers
    			{
    			DebugLocation(833, 16);
    			PushFollow(Follow._struct_modifiers_in_struct_declaration6385);
    			struct_modifiers904=struct_modifiers();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, struct_modifiers904.Tree, struct_modifiers904, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(290); }

    		DebugLocation(833, 36);
    		// cs.g:833:36: ( 'partial' )?
    		int alt291=2;
    		try { DebugEnterSubRule(291);
    		try { DebugEnterDecision(291, decisionCanBacktrack[291]);
    		int LA291_0 = input.LA(1);

    		if ((LA291_0==188))
    		{
    			alt291=1;
    		}
    		} finally { DebugExitDecision(291); }
    		switch (alt291)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: 'partial'
    			{
    			DebugLocation(833, 36);
    			string_literal905=(IToken)Match(input,188,Follow._188_in_struct_declaration6390); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal905_tree = (object)adaptor.Create(string_literal905, retval);
    			adaptor.AddChild(root_0, string_literal905_tree);
    			}

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(291); }

    		DebugLocation(833, 49);
    		string_literal906=(IToken)Match(input,193,Follow._193_in_struct_declaration6395); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal906_tree = (object)adaptor.Create(string_literal906, retval);
    		adaptor.AddChild(root_0, string_literal906_tree);
    		}
    		DebugLocation(833, 60);
    		PushFollow(Follow._identifier_in_struct_declaration6399);
    		identifier907=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier907.Tree, identifier907, retval);
    		DebugLocation(833, 73);
    		// cs.g:833:73: ( generic_parameter_list )?
    		int alt292=2;
    		try { DebugEnterSubRule(292);
    		try { DebugEnterDecision(292, decisionCanBacktrack[292]);
    		int LA292_0 = input.LA(1);

    		if ((LA292_0==123))
    		{
    			alt292=1;
    		}
    		} finally { DebugExitDecision(292); }
    		switch (alt292)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: generic_parameter_list
    			{
    			DebugLocation(833, 73);
    			PushFollow(Follow._generic_parameter_list_in_struct_declaration6403);
    			generic_parameter_list908=generic_parameter_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, generic_parameter_list908.Tree, generic_parameter_list908, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(292); }

    		DebugLocation(834, 4);
    		// cs.g:834:4: ( struct_interfaces )?
    		int alt293=2;
    		try { DebugEnterSubRule(293);
    		try { DebugEnterDecision(293, decisionCanBacktrack[293]);
    		int LA293_0 = input.LA(1);

    		if ((LA293_0==100))
    		{
    			alt293=1;
    		}
    		} finally { DebugExitDecision(293); }
    		switch (alt293)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: struct_interfaces
    			{
    			DebugLocation(834, 4);
    			PushFollow(Follow._struct_interfaces_in_struct_declaration6409);
    			struct_interfaces909=struct_interfaces();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, struct_interfaces909.Tree, struct_interfaces909, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(293); }

    		DebugLocation(834, 25);
    		// cs.g:834:25: ( type_parameter_constraints_clauses )?
    		int alt294=2;
    		try { DebugEnterSubRule(294);
    		try { DebugEnterDecision(294, decisionCanBacktrack[294]);
    		int LA294_0 = input.LA(1);

    		if ((LA294_0==187))
    		{
    			alt294=1;
    		}
    		} finally { DebugExitDecision(294); }
    		switch (alt294)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: type_parameter_constraints_clauses
    			{
    			DebugLocation(834, 25);
    			PushFollow(Follow._type_parameter_constraints_clauses_in_struct_declaration6414);
    			type_parameter_constraints_clauses910=type_parameter_constraints_clauses();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_parameter_constraints_clauses910.Tree, type_parameter_constraints_clauses910, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(294); }

    		DebugLocation(834, 63);
    		PushFollow(Follow._struct_body_in_struct_declaration6419);
    		struct_body911=struct_body();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, struct_body911.Tree, struct_body911, retval);
    		DebugLocation(834, 77);
    		// cs.g:834:77: ( ';' )?
    		int alt295=2;
    		try { DebugEnterSubRule(295);
    		try { DebugEnterDecision(295, decisionCanBacktrack[295]);
    		int LA295_0 = input.LA(1);

    		if ((LA295_0==SEMI))
    		{
    			alt295=1;
    		}
    		} finally { DebugExitDecision(295); }
    		switch (alt295)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: ';'
    			{
    			DebugLocation(834, 77);
    			char_literal912=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_struct_declaration6423), "SEMI"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal912_tree = (object)adaptor.Create(char_literal912, retval);
    			adaptor.AddChild(root_0, char_literal912_tree);
    			}

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(295); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 253, struct_declaration_StartIndex); }
        }
     	DebugLocation(834, 81);
    	} finally { DebugExitRule(GrammarFileName, "struct_declaration"); }
    	return retval;

    }
    // $ANTLR end "struct_declaration"

    public class struct_modifiers_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_struct_modifiers() {}
    protected virtual void Leave_struct_modifiers() {}

    // $ANTLR start "struct_modifiers"
    // cs.g:835:1: struct_modifiers : ( struct_modifier )+ ;
    [GrammarRule("struct_modifiers")]
    public csParser.struct_modifiers_return struct_modifiers()
    {

        csParser.struct_modifiers_return retval = new csParser.struct_modifiers_return();
        retval.Start = (IToken)input.LT(1);
        int struct_modifiers_StartIndex = input.Index;
        object root_0 = null;

        csParser.struct_modifier_return struct_modifier913 = default(csParser.struct_modifier_return);


    	try { DebugEnterRule(GrammarFileName, "struct_modifiers");
    	DebugLocation(835, 18);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 254)) { return retval; }
    		// cs.g:835:17: ( ( struct_modifier )+ )
    		DebugEnterAlt(1);
    		// cs.g:836:2: ( struct_modifier )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(836, 2);
    		// cs.g:836:2: ( struct_modifier )+
    		int cnt296=0;
    		try { DebugEnterSubRule(296);
    		while (true)
    		{
    			int alt296=2;
    			try { DebugEnterDecision(296, decisionCanBacktrack[296]);
    			int LA296_0 = input.LA(1);

    			if ((LA296_0==138||(LA296_0>=170 && LA296_0<=174)))
    			{
    				alt296=1;
    			}


    			} finally { DebugExitDecision(296); }
    			switch (alt296)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: struct_modifier
    				{
    				DebugLocation(836, 2);
    				PushFollow(Follow._struct_modifier_in_struct_modifiers6432);
    				struct_modifier913=struct_modifier();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, struct_modifier913.Tree, struct_modifier913, retval);

    				}
    				break;

    			default:
    				if (cnt296 >= 1)
    					goto loop296;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee296 = new EarlyExitException( 296, input );
    				DebugRecognitionException(eee296);
    				throw eee296;
    			}
    			cnt296++;
    		}
    		loop296:
    			;

    		} finally { DebugExitSubRule(296); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 254, struct_modifiers_StartIndex); }
        }
     	DebugLocation(836, 18);
    	} finally { DebugExitRule(GrammarFileName, "struct_modifiers"); }
    	return retval;

    }
    // $ANTLR end "struct_modifiers"

    public class struct_modifier_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_struct_modifier() {}
    protected virtual void Leave_struct_modifier() {}

    // $ANTLR start "struct_modifier"
    // cs.g:837:1: struct_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' );
    [GrammarRule("struct_modifier")]
    public csParser.struct_modifier_return struct_modifier()
    {

        csParser.struct_modifier_return retval = new csParser.struct_modifier_return();
        retval.Start = (IToken)input.LT(1);
        int struct_modifier_StartIndex = input.Index;
        object root_0 = null;

        IToken set914=null;

        object set914_tree=null;

    	try { DebugEnterRule(GrammarFileName, "struct_modifier");
    	DebugLocation(837, 68);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 255)) { return retval; }
    		// cs.g:837:16: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(837, 16);
    		set914=(IToken)input.LT(1);
    		if (input.LA(1)==138||(input.LA(1)>=170 && input.LA(1)<=174))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set914, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 255, struct_modifier_StartIndex); }
        }
     	DebugLocation(838, 68);
    	} finally { DebugExitRule(GrammarFileName, "struct_modifier"); }
    	return retval;

    }
    // $ANTLR end "struct_modifier"

    public class struct_interfaces_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_struct_interfaces() {}
    protected virtual void Leave_struct_interfaces() {}

    // $ANTLR start "struct_interfaces"
    // cs.g:839:1: struct_interfaces : ':' interface_type_list ;
    [GrammarRule("struct_interfaces")]
    public csParser.struct_interfaces_return struct_interfaces()
    {

        csParser.struct_interfaces_return retval = new csParser.struct_interfaces_return();
        retval.Start = (IToken)input.LT(1);
        int struct_interfaces_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal915=null;
        csParser.interface_type_list_return interface_type_list916 = default(csParser.interface_type_list_return);

        object char_literal915_tree=null;

    	try { DebugEnterRule(GrammarFileName, "struct_interfaces");
    	DebugLocation(839, 26);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 256)) { return retval; }
    		// cs.g:839:18: ( ':' interface_type_list )
    		DebugEnterAlt(1);
    		// cs.g:840:2: ':' interface_type_list
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(840, 2);
    		char_literal915=(IToken)Match(input,100,Follow._100_in_struct_interfaces6469); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal915_tree = (object)adaptor.Create(char_literal915, retval);
    		adaptor.AddChild(root_0, char_literal915_tree);
    		}
    		DebugLocation(840, 8);
    		PushFollow(Follow._interface_type_list_in_struct_interfaces6473);
    		interface_type_list916=interface_type_list();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, interface_type_list916.Tree, interface_type_list916, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 256, struct_interfaces_StartIndex); }
        }
     	DebugLocation(840, 26);
    	} finally { DebugExitRule(GrammarFileName, "struct_interfaces"); }
    	return retval;

    }
    // $ANTLR end "struct_interfaces"

    public class struct_body_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_struct_body() {}
    protected virtual void Leave_struct_body() {}

    // $ANTLR start "struct_body"
    // cs.g:841:1: struct_body : '{' ( struct_member_declarations )? '}' ;
    [GrammarRule("struct_body")]
    public csParser.struct_body_return struct_body()
    {

        csParser.struct_body_return retval = new csParser.struct_body_return();
        retval.Start = (IToken)input.LT(1);
        int struct_body_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal917=null;
        IToken char_literal919=null;
        csParser.struct_member_declarations_return struct_member_declarations918 = default(csParser.struct_member_declarations_return);

        object char_literal917_tree=null;
        object char_literal919_tree=null;

    	try { DebugEnterRule(GrammarFileName, "struct_body");
    	DebugLocation(841, 40);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 257)) { return retval; }
    		// cs.g:841:12: ( '{' ( struct_member_declarations )? '}' )
    		DebugEnterAlt(1);
    		// cs.g:842:2: '{' ( struct_member_declarations )? '}'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(842, 2);
    		char_literal917=(IToken)Match(input,92,Follow._92_in_struct_body6480); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal917_tree = (object)adaptor.Create(char_literal917, retval);
    		adaptor.AddChild(root_0, char_literal917_tree);
    		}
    		DebugLocation(842, 8);
    		// cs.g:842:8: ( struct_member_declarations )?
    		int alt297=2;
    		try { DebugEnterSubRule(297);
    		try { DebugEnterDecision(297, decisionCanBacktrack[297]);
    		int LA297_0 = input.LA(1);

    		if ((LA297_0==IDENTIFIER||LA297_0==ENUM||LA297_0==SET||(LA297_0>=94 && LA297_0<=95)||LA297_0==97||(LA297_0>=101 && LA297_0<=107)||LA297_0==109||(LA297_0>=113 && LA297_0<=122)||(LA297_0>=132 && LA297_0<=138)||LA297_0==144||(LA297_0>=170 && LA297_0<=199)||(LA297_0>=201 && LA297_0<=202)||LA297_0==206||LA297_0==208||(LA297_0>=225 && LA297_0<=226)))
    		{
    			alt297=1;
    		}
    		} finally { DebugExitDecision(297); }
    		switch (alt297)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: struct_member_declarations
    			{
    			DebugLocation(842, 8);
    			PushFollow(Follow._struct_member_declarations_in_struct_body6484);
    			struct_member_declarations918=struct_member_declarations();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, struct_member_declarations918.Tree, struct_member_declarations918, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(297); }

    		DebugLocation(842, 38);
    		char_literal919=(IToken)Match(input,93,Follow._93_in_struct_body6489); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal919_tree = (object)adaptor.Create(char_literal919, retval);
    		adaptor.AddChild(root_0, char_literal919_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 257, struct_body_StartIndex); }
        }
     	DebugLocation(842, 40);
    	} finally { DebugExitRule(GrammarFileName, "struct_body"); }
    	return retval;

    }
    // $ANTLR end "struct_body"

    public class struct_member_declarations_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_struct_member_declarations() {}
    protected virtual void Leave_struct_member_declarations() {}

    // $ANTLR start "struct_member_declarations"
    // cs.g:843:1: struct_member_declarations : ( struct_member_declaration )+ ;
    [GrammarRule("struct_member_declarations")]
    public csParser.struct_member_declarations_return struct_member_declarations()
    {

        csParser.struct_member_declarations_return retval = new csParser.struct_member_declarations_return();
        retval.Start = (IToken)input.LT(1);
        int struct_member_declarations_StartIndex = input.Index;
        object root_0 = null;

        csParser.struct_member_declaration_return struct_member_declaration920 = default(csParser.struct_member_declaration_return);


    	try { DebugEnterRule(GrammarFileName, "struct_member_declarations");
    	DebugLocation(843, 28);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 258)) { return retval; }
    		// cs.g:843:27: ( ( struct_member_declaration )+ )
    		DebugEnterAlt(1);
    		// cs.g:844:2: ( struct_member_declaration )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(844, 2);
    		// cs.g:844:2: ( struct_member_declaration )+
    		int cnt298=0;
    		try { DebugEnterSubRule(298);
    		while (true)
    		{
    			int alt298=2;
    			try { DebugEnterDecision(298, decisionCanBacktrack[298]);
    			int LA298_0 = input.LA(1);

    			if ((LA298_0==IDENTIFIER||LA298_0==ENUM||LA298_0==SET||(LA298_0>=94 && LA298_0<=95)||LA298_0==97||(LA298_0>=101 && LA298_0<=107)||LA298_0==109||(LA298_0>=113 && LA298_0<=122)||(LA298_0>=132 && LA298_0<=138)||LA298_0==144||(LA298_0>=170 && LA298_0<=199)||(LA298_0>=201 && LA298_0<=202)||LA298_0==206||LA298_0==208||(LA298_0>=225 && LA298_0<=226)))
    			{
    				alt298=1;
    			}


    			} finally { DebugExitDecision(298); }
    			switch (alt298)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: struct_member_declaration
    				{
    				DebugLocation(844, 2);
    				PushFollow(Follow._struct_member_declaration_in_struct_member_declarations6496);
    				struct_member_declaration920=struct_member_declaration();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, struct_member_declaration920.Tree, struct_member_declaration920, retval);

    				}
    				break;

    			default:
    				if (cnt298 >= 1)
    					goto loop298;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee298 = new EarlyExitException( 298, input );
    				DebugRecognitionException(eee298);
    				throw eee298;
    			}
    			cnt298++;
    		}
    		loop298:
    			;

    		} finally { DebugExitSubRule(298); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 258, struct_member_declarations_StartIndex); }
        }
     	DebugLocation(844, 28);
    	} finally { DebugExitRule(GrammarFileName, "struct_member_declarations"); }
    	return retval;

    }
    // $ANTLR end "struct_member_declarations"

    public class struct_member_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_struct_member_declaration() {}
    protected virtual void Leave_struct_member_declaration() {}

    // $ANTLR start "struct_member_declaration"
    // cs.g:845:1: struct_member_declaration : ( constant_declaration | field_declaration | method_declaration | property_declaration | event_declaration | indexer_declaration | operator_declaration | constructor_declaration | static_constructor_declaration | type_declaration );
    [GrammarRule("struct_member_declaration")]
    public csParser.struct_member_declaration_return struct_member_declaration()
    {

        csParser.struct_member_declaration_return retval = new csParser.struct_member_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int struct_member_declaration_StartIndex = input.Index;
        object root_0 = null;

        csParser.constant_declaration_return constant_declaration921 = default(csParser.constant_declaration_return);
        csParser.field_declaration_return field_declaration922 = default(csParser.field_declaration_return);
        csParser.method_declaration_return method_declaration923 = default(csParser.method_declaration_return);
        csParser.property_declaration_return property_declaration924 = default(csParser.property_declaration_return);
        csParser.event_declaration_return event_declaration925 = default(csParser.event_declaration_return);
        csParser.indexer_declaration_return indexer_declaration926 = default(csParser.indexer_declaration_return);
        csParser.operator_declaration_return operator_declaration927 = default(csParser.operator_declaration_return);
        csParser.constructor_declaration_return constructor_declaration928 = default(csParser.constructor_declaration_return);
        csParser.static_constructor_declaration_return static_constructor_declaration929 = default(csParser.static_constructor_declaration_return);
        csParser.type_declaration_return type_declaration930 = default(csParser.type_declaration_return);


    	try { DebugEnterRule(GrammarFileName, "struct_member_declaration");
    	DebugLocation(845, 20);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 259)) { return retval; }
    		// cs.g:845:26: ( constant_declaration | field_declaration | method_declaration | property_declaration | event_declaration | indexer_declaration | operator_declaration | constructor_declaration | static_constructor_declaration | type_declaration )
    		int alt299=10;
    		try { DebugEnterDecision(299, decisionCanBacktrack[299]);
    		try
    		{
    			alt299 = dfa299.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(299); }
    		switch (alt299)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:846:2: constant_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(846, 2);
    			PushFollow(Follow._constant_declaration_in_struct_member_declaration6505);
    			constant_declaration921=constant_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, constant_declaration921.Tree, constant_declaration921, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:847:4: field_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(847, 4);
    			PushFollow(Follow._field_declaration_in_struct_member_declaration6510);
    			field_declaration922=field_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, field_declaration922.Tree, field_declaration922, retval);

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:848:4: method_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(848, 4);
    			PushFollow(Follow._method_declaration_in_struct_member_declaration6515);
    			method_declaration923=method_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, method_declaration923.Tree, method_declaration923, retval);

    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// cs.g:849:4: property_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(849, 4);
    			PushFollow(Follow._property_declaration_in_struct_member_declaration6520);
    			property_declaration924=property_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, property_declaration924.Tree, property_declaration924, retval);

    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// cs.g:850:4: event_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(850, 4);
    			PushFollow(Follow._event_declaration_in_struct_member_declaration6525);
    			event_declaration925=event_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, event_declaration925.Tree, event_declaration925, retval);

    			}
    			break;
    		case 6:
    			DebugEnterAlt(6);
    			// cs.g:851:4: indexer_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(851, 4);
    			PushFollow(Follow._indexer_declaration_in_struct_member_declaration6530);
    			indexer_declaration926=indexer_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, indexer_declaration926.Tree, indexer_declaration926, retval);

    			}
    			break;
    		case 7:
    			DebugEnterAlt(7);
    			// cs.g:852:4: operator_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(852, 4);
    			PushFollow(Follow._operator_declaration_in_struct_member_declaration6535);
    			operator_declaration927=operator_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, operator_declaration927.Tree, operator_declaration927, retval);

    			}
    			break;
    		case 8:
    			DebugEnterAlt(8);
    			// cs.g:853:4: constructor_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(853, 4);
    			PushFollow(Follow._constructor_declaration_in_struct_member_declaration6540);
    			constructor_declaration928=constructor_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, constructor_declaration928.Tree, constructor_declaration928, retval);

    			}
    			break;
    		case 9:
    			DebugEnterAlt(9);
    			// cs.g:854:4: static_constructor_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(854, 4);
    			PushFollow(Follow._static_constructor_declaration_in_struct_member_declaration6545);
    			static_constructor_declaration929=static_constructor_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, static_constructor_declaration929.Tree, static_constructor_declaration929, retval);

    			}
    			break;
    		case 10:
    			DebugEnterAlt(10);
    			// cs.g:855:4: type_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(855, 4);
    			PushFollow(Follow._type_declaration_in_struct_member_declaration6550);
    			type_declaration930=type_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_declaration930.Tree, type_declaration930, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 259, struct_member_declaration_StartIndex); }
        }
     	DebugLocation(855, 20);
    	} finally { DebugExitRule(GrammarFileName, "struct_member_declaration"); }
    	return retval;

    }
    // $ANTLR end "struct_member_declaration"

    public class interface_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_interface_declaration() {}
    protected virtual void Leave_interface_declaration() {}

    // $ANTLR start "interface_declaration"
    // cs.g:858:1: interface_declaration : ( attributes )? ( interface_modifiers )? ( 'partial' )? 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )? ;
    [GrammarRule("interface_declaration")]
    public csParser.interface_declaration_return interface_declaration()
    {

        csParser.interface_declaration_return retval = new csParser.interface_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int interface_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal933=null;
        IToken string_literal934=null;
        IToken char_literal940=null;
        csParser.attributes_return attributes931 = default(csParser.attributes_return);
        csParser.interface_modifiers_return interface_modifiers932 = default(csParser.interface_modifiers_return);
        csParser.identifier_return identifier935 = default(csParser.identifier_return);
        csParser.variant_generic_parameter_list_return variant_generic_parameter_list936 = default(csParser.variant_generic_parameter_list_return);
        csParser.interface_base_return interface_base937 = default(csParser.interface_base_return);
        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses938 = default(csParser.type_parameter_constraints_clauses_return);
        csParser.interface_body_return interface_body939 = default(csParser.interface_body_return);

        object string_literal933_tree=null;
        object string_literal934_tree=null;
        object char_literal940_tree=null;

    	try { DebugEnterRule(GrammarFileName, "interface_declaration");
    	DebugLocation(858, 0);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 260)) { return retval; }
    		// cs.g:858:22: ( ( attributes )? ( interface_modifiers )? ( 'partial' )? 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )? )
    		DebugEnterAlt(1);
    		// cs.g:859:2: ( attributes )? ( interface_modifiers )? ( 'partial' )? 'interface' identifier ( variant_generic_parameter_list )? ( interface_base )? ( type_parameter_constraints_clauses )? interface_body ( ';' )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(859, 2);
    		// cs.g:859:2: ( attributes )?
    		int alt300=2;
    		try { DebugEnterSubRule(300);
    		try { DebugEnterDecision(300, decisionCanBacktrack[300]);
    		int LA300_0 = input.LA(1);

    		if ((LA300_0==97))
    		{
    			alt300=1;
    		}
    		} finally { DebugExitDecision(300); }
    		switch (alt300)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(859, 2);
    			PushFollow(Follow._attributes_in_interface_declaration6560);
    			attributes931=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes931.Tree, attributes931, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(300); }

    		DebugLocation(859, 16);
    		// cs.g:859:16: ( interface_modifiers )?
    		int alt301=2;
    		try { DebugEnterSubRule(301);
    		try { DebugEnterDecision(301, decisionCanBacktrack[301]);
    		int LA301_0 = input.LA(1);

    		if ((LA301_0==138||(LA301_0>=170 && LA301_0<=174)))
    		{
    			alt301=1;
    		}
    		} finally { DebugExitDecision(301); }
    		switch (alt301)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: interface_modifiers
    			{
    			DebugLocation(859, 16);
    			PushFollow(Follow._interface_modifiers_in_interface_declaration6565);
    			interface_modifiers932=interface_modifiers();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, interface_modifiers932.Tree, interface_modifiers932, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(301); }

    		DebugLocation(859, 39);
    		// cs.g:859:39: ( 'partial' )?
    		int alt302=2;
    		try { DebugEnterSubRule(302);
    		try { DebugEnterDecision(302, decisionCanBacktrack[302]);
    		int LA302_0 = input.LA(1);

    		if ((LA302_0==188))
    		{
    			alt302=1;
    		}
    		} finally { DebugExitDecision(302); }
    		switch (alt302)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: 'partial'
    			{
    			DebugLocation(859, 39);
    			string_literal933=(IToken)Match(input,188,Follow._188_in_interface_declaration6570); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal933_tree = (object)adaptor.Create(string_literal933, retval);
    			adaptor.AddChild(root_0, string_literal933_tree);
    			}

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(302); }

    		DebugLocation(859, 52);
    		string_literal934=(IToken)Match(input,206,Follow._206_in_interface_declaration6575); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal934_tree = (object)adaptor.Create(string_literal934, retval);
    		adaptor.AddChild(root_0, string_literal934_tree);
    		}
    		DebugLocation(859, 66);
    		PushFollow(Follow._identifier_in_interface_declaration6579);
    		identifier935=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier935.Tree, identifier935, retval);
    		DebugLocation(859, 79);
    		// cs.g:859:79: ( variant_generic_parameter_list )?
    		int alt303=2;
    		try { DebugEnterSubRule(303);
    		try { DebugEnterDecision(303, decisionCanBacktrack[303]);
    		int LA303_0 = input.LA(1);

    		if ((LA303_0==123))
    		{
    			alt303=1;
    		}
    		} finally { DebugExitDecision(303); }
    		switch (alt303)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: variant_generic_parameter_list
    			{
    			DebugLocation(859, 79);
    			PushFollow(Follow._variant_generic_parameter_list_in_interface_declaration6583);
    			variant_generic_parameter_list936=variant_generic_parameter_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, variant_generic_parameter_list936.Tree, variant_generic_parameter_list936, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(303); }

    		DebugLocation(860, 6);
    		// cs.g:860:6: ( interface_base )?
    		int alt304=2;
    		try { DebugEnterSubRule(304);
    		try { DebugEnterDecision(304, decisionCanBacktrack[304]);
    		int LA304_0 = input.LA(1);

    		if ((LA304_0==100))
    		{
    			alt304=1;
    		}
    		} finally { DebugExitDecision(304); }
    		switch (alt304)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: interface_base
    			{
    			DebugLocation(860, 6);
    			PushFollow(Follow._interface_base_in_interface_declaration6592);
    			interface_base937=interface_base();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, interface_base937.Tree, interface_base937, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(304); }

    		DebugLocation(860, 24);
    		// cs.g:860:24: ( type_parameter_constraints_clauses )?
    		int alt305=2;
    		try { DebugEnterSubRule(305);
    		try { DebugEnterDecision(305, decisionCanBacktrack[305]);
    		int LA305_0 = input.LA(1);

    		if ((LA305_0==187))
    		{
    			alt305=1;
    		}
    		} finally { DebugExitDecision(305); }
    		switch (alt305)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: type_parameter_constraints_clauses
    			{
    			DebugLocation(860, 24);
    			PushFollow(Follow._type_parameter_constraints_clauses_in_interface_declaration6597);
    			type_parameter_constraints_clauses938=type_parameter_constraints_clauses();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_parameter_constraints_clauses938.Tree, type_parameter_constraints_clauses938, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(305); }

    		DebugLocation(860, 62);
    		PushFollow(Follow._interface_body_in_interface_declaration6602);
    		interface_body939=interface_body();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, interface_body939.Tree, interface_body939, retval);
    		DebugLocation(860, 79);
    		// cs.g:860:79: ( ';' )?
    		int alt306=2;
    		try { DebugEnterSubRule(306);
    		try { DebugEnterDecision(306, decisionCanBacktrack[306]);
    		int LA306_0 = input.LA(1);

    		if ((LA306_0==SEMI))
    		{
    			alt306=1;
    		}
    		} finally { DebugExitDecision(306); }
    		switch (alt306)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: ';'
    			{
    			DebugLocation(860, 79);
    			char_literal940=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_interface_declaration6606), "SEMI"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal940_tree = (object)adaptor.Create(char_literal940, retval);
    			adaptor.AddChild(root_0, char_literal940_tree);
    			}

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(306); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 260, interface_declaration_StartIndex); }
        }
     	DebugLocation(861, 0);
    	} finally { DebugExitRule(GrammarFileName, "interface_declaration"); }
    	return retval;

    }
    // $ANTLR end "interface_declaration"

    public class interface_modifiers_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_interface_modifiers() {}
    protected virtual void Leave_interface_modifiers() {}

    // $ANTLR start "interface_modifiers"
    // cs.g:862:1: interface_modifiers : ( interface_modifier )+ ;
    [GrammarRule("interface_modifiers")]
    public csParser.interface_modifiers_return interface_modifiers()
    {

        csParser.interface_modifiers_return retval = new csParser.interface_modifiers_return();
        retval.Start = (IToken)input.LT(1);
        int interface_modifiers_StartIndex = input.Index;
        object root_0 = null;

        csParser.interface_modifier_return interface_modifier941 = default(csParser.interface_modifier_return);


    	try { DebugEnterRule(GrammarFileName, "interface_modifiers");
    	DebugLocation(862, 21);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 261)) { return retval; }
    		// cs.g:862:20: ( ( interface_modifier )+ )
    		DebugEnterAlt(1);
    		// cs.g:863:2: ( interface_modifier )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(863, 2);
    		// cs.g:863:2: ( interface_modifier )+
    		int cnt307=0;
    		try { DebugEnterSubRule(307);
    		while (true)
    		{
    			int alt307=2;
    			try { DebugEnterDecision(307, decisionCanBacktrack[307]);
    			int LA307_0 = input.LA(1);

    			if ((LA307_0==138||(LA307_0>=170 && LA307_0<=174)))
    			{
    				alt307=1;
    			}


    			} finally { DebugExitDecision(307); }
    			switch (alt307)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: interface_modifier
    				{
    				DebugLocation(863, 2);
    				PushFollow(Follow._interface_modifier_in_interface_modifiers6617);
    				interface_modifier941=interface_modifier();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, interface_modifier941.Tree, interface_modifier941, retval);

    				}
    				break;

    			default:
    				if (cnt307 >= 1)
    					goto loop307;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee307 = new EarlyExitException( 307, input );
    				DebugRecognitionException(eee307);
    				throw eee307;
    			}
    			cnt307++;
    		}
    		loop307:
    			;

    		} finally { DebugExitSubRule(307); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 261, interface_modifiers_StartIndex); }
        }
     	DebugLocation(863, 21);
    	} finally { DebugExitRule(GrammarFileName, "interface_modifiers"); }
    	return retval;

    }
    // $ANTLR end "interface_modifiers"

    public class interface_modifier_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_interface_modifier() {}
    protected virtual void Leave_interface_modifier() {}

    // $ANTLR start "interface_modifier"
    // cs.g:864:1: interface_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' );
    [GrammarRule("interface_modifier")]
    public csParser.interface_modifier_return interface_modifier()
    {

        csParser.interface_modifier_return retval = new csParser.interface_modifier_return();
        retval.Start = (IToken)input.LT(1);
        int interface_modifier_StartIndex = input.Index;
        object root_0 = null;

        IToken set942=null;

        object set942_tree=null;

    	try { DebugEnterRule(GrammarFileName, "interface_modifier");
    	DebugLocation(864, 68);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 262)) { return retval; }
    		// cs.g:864:19: ( 'new' | 'public' | 'protected' | 'internal' | 'private' | 'unsafe' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(864, 19);
    		set942=(IToken)input.LT(1);
    		if (input.LA(1)==138||(input.LA(1)>=170 && input.LA(1)<=174))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set942, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 262, interface_modifier_StartIndex); }
        }
     	DebugLocation(865, 68);
    	} finally { DebugExitRule(GrammarFileName, "interface_modifier"); }
    	return retval;

    }
    // $ANTLR end "interface_modifier"

    public class interface_base_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_interface_base() {}
    protected virtual void Leave_interface_base() {}

    // $ANTLR start "interface_base"
    // cs.g:866:1: interface_base : ':' interface_type_list ;
    [GrammarRule("interface_base")]
    public csParser.interface_base_return interface_base()
    {

        csParser.interface_base_return retval = new csParser.interface_base_return();
        retval.Start = (IToken)input.LT(1);
        int interface_base_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal943=null;
        csParser.interface_type_list_return interface_type_list944 = default(csParser.interface_type_list_return);

        object char_literal943_tree=null;

    	try { DebugEnterRule(GrammarFileName, "interface_base");
    	DebugLocation(866, 28);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 263)) { return retval; }
    		// cs.g:866:15: ( ':' interface_type_list )
    		DebugEnterAlt(1);
    		// cs.g:867:5: ':' interface_type_list
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(867, 5);
    		char_literal943=(IToken)Match(input,100,Follow._100_in_interface_base6658); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal943_tree = (object)adaptor.Create(char_literal943, retval);
    		adaptor.AddChild(root_0, char_literal943_tree);
    		}
    		DebugLocation(867, 9);
    		PushFollow(Follow._interface_type_list_in_interface_base6660);
    		interface_type_list944=interface_type_list();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, interface_type_list944.Tree, interface_type_list944, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 263, interface_base_StartIndex); }
        }
     	DebugLocation(867, 28);
    	} finally { DebugExitRule(GrammarFileName, "interface_base"); }
    	return retval;

    }
    // $ANTLR end "interface_base"

    public class interface_body_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_interface_body() {}
    protected virtual void Leave_interface_body() {}

    // $ANTLR start "interface_body"
    // cs.g:868:1: interface_body : '{' ( interface_member_declarations )? '}' ;
    [GrammarRule("interface_body")]
    public csParser.interface_body_return interface_body()
    {

        csParser.interface_body_return retval = new csParser.interface_body_return();
        retval.Start = (IToken)input.LT(1);
        int interface_body_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal945=null;
        IToken char_literal947=null;
        csParser.interface_member_declarations_return interface_member_declarations946 = default(csParser.interface_member_declarations_return);

        object char_literal945_tree=null;
        object char_literal947_tree=null;

    	try { DebugEnterRule(GrammarFileName, "interface_body");
    	DebugLocation(868, 44);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 264)) { return retval; }
    		// cs.g:868:15: ( '{' ( interface_member_declarations )? '}' )
    		DebugEnterAlt(1);
    		// cs.g:869:2: '{' ( interface_member_declarations )? '}'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(869, 2);
    		char_literal945=(IToken)Match(input,92,Follow._92_in_interface_body6668); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal945_tree = (object)adaptor.Create(char_literal945, retval);
    		adaptor.AddChild(root_0, char_literal945_tree);
    		}
    		DebugLocation(869, 8);
    		// cs.g:869:8: ( interface_member_declarations )?
    		int alt308=2;
    		try { DebugEnterSubRule(308);
    		try { DebugEnterDecision(308, decisionCanBacktrack[308]);
    		int LA308_0 = input.LA(1);

    		if ((LA308_0==IDENTIFIER||LA308_0==SET||(LA308_0>=94 && LA308_0<=95)||LA308_0==97||(LA308_0>=101 && LA308_0<=107)||LA308_0==109||(LA308_0>=113 && LA308_0<=122)||(LA308_0>=132 && LA308_0<=138)||(LA308_0>=170 && LA308_0<=187)||(LA308_0>=190 && LA308_0<=192)||(LA308_0>=197 && LA308_0<=199)||(LA308_0>=201 && LA308_0<=202)||LA308_0==208||(LA308_0>=225 && LA308_0<=226)))
    		{
    			alt308=1;
    		}
    		} finally { DebugExitDecision(308); }
    		switch (alt308)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: interface_member_declarations
    			{
    			DebugLocation(869, 8);
    			PushFollow(Follow._interface_member_declarations_in_interface_body6672);
    			interface_member_declarations946=interface_member_declarations();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, interface_member_declarations946.Tree, interface_member_declarations946, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(308); }

    		DebugLocation(869, 41);
    		char_literal947=(IToken)Match(input,93,Follow._93_in_interface_body6677); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal947_tree = (object)adaptor.Create(char_literal947, retval);
    		adaptor.AddChild(root_0, char_literal947_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 264, interface_body_StartIndex); }
        }
     	DebugLocation(869, 44);
    	} finally { DebugExitRule(GrammarFileName, "interface_body"); }
    	return retval;

    }
    // $ANTLR end "interface_body"

    public class interface_member_declarations_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_interface_member_declarations() {}
    protected virtual void Leave_interface_member_declarations() {}

    // $ANTLR start "interface_member_declarations"
    // cs.g:870:1: interface_member_declarations : ( interface_member_declaration )+ ;
    [GrammarRule("interface_member_declarations")]
    public csParser.interface_member_declarations_return interface_member_declarations()
    {

        csParser.interface_member_declarations_return retval = new csParser.interface_member_declarations_return();
        retval.Start = (IToken)input.LT(1);
        int interface_member_declarations_StartIndex = input.Index;
        object root_0 = null;

        csParser.interface_member_declaration_return interface_member_declaration948 = default(csParser.interface_member_declaration_return);


    	try { DebugEnterRule(GrammarFileName, "interface_member_declarations");
    	DebugLocation(870, 31);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 265)) { return retval; }
    		// cs.g:870:30: ( ( interface_member_declaration )+ )
    		DebugEnterAlt(1);
    		// cs.g:871:2: ( interface_member_declaration )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(871, 2);
    		// cs.g:871:2: ( interface_member_declaration )+
    		int cnt309=0;
    		try { DebugEnterSubRule(309);
    		while (true)
    		{
    			int alt309=2;
    			try { DebugEnterDecision(309, decisionCanBacktrack[309]);
    			int LA309_0 = input.LA(1);

    			if ((LA309_0==IDENTIFIER||LA309_0==SET||(LA309_0>=94 && LA309_0<=95)||LA309_0==97||(LA309_0>=101 && LA309_0<=107)||LA309_0==109||(LA309_0>=113 && LA309_0<=122)||(LA309_0>=132 && LA309_0<=138)||(LA309_0>=170 && LA309_0<=187)||(LA309_0>=190 && LA309_0<=192)||(LA309_0>=197 && LA309_0<=199)||(LA309_0>=201 && LA309_0<=202)||LA309_0==208||(LA309_0>=225 && LA309_0<=226)))
    			{
    				alt309=1;
    			}


    			} finally { DebugExitDecision(309); }
    			switch (alt309)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: interface_member_declaration
    				{
    				DebugLocation(871, 2);
    				PushFollow(Follow._interface_member_declaration_in_interface_member_declarations6685);
    				interface_member_declaration948=interface_member_declaration();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, interface_member_declaration948.Tree, interface_member_declaration948, retval);

    				}
    				break;

    			default:
    				if (cnt309 >= 1)
    					goto loop309;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee309 = new EarlyExitException( 309, input );
    				DebugRecognitionException(eee309);
    				throw eee309;
    			}
    			cnt309++;
    		}
    		loop309:
    			;

    		} finally { DebugExitSubRule(309); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 265, interface_member_declarations_StartIndex); }
        }
     	DebugLocation(871, 31);
    	} finally { DebugExitRule(GrammarFileName, "interface_member_declarations"); }
    	return retval;

    }
    // $ANTLR end "interface_member_declarations"

    public class interface_member_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_interface_member_declaration() {}
    protected virtual void Leave_interface_member_declaration() {}

    // $ANTLR start "interface_member_declaration"
    // cs.g:872:1: interface_member_declaration : ( interface_property_declaration | interface_method_declaration | interface_event_declaration | interface_indexer_declaration );
    [GrammarRule("interface_member_declaration")]
    public csParser.interface_member_declaration_return interface_member_declaration()
    {

        csParser.interface_member_declaration_return retval = new csParser.interface_member_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int interface_member_declaration_StartIndex = input.Index;
        object root_0 = null;

        csParser.interface_property_declaration_return interface_property_declaration949 = default(csParser.interface_property_declaration_return);
        csParser.interface_method_declaration_return interface_method_declaration950 = default(csParser.interface_method_declaration_return);
        csParser.interface_event_declaration_return interface_event_declaration951 = default(csParser.interface_event_declaration_return);
        csParser.interface_indexer_declaration_return interface_indexer_declaration952 = default(csParser.interface_indexer_declaration_return);


    	try { DebugEnterRule(GrammarFileName, "interface_member_declaration");
    	DebugLocation(872, 33);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 266)) { return retval; }
    		// cs.g:872:29: ( interface_property_declaration | interface_method_declaration | interface_event_declaration | interface_indexer_declaration )
    		int alt310=4;
    		try { DebugEnterDecision(310, decisionCanBacktrack[310]);
    		try
    		{
    			alt310 = dfa310.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(310); }
    		switch (alt310)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:873:2: interface_property_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(873, 2);
    			PushFollow(Follow._interface_property_declaration_in_interface_member_declaration6694);
    			interface_property_declaration949=interface_property_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, interface_property_declaration949.Tree, interface_property_declaration949, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:874:4: interface_method_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(874, 4);
    			PushFollow(Follow._interface_method_declaration_in_interface_member_declaration6700);
    			interface_method_declaration950=interface_method_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, interface_method_declaration950.Tree, interface_method_declaration950, retval);

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:875:4: interface_event_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(875, 4);
    			PushFollow(Follow._interface_event_declaration_in_interface_member_declaration6706);
    			interface_event_declaration951=interface_event_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, interface_event_declaration951.Tree, interface_event_declaration951, retval);

    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// cs.g:876:4: interface_indexer_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(876, 4);
    			PushFollow(Follow._interface_indexer_declaration_in_interface_member_declaration6712);
    			interface_indexer_declaration952=interface_indexer_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, interface_indexer_declaration952.Tree, interface_indexer_declaration952, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 266, interface_member_declaration_StartIndex); }
        }
     	DebugLocation(876, 33);
    	} finally { DebugExitRule(GrammarFileName, "interface_member_declaration"); }
    	return retval;

    }
    // $ANTLR end "interface_member_declaration"

    public class interface_method_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_interface_method_declaration() {}
    protected virtual void Leave_interface_method_declaration() {}

    // $ANTLR start "interface_method_declaration"
    // cs.g:877:1: interface_method_declaration : ( attributes )? ( 'new' )? ( method_modifiers )? return_type identifier ( generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' ;
    [GrammarRule("interface_method_declaration")]
    public csParser.interface_method_declaration_return interface_method_declaration()
    {

        csParser.interface_method_declaration_return retval = new csParser.interface_method_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int interface_method_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal954=null;
        IToken char_literal959=null;
        IToken char_literal961=null;
        IToken char_literal963=null;
        csParser.attributes_return attributes953 = default(csParser.attributes_return);
        csParser.method_modifiers_return method_modifiers955 = default(csParser.method_modifiers_return);
        csParser.return_type_return return_type956 = default(csParser.return_type_return);
        csParser.identifier_return identifier957 = default(csParser.identifier_return);
        csParser.generic_parameter_list_return generic_parameter_list958 = default(csParser.generic_parameter_list_return);
        csParser.formal_parameter_list_return formal_parameter_list960 = default(csParser.formal_parameter_list_return);
        csParser.type_parameter_constraints_clauses_return type_parameter_constraints_clauses962 = default(csParser.type_parameter_constraints_clauses_return);

        object string_literal954_tree=null;
        object char_literal959_tree=null;
        object char_literal961_tree=null;
        object char_literal963_tree=null;

    	try { DebugEnterRule(GrammarFileName, "interface_method_declaration");
    	DebugLocation(877, 86);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 267)) { return retval; }
    		// cs.g:877:29: ( ( attributes )? ( 'new' )? ( method_modifiers )? return_type identifier ( generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';' )
    		DebugEnterAlt(1);
    		// cs.g:878:2: ( attributes )? ( 'new' )? ( method_modifiers )? return_type identifier ( generic_parameter_list )? '(' ( formal_parameter_list )? ')' ( type_parameter_constraints_clauses )? ';'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(878, 2);
    		// cs.g:878:2: ( attributes )?
    		int alt311=2;
    		try { DebugEnterSubRule(311);
    		try { DebugEnterDecision(311, decisionCanBacktrack[311]);
    		int LA311_0 = input.LA(1);

    		if ((LA311_0==97))
    		{
    			alt311=1;
    		}
    		} finally { DebugExitDecision(311); }
    		switch (alt311)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(878, 2);
    			PushFollow(Follow._attributes_in_interface_method_declaration6720);
    			attributes953=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes953.Tree, attributes953, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(311); }

    		DebugLocation(878, 16);
    		// cs.g:878:16: ( 'new' )?
    		int alt312=2;
    		try { DebugEnterSubRule(312);
    		try { DebugEnterDecision(312, decisionCanBacktrack[312]);
    		int LA312_0 = input.LA(1);

    		if ((LA312_0==138))
    		{
    			int LA312_1 = input.LA(2);

    			if ((EvaluatePredicate(synpred563_cs_fragment)))
    			{
    				alt312=1;
    			}
    		}
    		} finally { DebugExitDecision(312); }
    		switch (alt312)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: 'new'
    			{
    			DebugLocation(878, 16);
    			string_literal954=(IToken)Match(input,138,Follow._138_in_interface_method_declaration6725); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal954_tree = (object)adaptor.Create(string_literal954, retval);
    			adaptor.AddChild(root_0, string_literal954_tree);
    			}

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(312); }

    		DebugLocation(878, 25);
    		// cs.g:878:25: ( method_modifiers )?
    		int alt313=2;
    		try { DebugEnterSubRule(313);
    		try { DebugEnterDecision(313, decisionCanBacktrack[313]);
    		int LA313_0 = input.LA(1);

    		if ((LA313_0==94||LA313_0==138||(LA313_0>=170 && LA313_0<=174)||(LA313_0>=190 && LA313_0<=192)||(LA313_0>=197 && LA313_0<=198)))
    		{
    			alt313=1;
    		}
    		} finally { DebugExitDecision(313); }
    		switch (alt313)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: method_modifiers
    			{
    			DebugLocation(878, 25);
    			PushFollow(Follow._method_modifiers_in_interface_method_declaration6730);
    			method_modifiers955=method_modifiers();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, method_modifiers955.Tree, method_modifiers955, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(313); }

    		DebugLocation(878, 44);
    		PushFollow(Follow._return_type_in_interface_method_declaration6734);
    		return_type956=return_type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, return_type956.Tree, return_type956, retval);
    		DebugLocation(878, 58);
    		PushFollow(Follow._identifier_in_interface_method_declaration6738);
    		identifier957=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier957.Tree, identifier957, retval);
    		DebugLocation(878, 71);
    		// cs.g:878:71: ( generic_parameter_list )?
    		int alt314=2;
    		try { DebugEnterSubRule(314);
    		try { DebugEnterDecision(314, decisionCanBacktrack[314]);
    		int LA314_0 = input.LA(1);

    		if ((LA314_0==123))
    		{
    			alt314=1;
    		}
    		} finally { DebugExitDecision(314); }
    		switch (alt314)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: generic_parameter_list
    			{
    			DebugLocation(878, 71);
    			PushFollow(Follow._generic_parameter_list_in_interface_method_declaration6742);
    			generic_parameter_list958=generic_parameter_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, generic_parameter_list958.Tree, generic_parameter_list958, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(314); }

    		DebugLocation(879, 9);
    		char_literal959=(IToken)Match(input,110,Follow._110_in_interface_method_declaration6750); if (state.failed) return retval;
    		DebugLocation(879, 13);
    		// cs.g:879:13: ( formal_parameter_list )?
    		int alt315=2;
    		try { DebugEnterSubRule(315);
    		try { DebugEnterDecision(315, decisionCanBacktrack[315]);
    		int LA315_0 = input.LA(1);

    		if ((LA315_0==IDENTIFIER||LA315_0==SET||LA315_0==90||LA315_0==95||LA315_0==97||(LA315_0>=101 && LA315_0<=107)||LA315_0==109||(LA315_0>=113 && LA315_0<=122)||(LA315_0>=130 && LA315_0<=137)||(LA315_0>=175 && LA315_0<=187)||(LA315_0>=199 && LA315_0<=202)||LA315_0==208||(LA315_0>=225 && LA315_0<=226)))
    		{
    			alt315=1;
    		}
    		} finally { DebugExitDecision(315); }
    		switch (alt315)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: formal_parameter_list
    			{
    			DebugLocation(879, 13);
    			PushFollow(Follow._formal_parameter_list_in_interface_method_declaration6755);
    			formal_parameter_list960=formal_parameter_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, formal_parameter_list960.Tree, formal_parameter_list960, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(315); }

    		DebugLocation(879, 41);
    		char_literal961=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_interface_method_declaration6760), "RPAREN"); if (state.failed) return retval;
    		DebugLocation(879, 45);
    		// cs.g:879:45: ( type_parameter_constraints_clauses )?
    		int alt316=2;
    		try { DebugEnterSubRule(316);
    		try { DebugEnterDecision(316, decisionCanBacktrack[316]);
    		int LA316_0 = input.LA(1);

    		if ((LA316_0==187))
    		{
    			alt316=1;
    		}
    		} finally { DebugExitDecision(316); }
    		switch (alt316)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: type_parameter_constraints_clauses
    			{
    			DebugLocation(879, 45);
    			PushFollow(Follow._type_parameter_constraints_clauses_in_interface_method_declaration6765);
    			type_parameter_constraints_clauses962=type_parameter_constraints_clauses();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type_parameter_constraints_clauses962.Tree, type_parameter_constraints_clauses962, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(316); }

    		DebugLocation(879, 83);
    		char_literal963=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_interface_method_declaration6770), "SEMI"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal963_tree = (object)adaptor.Create(char_literal963, retval);
    		adaptor.AddChild(root_0, char_literal963_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 267, interface_method_declaration_StartIndex); }
        }
     	DebugLocation(879, 86);
    	} finally { DebugExitRule(GrammarFileName, "interface_method_declaration"); }
    	return retval;

    }
    // $ANTLR end "interface_method_declaration"

    public class interface_property_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_interface_property_declaration() {}
    protected virtual void Leave_interface_property_declaration() {}

    // $ANTLR start "interface_property_declaration"
    // cs.g:880:1: interface_property_declaration : ( attributes )? ( 'new' )? type identifier '{' interface_accessor_declarations '}' ;
    [GrammarRule("interface_property_declaration")]
    public csParser.interface_property_declaration_return interface_property_declaration()
    {

        csParser.interface_property_declaration_return retval = new csParser.interface_property_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int interface_property_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal965=null;
        IToken char_literal968=null;
        IToken char_literal970=null;
        csParser.attributes_return attributes964 = default(csParser.attributes_return);
        csParser.type_return type966 = default(csParser.type_return);
        csParser.identifier_return identifier967 = default(csParser.identifier_return);
        csParser.interface_accessor_declarations_return interface_accessor_declarations969 = default(csParser.interface_accessor_declarations_return);

        object string_literal965_tree=null;
        object char_literal968_tree=null;
        object char_literal970_tree=null;

    	try { DebugEnterRule(GrammarFileName, "interface_property_declaration");
    	DebugLocation(880, 88);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 268)) { return retval; }
    		// cs.g:880:31: ( ( attributes )? ( 'new' )? type identifier '{' interface_accessor_declarations '}' )
    		DebugEnterAlt(1);
    		// cs.g:881:2: ( attributes )? ( 'new' )? type identifier '{' interface_accessor_declarations '}'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(881, 2);
    		// cs.g:881:2: ( attributes )?
    		int alt317=2;
    		try { DebugEnterSubRule(317);
    		try { DebugEnterDecision(317, decisionCanBacktrack[317]);
    		int LA317_0 = input.LA(1);

    		if ((LA317_0==97))
    		{
    			alt317=1;
    		}
    		} finally { DebugExitDecision(317); }
    		switch (alt317)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(881, 2);
    			PushFollow(Follow._attributes_in_interface_property_declaration6779);
    			attributes964=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes964.Tree, attributes964, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(317); }

    		DebugLocation(881, 16);
    		// cs.g:881:16: ( 'new' )?
    		int alt318=2;
    		try { DebugEnterSubRule(318);
    		try { DebugEnterDecision(318, decisionCanBacktrack[318]);
    		int LA318_0 = input.LA(1);

    		if ((LA318_0==138))
    		{
    			alt318=1;
    		}
    		} finally { DebugExitDecision(318); }
    		switch (alt318)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: 'new'
    			{
    			DebugLocation(881, 16);
    			string_literal965=(IToken)Match(input,138,Follow._138_in_interface_property_declaration6784); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal965_tree = (object)adaptor.Create(string_literal965, retval);
    			adaptor.AddChild(root_0, string_literal965_tree);
    			}

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(318); }

    		DebugLocation(881, 25);
    		PushFollow(Follow._type_in_interface_property_declaration6789);
    		type966=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type966.Tree, type966, retval);
    		DebugLocation(881, 32);
    		PushFollow(Follow._identifier_in_interface_property_declaration6793);
    		identifier967=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier967.Tree, identifier967, retval);
    		DebugLocation(881, 45);
    		char_literal968=(IToken)Match(input,92,Follow._92_in_interface_property_declaration6797); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal968_tree = (object)adaptor.Create(char_literal968, retval);
    		adaptor.AddChild(root_0, char_literal968_tree);
    		}
    		DebugLocation(881, 51);
    		PushFollow(Follow._interface_accessor_declarations_in_interface_property_declaration6801);
    		interface_accessor_declarations969=interface_accessor_declarations();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, interface_accessor_declarations969.Tree, interface_accessor_declarations969, retval);
    		DebugLocation(881, 85);
    		char_literal970=(IToken)Match(input,93,Follow._93_in_interface_property_declaration6805); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal970_tree = (object)adaptor.Create(char_literal970, retval);
    		adaptor.AddChild(root_0, char_literal970_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 268, interface_property_declaration_StartIndex); }
        }
     	DebugLocation(881, 88);
    	} finally { DebugExitRule(GrammarFileName, "interface_property_declaration"); }
    	return retval;

    }
    // $ANTLR end "interface_property_declaration"

    public class interface_accessor_declarations_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_interface_accessor_declarations() {}
    protected virtual void Leave_interface_accessor_declarations() {}

    // $ANTLR start "interface_accessor_declarations"
    // cs.g:882:1: interface_accessor_declarations : ( interface_get_accessor_declaration ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( interface_get_accessor_declaration )? );
    [GrammarRule("interface_accessor_declarations")]
    public csParser.interface_accessor_declarations_return interface_accessor_declarations()
    {

        csParser.interface_accessor_declarations_return retval = new csParser.interface_accessor_declarations_return();
        retval.Start = (IToken)input.LT(1);
        int interface_accessor_declarations_StartIndex = input.Index;
        object root_0 = null;

        csParser.interface_get_accessor_declaration_return interface_get_accessor_declaration971 = default(csParser.interface_get_accessor_declaration_return);
        csParser.interface_set_accessor_declaration_return interface_set_accessor_declaration972 = default(csParser.interface_set_accessor_declaration_return);
        csParser.interface_set_accessor_declaration_return interface_set_accessor_declaration973 = default(csParser.interface_set_accessor_declaration_return);
        csParser.interface_get_accessor_declaration_return interface_get_accessor_declaration974 = default(csParser.interface_get_accessor_declaration_return);


    	try { DebugEnterRule(GrammarFileName, "interface_accessor_declarations");
    	DebugLocation(882, 76);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 269)) { return retval; }
    		// cs.g:882:32: ( interface_get_accessor_declaration ( interface_set_accessor_declaration )? | interface_set_accessor_declaration ( interface_get_accessor_declaration )? )
    		int alt321=2;
    		try { DebugEnterDecision(321, decisionCanBacktrack[321]);
    		switch (input.LA(1))
    		{
    		case 97:
    			{
    			int LA321_1 = input.LA(2);

    			if ((EvaluatePredicate(synpred571_cs_fragment)))
    			{
    				alt321=1;
    			}
    			else if ((true))
    			{
    				alt321=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 321, 1, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case GET:
    			{
    			alt321=1;
    			}
    			break;
    		case SET:
    			{
    			alt321=2;
    			}
    			break;
    		default:
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 321, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(321); }
    		switch (alt321)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:883:2: interface_get_accessor_declaration ( interface_set_accessor_declaration )?
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(883, 2);
    			PushFollow(Follow._interface_get_accessor_declaration_in_interface_accessor_declarations6813);
    			interface_get_accessor_declaration971=interface_get_accessor_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, interface_get_accessor_declaration971.Tree, interface_get_accessor_declaration971, retval);
    			DebugLocation(883, 39);
    			// cs.g:883:39: ( interface_set_accessor_declaration )?
    			int alt319=2;
    			try { DebugEnterSubRule(319);
    			try { DebugEnterDecision(319, decisionCanBacktrack[319]);
    			int LA319_0 = input.LA(1);

    			if ((LA319_0==SET||LA319_0==97))
    			{
    				alt319=1;
    			}
    			} finally { DebugExitDecision(319); }
    			switch (alt319)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: interface_set_accessor_declaration
    				{
    				DebugLocation(883, 39);
    				PushFollow(Follow._interface_set_accessor_declaration_in_interface_accessor_declarations6817);
    				interface_set_accessor_declaration972=interface_set_accessor_declaration();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, interface_set_accessor_declaration972.Tree, interface_set_accessor_declaration972, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(319); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:884:4: interface_set_accessor_declaration ( interface_get_accessor_declaration )?
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(884, 4);
    			PushFollow(Follow._interface_set_accessor_declaration_in_interface_accessor_declarations6823);
    			interface_set_accessor_declaration973=interface_set_accessor_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, interface_set_accessor_declaration973.Tree, interface_set_accessor_declaration973, retval);
    			DebugLocation(884, 41);
    			// cs.g:884:41: ( interface_get_accessor_declaration )?
    			int alt320=2;
    			try { DebugEnterSubRule(320);
    			try { DebugEnterDecision(320, decisionCanBacktrack[320]);
    			int LA320_0 = input.LA(1);

    			if ((LA320_0==GET||LA320_0==97))
    			{
    				alt320=1;
    			}
    			} finally { DebugExitDecision(320); }
    			switch (alt320)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: interface_get_accessor_declaration
    				{
    				DebugLocation(884, 41);
    				PushFollow(Follow._interface_get_accessor_declaration_in_interface_accessor_declarations6827);
    				interface_get_accessor_declaration974=interface_get_accessor_declaration();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, interface_get_accessor_declaration974.Tree, interface_get_accessor_declaration974, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(320); }


    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 269, interface_accessor_declarations_StartIndex); }
        }
     	DebugLocation(884, 76);
    	} finally { DebugExitRule(GrammarFileName, "interface_accessor_declarations"); }
    	return retval;

    }
    // $ANTLR end "interface_accessor_declarations"

    public class interface_get_accessor_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_interface_get_accessor_declaration() {}
    protected virtual void Leave_interface_get_accessor_declaration() {}

    // $ANTLR start "interface_get_accessor_declaration"
    // cs.g:885:1: interface_get_accessor_declaration : ( attributes )? 'get' ';' ;
    [GrammarRule("interface_get_accessor_declaration")]
    public csParser.interface_get_accessor_declaration_return interface_get_accessor_declaration()
    {

        csParser.interface_get_accessor_declaration_return retval = new csParser.interface_get_accessor_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int interface_get_accessor_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal976=null;
        IToken char_literal977=null;
        csParser.attributes_return attributes975 = default(csParser.attributes_return);

        object string_literal976_tree=null;
        object char_literal977_tree=null;

    	try { DebugEnterRule(GrammarFileName, "interface_get_accessor_declaration");
    	DebugLocation(885, 27);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 270)) { return retval; }
    		// cs.g:885:35: ( ( attributes )? 'get' ';' )
    		DebugEnterAlt(1);
    		// cs.g:886:2: ( attributes )? 'get' ';'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(886, 2);
    		// cs.g:886:2: ( attributes )?
    		int alt322=2;
    		try { DebugEnterSubRule(322);
    		try { DebugEnterDecision(322, decisionCanBacktrack[322]);
    		int LA322_0 = input.LA(1);

    		if ((LA322_0==97))
    		{
    			alt322=1;
    		}
    		} finally { DebugExitDecision(322); }
    		switch (alt322)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(886, 2);
    			PushFollow(Follow._attributes_in_interface_get_accessor_declaration6836);
    			attributes975=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes975.Tree, attributes975, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(322); }

    		DebugLocation(886, 16);
    		string_literal976=(IToken)new XToken((IToken)Match(input,GET,Follow._GET_in_interface_get_accessor_declaration6841), "GET"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal976_tree = (object)adaptor.Create(string_literal976, retval);
    		adaptor.AddChild(root_0, string_literal976_tree);
    		}
    		DebugLocation(886, 24);
    		char_literal977=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_interface_get_accessor_declaration6845), "SEMI"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal977_tree = (object)adaptor.Create(char_literal977, retval);
    		adaptor.AddChild(root_0, char_literal977_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 270, interface_get_accessor_declaration_StartIndex); }
        }
     	DebugLocation(886, 27);
    	} finally { DebugExitRule(GrammarFileName, "interface_get_accessor_declaration"); }
    	return retval;

    }
    // $ANTLR end "interface_get_accessor_declaration"

    public class interface_set_accessor_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_interface_set_accessor_declaration() {}
    protected virtual void Leave_interface_set_accessor_declaration() {}

    // $ANTLR start "interface_set_accessor_declaration"
    // cs.g:887:1: interface_set_accessor_declaration : ( attributes )? 'set' ';' ;
    [GrammarRule("interface_set_accessor_declaration")]
    public csParser.interface_set_accessor_declaration_return interface_set_accessor_declaration()
    {

        csParser.interface_set_accessor_declaration_return retval = new csParser.interface_set_accessor_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int interface_set_accessor_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal979=null;
        IToken char_literal980=null;
        csParser.attributes_return attributes978 = default(csParser.attributes_return);

        object string_literal979_tree=null;
        object char_literal980_tree=null;

    	try { DebugEnterRule(GrammarFileName, "interface_set_accessor_declaration");
    	DebugLocation(887, 27);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 271)) { return retval; }
    		// cs.g:887:35: ( ( attributes )? 'set' ';' )
    		DebugEnterAlt(1);
    		// cs.g:888:2: ( attributes )? 'set' ';'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(888, 2);
    		// cs.g:888:2: ( attributes )?
    		int alt323=2;
    		try { DebugEnterSubRule(323);
    		try { DebugEnterDecision(323, decisionCanBacktrack[323]);
    		int LA323_0 = input.LA(1);

    		if ((LA323_0==97))
    		{
    			alt323=1;
    		}
    		} finally { DebugExitDecision(323); }
    		switch (alt323)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(888, 2);
    			PushFollow(Follow._attributes_in_interface_set_accessor_declaration6855);
    			attributes978=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes978.Tree, attributes978, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(323); }

    		DebugLocation(888, 16);
    		string_literal979=(IToken)new XToken((IToken)Match(input,SET,Follow._SET_in_interface_set_accessor_declaration6860), "SET"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal979_tree = (object)adaptor.Create(string_literal979, retval);
    		adaptor.AddChild(root_0, string_literal979_tree);
    		}
    		DebugLocation(888, 24);
    		char_literal980=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_interface_set_accessor_declaration6864), "SEMI"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal980_tree = (object)adaptor.Create(char_literal980, retval);
    		adaptor.AddChild(root_0, char_literal980_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 271, interface_set_accessor_declaration_StartIndex); }
        }
     	DebugLocation(888, 27);
    	} finally { DebugExitRule(GrammarFileName, "interface_set_accessor_declaration"); }
    	return retval;

    }
    // $ANTLR end "interface_set_accessor_declaration"

    public class interface_event_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_interface_event_declaration() {}
    protected virtual void Leave_interface_event_declaration() {}

    // $ANTLR start "interface_event_declaration"
    // cs.g:889:1: interface_event_declaration : ( attributes )? ( 'new' )? 'event' type identifier ';' ;
    [GrammarRule("interface_event_declaration")]
    public csParser.interface_event_declaration_return interface_event_declaration()
    {

        csParser.interface_event_declaration_return retval = new csParser.interface_event_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int interface_event_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal982=null;
        IToken string_literal983=null;
        IToken char_literal986=null;
        csParser.attributes_return attributes981 = default(csParser.attributes_return);
        csParser.type_return type984 = default(csParser.type_return);
        csParser.identifier_return identifier985 = default(csParser.identifier_return);

        object string_literal982_tree=null;
        object string_literal983_tree=null;
        object char_literal986_tree=null;

    	try { DebugEnterRule(GrammarFileName, "interface_event_declaration");
    	DebugLocation(889, 58);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 272)) { return retval; }
    		// cs.g:889:28: ( ( attributes )? ( 'new' )? 'event' type identifier ';' )
    		DebugEnterAlt(1);
    		// cs.g:890:2: ( attributes )? ( 'new' )? 'event' type identifier ';'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(890, 2);
    		// cs.g:890:2: ( attributes )?
    		int alt324=2;
    		try { DebugEnterSubRule(324);
    		try { DebugEnterDecision(324, decisionCanBacktrack[324]);
    		int LA324_0 = input.LA(1);

    		if ((LA324_0==97))
    		{
    			alt324=1;
    		}
    		} finally { DebugExitDecision(324); }
    		switch (alt324)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(890, 2);
    			PushFollow(Follow._attributes_in_interface_event_declaration6875);
    			attributes981=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes981.Tree, attributes981, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(324); }

    		DebugLocation(890, 16);
    		// cs.g:890:16: ( 'new' )?
    		int alt325=2;
    		try { DebugEnterSubRule(325);
    		try { DebugEnterDecision(325, decisionCanBacktrack[325]);
    		int LA325_0 = input.LA(1);

    		if ((LA325_0==138))
    		{
    			alt325=1;
    		}
    		} finally { DebugExitDecision(325); }
    		switch (alt325)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: 'new'
    			{
    			DebugLocation(890, 16);
    			string_literal982=(IToken)Match(input,138,Follow._138_in_interface_event_declaration6880); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal982_tree = (object)adaptor.Create(string_literal982, retval);
    			adaptor.AddChild(root_0, string_literal982_tree);
    			}

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(325); }

    		DebugLocation(890, 25);
    		string_literal983=(IToken)Match(input,104,Follow._104_in_interface_event_declaration6885); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal983_tree = (object)adaptor.Create(string_literal983, retval);
    		adaptor.AddChild(root_0, string_literal983_tree);
    		}
    		DebugLocation(890, 35);
    		PushFollow(Follow._type_in_interface_event_declaration6889);
    		type984=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type984.Tree, type984, retval);
    		DebugLocation(890, 42);
    		PushFollow(Follow._identifier_in_interface_event_declaration6893);
    		identifier985=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier985.Tree, identifier985, retval);
    		DebugLocation(890, 55);
    		char_literal986=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_interface_event_declaration6897), "SEMI"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal986_tree = (object)adaptor.Create(char_literal986, retval);
    		adaptor.AddChild(root_0, char_literal986_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 272, interface_event_declaration_StartIndex); }
        }
     	DebugLocation(890, 58);
    	} finally { DebugExitRule(GrammarFileName, "interface_event_declaration"); }
    	return retval;

    }
    // $ANTLR end "interface_event_declaration"

    public class interface_indexer_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_interface_indexer_declaration() {}
    protected virtual void Leave_interface_indexer_declaration() {}

    // $ANTLR start "interface_indexer_declaration"
    // cs.g:891:1: interface_indexer_declaration : ( attributes )? ( 'new' )? type 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}' ;
    [GrammarRule("interface_indexer_declaration")]
    public csParser.interface_indexer_declaration_return interface_indexer_declaration()
    {

        csParser.interface_indexer_declaration_return retval = new csParser.interface_indexer_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int interface_indexer_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal988=null;
        IToken string_literal990=null;
        IToken char_literal991=null;
        IToken char_literal993=null;
        IToken char_literal994=null;
        IToken char_literal996=null;
        csParser.attributes_return attributes987 = default(csParser.attributes_return);
        csParser.type_return type989 = default(csParser.type_return);
        csParser.formal_parameter_list_return formal_parameter_list992 = default(csParser.formal_parameter_list_return);
        csParser.interface_accessor_declarations_return interface_accessor_declarations995 = default(csParser.interface_accessor_declarations_return);

        object string_literal988_tree=null;
        object string_literal990_tree=null;
        object char_literal991_tree=null;
        object char_literal993_tree=null;
        object char_literal994_tree=null;
        object char_literal996_tree=null;

    	try { DebugEnterRule(GrammarFileName, "interface_indexer_declaration");
    	DebugLocation(891, 122);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 273)) { return retval; }
    		// cs.g:891:30: ( ( attributes )? ( 'new' )? type 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}' )
    		DebugEnterAlt(1);
    		// cs.g:892:2: ( attributes )? ( 'new' )? type 'this' '[' formal_parameter_list ']' '{' interface_accessor_declarations '}'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(892, 2);
    		// cs.g:892:2: ( attributes )?
    		int alt326=2;
    		try { DebugEnterSubRule(326);
    		try { DebugEnterDecision(326, decisionCanBacktrack[326]);
    		int LA326_0 = input.LA(1);

    		if ((LA326_0==97))
    		{
    			alt326=1;
    		}
    		} finally { DebugExitDecision(326); }
    		switch (alt326)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(892, 2);
    			PushFollow(Follow._attributes_in_interface_indexer_declaration6907);
    			attributes987=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes987.Tree, attributes987, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(326); }

    		DebugLocation(892, 17);
    		// cs.g:892:17: ( 'new' )?
    		int alt327=2;
    		try { DebugEnterSubRule(327);
    		try { DebugEnterDecision(327, decisionCanBacktrack[327]);
    		int LA327_0 = input.LA(1);

    		if ((LA327_0==138))
    		{
    			alt327=1;
    		}
    		} finally { DebugExitDecision(327); }
    		switch (alt327)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: 'new'
    			{
    			DebugLocation(892, 17);
    			string_literal988=(IToken)Match(input,138,Follow._138_in_interface_indexer_declaration6913); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal988_tree = (object)adaptor.Create(string_literal988, retval);
    			adaptor.AddChild(root_0, string_literal988_tree);
    			}

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(327); }

    		DebugLocation(892, 27);
    		PushFollow(Follow._type_in_interface_indexer_declaration6919);
    		type989=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type989.Tree, type989, retval);
    		DebugLocation(892, 34);
    		string_literal990=(IToken)Match(input,90,Follow._90_in_interface_indexer_declaration6923); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal990_tree = (object)adaptor.Create(string_literal990, retval);
    		adaptor.AddChild(root_0, string_literal990_tree);
    		}
    		DebugLocation(892, 43);
    		char_literal991=(IToken)Match(input,97,Follow._97_in_interface_indexer_declaration6927); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal991_tree = (object)adaptor.Create(char_literal991, retval);
    		adaptor.AddChild(root_0, char_literal991_tree);
    		}
    		DebugLocation(892, 49);
    		PushFollow(Follow._formal_parameter_list_in_interface_indexer_declaration6931);
    		formal_parameter_list992=formal_parameter_list();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, formal_parameter_list992.Tree, formal_parameter_list992, retval);
    		DebugLocation(892, 73);
    		char_literal993=(IToken)Match(input,99,Follow._99_in_interface_indexer_declaration6935); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal993_tree = (object)adaptor.Create(char_literal993, retval);
    		adaptor.AddChild(root_0, char_literal993_tree);
    		}
    		DebugLocation(892, 79);
    		char_literal994=(IToken)Match(input,92,Follow._92_in_interface_indexer_declaration6939); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal994_tree = (object)adaptor.Create(char_literal994, retval);
    		adaptor.AddChild(root_0, char_literal994_tree);
    		}
    		DebugLocation(892, 85);
    		PushFollow(Follow._interface_accessor_declarations_in_interface_indexer_declaration6943);
    		interface_accessor_declarations995=interface_accessor_declarations();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, interface_accessor_declarations995.Tree, interface_accessor_declarations995, retval);
    		DebugLocation(892, 119);
    		char_literal996=(IToken)Match(input,93,Follow._93_in_interface_indexer_declaration6947); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal996_tree = (object)adaptor.Create(char_literal996, retval);
    		adaptor.AddChild(root_0, char_literal996_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 273, interface_indexer_declaration_StartIndex); }
        }
     	DebugLocation(892, 122);
    	} finally { DebugExitRule(GrammarFileName, "interface_indexer_declaration"); }
    	return retval;

    }
    // $ANTLR end "interface_indexer_declaration"

    public class enum_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_enum_declaration() {}
    protected virtual void Leave_enum_declaration() {}

    // $ANTLR start "enum_declaration"
    // cs.g:896:1: enum_declaration : ( attributes )? ( enum_modifiers )? 'enum' identifier ( enum_base )? enum_body ( ';' )? ;
    [GrammarRule("enum_declaration")]
    public csParser.enum_declaration_return enum_declaration()
    {

        csParser.enum_declaration_return retval = new csParser.enum_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int enum_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal999=null;
        IToken char_literal1003=null;
        csParser.attributes_return attributes997 = default(csParser.attributes_return);
        csParser.enum_modifiers_return enum_modifiers998 = default(csParser.enum_modifiers_return);
        csParser.identifier_return identifier1000 = default(csParser.identifier_return);
        csParser.enum_base_return enum_base1001 = default(csParser.enum_base_return);
        csParser.enum_body_return enum_body1002 = default(csParser.enum_body_return);

        object string_literal999_tree=null;
        object char_literal1003_tree=null;

    	try { DebugEnterRule(GrammarFileName, "enum_declaration");
    	DebugLocation(896, 85);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 274)) { return retval; }
    		// cs.g:896:17: ( ( attributes )? ( enum_modifiers )? 'enum' identifier ( enum_base )? enum_body ( ';' )? )
    		DebugEnterAlt(1);
    		// cs.g:897:2: ( attributes )? ( enum_modifiers )? 'enum' identifier ( enum_base )? enum_body ( ';' )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(897, 2);
    		// cs.g:897:2: ( attributes )?
    		int alt328=2;
    		try { DebugEnterSubRule(328);
    		try { DebugEnterDecision(328, decisionCanBacktrack[328]);
    		int LA328_0 = input.LA(1);

    		if ((LA328_0==97))
    		{
    			alt328=1;
    		}
    		} finally { DebugExitDecision(328); }
    		switch (alt328)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(897, 2);
    			PushFollow(Follow._attributes_in_enum_declaration6958);
    			attributes997=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes997.Tree, attributes997, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(328); }

    		DebugLocation(897, 16);
    		// cs.g:897:16: ( enum_modifiers )?
    		int alt329=2;
    		try { DebugEnterSubRule(329);
    		try { DebugEnterDecision(329, decisionCanBacktrack[329]);
    		int LA329_0 = input.LA(1);

    		if ((LA329_0==138||(LA329_0>=170 && LA329_0<=173)))
    		{
    			alt329=1;
    		}
    		} finally { DebugExitDecision(329); }
    		switch (alt329)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: enum_modifiers
    			{
    			DebugLocation(897, 16);
    			PushFollow(Follow._enum_modifiers_in_enum_declaration6963);
    			enum_modifiers998=enum_modifiers();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, enum_modifiers998.Tree, enum_modifiers998, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(329); }

    		DebugLocation(897, 34);
    		string_literal999=(IToken)new XToken((IToken)Match(input,ENUM,Follow._ENUM_in_enum_declaration6968), "ENUM"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal999_tree = (object)adaptor.Create(string_literal999, retval);
    		adaptor.AddChild(root_0, string_literal999_tree);
    		}
    		DebugLocation(897, 43);
    		PushFollow(Follow._identifier_in_enum_declaration6972);
    		identifier1000=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier1000.Tree, identifier1000, retval);
    		DebugLocation(897, 56);
    		// cs.g:897:56: ( enum_base )?
    		int alt330=2;
    		try { DebugEnterSubRule(330);
    		try { DebugEnterDecision(330, decisionCanBacktrack[330]);
    		int LA330_0 = input.LA(1);

    		if ((LA330_0==100))
    		{
    			alt330=1;
    		}
    		} finally { DebugExitDecision(330); }
    		switch (alt330)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: enum_base
    			{
    			DebugLocation(897, 56);
    			PushFollow(Follow._enum_base_in_enum_declaration6976);
    			enum_base1001=enum_base();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, enum_base1001.Tree, enum_base1001, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(330); }

    		DebugLocation(897, 69);
    		PushFollow(Follow._enum_body_in_enum_declaration6981);
    		enum_body1002=enum_body();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, enum_body1002.Tree, enum_body1002, retval);
    		DebugLocation(897, 81);
    		// cs.g:897:81: ( ';' )?
    		int alt331=2;
    		try { DebugEnterSubRule(331);
    		try { DebugEnterDecision(331, decisionCanBacktrack[331]);
    		int LA331_0 = input.LA(1);

    		if ((LA331_0==SEMI))
    		{
    			alt331=1;
    		}
    		} finally { DebugExitDecision(331); }
    		switch (alt331)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: ';'
    			{
    			DebugLocation(897, 81);
    			char_literal1003=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_enum_declaration6985), "SEMI"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal1003_tree = (object)adaptor.Create(char_literal1003, retval);
    			adaptor.AddChild(root_0, char_literal1003_tree);
    			}

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(331); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 274, enum_declaration_StartIndex); }
        }
     	DebugLocation(897, 85);
    	} finally { DebugExitRule(GrammarFileName, "enum_declaration"); }
    	return retval;

    }
    // $ANTLR end "enum_declaration"

    public class enum_base_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_enum_base() {}
    protected virtual void Leave_enum_base() {}

    // $ANTLR start "enum_base"
    // cs.g:899:1: enum_base : ':' integral_type ;
    [GrammarRule("enum_base")]
    public csParser.enum_base_return enum_base()
    {

        csParser.enum_base_return retval = new csParser.enum_base_return();
        retval.Start = (IToken)input.LT(1);
        int enum_base_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1004=null;
        csParser.integral_type_return integral_type1005 = default(csParser.integral_type_return);

        object char_literal1004_tree=null;

    	try { DebugEnterRule(GrammarFileName, "enum_base");
    	DebugLocation(899, 21);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 275)) { return retval; }
    		// cs.g:899:10: ( ':' integral_type )
    		DebugEnterAlt(1);
    		// cs.g:900:2: ':' integral_type
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(900, 2);
    		char_literal1004=(IToken)Match(input,100,Follow._100_in_enum_base6996); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1004_tree = (object)adaptor.Create(char_literal1004, retval);
    		adaptor.AddChild(root_0, char_literal1004_tree);
    		}
    		DebugLocation(900, 8);
    		PushFollow(Follow._integral_type_in_enum_base7000);
    		integral_type1005=integral_type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, integral_type1005.Tree, integral_type1005, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 275, enum_base_StartIndex); }
        }
     	DebugLocation(900, 21);
    	} finally { DebugExitRule(GrammarFileName, "enum_base"); }
    	return retval;

    }
    // $ANTLR end "enum_base"

    public class enum_body_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_enum_body() {}
    protected virtual void Leave_enum_body() {}

    // $ANTLR start "enum_body"
    // cs.g:901:1: enum_body : '{' ( enum_member_declarations ( ',' )? )? '}' ;
    [GrammarRule("enum_body")]
    public csParser.enum_body_return enum_body()
    {

        csParser.enum_body_return retval = new csParser.enum_body_return();
        retval.Start = (IToken)input.LT(1);
        int enum_body_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1006=null;
        IToken char_literal1008=null;
        IToken char_literal1009=null;
        csParser.enum_member_declarations_return enum_member_declarations1007 = default(csParser.enum_member_declarations_return);

        object char_literal1006_tree=null;
        object char_literal1008_tree=null;
        object char_literal1009_tree=null;

    	try { DebugEnterRule(GrammarFileName, "enum_body");
    	DebugLocation(901, 44);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 276)) { return retval; }
    		// cs.g:901:10: ( '{' ( enum_member_declarations ( ',' )? )? '}' )
    		DebugEnterAlt(1);
    		// cs.g:902:2: '{' ( enum_member_declarations ( ',' )? )? '}'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(902, 2);
    		char_literal1006=(IToken)Match(input,92,Follow._92_in_enum_body7008); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1006_tree = (object)adaptor.Create(char_literal1006, retval);
    		adaptor.AddChild(root_0, char_literal1006_tree);
    		}
    		DebugLocation(902, 6);
    		// cs.g:902:6: ( enum_member_declarations ( ',' )? )?
    		int alt333=2;
    		try { DebugEnterSubRule(333);
    		try { DebugEnterDecision(333, decisionCanBacktrack[333]);
    		int LA333_0 = input.LA(1);

    		if ((LA333_0==IDENTIFIER||LA333_0==SET||LA333_0==95||LA333_0==97||(LA333_0>=101 && LA333_0<=107)||LA333_0==109||(LA333_0>=175 && LA333_0<=187)||LA333_0==199||(LA333_0>=201 && LA333_0<=202)||LA333_0==208||(LA333_0>=225 && LA333_0<=226)))
    		{
    			alt333=1;
    		}
    		} finally { DebugExitDecision(333); }
    		switch (alt333)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:902:7: enum_member_declarations ( ',' )?
    			{
    			DebugLocation(902, 7);
    			PushFollow(Follow._enum_member_declarations_in_enum_body7011);
    			enum_member_declarations1007=enum_member_declarations();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, enum_member_declarations1007.Tree, enum_member_declarations1007, retval);
    			DebugLocation(902, 32);
    			// cs.g:902:32: ( ',' )?
    			int alt332=2;
    			try { DebugEnterSubRule(332);
    			try { DebugEnterDecision(332, decisionCanBacktrack[332]);
    			int LA332_0 = input.LA(1);

    			if ((LA332_0==98))
    			{
    				alt332=1;
    			}
    			} finally { DebugExitDecision(332); }
    			switch (alt332)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: ','
    				{
    				DebugLocation(902, 32);
    				char_literal1008=(IToken)Match(input,98,Follow._98_in_enum_body7013); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal1008_tree = (object)adaptor.Create(char_literal1008, retval);
    				adaptor.AddChild(root_0, char_literal1008_tree);
    				}

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(332); }


    			}
    			break;

    		}
    		} finally { DebugExitSubRule(333); }

    		DebugLocation(902, 41);
    		char_literal1009=(IToken)Match(input,93,Follow._93_in_enum_body7020); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1009_tree = (object)adaptor.Create(char_literal1009, retval);
    		adaptor.AddChild(root_0, char_literal1009_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 276, enum_body_StartIndex); }
        }
     	DebugLocation(902, 44);
    	} finally { DebugExitRule(GrammarFileName, "enum_body"); }
    	return retval;

    }
    // $ANTLR end "enum_body"

    public class enum_member_declarations_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_enum_member_declarations() {}
    protected virtual void Leave_enum_member_declarations() {}

    // $ANTLR start "enum_member_declarations"
    // cs.g:903:1: enum_member_declarations : enum_member_declaration ( ',' enum_member_declaration )* ;
    [GrammarRule("enum_member_declarations")]
    public csParser.enum_member_declarations_return enum_member_declarations()
    {

        csParser.enum_member_declarations_return retval = new csParser.enum_member_declarations_return();
        retval.Start = (IToken)input.LT(1);
        int enum_member_declarations_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1011=null;
        csParser.enum_member_declaration_return enum_member_declaration1010 = default(csParser.enum_member_declaration_return);
        csParser.enum_member_declaration_return enum_member_declaration1012 = default(csParser.enum_member_declaration_return);

        object char_literal1011_tree=null;

    	try { DebugEnterRule(GrammarFileName, "enum_member_declarations");
    	DebugLocation(903, 56);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 277)) { return retval; }
    		// cs.g:903:25: ( enum_member_declaration ( ',' enum_member_declaration )* )
    		DebugEnterAlt(1);
    		// cs.g:904:2: enum_member_declaration ( ',' enum_member_declaration )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(904, 2);
    		PushFollow(Follow._enum_member_declaration_in_enum_member_declarations7028);
    		enum_member_declaration1010=enum_member_declaration();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, enum_member_declaration1010.Tree, enum_member_declaration1010, retval);
    		DebugLocation(904, 26);
    		// cs.g:904:26: ( ',' enum_member_declaration )*
    		try { DebugEnterSubRule(334);
    		while (true)
    		{
    			int alt334=2;
    			try { DebugEnterDecision(334, decisionCanBacktrack[334]);
    			int LA334_0 = input.LA(1);

    			if ((LA334_0==98))
    			{
    				int LA334_1 = input.LA(2);

    				if ((LA334_1==IDENTIFIER||LA334_1==SET||LA334_1==95||LA334_1==97||(LA334_1>=101 && LA334_1<=107)||LA334_1==109||(LA334_1>=175 && LA334_1<=187)||LA334_1==199||(LA334_1>=201 && LA334_1<=202)||LA334_1==208||(LA334_1>=225 && LA334_1<=226)))
    				{
    					alt334=1;
    				}


    			}


    			} finally { DebugExitDecision(334); }
    			switch ( alt334 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:904:27: ',' enum_member_declaration
    				{
    				DebugLocation(904, 27);
    				char_literal1011=(IToken)Match(input,98,Follow._98_in_enum_member_declarations7031); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal1011_tree = (object)adaptor.Create(char_literal1011, retval);
    				adaptor.AddChild(root_0, char_literal1011_tree);
    				}
    				DebugLocation(904, 31);
    				PushFollow(Follow._enum_member_declaration_in_enum_member_declarations7033);
    				enum_member_declaration1012=enum_member_declaration();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, enum_member_declaration1012.Tree, enum_member_declaration1012, retval);

    				}
    				break;

    			default:
    				goto loop334;
    			}
    		}

    		loop334:
    			;

    		} finally { DebugExitSubRule(334); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 277, enum_member_declarations_StartIndex); }
        }
     	DebugLocation(904, 56);
    	} finally { DebugExitRule(GrammarFileName, "enum_member_declarations"); }
    	return retval;

    }
    // $ANTLR end "enum_member_declarations"

    public class enum_member_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_enum_member_declaration() {}
    protected virtual void Leave_enum_member_declaration() {}

    // $ANTLR start "enum_member_declaration"
    // cs.g:905:1: enum_member_declaration : ( attributes )? identifier ( '=' expression )? ;
    [GrammarRule("enum_member_declaration")]
    public csParser.enum_member_declaration_return enum_member_declaration()
    {

        csParser.enum_member_declaration_return retval = new csParser.enum_member_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int enum_member_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1015=null;
        csParser.attributes_return attributes1013 = default(csParser.attributes_return);
        csParser.identifier_return identifier1014 = default(csParser.identifier_return);
        csParser.expression_return expression1016 = default(csParser.expression_return);

        object char_literal1015_tree=null;

    	try { DebugEnterRule(GrammarFileName, "enum_member_declaration");
    	DebugLocation(905, 48);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 278)) { return retval; }
    		// cs.g:905:24: ( ( attributes )? identifier ( '=' expression )? )
    		DebugEnterAlt(1);
    		// cs.g:906:2: ( attributes )? identifier ( '=' expression )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(906, 2);
    		// cs.g:906:2: ( attributes )?
    		int alt335=2;
    		try { DebugEnterSubRule(335);
    		try { DebugEnterDecision(335, decisionCanBacktrack[335]);
    		int LA335_0 = input.LA(1);

    		if ((LA335_0==97))
    		{
    			alt335=1;
    		}
    		} finally { DebugExitDecision(335); }
    		switch (alt335)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: attributes
    			{
    			DebugLocation(906, 2);
    			PushFollow(Follow._attributes_in_enum_member_declaration7043);
    			attributes1013=attributes();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, attributes1013.Tree, attributes1013, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(335); }

    		DebugLocation(906, 16);
    		PushFollow(Follow._identifier_in_enum_member_declaration7048);
    		identifier1014=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier1014.Tree, identifier1014, retval);
    		DebugLocation(906, 29);
    		// cs.g:906:29: ( '=' expression )?
    		int alt336=2;
    		try { DebugEnterSubRule(336);
    		try { DebugEnterDecision(336, decisionCanBacktrack[336]);
    		int LA336_0 = input.LA(1);

    		if ((LA336_0==96))
    		{
    			alt336=1;
    		}
    		} finally { DebugExitDecision(336); }
    		switch (alt336)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:906:30: '=' expression
    			{
    			DebugLocation(906, 30);
    			char_literal1015=(IToken)Match(input,96,Follow._96_in_enum_member_declaration7053); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal1015_tree = (object)adaptor.Create(char_literal1015, retval);
    			adaptor.AddChild(root_0, char_literal1015_tree);
    			}
    			DebugLocation(906, 36);
    			PushFollow(Follow._expression_in_enum_member_declaration7057);
    			expression1016=expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression1016.Tree, expression1016, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(336); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 278, enum_member_declaration_StartIndex); }
        }
     	DebugLocation(906, 48);
    	} finally { DebugExitRule(GrammarFileName, "enum_member_declaration"); }
    	return retval;

    }
    // $ANTLR end "enum_member_declaration"

    public class enum_modifiers_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_enum_modifiers() {}
    protected virtual void Leave_enum_modifiers() {}

    // $ANTLR start "enum_modifiers"
    // cs.g:907:1: enum_modifiers : ( enum_modifier )+ ;
    [GrammarRule("enum_modifiers")]
    public csParser.enum_modifiers_return enum_modifiers()
    {

        csParser.enum_modifiers_return retval = new csParser.enum_modifiers_return();
        retval.Start = (IToken)input.LT(1);
        int enum_modifiers_StartIndex = input.Index;
        object root_0 = null;

        csParser.enum_modifier_return enum_modifier1017 = default(csParser.enum_modifier_return);


    	try { DebugEnterRule(GrammarFileName, "enum_modifiers");
    	DebugLocation(907, 16);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 279)) { return retval; }
    		// cs.g:907:15: ( ( enum_modifier )+ )
    		DebugEnterAlt(1);
    		// cs.g:908:2: ( enum_modifier )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(908, 2);
    		// cs.g:908:2: ( enum_modifier )+
    		int cnt337=0;
    		try { DebugEnterSubRule(337);
    		while (true)
    		{
    			int alt337=2;
    			try { DebugEnterDecision(337, decisionCanBacktrack[337]);
    			int LA337_0 = input.LA(1);

    			if ((LA337_0==138||(LA337_0>=170 && LA337_0<=173)))
    			{
    				alt337=1;
    			}


    			} finally { DebugExitDecision(337); }
    			switch (alt337)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: enum_modifier
    				{
    				DebugLocation(908, 2);
    				PushFollow(Follow._enum_modifier_in_enum_modifiers7067);
    				enum_modifier1017=enum_modifier();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, enum_modifier1017.Tree, enum_modifier1017, retval);

    				}
    				break;

    			default:
    				if (cnt337 >= 1)
    					goto loop337;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee337 = new EarlyExitException( 337, input );
    				DebugRecognitionException(eee337);
    				throw eee337;
    			}
    			cnt337++;
    		}
    		loop337:
    			;

    		} finally { DebugExitSubRule(337); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 279, enum_modifiers_StartIndex); }
        }
     	DebugLocation(908, 16);
    	} finally { DebugExitRule(GrammarFileName, "enum_modifiers"); }
    	return retval;

    }
    // $ANTLR end "enum_modifiers"

    public class enum_modifier_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_enum_modifier() {}
    protected virtual void Leave_enum_modifier() {}

    // $ANTLR start "enum_modifier"
    // cs.g:909:1: enum_modifier : ( 'new' | 'public' | 'protected' | 'internal' | 'private' );
    [GrammarRule("enum_modifier")]
    public csParser.enum_modifier_return enum_modifier()
    {

        csParser.enum_modifier_return retval = new csParser.enum_modifier_return();
        retval.Start = (IToken)input.LT(1);
        int enum_modifier_StartIndex = input.Index;
        object root_0 = null;

        IToken set1018=null;

        object set1018_tree=null;

    	try { DebugEnterRule(GrammarFileName, "enum_modifier");
    	DebugLocation(909, 57);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 280)) { return retval; }
    		// cs.g:909:14: ( 'new' | 'public' | 'protected' | 'internal' | 'private' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(909, 14);
    		set1018=(IToken)input.LT(1);
    		if (input.LA(1)==138||(input.LA(1)>=170 && input.LA(1)<=173))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set1018, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 280, enum_modifier_StartIndex); }
        }
     	DebugLocation(910, 57);
    	} finally { DebugExitRule(GrammarFileName, "enum_modifier"); }
    	return retval;

    }
    // $ANTLR end "enum_modifier"

    public class statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_statement() {}
    protected virtual void Leave_statement() {}

    // $ANTLR start "statement"
    // cs.g:913:1: statement : ( labeled_statement | declaration_statement | embedded_statement );
    [GrammarRule("statement")]
    public csParser.statement_return statement()
    {

        csParser.statement_return retval = new csParser.statement_return();
        retval.Start = (IToken)input.LT(1);
        int statement_StartIndex = input.Index;
        object root_0 = null;

        csParser.labeled_statement_return labeled_statement1019 = default(csParser.labeled_statement_return);
        csParser.declaration_statement_return declaration_statement1020 = default(csParser.declaration_statement_return);
        csParser.embedded_statement_return embedded_statement1021 = default(csParser.embedded_statement_return);


    	try { DebugEnterRule(GrammarFileName, "statement");
    	DebugLocation(913, 22);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 281)) { return retval; }
    		// cs.g:913:10: ( labeled_statement | declaration_statement | embedded_statement )
    		int alt338=3;
    		try { DebugEnterDecision(338, decisionCanBacktrack[338]);
    		try
    		{
    			alt338 = dfa338.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(338); }
    		switch (alt338)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:914:2: labeled_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(914, 2);
    			PushFollow(Follow._labeled_statement_in_statement7102);
    			labeled_statement1019=labeled_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, labeled_statement1019.Tree, labeled_statement1019, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:915:4: declaration_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(915, 4);
    			PushFollow(Follow._declaration_statement_in_statement7107);
    			declaration_statement1020=declaration_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, declaration_statement1020.Tree, declaration_statement1020, retval);

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:916:4: embedded_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(916, 4);
    			PushFollow(Follow._embedded_statement_in_statement7112);
    			embedded_statement1021=embedded_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, embedded_statement1021.Tree, embedded_statement1021, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 281, statement_StartIndex); }
        }
     	DebugLocation(916, 22);
    	} finally { DebugExitRule(GrammarFileName, "statement"); }
    	return retval;

    }
    // $ANTLR end "statement"

    public class embedded_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_embedded_statement() {}
    protected virtual void Leave_embedded_statement() {}

    // $ANTLR start "embedded_statement"
    // cs.g:917:1: embedded_statement : ( block | empty_statement | expression_statement | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement | unsafe_statement | fixed_statement );
    [GrammarRule("embedded_statement")]
    public csParser.embedded_statement_return embedded_statement()
    {

        csParser.embedded_statement_return retval = new csParser.embedded_statement_return();
        retval.Start = (IToken)input.LT(1);
        int embedded_statement_StartIndex = input.Index;
        object root_0 = null;

        csParser.block_return block1022 = default(csParser.block_return);
        csParser.empty_statement_return empty_statement1023 = default(csParser.empty_statement_return);
        csParser.expression_statement_return expression_statement1024 = default(csParser.expression_statement_return);
        csParser.selection_statement_return selection_statement1025 = default(csParser.selection_statement_return);
        csParser.iteration_statement_return iteration_statement1026 = default(csParser.iteration_statement_return);
        csParser.jump_statement_return jump_statement1027 = default(csParser.jump_statement_return);
        csParser.try_statement_return try_statement1028 = default(csParser.try_statement_return);
        csParser.checked_statement_return checked_statement1029 = default(csParser.checked_statement_return);
        csParser.unchecked_statement_return unchecked_statement1030 = default(csParser.unchecked_statement_return);
        csParser.lock_statement_return lock_statement1031 = default(csParser.lock_statement_return);
        csParser.using_statement_return using_statement1032 = default(csParser.using_statement_return);
        csParser.yield_statement_return yield_statement1033 = default(csParser.yield_statement_return);
        csParser.unsafe_statement_return unsafe_statement1034 = default(csParser.unsafe_statement_return);
        csParser.fixed_statement_return fixed_statement1035 = default(csParser.fixed_statement_return);


    	try { DebugEnterRule(GrammarFileName, "embedded_statement");
    	DebugLocation(917, 18);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 282)) { return retval; }
    		// cs.g:917:19: ( block | empty_statement | expression_statement | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement | unsafe_statement | fixed_statement )
    		int alt339=14;
    		try { DebugEnterDecision(339, decisionCanBacktrack[339]);
    		try
    		{
    			alt339 = dfa339.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(339); }
    		switch (alt339)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:918:2: block
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(918, 2);
    			PushFollow(Follow._block_in_embedded_statement7120);
    			block1022=block();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, block1022.Tree, block1022, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:919:4: empty_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(919, 4);
    			PushFollow(Follow._empty_statement_in_embedded_statement7125);
    			empty_statement1023=empty_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, empty_statement1023.Tree, empty_statement1023, retval);

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:920:4: expression_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(920, 4);
    			PushFollow(Follow._expression_statement_in_embedded_statement7130);
    			expression_statement1024=expression_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression_statement1024.Tree, expression_statement1024, retval);

    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// cs.g:921:4: selection_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(921, 4);
    			PushFollow(Follow._selection_statement_in_embedded_statement7135);
    			selection_statement1025=selection_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, selection_statement1025.Tree, selection_statement1025, retval);

    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// cs.g:922:4: iteration_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(922, 4);
    			PushFollow(Follow._iteration_statement_in_embedded_statement7140);
    			iteration_statement1026=iteration_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, iteration_statement1026.Tree, iteration_statement1026, retval);

    			}
    			break;
    		case 6:
    			DebugEnterAlt(6);
    			// cs.g:923:4: jump_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(923, 4);
    			PushFollow(Follow._jump_statement_in_embedded_statement7145);
    			jump_statement1027=jump_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, jump_statement1027.Tree, jump_statement1027, retval);

    			}
    			break;
    		case 7:
    			DebugEnterAlt(7);
    			// cs.g:924:4: try_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(924, 4);
    			PushFollow(Follow._try_statement_in_embedded_statement7150);
    			try_statement1028=try_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, try_statement1028.Tree, try_statement1028, retval);

    			}
    			break;
    		case 8:
    			DebugEnterAlt(8);
    			// cs.g:925:4: checked_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(925, 4);
    			PushFollow(Follow._checked_statement_in_embedded_statement7155);
    			checked_statement1029=checked_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, checked_statement1029.Tree, checked_statement1029, retval);

    			}
    			break;
    		case 9:
    			DebugEnterAlt(9);
    			// cs.g:926:4: unchecked_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(926, 4);
    			PushFollow(Follow._unchecked_statement_in_embedded_statement7160);
    			unchecked_statement1030=unchecked_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, unchecked_statement1030.Tree, unchecked_statement1030, retval);

    			}
    			break;
    		case 10:
    			DebugEnterAlt(10);
    			// cs.g:927:4: lock_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(927, 4);
    			PushFollow(Follow._lock_statement_in_embedded_statement7165);
    			lock_statement1031=lock_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, lock_statement1031.Tree, lock_statement1031, retval);

    			}
    			break;
    		case 11:
    			DebugEnterAlt(11);
    			// cs.g:928:4: using_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(928, 4);
    			PushFollow(Follow._using_statement_in_embedded_statement7170);
    			using_statement1032=using_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, using_statement1032.Tree, using_statement1032, retval);

    			}
    			break;
    		case 12:
    			DebugEnterAlt(12);
    			// cs.g:929:4: yield_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(929, 4);
    			PushFollow(Follow._yield_statement_in_embedded_statement7176);
    			yield_statement1033=yield_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, yield_statement1033.Tree, yield_statement1033, retval);

    			}
    			break;
    		case 13:
    			DebugEnterAlt(13);
    			// cs.g:930:4: unsafe_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(930, 4);
    			PushFollow(Follow._unsafe_statement_in_embedded_statement7182);
    			unsafe_statement1034=unsafe_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, unsafe_statement1034.Tree, unsafe_statement1034, retval);

    			}
    			break;
    		case 14:
    			DebugEnterAlt(14);
    			// cs.g:931:4: fixed_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(931, 4);
    			PushFollow(Follow._fixed_statement_in_embedded_statement7187);
    			fixed_statement1035=fixed_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, fixed_statement1035.Tree, fixed_statement1035, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 282, embedded_statement_StartIndex); }
        }
     	DebugLocation(931, 18);
    	} finally { DebugExitRule(GrammarFileName, "embedded_statement"); }
    	return retval;

    }
    // $ANTLR end "embedded_statement"

    public class fixed_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_fixed_statement() {}
    protected virtual void Leave_fixed_statement() {}

    // $ANTLR start "fixed_statement"
    // cs.g:932:1: fixed_statement : 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement ;
    [GrammarRule("fixed_statement")]
    public csParser.fixed_statement_return fixed_statement()
    {

        csParser.fixed_statement_return retval = new csParser.fixed_statement_return();
        retval.Start = (IToken)input.LT(1);
        int fixed_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1036=null;
        IToken char_literal1037=null;
        IToken char_literal1040=null;
        csParser.pointer_type_return pointer_type1038 = default(csParser.pointer_type_return);
        csParser.fixed_pointer_declarators_return fixed_pointer_declarators1039 = default(csParser.fixed_pointer_declarators_return);
        csParser.embedded_statement_return embedded_statement1041 = default(csParser.embedded_statement_return);

        object string_literal1036_tree=null;
        object char_literal1037_tree=null;
        object char_literal1040_tree=null;

    	try { DebugEnterRule(GrammarFileName, "fixed_statement");
    	DebugLocation(932, 83);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 283)) { return retval; }
    		// cs.g:932:16: ( 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement )
    		DebugEnterAlt(1);
    		// cs.g:933:2: 'fixed' '(' pointer_type fixed_pointer_declarators ')' embedded_statement
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(933, 2);
    		string_literal1036=(IToken)Match(input,207,Follow._207_in_fixed_statement7194); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal1036_tree = (object)adaptor.Create(string_literal1036, retval);
    		adaptor.AddChild(root_0, string_literal1036_tree);
    		}
    		DebugLocation(933, 12);
    		char_literal1037=(IToken)Match(input,110,Follow._110_in_fixed_statement7198); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1037_tree = (object)adaptor.Create(char_literal1037, retval);
    		adaptor.AddChild(root_0, char_literal1037_tree);
    		}
    		DebugLocation(933, 18);
    		PushFollow(Follow._pointer_type_in_fixed_statement7202);
    		pointer_type1038=pointer_type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, pointer_type1038.Tree, pointer_type1038, retval);
    		DebugLocation(933, 31);
    		PushFollow(Follow._fixed_pointer_declarators_in_fixed_statement7204);
    		fixed_pointer_declarators1039=fixed_pointer_declarators();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, fixed_pointer_declarators1039.Tree, fixed_pointer_declarators1039, retval);
    		DebugLocation(933, 59);
    		char_literal1040=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_fixed_statement7208), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1040_tree = (object)adaptor.Create(char_literal1040, retval);
    		adaptor.AddChild(root_0, char_literal1040_tree);
    		}
    		DebugLocation(933, 65);
    		PushFollow(Follow._embedded_statement_in_fixed_statement7212);
    		embedded_statement1041=embedded_statement();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, embedded_statement1041.Tree, embedded_statement1041, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 283, fixed_statement_StartIndex); }
        }
     	DebugLocation(933, 83);
    	} finally { DebugExitRule(GrammarFileName, "fixed_statement"); }
    	return retval;

    }
    // $ANTLR end "fixed_statement"

    public class fixed_pointer_declarators_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_fixed_pointer_declarators() {}
    protected virtual void Leave_fixed_pointer_declarators() {}

    // $ANTLR start "fixed_pointer_declarators"
    // cs.g:934:1: fixed_pointer_declarators : fixed_pointer_declarator ( ',' fixed_pointer_declarator )* ;
    [GrammarRule("fixed_pointer_declarators")]
    public csParser.fixed_pointer_declarators_return fixed_pointer_declarators()
    {

        csParser.fixed_pointer_declarators_return retval = new csParser.fixed_pointer_declarators_return();
        retval.Start = (IToken)input.LT(1);
        int fixed_pointer_declarators_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1043=null;
        csParser.fixed_pointer_declarator_return fixed_pointer_declarator1042 = default(csParser.fixed_pointer_declarator_return);
        csParser.fixed_pointer_declarator_return fixed_pointer_declarator1044 = default(csParser.fixed_pointer_declarator_return);

        object char_literal1043_tree=null;

    	try { DebugEnterRule(GrammarFileName, "fixed_pointer_declarators");
    	DebugLocation(934, 62);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 284)) { return retval; }
    		// cs.g:934:26: ( fixed_pointer_declarator ( ',' fixed_pointer_declarator )* )
    		DebugEnterAlt(1);
    		// cs.g:935:2: fixed_pointer_declarator ( ',' fixed_pointer_declarator )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(935, 2);
    		PushFollow(Follow._fixed_pointer_declarator_in_fixed_pointer_declarators7220);
    		fixed_pointer_declarator1042=fixed_pointer_declarator();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, fixed_pointer_declarator1042.Tree, fixed_pointer_declarator1042, retval);
    		DebugLocation(935, 29);
    		// cs.g:935:29: ( ',' fixed_pointer_declarator )*
    		try { DebugEnterSubRule(340);
    		while (true)
    		{
    			int alt340=2;
    			try { DebugEnterDecision(340, decisionCanBacktrack[340]);
    			int LA340_0 = input.LA(1);

    			if ((LA340_0==98))
    			{
    				alt340=1;
    			}


    			} finally { DebugExitDecision(340); }
    			switch ( alt340 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:935:30: ',' fixed_pointer_declarator
    				{
    				DebugLocation(935, 30);
    				char_literal1043=(IToken)Match(input,98,Follow._98_in_fixed_pointer_declarators7225); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal1043_tree = (object)adaptor.Create(char_literal1043, retval);
    				adaptor.AddChild(root_0, char_literal1043_tree);
    				}
    				DebugLocation(935, 36);
    				PushFollow(Follow._fixed_pointer_declarator_in_fixed_pointer_declarators7229);
    				fixed_pointer_declarator1044=fixed_pointer_declarator();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, fixed_pointer_declarator1044.Tree, fixed_pointer_declarator1044, retval);

    				}
    				break;

    			default:
    				goto loop340;
    			}
    		}

    		loop340:
    			;

    		} finally { DebugExitSubRule(340); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 284, fixed_pointer_declarators_StartIndex); }
        }
     	DebugLocation(935, 62);
    	} finally { DebugExitRule(GrammarFileName, "fixed_pointer_declarators"); }
    	return retval;

    }
    // $ANTLR end "fixed_pointer_declarators"

    public class fixed_pointer_declarator_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_fixed_pointer_declarator() {}
    protected virtual void Leave_fixed_pointer_declarator() {}

    // $ANTLR start "fixed_pointer_declarator"
    // cs.g:936:1: fixed_pointer_declarator : identifier '=' fixed_pointer_initializer ;
    [GrammarRule("fixed_pointer_declarator")]
    public csParser.fixed_pointer_declarator_return fixed_pointer_declarator()
    {

        csParser.fixed_pointer_declarator_return retval = new csParser.fixed_pointer_declarator_return();
        retval.Start = (IToken)input.LT(1);
        int fixed_pointer_declarator_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1046=null;
        csParser.identifier_return identifier1045 = default(csParser.identifier_return);
        csParser.fixed_pointer_initializer_return fixed_pointer_initializer1047 = default(csParser.fixed_pointer_initializer_return);

        object char_literal1046_tree=null;

    	try { DebugEnterRule(GrammarFileName, "fixed_pointer_declarator");
    	DebugLocation(936, 46);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 285)) { return retval; }
    		// cs.g:936:25: ( identifier '=' fixed_pointer_initializer )
    		DebugEnterAlt(1);
    		// cs.g:937:2: identifier '=' fixed_pointer_initializer
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(937, 2);
    		PushFollow(Follow._identifier_in_fixed_pointer_declarator7239);
    		identifier1045=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier1045.Tree, identifier1045, retval);
    		DebugLocation(937, 15);
    		char_literal1046=(IToken)Match(input,96,Follow._96_in_fixed_pointer_declarator7243); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1046_tree = (object)adaptor.Create(char_literal1046, retval);
    		adaptor.AddChild(root_0, char_literal1046_tree);
    		}
    		DebugLocation(937, 21);
    		PushFollow(Follow._fixed_pointer_initializer_in_fixed_pointer_declarator7247);
    		fixed_pointer_initializer1047=fixed_pointer_initializer();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, fixed_pointer_initializer1047.Tree, fixed_pointer_initializer1047, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 285, fixed_pointer_declarator_StartIndex); }
        }
     	DebugLocation(937, 46);
    	} finally { DebugExitRule(GrammarFileName, "fixed_pointer_declarator"); }
    	return retval;

    }
    // $ANTLR end "fixed_pointer_declarator"

    public class fixed_pointer_initializer_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_fixed_pointer_initializer() {}
    protected virtual void Leave_fixed_pointer_initializer() {}

    // $ANTLR start "fixed_pointer_initializer"
    // cs.g:938:1: fixed_pointer_initializer : ( '&' variable_reference | expression );
    [GrammarRule("fixed_pointer_initializer")]
    public csParser.fixed_pointer_initializer_return fixed_pointer_initializer()
    {

        csParser.fixed_pointer_initializer_return retval = new csParser.fixed_pointer_initializer_return();
        retval.Start = (IToken)input.LT(1);
        int fixed_pointer_initializer_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1048=null;
        csParser.variable_reference_return variable_reference1049 = default(csParser.variable_reference_return);
        csParser.expression_return expression1050 = default(csParser.expression_return);

        object char_literal1048_tree=null;

    	try { DebugEnterRule(GrammarFileName, "fixed_pointer_initializer");
    	DebugLocation(938, 13);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 286)) { return retval; }
    		// cs.g:938:26: ( '&' variable_reference | expression )
    		int alt341=2;
    		try { DebugEnterDecision(341, decisionCanBacktrack[341]);
    		try
    		{
    			alt341 = dfa341.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(341); }
    		switch (alt341)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:939:2: '&' variable_reference
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(939, 2);
    			char_literal1048=(IToken)Match(input,129,Follow._129_in_fixed_pointer_initializer7255); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal1048_tree = (object)adaptor.Create(char_literal1048, retval);
    			adaptor.AddChild(root_0, char_literal1048_tree);
    			}
    			DebugLocation(939, 8);
    			PushFollow(Follow._variable_reference_in_fixed_pointer_initializer7259);
    			variable_reference1049=variable_reference();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, variable_reference1049.Tree, variable_reference1049, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:940:4: expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(940, 4);
    			PushFollow(Follow._expression_in_fixed_pointer_initializer7267);
    			expression1050=expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression1050.Tree, expression1050, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 286, fixed_pointer_initializer_StartIndex); }
        }
     	DebugLocation(940, 13);
    	} finally { DebugExitRule(GrammarFileName, "fixed_pointer_initializer"); }
    	return retval;

    }
    // $ANTLR end "fixed_pointer_initializer"

    public class unsafe_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_unsafe_statement() {}
    protected virtual void Leave_unsafe_statement() {}

    // $ANTLR start "unsafe_statement"
    // cs.g:941:1: unsafe_statement : 'unsafe' block ;
    [GrammarRule("unsafe_statement")]
    public csParser.unsafe_statement_return unsafe_statement()
    {

        csParser.unsafe_statement_return retval = new csParser.unsafe_statement_return();
        retval.Start = (IToken)input.LT(1);
        int unsafe_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1051=null;
        csParser.block_return block1052 = default(csParser.block_return);

        object string_literal1051_tree=null;

    	try { DebugEnterRule(GrammarFileName, "unsafe_statement");
    	DebugLocation(941, 17);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 287)) { return retval; }
    		// cs.g:941:17: ( 'unsafe' block )
    		DebugEnterAlt(1);
    		// cs.g:942:2: 'unsafe' block
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(942, 2);
    		string_literal1051=(IToken)Match(input,174,Follow._174_in_unsafe_statement7274); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal1051_tree = (object)adaptor.Create(string_literal1051, retval);
    		adaptor.AddChild(root_0, string_literal1051_tree);
    		}
    		DebugLocation(942, 13);
    		PushFollow(Follow._block_in_unsafe_statement7278);
    		block1052=block();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, block1052.Tree, block1052, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 287, unsafe_statement_StartIndex); }
        }
     	DebugLocation(942, 17);
    	} finally { DebugExitRule(GrammarFileName, "unsafe_statement"); }
    	return retval;

    }
    // $ANTLR end "unsafe_statement"

    public class block_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_block() {}
    protected virtual void Leave_block() {}

    // $ANTLR start "block"
    // cs.g:943:1: block : ( ';' | '{' ( statement_list )? '}' );
    [GrammarRule("block")]
    public csParser.block_return block()
    {

        csParser.block_return retval = new csParser.block_return();
        retval.Start = (IToken)input.LT(1);
        int block_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1053=null;
        IToken char_literal1054=null;
        IToken char_literal1056=null;
        csParser.statement_list_return statement_list1055 = default(csParser.statement_list_return);

        object char_literal1053_tree=null;
        object char_literal1054_tree=null;
        object char_literal1056_tree=null;

    	try { DebugEnterRule(GrammarFileName, "block");
    	DebugLocation(943, 31);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 288)) { return retval; }
    		// cs.g:943:6: ( ';' | '{' ( statement_list )? '}' )
    		int alt343=2;
    		try { DebugEnterDecision(343, decisionCanBacktrack[343]);
    		int LA343_0 = input.LA(1);

    		if ((LA343_0==SEMI))
    		{
    			alt343=1;
    		}
    		else if ((LA343_0==92))
    		{
    			alt343=2;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 343, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(343); }
    		switch (alt343)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:944:2: ';'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(944, 2);
    			char_literal1053=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_block7285), "SEMI"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal1053_tree = (object)adaptor.Create(char_literal1053, retval);
    			adaptor.AddChild(root_0, char_literal1053_tree);
    			}

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:945:4: '{' ( statement_list )? '}'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(945, 4);
    			char_literal1054=(IToken)Match(input,92,Follow._92_in_block7291); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal1054_tree = (object)adaptor.Create(char_literal1054, retval);
    			adaptor.AddChild(root_0, char_literal1054_tree);
    			}
    			DebugLocation(945, 10);
    			// cs.g:945:10: ( statement_list )?
    			int alt342=2;
    			try { DebugEnterSubRule(342);
    			try { DebugEnterDecision(342, decisionCanBacktrack[342]);
    			int LA342_0 = input.LA(1);

    			if ((LA342_0==IF||(LA342_0>=IDENTIFIER && LA342_0<=NULL)||LA342_0==MINUS||LA342_0==USING||LA342_0==SET||LA342_0==SEMI||(LA342_0>=90 && LA342_0<=92)||LA342_0==95||(LA342_0>=101 && LA342_0<=111)||(LA342_0>=113 && LA342_0<=122)||(LA342_0>=124 && LA342_0<=129)||(LA342_0>=132 && LA342_0<=144)||(LA342_0>=174 && LA342_0<=187)||LA342_0==194||LA342_0==199||(LA342_0>=201 && LA342_0<=202)||(LA342_0>=207 && LA342_0<=209)||LA342_0==211||(LA342_0>=213 && LA342_0<=221)||(LA342_0>=224 && LA342_0<=226)))
    			{
    				alt342=1;
    			}
    			} finally { DebugExitDecision(342); }
    			switch (alt342)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: statement_list
    				{
    				DebugLocation(945, 10);
    				PushFollow(Follow._statement_list_in_block7295);
    				statement_list1055=statement_list();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, statement_list1055.Tree, statement_list1055, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(342); }

    			DebugLocation(945, 28);
    			char_literal1056=(IToken)Match(input,93,Follow._93_in_block7300); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal1056_tree = (object)adaptor.Create(char_literal1056, retval);
    			adaptor.AddChild(root_0, char_literal1056_tree);
    			}

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 288, block_StartIndex); }
        }
     	DebugLocation(945, 31);
    	} finally { DebugExitRule(GrammarFileName, "block"); }
    	return retval;

    }
    // $ANTLR end "block"

    public class statement_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_statement_list() {}
    protected virtual void Leave_statement_list() {}

    // $ANTLR start "statement_list"
    // cs.g:946:1: statement_list : ( statement )+ ;
    [GrammarRule("statement_list")]
    public csParser.statement_list_return statement_list()
    {

        csParser.statement_list_return retval = new csParser.statement_list_return();
        retval.Start = (IToken)input.LT(1);
        int statement_list_StartIndex = input.Index;
        object root_0 = null;

        csParser.statement_return statement1057 = default(csParser.statement_return);


    	try { DebugEnterRule(GrammarFileName, "statement_list");
    	DebugLocation(946, 12);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 289)) { return retval; }
    		// cs.g:946:15: ( ( statement )+ )
    		DebugEnterAlt(1);
    		// cs.g:947:2: ( statement )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(947, 2);
    		// cs.g:947:2: ( statement )+
    		int cnt344=0;
    		try { DebugEnterSubRule(344);
    		while (true)
    		{
    			int alt344=2;
    			try { DebugEnterDecision(344, decisionCanBacktrack[344]);
    			int LA344_0 = input.LA(1);

    			if ((LA344_0==143))
    			{
    				int LA344_2 = input.LA(2);

    				if ((LA344_2==110))
    				{
    					alt344=1;
    				}


    			}
    			else if ((LA344_0==IF||(LA344_0>=IDENTIFIER && LA344_0<=NULL)||LA344_0==MINUS||LA344_0==USING||LA344_0==SET||LA344_0==SEMI||(LA344_0>=90 && LA344_0<=92)||LA344_0==95||(LA344_0>=101 && LA344_0<=111)||(LA344_0>=113 && LA344_0<=122)||(LA344_0>=124 && LA344_0<=129)||(LA344_0>=132 && LA344_0<=142)||LA344_0==144||(LA344_0>=174 && LA344_0<=187)||LA344_0==194||LA344_0==199||(LA344_0>=201 && LA344_0<=202)||(LA344_0>=207 && LA344_0<=209)||LA344_0==211||(LA344_0>=213 && LA344_0<=221)||(LA344_0>=224 && LA344_0<=226)))
    			{
    				alt344=1;
    			}


    			} finally { DebugExitDecision(344); }
    			switch (alt344)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: statement
    				{
    				DebugLocation(947, 2);
    				PushFollow(Follow._statement_in_statement_list7308);
    				statement1057=statement();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, statement1057.Tree, statement1057, retval);

    				}
    				break;

    			default:
    				if (cnt344 >= 1)
    					goto loop344;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee344 = new EarlyExitException( 344, input );
    				DebugRecognitionException(eee344);
    				throw eee344;
    			}
    			cnt344++;
    		}
    		loop344:
    			;

    		} finally { DebugExitSubRule(344); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 289, statement_list_StartIndex); }
        }
     	DebugLocation(947, 12);
    	} finally { DebugExitRule(GrammarFileName, "statement_list"); }
    	return retval;

    }
    // $ANTLR end "statement_list"

    public class empty_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_empty_statement() {}
    protected virtual void Leave_empty_statement() {}

    // $ANTLR start "empty_statement"
    // cs.g:948:1: empty_statement : ';' ;
    [GrammarRule("empty_statement")]
    public csParser.empty_statement_return empty_statement()
    {

        csParser.empty_statement_return retval = new csParser.empty_statement_return();
        retval.Start = (IToken)input.LT(1);
        int empty_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1058=null;

        object char_literal1058_tree=null;

    	try { DebugEnterRule(GrammarFileName, "empty_statement");
    	DebugLocation(948, 5);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 290)) { return retval; }
    		// cs.g:948:16: ( ';' )
    		DebugEnterAlt(1);
    		// cs.g:949:2: ';'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(949, 2);
    		char_literal1058=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_empty_statement7317), "SEMI"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1058_tree = (object)adaptor.Create(char_literal1058, retval);
    		adaptor.AddChild(root_0, char_literal1058_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 290, empty_statement_StartIndex); }
        }
     	DebugLocation(949, 5);
    	} finally { DebugExitRule(GrammarFileName, "empty_statement"); }
    	return retval;

    }
    // $ANTLR end "empty_statement"

    public class labeled_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_labeled_statement() {}
    protected virtual void Leave_labeled_statement() {}

    // $ANTLR start "labeled_statement"
    // cs.g:950:1: labeled_statement : identifier ':' statement ;
    [GrammarRule("labeled_statement")]
    public csParser.labeled_statement_return labeled_statement()
    {

        csParser.labeled_statement_return retval = new csParser.labeled_statement_return();
        retval.Start = (IToken)input.LT(1);
        int labeled_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1060=null;
        csParser.identifier_return identifier1059 = default(csParser.identifier_return);
        csParser.statement_return statement1061 = default(csParser.statement_return);

        object char_literal1060_tree=null;

    	try { DebugEnterRule(GrammarFileName, "labeled_statement");
    	DebugLocation(950, 30);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 291)) { return retval; }
    		// cs.g:950:18: ( identifier ':' statement )
    		DebugEnterAlt(1);
    		// cs.g:951:2: identifier ':' statement
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(951, 2);
    		PushFollow(Follow._identifier_in_labeled_statement7325);
    		identifier1059=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier1059.Tree, identifier1059, retval);
    		DebugLocation(951, 15);
    		char_literal1060=(IToken)Match(input,100,Follow._100_in_labeled_statement7329); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1060_tree = (object)adaptor.Create(char_literal1060, retval);
    		adaptor.AddChild(root_0, char_literal1060_tree);
    		}
    		DebugLocation(951, 21);
    		PushFollow(Follow._statement_in_labeled_statement7333);
    		statement1061=statement();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, statement1061.Tree, statement1061, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 291, labeled_statement_StartIndex); }
        }
     	DebugLocation(951, 30);
    	} finally { DebugExitRule(GrammarFileName, "labeled_statement"); }
    	return retval;

    }
    // $ANTLR end "labeled_statement"

    public class declaration_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_declaration_statement() {}
    protected virtual void Leave_declaration_statement() {}

    // $ANTLR start "declaration_statement"
    // cs.g:952:1: declaration_statement : ( local_variable_declaration | local_constant_declaration ) ';' ;
    [GrammarRule("declaration_statement")]
    public csParser.declaration_statement_return declaration_statement()
    {

        csParser.declaration_statement_return retval = new csParser.declaration_statement_return();
        retval.Start = (IToken)input.LT(1);
        int declaration_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1064=null;
        csParser.local_variable_declaration_return local_variable_declaration1062 = default(csParser.local_variable_declaration_return);
        csParser.local_constant_declaration_return local_constant_declaration1063 = default(csParser.local_constant_declaration_return);

        object char_literal1064_tree=null;

    	try { DebugEnterRule(GrammarFileName, "declaration_statement");
    	DebugLocation(952, 35);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 292)) { return retval; }
    		// cs.g:952:22: ( ( local_variable_declaration | local_constant_declaration ) ';' )
    		DebugEnterAlt(1);
    		// cs.g:953:2: ( local_variable_declaration | local_constant_declaration ) ';'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(953, 2);
    		// cs.g:953:2: ( local_variable_declaration | local_constant_declaration )
    		int alt345=2;
    		try { DebugEnterSubRule(345);
    		try { DebugEnterDecision(345, decisionCanBacktrack[345]);
    		int LA345_0 = input.LA(1);

    		if ((LA345_0==IDENTIFIER||LA345_0==SET||LA345_0==95||(LA345_0>=101 && LA345_0<=107)||LA345_0==109||(LA345_0>=113 && LA345_0<=122)||(LA345_0>=132 && LA345_0<=137)||(LA345_0>=175 && LA345_0<=187)||LA345_0==199||(LA345_0>=201 && LA345_0<=202)||(LA345_0>=208 && LA345_0<=209)||(LA345_0>=225 && LA345_0<=226)))
    		{
    			alt345=1;
    		}
    		else if ((LA345_0==194))
    		{
    			alt345=2;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 345, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(345); }
    		switch (alt345)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:953:3: local_variable_declaration
    			{
    			DebugLocation(953, 3);
    			PushFollow(Follow._local_variable_declaration_in_declaration_statement7342);
    			local_variable_declaration1062=local_variable_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, local_variable_declaration1062.Tree, local_variable_declaration1062, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:954:4: local_constant_declaration
    			{
    			DebugLocation(954, 4);
    			PushFollow(Follow._local_constant_declaration_in_declaration_statement7348);
    			local_constant_declaration1063=local_constant_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, local_constant_declaration1063.Tree, local_constant_declaration1063, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(345); }

    		DebugLocation(954, 32);
    		char_literal1064=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_declaration_statement7351), "SEMI"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1064_tree = (object)adaptor.Create(char_literal1064, retval);
    		adaptor.AddChild(root_0, char_literal1064_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 292, declaration_statement_StartIndex); }
        }
     	DebugLocation(954, 35);
    	} finally { DebugExitRule(GrammarFileName, "declaration_statement"); }
    	return retval;

    }
    // $ANTLR end "declaration_statement"

    public class local_variable_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_local_variable_declaration() {}
    protected virtual void Leave_local_variable_declaration() {}

    // $ANTLR start "local_variable_declaration"
    // cs.g:955:1: local_variable_declaration : local_variable_type local_variable_declarators ;
    [GrammarRule("local_variable_declaration")]
    public csParser.local_variable_declaration_return local_variable_declaration()
    {

        csParser.local_variable_declaration_return retval = new csParser.local_variable_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int local_variable_declaration_StartIndex = input.Index;
        object root_0 = null;

        csParser.local_variable_type_return local_variable_type1065 = default(csParser.local_variable_type_return);
        csParser.local_variable_declarators_return local_variable_declarators1066 = default(csParser.local_variable_declarators_return);


    	try { DebugEnterRule(GrammarFileName, "local_variable_declaration");
    	DebugLocation(955, 50);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 293)) { return retval; }
    		// cs.g:955:27: ( local_variable_type local_variable_declarators )
    		DebugEnterAlt(1);
    		// cs.g:956:2: local_variable_type local_variable_declarators
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(956, 2);
    		PushFollow(Follow._local_variable_type_in_local_variable_declaration7359);
    		local_variable_type1065=local_variable_type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, local_variable_type1065.Tree, local_variable_type1065, retval);
    		DebugLocation(956, 24);
    		PushFollow(Follow._local_variable_declarators_in_local_variable_declaration7363);
    		local_variable_declarators1066=local_variable_declarators();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, local_variable_declarators1066.Tree, local_variable_declarators1066, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 293, local_variable_declaration_StartIndex); }
        }
     	DebugLocation(956, 50);
    	} finally { DebugExitRule(GrammarFileName, "local_variable_declaration"); }
    	return retval;

    }
    // $ANTLR end "local_variable_declaration"

    public class local_variable_type_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_local_variable_type() {}
    protected virtual void Leave_local_variable_type() {}

    // $ANTLR start "local_variable_type"
    // cs.g:957:1: local_variable_type : ( type | 'var' | 'dynamic' );
    [GrammarRule("local_variable_type")]
    public csParser.local_variable_type_return local_variable_type()
    {

        csParser.local_variable_type_return retval = new csParser.local_variable_type_return();
        retval.Start = (IToken)input.LT(1);
        int local_variable_type_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1068=null;
        IToken string_literal1069=null;
        csParser.type_return type1067 = default(csParser.type_return);

        object string_literal1068_tree=null;
        object string_literal1069_tree=null;

    	try { DebugEnterRule(GrammarFileName, "local_variable_type");
    	DebugLocation(957, 12);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 294)) { return retval; }
    		// cs.g:957:20: ( type | 'var' | 'dynamic' )
    		int alt346=3;
    		try { DebugEnterDecision(346, decisionCanBacktrack[346]);
    		switch (input.LA(1))
    		{
    		case IDENTIFIER:
    		case SET:
    		case 95:
    		case 101:
    		case 102:
    		case 103:
    		case 104:
    		case 105:
    		case 106:
    		case 107:
    		case 109:
    		case 113:
    		case 114:
    		case 115:
    		case 116:
    		case 117:
    		case 118:
    		case 119:
    		case 120:
    		case 121:
    		case 122:
    		case 132:
    		case 133:
    		case 134:
    		case 135:
    		case 136:
    		case 137:
    		case 175:
    		case 176:
    		case 177:
    		case 178:
    		case 179:
    		case 180:
    		case 181:
    		case 182:
    		case 183:
    		case 184:
    		case 185:
    		case 186:
    		case 187:
    		case 199:
    		case 201:
    		case 202:
    		case 225:
    		case 226:
    			{
    			alt346=1;
    			}
    			break;
    		case 208:
    			{
    			int LA346_2 = input.LA(2);

    			if ((EvaluatePredicate(synpred614_cs_fragment)))
    			{
    				alt346=1;
    			}
    			else if ((EvaluatePredicate(synpred615_cs_fragment)))
    			{
    				alt346=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 346, 2, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    			}
    			break;
    		case 209:
    			{
    			alt346=3;
    			}
    			break;
    		default:
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 346, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(346); }
    		switch (alt346)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:958:2: type
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(958, 2);
    			PushFollow(Follow._type_in_local_variable_type7371);
    			type1067=type();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type1067.Tree, type1067, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:959:4: 'var'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(959, 4);
    			string_literal1068=(IToken)Match(input,208,Follow._208_in_local_variable_type7376); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal1068_tree = (object)adaptor.Create(string_literal1068, retval);
    			adaptor.AddChild(root_0, string_literal1068_tree);
    			}

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:960:4: 'dynamic'
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(960, 4);
    			string_literal1069=(IToken)Match(input,209,Follow._209_in_local_variable_type7382); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal1069_tree = (object)adaptor.Create(string_literal1069, retval);
    			adaptor.AddChild(root_0, string_literal1069_tree);
    			}

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 294, local_variable_type_StartIndex); }
        }
     	DebugLocation(960, 12);
    	} finally { DebugExitRule(GrammarFileName, "local_variable_type"); }
    	return retval;

    }
    // $ANTLR end "local_variable_type"

    public class local_variable_declarators_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_local_variable_declarators() {}
    protected virtual void Leave_local_variable_declarators() {}

    // $ANTLR start "local_variable_declarators"
    // cs.g:961:1: local_variable_declarators : local_variable_declarator ( ',' local_variable_declarator )* ;
    [GrammarRule("local_variable_declarators")]
    public csParser.local_variable_declarators_return local_variable_declarators()
    {

        csParser.local_variable_declarators_return retval = new csParser.local_variable_declarators_return();
        retval.Start = (IToken)input.LT(1);
        int local_variable_declarators_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1071=null;
        csParser.local_variable_declarator_return local_variable_declarator1070 = default(csParser.local_variable_declarator_return);
        csParser.local_variable_declarator_return local_variable_declarator1072 = default(csParser.local_variable_declarator_return);

        object char_literal1071_tree=null;

    	try { DebugEnterRule(GrammarFileName, "local_variable_declarators");
    	DebugLocation(961, 60);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 295)) { return retval; }
    		// cs.g:961:27: ( local_variable_declarator ( ',' local_variable_declarator )* )
    		DebugEnterAlt(1);
    		// cs.g:962:2: local_variable_declarator ( ',' local_variable_declarator )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(962, 2);
    		PushFollow(Follow._local_variable_declarator_in_local_variable_declarators7389);
    		local_variable_declarator1070=local_variable_declarator();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, local_variable_declarator1070.Tree, local_variable_declarator1070, retval);
    		DebugLocation(962, 28);
    		// cs.g:962:28: ( ',' local_variable_declarator )*
    		try { DebugEnterSubRule(347);
    		while (true)
    		{
    			int alt347=2;
    			try { DebugEnterDecision(347, decisionCanBacktrack[347]);
    			int LA347_0 = input.LA(1);

    			if ((LA347_0==98))
    			{
    				alt347=1;
    			}


    			} finally { DebugExitDecision(347); }
    			switch ( alt347 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:962:29: ',' local_variable_declarator
    				{
    				DebugLocation(962, 29);
    				char_literal1071=(IToken)Match(input,98,Follow._98_in_local_variable_declarators7392); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal1071_tree = (object)adaptor.Create(char_literal1071, retval);
    				adaptor.AddChild(root_0, char_literal1071_tree);
    				}
    				DebugLocation(962, 33);
    				PushFollow(Follow._local_variable_declarator_in_local_variable_declarators7394);
    				local_variable_declarator1072=local_variable_declarator();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, local_variable_declarator1072.Tree, local_variable_declarator1072, retval);

    				}
    				break;

    			default:
    				goto loop347;
    			}
    		}

    		loop347:
    			;

    		} finally { DebugExitSubRule(347); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 295, local_variable_declarators_StartIndex); }
        }
     	DebugLocation(962, 60);
    	} finally { DebugExitRule(GrammarFileName, "local_variable_declarators"); }
    	return retval;

    }
    // $ANTLR end "local_variable_declarators"

    public class local_variable_declarator_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_local_variable_declarator() {}
    protected virtual void Leave_local_variable_declarator() {}

    // $ANTLR start "local_variable_declarator"
    // cs.g:963:1: local_variable_declarator : identifier ( '=' local_variable_initializer )? ;
    [GrammarRule("local_variable_declarator")]
    public csParser.local_variable_declarator_return local_variable_declarator()
    {

        csParser.local_variable_declarator_return retval = new csParser.local_variable_declarator_return();
        retval.Start = (IToken)input.LT(1);
        int local_variable_declarator_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1074=null;
        csParser.identifier_return identifier1073 = default(csParser.identifier_return);
        csParser.local_variable_initializer_return local_variable_initializer1075 = default(csParser.local_variable_initializer_return);

        object char_literal1074_tree=null;

    	try { DebugEnterRule(GrammarFileName, "local_variable_declarator");
    	DebugLocation(963, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 296)) { return retval; }
    		// cs.g:963:26: ( identifier ( '=' local_variable_initializer )? )
    		DebugEnterAlt(1);
    		// cs.g:964:2: identifier ( '=' local_variable_initializer )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(964, 2);
    		PushFollow(Follow._identifier_in_local_variable_declarator7404);
    		identifier1073=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier1073.Tree, identifier1073, retval);
    		DebugLocation(964, 13);
    		// cs.g:964:13: ( '=' local_variable_initializer )?
    		int alt348=2;
    		try { DebugEnterSubRule(348);
    		try { DebugEnterDecision(348, decisionCanBacktrack[348]);
    		int LA348_0 = input.LA(1);

    		if ((LA348_0==96))
    		{
    			alt348=1;
    		}
    		} finally { DebugExitDecision(348); }
    		switch (alt348)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:964:14: '=' local_variable_initializer
    			{
    			DebugLocation(964, 14);
    			char_literal1074=(IToken)Match(input,96,Follow._96_in_local_variable_declarator7407); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal1074_tree = (object)adaptor.Create(char_literal1074, retval);
    			adaptor.AddChild(root_0, char_literal1074_tree);
    			}
    			DebugLocation(964, 20);
    			PushFollow(Follow._local_variable_initializer_in_local_variable_declarator7411);
    			local_variable_initializer1075=local_variable_initializer();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, local_variable_initializer1075.Tree, local_variable_initializer1075, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(348); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 296, local_variable_declarator_StartIndex); }
        }
     	DebugLocation(965, 1);
    	} finally { DebugExitRule(GrammarFileName, "local_variable_declarator"); }
    	return retval;

    }
    // $ANTLR end "local_variable_declarator"

    public class local_variable_initializer_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_local_variable_initializer() {}
    protected virtual void Leave_local_variable_initializer() {}

    // $ANTLR start "local_variable_initializer"
    // cs.g:966:1: local_variable_initializer : ( expression | array_initializer | stackalloc_initializer );
    [GrammarRule("local_variable_initializer")]
    public csParser.local_variable_initializer_return local_variable_initializer()
    {

        csParser.local_variable_initializer_return retval = new csParser.local_variable_initializer_return();
        retval.Start = (IToken)input.LT(1);
        int local_variable_initializer_StartIndex = input.Index;
        object root_0 = null;

        csParser.expression_return expression1076 = default(csParser.expression_return);
        csParser.array_initializer_return array_initializer1077 = default(csParser.array_initializer_return);
        csParser.stackalloc_initializer_return stackalloc_initializer1078 = default(csParser.stackalloc_initializer_return);


    	try { DebugEnterRule(GrammarFileName, "local_variable_initializer");
    	DebugLocation(966, 25);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 297)) { return retval; }
    		// cs.g:966:27: ( expression | array_initializer | stackalloc_initializer )
    		int alt349=3;
    		try { DebugEnterDecision(349, decisionCanBacktrack[349]);
    		switch (input.LA(1))
    		{
    		case IDENTIFIER:
    		case Real_literal:
    		case NUMBER:
    		case Hex_number:
    		case Character_literal:
    		case STRINGLITERAL:
    		case Verbatim_string_literal:
    		case TRUE:
    		case FALSE:
    		case NULL:
    		case MINUS:
    		case SET:
    		case 90:
    		case 91:
    		case 95:
    		case 101:
    		case 102:
    		case 103:
    		case 104:
    		case 105:
    		case 106:
    		case 107:
    		case 109:
    		case 110:
    		case 111:
    		case 114:
    		case 115:
    		case 116:
    		case 117:
    		case 118:
    		case 119:
    		case 120:
    		case 121:
    		case 122:
    		case 124:
    		case 125:
    		case 126:
    		case 127:
    		case 128:
    		case 129:
    		case 132:
    		case 133:
    		case 134:
    		case 135:
    		case 136:
    		case 137:
    		case 138:
    		case 139:
    		case 140:
    		case 141:
    		case 142:
    		case 143:
    		case 144:
    		case 175:
    		case 176:
    		case 177:
    		case 178:
    		case 179:
    		case 180:
    		case 181:
    		case 182:
    		case 183:
    		case 184:
    		case 185:
    		case 186:
    		case 187:
    		case 199:
    		case 201:
    		case 202:
    		case 208:
    		case 225:
    		case 226:
    			{
    			alt349=1;
    			}
    			break;
    		case 92:
    			{
    			alt349=2;
    			}
    			break;
    		case 210:
    			{
    			alt349=3;
    			}
    			break;
    		default:
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 349, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(349); }
    		switch (alt349)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:967:2: expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(967, 2);
    			PushFollow(Follow._expression_in_local_variable_initializer7424);
    			expression1076=expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression1076.Tree, expression1076, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:968:4: array_initializer
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(968, 4);
    			PushFollow(Follow._array_initializer_in_local_variable_initializer7429);
    			array_initializer1077=array_initializer();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, array_initializer1077.Tree, array_initializer1077, retval);

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:969:4: stackalloc_initializer
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(969, 4);
    			PushFollow(Follow._stackalloc_initializer_in_local_variable_initializer7435);
    			stackalloc_initializer1078=stackalloc_initializer();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, stackalloc_initializer1078.Tree, stackalloc_initializer1078, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 297, local_variable_initializer_StartIndex); }
        }
     	DebugLocation(969, 25);
    	} finally { DebugExitRule(GrammarFileName, "local_variable_initializer"); }
    	return retval;

    }
    // $ANTLR end "local_variable_initializer"

    public class stackalloc_initializer_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_stackalloc_initializer() {}
    protected virtual void Leave_stackalloc_initializer() {}

    // $ANTLR start "stackalloc_initializer"
    // cs.g:970:1: stackalloc_initializer : 'stackalloc' unmanaged_type '[' expression ']' ;
    [GrammarRule("stackalloc_initializer")]
    public csParser.stackalloc_initializer_return stackalloc_initializer()
    {

        csParser.stackalloc_initializer_return retval = new csParser.stackalloc_initializer_return();
        retval.Start = (IToken)input.LT(1);
        int stackalloc_initializer_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1079=null;
        IToken char_literal1081=null;
        IToken char_literal1083=null;
        csParser.unmanaged_type_return unmanaged_type1080 = default(csParser.unmanaged_type_return);
        csParser.expression_return expression1082 = default(csParser.expression_return);

        object string_literal1079_tree=null;
        object char_literal1081_tree=null;
        object char_literal1083_tree=null;

    	try { DebugEnterRule(GrammarFileName, "stackalloc_initializer");
    	DebugLocation(970, 56);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 298)) { return retval; }
    		// cs.g:970:23: ( 'stackalloc' unmanaged_type '[' expression ']' )
    		DebugEnterAlt(1);
    		// cs.g:971:2: 'stackalloc' unmanaged_type '[' expression ']'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(971, 2);
    		string_literal1079=(IToken)Match(input,210,Follow._210_in_stackalloc_initializer7442); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal1079_tree = (object)adaptor.Create(string_literal1079, retval);
    		adaptor.AddChild(root_0, string_literal1079_tree);
    		}
    		DebugLocation(971, 17);
    		PushFollow(Follow._unmanaged_type_in_stackalloc_initializer7446);
    		unmanaged_type1080=unmanaged_type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, unmanaged_type1080.Tree, unmanaged_type1080, retval);
    		DebugLocation(971, 34);
    		char_literal1081=(IToken)Match(input,97,Follow._97_in_stackalloc_initializer7450); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1081_tree = (object)adaptor.Create(char_literal1081, retval);
    		adaptor.AddChild(root_0, char_literal1081_tree);
    		}
    		DebugLocation(971, 40);
    		PushFollow(Follow._expression_in_stackalloc_initializer7454);
    		expression1082=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression1082.Tree, expression1082, retval);
    		DebugLocation(971, 53);
    		char_literal1083=(IToken)Match(input,99,Follow._99_in_stackalloc_initializer7458); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1083_tree = (object)adaptor.Create(char_literal1083, retval);
    		adaptor.AddChild(root_0, char_literal1083_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 298, stackalloc_initializer_StartIndex); }
        }
     	DebugLocation(971, 56);
    	} finally { DebugExitRule(GrammarFileName, "stackalloc_initializer"); }
    	return retval;

    }
    // $ANTLR end "stackalloc_initializer"

    public class local_constant_declaration_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_local_constant_declaration() {}
    protected virtual void Leave_local_constant_declaration() {}

    // $ANTLR start "local_constant_declaration"
    // cs.g:972:1: local_constant_declaration : 'const' type constant_declarators ;
    [GrammarRule("local_constant_declaration")]
    public csParser.local_constant_declaration_return local_constant_declaration()
    {

        csParser.local_constant_declaration_return retval = new csParser.local_constant_declaration_return();
        retval.Start = (IToken)input.LT(1);
        int local_constant_declaration_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1084=null;
        csParser.type_return type1085 = default(csParser.type_return);
        csParser.constant_declarators_return constant_declarators1086 = default(csParser.constant_declarators_return);

        object string_literal1084_tree=null;

    	try { DebugEnterRule(GrammarFileName, "local_constant_declaration");
    	DebugLocation(972, 39);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 299)) { return retval; }
    		// cs.g:972:27: ( 'const' type constant_declarators )
    		DebugEnterAlt(1);
    		// cs.g:973:2: 'const' type constant_declarators
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(973, 2);
    		string_literal1084=(IToken)Match(input,194,Follow._194_in_local_constant_declaration7466); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal1084_tree = (object)adaptor.Create(string_literal1084, retval);
    		adaptor.AddChild(root_0, string_literal1084_tree);
    		}
    		DebugLocation(973, 12);
    		PushFollow(Follow._type_in_local_constant_declaration7470);
    		type1085=type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, type1085.Tree, type1085, retval);
    		DebugLocation(973, 19);
    		PushFollow(Follow._constant_declarators_in_local_constant_declaration7474);
    		constant_declarators1086=constant_declarators();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, constant_declarators1086.Tree, constant_declarators1086, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 299, local_constant_declaration_StartIndex); }
        }
     	DebugLocation(973, 39);
    	} finally { DebugExitRule(GrammarFileName, "local_constant_declaration"); }
    	return retval;

    }
    // $ANTLR end "local_constant_declaration"

    public class constant_declarators_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_constant_declarators() {}
    protected virtual void Leave_constant_declarators() {}

    // $ANTLR start "constant_declarators"
    // cs.g:974:1: constant_declarators : constant_declarator ( ',' constant_declarator )* ;
    [GrammarRule("constant_declarators")]
    public csParser.constant_declarators_return constant_declarators()
    {

        csParser.constant_declarators_return retval = new csParser.constant_declarators_return();
        retval.Start = (IToken)input.LT(1);
        int constant_declarators_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1088=null;
        csParser.constant_declarator_return constant_declarator1087 = default(csParser.constant_declarator_return);
        csParser.constant_declarator_return constant_declarator1089 = default(csParser.constant_declarator_return);

        object char_literal1088_tree=null;

    	try { DebugEnterRule(GrammarFileName, "constant_declarators");
    	DebugLocation(974, 48);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 300)) { return retval; }
    		// cs.g:974:21: ( constant_declarator ( ',' constant_declarator )* )
    		DebugEnterAlt(1);
    		// cs.g:975:2: constant_declarator ( ',' constant_declarator )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(975, 2);
    		PushFollow(Follow._constant_declarator_in_constant_declarators7482);
    		constant_declarator1087=constant_declarator();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, constant_declarator1087.Tree, constant_declarator1087, retval);
    		DebugLocation(975, 22);
    		// cs.g:975:22: ( ',' constant_declarator )*
    		try { DebugEnterSubRule(350);
    		while (true)
    		{
    			int alt350=2;
    			try { DebugEnterDecision(350, decisionCanBacktrack[350]);
    			int LA350_0 = input.LA(1);

    			if ((LA350_0==98))
    			{
    				alt350=1;
    			}


    			} finally { DebugExitDecision(350); }
    			switch ( alt350 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:975:23: ',' constant_declarator
    				{
    				DebugLocation(975, 23);
    				char_literal1088=(IToken)Match(input,98,Follow._98_in_constant_declarators7485); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal1088_tree = (object)adaptor.Create(char_literal1088, retval);
    				adaptor.AddChild(root_0, char_literal1088_tree);
    				}
    				DebugLocation(975, 27);
    				PushFollow(Follow._constant_declarator_in_constant_declarators7487);
    				constant_declarator1089=constant_declarator();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, constant_declarator1089.Tree, constant_declarator1089, retval);

    				}
    				break;

    			default:
    				goto loop350;
    			}
    		}

    		loop350:
    			;

    		} finally { DebugExitSubRule(350); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 300, constant_declarators_StartIndex); }
        }
     	DebugLocation(975, 48);
    	} finally { DebugExitRule(GrammarFileName, "constant_declarators"); }
    	return retval;

    }
    // $ANTLR end "constant_declarators"

    public class constant_declarator_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_constant_declarator() {}
    protected virtual void Leave_constant_declarator() {}

    // $ANTLR start "constant_declarator"
    // cs.g:976:1: constant_declarator : identifier ( '=' constant_expression )? ;
    [GrammarRule("constant_declarator")]
    public csParser.constant_declarator_return constant_declarator()
    {

        csParser.constant_declarator_return retval = new csParser.constant_declarator_return();
        retval.Start = (IToken)input.LT(1);
        int constant_declarator_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1091=null;
        csParser.identifier_return identifier1090 = default(csParser.identifier_return);
        csParser.constant_expression_return constant_expression1092 = default(csParser.constant_expression_return);

        object char_literal1091_tree=null;

    	try { DebugEnterRule(GrammarFileName, "constant_declarator");
    	DebugLocation(976, 43);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 301)) { return retval; }
    		// cs.g:976:20: ( identifier ( '=' constant_expression )? )
    		DebugEnterAlt(1);
    		// cs.g:977:2: identifier ( '=' constant_expression )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(977, 2);
    		PushFollow(Follow._identifier_in_constant_declarator7497);
    		identifier1090=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier1090.Tree, identifier1090, retval);
    		DebugLocation(977, 15);
    		// cs.g:977:15: ( '=' constant_expression )?
    		int alt351=2;
    		try { DebugEnterSubRule(351);
    		try { DebugEnterDecision(351, decisionCanBacktrack[351]);
    		int LA351_0 = input.LA(1);

    		if ((LA351_0==96))
    		{
    			alt351=1;
    		}
    		} finally { DebugExitDecision(351); }
    		switch (alt351)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:977:16: '=' constant_expression
    			{
    			DebugLocation(977, 16);
    			char_literal1091=(IToken)Match(input,96,Follow._96_in_constant_declarator7502); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal1091_tree = (object)adaptor.Create(char_literal1091, retval);
    			adaptor.AddChild(root_0, char_literal1091_tree);
    			}
    			DebugLocation(977, 22);
    			PushFollow(Follow._constant_expression_in_constant_declarator7506);
    			constant_expression1092=constant_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, constant_expression1092.Tree, constant_expression1092, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(351); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 301, constant_declarator_StartIndex); }
        }
     	DebugLocation(977, 43);
    	} finally { DebugExitRule(GrammarFileName, "constant_declarator"); }
    	return retval;

    }
    // $ANTLR end "constant_declarator"

    public class expression_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_expression_statement() {}
    protected virtual void Leave_expression_statement() {}

    // $ANTLR start "expression_statement"
    // cs.g:979:1: expression_statement : expression ';' ;
    [GrammarRule("expression_statement")]
    public csParser.expression_statement_return expression_statement()
    {

        csParser.expression_statement_return retval = new csParser.expression_statement_return();
        retval.Start = (IToken)input.LT(1);
        int expression_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1094=null;
        csParser.expression_return expression1093 = default(csParser.expression_return);

        object char_literal1094_tree=null;

    	try { DebugEnterRule(GrammarFileName, "expression_statement");
    	DebugLocation(979, 18);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 302)) { return retval; }
    		// cs.g:979:21: ( expression ';' )
    		DebugEnterAlt(1);
    		// cs.g:980:2: expression ';'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(980, 2);
    		PushFollow(Follow._expression_in_expression_statement7517);
    		expression1093=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression1093.Tree, expression1093, retval);
    		DebugLocation(980, 15);
    		char_literal1094=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_expression_statement7521), "SEMI"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1094_tree = (object)adaptor.Create(char_literal1094, retval);
    		adaptor.AddChild(root_0, char_literal1094_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 302, expression_statement_StartIndex); }
        }
     	DebugLocation(980, 18);
    	} finally { DebugExitRule(GrammarFileName, "expression_statement"); }
    	return retval;

    }
    // $ANTLR end "expression_statement"

    public class statement_expression_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_statement_expression() {}
    protected virtual void Leave_statement_expression() {}

    // $ANTLR start "statement_expression"
    // cs.g:981:1: statement_expression : ( invocation_expression | object_creation_expression | assignment | unary_expression );
    [GrammarRule("statement_expression")]
    public csParser.statement_expression_return statement_expression()
    {

        csParser.statement_expression_return retval = new csParser.statement_expression_return();
        retval.Start = (IToken)input.LT(1);
        int statement_expression_StartIndex = input.Index;
        object root_0 = null;

        csParser.invocation_expression_return invocation_expression1095 = default(csParser.invocation_expression_return);
        csParser.object_creation_expression_return object_creation_expression1096 = default(csParser.object_creation_expression_return);
        csParser.assignment_return assignment1097 = default(csParser.assignment_return);
        csParser.unary_expression_return unary_expression1098 = default(csParser.unary_expression_return);


    	try { DebugEnterRule(GrammarFileName, "statement_expression");
    	DebugLocation(981, 19);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 303)) { return retval; }
    		// cs.g:981:21: ( invocation_expression | object_creation_expression | assignment | unary_expression )
    		int alt352=4;
    		try { DebugEnterDecision(352, decisionCanBacktrack[352]);
    		try
    		{
    			alt352 = dfa352.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(352); }
    		switch (alt352)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:982:2: invocation_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(982, 2);
    			PushFollow(Follow._invocation_expression_in_statement_expression7529);
    			invocation_expression1095=invocation_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, invocation_expression1095.Tree, invocation_expression1095, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:983:4: object_creation_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(983, 4);
    			PushFollow(Follow._object_creation_expression_in_statement_expression7534);
    			object_creation_expression1096=object_creation_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, object_creation_expression1096.Tree, object_creation_expression1096, retval);

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:984:4: assignment
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(984, 4);
    			PushFollow(Follow._assignment_in_statement_expression7539);
    			assignment1097=assignment();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, assignment1097.Tree, assignment1097, retval);

    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// cs.g:985:4: unary_expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(985, 4);
    			PushFollow(Follow._unary_expression_in_statement_expression7544);
    			unary_expression1098=unary_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, unary_expression1098.Tree, unary_expression1098, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 303, statement_expression_StartIndex); }
        }
     	DebugLocation(985, 19);
    	} finally { DebugExitRule(GrammarFileName, "statement_expression"); }
    	return retval;

    }
    // $ANTLR end "statement_expression"

    public class selection_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_selection_statement() {}
    protected virtual void Leave_selection_statement() {}

    // $ANTLR start "selection_statement"
    // cs.g:986:1: selection_statement : ( if_statement | switch_statement );
    [GrammarRule("selection_statement")]
    public csParser.selection_statement_return selection_statement()
    {

        csParser.selection_statement_return retval = new csParser.selection_statement_return();
        retval.Start = (IToken)input.LT(1);
        int selection_statement_StartIndex = input.Index;
        object root_0 = null;

        csParser.if_statement_return if_statement1099 = default(csParser.if_statement_return);
        csParser.switch_statement_return switch_statement1100 = default(csParser.switch_statement_return);


    	try { DebugEnterRule(GrammarFileName, "selection_statement");
    	DebugLocation(986, 20);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 304)) { return retval; }
    		// cs.g:986:20: ( if_statement | switch_statement )
    		int alt353=2;
    		try { DebugEnterDecision(353, decisionCanBacktrack[353]);
    		int LA353_0 = input.LA(1);

    		if ((LA353_0==IF))
    		{
    			alt353=1;
    		}
    		else if ((LA353_0==211))
    		{
    			alt353=2;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 353, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(353); }
    		switch (alt353)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:987:2: if_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(987, 2);
    			PushFollow(Follow._if_statement_in_selection_statement7551);
    			if_statement1099=if_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, if_statement1099.Tree, if_statement1099, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:988:4: switch_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(988, 4);
    			PushFollow(Follow._switch_statement_in_selection_statement7556);
    			switch_statement1100=switch_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, switch_statement1100.Tree, switch_statement1100, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 304, selection_statement_StartIndex); }
        }
     	DebugLocation(988, 20);
    	} finally { DebugExitRule(GrammarFileName, "selection_statement"); }
    	return retval;

    }
    // $ANTLR end "selection_statement"

    public class if_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_if_statement() {}
    protected virtual void Leave_if_statement() {}

    // $ANTLR start "if_statement"
    // cs.g:989:1: if_statement : 'if' '(' boolean_expression ')' embedded_statement ( else_statement )? ;
    [GrammarRule("if_statement")]
    public csParser.if_statement_return if_statement()
    {

        csParser.if_statement_return retval = new csParser.if_statement_return();
        retval.Start = (IToken)input.LT(1);
        int if_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1101=null;
        IToken char_literal1102=null;
        IToken char_literal1104=null;
        csParser.boolean_expression_return boolean_expression1103 = default(csParser.boolean_expression_return);
        csParser.embedded_statement_return embedded_statement1105 = default(csParser.embedded_statement_return);
        csParser.else_statement_return else_statement1106 = default(csParser.else_statement_return);

        object string_literal1101_tree=null;
        object char_literal1102_tree=null;
        object char_literal1104_tree=null;

    	try { DebugEnterRule(GrammarFileName, "if_statement");
    	DebugLocation(989, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 305)) { return retval; }
    		// cs.g:989:13: ( 'if' '(' boolean_expression ')' embedded_statement ( else_statement )? )
    		DebugEnterAlt(1);
    		// cs.g:990:2: 'if' '(' boolean_expression ')' embedded_statement ( else_statement )?
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(990, 2);
    		string_literal1101=(IToken)new XToken((IToken)Match(input,IF,Follow._IF_in_if_statement7564), "IF"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal1101_tree = (object)adaptor.Create(string_literal1101, retval);
    		adaptor.AddChild(root_0, string_literal1101_tree);
    		}
    		DebugLocation(990, 9);
    		char_literal1102=(IToken)Match(input,110,Follow._110_in_if_statement7568); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1102_tree = (object)adaptor.Create(char_literal1102, retval);
    		adaptor.AddChild(root_0, char_literal1102_tree);
    		}
    		DebugLocation(990, 15);
    		PushFollow(Follow._boolean_expression_in_if_statement7572);
    		boolean_expression1103=boolean_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, boolean_expression1103.Tree, boolean_expression1103, retval);
    		DebugLocation(990, 36);
    		char_literal1104=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_if_statement7576), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1104_tree = (object)adaptor.Create(char_literal1104, retval);
    		adaptor.AddChild(root_0, char_literal1104_tree);
    		}
    		DebugLocation(990, 42);
    		PushFollow(Follow._embedded_statement_in_if_statement7580);
    		embedded_statement1105=embedded_statement();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, embedded_statement1105.Tree, embedded_statement1105, retval);
    		DebugLocation(990, 63);
    		// cs.g:990:63: ( else_statement )?
    		int alt354=2;
    		try { DebugEnterSubRule(354);
    		try { DebugEnterDecision(354, decisionCanBacktrack[354]);
    		int LA354_0 = input.LA(1);

    		if ((LA354_0==ELSE))
    		{
    			int LA354_1 = input.LA(2);

    			if ((EvaluatePredicate(synpred626_cs_fragment)))
    			{
    				alt354=1;
    			}
    		}
    		} finally { DebugExitDecision(354); }
    		switch (alt354)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: else_statement
    			{
    			DebugLocation(990, 63);
    			PushFollow(Follow._else_statement_in_if_statement7584);
    			else_statement1106=else_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, else_statement1106.Tree, else_statement1106, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(354); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 305, if_statement_StartIndex); }
        }
     	DebugLocation(991, 1);
    	} finally { DebugExitRule(GrammarFileName, "if_statement"); }
    	return retval;

    }
    // $ANTLR end "if_statement"

    public class else_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_else_statement() {}
    protected virtual void Leave_else_statement() {}

    // $ANTLR start "else_statement"
    // cs.g:992:1: else_statement : 'else' embedded_statement ;
    [GrammarRule("else_statement")]
    public csParser.else_statement_return else_statement()
    {

        csParser.else_statement_return retval = new csParser.else_statement_return();
        retval.Start = (IToken)input.LT(1);
        int else_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1107=null;
        csParser.embedded_statement_return embedded_statement1108 = default(csParser.embedded_statement_return);

        object string_literal1107_tree=null;

    	try { DebugEnterRule(GrammarFileName, "else_statement");
    	DebugLocation(992, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 306)) { return retval; }
    		// cs.g:992:15: ( 'else' embedded_statement )
    		DebugEnterAlt(1);
    		// cs.g:993:2: 'else' embedded_statement
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(993, 2);
    		string_literal1107=(IToken)new XToken((IToken)Match(input,ELSE,Follow._ELSE_in_else_statement7594), "ELSE"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal1107_tree = (object)adaptor.Create(string_literal1107, retval);
    		adaptor.AddChild(root_0, string_literal1107_tree);
    		}
    		DebugLocation(993, 11);
    		PushFollow(Follow._embedded_statement_in_else_statement7598);
    		embedded_statement1108=embedded_statement();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, embedded_statement1108.Tree, embedded_statement1108, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 306, else_statement_StartIndex); }
        }
     	DebugLocation(994, 1);
    	} finally { DebugExitRule(GrammarFileName, "else_statement"); }
    	return retval;

    }
    // $ANTLR end "else_statement"

    public class switch_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_switch_statement() {}
    protected virtual void Leave_switch_statement() {}

    // $ANTLR start "switch_statement"
    // cs.g:995:1: switch_statement : 'switch' '(' expression ')' switch_block ;
    [GrammarRule("switch_statement")]
    public csParser.switch_statement_return switch_statement()
    {

        csParser.switch_statement_return retval = new csParser.switch_statement_return();
        retval.Start = (IToken)input.LT(1);
        int switch_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1109=null;
        IToken char_literal1110=null;
        IToken char_literal1112=null;
        csParser.expression_return expression1111 = default(csParser.expression_return);
        csParser.switch_block_return switch_block1113 = default(csParser.switch_block_return);

        object string_literal1109_tree=null;
        object char_literal1110_tree=null;
        object char_literal1112_tree=null;

    	try { DebugEnterRule(GrammarFileName, "switch_statement");
    	DebugLocation(995, 50);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 307)) { return retval; }
    		// cs.g:995:17: ( 'switch' '(' expression ')' switch_block )
    		DebugEnterAlt(1);
    		// cs.g:996:2: 'switch' '(' expression ')' switch_block
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(996, 2);
    		string_literal1109=(IToken)Match(input,211,Follow._211_in_switch_statement7608); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal1109_tree = (object)adaptor.Create(string_literal1109, retval);
    		adaptor.AddChild(root_0, string_literal1109_tree);
    		}
    		DebugLocation(996, 13);
    		char_literal1110=(IToken)Match(input,110,Follow._110_in_switch_statement7612); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1110_tree = (object)adaptor.Create(char_literal1110, retval);
    		adaptor.AddChild(root_0, char_literal1110_tree);
    		}
    		DebugLocation(996, 19);
    		PushFollow(Follow._expression_in_switch_statement7616);
    		expression1111=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression1111.Tree, expression1111, retval);
    		DebugLocation(996, 32);
    		char_literal1112=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_switch_statement7620), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1112_tree = (object)adaptor.Create(char_literal1112, retval);
    		adaptor.AddChild(root_0, char_literal1112_tree);
    		}
    		DebugLocation(996, 38);
    		PushFollow(Follow._switch_block_in_switch_statement7624);
    		switch_block1113=switch_block();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, switch_block1113.Tree, switch_block1113, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 307, switch_statement_StartIndex); }
        }
     	DebugLocation(996, 50);
    	} finally { DebugExitRule(GrammarFileName, "switch_statement"); }
    	return retval;

    }
    // $ANTLR end "switch_statement"

    public class switch_block_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_switch_block() {}
    protected virtual void Leave_switch_block() {}

    // $ANTLR start "switch_block"
    // cs.g:997:1: switch_block : '{' ( switch_sections )? '}' ;
    [GrammarRule("switch_block")]
    public csParser.switch_block_return switch_block()
    {

        csParser.switch_block_return retval = new csParser.switch_block_return();
        retval.Start = (IToken)input.LT(1);
        int switch_block_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1114=null;
        IToken char_literal1116=null;
        csParser.switch_sections_return switch_sections1115 = default(csParser.switch_sections_return);

        object char_literal1114_tree=null;
        object char_literal1116_tree=null;

    	try { DebugEnterRule(GrammarFileName, "switch_block");
    	DebugLocation(997, 30);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 308)) { return retval; }
    		// cs.g:997:13: ( '{' ( switch_sections )? '}' )
    		DebugEnterAlt(1);
    		// cs.g:998:2: '{' ( switch_sections )? '}'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(998, 2);
    		char_literal1114=(IToken)Match(input,92,Follow._92_in_switch_block7632); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1114_tree = (object)adaptor.Create(char_literal1114, retval);
    		adaptor.AddChild(root_0, char_literal1114_tree);
    		}
    		DebugLocation(998, 8);
    		// cs.g:998:8: ( switch_sections )?
    		int alt355=2;
    		try { DebugEnterSubRule(355);
    		try { DebugEnterDecision(355, decisionCanBacktrack[355]);
    		int LA355_0 = input.LA(1);

    		if ((LA355_0==143||LA355_0==212))
    		{
    			alt355=1;
    		}
    		} finally { DebugExitDecision(355); }
    		switch (alt355)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: switch_sections
    			{
    			DebugLocation(998, 8);
    			PushFollow(Follow._switch_sections_in_switch_block7636);
    			switch_sections1115=switch_sections();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, switch_sections1115.Tree, switch_sections1115, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(355); }

    		DebugLocation(998, 27);
    		char_literal1116=(IToken)Match(input,93,Follow._93_in_switch_block7641); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1116_tree = (object)adaptor.Create(char_literal1116, retval);
    		adaptor.AddChild(root_0, char_literal1116_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 308, switch_block_StartIndex); }
        }
     	DebugLocation(998, 30);
    	} finally { DebugExitRule(GrammarFileName, "switch_block"); }
    	return retval;

    }
    // $ANTLR end "switch_block"

    public class switch_sections_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_switch_sections() {}
    protected virtual void Leave_switch_sections() {}

    // $ANTLR start "switch_sections"
    // cs.g:999:1: switch_sections : ( switch_section )+ ;
    [GrammarRule("switch_sections")]
    public csParser.switch_sections_return switch_sections()
    {

        csParser.switch_sections_return retval = new csParser.switch_sections_return();
        retval.Start = (IToken)input.LT(1);
        int switch_sections_StartIndex = input.Index;
        object root_0 = null;

        csParser.switch_section_return switch_section1117 = default(csParser.switch_section_return);


    	try { DebugEnterRule(GrammarFileName, "switch_sections");
    	DebugLocation(999, 17);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 309)) { return retval; }
    		// cs.g:999:16: ( ( switch_section )+ )
    		DebugEnterAlt(1);
    		// cs.g:1000:2: ( switch_section )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1000, 2);
    		// cs.g:1000:2: ( switch_section )+
    		int cnt356=0;
    		try { DebugEnterSubRule(356);
    		while (true)
    		{
    			int alt356=2;
    			try { DebugEnterDecision(356, decisionCanBacktrack[356]);
    			int LA356_0 = input.LA(1);

    			if ((LA356_0==143||LA356_0==212))
    			{
    				alt356=1;
    			}


    			} finally { DebugExitDecision(356); }
    			switch (alt356)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: switch_section
    				{
    				DebugLocation(1000, 2);
    				PushFollow(Follow._switch_section_in_switch_sections7649);
    				switch_section1117=switch_section();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, switch_section1117.Tree, switch_section1117, retval);

    				}
    				break;

    			default:
    				if (cnt356 >= 1)
    					goto loop356;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee356 = new EarlyExitException( 356, input );
    				DebugRecognitionException(eee356);
    				throw eee356;
    			}
    			cnt356++;
    		}
    		loop356:
    			;

    		} finally { DebugExitSubRule(356); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 309, switch_sections_StartIndex); }
        }
     	DebugLocation(1000, 17);
    	} finally { DebugExitRule(GrammarFileName, "switch_sections"); }
    	return retval;

    }
    // $ANTLR end "switch_sections"

    public class switch_section_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_switch_section() {}
    protected virtual void Leave_switch_section() {}

    // $ANTLR start "switch_section"
    // cs.g:1001:1: switch_section : switch_labels statement_list ;
    [GrammarRule("switch_section")]
    public csParser.switch_section_return switch_section()
    {

        csParser.switch_section_return retval = new csParser.switch_section_return();
        retval.Start = (IToken)input.LT(1);
        int switch_section_StartIndex = input.Index;
        object root_0 = null;

        csParser.switch_labels_return switch_labels1118 = default(csParser.switch_labels_return);
        csParser.statement_list_return statement_list1119 = default(csParser.statement_list_return);


    	try { DebugEnterRule(GrammarFileName, "switch_section");
    	DebugLocation(1001, 32);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 310)) { return retval; }
    		// cs.g:1001:15: ( switch_labels statement_list )
    		DebugEnterAlt(1);
    		// cs.g:1002:2: switch_labels statement_list
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1002, 2);
    		PushFollow(Follow._switch_labels_in_switch_section7658);
    		switch_labels1118=switch_labels();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, switch_labels1118.Tree, switch_labels1118, retval);
    		DebugLocation(1002, 18);
    		PushFollow(Follow._statement_list_in_switch_section7662);
    		statement_list1119=statement_list();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, statement_list1119.Tree, statement_list1119, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 310, switch_section_StartIndex); }
        }
     	DebugLocation(1002, 32);
    	} finally { DebugExitRule(GrammarFileName, "switch_section"); }
    	return retval;

    }
    // $ANTLR end "switch_section"

    public class switch_labels_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_switch_labels() {}
    protected virtual void Leave_switch_labels() {}

    // $ANTLR start "switch_labels"
    // cs.g:1003:1: switch_labels : ( switch_label )+ ;
    [GrammarRule("switch_labels")]
    public csParser.switch_labels_return switch_labels()
    {

        csParser.switch_labels_return retval = new csParser.switch_labels_return();
        retval.Start = (IToken)input.LT(1);
        int switch_labels_StartIndex = input.Index;
        object root_0 = null;

        csParser.switch_label_return switch_label1120 = default(csParser.switch_label_return);


    	try { DebugEnterRule(GrammarFileName, "switch_labels");
    	DebugLocation(1003, 15);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 311)) { return retval; }
    		// cs.g:1003:14: ( ( switch_label )+ )
    		DebugEnterAlt(1);
    		// cs.g:1004:2: ( switch_label )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1004, 2);
    		// cs.g:1004:2: ( switch_label )+
    		int cnt357=0;
    		try { DebugEnterSubRule(357);
    		while (true)
    		{
    			int alt357=2;
    			try { DebugEnterDecision(357, decisionCanBacktrack[357]);
    			int LA357_0 = input.LA(1);

    			if ((LA357_0==143))
    			{
    				int LA357_2 = input.LA(2);

    				if ((LA357_2==100))
    				{
    					alt357=1;
    				}


    			}
    			else if ((LA357_0==212))
    			{
    				alt357=1;
    			}


    			} finally { DebugExitDecision(357); }
    			switch (alt357)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: switch_label
    				{
    				DebugLocation(1004, 2);
    				PushFollow(Follow._switch_label_in_switch_labels7670);
    				switch_label1120=switch_label();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, switch_label1120.Tree, switch_label1120, retval);

    				}
    				break;

    			default:
    				if (cnt357 >= 1)
    					goto loop357;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee357 = new EarlyExitException( 357, input );
    				DebugRecognitionException(eee357);
    				throw eee357;
    			}
    			cnt357++;
    		}
    		loop357:
    			;

    		} finally { DebugExitSubRule(357); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 311, switch_labels_StartIndex); }
        }
     	DebugLocation(1004, 15);
    	} finally { DebugExitRule(GrammarFileName, "switch_labels"); }
    	return retval;

    }
    // $ANTLR end "switch_labels"

    public class switch_label_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_switch_label() {}
    protected virtual void Leave_switch_label() {}

    // $ANTLR start "switch_label"
    // cs.g:1005:1: switch_label : ( ( 'case' constant_expression ':' ) | ( 'default' ':' ) );
    [GrammarRule("switch_label")]
    public csParser.switch_label_return switch_label()
    {

        csParser.switch_label_return retval = new csParser.switch_label_return();
        retval.Start = (IToken)input.LT(1);
        int switch_label_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1121=null;
        IToken char_literal1123=null;
        IToken string_literal1124=null;
        IToken char_literal1125=null;
        csParser.constant_expression_return constant_expression1122 = default(csParser.constant_expression_return);

        object string_literal1121_tree=null;
        object char_literal1123_tree=null;
        object string_literal1124_tree=null;
        object char_literal1125_tree=null;

    	try { DebugEnterRule(GrammarFileName, "switch_label");
    	DebugLocation(1005, 21);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 312)) { return retval; }
    		// cs.g:1005:13: ( ( 'case' constant_expression ':' ) | ( 'default' ':' ) )
    		int alt358=2;
    		try { DebugEnterDecision(358, decisionCanBacktrack[358]);
    		int LA358_0 = input.LA(1);

    		if ((LA358_0==212))
    		{
    			alt358=1;
    		}
    		else if ((LA358_0==143))
    		{
    			alt358=2;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 358, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(358); }
    		switch (alt358)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:1006:2: ( 'case' constant_expression ':' )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1006, 2);
    			// cs.g:1006:2: ( 'case' constant_expression ':' )
    			DebugEnterAlt(1);
    			// cs.g:1006:3: 'case' constant_expression ':'
    			{
    			DebugLocation(1006, 3);
    			string_literal1121=(IToken)Match(input,212,Follow._212_in_switch_label7680); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal1121_tree = (object)adaptor.Create(string_literal1121, retval);
    			adaptor.AddChild(root_0, string_literal1121_tree);
    			}
    			DebugLocation(1006, 12);
    			PushFollow(Follow._constant_expression_in_switch_label7684);
    			constant_expression1122=constant_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, constant_expression1122.Tree, constant_expression1122, retval);
    			DebugLocation(1006, 34);
    			char_literal1123=(IToken)Match(input,100,Follow._100_in_switch_label7688); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal1123_tree = (object)adaptor.Create(char_literal1123, retval);
    			adaptor.AddChild(root_0, char_literal1123_tree);
    			}

    			}


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:1007:4: ( 'default' ':' )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1007, 4);
    			// cs.g:1007:4: ( 'default' ':' )
    			DebugEnterAlt(1);
    			// cs.g:1007:5: 'default' ':'
    			{
    			DebugLocation(1007, 5);
    			string_literal1124=(IToken)Match(input,143,Follow._143_in_switch_label7695); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal1124_tree = (object)adaptor.Create(string_literal1124, retval);
    			adaptor.AddChild(root_0, string_literal1124_tree);
    			}
    			DebugLocation(1007, 17);
    			char_literal1125=(IToken)Match(input,100,Follow._100_in_switch_label7699); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal1125_tree = (object)adaptor.Create(char_literal1125, retval);
    			adaptor.AddChild(root_0, char_literal1125_tree);
    			}

    			}


    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 312, switch_label_StartIndex); }
        }
     	DebugLocation(1007, 21);
    	} finally { DebugExitRule(GrammarFileName, "switch_label"); }
    	return retval;

    }
    // $ANTLR end "switch_label"

    public class iteration_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_iteration_statement() {}
    protected virtual void Leave_iteration_statement() {}

    // $ANTLR start "iteration_statement"
    // cs.g:1008:1: iteration_statement : ( while_statement | do_statement | for_statement | foreach_statement );
    [GrammarRule("iteration_statement")]
    public csParser.iteration_statement_return iteration_statement()
    {

        csParser.iteration_statement_return retval = new csParser.iteration_statement_return();
        retval.Start = (IToken)input.LT(1);
        int iteration_statement_StartIndex = input.Index;
        object root_0 = null;

        csParser.while_statement_return while_statement1126 = default(csParser.while_statement_return);
        csParser.do_statement_return do_statement1127 = default(csParser.do_statement_return);
        csParser.for_statement_return for_statement1128 = default(csParser.for_statement_return);
        csParser.foreach_statement_return foreach_statement1129 = default(csParser.foreach_statement_return);


    	try { DebugEnterRule(GrammarFileName, "iteration_statement");
    	DebugLocation(1008, 21);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 313)) { return retval; }
    		// cs.g:1008:20: ( while_statement | do_statement | for_statement | foreach_statement )
    		int alt359=4;
    		try { DebugEnterDecision(359, decisionCanBacktrack[359]);
    		switch (input.LA(1))
    		{
    		case 213:
    			{
    			alt359=1;
    			}
    			break;
    		case 214:
    			{
    			alt359=2;
    			}
    			break;
    		case 215:
    			{
    			alt359=3;
    			}
    			break;
    		case 216:
    			{
    			alt359=4;
    			}
    			break;
    		default:
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 359, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(359); }
    		switch (alt359)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:1009:2: while_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1009, 2);
    			PushFollow(Follow._while_statement_in_iteration_statement7708);
    			while_statement1126=while_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, while_statement1126.Tree, while_statement1126, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:1010:4: do_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1010, 4);
    			PushFollow(Follow._do_statement_in_iteration_statement7713);
    			do_statement1127=do_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, do_statement1127.Tree, do_statement1127, retval);

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:1011:4: for_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1011, 4);
    			PushFollow(Follow._for_statement_in_iteration_statement7718);
    			for_statement1128=for_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, for_statement1128.Tree, for_statement1128, retval);

    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// cs.g:1012:4: foreach_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1012, 4);
    			PushFollow(Follow._foreach_statement_in_iteration_statement7723);
    			foreach_statement1129=foreach_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, foreach_statement1129.Tree, foreach_statement1129, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 313, iteration_statement_StartIndex); }
        }
     	DebugLocation(1012, 21);
    	} finally { DebugExitRule(GrammarFileName, "iteration_statement"); }
    	return retval;

    }
    // $ANTLR end "iteration_statement"

    public class while_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_while_statement() {}
    protected virtual void Leave_while_statement() {}

    // $ANTLR start "while_statement"
    // cs.g:1013:1: while_statement : 'while' '(' boolean_expression ')' embedded_statement ;
    [GrammarRule("while_statement")]
    public csParser.while_statement_return while_statement()
    {

        csParser.while_statement_return retval = new csParser.while_statement_return();
        retval.Start = (IToken)input.LT(1);
        int while_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1130=null;
        IToken char_literal1131=null;
        IToken char_literal1133=null;
        csParser.boolean_expression_return boolean_expression1132 = default(csParser.boolean_expression_return);
        csParser.embedded_statement_return embedded_statement1134 = default(csParser.embedded_statement_return);

        object string_literal1130_tree=null;
        object char_literal1131_tree=null;
        object char_literal1133_tree=null;

    	try { DebugEnterRule(GrammarFileName, "while_statement");
    	DebugLocation(1013, 63);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 314)) { return retval; }
    		// cs.g:1013:16: ( 'while' '(' boolean_expression ')' embedded_statement )
    		DebugEnterAlt(1);
    		// cs.g:1014:2: 'while' '(' boolean_expression ')' embedded_statement
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1014, 2);
    		string_literal1130=(IToken)Match(input,213,Follow._213_in_while_statement7731); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal1130_tree = (object)adaptor.Create(string_literal1130, retval);
    		adaptor.AddChild(root_0, string_literal1130_tree);
    		}
    		DebugLocation(1014, 12);
    		char_literal1131=(IToken)Match(input,110,Follow._110_in_while_statement7735); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1131_tree = (object)adaptor.Create(char_literal1131, retval);
    		adaptor.AddChild(root_0, char_literal1131_tree);
    		}
    		DebugLocation(1014, 18);
    		PushFollow(Follow._boolean_expression_in_while_statement7739);
    		boolean_expression1132=boolean_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, boolean_expression1132.Tree, boolean_expression1132, retval);
    		DebugLocation(1014, 39);
    		char_literal1133=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_while_statement7743), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1133_tree = (object)adaptor.Create(char_literal1133, retval);
    		adaptor.AddChild(root_0, char_literal1133_tree);
    		}
    		DebugLocation(1014, 45);
    		PushFollow(Follow._embedded_statement_in_while_statement7747);
    		embedded_statement1134=embedded_statement();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, embedded_statement1134.Tree, embedded_statement1134, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 314, while_statement_StartIndex); }
        }
     	DebugLocation(1014, 63);
    	} finally { DebugExitRule(GrammarFileName, "while_statement"); }
    	return retval;

    }
    // $ANTLR end "while_statement"

    public class do_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_do_statement() {}
    protected virtual void Leave_do_statement() {}

    // $ANTLR start "do_statement"
    // cs.g:1015:1: do_statement : 'do' embedded_statement 'while' '(' boolean_expression ')' ';' ;
    [GrammarRule("do_statement")]
    public csParser.do_statement_return do_statement()
    {

        csParser.do_statement_return retval = new csParser.do_statement_return();
        retval.Start = (IToken)input.LT(1);
        int do_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1135=null;
        IToken string_literal1137=null;
        IToken char_literal1138=null;
        IToken char_literal1140=null;
        IToken char_literal1141=null;
        csParser.embedded_statement_return embedded_statement1136 = default(csParser.embedded_statement_return);
        csParser.boolean_expression_return boolean_expression1139 = default(csParser.boolean_expression_return);

        object string_literal1135_tree=null;
        object string_literal1137_tree=null;
        object char_literal1138_tree=null;
        object char_literal1140_tree=null;
        object char_literal1141_tree=null;

    	try { DebugEnterRule(GrammarFileName, "do_statement");
    	DebugLocation(1015, 76);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 315)) { return retval; }
    		// cs.g:1015:13: ( 'do' embedded_statement 'while' '(' boolean_expression ')' ';' )
    		DebugEnterAlt(1);
    		// cs.g:1016:2: 'do' embedded_statement 'while' '(' boolean_expression ')' ';'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1016, 2);
    		string_literal1135=(IToken)Match(input,214,Follow._214_in_do_statement7755); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal1135_tree = (object)adaptor.Create(string_literal1135, retval);
    		adaptor.AddChild(root_0, string_literal1135_tree);
    		}
    		DebugLocation(1016, 9);
    		PushFollow(Follow._embedded_statement_in_do_statement7759);
    		embedded_statement1136=embedded_statement();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, embedded_statement1136.Tree, embedded_statement1136, retval);
    		DebugLocation(1016, 30);
    		string_literal1137=(IToken)Match(input,213,Follow._213_in_do_statement7763); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal1137_tree = (object)adaptor.Create(string_literal1137, retval);
    		adaptor.AddChild(root_0, string_literal1137_tree);
    		}
    		DebugLocation(1016, 40);
    		char_literal1138=(IToken)Match(input,110,Follow._110_in_do_statement7767); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1138_tree = (object)adaptor.Create(char_literal1138, retval);
    		adaptor.AddChild(root_0, char_literal1138_tree);
    		}
    		DebugLocation(1016, 46);
    		PushFollow(Follow._boolean_expression_in_do_statement7771);
    		boolean_expression1139=boolean_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, boolean_expression1139.Tree, boolean_expression1139, retval);
    		DebugLocation(1016, 67);
    		char_literal1140=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_do_statement7775), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1140_tree = (object)adaptor.Create(char_literal1140, retval);
    		adaptor.AddChild(root_0, char_literal1140_tree);
    		}
    		DebugLocation(1016, 73);
    		char_literal1141=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_do_statement7779), "SEMI"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1141_tree = (object)adaptor.Create(char_literal1141, retval);
    		adaptor.AddChild(root_0, char_literal1141_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 315, do_statement_StartIndex); }
        }
     	DebugLocation(1016, 76);
    	} finally { DebugExitRule(GrammarFileName, "do_statement"); }
    	return retval;

    }
    // $ANTLR end "do_statement"

    public class for_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_for_statement() {}
    protected virtual void Leave_for_statement() {}

    // $ANTLR start "for_statement"
    // cs.g:1017:1: for_statement : 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement ;
    [GrammarRule("for_statement")]
    public csParser.for_statement_return for_statement()
    {

        csParser.for_statement_return retval = new csParser.for_statement_return();
        retval.Start = (IToken)input.LT(1);
        int for_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1142=null;
        IToken char_literal1143=null;
        IToken char_literal1145=null;
        IToken char_literal1147=null;
        IToken char_literal1149=null;
        csParser.for_initializer_return for_initializer1144 = default(csParser.for_initializer_return);
        csParser.for_condition_return for_condition1146 = default(csParser.for_condition_return);
        csParser.for_iterator_return for_iterator1148 = default(csParser.for_iterator_return);
        csParser.embedded_statement_return embedded_statement1150 = default(csParser.embedded_statement_return);

        object string_literal1142_tree=null;
        object char_literal1143_tree=null;
        object char_literal1145_tree=null;
        object char_literal1147_tree=null;
        object char_literal1149_tree=null;

    	try { DebugEnterRule(GrammarFileName, "for_statement");
    	DebugLocation(1017, 104);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 316)) { return retval; }
    		// cs.g:1017:14: ( 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement )
    		DebugEnterAlt(1);
    		// cs.g:1018:2: 'for' '(' ( for_initializer )? ';' ( for_condition )? ';' ( for_iterator )? ')' embedded_statement
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1018, 2);
    		string_literal1142=(IToken)Match(input,215,Follow._215_in_for_statement7787); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal1142_tree = (object)adaptor.Create(string_literal1142, retval);
    		adaptor.AddChild(root_0, string_literal1142_tree);
    		}
    		DebugLocation(1018, 10);
    		char_literal1143=(IToken)Match(input,110,Follow._110_in_for_statement7791); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1143_tree = (object)adaptor.Create(char_literal1143, retval);
    		adaptor.AddChild(root_0, char_literal1143_tree);
    		}
    		DebugLocation(1018, 16);
    		// cs.g:1018:16: ( for_initializer )?
    		int alt360=2;
    		try { DebugEnterSubRule(360);
    		try { DebugEnterDecision(360, decisionCanBacktrack[360]);
    		int LA360_0 = input.LA(1);

    		if (((LA360_0>=IDENTIFIER && LA360_0<=NULL)||LA360_0==MINUS||LA360_0==SET||(LA360_0>=90 && LA360_0<=91)||LA360_0==95||(LA360_0>=101 && LA360_0<=107)||(LA360_0>=109 && LA360_0<=111)||(LA360_0>=113 && LA360_0<=122)||(LA360_0>=124 && LA360_0<=129)||(LA360_0>=132 && LA360_0<=144)||(LA360_0>=175 && LA360_0<=187)||LA360_0==199||(LA360_0>=201 && LA360_0<=202)||(LA360_0>=208 && LA360_0<=209)||(LA360_0>=225 && LA360_0<=226)))
    		{
    			alt360=1;
    		}
    		} finally { DebugExitDecision(360); }
    		switch (alt360)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: for_initializer
    			{
    			DebugLocation(1018, 16);
    			PushFollow(Follow._for_initializer_in_for_statement7795);
    			for_initializer1144=for_initializer();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, for_initializer1144.Tree, for_initializer1144, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(360); }

    		DebugLocation(1018, 35);
    		char_literal1145=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_for_statement7800), "SEMI"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1145_tree = (object)adaptor.Create(char_literal1145, retval);
    		adaptor.AddChild(root_0, char_literal1145_tree);
    		}
    		DebugLocation(1018, 41);
    		// cs.g:1018:41: ( for_condition )?
    		int alt361=2;
    		try { DebugEnterSubRule(361);
    		try { DebugEnterDecision(361, decisionCanBacktrack[361]);
    		int LA361_0 = input.LA(1);

    		if (((LA361_0>=IDENTIFIER && LA361_0<=NULL)||LA361_0==MINUS||LA361_0==SET||(LA361_0>=90 && LA361_0<=91)||LA361_0==95||(LA361_0>=101 && LA361_0<=107)||(LA361_0>=109 && LA361_0<=111)||(LA361_0>=114 && LA361_0<=122)||(LA361_0>=124 && LA361_0<=129)||(LA361_0>=132 && LA361_0<=144)||(LA361_0>=175 && LA361_0<=187)||LA361_0==199||(LA361_0>=201 && LA361_0<=202)||LA361_0==208||(LA361_0>=225 && LA361_0<=226)))
    		{
    			alt361=1;
    		}
    		} finally { DebugExitDecision(361); }
    		switch (alt361)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: for_condition
    			{
    			DebugLocation(1018, 41);
    			PushFollow(Follow._for_condition_in_for_statement7804);
    			for_condition1146=for_condition();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, for_condition1146.Tree, for_condition1146, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(361); }

    		DebugLocation(1018, 58);
    		char_literal1147=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_for_statement7809), "SEMI"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1147_tree = (object)adaptor.Create(char_literal1147, retval);
    		adaptor.AddChild(root_0, char_literal1147_tree);
    		}
    		DebugLocation(1018, 64);
    		// cs.g:1018:64: ( for_iterator )?
    		int alt362=2;
    		try { DebugEnterSubRule(362);
    		try { DebugEnterDecision(362, decisionCanBacktrack[362]);
    		int LA362_0 = input.LA(1);

    		if (((LA362_0>=IDENTIFIER && LA362_0<=NULL)||LA362_0==MINUS||LA362_0==SET||(LA362_0>=90 && LA362_0<=91)||LA362_0==95||(LA362_0>=101 && LA362_0<=107)||(LA362_0>=109 && LA362_0<=111)||(LA362_0>=114 && LA362_0<=122)||(LA362_0>=124 && LA362_0<=129)||(LA362_0>=132 && LA362_0<=144)||(LA362_0>=175 && LA362_0<=187)||LA362_0==199||(LA362_0>=201 && LA362_0<=202)||LA362_0==208||(LA362_0>=225 && LA362_0<=226)))
    		{
    			alt362=1;
    		}
    		} finally { DebugExitDecision(362); }
    		switch (alt362)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: for_iterator
    			{
    			DebugLocation(1018, 64);
    			PushFollow(Follow._for_iterator_in_for_statement7813);
    			for_iterator1148=for_iterator();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, for_iterator1148.Tree, for_iterator1148, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(362); }

    		DebugLocation(1018, 80);
    		char_literal1149=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_for_statement7818), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1149_tree = (object)adaptor.Create(char_literal1149, retval);
    		adaptor.AddChild(root_0, char_literal1149_tree);
    		}
    		DebugLocation(1018, 86);
    		PushFollow(Follow._embedded_statement_in_for_statement7822);
    		embedded_statement1150=embedded_statement();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, embedded_statement1150.Tree, embedded_statement1150, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 316, for_statement_StartIndex); }
        }
     	DebugLocation(1018, 104);
    	} finally { DebugExitRule(GrammarFileName, "for_statement"); }
    	return retval;

    }
    // $ANTLR end "for_statement"

    public class for_initializer_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_for_initializer() {}
    protected virtual void Leave_for_initializer() {}

    // $ANTLR start "for_initializer"
    // cs.g:1019:1: for_initializer : ( local_variable_declaration | statement_expression_list );
    [GrammarRule("for_initializer")]
    public csParser.for_initializer_return for_initializer()
    {

        csParser.for_initializer_return retval = new csParser.for_initializer_return();
        retval.Start = (IToken)input.LT(1);
        int for_initializer_StartIndex = input.Index;
        object root_0 = null;

        csParser.local_variable_declaration_return local_variable_declaration1151 = default(csParser.local_variable_declaration_return);
        csParser.statement_expression_list_return statement_expression_list1152 = default(csParser.statement_expression_list_return);


    	try { DebugEnterRule(GrammarFileName, "for_initializer");
    	DebugLocation(1019, 29);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 317)) { return retval; }
    		// cs.g:1019:16: ( local_variable_declaration | statement_expression_list )
    		int alt363=2;
    		try { DebugEnterDecision(363, decisionCanBacktrack[363]);
    		try
    		{
    			alt363 = dfa363.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(363); }
    		switch (alt363)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:1020:2: local_variable_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1020, 2);
    			PushFollow(Follow._local_variable_declaration_in_for_initializer7830);
    			local_variable_declaration1151=local_variable_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, local_variable_declaration1151.Tree, local_variable_declaration1151, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:1021:4: statement_expression_list
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1021, 4);
    			PushFollow(Follow._statement_expression_list_in_for_initializer7835);
    			statement_expression_list1152=statement_expression_list();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, statement_expression_list1152.Tree, statement_expression_list1152, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 317, for_initializer_StartIndex); }
        }
     	DebugLocation(1021, 29);
    	} finally { DebugExitRule(GrammarFileName, "for_initializer"); }
    	return retval;

    }
    // $ANTLR end "for_initializer"

    public class for_condition_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_for_condition() {}
    protected virtual void Leave_for_condition() {}

    // $ANTLR start "for_condition"
    // cs.g:1022:1: for_condition : boolean_expression ;
    [GrammarRule("for_condition")]
    public csParser.for_condition_return for_condition()
    {

        csParser.for_condition_return retval = new csParser.for_condition_return();
        retval.Start = (IToken)input.LT(1);
        int for_condition_StartIndex = input.Index;
        object root_0 = null;

        csParser.boolean_expression_return boolean_expression1153 = default(csParser.boolean_expression_return);


    	try { DebugEnterRule(GrammarFileName, "for_condition");
    	DebugLocation(1022, 20);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 318)) { return retval; }
    		// cs.g:1022:14: ( boolean_expression )
    		DebugEnterAlt(1);
    		// cs.g:1023:2: boolean_expression
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1023, 2);
    		PushFollow(Follow._boolean_expression_in_for_condition7843);
    		boolean_expression1153=boolean_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, boolean_expression1153.Tree, boolean_expression1153, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 318, for_condition_StartIndex); }
        }
     	DebugLocation(1023, 20);
    	} finally { DebugExitRule(GrammarFileName, "for_condition"); }
    	return retval;

    }
    // $ANTLR end "for_condition"

    public class for_iterator_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_for_iterator() {}
    protected virtual void Leave_for_iterator() {}

    // $ANTLR start "for_iterator"
    // cs.g:1024:1: for_iterator : statement_expression_list ;
    [GrammarRule("for_iterator")]
    public csParser.for_iterator_return for_iterator()
    {

        csParser.for_iterator_return retval = new csParser.for_iterator_return();
        retval.Start = (IToken)input.LT(1);
        int for_iterator_StartIndex = input.Index;
        object root_0 = null;

        csParser.statement_expression_list_return statement_expression_list1154 = default(csParser.statement_expression_list_return);


    	try { DebugEnterRule(GrammarFileName, "for_iterator");
    	DebugLocation(1024, 27);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 319)) { return retval; }
    		// cs.g:1024:13: ( statement_expression_list )
    		DebugEnterAlt(1);
    		// cs.g:1025:2: statement_expression_list
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1025, 2);
    		PushFollow(Follow._statement_expression_list_in_for_iterator7851);
    		statement_expression_list1154=statement_expression_list();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, statement_expression_list1154.Tree, statement_expression_list1154, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 319, for_iterator_StartIndex); }
        }
     	DebugLocation(1025, 27);
    	} finally { DebugExitRule(GrammarFileName, "for_iterator"); }
    	return retval;

    }
    // $ANTLR end "for_iterator"

    public class statement_expression_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_statement_expression_list() {}
    protected virtual void Leave_statement_expression_list() {}

    // $ANTLR start "statement_expression_list"
    // cs.g:1026:1: statement_expression_list : statement_expression ( ',' statement_expression )* ;
    [GrammarRule("statement_expression_list")]
    public csParser.statement_expression_list_return statement_expression_list()
    {

        csParser.statement_expression_list_return retval = new csParser.statement_expression_list_return();
        retval.Start = (IToken)input.LT(1);
        int statement_expression_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1156=null;
        csParser.statement_expression_return statement_expression1155 = default(csParser.statement_expression_return);
        csParser.statement_expression_return statement_expression1157 = default(csParser.statement_expression_return);

        object char_literal1156_tree=null;

    	try { DebugEnterRule(GrammarFileName, "statement_expression_list");
    	DebugLocation(1026, 50);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 320)) { return retval; }
    		// cs.g:1026:26: ( statement_expression ( ',' statement_expression )* )
    		DebugEnterAlt(1);
    		// cs.g:1027:2: statement_expression ( ',' statement_expression )*
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1027, 2);
    		PushFollow(Follow._statement_expression_in_statement_expression_list7859);
    		statement_expression1155=statement_expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, statement_expression1155.Tree, statement_expression1155, retval);
    		DebugLocation(1027, 23);
    		// cs.g:1027:23: ( ',' statement_expression )*
    		try { DebugEnterSubRule(364);
    		while (true)
    		{
    			int alt364=2;
    			try { DebugEnterDecision(364, decisionCanBacktrack[364]);
    			int LA364_0 = input.LA(1);

    			if ((LA364_0==98))
    			{
    				alt364=1;
    			}


    			} finally { DebugExitDecision(364); }
    			switch ( alt364 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:1027:24: ',' statement_expression
    				{
    				DebugLocation(1027, 24);
    				char_literal1156=(IToken)Match(input,98,Follow._98_in_statement_expression_list7862); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal1156_tree = (object)adaptor.Create(char_literal1156, retval);
    				adaptor.AddChild(root_0, char_literal1156_tree);
    				}
    				DebugLocation(1027, 28);
    				PushFollow(Follow._statement_expression_in_statement_expression_list7864);
    				statement_expression1157=statement_expression();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, statement_expression1157.Tree, statement_expression1157, retval);

    				}
    				break;

    			default:
    				goto loop364;
    			}
    		}

    		loop364:
    			;

    		} finally { DebugExitSubRule(364); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 320, statement_expression_list_StartIndex); }
        }
     	DebugLocation(1027, 50);
    	} finally { DebugExitRule(GrammarFileName, "statement_expression_list"); }
    	return retval;

    }
    // $ANTLR end "statement_expression_list"

    public class foreach_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_foreach_statement() {}
    protected virtual void Leave_foreach_statement() {}

    // $ANTLR start "foreach_statement"
    // cs.g:1028:1: foreach_statement : 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement ;
    [GrammarRule("foreach_statement")]
    public csParser.foreach_statement_return foreach_statement()
    {

        csParser.foreach_statement_return retval = new csParser.foreach_statement_return();
        retval.Start = (IToken)input.LT(1);
        int foreach_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1158=null;
        IToken char_literal1159=null;
        IToken string_literal1162=null;
        IToken char_literal1164=null;
        csParser.local_variable_type_return local_variable_type1160 = default(csParser.local_variable_type_return);
        csParser.identifier_return identifier1161 = default(csParser.identifier_return);
        csParser.expression_return expression1163 = default(csParser.expression_return);
        csParser.embedded_statement_return embedded_statement1165 = default(csParser.embedded_statement_return);

        object string_literal1158_tree=null;
        object char_literal1159_tree=null;
        object string_literal1162_tree=null;
        object char_literal1164_tree=null;

    	try { DebugEnterRule(GrammarFileName, "foreach_statement");
    	DebugLocation(1028, 99);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 321)) { return retval; }
    		// cs.g:1028:18: ( 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement )
    		DebugEnterAlt(1);
    		// cs.g:1029:2: 'foreach' '(' local_variable_type identifier 'in' expression ')' embedded_statement
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1029, 2);
    		string_literal1158=(IToken)Match(input,216,Follow._216_in_foreach_statement7874); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal1158_tree = (object)adaptor.Create(string_literal1158, retval);
    		adaptor.AddChild(root_0, string_literal1158_tree);
    		}
    		DebugLocation(1029, 14);
    		char_literal1159=(IToken)Match(input,110,Follow._110_in_foreach_statement7878); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1159_tree = (object)adaptor.Create(char_literal1159, retval);
    		adaptor.AddChild(root_0, char_literal1159_tree);
    		}
    		DebugLocation(1029, 20);
    		PushFollow(Follow._local_variable_type_in_foreach_statement7882);
    		local_variable_type1160=local_variable_type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, local_variable_type1160.Tree, local_variable_type1160, retval);
    		DebugLocation(1029, 42);
    		PushFollow(Follow._identifier_in_foreach_statement7886);
    		identifier1161=identifier();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier1161.Tree, identifier1161, retval);
    		DebugLocation(1029, 55);
    		string_literal1162=(IToken)Match(input,145,Follow._145_in_foreach_statement7890); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal1162_tree = (object)adaptor.Create(string_literal1162, retval);
    		adaptor.AddChild(root_0, string_literal1162_tree);
    		}
    		DebugLocation(1029, 62);
    		PushFollow(Follow._expression_in_foreach_statement7894);
    		expression1163=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression1163.Tree, expression1163, retval);
    		DebugLocation(1029, 75);
    		char_literal1164=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_foreach_statement7898), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1164_tree = (object)adaptor.Create(char_literal1164, retval);
    		adaptor.AddChild(root_0, char_literal1164_tree);
    		}
    		DebugLocation(1029, 81);
    		PushFollow(Follow._embedded_statement_in_foreach_statement7902);
    		embedded_statement1165=embedded_statement();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, embedded_statement1165.Tree, embedded_statement1165, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 321, foreach_statement_StartIndex); }
        }
     	DebugLocation(1029, 99);
    	} finally { DebugExitRule(GrammarFileName, "foreach_statement"); }
    	return retval;

    }
    // $ANTLR end "foreach_statement"

    public class jump_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_jump_statement() {}
    protected virtual void Leave_jump_statement() {}

    // $ANTLR start "jump_statement"
    // cs.g:1030:1: jump_statement : ( break_statement | continue_statement | goto_statement | return_statement | throw_statement );
    [GrammarRule("jump_statement")]
    public csParser.jump_statement_return jump_statement()
    {

        csParser.jump_statement_return retval = new csParser.jump_statement_return();
        retval.Start = (IToken)input.LT(1);
        int jump_statement_StartIndex = input.Index;
        object root_0 = null;

        csParser.break_statement_return break_statement1166 = default(csParser.break_statement_return);
        csParser.continue_statement_return continue_statement1167 = default(csParser.continue_statement_return);
        csParser.goto_statement_return goto_statement1168 = default(csParser.goto_statement_return);
        csParser.return_statement_return return_statement1169 = default(csParser.return_statement_return);
        csParser.throw_statement_return throw_statement1170 = default(csParser.throw_statement_return);


    	try { DebugEnterRule(GrammarFileName, "jump_statement");
    	DebugLocation(1030, 19);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 322)) { return retval; }
    		// cs.g:1030:15: ( break_statement | continue_statement | goto_statement | return_statement | throw_statement )
    		int alt365=5;
    		try { DebugEnterDecision(365, decisionCanBacktrack[365]);
    		switch (input.LA(1))
    		{
    		case 217:
    			{
    			alt365=1;
    			}
    			break;
    		case 218:
    			{
    			alt365=2;
    			}
    			break;
    		case 219:
    			{
    			alt365=3;
    			}
    			break;
    		case 108:
    			{
    			alt365=4;
    			}
    			break;
    		case 220:
    			{
    			alt365=5;
    			}
    			break;
    		default:
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 365, 0, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(365); }
    		switch (alt365)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:1031:2: break_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1031, 2);
    			PushFollow(Follow._break_statement_in_jump_statement7910);
    			break_statement1166=break_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, break_statement1166.Tree, break_statement1166, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:1032:4: continue_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1032, 4);
    			PushFollow(Follow._continue_statement_in_jump_statement7915);
    			continue_statement1167=continue_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, continue_statement1167.Tree, continue_statement1167, retval);

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:1033:4: goto_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1033, 4);
    			PushFollow(Follow._goto_statement_in_jump_statement7920);
    			goto_statement1168=goto_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, goto_statement1168.Tree, goto_statement1168, retval);

    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// cs.g:1034:4: return_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1034, 4);
    			PushFollow(Follow._return_statement_in_jump_statement7925);
    			return_statement1169=return_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, return_statement1169.Tree, return_statement1169, retval);

    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// cs.g:1035:4: throw_statement
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1035, 4);
    			PushFollow(Follow._throw_statement_in_jump_statement7930);
    			throw_statement1170=throw_statement();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, throw_statement1170.Tree, throw_statement1170, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 322, jump_statement_StartIndex); }
        }
     	DebugLocation(1035, 19);
    	} finally { DebugExitRule(GrammarFileName, "jump_statement"); }
    	return retval;

    }
    // $ANTLR end "jump_statement"

    public class break_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_break_statement() {}
    protected virtual void Leave_break_statement() {}

    // $ANTLR start "break_statement"
    // cs.g:1036:1: break_statement : 'break' ';' ;
    [GrammarRule("break_statement")]
    public csParser.break_statement_return break_statement()
    {

        csParser.break_statement_return retval = new csParser.break_statement_return();
        retval.Start = (IToken)input.LT(1);
        int break_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1171=null;
        IToken char_literal1172=null;

        object string_literal1171_tree=null;
        object char_literal1172_tree=null;

    	try { DebugEnterRule(GrammarFileName, "break_statement");
    	DebugLocation(1036, 15);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 323)) { return retval; }
    		// cs.g:1036:16: ( 'break' ';' )
    		DebugEnterAlt(1);
    		// cs.g:1037:2: 'break' ';'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1037, 2);
    		string_literal1171=(IToken)Match(input,217,Follow._217_in_break_statement7938); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal1171_tree = (object)adaptor.Create(string_literal1171, retval);
    		adaptor.AddChild(root_0, string_literal1171_tree);
    		}
    		DebugLocation(1037, 12);
    		char_literal1172=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_break_statement7942), "SEMI"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1172_tree = (object)adaptor.Create(char_literal1172, retval);
    		adaptor.AddChild(root_0, char_literal1172_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 323, break_statement_StartIndex); }
        }
     	DebugLocation(1037, 15);
    	} finally { DebugExitRule(GrammarFileName, "break_statement"); }
    	return retval;

    }
    // $ANTLR end "break_statement"

    public class continue_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_continue_statement() {}
    protected virtual void Leave_continue_statement() {}

    // $ANTLR start "continue_statement"
    // cs.g:1038:1: continue_statement : 'continue' ';' ;
    [GrammarRule("continue_statement")]
    public csParser.continue_statement_return continue_statement()
    {

        csParser.continue_statement_return retval = new csParser.continue_statement_return();
        retval.Start = (IToken)input.LT(1);
        int continue_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1173=null;
        IToken char_literal1174=null;

        object string_literal1173_tree=null;
        object char_literal1174_tree=null;

    	try { DebugEnterRule(GrammarFileName, "continue_statement");
    	DebugLocation(1038, 18);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 324)) { return retval; }
    		// cs.g:1038:19: ( 'continue' ';' )
    		DebugEnterAlt(1);
    		// cs.g:1039:2: 'continue' ';'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1039, 2);
    		string_literal1173=(IToken)Match(input,218,Follow._218_in_continue_statement7950); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal1173_tree = (object)adaptor.Create(string_literal1173, retval);
    		adaptor.AddChild(root_0, string_literal1173_tree);
    		}
    		DebugLocation(1039, 15);
    		char_literal1174=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_continue_statement7954), "SEMI"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1174_tree = (object)adaptor.Create(char_literal1174, retval);
    		adaptor.AddChild(root_0, char_literal1174_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 324, continue_statement_StartIndex); }
        }
     	DebugLocation(1039, 18);
    	} finally { DebugExitRule(GrammarFileName, "continue_statement"); }
    	return retval;

    }
    // $ANTLR end "continue_statement"

    public class goto_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_goto_statement() {}
    protected virtual void Leave_goto_statement() {}

    // $ANTLR start "goto_statement"
    // cs.g:1040:1: goto_statement : ( ( 'goto' identifier ';' ) | ( 'goto' 'case' constant_expression ';' ) | ( 'goto' 'default' ';' ) );
    [GrammarRule("goto_statement")]
    public csParser.goto_statement_return goto_statement()
    {

        csParser.goto_statement_return retval = new csParser.goto_statement_return();
        retval.Start = (IToken)input.LT(1);
        int goto_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1175=null;
        IToken char_literal1177=null;
        IToken string_literal1178=null;
        IToken string_literal1179=null;
        IToken char_literal1181=null;
        IToken string_literal1182=null;
        IToken string_literal1183=null;
        IToken char_literal1184=null;
        csParser.identifier_return identifier1176 = default(csParser.identifier_return);
        csParser.constant_expression_return constant_expression1180 = default(csParser.constant_expression_return);

        object string_literal1175_tree=null;
        object char_literal1177_tree=null;
        object string_literal1178_tree=null;
        object string_literal1179_tree=null;
        object char_literal1181_tree=null;
        object string_literal1182_tree=null;
        object string_literal1183_tree=null;
        object char_literal1184_tree=null;

    	try { DebugEnterRule(GrammarFileName, "goto_statement");
    	DebugLocation(1040, 30);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 325)) { return retval; }
    		// cs.g:1040:15: ( ( 'goto' identifier ';' ) | ( 'goto' 'case' constant_expression ';' ) | ( 'goto' 'default' ';' ) )
    		int alt366=3;
    		try { DebugEnterDecision(366, decisionCanBacktrack[366]);
    		int LA366_0 = input.LA(1);

    		if ((LA366_0==219))
    		{
    			switch (input.LA(2))
    			{
    			case 212:
    				{
    				alt366=2;
    				}
    				break;
    			case 143:
    				{
    				alt366=3;
    				}
    				break;
    			case IDENTIFIER:
    			case SET:
    			case 95:
    			case 101:
    			case 102:
    			case 103:
    			case 104:
    			case 105:
    			case 106:
    			case 107:
    			case 109:
    			case 175:
    			case 176:
    			case 177:
    			case 178:
    			case 179:
    			case 180:
    			case 181:
    			case 182:
    			case 183:
    			case 184:
    			case 185:
    			case 186:
    			case 187:
    			case 199:
    			case 201:
    			case 202:
    			case 208:
    			case 225:
    			case 226:
    				{
    				alt366=1;
    				}
    				break;
    			default:
    				{
    					if (state.backtracking>0) {state.failed=true; return retval;}
    					NoViableAltException nvae = new NoViableAltException("", 366, 1, input);

    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    			}

    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 366, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(366); }
    		switch (alt366)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:1041:2: ( 'goto' identifier ';' )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1041, 2);
    			// cs.g:1041:2: ( 'goto' identifier ';' )
    			DebugEnterAlt(1);
    			// cs.g:1041:3: 'goto' identifier ';'
    			{
    			DebugLocation(1041, 3);
    			string_literal1175=(IToken)Match(input,219,Follow._219_in_goto_statement7963); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal1175_tree = (object)adaptor.Create(string_literal1175, retval);
    			adaptor.AddChild(root_0, string_literal1175_tree);
    			}
    			DebugLocation(1041, 12);
    			PushFollow(Follow._identifier_in_goto_statement7967);
    			identifier1176=identifier();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier1176.Tree, identifier1176, retval);
    			DebugLocation(1041, 25);
    			char_literal1177=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_goto_statement7971), "SEMI"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal1177_tree = (object)adaptor.Create(char_literal1177, retval);
    			adaptor.AddChild(root_0, char_literal1177_tree);
    			}

    			}


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:1042:4: ( 'goto' 'case' constant_expression ';' )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1042, 4);
    			// cs.g:1042:4: ( 'goto' 'case' constant_expression ';' )
    			DebugEnterAlt(1);
    			// cs.g:1042:5: 'goto' 'case' constant_expression ';'
    			{
    			DebugLocation(1042, 5);
    			string_literal1178=(IToken)Match(input,219,Follow._219_in_goto_statement7978); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal1178_tree = (object)adaptor.Create(string_literal1178, retval);
    			adaptor.AddChild(root_0, string_literal1178_tree);
    			}
    			DebugLocation(1042, 14);
    			string_literal1179=(IToken)Match(input,212,Follow._212_in_goto_statement7982); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal1179_tree = (object)adaptor.Create(string_literal1179, retval);
    			adaptor.AddChild(root_0, string_literal1179_tree);
    			}
    			DebugLocation(1042, 23);
    			PushFollow(Follow._constant_expression_in_goto_statement7986);
    			constant_expression1180=constant_expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, constant_expression1180.Tree, constant_expression1180, retval);
    			DebugLocation(1042, 45);
    			char_literal1181=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_goto_statement7990), "SEMI"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal1181_tree = (object)adaptor.Create(char_literal1181, retval);
    			adaptor.AddChild(root_0, char_literal1181_tree);
    			}

    			}


    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// cs.g:1043:4: ( 'goto' 'default' ';' )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1043, 4);
    			// cs.g:1043:4: ( 'goto' 'default' ';' )
    			DebugEnterAlt(1);
    			// cs.g:1043:5: 'goto' 'default' ';'
    			{
    			DebugLocation(1043, 5);
    			string_literal1182=(IToken)Match(input,219,Follow._219_in_goto_statement7997); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal1182_tree = (object)adaptor.Create(string_literal1182, retval);
    			adaptor.AddChild(root_0, string_literal1182_tree);
    			}
    			DebugLocation(1043, 14);
    			string_literal1183=(IToken)Match(input,143,Follow._143_in_goto_statement8001); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal1183_tree = (object)adaptor.Create(string_literal1183, retval);
    			adaptor.AddChild(root_0, string_literal1183_tree);
    			}
    			DebugLocation(1043, 26);
    			char_literal1184=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_goto_statement8005), "SEMI"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal1184_tree = (object)adaptor.Create(char_literal1184, retval);
    			adaptor.AddChild(root_0, char_literal1184_tree);
    			}

    			}


    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 325, goto_statement_StartIndex); }
        }
     	DebugLocation(1043, 30);
    	} finally { DebugExitRule(GrammarFileName, "goto_statement"); }
    	return retval;

    }
    // $ANTLR end "goto_statement"

    public class return_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_return_statement() {}
    protected virtual void Leave_return_statement() {}

    // $ANTLR start "return_statement"
    // cs.g:1044:1: return_statement : 'return' ( expression )? ';' ;
    [GrammarRule("return_statement")]
    public csParser.return_statement_return return_statement()
    {

        csParser.return_statement_return retval = new csParser.return_statement_return();
        retval.Start = (IToken)input.LT(1);
        int return_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1185=null;
        IToken char_literal1187=null;
        csParser.expression_return expression1186 = default(csParser.expression_return);

        object string_literal1185_tree=null;
        object char_literal1187_tree=null;

    	try { DebugEnterRule(GrammarFileName, "return_statement");
    	DebugLocation(1044, 30);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 326)) { return retval; }
    		// cs.g:1044:17: ( 'return' ( expression )? ';' )
    		DebugEnterAlt(1);
    		// cs.g:1045:2: 'return' ( expression )? ';'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1045, 2);
    		string_literal1185=(IToken)Match(input,108,Follow._108_in_return_statement8014); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal1185_tree = (object)adaptor.Create(string_literal1185, retval);
    		adaptor.AddChild(root_0, string_literal1185_tree);
    		}
    		DebugLocation(1045, 13);
    		// cs.g:1045:13: ( expression )?
    		int alt367=2;
    		try { DebugEnterSubRule(367);
    		try { DebugEnterDecision(367, decisionCanBacktrack[367]);
    		int LA367_0 = input.LA(1);

    		if (((LA367_0>=IDENTIFIER && LA367_0<=NULL)||LA367_0==MINUS||LA367_0==SET||(LA367_0>=90 && LA367_0<=91)||LA367_0==95||(LA367_0>=101 && LA367_0<=107)||(LA367_0>=109 && LA367_0<=111)||(LA367_0>=114 && LA367_0<=122)||(LA367_0>=124 && LA367_0<=129)||(LA367_0>=132 && LA367_0<=144)||(LA367_0>=175 && LA367_0<=187)||LA367_0==199||(LA367_0>=201 && LA367_0<=202)||LA367_0==208||(LA367_0>=225 && LA367_0<=226)))
    		{
    			alt367=1;
    		}
    		} finally { DebugExitDecision(367); }
    		switch (alt367)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: expression
    			{
    			DebugLocation(1045, 13);
    			PushFollow(Follow._expression_in_return_statement8018);
    			expression1186=expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression1186.Tree, expression1186, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(367); }

    		DebugLocation(1045, 27);
    		char_literal1187=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_return_statement8023), "SEMI"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1187_tree = (object)adaptor.Create(char_literal1187, retval);
    		adaptor.AddChild(root_0, char_literal1187_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 326, return_statement_StartIndex); }
        }
     	DebugLocation(1045, 30);
    	} finally { DebugExitRule(GrammarFileName, "return_statement"); }
    	return retval;

    }
    // $ANTLR end "return_statement"

    public class throw_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_throw_statement() {}
    protected virtual void Leave_throw_statement() {}

    // $ANTLR start "throw_statement"
    // cs.g:1046:1: throw_statement : 'throw' ( expression )? ';' ;
    [GrammarRule("throw_statement")]
    public csParser.throw_statement_return throw_statement()
    {

        csParser.throw_statement_return retval = new csParser.throw_statement_return();
        retval.Start = (IToken)input.LT(1);
        int throw_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1188=null;
        IToken char_literal1190=null;
        csParser.expression_return expression1189 = default(csParser.expression_return);

        object string_literal1188_tree=null;
        object char_literal1190_tree=null;

    	try { DebugEnterRule(GrammarFileName, "throw_statement");
    	DebugLocation(1046, 29);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 327)) { return retval; }
    		// cs.g:1046:16: ( 'throw' ( expression )? ';' )
    		DebugEnterAlt(1);
    		// cs.g:1047:2: 'throw' ( expression )? ';'
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1047, 2);
    		string_literal1188=(IToken)Match(input,220,Follow._220_in_throw_statement8031); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal1188_tree = (object)adaptor.Create(string_literal1188, retval);
    		adaptor.AddChild(root_0, string_literal1188_tree);
    		}
    		DebugLocation(1047, 12);
    		// cs.g:1047:12: ( expression )?
    		int alt368=2;
    		try { DebugEnterSubRule(368);
    		try { DebugEnterDecision(368, decisionCanBacktrack[368]);
    		int LA368_0 = input.LA(1);

    		if (((LA368_0>=IDENTIFIER && LA368_0<=NULL)||LA368_0==MINUS||LA368_0==SET||(LA368_0>=90 && LA368_0<=91)||LA368_0==95||(LA368_0>=101 && LA368_0<=107)||(LA368_0>=109 && LA368_0<=111)||(LA368_0>=114 && LA368_0<=122)||(LA368_0>=124 && LA368_0<=129)||(LA368_0>=132 && LA368_0<=144)||(LA368_0>=175 && LA368_0<=187)||LA368_0==199||(LA368_0>=201 && LA368_0<=202)||LA368_0==208||(LA368_0>=225 && LA368_0<=226)))
    		{
    			alt368=1;
    		}
    		} finally { DebugExitDecision(368); }
    		switch (alt368)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: expression
    			{
    			DebugLocation(1047, 12);
    			PushFollow(Follow._expression_in_throw_statement8035);
    			expression1189=expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression1189.Tree, expression1189, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(368); }

    		DebugLocation(1047, 26);
    		char_literal1190=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_throw_statement8040), "SEMI"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1190_tree = (object)adaptor.Create(char_literal1190, retval);
    		adaptor.AddChild(root_0, char_literal1190_tree);
    		}

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 327, throw_statement_StartIndex); }
        }
     	DebugLocation(1047, 29);
    	} finally { DebugExitRule(GrammarFileName, "throw_statement"); }
    	return retval;

    }
    // $ANTLR end "throw_statement"

    public class try_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_try_statement() {}
    protected virtual void Leave_try_statement() {}

    // $ANTLR start "try_statement"
    // cs.g:1048:1: try_statement : ( ( 'try' block catch_clauses ( finally_clause )? ) | ( 'try' block finally_clause ) );
    [GrammarRule("try_statement")]
    public csParser.try_statement_return try_statement()
    {

        csParser.try_statement_return retval = new csParser.try_statement_return();
        retval.Start = (IToken)input.LT(1);
        int try_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1191=null;
        IToken string_literal1195=null;
        csParser.block_return block1192 = default(csParser.block_return);
        csParser.catch_clauses_return catch_clauses1193 = default(csParser.catch_clauses_return);
        csParser.finally_clause_return finally_clause1194 = default(csParser.finally_clause_return);
        csParser.block_return block1196 = default(csParser.block_return);
        csParser.finally_clause_return finally_clause1197 = default(csParser.finally_clause_return);

        object string_literal1191_tree=null;
        object string_literal1195_tree=null;

    	try { DebugEnterRule(GrammarFileName, "try_statement");
    	DebugLocation(1048, 35);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 328)) { return retval; }
    		// cs.g:1048:14: ( ( 'try' block catch_clauses ( finally_clause )? ) | ( 'try' block finally_clause ) )
    		int alt370=2;
    		try { DebugEnterDecision(370, decisionCanBacktrack[370]);
    		int LA370_0 = input.LA(1);

    		if ((LA370_0==221))
    		{
    			int LA370_1 = input.LA(2);

    			if ((EvaluatePredicate(synpred648_cs_fragment)))
    			{
    				alt370=1;
    			}
    			else if ((true))
    			{
    				alt370=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 370, 1, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 370, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(370); }
    		switch (alt370)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:1049:7: ( 'try' block catch_clauses ( finally_clause )? )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1049, 7);
    			// cs.g:1049:7: ( 'try' block catch_clauses ( finally_clause )? )
    			DebugEnterAlt(1);
    			// cs.g:1049:8: 'try' block catch_clauses ( finally_clause )?
    			{
    			DebugLocation(1049, 8);
    			string_literal1191=(IToken)Match(input,221,Follow._221_in_try_statement8054); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal1191_tree = (object)adaptor.Create(string_literal1191, retval);
    			adaptor.AddChild(root_0, string_literal1191_tree);
    			}
    			DebugLocation(1049, 16);
    			PushFollow(Follow._block_in_try_statement8058);
    			block1192=block();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, block1192.Tree, block1192, retval);
    			DebugLocation(1049, 24);
    			PushFollow(Follow._catch_clauses_in_try_statement8062);
    			catch_clauses1193=catch_clauses();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, catch_clauses1193.Tree, catch_clauses1193, retval);
    			DebugLocation(1049, 40);
    			// cs.g:1049:40: ( finally_clause )?
    			int alt369=2;
    			try { DebugEnterSubRule(369);
    			try { DebugEnterDecision(369, decisionCanBacktrack[369]);
    			int LA369_0 = input.LA(1);

    			if ((LA369_0==223))
    			{
    				alt369=1;
    			}
    			} finally { DebugExitDecision(369); }
    			switch (alt369)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: finally_clause
    				{
    				DebugLocation(1049, 40);
    				PushFollow(Follow._finally_clause_in_try_statement8066);
    				finally_clause1194=finally_clause();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, finally_clause1194.Tree, finally_clause1194, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(369); }


    			}


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:1050:4: ( 'try' block finally_clause )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1050, 4);
    			// cs.g:1050:4: ( 'try' block finally_clause )
    			DebugEnterAlt(1);
    			// cs.g:1050:5: 'try' block finally_clause
    			{
    			DebugLocation(1050, 5);
    			string_literal1195=(IToken)Match(input,221,Follow._221_in_try_statement8074); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal1195_tree = (object)adaptor.Create(string_literal1195, retval);
    			adaptor.AddChild(root_0, string_literal1195_tree);
    			}
    			DebugLocation(1050, 13);
    			PushFollow(Follow._block_in_try_statement8078);
    			block1196=block();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, block1196.Tree, block1196, retval);
    			DebugLocation(1050, 21);
    			PushFollow(Follow._finally_clause_in_try_statement8082);
    			finally_clause1197=finally_clause();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, finally_clause1197.Tree, finally_clause1197, retval);

    			}


    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 328, try_statement_StartIndex); }
        }
     	DebugLocation(1050, 35);
    	} finally { DebugExitRule(GrammarFileName, "try_statement"); }
    	return retval;

    }
    // $ANTLR end "try_statement"

    public class catch_clauses_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_catch_clauses() {}
    protected virtual void Leave_catch_clauses() {}

    // $ANTLR start "catch_clauses"
    // cs.g:1051:1: catch_clauses : ( ( specific_catch_clauses ( general_catch_clause )? ) | ( ( specific_catch_clauses )? general_catch_clause ) );
    [GrammarRule("catch_clauses")]
    public csParser.catch_clauses_return catch_clauses()
    {

        csParser.catch_clauses_return retval = new csParser.catch_clauses_return();
        retval.Start = (IToken)input.LT(1);
        int catch_clauses_StartIndex = input.Index;
        object root_0 = null;

        csParser.specific_catch_clauses_return specific_catch_clauses1198 = default(csParser.specific_catch_clauses_return);
        csParser.general_catch_clause_return general_catch_clause1199 = default(csParser.general_catch_clause_return);
        csParser.specific_catch_clauses_return specific_catch_clauses1200 = default(csParser.specific_catch_clauses_return);
        csParser.general_catch_clause_return general_catch_clause1201 = default(csParser.general_catch_clause_return);


    	try { DebugEnterRule(GrammarFileName, "catch_clauses");
    	DebugLocation(1051, 52);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 329)) { return retval; }
    		// cs.g:1051:14: ( ( specific_catch_clauses ( general_catch_clause )? ) | ( ( specific_catch_clauses )? general_catch_clause ) )
    		int alt373=2;
    		try { DebugEnterDecision(373, decisionCanBacktrack[373]);
    		int LA373_0 = input.LA(1);

    		if ((LA373_0==222))
    		{
    			int LA373_1 = input.LA(2);

    			if ((EvaluatePredicate(synpred650_cs_fragment)))
    			{
    				alt373=1;
    			}
    			else if ((true))
    			{
    				alt373=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 373, 1, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 373, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(373); }
    		switch (alt373)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:1052:2: ( specific_catch_clauses ( general_catch_clause )? )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1052, 2);
    			// cs.g:1052:2: ( specific_catch_clauses ( general_catch_clause )? )
    			DebugEnterAlt(1);
    			// cs.g:1052:3: specific_catch_clauses ( general_catch_clause )?
    			{
    			DebugLocation(1052, 3);
    			PushFollow(Follow._specific_catch_clauses_in_catch_clauses8091);
    			specific_catch_clauses1198=specific_catch_clauses();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, specific_catch_clauses1198.Tree, specific_catch_clauses1198, retval);
    			DebugLocation(1052, 28);
    			// cs.g:1052:28: ( general_catch_clause )?
    			int alt371=2;
    			try { DebugEnterSubRule(371);
    			try { DebugEnterDecision(371, decisionCanBacktrack[371]);
    			int LA371_0 = input.LA(1);

    			if ((LA371_0==222))
    			{
    				alt371=1;
    			}
    			} finally { DebugExitDecision(371); }
    			switch (alt371)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: general_catch_clause
    				{
    				DebugLocation(1052, 28);
    				PushFollow(Follow._general_catch_clause_in_catch_clauses8095);
    				general_catch_clause1199=general_catch_clause();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, general_catch_clause1199.Tree, general_catch_clause1199, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(371); }


    			}


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:1053:4: ( ( specific_catch_clauses )? general_catch_clause )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1053, 4);
    			// cs.g:1053:4: ( ( specific_catch_clauses )? general_catch_clause )
    			DebugEnterAlt(1);
    			// cs.g:1053:5: ( specific_catch_clauses )? general_catch_clause
    			{
    			DebugLocation(1053, 5);
    			// cs.g:1053:5: ( specific_catch_clauses )?
    			int alt372=2;
    			try { DebugEnterSubRule(372);
    			try { DebugEnterDecision(372, decisionCanBacktrack[372]);
    			int LA372_0 = input.LA(1);

    			if ((LA372_0==222))
    			{
    				int LA372_1 = input.LA(2);

    				if ((LA372_1==110))
    				{
    					alt372=1;
    				}
    			}
    			} finally { DebugExitDecision(372); }
    			switch (alt372)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: specific_catch_clauses
    				{
    				DebugLocation(1053, 5);
    				PushFollow(Follow._specific_catch_clauses_in_catch_clauses8103);
    				specific_catch_clauses1200=specific_catch_clauses();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, specific_catch_clauses1200.Tree, specific_catch_clauses1200, retval);

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(372); }

    			DebugLocation(1053, 31);
    			PushFollow(Follow._general_catch_clause_in_catch_clauses8108);
    			general_catch_clause1201=general_catch_clause();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, general_catch_clause1201.Tree, general_catch_clause1201, retval);

    			}


    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 329, catch_clauses_StartIndex); }
        }
     	DebugLocation(1053, 52);
    	} finally { DebugExitRule(GrammarFileName, "catch_clauses"); }
    	return retval;

    }
    // $ANTLR end "catch_clauses"

    public class specific_catch_clauses_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_specific_catch_clauses() {}
    protected virtual void Leave_specific_catch_clauses() {}

    // $ANTLR start "specific_catch_clauses"
    // cs.g:1054:1: specific_catch_clauses : ( specific_catch_clause )+ ;
    [GrammarRule("specific_catch_clauses")]
    public csParser.specific_catch_clauses_return specific_catch_clauses()
    {

        csParser.specific_catch_clauses_return retval = new csParser.specific_catch_clauses_return();
        retval.Start = (IToken)input.LT(1);
        int specific_catch_clauses_StartIndex = input.Index;
        object root_0 = null;

        csParser.specific_catch_clause_return specific_catch_clause1202 = default(csParser.specific_catch_clause_return);


    	try { DebugEnterRule(GrammarFileName, "specific_catch_clauses");
    	DebugLocation(1054, 24);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 330)) { return retval; }
    		// cs.g:1054:23: ( ( specific_catch_clause )+ )
    		DebugEnterAlt(1);
    		// cs.g:1055:2: ( specific_catch_clause )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1055, 2);
    		// cs.g:1055:2: ( specific_catch_clause )+
    		int cnt374=0;
    		try { DebugEnterSubRule(374);
    		while (true)
    		{
    			int alt374=2;
    			try { DebugEnterDecision(374, decisionCanBacktrack[374]);
    			int LA374_0 = input.LA(1);

    			if ((LA374_0==222))
    			{
    				int LA374_1 = input.LA(2);

    				if ((LA374_1==110))
    				{
    					alt374=1;
    				}


    			}


    			} finally { DebugExitDecision(374); }
    			switch (alt374)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: specific_catch_clause
    				{
    				DebugLocation(1055, 2);
    				PushFollow(Follow._specific_catch_clause_in_specific_catch_clauses8117);
    				specific_catch_clause1202=specific_catch_clause();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, specific_catch_clause1202.Tree, specific_catch_clause1202, retval);

    				}
    				break;

    			default:
    				if (cnt374 >= 1)
    					goto loop374;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee374 = new EarlyExitException( 374, input );
    				DebugRecognitionException(eee374);
    				throw eee374;
    			}
    			cnt374++;
    		}
    		loop374:
    			;

    		} finally { DebugExitSubRule(374); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 330, specific_catch_clauses_StartIndex); }
        }
     	DebugLocation(1055, 24);
    	} finally { DebugExitRule(GrammarFileName, "specific_catch_clauses"); }
    	return retval;

    }
    // $ANTLR end "specific_catch_clauses"

    public class specific_catch_clause_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_specific_catch_clause() {}
    protected virtual void Leave_specific_catch_clause() {}

    // $ANTLR start "specific_catch_clause"
    // cs.g:1056:1: specific_catch_clause : 'catch' '(' class_type ( identifier )? ')' block ;
    [GrammarRule("specific_catch_clause")]
    public csParser.specific_catch_clause_return specific_catch_clause()
    {

        csParser.specific_catch_clause_return retval = new csParser.specific_catch_clause_return();
        retval.Start = (IToken)input.LT(1);
        int specific_catch_clause_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1203=null;
        IToken char_literal1204=null;
        IToken char_literal1207=null;
        csParser.class_type_return class_type1205 = default(csParser.class_type_return);
        csParser.identifier_return identifier1206 = default(csParser.identifier_return);
        csParser.block_return block1208 = default(csParser.block_return);

        object string_literal1203_tree=null;
        object char_literal1204_tree=null;
        object char_literal1207_tree=null;

    	try { DebugEnterRule(GrammarFileName, "specific_catch_clause");
    	DebugLocation(1056, 56);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 331)) { return retval; }
    		// cs.g:1056:22: ( 'catch' '(' class_type ( identifier )? ')' block )
    		DebugEnterAlt(1);
    		// cs.g:1057:2: 'catch' '(' class_type ( identifier )? ')' block
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1057, 2);
    		string_literal1203=(IToken)Match(input,222,Follow._222_in_specific_catch_clause8126); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal1203_tree = (object)adaptor.Create(string_literal1203, retval);
    		adaptor.AddChild(root_0, string_literal1203_tree);
    		}
    		DebugLocation(1057, 12);
    		char_literal1204=(IToken)Match(input,110,Follow._110_in_specific_catch_clause8130); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1204_tree = (object)adaptor.Create(char_literal1204, retval);
    		adaptor.AddChild(root_0, char_literal1204_tree);
    		}
    		DebugLocation(1057, 18);
    		PushFollow(Follow._class_type_in_specific_catch_clause8134);
    		class_type1205=class_type();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, class_type1205.Tree, class_type1205, retval);
    		DebugLocation(1057, 31);
    		// cs.g:1057:31: ( identifier )?
    		int alt375=2;
    		try { DebugEnterSubRule(375);
    		try { DebugEnterDecision(375, decisionCanBacktrack[375]);
    		int LA375_0 = input.LA(1);

    		if ((LA375_0==IDENTIFIER||LA375_0==SET||LA375_0==95||(LA375_0>=101 && LA375_0<=107)||LA375_0==109||(LA375_0>=175 && LA375_0<=187)||LA375_0==199||(LA375_0>=201 && LA375_0<=202)||LA375_0==208||(LA375_0>=225 && LA375_0<=226)))
    		{
    			alt375=1;
    		}
    		} finally { DebugExitDecision(375); }
    		switch (alt375)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: identifier
    			{
    			DebugLocation(1057, 31);
    			PushFollow(Follow._identifier_in_specific_catch_clause8138);
    			identifier1206=identifier();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, identifier1206.Tree, identifier1206, retval);

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(375); }

    		DebugLocation(1057, 45);
    		char_literal1207=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_specific_catch_clause8143), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1207_tree = (object)adaptor.Create(char_literal1207, retval);
    		adaptor.AddChild(root_0, char_literal1207_tree);
    		}
    		DebugLocation(1057, 51);
    		PushFollow(Follow._block_in_specific_catch_clause8147);
    		block1208=block();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, block1208.Tree, block1208, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 331, specific_catch_clause_StartIndex); }
        }
     	DebugLocation(1057, 56);
    	} finally { DebugExitRule(GrammarFileName, "specific_catch_clause"); }
    	return retval;

    }
    // $ANTLR end "specific_catch_clause"

    public class general_catch_clause_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_general_catch_clause() {}
    protected virtual void Leave_general_catch_clause() {}

    // $ANTLR start "general_catch_clause"
    // cs.g:1058:1: general_catch_clause : 'catch' block ;
    [GrammarRule("general_catch_clause")]
    public csParser.general_catch_clause_return general_catch_clause()
    {

        csParser.general_catch_clause_return retval = new csParser.general_catch_clause_return();
        retval.Start = (IToken)input.LT(1);
        int general_catch_clause_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1209=null;
        csParser.block_return block1210 = default(csParser.block_return);

        object string_literal1209_tree=null;

    	try { DebugEnterRule(GrammarFileName, "general_catch_clause");
    	DebugLocation(1058, 17);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 332)) { return retval; }
    		// cs.g:1058:21: ( 'catch' block )
    		DebugEnterAlt(1);
    		// cs.g:1059:2: 'catch' block
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1059, 2);
    		string_literal1209=(IToken)Match(input,222,Follow._222_in_general_catch_clause8155); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal1209_tree = (object)adaptor.Create(string_literal1209, retval);
    		adaptor.AddChild(root_0, string_literal1209_tree);
    		}
    		DebugLocation(1059, 12);
    		PushFollow(Follow._block_in_general_catch_clause8159);
    		block1210=block();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, block1210.Tree, block1210, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 332, general_catch_clause_StartIndex); }
        }
     	DebugLocation(1059, 17);
    	} finally { DebugExitRule(GrammarFileName, "general_catch_clause"); }
    	return retval;

    }
    // $ANTLR end "general_catch_clause"

    public class finally_clause_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_finally_clause() {}
    protected virtual void Leave_finally_clause() {}

    // $ANTLR start "finally_clause"
    // cs.g:1060:1: finally_clause : 'finally' block ;
    [GrammarRule("finally_clause")]
    public csParser.finally_clause_return finally_clause()
    {

        csParser.finally_clause_return retval = new csParser.finally_clause_return();
        retval.Start = (IToken)input.LT(1);
        int finally_clause_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1211=null;
        csParser.block_return block1212 = default(csParser.block_return);

        object string_literal1211_tree=null;

    	try { DebugEnterRule(GrammarFileName, "finally_clause");
    	DebugLocation(1060, 19);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 333)) { return retval; }
    		// cs.g:1060:15: ( 'finally' block )
    		DebugEnterAlt(1);
    		// cs.g:1061:2: 'finally' block
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1061, 2);
    		string_literal1211=(IToken)Match(input,223,Follow._223_in_finally_clause8167); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal1211_tree = (object)adaptor.Create(string_literal1211, retval);
    		adaptor.AddChild(root_0, string_literal1211_tree);
    		}
    		DebugLocation(1061, 14);
    		PushFollow(Follow._block_in_finally_clause8171);
    		block1212=block();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, block1212.Tree, block1212, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 333, finally_clause_StartIndex); }
        }
     	DebugLocation(1061, 19);
    	} finally { DebugExitRule(GrammarFileName, "finally_clause"); }
    	return retval;

    }
    // $ANTLR end "finally_clause"

    public class checked_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_checked_statement() {}
    protected virtual void Leave_checked_statement() {}

    // $ANTLR start "checked_statement"
    // cs.g:1062:1: checked_statement : 'checked' block ;
    [GrammarRule("checked_statement")]
    public csParser.checked_statement_return checked_statement()
    {

        csParser.checked_statement_return retval = new csParser.checked_statement_return();
        retval.Start = (IToken)input.LT(1);
        int checked_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1213=null;
        csParser.block_return block1214 = default(csParser.block_return);

        object string_literal1213_tree=null;

    	try { DebugEnterRule(GrammarFileName, "checked_statement");
    	DebugLocation(1062, 19);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 334)) { return retval; }
    		// cs.g:1062:18: ( 'checked' block )
    		DebugEnterAlt(1);
    		// cs.g:1063:2: 'checked' block
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1063, 2);
    		string_literal1213=(IToken)Match(input,141,Follow._141_in_checked_statement8179); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal1213_tree = (object)adaptor.Create(string_literal1213, retval);
    		adaptor.AddChild(root_0, string_literal1213_tree);
    		}
    		DebugLocation(1063, 14);
    		PushFollow(Follow._block_in_checked_statement8183);
    		block1214=block();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, block1214.Tree, block1214, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 334, checked_statement_StartIndex); }
        }
     	DebugLocation(1063, 19);
    	} finally { DebugExitRule(GrammarFileName, "checked_statement"); }
    	return retval;

    }
    // $ANTLR end "checked_statement"

    public class unchecked_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_unchecked_statement() {}
    protected virtual void Leave_unchecked_statement() {}

    // $ANTLR start "unchecked_statement"
    // cs.g:1064:1: unchecked_statement : 'unchecked' block ;
    [GrammarRule("unchecked_statement")]
    public csParser.unchecked_statement_return unchecked_statement()
    {

        csParser.unchecked_statement_return retval = new csParser.unchecked_statement_return();
        retval.Start = (IToken)input.LT(1);
        int unchecked_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1215=null;
        csParser.block_return block1216 = default(csParser.block_return);

        object string_literal1215_tree=null;

    	try { DebugEnterRule(GrammarFileName, "unchecked_statement");
    	DebugLocation(1064, 21);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 335)) { return retval; }
    		// cs.g:1064:20: ( 'unchecked' block )
    		DebugEnterAlt(1);
    		// cs.g:1065:2: 'unchecked' block
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1065, 2);
    		string_literal1215=(IToken)Match(input,142,Follow._142_in_unchecked_statement8191); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal1215_tree = (object)adaptor.Create(string_literal1215, retval);
    		adaptor.AddChild(root_0, string_literal1215_tree);
    		}
    		DebugLocation(1065, 16);
    		PushFollow(Follow._block_in_unchecked_statement8195);
    		block1216=block();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, block1216.Tree, block1216, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 335, unchecked_statement_StartIndex); }
        }
     	DebugLocation(1065, 21);
    	} finally { DebugExitRule(GrammarFileName, "unchecked_statement"); }
    	return retval;

    }
    // $ANTLR end "unchecked_statement"

    public class lock_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_lock_statement() {}
    protected virtual void Leave_lock_statement() {}

    // $ANTLR start "lock_statement"
    // cs.g:1066:1: lock_statement : 'lock' '(' expression ')' embedded_statement ;
    [GrammarRule("lock_statement")]
    public csParser.lock_statement_return lock_statement()
    {

        csParser.lock_statement_return retval = new csParser.lock_statement_return();
        retval.Start = (IToken)input.LT(1);
        int lock_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1217=null;
        IToken char_literal1218=null;
        IToken char_literal1220=null;
        csParser.expression_return expression1219 = default(csParser.expression_return);
        csParser.embedded_statement_return embedded_statement1221 = default(csParser.embedded_statement_return);

        object string_literal1217_tree=null;
        object char_literal1218_tree=null;
        object char_literal1220_tree=null;

    	try { DebugEnterRule(GrammarFileName, "lock_statement");
    	DebugLocation(1066, 53);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 336)) { return retval; }
    		// cs.g:1066:15: ( 'lock' '(' expression ')' embedded_statement )
    		DebugEnterAlt(1);
    		// cs.g:1067:2: 'lock' '(' expression ')' embedded_statement
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1067, 2);
    		string_literal1217=(IToken)Match(input,224,Follow._224_in_lock_statement8203); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal1217_tree = (object)adaptor.Create(string_literal1217, retval);
    		adaptor.AddChild(root_0, string_literal1217_tree);
    		}
    		DebugLocation(1067, 11);
    		char_literal1218=(IToken)Match(input,110,Follow._110_in_lock_statement8207); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1218_tree = (object)adaptor.Create(char_literal1218, retval);
    		adaptor.AddChild(root_0, char_literal1218_tree);
    		}
    		DebugLocation(1067, 16);
    		PushFollow(Follow._expression_in_lock_statement8210);
    		expression1219=expression();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression1219.Tree, expression1219, retval);
    		DebugLocation(1067, 29);
    		char_literal1220=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_lock_statement8214), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1220_tree = (object)adaptor.Create(char_literal1220, retval);
    		adaptor.AddChild(root_0, char_literal1220_tree);
    		}
    		DebugLocation(1067, 35);
    		PushFollow(Follow._embedded_statement_in_lock_statement8218);
    		embedded_statement1221=embedded_statement();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, embedded_statement1221.Tree, embedded_statement1221, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 336, lock_statement_StartIndex); }
        }
     	DebugLocation(1067, 53);
    	} finally { DebugExitRule(GrammarFileName, "lock_statement"); }
    	return retval;

    }
    // $ANTLR end "lock_statement"

    public class using_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_using_statement() {}
    protected virtual void Leave_using_statement() {}

    // $ANTLR start "using_statement"
    // cs.g:1068:1: using_statement : 'using' '(' resource_acquisition ')' embedded_statement ;
    [GrammarRule("using_statement")]
    public csParser.using_statement_return using_statement()
    {

        csParser.using_statement_return retval = new csParser.using_statement_return();
        retval.Start = (IToken)input.LT(1);
        int using_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1222=null;
        IToken char_literal1223=null;
        IToken char_literal1225=null;
        csParser.resource_acquisition_return resource_acquisition1224 = default(csParser.resource_acquisition_return);
        csParser.embedded_statement_return embedded_statement1226 = default(csParser.embedded_statement_return);

        object string_literal1222_tree=null;
        object char_literal1223_tree=null;
        object char_literal1225_tree=null;

    	try { DebugEnterRule(GrammarFileName, "using_statement");
    	DebugLocation(1068, 67);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 337)) { return retval; }
    		// cs.g:1068:16: ( 'using' '(' resource_acquisition ')' embedded_statement )
    		DebugEnterAlt(1);
    		// cs.g:1069:2: 'using' '(' resource_acquisition ')' embedded_statement
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1069, 2);
    		string_literal1222=(IToken)new XToken((IToken)Match(input,USING,Follow._USING_in_using_statement8226), "USING"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		string_literal1222_tree = (object)adaptor.Create(string_literal1222, retval);
    		adaptor.AddChild(root_0, string_literal1222_tree);
    		}
    		DebugLocation(1069, 12);
    		char_literal1223=(IToken)Match(input,110,Follow._110_in_using_statement8230); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1223_tree = (object)adaptor.Create(char_literal1223, retval);
    		adaptor.AddChild(root_0, char_literal1223_tree);
    		}
    		DebugLocation(1069, 19);
    		PushFollow(Follow._resource_acquisition_in_using_statement8235);
    		resource_acquisition1224=resource_acquisition();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, resource_acquisition1224.Tree, resource_acquisition1224, retval);
    		DebugLocation(1069, 42);
    		char_literal1225=(IToken)new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_using_statement8239), "RPAREN"); if (state.failed) return retval;
    		if ( state.backtracking==0 ) {
    		char_literal1225_tree = (object)adaptor.Create(char_literal1225, retval);
    		adaptor.AddChild(root_0, char_literal1225_tree);
    		}
    		DebugLocation(1069, 49);
    		PushFollow(Follow._embedded_statement_in_using_statement8244);
    		embedded_statement1226=embedded_statement();
    		PopFollow();
    		if (state.failed) return retval;
    		if ( (state.backtracking==0) ) adaptor.AddChild(root_0, embedded_statement1226.Tree, embedded_statement1226, retval);

    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 337, using_statement_StartIndex); }
        }
     	DebugLocation(1069, 67);
    	} finally { DebugExitRule(GrammarFileName, "using_statement"); }
    	return retval;

    }
    // $ANTLR end "using_statement"

    public class resource_acquisition_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_resource_acquisition() {}
    protected virtual void Leave_resource_acquisition() {}

    // $ANTLR start "resource_acquisition"
    // cs.g:1070:1: resource_acquisition : ( local_variable_declaration | expression );
    [GrammarRule("resource_acquisition")]
    public csParser.resource_acquisition_return resource_acquisition()
    {

        csParser.resource_acquisition_return retval = new csParser.resource_acquisition_return();
        retval.Start = (IToken)input.LT(1);
        int resource_acquisition_StartIndex = input.Index;
        object root_0 = null;

        csParser.local_variable_declaration_return local_variable_declaration1227 = default(csParser.local_variable_declaration_return);
        csParser.expression_return expression1228 = default(csParser.expression_return);


    	try { DebugEnterRule(GrammarFileName, "resource_acquisition");
    	DebugLocation(1070, 14);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 338)) { return retval; }
    		// cs.g:1070:21: ( local_variable_declaration | expression )
    		int alt376=2;
    		try { DebugEnterDecision(376, decisionCanBacktrack[376]);
    		try
    		{
    			alt376 = dfa376.Predict(input);
    		}
    		catch (NoViableAltException nvae)
    		{
    			DebugRecognitionException(nvae);
    			throw;
    		}
    		} finally { DebugExitDecision(376); }
    		switch (alt376)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:1071:2: local_variable_declaration
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1071, 2);
    			PushFollow(Follow._local_variable_declaration_in_resource_acquisition8252);
    			local_variable_declaration1227=local_variable_declaration();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, local_variable_declaration1227.Tree, local_variable_declaration1227, retval);

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:1072:4: expression
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1072, 4);
    			PushFollow(Follow._expression_in_resource_acquisition8257);
    			expression1228=expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression1228.Tree, expression1228, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 338, resource_acquisition_StartIndex); }
        }
     	DebugLocation(1072, 14);
    	} finally { DebugExitRule(GrammarFileName, "resource_acquisition"); }
    	return retval;

    }
    // $ANTLR end "resource_acquisition"

    public class yield_statement_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_yield_statement() {}
    protected virtual void Leave_yield_statement() {}

    // $ANTLR start "yield_statement"
    // cs.g:1073:1: yield_statement : ( ( 'yield' 'return' expression ';' ) | ( 'yield' 'break' ';' ) );
    [GrammarRule("yield_statement")]
    public csParser.yield_statement_return yield_statement()
    {

        csParser.yield_statement_return retval = new csParser.yield_statement_return();
        retval.Start = (IToken)input.LT(1);
        int yield_statement_StartIndex = input.Index;
        object root_0 = null;

        IToken string_literal1229=null;
        IToken string_literal1230=null;
        IToken char_literal1232=null;
        IToken string_literal1233=null;
        IToken string_literal1234=null;
        IToken char_literal1235=null;
        csParser.expression_return expression1231 = default(csParser.expression_return);

        object string_literal1229_tree=null;
        object string_literal1230_tree=null;
        object char_literal1232_tree=null;
        object string_literal1233_tree=null;
        object string_literal1234_tree=null;
        object char_literal1235_tree=null;

    	try { DebugEnterRule(GrammarFileName, "yield_statement");
    	DebugLocation(1073, 29);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 339)) { return retval; }
    		// cs.g:1073:16: ( ( 'yield' 'return' expression ';' ) | ( 'yield' 'break' ';' ) )
    		int alt377=2;
    		try { DebugEnterDecision(377, decisionCanBacktrack[377]);
    		int LA377_0 = input.LA(1);

    		if ((LA377_0==225))
    		{
    			int LA377_1 = input.LA(2);

    			if ((LA377_1==108))
    			{
    				alt377=1;
    			}
    			else if ((LA377_1==217))
    			{
    				alt377=2;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return retval;}
    				NoViableAltException nvae = new NoViableAltException("", 377, 1, input);

    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 377, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(377); }
    		switch (alt377)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:1074:2: ( 'yield' 'return' expression ';' )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1074, 2);
    			// cs.g:1074:2: ( 'yield' 'return' expression ';' )
    			DebugEnterAlt(1);
    			// cs.g:1074:3: 'yield' 'return' expression ';'
    			{
    			DebugLocation(1074, 3);
    			string_literal1229=(IToken)Match(input,225,Follow._225_in_yield_statement8266); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal1229_tree = (object)adaptor.Create(string_literal1229, retval);
    			adaptor.AddChild(root_0, string_literal1229_tree);
    			}
    			DebugLocation(1074, 13);
    			string_literal1230=(IToken)Match(input,108,Follow._108_in_yield_statement8270); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal1230_tree = (object)adaptor.Create(string_literal1230, retval);
    			adaptor.AddChild(root_0, string_literal1230_tree);
    			}
    			DebugLocation(1074, 24);
    			PushFollow(Follow._expression_in_yield_statement8274);
    			expression1231=expression();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression1231.Tree, expression1231, retval);
    			DebugLocation(1074, 37);
    			char_literal1232=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_yield_statement8278), "SEMI"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal1232_tree = (object)adaptor.Create(char_literal1232, retval);
    			adaptor.AddChild(root_0, char_literal1232_tree);
    			}

    			}


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:1075:4: ( 'yield' 'break' ';' )
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1075, 4);
    			// cs.g:1075:4: ( 'yield' 'break' ';' )
    			DebugEnterAlt(1);
    			// cs.g:1075:5: 'yield' 'break' ';'
    			{
    			DebugLocation(1075, 5);
    			string_literal1233=(IToken)Match(input,225,Follow._225_in_yield_statement8285); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal1233_tree = (object)adaptor.Create(string_literal1233, retval);
    			adaptor.AddChild(root_0, string_literal1233_tree);
    			}
    			DebugLocation(1075, 15);
    			string_literal1234=(IToken)Match(input,217,Follow._217_in_yield_statement8289); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			string_literal1234_tree = (object)adaptor.Create(string_literal1234, retval);
    			adaptor.AddChild(root_0, string_literal1234_tree);
    			}
    			DebugLocation(1075, 25);
    			char_literal1235=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_yield_statement8293), "SEMI"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			char_literal1235_tree = (object)adaptor.Create(char_literal1235, retval);
    			adaptor.AddChild(root_0, char_literal1235_tree);
    			}

    			}


    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 339, yield_statement_StartIndex); }
        }
     	DebugLocation(1075, 29);
    	} finally { DebugExitRule(GrammarFileName, "yield_statement"); }
    	return retval;

    }
    // $ANTLR end "yield_statement"

    public class identifier_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_identifier() {}
    protected virtual void Leave_identifier() {}

    // $ANTLR start "identifier"
    // cs.g:1077:1: identifier : ( IDENTIFIER | also_keyword );
    [GrammarRule("identifier")]
    public csParser.identifier_return identifier()
    {

        csParser.identifier_return retval = new csParser.identifier_return();
        retval.Start = (IToken)input.LT(1);
        int identifier_StartIndex = input.Index;
        object root_0 = null;

        IToken IDENTIFIER1236=null;
        csParser.also_keyword_return also_keyword1237 = default(csParser.also_keyword_return);

        object IDENTIFIER1236_tree=null;

    	try { DebugEnterRule(GrammarFileName, "identifier");
    	DebugLocation(1077, 16);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 340)) { return retval; }
    		// cs.g:1077:11: ( IDENTIFIER | also_keyword )
    		int alt378=2;
    		try { DebugEnterDecision(378, decisionCanBacktrack[378]);
    		int LA378_0 = input.LA(1);

    		if ((LA378_0==IDENTIFIER))
    		{
    			alt378=1;
    		}
    		else if ((LA378_0==SET||LA378_0==95||(LA378_0>=101 && LA378_0<=107)||LA378_0==109||(LA378_0>=175 && LA378_0<=187)||LA378_0==199||(LA378_0>=201 && LA378_0<=202)||LA378_0==208||(LA378_0>=225 && LA378_0<=226)))
    		{
    			alt378=2;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			NoViableAltException nvae = new NoViableAltException("", 378, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(378); }
    		switch (alt378)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:1078:2: IDENTIFIER
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1078, 2);
    			IDENTIFIER1236=(IToken)new XToken((IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifier8303), "IDENTIFIER"); if (state.failed) return retval;
    			if ( state.backtracking==0 ) {
    			IDENTIFIER1236_tree = (object)adaptor.Create(IDENTIFIER1236, retval);
    			adaptor.AddChild(root_0, IDENTIFIER1236_tree);
    			}

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:1079:4: also_keyword
    			{
    			root_0 = (object)adaptor.Nil();

    			DebugLocation(1079, 4);
    			PushFollow(Follow._also_keyword_in_identifier8309);
    			also_keyword1237=also_keyword();
    			PopFollow();
    			if (state.failed) return retval;
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, also_keyword1237.Tree, also_keyword1237, retval);

    			}
    			break;

    		}
    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 340, identifier_StartIndex); }
        }
     	DebugLocation(1079, 16);
    	} finally { DebugExitRule(GrammarFileName, "identifier"); }
    	return retval;

    }
    // $ANTLR end "identifier"

    public class literal_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_literal() {}
    protected virtual void Leave_literal() {}

    // $ANTLR start "literal"
    // cs.g:1081:1: literal : ( Real_literal | NUMBER | Hex_number | Character_literal | STRINGLITERAL | Verbatim_string_literal | TRUE | FALSE | NULL );
    [GrammarRule("literal")]
    public csParser.literal_return literal()
    {

        csParser.literal_return retval = new csParser.literal_return();
        retval.Start = (IToken)input.LT(1);
        int literal_StartIndex = input.Index;
        object root_0 = null;

        IToken set1238=null;

        object set1238_tree=null;

    	try { DebugEnterRule(GrammarFileName, "literal");
    	DebugLocation(1081, 1);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 341)) { return retval; }
    		// cs.g:1081:8: ( Real_literal | NUMBER | Hex_number | Character_literal | STRINGLITERAL | Verbatim_string_literal | TRUE | FALSE | NULL )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1081, 8);
    		set1238=(IToken)input.LT(1);
    		if ((input.LA(1)>=Real_literal && input.LA(1)<=NULL))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set1238, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 341, literal_StartIndex); }
        }
     	DebugLocation(1091, 1);
    	} finally { DebugExitRule(GrammarFileName, "literal"); }
    	return retval;

    }
    // $ANTLR end "literal"

    public class keyword_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_keyword() {}
    protected virtual void Leave_keyword() {}

    // $ANTLR start "keyword"
    // cs.g:1093:1: keyword : ( 'abstract' | 'as' | 'base' | 'bool' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' | 'double' | 'else' | 'enum' | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'string' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' );
    [GrammarRule("keyword")]
    public csParser.keyword_return keyword()
    {

        csParser.keyword_return retval = new csParser.keyword_return();
        retval.Start = (IToken)input.LT(1);
        int keyword_StartIndex = input.Index;
        object root_0 = null;

        IToken set1239=null;

        object set1239_tree=null;

    	try { DebugEnterRule(GrammarFileName, "keyword");
    	DebugLocation(1093, 801);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 342)) { return retval; }
    		// cs.g:1093:8: ( 'abstract' | 'as' | 'base' | 'bool' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'checked' | 'class' | 'const' | 'continue' | 'decimal' | 'default' | 'delegate' | 'do' | 'double' | 'else' | 'enum' | 'event' | 'explicit' | 'extern' | 'false' | 'finally' | 'fixed' | 'float' | 'for' | 'foreach' | 'goto' | 'if' | 'implicit' | 'in' | 'int' | 'interface' | 'internal' | 'is' | 'lock' | 'long' | 'namespace' | 'new' | 'null' | 'object' | 'operator' | 'out' | 'override' | 'params' | 'private' | 'protected' | 'public' | 'readonly' | 'ref' | 'return' | 'sbyte' | 'sealed' | 'short' | 'sizeof' | 'stackalloc' | 'static' | 'string' | 'struct' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'typeof' | 'uint' | 'ulong' | 'unchecked' | 'unsafe' | 'ushort' | 'using' | 'virtual' | 'void' | 'volatile' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1093, 8);
    		set1239=(IToken)input.LT(1);
    		if (input.LA(1)==ELSE||input.LA(1)==IF||(input.LA(1)>=TRUE && input.LA(1)<=NULL)||(input.LA(1)>=USING && input.LA(1)<=ENUM)||input.LA(1)==88||(input.LA(1)>=90 && input.LA(1)<=91)||input.LA(1)==94||input.LA(1)==104||input.LA(1)==108||(input.LA(1)>=113 && input.LA(1)<=122)||(input.LA(1)>=130 && input.LA(1)<=145)||(input.LA(1)>=151 && input.LA(1)<=152)||(input.LA(1)>=170 && input.LA(1)<=174)||(input.LA(1)>=189 && input.LA(1)<=198)||input.LA(1)==200||(input.LA(1)>=203 && input.LA(1)<=207)||(input.LA(1)>=210 && input.LA(1)<=212)||(input.LA(1)>=214 && input.LA(1)<=224))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set1239, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 342, keyword_StartIndex); }
        }
     	DebugLocation(1094, 801);
    	} finally { DebugExitRule(GrammarFileName, "keyword"); }
    	return retval;

    }
    // $ANTLR end "keyword"

    public class also_keyword_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_also_keyword() {}
    protected virtual void Leave_also_keyword() {}

    // $ANTLR start "also_keyword"
    // cs.g:1096:1: also_keyword : ( 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'event' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' );
    [GrammarRule("also_keyword")]
    public csParser.also_keyword_return also_keyword()
    {

        csParser.also_keyword_return retval = new csParser.also_keyword_return();
        retval.Start = (IToken)input.LT(1);
        int also_keyword_StartIndex = input.Index;
        object root_0 = null;

        IToken set1240=null;

        object set1240_tree=null;

    	try { DebugEnterRule(GrammarFileName, "also_keyword");
    	DebugLocation(1096, 82);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 343)) { return retval; }
    		// cs.g:1096:13: ( 'add' | 'alias' | 'assembly' | 'module' | 'field' | 'event' | 'method' | 'param' | 'property' | 'type' | 'yield' | 'from' | 'into' | 'join' | 'on' | 'where' | 'orderby' | 'group' | 'by' | 'ascending' | 'descending' | 'equals' | 'select' | 'pragma' | 'let' | 'remove' | 'set' | 'var' | '__arglist' )
    		DebugEnterAlt(1);
    		// cs.g:
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1096, 13);
    		set1240=(IToken)input.LT(1);
    		if (input.LA(1)==SET||input.LA(1)==95||(input.LA(1)>=101 && input.LA(1)<=107)||input.LA(1)==109||(input.LA(1)>=175 && input.LA(1)<=187)||input.LA(1)==199||(input.LA(1)>=201 && input.LA(1)<=202)||input.LA(1)==208||(input.LA(1)>=225 && input.LA(1)<=226))
    		{
    			input.Consume();
    			if ( (state.backtracking==0) ) adaptor.AddChild(root_0, (object)adaptor.Create(set1240, retval));
    			state.errorRecovery=false;state.failed=false;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return retval;}
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			throw mse;
    		}


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 343, also_keyword_StartIndex); }
        }
     	DebugLocation(1099, 82);
    	} finally { DebugExitRule(GrammarFileName, "also_keyword"); }
    	return retval;

    }
    // $ANTLR end "also_keyword"

    public class assignment_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_assignment_list() {}
    protected virtual void Leave_assignment_list() {}

    // $ANTLR start "assignment_list"
    // cs.g:1374:1: assignment_list : ( assignment ';' )+ ;
    [GrammarRule("assignment_list")]
    public csParser.assignment_list_return assignment_list()
    {

        csParser.assignment_list_return retval = new csParser.assignment_list_return();
        retval.Start = (IToken)input.LT(1);
        int assignment_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1242=null;
        csParser.assignment_return assignment1241 = default(csParser.assignment_return);

        object char_literal1242_tree=null;

    	try { DebugEnterRule(GrammarFileName, "assignment_list");
    	DebugLocation(1374, 19);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 344)) { return retval; }
    		// cs.g:1374:16: ( ( assignment ';' )+ )
    		DebugEnterAlt(1);
    		// cs.g:1375:2: ( assignment ';' )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1375, 2);
    		// cs.g:1375:2: ( assignment ';' )+
    		int cnt379=0;
    		try { DebugEnterSubRule(379);
    		while (true)
    		{
    			int alt379=2;
    			try { DebugEnterDecision(379, decisionCanBacktrack[379]);
    			int LA379_0 = input.LA(1);

    			if (((LA379_0>=IDENTIFIER && LA379_0<=NULL)||LA379_0==MINUS||LA379_0==SET||(LA379_0>=90 && LA379_0<=91)||LA379_0==95||(LA379_0>=101 && LA379_0<=107)||(LA379_0>=109 && LA379_0<=111)||(LA379_0>=114 && LA379_0<=122)||(LA379_0>=124 && LA379_0<=129)||(LA379_0>=132 && LA379_0<=144)||(LA379_0>=175 && LA379_0<=187)||LA379_0==199||(LA379_0>=201 && LA379_0<=202)||LA379_0==208||(LA379_0>=225 && LA379_0<=226)))
    			{
    				alt379=1;
    			}


    			} finally { DebugExitDecision(379); }
    			switch (alt379)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:1375:3: assignment ';'
    				{
    				DebugLocation(1375, 3);
    				PushFollow(Follow._assignment_in_assignment_list10804);
    				assignment1241=assignment();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, assignment1241.Tree, assignment1241, retval);
    				DebugLocation(1375, 14);
    				char_literal1242=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_assignment_list10806), "SEMI"); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal1242_tree = (object)adaptor.Create(char_literal1242, retval);
    				adaptor.AddChild(root_0, char_literal1242_tree);
    				}

    				}
    				break;

    			default:
    				if (cnt379 >= 1)
    					goto loop379;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee379 = new EarlyExitException( 379, input );
    				DebugRecognitionException(eee379);
    				throw eee379;
    			}
    			cnt379++;
    		}
    		loop379:
    			;

    		} finally { DebugExitSubRule(379); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 344, assignment_list_StartIndex); }
        }
     	DebugLocation(1375, 19);
    	} finally { DebugExitRule(GrammarFileName, "assignment_list"); }
    	return retval;

    }
    // $ANTLR end "assignment_list"

    public class field_declarations_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_field_declarations() {}
    protected virtual void Leave_field_declarations() {}

    // $ANTLR start "field_declarations"
    // cs.g:1376:1: field_declarations : ( field_declaration )+ ;
    [GrammarRule("field_declarations")]
    public csParser.field_declarations_return field_declarations()
    {

        csParser.field_declarations_return retval = new csParser.field_declarations_return();
        retval.Start = (IToken)input.LT(1);
        int field_declarations_StartIndex = input.Index;
        object root_0 = null;

        csParser.field_declaration_return field_declaration1243 = default(csParser.field_declaration_return);


    	try { DebugEnterRule(GrammarFileName, "field_declarations");
    	DebugLocation(1376, 20);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 345)) { return retval; }
    		// cs.g:1376:19: ( ( field_declaration )+ )
    		DebugEnterAlt(1);
    		// cs.g:1377:2: ( field_declaration )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1377, 2);
    		// cs.g:1377:2: ( field_declaration )+
    		int cnt380=0;
    		try { DebugEnterSubRule(380);
    		while (true)
    		{
    			int alt380=2;
    			try { DebugEnterDecision(380, decisionCanBacktrack[380]);
    			int LA380_0 = input.LA(1);

    			if ((LA380_0==IDENTIFIER||LA380_0==SET||LA380_0==95||LA380_0==97||(LA380_0>=101 && LA380_0<=107)||LA380_0==109||(LA380_0>=113 && LA380_0<=122)||(LA380_0>=132 && LA380_0<=138)||(LA380_0>=170 && LA380_0<=187)||LA380_0==192||(LA380_0>=195 && LA380_0<=196)||LA380_0==199||(LA380_0>=201 && LA380_0<=202)||LA380_0==208||(LA380_0>=225 && LA380_0<=226)))
    			{
    				alt380=1;
    			}


    			} finally { DebugExitDecision(380); }
    			switch (alt380)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: field_declaration
    				{
    				DebugLocation(1377, 2);
    				PushFollow(Follow._field_declaration_in_field_declarations10816);
    				field_declaration1243=field_declaration();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, field_declaration1243.Tree, field_declaration1243, retval);

    				}
    				break;

    			default:
    				if (cnt380 >= 1)
    					goto loop380;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee380 = new EarlyExitException( 380, input );
    				DebugRecognitionException(eee380);
    				throw eee380;
    			}
    			cnt380++;
    		}
    		loop380:
    			;

    		} finally { DebugExitSubRule(380); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 345, field_declarations_StartIndex); }
        }
     	DebugLocation(1377, 20);
    	} finally { DebugExitRule(GrammarFileName, "field_declarations"); }
    	return retval;

    }
    // $ANTLR end "field_declarations"

    public class property_declaration_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_property_declaration_list() {}
    protected virtual void Leave_property_declaration_list() {}

    // $ANTLR start "property_declaration_list"
    // cs.g:1378:1: property_declaration_list : ( property_declaration )+ ;
    [GrammarRule("property_declaration_list")]
    public csParser.property_declaration_list_return property_declaration_list()
    {

        csParser.property_declaration_list_return retval = new csParser.property_declaration_list_return();
        retval.Start = (IToken)input.LT(1);
        int property_declaration_list_StartIndex = input.Index;
        object root_0 = null;

        csParser.property_declaration_return property_declaration1244 = default(csParser.property_declaration_return);


    	try { DebugEnterRule(GrammarFileName, "property_declaration_list");
    	DebugLocation(1378, 23);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 346)) { return retval; }
    		// cs.g:1378:26: ( ( property_declaration )+ )
    		DebugEnterAlt(1);
    		// cs.g:1379:2: ( property_declaration )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1379, 2);
    		// cs.g:1379:2: ( property_declaration )+
    		int cnt381=0;
    		try { DebugEnterSubRule(381);
    		while (true)
    		{
    			int alt381=2;
    			try { DebugEnterDecision(381, decisionCanBacktrack[381]);
    			int LA381_0 = input.LA(1);

    			if ((LA381_0==IDENTIFIER||LA381_0==SET||(LA381_0>=94 && LA381_0<=95)||LA381_0==97||(LA381_0>=101 && LA381_0<=107)||LA381_0==109||(LA381_0>=113 && LA381_0<=122)||(LA381_0>=132 && LA381_0<=138)||(LA381_0>=170 && LA381_0<=187)||(LA381_0>=190 && LA381_0<=192)||(LA381_0>=197 && LA381_0<=199)||(LA381_0>=201 && LA381_0<=202)||LA381_0==208||(LA381_0>=225 && LA381_0<=226)))
    			{
    				alt381=1;
    			}


    			} finally { DebugExitDecision(381); }
    			switch (alt381)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: property_declaration
    				{
    				DebugLocation(1379, 2);
    				PushFollow(Follow._property_declaration_in_property_declaration_list10825);
    				property_declaration1244=property_declaration();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, property_declaration1244.Tree, property_declaration1244, retval);

    				}
    				break;

    			default:
    				if (cnt381 >= 1)
    					goto loop381;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee381 = new EarlyExitException( 381, input );
    				DebugRecognitionException(eee381);
    				throw eee381;
    			}
    			cnt381++;
    		}
    		loop381:
    			;

    		} finally { DebugExitSubRule(381); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 346, property_declaration_list_StartIndex); }
        }
     	DebugLocation(1379, 23);
    	} finally { DebugExitRule(GrammarFileName, "property_declaration_list"); }
    	return retval;

    }
    // $ANTLR end "property_declaration_list"

    public class member_access_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_member_access_list() {}
    protected virtual void Leave_member_access_list() {}

    // $ANTLR start "member_access_list"
    // cs.g:1380:1: member_access_list : ( member_access )+ ;
    [GrammarRule("member_access_list")]
    public csParser.member_access_list_return member_access_list()
    {

        csParser.member_access_list_return retval = new csParser.member_access_list_return();
        retval.Start = (IToken)input.LT(1);
        int member_access_list_StartIndex = input.Index;
        object root_0 = null;

        csParser.member_access_return member_access1245 = default(csParser.member_access_return);


    	try { DebugEnterRule(GrammarFileName, "member_access_list");
    	DebugLocation(1380, 16);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 347)) { return retval; }
    		// cs.g:1380:19: ( ( member_access )+ )
    		DebugEnterAlt(1);
    		// cs.g:1381:2: ( member_access )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1381, 2);
    		// cs.g:1381:2: ( member_access )+
    		int cnt382=0;
    		try { DebugEnterSubRule(382);
    		while (true)
    		{
    			int alt382=2;
    			try { DebugEnterDecision(382, decisionCanBacktrack[382]);
    			int LA382_0 = input.LA(1);

    			if ((LA382_0==IDENTIFIER||LA382_0==SET||LA382_0==95||(LA382_0>=101 && LA382_0<=107)||LA382_0==109||(LA382_0>=175 && LA382_0<=187)||LA382_0==199||(LA382_0>=201 && LA382_0<=202)||LA382_0==208||(LA382_0>=225 && LA382_0<=226)))
    			{
    				alt382=1;
    			}


    			} finally { DebugExitDecision(382); }
    			switch (alt382)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: member_access
    				{
    				DebugLocation(1381, 2);
    				PushFollow(Follow._member_access_in_member_access_list10835);
    				member_access1245=member_access();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, member_access1245.Tree, member_access1245, retval);

    				}
    				break;

    			default:
    				if (cnt382 >= 1)
    					goto loop382;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee382 = new EarlyExitException( 382, input );
    				DebugRecognitionException(eee382);
    				throw eee382;
    			}
    			cnt382++;
    		}
    		loop382:
    			;

    		} finally { DebugExitSubRule(382); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 347, member_access_list_StartIndex); }
        }
     	DebugLocation(1381, 16);
    	} finally { DebugExitRule(GrammarFileName, "member_access_list"); }
    	return retval;

    }
    // $ANTLR end "member_access_list"

    public class constant_declarations_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_constant_declarations() {}
    protected virtual void Leave_constant_declarations() {}

    // $ANTLR start "constant_declarations"
    // cs.g:1382:1: constant_declarations : ( constant_declaration )+ ;
    [GrammarRule("constant_declarations")]
    public csParser.constant_declarations_return constant_declarations()
    {

        csParser.constant_declarations_return retval = new csParser.constant_declarations_return();
        retval.Start = (IToken)input.LT(1);
        int constant_declarations_StartIndex = input.Index;
        object root_0 = null;

        csParser.constant_declaration_return constant_declaration1246 = default(csParser.constant_declaration_return);


    	try { DebugEnterRule(GrammarFileName, "constant_declarations");
    	DebugLocation(1382, 22);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 348)) { return retval; }
    		// cs.g:1382:22: ( ( constant_declaration )+ )
    		DebugEnterAlt(1);
    		// cs.g:1383:2: ( constant_declaration )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1383, 2);
    		// cs.g:1383:2: ( constant_declaration )+
    		int cnt383=0;
    		try { DebugEnterSubRule(383);
    		while (true)
    		{
    			int alt383=2;
    			try { DebugEnterDecision(383, decisionCanBacktrack[383]);
    			int LA383_0 = input.LA(1);

    			if ((LA383_0==97||LA383_0==138||(LA383_0>=170 && LA383_0<=173)||LA383_0==194))
    			{
    				alt383=1;
    			}


    			} finally { DebugExitDecision(383); }
    			switch (alt383)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: constant_declaration
    				{
    				DebugLocation(1383, 2);
    				PushFollow(Follow._constant_declaration_in_constant_declarations10844);
    				constant_declaration1246=constant_declaration();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, constant_declaration1246.Tree, constant_declaration1246, retval);

    				}
    				break;

    			default:
    				if (cnt383 >= 1)
    					goto loop383;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee383 = new EarlyExitException( 383, input );
    				DebugRecognitionException(eee383);
    				throw eee383;
    			}
    			cnt383++;
    		}
    		loop383:
    			;

    		} finally { DebugExitSubRule(383); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 348, constant_declarations_StartIndex); }
        }
     	DebugLocation(1383, 22);
    	} finally { DebugExitRule(GrammarFileName, "constant_declarations"); }
    	return retval;

    }
    // $ANTLR end "constant_declarations"

    public class literals_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_literals() {}
    protected virtual void Leave_literals() {}

    // $ANTLR start "literals"
    // cs.g:1384:1: literals : ( literal )+ ;
    [GrammarRule("literals")]
    public csParser.literals_return literals()
    {

        csParser.literals_return retval = new csParser.literals_return();
        retval.Start = (IToken)input.LT(1);
        int literals_StartIndex = input.Index;
        object root_0 = null;

        csParser.literal_return literal1247 = default(csParser.literal_return);


    	try { DebugEnterRule(GrammarFileName, "literals");
    	DebugLocation(1384, 10);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 349)) { return retval; }
    		// cs.g:1384:9: ( ( literal )+ )
    		DebugEnterAlt(1);
    		// cs.g:1385:2: ( literal )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1385, 2);
    		// cs.g:1385:2: ( literal )+
    		int cnt384=0;
    		try { DebugEnterSubRule(384);
    		while (true)
    		{
    			int alt384=2;
    			try { DebugEnterDecision(384, decisionCanBacktrack[384]);
    			int LA384_0 = input.LA(1);

    			if (((LA384_0>=Real_literal && LA384_0<=NULL)))
    			{
    				alt384=1;
    			}


    			} finally { DebugExitDecision(384); }
    			switch (alt384)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: literal
    				{
    				DebugLocation(1385, 2);
    				PushFollow(Follow._literal_in_literals10852);
    				literal1247=literal();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, literal1247.Tree, literal1247, retval);

    				}
    				break;

    			default:
    				if (cnt384 >= 1)
    					goto loop384;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee384 = new EarlyExitException( 384, input );
    				DebugRecognitionException(eee384);
    				throw eee384;
    			}
    			cnt384++;
    		}
    		loop384:
    			;

    		} finally { DebugExitSubRule(384); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 349, literals_StartIndex); }
        }
     	DebugLocation(1385, 10);
    	} finally { DebugExitRule(GrammarFileName, "literals"); }
    	return retval;

    }
    // $ANTLR end "literals"

    public class delegate_declaration_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_delegate_declaration_list() {}
    protected virtual void Leave_delegate_declaration_list() {}

    // $ANTLR start "delegate_declaration_list"
    // cs.g:1386:1: delegate_declaration_list : ( delegate_declaration )+ ;
    [GrammarRule("delegate_declaration_list")]
    public csParser.delegate_declaration_list_return delegate_declaration_list()
    {

        csParser.delegate_declaration_list_return retval = new csParser.delegate_declaration_list_return();
        retval.Start = (IToken)input.LT(1);
        int delegate_declaration_list_StartIndex = input.Index;
        object root_0 = null;

        csParser.delegate_declaration_return delegate_declaration1248 = default(csParser.delegate_declaration_return);


    	try { DebugEnterRule(GrammarFileName, "delegate_declaration_list");
    	DebugLocation(1386, 23);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 350)) { return retval; }
    		// cs.g:1386:26: ( ( delegate_declaration )+ )
    		DebugEnterAlt(1);
    		// cs.g:1387:2: ( delegate_declaration )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1387, 2);
    		// cs.g:1387:2: ( delegate_declaration )+
    		int cnt385=0;
    		try { DebugEnterSubRule(385);
    		while (true)
    		{
    			int alt385=2;
    			try { DebugEnterDecision(385, decisionCanBacktrack[385]);
    			int LA385_0 = input.LA(1);

    			if ((LA385_0==97||LA385_0==138||LA385_0==144||(LA385_0>=170 && LA385_0<=174)))
    			{
    				alt385=1;
    			}


    			} finally { DebugExitDecision(385); }
    			switch (alt385)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: delegate_declaration
    				{
    				DebugLocation(1387, 2);
    				PushFollow(Follow._delegate_declaration_in_delegate_declaration_list10861);
    				delegate_declaration1248=delegate_declaration();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, delegate_declaration1248.Tree, delegate_declaration1248, retval);

    				}
    				break;

    			default:
    				if (cnt385 >= 1)
    					goto loop385;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee385 = new EarlyExitException( 385, input );
    				DebugRecognitionException(eee385);
    				throw eee385;
    			}
    			cnt385++;
    		}
    		loop385:
    			;

    		} finally { DebugExitSubRule(385); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 350, delegate_declaration_list_StartIndex); }
        }
     	DebugLocation(1387, 23);
    	} finally { DebugExitRule(GrammarFileName, "delegate_declaration_list"); }
    	return retval;

    }
    // $ANTLR end "delegate_declaration_list"

    public class local_variable_declaration_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_local_variable_declaration_list() {}
    protected virtual void Leave_local_variable_declaration_list() {}

    // $ANTLR start "local_variable_declaration_list"
    // cs.g:1388:1: local_variable_declaration_list : ( local_variable_declaration ';' )+ ;
    [GrammarRule("local_variable_declaration_list")]
    public csParser.local_variable_declaration_list_return local_variable_declaration_list()
    {

        csParser.local_variable_declaration_list_return retval = new csParser.local_variable_declaration_list_return();
        retval.Start = (IToken)input.LT(1);
        int local_variable_declaration_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1250=null;
        csParser.local_variable_declaration_return local_variable_declaration1249 = default(csParser.local_variable_declaration_return);

        object char_literal1250_tree=null;

    	try { DebugEnterRule(GrammarFileName, "local_variable_declaration_list");
    	DebugLocation(1388, 35);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 351)) { return retval; }
    		// cs.g:1388:32: ( ( local_variable_declaration ';' )+ )
    		DebugEnterAlt(1);
    		// cs.g:1389:2: ( local_variable_declaration ';' )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1389, 2);
    		// cs.g:1389:2: ( local_variable_declaration ';' )+
    		int cnt386=0;
    		try { DebugEnterSubRule(386);
    		while (true)
    		{
    			int alt386=2;
    			try { DebugEnterDecision(386, decisionCanBacktrack[386]);
    			int LA386_0 = input.LA(1);

    			if ((LA386_0==IDENTIFIER||LA386_0==SET||LA386_0==95||(LA386_0>=101 && LA386_0<=107)||LA386_0==109||(LA386_0>=113 && LA386_0<=122)||(LA386_0>=132 && LA386_0<=137)||(LA386_0>=175 && LA386_0<=187)||LA386_0==199||(LA386_0>=201 && LA386_0<=202)||(LA386_0>=208 && LA386_0<=209)||(LA386_0>=225 && LA386_0<=226)))
    			{
    				alt386=1;
    			}


    			} finally { DebugExitDecision(386); }
    			switch (alt386)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:1389:3: local_variable_declaration ';'
    				{
    				DebugLocation(1389, 3);
    				PushFollow(Follow._local_variable_declaration_in_local_variable_declaration_list10871);
    				local_variable_declaration1249=local_variable_declaration();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, local_variable_declaration1249.Tree, local_variable_declaration1249, retval);
    				DebugLocation(1389, 30);
    				char_literal1250=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_local_variable_declaration_list10873), "SEMI"); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal1250_tree = (object)adaptor.Create(char_literal1250, retval);
    				adaptor.AddChild(root_0, char_literal1250_tree);
    				}

    				}
    				break;

    			default:
    				if (cnt386 >= 1)
    					goto loop386;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee386 = new EarlyExitException( 386, input );
    				DebugRecognitionException(eee386);
    				throw eee386;
    			}
    			cnt386++;
    		}
    		loop386:
    			;

    		} finally { DebugExitSubRule(386); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 351, local_variable_declaration_list_StartIndex); }
        }
     	DebugLocation(1389, 35);
    	} finally { DebugExitRule(GrammarFileName, "local_variable_declaration_list"); }
    	return retval;

    }
    // $ANTLR end "local_variable_declaration_list"

    public class local_variable_initializer_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_local_variable_initializer_list() {}
    protected virtual void Leave_local_variable_initializer_list() {}

    // $ANTLR start "local_variable_initializer_list"
    // cs.g:1390:1: local_variable_initializer_list : ( local_variable_initializer ';' )+ ;
    [GrammarRule("local_variable_initializer_list")]
    public csParser.local_variable_initializer_list_return local_variable_initializer_list()
    {

        csParser.local_variable_initializer_list_return retval = new csParser.local_variable_initializer_list_return();
        retval.Start = (IToken)input.LT(1);
        int local_variable_initializer_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1252=null;
        csParser.local_variable_initializer_return local_variable_initializer1251 = default(csParser.local_variable_initializer_return);

        object char_literal1252_tree=null;

    	try { DebugEnterRule(GrammarFileName, "local_variable_initializer_list");
    	DebugLocation(1390, 35);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 352)) { return retval; }
    		// cs.g:1390:32: ( ( local_variable_initializer ';' )+ )
    		DebugEnterAlt(1);
    		// cs.g:1391:2: ( local_variable_initializer ';' )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1391, 2);
    		// cs.g:1391:2: ( local_variable_initializer ';' )+
    		int cnt387=0;
    		try { DebugEnterSubRule(387);
    		while (true)
    		{
    			int alt387=2;
    			try { DebugEnterDecision(387, decisionCanBacktrack[387]);
    			int LA387_0 = input.LA(1);

    			if (((LA387_0>=IDENTIFIER && LA387_0<=NULL)||LA387_0==MINUS||LA387_0==SET||(LA387_0>=90 && LA387_0<=92)||LA387_0==95||(LA387_0>=101 && LA387_0<=107)||(LA387_0>=109 && LA387_0<=111)||(LA387_0>=114 && LA387_0<=122)||(LA387_0>=124 && LA387_0<=129)||(LA387_0>=132 && LA387_0<=144)||(LA387_0>=175 && LA387_0<=187)||LA387_0==199||(LA387_0>=201 && LA387_0<=202)||LA387_0==208||LA387_0==210||(LA387_0>=225 && LA387_0<=226)))
    			{
    				alt387=1;
    			}


    			} finally { DebugExitDecision(387); }
    			switch (alt387)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:1391:3: local_variable_initializer ';'
    				{
    				DebugLocation(1391, 3);
    				PushFollow(Follow._local_variable_initializer_in_local_variable_initializer_list10884);
    				local_variable_initializer1251=local_variable_initializer();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, local_variable_initializer1251.Tree, local_variable_initializer1251, retval);
    				DebugLocation(1391, 30);
    				char_literal1252=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_local_variable_initializer_list10886), "SEMI"); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal1252_tree = (object)adaptor.Create(char_literal1252, retval);
    				adaptor.AddChild(root_0, char_literal1252_tree);
    				}

    				}
    				break;

    			default:
    				if (cnt387 >= 1)
    					goto loop387;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee387 = new EarlyExitException( 387, input );
    				DebugRecognitionException(eee387);
    				throw eee387;
    			}
    			cnt387++;
    		}
    		loop387:
    			;

    		} finally { DebugExitSubRule(387); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 352, local_variable_initializer_list_StartIndex); }
        }
     	DebugLocation(1391, 35);
    	} finally { DebugExitRule(GrammarFileName, "local_variable_initializer_list"); }
    	return retval;

    }
    // $ANTLR end "local_variable_initializer_list"

    public class expression_list_test_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_expression_list_test() {}
    protected virtual void Leave_expression_list_test() {}

    // $ANTLR start "expression_list_test"
    // cs.g:1392:1: expression_list_test : ( expression ';' )+ ;
    [GrammarRule("expression_list_test")]
    public csParser.expression_list_test_return expression_list_test()
    {

        csParser.expression_list_test_return retval = new csParser.expression_list_test_return();
        retval.Start = (IToken)input.LT(1);
        int expression_list_test_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1254=null;
        csParser.expression_return expression1253 = default(csParser.expression_return);

        object char_literal1254_tree=null;

    	try { DebugEnterRule(GrammarFileName, "expression_list_test");
    	DebugLocation(1392, 19);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 353)) { return retval; }
    		// cs.g:1392:21: ( ( expression ';' )+ )
    		DebugEnterAlt(1);
    		// cs.g:1393:2: ( expression ';' )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1393, 2);
    		// cs.g:1393:2: ( expression ';' )+
    		int cnt388=0;
    		try { DebugEnterSubRule(388);
    		while (true)
    		{
    			int alt388=2;
    			try { DebugEnterDecision(388, decisionCanBacktrack[388]);
    			int LA388_0 = input.LA(1);

    			if (((LA388_0>=IDENTIFIER && LA388_0<=NULL)||LA388_0==MINUS||LA388_0==SET||(LA388_0>=90 && LA388_0<=91)||LA388_0==95||(LA388_0>=101 && LA388_0<=107)||(LA388_0>=109 && LA388_0<=111)||(LA388_0>=114 && LA388_0<=122)||(LA388_0>=124 && LA388_0<=129)||(LA388_0>=132 && LA388_0<=144)||(LA388_0>=175 && LA388_0<=187)||LA388_0==199||(LA388_0>=201 && LA388_0<=202)||LA388_0==208||(LA388_0>=225 && LA388_0<=226)))
    			{
    				alt388=1;
    			}


    			} finally { DebugExitDecision(388); }
    			switch (alt388)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:1393:3: expression ';'
    				{
    				DebugLocation(1393, 3);
    				PushFollow(Follow._expression_in_expression_list_test10897);
    				expression1253=expression();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, expression1253.Tree, expression1253, retval);
    				DebugLocation(1393, 14);
    				char_literal1254=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_expression_list_test10899), "SEMI"); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal1254_tree = (object)adaptor.Create(char_literal1254, retval);
    				adaptor.AddChild(root_0, char_literal1254_tree);
    				}

    				}
    				break;

    			default:
    				if (cnt388 >= 1)
    					goto loop388;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee388 = new EarlyExitException( 388, input );
    				DebugRecognitionException(eee388);
    				throw eee388;
    			}
    			cnt388++;
    		}
    		loop388:
    			;

    		} finally { DebugExitSubRule(388); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 353, expression_list_test_StartIndex); }
        }
     	DebugLocation(1393, 19);
    	} finally { DebugExitRule(GrammarFileName, "expression_list_test"); }
    	return retval;

    }
    // $ANTLR end "expression_list_test"

    public class unary_expression_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_unary_expression_list() {}
    protected virtual void Leave_unary_expression_list() {}

    // $ANTLR start "unary_expression_list"
    // cs.g:1394:1: unary_expression_list : ( unary_expression ';' )+ ;
    [GrammarRule("unary_expression_list")]
    public csParser.unary_expression_list_return unary_expression_list()
    {

        csParser.unary_expression_list_return retval = new csParser.unary_expression_list_return();
        retval.Start = (IToken)input.LT(1);
        int unary_expression_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1256=null;
        csParser.unary_expression_return unary_expression1255 = default(csParser.unary_expression_return);

        object char_literal1256_tree=null;

    	try { DebugEnterRule(GrammarFileName, "unary_expression_list");
    	DebugLocation(1394, 25);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 354)) { return retval; }
    		// cs.g:1394:22: ( ( unary_expression ';' )+ )
    		DebugEnterAlt(1);
    		// cs.g:1395:2: ( unary_expression ';' )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1395, 2);
    		// cs.g:1395:2: ( unary_expression ';' )+
    		int cnt389=0;
    		try { DebugEnterSubRule(389);
    		while (true)
    		{
    			int alt389=2;
    			try { DebugEnterDecision(389, decisionCanBacktrack[389]);
    			int LA389_0 = input.LA(1);

    			if (((LA389_0>=IDENTIFIER && LA389_0<=NULL)||LA389_0==MINUS||LA389_0==SET||(LA389_0>=90 && LA389_0<=91)||LA389_0==95||(LA389_0>=101 && LA389_0<=107)||(LA389_0>=109 && LA389_0<=111)||(LA389_0>=114 && LA389_0<=122)||(LA389_0>=124 && LA389_0<=129)||(LA389_0>=132 && LA389_0<=144)||(LA389_0>=175 && LA389_0<=187)||LA389_0==199||(LA389_0>=201 && LA389_0<=202)||LA389_0==208||(LA389_0>=225 && LA389_0<=226)))
    			{
    				alt389=1;
    			}


    			} finally { DebugExitDecision(389); }
    			switch (alt389)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:1395:3: unary_expression ';'
    				{
    				DebugLocation(1395, 3);
    				PushFollow(Follow._unary_expression_in_unary_expression_list10910);
    				unary_expression1255=unary_expression();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, unary_expression1255.Tree, unary_expression1255, retval);
    				DebugLocation(1395, 20);
    				char_literal1256=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_unary_expression_list10912), "SEMI"); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal1256_tree = (object)adaptor.Create(char_literal1256, retval);
    				adaptor.AddChild(root_0, char_literal1256_tree);
    				}

    				}
    				break;

    			default:
    				if (cnt389 >= 1)
    					goto loop389;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee389 = new EarlyExitException( 389, input );
    				DebugRecognitionException(eee389);
    				throw eee389;
    			}
    			cnt389++;
    		}
    		loop389:
    			;

    		} finally { DebugExitSubRule(389); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 354, unary_expression_list_StartIndex); }
        }
     	DebugLocation(1395, 25);
    	} finally { DebugExitRule(GrammarFileName, "unary_expression_list"); }
    	return retval;

    }
    // $ANTLR end "unary_expression_list"

    public class invocation_expression_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_invocation_expression_list() {}
    protected virtual void Leave_invocation_expression_list() {}

    // $ANTLR start "invocation_expression_list"
    // cs.g:1396:1: invocation_expression_list : ( invocation_expression ';' )+ ;
    [GrammarRule("invocation_expression_list")]
    public csParser.invocation_expression_list_return invocation_expression_list()
    {

        csParser.invocation_expression_list_return retval = new csParser.invocation_expression_list_return();
        retval.Start = (IToken)input.LT(1);
        int invocation_expression_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1258=null;
        csParser.invocation_expression_return invocation_expression1257 = default(csParser.invocation_expression_return);

        object char_literal1258_tree=null;

    	try { DebugEnterRule(GrammarFileName, "invocation_expression_list");
    	DebugLocation(1396, 30);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 355)) { return retval; }
    		// cs.g:1396:27: ( ( invocation_expression ';' )+ )
    		DebugEnterAlt(1);
    		// cs.g:1397:2: ( invocation_expression ';' )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1397, 2);
    		// cs.g:1397:2: ( invocation_expression ';' )+
    		int cnt390=0;
    		try { DebugEnterSubRule(390);
    		while (true)
    		{
    			int alt390=2;
    			try { DebugEnterDecision(390, decisionCanBacktrack[390]);
    			int LA390_0 = input.LA(1);

    			if (((LA390_0>=IDENTIFIER && LA390_0<=NULL)||LA390_0==SET||(LA390_0>=90 && LA390_0<=91)||LA390_0==95||(LA390_0>=101 && LA390_0<=107)||(LA390_0>=109 && LA390_0<=110)||(LA390_0>=114 && LA390_0<=122)||(LA390_0>=132 && LA390_0<=137)||(LA390_0>=175 && LA390_0<=187)||LA390_0==199||(LA390_0>=201 && LA390_0<=202)||LA390_0==208||(LA390_0>=225 && LA390_0<=226)))
    			{
    				alt390=1;
    			}


    			} finally { DebugExitDecision(390); }
    			switch (alt390)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:1397:3: invocation_expression ';'
    				{
    				DebugLocation(1397, 3);
    				PushFollow(Follow._invocation_expression_in_invocation_expression_list10923);
    				invocation_expression1257=invocation_expression();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, invocation_expression1257.Tree, invocation_expression1257, retval);
    				DebugLocation(1397, 25);
    				char_literal1258=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_invocation_expression_list10925), "SEMI"); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal1258_tree = (object)adaptor.Create(char_literal1258, retval);
    				adaptor.AddChild(root_0, char_literal1258_tree);
    				}

    				}
    				break;

    			default:
    				if (cnt390 >= 1)
    					goto loop390;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee390 = new EarlyExitException( 390, input );
    				DebugRecognitionException(eee390);
    				throw eee390;
    			}
    			cnt390++;
    		}
    		loop390:
    			;

    		} finally { DebugExitSubRule(390); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 355, invocation_expression_list_StartIndex); }
        }
     	DebugLocation(1397, 30);
    	} finally { DebugExitRule(GrammarFileName, "invocation_expression_list"); }
    	return retval;

    }
    // $ANTLR end "invocation_expression_list"

    public class primary_expression_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_primary_expression_list() {}
    protected virtual void Leave_primary_expression_list() {}

    // $ANTLR start "primary_expression_list"
    // cs.g:1398:1: primary_expression_list : ( primary_expression ';' )+ ;
    [GrammarRule("primary_expression_list")]
    public csParser.primary_expression_list_return primary_expression_list()
    {

        csParser.primary_expression_list_return retval = new csParser.primary_expression_list_return();
        retval.Start = (IToken)input.LT(1);
        int primary_expression_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1260=null;
        csParser.primary_expression_return primary_expression1259 = default(csParser.primary_expression_return);

        object char_literal1260_tree=null;

    	try { DebugEnterRule(GrammarFileName, "primary_expression_list");
    	DebugLocation(1398, 27);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 356)) { return retval; }
    		// cs.g:1398:24: ( ( primary_expression ';' )+ )
    		DebugEnterAlt(1);
    		// cs.g:1399:2: ( primary_expression ';' )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1399, 2);
    		// cs.g:1399:2: ( primary_expression ';' )+
    		int cnt391=0;
    		try { DebugEnterSubRule(391);
    		while (true)
    		{
    			int alt391=2;
    			try { DebugEnterDecision(391, decisionCanBacktrack[391]);
    			int LA391_0 = input.LA(1);

    			if (((LA391_0>=IDENTIFIER && LA391_0<=NULL)||LA391_0==SET||(LA391_0>=90 && LA391_0<=91)||LA391_0==95||(LA391_0>=101 && LA391_0<=107)||(LA391_0>=109 && LA391_0<=110)||(LA391_0>=114 && LA391_0<=122)||(LA391_0>=132 && LA391_0<=144)||(LA391_0>=175 && LA391_0<=187)||LA391_0==199||(LA391_0>=201 && LA391_0<=202)||LA391_0==208||(LA391_0>=225 && LA391_0<=226)))
    			{
    				alt391=1;
    			}


    			} finally { DebugExitDecision(391); }
    			switch (alt391)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:1399:3: primary_expression ';'
    				{
    				DebugLocation(1399, 3);
    				PushFollow(Follow._primary_expression_in_primary_expression_list10936);
    				primary_expression1259=primary_expression();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, primary_expression1259.Tree, primary_expression1259, retval);
    				DebugLocation(1399, 22);
    				char_literal1260=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_primary_expression_list10938), "SEMI"); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal1260_tree = (object)adaptor.Create(char_literal1260, retval);
    				adaptor.AddChild(root_0, char_literal1260_tree);
    				}

    				}
    				break;

    			default:
    				if (cnt391 >= 1)
    					goto loop391;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee391 = new EarlyExitException( 391, input );
    				DebugRecognitionException(eee391);
    				throw eee391;
    			}
    			cnt391++;
    		}
    		loop391:
    			;

    		} finally { DebugExitSubRule(391); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 356, primary_expression_list_StartIndex); }
        }
     	DebugLocation(1399, 27);
    	} finally { DebugExitRule(GrammarFileName, "primary_expression_list"); }
    	return retval;

    }
    // $ANTLR end "primary_expression_list"

    public class static_constructor_modifiers_list_return : XParserRuleReturnScope, IAstRuleReturnScope<object>
    {
    	private object _tree;
    	public object Tree { get { return _tree; } set { _tree = value; } }
    }

    protected virtual void Enter_static_constructor_modifiers_list() {}
    protected virtual void Leave_static_constructor_modifiers_list() {}

    // $ANTLR start "static_constructor_modifiers_list"
    // cs.g:1400:1: static_constructor_modifiers_list : ( static_constructor_modifiers ';' )+ ;
    [GrammarRule("static_constructor_modifiers_list")]
    public csParser.static_constructor_modifiers_list_return static_constructor_modifiers_list()
    {

        csParser.static_constructor_modifiers_list_return retval = new csParser.static_constructor_modifiers_list_return();
        retval.Start = (IToken)input.LT(1);
        int static_constructor_modifiers_list_StartIndex = input.Index;
        object root_0 = null;

        IToken char_literal1262=null;
        csParser.static_constructor_modifiers_return static_constructor_modifiers1261 = default(csParser.static_constructor_modifiers_return);

        object char_literal1262_tree=null;

    	try { DebugEnterRule(GrammarFileName, "static_constructor_modifiers_list");
    	DebugLocation(1400, 37);
    	try
    	{
    		if (state.backtracking > 0 && AlreadyParsedRule(input, 357)) { return retval; }
    		// cs.g:1400:34: ( ( static_constructor_modifiers ';' )+ )
    		DebugEnterAlt(1);
    		// cs.g:1401:2: ( static_constructor_modifiers ';' )+
    		{
    		root_0 = (object)adaptor.Nil();

    		DebugLocation(1401, 2);
    		// cs.g:1401:2: ( static_constructor_modifiers ';' )+
    		int cnt392=0;
    		try { DebugEnterSubRule(392);
    		while (true)
    		{
    			int alt392=2;
    			try { DebugEnterDecision(392, decisionCanBacktrack[392]);
    			int LA392_0 = input.LA(1);

    			if ((LA392_0==94||LA392_0==174||LA392_0==192))
    			{
    				alt392=1;
    			}


    			} finally { DebugExitDecision(392); }
    			switch (alt392)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:1401:3: static_constructor_modifiers ';'
    				{
    				DebugLocation(1401, 3);
    				PushFollow(Follow._static_constructor_modifiers_in_static_constructor_modifiers_list10949);
    				static_constructor_modifiers1261=static_constructor_modifiers();
    				PopFollow();
    				if (state.failed) return retval;
    				if ( (state.backtracking==0) ) adaptor.AddChild(root_0, static_constructor_modifiers1261.Tree, static_constructor_modifiers1261, retval);
    				DebugLocation(1401, 32);
    				char_literal1262=(IToken)new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_static_constructor_modifiers_list10951), "SEMI"); if (state.failed) return retval;
    				if ( state.backtracking==0 ) {
    				char_literal1262_tree = (object)adaptor.Create(char_literal1262, retval);
    				adaptor.AddChild(root_0, char_literal1262_tree);
    				}

    				}
    				break;

    			default:
    				if (cnt392 >= 1)
    					goto loop392;

    				if (state.backtracking>0) {state.failed=true; return retval;}
    				EarlyExitException eee392 = new EarlyExitException( 392, input );
    				DebugRecognitionException(eee392);
    				throw eee392;
    			}
    			cnt392++;
    		}
    		loop392:
    			;

    		} finally { DebugExitSubRule(392); }


    		}

    		retval.Stop = (IToken)input.LT(-1);

    		if ( (state.backtracking==0) ) {

    		retval.Tree = (object)adaptor.RulePostProcessing(root_0);
    		adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
    		}
    	}
    	catch (RecognitionException re)
    	{
    		ReportError(re);
    		Recover(input,re);
    	retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

    	}
    	finally
    	{
            if (state.backtracking > 0) { Memoize(input, 357, static_constructor_modifiers_list_StartIndex); }
        }
     	DebugLocation(1401, 37);
    	} finally { DebugExitRule(GrammarFileName, "static_constructor_modifiers_list"); }
    	return retval;

    }
    // $ANTLR end "static_constructor_modifiers_list"

    protected virtual void Enter_synpred1_cs_fragment() {}
    protected virtual void Leave_synpred1_cs_fragment() {}

    // $ANTLR start synpred1_cs
    public void synpred1_cs_fragment()
    {
    	// cs.g:78:2: ( using_directives )
    	DebugEnterAlt(1);
    	// cs.g:78:2: using_directives
    	{
    	DebugLocation(78, 2);
    	PushFollow(Follow._using_directives_in_synpred1_cs192);
    	using_directives();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred1_cs

    protected virtual void Enter_synpred3_cs_fragment() {}
    protected virtual void Leave_synpred3_cs_fragment() {}

    // $ANTLR start synpred3_cs
    public void synpred3_cs_fragment()
    {
    	// cs.g:80:2: ( namespace_declaration )
    	DebugEnterAlt(1);
    	// cs.g:80:2: namespace_declaration
    	{
    	DebugLocation(80, 2);
    	PushFollow(Follow._namespace_declaration_in_synpred3_cs206);
    	namespace_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred3_cs

    protected virtual void Enter_synpred8_cs_fragment() {}
    protected virtual void Leave_synpred8_cs_fragment() {}

    // $ANTLR start synpred8_cs
    public void synpred8_cs_fragment()
    {
    	// cs.g:92:32: ( generic_argument_list )
    	DebugEnterAlt(1);
    	// cs.g:92:32: generic_argument_list
    	{
    	DebugLocation(92, 32);
    	PushFollow(Follow._generic_argument_list_in_synpred8_cs281);
    	generic_argument_list();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred8_cs

    protected virtual void Enter_synpred13_cs_fragment() {}
    protected virtual void Leave_synpred13_cs_fragment() {}

    // $ANTLR start synpred13_cs
    public void synpred13_cs_fragment()
    {
    	// cs.g:98:33: ( generic_argument_list )
    	DebugEnterAlt(1);
    	// cs.g:98:33: generic_argument_list
    	{
    	DebugLocation(98, 33);
    	PushFollow(Follow._generic_argument_list_in_synpred13_cs320);
    	generic_argument_list();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred13_cs

    protected virtual void Enter_synpred18_cs_fragment() {}
    protected virtual void Leave_synpred18_cs_fragment() {}

    // $ANTLR start synpred18_cs
    public void synpred18_cs_fragment()
    {
    	// cs.g:110:2: ( using_directive )
    	DebugEnterAlt(1);
    	// cs.g:110:2: using_directive
    	{
    	DebugLocation(110, 2);
    	PushFollow(Follow._using_directive_in_synpred18_cs394);
    	using_directive();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred18_cs

    protected virtual void Enter_synpred22_cs_fragment() {}
    protected virtual void Leave_synpred22_cs_fragment() {}

    // $ANTLR start synpred22_cs
    public void synpred22_cs_fragment()
    {
    	// cs.g:125:2: ( class_declaration )
    	DebugEnterAlt(1);
    	// cs.g:125:2: class_declaration
    	{
    	DebugLocation(125, 2);
    	PushFollow(Follow._class_declaration_in_synpred22_cs481);
    	class_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred22_cs

    protected virtual void Enter_synpred23_cs_fragment() {}
    protected virtual void Leave_synpred23_cs_fragment() {}

    // $ANTLR start synpred23_cs
    public void synpred23_cs_fragment()
    {
    	// cs.g:126:4: ( struct_declaration )
    	DebugEnterAlt(1);
    	// cs.g:126:4: struct_declaration
    	{
    	DebugLocation(126, 4);
    	PushFollow(Follow._struct_declaration_in_synpred23_cs486);
    	struct_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred23_cs

    protected virtual void Enter_synpred24_cs_fragment() {}
    protected virtual void Leave_synpred24_cs_fragment() {}

    // $ANTLR start synpred24_cs
    public void synpred24_cs_fragment()
    {
    	// cs.g:127:4: ( interface_declaration )
    	DebugEnterAlt(1);
    	// cs.g:127:4: interface_declaration
    	{
    	DebugLocation(127, 4);
    	PushFollow(Follow._interface_declaration_in_synpred24_cs491);
    	interface_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred24_cs

    protected virtual void Enter_synpred25_cs_fragment() {}
    protected virtual void Leave_synpred25_cs_fragment() {}

    // $ANTLR start synpred25_cs
    public void synpred25_cs_fragment()
    {
    	// cs.g:128:4: ( enum_declaration )
    	DebugEnterAlt(1);
    	// cs.g:128:4: enum_declaration
    	{
    	DebugLocation(128, 4);
    	PushFollow(Follow._enum_declaration_in_synpred25_cs496);
    	enum_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred25_cs

    protected virtual void Enter_synpred47_cs_fragment() {}
    protected virtual void Leave_synpred47_cs_fragment() {}

    // $ANTLR start synpred47_cs
    public void synpred47_cs_fragment()
    {
    	// cs.g:168:2: ( '(' ( positional_argument_list )? ')' )
    	DebugEnterAlt(1);
    	// cs.g:168:2: '(' ( positional_argument_list )? ')'
    	{
    	DebugLocation(168, 2);
    	Match(input,110,Follow._110_in_synpred47_cs831); if (state.failed) return;
    	DebugLocation(168, 8);
    	// cs.g:168:8: ( positional_argument_list )?
    	int alt397=2;
    	try { DebugEnterSubRule(397);
    	try { DebugEnterDecision(397, decisionCanBacktrack[397]);
    	int LA397_0 = input.LA(1);

    	if (((LA397_0>=IDENTIFIER && LA397_0<=NULL)||LA397_0==MINUS||LA397_0==SET||(LA397_0>=90 && LA397_0<=91)||LA397_0==95||(LA397_0>=101 && LA397_0<=107)||(LA397_0>=109 && LA397_0<=111)||(LA397_0>=114 && LA397_0<=122)||(LA397_0>=124 && LA397_0<=129)||(LA397_0>=132 && LA397_0<=144)||(LA397_0>=175 && LA397_0<=187)||LA397_0==199||(LA397_0>=201 && LA397_0<=202)||LA397_0==208||(LA397_0>=225 && LA397_0<=226)))
    	{
    		alt397=1;
    	}
    	} finally { DebugExitDecision(397); }
    	switch (alt397)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:0:0: positional_argument_list
    		{
    		DebugLocation(168, 8);
    		PushFollow(Follow._positional_argument_list_in_synpred47_cs835);
    		positional_argument_list();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;

    	}
    	} finally { DebugExitSubRule(397); }

    	DebugLocation(168, 35);
    	new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_synpred47_cs839), "RPAREN"); if (state.failed) return;

    	}
    }
    // $ANTLR end synpred47_cs

    protected virtual void Enter_synpred48_cs_fragment() {}
    protected virtual void Leave_synpred48_cs_fragment() {}

    // $ANTLR start synpred48_cs
    public void synpred48_cs_fragment()
    {
    	// cs.g:169:4: ( '(' positional_argument_list ',' named_argument_list ')' )
    	DebugEnterAlt(1);
    	// cs.g:169:4: '(' positional_argument_list ',' named_argument_list ')'
    	{
    	DebugLocation(169, 4);
    	Match(input,110,Follow._110_in_synpred48_cs845); if (state.failed) return;
    	DebugLocation(169, 10);
    	PushFollow(Follow._positional_argument_list_in_synpred48_cs849);
    	positional_argument_list();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(169, 37);
    	Match(input,98,Follow._98_in_synpred48_cs853); if (state.failed) return;
    	DebugLocation(169, 43);
    	PushFollow(Follow._named_argument_list_in_synpred48_cs857);
    	named_argument_list();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(169, 65);
    	new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_synpred48_cs861), "RPAREN"); if (state.failed) return;

    	}
    }
    // $ANTLR end synpred48_cs

    protected virtual void Enter_synpred49_cs_fragment() {}
    protected virtual void Leave_synpred49_cs_fragment() {}

    // $ANTLR start synpred49_cs
    public void synpred49_cs_fragment()
    {
    	List list_pa=null;
    	csParser.positional_argument_return pa = default(csParser.positional_argument_return);
    	// cs.g:172:29: ( ',' pa+= positional_argument )
    	DebugEnterAlt(1);
    	// cs.g:172:29: ',' pa+= positional_argument
    	{
    	DebugLocation(172, 29);
    	Match(input,98,Follow._98_in_synpred49_cs891); if (state.failed) return;
    	DebugLocation(172, 36);
    	PushFollow(Follow._positional_argument_in_synpred49_cs897);
    	pa=positional_argument();
    	PopFollow();
    	if (state.failed) return;
    	if (list_pa==null) list_pa=new ArrayList();
    	list_pa.Add(pa);


    	}
    }
    // $ANTLR end synpred49_cs

    protected virtual void Enter_synpred53_cs_fragment() {}
    protected virtual void Leave_synpred53_cs_fragment() {}

    // $ANTLR start synpred53_cs
    public void synpred53_cs_fragment()
    {
    	// cs.g:188:2: ( ( type_name | predefined_type ) rank_specifiers ( '*' )* )
    	DebugEnterAlt(1);
    	// cs.g:188:2: ( type_name | predefined_type ) rank_specifiers ( '*' )*
    	{
    	DebugLocation(188, 2);
    	// cs.g:188:2: ( type_name | predefined_type )
    	int alt398=2;
    	try { DebugEnterSubRule(398);
    	try { DebugEnterDecision(398, decisionCanBacktrack[398]);
    	int LA398_0 = input.LA(1);

    	if ((LA398_0==IDENTIFIER||LA398_0==SET||LA398_0==95||(LA398_0>=101 && LA398_0<=107)||LA398_0==109||(LA398_0>=175 && LA398_0<=187)||LA398_0==199||(LA398_0>=201 && LA398_0<=202)||LA398_0==208||(LA398_0>=225 && LA398_0<=226)))
    	{
    		alt398=1;
    	}
    	else if (((LA398_0>=114 && LA398_0<=122)||(LA398_0>=132 && LA398_0<=137)))
    	{
    		alt398=2;
    	}
    	else
    	{
    		if (state.backtracking>0) {state.failed=true; return;}
    		NoViableAltException nvae = new NoViableAltException("", 398, 0, input);

    		DebugRecognitionException(nvae);
    		throw nvae;
    	}
    	} finally { DebugExitDecision(398); }
    	switch (alt398)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:188:3: type_name
    		{
    		DebugLocation(188, 3);
    		PushFollow(Follow._type_name_in_synpred53_cs976);
    		type_name();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// cs.g:188:19: predefined_type
    		{
    		DebugLocation(188, 19);
    		PushFollow(Follow._predefined_type_in_synpred53_cs984);
    		predefined_type();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;

    	}
    	} finally { DebugExitSubRule(398); }

    	DebugLocation(188, 38);
    	PushFollow(Follow._rank_specifiers_in_synpred53_cs989);
    	rank_specifiers();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(188, 56);
    	// cs.g:188:56: ( '*' )*
    	try { DebugEnterSubRule(399);
    	while (true)
    	{
    		int alt399=2;
    		try { DebugEnterDecision(399, decisionCanBacktrack[399]);
    		int LA399_0 = input.LA(1);

    		if ((LA399_0==111))
    		{
    			alt399=1;
    		}


    		} finally { DebugExitDecision(399); }
    		switch ( alt399 )
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: '*'
    			{
    			DebugLocation(188, 56);
    			Match(input,111,Follow._111_in_synpred53_cs993); if (state.failed) return;

    			}
    			break;

    		default:
    			goto loop399;
    		}
    	}

    	loop399:
    		;

    	} finally { DebugExitSubRule(399); }


    	}
    }
    // $ANTLR end synpred53_cs

    protected virtual void Enter_synpred55_cs_fragment() {}
    protected virtual void Leave_synpred55_cs_fragment() {}

    // $ANTLR start synpred55_cs
    public void synpred55_cs_fragment()
    {
    	// cs.g:189:4: ( type_name ( '*' )+ )
    	DebugEnterAlt(1);
    	// cs.g:189:4: type_name ( '*' )+
    	{
    	DebugLocation(189, 4);
    	PushFollow(Follow._type_name_in_synpred55_cs999);
    	type_name();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(189, 14);
    	// cs.g:189:14: ( '*' )+
    	int cnt400=0;
    	try { DebugEnterSubRule(400);
    	while (true)
    	{
    		int alt400=2;
    		try { DebugEnterDecision(400, decisionCanBacktrack[400]);
    		int LA400_0 = input.LA(1);

    		if ((LA400_0==111))
    		{
    			alt400=1;
    		}


    		} finally { DebugExitDecision(400); }
    		switch (alt400)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: '*'
    			{
    			DebugLocation(189, 14);
    			Match(input,111,Follow._111_in_synpred55_cs1001); if (state.failed) return;

    			}
    			break;

    		default:
    			if (cnt400 >= 1)
    				goto loop400;

    			if (state.backtracking>0) {state.failed=true; return;}
    			EarlyExitException eee400 = new EarlyExitException( 400, input );
    			DebugRecognitionException(eee400);
    			throw eee400;
    		}
    		cnt400++;
    	}
    	loop400:
    		;

    	} finally { DebugExitSubRule(400); }


    	}
    }
    // $ANTLR end synpred55_cs

    protected virtual void Enter_synpred56_cs_fragment() {}
    protected virtual void Leave_synpred56_cs_fragment() {}

    // $ANTLR start synpred56_cs
    public void synpred56_cs_fragment()
    {
    	// cs.g:190:4: ( type_name '?' )
    	DebugEnterAlt(1);
    	// cs.g:190:4: type_name '?'
    	{
    	DebugLocation(190, 4);
    	PushFollow(Follow._type_name_in_synpred56_cs1007);
    	type_name();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(190, 14);
    	Match(input,112,Follow._112_in_synpred56_cs1009); if (state.failed) return;

    	}
    }
    // $ANTLR end synpred56_cs

    protected virtual void Enter_synpred57_cs_fragment() {}
    protected virtual void Leave_synpred57_cs_fragment() {}

    // $ANTLR start synpred57_cs
    public void synpred57_cs_fragment()
    {
    	// cs.g:191:4: ( type_name )
    	DebugEnterAlt(1);
    	// cs.g:191:4: type_name
    	{
    	DebugLocation(191, 4);
    	PushFollow(Follow._type_name_in_synpred57_cs1014);
    	type_name();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred57_cs

    protected virtual void Enter_synpred59_cs_fragment() {}
    protected virtual void Leave_synpred59_cs_fragment() {}

    // $ANTLR start synpred59_cs
    public void synpred59_cs_fragment()
    {
    	// cs.g:192:4: ( predefined_type ( '*' )+ )
    	DebugEnterAlt(1);
    	// cs.g:192:4: predefined_type ( '*' )+
    	{
    	DebugLocation(192, 4);
    	PushFollow(Follow._predefined_type_in_synpred59_cs1019);
    	predefined_type();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(192, 20);
    	// cs.g:192:20: ( '*' )+
    	int cnt401=0;
    	try { DebugEnterSubRule(401);
    	while (true)
    	{
    		int alt401=2;
    		try { DebugEnterDecision(401, decisionCanBacktrack[401]);
    		int LA401_0 = input.LA(1);

    		if ((LA401_0==111))
    		{
    			alt401=1;
    		}


    		} finally { DebugExitDecision(401); }
    		switch (alt401)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: '*'
    			{
    			DebugLocation(192, 20);
    			Match(input,111,Follow._111_in_synpred59_cs1021); if (state.failed) return;

    			}
    			break;

    		default:
    			if (cnt401 >= 1)
    				goto loop401;

    			if (state.backtracking>0) {state.failed=true; return;}
    			EarlyExitException eee401 = new EarlyExitException( 401, input );
    			DebugRecognitionException(eee401);
    			throw eee401;
    		}
    		cnt401++;
    	}
    	loop401:
    		;

    	} finally { DebugExitSubRule(401); }


    	}
    }
    // $ANTLR end synpred59_cs

    protected virtual void Enter_synpred60_cs_fragment() {}
    protected virtual void Leave_synpred60_cs_fragment() {}

    // $ANTLR start synpred60_cs
    public void synpred60_cs_fragment()
    {
    	// cs.g:193:4: ( predefined_type '?' )
    	DebugEnterAlt(1);
    	// cs.g:193:4: predefined_type '?'
    	{
    	DebugLocation(193, 4);
    	PushFollow(Follow._predefined_type_in_synpred60_cs1027);
    	predefined_type();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(193, 20);
    	Match(input,112,Follow._112_in_synpred60_cs1029); if (state.failed) return;

    	}
    }
    // $ANTLR end synpred60_cs

    protected virtual void Enter_synpred61_cs_fragment() {}
    protected virtual void Leave_synpred61_cs_fragment() {}

    // $ANTLR start synpred61_cs
    public void synpred61_cs_fragment()
    {
    	// cs.g:194:4: ( predefined_type )
    	DebugEnterAlt(1);
    	// cs.g:194:4: predefined_type
    	{
    	DebugLocation(194, 4);
    	PushFollow(Follow._predefined_type_in_synpred61_cs1034);
    	predefined_type();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred61_cs

    protected virtual void Enter_synpred64_cs_fragment() {}
    protected virtual void Leave_synpred64_cs_fragment() {}

    // $ANTLR start synpred64_cs
    public void synpred64_cs_fragment()
    {
    	// cs.g:197:56: ( '*' )
    	DebugEnterAlt(1);
    	// cs.g:197:56: '*'
    	{
    	DebugLocation(197, 56);
    	Match(input,111,Follow._111_in_synpred64_cs1070); if (state.failed) return;

    	}
    }
    // $ANTLR end synpred64_cs

    protected virtual void Enter_synpred65_cs_fragment() {}
    protected virtual void Leave_synpred65_cs_fragment() {}

    // $ANTLR start synpred65_cs
    public void synpred65_cs_fragment()
    {
    	// cs.g:197:2: ( ( type_name | predefined_type ) rank_specifiers ( '*' )* )
    	DebugEnterAlt(1);
    	// cs.g:197:2: ( type_name | predefined_type ) rank_specifiers ( '*' )*
    	{
    	DebugLocation(197, 2);
    	// cs.g:197:2: ( type_name | predefined_type )
    	int alt402=2;
    	try { DebugEnterSubRule(402);
    	try { DebugEnterDecision(402, decisionCanBacktrack[402]);
    	int LA402_0 = input.LA(1);

    	if ((LA402_0==IDENTIFIER||LA402_0==SET||LA402_0==95||(LA402_0>=101 && LA402_0<=107)||LA402_0==109||(LA402_0>=175 && LA402_0<=187)||LA402_0==199||(LA402_0>=201 && LA402_0<=202)||LA402_0==208||(LA402_0>=225 && LA402_0<=226)))
    	{
    		alt402=1;
    	}
    	else if (((LA402_0>=114 && LA402_0<=122)||(LA402_0>=132 && LA402_0<=137)))
    	{
    		alt402=2;
    	}
    	else
    	{
    		if (state.backtracking>0) {state.failed=true; return;}
    		NoViableAltException nvae = new NoViableAltException("", 402, 0, input);

    		DebugRecognitionException(nvae);
    		throw nvae;
    	}
    	} finally { DebugExitDecision(402); }
    	switch (alt402)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:197:3: type_name
    		{
    		DebugLocation(197, 3);
    		PushFollow(Follow._type_name_in_synpred65_cs1053);
    		type_name();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// cs.g:197:19: predefined_type
    		{
    		DebugLocation(197, 19);
    		PushFollow(Follow._predefined_type_in_synpred65_cs1061);
    		predefined_type();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;

    	}
    	} finally { DebugExitSubRule(402); }

    	DebugLocation(197, 38);
    	PushFollow(Follow._rank_specifiers_in_synpred65_cs1066);
    	rank_specifiers();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(197, 56);
    	// cs.g:197:56: ( '*' )*
    	try { DebugEnterSubRule(403);
    	while (true)
    	{
    		int alt403=2;
    		try { DebugEnterDecision(403, decisionCanBacktrack[403]);
    		int LA403_0 = input.LA(1);

    		if ((LA403_0==111))
    		{
    			alt403=1;
    		}


    		} finally { DebugExitDecision(403); }
    		switch ( alt403 )
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: '*'
    			{
    			DebugLocation(197, 56);
    			Match(input,111,Follow._111_in_synpred65_cs1070); if (state.failed) return;

    			}
    			break;

    		default:
    			goto loop403;
    		}
    	}

    	loop403:
    		;

    	} finally { DebugExitSubRule(403); }


    	}
    }
    // $ANTLR end synpred65_cs

    protected virtual void Enter_synpred66_cs_fragment() {}
    protected virtual void Leave_synpred66_cs_fragment() {}

    // $ANTLR start synpred66_cs
    public void synpred66_cs_fragment()
    {
    	// cs.g:198:14: ( '*' )
    	DebugEnterAlt(1);
    	// cs.g:198:14: '*'
    	{
    	DebugLocation(198, 14);
    	Match(input,111,Follow._111_in_synpred66_cs1078); if (state.failed) return;

    	}
    }
    // $ANTLR end synpred66_cs

    protected virtual void Enter_synpred67_cs_fragment() {}
    protected virtual void Leave_synpred67_cs_fragment() {}

    // $ANTLR start synpred67_cs
    public void synpred67_cs_fragment()
    {
    	// cs.g:198:4: ( type_name ( '*' )+ )
    	DebugEnterAlt(1);
    	// cs.g:198:4: type_name ( '*' )+
    	{
    	DebugLocation(198, 4);
    	PushFollow(Follow._type_name_in_synpred67_cs1076);
    	type_name();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(198, 14);
    	// cs.g:198:14: ( '*' )+
    	int cnt404=0;
    	try { DebugEnterSubRule(404);
    	while (true)
    	{
    		int alt404=2;
    		try { DebugEnterDecision(404, decisionCanBacktrack[404]);
    		int LA404_0 = input.LA(1);

    		if ((LA404_0==111))
    		{
    			alt404=1;
    		}


    		} finally { DebugExitDecision(404); }
    		switch (alt404)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: '*'
    			{
    			DebugLocation(198, 14);
    			Match(input,111,Follow._111_in_synpred67_cs1078); if (state.failed) return;

    			}
    			break;

    		default:
    			if (cnt404 >= 1)
    				goto loop404;

    			if (state.backtracking>0) {state.failed=true; return;}
    			EarlyExitException eee404 = new EarlyExitException( 404, input );
    			DebugRecognitionException(eee404);
    			throw eee404;
    		}
    		cnt404++;
    	}
    	loop404:
    		;

    	} finally { DebugExitSubRule(404); }


    	}
    }
    // $ANTLR end synpred67_cs

    protected virtual void Enter_synpred68_cs_fragment() {}
    protected virtual void Leave_synpred68_cs_fragment() {}

    // $ANTLR start synpred68_cs
    public void synpred68_cs_fragment()
    {
    	// cs.g:199:4: ( type_name )
    	DebugEnterAlt(1);
    	// cs.g:199:4: type_name
    	{
    	DebugLocation(199, 4);
    	PushFollow(Follow._type_name_in_synpred68_cs1084);
    	type_name();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred68_cs

    protected virtual void Enter_synpred69_cs_fragment() {}
    protected virtual void Leave_synpred69_cs_fragment() {}

    // $ANTLR start synpred69_cs
    public void synpred69_cs_fragment()
    {
    	// cs.g:200:20: ( '*' )
    	DebugEnterAlt(1);
    	// cs.g:200:20: '*'
    	{
    	DebugLocation(200, 20);
    	Match(input,111,Follow._111_in_synpred69_cs1091); if (state.failed) return;

    	}
    }
    // $ANTLR end synpred69_cs

    protected virtual void Enter_synpred70_cs_fragment() {}
    protected virtual void Leave_synpred70_cs_fragment() {}

    // $ANTLR start synpred70_cs
    public void synpred70_cs_fragment()
    {
    	// cs.g:200:4: ( predefined_type ( '*' )+ )
    	DebugEnterAlt(1);
    	// cs.g:200:4: predefined_type ( '*' )+
    	{
    	DebugLocation(200, 4);
    	PushFollow(Follow._predefined_type_in_synpred70_cs1089);
    	predefined_type();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(200, 20);
    	// cs.g:200:20: ( '*' )+
    	int cnt405=0;
    	try { DebugEnterSubRule(405);
    	while (true)
    	{
    		int alt405=2;
    		try { DebugEnterDecision(405, decisionCanBacktrack[405]);
    		int LA405_0 = input.LA(1);

    		if ((LA405_0==111))
    		{
    			alt405=1;
    		}


    		} finally { DebugExitDecision(405); }
    		switch (alt405)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: '*'
    			{
    			DebugLocation(200, 20);
    			Match(input,111,Follow._111_in_synpred70_cs1091); if (state.failed) return;

    			}
    			break;

    		default:
    			if (cnt405 >= 1)
    				goto loop405;

    			if (state.backtracking>0) {state.failed=true; return;}
    			EarlyExitException eee405 = new EarlyExitException( 405, input );
    			DebugRecognitionException(eee405);
    			throw eee405;
    		}
    		cnt405++;
    	}
    	loop405:
    		;

    	} finally { DebugExitSubRule(405); }


    	}
    }
    // $ANTLR end synpred70_cs

    protected virtual void Enter_synpred71_cs_fragment() {}
    protected virtual void Leave_synpred71_cs_fragment() {}

    // $ANTLR start synpred71_cs
    public void synpred71_cs_fragment()
    {
    	// cs.g:201:4: ( predefined_type )
    	DebugEnterAlt(1);
    	// cs.g:201:4: predefined_type
    	{
    	DebugLocation(201, 4);
    	PushFollow(Follow._predefined_type_in_synpred71_cs1097);
    	predefined_type();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred71_cs

    protected virtual void Enter_synpred72_cs_fragment() {}
    protected virtual void Leave_synpred72_cs_fragment() {}

    // $ANTLR start synpred72_cs
    public void synpred72_cs_fragment()
    {
    	// cs.g:202:13: ( '*' )
    	DebugEnterAlt(1);
    	// cs.g:202:13: '*'
    	{
    	DebugLocation(202, 13);
    	Match(input,111,Follow._111_in_synpred72_cs1106); if (state.failed) return;

    	}
    }
    // $ANTLR end synpred72_cs

    protected virtual void Enter_synpred86_cs_fragment() {}
    protected virtual void Leave_synpred86_cs_fragment() {}

    // $ANTLR start synpred86_cs
    public void synpred86_cs_fragment()
    {
    	// cs.g:236:2: ( non_assignment_expression )
    	DebugEnterAlt(1);
    	// cs.g:236:2: non_assignment_expression
    	{
    	DebugLocation(236, 2);
    	PushFollow(Follow._non_assignment_expression_in_synpred86_cs1319);
    	non_assignment_expression();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred86_cs

    protected virtual void Enter_synpred87_cs_fragment() {}
    protected virtual void Leave_synpred87_cs_fragment() {}

    // $ANTLR start synpred87_cs
    public void synpred87_cs_fragment()
    {
    	// cs.g:239:2: ( cast_expression )
    	DebugEnterAlt(1);
    	// cs.g:239:2: cast_expression
    	{
    	DebugLocation(239, 2);
    	PushFollow(Follow._cast_expression_in_synpred87_cs1332);
    	cast_expression();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred87_cs

    protected virtual void Enter_synpred92_cs_fragment() {}
    protected virtual void Leave_synpred92_cs_fragment() {}

    // $ANTLR start synpred92_cs
    public void synpred92_cs_fragment()
    {
    	// cs.g:244:4: ( '*' unary_expression )
    	DebugEnterAlt(1);
    	// cs.g:244:4: '*' unary_expression
    	{
    	DebugLocation(244, 4);
    	Match(input,111,Follow._111_in_synpred92_cs1381); if (state.failed) return;
    	DebugLocation(244, 10);
    	PushFollow(Follow._unary_expression_in_synpred92_cs1385);
    	unary_expression();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred92_cs

    protected virtual void Enter_synpred95_cs_fragment() {}
    protected virtual void Leave_synpred95_cs_fragment() {}

    // $ANTLR start synpred95_cs
    public void synpred95_cs_fragment()
    {
    	// cs.g:247:43: ( '++' )
    	DebugEnterAlt(1);
    	// cs.g:247:43: '++'
    	{
    	DebugLocation(247, 43);
    	Match(input,127,Follow._127_in_synpred95_cs1406); if (state.failed) return;

    	}
    }
    // $ANTLR end synpred95_cs

    protected virtual void Enter_synpred96_cs_fragment() {}
    protected virtual void Leave_synpred96_cs_fragment() {}

    // $ANTLR start synpred96_cs
    public void synpred96_cs_fragment()
    {
    	// cs.g:247:51: ( '--' )
    	DebugEnterAlt(1);
    	// cs.g:247:51: '--'
    	{
    	DebugLocation(247, 51);
    	Match(input,128,Follow._128_in_synpred96_cs1411); if (state.failed) return;

    	}
    }
    // $ANTLR end synpred96_cs

    protected virtual void Enter_synpred97_cs_fragment() {}
    protected virtual void Leave_synpred97_cs_fragment() {}

    // $ANTLR start synpred97_cs
    public void synpred97_cs_fragment()
    {
    	// cs.g:247:4: ( primary_or_array_creation_expression ( '++' )? ( '--' )? )
    	DebugEnterAlt(1);
    	// cs.g:247:4: primary_or_array_creation_expression ( '++' )? ( '--' )?
    	{
    	DebugLocation(247, 4);
    	PushFollow(Follow._primary_or_array_creation_expression_in_synpred97_cs1402);
    	primary_or_array_creation_expression();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(247, 43);
    	// cs.g:247:43: ( '++' )?
    	int alt406=2;
    	try { DebugEnterSubRule(406);
    	try { DebugEnterDecision(406, decisionCanBacktrack[406]);
    	int LA406_0 = input.LA(1);

    	if ((LA406_0==127))
    	{
    		alt406=1;
    	}
    	} finally { DebugExitDecision(406); }
    	switch (alt406)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:0:0: '++'
    		{
    		DebugLocation(247, 43);
    		Match(input,127,Follow._127_in_synpred97_cs1406); if (state.failed) return;

    		}
    		break;

    	}
    	} finally { DebugExitSubRule(406); }

    	DebugLocation(247, 51);
    	// cs.g:247:51: ( '--' )?
    	int alt407=2;
    	try { DebugEnterSubRule(407);
    	try { DebugEnterDecision(407, decisionCanBacktrack[407]);
    	int LA407_0 = input.LA(1);

    	if ((LA407_0==128))
    	{
    		alt407=1;
    	}
    	} finally { DebugExitDecision(407); }
    	switch (alt407)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:0:0: '--'
    		{
    		DebugLocation(247, 51);
    		Match(input,128,Follow._128_in_synpred97_cs1411); if (state.failed) return;

    		}
    		break;

    	}
    	} finally { DebugExitSubRule(407); }


    	}
    }
    // $ANTLR end synpred97_cs

    protected virtual void Enter_synpred98_cs_fragment() {}
    protected virtual void Leave_synpred98_cs_fragment() {}

    // $ANTLR start synpred98_cs
    public void synpred98_cs_fragment()
    {
    	// cs.g:248:4: ( pointer_indirection_expression )
    	DebugEnterAlt(1);
    	// cs.g:248:4: pointer_indirection_expression
    	{
    	DebugLocation(248, 4);
    	PushFollow(Follow._pointer_indirection_expression_in_synpred98_cs1417);
    	pointer_indirection_expression();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred98_cs

    protected virtual void Enter_synpred99_cs_fragment() {}
    protected virtual void Leave_synpred99_cs_fragment() {}

    // $ANTLR start synpred99_cs
    public void synpred99_cs_fragment()
    {
    	// cs.g:259:2: ( conditional_expression )
    	DebugEnterAlt(1);
    	// cs.g:259:2: conditional_expression
    	{
    	DebugLocation(259, 2);
    	PushFollow(Follow._conditional_expression_in_synpred99_cs1480);
    	conditional_expression();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred99_cs

    protected virtual void Enter_synpred100_cs_fragment() {}
    protected virtual void Leave_synpred100_cs_fragment() {}

    // $ANTLR start synpred100_cs
    public void synpred100_cs_fragment()
    {
    	// cs.g:260:4: ( lambda_expression )
    	DebugEnterAlt(1);
    	// cs.g:260:4: lambda_expression
    	{
    	DebugLocation(260, 4);
    	PushFollow(Follow._lambda_expression_in_synpred100_cs1485);
    	lambda_expression();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred100_cs

    protected virtual void Enter_synpred111_cs_fragment() {}
    protected virtual void Leave_synpred111_cs_fragment() {}

    // $ANTLR start synpred111_cs
    public void synpred111_cs_fragment()
    {
    	// cs.g:281:2: ( 'ref' '(' ( ( namespace_or_type_name | predefined_type ) ( '*' )* ( rank_specifiers )? | 'void' ( '*' )+ ( rank_specifiers )? ) ')' ref_variable_reference )
    	DebugEnterAlt(1);
    	// cs.g:281:2: 'ref' '(' ( ( namespace_or_type_name | predefined_type ) ( '*' )* ( rank_specifiers )? | 'void' ( '*' )+ ( rank_specifiers )? ) ')' ref_variable_reference
    	{
    	DebugLocation(281, 2);
    	Match(input,131,Follow._131_in_synpred111_cs1601); if (state.failed) return;
    	DebugLocation(281, 8);
    	Match(input,110,Follow._110_in_synpred111_cs1603); if (state.failed) return;
    	DebugLocation(282, 3);
    	// cs.g:282:3: ( ( namespace_or_type_name | predefined_type ) ( '*' )* ( rank_specifiers )? | 'void' ( '*' )+ ( rank_specifiers )? )
    	int alt416=2;
    	try { DebugEnterSubRule(416);
    	try { DebugEnterDecision(416, decisionCanBacktrack[416]);
    	int LA416_0 = input.LA(1);

    	if ((LA416_0==IDENTIFIER||LA416_0==SET||LA416_0==95||(LA416_0>=101 && LA416_0<=107)||LA416_0==109||(LA416_0>=114 && LA416_0<=122)||(LA416_0>=132 && LA416_0<=137)||(LA416_0>=175 && LA416_0<=187)||LA416_0==199||(LA416_0>=201 && LA416_0<=202)||LA416_0==208||(LA416_0>=225 && LA416_0<=226)))
    	{
    		alt416=1;
    	}
    	else if ((LA416_0==113))
    	{
    		alt416=2;
    	}
    	else
    	{
    		if (state.backtracking>0) {state.failed=true; return;}
    		NoViableAltException nvae = new NoViableAltException("", 416, 0, input);

    		DebugRecognitionException(nvae);
    		throw nvae;
    	}
    	} finally { DebugExitDecision(416); }
    	switch (alt416)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:282:4: ( namespace_or_type_name | predefined_type ) ( '*' )* ( rank_specifiers )?
    		{
    		DebugLocation(282, 4);
    		// cs.g:282:4: ( namespace_or_type_name | predefined_type )
    		int alt411=2;
    		try { DebugEnterSubRule(411);
    		try { DebugEnterDecision(411, decisionCanBacktrack[411]);
    		int LA411_0 = input.LA(1);

    		if ((LA411_0==IDENTIFIER||LA411_0==SET||LA411_0==95||(LA411_0>=101 && LA411_0<=107)||LA411_0==109||(LA411_0>=175 && LA411_0<=187)||LA411_0==199||(LA411_0>=201 && LA411_0<=202)||LA411_0==208||(LA411_0>=225 && LA411_0<=226)))
    		{
    			alt411=1;
    		}
    		else if (((LA411_0>=114 && LA411_0<=122)||(LA411_0>=132 && LA411_0<=137)))
    		{
    			alt411=2;
    		}
    		else
    		{
    			if (state.backtracking>0) {state.failed=true; return;}
    			NoViableAltException nvae = new NoViableAltException("", 411, 0, input);

    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(411); }
    		switch (alt411)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:282:7: namespace_or_type_name
    			{
    			DebugLocation(282, 7);
    			PushFollow(Follow._namespace_or_type_name_in_synpred111_cs1613);
    			namespace_or_type_name();
    			PopFollow();
    			if (state.failed) return;

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// cs.g:282:36: predefined_type
    			{
    			DebugLocation(282, 36);
    			PushFollow(Follow._predefined_type_in_synpred111_cs1621);
    			predefined_type();
    			PopFollow();
    			if (state.failed) return;

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(411); }

    		DebugLocation(282, 56);
    		// cs.g:282:56: ( '*' )*
    		try { DebugEnterSubRule(412);
    		while (true)
    		{
    			int alt412=2;
    			try { DebugEnterDecision(412, decisionCanBacktrack[412]);
    			int LA412_0 = input.LA(1);

    			if ((LA412_0==111))
    			{
    				alt412=1;
    			}


    			} finally { DebugExitDecision(412); }
    			switch ( alt412 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: '*'
    				{
    				DebugLocation(282, 56);
    				Match(input,111,Follow._111_in_synpred111_cs1627); if (state.failed) return;

    				}
    				break;

    			default:
    				goto loop412;
    			}
    		}

    		loop412:
    			;

    		} finally { DebugExitSubRule(412); }

    		DebugLocation(282, 63);
    		// cs.g:282:63: ( rank_specifiers )?
    		int alt413=2;
    		try { DebugEnterSubRule(413);
    		try { DebugEnterDecision(413, decisionCanBacktrack[413]);
    		int LA413_0 = input.LA(1);

    		if ((LA413_0==97))
    		{
    			alt413=1;
    		}
    		} finally { DebugExitDecision(413); }
    		switch (alt413)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: rank_specifiers
    			{
    			DebugLocation(282, 63);
    			PushFollow(Follow._rank_specifiers_in_synpred111_cs1632);
    			rank_specifiers();
    			PopFollow();
    			if (state.failed) return;

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(413); }


    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// cs.g:283:5: 'void' ( '*' )+ ( rank_specifiers )?
    		{
    		DebugLocation(283, 5);
    		Match(input,113,Follow._113_in_synpred111_cs1639); if (state.failed) return;
    		DebugLocation(283, 14);
    		// cs.g:283:14: ( '*' )+
    		int cnt414=0;
    		try { DebugEnterSubRule(414);
    		while (true)
    		{
    			int alt414=2;
    			try { DebugEnterDecision(414, decisionCanBacktrack[414]);
    			int LA414_0 = input.LA(1);

    			if ((LA414_0==111))
    			{
    				alt414=1;
    			}


    			} finally { DebugExitDecision(414); }
    			switch (alt414)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// cs.g:0:0: '*'
    				{
    				DebugLocation(283, 14);
    				Match(input,111,Follow._111_in_synpred111_cs1643); if (state.failed) return;

    				}
    				break;

    			default:
    				if (cnt414 >= 1)
    					goto loop414;

    				if (state.backtracking>0) {state.failed=true; return;}
    				EarlyExitException eee414 = new EarlyExitException( 414, input );
    				DebugRecognitionException(eee414);
    				throw eee414;
    			}
    			cnt414++;
    		}
    		loop414:
    			;

    		} finally { DebugExitSubRule(414); }

    		DebugLocation(283, 21);
    		// cs.g:283:21: ( rank_specifiers )?
    		int alt415=2;
    		try { DebugEnterSubRule(415);
    		try { DebugEnterDecision(415, decisionCanBacktrack[415]);
    		int LA415_0 = input.LA(1);

    		if ((LA415_0==97))
    		{
    			alt415=1;
    		}
    		} finally { DebugExitDecision(415); }
    		switch (alt415)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: rank_specifiers
    			{
    			DebugLocation(283, 21);
    			PushFollow(Follow._rank_specifiers_in_synpred111_cs1648);
    			rank_specifiers();
    			PopFollow();
    			if (state.failed) return;

    			}
    			break;

    		}
    		} finally { DebugExitSubRule(415); }


    		}
    		break;

    	}
    	} finally { DebugExitSubRule(416); }

    	DebugLocation(284, 7);
    	new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_synpred111_cs1657), "RPAREN"); if (state.failed) return;
    	DebugLocation(284, 13);
    	PushFollow(Follow._ref_variable_reference_in_synpred111_cs1661);
    	ref_variable_reference();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred111_cs

    protected virtual void Enter_synpred112_cs_fragment() {}
    protected virtual void Leave_synpred112_cs_fragment() {}

    // $ANTLR start synpred112_cs
    public void synpred112_cs_fragment()
    {
    	// cs.g:288:2: ( primary_expression )
    	DebugEnterAlt(1);
    	// cs.g:288:2: primary_expression
    	{
    	DebugLocation(288, 2);
    	PushFollow(Follow._primary_expression_in_synpred112_cs1678);
    	primary_expression();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred112_cs

    protected virtual void Enter_synpred115_cs_fragment() {}
    protected virtual void Leave_synpred115_cs_fragment() {}

    // $ANTLR start synpred115_cs
    public void synpred115_cs_fragment()
    {
    	// cs.g:300:2: ( ( arguments )+ ( access_operator tinvocation ) )
    	DebugEnterAlt(1);
    	// cs.g:300:2: ( arguments )+ ( access_operator tinvocation )
    	{
    	DebugLocation(300, 2);
    	// cs.g:300:2: ( arguments )+
    	int cnt417=0;
    	try { DebugEnterSubRule(417);
    	while (true)
    	{
    		int alt417=2;
    		try { DebugEnterDecision(417, decisionCanBacktrack[417]);
    		int LA417_0 = input.LA(1);

    		if ((LA417_0==110))
    		{
    			alt417=1;
    		}


    		} finally { DebugExitDecision(417); }
    		switch (alt417)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: arguments
    			{
    			DebugLocation(300, 2);
    			PushFollow(Follow._arguments_in_synpred115_cs1718);
    			arguments();
    			PopFollow();
    			if (state.failed) return;

    			}
    			break;

    		default:
    			if (cnt417 >= 1)
    				goto loop417;

    			if (state.backtracking>0) {state.failed=true; return;}
    			EarlyExitException eee417 = new EarlyExitException( 417, input );
    			DebugRecognitionException(eee417);
    			throw eee417;
    		}
    		cnt417++;
    	}
    	loop417:
    		;

    	} finally { DebugExitSubRule(417); }

    	DebugLocation(300, 15);
    	// cs.g:300:15: ( access_operator tinvocation )
    	DebugEnterAlt(1);
    	// cs.g:300:16: access_operator tinvocation
    	{
    	DebugLocation(300, 16);
    	PushFollow(Follow._access_operator_in_synpred115_cs1724);
    	access_operator();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(300, 35);
    	PushFollow(Follow._tinvocation_in_synpred115_cs1729);
    	tinvocation();
    	PopFollow();
    	if (state.failed) return;

    	}


    	}
    }
    // $ANTLR end synpred115_cs

    protected virtual void Enter_synpred117_cs_fragment() {}
    protected virtual void Leave_synpred117_cs_fragment() {}

    // $ANTLR start synpred117_cs
    public void synpred117_cs_fragment()
    {
    	// cs.g:301:4: ( ( arguments )+ telement_part )
    	DebugEnterAlt(1);
    	// cs.g:301:4: ( arguments )+ telement_part
    	{
    	DebugLocation(301, 4);
    	// cs.g:301:4: ( arguments )+
    	int cnt418=0;
    	try { DebugEnterSubRule(418);
    	while (true)
    	{
    		int alt418=2;
    		try { DebugEnterDecision(418, decisionCanBacktrack[418]);
    		int LA418_0 = input.LA(1);

    		if ((LA418_0==110))
    		{
    			alt418=1;
    		}


    		} finally { DebugExitDecision(418); }
    		switch (alt418)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: arguments
    			{
    			DebugLocation(301, 4);
    			PushFollow(Follow._arguments_in_synpred117_cs1735);
    			arguments();
    			PopFollow();
    			if (state.failed) return;

    			}
    			break;

    		default:
    			if (cnt418 >= 1)
    				goto loop418;

    			if (state.backtracking>0) {state.failed=true; return;}
    			EarlyExitException eee418 = new EarlyExitException( 418, input );
    			DebugRecognitionException(eee418);
    			throw eee418;
    		}
    		cnt418++;
    	}
    	loop418:
    		;

    	} finally { DebugExitSubRule(418); }

    	DebugLocation(301, 17);
    	PushFollow(Follow._telement_part_in_synpred117_cs1740);
    	telement_part();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred117_cs

    protected virtual void Enter_synpred121_cs_fragment() {}
    protected virtual void Leave_synpred121_cs_fragment() {}

    // $ANTLR start synpred121_cs
    public void synpred121_cs_fragment()
    {
    	// cs.g:307:2: ( ( bracket_expression )+ ( access_operator telement ) )
    	DebugEnterAlt(1);
    	// cs.g:307:2: ( bracket_expression )+ ( access_operator telement )
    	{
    	DebugLocation(307, 2);
    	// cs.g:307:2: ( bracket_expression )+
    	int cnt419=0;
    	try { DebugEnterSubRule(419);
    	while (true)
    	{
    		int alt419=2;
    		try { DebugEnterDecision(419, decisionCanBacktrack[419]);
    		int LA419_0 = input.LA(1);

    		if ((LA419_0==97))
    		{
    			alt419=1;
    		}


    		} finally { DebugExitDecision(419); }
    		switch (alt419)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: bracket_expression
    			{
    			DebugLocation(307, 2);
    			PushFollow(Follow._bracket_expression_in_synpred121_cs1788);
    			bracket_expression();
    			PopFollow();
    			if (state.failed) return;

    			}
    			break;

    		default:
    			if (cnt419 >= 1)
    				goto loop419;

    			if (state.backtracking>0) {state.failed=true; return;}
    			EarlyExitException eee419 = new EarlyExitException( 419, input );
    			DebugRecognitionException(eee419);
    			throw eee419;
    		}
    		cnt419++;
    	}
    	loop419:
    		;

    	} finally { DebugExitSubRule(419); }

    	DebugLocation(307, 24);
    	// cs.g:307:24: ( access_operator telement )
    	DebugEnterAlt(1);
    	// cs.g:307:25: access_operator telement
    	{
    	DebugLocation(307, 25);
    	PushFollow(Follow._access_operator_in_synpred121_cs1794);
    	access_operator();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(307, 43);
    	PushFollow(Follow._telement_in_synpred121_cs1798);
    	telement();
    	PopFollow();
    	if (state.failed) return;

    	}


    	}
    }
    // $ANTLR end synpred121_cs

    protected virtual void Enter_synpred123_cs_fragment() {}
    protected virtual void Leave_synpred123_cs_fragment() {}

    // $ANTLR start synpred123_cs
    public void synpred123_cs_fragment()
    {
    	// cs.g:308:4: ( ( bracket_expression )+ tinvocation_part )
    	DebugEnterAlt(1);
    	// cs.g:308:4: ( bracket_expression )+ tinvocation_part
    	{
    	DebugLocation(308, 4);
    	// cs.g:308:4: ( bracket_expression )+
    	int cnt420=0;
    	try { DebugEnterSubRule(420);
    	while (true)
    	{
    		int alt420=2;
    		try { DebugEnterDecision(420, decisionCanBacktrack[420]);
    		int LA420_0 = input.LA(1);

    		if ((LA420_0==97))
    		{
    			alt420=1;
    		}


    		} finally { DebugExitDecision(420); }
    		switch (alt420)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: bracket_expression
    			{
    			DebugLocation(308, 4);
    			PushFollow(Follow._bracket_expression_in_synpred123_cs1804);
    			bracket_expression();
    			PopFollow();
    			if (state.failed) return;

    			}
    			break;

    		default:
    			if (cnt420 >= 1)
    				goto loop420;

    			if (state.backtracking>0) {state.failed=true; return;}
    			EarlyExitException eee420 = new EarlyExitException( 420, input );
    			DebugRecognitionException(eee420);
    			throw eee420;
    		}
    		cnt420++;
    	}
    	loop420:
    		;

    	} finally { DebugExitSubRule(420); }

    	DebugLocation(308, 26);
    	PushFollow(Follow._tinvocation_part_in_synpred123_cs1809);
    	tinvocation_part();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred123_cs

    protected virtual void Enter_synpred126_cs_fragment() {}
    protected virtual void Leave_synpred126_cs_fragment() {}

    // $ANTLR start synpred126_cs
    public void synpred126_cs_fragment()
    {
    	// cs.g:315:29: ( primary_expression_part )
    	DebugEnterAlt(1);
    	// cs.g:315:29: primary_expression_part
    	{
    	DebugLocation(315, 29);
    	PushFollow(Follow._primary_expression_part_in_synpred126_cs1849);
    	primary_expression_part();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred126_cs

    protected virtual void Enter_synpred127_cs_fragment() {}
    protected virtual void Leave_synpred127_cs_fragment() {}

    // $ANTLR start synpred127_cs
    public void synpred127_cs_fragment()
    {
    	// cs.g:315:2: ( primary_expression_start ( primary_expression_part )* )
    	DebugEnterAlt(1);
    	// cs.g:315:2: primary_expression_start ( primary_expression_part )*
    	{
    	DebugLocation(315, 2);
    	PushFollow(Follow._primary_expression_start_in_synpred127_cs1845);
    	primary_expression_start();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(315, 29);
    	// cs.g:315:29: ( primary_expression_part )*
    	try { DebugEnterSubRule(421);
    	while (true)
    	{
    		int alt421=2;
    		try { DebugEnterDecision(421, decisionCanBacktrack[421]);
    		int LA421_0 = input.LA(1);

    		if (((LA421_0>=DOT && LA421_0<=PTR)||LA421_0==97||LA421_0==110))
    		{
    			alt421=1;
    		}


    		} finally { DebugExitDecision(421); }
    		switch ( alt421 )
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: primary_expression_part
    			{
    			DebugLocation(315, 29);
    			PushFollow(Follow._primary_expression_part_in_synpred127_cs1849);
    			primary_expression_part();
    			PopFollow();
    			if (state.failed) return;

    			}
    			break;

    		default:
    			goto loop421;
    		}
    	}

    	loop421:
    		;

    	} finally { DebugExitSubRule(421); }


    	}
    }
    // $ANTLR end synpred127_cs

    protected virtual void Enter_synpred128_cs_fragment() {}
    protected virtual void Leave_synpred128_cs_fragment() {}

    // $ANTLR start synpred128_cs
    public void synpred128_cs_fragment()
    {
    	// cs.g:316:4: ( delegate_creation_expression )
    	DebugEnterAlt(1);
    	// cs.g:316:4: delegate_creation_expression
    	{
    	DebugLocation(316, 4);
    	PushFollow(Follow._delegate_creation_expression_in_synpred128_cs1855);
    	delegate_creation_expression();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred128_cs

    protected virtual void Enter_synpred129_cs_fragment() {}
    protected virtual void Leave_synpred129_cs_fragment() {}

    // $ANTLR start synpred129_cs
    public void synpred129_cs_fragment()
    {
    	// cs.g:317:4: ( anonymous_object_creation_expression )
    	DebugEnterAlt(1);
    	// cs.g:317:4: anonymous_object_creation_expression
    	{
    	DebugLocation(317, 4);
    	PushFollow(Follow._anonymous_object_creation_expression_in_synpred129_cs1864);
    	anonymous_object_creation_expression();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred129_cs

    protected virtual void Enter_synpred136_cs_fragment() {}
    protected virtual void Leave_synpred136_cs_fragment() {}

    // $ANTLR start synpred136_cs
    public void synpred136_cs_fragment()
    {
    	// cs.g:325:45: ( generic_argument_list )
    	DebugEnterAlt(1);
    	// cs.g:325:45: generic_argument_list
    	{
    	DebugLocation(325, 45);
    	PushFollow(Follow._generic_argument_list_in_synpred136_cs1956);
    	generic_argument_list();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred136_cs

    protected virtual void Enter_synpred138_cs_fragment() {}
    protected virtual void Leave_synpred138_cs_fragment() {}

    // $ANTLR start synpred138_cs
    public void synpred138_cs_fragment()
    {
    	// cs.g:326:14: ( bracket_expression )
    	DebugEnterAlt(1);
    	// cs.g:326:14: bracket_expression
    	{
    	DebugLocation(326, 14);
    	PushFollow(Follow._bracket_expression_in_synpred138_cs1967);
    	bracket_expression();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred138_cs

    protected virtual void Enter_synpred140_cs_fragment() {}
    protected virtual void Leave_synpred140_cs_fragment() {}

    // $ANTLR start synpred140_cs
    public void synpred140_cs_fragment()
    {
    	// cs.g:327:14: ( bracket_expression )
    	DebugEnterAlt(1);
    	// cs.g:327:14: bracket_expression
    	{
    	DebugLocation(327, 14);
    	PushFollow(Follow._bracket_expression_in_synpred140_cs1978);
    	bracket_expression();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred140_cs

    protected virtual void Enter_synpred143_cs_fragment() {}
    protected virtual void Leave_synpred143_cs_fragment() {}

    // $ANTLR start synpred143_cs
    public void synpred143_cs_fragment()
    {
    	// cs.g:329:23: ( brackets_or_arguments )
    	DebugEnterAlt(1);
    	// cs.g:329:23: brackets_or_arguments
    	{
    	DebugLocation(329, 23);
    	PushFollow(Follow._brackets_or_arguments_in_synpred143_cs2001);
    	brackets_or_arguments();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred143_cs

    protected virtual void Enter_synpred146_cs_fragment() {}
    protected virtual void Leave_synpred146_cs_fragment() {}

    // $ANTLR start synpred146_cs
    public void synpred146_cs_fragment()
    {
    	// cs.g:334:24: ( brackets_or_arguments )
    	DebugEnterAlt(1);
    	// cs.g:334:24: brackets_or_arguments
    	{
    	DebugLocation(334, 24);
    	PushFollow(Follow._brackets_or_arguments_in_synpred146_cs2041);
    	brackets_or_arguments();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred146_cs

    protected virtual void Enter_synpred148_cs_fragment() {}
    protected virtual void Leave_synpred148_cs_fragment() {}

    // $ANTLR start synpred148_cs
    public void synpred148_cs_fragment()
    {
    	// cs.g:338:22: ( bracket_expression )
    	DebugEnterAlt(1);
    	// cs.g:338:22: bracket_expression
    	{
    	DebugLocation(338, 22);
    	PushFollow(Follow._bracket_expression_in_synpred148_cs2060);
    	bracket_expression();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred148_cs

    protected virtual void Enter_synpred153_cs_fragment() {}
    protected virtual void Leave_synpred153_cs_fragment() {}

    // $ANTLR start synpred153_cs
    public void synpred153_cs_fragment()
    {
    	// cs.g:347:33: ( generic_argument_list )
    	DebugEnterAlt(1);
    	// cs.g:347:33: generic_argument_list
    	{
    	DebugLocation(347, 33);
    	PushFollow(Follow._generic_argument_list_in_synpred153_cs2120);
    	generic_argument_list();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred153_cs

    protected virtual void Enter_synpred154_cs_fragment() {}
    protected virtual void Leave_synpred154_cs_fragment() {}

    // $ANTLR start synpred154_cs
    public void synpred154_cs_fragment()
    {
    	// cs.g:351:2: ( bracket_expression )
    	DebugEnterAlt(1);
    	// cs.g:351:2: bracket_expression
    	{
    	DebugLocation(351, 2);
    	PushFollow(Follow._bracket_expression_in_synpred154_cs2146);
    	bracket_expression();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred154_cs

    protected virtual void Enter_synpred155_cs_fragment() {}
    protected virtual void Leave_synpred155_cs_fragment() {}

    // $ANTLR start synpred155_cs
    public void synpred155_cs_fragment()
    {
    	// cs.g:351:24: ( arguments )
    	DebugEnterAlt(1);
    	// cs.g:351:24: arguments
    	{
    	DebugLocation(351, 24);
    	PushFollow(Follow._arguments_in_synpred155_cs2151);
    	arguments();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred155_cs

    protected virtual void Enter_synpred157_cs_fragment() {}
    protected virtual void Leave_synpred157_cs_fragment() {}

    // $ANTLR start synpred157_cs
    public void synpred157_cs_fragment()
    {
    	// cs.g:352:16: ( bracket_expression )
    	DebugEnterAlt(1);
    	// cs.g:352:16: bracket_expression
    	{
    	DebugLocation(352, 16);
    	PushFollow(Follow._bracket_expression_in_synpred157_cs2161);
    	bracket_expression();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred157_cs

    protected virtual void Enter_synpred176_cs_fragment() {}
    protected virtual void Leave_synpred176_cs_fragment() {}

    // $ANTLR start synpred176_cs
    public void synpred176_cs_fragment()
    {
    	// cs.g:383:24: ( access )
    	DebugEnterAlt(1);
    	// cs.g:383:24: access
    	{
    	DebugLocation(383, 24);
    	PushFollow(Follow._access_in_synpred176_cs2371);
    	access();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred176_cs

    protected virtual void Enter_synpred178_cs_fragment() {}
    protected virtual void Leave_synpred178_cs_fragment() {}

    // $ANTLR start synpred178_cs
    public void synpred178_cs_fragment()
    {
    	// cs.g:385:16: ( access_part )
    	DebugEnterAlt(1);
    	// cs.g:385:16: access_part
    	{
    	DebugLocation(385, 16);
    	PushFollow(Follow._access_part_in_synpred178_cs2395);
    	access_part();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred178_cs

    protected virtual void Enter_synpred179_cs_fragment() {}
    protected virtual void Leave_synpred179_cs_fragment() {}

    // $ANTLR start synpred179_cs
    public void synpred179_cs_fragment()
    {
    	// cs.g:388:11: ( access_part )
    	DebugEnterAlt(1);
    	// cs.g:388:11: access_part
    	{
    	DebugLocation(388, 11);
    	PushFollow(Follow._access_part_in_synpred179_cs2407);
    	access_part();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred179_cs

    protected virtual void Enter_synpred181_cs_fragment() {}
    protected virtual void Leave_synpred181_cs_fragment() {}

    // $ANTLR start synpred181_cs
    public void synpred181_cs_fragment()
    {
    	// cs.g:389:23: ( access_part )
    	DebugEnterAlt(1);
    	// cs.g:389:23: access_part
    	{
    	DebugLocation(389, 23);
    	PushFollow(Follow._access_part_in_synpred181_cs2419);
    	access_part();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred181_cs

    protected virtual void Enter_synpred189_cs_fragment() {}
    protected virtual void Leave_synpred189_cs_fragment() {}

    // $ANTLR start synpred189_cs
    public void synpred189_cs_fragment()
    {
    	// cs.g:409:2: ( '{' ( member_initializer_list )? '}' )
    	DebugEnterAlt(1);
    	// cs.g:409:2: '{' ( member_initializer_list )? '}'
    	{
    	DebugLocation(409, 2);
    	Match(input,92,Follow._92_in_synpred189_cs2548); if (state.failed) return;
    	DebugLocation(409, 8);
    	// cs.g:409:8: ( member_initializer_list )?
    	int alt438=2;
    	try { DebugEnterSubRule(438);
    	try { DebugEnterDecision(438, decisionCanBacktrack[438]);
    	int LA438_0 = input.LA(1);

    	if ((LA438_0==IDENTIFIER||LA438_0==SET||LA438_0==95||(LA438_0>=101 && LA438_0<=107)||LA438_0==109||(LA438_0>=175 && LA438_0<=187)||LA438_0==199||(LA438_0>=201 && LA438_0<=202)||LA438_0==208||(LA438_0>=225 && LA438_0<=226)))
    	{
    		alt438=1;
    	}
    	} finally { DebugExitDecision(438); }
    	switch (alt438)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:0:0: member_initializer_list
    		{
    		DebugLocation(409, 8);
    		PushFollow(Follow._member_initializer_list_in_synpred189_cs2552);
    		member_initializer_list();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;

    	}
    	} finally { DebugExitSubRule(438); }

    	DebugLocation(409, 35);
    	Match(input,93,Follow._93_in_synpred189_cs2557); if (state.failed) return;

    	}
    }
    // $ANTLR end synpred189_cs

    protected virtual void Enter_synpred197_cs_fragment() {}
    protected virtual void Leave_synpred197_cs_fragment() {}

    // $ANTLR start synpred197_cs
    public void synpred197_cs_fragment()
    {
    	// cs.g:428:11: ( non_array_type '[' expression_list ']' ( rank_specifiers )? ( array_initializer )? ( access_operator primary_expression )* )
    	DebugEnterAlt(1);
    	// cs.g:428:11: non_array_type '[' expression_list ']' ( rank_specifiers )? ( array_initializer )? ( access_operator primary_expression )*
    	{
    	DebugLocation(428, 11);
    	PushFollow(Follow._non_array_type_in_synpred197_cs2720);
    	non_array_type();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(428, 26);
    	Match(input,97,Follow._97_in_synpred197_cs2722); if (state.failed) return;
    	DebugLocation(428, 32);
    	PushFollow(Follow._expression_list_in_synpred197_cs2726);
    	expression_list();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(428, 50);
    	Match(input,99,Follow._99_in_synpred197_cs2730); if (state.failed) return;
    	DebugLocation(428, 56);
    	// cs.g:428:56: ( rank_specifiers )?
    	int alt439=2;
    	try { DebugEnterSubRule(439);
    	try { DebugEnterDecision(439, decisionCanBacktrack[439]);
    	int LA439_0 = input.LA(1);

    	if ((LA439_0==97))
    	{
    		alt439=1;
    	}
    	} finally { DebugExitDecision(439); }
    	switch (alt439)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:0:0: rank_specifiers
    		{
    		DebugLocation(428, 56);
    		PushFollow(Follow._rank_specifiers_in_synpred197_cs2734);
    		rank_specifiers();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;

    	}
    	} finally { DebugExitSubRule(439); }

    	DebugLocation(428, 75);
    	// cs.g:428:75: ( array_initializer )?
    	int alt440=2;
    	try { DebugEnterSubRule(440);
    	try { DebugEnterDecision(440, decisionCanBacktrack[440]);
    	int LA440_0 = input.LA(1);

    	if ((LA440_0==92))
    	{
    		alt440=1;
    	}
    	} finally { DebugExitDecision(440); }
    	switch (alt440)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:0:0: array_initializer
    		{
    		DebugLocation(428, 75);
    		PushFollow(Follow._array_initializer_in_synpred197_cs2739);
    		array_initializer();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;

    	}
    	} finally { DebugExitSubRule(440); }

    	DebugLocation(428, 96);
    	// cs.g:428:96: ( access_operator primary_expression )*
    	try { DebugEnterSubRule(441);
    	while (true)
    	{
    		int alt441=2;
    		try { DebugEnterDecision(441, decisionCanBacktrack[441]);
    		int LA441_0 = input.LA(1);

    		if (((LA441_0>=DOT && LA441_0<=PTR)))
    		{
    			alt441=1;
    		}


    		} finally { DebugExitDecision(441); }
    		switch ( alt441 )
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:428:97: access_operator primary_expression
    			{
    			DebugLocation(428, 97);
    			PushFollow(Follow._access_operator_in_synpred197_cs2745);
    			access_operator();
    			PopFollow();
    			if (state.failed) return;
    			DebugLocation(428, 115);
    			PushFollow(Follow._primary_expression_in_synpred197_cs2749);
    			primary_expression();
    			PopFollow();
    			if (state.failed) return;

    			}
    			break;

    		default:
    			goto loop441;
    		}
    	}

    	loop441:
    		;

    	} finally { DebugExitSubRule(441); }


    	}
    }
    // $ANTLR end synpred197_cs

    protected virtual void Enter_synpred198_cs_fragment() {}
    protected virtual void Leave_synpred198_cs_fragment() {}

    // $ANTLR start synpred198_cs
    public void synpred198_cs_fragment()
    {
    	// cs.g:429:5: ( array_type array_initializer )
    	DebugEnterAlt(1);
    	// cs.g:429:5: array_type array_initializer
    	{
    	DebugLocation(429, 5);
    	PushFollow(Follow._array_type_in_synpred198_cs2757);
    	array_type();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(429, 18);
    	PushFollow(Follow._array_initializer_in_synpred198_cs2761);
    	array_initializer();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred198_cs

    protected virtual void Enter_synpred200_cs_fragment() {}
    protected virtual void Leave_synpred200_cs_fragment() {}

    // $ANTLR start synpred200_cs
    public void synpred200_cs_fragment()
    {
    	// cs.g:436:2: ( '{' ( member_declarator_list )? '}' )
    	DebugEnterAlt(1);
    	// cs.g:436:2: '{' ( member_declarator_list )? '}'
    	{
    	DebugLocation(436, 2);
    	Match(input,92,Follow._92_in_synpred200_cs2818); if (state.failed) return;
    	DebugLocation(436, 8);
    	// cs.g:436:8: ( member_declarator_list )?
    	int alt442=2;
    	try { DebugEnterSubRule(442);
    	try { DebugEnterDecision(442, decisionCanBacktrack[442]);
    	int LA442_0 = input.LA(1);

    	if ((LA442_0==IDENTIFIER||LA442_0==SET||LA442_0==95||(LA442_0>=101 && LA442_0<=107)||LA442_0==109||(LA442_0>=175 && LA442_0<=187)||LA442_0==199||(LA442_0>=201 && LA442_0<=202)||LA442_0==208||(LA442_0>=225 && LA442_0<=226)))
    	{
    		alt442=1;
    	}
    	} finally { DebugExitDecision(442); }
    	switch (alt442)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:0:0: member_declarator_list
    		{
    		DebugLocation(436, 8);
    		PushFollow(Follow._member_declarator_list_in_synpred200_cs2822);
    		member_declarator_list();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;

    	}
    	} finally { DebugExitSubRule(442); }

    	DebugLocation(436, 34);
    	Match(input,93,Follow._93_in_synpred200_cs2827); if (state.failed) return;

    	}
    }
    // $ANTLR end synpred200_cs

    protected virtual void Enter_synpred202_cs_fragment() {}
    protected virtual void Leave_synpred202_cs_fragment() {}

    // $ANTLR start synpred202_cs
    public void synpred202_cs_fragment()
    {
    	// cs.g:442:2: ( identifier ( generic_argument_list )? )
    	DebugEnterAlt(1);
    	// cs.g:442:2: identifier ( generic_argument_list )?
    	{
    	DebugLocation(442, 2);
    	PushFollow(Follow._identifier_in_synpred202_cs2880);
    	identifier();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(442, 15);
    	// cs.g:442:15: ( generic_argument_list )?
    	int alt443=2;
    	try { DebugEnterSubRule(443);
    	try { DebugEnterDecision(443, decisionCanBacktrack[443]);
    	int LA443_0 = input.LA(1);

    	if ((LA443_0==123))
    	{
    		alt443=1;
    	}
    	} finally { DebugExitDecision(443); }
    	switch (alt443)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:0:0: generic_argument_list
    		{
    		DebugLocation(442, 15);
    		PushFollow(Follow._generic_argument_list_in_synpred202_cs2884);
    		generic_argument_list();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;

    	}
    	} finally { DebugExitSubRule(443); }


    	}
    }
    // $ANTLR end synpred202_cs

    protected virtual void Enter_synpred203_cs_fragment() {}
    protected virtual void Leave_synpred203_cs_fragment() {}

    // $ANTLR start synpred203_cs
    public void synpred203_cs_fragment()
    {
    	// cs.g:443:4: ( member_access )
    	DebugEnterAlt(1);
    	// cs.g:443:4: member_access
    	{
    	DebugLocation(443, 4);
    	PushFollow(Follow._member_access_in_synpred203_cs2892);
    	member_access();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred203_cs

    protected virtual void Enter_synpred204_cs_fragment() {}
    protected virtual void Leave_synpred204_cs_fragment() {}

    // $ANTLR start synpred204_cs
    public void synpred204_cs_fragment()
    {
    	// cs.g:448:2: ( 'typeof' '(' type ')' )
    	DebugEnterAlt(1);
    	// cs.g:448:2: 'typeof' '(' type ')'
    	{
    	DebugLocation(448, 2);
    	Match(input,140,Follow._140_in_synpred204_cs2934); if (state.failed) return;
    	DebugLocation(448, 13);
    	Match(input,110,Follow._110_in_synpred204_cs2938); if (state.failed) return;
    	DebugLocation(448, 19);
    	PushFollow(Follow._type_in_synpred204_cs2942);
    	type();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(448, 26);
    	new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_synpred204_cs2946), "RPAREN"); if (state.failed) return;

    	}
    }
    // $ANTLR end synpred204_cs

    protected virtual void Enter_synpred205_cs_fragment() {}
    protected virtual void Leave_synpred205_cs_fragment() {}

    // $ANTLR start synpred205_cs
    public void synpred205_cs_fragment()
    {
    	// cs.g:449:4: ( 'typeof' '(' unbound_type_name ')' )
    	DebugEnterAlt(1);
    	// cs.g:449:4: 'typeof' '(' unbound_type_name ')'
    	{
    	DebugLocation(449, 4);
    	Match(input,140,Follow._140_in_synpred205_cs2952); if (state.failed) return;
    	DebugLocation(449, 13);
    	Match(input,110,Follow._110_in_synpred205_cs2954); if (state.failed) return;
    	DebugLocation(449, 19);
    	PushFollow(Follow._unbound_type_name_in_synpred205_cs2958);
    	unbound_type_name();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(449, 39);
    	new XToken((IToken)Match(input,RPAREN,Follow._RPAREN_in_synpred205_cs2962), "RPAREN"); if (state.failed) return;

    	}
    }
    // $ANTLR end synpred205_cs

    protected virtual void Enter_synpred226_cs_fragment() {}
    protected virtual void Leave_synpred226_cs_fragment() {}

    // $ANTLR start synpred226_cs
    public void synpred226_cs_fragment()
    {
    	// cs.g:507:3: ( ( namespace_or_type_name | predefined_type ) ( '*' )+ ( rank_specifiers )? )
    	DebugEnterAlt(1);
    	// cs.g:507:3: ( namespace_or_type_name | predefined_type ) ( '*' )+ ( rank_specifiers )?
    	{
    	DebugLocation(507, 3);
    	// cs.g:507:3: ( namespace_or_type_name | predefined_type )
    	int alt444=2;
    	try { DebugEnterSubRule(444);
    	try { DebugEnterDecision(444, decisionCanBacktrack[444]);
    	int LA444_0 = input.LA(1);

    	if ((LA444_0==IDENTIFIER||LA444_0==SET||LA444_0==95||(LA444_0>=101 && LA444_0<=107)||LA444_0==109||(LA444_0>=175 && LA444_0<=187)||LA444_0==199||(LA444_0>=201 && LA444_0<=202)||LA444_0==208||(LA444_0>=225 && LA444_0<=226)))
    	{
    		alt444=1;
    	}
    	else if (((LA444_0>=114 && LA444_0<=122)||(LA444_0>=132 && LA444_0<=137)))
    	{
    		alt444=2;
    	}
    	else
    	{
    		if (state.backtracking>0) {state.failed=true; return;}
    		NoViableAltException nvae = new NoViableAltException("", 444, 0, input);

    		DebugRecognitionException(nvae);
    		throw nvae;
    	}
    	} finally { DebugExitDecision(444); }
    	switch (alt444)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:507:6: namespace_or_type_name
    		{
    		DebugLocation(507, 6);
    		PushFollow(Follow._namespace_or_type_name_in_synpred226_cs3368);
    		namespace_or_type_name();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// cs.g:507:32: predefined_type
    		{
    		DebugLocation(507, 32);
    		PushFollow(Follow._predefined_type_in_synpred226_cs3373);
    		predefined_type();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;

    	}
    	} finally { DebugExitSubRule(444); }

    	DebugLocation(507, 52);
    	// cs.g:507:52: ( '*' )+
    	int cnt445=0;
    	try { DebugEnterSubRule(445);
    	while (true)
    	{
    		int alt445=2;
    		try { DebugEnterDecision(445, decisionCanBacktrack[445]);
    		int LA445_0 = input.LA(1);

    		if ((LA445_0==111))
    		{
    			alt445=1;
    		}


    		} finally { DebugExitDecision(445); }
    		switch (alt445)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:0:0: '*'
    			{
    			DebugLocation(507, 52);
    			Match(input,111,Follow._111_in_synpred226_cs3379); if (state.failed) return;

    			}
    			break;

    		default:
    			if (cnt445 >= 1)
    				goto loop445;

    			if (state.backtracking>0) {state.failed=true; return;}
    			EarlyExitException eee445 = new EarlyExitException( 445, input );
    			DebugRecognitionException(eee445);
    			throw eee445;
    		}
    		cnt445++;
    	}
    	loop445:
    		;

    	} finally { DebugExitSubRule(445); }

    	DebugLocation(507, 59);
    	// cs.g:507:59: ( rank_specifiers )?
    	int alt446=2;
    	try { DebugEnterSubRule(446);
    	try { DebugEnterDecision(446, decisionCanBacktrack[446]);
    	int LA446_0 = input.LA(1);

    	if ((LA446_0==97))
    	{
    		alt446=1;
    	}
    	} finally { DebugExitDecision(446); }
    	switch (alt446)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:0:0: rank_specifiers
    		{
    		DebugLocation(507, 59);
    		PushFollow(Follow._rank_specifiers_in_synpred226_cs3384);
    		rank_specifiers();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;

    	}
    	} finally { DebugExitSubRule(446); }


    	}
    }
    // $ANTLR end synpred226_cs

    protected virtual void Enter_synpred229_cs_fragment() {}
    protected virtual void Leave_synpred229_cs_fragment() {}

    // $ANTLR start synpred229_cs
    public void synpred229_cs_fragment()
    {
    	// cs.g:508:5: ( ( namespace_or_type_name | predefined_type ) '?' ( rank_specifiers )? )
    	DebugEnterAlt(1);
    	// cs.g:508:5: ( namespace_or_type_name | predefined_type ) '?' ( rank_specifiers )?
    	{
    	DebugLocation(508, 5);
    	// cs.g:508:5: ( namespace_or_type_name | predefined_type )
    	int alt447=2;
    	try { DebugEnterSubRule(447);
    	try { DebugEnterDecision(447, decisionCanBacktrack[447]);
    	int LA447_0 = input.LA(1);

    	if ((LA447_0==IDENTIFIER||LA447_0==SET||LA447_0==95||(LA447_0>=101 && LA447_0<=107)||LA447_0==109||(LA447_0>=175 && LA447_0<=187)||LA447_0==199||(LA447_0>=201 && LA447_0<=202)||LA447_0==208||(LA447_0>=225 && LA447_0<=226)))
    	{
    		alt447=1;
    	}
    	else if (((LA447_0>=114 && LA447_0<=122)||(LA447_0>=132 && LA447_0<=137)))
    	{
    		alt447=2;
    	}
    	else
    	{
    		if (state.backtracking>0) {state.failed=true; return;}
    		NoViableAltException nvae = new NoViableAltException("", 447, 0, input);

    		DebugRecognitionException(nvae);
    		throw nvae;
    	}
    	} finally { DebugExitDecision(447); }
    	switch (alt447)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:508:8: namespace_or_type_name
    		{
    		DebugLocation(508, 8);
    		PushFollow(Follow._namespace_or_type_name_in_synpred229_cs3394);
    		namespace_or_type_name();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// cs.g:508:34: predefined_type
    		{
    		DebugLocation(508, 34);
    		PushFollow(Follow._predefined_type_in_synpred229_cs3399);
    		predefined_type();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;

    	}
    	} finally { DebugExitSubRule(447); }

    	DebugLocation(508, 54);
    	Match(input,112,Follow._112_in_synpred229_cs3405); if (state.failed) return;
    	DebugLocation(508, 60);
    	// cs.g:508:60: ( rank_specifiers )?
    	int alt448=2;
    	try { DebugEnterSubRule(448);
    	try { DebugEnterDecision(448, decisionCanBacktrack[448]);
    	int LA448_0 = input.LA(1);

    	if ((LA448_0==97))
    	{
    		alt448=1;
    	}
    	} finally { DebugExitDecision(448); }
    	switch (alt448)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:0:0: rank_specifiers
    		{
    		DebugLocation(508, 60);
    		PushFollow(Follow._rank_specifiers_in_synpred229_cs3409);
    		rank_specifiers();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;

    	}
    	} finally { DebugExitSubRule(448); }


    	}
    }
    // $ANTLR end synpred229_cs

    protected virtual void Enter_synpred232_cs_fragment() {}
    protected virtual void Leave_synpred232_cs_fragment() {}

    // $ANTLR start synpred232_cs
    public void synpred232_cs_fragment()
    {
    	// cs.g:509:5: ( ( namespace_or_type_name | predefined_type ) ( rank_specifiers )? )
    	DebugEnterAlt(1);
    	// cs.g:509:5: ( namespace_or_type_name | predefined_type ) ( rank_specifiers )?
    	{
    	DebugLocation(509, 5);
    	// cs.g:509:5: ( namespace_or_type_name | predefined_type )
    	int alt449=2;
    	try { DebugEnterSubRule(449);
    	try { DebugEnterDecision(449, decisionCanBacktrack[449]);
    	int LA449_0 = input.LA(1);

    	if ((LA449_0==IDENTIFIER||LA449_0==SET||LA449_0==95||(LA449_0>=101 && LA449_0<=107)||LA449_0==109||(LA449_0>=175 && LA449_0<=187)||LA449_0==199||(LA449_0>=201 && LA449_0<=202)||LA449_0==208||(LA449_0>=225 && LA449_0<=226)))
    	{
    		alt449=1;
    	}
    	else if (((LA449_0>=114 && LA449_0<=122)||(LA449_0>=132 && LA449_0<=137)))
    	{
    		alt449=2;
    	}
    	else
    	{
    		if (state.backtracking>0) {state.failed=true; return;}
    		NoViableAltException nvae = new NoViableAltException("", 449, 0, input);

    		DebugRecognitionException(nvae);
    		throw nvae;
    	}
    	} finally { DebugExitDecision(449); }
    	switch (alt449)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:509:8: namespace_or_type_name
    		{
    		DebugLocation(509, 8);
    		PushFollow(Follow._namespace_or_type_name_in_synpred232_cs3419);
    		namespace_or_type_name();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// cs.g:509:34: predefined_type
    		{
    		DebugLocation(509, 34);
    		PushFollow(Follow._predefined_type_in_synpred232_cs3424);
    		predefined_type();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;

    	}
    	} finally { DebugExitSubRule(449); }

    	DebugLocation(509, 54);
    	// cs.g:509:54: ( rank_specifiers )?
    	int alt450=2;
    	try { DebugEnterSubRule(450);
    	try { DebugEnterDecision(450, decisionCanBacktrack[450]);
    	int LA450_0 = input.LA(1);

    	if ((LA450_0==97))
    	{
    		alt450=1;
    	}
    	} finally { DebugExitDecision(450); }
    	switch (alt450)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:0:0: rank_specifiers
    		{
    		DebugLocation(509, 54);
    		PushFollow(Follow._rank_specifiers_in_synpred232_cs3430);
    		rank_specifiers();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;

    	}
    	} finally { DebugExitSubRule(450); }


    	}
    }
    // $ANTLR end synpred232_cs

    protected virtual void Enter_synpred238_cs_fragment() {}
    protected virtual void Leave_synpred238_cs_fragment() {}

    // $ANTLR start synpred238_cs
    public void synpred238_cs_fragment()
    {
    	// cs.g:515:22: ( ( '*' | '/' | '%' ) unary_expression )
    	DebugEnterAlt(1);
    	// cs.g:515:22: ( '*' | '/' | '%' ) unary_expression
    	{
    	DebugLocation(515, 22);
    	if (input.LA(1)==111||(input.LA(1)>=146 && input.LA(1)<=147))
    	{
    		input.Consume();
    		state.errorRecovery=false;state.failed=false;
    	}
    	else
    	{
    		if (state.backtracking>0) {state.failed=true; return;}
    		MismatchedSetException mse = new MismatchedSetException(null,input);
    		DebugRecognitionException(mse);
    		throw mse;
    	}

    	DebugLocation(515, 38);
    	PushFollow(Follow._unary_expression_in_synpred238_cs3491);
    	unary_expression();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred238_cs

    protected virtual void Enter_synpred240_cs_fragment() {}
    protected virtual void Leave_synpred240_cs_fragment() {}

    // $ANTLR start synpred240_cs
    public void synpred240_cs_fragment()
    {
    	// cs.g:517:29: ( ( '+' | '-' ) multiplicative_expression )
    	DebugEnterAlt(1);
    	// cs.g:517:29: ( '+' | '-' ) multiplicative_expression
    	{
    	DebugLocation(517, 29);
    	if (input.LA(1)==MINUS||input.LA(1)==124)
    	{
    		input.Consume();
    		state.errorRecovery=false;state.failed=false;
    	}
    	else
    	{
    		if (state.backtracking>0) {state.failed=true; return;}
    		MismatchedSetException mse = new MismatchedSetException(null,input);
    		DebugRecognitionException(mse);
    		throw mse;
    	}

    	DebugLocation(517, 41);
    	PushFollow(Follow._multiplicative_expression_in_synpred240_cs3512);
    	multiplicative_expression();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred240_cs

    protected virtual void Enter_synpred247_cs_fragment() {}
    protected virtual void Leave_synpred247_cs_fragment() {}

    // $ANTLR start synpred247_cs
    public void synpred247_cs_fragment()
    {
    	// cs.g:523:9: ( ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* )
    	DebugEnterAlt(1);
    	// cs.g:523:9: ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*
    	{
    	DebugLocation(523, 9);
    	// cs.g:523:9: ( ( '<' | '>' | '<=' | '>=' ) shift_expression )*
    	try { DebugEnterSubRule(452);
    	while (true)
    	{
    		int alt452=2;
    		try { DebugEnterDecision(452, decisionCanBacktrack[452]);
    		int LA452_0 = input.LA(1);

    		if ((LA452_0==GT||LA452_0==123||(LA452_0>=149 && LA452_0<=150)))
    		{
    			alt452=1;
    		}


    		} finally { DebugExitDecision(452); }
    		switch ( alt452 )
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// cs.g:523:10: ( '<' | '>' | '<=' | '>=' ) shift_expression
    			{
    			DebugLocation(523, 10);
    			if (input.LA(1)==GT||input.LA(1)==123||(input.LA(1)>=149 && input.LA(1)<=150))
    			{
    				input.Consume();
    				state.errorRecovery=false;state.failed=false;
    			}
    			else
    			{
    				if (state.backtracking>0) {state.failed=true; return;}
    				MismatchedSetException mse = new MismatchedSetException(null,input);
    				DebugRecognitionException(mse);
    				throw mse;
    			}

    			DebugLocation(523, 32);
    			PushFollow(Follow._shift_expression_in_synpred247_cs3568);
    			shift_expression();
    			PopFollow();
    			if (state.failed) return;

    			}
    			break;

    		default:
    			goto loop452;
    		}
    	}

    	loop452:
    		;

    	} finally { DebugExitSubRule(452); }


    	}
    }
    // $ANTLR end synpred247_cs

    protected virtual void Enter_synpred252_cs_fragment() {}
    protected virtual void Leave_synpred252_cs_fragment() {}

    // $ANTLR start synpred252_cs
    public void synpred252_cs_fragment()
    {
    	// cs.g:530:23: ( '&' equality_expression )
    	DebugEnterAlt(1);
    	// cs.g:530:23: '&' equality_expression
    	{
    	DebugLocation(530, 23);
    	Match(input,129,Follow._129_in_synpred252_cs3629); if (state.failed) return;
    	DebugLocation(530, 29);
    	PushFollow(Follow._equality_expression_in_synpred252_cs3633);
    	equality_expression();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred252_cs

    protected virtual void Enter_synpred257_cs_fragment() {}
    protected virtual void Leave_synpred257_cs_fragment() {}

    // $ANTLR start synpred257_cs
    public void synpred257_cs_fragment()
    {
    	// cs.g:540:31: ( '??' null_coalescing_expression )
    	DebugEnterAlt(1);
    	// cs.g:540:31: '??' null_coalescing_expression
    	{
    	DebugLocation(540, 31);
    	Match(input,159,Follow._159_in_synpred257_cs3721); if (state.failed) return;
    	DebugLocation(540, 38);
    	PushFollow(Follow._null_coalescing_expression_in_synpred257_cs3725);
    	null_coalescing_expression();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred257_cs

    protected virtual void Enter_synpred272_cs_fragment() {}
    protected virtual void Leave_synpred272_cs_fragment() {}

    // $ANTLR start synpred272_cs
    public void synpred272_cs_fragment()
    {
    	// cs.g:555:2: ( explicit_anonymous_function_signature )
    	DebugEnterAlt(1);
    	// cs.g:555:2: explicit_anonymous_function_signature
    	{
    	DebugLocation(555, 2);
    	PushFollow(Follow._explicit_anonymous_function_signature_in_synpred272_cs3866);
    	explicit_anonymous_function_signature();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred272_cs

    protected virtual void Enter_synpred291_cs_fragment() {}
    protected virtual void Leave_synpred291_cs_fragment() {}

    // $ANTLR start synpred291_cs
    public void synpred291_cs_fragment()
    {
    	// cs.g:582:49: ( query_continuation )
    	DebugEnterAlt(1);
    	// cs.g:582:49: query_continuation
    	{
    	DebugLocation(582, 49);
    	PushFollow(Follow._query_continuation_in_synpred291_cs4084);
    	query_continuation();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred291_cs

    protected virtual void Enter_synpred299_cs_fragment() {}
    protected virtual void Leave_synpred299_cs_fragment() {}

    // $ANTLR start synpred299_cs
    public void synpred299_cs_fragment()
    {
    	// cs.g:600:2: ( ordering )
    	DebugEnterAlt(1);
    	// cs.g:600:2: ordering
    	{
    	DebugLocation(600, 2);
    	PushFollow(Follow._ordering_in_synpred299_cs4222);
    	ordering();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred299_cs

    protected virtual void Enter_synpred300_cs_fragment() {}
    protected virtual void Leave_synpred300_cs_fragment() {}

    // $ANTLR start synpred300_cs
    public void synpred300_cs_fragment()
    {
    	// cs.g:602:16: ( ordering_direction )
    	DebugEnterAlt(1);
    	// cs.g:602:16: ordering_direction
    	{
    	DebugLocation(602, 16);
    	PushFollow(Follow._ordering_direction_in_synpred300_cs4236);
    	ordering_direction();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred300_cs

    protected virtual void Enter_synpred320_cs_fragment() {}
    protected virtual void Leave_synpred320_cs_fragment() {}

    // $ANTLR start synpred320_cs
    public void synpred320_cs_fragment()
    {
    	// cs.g:627:2: ( ':' class_type ( ',' interface_type_list )? )
    	DebugEnterAlt(1);
    	// cs.g:627:2: ':' class_type ( ',' interface_type_list )?
    	{
    	DebugLocation(627, 2);
    	Match(input,100,Follow._100_in_synpred320_cs4412); if (state.failed) return;
    	DebugLocation(627, 8);
    	PushFollow(Follow._class_type_in_synpred320_cs4416);
    	class_type();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(627, 19);
    	// cs.g:627:19: ( ',' interface_type_list )?
    	int alt454=2;
    	try { DebugEnterSubRule(454);
    	try { DebugEnterDecision(454, decisionCanBacktrack[454]);
    	int LA454_0 = input.LA(1);

    	if ((LA454_0==98))
    	{
    		alt454=1;
    	}
    	} finally { DebugExitDecision(454); }
    	switch (alt454)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:627:20: ',' interface_type_list
    		{
    		DebugLocation(627, 20);
    		Match(input,98,Follow._98_in_synpred320_cs4419); if (state.failed) return;
    		DebugLocation(627, 24);
    		PushFollow(Follow._interface_type_list_in_synpred320_cs4421);
    		interface_type_list();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;

    	}
    	} finally { DebugExitSubRule(454); }


    	}
    }
    // $ANTLR end synpred320_cs

    protected virtual void Enter_synpred323_cs_fragment() {}
    protected virtual void Leave_synpred323_cs_fragment() {}

    // $ANTLR start synpred323_cs
    public void synpred323_cs_fragment()
    {
    	// cs.g:637:2: ( ( primary_constraint ',' secondary_constraint_list ',' constructor_constraint ) )
    	DebugEnterAlt(1);
    	// cs.g:637:2: ( primary_constraint ',' secondary_constraint_list ',' constructor_constraint )
    	{
    	DebugLocation(637, 2);
    	// cs.g:637:2: ( primary_constraint ',' secondary_constraint_list ',' constructor_constraint )
    	DebugEnterAlt(1);
    	// cs.g:637:3: primary_constraint ',' secondary_constraint_list ',' constructor_constraint
    	{
    	DebugLocation(637, 3);
    	PushFollow(Follow._primary_constraint_in_synpred323_cs4497);
    	primary_constraint();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(637, 26);
    	Match(input,98,Follow._98_in_synpred323_cs4503); if (state.failed) return;
    	DebugLocation(637, 32);
    	PushFollow(Follow._secondary_constraint_list_in_synpred323_cs4507);
    	secondary_constraint_list();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(637, 60);
    	Match(input,98,Follow._98_in_synpred323_cs4511); if (state.failed) return;
    	DebugLocation(637, 66);
    	PushFollow(Follow._constructor_constraint_in_synpred323_cs4515);
    	constructor_constraint();
    	PopFollow();
    	if (state.failed) return;

    	}


    	}
    }
    // $ANTLR end synpred323_cs

    protected virtual void Enter_synpred324_cs_fragment() {}
    protected virtual void Leave_synpred324_cs_fragment() {}

    // $ANTLR start synpred324_cs
    public void synpred324_cs_fragment()
    {
    	// cs.g:638:4: ( ( primary_constraint ',' secondary_constraint_list ) )
    	DebugEnterAlt(1);
    	// cs.g:638:4: ( primary_constraint ',' secondary_constraint_list )
    	{
    	DebugLocation(638, 4);
    	// cs.g:638:4: ( primary_constraint ',' secondary_constraint_list )
    	DebugEnterAlt(1);
    	// cs.g:638:5: primary_constraint ',' secondary_constraint_list
    	{
    	DebugLocation(638, 5);
    	PushFollow(Follow._primary_constraint_in_synpred324_cs4522);
    	primary_constraint();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(638, 28);
    	Match(input,98,Follow._98_in_synpred324_cs4528); if (state.failed) return;
    	DebugLocation(638, 34);
    	PushFollow(Follow._secondary_constraint_list_in_synpred324_cs4532);
    	secondary_constraint_list();
    	PopFollow();
    	if (state.failed) return;

    	}


    	}
    }
    // $ANTLR end synpred324_cs

    protected virtual void Enter_synpred325_cs_fragment() {}
    protected virtual void Leave_synpred325_cs_fragment() {}

    // $ANTLR start synpred325_cs
    public void synpred325_cs_fragment()
    {
    	// cs.g:639:4: ( ( primary_constraint ',' constructor_constraint ) )
    	DebugEnterAlt(1);
    	// cs.g:639:4: ( primary_constraint ',' constructor_constraint )
    	{
    	DebugLocation(639, 4);
    	// cs.g:639:4: ( primary_constraint ',' constructor_constraint )
    	DebugEnterAlt(1);
    	// cs.g:639:5: primary_constraint ',' constructor_constraint
    	{
    	DebugLocation(639, 5);
    	PushFollow(Follow._primary_constraint_in_synpred325_cs4539);
    	primary_constraint();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(639, 28);
    	Match(input,98,Follow._98_in_synpred325_cs4545); if (state.failed) return;
    	DebugLocation(639, 34);
    	PushFollow(Follow._constructor_constraint_in_synpred325_cs4549);
    	constructor_constraint();
    	PopFollow();
    	if (state.failed) return;

    	}


    	}
    }
    // $ANTLR end synpred325_cs

    protected virtual void Enter_synpred326_cs_fragment() {}
    protected virtual void Leave_synpred326_cs_fragment() {}

    // $ANTLR start synpred326_cs
    public void synpred326_cs_fragment()
    {
    	// cs.g:640:4: ( ( secondary_constraint_list ',' constructor_constraint ) )
    	DebugEnterAlt(1);
    	// cs.g:640:4: ( secondary_constraint_list ',' constructor_constraint )
    	{
    	DebugLocation(640, 4);
    	// cs.g:640:4: ( secondary_constraint_list ',' constructor_constraint )
    	DebugEnterAlt(1);
    	// cs.g:640:5: secondary_constraint_list ',' constructor_constraint
    	{
    	DebugLocation(640, 5);
    	PushFollow(Follow._secondary_constraint_list_in_synpred326_cs4556);
    	secondary_constraint_list();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(640, 34);
    	Match(input,98,Follow._98_in_synpred326_cs4561); if (state.failed) return;
    	DebugLocation(640, 40);
    	PushFollow(Follow._constructor_constraint_in_synpred326_cs4565);
    	constructor_constraint();
    	PopFollow();
    	if (state.failed) return;

    	}


    	}
    }
    // $ANTLR end synpred326_cs

    protected virtual void Enter_synpred327_cs_fragment() {}
    protected virtual void Leave_synpred327_cs_fragment() {}

    // $ANTLR start synpred327_cs
    public void synpred327_cs_fragment()
    {
    	// cs.g:641:4: ( primary_constraint )
    	DebugEnterAlt(1);
    	// cs.g:641:4: primary_constraint
    	{
    	DebugLocation(641, 4);
    	PushFollow(Follow._primary_constraint_in_synpred327_cs4571);
    	primary_constraint();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred327_cs

    protected virtual void Enter_synpred328_cs_fragment() {}
    protected virtual void Leave_synpred328_cs_fragment() {}

    // $ANTLR start synpred328_cs
    public void synpred328_cs_fragment()
    {
    	// cs.g:642:4: ( secondary_constraint_list )
    	DebugEnterAlt(1);
    	// cs.g:642:4: secondary_constraint_list
    	{
    	DebugLocation(642, 4);
    	PushFollow(Follow._secondary_constraint_list_in_synpred328_cs4576);
    	secondary_constraint_list();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred328_cs

    protected virtual void Enter_synpred332_cs_fragment() {}
    protected virtual void Leave_synpred332_cs_fragment() {}

    // $ANTLR start synpred332_cs
    public void synpred332_cs_fragment()
    {
    	// cs.g:653:3: ( type_name )
    	DebugEnterAlt(1);
    	// cs.g:653:3: type_name
    	{
    	DebugLocation(653, 3);
    	PushFollow(Follow._type_name_in_synpred332_cs4634);
    	type_name();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred332_cs

    protected virtual void Enter_synpred335_cs_fragment() {}
    protected virtual void Leave_synpred335_cs_fragment() {}

    // $ANTLR start synpred335_cs
    public void synpred335_cs_fragment()
    {
    	// cs.g:661:2: ( constant_declaration )
    	DebugEnterAlt(1);
    	// cs.g:661:2: constant_declaration
    	{
    	DebugLocation(661, 2);
    	PushFollow(Follow._constant_declaration_in_synpred335_cs4689);
    	constant_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred335_cs

    protected virtual void Enter_synpred336_cs_fragment() {}
    protected virtual void Leave_synpred336_cs_fragment() {}

    // $ANTLR start synpred336_cs
    public void synpred336_cs_fragment()
    {
    	// cs.g:662:4: ( field_declaration )
    	DebugEnterAlt(1);
    	// cs.g:662:4: field_declaration
    	{
    	DebugLocation(662, 4);
    	PushFollow(Follow._field_declaration_in_synpred336_cs4694);
    	field_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred336_cs

    protected virtual void Enter_synpred337_cs_fragment() {}
    protected virtual void Leave_synpred337_cs_fragment() {}

    // $ANTLR start synpred337_cs
    public void synpred337_cs_fragment()
    {
    	// cs.g:663:4: ( method_declaration )
    	DebugEnterAlt(1);
    	// cs.g:663:4: method_declaration
    	{
    	DebugLocation(663, 4);
    	PushFollow(Follow._method_declaration_in_synpred337_cs4699);
    	method_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred337_cs

    protected virtual void Enter_synpred338_cs_fragment() {}
    protected virtual void Leave_synpred338_cs_fragment() {}

    // $ANTLR start synpred338_cs
    public void synpred338_cs_fragment()
    {
    	// cs.g:664:4: ( property_declaration )
    	DebugEnterAlt(1);
    	// cs.g:664:4: property_declaration
    	{
    	DebugLocation(664, 4);
    	PushFollow(Follow._property_declaration_in_synpred338_cs4704);
    	property_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred338_cs

    protected virtual void Enter_synpred339_cs_fragment() {}
    protected virtual void Leave_synpred339_cs_fragment() {}

    // $ANTLR start synpred339_cs
    public void synpred339_cs_fragment()
    {
    	// cs.g:665:4: ( event_declaration )
    	DebugEnterAlt(1);
    	// cs.g:665:4: event_declaration
    	{
    	DebugLocation(665, 4);
    	PushFollow(Follow._event_declaration_in_synpred339_cs4709);
    	event_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred339_cs

    protected virtual void Enter_synpred340_cs_fragment() {}
    protected virtual void Leave_synpred340_cs_fragment() {}

    // $ANTLR start synpred340_cs
    public void synpred340_cs_fragment()
    {
    	// cs.g:666:4: ( indexer_declaration )
    	DebugEnterAlt(1);
    	// cs.g:666:4: indexer_declaration
    	{
    	DebugLocation(666, 4);
    	PushFollow(Follow._indexer_declaration_in_synpred340_cs4714);
    	indexer_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred340_cs

    protected virtual void Enter_synpred341_cs_fragment() {}
    protected virtual void Leave_synpred341_cs_fragment() {}

    // $ANTLR start synpred341_cs
    public void synpred341_cs_fragment()
    {
    	// cs.g:667:4: ( operator_declaration )
    	DebugEnterAlt(1);
    	// cs.g:667:4: operator_declaration
    	{
    	DebugLocation(667, 4);
    	PushFollow(Follow._operator_declaration_in_synpred341_cs4719);
    	operator_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred341_cs

    protected virtual void Enter_synpred342_cs_fragment() {}
    protected virtual void Leave_synpred342_cs_fragment() {}

    // $ANTLR start synpred342_cs
    public void synpred342_cs_fragment()
    {
    	// cs.g:668:4: ( constructor_declaration )
    	DebugEnterAlt(1);
    	// cs.g:668:4: constructor_declaration
    	{
    	DebugLocation(668, 4);
    	PushFollow(Follow._constructor_declaration_in_synpred342_cs4724);
    	constructor_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred342_cs

    protected virtual void Enter_synpred343_cs_fragment() {}
    protected virtual void Leave_synpred343_cs_fragment() {}

    // $ANTLR start synpred343_cs
    public void synpred343_cs_fragment()
    {
    	// cs.g:669:4: ( destructor_declaration )
    	DebugEnterAlt(1);
    	// cs.g:669:4: destructor_declaration
    	{
    	DebugLocation(669, 4);
    	PushFollow(Follow._destructor_declaration_in_synpred343_cs4729);
    	destructor_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred343_cs

    protected virtual void Enter_synpred344_cs_fragment() {}
    protected virtual void Leave_synpred344_cs_fragment() {}

    // $ANTLR start synpred344_cs
    public void synpred344_cs_fragment()
    {
    	// cs.g:670:4: ( static_constructor_declaration )
    	DebugEnterAlt(1);
    	// cs.g:670:4: static_constructor_declaration
    	{
    	DebugLocation(670, 4);
    	PushFollow(Follow._static_constructor_declaration_in_synpred344_cs4734);
    	static_constructor_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred344_cs

    protected virtual void Enter_synpred345_cs_fragment() {}
    protected virtual void Leave_synpred345_cs_fragment() {}

    // $ANTLR start synpred345_cs
    public void synpred345_cs_fragment()
    {
    	// cs.g:671:4: ( type_declaration )
    	DebugEnterAlt(1);
    	// cs.g:671:4: type_declaration
    	{
    	DebugLocation(671, 4);
    	PushFollow(Follow._type_declaration_in_synpred345_cs4739);
    	type_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred345_cs

    protected virtual void Enter_synpred386_cs_fragment() {}
    protected virtual void Leave_synpred386_cs_fragment() {}

    // $ANTLR start synpred386_cs
    public void synpred386_cs_fragment()
    {
    	// cs.g:708:2: ( type )
    	DebugEnterAlt(1);
    	// cs.g:708:2: type
    	{
    	DebugLocation(708, 2);
    	PushFollow(Follow._type_in_synpred386_cs5077);
    	type();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred386_cs

    protected virtual void Enter_synpred389_cs_fragment() {}
    protected virtual void Leave_synpred389_cs_fragment() {}

    // $ANTLR start synpred389_cs
    public void synpred389_cs_fragment()
    {
    	// cs.g:716:2: ( fixed_parameter )
    	DebugEnterAlt(1);
    	// cs.g:716:2: fixed_parameter
    	{
    	DebugLocation(716, 2);
    	PushFollow(Follow._fixed_parameter_in_synpred389_cs5125);
    	fixed_parameter();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred389_cs

    protected virtual void Enter_synpred390_cs_fragment() {}
    protected virtual void Leave_synpred390_cs_fragment() {}

    // $ANTLR start synpred390_cs
    public void synpred390_cs_fragment()
    {
    	// cs.g:716:20: ( parameter_array )
    	DebugEnterAlt(1);
    	// cs.g:716:20: parameter_array
    	{
    	DebugLocation(716, 20);
    	PushFollow(Follow._parameter_array_in_synpred390_cs5129);
    	parameter_array();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred390_cs

    protected virtual void Enter_synpred413_cs_fragment() {}
    protected virtual void Leave_synpred413_cs_fragment() {}

    // $ANTLR start synpred413_cs
    public void synpred413_cs_fragment()
    {
    	// cs.g:738:7: ( generic_parameter_list qid_part )
    	DebugEnterAlt(1);
    	// cs.g:738:7: generic_parameter_list qid_part
    	{
    	DebugLocation(738, 7);
    	PushFollow(Follow._generic_parameter_list_in_synpred413_cs5324);
    	generic_parameter_list();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(738, 30);
    	PushFollow(Follow._qid_part_in_synpred413_cs5326);
    	qid_part();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred413_cs

    protected virtual void Enter_synpred415_cs_fragment() {}
    protected virtual void Leave_synpred415_cs_fragment() {}

    // $ANTLR start synpred415_cs
    public void synpred415_cs_fragment()
    {
    	// cs.g:740:2: ( ( get_accessor_declaration ( set_accessor_declaration )? ) )
    	DebugEnterAlt(1);
    	// cs.g:740:2: ( get_accessor_declaration ( set_accessor_declaration )? )
    	{
    	DebugLocation(740, 2);
    	// cs.g:740:2: ( get_accessor_declaration ( set_accessor_declaration )? )
    	DebugEnterAlt(1);
    	// cs.g:740:3: get_accessor_declaration ( set_accessor_declaration )?
    	{
    	DebugLocation(740, 3);
    	PushFollow(Follow._get_accessor_declaration_in_synpred415_cs5339);
    	get_accessor_declaration();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(740, 30);
    	// cs.g:740:30: ( set_accessor_declaration )?
    	int alt455=2;
    	try { DebugEnterSubRule(455);
    	try { DebugEnterDecision(455, decisionCanBacktrack[455]);
    	int LA455_0 = input.LA(1);

    	if ((LA455_0==SET||LA455_0==97||(LA455_0>=170 && LA455_0<=173)))
    	{
    		alt455=1;
    	}
    	} finally { DebugExitDecision(455); }
    	switch (alt455)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:0:0: set_accessor_declaration
    		{
    		DebugLocation(740, 30);
    		PushFollow(Follow._set_accessor_declaration_in_synpred415_cs5343);
    		set_accessor_declaration();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;

    	}
    	} finally { DebugExitSubRule(455); }


    	}


    	}
    }
    // $ANTLR end synpred415_cs

    protected virtual void Enter_synpred428_cs_fragment() {}
    protected virtual void Leave_synpred428_cs_fragment() {}

    // $ANTLR start synpred428_cs
    public void synpred428_cs_fragment()
    {
    	// cs.g:752:2: ( ( ( attributes )? ( event_modifiers )? 'event' type variable_declarators ';' ) )
    	DebugEnterAlt(1);
    	// cs.g:752:2: ( ( attributes )? ( event_modifiers )? 'event' type variable_declarators ';' )
    	{
    	DebugLocation(752, 2);
    	// cs.g:752:2: ( ( attributes )? ( event_modifiers )? 'event' type variable_declarators ';' )
    	DebugEnterAlt(1);
    	// cs.g:752:4: ( attributes )? ( event_modifiers )? 'event' type variable_declarators ';'
    	{
    	DebugLocation(752, 4);
    	// cs.g:752:4: ( attributes )?
    	int alt456=2;
    	try { DebugEnterSubRule(456);
    	try { DebugEnterDecision(456, decisionCanBacktrack[456]);
    	int LA456_0 = input.LA(1);

    	if ((LA456_0==97))
    	{
    		alt456=1;
    	}
    	} finally { DebugExitDecision(456); }
    	switch (alt456)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:0:0: attributes
    		{
    		DebugLocation(752, 4);
    		PushFollow(Follow._attributes_in_synpred428_cs5463);
    		attributes();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;

    	}
    	} finally { DebugExitSubRule(456); }

    	DebugLocation(752, 18);
    	// cs.g:752:18: ( event_modifiers )?
    	int alt457=2;
    	try { DebugEnterSubRule(457);
    	try { DebugEnterDecision(457, decisionCanBacktrack[457]);
    	int LA457_0 = input.LA(1);

    	if ((LA457_0==94||LA457_0==138||(LA457_0>=170 && LA457_0<=174)||(LA457_0>=190 && LA457_0<=192)||(LA457_0>=197 && LA457_0<=198)))
    	{
    		alt457=1;
    	}
    	} finally { DebugExitDecision(457); }
    	switch (alt457)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:0:0: event_modifiers
    		{
    		DebugLocation(752, 18);
    		PushFollow(Follow._event_modifiers_in_synpred428_cs5468);
    		event_modifiers();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;

    	}
    	} finally { DebugExitSubRule(457); }

    	DebugLocation(752, 37);
    	Match(input,104,Follow._104_in_synpred428_cs5473); if (state.failed) return;
    	DebugLocation(752, 47);
    	PushFollow(Follow._type_in_synpred428_cs5477);
    	type();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(752, 54);
    	PushFollow(Follow._variable_declarators_in_synpred428_cs5481);
    	variable_declarators();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(752, 77);
    	new XToken((IToken)Match(input,SEMI,Follow._SEMI_in_synpred428_cs5485), "SEMI"); if (state.failed) return;

    	}


    	}
    }
    // $ANTLR end synpred428_cs

    protected virtual void Enter_synpred443_cs_fragment() {}
    protected virtual void Leave_synpred443_cs_fragment() {}

    // $ANTLR start synpred443_cs
    public void synpred443_cs_fragment()
    {
    	// cs.g:760:2: ( ( add_accessor_declaration remove_accessor_declaration ) )
    	DebugEnterAlt(1);
    	// cs.g:760:2: ( add_accessor_declaration remove_accessor_declaration )
    	{
    	DebugLocation(760, 2);
    	// cs.g:760:2: ( add_accessor_declaration remove_accessor_declaration )
    	DebugEnterAlt(1);
    	// cs.g:760:3: add_accessor_declaration remove_accessor_declaration
    	{
    	DebugLocation(760, 3);
    	PushFollow(Follow._add_accessor_declaration_in_synpred443_cs5596);
    	add_accessor_declaration();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(760, 30);
    	PushFollow(Follow._remove_accessor_declaration_in_synpred443_cs5600);
    	remove_accessor_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}


    	}
    }
    // $ANTLR end synpred443_cs

    protected virtual void Enter_synpred465_cs_fragment() {}
    protected virtual void Leave_synpred465_cs_fragment() {}

    // $ANTLR start synpred465_cs
    public void synpred465_cs_fragment()
    {
    	// cs.g:781:2: ( unary_operator_declarator )
    	DebugEnterAlt(1);
    	// cs.g:781:2: unary_operator_declarator
    	{
    	DebugLocation(781, 2);
    	PushFollow(Follow._unary_operator_declarator_in_synpred465_cs5822);
    	unary_operator_declarator();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred465_cs

    protected virtual void Enter_synpred466_cs_fragment() {}
    protected virtual void Leave_synpred466_cs_fragment() {}

    // $ANTLR start synpred466_cs
    public void synpred466_cs_fragment()
    {
    	// cs.g:782:4: ( binary_operator_declarator )
    	DebugEnterAlt(1);
    	// cs.g:782:4: binary_operator_declarator
    	{
    	DebugLocation(782, 4);
    	PushFollow(Follow._binary_operator_declarator_in_synpred466_cs5827);
    	binary_operator_declarator();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred466_cs

    protected virtual void Enter_synpred518_cs_fragment() {}
    protected virtual void Leave_synpred518_cs_fragment() {}

    // $ANTLR start synpred518_cs
    public void synpred518_cs_fragment()
    {
    	// cs.g:826:2: ( ( ( 'extern' )? 'unsafe' ) )
    	DebugEnterAlt(1);
    	// cs.g:826:2: ( ( 'extern' )? 'unsafe' )
    	{
    	DebugLocation(826, 2);
    	// cs.g:826:2: ( ( 'extern' )? 'unsafe' )
    	DebugEnterAlt(1);
    	// cs.g:826:3: ( 'extern' )? 'unsafe'
    	{
    	DebugLocation(826, 3);
    	// cs.g:826:3: ( 'extern' )?
    	int alt462=2;
    	try { DebugEnterSubRule(462);
    	try { DebugEnterDecision(462, decisionCanBacktrack[462]);
    	int LA462_0 = input.LA(1);

    	if ((LA462_0==94))
    	{
    		alt462=1;
    	}
    	} finally { DebugExitDecision(462); }
    	switch (alt462)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:0:0: 'extern'
    		{
    		DebugLocation(826, 3);
    		Match(input,94,Follow._94_in_synpred518_cs6348); if (state.failed) return;

    		}
    		break;

    	}
    	} finally { DebugExitSubRule(462); }

    	DebugLocation(826, 13);
    	Match(input,174,Follow._174_in_synpred518_cs6351); if (state.failed) return;

    	}


    	}
    }
    // $ANTLR end synpred518_cs

    protected virtual void Enter_synpred535_cs_fragment() {}
    protected virtual void Leave_synpred535_cs_fragment() {}

    // $ANTLR start synpred535_cs
    public void synpred535_cs_fragment()
    {
    	// cs.g:846:2: ( constant_declaration )
    	DebugEnterAlt(1);
    	// cs.g:846:2: constant_declaration
    	{
    	DebugLocation(846, 2);
    	PushFollow(Follow._constant_declaration_in_synpred535_cs6505);
    	constant_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred535_cs

    protected virtual void Enter_synpred536_cs_fragment() {}
    protected virtual void Leave_synpred536_cs_fragment() {}

    // $ANTLR start synpred536_cs
    public void synpred536_cs_fragment()
    {
    	// cs.g:847:4: ( field_declaration )
    	DebugEnterAlt(1);
    	// cs.g:847:4: field_declaration
    	{
    	DebugLocation(847, 4);
    	PushFollow(Follow._field_declaration_in_synpred536_cs6510);
    	field_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred536_cs

    protected virtual void Enter_synpred537_cs_fragment() {}
    protected virtual void Leave_synpred537_cs_fragment() {}

    // $ANTLR start synpred537_cs
    public void synpred537_cs_fragment()
    {
    	// cs.g:848:4: ( method_declaration )
    	DebugEnterAlt(1);
    	// cs.g:848:4: method_declaration
    	{
    	DebugLocation(848, 4);
    	PushFollow(Follow._method_declaration_in_synpred537_cs6515);
    	method_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred537_cs

    protected virtual void Enter_synpred538_cs_fragment() {}
    protected virtual void Leave_synpred538_cs_fragment() {}

    // $ANTLR start synpred538_cs
    public void synpred538_cs_fragment()
    {
    	// cs.g:849:4: ( property_declaration )
    	DebugEnterAlt(1);
    	// cs.g:849:4: property_declaration
    	{
    	DebugLocation(849, 4);
    	PushFollow(Follow._property_declaration_in_synpred538_cs6520);
    	property_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred538_cs

    protected virtual void Enter_synpred539_cs_fragment() {}
    protected virtual void Leave_synpred539_cs_fragment() {}

    // $ANTLR start synpred539_cs
    public void synpred539_cs_fragment()
    {
    	// cs.g:850:4: ( event_declaration )
    	DebugEnterAlt(1);
    	// cs.g:850:4: event_declaration
    	{
    	DebugLocation(850, 4);
    	PushFollow(Follow._event_declaration_in_synpred539_cs6525);
    	event_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred539_cs

    protected virtual void Enter_synpred540_cs_fragment() {}
    protected virtual void Leave_synpred540_cs_fragment() {}

    // $ANTLR start synpred540_cs
    public void synpred540_cs_fragment()
    {
    	// cs.g:851:4: ( indexer_declaration )
    	DebugEnterAlt(1);
    	// cs.g:851:4: indexer_declaration
    	{
    	DebugLocation(851, 4);
    	PushFollow(Follow._indexer_declaration_in_synpred540_cs6530);
    	indexer_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred540_cs

    protected virtual void Enter_synpred541_cs_fragment() {}
    protected virtual void Leave_synpred541_cs_fragment() {}

    // $ANTLR start synpred541_cs
    public void synpred541_cs_fragment()
    {
    	// cs.g:852:4: ( operator_declaration )
    	DebugEnterAlt(1);
    	// cs.g:852:4: operator_declaration
    	{
    	DebugLocation(852, 4);
    	PushFollow(Follow._operator_declaration_in_synpred541_cs6535);
    	operator_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred541_cs

    protected virtual void Enter_synpred542_cs_fragment() {}
    protected virtual void Leave_synpred542_cs_fragment() {}

    // $ANTLR start synpred542_cs
    public void synpred542_cs_fragment()
    {
    	// cs.g:853:4: ( constructor_declaration )
    	DebugEnterAlt(1);
    	// cs.g:853:4: constructor_declaration
    	{
    	DebugLocation(853, 4);
    	PushFollow(Follow._constructor_declaration_in_synpred542_cs6540);
    	constructor_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred542_cs

    protected virtual void Enter_synpred543_cs_fragment() {}
    protected virtual void Leave_synpred543_cs_fragment() {}

    // $ANTLR start synpred543_cs
    public void synpred543_cs_fragment()
    {
    	// cs.g:854:4: ( static_constructor_declaration )
    	DebugEnterAlt(1);
    	// cs.g:854:4: static_constructor_declaration
    	{
    	DebugLocation(854, 4);
    	PushFollow(Follow._static_constructor_declaration_in_synpred543_cs6545);
    	static_constructor_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred543_cs

    protected virtual void Enter_synpred559_cs_fragment() {}
    protected virtual void Leave_synpred559_cs_fragment() {}

    // $ANTLR start synpred559_cs
    public void synpred559_cs_fragment()
    {
    	// cs.g:873:2: ( interface_property_declaration )
    	DebugEnterAlt(1);
    	// cs.g:873:2: interface_property_declaration
    	{
    	DebugLocation(873, 2);
    	PushFollow(Follow._interface_property_declaration_in_synpred559_cs6694);
    	interface_property_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred559_cs

    protected virtual void Enter_synpred560_cs_fragment() {}
    protected virtual void Leave_synpred560_cs_fragment() {}

    // $ANTLR start synpred560_cs
    public void synpred560_cs_fragment()
    {
    	// cs.g:874:4: ( interface_method_declaration )
    	DebugEnterAlt(1);
    	// cs.g:874:4: interface_method_declaration
    	{
    	DebugLocation(874, 4);
    	PushFollow(Follow._interface_method_declaration_in_synpred560_cs6700);
    	interface_method_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred560_cs

    protected virtual void Enter_synpred561_cs_fragment() {}
    protected virtual void Leave_synpred561_cs_fragment() {}

    // $ANTLR start synpred561_cs
    public void synpred561_cs_fragment()
    {
    	// cs.g:875:4: ( interface_event_declaration )
    	DebugEnterAlt(1);
    	// cs.g:875:4: interface_event_declaration
    	{
    	DebugLocation(875, 4);
    	PushFollow(Follow._interface_event_declaration_in_synpred561_cs6706);
    	interface_event_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred561_cs

    protected virtual void Enter_synpred563_cs_fragment() {}
    protected virtual void Leave_synpred563_cs_fragment() {}

    // $ANTLR start synpred563_cs
    public void synpred563_cs_fragment()
    {
    	// cs.g:878:16: ( 'new' )
    	DebugEnterAlt(1);
    	// cs.g:878:16: 'new'
    	{
    	DebugLocation(878, 16);
    	Match(input,138,Follow._138_in_synpred563_cs6725); if (state.failed) return;

    	}
    }
    // $ANTLR end synpred563_cs

    protected virtual void Enter_synpred571_cs_fragment() {}
    protected virtual void Leave_synpred571_cs_fragment() {}

    // $ANTLR start synpred571_cs
    public void synpred571_cs_fragment()
    {
    	// cs.g:883:2: ( interface_get_accessor_declaration ( interface_set_accessor_declaration )? )
    	DebugEnterAlt(1);
    	// cs.g:883:2: interface_get_accessor_declaration ( interface_set_accessor_declaration )?
    	{
    	DebugLocation(883, 2);
    	PushFollow(Follow._interface_get_accessor_declaration_in_synpred571_cs6813);
    	interface_get_accessor_declaration();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(883, 39);
    	// cs.g:883:39: ( interface_set_accessor_declaration )?
    	int alt463=2;
    	try { DebugEnterSubRule(463);
    	try { DebugEnterDecision(463, decisionCanBacktrack[463]);
    	int LA463_0 = input.LA(1);

    	if ((LA463_0==SET||LA463_0==97))
    	{
    		alt463=1;
    	}
    	} finally { DebugExitDecision(463); }
    	switch (alt463)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:0:0: interface_set_accessor_declaration
    		{
    		DebugLocation(883, 39);
    		PushFollow(Follow._interface_set_accessor_declaration_in_synpred571_cs6817);
    		interface_set_accessor_declaration();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;

    	}
    	} finally { DebugExitSubRule(463); }


    	}
    }
    // $ANTLR end synpred571_cs

    protected virtual void Enter_synpred593_cs_fragment() {}
    protected virtual void Leave_synpred593_cs_fragment() {}

    // $ANTLR start synpred593_cs
    public void synpred593_cs_fragment()
    {
    	// cs.g:914:2: ( labeled_statement )
    	DebugEnterAlt(1);
    	// cs.g:914:2: labeled_statement
    	{
    	DebugLocation(914, 2);
    	PushFollow(Follow._labeled_statement_in_synpred593_cs7102);
    	labeled_statement();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred593_cs

    protected virtual void Enter_synpred594_cs_fragment() {}
    protected virtual void Leave_synpred594_cs_fragment() {}

    // $ANTLR start synpred594_cs
    public void synpred594_cs_fragment()
    {
    	// cs.g:915:4: ( declaration_statement )
    	DebugEnterAlt(1);
    	// cs.g:915:4: declaration_statement
    	{
    	DebugLocation(915, 4);
    	PushFollow(Follow._declaration_statement_in_synpred594_cs7107);
    	declaration_statement();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred594_cs

    protected virtual void Enter_synpred595_cs_fragment() {}
    protected virtual void Leave_synpred595_cs_fragment() {}

    // $ANTLR start synpred595_cs
    public void synpred595_cs_fragment()
    {
    	// cs.g:918:2: ( block )
    	DebugEnterAlt(1);
    	// cs.g:918:2: block
    	{
    	DebugLocation(918, 2);
    	PushFollow(Follow._block_in_synpred595_cs7120);
    	block();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred595_cs

    protected virtual void Enter_synpred596_cs_fragment() {}
    protected virtual void Leave_synpred596_cs_fragment() {}

    // $ANTLR start synpred596_cs
    public void synpred596_cs_fragment()
    {
    	// cs.g:919:4: ( empty_statement )
    	DebugEnterAlt(1);
    	// cs.g:919:4: empty_statement
    	{
    	DebugLocation(919, 4);
    	PushFollow(Follow._empty_statement_in_synpred596_cs7125);
    	empty_statement();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred596_cs

    protected virtual void Enter_synpred609_cs_fragment() {}
    protected virtual void Leave_synpred609_cs_fragment() {}

    // $ANTLR start synpred609_cs
    public void synpred609_cs_fragment()
    {
    	// cs.g:939:2: ( '&' variable_reference )
    	DebugEnterAlt(1);
    	// cs.g:939:2: '&' variable_reference
    	{
    	DebugLocation(939, 2);
    	Match(input,129,Follow._129_in_synpred609_cs7255); if (state.failed) return;
    	DebugLocation(939, 8);
    	PushFollow(Follow._variable_reference_in_synpred609_cs7259);
    	variable_reference();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred609_cs

    protected virtual void Enter_synpred614_cs_fragment() {}
    protected virtual void Leave_synpred614_cs_fragment() {}

    // $ANTLR start synpred614_cs
    public void synpred614_cs_fragment()
    {
    	// cs.g:958:2: ( type )
    	DebugEnterAlt(1);
    	// cs.g:958:2: type
    	{
    	DebugLocation(958, 2);
    	PushFollow(Follow._type_in_synpred614_cs7371);
    	type();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred614_cs

    protected virtual void Enter_synpred615_cs_fragment() {}
    protected virtual void Leave_synpred615_cs_fragment() {}

    // $ANTLR start synpred615_cs
    public void synpred615_cs_fragment()
    {
    	// cs.g:959:4: ( 'var' )
    	DebugEnterAlt(1);
    	// cs.g:959:4: 'var'
    	{
    	DebugLocation(959, 4);
    	Match(input,208,Follow._208_in_synpred615_cs7376); if (state.failed) return;

    	}
    }
    // $ANTLR end synpred615_cs

    protected virtual void Enter_synpred622_cs_fragment() {}
    protected virtual void Leave_synpred622_cs_fragment() {}

    // $ANTLR start synpred622_cs
    public void synpred622_cs_fragment()
    {
    	// cs.g:982:2: ( invocation_expression )
    	DebugEnterAlt(1);
    	// cs.g:982:2: invocation_expression
    	{
    	DebugLocation(982, 2);
    	PushFollow(Follow._invocation_expression_in_synpred622_cs7529);
    	invocation_expression();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred622_cs

    protected virtual void Enter_synpred623_cs_fragment() {}
    protected virtual void Leave_synpred623_cs_fragment() {}

    // $ANTLR start synpred623_cs
    public void synpred623_cs_fragment()
    {
    	// cs.g:983:4: ( object_creation_expression )
    	DebugEnterAlt(1);
    	// cs.g:983:4: object_creation_expression
    	{
    	DebugLocation(983, 4);
    	PushFollow(Follow._object_creation_expression_in_synpred623_cs7534);
    	object_creation_expression();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred623_cs

    protected virtual void Enter_synpred624_cs_fragment() {}
    protected virtual void Leave_synpred624_cs_fragment() {}

    // $ANTLR start synpred624_cs
    public void synpred624_cs_fragment()
    {
    	// cs.g:984:4: ( assignment )
    	DebugEnterAlt(1);
    	// cs.g:984:4: assignment
    	{
    	DebugLocation(984, 4);
    	PushFollow(Follow._assignment_in_synpred624_cs7539);
    	assignment();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred624_cs

    protected virtual void Enter_synpred626_cs_fragment() {}
    protected virtual void Leave_synpred626_cs_fragment() {}

    // $ANTLR start synpred626_cs
    public void synpred626_cs_fragment()
    {
    	// cs.g:990:63: ( else_statement )
    	DebugEnterAlt(1);
    	// cs.g:990:63: else_statement
    	{
    	DebugLocation(990, 63);
    	PushFollow(Follow._else_statement_in_synpred626_cs7584);
    	else_statement();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred626_cs

    protected virtual void Enter_synpred637_cs_fragment() {}
    protected virtual void Leave_synpred637_cs_fragment() {}

    // $ANTLR start synpred637_cs
    public void synpred637_cs_fragment()
    {
    	// cs.g:1020:2: ( local_variable_declaration )
    	DebugEnterAlt(1);
    	// cs.g:1020:2: local_variable_declaration
    	{
    	DebugLocation(1020, 2);
    	PushFollow(Follow._local_variable_declaration_in_synpred637_cs7830);
    	local_variable_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred637_cs

    protected virtual void Enter_synpred648_cs_fragment() {}
    protected virtual void Leave_synpred648_cs_fragment() {}

    // $ANTLR start synpred648_cs
    public void synpred648_cs_fragment()
    {
    	// cs.g:1049:7: ( ( 'try' block catch_clauses ( finally_clause )? ) )
    	DebugEnterAlt(1);
    	// cs.g:1049:7: ( 'try' block catch_clauses ( finally_clause )? )
    	{
    	DebugLocation(1049, 7);
    	// cs.g:1049:7: ( 'try' block catch_clauses ( finally_clause )? )
    	DebugEnterAlt(1);
    	// cs.g:1049:8: 'try' block catch_clauses ( finally_clause )?
    	{
    	DebugLocation(1049, 8);
    	Match(input,221,Follow._221_in_synpred648_cs8054); if (state.failed) return;
    	DebugLocation(1049, 16);
    	PushFollow(Follow._block_in_synpred648_cs8058);
    	block();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(1049, 24);
    	PushFollow(Follow._catch_clauses_in_synpred648_cs8062);
    	catch_clauses();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(1049, 40);
    	// cs.g:1049:40: ( finally_clause )?
    	int alt465=2;
    	try { DebugEnterSubRule(465);
    	try { DebugEnterDecision(465, decisionCanBacktrack[465]);
    	int LA465_0 = input.LA(1);

    	if ((LA465_0==223))
    	{
    		alt465=1;
    	}
    	} finally { DebugExitDecision(465); }
    	switch (alt465)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:0:0: finally_clause
    		{
    		DebugLocation(1049, 40);
    		PushFollow(Follow._finally_clause_in_synpred648_cs8066);
    		finally_clause();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;

    	}
    	} finally { DebugExitSubRule(465); }


    	}


    	}
    }
    // $ANTLR end synpred648_cs

    protected virtual void Enter_synpred650_cs_fragment() {}
    protected virtual void Leave_synpred650_cs_fragment() {}

    // $ANTLR start synpred650_cs
    public void synpred650_cs_fragment()
    {
    	// cs.g:1052:2: ( ( specific_catch_clauses ( general_catch_clause )? ) )
    	DebugEnterAlt(1);
    	// cs.g:1052:2: ( specific_catch_clauses ( general_catch_clause )? )
    	{
    	DebugLocation(1052, 2);
    	// cs.g:1052:2: ( specific_catch_clauses ( general_catch_clause )? )
    	DebugEnterAlt(1);
    	// cs.g:1052:3: specific_catch_clauses ( general_catch_clause )?
    	{
    	DebugLocation(1052, 3);
    	PushFollow(Follow._specific_catch_clauses_in_synpred650_cs8091);
    	specific_catch_clauses();
    	PopFollow();
    	if (state.failed) return;
    	DebugLocation(1052, 28);
    	// cs.g:1052:28: ( general_catch_clause )?
    	int alt466=2;
    	try { DebugEnterSubRule(466);
    	try { DebugEnterDecision(466, decisionCanBacktrack[466]);
    	int LA466_0 = input.LA(1);

    	if ((LA466_0==222))
    	{
    		alt466=1;
    	}
    	} finally { DebugExitDecision(466); }
    	switch (alt466)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// cs.g:0:0: general_catch_clause
    		{
    		DebugLocation(1052, 28);
    		PushFollow(Follow._general_catch_clause_in_synpred650_cs8095);
    		general_catch_clause();
    		PopFollow();
    		if (state.failed) return;

    		}
    		break;

    	}
    	} finally { DebugExitSubRule(466); }


    	}


    	}
    }
    // $ANTLR end synpred650_cs

    protected virtual void Enter_synpred654_cs_fragment() {}
    protected virtual void Leave_synpred654_cs_fragment() {}

    // $ANTLR start synpred654_cs
    public void synpred654_cs_fragment()
    {
    	// cs.g:1071:2: ( local_variable_declaration )
    	DebugEnterAlt(1);
    	// cs.g:1071:2: local_variable_declaration
    	{
    	DebugLocation(1071, 2);
    	PushFollow(Follow._local_variable_declaration_in_synpred654_cs8252);
    	local_variable_declaration();
    	PopFollow();
    	if (state.failed) return;

    	}
    }
    // $ANTLR end synpred654_cs
	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	DFA1 dfa1;
	DFA3 dfa3;
	DFA8 dfa8;
	DFA10 dfa10;
	DFA19 dfa19;
	DFA42 dfa42;
	DFA48 dfa48;
	DFA44 dfa44;
	DFA45 dfa45;
	DFA46 dfa46;
	DFA47 dfa47;
	DFA54 dfa54;
	DFA57 dfa57;
	DFA55 dfa55;
	DFA56 dfa56;
	DFA58 dfa58;
	DFA69 dfa69;
	DFA82 dfa82;
	DFA81 dfa81;
	DFA88 dfa88;
	DFA84 dfa84;
	DFA85 dfa85;
	DFA86 dfa86;
	DFA87 dfa87;
	DFA89 dfa89;
	DFA96 dfa96;
	DFA98 dfa98;
	DFA99 dfa99;
	DFA104 dfa104;
	DFA129 dfa129;
	DFA156 dfa156;
	DFA157 dfa157;
	DFA162 dfa162;
	DFA164 dfa164;
	DFA194 dfa194;
	DFA209 dfa209;
	DFA215 dfa215;
	DFA236 dfa236;
	DFA271 dfa271;
	DFA283 dfa283;
	DFA299 dfa299;
	DFA310 dfa310;
	DFA338 dfa338;
	DFA339 dfa339;
	DFA341 dfa341;
	DFA352 dfa352;
	DFA363 dfa363;
	DFA376 dfa376;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa1 = new DFA1( this, SpecialStateTransition1 );
		dfa3 = new DFA3( this, SpecialStateTransition3 );
		dfa8 = new DFA8( this, SpecialStateTransition8 );
		dfa10 = new DFA10( this, SpecialStateTransition10 );
		dfa19 = new DFA19( this, SpecialStateTransition19 );
		dfa42 = new DFA42( this, SpecialStateTransition42 );
		dfa48 = new DFA48( this, SpecialStateTransition48 );
		dfa44 = new DFA44( this, SpecialStateTransition44 );
		dfa45 = new DFA45( this, SpecialStateTransition45 );
		dfa46 = new DFA46( this, SpecialStateTransition46 );
		dfa47 = new DFA47( this, SpecialStateTransition47 );
		dfa54 = new DFA54( this, SpecialStateTransition54 );
		dfa57 = new DFA57( this, SpecialStateTransition57 );
		dfa55 = new DFA55( this, SpecialStateTransition55 );
		dfa56 = new DFA56( this, SpecialStateTransition56 );
		dfa58 = new DFA58( this, SpecialStateTransition58 );
		dfa69 = new DFA69( this, SpecialStateTransition69 );
		dfa82 = new DFA82( this, SpecialStateTransition82 );
		dfa81 = new DFA81( this, SpecialStateTransition81 );
		dfa88 = new DFA88( this );
		dfa84 = new DFA84( this, SpecialStateTransition84 );
		dfa85 = new DFA85( this, SpecialStateTransition85 );
		dfa86 = new DFA86( this, SpecialStateTransition86 );
		dfa87 = new DFA87( this, SpecialStateTransition87 );
		dfa89 = new DFA89( this, SpecialStateTransition89 );
		dfa96 = new DFA96( this, SpecialStateTransition96 );
		dfa98 = new DFA98( this, SpecialStateTransition98 );
		dfa99 = new DFA99( this, SpecialStateTransition99 );
		dfa104 = new DFA104( this, SpecialStateTransition104 );
		dfa129 = new DFA129( this, SpecialStateTransition129 );
		dfa156 = new DFA156( this, SpecialStateTransition156 );
		dfa157 = new DFA157( this, SpecialStateTransition157 );
		dfa162 = new DFA162( this, SpecialStateTransition162 );
		dfa164 = new DFA164( this, SpecialStateTransition164 );
		dfa194 = new DFA194( this, SpecialStateTransition194 );
		dfa209 = new DFA209( this, SpecialStateTransition209 );
		dfa215 = new DFA215( this, SpecialStateTransition215 );
		dfa236 = new DFA236( this, SpecialStateTransition236 );
		dfa271 = new DFA271( this );
		dfa283 = new DFA283( this );
		dfa299 = new DFA299( this, SpecialStateTransition299 );
		dfa310 = new DFA310( this, SpecialStateTransition310 );
		dfa338 = new DFA338( this, SpecialStateTransition338 );
		dfa339 = new DFA339( this, SpecialStateTransition339 );
		dfa341 = new DFA341( this, SpecialStateTransition341 );
		dfa352 = new DFA352( this, SpecialStateTransition352 );
		dfa363 = new DFA363( this, SpecialStateTransition363 );
		dfa376 = new DFA376( this, SpecialStateTransition376 );
	}

	private class DFA1 : DFA
	{
		private const string DFA1_eotS =
			"\x10\uffff";
		private const string DFA1_eofS =
			"\x01\x02\x0f\uffff";
		private const string DFA1_minS =
			"\x01\x2c\x01\x00\x0e\uffff";
		private const string DFA1_maxS =
			"\x01\u00ce\x01\x00\x0e\uffff";
		private const string DFA1_acceptS =
			"\x02\uffff\x01\x02\x0c\uffff\x01\x01";
		private const string DFA1_specialS =
			"\x01\uffff\x01\x00\x0e\uffff}>";
		private static readonly string[] DFA1_transitionS =
			{
				"\x01\x01\x01\x02\x2a\uffff\x01\x02\x05\uffff\x01\x02\x02\uffff\x01"+
				"\x02\x28\uffff\x01\x02\x05\uffff\x01\x02\x19\uffff\x05\x02\x0d\uffff"+
				"\x06\x02\x0c\uffff\x01\x02",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA1_eot = DFA.UnpackEncodedString(DFA1_eotS);
		private static readonly short[] DFA1_eof = DFA.UnpackEncodedString(DFA1_eofS);
		private static readonly char[] DFA1_min = DFA.UnpackEncodedStringToUnsignedChars(DFA1_minS);
		private static readonly char[] DFA1_max = DFA.UnpackEncodedStringToUnsignedChars(DFA1_maxS);
		private static readonly short[] DFA1_accept = DFA.UnpackEncodedString(DFA1_acceptS);
		private static readonly short[] DFA1_special = DFA.UnpackEncodedString(DFA1_specialS);
		private static readonly short[][] DFA1_transition;

		static DFA1()
		{
			int numStates = DFA1_transitionS.Length;
			DFA1_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA1_transition[i] = DFA.UnpackEncodedString(DFA1_transitionS[i]);
			}
		}

		public DFA1( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 1;
			this.eot = DFA1_eot;
			this.eof = DFA1_eof;
			this.min = DFA1_min;
			this.max = DFA1_max;
			this.accept = DFA1_accept;
			this.special = DFA1_special;
			this.transition = DFA1_transition;
		}

		public override string Description { get { return "78:2: ( using_directives )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition1(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA1_1 = input.LA(1);


				int index1_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred1_cs_fragment)) ) {s = 15;}

				else if ( (true) ) {s = 2;}


				input.Seek(index1_1);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 1, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA3 : DFA
	{
		private const string DFA3_eotS =
			"\x10\uffff";
		private const string DFA3_eofS =
			"\x01\x02\x0f\uffff";
		private const string DFA3_minS =
			"\x01\x2c\x01\x00\x0e\uffff";
		private const string DFA3_maxS =
			"\x01\u00ce\x01\x00\x0e\uffff";
		private const string DFA3_acceptS =
			"\x02\uffff\x01\x02\x0c\uffff\x01\x01";
		private const string DFA3_specialS =
			"\x01\uffff\x01\x00\x0e\uffff}>";
		private static readonly string[] DFA3_transitionS =
			{
				"\x02\x02\x2a\uffff\x01\x01\x05\uffff\x01\x02\x02\uffff\x01\x02\x28"+
				"\uffff\x01\x02\x05\uffff\x01\x02\x19\uffff\x05\x02\x0d\uffff\x06\x02"+
				"\x0c\uffff\x01\x02",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA3_eot = DFA.UnpackEncodedString(DFA3_eotS);
		private static readonly short[] DFA3_eof = DFA.UnpackEncodedString(DFA3_eofS);
		private static readonly char[] DFA3_min = DFA.UnpackEncodedStringToUnsignedChars(DFA3_minS);
		private static readonly char[] DFA3_max = DFA.UnpackEncodedStringToUnsignedChars(DFA3_maxS);
		private static readonly short[] DFA3_accept = DFA.UnpackEncodedString(DFA3_acceptS);
		private static readonly short[] DFA3_special = DFA.UnpackEncodedString(DFA3_specialS);
		private static readonly short[][] DFA3_transition;

		static DFA3()
		{
			int numStates = DFA3_transitionS.Length;
			DFA3_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA3_transition[i] = DFA.UnpackEncodedString(DFA3_transitionS[i]);
			}
		}

		public DFA3( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 3;
			this.eot = DFA3_eot;
			this.eof = DFA3_eof;
			this.min = DFA3_min;
			this.max = DFA3_max;
			this.accept = DFA3_accept;
			this.special = DFA3_special;
			this.transition = DFA3_transition;
		}

		public override string Description { get { return "80:2: ( namespace_declaration )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition3(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA3_1 = input.LA(1);


				int index3_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred3_cs_fragment)) ) {s = 15;}

				else if ( (true) ) {s = 2;}


				input.Seek(index3_1);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 3, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA8 : DFA
	{
		private const string DFA8_eotS =
			"\x0a\uffff";
		private const string DFA8_eofS =
			"\x01\x02\x09\uffff";
		private const string DFA8_minS =
			"\x01\x28\x01\x1e\x01\uffff\x02\x28\x01\uffff\x01\x1e\x01\x00\x02\x28";
		private const string DFA8_maxS =
			"\x01\x7b\x01\u00e2\x01\uffff\x02\x7b\x01\uffff\x01\u00e2\x01\x00\x02"+
			"\x7b";
		private const string DFA8_acceptS =
			"\x02\uffff\x01\x02\x02\uffff\x01\x01\x04\uffff";
		private const string DFA8_specialS =
			"\x07\uffff\x01\x00\x02\uffff}>";
		private static readonly string[] DFA8_transitionS =
			{
				"\x02\x02\x32\uffff\x01\x02\x04\uffff\x01\x02\x0c\uffff\x01\x02\x0c"+
				"\uffff\x01\x01",
				"\x01\x03\x10\uffff\x01\x04\x2f\uffff\x01\x04\x01\uffff\x01\x02\x03"+
				"\uffff\x07\x04\x01\uffff\x01\x04\x03\uffff\x0a\x05\x09\uffff\x06\x05"+
				"\x25\uffff\x0d\x04\x0b\uffff\x01\x04\x01\uffff\x02\x04\x05\uffff\x01"+
				"\x04\x10\uffff\x02\x04",
				"",
				"\x01\x05\x02\uffff\x01\x07\x2d\uffff\x01\x05\x07\uffff\x01\x05\x01"+
				"\x06\x0c\uffff\x02\x05\x0a\uffff\x01\x05",
				"\x01\x05\x02\uffff\x01\x07\x2d\uffff\x01\x05\x07\uffff\x01\x05\x01"+
				"\x06\x0c\uffff\x02\x05\x0a\uffff\x01\x05",
				"",
				"\x01\x08\x10\uffff\x01\x09\x2f\uffff\x01\x09\x01\uffff\x01\x02\x03"+
				"\uffff\x07\x09\x01\uffff\x01\x09\x03\uffff\x0a\x05\x09\uffff\x06\x05"+
				"\x25\uffff\x0d\x09\x0b\uffff\x01\x09\x01\uffff\x02\x09\x05\uffff\x01"+
				"\x09\x10\uffff\x02\x09",
				"\x01\uffff",
				"\x01\x05\x02\uffff\x01\x07\x2d\uffff\x01\x05\x07\uffff\x01\x05\x01"+
				"\x06\x0c\uffff\x02\x05\x0a\uffff\x01\x05",
				"\x01\x05\x02\uffff\x01\x07\x2d\uffff\x01\x05\x07\uffff\x01\x05\x01"+
				"\x06\x0c\uffff\x02\x05\x0a\uffff\x01\x05"
			};

		private static readonly short[] DFA8_eot = DFA.UnpackEncodedString(DFA8_eotS);
		private static readonly short[] DFA8_eof = DFA.UnpackEncodedString(DFA8_eofS);
		private static readonly char[] DFA8_min = DFA.UnpackEncodedStringToUnsignedChars(DFA8_minS);
		private static readonly char[] DFA8_max = DFA.UnpackEncodedStringToUnsignedChars(DFA8_maxS);
		private static readonly short[] DFA8_accept = DFA.UnpackEncodedString(DFA8_acceptS);
		private static readonly short[] DFA8_special = DFA.UnpackEncodedString(DFA8_specialS);
		private static readonly short[][] DFA8_transition;

		static DFA8()
		{
			int numStates = DFA8_transitionS.Length;
			DFA8_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA8_transition[i] = DFA.UnpackEncodedString(DFA8_transitionS[i]);
			}
		}

		public DFA8( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 8;
			this.eot = DFA8_eot;
			this.eof = DFA8_eof;
			this.min = DFA8_min;
			this.max = DFA8_max;
			this.accept = DFA8_accept;
			this.special = DFA8_special;
			this.transition = DFA8_transition;
		}

		public override string Description { get { return "92:32: ( generic_argument_list )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition8(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA8_7 = input.LA(1);


				int index8_7 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred8_cs_fragment)) ) {s = 5;}

				else if ( (true) ) {s = 2;}


				input.Seek(index8_7);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 8, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA10 : DFA
	{
		private const string DFA10_eotS =
			"\x0a\uffff";
		private const string DFA10_eofS =
			"\x01\x02\x09\uffff";
		private const string DFA10_minS =
			"\x01\x28\x01\x1e\x01\uffff\x02\x28\x01\uffff\x01\x1e\x01\x00\x02\x28";
		private const string DFA10_maxS =
			"\x01\x7b\x01\u00e2\x01\uffff\x02\x7b\x01\uffff\x01\u00e2\x01\x00\x02"+
			"\x7b";
		private const string DFA10_acceptS =
			"\x02\uffff\x01\x02\x02\uffff\x01\x01\x04\uffff";
		private const string DFA10_specialS =
			"\x07\uffff\x01\x00\x02\uffff}>";
		private static readonly string[] DFA10_transitionS =
			{
				"\x02\x02\x32\uffff\x01\x02\x04\uffff\x01\x02\x0c\uffff\x01\x02\x0c"+
				"\uffff\x01\x01",
				"\x01\x03\x10\uffff\x01\x04\x2f\uffff\x01\x04\x01\uffff\x01\x02\x03"+
				"\uffff\x07\x04\x01\uffff\x01\x04\x03\uffff\x0a\x05\x09\uffff\x06\x05"+
				"\x25\uffff\x0d\x04\x0b\uffff\x01\x04\x01\uffff\x02\x04\x05\uffff\x01"+
				"\x04\x10\uffff\x02\x04",
				"",
				"\x01\x05\x02\uffff\x01\x07\x2d\uffff\x01\x05\x07\uffff\x01\x05\x01"+
				"\x06\x0c\uffff\x02\x05\x0a\uffff\x01\x05",
				"\x01\x05\x02\uffff\x01\x07\x2d\uffff\x01\x05\x07\uffff\x01\x05\x01"+
				"\x06\x0c\uffff\x02\x05\x0a\uffff\x01\x05",
				"",
				"\x01\x08\x10\uffff\x01\x09\x2f\uffff\x01\x09\x01\uffff\x01\x02\x03"+
				"\uffff\x07\x09\x01\uffff\x01\x09\x03\uffff\x0a\x05\x09\uffff\x06\x05"+
				"\x25\uffff\x0d\x09\x0b\uffff\x01\x09\x01\uffff\x02\x09\x05\uffff\x01"+
				"\x09\x10\uffff\x02\x09",
				"\x01\uffff",
				"\x01\x05\x02\uffff\x01\x07\x2d\uffff\x01\x05\x07\uffff\x01\x05\x01"+
				"\x06\x0c\uffff\x02\x05\x0a\uffff\x01\x05",
				"\x01\x05\x02\uffff\x01\x07\x2d\uffff\x01\x05\x07\uffff\x01\x05\x01"+
				"\x06\x0c\uffff\x02\x05\x0a\uffff\x01\x05"
			};

		private static readonly short[] DFA10_eot = DFA.UnpackEncodedString(DFA10_eotS);
		private static readonly short[] DFA10_eof = DFA.UnpackEncodedString(DFA10_eofS);
		private static readonly char[] DFA10_min = DFA.UnpackEncodedStringToUnsignedChars(DFA10_minS);
		private static readonly char[] DFA10_max = DFA.UnpackEncodedStringToUnsignedChars(DFA10_maxS);
		private static readonly short[] DFA10_accept = DFA.UnpackEncodedString(DFA10_acceptS);
		private static readonly short[] DFA10_special = DFA.UnpackEncodedString(DFA10_specialS);
		private static readonly short[][] DFA10_transition;

		static DFA10()
		{
			int numStates = DFA10_transitionS.Length;
			DFA10_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA10_transition[i] = DFA.UnpackEncodedString(DFA10_transitionS[i]);
			}
		}

		public DFA10( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 10;
			this.eot = DFA10_eot;
			this.eof = DFA10_eof;
			this.min = DFA10_min;
			this.max = DFA10_max;
			this.accept = DFA10_accept;
			this.special = DFA10_special;
			this.transition = DFA10_transition;
		}

		public override string Description { get { return "98:33: ( generic_argument_list )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition10(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA10_7 = input.LA(1);


				int index10_7 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred13_cs_fragment)) ) {s = 5;}

				else if ( (true) ) {s = 2;}


				input.Seek(index10_7);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 10, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA19 : DFA
	{
		private const string DFA19_eotS =
			"\x0b\uffff";
		private const string DFA19_eofS =
			"\x0b\uffff";
		private const string DFA19_minS =
			"\x01\x2d\x03\x00\x04\uffff\x01\x00\x02\uffff";
		private const string DFA19_maxS =
			"\x01\u00ce\x03\x00\x04\uffff\x01\x00\x02\uffff";
		private const string DFA19_acceptS =
			"\x04\uffff\x01\x01\x01\uffff\x01\x02\x01\x03\x01\uffff\x01\x04\x01\x05";
		private const string DFA19_specialS =
			"\x01\uffff\x01\x00\x01\x01\x01\x02\x04\uffff\x01\x03\x02\uffff}>";
		private static readonly string[] DFA19_transitionS =
			{
				"\x01\x09\x33\uffff\x01\x01\x28\uffff\x01\x02\x05\uffff\x01\x0a\x19"+
				"\uffff\x04\x02\x01\x08\x0d\uffff\x01\x03\x04\x04\x01\x06\x0c\uffff\x01"+
				"\x07",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"\x01\uffff",
				"",
				""
			};

		private static readonly short[] DFA19_eot = DFA.UnpackEncodedString(DFA19_eotS);
		private static readonly short[] DFA19_eof = DFA.UnpackEncodedString(DFA19_eofS);
		private static readonly char[] DFA19_min = DFA.UnpackEncodedStringToUnsignedChars(DFA19_minS);
		private static readonly char[] DFA19_max = DFA.UnpackEncodedStringToUnsignedChars(DFA19_maxS);
		private static readonly short[] DFA19_accept = DFA.UnpackEncodedString(DFA19_acceptS);
		private static readonly short[] DFA19_special = DFA.UnpackEncodedString(DFA19_specialS);
		private static readonly short[][] DFA19_transition;

		static DFA19()
		{
			int numStates = DFA19_transitionS.Length;
			DFA19_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA19_transition[i] = DFA.UnpackEncodedString(DFA19_transitionS[i]);
			}
		}

		public DFA19( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 19;
			this.eot = DFA19_eot;
			this.eof = DFA19_eof;
			this.min = DFA19_min;
			this.max = DFA19_max;
			this.accept = DFA19_accept;
			this.special = DFA19_special;
			this.transition = DFA19_transition;
		}

		public override string Description { get { return "124:1: type_declaration : ( class_declaration | struct_declaration | interface_declaration | enum_declaration | delegate_declaration );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition19(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA19_1 = input.LA(1);


				int index19_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred22_cs_fragment)) ) {s = 4;}

				else if ( (EvaluatePredicate(synpred23_cs_fragment)) ) {s = 6;}

				else if ( (EvaluatePredicate(synpred24_cs_fragment)) ) {s = 7;}

				else if ( (EvaluatePredicate(synpred25_cs_fragment)) ) {s = 9;}

				else if ( (true) ) {s = 10;}


				input.Seek(index19_1);
				if ( s>=0 ) return s;
				break;
			case 1:
				int LA19_2 = input.LA(1);


				int index19_2 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred22_cs_fragment)) ) {s = 4;}

				else if ( (EvaluatePredicate(synpred23_cs_fragment)) ) {s = 6;}

				else if ( (EvaluatePredicate(synpred24_cs_fragment)) ) {s = 7;}

				else if ( (EvaluatePredicate(synpred25_cs_fragment)) ) {s = 9;}

				else if ( (true) ) {s = 10;}


				input.Seek(index19_2);
				if ( s>=0 ) return s;
				break;
			case 2:
				int LA19_3 = input.LA(1);


				int index19_3 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred22_cs_fragment)) ) {s = 4;}

				else if ( (EvaluatePredicate(synpred23_cs_fragment)) ) {s = 6;}

				else if ( (EvaluatePredicate(synpred24_cs_fragment)) ) {s = 7;}


				input.Seek(index19_3);
				if ( s>=0 ) return s;
				break;
			case 3:
				int LA19_8 = input.LA(1);


				int index19_8 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred22_cs_fragment)) ) {s = 4;}

				else if ( (EvaluatePredicate(synpred23_cs_fragment)) ) {s = 6;}

				else if ( (EvaluatePredicate(synpred24_cs_fragment)) ) {s = 7;}

				else if ( (true) ) {s = 10;}


				input.Seek(index19_8);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 19, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA42 : DFA
	{
		private const string DFA42_eotS =
			"\x0c\uffff";
		private const string DFA42_eofS =
			"\x0c\uffff";
		private const string DFA42_minS =
			"\x01\x1e\x03\x00\x08\uffff";
		private const string DFA42_maxS =
			"\x01\u00e2\x03\x00\x08\uffff";
		private const string DFA42_acceptS =
			"\x04\uffff\x01\x08\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x06\x01"+
			"\x07";
		private const string DFA42_specialS =
			"\x01\uffff\x01\x00\x01\x01\x01\x02\x08\uffff}>";
		private static readonly string[] DFA42_transitionS =
			{
				"\x01\x01\x10\uffff\x01\x02\x2f\uffff\x01\x02\x05\uffff\x07\x02\x01"+
				"\uffff\x01\x02\x03\uffff\x01\x04\x09\x03\x09\uffff\x06\x03\x25\uffff"+
				"\x0d\x02\x0b\uffff\x01\x02\x01\uffff\x02\x02\x05\uffff\x01\x02\x10\uffff"+
				"\x02\x02",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA42_eot = DFA.UnpackEncodedString(DFA42_eotS);
		private static readonly short[] DFA42_eof = DFA.UnpackEncodedString(DFA42_eofS);
		private static readonly char[] DFA42_min = DFA.UnpackEncodedStringToUnsignedChars(DFA42_minS);
		private static readonly char[] DFA42_max = DFA.UnpackEncodedStringToUnsignedChars(DFA42_maxS);
		private static readonly short[] DFA42_accept = DFA.UnpackEncodedString(DFA42_acceptS);
		private static readonly short[] DFA42_special = DFA.UnpackEncodedString(DFA42_specialS);
		private static readonly short[][] DFA42_transition;

		static DFA42()
		{
			int numStates = DFA42_transitionS.Length;
			DFA42_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA42_transition[i] = DFA.UnpackEncodedString(DFA42_transitionS[i]);
			}
		}

		public DFA42( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 42;
			this.eot = DFA42_eot;
			this.eof = DFA42_eof;
			this.min = DFA42_min;
			this.max = DFA42_max;
			this.accept = DFA42_accept;
			this.special = DFA42_special;
			this.transition = DFA42_transition;
		}

		public override string Description { get { return "187:1: type : ( ( type_name | predefined_type ) rank_specifiers ( '*' )* | type_name ( '*' )+ | type_name '?' | type_name | predefined_type ( '*' )+ | predefined_type '?' | predefined_type | 'void' ( '*' )+ );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition42(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA42_1 = input.LA(1);


				int index42_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred53_cs_fragment)) ) {s = 5;}

				else if ( (EvaluatePredicate(synpred55_cs_fragment)) ) {s = 6;}

				else if ( (EvaluatePredicate(synpred56_cs_fragment)) ) {s = 7;}

				else if ( (EvaluatePredicate(synpred57_cs_fragment)) ) {s = 8;}


				input.Seek(index42_1);
				if ( s>=0 ) return s;
				break;
			case 1:
				int LA42_2 = input.LA(1);


				int index42_2 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred53_cs_fragment)) ) {s = 5;}

				else if ( (EvaluatePredicate(synpred55_cs_fragment)) ) {s = 6;}

				else if ( (EvaluatePredicate(synpred56_cs_fragment)) ) {s = 7;}

				else if ( (EvaluatePredicate(synpred57_cs_fragment)) ) {s = 8;}


				input.Seek(index42_2);
				if ( s>=0 ) return s;
				break;
			case 2:
				int LA42_3 = input.LA(1);


				int index42_3 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred53_cs_fragment)) ) {s = 5;}

				else if ( (EvaluatePredicate(synpred59_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred60_cs_fragment)) ) {s = 10;}

				else if ( (EvaluatePredicate(synpred61_cs_fragment)) ) {s = 11;}


				input.Seek(index42_3);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 42, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA48 : DFA
	{
		private const string DFA48_eotS =
			"\x0a\uffff";
		private const string DFA48_eofS =
			"\x0a\uffff";
		private const string DFA48_minS =
			"\x01\x1e\x03\x00\x06\uffff";
		private const string DFA48_maxS =
			"\x01\u00e2\x03\x00\x06\uffff";
		private const string DFA48_acceptS =
			"\x04\uffff\x01\x06\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05";
		private const string DFA48_specialS =
			"\x01\uffff\x01\x00\x01\x01\x01\x02\x06\uffff}>";
		private static readonly string[] DFA48_transitionS =
			{
				"\x01\x01\x10\uffff\x01\x02\x2f\uffff\x01\x02\x05\uffff\x07\x02\x01"+
				"\uffff\x01\x02\x03\uffff\x01\x04\x09\x03\x09\uffff\x06\x03\x25\uffff"+
				"\x0d\x02\x0b\uffff\x01\x02\x01\uffff\x02\x02\x05\uffff\x01\x02\x10\uffff"+
				"\x02\x02",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA48_eot = DFA.UnpackEncodedString(DFA48_eotS);
		private static readonly short[] DFA48_eof = DFA.UnpackEncodedString(DFA48_eofS);
		private static readonly char[] DFA48_min = DFA.UnpackEncodedStringToUnsignedChars(DFA48_minS);
		private static readonly char[] DFA48_max = DFA.UnpackEncodedStringToUnsignedChars(DFA48_maxS);
		private static readonly short[] DFA48_accept = DFA.UnpackEncodedString(DFA48_acceptS);
		private static readonly short[] DFA48_special = DFA.UnpackEncodedString(DFA48_specialS);
		private static readonly short[][] DFA48_transition;

		static DFA48()
		{
			int numStates = DFA48_transitionS.Length;
			DFA48_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA48_transition[i] = DFA.UnpackEncodedString(DFA48_transitionS[i]);
			}
		}

		public DFA48( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 48;
			this.eot = DFA48_eot;
			this.eof = DFA48_eof;
			this.min = DFA48_min;
			this.max = DFA48_max;
			this.accept = DFA48_accept;
			this.special = DFA48_special;
			this.transition = DFA48_transition;
		}

		public override string Description { get { return "196:1: non_nullable_type : ( ( type_name | predefined_type ) rank_specifiers ( '*' )* | type_name ( '*' )+ | type_name | predefined_type ( '*' )+ | predefined_type | 'void' ( '*' )+ );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition48(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA48_1 = input.LA(1);


				int index48_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred65_cs_fragment)) ) {s = 5;}

				else if ( (EvaluatePredicate(synpred67_cs_fragment)) ) {s = 6;}

				else if ( (EvaluatePredicate(synpred68_cs_fragment)) ) {s = 7;}


				input.Seek(index48_1);
				if ( s>=0 ) return s;
				break;
			case 1:
				int LA48_2 = input.LA(1);


				int index48_2 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred65_cs_fragment)) ) {s = 5;}

				else if ( (EvaluatePredicate(synpred67_cs_fragment)) ) {s = 6;}

				else if ( (EvaluatePredicate(synpred68_cs_fragment)) ) {s = 7;}


				input.Seek(index48_2);
				if ( s>=0 ) return s;
				break;
			case 2:
				int LA48_3 = input.LA(1);


				int index48_3 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred65_cs_fragment)) ) {s = 5;}

				else if ( (EvaluatePredicate(synpred70_cs_fragment)) ) {s = 8;}

				else if ( (EvaluatePredicate(synpred71_cs_fragment)) ) {s = 9;}


				input.Seek(index48_3);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 48, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA44 : DFA
	{
		private const string DFA44_eotS =
			"\x36\uffff";
		private const string DFA44_eofS =
			"\x01\x01\x35\uffff";
		private const string DFA44_minS =
			"\x01\x1e\x1f\uffff\x01\x00\x15\uffff";
		private const string DFA44_maxS =
			"\x01\u00e2\x1f\uffff\x01\x00\x15\uffff";
		private const string DFA44_acceptS =
			"\x01\uffff\x01\x02\x33\uffff\x01\x01";
		private const string DFA44_specialS =
			"\x20\uffff\x01\x00\x15\uffff}>";
		private static readonly string[] DFA44_transitionS =
			{
				"\x0a\x01\x02\uffff\x01\x01\x04\uffff\x01\x01\x04\uffff\x02\x01\x24"+
				"\uffff\x02\x01\x01\uffff\x01\x01\x01\uffff\x01\x01\x01\uffff\x0b\x01"+
				"\x01\uffff\x02\x01\x01\x20\x0b\x01\x01\uffff\x15\x01\x06\uffff\x09\x01"+
				"\x0f\uffff\x0d\x01\x0b\uffff\x01\x01\x01\uffff\x02\x01\x05\uffff\x01"+
				"\x01\x10\uffff\x02\x01",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA44_eot = DFA.UnpackEncodedString(DFA44_eotS);
		private static readonly short[] DFA44_eof = DFA.UnpackEncodedString(DFA44_eofS);
		private static readonly char[] DFA44_min = DFA.UnpackEncodedStringToUnsignedChars(DFA44_minS);
		private static readonly char[] DFA44_max = DFA.UnpackEncodedStringToUnsignedChars(DFA44_maxS);
		private static readonly short[] DFA44_accept = DFA.UnpackEncodedString(DFA44_acceptS);
		private static readonly short[] DFA44_special = DFA.UnpackEncodedString(DFA44_specialS);
		private static readonly short[][] DFA44_transition;

		static DFA44()
		{
			int numStates = DFA44_transitionS.Length;
			DFA44_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA44_transition[i] = DFA.UnpackEncodedString(DFA44_transitionS[i]);
			}
		}

		public DFA44( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 44;
			this.eot = DFA44_eot;
			this.eof = DFA44_eof;
			this.min = DFA44_min;
			this.max = DFA44_max;
			this.accept = DFA44_accept;
			this.special = DFA44_special;
			this.transition = DFA44_transition;
		}

		public override string Description { get { return "()* loopback of 197:56: ( '*' )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition44(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA44_32 = input.LA(1);


				int index44_32 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred64_cs_fragment)) ) {s = 53;}

				else if ( (true) ) {s = 1;}


				input.Seek(index44_32);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 44, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA45 : DFA
	{
		private const string DFA45_eotS =
			"\x36\uffff";
		private const string DFA45_eofS =
			"\x01\x01\x35\uffff";
		private const string DFA45_minS =
			"\x01\x1e\x1f\uffff\x01\x00\x15\uffff";
		private const string DFA45_maxS =
			"\x01\u00e2\x1f\uffff\x01\x00\x15\uffff";
		private const string DFA45_acceptS =
			"\x01\uffff\x01\x02\x33\uffff\x01\x01";
		private const string DFA45_specialS =
			"\x20\uffff\x01\x00\x15\uffff}>";
		private static readonly string[] DFA45_transitionS =
			{
				"\x0a\x01\x02\uffff\x01\x01\x04\uffff\x01\x01\x04\uffff\x02\x01\x24"+
				"\uffff\x02\x01\x01\uffff\x01\x01\x01\uffff\x01\x01\x01\uffff\x0b\x01"+
				"\x01\uffff\x02\x01\x01\x20\x0b\x01\x01\uffff\x15\x01\x06\uffff\x09\x01"+
				"\x0f\uffff\x0d\x01\x0b\uffff\x01\x01\x01\uffff\x02\x01\x05\uffff\x01"+
				"\x01\x10\uffff\x02\x01",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA45_eot = DFA.UnpackEncodedString(DFA45_eotS);
		private static readonly short[] DFA45_eof = DFA.UnpackEncodedString(DFA45_eofS);
		private static readonly char[] DFA45_min = DFA.UnpackEncodedStringToUnsignedChars(DFA45_minS);
		private static readonly char[] DFA45_max = DFA.UnpackEncodedStringToUnsignedChars(DFA45_maxS);
		private static readonly short[] DFA45_accept = DFA.UnpackEncodedString(DFA45_acceptS);
		private static readonly short[] DFA45_special = DFA.UnpackEncodedString(DFA45_specialS);
		private static readonly short[][] DFA45_transition;

		static DFA45()
		{
			int numStates = DFA45_transitionS.Length;
			DFA45_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA45_transition[i] = DFA.UnpackEncodedString(DFA45_transitionS[i]);
			}
		}

		public DFA45( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 45;
			this.eot = DFA45_eot;
			this.eof = DFA45_eof;
			this.min = DFA45_min;
			this.max = DFA45_max;
			this.accept = DFA45_accept;
			this.special = DFA45_special;
			this.transition = DFA45_transition;
		}

		public override string Description { get { return "()+ loopback of 198:14: ( '*' )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition45(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA45_32 = input.LA(1);


				int index45_32 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred66_cs_fragment)) ) {s = 53;}

				else if ( (true) ) {s = 1;}


				input.Seek(index45_32);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 45, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA46 : DFA
	{
		private const string DFA46_eotS =
			"\x36\uffff";
		private const string DFA46_eofS =
			"\x01\x01\x35\uffff";
		private const string DFA46_minS =
			"\x01\x1e\x1f\uffff\x01\x00\x15\uffff";
		private const string DFA46_maxS =
			"\x01\u00e2\x1f\uffff\x01\x00\x15\uffff";
		private const string DFA46_acceptS =
			"\x01\uffff\x01\x02\x33\uffff\x01\x01";
		private const string DFA46_specialS =
			"\x20\uffff\x01\x00\x15\uffff}>";
		private static readonly string[] DFA46_transitionS =
			{
				"\x0a\x01\x02\uffff\x01\x01\x04\uffff\x01\x01\x04\uffff\x02\x01\x24"+
				"\uffff\x02\x01\x01\uffff\x01\x01\x01\uffff\x01\x01\x01\uffff\x0b\x01"+
				"\x01\uffff\x02\x01\x01\x20\x0b\x01\x01\uffff\x15\x01\x06\uffff\x09\x01"+
				"\x0f\uffff\x0d\x01\x0b\uffff\x01\x01\x01\uffff\x02\x01\x05\uffff\x01"+
				"\x01\x10\uffff\x02\x01",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA46_eot = DFA.UnpackEncodedString(DFA46_eotS);
		private static readonly short[] DFA46_eof = DFA.UnpackEncodedString(DFA46_eofS);
		private static readonly char[] DFA46_min = DFA.UnpackEncodedStringToUnsignedChars(DFA46_minS);
		private static readonly char[] DFA46_max = DFA.UnpackEncodedStringToUnsignedChars(DFA46_maxS);
		private static readonly short[] DFA46_accept = DFA.UnpackEncodedString(DFA46_acceptS);
		private static readonly short[] DFA46_special = DFA.UnpackEncodedString(DFA46_specialS);
		private static readonly short[][] DFA46_transition;

		static DFA46()
		{
			int numStates = DFA46_transitionS.Length;
			DFA46_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA46_transition[i] = DFA.UnpackEncodedString(DFA46_transitionS[i]);
			}
		}

		public DFA46( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 46;
			this.eot = DFA46_eot;
			this.eof = DFA46_eof;
			this.min = DFA46_min;
			this.max = DFA46_max;
			this.accept = DFA46_accept;
			this.special = DFA46_special;
			this.transition = DFA46_transition;
		}

		public override string Description { get { return "()+ loopback of 200:20: ( '*' )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition46(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA46_32 = input.LA(1);


				int index46_32 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred69_cs_fragment)) ) {s = 53;}

				else if ( (true) ) {s = 1;}


				input.Seek(index46_32);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 46, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA47 : DFA
	{
		private const string DFA47_eotS =
			"\x36\uffff";
		private const string DFA47_eofS =
			"\x01\x01\x35\uffff";
		private const string DFA47_minS =
			"\x01\x1e\x1f\uffff\x01\x00\x15\uffff";
		private const string DFA47_maxS =
			"\x01\u00e2\x1f\uffff\x01\x00\x15\uffff";
		private const string DFA47_acceptS =
			"\x01\uffff\x01\x02\x33\uffff\x01\x01";
		private const string DFA47_specialS =
			"\x20\uffff\x01\x00\x15\uffff}>";
		private static readonly string[] DFA47_transitionS =
			{
				"\x0a\x01\x02\uffff\x01\x01\x04\uffff\x01\x01\x04\uffff\x02\x01\x24"+
				"\uffff\x02\x01\x01\uffff\x01\x01\x01\uffff\x01\x01\x01\uffff\x0b\x01"+
				"\x01\uffff\x02\x01\x01\x20\x0b\x01\x01\uffff\x15\x01\x06\uffff\x09\x01"+
				"\x0f\uffff\x0d\x01\x0b\uffff\x01\x01\x01\uffff\x02\x01\x05\uffff\x01"+
				"\x01\x10\uffff\x02\x01",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA47_eot = DFA.UnpackEncodedString(DFA47_eotS);
		private static readonly short[] DFA47_eof = DFA.UnpackEncodedString(DFA47_eofS);
		private static readonly char[] DFA47_min = DFA.UnpackEncodedStringToUnsignedChars(DFA47_minS);
		private static readonly char[] DFA47_max = DFA.UnpackEncodedStringToUnsignedChars(DFA47_maxS);
		private static readonly short[] DFA47_accept = DFA.UnpackEncodedString(DFA47_acceptS);
		private static readonly short[] DFA47_special = DFA.UnpackEncodedString(DFA47_specialS);
		private static readonly short[][] DFA47_transition;

		static DFA47()
		{
			int numStates = DFA47_transitionS.Length;
			DFA47_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA47_transition[i] = DFA.UnpackEncodedString(DFA47_transitionS[i]);
			}
		}

		public DFA47( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 47;
			this.eot = DFA47_eot;
			this.eof = DFA47_eof;
			this.min = DFA47_min;
			this.max = DFA47_max;
			this.accept = DFA47_accept;
			this.special = DFA47_special;
			this.transition = DFA47_transition;
		}

		public override string Description { get { return "()+ loopback of 202:13: ( '*' )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition47(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA47_32 = input.LA(1);


				int index47_32 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred72_cs_fragment)) ) {s = 53;}

				else if ( (true) ) {s = 1;}


				input.Seek(index47_32);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 47, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA54 : DFA
	{
		private const string DFA54_eotS =
			"\x1a\uffff";
		private const string DFA54_eofS =
			"\x1a\uffff";
		private const string DFA54_minS =
			"\x01\x1e\x17\x00\x02\uffff";
		private const string DFA54_maxS =
			"\x01\u00e2\x17\x00\x02\uffff";
		private const string DFA54_acceptS =
			"\x18\uffff\x01\x01\x01\x02";
		private const string DFA54_specialS =
			"\x01\uffff\x01\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x06\x01"+
			"\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0c\x01\x0d\x01\x0e\x01\x0f"+
			"\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\x16\x02\uffff}>";
		private static readonly string[] DFA54_transitionS =
			{
				"\x01\x0a\x09\x0c\x02\uffff\x01\x03\x04\uffff\x01\x17\x2a\uffff\x01"+
				"\x0d\x01\x0e\x03\uffff\x01\x17\x05\uffff\x07\x17\x01\uffff\x01\x17\x01"+
				"\x01\x01\x06\x02\uffff\x09\x09\x01\uffff\x01\x02\x01\x04\x01\x05\x01"+
				"\x07\x01\x08\x01\x16\x02\uffff\x06\x09\x01\x0f\x01\x11\x01\x10\x01\x12"+
				"\x01\x13\x01\x14\x01\x15\x1e\uffff\x01\x0b\x0c\x17\x0b\uffff\x01\x17"+
				"\x01\uffff\x02\x17\x05\uffff\x01\x17\x10\uffff\x02\x17",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"",
				""
			};

		private static readonly short[] DFA54_eot = DFA.UnpackEncodedString(DFA54_eotS);
		private static readonly short[] DFA54_eof = DFA.UnpackEncodedString(DFA54_eofS);
		private static readonly char[] DFA54_min = DFA.UnpackEncodedStringToUnsignedChars(DFA54_minS);
		private static readonly char[] DFA54_max = DFA.UnpackEncodedStringToUnsignedChars(DFA54_maxS);
		private static readonly short[] DFA54_accept = DFA.UnpackEncodedString(DFA54_acceptS);
		private static readonly short[] DFA54_special = DFA.UnpackEncodedString(DFA54_specialS);
		private static readonly short[][] DFA54_transition;

		static DFA54()
		{
			int numStates = DFA54_transitionS.Length;
			DFA54_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA54_transition[i] = DFA.UnpackEncodedString(DFA54_transitionS[i]);
			}
		}

		public DFA54( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 54;
			this.eot = DFA54_eot;
			this.eof = DFA54_eof;
			this.min = DFA54_min;
			this.max = DFA54_max;
			this.accept = DFA54_accept;
			this.special = DFA54_special;
			this.transition = DFA54_transition;
		}

		public override string Description { get { return "235:1: expression : ( non_assignment_expression | assignment );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition54(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA54_1 = input.LA(1);


				int index54_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred86_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index54_1);
				if ( s>=0 ) return s;
				break;
			case 1:
				int LA54_2 = input.LA(1);


				int index54_2 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred86_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index54_2);
				if ( s>=0 ) return s;
				break;
			case 2:
				int LA54_3 = input.LA(1);


				int index54_3 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred86_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index54_3);
				if ( s>=0 ) return s;
				break;
			case 3:
				int LA54_4 = input.LA(1);


				int index54_4 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred86_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index54_4);
				if ( s>=0 ) return s;
				break;
			case 4:
				int LA54_5 = input.LA(1);


				int index54_5 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred86_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index54_5);
				if ( s>=0 ) return s;
				break;
			case 5:
				int LA54_6 = input.LA(1);


				int index54_6 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred86_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index54_6);
				if ( s>=0 ) return s;
				break;
			case 6:
				int LA54_7 = input.LA(1);


				int index54_7 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred86_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index54_7);
				if ( s>=0 ) return s;
				break;
			case 7:
				int LA54_8 = input.LA(1);


				int index54_8 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred86_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index54_8);
				if ( s>=0 ) return s;
				break;
			case 8:
				int LA54_9 = input.LA(1);


				int index54_9 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred86_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index54_9);
				if ( s>=0 ) return s;
				break;
			case 9:
				int LA54_10 = input.LA(1);


				int index54_10 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred86_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index54_10);
				if ( s>=0 ) return s;
				break;
			case 10:
				int LA54_11 = input.LA(1);


				int index54_11 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred86_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index54_11);
				if ( s>=0 ) return s;
				break;
			case 11:
				int LA54_12 = input.LA(1);


				int index54_12 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred86_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index54_12);
				if ( s>=0 ) return s;
				break;
			case 12:
				int LA54_13 = input.LA(1);


				int index54_13 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred86_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index54_13);
				if ( s>=0 ) return s;
				break;
			case 13:
				int LA54_14 = input.LA(1);


				int index54_14 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred86_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index54_14);
				if ( s>=0 ) return s;
				break;
			case 14:
				int LA54_15 = input.LA(1);


				int index54_15 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred86_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index54_15);
				if ( s>=0 ) return s;
				break;
			case 15:
				int LA54_16 = input.LA(1);


				int index54_16 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred86_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index54_16);
				if ( s>=0 ) return s;
				break;
			case 16:
				int LA54_17 = input.LA(1);


				int index54_17 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred86_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index54_17);
				if ( s>=0 ) return s;
				break;
			case 17:
				int LA54_18 = input.LA(1);


				int index54_18 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred86_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index54_18);
				if ( s>=0 ) return s;
				break;
			case 18:
				int LA54_19 = input.LA(1);


				int index54_19 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred86_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index54_19);
				if ( s>=0 ) return s;
				break;
			case 19:
				int LA54_20 = input.LA(1);


				int index54_20 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred86_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index54_20);
				if ( s>=0 ) return s;
				break;
			case 20:
				int LA54_21 = input.LA(1);


				int index54_21 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred86_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index54_21);
				if ( s>=0 ) return s;
				break;
			case 21:
				int LA54_22 = input.LA(1);


				int index54_22 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred86_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index54_22);
				if ( s>=0 ) return s;
				break;
			case 22:
				int LA54_23 = input.LA(1);


				int index54_23 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred86_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index54_23);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 54, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA57 : DFA
	{
		private const string DFA57_eotS =
			"\x1a\uffff";
		private const string DFA57_eofS =
			"\x1a\uffff";
		private const string DFA57_minS =
			"\x01\x1e\x01\x00\x04\uffff\x01\x00\x13\uffff";
		private const string DFA57_maxS =
			"\x01\u00e2\x01\x00\x04\uffff\x01\x00\x13\uffff";
		private const string DFA57_acceptS =
			"\x02\uffff\x01\x02\x01\x03\x01\x04\x01\x05\x01\uffff\x01\x07\x01\x08"+
			"\x01\x09\x0c\uffff\x01\x0b\x01\x01\x01\x06\x01\x0a";
		private const string DFA57_specialS =
			"\x01\uffff\x01\x00\x04\uffff\x01\x01\x13\uffff}>";
		private static readonly string[] DFA57_transitionS =
			{
				"\x0a\x09\x02\uffff\x01\x03\x04\uffff\x01\x09\x2a\uffff\x02\x09\x03"+
				"\uffff\x01\x09\x05\uffff\x07\x09\x01\uffff\x01\x09\x01\x01\x01\x06\x02"+
				"\uffff\x09\x09\x01\uffff\x01\x02\x01\x04\x01\x05\x01\x07\x01\x08\x01"+
				"\x16\x02\uffff\x0d\x09\x1e\uffff\x0d\x09\x0b\uffff\x01\x09\x01\uffff"+
				"\x02\x09\x05\uffff\x01\x09\x10\uffff\x02\x09",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA57_eot = DFA.UnpackEncodedString(DFA57_eotS);
		private static readonly short[] DFA57_eof = DFA.UnpackEncodedString(DFA57_eofS);
		private static readonly char[] DFA57_min = DFA.UnpackEncodedStringToUnsignedChars(DFA57_minS);
		private static readonly char[] DFA57_max = DFA.UnpackEncodedStringToUnsignedChars(DFA57_maxS);
		private static readonly short[] DFA57_accept = DFA.UnpackEncodedString(DFA57_acceptS);
		private static readonly short[] DFA57_special = DFA.UnpackEncodedString(DFA57_specialS);
		private static readonly short[][] DFA57_transition;

		static DFA57()
		{
			int numStates = DFA57_transitionS.Length;
			DFA57_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA57_transition[i] = DFA.UnpackEncodedString(DFA57_transitionS[i]);
			}
		}

		public DFA57( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 57;
			this.eot = DFA57_eot;
			this.eof = DFA57_eof;
			this.min = DFA57_min;
			this.max = DFA57_max;
			this.accept = DFA57_accept;
			this.special = DFA57_special;
			this.transition = DFA57_transition;
		}

		public override string Description { get { return "238:1: unary_expression : ( cast_expression | '+' unary_expression | '-' unary_expression | '!' unary_expression | '~' unary_expression | '*' unary_expression | pre_increment_expression | pre_decrement_expression | primary_or_array_creation_expression ( '++' )? ( '--' )? | pointer_indirection_expression | addressof_expression );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition57(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA57_1 = input.LA(1);


				int index57_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred87_cs_fragment)) ) {s = 23;}

				else if ( (EvaluatePredicate(synpred97_cs_fragment)) ) {s = 9;}


				input.Seek(index57_1);
				if ( s>=0 ) return s;
				break;
			case 1:
				int LA57_6 = input.LA(1);


				int index57_6 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred92_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred98_cs_fragment)) ) {s = 25;}


				input.Seek(index57_6);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 57, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA55 : DFA
	{
		private const string DFA55_eotS =
			"\x44\uffff";
		private const string DFA55_eofS =
			"\x01\x02\x43\uffff";
		private const string DFA55_minS =
			"\x01\x1e\x01\x00\x42\uffff";
		private const string DFA55_maxS =
			"\x01\u00e2\x01\x00\x42\uffff";
		private const string DFA55_acceptS =
			"\x02\uffff\x01\x02\x40\uffff\x01\x01";
		private const string DFA55_specialS =
			"\x01\uffff\x01\x00\x42\uffff}>";
		private static readonly string[] DFA55_transitionS =
			{
				"\x0a\x02\x02\uffff\x02\x02\x03\uffff\x01\x02\x04\uffff\x02\x02\x24"+
				"\uffff\x02\x02\x01\uffff\x01\x02\x01\uffff\x0d\x02\x01\uffff\x12\x02"+
				"\x01\x01\x11\x02\x01\uffff\x17\x02\x06\uffff\x0d\x02\x0b\uffff\x01\x02"+
				"\x01\uffff\x02\x02\x05\uffff\x01\x02\x10\uffff\x02\x02",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA55_eot = DFA.UnpackEncodedString(DFA55_eotS);
		private static readonly short[] DFA55_eof = DFA.UnpackEncodedString(DFA55_eofS);
		private static readonly char[] DFA55_min = DFA.UnpackEncodedStringToUnsignedChars(DFA55_minS);
		private static readonly char[] DFA55_max = DFA.UnpackEncodedStringToUnsignedChars(DFA55_maxS);
		private static readonly short[] DFA55_accept = DFA.UnpackEncodedString(DFA55_acceptS);
		private static readonly short[] DFA55_special = DFA.UnpackEncodedString(DFA55_specialS);
		private static readonly short[][] DFA55_transition;

		static DFA55()
		{
			int numStates = DFA55_transitionS.Length;
			DFA55_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA55_transition[i] = DFA.UnpackEncodedString(DFA55_transitionS[i]);
			}
		}

		public DFA55( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 55;
			this.eot = DFA55_eot;
			this.eof = DFA55_eof;
			this.min = DFA55_min;
			this.max = DFA55_max;
			this.accept = DFA55_accept;
			this.special = DFA55_special;
			this.transition = DFA55_transition;
		}

		public override string Description { get { return "247:43: ( '++' )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition55(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA55_1 = input.LA(1);


				int index55_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred95_cs_fragment)) ) {s = 67;}

				else if ( (true) ) {s = 2;}


				input.Seek(index55_1);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 55, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA56 : DFA
	{
		private const string DFA56_eotS =
			"\x44\uffff";
		private const string DFA56_eofS =
			"\x01\x02\x43\uffff";
		private const string DFA56_minS =
			"\x01\x1e\x01\x00\x42\uffff";
		private const string DFA56_maxS =
			"\x01\u00e2\x01\x00\x42\uffff";
		private const string DFA56_acceptS =
			"\x02\uffff\x01\x02\x40\uffff\x01\x01";
		private const string DFA56_specialS =
			"\x01\uffff\x01\x00\x42\uffff}>";
		private static readonly string[] DFA56_transitionS =
			{
				"\x0a\x02\x02\uffff\x02\x02\x03\uffff\x01\x02\x04\uffff\x02\x02\x24"+
				"\uffff\x02\x02\x01\uffff\x01\x02\x01\uffff\x0d\x02\x01\uffff\x13\x02"+
				"\x01\x01\x10\x02\x01\uffff\x17\x02\x06\uffff\x0d\x02\x0b\uffff\x01\x02"+
				"\x01\uffff\x02\x02\x05\uffff\x01\x02\x10\uffff\x02\x02",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA56_eot = DFA.UnpackEncodedString(DFA56_eotS);
		private static readonly short[] DFA56_eof = DFA.UnpackEncodedString(DFA56_eofS);
		private static readonly char[] DFA56_min = DFA.UnpackEncodedStringToUnsignedChars(DFA56_minS);
		private static readonly char[] DFA56_max = DFA.UnpackEncodedStringToUnsignedChars(DFA56_maxS);
		private static readonly short[] DFA56_accept = DFA.UnpackEncodedString(DFA56_acceptS);
		private static readonly short[] DFA56_special = DFA.UnpackEncodedString(DFA56_specialS);
		private static readonly short[][] DFA56_transition;

		static DFA56()
		{
			int numStates = DFA56_transitionS.Length;
			DFA56_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA56_transition[i] = DFA.UnpackEncodedString(DFA56_transitionS[i]);
			}
		}

		public DFA56( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 56;
			this.eot = DFA56_eot;
			this.eof = DFA56_eof;
			this.min = DFA56_min;
			this.max = DFA56_max;
			this.accept = DFA56_accept;
			this.special = DFA56_special;
			this.transition = DFA56_transition;
		}

		public override string Description { get { return "247:51: ( '--' )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition56(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA56_1 = input.LA(1);


				int index56_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred96_cs_fragment)) ) {s = 67;}

				else if ( (true) ) {s = 2;}


				input.Seek(index56_1);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 56, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA58 : DFA
	{
		private const string DFA58_eotS =
			"\x1a\uffff";
		private const string DFA58_eofS =
			"\x1a\uffff";
		private const string DFA58_minS =
			"\x01\x1e\x01\x00\x08\uffff\x02\x00\x0b\uffff\x01\x00\x02\uffff";
		private const string DFA58_maxS =
			"\x01\u00e2\x01\x00\x08\uffff\x02\x00\x0b\uffff\x01\x00\x02\uffff";
		private const string DFA58_acceptS =
			"\x02\uffff\x01\x01\x15\uffff\x01\x02\x01\x03";
		private const string DFA58_specialS =
			"\x01\uffff\x01\x00\x08\uffff\x01\x01\x01\x02\x0b\uffff\x01\x03\x02\uffff}>";
		private static readonly string[] DFA58_transitionS =
			{
				"\x01\x0a\x09\x02\x02\uffff\x01\x02\x04\uffff\x01\x17\x2a\uffff\x02"+
				"\x02\x03\uffff\x01\x17\x05\uffff\x07\x17\x01\uffff\x01\x17\x01\x01\x01"+
				"\x02\x02\uffff\x09\x02\x01\uffff\x06\x02\x02\uffff\x0d\x02\x1e\uffff"+
				"\x01\x0b\x0c\x17\x0b\uffff\x01\x17\x01\uffff\x02\x17\x05\uffff\x01\x17"+
				"\x10\uffff\x02\x17",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x01\uffff",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x01\uffff",
				"",
				""
			};

		private static readonly short[] DFA58_eot = DFA.UnpackEncodedString(DFA58_eotS);
		private static readonly short[] DFA58_eof = DFA.UnpackEncodedString(DFA58_eofS);
		private static readonly char[] DFA58_min = DFA.UnpackEncodedStringToUnsignedChars(DFA58_minS);
		private static readonly char[] DFA58_max = DFA.UnpackEncodedStringToUnsignedChars(DFA58_maxS);
		private static readonly short[] DFA58_accept = DFA.UnpackEncodedString(DFA58_acceptS);
		private static readonly short[] DFA58_special = DFA.UnpackEncodedString(DFA58_specialS);
		private static readonly short[][] DFA58_transition;

		static DFA58()
		{
			int numStates = DFA58_transitionS.Length;
			DFA58_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA58_transition[i] = DFA.UnpackEncodedString(DFA58_transitionS[i]);
			}
		}

		public DFA58( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 58;
			this.eot = DFA58_eot;
			this.eof = DFA58_eof;
			this.min = DFA58_min;
			this.max = DFA58_max;
			this.accept = DFA58_accept;
			this.special = DFA58_special;
			this.transition = DFA58_transition;
		}

		public override string Description { get { return "258:1: non_assignment_expression : ( conditional_expression | lambda_expression | query_expression );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition58(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA58_1 = input.LA(1);


				int index58_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred99_cs_fragment)) ) {s = 2;}

				else if ( (EvaluatePredicate(synpred100_cs_fragment)) ) {s = 24;}


				input.Seek(index58_1);
				if ( s>=0 ) return s;
				break;
			case 1:
				int LA58_10 = input.LA(1);


				int index58_10 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred99_cs_fragment)) ) {s = 2;}

				else if ( (EvaluatePredicate(synpred100_cs_fragment)) ) {s = 24;}


				input.Seek(index58_10);
				if ( s>=0 ) return s;
				break;
			case 2:
				int LA58_11 = input.LA(1);


				int index58_11 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred99_cs_fragment)) ) {s = 2;}

				else if ( (EvaluatePredicate(synpred100_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index58_11);
				if ( s>=0 ) return s;
				break;
			case 3:
				int LA58_23 = input.LA(1);


				int index58_23 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred99_cs_fragment)) ) {s = 2;}

				else if ( (EvaluatePredicate(synpred100_cs_fragment)) ) {s = 24;}


				input.Seek(index58_23);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 58, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA69 : DFA
	{
		private const string DFA69_eotS =
			"\x10\uffff";
		private const string DFA69_eofS =
			"\x10\uffff";
		private const string DFA69_minS =
			"\x01\x1e\x07\uffff\x01\x00\x07\uffff";
		private const string DFA69_maxS =
			"\x01\u00e2\x07\uffff\x01\x00\x07\uffff";
		private const string DFA69_acceptS =
			"\x01\uffff\x01\x01\x0d\uffff\x01\x02";
		private const string DFA69_specialS =
			"\x08\uffff\x01\x00\x07\uffff}>";
		private static readonly string[] DFA69_transitionS =
			{
				"\x0a\x01\x07\uffff\x01\x01\x2a\uffff\x02\x01\x03\uffff\x01\x01\x05"+
				"\uffff\x07\x01\x01\uffff\x02\x01\x03\uffff\x09\x01\x09\uffff\x06\x01"+
				"\x01\x08\x06\x01\x1e\uffff\x0d\x01\x0b\uffff\x01\x01\x01\uffff\x02\x01"+
				"\x05\uffff\x01\x01\x10\uffff\x02\x01",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA69_eot = DFA.UnpackEncodedString(DFA69_eotS);
		private static readonly short[] DFA69_eof = DFA.UnpackEncodedString(DFA69_eofS);
		private static readonly char[] DFA69_min = DFA.UnpackEncodedStringToUnsignedChars(DFA69_minS);
		private static readonly char[] DFA69_max = DFA.UnpackEncodedStringToUnsignedChars(DFA69_maxS);
		private static readonly short[] DFA69_accept = DFA.UnpackEncodedString(DFA69_acceptS);
		private static readonly short[] DFA69_special = DFA.UnpackEncodedString(DFA69_specialS);
		private static readonly short[][] DFA69_transition;

		static DFA69()
		{
			int numStates = DFA69_transitionS.Length;
			DFA69_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA69_transition[i] = DFA.UnpackEncodedString(DFA69_transitionS[i]);
			}
		}

		public DFA69( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 69;
			this.eot = DFA69_eot;
			this.eof = DFA69_eof;
			this.min = DFA69_min;
			this.max = DFA69_max;
			this.accept = DFA69_accept;
			this.special = DFA69_special;
			this.transition = DFA69_transition;
		}

		public override string Description { get { return "287:1: primary_or_array_creation_expression : ( primary_expression | array_creation_expression );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition69(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA69_8 = input.LA(1);


				int index69_8 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred112_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 15;}


				input.Seek(index69_8);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 69, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA82 : DFA
	{
		private const string DFA82_eotS =
			"\x11\uffff";
		private const string DFA82_eofS =
			"\x11\uffff";
		private const string DFA82_minS =
			"\x01\x1e\x07\uffff\x01\x00\x08\uffff";
		private const string DFA82_maxS =
			"\x01\u00e2\x07\uffff\x01\x00\x08\uffff";
		private const string DFA82_acceptS =
			"\x01\uffff\x01\x01\x08\uffff\x01\x04\x01\x05\x01\x06\x01\x07\x01\x08"+
			"\x01\x02\x01\x03";
		private const string DFA82_specialS =
			"\x08\uffff\x01\x00\x08\uffff}>";
		private static readonly string[] DFA82_transitionS =
			{
				"\x0a\x01\x07\uffff\x01\x01\x2a\uffff\x02\x01\x03\uffff\x01\x01\x05"+
				"\uffff\x07\x01\x01\uffff\x02\x01\x03\uffff\x09\x01\x09\uffff\x06\x01"+
				"\x01\x08\x01\x0a\x01\x01\x01\x0b\x01\x0c\x01\x0d\x01\x0e\x1e\uffff\x0d"+
				"\x01\x0b\uffff\x01\x01\x01\uffff\x02\x01\x05\uffff\x01\x01\x10\uffff"+
				"\x02\x01",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA82_eot = DFA.UnpackEncodedString(DFA82_eotS);
		private static readonly short[] DFA82_eof = DFA.UnpackEncodedString(DFA82_eofS);
		private static readonly char[] DFA82_min = DFA.UnpackEncodedStringToUnsignedChars(DFA82_minS);
		private static readonly char[] DFA82_max = DFA.UnpackEncodedStringToUnsignedChars(DFA82_maxS);
		private static readonly short[] DFA82_accept = DFA.UnpackEncodedString(DFA82_acceptS);
		private static readonly short[] DFA82_special = DFA.UnpackEncodedString(DFA82_specialS);
		private static readonly short[][] DFA82_transition;

		static DFA82()
		{
			int numStates = DFA82_transitionS.Length;
			DFA82_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA82_transition[i] = DFA.UnpackEncodedString(DFA82_transitionS[i]);
			}
		}

		public DFA82( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 82;
			this.eot = DFA82_eot;
			this.eof = DFA82_eof;
			this.min = DFA82_min;
			this.max = DFA82_max;
			this.accept = DFA82_accept;
			this.special = DFA82_special;
			this.transition = DFA82_transition;
		}

		public override string Description { get { return "314:1: primary_expression : ( primary_expression_start ( primary_expression_part )* | delegate_creation_expression | anonymous_object_creation_expression | sizeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition82(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA82_8 = input.LA(1);


				int index82_8 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred127_cs_fragment)) ) {s = 1;}

				else if ( (EvaluatePredicate(synpred128_cs_fragment)) ) {s = 15;}

				else if ( (EvaluatePredicate(synpred129_cs_fragment)) ) {s = 16;}


				input.Seek(index82_8);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 82, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA81 : DFA
	{
		private const string DFA81_eotS =
			"\x45\uffff";
		private const string DFA81_eofS =
			"\x01\x01\x44\uffff";
		private const string DFA81_minS =
			"\x01\x1e\x2b\uffff\x01\x00\x12\uffff\x01\x00\x03\uffff\x01\x00\x01\uffff";
		private const string DFA81_maxS =
			"\x01\u00e2\x2b\uffff\x01\x00\x12\uffff\x01\x00\x03\uffff\x01\x00\x01"+
			"\uffff";
		private const string DFA81_acceptS =
			"\x01\uffff\x01\x02\x42\uffff\x01\x01";
		private const string DFA81_specialS =
			"\x2c\uffff\x01\x00\x12\uffff\x01\x01\x03\uffff\x01\x02\x01\uffff}>";
		private static readonly string[] DFA81_transitionS =
			{
				"\x0a\x01\x02\x43\x02\x01\x03\uffff\x01\x01\x04\uffff\x02\x01\x24\uffff"+
				"\x02\x01\x01\uffff\x01\x01\x01\uffff\x02\x01\x01\x3f\x0a\x01\x01\uffff"+
				"\x01\x01\x01\x2c\x22\x01\x01\uffff\x17\x01\x06\uffff\x0d\x01\x0b\uffff"+
				"\x01\x01\x01\uffff\x02\x01\x05\uffff\x01\x01\x10\uffff\x02\x01",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x01\uffff",
				"",
				"",
				"",
				"\x01\uffff",
				""
			};

		private static readonly short[] DFA81_eot = DFA.UnpackEncodedString(DFA81_eotS);
		private static readonly short[] DFA81_eof = DFA.UnpackEncodedString(DFA81_eofS);
		private static readonly char[] DFA81_min = DFA.UnpackEncodedStringToUnsignedChars(DFA81_minS);
		private static readonly char[] DFA81_max = DFA.UnpackEncodedStringToUnsignedChars(DFA81_maxS);
		private static readonly short[] DFA81_accept = DFA.UnpackEncodedString(DFA81_acceptS);
		private static readonly short[] DFA81_special = DFA.UnpackEncodedString(DFA81_specialS);
		private static readonly short[][] DFA81_transition;

		static DFA81()
		{
			int numStates = DFA81_transitionS.Length;
			DFA81_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA81_transition[i] = DFA.UnpackEncodedString(DFA81_transitionS[i]);
			}
		}

		public DFA81( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 81;
			this.eot = DFA81_eot;
			this.eof = DFA81_eof;
			this.min = DFA81_min;
			this.max = DFA81_max;
			this.accept = DFA81_accept;
			this.special = DFA81_special;
			this.transition = DFA81_transition;
		}

		public override string Description { get { return "()* loopback of 315:29: ( primary_expression_part )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition81(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA81_44 = input.LA(1);


				int index81_44 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred126_cs_fragment)) ) {s = 68;}

				else if ( (true) ) {s = 1;}


				input.Seek(index81_44);
				if ( s>=0 ) return s;
				break;
			case 1:
				int LA81_63 = input.LA(1);


				int index81_63 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred126_cs_fragment)) ) {s = 68;}

				else if ( (true) ) {s = 1;}


				input.Seek(index81_63);
				if ( s>=0 ) return s;
				break;
			case 2:
				int LA81_67 = input.LA(1);


				int index81_67 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred126_cs_fragment)) ) {s = 68;}

				else if ( (true) ) {s = 1;}


				input.Seek(index81_67);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 81, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA88 : DFA
	{
		private const string DFA88_eotS =
			"\x0a\uffff";
		private const string DFA88_eofS =
			"\x02\uffff\x02\x01\x06\uffff";
		private const string DFA88_minS =
			"\x01\x1e\x01\uffff\x02\x1e\x06\uffff";
		private const string DFA88_maxS =
			"\x01\u00e2\x01\uffff\x02\u00e2\x06\uffff";
		private const string DFA88_acceptS =
			"\x01\uffff\x01\x01\x02\uffff\x01\x02\x01\x03\x01\x05\x01\x06\x01\x07"+
			"\x01\x04";
		private const string DFA88_specialS =
			"\x0a\uffff}>";
		private static readonly string[] DFA88_transitionS =
			{
				"\x01\x02\x09\x01\x07\uffff\x01\x03\x2a\uffff\x01\x04\x01\x05\x03\uffff"+
				"\x01\x03\x05\uffff\x07\x03\x01\uffff\x01\x03\x01\x06\x03\uffff\x09\x01"+
				"\x09\uffff\x06\x01\x01\x07\x01\uffff\x01\x08\x22\uffff\x0d\x03\x0b\uffff"+
				"\x01\x03\x01\uffff\x02\x03\x05\uffff\x01\x03\x10\uffff\x02\x03",
				"",
				"\x0e\x01\x03\uffff\x01\x01\x04\uffff\x02\x01\x23\uffff\x01\x09\x02"+
				"\x01\x01\uffff\x01\x01\x01\uffff\x0d\x01\x01\uffff\x24\x01\x01\uffff"+
				"\x17\x01\x06\uffff\x0d\x01\x0b\uffff\x01\x01\x01\uffff\x02\x01\x05\uffff"+
				"\x01\x01\x10\uffff\x02\x01",
				"\x0e\x01\x03\uffff\x01\x01\x04\uffff\x02\x01\x23\uffff\x01\x09\x02"+
				"\x01\x01\uffff\x01\x01\x01\uffff\x0d\x01\x01\uffff\x24\x01\x01\uffff"+
				"\x17\x01\x06\uffff\x0d\x01\x0b\uffff\x01\x01\x01\uffff\x02\x01\x05\uffff"+
				"\x01\x01\x10\uffff\x02\x01",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA88_eot = DFA.UnpackEncodedString(DFA88_eotS);
		private static readonly short[] DFA88_eof = DFA.UnpackEncodedString(DFA88_eofS);
		private static readonly char[] DFA88_min = DFA.UnpackEncodedStringToUnsignedChars(DFA88_minS);
		private static readonly char[] DFA88_max = DFA.UnpackEncodedStringToUnsignedChars(DFA88_maxS);
		private static readonly short[] DFA88_accept = DFA.UnpackEncodedString(DFA88_acceptS);
		private static readonly short[] DFA88_special = DFA.UnpackEncodedString(DFA88_specialS);
		private static readonly short[][] DFA88_transition;

		static DFA88()
		{
			int numStates = DFA88_transitionS.Length;
			DFA88_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA88_transition[i] = DFA.UnpackEncodedString(DFA88_transitionS[i]);
			}
		}

		public DFA88( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 88;
			this.eot = DFA88_eot;
			this.eof = DFA88_eof;
			this.min = DFA88_min;
			this.max = DFA88_max;
			this.accept = DFA88_accept;
			this.special = DFA88_special;
			this.transition = DFA88_transition;
		}

		public override string Description { get { return "324:1: primary_expression_start : ( ( predefined_type | identifier | literal ) ( generic_argument_list )? | 'this' ( bracket_expression )? | 'base' ( bracket_expression )? | identifier '::' identifier | paren_expression ( brackets_or_arguments )? | object_creation_expression | typeof_expression );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA84 : DFA
	{
		private const string DFA84_eotS =
			"\x46\uffff";
		private const string DFA84_eofS =
			"\x01\x02\x45\uffff";
		private const string DFA84_minS =
			"\x01\x1e\x01\x00\x44\uffff";
		private const string DFA84_maxS =
			"\x01\u00e2\x01\x00\x44\uffff";
		private const string DFA84_acceptS =
			"\x02\uffff\x01\x02\x42\uffff\x01\x01";
		private const string DFA84_specialS =
			"\x01\uffff\x01\x00\x44\uffff}>";
		private static readonly string[] DFA84_transitionS =
			{
				"\x0e\x02\x03\uffff\x01\x02\x04\uffff\x02\x02\x24\uffff\x02\x02\x01"+
				"\uffff\x01\x02\x01\uffff\x0d\x02\x01\uffff\x0e\x02\x01\x01\x15\x02\x01"+
				"\uffff\x17\x02\x06\uffff\x0d\x02\x0b\uffff\x01\x02\x01\uffff\x02\x02"+
				"\x05\uffff\x01\x02\x10\uffff\x02\x02",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA84_eot = DFA.UnpackEncodedString(DFA84_eotS);
		private static readonly short[] DFA84_eof = DFA.UnpackEncodedString(DFA84_eofS);
		private static readonly char[] DFA84_min = DFA.UnpackEncodedStringToUnsignedChars(DFA84_minS);
		private static readonly char[] DFA84_max = DFA.UnpackEncodedStringToUnsignedChars(DFA84_maxS);
		private static readonly short[] DFA84_accept = DFA.UnpackEncodedString(DFA84_acceptS);
		private static readonly short[] DFA84_special = DFA.UnpackEncodedString(DFA84_specialS);
		private static readonly short[][] DFA84_transition;

		static DFA84()
		{
			int numStates = DFA84_transitionS.Length;
			DFA84_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA84_transition[i] = DFA.UnpackEncodedString(DFA84_transitionS[i]);
			}
		}

		public DFA84( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 84;
			this.eot = DFA84_eot;
			this.eof = DFA84_eof;
			this.min = DFA84_min;
			this.max = DFA84_max;
			this.accept = DFA84_accept;
			this.special = DFA84_special;
			this.transition = DFA84_transition;
		}

		public override string Description { get { return "325:45: ( generic_argument_list )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition84(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA84_1 = input.LA(1);


				int index84_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred136_cs_fragment)) ) {s = 69;}

				else if ( (true) ) {s = 2;}


				input.Seek(index84_1);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 84, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA85 : DFA
	{
		private const string DFA85_eotS =
			"\x45\uffff";
		private const string DFA85_eofS =
			"\x01\x02\x44\uffff";
		private const string DFA85_minS =
			"\x01\x1e\x01\x00\x43\uffff";
		private const string DFA85_maxS =
			"\x01\u00e2\x01\x00\x43\uffff";
		private const string DFA85_acceptS =
			"\x02\uffff\x01\x02\x41\uffff\x01\x01";
		private const string DFA85_specialS =
			"\x01\uffff\x01\x00\x43\uffff}>";
		private static readonly string[] DFA85_transitionS =
			{
				"\x0e\x02\x03\uffff\x01\x02\x04\uffff\x02\x02\x24\uffff\x02\x02\x01"+
				"\uffff\x01\x02\x01\uffff\x02\x02\x01\x01\x0a\x02\x01\uffff\x24\x02\x01"+
				"\uffff\x17\x02\x06\uffff\x0d\x02\x0b\uffff\x01\x02\x01\uffff\x02\x02"+
				"\x05\uffff\x01\x02\x10\uffff\x02\x02",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA85_eot = DFA.UnpackEncodedString(DFA85_eotS);
		private static readonly short[] DFA85_eof = DFA.UnpackEncodedString(DFA85_eofS);
		private static readonly char[] DFA85_min = DFA.UnpackEncodedStringToUnsignedChars(DFA85_minS);
		private static readonly char[] DFA85_max = DFA.UnpackEncodedStringToUnsignedChars(DFA85_maxS);
		private static readonly short[] DFA85_accept = DFA.UnpackEncodedString(DFA85_acceptS);
		private static readonly short[] DFA85_special = DFA.UnpackEncodedString(DFA85_specialS);
		private static readonly short[][] DFA85_transition;

		static DFA85()
		{
			int numStates = DFA85_transitionS.Length;
			DFA85_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA85_transition[i] = DFA.UnpackEncodedString(DFA85_transitionS[i]);
			}
		}

		public DFA85( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 85;
			this.eot = DFA85_eot;
			this.eof = DFA85_eof;
			this.min = DFA85_min;
			this.max = DFA85_max;
			this.accept = DFA85_accept;
			this.special = DFA85_special;
			this.transition = DFA85_transition;
		}

		public override string Description { get { return "326:14: ( bracket_expression )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition85(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA85_1 = input.LA(1);


				int index85_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred138_cs_fragment)) ) {s = 68;}

				else if ( (true) ) {s = 2;}


				input.Seek(index85_1);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 85, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA86 : DFA
	{
		private const string DFA86_eotS =
			"\x45\uffff";
		private const string DFA86_eofS =
			"\x01\x02\x44\uffff";
		private const string DFA86_minS =
			"\x01\x1e\x01\x00\x43\uffff";
		private const string DFA86_maxS =
			"\x01\u00e2\x01\x00\x43\uffff";
		private const string DFA86_acceptS =
			"\x02\uffff\x01\x02\x41\uffff\x01\x01";
		private const string DFA86_specialS =
			"\x01\uffff\x01\x00\x43\uffff}>";
		private static readonly string[] DFA86_transitionS =
			{
				"\x0e\x02\x03\uffff\x01\x02\x04\uffff\x02\x02\x24\uffff\x02\x02\x01"+
				"\uffff\x01\x02\x01\uffff\x02\x02\x01\x01\x0a\x02\x01\uffff\x24\x02\x01"+
				"\uffff\x17\x02\x06\uffff\x0d\x02\x0b\uffff\x01\x02\x01\uffff\x02\x02"+
				"\x05\uffff\x01\x02\x10\uffff\x02\x02",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA86_eot = DFA.UnpackEncodedString(DFA86_eotS);
		private static readonly short[] DFA86_eof = DFA.UnpackEncodedString(DFA86_eofS);
		private static readonly char[] DFA86_min = DFA.UnpackEncodedStringToUnsignedChars(DFA86_minS);
		private static readonly char[] DFA86_max = DFA.UnpackEncodedStringToUnsignedChars(DFA86_maxS);
		private static readonly short[] DFA86_accept = DFA.UnpackEncodedString(DFA86_acceptS);
		private static readonly short[] DFA86_special = DFA.UnpackEncodedString(DFA86_specialS);
		private static readonly short[][] DFA86_transition;

		static DFA86()
		{
			int numStates = DFA86_transitionS.Length;
			DFA86_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA86_transition[i] = DFA.UnpackEncodedString(DFA86_transitionS[i]);
			}
		}

		public DFA86( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 86;
			this.eot = DFA86_eot;
			this.eof = DFA86_eof;
			this.min = DFA86_min;
			this.max = DFA86_max;
			this.accept = DFA86_accept;
			this.special = DFA86_special;
			this.transition = DFA86_transition;
		}

		public override string Description { get { return "327:14: ( bracket_expression )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition86(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA86_1 = input.LA(1);


				int index86_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred140_cs_fragment)) ) {s = 68;}

				else if ( (true) ) {s = 2;}


				input.Seek(index86_1);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 86, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA87 : DFA
	{
		private const string DFA87_eotS =
			"\x45\uffff";
		private const string DFA87_eofS =
			"\x01\x03\x44\uffff";
		private const string DFA87_minS =
			"\x01\x1e\x02\x00\x42\uffff";
		private const string DFA87_maxS =
			"\x01\u00e2\x02\x00\x42\uffff";
		private const string DFA87_acceptS =
			"\x03\uffff\x01\x02\x40\uffff\x01\x01";
		private const string DFA87_specialS =
			"\x01\uffff\x01\x00\x01\x01\x42\uffff}>";
		private static readonly string[] DFA87_transitionS =
			{
				"\x0e\x03\x03\uffff\x01\x03\x04\uffff\x02\x03\x24\uffff\x02\x03\x01"+
				"\uffff\x01\x03\x01\uffff\x02\x03\x01\x01\x0a\x03\x01\uffff\x01\x03\x01"+
				"\x02\x22\x03\x01\uffff\x17\x03\x06\uffff\x0d\x03\x0b\uffff\x01\x03\x01"+
				"\uffff\x02\x03\x05\uffff\x01\x03\x10\uffff\x02\x03",
				"\x01\uffff",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA87_eot = DFA.UnpackEncodedString(DFA87_eotS);
		private static readonly short[] DFA87_eof = DFA.UnpackEncodedString(DFA87_eofS);
		private static readonly char[] DFA87_min = DFA.UnpackEncodedStringToUnsignedChars(DFA87_minS);
		private static readonly char[] DFA87_max = DFA.UnpackEncodedStringToUnsignedChars(DFA87_maxS);
		private static readonly short[] DFA87_accept = DFA.UnpackEncodedString(DFA87_acceptS);
		private static readonly short[] DFA87_special = DFA.UnpackEncodedString(DFA87_specialS);
		private static readonly short[][] DFA87_transition;

		static DFA87()
		{
			int numStates = DFA87_transitionS.Length;
			DFA87_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA87_transition[i] = DFA.UnpackEncodedString(DFA87_transitionS[i]);
			}
		}

		public DFA87( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 87;
			this.eot = DFA87_eot;
			this.eof = DFA87_eof;
			this.min = DFA87_min;
			this.max = DFA87_max;
			this.accept = DFA87_accept;
			this.special = DFA87_special;
			this.transition = DFA87_transition;
		}

		public override string Description { get { return "329:23: ( brackets_or_arguments )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition87(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA87_1 = input.LA(1);


				int index87_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred143_cs_fragment)) ) {s = 68;}

				else if ( (true) ) {s = 3;}


				input.Seek(index87_1);
				if ( s>=0 ) return s;
				break;
			case 1:
				int LA87_2 = input.LA(1);


				int index87_2 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred143_cs_fragment)) ) {s = 68;}

				else if ( (true) ) {s = 3;}


				input.Seek(index87_2);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 87, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA89 : DFA
	{
		private const string DFA89_eotS =
			"\x45\uffff";
		private const string DFA89_eofS =
			"\x01\x03\x44\uffff";
		private const string DFA89_minS =
			"\x01\x1e\x02\x00\x42\uffff";
		private const string DFA89_maxS =
			"\x01\u00e2\x02\x00\x42\uffff";
		private const string DFA89_acceptS =
			"\x03\uffff\x01\x02\x40\uffff\x01\x01";
		private const string DFA89_specialS =
			"\x01\uffff\x01\x00\x01\x01\x42\uffff}>";
		private static readonly string[] DFA89_transitionS =
			{
				"\x0e\x03\x03\uffff\x01\x03\x04\uffff\x02\x03\x24\uffff\x02\x03\x01"+
				"\uffff\x01\x03\x01\uffff\x02\x03\x01\x01\x0a\x03\x01\uffff\x01\x03\x01"+
				"\x02\x22\x03\x01\uffff\x17\x03\x06\uffff\x0d\x03\x0b\uffff\x01\x03\x01"+
				"\uffff\x02\x03\x05\uffff\x01\x03\x10\uffff\x02\x03",
				"\x01\uffff",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA89_eot = DFA.UnpackEncodedString(DFA89_eotS);
		private static readonly short[] DFA89_eof = DFA.UnpackEncodedString(DFA89_eofS);
		private static readonly char[] DFA89_min = DFA.UnpackEncodedStringToUnsignedChars(DFA89_minS);
		private static readonly char[] DFA89_max = DFA.UnpackEncodedStringToUnsignedChars(DFA89_maxS);
		private static readonly short[] DFA89_accept = DFA.UnpackEncodedString(DFA89_acceptS);
		private static readonly short[] DFA89_special = DFA.UnpackEncodedString(DFA89_specialS);
		private static readonly short[][] DFA89_transition;

		static DFA89()
		{
			int numStates = DFA89_transitionS.Length;
			DFA89_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA89_transition[i] = DFA.UnpackEncodedString(DFA89_transitionS[i]);
			}
		}

		public DFA89( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 89;
			this.eot = DFA89_eot;
			this.eof = DFA89_eof;
			this.min = DFA89_min;
			this.max = DFA89_max;
			this.accept = DFA89_accept;
			this.special = DFA89_special;
			this.transition = DFA89_transition;
		}

		public override string Description { get { return "334:24: ( brackets_or_arguments )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition89(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA89_1 = input.LA(1);


				int index89_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred146_cs_fragment)) ) {s = 68;}

				else if ( (true) ) {s = 3;}


				input.Seek(index89_1);
				if ( s>=0 ) return s;
				break;
			case 1:
				int LA89_2 = input.LA(1);


				int index89_2 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred146_cs_fragment)) ) {s = 68;}

				else if ( (true) ) {s = 3;}


				input.Seek(index89_2);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 89, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA96 : DFA
	{
		private const string DFA96_eotS =
			"\x46\uffff";
		private const string DFA96_eofS =
			"\x01\x02\x45\uffff";
		private const string DFA96_minS =
			"\x01\x1e\x01\x00\x44\uffff";
		private const string DFA96_maxS =
			"\x01\u00e2\x01\x00\x44\uffff";
		private const string DFA96_acceptS =
			"\x02\uffff\x01\x02\x42\uffff\x01\x01";
		private const string DFA96_specialS =
			"\x01\uffff\x01\x00\x44\uffff}>";
		private static readonly string[] DFA96_transitionS =
			{
				"\x0e\x02\x03\uffff\x01\x02\x04\uffff\x02\x02\x24\uffff\x02\x02\x01"+
				"\uffff\x01\x02\x01\uffff\x0d\x02\x01\uffff\x0e\x02\x01\x01\x15\x02\x01"+
				"\uffff\x17\x02\x06\uffff\x0d\x02\x0b\uffff\x01\x02\x01\uffff\x02\x02"+
				"\x05\uffff\x01\x02\x10\uffff\x02\x02",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA96_eot = DFA.UnpackEncodedString(DFA96_eotS);
		private static readonly short[] DFA96_eof = DFA.UnpackEncodedString(DFA96_eofS);
		private static readonly char[] DFA96_min = DFA.UnpackEncodedStringToUnsignedChars(DFA96_minS);
		private static readonly char[] DFA96_max = DFA.UnpackEncodedStringToUnsignedChars(DFA96_maxS);
		private static readonly short[] DFA96_accept = DFA.UnpackEncodedString(DFA96_acceptS);
		private static readonly short[] DFA96_special = DFA.UnpackEncodedString(DFA96_specialS);
		private static readonly short[][] DFA96_transition;

		static DFA96()
		{
			int numStates = DFA96_transitionS.Length;
			DFA96_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA96_transition[i] = DFA.UnpackEncodedString(DFA96_transitionS[i]);
			}
		}

		public DFA96( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 96;
			this.eot = DFA96_eot;
			this.eof = DFA96_eof;
			this.min = DFA96_min;
			this.max = DFA96_max;
			this.accept = DFA96_accept;
			this.special = DFA96_special;
			this.transition = DFA96_transition;
		}

		public override string Description { get { return "347:33: ( generic_argument_list )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition96(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA96_1 = input.LA(1);


				int index96_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred153_cs_fragment)) ) {s = 69;}

				else if ( (true) ) {s = 2;}


				input.Seek(index96_1);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 96, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA98 : DFA
	{
		private const string DFA98_eotS =
			"\x45\uffff";
		private const string DFA98_eofS =
			"\x01\x02\x44\uffff";
		private const string DFA98_minS =
			"\x01\x1e\x01\x00\x43\uffff";
		private const string DFA98_maxS =
			"\x01\u00e2\x01\x00\x43\uffff";
		private const string DFA98_acceptS =
			"\x02\uffff\x01\x02\x41\uffff\x01\x01";
		private const string DFA98_specialS =
			"\x01\uffff\x01\x00\x43\uffff}>";
		private static readonly string[] DFA98_transitionS =
			{
				"\x0e\x02\x03\uffff\x01\x02\x04\uffff\x02\x02\x24\uffff\x02\x02\x01"+
				"\uffff\x01\x02\x01\uffff\x0d\x02\x01\uffff\x01\x02\x01\x01\x22\x02\x01"+
				"\uffff\x17\x02\x06\uffff\x0d\x02\x0b\uffff\x01\x02\x01\uffff\x02\x02"+
				"\x05\uffff\x01\x02\x10\uffff\x02\x02",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA98_eot = DFA.UnpackEncodedString(DFA98_eotS);
		private static readonly short[] DFA98_eof = DFA.UnpackEncodedString(DFA98_eofS);
		private static readonly char[] DFA98_min = DFA.UnpackEncodedStringToUnsignedChars(DFA98_minS);
		private static readonly char[] DFA98_max = DFA.UnpackEncodedStringToUnsignedChars(DFA98_maxS);
		private static readonly short[] DFA98_accept = DFA.UnpackEncodedString(DFA98_acceptS);
		private static readonly short[] DFA98_special = DFA.UnpackEncodedString(DFA98_specialS);
		private static readonly short[][] DFA98_transition;

		static DFA98()
		{
			int numStates = DFA98_transitionS.Length;
			DFA98_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA98_transition[i] = DFA.UnpackEncodedString(DFA98_transitionS[i]);
			}
		}

		public DFA98( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 98;
			this.eot = DFA98_eot;
			this.eof = DFA98_eof;
			this.min = DFA98_min;
			this.max = DFA98_max;
			this.accept = DFA98_accept;
			this.special = DFA98_special;
			this.transition = DFA98_transition;
		}

		public override string Description { get { return "351:24: ( arguments )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition98(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA98_1 = input.LA(1);


				int index98_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred155_cs_fragment)) ) {s = 68;}

				else if ( (true) ) {s = 2;}


				input.Seek(index98_1);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 98, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA99 : DFA
	{
		private const string DFA99_eotS =
			"\x45\uffff";
		private const string DFA99_eofS =
			"\x01\x01\x44\uffff";
		private const string DFA99_minS =
			"\x01\x1e\x01\uffff\x01\x00\x42\uffff";
		private const string DFA99_maxS =
			"\x01\u00e2\x01\uffff\x01\x00\x42\uffff";
		private const string DFA99_acceptS =
			"\x01\uffff\x01\x02\x42\uffff\x01\x01";
		private const string DFA99_specialS =
			"\x02\uffff\x01\x00\x42\uffff}>";
		private static readonly string[] DFA99_transitionS =
			{
				"\x0e\x01\x03\uffff\x01\x01\x04\uffff\x02\x01\x24\uffff\x02\x01\x01"+
				"\uffff\x01\x01\x01\uffff\x02\x01\x01\x02\x0a\x01\x01\uffff\x24\x01\x01"+
				"\uffff\x17\x01\x06\uffff\x0d\x01\x0b\uffff\x01\x01\x01\uffff\x02\x01"+
				"\x05\uffff\x01\x01\x10\uffff\x02\x01",
				"",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA99_eot = DFA.UnpackEncodedString(DFA99_eotS);
		private static readonly short[] DFA99_eof = DFA.UnpackEncodedString(DFA99_eofS);
		private static readonly char[] DFA99_min = DFA.UnpackEncodedStringToUnsignedChars(DFA99_minS);
		private static readonly char[] DFA99_max = DFA.UnpackEncodedStringToUnsignedChars(DFA99_maxS);
		private static readonly short[] DFA99_accept = DFA.UnpackEncodedString(DFA99_acceptS);
		private static readonly short[] DFA99_special = DFA.UnpackEncodedString(DFA99_specialS);
		private static readonly short[][] DFA99_transition;

		static DFA99()
		{
			int numStates = DFA99_transitionS.Length;
			DFA99_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA99_transition[i] = DFA.UnpackEncodedString(DFA99_transitionS[i]);
			}
		}

		public DFA99( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 99;
			this.eot = DFA99_eot;
			this.eof = DFA99_eof;
			this.min = DFA99_min;
			this.max = DFA99_max;
			this.accept = DFA99_accept;
			this.special = DFA99_special;
			this.transition = DFA99_transition;
		}

		public override string Description { get { return "()* loopback of 352:16: ( bracket_expression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition99(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA99_2 = input.LA(1);


				int index99_2 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred157_cs_fragment)) ) {s = 68;}

				else if ( (true) ) {s = 1;}


				input.Seek(index99_2);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 99, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA104 : DFA
	{
		private const string DFA104_eotS =
			"\x0a\uffff";
		private const string DFA104_eofS =
			"\x0a\uffff";
		private const string DFA104_minS =
			"\x01\x1e\x01\x00\x08\uffff";
		private const string DFA104_maxS =
			"\x01\u00e2\x01\x00\x08\uffff";
		private const string DFA104_acceptS =
			"\x02\uffff\x01\x01\x05\uffff\x01\x02\x01\uffff";
		private const string DFA104_specialS =
			"\x01\uffff\x01\x00\x08\uffff}>";
		private static readonly string[] DFA104_transitionS =
			{
				"\x0a\x02\x02\x08\x05\uffff\x01\x02\x2a\uffff\x02\x02\x03\uffff\x01"+
				"\x02\x01\uffff\x01\x08\x03\uffff\x07\x02\x01\uffff\x01\x02\x01\x01\x03"+
				"\uffff\x09\x02\x09\uffff\x06\x02\x25\uffff\x0d\x02\x0b\uffff\x01\x02"+
				"\x01\uffff\x02\x02\x05\uffff\x01\x02\x10\uffff\x02\x02",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA104_eot = DFA.UnpackEncodedString(DFA104_eotS);
		private static readonly short[] DFA104_eof = DFA.UnpackEncodedString(DFA104_eofS);
		private static readonly char[] DFA104_min = DFA.UnpackEncodedStringToUnsignedChars(DFA104_minS);
		private static readonly char[] DFA104_max = DFA.UnpackEncodedStringToUnsignedChars(DFA104_maxS);
		private static readonly short[] DFA104_accept = DFA.UnpackEncodedString(DFA104_acceptS);
		private static readonly short[] DFA104_special = DFA.UnpackEncodedString(DFA104_specialS);
		private static readonly short[][] DFA104_transition;

		static DFA104()
		{
			int numStates = DFA104_transitionS.Length;
			DFA104_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA104_transition[i] = DFA.UnpackEncodedString(DFA104_transitionS[i]);
			}
		}

		public DFA104( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 104;
			this.eot = DFA104_eot;
			this.eof = DFA104_eof;
			this.min = DFA104_min;
			this.max = DFA104_max;
			this.accept = DFA104_accept;
			this.special = DFA104_special;
			this.transition = DFA104_transition;
		}

		public override string Description { get { return "383:21: ( access | access_part )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition104(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA104_1 = input.LA(1);


				int index104_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred176_cs_fragment)) ) {s = 2;}

				else if ( (true) ) {s = 8;}


				input.Seek(index104_1);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 104, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA129 : DFA
	{
		private const string DFA129_eotS =
			"\x13\uffff";
		private const string DFA129_eofS =
			"\x13\uffff";
		private const string DFA129_minS =
			"\x01\u008c\x01\x6e\x01\x1e\x01\x35\x02\x28\x02\uffff\x03\x1e\x01\x00"+
			"\x01\uffff\x04\x28\x02\x1e";
		private const string DFA129_maxS =
			"\x01\u008c\x01\x6e\x01\u00e2\x01\x6f\x02\x7b\x02\uffff\x03\u00e2\x01"+
			"\x00\x01\uffff\x04\x7b\x02\u00e2";
		private const string DFA129_acceptS =
			"\x06\uffff\x01\x01\x01\x03\x04\uffff\x01\x02\x06\uffff";
		private const string DFA129_specialS =
			"\x0b\uffff\x01\x00\x07\uffff}>";
		private static readonly string[] DFA129_transitionS =
			{
				"\x01\x01",
				"\x01\x02",
				"\x01\x04\x10\uffff\x01\x05\x2f\uffff\x01\x05\x05\uffff\x07\x05\x01"+
				"\uffff\x01\x05\x03\uffff\x01\x03\x09\x06\x09\uffff\x06\x06\x25\uffff"+
				"\x0d\x05\x0b\uffff\x01\x05\x01\uffff\x02\x05\x05\uffff\x01\x05\x10\uffff"+
				"\x02\x05",
				"\x01\x07\x39\uffff\x01\x06",
				"\x01\x0a\x0c\uffff\x01\x0b\x23\uffff\x01\x09\x07\uffff\x01\x06\x0d"+
				"\uffff\x02\x06\x0a\uffff\x01\x08",
				"\x01\x0a\x0c\uffff\x01\x0b\x23\uffff\x01\x09\x07\uffff\x01\x06\x0d"+
				"\uffff\x02\x06\x0a\uffff\x01\x08",
				"",
				"",
				"\x01\x06\x0c\uffff\x01\x0c\x03\uffff\x01\x06\x2f\uffff\x01\x06\x02"+
				"\uffff\x01\x0c\x02\uffff\x07\x06\x01\uffff\x01\x06\x03\uffff\x0a\x06"+
				"\x09\uffff\x06\x06\x25\uffff\x0d\x06\x0b\uffff\x01\x06\x01\uffff\x02"+
				"\x06\x05\uffff\x01\x06\x10\uffff\x02\x06",
				"\x01\x0d\x10\uffff\x01\x0e\x2f\uffff\x01\x0e\x05\uffff\x07\x0e\x01"+
				"\uffff\x01\x0e\x41\uffff\x0d\x0e\x0b\uffff\x01\x0e\x01\uffff\x02\x0e"+
				"\x05\uffff\x01\x0e\x10\uffff\x02\x0e",
				"\x01\x0f\x10\uffff\x01\x10\x2f\uffff\x01\x10\x05\uffff\x07\x10\x01"+
				"\uffff\x01\x10\x41\uffff\x0d\x10\x0b\uffff\x01\x10\x01\uffff\x02\x10"+
				"\x05\uffff\x01\x10\x10\uffff\x02\x10",
				"\x01\uffff",
				"",
				"\x01\x0a\x0c\uffff\x01\x0b\x2b\uffff\x01\x06\x0d\uffff\x02\x06\x0a"+
				"\uffff\x01\x11",
				"\x01\x0a\x0c\uffff\x01\x0b\x2b\uffff\x01\x06\x0d\uffff\x02\x06\x0a"+
				"\uffff\x01\x11",
				"\x01\x0a\x0c\uffff\x01\x0b\x2b\uffff\x01\x06\x0d\uffff\x02\x06\x0a"+
				"\uffff\x01\x12",
				"\x01\x0a\x0c\uffff\x01\x0b\x2b\uffff\x01\x06\x0d\uffff\x02\x06\x0a"+
				"\uffff\x01\x12",
				"\x01\x06\x0c\uffff\x01\x0c\x03\uffff\x01\x06\x2f\uffff\x01\x06\x02"+
				"\uffff\x01\x0c\x02\uffff\x07\x06\x01\uffff\x01\x06\x03\uffff\x0a\x06"+
				"\x09\uffff\x06\x06\x25\uffff\x0d\x06\x0b\uffff\x01\x06\x01\uffff\x02"+
				"\x06\x05\uffff\x01\x06\x10\uffff\x02\x06",
				"\x01\x06\x0c\uffff\x01\x0c\x03\uffff\x01\x06\x2f\uffff\x01\x06\x02"+
				"\uffff\x01\x0c\x02\uffff\x07\x06\x01\uffff\x01\x06\x03\uffff\x0a\x06"+
				"\x09\uffff\x06\x06\x25\uffff\x0d\x06\x0b\uffff\x01\x06\x01\uffff\x02"+
				"\x06\x05\uffff\x01\x06\x10\uffff\x02\x06"
			};

		private static readonly short[] DFA129_eot = DFA.UnpackEncodedString(DFA129_eotS);
		private static readonly short[] DFA129_eof = DFA.UnpackEncodedString(DFA129_eofS);
		private static readonly char[] DFA129_min = DFA.UnpackEncodedStringToUnsignedChars(DFA129_minS);
		private static readonly char[] DFA129_max = DFA.UnpackEncodedStringToUnsignedChars(DFA129_maxS);
		private static readonly short[] DFA129_accept = DFA.UnpackEncodedString(DFA129_acceptS);
		private static readonly short[] DFA129_special = DFA.UnpackEncodedString(DFA129_specialS);
		private static readonly short[][] DFA129_transition;

		static DFA129()
		{
			int numStates = DFA129_transitionS.Length;
			DFA129_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA129_transition[i] = DFA.UnpackEncodedString(DFA129_transitionS[i]);
			}
		}

		public DFA129( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 129;
			this.eot = DFA129_eot;
			this.eof = DFA129_eof;
			this.min = DFA129_min;
			this.max = DFA129_max;
			this.accept = DFA129_accept;
			this.special = DFA129_special;
			this.transition = DFA129_transition;
		}

		public override string Description { get { return "447:1: typeof_expression : ( 'typeof' '(' type ')' | 'typeof' '(' unbound_type_name ')' | 'typeof' '(' 'void' ')' );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition129(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA129_11 = input.LA(1);


				int index129_11 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred204_cs_fragment)) ) {s = 6;}

				else if ( (EvaluatePredicate(synpred205_cs_fragment)) ) {s = 12;}


				input.Seek(index129_11);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 129, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA156 : DFA
	{
		private const string DFA156_eotS =
			"\x39\uffff";
		private const string DFA156_eofS =
			"\x01\x01\x38\uffff";
		private const string DFA156_minS =
			"\x01\x1e\x22\uffff\x01\x00\x15\uffff";
		private const string DFA156_maxS =
			"\x01\u00e2\x22\uffff\x01\x00\x15\uffff";
		private const string DFA156_acceptS =
			"\x01\uffff\x01\x02\x36\uffff\x01\x01";
		private const string DFA156_specialS =
			"\x23\uffff\x01\x00\x15\uffff}>";
		private static readonly string[] DFA156_transitionS =
			{
				"\x0a\x01\x02\uffff\x02\x01\x03\uffff\x01\x01\x04\uffff\x02\x01\x24"+
				"\uffff\x02\x01\x01\uffff\x01\x01\x01\uffff\x01\x01\x01\uffff\x0b\x01"+
				"\x01\uffff\x02\x01\x01\x23\x21\x01\x01\uffff\x02\x38\x0c\x01\x0f\uffff"+
				"\x0d\x01\x0b\uffff\x01\x01\x01\uffff\x02\x01\x05\uffff\x01\x01\x10\uffff"+
				"\x02\x01",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA156_eot = DFA.UnpackEncodedString(DFA156_eotS);
		private static readonly short[] DFA156_eof = DFA.UnpackEncodedString(DFA156_eofS);
		private static readonly char[] DFA156_min = DFA.UnpackEncodedStringToUnsignedChars(DFA156_minS);
		private static readonly char[] DFA156_max = DFA.UnpackEncodedStringToUnsignedChars(DFA156_maxS);
		private static readonly short[] DFA156_accept = DFA.UnpackEncodedString(DFA156_acceptS);
		private static readonly short[] DFA156_special = DFA.UnpackEncodedString(DFA156_specialS);
		private static readonly short[][] DFA156_transition;

		static DFA156()
		{
			int numStates = DFA156_transitionS.Length;
			DFA156_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA156_transition[i] = DFA.UnpackEncodedString(DFA156_transitionS[i]);
			}
		}

		public DFA156( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 156;
			this.eot = DFA156_eot;
			this.eof = DFA156_eof;
			this.min = DFA156_min;
			this.max = DFA156_max;
			this.accept = DFA156_accept;
			this.special = DFA156_special;
			this.transition = DFA156_transition;
		}

		public override string Description { get { return "()* loopback of 515:19: ( ( '*' | '/' | '%' ) unary_expression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition156(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA156_35 = input.LA(1);


				int index156_35 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred238_cs_fragment)) ) {s = 56;}

				else if ( (true) ) {s = 1;}


				input.Seek(index156_35);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 156, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA157 : DFA
	{
		private const string DFA157_eotS =
			"\x39\uffff";
		private const string DFA157_eofS =
			"\x01\x01\x38\uffff";
		private const string DFA157_minS =
			"\x01\x1e\x1e\uffff\x02\x00\x18\uffff";
		private const string DFA157_maxS =
			"\x01\u00e2\x1e\uffff\x02\x00\x18\uffff";
		private const string DFA157_acceptS =
			"\x01\uffff\x01\x02\x36\uffff\x01\x01";
		private const string DFA157_specialS =
			"\x1f\uffff\x01\x00\x01\x01\x18\uffff}>";
		private static readonly string[] DFA157_transitionS =
			{
				"\x0a\x01\x02\uffff\x01\x20\x01\x01\x03\uffff\x01\x01\x04\uffff\x02"+
				"\x01\x24\uffff\x02\x01\x01\uffff\x01\x01\x01\uffff\x01\x01\x01\uffff"+
				"\x0b\x01\x01\uffff\x0f\x01\x01\x1f\x14\x01\x03\uffff\x0c\x01\x0f\uffff"+
				"\x0d\x01\x0b\uffff\x01\x01\x01\uffff\x02\x01\x05\uffff\x01\x01\x10\uffff"+
				"\x02\x01",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x01\uffff",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA157_eot = DFA.UnpackEncodedString(DFA157_eotS);
		private static readonly short[] DFA157_eof = DFA.UnpackEncodedString(DFA157_eofS);
		private static readonly char[] DFA157_min = DFA.UnpackEncodedStringToUnsignedChars(DFA157_minS);
		private static readonly char[] DFA157_max = DFA.UnpackEncodedStringToUnsignedChars(DFA157_maxS);
		private static readonly short[] DFA157_accept = DFA.UnpackEncodedString(DFA157_acceptS);
		private static readonly short[] DFA157_special = DFA.UnpackEncodedString(DFA157_specialS);
		private static readonly short[][] DFA157_transition;

		static DFA157()
		{
			int numStates = DFA157_transitionS.Length;
			DFA157_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA157_transition[i] = DFA.UnpackEncodedString(DFA157_transitionS[i]);
			}
		}

		public DFA157( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 157;
			this.eot = DFA157_eot;
			this.eof = DFA157_eof;
			this.min = DFA157_min;
			this.max = DFA157_max;
			this.accept = DFA157_accept;
			this.special = DFA157_special;
			this.transition = DFA157_transition;
		}

		public override string Description { get { return "()* loopback of 517:28: ( ( '+' | '-' ) multiplicative_expression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition157(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA157_31 = input.LA(1);


				int index157_31 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred240_cs_fragment)) ) {s = 56;}

				else if ( (true) ) {s = 1;}


				input.Seek(index157_31);
				if ( s>=0 ) return s;
				break;
			case 1:
				int LA157_32 = input.LA(1);


				int index157_32 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred240_cs_fragment)) ) {s = 56;}

				else if ( (true) ) {s = 1;}


				input.Seek(index157_32);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 157, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA162 : DFA
	{
		private const string DFA162_eotS =
			"\x36\uffff";
		private const string DFA162_eofS =
			"\x01\x0c\x35\uffff";
		private const string DFA162_minS =
			"\x01\x1e\x01\uffff\x33\x00\x01\uffff";
		private const string DFA162_maxS =
			"\x01\u00e2\x01\uffff\x33\x00\x01\uffff";
		private const string DFA162_acceptS =
			"\x01\uffff\x01\x01\x33\uffff\x01\x02";
		private const string DFA162_specialS =
			"\x02\uffff\x01\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x06\x01"+
			"\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0c\x01\x0d\x01\x0e\x01\x0f"+
			"\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x01\x16\x01\x17\x01"+
			"\x18\x01\x19\x01\x1a\x01\x1b\x01\x1c\x01\x1d\x01\x1e\x01\x1f\x01\x20"+
			"\x01\x21\x01\x22\x01\x23\x01\x24\x01\x25\x01\x26\x01\x27\x01\x28\x01"+
			"\x29\x01\x2a\x01\x2b\x01\x2c\x01\x2d\x01\x2e\x01\x2f\x01\x30\x01\x31"+
			"\x01\x32\x01\uffff}>";
		private static readonly string[] DFA162_transitionS =
			{
				"\x01\x25\x09\x27\x02\uffff\x01\x1e\x01\x01\x03\uffff\x01\x31\x04\uffff"+
				"\x01\x0d\x01\x0b\x24\uffff\x01\x28\x01\x29\x01\uffff\x01\x0f\x01\uffff"+
				"\x01\x31\x01\uffff\x01\x32\x01\x0a\x01\x0e\x01\x10\x07\x31\x01\uffff"+
				"\x01\x31\x01\x1c\x01\x21\x01\x09\x01\x34\x09\x24\x01\x01\x01\x1d\x01"+
				"\x1f\x01\x20\x01\x22\x01\x23\x01\x03\x02\x33\x06\x24\x01\x2a\x01\x2c"+
				"\x01\x2b\x01\x2d\x01\x2e\x01\x2f\x01\x30\x04\uffff\x02\x01\x02\x35\x02"+
				"\x02\x01\x04\x01\x05\x01\x06\x01\x07\x01\x08\x0f\uffff\x01\x13\x01\x1a"+
				"\x01\x16\x01\x18\x01\x19\x01\x14\x01\x17\x02\x1b\x01\x11\x01\x12\x01"+
				"\x26\x01\x15\x0b\uffff\x01\x31\x01\uffff\x02\x31\x05\uffff\x01\x31\x10"+
				"\uffff\x02\x31",
				"",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				""
			};

		private static readonly short[] DFA162_eot = DFA.UnpackEncodedString(DFA162_eotS);
		private static readonly short[] DFA162_eof = DFA.UnpackEncodedString(DFA162_eofS);
		private static readonly char[] DFA162_min = DFA.UnpackEncodedStringToUnsignedChars(DFA162_minS);
		private static readonly char[] DFA162_max = DFA.UnpackEncodedStringToUnsignedChars(DFA162_maxS);
		private static readonly short[] DFA162_accept = DFA.UnpackEncodedString(DFA162_acceptS);
		private static readonly short[] DFA162_special = DFA.UnpackEncodedString(DFA162_specialS);
		private static readonly short[][] DFA162_transition;

		static DFA162()
		{
			int numStates = DFA162_transitionS.Length;
			DFA162_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA162_transition[i] = DFA.UnpackEncodedString(DFA162_transitionS[i]);
			}
		}

		public DFA162( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 162;
			this.eot = DFA162_eot;
			this.eof = DFA162_eof;
			this.min = DFA162_min;
			this.max = DFA162_max;
			this.accept = DFA162_accept;
			this.special = DFA162_special;
			this.transition = DFA162_transition;
		}

		public override string Description { get { return "523:3: ( ( ( '<' | '>' | '<=' | '>=' ) shift_expression )* | ( ( 'is' | 'as' ) non_nullable_type )* )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition162(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA162_2 = input.LA(1);


				int index162_2 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_2);
				if ( s>=0 ) return s;
				break;
			case 1:
				int LA162_3 = input.LA(1);


				int index162_3 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_3);
				if ( s>=0 ) return s;
				break;
			case 2:
				int LA162_4 = input.LA(1);


				int index162_4 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_4);
				if ( s>=0 ) return s;
				break;
			case 3:
				int LA162_5 = input.LA(1);


				int index162_5 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_5);
				if ( s>=0 ) return s;
				break;
			case 4:
				int LA162_6 = input.LA(1);


				int index162_6 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_6);
				if ( s>=0 ) return s;
				break;
			case 5:
				int LA162_7 = input.LA(1);


				int index162_7 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_7);
				if ( s>=0 ) return s;
				break;
			case 6:
				int LA162_8 = input.LA(1);


				int index162_8 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_8);
				if ( s>=0 ) return s;
				break;
			case 7:
				int LA162_9 = input.LA(1);


				int index162_9 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_9);
				if ( s>=0 ) return s;
				break;
			case 8:
				int LA162_10 = input.LA(1);


				int index162_10 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_10);
				if ( s>=0 ) return s;
				break;
			case 9:
				int LA162_11 = input.LA(1);


				int index162_11 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_11);
				if ( s>=0 ) return s;
				break;
			case 10:
				int LA162_12 = input.LA(1);


				int index162_12 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_12);
				if ( s>=0 ) return s;
				break;
			case 11:
				int LA162_13 = input.LA(1);


				int index162_13 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_13);
				if ( s>=0 ) return s;
				break;
			case 12:
				int LA162_14 = input.LA(1);


				int index162_14 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_14);
				if ( s>=0 ) return s;
				break;
			case 13:
				int LA162_15 = input.LA(1);


				int index162_15 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_15);
				if ( s>=0 ) return s;
				break;
			case 14:
				int LA162_16 = input.LA(1);


				int index162_16 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_16);
				if ( s>=0 ) return s;
				break;
			case 15:
				int LA162_17 = input.LA(1);


				int index162_17 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_17);
				if ( s>=0 ) return s;
				break;
			case 16:
				int LA162_18 = input.LA(1);


				int index162_18 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_18);
				if ( s>=0 ) return s;
				break;
			case 17:
				int LA162_19 = input.LA(1);


				int index162_19 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_19);
				if ( s>=0 ) return s;
				break;
			case 18:
				int LA162_20 = input.LA(1);


				int index162_20 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_20);
				if ( s>=0 ) return s;
				break;
			case 19:
				int LA162_21 = input.LA(1);


				int index162_21 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_21);
				if ( s>=0 ) return s;
				break;
			case 20:
				int LA162_22 = input.LA(1);


				int index162_22 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_22);
				if ( s>=0 ) return s;
				break;
			case 21:
				int LA162_23 = input.LA(1);


				int index162_23 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_23);
				if ( s>=0 ) return s;
				break;
			case 22:
				int LA162_24 = input.LA(1);


				int index162_24 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_24);
				if ( s>=0 ) return s;
				break;
			case 23:
				int LA162_25 = input.LA(1);


				int index162_25 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_25);
				if ( s>=0 ) return s;
				break;
			case 24:
				int LA162_26 = input.LA(1);


				int index162_26 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_26);
				if ( s>=0 ) return s;
				break;
			case 25:
				int LA162_27 = input.LA(1);


				int index162_27 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_27);
				if ( s>=0 ) return s;
				break;
			case 26:
				int LA162_28 = input.LA(1);


				int index162_28 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_28);
				if ( s>=0 ) return s;
				break;
			case 27:
				int LA162_29 = input.LA(1);


				int index162_29 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_29);
				if ( s>=0 ) return s;
				break;
			case 28:
				int LA162_30 = input.LA(1);


				int index162_30 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_30);
				if ( s>=0 ) return s;
				break;
			case 29:
				int LA162_31 = input.LA(1);


				int index162_31 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_31);
				if ( s>=0 ) return s;
				break;
			case 30:
				int LA162_32 = input.LA(1);


				int index162_32 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_32);
				if ( s>=0 ) return s;
				break;
			case 31:
				int LA162_33 = input.LA(1);


				int index162_33 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_33);
				if ( s>=0 ) return s;
				break;
			case 32:
				int LA162_34 = input.LA(1);


				int index162_34 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_34);
				if ( s>=0 ) return s;
				break;
			case 33:
				int LA162_35 = input.LA(1);


				int index162_35 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_35);
				if ( s>=0 ) return s;
				break;
			case 34:
				int LA162_36 = input.LA(1);


				int index162_36 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_36);
				if ( s>=0 ) return s;
				break;
			case 35:
				int LA162_37 = input.LA(1);


				int index162_37 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_37);
				if ( s>=0 ) return s;
				break;
			case 36:
				int LA162_38 = input.LA(1);


				int index162_38 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_38);
				if ( s>=0 ) return s;
				break;
			case 37:
				int LA162_39 = input.LA(1);


				int index162_39 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_39);
				if ( s>=0 ) return s;
				break;
			case 38:
				int LA162_40 = input.LA(1);


				int index162_40 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_40);
				if ( s>=0 ) return s;
				break;
			case 39:
				int LA162_41 = input.LA(1);


				int index162_41 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_41);
				if ( s>=0 ) return s;
				break;
			case 40:
				int LA162_42 = input.LA(1);


				int index162_42 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_42);
				if ( s>=0 ) return s;
				break;
			case 41:
				int LA162_43 = input.LA(1);


				int index162_43 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_43);
				if ( s>=0 ) return s;
				break;
			case 42:
				int LA162_44 = input.LA(1);


				int index162_44 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_44);
				if ( s>=0 ) return s;
				break;
			case 43:
				int LA162_45 = input.LA(1);


				int index162_45 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_45);
				if ( s>=0 ) return s;
				break;
			case 44:
				int LA162_46 = input.LA(1);


				int index162_46 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_46);
				if ( s>=0 ) return s;
				break;
			case 45:
				int LA162_47 = input.LA(1);


				int index162_47 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_47);
				if ( s>=0 ) return s;
				break;
			case 46:
				int LA162_48 = input.LA(1);


				int index162_48 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_48);
				if ( s>=0 ) return s;
				break;
			case 47:
				int LA162_49 = input.LA(1);


				int index162_49 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_49);
				if ( s>=0 ) return s;
				break;
			case 48:
				int LA162_50 = input.LA(1);


				int index162_50 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_50);
				if ( s>=0 ) return s;
				break;
			case 49:
				int LA162_51 = input.LA(1);


				int index162_51 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_51);
				if ( s>=0 ) return s;
				break;
			case 50:
				int LA162_52 = input.LA(1);


				int index162_52 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred247_cs_fragment)) ) {s = 1;}

				else if ( (true) ) {s = 53;}


				input.Seek(index162_52);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 162, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA164 : DFA
	{
		private const string DFA164_eotS =
			"\x34\uffff";
		private const string DFA164_eofS =
			"\x01\x01\x33\uffff";
		private const string DFA164_minS =
			"\x01\x1e\x2d\uffff\x01\x00\x05\uffff";
		private const string DFA164_maxS =
			"\x01\u00e2\x2d\uffff\x01\x00\x05\uffff";
		private const string DFA164_acceptS =
			"\x01\uffff\x01\x02\x31\uffff\x01\x01";
		private const string DFA164_specialS =
			"\x2e\uffff\x01\x00\x05\uffff}>";
		private static readonly string[] DFA164_transitionS =
			{
				"\x0a\x01\x02\uffff\x01\x01\x04\uffff\x01\x01\x04\uffff\x02\x01\x24"+
				"\uffff\x02\x01\x01\uffff\x01\x01\x01\uffff\x01\x01\x01\uffff\x0b\x01"+
				"\x01\uffff\x0e\x01\x01\uffff\x05\x01\x01\x2e\x0f\x01\x0a\uffff\x05\x01"+
				"\x0f\uffff\x0d\x01\x0b\uffff\x01\x01\x01\uffff\x02\x01\x05\uffff\x01"+
				"\x01\x10\uffff\x02\x01",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA164_eot = DFA.UnpackEncodedString(DFA164_eotS);
		private static readonly short[] DFA164_eof = DFA.UnpackEncodedString(DFA164_eofS);
		private static readonly char[] DFA164_min = DFA.UnpackEncodedStringToUnsignedChars(DFA164_minS);
		private static readonly char[] DFA164_max = DFA.UnpackEncodedStringToUnsignedChars(DFA164_maxS);
		private static readonly short[] DFA164_accept = DFA.UnpackEncodedString(DFA164_acceptS);
		private static readonly short[] DFA164_special = DFA.UnpackEncodedString(DFA164_specialS);
		private static readonly short[][] DFA164_transition;

		static DFA164()
		{
			int numStates = DFA164_transitionS.Length;
			DFA164_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA164_transition[i] = DFA.UnpackEncodedString(DFA164_transitionS[i]);
			}
		}

		public DFA164( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 164;
			this.eot = DFA164_eot;
			this.eof = DFA164_eof;
			this.min = DFA164_min;
			this.max = DFA164_max;
			this.accept = DFA164_accept;
			this.special = DFA164_special;
			this.transition = DFA164_transition;
		}

		public override string Description { get { return "()* loopback of 530:22: ( '&' equality_expression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition164(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA164_46 = input.LA(1);


				int index164_46 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred252_cs_fragment)) ) {s = 51;}

				else if ( (true) ) {s = 1;}


				input.Seek(index164_46);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 164, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA194 : DFA
	{
		private const string DFA194_eotS =
			"\x1f\uffff";
		private const string DFA194_eofS =
			"\x01\x03\x1e\uffff";
		private const string DFA194_minS =
			"\x01\x1e\x02\x00\x01\uffff\x05\x00\x16\uffff";
		private const string DFA194_maxS =
			"\x01\u00e2\x02\x00\x01\uffff\x05\x00\x16\uffff";
		private const string DFA194_acceptS =
			"\x03\uffff\x01\x02\x05\uffff\x01\x01\x15\uffff";
		private const string DFA194_specialS =
			"\x01\uffff\x01\x00\x01\x01\x01\uffff\x01\x02\x01\x03\x01\x04\x01\x05"+
			"\x01\x06\x16\uffff}>";
		private static readonly string[] DFA194_transitionS =
			{
				"\x0a\x09\x02\uffff\x01\x09\x04\uffff\x01\x09\x2a\uffff\x02\x09\x03"+
				"\uffff\x01\x09\x05\uffff\x07\x09\x01\uffff\x03\x09\x02\uffff\x09\x09"+
				"\x01\uffff\x06\x09\x02\uffff\x0d\x09\x1e\uffff\x01\x04\x01\x09\x01\x07"+
				"\x02\x09\x01\x05\x01\x08\x02\x09\x01\x01\x01\x02\x01\x09\x01\x06\x0b"+
				"\uffff\x01\x09\x01\uffff\x02\x09\x05\uffff\x01\x09\x10\uffff\x02\x09",
				"\x01\uffff",
				"\x01\uffff",
				"",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA194_eot = DFA.UnpackEncodedString(DFA194_eotS);
		private static readonly short[] DFA194_eof = DFA.UnpackEncodedString(DFA194_eofS);
		private static readonly char[] DFA194_min = DFA.UnpackEncodedStringToUnsignedChars(DFA194_minS);
		private static readonly char[] DFA194_max = DFA.UnpackEncodedStringToUnsignedChars(DFA194_maxS);
		private static readonly short[] DFA194_accept = DFA.UnpackEncodedString(DFA194_acceptS);
		private static readonly short[] DFA194_special = DFA.UnpackEncodedString(DFA194_specialS);
		private static readonly short[][] DFA194_transition;

		static DFA194()
		{
			int numStates = DFA194_transitionS.Length;
			DFA194_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA194_transition[i] = DFA.UnpackEncodedString(DFA194_transitionS[i]);
			}
		}

		public DFA194( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 194;
			this.eot = DFA194_eot;
			this.eof = DFA194_eof;
			this.min = DFA194_min;
			this.max = DFA194_max;
			this.accept = DFA194_accept;
			this.special = DFA194_special;
			this.transition = DFA194_transition;
		}

		public override string Description { get { return "()+ loopback of 600:2: ( ordering )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition194(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA194_1 = input.LA(1);


				int index194_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred299_cs_fragment)) ) {s = 9;}

				else if ( (true) ) {s = 3;}


				input.Seek(index194_1);
				if ( s>=0 ) return s;
				break;
			case 1:
				int LA194_2 = input.LA(1);


				int index194_2 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred299_cs_fragment)) ) {s = 9;}

				else if ( (true) ) {s = 3;}


				input.Seek(index194_2);
				if ( s>=0 ) return s;
				break;
			case 2:
				int LA194_4 = input.LA(1);


				int index194_4 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred299_cs_fragment)) ) {s = 9;}

				else if ( (true) ) {s = 3;}


				input.Seek(index194_4);
				if ( s>=0 ) return s;
				break;
			case 3:
				int LA194_5 = input.LA(1);


				int index194_5 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred299_cs_fragment)) ) {s = 9;}

				else if ( (true) ) {s = 3;}


				input.Seek(index194_5);
				if ( s>=0 ) return s;
				break;
			case 4:
				int LA194_6 = input.LA(1);


				int index194_6 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred299_cs_fragment)) ) {s = 9;}

				else if ( (true) ) {s = 3;}


				input.Seek(index194_6);
				if ( s>=0 ) return s;
				break;
			case 5:
				int LA194_7 = input.LA(1);


				int index194_7 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred299_cs_fragment)) ) {s = 9;}

				else if ( (true) ) {s = 3;}


				input.Seek(index194_7);
				if ( s>=0 ) return s;
				break;
			case 6:
				int LA194_8 = input.LA(1);


				int index194_8 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred299_cs_fragment)) ) {s = 9;}

				else if ( (true) ) {s = 3;}


				input.Seek(index194_8);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 194, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA209 : DFA
	{
		private const string DFA209_eotS =
			"\x0e\uffff";
		private const string DFA209_eofS =
			"\x0e\uffff";
		private const string DFA209_minS =
			"\x01\x1e\x06\x00\x07\uffff";
		private const string DFA209_maxS =
			"\x01\u00e2\x06\x00\x07\uffff";
		private const string DFA209_acceptS =
			"\x07\uffff\x01\x07\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x06";
		private const string DFA209_specialS =
			"\x01\uffff\x01\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x07\uffff}>";
		private static readonly string[] DFA209_transitionS =
			{
				"\x01\x01\x10\uffff\x01\x02\x2f\uffff\x01\x02\x05\uffff\x07\x02\x01"+
				"\uffff\x01\x02\x03\uffff\x01\x04\x09\x03\x09\uffff\x06\x03\x01\x07\x24"+
				"\uffff\x0d\x02\x01\uffff\x01\x05\x03\uffff\x01\x06\x05\uffff\x01\x02"+
				"\x01\uffff\x02\x02\x05\uffff\x01\x02\x10\uffff\x02\x02",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA209_eot = DFA.UnpackEncodedString(DFA209_eotS);
		private static readonly short[] DFA209_eof = DFA.UnpackEncodedString(DFA209_eofS);
		private static readonly char[] DFA209_min = DFA.UnpackEncodedStringToUnsignedChars(DFA209_minS);
		private static readonly char[] DFA209_max = DFA.UnpackEncodedStringToUnsignedChars(DFA209_maxS);
		private static readonly short[] DFA209_accept = DFA.UnpackEncodedString(DFA209_acceptS);
		private static readonly short[] DFA209_special = DFA.UnpackEncodedString(DFA209_specialS);
		private static readonly short[][] DFA209_transition;

		static DFA209()
		{
			int numStates = DFA209_transitionS.Length;
			DFA209_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA209_transition[i] = DFA.UnpackEncodedString(DFA209_transitionS[i]);
			}
		}

		public DFA209( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 209;
			this.eot = DFA209_eot;
			this.eof = DFA209_eof;
			this.min = DFA209_min;
			this.max = DFA209_max;
			this.accept = DFA209_accept;
			this.special = DFA209_special;
			this.transition = DFA209_transition;
		}

		public override string Description { get { return "636:1: type_parameter_constraint_list : ( ( primary_constraint ',' secondary_constraint_list ',' constructor_constraint ) | ( primary_constraint ',' secondary_constraint_list ) | ( primary_constraint ',' constructor_constraint ) | ( secondary_constraint_list ',' constructor_constraint ) | primary_constraint | secondary_constraint_list | constructor_constraint );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition209(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA209_1 = input.LA(1);


				int index209_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred323_cs_fragment)) ) {s = 8;}

				else if ( (EvaluatePredicate(synpred324_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred325_cs_fragment)) ) {s = 10;}

				else if ( (EvaluatePredicate(synpred326_cs_fragment)) ) {s = 11;}

				else if ( (EvaluatePredicate(synpred327_cs_fragment)) ) {s = 12;}

				else if ( (EvaluatePredicate(synpred328_cs_fragment)) ) {s = 13;}


				input.Seek(index209_1);
				if ( s>=0 ) return s;
				break;
			case 1:
				int LA209_2 = input.LA(1);


				int index209_2 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred323_cs_fragment)) ) {s = 8;}

				else if ( (EvaluatePredicate(synpred324_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred325_cs_fragment)) ) {s = 10;}

				else if ( (EvaluatePredicate(synpred326_cs_fragment)) ) {s = 11;}

				else if ( (EvaluatePredicate(synpred327_cs_fragment)) ) {s = 12;}

				else if ( (EvaluatePredicate(synpred328_cs_fragment)) ) {s = 13;}


				input.Seek(index209_2);
				if ( s>=0 ) return s;
				break;
			case 2:
				int LA209_3 = input.LA(1);


				int index209_3 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred323_cs_fragment)) ) {s = 8;}

				else if ( (EvaluatePredicate(synpred324_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred325_cs_fragment)) ) {s = 10;}

				else if ( (EvaluatePredicate(synpred327_cs_fragment)) ) {s = 12;}


				input.Seek(index209_3);
				if ( s>=0 ) return s;
				break;
			case 3:
				int LA209_4 = input.LA(1);


				int index209_4 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred323_cs_fragment)) ) {s = 8;}

				else if ( (EvaluatePredicate(synpred324_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred325_cs_fragment)) ) {s = 10;}

				else if ( (EvaluatePredicate(synpred327_cs_fragment)) ) {s = 12;}


				input.Seek(index209_4);
				if ( s>=0 ) return s;
				break;
			case 4:
				int LA209_5 = input.LA(1);


				int index209_5 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred323_cs_fragment)) ) {s = 8;}

				else if ( (EvaluatePredicate(synpred324_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred325_cs_fragment)) ) {s = 10;}

				else if ( (EvaluatePredicate(synpred327_cs_fragment)) ) {s = 12;}


				input.Seek(index209_5);
				if ( s>=0 ) return s;
				break;
			case 5:
				int LA209_6 = input.LA(1);


				int index209_6 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred323_cs_fragment)) ) {s = 8;}

				else if ( (EvaluatePredicate(synpred324_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred325_cs_fragment)) ) {s = 10;}

				else if ( (EvaluatePredicate(synpred327_cs_fragment)) ) {s = 12;}


				input.Seek(index209_6);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 209, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA215 : DFA
	{
		private const string DFA215_eotS =
			"\x20\uffff";
		private const string DFA215_eofS =
			"\x20\uffff";
		private const string DFA215_minS =
			"\x01\x1e\x02\x00\x01\uffff\x05\x00\x01\uffff\x07\x00\x01\uffff\x02\x00"+
			"\x0c\uffff";
		private const string DFA215_maxS =
			"\x01\u00e2\x02\x00\x01\uffff\x05\x00\x01\uffff\x07\x00\x01\uffff\x02"+
			"\x00\x0c\uffff";
		private const string DFA215_acceptS =
			"\x03\uffff\x01\x01\x05\uffff\x01\x02\x07\uffff\x01\x09\x02\uffff\x01"+
			"\x0b\x03\uffff\x01\x03\x01\x04\x01\x05\x01\x06\x01\x07\x01\x08\x01\x0a"+
			"\x01\x0c";
		private const string DFA215_specialS =
			"\x01\uffff\x01\x00\x01\x01\x01\uffff\x01\x02\x01\x03\x01\x04\x01\x05"+
			"\x01\x06\x01\uffff\x01\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0c\x01"+
			"\x0d\x01\uffff\x01\x0e\x01\x0f\x0c\uffff}>";
		private static readonly string[] DFA215_transitionS =
			{
				"\x01\x05\x0e\uffff\x01\x14\x01\uffff\x01\x0c\x2e\uffff\x01\x0a\x01"+
				"\x0c\x01\uffff\x01\x01\x03\uffff\x03\x0c\x01\x06\x03\x0c\x01\uffff\x01"+
				"\x0c\x03\uffff\x01\x08\x09\x07\x03\uffff\x01\x11\x05\uffff\x06\x07\x01"+
				"\x10\x05\uffff\x01\x14\x19\uffff\x01\x02\x03\x0e\x01\x04\x0d\x0c\x01"+
				"\x0b\x01\x13\x02\x0f\x01\x0d\x01\x14\x01\x03\x02\x09\x02\x12\x01\x0c"+
				"\x01\uffff\x02\x0c\x03\uffff\x01\x14\x01\uffff\x01\x0c\x10\uffff\x02"+
				"\x0c",
				"\x01\uffff",
				"\x01\uffff",
				"",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"",
				"\x01\uffff",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA215_eot = DFA.UnpackEncodedString(DFA215_eotS);
		private static readonly short[] DFA215_eof = DFA.UnpackEncodedString(DFA215_eofS);
		private static readonly char[] DFA215_min = DFA.UnpackEncodedStringToUnsignedChars(DFA215_minS);
		private static readonly char[] DFA215_max = DFA.UnpackEncodedStringToUnsignedChars(DFA215_maxS);
		private static readonly short[] DFA215_accept = DFA.UnpackEncodedString(DFA215_acceptS);
		private static readonly short[] DFA215_special = DFA.UnpackEncodedString(DFA215_specialS);
		private static readonly short[][] DFA215_transition;

		static DFA215()
		{
			int numStates = DFA215_transitionS.Length;
			DFA215_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA215_transition[i] = DFA.UnpackEncodedString(DFA215_transitionS[i]);
			}
		}

		public DFA215( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 215;
			this.eot = DFA215_eot;
			this.eof = DFA215_eof;
			this.min = DFA215_min;
			this.max = DFA215_max;
			this.accept = DFA215_accept;
			this.special = DFA215_special;
			this.transition = DFA215_transition;
		}

		public override string Description { get { return "660:1: class_member_declaration : ( constant_declaration | field_declaration | method_declaration | property_declaration | event_declaration | indexer_declaration | operator_declaration | constructor_declaration | destructor_declaration | static_constructor_declaration | type_declaration | class_declaration );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition215(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA215_1 = input.LA(1);


				int index215_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred335_cs_fragment)) ) {s = 3;}

				else if ( (EvaluatePredicate(synpred336_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred337_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred338_cs_fragment)) ) {s = 25;}

				else if ( (EvaluatePredicate(synpred339_cs_fragment)) ) {s = 26;}

				else if ( (EvaluatePredicate(synpred340_cs_fragment)) ) {s = 27;}

				else if ( (EvaluatePredicate(synpred341_cs_fragment)) ) {s = 28;}

				else if ( (EvaluatePredicate(synpred342_cs_fragment)) ) {s = 29;}

				else if ( (EvaluatePredicate(synpred343_cs_fragment)) ) {s = 17;}

				else if ( (EvaluatePredicate(synpred344_cs_fragment)) ) {s = 30;}

				else if ( (EvaluatePredicate(synpred345_cs_fragment)) ) {s = 20;}

				else if ( (true) ) {s = 31;}


				input.Seek(index215_1);
				if ( s>=0 ) return s;
				break;
			case 1:
				int LA215_2 = input.LA(1);


				int index215_2 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred335_cs_fragment)) ) {s = 3;}

				else if ( (EvaluatePredicate(synpred336_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred337_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred338_cs_fragment)) ) {s = 25;}

				else if ( (EvaluatePredicate(synpred339_cs_fragment)) ) {s = 26;}

				else if ( (EvaluatePredicate(synpred340_cs_fragment)) ) {s = 27;}

				else if ( (EvaluatePredicate(synpred341_cs_fragment)) ) {s = 28;}

				else if ( (EvaluatePredicate(synpred342_cs_fragment)) ) {s = 29;}

				else if ( (EvaluatePredicate(synpred345_cs_fragment)) ) {s = 20;}

				else if ( (true) ) {s = 31;}


				input.Seek(index215_2);
				if ( s>=0 ) return s;
				break;
			case 2:
				int LA215_4 = input.LA(1);


				int index215_4 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred336_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred337_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred338_cs_fragment)) ) {s = 25;}

				else if ( (EvaluatePredicate(synpred339_cs_fragment)) ) {s = 26;}

				else if ( (EvaluatePredicate(synpred340_cs_fragment)) ) {s = 27;}

				else if ( (EvaluatePredicate(synpred341_cs_fragment)) ) {s = 28;}

				else if ( (EvaluatePredicate(synpred342_cs_fragment)) ) {s = 29;}

				else if ( (EvaluatePredicate(synpred343_cs_fragment)) ) {s = 17;}

				else if ( (EvaluatePredicate(synpred344_cs_fragment)) ) {s = 30;}

				else if ( (EvaluatePredicate(synpred345_cs_fragment)) ) {s = 20;}

				else if ( (true) ) {s = 31;}


				input.Seek(index215_4);
				if ( s>=0 ) return s;
				break;
			case 3:
				int LA215_5 = input.LA(1);


				int index215_5 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred336_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred337_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred338_cs_fragment)) ) {s = 25;}

				else if ( (EvaluatePredicate(synpred340_cs_fragment)) ) {s = 27;}

				else if ( (EvaluatePredicate(synpred342_cs_fragment)) ) {s = 29;}


				input.Seek(index215_5);
				if ( s>=0 ) return s;
				break;
			case 4:
				int LA215_6 = input.LA(1);


				int index215_6 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred336_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred337_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred338_cs_fragment)) ) {s = 25;}

				else if ( (EvaluatePredicate(synpred339_cs_fragment)) ) {s = 26;}

				else if ( (EvaluatePredicate(synpred340_cs_fragment)) ) {s = 27;}

				else if ( (EvaluatePredicate(synpred342_cs_fragment)) ) {s = 29;}


				input.Seek(index215_6);
				if ( s>=0 ) return s;
				break;
			case 5:
				int LA215_7 = input.LA(1);


				int index215_7 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred336_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred337_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred338_cs_fragment)) ) {s = 25;}

				else if ( (EvaluatePredicate(synpred340_cs_fragment)) ) {s = 27;}


				input.Seek(index215_7);
				if ( s>=0 ) return s;
				break;
			case 6:
				int LA215_8 = input.LA(1);


				int index215_8 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred336_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred337_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred338_cs_fragment)) ) {s = 25;}

				else if ( (EvaluatePredicate(synpred340_cs_fragment)) ) {s = 27;}


				input.Seek(index215_8);
				if ( s>=0 ) return s;
				break;
			case 7:
				int LA215_10 = input.LA(1);


				int index215_10 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred337_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred338_cs_fragment)) ) {s = 25;}

				else if ( (EvaluatePredicate(synpred339_cs_fragment)) ) {s = 26;}

				else if ( (EvaluatePredicate(synpred340_cs_fragment)) ) {s = 27;}

				else if ( (EvaluatePredicate(synpred341_cs_fragment)) ) {s = 28;}

				else if ( (EvaluatePredicate(synpred342_cs_fragment)) ) {s = 29;}

				else if ( (EvaluatePredicate(synpred343_cs_fragment)) ) {s = 17;}

				else if ( (EvaluatePredicate(synpred344_cs_fragment)) ) {s = 30;}


				input.Seek(index215_10);
				if ( s>=0 ) return s;
				break;
			case 8:
				int LA215_11 = input.LA(1);


				int index215_11 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred337_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred345_cs_fragment)) ) {s = 20;}

				else if ( (true) ) {s = 31;}


				input.Seek(index215_11);
				if ( s>=0 ) return s;
				break;
			case 9:
				int LA215_12 = input.LA(1);


				int index215_12 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred336_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred337_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred338_cs_fragment)) ) {s = 25;}

				else if ( (EvaluatePredicate(synpred340_cs_fragment)) ) {s = 27;}

				else if ( (EvaluatePredicate(synpred342_cs_fragment)) ) {s = 29;}


				input.Seek(index215_12);
				if ( s>=0 ) return s;
				break;
			case 10:
				int LA215_13 = input.LA(1);


				int index215_13 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred336_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred337_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred338_cs_fragment)) ) {s = 25;}

				else if ( (EvaluatePredicate(synpred339_cs_fragment)) ) {s = 26;}

				else if ( (EvaluatePredicate(synpred341_cs_fragment)) ) {s = 28;}

				else if ( (EvaluatePredicate(synpred344_cs_fragment)) ) {s = 30;}

				else if ( (EvaluatePredicate(synpred345_cs_fragment)) ) {s = 20;}

				else if ( (true) ) {s = 31;}


				input.Seek(index215_13);
				if ( s>=0 ) return s;
				break;
			case 11:
				int LA215_14 = input.LA(1);


				int index215_14 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred335_cs_fragment)) ) {s = 3;}

				else if ( (EvaluatePredicate(synpred336_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred337_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred338_cs_fragment)) ) {s = 25;}

				else if ( (EvaluatePredicate(synpred339_cs_fragment)) ) {s = 26;}

				else if ( (EvaluatePredicate(synpred340_cs_fragment)) ) {s = 27;}

				else if ( (EvaluatePredicate(synpred342_cs_fragment)) ) {s = 29;}

				else if ( (EvaluatePredicate(synpred345_cs_fragment)) ) {s = 20;}

				else if ( (true) ) {s = 31;}


				input.Seek(index215_14);
				if ( s>=0 ) return s;
				break;
			case 12:
				int LA215_15 = input.LA(1);


				int index215_15 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred337_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred338_cs_fragment)) ) {s = 25;}

				else if ( (EvaluatePredicate(synpred339_cs_fragment)) ) {s = 26;}

				else if ( (EvaluatePredicate(synpred340_cs_fragment)) ) {s = 27;}

				else if ( (EvaluatePredicate(synpred345_cs_fragment)) ) {s = 20;}

				else if ( (true) ) {s = 31;}


				input.Seek(index215_15);
				if ( s>=0 ) return s;
				break;
			case 13:
				int LA215_16 = input.LA(1);


				int index215_16 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred335_cs_fragment)) ) {s = 3;}

				else if ( (EvaluatePredicate(synpred336_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred337_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred338_cs_fragment)) ) {s = 25;}

				else if ( (EvaluatePredicate(synpred339_cs_fragment)) ) {s = 26;}

				else if ( (EvaluatePredicate(synpred340_cs_fragment)) ) {s = 27;}

				else if ( (EvaluatePredicate(synpred345_cs_fragment)) ) {s = 20;}

				else if ( (true) ) {s = 31;}


				input.Seek(index215_16);
				if ( s>=0 ) return s;
				break;
			case 14:
				int LA215_18 = input.LA(1);


				int index215_18 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred337_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred338_cs_fragment)) ) {s = 25;}

				else if ( (EvaluatePredicate(synpred339_cs_fragment)) ) {s = 26;}

				else if ( (EvaluatePredicate(synpred340_cs_fragment)) ) {s = 27;}


				input.Seek(index215_18);
				if ( s>=0 ) return s;
				break;
			case 15:
				int LA215_19 = input.LA(1);


				int index215_19 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred345_cs_fragment)) ) {s = 20;}

				else if ( (true) ) {s = 31;}


				input.Seek(index215_19);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 215, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA236 : DFA
	{
		private const string DFA236_eotS =
			"\x0a\uffff";
		private const string DFA236_eofS =
			"\x0a\uffff";
		private const string DFA236_minS =
			"\x01\x1e\x01\x00\x01\uffff\x04\x00\x01\uffff\x01\x00\x01\uffff";
		private const string DFA236_maxS =
			"\x01\u00e2\x01\x00\x01\uffff\x04\x00\x01\uffff\x01\x00\x01\uffff";
		private const string DFA236_acceptS =
			"\x02\uffff\x01\x01\x04\uffff\x01\x02\x01\uffff\x01\x03";
		private const string DFA236_specialS =
			"\x01\uffff\x01\x00\x01\uffff\x01\x01\x01\x02\x01\x03\x01\x04\x01\uffff"+
			"\x01\x05\x01\uffff}>";
		private static readonly string[] DFA236_transitionS =
			{
				"\x01\x03\x10\uffff\x01\x08\x2a\uffff\x01\x02\x04\uffff\x01\x08\x01"+
				"\uffff\x01\x01\x03\uffff\x07\x08\x01\uffff\x01\x08\x03\uffff\x01\x06"+
				"\x09\x05\x07\uffff\x02\x02\x06\x05\x25\uffff\x0d\x08\x0b\uffff\x01\x04"+
				"\x01\x07\x02\x08\x05\uffff\x01\x08\x10\uffff\x02\x08",
				"\x01\uffff",
				"",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"",
				"\x01\uffff",
				""
			};

		private static readonly short[] DFA236_eot = DFA.UnpackEncodedString(DFA236_eotS);
		private static readonly short[] DFA236_eof = DFA.UnpackEncodedString(DFA236_eofS);
		private static readonly char[] DFA236_min = DFA.UnpackEncodedStringToUnsignedChars(DFA236_minS);
		private static readonly char[] DFA236_max = DFA.UnpackEncodedStringToUnsignedChars(DFA236_maxS);
		private static readonly short[] DFA236_accept = DFA.UnpackEncodedString(DFA236_acceptS);
		private static readonly short[] DFA236_special = DFA.UnpackEncodedString(DFA236_specialS);
		private static readonly short[][] DFA236_transition;

		static DFA236()
		{
			int numStates = DFA236_transitionS.Length;
			DFA236_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA236_transition[i] = DFA.UnpackEncodedString(DFA236_transitionS[i]);
			}
		}

		public DFA236( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 236;
			this.eot = DFA236_eot;
			this.eof = DFA236_eof;
			this.min = DFA236_min;
			this.max = DFA236_max;
			this.accept = DFA236_accept;
			this.special = DFA236_special;
			this.transition = DFA236_transition;
		}

		public override string Description { get { return "715:1: formal_parameter : ( fixed_parameter | parameter_array | '__arglist' );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition236(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA236_1 = input.LA(1);


				int index236_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred389_cs_fragment)) ) {s = 2;}

				else if ( (EvaluatePredicate(synpred390_cs_fragment)) ) {s = 7;}


				input.Seek(index236_1);
				if ( s>=0 ) return s;
				break;
			case 1:
				int LA236_3 = input.LA(1);


				int index236_3 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred389_cs_fragment)) ) {s = 2;}

				else if ( (EvaluatePredicate(synpred390_cs_fragment)) ) {s = 7;}


				input.Seek(index236_3);
				if ( s>=0 ) return s;
				break;
			case 2:
				int LA236_4 = input.LA(1);


				int index236_4 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred389_cs_fragment)) ) {s = 2;}

				else if ( (EvaluatePredicate(synpred390_cs_fragment)) ) {s = 7;}

				else if ( (true) ) {s = 9;}


				input.Seek(index236_4);
				if ( s>=0 ) return s;
				break;
			case 3:
				int LA236_5 = input.LA(1);


				int index236_5 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred389_cs_fragment)) ) {s = 2;}

				else if ( (EvaluatePredicate(synpred390_cs_fragment)) ) {s = 7;}


				input.Seek(index236_5);
				if ( s>=0 ) return s;
				break;
			case 4:
				int LA236_6 = input.LA(1);


				int index236_6 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred389_cs_fragment)) ) {s = 2;}

				else if ( (EvaluatePredicate(synpred390_cs_fragment)) ) {s = 7;}


				input.Seek(index236_6);
				if ( s>=0 ) return s;
				break;
			case 5:
				int LA236_8 = input.LA(1);


				int index236_8 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred389_cs_fragment)) ) {s = 2;}

				else if ( (EvaluatePredicate(synpred390_cs_fragment)) ) {s = 7;}


				input.Seek(index236_8);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 236, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA271 : DFA
	{
		private const string DFA271_eotS =
			"\x12\uffff";
		private const string DFA271_eofS =
			"\x12\uffff";
		private const string DFA271_minS =
			"\x01\x2a\x09\uffff\x01\x2b\x07\uffff";
		private const string DFA271_maxS =
			"\x01\u009c\x09\uffff\x01\x6e\x07\uffff";
		private const string DFA271_acceptS =
			"\x01\uffff\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x06\x01\x07\x01"+
			"\x08\x01\x09\x01\uffff\x01\x0b\x01\x0c\x01\x0e\x01\x0f\x01\x10\x01\x0a"+
			"\x01\x0d";
		private const string DFA271_specialS =
			"\x12\uffff}>";
		private static readonly string[] DFA271_transitionS =
			{
				"\x01\x02\x01\x0a\x43\uffff\x01\x03\x0b\uffff\x01\x0d\x01\x01\x04\uffff"+
				"\x01\x06\x10\uffff\x01\x04\x01\x05\x01\x09\x01\x0f\x01\x0e\x02\uffff"+
				"\x01\x0b\x01\x0c\x01\x08\x01\x07",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x01\x10\x42\uffff\x01\x11",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA271_eot = DFA.UnpackEncodedString(DFA271_eotS);
		private static readonly short[] DFA271_eof = DFA.UnpackEncodedString(DFA271_eofS);
		private static readonly char[] DFA271_min = DFA.UnpackEncodedStringToUnsignedChars(DFA271_minS);
		private static readonly char[] DFA271_max = DFA.UnpackEncodedStringToUnsignedChars(DFA271_maxS);
		private static readonly short[] DFA271_accept = DFA.UnpackEncodedString(DFA271_acceptS);
		private static readonly short[] DFA271_special = DFA.UnpackEncodedString(DFA271_specialS);
		private static readonly short[][] DFA271_transition;

		static DFA271()
		{
			int numStates = DFA271_transitionS.Length;
			DFA271_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA271_transition[i] = DFA.UnpackEncodedString(DFA271_transitionS[i]);
			}
		}

		public DFA271( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 271;
			this.eot = DFA271_eot;
			this.eof = DFA271_eof;
			this.min = DFA271_min;
			this.max = DFA271_max;
			this.accept = DFA271_accept;
			this.special = DFA271_special;
			this.transition = DFA271_transition;
		}

		public override string Description { get { return "791:1: overloadable_binary_operator : ( '+' | '-' | '*' | '/' | '%' | '&' | '|' | '^' | '<<' | '>' '>' | '==' | '!=' | '>' | '<' | '>=' | '<=' );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA283 : DFA
	{
		private const string DFA283_eotS =
			"\x0d\uffff";
		private const string DFA283_eofS =
			"\x0d\uffff";
		private const string DFA283_minS =
			"\x01\x5e\x03\x1e\x09\uffff";
		private const string DFA283_maxS =
			"\x01\u00c0\x03\u00e2\x09\uffff";
		private const string DFA283_acceptS =
			"\x04\uffff\x01\x01\x01\x02\x01\x07\x01\x03\x01\x04\x01\x08\x01\x05\x01"+
			"\x06\x01\x09";
		private const string DFA283_specialS =
			"\x0d\uffff}>";
		private static readonly string[] DFA283_transitionS =
			{
				"\x01\x01\x4f\uffff\x01\x02\x11\uffff\x01\x03",
				"\x01\x06\x10\uffff\x01\x06\x04\uffff\x01\x06\x2a\uffff\x01\x06\x05"+
				"\uffff\x07\x06\x01\uffff\x01\x06\x40\uffff\x01\x04\x0d\x06\x04\uffff"+
				"\x01\x05\x06\uffff\x01\x06\x01\uffff\x02\x06\x05\uffff\x01\x06\x10\uffff"+
				"\x02\x06",
				"\x01\x09\x10\uffff\x01\x09\x04\uffff\x01\x09\x29\uffff\x01\x07\x01"+
				"\x09\x05\uffff\x07\x09\x01\uffff\x01\x09\x41\uffff\x0d\x09\x04\uffff"+
				"\x01\x08\x06\uffff\x01\x09\x01\uffff\x02\x09\x05\uffff\x01\x09\x10\uffff"+
				"\x02\x09",
				"\x01\x0c\x10\uffff\x01\x0c\x04\uffff\x01\x0c\x29\uffff\x01\x0a\x01"+
				"\x0c\x05\uffff\x07\x0c\x01\uffff\x01\x0c\x40\uffff\x01\x0b\x0d\x0c\x0b"+
				"\uffff\x01\x0c\x01\uffff\x02\x0c\x05\uffff\x01\x0c\x10\uffff\x02\x0c",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA283_eot = DFA.UnpackEncodedString(DFA283_eotS);
		private static readonly short[] DFA283_eof = DFA.UnpackEncodedString(DFA283_eofS);
		private static readonly char[] DFA283_min = DFA.UnpackEncodedStringToUnsignedChars(DFA283_minS);
		private static readonly char[] DFA283_max = DFA.UnpackEncodedStringToUnsignedChars(DFA283_maxS);
		private static readonly short[] DFA283_accept = DFA.UnpackEncodedString(DFA283_acceptS);
		private static readonly short[] DFA283_special = DFA.UnpackEncodedString(DFA283_specialS);
		private static readonly short[][] DFA283_transition;

		static DFA283()
		{
			int numStates = DFA283_transitionS.Length;
			DFA283_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA283_transition[i] = DFA.UnpackEncodedString(DFA283_transitionS[i]);
			}
		}

		public DFA283( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 283;
			this.eot = DFA283_eot;
			this.eof = DFA283_eof;
			this.min = DFA283_min;
			this.max = DFA283_max;
			this.accept = DFA283_accept;
			this.special = DFA283_special;
			this.transition = DFA283_transition;
		}

		public override string Description { get { return "811:1: static_constructor_modifiers : ( 'extern' 'unsafe' 'static' | 'extern' 'static' ( 'unsafe' )? | 'unsafe' 'extern' 'static' | 'unsafe' 'static' ( 'extern' )? | 'static' 'extern' ( 'unsafe' )? | 'static' 'unsafe' ( 'extern' )? | 'extern' | 'unsafe' | 'static' );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA299 : DFA
	{
		private const string DFA299_eotS =
			"\x1e\uffff";
		private const string DFA299_eofS =
			"\x1e\uffff";
		private const string DFA299_minS =
			"\x01\x1e\x02\x00\x01\uffff\x05\x00\x01\uffff\x08\x00\x0c\uffff";
		private const string DFA299_maxS =
			"\x01\u00e2\x02\x00\x01\uffff\x05\x00\x01\uffff\x08\x00\x0c\uffff";
		private const string DFA299_acceptS =
			"\x03\uffff\x01\x01\x05\uffff\x01\x02\x08\uffff\x01\x0a\x04\uffff\x01"+
			"\x03\x01\x04\x01\x05\x01\x06\x01\x07\x01\x08\x01\x09";
		private const string DFA299_specialS =
			"\x01\uffff\x01\x00\x01\x01\x01\uffff\x01\x02\x01\x03\x01\x04\x01\x05"+
			"\x01\x06\x01\uffff\x01\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0c\x01"+
			"\x0d\x01\x0e\x0c\uffff}>";
		private static readonly string[] DFA299_transitionS =
			{
				"\x01\x05\x0e\uffff\x01\x12\x01\uffff\x01\x0c\x2e\uffff\x01\x0a\x01"+
				"\x0c\x01\uffff\x01\x01\x03\uffff\x03\x0c\x01\x06\x03\x0c\x01\uffff\x01"+
				"\x0c\x03\uffff\x01\x08\x09\x07\x09\uffff\x06\x07\x01\x10\x05\uffff\x01"+
				"\x12\x19\uffff\x01\x02\x03\x0e\x01\x04\x0d\x0c\x01\x0b\x01\x12\x02\x0f"+
				"\x01\x0d\x01\x12\x01\x03\x02\x09\x02\x11\x01\x0c\x01\uffff\x02\x0c\x03"+
				"\uffff\x01\x12\x01\uffff\x01\x0c\x10\uffff\x02\x0c",
				"\x01\uffff",
				"\x01\uffff",
				"",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA299_eot = DFA.UnpackEncodedString(DFA299_eotS);
		private static readonly short[] DFA299_eof = DFA.UnpackEncodedString(DFA299_eofS);
		private static readonly char[] DFA299_min = DFA.UnpackEncodedStringToUnsignedChars(DFA299_minS);
		private static readonly char[] DFA299_max = DFA.UnpackEncodedStringToUnsignedChars(DFA299_maxS);
		private static readonly short[] DFA299_accept = DFA.UnpackEncodedString(DFA299_acceptS);
		private static readonly short[] DFA299_special = DFA.UnpackEncodedString(DFA299_specialS);
		private static readonly short[][] DFA299_transition;

		static DFA299()
		{
			int numStates = DFA299_transitionS.Length;
			DFA299_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA299_transition[i] = DFA.UnpackEncodedString(DFA299_transitionS[i]);
			}
		}

		public DFA299( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 299;
			this.eot = DFA299_eot;
			this.eof = DFA299_eof;
			this.min = DFA299_min;
			this.max = DFA299_max;
			this.accept = DFA299_accept;
			this.special = DFA299_special;
			this.transition = DFA299_transition;
		}

		public override string Description { get { return "845:1: struct_member_declaration : ( constant_declaration | field_declaration | method_declaration | property_declaration | event_declaration | indexer_declaration | operator_declaration | constructor_declaration | static_constructor_declaration | type_declaration );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition299(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA299_1 = input.LA(1);


				int index299_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred535_cs_fragment)) ) {s = 3;}

				else if ( (EvaluatePredicate(synpred536_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred537_cs_fragment)) ) {s = 23;}

				else if ( (EvaluatePredicate(synpred538_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred539_cs_fragment)) ) {s = 25;}

				else if ( (EvaluatePredicate(synpred540_cs_fragment)) ) {s = 26;}

				else if ( (EvaluatePredicate(synpred541_cs_fragment)) ) {s = 27;}

				else if ( (EvaluatePredicate(synpred542_cs_fragment)) ) {s = 28;}

				else if ( (EvaluatePredicate(synpred543_cs_fragment)) ) {s = 29;}

				else if ( (true) ) {s = 18;}


				input.Seek(index299_1);
				if ( s>=0 ) return s;
				break;
			case 1:
				int LA299_2 = input.LA(1);


				int index299_2 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred535_cs_fragment)) ) {s = 3;}

				else if ( (EvaluatePredicate(synpred536_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred537_cs_fragment)) ) {s = 23;}

				else if ( (EvaluatePredicate(synpred538_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred539_cs_fragment)) ) {s = 25;}

				else if ( (EvaluatePredicate(synpred540_cs_fragment)) ) {s = 26;}

				else if ( (EvaluatePredicate(synpred541_cs_fragment)) ) {s = 27;}

				else if ( (EvaluatePredicate(synpred542_cs_fragment)) ) {s = 28;}

				else if ( (true) ) {s = 18;}


				input.Seek(index299_2);
				if ( s>=0 ) return s;
				break;
			case 2:
				int LA299_4 = input.LA(1);


				int index299_4 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred536_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred537_cs_fragment)) ) {s = 23;}

				else if ( (EvaluatePredicate(synpred538_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred539_cs_fragment)) ) {s = 25;}

				else if ( (EvaluatePredicate(synpred540_cs_fragment)) ) {s = 26;}

				else if ( (EvaluatePredicate(synpred541_cs_fragment)) ) {s = 27;}

				else if ( (EvaluatePredicate(synpred542_cs_fragment)) ) {s = 28;}

				else if ( (EvaluatePredicate(synpred543_cs_fragment)) ) {s = 29;}

				else if ( (true) ) {s = 18;}


				input.Seek(index299_4);
				if ( s>=0 ) return s;
				break;
			case 3:
				int LA299_5 = input.LA(1);


				int index299_5 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred536_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred537_cs_fragment)) ) {s = 23;}

				else if ( (EvaluatePredicate(synpred538_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred540_cs_fragment)) ) {s = 26;}

				else if ( (EvaluatePredicate(synpred542_cs_fragment)) ) {s = 28;}


				input.Seek(index299_5);
				if ( s>=0 ) return s;
				break;
			case 4:
				int LA299_6 = input.LA(1);


				int index299_6 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred536_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred537_cs_fragment)) ) {s = 23;}

				else if ( (EvaluatePredicate(synpred538_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred539_cs_fragment)) ) {s = 25;}

				else if ( (EvaluatePredicate(synpred540_cs_fragment)) ) {s = 26;}

				else if ( (EvaluatePredicate(synpred542_cs_fragment)) ) {s = 28;}


				input.Seek(index299_6);
				if ( s>=0 ) return s;
				break;
			case 5:
				int LA299_7 = input.LA(1);


				int index299_7 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred536_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred537_cs_fragment)) ) {s = 23;}

				else if ( (EvaluatePredicate(synpred538_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred540_cs_fragment)) ) {s = 26;}


				input.Seek(index299_7);
				if ( s>=0 ) return s;
				break;
			case 6:
				int LA299_8 = input.LA(1);


				int index299_8 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred536_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred537_cs_fragment)) ) {s = 23;}

				else if ( (EvaluatePredicate(synpred538_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred540_cs_fragment)) ) {s = 26;}


				input.Seek(index299_8);
				if ( s>=0 ) return s;
				break;
			case 7:
				int LA299_10 = input.LA(1);


				int index299_10 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred537_cs_fragment)) ) {s = 23;}

				else if ( (EvaluatePredicate(synpred538_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred539_cs_fragment)) ) {s = 25;}

				else if ( (EvaluatePredicate(synpred540_cs_fragment)) ) {s = 26;}

				else if ( (EvaluatePredicate(synpred541_cs_fragment)) ) {s = 27;}

				else if ( (EvaluatePredicate(synpred542_cs_fragment)) ) {s = 28;}

				else if ( (EvaluatePredicate(synpred543_cs_fragment)) ) {s = 29;}


				input.Seek(index299_10);
				if ( s>=0 ) return s;
				break;
			case 8:
				int LA299_11 = input.LA(1);


				int index299_11 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred537_cs_fragment)) ) {s = 23;}

				else if ( (true) ) {s = 18;}


				input.Seek(index299_11);
				if ( s>=0 ) return s;
				break;
			case 9:
				int LA299_12 = input.LA(1);


				int index299_12 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred536_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred537_cs_fragment)) ) {s = 23;}

				else if ( (EvaluatePredicate(synpred538_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred540_cs_fragment)) ) {s = 26;}

				else if ( (EvaluatePredicate(synpred542_cs_fragment)) ) {s = 28;}


				input.Seek(index299_12);
				if ( s>=0 ) return s;
				break;
			case 10:
				int LA299_13 = input.LA(1);


				int index299_13 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred536_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred537_cs_fragment)) ) {s = 23;}

				else if ( (EvaluatePredicate(synpred538_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred539_cs_fragment)) ) {s = 25;}

				else if ( (EvaluatePredicate(synpred541_cs_fragment)) ) {s = 27;}

				else if ( (EvaluatePredicate(synpred543_cs_fragment)) ) {s = 29;}

				else if ( (true) ) {s = 18;}


				input.Seek(index299_13);
				if ( s>=0 ) return s;
				break;
			case 11:
				int LA299_14 = input.LA(1);


				int index299_14 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred535_cs_fragment)) ) {s = 3;}

				else if ( (EvaluatePredicate(synpred536_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred537_cs_fragment)) ) {s = 23;}

				else if ( (EvaluatePredicate(synpred538_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred539_cs_fragment)) ) {s = 25;}

				else if ( (EvaluatePredicate(synpred540_cs_fragment)) ) {s = 26;}

				else if ( (EvaluatePredicate(synpred542_cs_fragment)) ) {s = 28;}

				else if ( (true) ) {s = 18;}


				input.Seek(index299_14);
				if ( s>=0 ) return s;
				break;
			case 12:
				int LA299_15 = input.LA(1);


				int index299_15 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred537_cs_fragment)) ) {s = 23;}

				else if ( (EvaluatePredicate(synpred538_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred539_cs_fragment)) ) {s = 25;}

				else if ( (EvaluatePredicate(synpred540_cs_fragment)) ) {s = 26;}

				else if ( (true) ) {s = 18;}


				input.Seek(index299_15);
				if ( s>=0 ) return s;
				break;
			case 13:
				int LA299_16 = input.LA(1);


				int index299_16 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred535_cs_fragment)) ) {s = 3;}

				else if ( (EvaluatePredicate(synpred536_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred537_cs_fragment)) ) {s = 23;}

				else if ( (EvaluatePredicate(synpred538_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred539_cs_fragment)) ) {s = 25;}

				else if ( (EvaluatePredicate(synpred540_cs_fragment)) ) {s = 26;}

				else if ( (true) ) {s = 18;}


				input.Seek(index299_16);
				if ( s>=0 ) return s;
				break;
			case 14:
				int LA299_17 = input.LA(1);


				int index299_17 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred537_cs_fragment)) ) {s = 23;}

				else if ( (EvaluatePredicate(synpred538_cs_fragment)) ) {s = 24;}

				else if ( (EvaluatePredicate(synpred539_cs_fragment)) ) {s = 25;}

				else if ( (EvaluatePredicate(synpred540_cs_fragment)) ) {s = 26;}


				input.Seek(index299_17);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 299, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA310 : DFA
	{
		private const string DFA310_eotS =
			"\x0c\uffff";
		private const string DFA310_eofS =
			"\x0c\uffff";
		private const string DFA310_minS =
			"\x01\x1e\x06\x00\x01\uffff\x01\x00\x03\uffff";
		private const string DFA310_maxS =
			"\x01\u00e2\x06\x00\x01\uffff\x01\x00\x03\uffff";
		private const string DFA310_acceptS =
			"\x07\uffff\x01\x02\x01\uffff\x01\x01\x01\x03\x01\x04";
		private const string DFA310_specialS =
			"\x01\uffff\x01\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\uffff"+
			"\x01\x06\x03\uffff}>";
		private static readonly string[] DFA310_transitionS =
			{
				"\x01\x03\x10\uffff\x01\x08\x2e\uffff\x01\x07\x01\x08\x01\uffff\x01"+
				"\x01\x03\uffff\x03\x08\x01\x04\x03\x08\x01\uffff\x01\x08\x03\uffff\x01"+
				"\x06\x09\x05\x09\uffff\x06\x05\x01\x02\x1f\uffff\x05\x07\x0d\x08\x02"+
				"\uffff\x03\x07\x04\uffff\x02\x07\x01\x08\x01\uffff\x02\x08\x05\uffff"+
				"\x01\x08\x10\uffff\x02\x08",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"",
				"\x01\uffff",
				"",
				"",
				""
			};

		private static readonly short[] DFA310_eot = DFA.UnpackEncodedString(DFA310_eotS);
		private static readonly short[] DFA310_eof = DFA.UnpackEncodedString(DFA310_eofS);
		private static readonly char[] DFA310_min = DFA.UnpackEncodedStringToUnsignedChars(DFA310_minS);
		private static readonly char[] DFA310_max = DFA.UnpackEncodedStringToUnsignedChars(DFA310_maxS);
		private static readonly short[] DFA310_accept = DFA.UnpackEncodedString(DFA310_acceptS);
		private static readonly short[] DFA310_special = DFA.UnpackEncodedString(DFA310_specialS);
		private static readonly short[][] DFA310_transition;

		static DFA310()
		{
			int numStates = DFA310_transitionS.Length;
			DFA310_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA310_transition[i] = DFA.UnpackEncodedString(DFA310_transitionS[i]);
			}
		}

		public DFA310( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 310;
			this.eot = DFA310_eot;
			this.eof = DFA310_eof;
			this.min = DFA310_min;
			this.max = DFA310_max;
			this.accept = DFA310_accept;
			this.special = DFA310_special;
			this.transition = DFA310_transition;
		}

		public override string Description { get { return "872:1: interface_member_declaration : ( interface_property_declaration | interface_method_declaration | interface_event_declaration | interface_indexer_declaration );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition310(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA310_1 = input.LA(1);


				int index310_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred559_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred560_cs_fragment)) ) {s = 7;}

				else if ( (EvaluatePredicate(synpred561_cs_fragment)) ) {s = 10;}

				else if ( (true) ) {s = 11;}


				input.Seek(index310_1);
				if ( s>=0 ) return s;
				break;
			case 1:
				int LA310_2 = input.LA(1);


				int index310_2 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred559_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred560_cs_fragment)) ) {s = 7;}

				else if ( (EvaluatePredicate(synpred561_cs_fragment)) ) {s = 10;}

				else if ( (true) ) {s = 11;}


				input.Seek(index310_2);
				if ( s>=0 ) return s;
				break;
			case 2:
				int LA310_3 = input.LA(1);


				int index310_3 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred559_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred560_cs_fragment)) ) {s = 7;}

				else if ( (true) ) {s = 11;}


				input.Seek(index310_3);
				if ( s>=0 ) return s;
				break;
			case 3:
				int LA310_4 = input.LA(1);


				int index310_4 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred559_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred560_cs_fragment)) ) {s = 7;}

				else if ( (EvaluatePredicate(synpred561_cs_fragment)) ) {s = 10;}

				else if ( (true) ) {s = 11;}


				input.Seek(index310_4);
				if ( s>=0 ) return s;
				break;
			case 4:
				int LA310_5 = input.LA(1);


				int index310_5 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred559_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred560_cs_fragment)) ) {s = 7;}

				else if ( (true) ) {s = 11;}


				input.Seek(index310_5);
				if ( s>=0 ) return s;
				break;
			case 5:
				int LA310_6 = input.LA(1);


				int index310_6 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred559_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred560_cs_fragment)) ) {s = 7;}

				else if ( (true) ) {s = 11;}


				input.Seek(index310_6);
				if ( s>=0 ) return s;
				break;
			case 6:
				int LA310_8 = input.LA(1);


				int index310_8 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred559_cs_fragment)) ) {s = 9;}

				else if ( (EvaluatePredicate(synpred560_cs_fragment)) ) {s = 7;}

				else if ( (true) ) {s = 11;}


				input.Seek(index310_8);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 310, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA338 : DFA
	{
		private const string DFA338_eotS =
			"\x30\uffff";
		private const string DFA338_eofS =
			"\x30\uffff";
		private const string DFA338_minS =
			"\x01\x0d\x03\x00\x01\uffff\x01\x00\x17\uffff\x01\x00\x0e\uffff\x01\x00"+
			"\x03\uffff";
		private const string DFA338_maxS =
			"\x01\u00e2\x03\x00\x01\uffff\x01\x00\x17\uffff\x01\x00\x0e\uffff\x01"+
			"\x00\x03\uffff";
		private const string DFA338_acceptS =
			"\x04\uffff\x01\x02\x03\uffff\x01\x03\x26\uffff\x01\x01";
		private const string DFA338_specialS =
			"\x01\uffff\x01\x00\x01\x01\x01\x02\x01\uffff\x01\x03\x17\uffff\x01\x04"+
			"\x0e\uffff\x01\x05\x03\uffff}>";
		private static readonly string[] DFA338_transitionS =
			{
				"\x01\x08\x10\uffff\x01\x01\x09\x08\x02\uffff\x01\x08\x01\uffff\x01"+
				"\x08\x02\uffff\x01\x2c\x04\uffff\x01\x08\x25\uffff\x03\x08\x02\uffff"+
				"\x01\x2c\x05\uffff\x07\x2c\x01\x08\x01\x2c\x02\x08\x01\uffff\x01\x04"+
				"\x09\x03\x01\uffff\x06\x08\x02\uffff\x06\x03\x07\x08\x1d\uffff\x01\x08"+
				"\x01\x05\x0c\x2c\x06\uffff\x01\x04\x04\uffff\x01\x2c\x01\uffff\x02\x2c"+
				"\x04\uffff\x01\x08\x01\x02\x01\x04\x01\uffff\x01\x08\x01\uffff\x09\x08"+
				"\x02\uffff\x01\x08\x01\x1d\x01\x2c",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x01\uffff",
				"",
				"",
				""
			};

		private static readonly short[] DFA338_eot = DFA.UnpackEncodedString(DFA338_eotS);
		private static readonly short[] DFA338_eof = DFA.UnpackEncodedString(DFA338_eofS);
		private static readonly char[] DFA338_min = DFA.UnpackEncodedStringToUnsignedChars(DFA338_minS);
		private static readonly char[] DFA338_max = DFA.UnpackEncodedStringToUnsignedChars(DFA338_maxS);
		private static readonly short[] DFA338_accept = DFA.UnpackEncodedString(DFA338_acceptS);
		private static readonly short[] DFA338_special = DFA.UnpackEncodedString(DFA338_specialS);
		private static readonly short[][] DFA338_transition;

		static DFA338()
		{
			int numStates = DFA338_transitionS.Length;
			DFA338_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA338_transition[i] = DFA.UnpackEncodedString(DFA338_transitionS[i]);
			}
		}

		public DFA338( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 338;
			this.eot = DFA338_eot;
			this.eof = DFA338_eof;
			this.min = DFA338_min;
			this.max = DFA338_max;
			this.accept = DFA338_accept;
			this.special = DFA338_special;
			this.transition = DFA338_transition;
		}

		public override string Description { get { return "913:1: statement : ( labeled_statement | declaration_statement | embedded_statement );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition338(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA338_1 = input.LA(1);


				int index338_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred593_cs_fragment)) ) {s = 47;}

				else if ( (EvaluatePredicate(synpred594_cs_fragment)) ) {s = 4;}

				else if ( (true) ) {s = 8;}


				input.Seek(index338_1);
				if ( s>=0 ) return s;
				break;
			case 1:
				int LA338_2 = input.LA(1);


				int index338_2 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred593_cs_fragment)) ) {s = 47;}

				else if ( (EvaluatePredicate(synpred594_cs_fragment)) ) {s = 4;}

				else if ( (true) ) {s = 8;}


				input.Seek(index338_2);
				if ( s>=0 ) return s;
				break;
			case 2:
				int LA338_3 = input.LA(1);


				int index338_3 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred594_cs_fragment)) ) {s = 4;}

				else if ( (true) ) {s = 8;}


				input.Seek(index338_3);
				if ( s>=0 ) return s;
				break;
			case 3:
				int LA338_5 = input.LA(1);


				int index338_5 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred593_cs_fragment)) ) {s = 47;}

				else if ( (EvaluatePredicate(synpred594_cs_fragment)) ) {s = 4;}

				else if ( (true) ) {s = 8;}


				input.Seek(index338_5);
				if ( s>=0 ) return s;
				break;
			case 4:
				int LA338_29 = input.LA(1);


				int index338_29 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred593_cs_fragment)) ) {s = 47;}

				else if ( (EvaluatePredicate(synpred594_cs_fragment)) ) {s = 4;}

				else if ( (true) ) {s = 8;}


				input.Seek(index338_29);
				if ( s>=0 ) return s;
				break;
			case 5:
				int LA338_44 = input.LA(1);


				int index338_44 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred593_cs_fragment)) ) {s = 47;}

				else if ( (EvaluatePredicate(synpred594_cs_fragment)) ) {s = 4;}

				else if ( (true) ) {s = 8;}


				input.Seek(index338_44);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 338, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA339 : DFA
	{
		private const string DFA339_eotS =
			"\x13\uffff";
		private const string DFA339_eofS =
			"\x13\uffff";
		private const string DFA339_minS =
			"\x01\x0d\x01\x00\x02\uffff\x02\x34\x01\x1e\x0c\uffff";
		private const string DFA339_maxS =
			"\x01\u00e2\x01\x00\x02\uffff\x02\x6e\x01\u00e2\x0c\uffff";
		private const string DFA339_acceptS =
			"\x02\uffff\x01\x01\x01\x03\x03\uffff\x01\x04\x01\x05\x01\x06\x01\x07"+
			"\x01\x0a\x01\x0b\x01\x0d\x01\x0e\x01\x02\x01\x08\x01\x09\x01\x0c";
		private const string DFA339_specialS =
			"\x01\uffff\x01\x00\x11\uffff}>";
		private static readonly string[] DFA339_transitionS =
			{
				"\x01\x07\x10\uffff\x0a\x03\x02\uffff\x01\x03\x01\uffff\x01\x0c\x02"+
				"\uffff\x01\x03\x04\uffff\x01\x01\x25\uffff\x02\x03\x01\x02\x02\uffff"+
				"\x01\x03\x05\uffff\x07\x03\x01\x09\x03\x03\x02\uffff\x09\x03\x01\uffff"+
				"\x06\x03\x02\uffff\x09\x03\x01\x04\x01\x05\x02\x03\x1d\uffff\x01\x0d"+
				"\x0d\x03\x0b\uffff\x01\x03\x01\uffff\x02\x03\x04\uffff\x01\x0e\x01\x03"+
				"\x02\uffff\x01\x07\x01\uffff\x04\x08\x04\x09\x01\x0a\x02\uffff\x01\x0b"+
				"\x01\x06\x01\x03",
				"\x01\uffff",
				"",
				"",
				"\x01\x10\x27\uffff\x01\x10\x11\uffff\x01\x03",
				"\x01\x11\x27\uffff\x01\x11\x11\uffff\x01\x03",
				"\x01\x03\x09\uffff\x04\x03\x03\uffff\x01\x03\x04\uffff\x01\x03\x24"+
				"\uffff\x01\x03\x05\uffff\x04\x03\x02\uffff\x07\x03\x01\x12\x04\x03\x0a"+
				"\uffff\x02\x03\x02\uffff\x03\x03\x10\uffff\x18\x03\x05\uffff\x0d\x03"+
				"\x0b\uffff\x01\x03\x01\uffff\x02\x03\x05\uffff\x01\x03\x08\uffff\x01"+
				"\x12\x07\uffff\x02\x03",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA339_eot = DFA.UnpackEncodedString(DFA339_eotS);
		private static readonly short[] DFA339_eof = DFA.UnpackEncodedString(DFA339_eofS);
		private static readonly char[] DFA339_min = DFA.UnpackEncodedStringToUnsignedChars(DFA339_minS);
		private static readonly char[] DFA339_max = DFA.UnpackEncodedStringToUnsignedChars(DFA339_maxS);
		private static readonly short[] DFA339_accept = DFA.UnpackEncodedString(DFA339_acceptS);
		private static readonly short[] DFA339_special = DFA.UnpackEncodedString(DFA339_specialS);
		private static readonly short[][] DFA339_transition;

		static DFA339()
		{
			int numStates = DFA339_transitionS.Length;
			DFA339_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA339_transition[i] = DFA.UnpackEncodedString(DFA339_transitionS[i]);
			}
		}

		public DFA339( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 339;
			this.eot = DFA339_eot;
			this.eof = DFA339_eof;
			this.min = DFA339_min;
			this.max = DFA339_max;
			this.accept = DFA339_accept;
			this.special = DFA339_special;
			this.transition = DFA339_transition;
		}

		public override string Description { get { return "917:1: embedded_statement : ( block | empty_statement | expression_statement | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement | unsafe_statement | fixed_statement );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition339(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA339_1 = input.LA(1);


				int index339_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred595_cs_fragment)) ) {s = 2;}

				else if ( (EvaluatePredicate(synpred596_cs_fragment)) ) {s = 15;}


				input.Seek(index339_1);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 339, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA341 : DFA
	{
		private const string DFA341_eotS =
			"\x19\uffff";
		private const string DFA341_eofS =
			"\x19\uffff";
		private const string DFA341_minS =
			"\x01\x1e\x01\x00\x17\uffff";
		private const string DFA341_maxS =
			"\x01\u00e2\x01\x00\x17\uffff";
		private const string DFA341_acceptS =
			"\x02\uffff\x01\x02\x15\uffff\x01\x01";
		private const string DFA341_specialS =
			"\x01\uffff\x01\x00\x17\uffff}>";
		private static readonly string[] DFA341_transitionS =
			{
				"\x0a\x02\x02\uffff\x01\x02\x04\uffff\x01\x02\x2a\uffff\x02\x02\x03"+
				"\uffff\x01\x02\x05\uffff\x07\x02\x01\uffff\x03\x02\x02\uffff\x09\x02"+
				"\x01\uffff\x05\x02\x01\x01\x02\uffff\x0d\x02\x1e\uffff\x0d\x02\x0b\uffff"+
				"\x01\x02\x01\uffff\x02\x02\x05\uffff\x01\x02\x10\uffff\x02\x02",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA341_eot = DFA.UnpackEncodedString(DFA341_eotS);
		private static readonly short[] DFA341_eof = DFA.UnpackEncodedString(DFA341_eofS);
		private static readonly char[] DFA341_min = DFA.UnpackEncodedStringToUnsignedChars(DFA341_minS);
		private static readonly char[] DFA341_max = DFA.UnpackEncodedStringToUnsignedChars(DFA341_maxS);
		private static readonly short[] DFA341_accept = DFA.UnpackEncodedString(DFA341_acceptS);
		private static readonly short[] DFA341_special = DFA.UnpackEncodedString(DFA341_specialS);
		private static readonly short[][] DFA341_transition;

		static DFA341()
		{
			int numStates = DFA341_transitionS.Length;
			DFA341_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA341_transition[i] = DFA.UnpackEncodedString(DFA341_transitionS[i]);
			}
		}

		public DFA341( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 341;
			this.eot = DFA341_eot;
			this.eof = DFA341_eof;
			this.min = DFA341_min;
			this.max = DFA341_max;
			this.accept = DFA341_accept;
			this.special = DFA341_special;
			this.transition = DFA341_transition;
		}

		public override string Description { get { return "938:1: fixed_pointer_initializer : ( '&' variable_reference | expression );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition341(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA341_1 = input.LA(1);


				int index341_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred609_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 2;}


				input.Seek(index341_1);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 341, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA352 : DFA
	{
		private const string DFA352_eotS =
			"\x1b\uffff";
		private const string DFA352_eofS =
			"\x1b\uffff";
		private const string DFA352_minS =
			"\x01\x1e\x16\x00\x04\uffff";
		private const string DFA352_maxS =
			"\x01\u00e2\x16\x00\x04\uffff";
		private const string DFA352_acceptS =
			"\x17\uffff\x01\x01\x01\x03\x01\x04\x01\x02";
		private const string DFA352_specialS =
			"\x01\uffff\x01\x00\x01\x01\x01\x02\x01\x03\x01\x04\x01\x05\x01\x06\x01"+
			"\x07\x01\x08\x01\x09\x01\x0a\x01\x0b\x01\x0c\x01\x0d\x01\x0e\x01\x0f"+
			"\x01\x10\x01\x11\x01\x12\x01\x13\x01\x14\x01\x15\x04\uffff}>";
		private static readonly string[] DFA352_transitionS =
			{
				"\x01\x02\x09\x07\x02\uffff\x01\x0a\x04\uffff\x01\x03\x2a\uffff\x01"+
				"\x04\x01\x05\x03\uffff\x01\x03\x05\uffff\x07\x03\x01\uffff\x01\x03\x01"+
				"\x01\x01\x0d\x02\uffff\x09\x06\x01\uffff\x01\x09\x01\x0b\x01\x0c\x01"+
				"\x0e\x01\x0f\x01\x16\x02\uffff\x06\x06\x01\x08\x01\x11\x01\x10\x01\x12"+
				"\x01\x13\x01\x14\x01\x15\x1e\uffff\x0d\x03\x0b\uffff\x01\x03\x01\uffff"+
				"\x02\x03\x05\uffff\x01\x03\x10\uffff\x02\x03",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA352_eot = DFA.UnpackEncodedString(DFA352_eotS);
		private static readonly short[] DFA352_eof = DFA.UnpackEncodedString(DFA352_eofS);
		private static readonly char[] DFA352_min = DFA.UnpackEncodedStringToUnsignedChars(DFA352_minS);
		private static readonly char[] DFA352_max = DFA.UnpackEncodedStringToUnsignedChars(DFA352_maxS);
		private static readonly short[] DFA352_accept = DFA.UnpackEncodedString(DFA352_acceptS);
		private static readonly short[] DFA352_special = DFA.UnpackEncodedString(DFA352_specialS);
		private static readonly short[][] DFA352_transition;

		static DFA352()
		{
			int numStates = DFA352_transitionS.Length;
			DFA352_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA352_transition[i] = DFA.UnpackEncodedString(DFA352_transitionS[i]);
			}
		}

		public DFA352( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 352;
			this.eot = DFA352_eot;
			this.eof = DFA352_eof;
			this.min = DFA352_min;
			this.max = DFA352_max;
			this.accept = DFA352_accept;
			this.special = DFA352_special;
			this.transition = DFA352_transition;
		}

		public override string Description { get { return "981:1: statement_expression : ( invocation_expression | object_creation_expression | assignment | unary_expression );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition352(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA352_1 = input.LA(1);


				int index352_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred622_cs_fragment)) ) {s = 23;}

				else if ( (EvaluatePredicate(synpred624_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index352_1);
				if ( s>=0 ) return s;
				break;
			case 1:
				int LA352_2 = input.LA(1);


				int index352_2 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred622_cs_fragment)) ) {s = 23;}

				else if ( (EvaluatePredicate(synpred624_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index352_2);
				if ( s>=0 ) return s;
				break;
			case 2:
				int LA352_3 = input.LA(1);


				int index352_3 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred622_cs_fragment)) ) {s = 23;}

				else if ( (EvaluatePredicate(synpred624_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index352_3);
				if ( s>=0 ) return s;
				break;
			case 3:
				int LA352_4 = input.LA(1);


				int index352_4 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred622_cs_fragment)) ) {s = 23;}

				else if ( (EvaluatePredicate(synpred624_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index352_4);
				if ( s>=0 ) return s;
				break;
			case 4:
				int LA352_5 = input.LA(1);


				int index352_5 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred622_cs_fragment)) ) {s = 23;}

				else if ( (EvaluatePredicate(synpred624_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index352_5);
				if ( s>=0 ) return s;
				break;
			case 5:
				int LA352_6 = input.LA(1);


				int index352_6 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred622_cs_fragment)) ) {s = 23;}

				else if ( (EvaluatePredicate(synpred624_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index352_6);
				if ( s>=0 ) return s;
				break;
			case 6:
				int LA352_7 = input.LA(1);


				int index352_7 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred622_cs_fragment)) ) {s = 23;}

				else if ( (EvaluatePredicate(synpred624_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index352_7);
				if ( s>=0 ) return s;
				break;
			case 7:
				int LA352_8 = input.LA(1);


				int index352_8 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred623_cs_fragment)) ) {s = 26;}

				else if ( (EvaluatePredicate(synpred624_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index352_8);
				if ( s>=0 ) return s;
				break;
			case 8:
				int LA352_9 = input.LA(1);


				int index352_9 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred624_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index352_9);
				if ( s>=0 ) return s;
				break;
			case 9:
				int LA352_10 = input.LA(1);


				int index352_10 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred624_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index352_10);
				if ( s>=0 ) return s;
				break;
			case 10:
				int LA352_11 = input.LA(1);


				int index352_11 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred624_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index352_11);
				if ( s>=0 ) return s;
				break;
			case 11:
				int LA352_12 = input.LA(1);


				int index352_12 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred624_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index352_12);
				if ( s>=0 ) return s;
				break;
			case 12:
				int LA352_13 = input.LA(1);


				int index352_13 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred624_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index352_13);
				if ( s>=0 ) return s;
				break;
			case 13:
				int LA352_14 = input.LA(1);


				int index352_14 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred624_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index352_14);
				if ( s>=0 ) return s;
				break;
			case 14:
				int LA352_15 = input.LA(1);


				int index352_15 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred624_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index352_15);
				if ( s>=0 ) return s;
				break;
			case 15:
				int LA352_16 = input.LA(1);


				int index352_16 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred624_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index352_16);
				if ( s>=0 ) return s;
				break;
			case 16:
				int LA352_17 = input.LA(1);


				int index352_17 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred624_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index352_17);
				if ( s>=0 ) return s;
				break;
			case 17:
				int LA352_18 = input.LA(1);


				int index352_18 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred624_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index352_18);
				if ( s>=0 ) return s;
				break;
			case 18:
				int LA352_19 = input.LA(1);


				int index352_19 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred624_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index352_19);
				if ( s>=0 ) return s;
				break;
			case 19:
				int LA352_20 = input.LA(1);


				int index352_20 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred624_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index352_20);
				if ( s>=0 ) return s;
				break;
			case 20:
				int LA352_21 = input.LA(1);


				int index352_21 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred624_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index352_21);
				if ( s>=0 ) return s;
				break;
			case 21:
				int LA352_22 = input.LA(1);


				int index352_22 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred624_cs_fragment)) ) {s = 24;}

				else if ( (true) ) {s = 25;}


				input.Seek(index352_22);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 352, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA363 : DFA
	{
		private const string DFA363_eotS =
			"\x1a\uffff";
		private const string DFA363_eofS =
			"\x1a\uffff";
		private const string DFA363_minS =
			"\x01\x1e\x03\x00\x01\uffff\x01\x00\x14\uffff";
		private const string DFA363_maxS =
			"\x01\u00e2\x03\x00\x01\uffff\x01\x00\x14\uffff";
		private const string DFA363_acceptS =
			"\x04\uffff\x01\x01\x02\uffff\x01\x02\x12\uffff";
		private const string DFA363_specialS =
			"\x01\uffff\x01\x00\x01\x01\x01\x02\x01\uffff\x01\x03\x14\uffff}>";
		private static readonly string[] DFA363_transitionS =
			{
				"\x01\x01\x09\x07\x02\uffff\x01\x07\x04\uffff\x01\x05\x2a\uffff\x02"+
				"\x07\x03\uffff\x01\x05\x05\uffff\x07\x05\x01\uffff\x01\x05\x02\x07\x01"+
				"\uffff\x01\x04\x09\x03\x01\uffff\x06\x07\x02\uffff\x06\x03\x07\x07\x1e"+
				"\uffff\x0d\x05\x0b\uffff\x01\x05\x01\uffff\x02\x05\x05\uffff\x01\x02"+
				"\x01\x04\x0f\uffff\x02\x05",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA363_eot = DFA.UnpackEncodedString(DFA363_eotS);
		private static readonly short[] DFA363_eof = DFA.UnpackEncodedString(DFA363_eofS);
		private static readonly char[] DFA363_min = DFA.UnpackEncodedStringToUnsignedChars(DFA363_minS);
		private static readonly char[] DFA363_max = DFA.UnpackEncodedStringToUnsignedChars(DFA363_maxS);
		private static readonly short[] DFA363_accept = DFA.UnpackEncodedString(DFA363_acceptS);
		private static readonly short[] DFA363_special = DFA.UnpackEncodedString(DFA363_specialS);
		private static readonly short[][] DFA363_transition;

		static DFA363()
		{
			int numStates = DFA363_transitionS.Length;
			DFA363_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA363_transition[i] = DFA.UnpackEncodedString(DFA363_transitionS[i]);
			}
		}

		public DFA363( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 363;
			this.eot = DFA363_eot;
			this.eof = DFA363_eof;
			this.min = DFA363_min;
			this.max = DFA363_max;
			this.accept = DFA363_accept;
			this.special = DFA363_special;
			this.transition = DFA363_transition;
		}

		public override string Description { get { return "1019:1: for_initializer : ( local_variable_declaration | statement_expression_list );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition363(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA363_1 = input.LA(1);


				int index363_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred637_cs_fragment)) ) {s = 4;}

				else if ( (true) ) {s = 7;}


				input.Seek(index363_1);
				if ( s>=0 ) return s;
				break;
			case 1:
				int LA363_2 = input.LA(1);


				int index363_2 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred637_cs_fragment)) ) {s = 4;}

				else if ( (true) ) {s = 7;}


				input.Seek(index363_2);
				if ( s>=0 ) return s;
				break;
			case 2:
				int LA363_3 = input.LA(1);


				int index363_3 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred637_cs_fragment)) ) {s = 4;}

				else if ( (true) ) {s = 7;}


				input.Seek(index363_3);
				if ( s>=0 ) return s;
				break;
			case 3:
				int LA363_5 = input.LA(1);


				int index363_5 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred637_cs_fragment)) ) {s = 4;}

				else if ( (true) ) {s = 7;}


				input.Seek(index363_5);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 363, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}
	private class DFA376 : DFA
	{
		private const string DFA376_eotS =
			"\x1b\uffff";
		private const string DFA376_eofS =
			"\x1b\uffff";
		private const string DFA376_minS =
			"\x01\x1e\x03\x00\x01\uffff\x01\x00\x14\uffff\x01\x00";
		private const string DFA376_maxS =
			"\x01\u00e2\x03\x00\x01\uffff\x01\x00\x14\uffff\x01\x00";
		private const string DFA376_acceptS =
			"\x04\uffff\x01\x01\x02\uffff\x01\x02\x13\uffff";
		private const string DFA376_specialS =
			"\x01\uffff\x01\x00\x01\x01\x01\x02\x01\uffff\x01\x03\x14\uffff\x01\x04}>";
		private static readonly string[] DFA376_transitionS =
			{
				"\x01\x01\x09\x07\x02\uffff\x01\x07\x04\uffff\x01\x1a\x2a\uffff\x02"+
				"\x07\x03\uffff\x01\x1a\x05\uffff\x07\x1a\x01\uffff\x01\x1a\x02\x07\x01"+
				"\uffff\x01\x04\x09\x03\x01\uffff\x06\x07\x02\uffff\x06\x03\x07\x07\x1e"+
				"\uffff\x01\x05\x0c\x1a\x0b\uffff\x01\x1a\x01\uffff\x02\x1a\x05\uffff"+
				"\x01\x02\x01\x04\x0f\uffff\x02\x1a",
				"\x01\uffff",
				"\x01\uffff",
				"\x01\uffff",
				"",
				"\x01\uffff",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x01\uffff"
			};

		private static readonly short[] DFA376_eot = DFA.UnpackEncodedString(DFA376_eotS);
		private static readonly short[] DFA376_eof = DFA.UnpackEncodedString(DFA376_eofS);
		private static readonly char[] DFA376_min = DFA.UnpackEncodedStringToUnsignedChars(DFA376_minS);
		private static readonly char[] DFA376_max = DFA.UnpackEncodedStringToUnsignedChars(DFA376_maxS);
		private static readonly short[] DFA376_accept = DFA.UnpackEncodedString(DFA376_acceptS);
		private static readonly short[] DFA376_special = DFA.UnpackEncodedString(DFA376_specialS);
		private static readonly short[][] DFA376_transition;

		static DFA376()
		{
			int numStates = DFA376_transitionS.Length;
			DFA376_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA376_transition[i] = DFA.UnpackEncodedString(DFA376_transitionS[i]);
			}
		}

		public DFA376( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 376;
			this.eot = DFA376_eot;
			this.eof = DFA376_eof;
			this.min = DFA376_min;
			this.max = DFA376_max;
			this.accept = DFA376_accept;
			this.special = DFA376_special;
			this.transition = DFA376_transition;
		}

		public override string Description { get { return "1070:1: resource_acquisition : ( local_variable_declaration | expression );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition376(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA376_1 = input.LA(1);


				int index376_1 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred654_cs_fragment)) ) {s = 4;}

				else if ( (true) ) {s = 7;}


				input.Seek(index376_1);
				if ( s>=0 ) return s;
				break;
			case 1:
				int LA376_2 = input.LA(1);


				int index376_2 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred654_cs_fragment)) ) {s = 4;}

				else if ( (true) ) {s = 7;}


				input.Seek(index376_2);
				if ( s>=0 ) return s;
				break;
			case 2:
				int LA376_3 = input.LA(1);


				int index376_3 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred654_cs_fragment)) ) {s = 4;}

				else if ( (true) ) {s = 7;}


				input.Seek(index376_3);
				if ( s>=0 ) return s;
				break;
			case 3:
				int LA376_5 = input.LA(1);


				int index376_5 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred654_cs_fragment)) ) {s = 4;}

				else if ( (true) ) {s = 7;}


				input.Seek(index376_5);
				if ( s>=0 ) return s;
				break;
			case 4:
				int LA376_26 = input.LA(1);


				int index376_26 = input.Index;
				input.Rewind();
				s = -1;
				if ( (EvaluatePredicate(synpred654_cs_fragment)) ) {s = 4;}

				else if ( (true) ) {s = 7;}


				input.Seek(index376_26);
				if ( s>=0 ) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 376, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _using_directives_in_compilation_unit192 = new BitSet(new ulong[]{0x0000300000000000UL,0x0000000241000000UL,0xF0007C0000010400UL,0x0000000000004003UL});
		public static readonly BitSet _global_attributes_in_compilation_unit199 = new BitSet(new ulong[]{0x0000300000000000UL,0x0000000241000000UL,0xF0007C0000010400UL,0x0000000000004003UL});
		public static readonly BitSet _namespace_declaration_in_compilation_unit206 = new BitSet(new ulong[]{0x0000300000000000UL,0x0000000241000000UL,0xF0007C0000010400UL,0x0000000000004003UL});
		public static readonly BitSet _namespace_body_in_compilation_unit211 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _88_in_namespace_declaration220 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _qualified_identifier_in_namespace_declaration224 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000010000000UL});
		public static readonly BitSet _namespace_block_in_namespace_declaration228 = new BitSet(new ulong[]{0x0010000000000002UL});
		public static readonly BitSet _SEMI_in_namespace_declaration232 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _identifier_in_qualified_identifier243 = new BitSet(new ulong[]{0x0000010000000002UL});
		public static readonly BitSet _DOT_in_qualified_identifier246 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_qualified_identifier248 = new BitSet(new ulong[]{0x0000010000000002UL});
		public static readonly BitSet _qid_start_in_qid261 = new BitSet(new ulong[]{0x0000030000000002UL});
		public static readonly BitSet _qid_part_in_qid263 = new BitSet(new ulong[]{0x0000030000000002UL});
		public static readonly BitSet _identifier_in_qid_start272 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000002000000UL});
		public static readonly BitSet _89_in_qid_start275 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_qid_start277 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000000000000UL});
		public static readonly BitSet _generic_argument_list_in_qid_start281 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _90_in_qid_start287 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _91_in_qid_start292 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _predefined_type_in_qid_start297 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _literal_in_qid_start302 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _access_operator_in_qid_part312 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_qid_part316 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000000000000UL});
		public static readonly BitSet _generic_argument_list_in_qid_part320 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _92_in_namespace_block331 = new BitSet(new ulong[]{0x0000300000000000UL,0x0000000261000000UL,0xF0007C0000010400UL,0x0000000000004003UL});
		public static readonly BitSet _namespace_body_in_namespace_block335 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
		public static readonly BitSet _93_in_namespace_block339 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _extern_alias_directives_in_namespace_body347 = new BitSet(new ulong[]{0x0000300000000002UL,0x0000000201000000UL,0xF0007C0000010400UL,0x0000000000004003UL});
		public static readonly BitSet _using_directives_in_namespace_body352 = new BitSet(new ulong[]{0x0000200000000002UL,0x0000000201000000UL,0xF0007C0000010400UL,0x0000000000004003UL});
		public static readonly BitSet _namespace_member_declarations_in_namespace_body357 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _extern_alias_directive_in_extern_alias_directives366 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000040000000UL});
		public static readonly BitSet _94_in_extern_alias_directive375 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000080000000UL});
		public static readonly BitSet _95_in_extern_alias_directive379 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_extern_alias_directive383 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_extern_alias_directive386 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _using_directive_in_using_directives394 = new BitSet(new ulong[]{0x0000100000000002UL});
		public static readonly BitSet _using_alias_directive_in_using_directive404 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _using_namespace_directive_in_using_directive409 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _USING_in_using_alias_directive419 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_using_alias_directive423 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000100000000UL});
		public static readonly BitSet _96_in_using_alias_directive427 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _namespace_or_type_name_in_using_alias_directive431 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_using_alias_directive435 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _USING_in_using_namespace_directive443 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _namespace_name_in_using_namespace_directive447 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_using_namespace_directive451 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _namespace_member_declaration_in_namespace_member_declarations459 = new BitSet(new ulong[]{0x0000200000000002UL,0x0000000201000000UL,0xF0007C0000010400UL,0x0000000000004003UL});
		public static readonly BitSet _namespace_declaration_in_namespace_member_declaration468 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_declaration_in_namespace_member_declaration473 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _class_declaration_in_type_declaration481 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _struct_declaration_in_type_declaration486 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _interface_declaration_in_type_declaration491 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _enum_declaration_in_type_declaration496 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _delegate_declaration_in_type_declaration501 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _identifier_in_qualified_alias_member509 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000002000000UL});
		public static readonly BitSet _89_in_qualified_alias_member513 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_qualified_alias_member517 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000000000000UL});
		public static readonly BitSet _generic_argument_list_in_qualified_alias_member521 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _namespace_or_type_name_in_namespace_name533 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _namespace_or_type_name_in_type_name542 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _identifier_in_namespace_or_type_name554 = new BitSet(new ulong[]{0x0000010000000002UL,0x0800000002000000UL});
		public static readonly BitSet _generic_argument_list_in_namespace_or_type_name562 = new BitSet(new ulong[]{0x0000010000000002UL,0x0000000002000000UL});
		public static readonly BitSet _89_in_namespace_or_type_name567 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_namespace_or_type_name573 = new BitSet(new ulong[]{0x0000010000000002UL,0x0800000000000000UL});
		public static readonly BitSet _generic_argument_list_in_namespace_or_type_name581 = new BitSet(new ulong[]{0x0000010000000002UL});
		public static readonly BitSet _DOT_in_namespace_or_type_name587 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_namespace_or_type_name595 = new BitSet(new ulong[]{0x0000010000000002UL,0x0800000000000000UL});
		public static readonly BitSet _generic_argument_list_in_namespace_or_type_name603 = new BitSet(new ulong[]{0x0000010000000002UL});
		public static readonly BitSet _global_attribute_in_global_attributes636 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL});
		public static readonly BitSet _97_in_global_attribute646 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000006000000000UL});
		public static readonly BitSet _global_attribute_target_specifier_in_global_attribute650 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _attribute_list_in_global_attribute654 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000C00000000UL});
		public static readonly BitSet _98_in_global_attribute658 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000800000000UL});
		public static readonly BitSet _99_in_global_attribute663 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _global_attribute_target_in_global_attribute_target_specifier672 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001000000000UL});
		public static readonly BitSet _100_in_global_attribute_target_specifier676 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _set_in_global_attribute_target0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attribute_sections_in_attributes698 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attribute_section_in_attribute_sections707 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL});
		public static readonly BitSet _97_in_attribute_section717 = new BitSet(new ulong[]{0x0000800040000000UL,0x00003FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _attribute_target_specifier_in_attribute_section721 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _attribute_list_in_attribute_section726 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000C00000000UL});
		public static readonly BitSet _98_in_attribute_section730 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000800000000UL});
		public static readonly BitSet _99_in_attribute_section735 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attribute_target_in_attribute_target_specifier744 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001000000000UL});
		public static readonly BitSet _100_in_attribute_target_specifier748 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _set_in_attribute_target0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attribute_in_attribute_list794 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_attribute_list797 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _attribute_in_attribute_list803 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _type_name_in_attribute817 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000400000000000UL});
		public static readonly BitSet _attribute_arguments_in_attribute821 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _110_in_attribute_arguments831 = new BitSet(new ulong[]{0x002084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _positional_argument_list_in_attribute_arguments835 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_attribute_arguments839 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _110_in_attribute_arguments845 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _positional_argument_list_in_attribute_arguments849 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_attribute_arguments853 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _named_argument_list_in_attribute_arguments857 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_attribute_arguments861 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _110_in_attribute_arguments867 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _named_argument_list_in_attribute_arguments871 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_attribute_arguments875 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _positional_argument_in_positional_argument_list888 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_positional_argument_list891 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _positional_argument_in_positional_argument_list897 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _attribute_argument_expression_in_positional_argument910 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _named_argument_in_named_argument_list923 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_named_argument_list926 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _named_argument_in_named_argument_list932 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _identifier_in_named_argument945 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000100000000UL});
		public static readonly BitSet _96_in_named_argument949 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _attribute_argument_expression_in_named_argument953 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _expression_in_attribute_argument_expression962 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_name_in_type976 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
		public static readonly BitSet _predefined_type_in_type984 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
		public static readonly BitSet _rank_specifiers_in_type989 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
		public static readonly BitSet _111_in_type993 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
		public static readonly BitSet _type_name_in_type999 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
		public static readonly BitSet _111_in_type1001 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
		public static readonly BitSet _type_name_in_type1007 = new BitSet(new ulong[]{0x0000000000000000UL,0x0001000000000000UL});
		public static readonly BitSet _112_in_type1009 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_name_in_type1014 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _predefined_type_in_type1019 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
		public static readonly BitSet _111_in_type1021 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
		public static readonly BitSet _predefined_type_in_type1027 = new BitSet(new ulong[]{0x0000000000000000UL,0x0001000000000000UL});
		public static readonly BitSet _112_in_type1029 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _predefined_type_in_type1034 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _113_in_type1039 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
		public static readonly BitSet _111_in_type1043 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
		public static readonly BitSet _type_name_in_non_nullable_type1053 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
		public static readonly BitSet _predefined_type_in_non_nullable_type1061 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
		public static readonly BitSet _rank_specifiers_in_non_nullable_type1066 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
		public static readonly BitSet _111_in_non_nullable_type1070 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
		public static readonly BitSet _type_name_in_non_nullable_type1076 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
		public static readonly BitSet _111_in_non_nullable_type1078 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
		public static readonly BitSet _type_name_in_non_nullable_type1084 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _predefined_type_in_non_nullable_type1089 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
		public static readonly BitSet _111_in_non_nullable_type1091 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
		public static readonly BitSet _predefined_type_in_non_nullable_type1097 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _113_in_non_nullable_type1102 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
		public static readonly BitSet _111_in_non_nullable_type1106 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
		public static readonly BitSet _type_in_type_list1115 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_type_list1118 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_in_type_list1120 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _type_in_class_type1130 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_in_non_array_type1137 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_in_array_type1144 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _set_in_integral_type0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_in_unmanaged_type1192 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_in_pointer_type1199 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _rank_specifier_in_rank_specifiers1207 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL});
		public static readonly BitSet _97_in_rank_specifier1225 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000C00000000UL});
		public static readonly BitSet _dim_separators_in_rank_specifier1229 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000800000000UL});
		public static readonly BitSet _99_in_rank_specifier1234 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _98_in_dim_separators1244 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _123_in_generic_argument_list1254 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_arguments_in_generic_argument_list1258 = new BitSet(new ulong[]{0x0000080000000000UL});
		public static readonly BitSet _GT_in_generic_argument_list1262 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_argument_in_type_arguments1275 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_type_arguments1278 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_argument_in_type_arguments1284 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _type_in_type_argument1298 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _identifier_in_type_variable_name1307 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _non_assignment_expression_in_expression1319 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _assignment_in_expression1324 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _cast_expression_in_unary_expression1332 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _124_in_unary_expression1341 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _unary_expression_in_unary_expression1345 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _MINUS_in_unary_expression1351 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _unary_expression_in_unary_expression1355 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _125_in_unary_expression1361 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _unary_expression_in_unary_expression1365 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _126_in_unary_expression1371 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _unary_expression_in_unary_expression1375 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _111_in_unary_expression1381 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _unary_expression_in_unary_expression1385 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _pre_increment_expression_in_unary_expression1390 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _pre_decrement_expression_in_unary_expression1396 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _primary_or_array_creation_expression_in_unary_expression1402 = new BitSet(new ulong[]{0x0000000000000002UL,0x8000000000000000UL,0x0000000000000001UL});
		public static readonly BitSet _127_in_unary_expression1406 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000001UL});
		public static readonly BitSet _128_in_unary_expression1411 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _pointer_indirection_expression_in_unary_expression1417 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _addressof_expression_in_unary_expression1422 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _127_in_pre_increment_expression1431 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _unary_expression_in_pre_increment_expression1435 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _128_in_pre_decrement_expression1444 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _unary_expression_in_pre_decrement_expression1448 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _111_in_pointer_indirection_expression1456 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _unary_expression_in_pointer_indirection_expression1460 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _129_in_addressof_expression1468 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _unary_expression_in_addressof_expression1472 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _conditional_expression_in_non_assignment_expression1480 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _lambda_expression_in_non_assignment_expression1485 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _query_expression_in_non_assignment_expression1490 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _unary_expression_in_assignment1497 = new BitSet(new ulong[]{0x0000080000000000UL,0x0000000100000000UL,0x000001FF00000000UL});
		public static readonly BitSet _assignment_operator_in_assignment1501 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_assignment1505 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _expression_in_variable_reference1515 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _argument_in_argument_list1530 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_argument_list1533 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFFFUL,0x0000000600010680UL});
		public static readonly BitSet _argument_in_argument_list1539 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _argument_name_in_argument1549 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFFFUL,0x0000000600010680UL});
		public static readonly BitSet _argument_value_in_argument1553 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _argument_value_in_argument1558 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _identifier_in_argument_name1565 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001000000000UL});
		public static readonly BitSet _100_in_argument_name1569 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _expression_in_argument_value1577 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _ref_variable_reference_in_argument_value1583 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _130_in_argument_value1589 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _variable_reference_in_argument_value1593 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _131_in_ref_variable_reference1601 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_ref_variable_reference1603 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _namespace_or_type_name_in_ref_variable_reference1613 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000800200000000UL});
		public static readonly BitSet _predefined_type_in_ref_variable_reference1621 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000800200000000UL});
		public static readonly BitSet _111_in_ref_variable_reference1627 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000800200000000UL});
		public static readonly BitSet _rank_specifiers_in_ref_variable_reference1632 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _113_in_ref_variable_reference1639 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
		public static readonly BitSet _111_in_ref_variable_reference1643 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000800200000000UL});
		public static readonly BitSet _rank_specifiers_in_ref_variable_reference1648 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_ref_variable_reference1657 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000008UL});
		public static readonly BitSet _ref_variable_reference_in_ref_variable_reference1661 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _131_in_ref_variable_reference1666 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _variable_reference_in_ref_variable_reference1668 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _primary_expression_in_primary_or_array_creation_expression1678 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _array_creation_expression_in_primary_or_array_creation_expression1684 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _tmember_in_texpr1693 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _tmember_in_tinvocation1705 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000400000000000UL});
		public static readonly BitSet _tinvocation_part_in_tinvocation1709 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _arguments_in_tinvocation_part1718 = new BitSet(new ulong[]{0x0000030000000000UL,0x0000400000000000UL});
		public static readonly BitSet _access_operator_in_tinvocation_part1724 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _tinvocation_in_tinvocation_part1729 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _arguments_in_tinvocation_part1735 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400200000000UL});
		public static readonly BitSet _telement_part_in_tinvocation_part1740 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _arguments_in_tinvocation_part1745 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000400000000000UL});
		public static readonly BitSet _tmember_in_telement1775 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL});
		public static readonly BitSet _telement_part_in_telement1779 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _bracket_expression_in_telement_part1788 = new BitSet(new ulong[]{0x0000030000000000UL,0x0000000200000000UL});
		public static readonly BitSet _access_operator_in_telement_part1794 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _telement_in_telement_part1798 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _bracket_expression_in_telement_part1804 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400200000000UL});
		public static readonly BitSet _tinvocation_part_in_telement_part1809 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _bracket_expression_in_telement_part1814 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL});
		public static readonly BitSet _identifier_in_tmember1824 = new BitSet(new ulong[]{0x0000030000000002UL});
		public static readonly BitSet _access_operator_in_tmember1829 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_tmember1833 = new BitSet(new ulong[]{0x0000030000000002UL});
		public static readonly BitSet _primary_expression_start_in_primary_expression1845 = new BitSet(new ulong[]{0x0000030000000002UL,0x0000400200000000UL});
		public static readonly BitSet _primary_expression_part_in_primary_expression1849 = new BitSet(new ulong[]{0x0000030000000002UL,0x0000400200000000UL});
		public static readonly BitSet _delegate_creation_expression_in_primary_expression1855 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _anonymous_object_creation_expression_in_primary_expression1864 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _sizeof_expression_in_primary_expression1870 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _checked_expression_in_primary_expression1881 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _unchecked_expression_in_primary_expression1900 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _default_value_expression_in_primary_expression1917 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _anonymous_method_expression_in_primary_expression1930 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _predefined_type_in_primary_expression_start1943 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000000000000UL});
		public static readonly BitSet _identifier_in_primary_expression_start1947 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000000000000UL});
		public static readonly BitSet _literal_in_primary_expression_start1951 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000000000000UL});
		public static readonly BitSet _generic_argument_list_in_primary_expression_start1956 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _90_in_primary_expression_start1962 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL});
		public static readonly BitSet _bracket_expression_in_primary_expression_start1967 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _91_in_primary_expression_start1973 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL});
		public static readonly BitSet _bracket_expression_in_primary_expression_start1978 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _identifier_in_primary_expression_start1984 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000002000000UL});
		public static readonly BitSet _89_in_primary_expression_start1988 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_primary_expression_start1992 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _paren_expression_in_primary_expression_start1997 = new BitSet(new ulong[]{0x0000030000000002UL,0x0000400200000000UL});
		public static readonly BitSet _brackets_or_arguments_in_primary_expression_start2001 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _object_creation_expression_in_primary_expression_start2007 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _typeof_expression_in_primary_expression_start2013 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _access_identifier_in_primary_expression_part2037 = new BitSet(new ulong[]{0x0000030000000002UL,0x0000400200000000UL});
		public static readonly BitSet _brackets_or_arguments_in_primary_expression_part2041 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _brackets_or_arguments_in_primary_expression_part2047 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _access_identifier_in_element_part2056 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
		public static readonly BitSet _bracket_expression_in_element_part2060 = new BitSet(new ulong[]{0x0000030000000002UL,0x0000400200000000UL});
		public static readonly BitSet _primary_expression_part_in_element_part2065 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _bracket_expression_in_element_part2072 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _access_identifier_in_invocation_part2080 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _arguments_in_invocation_part2084 = new BitSet(new ulong[]{0x000080FFC0000002UL,0x07FC6FE08C000000UL,0x0FFF8000000017F0UL,0x0000000600010680UL});
		public static readonly BitSet _primary_expression_start_in_invocation_part2088 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _arguments_in_invocation_part2095 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _access_identifier_in_member_part2104 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _access_operator_in_access_identifier2112 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_access_identifier2116 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000000000000UL});
		public static readonly BitSet _generic_argument_list_in_access_identifier2120 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _110_in_paren_expression2130 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_paren_expression2134 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_paren_expression2138 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _bracket_expression_in_brackets_or_arguments2146 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000400200000000UL});
		public static readonly BitSet _arguments_in_brackets_or_arguments2151 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _arguments_in_brackets_or_arguments2157 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL});
		public static readonly BitSet _bracket_expression_in_brackets_or_arguments2161 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL});
		public static readonly BitSet _set_in_access_operator0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _110_in_arguments2185 = new BitSet(new ulong[]{0x002084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFFFUL,0x0000000600010680UL});
		public static readonly BitSet _argument_list_in_arguments2189 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_arguments2194 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _97_in_bracket_expression2202 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE88C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_list_in_bracket_expression2206 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000800000000UL});
		public static readonly BitSet _99_in_bracket_expression2211 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _identifier_in_member_access2220 = new BitSet(new ulong[]{0x0000010000000002UL});
		public static readonly BitSet _DOT_in_member_access2225 = new BitSet(new ulong[]{0x000080FFC0000000UL,0x07FC6FE08C000000UL,0x0FFF80000001FFF0UL,0x0000000600010680UL});
		public static readonly BitSet _primary_or_array_creation_expression_in_member_access2229 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _set_in_predefined_type0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _access_in_invocation_expression2353 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _arguments_in_invocation_expression2355 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _110_in_access2362 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_access2364 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_access2366 = new BitSet(new ulong[]{0x000083FFC0000000UL,0x07FC6FE28C000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _access_in_access2371 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _access_part_in_access2383 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _qid_start_in_access2391 = new BitSet(new ulong[]{0x000083FFC0000002UL,0x07FC6FE28C000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _access_part_in_access2395 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _qid_part_in_access_part2405 = new BitSet(new ulong[]{0x000083FFC0000002UL,0x07FC6FE28C000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _access_part_in_access_part2407 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _bracket_expression_in_access_part2417 = new BitSet(new ulong[]{0x000083FFC0000002UL,0x07FC6FE28C000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _access_part_in_access_part2419 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _arguments_in_access_part2429 = new BitSet(new ulong[]{0x000083FFC0000000UL,0x07FC6FE28C000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _access_part_in_access_part2431 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _expression_in_expression_list2455 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_expression_list2459 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_expression_list2465 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _138_in_object_creation_expression2478 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_in_object_creation_expression2482 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400010000000UL});
		public static readonly BitSet _110_in_object_creation_expression2491 = new BitSet(new ulong[]{0x002084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFFFUL,0x0000000600010680UL});
		public static readonly BitSet _argument_list_in_object_creation_expression2495 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_object_creation_expression2500 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000400010000000UL});
		public static readonly BitSet _object_or_collection_initializer_in_object_creation_expression2504 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _object_or_collection_initializer_in_object_creation_expression2515 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _object_initializer_in_object_or_collection_initializer2527 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _collection_initializer_in_object_or_collection_initializer2533 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _92_in_object_initializer2548 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE0A0000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _member_initializer_list_in_object_initializer2552 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
		public static readonly BitSet _93_in_object_initializer2557 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _92_in_object_initializer2563 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _member_initializer_list_in_object_initializer2567 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_object_initializer2571 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
		public static readonly BitSet _93_in_object_initializer2575 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _member_initializer_in_member_initializer_list2588 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_member_initializer_list2592 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _member_initializer_in_member_initializer_list2598 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _identifier_in_member_initializer2611 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000100000000UL});
		public static readonly BitSet _96_in_member_initializer2615 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE09C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _initializer_value_in_member_initializer2619 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _expression_in_initializer_value2628 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _object_or_collection_initializer_in_initializer_value2634 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _92_in_collection_initializer2643 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE09C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _element_initializer_list_in_collection_initializer2647 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000420000000UL});
		public static readonly BitSet _98_in_collection_initializer2651 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
		public static readonly BitSet _93_in_collection_initializer2656 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _element_initializer_in_element_initializer_list2669 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_element_initializer_list2673 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE09C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _element_initializer_in_element_initializer_list2679 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _non_assignment_expression_in_element_initializer2692 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _92_in_element_initializer2698 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_list_in_element_initializer2702 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
		public static readonly BitSet _93_in_element_initializer2706 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _138_in_array_creation_expression2715 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE280000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _non_array_type_in_array_creation_expression2720 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
		public static readonly BitSet _97_in_array_creation_expression2722 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_list_in_array_creation_expression2726 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000800000000UL});
		public static readonly BitSet _99_in_array_creation_expression2730 = new BitSet(new ulong[]{0x0000030000000002UL,0x0000000210000000UL});
		public static readonly BitSet _rank_specifiers_in_array_creation_expression2734 = new BitSet(new ulong[]{0x0000030000000002UL,0x0000000010000000UL});
		public static readonly BitSet _array_initializer_in_array_creation_expression2739 = new BitSet(new ulong[]{0x0000030000000002UL});
		public static readonly BitSet _access_operator_in_array_creation_expression2745 = new BitSet(new ulong[]{0x000080FFC0000000UL,0x07FC6FE08C000000UL,0x0FFF80000001FFF0UL,0x0000000600010680UL});
		public static readonly BitSet _primary_expression_in_array_creation_expression2749 = new BitSet(new ulong[]{0x0000030000000002UL});
		public static readonly BitSet _array_type_in_array_creation_expression2757 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000010000000UL});
		public static readonly BitSet _array_initializer_in_array_creation_expression2761 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _rank_specifier_in_array_creation_expression2766 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000010000000UL});
		public static readonly BitSet _array_initializer_in_array_creation_expression2770 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _138_in_delegate_creation_expression2780 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _type_name_in_delegate_creation_expression2784 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_delegate_creation_expression2788 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_delegate_creation_expression2792 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_delegate_creation_expression2796 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _138_in_anonymous_object_creation_expression2805 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000010000000UL});
		public static readonly BitSet _anonymous_object_initializer_in_anonymous_object_creation_expression2809 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _92_in_anonymous_object_initializer2818 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE0A0000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _member_declarator_list_in_anonymous_object_initializer2822 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
		public static readonly BitSet _93_in_anonymous_object_initializer2827 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _92_in_anonymous_object_initializer2833 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _member_declarator_list_in_anonymous_object_initializer2837 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_anonymous_object_initializer2841 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
		public static readonly BitSet _93_in_anonymous_object_initializer2845 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _member_declarator_in_member_declarator_list2857 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_member_declarator_list2861 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _member_declarator_in_member_declarator_list2867 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _identifier_in_member_declarator2880 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000000000000UL});
		public static readonly BitSet _generic_argument_list_in_member_declarator2884 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _member_access_in_member_declarator2892 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _identifier_in_member_declarator2898 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000100000000UL});
		public static readonly BitSet _96_in_member_declarator2902 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_member_declarator2906 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _139_in_sizeof_expression2914 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_sizeof_expression2918 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _unmanaged_type_in_sizeof_expression2922 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_sizeof_expression2926 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _140_in_typeof_expression2934 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_typeof_expression2938 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_in_typeof_expression2942 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_typeof_expression2946 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _140_in_typeof_expression2952 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_typeof_expression2954 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _unbound_type_name_in_typeof_expression2958 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_typeof_expression2962 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _140_in_typeof_expression2968 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_typeof_expression2970 = new BitSet(new ulong[]{0x0000000000000000UL,0x0002000000000000UL});
		public static readonly BitSet _113_in_typeof_expression2972 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_typeof_expression2974 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _unbound_type_name_start_in_unbound_type_name2988 = new BitSet(new ulong[]{0x0000010000000002UL});
		public static readonly BitSet _unbound_type_name_part_in_unbound_type_name2990 = new BitSet(new ulong[]{0x0000010000000002UL});
		public static readonly BitSet _identifier_in_unbound_type_name_start2999 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000002000000UL});
		public static readonly BitSet _89_in_unbound_type_name_start3002 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_unbound_type_name_start3004 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000000000000UL});
		public static readonly BitSet _generic_dimension_specifier_in_unbound_type_name_start3008 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _DOT_in_unbound_type_name_part3016 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_unbound_type_name_part3020 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000000000000UL});
		public static readonly BitSet _generic_dimension_specifier_in_unbound_type_name_part3024 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _123_in_generic_dimension_specifier3034 = new BitSet(new ulong[]{0x0000080000000000UL,0x0000000400000000UL});
		public static readonly BitSet _commas_in_generic_dimension_specifier3038 = new BitSet(new ulong[]{0x0000080000000000UL});
		public static readonly BitSet _GT_in_generic_dimension_specifier3043 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _98_in_commas3052 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _141_in_checked_expression3063 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_checked_expression3067 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_checked_expression3071 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_checked_expression3075 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _142_in_unchecked_expression3084 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_unchecked_expression3088 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_unchecked_expression3092 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_unchecked_expression3096 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _143_in_default_value_expression3105 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_default_value_expression3109 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_in_default_value_expression3113 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_default_value_expression3117 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _expression_in_constant_expression3125 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _expression_in_boolean_expression3132 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _144_in_anonymous_method_expression3139 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
		public static readonly BitSet _explicit_anonymous_function_signature_in_anonymous_method_expression3143 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
		public static readonly BitSet _block_in_anonymous_method_expression3148 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _110_in_explicit_anonymous_function_signature3155 = new BitSet(new ulong[]{0x0020800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003FCUL,0x0000000600010680UL});
		public static readonly BitSet _explicit_anonymous_function_parameter_list_in_explicit_anonymous_function_signature3159 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_explicit_anonymous_function_signature3164 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list3176 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_explicit_anonymous_function_parameter_list3181 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003FCUL,0x0000000600010680UL});
		public static readonly BitSet _explicit_anonymous_function_parameter_in_explicit_anonymous_function_parameter_list3189 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _anonymous_function_parameter_modifier_in_explicit_anonymous_function_parameter3200 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_in_explicit_anonymous_function_parameter3205 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_explicit_anonymous_function_parameter3209 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _set_in_anonymous_function_parameter_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _123_in_variant_generic_parameter_list3228 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
		public static readonly BitSet _variant_type_parameters_in_variant_generic_parameter_list3232 = new BitSet(new ulong[]{0x0000080000000000UL});
		public static readonly BitSet _GT_in_variant_generic_parameter_list3236 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _variant_type_variable_name_in_variant_type_parameters3248 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_variant_type_parameters3251 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
		public static readonly BitSet _variant_type_variable_name_in_variant_type_parameters3257 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _attributes_in_variant_type_variable_name3269 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
		public static readonly BitSet _variance_annotation_in_variant_type_variable_name3274 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
		public static readonly BitSet _type_variable_name_in_variant_type_variable_name3279 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _set_in_variance_annotation0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _123_in_generic_parameter_list3301 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
		public static readonly BitSet _type_parameters_in_generic_parameter_list3305 = new BitSet(new ulong[]{0x0000080000000000UL});
		public static readonly BitSet _GT_in_generic_parameter_list3309 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributed_type_variable_name_in_type_parameters3321 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_type_parameters3324 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
		public static readonly BitSet _attributed_type_variable_name_in_type_parameters3330 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _attributes_in_attributed_type_variable_name3342 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
		public static readonly BitSet _type_variable_name_in_attributed_type_variable_name3347 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _110_in_cast_expression3355 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _namespace_or_type_name_in_cast_expression3368 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
		public static readonly BitSet _predefined_type_in_cast_expression3373 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
		public static readonly BitSet _111_in_cast_expression3379 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000800200000000UL});
		public static readonly BitSet _rank_specifiers_in_cast_expression3384 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _namespace_or_type_name_in_cast_expression3394 = new BitSet(new ulong[]{0x0000000000000000UL,0x0001000000000000UL});
		public static readonly BitSet _predefined_type_in_cast_expression3399 = new BitSet(new ulong[]{0x0000000000000000UL,0x0001000000000000UL});
		public static readonly BitSet _112_in_cast_expression3405 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000000200000000UL});
		public static readonly BitSet _rank_specifiers_in_cast_expression3409 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _namespace_or_type_name_in_cast_expression3419 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000000200000000UL});
		public static readonly BitSet _predefined_type_in_cast_expression3424 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000000200000000UL});
		public static readonly BitSet _rank_specifiers_in_cast_expression3430 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _113_in_cast_expression3437 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000800200000000UL});
		public static readonly BitSet _111_in_cast_expression3441 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000800200000000UL});
		public static readonly BitSet _rank_specifiers_in_cast_expression3446 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_cast_expression3459 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE28C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _bracket_expression_in_cast_expression3463 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE28C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _unary_expression_in_cast_expression3466 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _unary_expression_in_multiplicative_expression3476 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL,0x00000000000C0000UL});
		public static readonly BitSet _set_in_multiplicative_expression3481 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _unary_expression_in_multiplicative_expression3491 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL,0x00000000000C0000UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression3501 = new BitSet(new ulong[]{0x0000040000000002UL,0x1000000000000000UL});
		public static readonly BitSet _set_in_additive_expression3504 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _multiplicative_expression_in_additive_expression3512 = new BitSet(new ulong[]{0x0000040000000002UL,0x1000000000000000UL});
		public static readonly BitSet _additive_expression_in_shift_expression3523 = new BitSet(new ulong[]{0x0000080000000002UL,0x0000000000000000UL,0x0000000000100000UL});
		public static readonly BitSet _148_in_shift_expression3527 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _GT_in_shift_expression3529 = new BitSet(new ulong[]{0x0000080000000000UL});
		public static readonly BitSet _GT_in_shift_expression3531 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _additive_expression_in_shift_expression3534 = new BitSet(new ulong[]{0x0000080000000002UL,0x0000000000000000UL,0x0000000000100000UL});
		public static readonly BitSet _shift_expression_in_relational_expression3544 = new BitSet(new ulong[]{0x0000080000000002UL,0x0800000000000000UL,0x0000000001E00000UL});
		public static readonly BitSet _set_in_relational_expression3556 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _shift_expression_in_relational_expression3568 = new BitSet(new ulong[]{0x0000080000000002UL,0x0800000000000000UL,0x0000000000600000UL});
		public static readonly BitSet _set_in_relational_expression3578 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _non_nullable_type_in_relational_expression3586 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000001800000UL});
		public static readonly BitSet _relational_expression_in_equality_expression3601 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000006000000UL});
		public static readonly BitSet _set_in_equality_expression3608 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _relational_expression_in_equality_expression3616 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000006000000UL});
		public static readonly BitSet _equality_expression_in_and_expression3626 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000002UL});
		public static readonly BitSet _129_in_and_expression3629 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _equality_expression_in_and_expression3633 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000002UL});
		public static readonly BitSet _and_expression_in_exclusive_or_expression3643 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000008000000UL});
		public static readonly BitSet _155_in_exclusive_or_expression3646 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _and_expression_in_exclusive_or_expression3650 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000008000000UL});
		public static readonly BitSet _exclusive_or_expression_in_inclusive_or_expression3660 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000010000000UL});
		public static readonly BitSet _156_in_inclusive_or_expression3665 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _exclusive_or_expression_in_inclusive_or_expression3669 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000010000000UL});
		public static readonly BitSet _inclusive_or_expression_in_conditional_and_expression3679 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000020000000UL});
		public static readonly BitSet _157_in_conditional_and_expression3684 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _inclusive_or_expression_in_conditional_and_expression3688 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000020000000UL});
		public static readonly BitSet _conditional_and_expression_in_conditional_or_expression3698 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000040000000UL});
		public static readonly BitSet _158_in_conditional_or_expression3702 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _conditional_and_expression_in_conditional_or_expression3706 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000040000000UL});
		public static readonly BitSet _conditional_or_expression_in_null_coalescing_expression3716 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000080000000UL});
		public static readonly BitSet _159_in_null_coalescing_expression3721 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _null_coalescing_expression_in_null_coalescing_expression3725 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000080000000UL});
		public static readonly BitSet _null_coalescing_expression_in_conditional_expression3734 = new BitSet(new ulong[]{0x0000000000000002UL,0x0001000000000000UL});
		public static readonly BitSet _112_in_conditional_expression3739 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_conditional_expression3743 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001000000000UL});
		public static readonly BitSet _100_in_conditional_expression3747 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_conditional_expression3751 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _92_in_array_initializer3763 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE4BC000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _variable_initializer_list_in_array_initializer3767 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000420000000UL});
		public static readonly BitSet _98_in_array_initializer3772 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
		public static readonly BitSet _93_in_array_initializer3777 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _variable_initializer_in_variable_initializer_list3785 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_variable_initializer_list3788 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE09C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _variable_initializer_in_variable_initializer_list3790 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _96_in_assignment_operator3801 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _160_in_assignment_operator3805 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _161_in_assignment_operator3809 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _162_in_assignment_operator3813 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _163_in_assignment_operator3817 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _164_in_assignment_operator3821 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _165_in_assignment_operator3825 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _166_in_assignment_operator3829 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _167_in_assignment_operator3833 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _168_in_assignment_operator3837 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _GT_in_assignment_operator3841 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000400000UL});
		public static readonly BitSet _150_in_assignment_operator3843 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _anonymous_function_signature_in_lambda_expression3851 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000020000000000UL});
		public static readonly BitSet _169_in_lambda_expression3855 = new BitSet(new ulong[]{0x001084FFC0000000UL,0xF7FCEFE09C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _anonymous_function_body_in_lambda_expression3859 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _explicit_anonymous_function_signature_in_anonymous_function_signature3866 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _implicit_anonymous_function_signature_in_anonymous_function_signature3872 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _110_in_implicit_anonymous_function_signature3879 = new BitSet(new ulong[]{0x0020800040000000UL,0x00006FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _implicit_anonymous_function_parameter_list_in_implicit_anonymous_function_signature3883 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_implicit_anonymous_function_signature3888 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _implicit_anonymous_function_parameter_list_in_implicit_anonymous_function_signature3893 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_implicit_anonymous_function_signature3898 = new BitSet(new ulong[]{0x0000800040000000UL,0x00006FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _implicit_anonymous_function_parameter_in_implicit_anonymous_function_signature3902 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _implicit_anonymous_function_parameter_in_implicit_anonymous_function_parameter_list3911 = new BitSet(new ulong[]{0x0000800040000002UL,0x00006FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_implicit_anonymous_function_parameter3920 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _expression_in_anonymous_function_body3927 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _block_in_anonymous_function_body3932 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_delegate_declaration3942 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x00007C0000010400UL});
		public static readonly BitSet _delegate_modifiers_in_delegate_declaration3947 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000010000UL});
		public static readonly BitSet _144_in_delegate_declaration3952 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _return_type_in_delegate_declaration3956 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_delegate_declaration3960 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800400000000000UL});
		public static readonly BitSet _variant_generic_parameter_list_in_delegate_declaration3963 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_delegate_declaration3971 = new BitSet(new ulong[]{0x0020800040000000UL,0x07FE2FE284000000UL,0x0FFF8000000003FCUL,0x0000000600010780UL});
		public static readonly BitSet _formal_parameter_list_in_delegate_declaration3975 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_delegate_declaration3980 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000000000000000UL,0x0800000000000000UL});
		public static readonly BitSet _type_parameter_constraints_clauses_in_delegate_declaration3984 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_delegate_declaration3989 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _delegate_modifier_in_delegate_modifiers3997 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x00007C0000000400UL});
		public static readonly BitSet _delegate_modifier_in_delegate_modifiers4000 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x00007C0000000400UL});
		public static readonly BitSet _set_in_delegate_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _from_clause_in_query_expression4038 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _query_body_in_query_expression4042 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _175_in_from_clause4050 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_in_from_clause4054 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_from_clause4059 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000020000UL});
		public static readonly BitSet _145_in_from_clause4063 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_from_clause4067 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _query_body_clauses_in_query_body4075 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _select_or_group_clause_in_query_body4080 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0001000000000000UL});
		public static readonly BitSet _query_continuation_in_query_body4084 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _176_in_query_continuation4092 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_query_continuation4096 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _query_body_in_query_continuation4100 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _query_body_clause_in_query_body_clauses4107 = new BitSet(new ulong[]{0x000084FFC0000002UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _from_clause_in_query_body_clause4116 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _let_clause_in_query_body_clause4121 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _where_clause_in_query_body_clause4126 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _join_clause_in_query_body_clause4131 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _orderby_clause_in_query_body_clause4136 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _177_in_join_clause4143 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_in_join_clause4147 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_join_clause4152 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000020000UL});
		public static readonly BitSet _145_in_join_clause4156 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_join_clause4160 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0004000000000000UL});
		public static readonly BitSet _178_in_join_clause4164 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_join_clause4168 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0008000000000000UL});
		public static readonly BitSet _179_in_join_clause4172 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_join_clause4176 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0001000000000000UL});
		public static readonly BitSet _176_in_join_clause4179 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_join_clause4181 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _180_in_let_clause4191 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_let_clause4195 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000100000000UL});
		public static readonly BitSet _96_in_let_clause4199 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_let_clause4203 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _181_in_orderby_clause4210 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _ordering_list_in_orderby_clause4214 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _ordering_in_ordering_list4222 = new BitSet(new ulong[]{0x000084FFC0000002UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_ordering4231 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x00C0000000000000UL});
		public static readonly BitSet _ordering_direction_in_ordering4236 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _set_in_ordering_direction0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _select_clause_in_select_or_group_clause4258 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _group_clause_in_select_or_group_clause4263 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _184_in_select_clause4271 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_select_clause4275 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _185_in_group_clause4283 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_group_clause4287 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0400000000000000UL});
		public static readonly BitSet _186_in_group_clause4291 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_group_clause4295 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _187_in_where_clause4303 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _boolean_expression_in_where_clause4307 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_class_declaration4319 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0xF0007C0000000400UL,0x0000000000000001UL});
		public static readonly BitSet _class_modifiers_in_class_declaration4322 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x3000000000000000UL});
		public static readonly BitSet _188_in_class_declaration4327 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x2000000000000000UL});
		public static readonly BitSet _189_in_class_declaration4331 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_class_declaration4334 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800001010000000UL,0x0800000000000000UL});
		public static readonly BitSet _generic_parameter_list_in_class_declaration4337 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800001010000000UL,0x0800000000000000UL});
		public static readonly BitSet _class_base_in_class_declaration4342 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800001010000000UL,0x0800000000000000UL});
		public static readonly BitSet _type_parameter_constraints_clauses_in_class_declaration4347 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800001010000000UL,0x0800000000000000UL});
		public static readonly BitSet _class_body_in_class_declaration4352 = new BitSet(new ulong[]{0x0010000000000002UL});
		public static readonly BitSet _SEMI_in_class_declaration4356 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _class_modifier_in_class_modifiers4364 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0xC0007C0000000400UL,0x0000000000000001UL});
		public static readonly BitSet _set_in_class_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _100_in_class_base4412 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _class_type_in_class_base4416 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_class_base4419 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _interface_type_list_in_class_base4421 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _100_in_class_base4428 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _interface_type_list_in_class_base4432 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_name_in_interface_type_list4444 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_interface_type_list4447 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _type_name_in_interface_type_list4455 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _type_parameter_constraints_clause_in_type_parameter_constraints_clauses4467 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0800000000000000UL});
		public static readonly BitSet _187_in_type_parameter_constraints_clause4476 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
		public static readonly BitSet _type_variable_name_in_type_parameter_constraints_clause4480 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001000000000UL});
		public static readonly BitSet _100_in_type_parameter_constraints_clause4484 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE280000000UL,0x2FFF8000000207F4UL,0x0000000600010682UL});
		public static readonly BitSet _type_parameter_constraint_list_in_type_parameter_constraints_clause4488 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _primary_constraint_in_type_parameter_constraint_list4497 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_type_parameter_constraint_list4503 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
		public static readonly BitSet _secondary_constraint_list_in_type_parameter_constraint_list4507 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_type_parameter_constraint_list4511 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE280000000UL,0x2FFF8000000207F4UL,0x0000000600010682UL});
		public static readonly BitSet _constructor_constraint_in_type_parameter_constraint_list4515 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _primary_constraint_in_type_parameter_constraint_list4522 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_type_parameter_constraint_list4528 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
		public static readonly BitSet _secondary_constraint_list_in_type_parameter_constraint_list4532 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _primary_constraint_in_type_parameter_constraint_list4539 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_type_parameter_constraint_list4545 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE280000000UL,0x2FFF8000000207F4UL,0x0000000600010682UL});
		public static readonly BitSet _constructor_constraint_in_type_parameter_constraint_list4549 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _secondary_constraint_list_in_type_parameter_constraint_list4556 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_type_parameter_constraint_list4561 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE280000000UL,0x2FFF8000000207F4UL,0x0000000600010682UL});
		public static readonly BitSet _constructor_constraint_in_type_parameter_constraint_list4565 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _primary_constraint_in_type_parameter_constraint_list4571 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _secondary_constraint_list_in_type_parameter_constraint_list4576 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _constructor_constraint_in_type_parameter_constraint_list4581 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _class_type_in_primary_constraint4590 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _189_in_primary_constraint4595 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _193_in_primary_constraint4600 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _secondary_constraint_in_secondary_constraint_list4612 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_secondary_constraint_list4615 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
		public static readonly BitSet _secondary_constraint_in_secondary_constraint_list4621 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _type_name_in_secondary_constraint4634 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_variable_name_in_secondary_constraint4638 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _138_in_constructor_constraint4647 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_constructor_constraint4651 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_constructor_constraint4655 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _92_in_class_body4663 = new BitSet(new ulong[]{0x0000A00040000000UL,0x47FE2FE2E1000000UL,0xFFFFFC00000107F0UL,0x00000006000146FFUL});
		public static readonly BitSet _class_member_declarations_in_class_body4667 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
		public static readonly BitSet _93_in_class_body4672 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _class_member_declaration_in_class_member_declarations4680 = new BitSet(new ulong[]{0x0000A00040000002UL,0x47FE2FE2C1000000UL,0xFFFFFC00000107F0UL,0x00000006000146FFUL});
		public static readonly BitSet _constant_declaration_in_class_member_declaration4689 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _field_declaration_in_class_member_declaration4694 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _method_declaration_in_class_member_declaration4699 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _property_declaration_in_class_member_declaration4704 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _event_declaration_in_class_member_declaration4709 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _indexer_declaration_in_class_member_declaration4714 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _operator_declaration_in_class_member_declaration4719 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _constructor_declaration_in_class_member_declaration4724 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _destructor_declaration_in_class_member_declaration4729 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _static_constructor_declaration_in_class_member_declaration4734 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_declaration_in_class_member_declaration4739 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _class_declaration_in_class_member_declaration4745 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_constant_declaration4753 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x00003C0000000400UL,0x0000000000000004UL});
		public static readonly BitSet _constant_modifiers_in_constant_declaration4758 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000004UL});
		public static readonly BitSet _194_in_constant_declaration4763 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_in_constant_declaration4767 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _constant_declarators_in_constant_declaration4771 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_constant_declaration4775 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _constant_modifier_in_constant_modifiers4783 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x00003C0000000400UL});
		public static readonly BitSet _set_in_constant_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_field_declaration4816 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFFFC00000007F0UL,0x0000000600010699UL});
		public static readonly BitSet _field_modifiers_in_field_declaration4821 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_in_field_declaration4826 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _variable_declarators_in_field_declaration4830 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_field_declaration4834 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _field_modifier_in_field_modifiers4843 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x00007C0000000400UL,0x0000000000000019UL});
		public static readonly BitSet _set_in_field_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _variable_declarator_in_variable_declarators4892 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_variable_declarators4895 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _variable_declarator_in_variable_declarators4897 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _type_name_in_variable_declarator4908 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000100000000UL});
		public static readonly BitSet _96_in_variable_declarator4911 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE09C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _variable_initializer_in_variable_declarator4915 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _expression_in_variable_initializer4927 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _array_initializer_in_variable_initializer4931 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _method_declaration_in_method_declarations4940 = new BitSet(new ulong[]{0x0000800040000002UL,0x07FE2FE2C0000000UL,0xDFFFFC00000007F0UL,0x00000006000106E1UL});
		public static readonly BitSet _method_header_in_method_declaration4950 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
		public static readonly BitSet _method_body_in_method_declaration4954 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_method_header4964 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE0C0000000UL,0xDFFFFC00000007F0UL,0x00000006000106E1UL});
		public static readonly BitSet _method_modifiers_in_method_header4969 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x1FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _188_in_method_header4974 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _return_type_in_method_header4979 = new BitSet(new ulong[]{0x000080FFC0000000UL,0x07FC6FE08C000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _member_name_in_method_header4983 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800400000000000UL});
		public static readonly BitSet _generic_parameter_list_in_method_header4987 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_method_header4993 = new BitSet(new ulong[]{0x0020800040000000UL,0x07FE2FE284000000UL,0x0FFF8000000003FCUL,0x0000000600010780UL});
		public static readonly BitSet _formal_parameter_list_in_method_header4997 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_method_header5002 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0800000000000000UL});
		public static readonly BitSet _type_parameter_constraints_clauses_in_method_header5006 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _method_modifier_in_method_modifiers5015 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000040000000UL,0xC0007C0000000400UL,0x0000000000000061UL});
		public static readonly BitSet _set_in_method_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_in_return_type5077 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _113_in_return_type5082 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
		public static readonly BitSet _111_in_return_type5084 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
		public static readonly BitSet _block_in_method_body5092 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _formal_parameter_in_formal_parameter_list5104 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_formal_parameter_list5107 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE284000000UL,0x0FFF8000000003FCUL,0x0000000600010780UL});
		public static readonly BitSet _formal_parameter_in_formal_parameter_list5113 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _fixed_parameter_in_formal_parameter5125 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _parameter_array_in_formal_parameter5129 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _199_in_formal_parameter5133 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _fixed_parameter_in_fixed_parameters5141 = new BitSet(new ulong[]{0x0000800040000002UL,0x07FE2FE284000000UL,0x0FFF8000000003FCUL,0x0000000600010680UL});
		public static readonly BitSet _attributes_in_fixed_parameter5151 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE084000000UL,0x0FFF8000000003FCUL,0x0000000600010680UL});
		public static readonly BitSet _parameter_modifier_in_fixed_parameter5156 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_in_fixed_parameter5161 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_fixed_parameter5165 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000100000000UL});
		public static readonly BitSet _default_argument_in_fixed_parameter5167 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _96_in_default_argument5176 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_default_argument5178 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _set_in_parameter_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_parameter_array5201 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010780UL});
		public static readonly BitSet _200_in_parameter_array5206 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _array_type_in_parameter_array5211 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_parameter_array5215 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_property_declaration5223 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE0C0000000UL,0xCFFFFC00000007F0UL,0x00000006000106E1UL});
		public static readonly BitSet _property_modifiers_in_property_declaration5228 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_in_property_declaration5233 = new BitSet(new ulong[]{0x000080FFC0000000UL,0x07FC6FE08C000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _member_name_in_property_declaration5237 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000010000000UL});
		public static readonly BitSet _92_in_property_declaration5241 = new BitSet(new ulong[]{0x0000C00000000000UL,0x0000000200000000UL,0x00003C0000000000UL});
		public static readonly BitSet _accessor_declarations_in_property_declaration5245 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
		public static readonly BitSet _93_in_property_declaration5249 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _property_modifier_in_property_modifiers5258 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000040000000UL,0xC0007C0000000400UL,0x0000000000000061UL});
		public static readonly BitSet _set_in_property_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _qid_in_member_name5321 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000000000000UL});
		public static readonly BitSet _generic_parameter_list_in_member_name5324 = new BitSet(new ulong[]{0x0000030000000000UL});
		public static readonly BitSet _qid_part_in_member_name5326 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _get_accessor_declaration_in_accessor_declarations5339 = new BitSet(new ulong[]{0x0000C00000000002UL,0x0000000200000000UL,0x00003C0000000000UL});
		public static readonly BitSet _set_accessor_declaration_in_accessor_declarations5343 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _set_accessor_declaration_in_accessor_declarations5351 = new BitSet(new ulong[]{0x0000400000000002UL,0x0000000200000000UL,0x00003C0000000000UL});
		public static readonly BitSet _get_accessor_declaration_in_accessor_declarations5355 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_get_accessor_declaration5365 = new BitSet(new ulong[]{0x0000400000000000UL,0x0000000000000000UL,0x00003C0000000000UL});
		public static readonly BitSet _accessor_modifier_in_get_accessor_declaration5370 = new BitSet(new ulong[]{0x0000400000000000UL});
		public static readonly BitSet _GET_in_get_accessor_declaration5375 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
		public static readonly BitSet _accessor_body_in_get_accessor_declaration5379 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_set_accessor_declaration5387 = new BitSet(new ulong[]{0x0000800000000000UL,0x0000000000000000UL,0x00003C0000000000UL});
		public static readonly BitSet _accessor_modifier_in_set_accessor_declaration5392 = new BitSet(new ulong[]{0x0000800000000000UL});
		public static readonly BitSet _SET_in_set_accessor_declaration5397 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
		public static readonly BitSet _accessor_body_in_set_accessor_declaration5401 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _170_in_accessor_modifier5410 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _171_in_accessor_modifier5414 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _172_in_accessor_modifier5418 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _173_in_accessor_modifier5422 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _171_in_accessor_modifier5427 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000100000000000UL});
		public static readonly BitSet _172_in_accessor_modifier5431 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _172_in_accessor_modifier5437 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000080000000000UL});
		public static readonly BitSet _171_in_accessor_modifier5441 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _block_in_accessor_body5451 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_event_declaration5463 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000010040000000UL,0xC0007C0000000400UL,0x0000000000000061UL});
		public static readonly BitSet _event_modifiers_in_event_declaration5468 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000010000000000UL});
		public static readonly BitSet _104_in_event_declaration5473 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_in_event_declaration5477 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _variable_declarators_in_event_declaration5481 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_event_declaration5485 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_event_declaration5493 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000010040000000UL,0xC0007C0000000400UL,0x0000000000000061UL});
		public static readonly BitSet _event_modifiers_in_event_declaration5498 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000010000000000UL});
		public static readonly BitSet _104_in_event_declaration5503 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_in_event_declaration5507 = new BitSet(new ulong[]{0x000080FFC0000000UL,0x07FC6FE08C000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _member_name_in_event_declaration5511 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000010000000UL});
		public static readonly BitSet _92_in_event_declaration5515 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL,0x0000000000000000UL,0x0000000000000600UL});
		public static readonly BitSet _event_accessor_declarations_in_event_declaration5519 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
		public static readonly BitSet _93_in_event_declaration5523 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _event_modifier_in_event_modifiers5532 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000040000000UL,0xC0007C0000000400UL,0x0000000000000061UL});
		public static readonly BitSet _set_in_event_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _add_accessor_declaration_in_event_accessor_declarations5596 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL,0x0000000000000000UL,0x0000000000000600UL});
		public static readonly BitSet _remove_accessor_declaration_in_event_accessor_declarations5600 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _remove_accessor_declaration_in_event_accessor_declarations5607 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL,0x0000000000000000UL,0x0000000000000200UL});
		public static readonly BitSet _add_accessor_declaration_in_event_accessor_declarations5611 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_add_accessor_declaration5620 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000200UL});
		public static readonly BitSet _201_in_add_accessor_declaration5625 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
		public static readonly BitSet _block_in_add_accessor_declaration5629 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_remove_accessor_declaration5637 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000400UL});
		public static readonly BitSet _202_in_remove_accessor_declaration5642 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
		public static readonly BitSet _block_in_remove_accessor_declaration5646 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_indexer_declaration5654 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE2C0000000UL,0xCFFFFC00000007F0UL,0x00000006000106E0UL});
		public static readonly BitSet _indexer_modifiers_in_indexer_declaration5659 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE2C0000000UL,0xCFFFFC00000007F0UL,0x00000006000106E0UL});
		public static readonly BitSet _indexer_declarator_in_indexer_declaration5664 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000010000000UL});
		public static readonly BitSet _92_in_indexer_declaration5668 = new BitSet(new ulong[]{0x0000C00000000000UL,0x0000000200000000UL,0x00003C0000000000UL});
		public static readonly BitSet _accessor_declarations_in_indexer_declaration5672 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
		public static readonly BitSet _93_in_indexer_declaration5676 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _indexer_modifier_in_indexer_modifiers5684 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000040000000UL,0xC0007C0000000400UL,0x0000000000000060UL});
		public static readonly BitSet _set_in_indexer_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_in_indexer_declarator5741 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE084000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _type_name_in_indexer_declarator5746 = new BitSet(new ulong[]{0x0000010000000000UL});
		public static readonly BitSet _DOT_in_indexer_declarator5748 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000004000000UL});
		public static readonly BitSet _90_in_indexer_declarator5752 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
		public static readonly BitSet _97_in_indexer_declarator5756 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE284000000UL,0x0FFF8000000003FCUL,0x0000000600010780UL});
		public static readonly BitSet _formal_parameter_list_in_indexer_declarator5760 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000800000000UL});
		public static readonly BitSet _99_in_indexer_declarator5764 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_operator_declaration5772 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000240000000UL,0x0000440000000000UL,0x0000000000000001UL});
		public static readonly BitSet _operator_modifiers_in_operator_declaration5777 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600013680UL});
		public static readonly BitSet _operator_declarator_in_operator_declaration5781 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
		public static readonly BitSet _operator_body_in_operator_declaration5785 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _operator_modifier_in_operator_modifiers5793 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000240000000UL,0x0000440000000000UL,0x0000000000000001UL});
		public static readonly BitSet _set_in_operator_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _unary_operator_declarator_in_operator_declarator5822 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _binary_operator_declarator_in_operator_declarator5827 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _conversion_operator_declarator_in_operator_declarator5832 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_in_unary_operator_declarator5839 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000800UL});
		public static readonly BitSet _203_in_unary_operator_declarator5843 = new BitSet(new ulong[]{0x0000046000000000UL,0xF000000000000000UL,0x0000000000000001UL});
		public static readonly BitSet _overloadable_unary_operator_in_unary_operator_declarator5847 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_unary_operator_declarator5851 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_in_unary_operator_declarator5855 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_unary_operator_declarator5859 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_unary_operator_declarator5863 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _set_in_overloadable_unary_operator0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_in_binary_operator_declarator5914 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000800UL});
		public static readonly BitSet _203_in_binary_operator_declarator5918 = new BitSet(new ulong[]{0x00000C0000000000UL,0x1800800000000000UL,0x000000001E7C0002UL});
		public static readonly BitSet _overloadable_binary_operator_in_binary_operator_declarator5922 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_binary_operator_declarator5926 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_in_binary_operator_declarator5930 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_binary_operator_declarator5934 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_binary_operator_declarator5938 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_in_binary_operator_declarator5942 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_binary_operator_declarator5946 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_binary_operator_declarator5950 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _124_in_overloadable_binary_operator5959 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _MINUS_in_overloadable_binary_operator5963 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _111_in_overloadable_binary_operator5967 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _146_in_overloadable_binary_operator5971 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _147_in_overloadable_binary_operator5975 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _129_in_overloadable_binary_operator5979 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _156_in_overloadable_binary_operator5983 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _155_in_overloadable_binary_operator5987 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _148_in_overloadable_binary_operator5991 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _GT_in_overloadable_binary_operator5995 = new BitSet(new ulong[]{0x0000080000000000UL});
		public static readonly BitSet _GT_in_overloadable_binary_operator5997 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _153_in_overloadable_binary_operator6001 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _154_in_overloadable_binary_operator6005 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _GT_in_overloadable_binary_operator6009 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _123_in_overloadable_binary_operator6013 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _150_in_overloadable_binary_operator6017 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _149_in_overloadable_binary_operator6021 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _set_in_conversion_operator_declarator6030 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000800UL});
		public static readonly BitSet _203_in_conversion_operator_declarator6039 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_in_conversion_operator_declarator6043 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_conversion_operator_declarator6047 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_in_conversion_operator_declarator6051 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_conversion_operator_declarator6055 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_conversion_operator_declarator6059 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _block_in_operator_body6067 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_constructor_declaration6075 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE2C0000000UL,0x0FFFFC0000000000UL,0x0000000600010680UL});
		public static readonly BitSet _constructor_modifiers_in_constructor_declaration6080 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE2C0000000UL,0x0FFFFC0000000000UL,0x0000000600010680UL});
		public static readonly BitSet _constructor_declarator_in_constructor_declaration6085 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
		public static readonly BitSet _constructor_body_in_constructor_declaration6089 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _constructor_modifier_in_constructor_modifiers6097 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000040000000UL,0x00007C0000000000UL});
		public static readonly BitSet _set_in_constructor_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _identifier_in_constructor_declarator6135 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_constructor_declarator6139 = new BitSet(new ulong[]{0x0020800040000000UL,0x07FE2FE284000000UL,0x0FFF8000000003FCUL,0x0000000600010780UL});
		public static readonly BitSet _formal_parameter_list_in_constructor_declarator6143 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_constructor_declarator6148 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000001000000000UL});
		public static readonly BitSet _constructor_initializer_in_constructor_declarator6152 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _100_in_constructor_initializer6161 = new BitSet(new ulong[]{0x0000000000000000UL,0x000000000C000000UL});
		public static readonly BitSet _set_in_constructor_initializer6165 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_constructor_initializer6175 = new BitSet(new ulong[]{0x002084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFFFUL,0x0000000600010680UL});
		public static readonly BitSet _argument_list_in_constructor_initializer6179 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_constructor_initializer6184 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _block_in_constructor_body6192 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_static_constructor_declaration6200 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000240000000UL,0x0000400000000000UL,0x0000000000000001UL});
		public static readonly BitSet _static_constructor_modifiers_in_static_constructor_declaration6205 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_static_constructor_declaration6208 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_static_constructor_declaration6212 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_static_constructor_declaration6216 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
		public static readonly BitSet _static_constructor_body_in_static_constructor_declaration6219 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _94_in_static_constructor_modifiers6229 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _174_in_static_constructor_modifiers6231 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000001UL});
		public static readonly BitSet _192_in_static_constructor_modifiers6233 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _94_in_static_constructor_modifiers6238 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000001UL});
		public static readonly BitSet _192_in_static_constructor_modifiers6240 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _174_in_static_constructor_modifiers6242 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _174_in_static_constructor_modifiers6248 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000040000000UL});
		public static readonly BitSet _94_in_static_constructor_modifiers6250 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000001UL});
		public static readonly BitSet _192_in_static_constructor_modifiers6252 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _174_in_static_constructor_modifiers6257 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000001UL});
		public static readonly BitSet _192_in_static_constructor_modifiers6259 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000040000000UL});
		public static readonly BitSet _94_in_static_constructor_modifiers6261 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _192_in_static_constructor_modifiers6267 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000040000000UL});
		public static readonly BitSet _94_in_static_constructor_modifiers6269 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _174_in_static_constructor_modifiers6271 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _192_in_static_constructor_modifiers6277 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _174_in_static_constructor_modifiers6279 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000040000000UL});
		public static readonly BitSet _94_in_static_constructor_modifiers6281 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _94_in_static_constructor_modifiers6288 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _174_in_static_constructor_modifiers6293 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _192_in_static_constructor_modifiers6298 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _block_in_static_constructor_body6305 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_destructor_declaration6313 = new BitSet(new ulong[]{0x0000000000000000UL,0x4000000040000000UL,0x0000400000000000UL});
		public static readonly BitSet _destructor_modifiers_in_destructor_declaration6318 = new BitSet(new ulong[]{0x0000000000000000UL,0x4000000000000000UL});
		public static readonly BitSet _126_in_destructor_declaration6323 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_destructor_declaration6326 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_destructor_declaration6330 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_destructor_declaration6334 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
		public static readonly BitSet _destructor_body_in_destructor_declaration6339 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _94_in_destructor_modifiers6348 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _174_in_destructor_modifiers6351 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _94_in_destructor_modifiers6358 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _174_in_destructor_modifiers6360 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _block_in_destructor_body6370 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_struct_declaration6380 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x10007C0000000400UL,0x0000000000000002UL});
		public static readonly BitSet _struct_modifiers_in_struct_declaration6385 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x1000000000000000UL,0x0000000000000002UL});
		public static readonly BitSet _188_in_struct_declaration6390 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000000002UL});
		public static readonly BitSet _193_in_struct_declaration6395 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_struct_declaration6399 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800001010000000UL,0x0800000000000000UL});
		public static readonly BitSet _generic_parameter_list_in_struct_declaration6403 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800001010000000UL,0x0800000000000000UL});
		public static readonly BitSet _struct_interfaces_in_struct_declaration6409 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800001010000000UL,0x0800000000000000UL});
		public static readonly BitSet _type_parameter_constraints_clauses_in_struct_declaration6414 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800001010000000UL,0x0800000000000000UL});
		public static readonly BitSet _struct_body_in_struct_declaration6419 = new BitSet(new ulong[]{0x0010000000000002UL});
		public static readonly BitSet _SEMI_in_struct_declaration6423 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _struct_modifier_in_struct_modifiers6432 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x00007C0000000400UL});
		public static readonly BitSet _set_in_struct_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _100_in_struct_interfaces6469 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _interface_type_list_in_struct_interfaces6473 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _92_in_struct_body6480 = new BitSet(new ulong[]{0x0000A00040000000UL,0x07FE2FE2E1000000UL,0xFFFFFC00000107F0UL,0x00000006000146FFUL});
		public static readonly BitSet _struct_member_declarations_in_struct_body6484 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
		public static readonly BitSet _93_in_struct_body6489 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _struct_member_declaration_in_struct_member_declarations6496 = new BitSet(new ulong[]{0x0000A00040000002UL,0x07FE2FE2C1000000UL,0xFFFFFC00000107F0UL,0x00000006000146FFUL});
		public static readonly BitSet _constant_declaration_in_struct_member_declaration6505 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _field_declaration_in_struct_member_declaration6510 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _method_declaration_in_struct_member_declaration6515 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _property_declaration_in_struct_member_declaration6520 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _event_declaration_in_struct_member_declaration6525 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _indexer_declaration_in_struct_member_declaration6530 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _operator_declaration_in_struct_member_declaration6535 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _constructor_declaration_in_struct_member_declaration6540 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _static_constructor_declaration_in_struct_member_declaration6545 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_declaration_in_struct_member_declaration6550 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_interface_declaration6560 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x10007C0000000400UL,0x0000000000004000UL});
		public static readonly BitSet _interface_modifiers_in_interface_declaration6565 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x1000000000000000UL,0x0000000000004000UL});
		public static readonly BitSet _188_in_interface_declaration6570 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000004000UL});
		public static readonly BitSet _206_in_interface_declaration6575 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_interface_declaration6579 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800001010000000UL,0x0800000000000000UL});
		public static readonly BitSet _variant_generic_parameter_list_in_interface_declaration6583 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800001010000000UL,0x0800000000000000UL});
		public static readonly BitSet _interface_base_in_interface_declaration6592 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800001010000000UL,0x0800000000000000UL});
		public static readonly BitSet _type_parameter_constraints_clauses_in_interface_declaration6597 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800001010000000UL,0x0800000000000000UL});
		public static readonly BitSet _interface_body_in_interface_declaration6602 = new BitSet(new ulong[]{0x0010000000000002UL});
		public static readonly BitSet _SEMI_in_interface_declaration6606 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _interface_modifier_in_interface_modifiers6617 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x00007C0000000400UL});
		public static readonly BitSet _set_in_interface_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _100_in_interface_base6658 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _interface_type_list_in_interface_base6660 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _92_in_interface_body6668 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE2E0000000UL,0xCFFFFC00000007F0UL,0x00000006000106E1UL});
		public static readonly BitSet _interface_member_declarations_in_interface_body6672 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
		public static readonly BitSet _93_in_interface_body6677 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _interface_member_declaration_in_interface_member_declarations6685 = new BitSet(new ulong[]{0x0000800040000002UL,0x07FE2FE2C0000000UL,0xCFFFFC00000007F0UL,0x00000006000106E1UL});
		public static readonly BitSet _interface_property_declaration_in_interface_member_declaration6694 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _interface_method_declaration_in_interface_member_declaration6700 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _interface_event_declaration_in_interface_member_declaration6706 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _interface_indexer_declaration_in_interface_member_declaration6712 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_interface_method_declaration6720 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE0C0000000UL,0xCFFFFC00000007F0UL,0x00000006000106E1UL});
		public static readonly BitSet _138_in_interface_method_declaration6725 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE0C0000000UL,0xCFFFFC00000007F0UL,0x00000006000106E1UL});
		public static readonly BitSet _method_modifiers_in_interface_method_declaration6730 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _return_type_in_interface_method_declaration6734 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_interface_method_declaration6738 = new BitSet(new ulong[]{0x0000000000000000UL,0x0800400000000000UL});
		public static readonly BitSet _generic_parameter_list_in_interface_method_declaration6742 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_interface_method_declaration6750 = new BitSet(new ulong[]{0x0020800040000000UL,0x07FE2FE284000000UL,0x0FFF8000000003FCUL,0x0000000600010780UL});
		public static readonly BitSet _formal_parameter_list_in_interface_method_declaration6755 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_interface_method_declaration6760 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000000000000000UL,0x0800000000000000UL});
		public static readonly BitSet _type_parameter_constraints_clauses_in_interface_method_declaration6765 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_interface_method_declaration6770 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_interface_property_declaration6779 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000007F0UL,0x0000000600010680UL});
		public static readonly BitSet _138_in_interface_property_declaration6784 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_in_interface_property_declaration6789 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_interface_property_declaration6793 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000010000000UL});
		public static readonly BitSet _92_in_interface_property_declaration6797 = new BitSet(new ulong[]{0x0000C00000000000UL,0x0000000200000000UL});
		public static readonly BitSet _interface_accessor_declarations_in_interface_property_declaration6801 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
		public static readonly BitSet _93_in_interface_property_declaration6805 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _interface_get_accessor_declaration_in_interface_accessor_declarations6813 = new BitSet(new ulong[]{0x0000C00000000002UL,0x0000000200000000UL});
		public static readonly BitSet _interface_set_accessor_declaration_in_interface_accessor_declarations6817 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _interface_set_accessor_declaration_in_interface_accessor_declarations6823 = new BitSet(new ulong[]{0x0000400000000002UL,0x0000000200000000UL});
		public static readonly BitSet _interface_get_accessor_declaration_in_interface_accessor_declarations6827 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_interface_get_accessor_declaration6836 = new BitSet(new ulong[]{0x0000400000000000UL});
		public static readonly BitSet _GET_in_interface_get_accessor_declaration6841 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_interface_get_accessor_declaration6845 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_interface_set_accessor_declaration6855 = new BitSet(new ulong[]{0x0000800000000000UL});
		public static readonly BitSet _SET_in_interface_set_accessor_declaration6860 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_interface_set_accessor_declaration6864 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_interface_event_declaration6875 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000010000000000UL,0x0000000000000400UL});
		public static readonly BitSet _138_in_interface_event_declaration6880 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000010000000000UL});
		public static readonly BitSet _104_in_interface_event_declaration6885 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_in_interface_event_declaration6889 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_interface_event_declaration6893 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_interface_event_declaration6897 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_interface_indexer_declaration6907 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000007F0UL,0x0000000600010680UL});
		public static readonly BitSet _138_in_interface_indexer_declaration6913 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_in_interface_indexer_declaration6919 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000004000000UL});
		public static readonly BitSet _90_in_interface_indexer_declaration6923 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
		public static readonly BitSet _97_in_interface_indexer_declaration6927 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE284000000UL,0x0FFF8000000003FCUL,0x0000000600010780UL});
		public static readonly BitSet _formal_parameter_list_in_interface_indexer_declaration6931 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000800000000UL});
		public static readonly BitSet _99_in_interface_indexer_declaration6935 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000010000000UL});
		public static readonly BitSet _92_in_interface_indexer_declaration6939 = new BitSet(new ulong[]{0x0000C00000000000UL,0x0000000200000000UL});
		public static readonly BitSet _interface_accessor_declarations_in_interface_indexer_declaration6943 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
		public static readonly BitSet _93_in_interface_indexer_declaration6947 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_enum_declaration6958 = new BitSet(new ulong[]{0x0000200000000000UL,0x0000000000000000UL,0x00003C0000000400UL});
		public static readonly BitSet _enum_modifiers_in_enum_declaration6963 = new BitSet(new ulong[]{0x0000200000000000UL});
		public static readonly BitSet _ENUM_in_enum_declaration6968 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_enum_declaration6972 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001010000000UL});
		public static readonly BitSet _enum_base_in_enum_declaration6976 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001010000000UL});
		public static readonly BitSet _enum_body_in_enum_declaration6981 = new BitSet(new ulong[]{0x0010000000000002UL});
		public static readonly BitSet _SEMI_in_enum_declaration6985 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _100_in_enum_base6996 = new BitSet(new ulong[]{0x0000000000000000UL,0x07FC000000000000UL});
		public static readonly BitSet _integral_type_in_enum_base7000 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _92_in_enum_body7008 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE2A0000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _enum_member_declarations_in_enum_body7011 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000420000000UL});
		public static readonly BitSet _98_in_enum_body7013 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
		public static readonly BitSet _93_in_enum_body7020 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _enum_member_declaration_in_enum_member_declarations7028 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_enum_member_declarations7031 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _enum_member_declaration_in_enum_member_declarations7033 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _attributes_in_enum_member_declaration7043 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_enum_member_declaration7048 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000100000000UL});
		public static readonly BitSet _96_in_enum_member_declaration7053 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_enum_member_declaration7057 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _enum_modifier_in_enum_modifiers7067 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x00003C0000000400UL});
		public static readonly BitSet _set_in_enum_modifier0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _labeled_statement_in_statement7102 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _declaration_statement_in_statement7107 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _embedded_statement_in_statement7112 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _block_in_embedded_statement7120 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _empty_statement_in_embedded_statement7125 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _expression_statement_in_embedded_statement7130 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _selection_statement_in_embedded_statement7135 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _iteration_statement_in_embedded_statement7140 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _jump_statement_in_embedded_statement7145 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _try_statement_in_embedded_statement7150 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _checked_statement_in_embedded_statement7155 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _unchecked_statement_in_embedded_statement7160 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _lock_statement_in_embedded_statement7165 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _using_statement_in_embedded_statement7170 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _yield_statement_in_embedded_statement7176 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _unsafe_statement_in_embedded_statement7182 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _fixed_statement_in_embedded_statement7187 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _207_in_fixed_statement7194 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_fixed_statement7198 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _pointer_type_in_fixed_statement7202 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _fixed_pointer_declarators_in_fixed_statement7204 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_fixed_statement7208 = new BitSet(new ulong[]{0x001094FFC0002000UL,0xF7FCFFE09C000000UL,0x0FFFC0000001FFF3UL,0x000000073FE98680UL});
		public static readonly BitSet _embedded_statement_in_fixed_statement7212 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _fixed_pointer_declarator_in_fixed_pointer_declarators7220 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_fixed_pointer_declarators7225 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _fixed_pointer_declarator_in_fixed_pointer_declarators7229 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _identifier_in_fixed_pointer_declarator7239 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000100000000UL});
		public static readonly BitSet _96_in_fixed_pointer_declarator7243 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _fixed_pointer_initializer_in_fixed_pointer_declarator7247 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _129_in_fixed_pointer_initializer7255 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _variable_reference_in_fixed_pointer_initializer7259 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _expression_in_fixed_pointer_initializer7267 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _174_in_unsafe_statement7274 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
		public static readonly BitSet _block_in_unsafe_statement7278 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _SEMI_in_block7285 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _92_in_block7291 = new BitSet(new ulong[]{0x001094FFC0002000UL,0xF7FEFFE0BC000000UL,0x0FFFC0000001FFF3UL,0x000000073FEB8684UL});
		public static readonly BitSet _statement_list_in_block7295 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
		public static readonly BitSet _93_in_block7300 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _statement_in_statement_list7308 = new BitSet(new ulong[]{0x001094FFC0002002UL,0xF7FEFFE09C000000UL,0x0FFFC0000001FFF3UL,0x000000073FEB8684UL});
		public static readonly BitSet _SEMI_in_empty_statement7317 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _identifier_in_labeled_statement7325 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001000000000UL});
		public static readonly BitSet _100_in_labeled_statement7329 = new BitSet(new ulong[]{0x001094FFC0002000UL,0xF7FEFFE09C000000UL,0x0FFFC0000001FFF3UL,0x000000073FEB8684UL});
		public static readonly BitSet _statement_in_labeled_statement7333 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _local_variable_declaration_in_declaration_statement7342 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _local_constant_declaration_in_declaration_statement7348 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_declaration_statement7351 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _local_variable_type_in_local_variable_declaration7359 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _local_variable_declarators_in_local_variable_declaration7363 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_in_local_variable_type7371 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _208_in_local_variable_type7376 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _209_in_local_variable_type7382 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _local_variable_declarator_in_local_variable_declarators7389 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_local_variable_declarators7392 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _local_variable_declarator_in_local_variable_declarators7394 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _identifier_in_local_variable_declarator7404 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000100000000UL});
		public static readonly BitSet _96_in_local_variable_declarator7407 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE09C000000UL,0x0FFF80000001FFF3UL,0x0000000600050680UL});
		public static readonly BitSet _local_variable_initializer_in_local_variable_declarator7411 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _expression_in_local_variable_initializer7424 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _array_initializer_in_local_variable_initializer7429 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _stackalloc_initializer_in_local_variable_initializer7435 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _210_in_stackalloc_initializer7442 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _unmanaged_type_in_stackalloc_initializer7446 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
		public static readonly BitSet _97_in_stackalloc_initializer7450 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_stackalloc_initializer7454 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000800000000UL});
		public static readonly BitSet _99_in_stackalloc_initializer7458 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _194_in_local_constant_declaration7466 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_in_local_constant_declaration7470 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _constant_declarators_in_local_constant_declaration7474 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _constant_declarator_in_constant_declarators7482 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_constant_declarators7485 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _constant_declarator_in_constant_declarators7487 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _identifier_in_constant_declarator7497 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000100000000UL});
		public static readonly BitSet _96_in_constant_declarator7502 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _constant_expression_in_constant_declarator7506 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _expression_in_expression_statement7517 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_expression_statement7521 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _invocation_expression_in_statement_expression7529 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _object_creation_expression_in_statement_expression7534 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _assignment_in_statement_expression7539 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _unary_expression_in_statement_expression7544 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _if_statement_in_selection_statement7551 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _switch_statement_in_selection_statement7556 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _IF_in_if_statement7564 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_if_statement7568 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _boolean_expression_in_if_statement7572 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_if_statement7576 = new BitSet(new ulong[]{0x001094FFC0002000UL,0xF7FCFFE09C000000UL,0x0FFFC0000001FFF3UL,0x000000073FE98680UL});
		public static readonly BitSet _embedded_statement_in_if_statement7580 = new BitSet(new ulong[]{0x0000000000000202UL});
		public static readonly BitSet _else_statement_in_if_statement7584 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _ELSE_in_else_statement7594 = new BitSet(new ulong[]{0x001094FFC0002000UL,0xF7FCFFE09C000000UL,0x0FFFC0000001FFF3UL,0x000000073FE98680UL});
		public static readonly BitSet _embedded_statement_in_else_statement7598 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _211_in_switch_statement7608 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_switch_statement7612 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_switch_statement7616 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_switch_statement7620 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000010000000UL});
		public static readonly BitSet _switch_block_in_switch_statement7624 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _92_in_switch_block7632 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL,0x0000000000008000UL,0x0000000000100000UL});
		public static readonly BitSet _switch_sections_in_switch_block7636 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
		public static readonly BitSet _93_in_switch_block7641 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _switch_section_in_switch_sections7649 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000008000UL,0x0000000000100000UL});
		public static readonly BitSet _switch_labels_in_switch_section7658 = new BitSet(new ulong[]{0x001094FFC0002000UL,0xF7FEFFE09C000000UL,0x0FFFC0000001FFF3UL,0x000000073FEB8684UL});
		public static readonly BitSet _statement_list_in_switch_section7662 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _switch_label_in_switch_labels7670 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000008000UL,0x0000000000100000UL});
		public static readonly BitSet _212_in_switch_label7680 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _constant_expression_in_switch_label7684 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001000000000UL});
		public static readonly BitSet _100_in_switch_label7688 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _143_in_switch_label7695 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001000000000UL});
		public static readonly BitSet _100_in_switch_label7699 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _while_statement_in_iteration_statement7708 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _do_statement_in_iteration_statement7713 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _for_statement_in_iteration_statement7718 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _foreach_statement_in_iteration_statement7723 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _213_in_while_statement7731 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_while_statement7735 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _boolean_expression_in_while_statement7739 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_while_statement7743 = new BitSet(new ulong[]{0x001094FFC0002000UL,0xF7FCFFE09C000000UL,0x0FFFC0000001FFF3UL,0x000000073FE98680UL});
		public static readonly BitSet _embedded_statement_in_while_statement7747 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _214_in_do_statement7755 = new BitSet(new ulong[]{0x001094FFC0002000UL,0xF7FCFFE09C000000UL,0x0FFFC0000001FFF3UL,0x000000073FE98680UL});
		public static readonly BitSet _embedded_statement_in_do_statement7759 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000200000UL});
		public static readonly BitSet _213_in_do_statement7763 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_do_statement7767 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _boolean_expression_in_do_statement7771 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_do_statement7775 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_do_statement7779 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _215_in_for_statement7787 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_for_statement7791 = new BitSet(new ulong[]{0x001084FFC0000000UL,0xF7FEEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600030680UL});
		public static readonly BitSet _for_initializer_in_for_statement7795 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_for_statement7800 = new BitSet(new ulong[]{0x001084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _for_condition_in_for_statement7804 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_for_statement7809 = new BitSet(new ulong[]{0x002084FFC0000000UL,0xF7FEEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600030680UL});
		public static readonly BitSet _for_iterator_in_for_statement7813 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_for_statement7818 = new BitSet(new ulong[]{0x001094FFC0002000UL,0xF7FCFFE09C000000UL,0x0FFFC0000001FFF3UL,0x000000073FE98680UL});
		public static readonly BitSet _embedded_statement_in_for_statement7822 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _local_variable_declaration_in_for_initializer7830 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _statement_expression_list_in_for_initializer7835 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _boolean_expression_in_for_condition7843 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _statement_expression_list_in_for_iterator7851 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _statement_expression_in_statement_expression_list7859 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_statement_expression_list7862 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FEEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600030680UL});
		public static readonly BitSet _statement_expression_in_statement_expression_list7864 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _216_in_foreach_statement7874 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_foreach_statement7878 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600030680UL});
		public static readonly BitSet _local_variable_type_in_foreach_statement7882 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_foreach_statement7886 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000020000UL});
		public static readonly BitSet _145_in_foreach_statement7890 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_foreach_statement7894 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_foreach_statement7898 = new BitSet(new ulong[]{0x001094FFC0002000UL,0xF7FCFFE09C000000UL,0x0FFFC0000001FFF3UL,0x000000073FE98680UL});
		public static readonly BitSet _embedded_statement_in_foreach_statement7902 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _break_statement_in_jump_statement7910 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _continue_statement_in_jump_statement7915 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _goto_statement_in_jump_statement7920 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _return_statement_in_jump_statement7925 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _throw_statement_in_jump_statement7930 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _217_in_break_statement7938 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_break_statement7942 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _218_in_continue_statement7950 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_continue_statement7954 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _219_in_goto_statement7963 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_goto_statement7967 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_goto_statement7971 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _219_in_goto_statement7978 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000000100000UL});
		public static readonly BitSet _212_in_goto_statement7982 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _constant_expression_in_goto_statement7986 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_goto_statement7990 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _219_in_goto_statement7997 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000008000UL});
		public static readonly BitSet _143_in_goto_statement8001 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_goto_statement8005 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _108_in_return_statement8014 = new BitSet(new ulong[]{0x001084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_return_statement8018 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_return_statement8023 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _220_in_throw_statement8031 = new BitSet(new ulong[]{0x001084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_throw_statement8035 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_throw_statement8040 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _221_in_try_statement8054 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
		public static readonly BitSet _block_in_try_statement8058 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000040000000UL});
		public static readonly BitSet _catch_clauses_in_try_statement8062 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000080000000UL});
		public static readonly BitSet _finally_clause_in_try_statement8066 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _221_in_try_statement8074 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
		public static readonly BitSet _block_in_try_statement8078 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000080000000UL});
		public static readonly BitSet _finally_clause_in_try_statement8082 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _specific_catch_clauses_in_catch_clauses8091 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000040000000UL});
		public static readonly BitSet _general_catch_clause_in_catch_clauses8095 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _specific_catch_clauses_in_catch_clauses8103 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000040000000UL});
		public static readonly BitSet _general_catch_clause_in_catch_clauses8108 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _specific_catch_clause_in_specific_catch_clauses8117 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000040000000UL});
		public static readonly BitSet _222_in_specific_catch_clause8126 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_specific_catch_clause8130 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _class_type_in_specific_catch_clause8134 = new BitSet(new ulong[]{0x0020800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _identifier_in_specific_catch_clause8138 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_specific_catch_clause8143 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
		public static readonly BitSet _block_in_specific_catch_clause8147 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _222_in_general_catch_clause8155 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
		public static readonly BitSet _block_in_general_catch_clause8159 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _223_in_finally_clause8167 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
		public static readonly BitSet _block_in_finally_clause8171 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _141_in_checked_statement8179 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
		public static readonly BitSet _block_in_checked_statement8183 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _142_in_unchecked_statement8191 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
		public static readonly BitSet _block_in_unchecked_statement8195 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _224_in_lock_statement8203 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_lock_statement8207 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_lock_statement8210 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_lock_statement8214 = new BitSet(new ulong[]{0x001094FFC0002000UL,0xF7FCFFE09C000000UL,0x0FFFC0000001FFF3UL,0x000000073FE98680UL});
		public static readonly BitSet _embedded_statement_in_lock_statement8218 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _USING_in_using_statement8226 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_using_statement8230 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FEEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600030680UL});
		public static readonly BitSet _resource_acquisition_in_using_statement8235 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_using_statement8239 = new BitSet(new ulong[]{0x001094FFC0002000UL,0xF7FCFFE09C000000UL,0x0FFFC0000001FFF3UL,0x000000073FE98680UL});
		public static readonly BitSet _embedded_statement_in_using_statement8244 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _local_variable_declaration_in_resource_acquisition8252 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _expression_in_resource_acquisition8257 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _225_in_yield_statement8266 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000100000000000UL});
		public static readonly BitSet _108_in_yield_statement8270 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_in_yield_statement8274 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_yield_statement8278 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _225_in_yield_statement8285 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000002000000UL});
		public static readonly BitSet _217_in_yield_statement8289 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_yield_statement8293 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _IDENTIFIER_in_identifier8303 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _also_keyword_in_identifier8309 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _set_in_literal0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _set_in_keyword0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _set_in_also_keyword0 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _assignment_in_assignment_list10804 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_assignment_list10806 = new BitSet(new ulong[]{0x000084FFC0000002UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _field_declaration_in_field_declarations10816 = new BitSet(new ulong[]{0x0000800040000002UL,0x07FE2FE280000000UL,0x0FFFFC00000007F0UL,0x0000000600010699UL});
		public static readonly BitSet _property_declaration_in_property_declaration_list10825 = new BitSet(new ulong[]{0x0000800040000002UL,0x07FE2FE2C0000000UL,0xCFFFFC00000007F0UL,0x00000006000106E1UL});
		public static readonly BitSet _member_access_in_member_access_list10835 = new BitSet(new ulong[]{0x0000800040000002UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _constant_declaration_in_constant_declarations10844 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL,0x00003C0000000400UL,0x0000000000000004UL});
		public static readonly BitSet _literal_in_literals10852 = new BitSet(new ulong[]{0x000080FFC0000002UL,0x07FC2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _delegate_declaration_in_delegate_declaration_list10861 = new BitSet(new ulong[]{0x0000200000000002UL,0x0000000201000000UL,0xF0007C0000010400UL,0x0000000000004003UL});
		public static readonly BitSet _local_variable_declaration_in_local_variable_declaration_list10871 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_local_variable_declaration_list10873 = new BitSet(new ulong[]{0x0000800040000002UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600030680UL});
		public static readonly BitSet _local_variable_initializer_in_local_variable_initializer_list10884 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_local_variable_initializer_list10886 = new BitSet(new ulong[]{0x000084FFC0000002UL,0xF7FCEFE09C000000UL,0x0FFF80000001FFF3UL,0x0000000600050680UL});
		public static readonly BitSet _expression_in_expression_list_test10897 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_expression_list_test10899 = new BitSet(new ulong[]{0x000084FFC0000002UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _unary_expression_in_unary_expression_list10910 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_unary_expression_list10912 = new BitSet(new ulong[]{0x000084FFC0000002UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _invocation_expression_in_invocation_expression_list10923 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_invocation_expression_list10925 = new BitSet(new ulong[]{0x000080FFC0000002UL,0x07FC6FE08C000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _primary_expression_in_primary_expression_list10936 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_primary_expression_list10938 = new BitSet(new ulong[]{0x000080FFC0000002UL,0x07FC6FE08C000000UL,0x0FFF80000001FFF0UL,0x0000000600010680UL});
		public static readonly BitSet _static_constructor_modifiers_in_static_constructor_modifiers_list10949 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_static_constructor_modifiers_list10951 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000240000000UL,0x0000400000000000UL,0x0000000000000001UL});
		public static readonly BitSet _using_directives_in_synpred1_cs192 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _namespace_declaration_in_synpred3_cs206 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _generic_argument_list_in_synpred8_cs281 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _generic_argument_list_in_synpred13_cs320 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _using_directive_in_synpred18_cs394 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _class_declaration_in_synpred22_cs481 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _struct_declaration_in_synpred23_cs486 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _interface_declaration_in_synpred24_cs491 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _enum_declaration_in_synpred25_cs496 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _110_in_synpred47_cs831 = new BitSet(new ulong[]{0x002084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _positional_argument_list_in_synpred47_cs835 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_synpred47_cs839 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _110_in_synpred48_cs845 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _positional_argument_list_in_synpred48_cs849 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_synpred48_cs853 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _named_argument_list_in_synpred48_cs857 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_synpred48_cs861 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _98_in_synpred49_cs891 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _positional_argument_in_synpred49_cs897 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_name_in_synpred53_cs976 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
		public static readonly BitSet _predefined_type_in_synpred53_cs984 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
		public static readonly BitSet _rank_specifiers_in_synpred53_cs989 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
		public static readonly BitSet _111_in_synpred53_cs993 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
		public static readonly BitSet _type_name_in_synpred55_cs999 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
		public static readonly BitSet _111_in_synpred55_cs1001 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
		public static readonly BitSet _type_name_in_synpred56_cs1007 = new BitSet(new ulong[]{0x0000000000000000UL,0x0001000000000000UL});
		public static readonly BitSet _112_in_synpred56_cs1009 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_name_in_synpred57_cs1014 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _predefined_type_in_synpred59_cs1019 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
		public static readonly BitSet _111_in_synpred59_cs1021 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
		public static readonly BitSet _predefined_type_in_synpred60_cs1027 = new BitSet(new ulong[]{0x0000000000000000UL,0x0001000000000000UL});
		public static readonly BitSet _112_in_synpred60_cs1029 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _predefined_type_in_synpred61_cs1034 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _111_in_synpred64_cs1070 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_name_in_synpred65_cs1053 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
		public static readonly BitSet _predefined_type_in_synpred65_cs1061 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
		public static readonly BitSet _rank_specifiers_in_synpred65_cs1066 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
		public static readonly BitSet _111_in_synpred65_cs1070 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
		public static readonly BitSet _111_in_synpred66_cs1078 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_name_in_synpred67_cs1076 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
		public static readonly BitSet _111_in_synpred67_cs1078 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
		public static readonly BitSet _type_name_in_synpred68_cs1084 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _111_in_synpred69_cs1091 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _predefined_type_in_synpred70_cs1089 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
		public static readonly BitSet _111_in_synpred70_cs1091 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800000000000UL});
		public static readonly BitSet _predefined_type_in_synpred71_cs1097 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _111_in_synpred72_cs1106 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _non_assignment_expression_in_synpred86_cs1319 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _cast_expression_in_synpred87_cs1332 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _111_in_synpred92_cs1381 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _unary_expression_in_synpred92_cs1385 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _127_in_synpred95_cs1406 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _128_in_synpred96_cs1411 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _primary_or_array_creation_expression_in_synpred97_cs1402 = new BitSet(new ulong[]{0x0000000000000002UL,0x8000000000000000UL,0x0000000000000001UL});
		public static readonly BitSet _127_in_synpred97_cs1406 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000001UL});
		public static readonly BitSet _128_in_synpred97_cs1411 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _pointer_indirection_expression_in_synpred98_cs1417 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _conditional_expression_in_synpred99_cs1480 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _lambda_expression_in_synpred100_cs1485 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _131_in_synpred111_cs1601 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_synpred111_cs1603 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _namespace_or_type_name_in_synpred111_cs1613 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000800200000000UL});
		public static readonly BitSet _predefined_type_in_synpred111_cs1621 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000800200000000UL});
		public static readonly BitSet _111_in_synpred111_cs1627 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000800200000000UL});
		public static readonly BitSet _rank_specifiers_in_synpred111_cs1632 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _113_in_synpred111_cs1639 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
		public static readonly BitSet _111_in_synpred111_cs1643 = new BitSet(new ulong[]{0x0020000000000000UL,0x0000800200000000UL});
		public static readonly BitSet _rank_specifiers_in_synpred111_cs1648 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_synpred111_cs1657 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000008UL});
		public static readonly BitSet _ref_variable_reference_in_synpred111_cs1661 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _primary_expression_in_synpred112_cs1678 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _arguments_in_synpred115_cs1718 = new BitSet(new ulong[]{0x0000030000000000UL,0x0000400000000000UL});
		public static readonly BitSet _access_operator_in_synpred115_cs1724 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _tinvocation_in_synpred115_cs1729 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _arguments_in_synpred117_cs1735 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400200000000UL});
		public static readonly BitSet _telement_part_in_synpred117_cs1740 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _bracket_expression_in_synpred121_cs1788 = new BitSet(new ulong[]{0x0000030000000000UL,0x0000000200000000UL});
		public static readonly BitSet _access_operator_in_synpred121_cs1794 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _telement_in_synpred121_cs1798 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _bracket_expression_in_synpred123_cs1804 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400200000000UL});
		public static readonly BitSet _tinvocation_part_in_synpred123_cs1809 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _primary_expression_part_in_synpred126_cs1849 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _primary_expression_start_in_synpred127_cs1845 = new BitSet(new ulong[]{0x0000030000000002UL,0x0000400200000000UL});
		public static readonly BitSet _primary_expression_part_in_synpred127_cs1849 = new BitSet(new ulong[]{0x0000030000000002UL,0x0000400200000000UL});
		public static readonly BitSet _delegate_creation_expression_in_synpred128_cs1855 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _anonymous_object_creation_expression_in_synpred129_cs1864 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _generic_argument_list_in_synpred136_cs1956 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _bracket_expression_in_synpred138_cs1967 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _bracket_expression_in_synpred140_cs1978 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _brackets_or_arguments_in_synpred143_cs2001 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _brackets_or_arguments_in_synpred146_cs2041 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _bracket_expression_in_synpred148_cs2060 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _generic_argument_list_in_synpred153_cs2120 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _bracket_expression_in_synpred154_cs2146 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _arguments_in_synpred155_cs2151 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _bracket_expression_in_synpred157_cs2161 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _access_in_synpred176_cs2371 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _access_part_in_synpred178_cs2395 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _access_part_in_synpred179_cs2407 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _access_part_in_synpred181_cs2419 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _92_in_synpred189_cs2548 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE0A0000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _member_initializer_list_in_synpred189_cs2552 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
		public static readonly BitSet _93_in_synpred189_cs2557 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _non_array_type_in_synpred197_cs2720 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL});
		public static readonly BitSet _97_in_synpred197_cs2722 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _expression_list_in_synpred197_cs2726 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000800000000UL});
		public static readonly BitSet _99_in_synpred197_cs2730 = new BitSet(new ulong[]{0x0000030000000002UL,0x0000000210000000UL});
		public static readonly BitSet _rank_specifiers_in_synpred197_cs2734 = new BitSet(new ulong[]{0x0000030000000002UL,0x0000000010000000UL});
		public static readonly BitSet _array_initializer_in_synpred197_cs2739 = new BitSet(new ulong[]{0x0000030000000002UL});
		public static readonly BitSet _access_operator_in_synpred197_cs2745 = new BitSet(new ulong[]{0x000080FFC0000000UL,0x07FC6FE08C000000UL,0x0FFF80000001FFF0UL,0x0000000600010680UL});
		public static readonly BitSet _primary_expression_in_synpred197_cs2749 = new BitSet(new ulong[]{0x0000030000000002UL});
		public static readonly BitSet _array_type_in_synpred198_cs2757 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000010000000UL});
		public static readonly BitSet _array_initializer_in_synpred198_cs2761 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _92_in_synpred200_cs2818 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE0A0000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _member_declarator_list_in_synpred200_cs2822 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000020000000UL});
		public static readonly BitSet _93_in_synpred200_cs2827 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _identifier_in_synpred202_cs2880 = new BitSet(new ulong[]{0x0000000000000002UL,0x0800000000000000UL});
		public static readonly BitSet _generic_argument_list_in_synpred202_cs2884 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _member_access_in_synpred203_cs2892 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _140_in_synpred204_cs2934 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_synpred204_cs2938 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_in_synpred204_cs2942 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_synpred204_cs2946 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _140_in_synpred205_cs2952 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _110_in_synpred205_cs2954 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _unbound_type_name_in_synpred205_cs2958 = new BitSet(new ulong[]{0x0020000000000000UL});
		public static readonly BitSet _RPAREN_in_synpred205_cs2962 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _namespace_or_type_name_in_synpred226_cs3368 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
		public static readonly BitSet _predefined_type_in_synpred226_cs3373 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000800000000000UL});
		public static readonly BitSet _111_in_synpred226_cs3379 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000800200000000UL});
		public static readonly BitSet _rank_specifiers_in_synpred226_cs3384 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _namespace_or_type_name_in_synpred229_cs3394 = new BitSet(new ulong[]{0x0000000000000000UL,0x0001000000000000UL});
		public static readonly BitSet _predefined_type_in_synpred229_cs3399 = new BitSet(new ulong[]{0x0000000000000000UL,0x0001000000000000UL});
		public static readonly BitSet _112_in_synpred229_cs3405 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL});
		public static readonly BitSet _rank_specifiers_in_synpred229_cs3409 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _namespace_or_type_name_in_synpred232_cs3419 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL});
		public static readonly BitSet _predefined_type_in_synpred232_cs3424 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000200000000UL});
		public static readonly BitSet _rank_specifiers_in_synpred232_cs3430 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _set_in_synpred238_cs3481 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _unary_expression_in_synpred238_cs3491 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _set_in_synpred240_cs3504 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _multiplicative_expression_in_synpred240_cs3512 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _set_in_synpred247_cs3556 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _shift_expression_in_synpred247_cs3568 = new BitSet(new ulong[]{0x0000080000000002UL,0x0800000000000000UL,0x0000000000600000UL});
		public static readonly BitSet _129_in_synpred252_cs3629 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _equality_expression_in_synpred252_cs3633 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _159_in_synpred257_cs3721 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _null_coalescing_expression_in_synpred257_cs3725 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _explicit_anonymous_function_signature_in_synpred272_cs3866 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _query_continuation_in_synpred291_cs4084 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _ordering_in_synpred299_cs4222 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _ordering_direction_in_synpred300_cs4236 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _100_in_synpred320_cs4412 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _class_type_in_synpred320_cs4416 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_synpred320_cs4419 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _interface_type_list_in_synpred320_cs4421 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _primary_constraint_in_synpred323_cs4497 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_synpred323_cs4503 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
		public static readonly BitSet _secondary_constraint_list_in_synpred323_cs4507 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_synpred323_cs4511 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE280000000UL,0x2FFF8000000207F4UL,0x0000000600010682UL});
		public static readonly BitSet _constructor_constraint_in_synpred323_cs4515 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _primary_constraint_in_synpred324_cs4522 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_synpred324_cs4528 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE280000000UL,0x0FFF800000020004UL,0x0000000600010680UL});
		public static readonly BitSet _secondary_constraint_list_in_synpred324_cs4532 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _primary_constraint_in_synpred325_cs4539 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_synpred325_cs4545 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE280000000UL,0x2FFF8000000207F4UL,0x0000000600010682UL});
		public static readonly BitSet _constructor_constraint_in_synpred325_cs4549 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _secondary_constraint_list_in_synpred326_cs4556 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000400000000UL});
		public static readonly BitSet _98_in_synpred326_cs4561 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE280000000UL,0x2FFF8000000207F4UL,0x0000000600010682UL});
		public static readonly BitSet _constructor_constraint_in_synpred326_cs4565 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _primary_constraint_in_synpred327_cs4571 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _secondary_constraint_list_in_synpred328_cs4576 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_name_in_synpred332_cs4634 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _constant_declaration_in_synpred335_cs4689 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _field_declaration_in_synpred336_cs4694 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _method_declaration_in_synpred337_cs4699 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _property_declaration_in_synpred338_cs4704 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _event_declaration_in_synpred339_cs4709 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _indexer_declaration_in_synpred340_cs4714 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _operator_declaration_in_synpred341_cs4719 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _constructor_declaration_in_synpred342_cs4724 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _destructor_declaration_in_synpred343_cs4729 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _static_constructor_declaration_in_synpred344_cs4734 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_declaration_in_synpred345_cs4739 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_in_synpred386_cs5077 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _fixed_parameter_in_synpred389_cs5125 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _parameter_array_in_synpred390_cs5129 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _generic_parameter_list_in_synpred413_cs5324 = new BitSet(new ulong[]{0x0000030000000000UL});
		public static readonly BitSet _qid_part_in_synpred413_cs5326 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _get_accessor_declaration_in_synpred415_cs5339 = new BitSet(new ulong[]{0x0000C00000000002UL,0x0000000200000000UL,0x00003C0000000000UL});
		public static readonly BitSet _set_accessor_declaration_in_synpred415_cs5343 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _attributes_in_synpred428_cs5463 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000010040000000UL,0xC0007C0000000400UL,0x0000000000000061UL});
		public static readonly BitSet _event_modifiers_in_synpred428_cs5468 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000010000000000UL});
		public static readonly BitSet _104_in_synpred428_cs5473 = new BitSet(new ulong[]{0x0000800040000000UL,0x07FE2FE080000000UL,0x0FFF8000000003F0UL,0x0000000600010680UL});
		public static readonly BitSet _type_in_synpred428_cs5477 = new BitSet(new ulong[]{0x0000800040000000UL,0x00002FE080000000UL,0x0FFF800000000000UL,0x0000000600010680UL});
		public static readonly BitSet _variable_declarators_in_synpred428_cs5481 = new BitSet(new ulong[]{0x0010000000000000UL});
		public static readonly BitSet _SEMI_in_synpred428_cs5485 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _add_accessor_declaration_in_synpred443_cs5596 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000200000000UL,0x0000000000000000UL,0x0000000000000600UL});
		public static readonly BitSet _remove_accessor_declaration_in_synpred443_cs5600 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _unary_operator_declarator_in_synpred465_cs5822 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _binary_operator_declarator_in_synpred466_cs5827 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _94_in_synpred518_cs6348 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000400000000000UL});
		public static readonly BitSet _174_in_synpred518_cs6351 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _constant_declaration_in_synpred535_cs6505 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _field_declaration_in_synpred536_cs6510 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _method_declaration_in_synpred537_cs6515 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _property_declaration_in_synpred538_cs6520 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _event_declaration_in_synpred539_cs6525 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _indexer_declaration_in_synpred540_cs6530 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _operator_declaration_in_synpred541_cs6535 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _constructor_declaration_in_synpred542_cs6540 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _static_constructor_declaration_in_synpred543_cs6545 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _interface_property_declaration_in_synpred559_cs6694 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _interface_method_declaration_in_synpred560_cs6700 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _interface_event_declaration_in_synpred561_cs6706 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _138_in_synpred563_cs6725 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _interface_get_accessor_declaration_in_synpred571_cs6813 = new BitSet(new ulong[]{0x0000C00000000002UL,0x0000000200000000UL});
		public static readonly BitSet _interface_set_accessor_declaration_in_synpred571_cs6817 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _labeled_statement_in_synpred593_cs7102 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _declaration_statement_in_synpred594_cs7107 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _block_in_synpred595_cs7120 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _empty_statement_in_synpred596_cs7125 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _129_in_synpred609_cs7255 = new BitSet(new ulong[]{0x000084FFC0000000UL,0xF7FCEFE08C000000UL,0x0FFF80000001FFF3UL,0x0000000600010680UL});
		public static readonly BitSet _variable_reference_in_synpred609_cs7259 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _type_in_synpred614_cs7371 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _208_in_synpred615_cs7376 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _invocation_expression_in_synpred622_cs7529 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _object_creation_expression_in_synpred623_cs7534 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _assignment_in_synpred624_cs7539 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _else_statement_in_synpred626_cs7584 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _local_variable_declaration_in_synpred637_cs7830 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _221_in_synpred648_cs8054 = new BitSet(new ulong[]{0x0010000000000000UL,0x0000400010000000UL});
		public static readonly BitSet _block_in_synpred648_cs8058 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000040000000UL});
		public static readonly BitSet _catch_clauses_in_synpred648_cs8062 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000080000000UL});
		public static readonly BitSet _finally_clause_in_synpred648_cs8066 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _specific_catch_clauses_in_synpred650_cs8091 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000000UL,0x0000000040000000UL});
		public static readonly BitSet _general_catch_clause_in_synpred650_cs8095 = new BitSet(new ulong[]{0x0000000000000002UL});
		public static readonly BitSet _local_variable_declaration_in_synpred654_cs8252 = new BitSet(new ulong[]{0x0000000000000002UL});

	}
	#endregion Follow sets
}
