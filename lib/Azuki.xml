<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Azuki</name>
    </assembly>
    <members>
        <member name="T:Sgry.Azuki.ActionProc">
            <summary>
            Common interface of actions of Azuki engine
            </summary>
        </member>
        <member name="T:Sgry.Azuki.Actions">
            <summary>
            A static class containing predefined actions for Azuki.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.BackSpace(Sgry.Azuki.IUserInterface)">
            <summary>
            Deletes one character before caret if nothing was selected, otherwise delete selection.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.BackSpaceWord(Sgry.Azuki.IUserInterface)">
            <summary>
            Deletes one word before caret if nothing was selected, otherwise delete selection.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.Delete(Sgry.Azuki.IUserInterface)">
            <summary>
            Deletes one character after caret if nothing was selected, otherwise delete selection.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.DeleteWord(Sgry.Azuki.IUserInterface)">
            <summary>
            Deletes one word after caret if nothing was selected, otherwise delete selection.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.Cut(Sgry.Azuki.IUserInterface)">
            <summary>
            Cuts current selection to clipboard.
            </summary>
            <remarks>
            <para>
            This action cuts currently selected text to clipboard.
            If nothing selected and invokes this action,
            result will be different according to
            <see cref="P:Sgry.Azuki.UserPref.CopyLineWhenNoSelection">UserPref.CopyLineWhenNoSelection</see>
            property value.
            If that property is true, current line will be cut.
            If that property is false, Azuki will do nothing.
            </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.UserPref.CopyLineWhenNoSelection">UserPref.CopyLineWhenNoSelection</seealso>
        </member>
        <member name="M:Sgry.Azuki.Actions.Copy(Sgry.Azuki.IUserInterface)">
            <summary>
            Copies current selection to clipboard.
            </summary>
            <remarks>
            <para>
            This action copies currently selected text to clipboard.
            If nothing selected and invokes this action,
            result will be different according to
            <see cref="P:Sgry.Azuki.UserPref.CopyLineWhenNoSelection">UserPref.CopyLineWhenNoSelection</see>
            property value.
            If that property is true, current line will be copied.
            If that property is false, Azuki will do nothing.
            </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.UserPref.CopyLineWhenNoSelection">UserPref.CopyLineWhenNoSelection</seealso>
        </member>
        <member name="M:Sgry.Azuki.Actions.Paste(Sgry.Azuki.IUserInterface)">
            <summary>
            Pastes clipboard content at where the caret is at.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.Undo(Sgry.Azuki.IUserInterface)">
            <summary>
            Undos an action.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.Redo(Sgry.Azuki.IUserInterface)">
            <summary>
            Redos an action.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.ToggleOverwriteMode(Sgry.Azuki.IUserInterface)">
            <summary>
            Toggles overwrite mode.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.ToggleRectSelectMode(Sgry.Azuki.IUserInterface)">
            <summary>
            Toggles overwrite mode.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.ScrollDown(Sgry.Azuki.IUserInterface)">
            <summary>
            Scrolls down one line.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.ScrollUp(Sgry.Azuki.IUserInterface)">
            <summary>
            Scrolls up one line.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.Refresh(Sgry.Azuki.IUserInterface)">
            <summary>
            Refreshes view and force to redraw text area.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.BreakPreviousLine(Sgry.Azuki.IUserInterface)">
            <summary>
            Inserts a new line above the cursor.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.BreakNextLine(Sgry.Azuki.IUserInterface)">
            <summary>
            Inserts a new line below the cursor.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.BlockIndent(Sgry.Azuki.IUserInterface)">
            <summary>
            Increase indentation level of selected lines.
            </summary>
            <remarks>
            <para>
            This action indents all selected lines at once. The character(s) to
            be used for indentation will be a tab (U+0009) if
            <see cref="P:Sgry.Azuki.IUserInterface.UsesTabForIndent">
            IUserInterface.UsesTabForIndent</see> property is true, otherwise
            a sequence of space characters (U+0020). The number of space
            characters which will be used for indentation is determined by <see cref="P:Sgry.Azuki.IUserInterface.TabWidth">IUserInterface.TabWidth
            </see> property value.
            </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.IUserInterface.UsesTabForIndent">
            IUserInterface.UsesTabForIndent property
            </seealso>
            <seealso cref="P:Sgry.Azuki.IUserInterface.TabWidth">
            IUserInterface.TabWidth property
            </seealso>
        </member>
        <member name="M:Sgry.Azuki.Actions.BlockUnIndent(Sgry.Azuki.IUserInterface)">
            <summary>
            Decrease indentation level of selected lines.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.TrimTrailingSpace(Sgry.Azuki.IUserInterface)">
            <summary>
            Removes spaces at the end of each selected lines.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.TrimLeadingSpace(Sgry.Azuki.IUserInterface)">
            <summary>
            Removes spaces at the beginning of each selected lines.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.ConvertTabsToSpaces(Sgry.Azuki.IUserInterface)">
            <summary>
            Converts tab characters to space characters.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.ConvertSpacesToTabs(Sgry.Azuki.IUserInterface)">
            <summary>
            Converts space characters to tab characters.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.ConvertSpacesToTabs(Sgry.Azuki.IUserInterface,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Convertes sequences of two or more spaces in selected text with
            tab characters as much as possible.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.MoveRight(Sgry.Azuki.IUserInterface)">
            <summary>
            Moves caret to right.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.MoveLeft(Sgry.Azuki.IUserInterface)">
            <summary>
            Moves caret to left.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.MoveDown(Sgry.Azuki.IUserInterface)">
            <summary>
            Moves caret down.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.MoveUp(Sgry.Azuki.IUserInterface)">
            <summary>
            Moves caret up.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.MoveToNextWord(Sgry.Azuki.IUserInterface)">
            <summary>
            Moves caret to next word.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.MoveToPrevWord(Sgry.Azuki.IUserInterface)">
            <summary>
            Moves caret to previous word.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.MoveToLineHead(Sgry.Azuki.IUserInterface)">
            <summary>
            Moves caret to line head.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.MoveToLineHeadSmart(Sgry.Azuki.IUserInterface)">
            <summary>
            Moves caret to the first non-whitespace char at the line.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.MoveToLineEnd(Sgry.Azuki.IUserInterface)">
            <summary>
            Moves caret to line end.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.MovePageDown(Sgry.Azuki.IUserInterface)">
            <summary>
            Moves caret to one page after.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.MovePageUp(Sgry.Azuki.IUserInterface)">
            <summary>
            Moves caret to one page before.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.MoveToFileHead(Sgry.Azuki.IUserInterface)">
            <summary>
            Moves caret to file head.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.MoveToFileEnd(Sgry.Azuki.IUserInterface)">
            <summary>
            Moves caret to file end.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.GoToMatchedBracket(Sgry.Azuki.IUserInterface)">
            <summary>
            Moves caret to the matched bracket.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.SelectToRight(Sgry.Azuki.IUserInterface)">
            <summary>
            Expands selection to right.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.SelectToLeft(Sgry.Azuki.IUserInterface)">
            <summary>
            Expands selection to left.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.SelectToDown(Sgry.Azuki.IUserInterface)">
            <summary>
            Expands selection down.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.SelectToUp(Sgry.Azuki.IUserInterface)">
            <summary>
            Expands selection up.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.SelectToNextWord(Sgry.Azuki.IUserInterface)">
            <summary>
            Expands selection to next word begin.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.SelectToPrevWord(Sgry.Azuki.IUserInterface)">
            <summary>
            Expands selection to previous word begin.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.SelectToLineHead(Sgry.Azuki.IUserInterface)">
            <summary>
            Expands selection to line head.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.SelectToLineHeadSmart(Sgry.Azuki.IUserInterface)">
            <summary>
            Expands selection to the first non-whitespace char at the line.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.SelectToLineEnd(Sgry.Azuki.IUserInterface)">
            <summary>
            Expands selection to line end.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.SelectToPageDown(Sgry.Azuki.IUserInterface)">
            <summary>
            Expands selection to one page after.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.SelectToPageUp(Sgry.Azuki.IUserInterface)">
            <summary>
            Expands selection to one page before.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.SelectToFileHead(Sgry.Azuki.IUserInterface)">
            <summary>
            Expands selection to file head.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.SelectToFileEnd(Sgry.Azuki.IUserInterface)">
            <summary>
            Expands selection to file end.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.RectSelectToRight(Sgry.Azuki.IUserInterface)">
            <summary>
            Expands rectangle selection to right.
            </summary>
            <remarks>
            <para>
            This action expands rectangle selection to right.
            If Azuki is not in rectangle selection mode,
            it automatically switches to rectangle selection mode.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Actions.RectSelectToLeft(Sgry.Azuki.IUserInterface)">
            <summary>
            Expands rectangle selection to left.
            </summary>
            <remarks>
            <para>
            This action expands rectangle selection to left.
            If Azuki is not in rectangle selection mode,
            it automatically switches to rectangle selection mode.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Actions.RectSelectToDown(Sgry.Azuki.IUserInterface)">
            <summary>
            Expands rectangle selection down.
            </summary>
            <remarks>
            <para>
            This action expands rectangle selection down.
            If Azuki is not in rectangle selection mode,
            it automatically switches to rectangle selection mode.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Actions.RectSelectToUp(Sgry.Azuki.IUserInterface)">
            <summary>
            Expands rectangle selection up.
            </summary>
            <remarks>
            <para>
            This action expands rectangle selection up.
            If Azuki is not in rectangle selection mode,
            it automatically switches to rectangle selection mode.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Actions.LineSelectToDown(Sgry.Azuki.IUserInterface)">
            <summary>
            Expands line selection down.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.LineSelectToUp(Sgry.Azuki.IUserInterface)">
            <summary>
            Expands line selection up.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Actions.SelectAll(Sgry.Azuki.IUserInterface)">
            <summary>
            Selects all text.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.AutoIndentHook">
            <summary>
            Hook delegate called every time a character was inserted.
            </summary>
            <param name="ui">User interface object such as AzukiControl.</param>
            <param name="ch">Character about to be inserted.</param>
            <returns>
            Whether this hook delegate successfully executed or not.
            If true, Azuki itself will input nothing.
            </returns>
        </member>
        <member name="T:Sgry.Azuki.AutoIndentHooks">
            <summary>
            Static class containing hook delegates for auto-indentation.
            </summary>
            <seealso cref="P:Sgry.Azuki.WinForms.AzukiControl.AutoIndentHook">AzukiControl.AutoIndentHook property</seealso>
        </member>
        <member name="F:Sgry.Azuki.AutoIndentHooks.GenericHook">
            <summary>
            Hook delegate to execute basic auto-indentation;
            indent same amount of spaces as the previous line.
            </summary>
            <remarks>
            <para>
            This member is a hook delegate to execute auto-indentation.
            This delegate just copies previous indentation characters
            on making a new line.
            </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.WinForms.AzukiControl.AutoIndentHook">AzukiControl.AutoIndentHook property</seealso>
        </member>
        <member name="F:Sgry.Azuki.AutoIndentHooks.CHook">
            <summary>
            Hook delegate to execute auto-indentation for C styled source code.
            </summary>
            <remarks>
            <para>
            This member is a hook delegate to execute auto-indentation for C styled source code.
            Here 'C style' means that curly brackets are used to enclose each logical block.
            </para>
            <para>
            Note that if user hits the Enter key on a line
            that ends with a closing curly bracket (<c> } </c>),
            newly generated line will be indented one more level
            by inserting additional indent characters.
            The additional indent characters will be chosen according to the value of
            <see cref="P:Sgry.Azuki.WinForms.AzukiControl.UsesTabForIndent">AzukiControl.UsesTabForIndent</see>
            property.
            </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.WinForms.AzukiControl.AutoIndentHook">AzukiControl.AutoIndentHook property</seealso>
            <seealso cref="P:Sgry.Azuki.WinForms.AzukiControl.UsesTabForIndent">AzukiControl.UsesTabForIndent property</seealso>
        </member>
        <member name="M:Sgry.Azuki.CaretMoveLogic.MoveCaret(Sgry.Azuki.CaretMoveLogic.CalcMethod,Sgry.Azuki.IUserInterface)">
            <summary>
            Moves caret to the index where the specified method calculates.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.CaretMoveLogic.SelectTo(Sgry.Azuki.CaretMoveLogic.CalcMethod,Sgry.Azuki.IUserInterface)">
            <summary>
            Expand selection to the index where the specified method calculates
            (selection anchor will not be changed).
            </summary>
        </member>
        <member name="M:Sgry.Azuki.CaretMoveLogic.Calc_Right(Sgry.Azuki.IView)">
            <summary>
            Calculate index of the location
            where the caret should move to after pressing "right" key.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.CaretMoveLogic.Calc_Left(Sgry.Azuki.IView)">
            <summary>
            Calculate index of the location
            where the caret should move to after pressing "left" key.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.CaretMoveLogic.Calc_Down(Sgry.Azuki.IView)">
            <summary>
            Calculate index of the location
            where the caret should move to after pressing "down" key.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.CaretMoveLogic.Calc_Up(Sgry.Azuki.IView)">
            <summary>
            Calculate index of the location
            where the caret should move to after pressing "up" key.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.CaretMoveLogic.Calc_NextWord(Sgry.Azuki.IView)">
            <summary>
            Calculate index of the next word.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.CaretMoveLogic.Calc_PrevWord(Sgry.Azuki.IView)">
            <summary>
            Calculate index of the previous word.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.CaretMoveLogic.Calc_LineHead(Sgry.Azuki.IView)">
            <summary>
            Calculate index of the first char of the line where caret is at.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.CaretMoveLogic.Calc_LineHeadSmart(Sgry.Azuki.IView)">
            <summary>
            Calculate index of the first non-whitespace char of the line where caret is at.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.CaretMoveLogic.Calc_LineEnd(Sgry.Azuki.IView)">
            <summary>
            Calculate index of the end location of the line where caret is at.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.CaretMoveLogic.Calc_FileHead(Sgry.Azuki.IView)">
            <summary>
            Calculate first index of the file.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.CaretMoveLogic.Calc_FileEnd(Sgry.Azuki.IView)">
            <summary>
            Calculate end index of the file.
            </summary>
        </member>
        <member name="T:Sgry.AssertException">
            <summary>
            Exception class for testable assertion.
            </summary>
        </member>
        <member name="T:Sgry.DebugUtl">
            <summary>
            Debug utilities.
            </summary>
        </member>
        <member name="M:Sgry.DebugUtl.Sleep(System.Int32)">
            <summary>
            Stops current thread for specified time.
            </summary>
        </member>
        <member name="P:Sgry.DebugUtl.Log">
            <summary>
            Log writer object that actually write just before the application ends.
            </summary>
        </member>
        <member name="P:Sgry.DebugUtl.PC">
            <summary>
            Gets system performance counter value in millisecond.
            </summary>
        </member>
        <member name="T:Sgry.AutoLogger">
            <summary>
            A logger for both .NET Framework and .NET Compact Framework.
            </summary>
        </member>
        <member name="M:Sgry.AutoLogger.Flush">
            <summary>
            Writes buffered data to file.
            </summary>
        </member>
        <member name="M:Sgry.AutoLogger.Write(System.String,System.Object[])">
            <summary>
            Writes message to a log file.
            </summary>
        </member>
        <member name="M:Sgry.AutoLogger.WriteLine(System.String,System.Object[])">
            <summary>
            Writes message to a log file and terminate the line.
            </summary>
        </member>
        <member name="M:Sgry.AutoLogger.WriteLineI(System.String,System.Object[])">
            <summary>
            Writes message to a log file and adds indent.
            </summary>
        </member>
        <member name="M:Sgry.AutoLogger.WriteLineU(System.String,System.Object[])">
            <summary>
            Writes message to a log file and adds unindent.
            </summary>
        </member>
        <member name="M:Sgry.AutoLogger.Indent">
            <summary>
            Increases indentation of log message.
            </summary>
        </member>
        <member name="M:Sgry.AutoLogger.Unindent">
            <summary>
            Decreases indentation of log message.
            </summary>
        </member>
        <member name="P:Sgry.AutoLogger.WritePID">
            <summary>
            Gets or sets whether process ID will be written in each log lines or not.
            </summary>
        </member>
        <member name="P:Sgry.AutoLogger.WriteTID">
            <summary>
            Gets or sets whether thread ID will be written in each log lines or not.
            </summary>
        </member>
        <member name="P:Sgry.AutoLogger.Realtime">
            <summary>
            Gets or sets whether written log lines are actually written to file instantly or not.
            </summary>
        </member>
        <member name="P:Sgry.AutoLogger.SecondOutput">
            <summary>
            Gets or sets additional message output target.
            </summary>
        </member>
        <member name="P:Sgry.AutoLogger.LogFilePath">
            <summary>
            Gets path of log file.
            </summary>
        </member>
        <member name="P:Sgry.AutoLogger.OldLogFilePath">
            <summary>
            Gets path of backup of old log file.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.DefaultWordProc">
            <summary>
            The only one built-in word processor
            which can handle Japanese kinsoku-shori.
            </summary>
            <remarks>
            <para>
            DefaultWordProc is the only one built-in word processor.
            This class provides
            word handling logic which is specially adapted for Japanese language
            including 'kinsoku shori;'
            special prohibition rule of word-wrapping used in Japanese.
            </para>
            <seealso cref="T:Sgry.Azuki.IWordProc">IWordProc interface</seealso>
            <seealso cref="P:Sgry.Azuki.Document.WordProc">Document.WordProc property</seealso>
            </remarks>
        </member>
        <member name="T:Sgry.Azuki.IWordProc">
            <summary>
            Interface of word processor objects that handles 'word' in Azuki.
            </summary>
            <remarks>
            <para>
            Word processor is used to detemrine boundary of words
            or to determine how words at right edge of text area should be wrapped.
            Typical usage of word processor is moving caret between words,
            selecting or deleting words, and line wrapping.
            </para>
            <para>
            Azuki provides only one built-in word processor -
            <see cref="T:Sgry.Azuki.DefaultWordProc">DefaultWordProc</see>.
            DefaultWordProc is used by default and is capable to handle
            Japanese kinsoku-shori and general word wrapping.
            If you need to change how Azuki recognizes words,
            implement an original word processor and then set it to
            <see cref="P:Sgry.Azuki.Document.WordProc">Document.WordProc</see>
            property.
            To implement a word processor,
            <see cref="T:Sgry.Azuki.DefaultWordProc">DefaultWordProc</see>
            can be used as a base class.
            </para>
            </remarks>
            <seealso cref="T:Sgry.Azuki.DefaultWordProc">DefaultWordProc class</seealso>
            <seealso cref="P:Sgry.Azuki.Document.WordProc">Document.WordProc property</seealso>
        </member>
        <member name="M:Sgry.Azuki.IWordProc.NextWordStart(Sgry.Azuki.Document,System.Int32)">
            <summary>
            Searches document for start position of a word.
            </summary>
            <param name="doc">The document in which to search.</param>
            <param name="startIndex">The index to start the search from.</param>
            <returns>Index of start position of a word if found, or length of the document if no word was found.</returns>
            <remarks>
            <para>
            This method searches <paramref name="doc"/> for a word
            between <paramref name="startIndex"/> and the end of document.
            If a word was found, this method returns
            the start position of the word, 
            or returns the length of the document if no word was found.
            </para>
            <para>
            All word processor implementations must meet the requirements next.
            </para>
            <list type="bullet">
            	<item>
            	returns <paramref name="startIndex"/>
            	if a word starts at <paramref name="startIndex"/>.
            	</item>
            	<item>
            	returns the length of document if no word was found.
            	</item>
            </list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="doc"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="startIndex"/> is less than 0 or greater than length of the document.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.IWordProc.NextWordEnd(Sgry.Azuki.Document,System.Int32)">
            <summary>
            Searches document for end position of a word.
            </summary>
            <param name="doc">The document in which to search.</param>
            <param name="startIndex">The index to start the search from.</param>
            <returns>Index of end position of a word if found, or length of the document if no word was found.</returns>
            <remarks>
            <para>
            This method searches <paramref name="doc"/> for a word
            between <paramref name="startIndex"/> and the end of document.
            If a word was found, this method returns
            the end position of the word, 
            or returns the length of the document if no word was found.
            </para>
            <para>
            All word processor implementations must meet the requirements next.
            </para>
            <list type="bullet">
            	<item>
            	returns <paramref name="startIndex"/>
            	if a word ends at <paramref name="startIndex"/>.
            	</item>
            	<item>
            	returns the length of document if no word was found.
            	</item>
            </list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="doc"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="startIndex"/> is less than 0 or greater than length of the document.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.IWordProc.PrevWordStart(Sgry.Azuki.Document,System.Int32)">
            <summary>
            Searches document backward for start position of a word.
            </summary>
            <param name="doc">The document in which to search.</param>
            <param name="startIndex">The index to start the search from.</param>
            <returns>Index of start position of a word if found, or 0 if no word was found.</returns>
            <remarks>
            <para>
            This method searches <paramref name="doc"/> for a word
            between <paramref name="startIndex"/> and the end of document.
            If a word was found, this method returns
            the start position of the word,
            or returns 0 if no word was found.
            </para>
            <para>
            All word processor implementations must meet the requirements next.
            </para>
            <list type="bullet">
            	<item>
            	returns <paramref name="startIndex"/>
            	if a word starts at <paramref name="startIndex"/>.
            	</item>
            	<item>
            	returns 0 if no word was found.
            	</item>
            </list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="doc"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="startIndex"/> is less than 0 or greater than length of the document.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.IWordProc.PrevWordEnd(Sgry.Azuki.Document,System.Int32)">
            <summary>
            Searches document backward for end position of a word.
            </summary>
            <param name="doc">The document in which to search.</param>
            <param name="startIndex">The index to start the search from.</param>
            <returns>Index of end position of a word if found, or length of the document if no word was found.</returns>
            <remarks>
            <para>
            This method searches <paramref name="doc"/> for a word
            between <paramref name="startIndex"/> and the end of document.
            If a word was found, this method returns
            the end position of the word, 
            or returns 0 if no word was found.
            </para>
            <para>
            All word processor implementations must meet the requirements next.
            </para>
            <list type="bullet">
            	<item>
            	returns <paramref name="startIndex"/>
            	if a word ends at <paramref name="startIndex"/>.
            	</item>
            	<item>
            	returns 0 if no word was found.
            	</item>
            </list>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="doc"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="startIndex"/> is less than 0 or greater than length of the document.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.IWordProc.HandleWordWrapping(Sgry.Azuki.Document,System.Int32)">
            <summary>
            Determines where a screen line should be wrapped at.
            </summary>
            <param name="doc">The document currently rendering.</param>
            <param name="index">The index of character which is to be drawn over the right edge of text area.</param>
            <returns>The index of the character which starts the next screen line.</returns>
            <remarks>
            <para>
            This method is used to determine where Azuki should wrap a screen line at.
            </para>
            <para>
            Azuki calls this method
            everytime the graphic of a screen line reaches to the right edge of the text area.
            If a valid index is returned from this method,
            the text line will be 'wrapped'
            - characters at the index and after will be drawn as a new screen line.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="doc"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than 0 or greater than length of the document.
            </exception>
        </member>
        <member name="P:Sgry.Azuki.IWordProc.EnableWordWrap">
            <summary>
            Gets or sets whether to avoid wrapping screen lines
            in the middle of an alphabet word or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IWordProc.EnableLineEndRestriction">
            <summary>
            Gets or sets whether to restrict characters which can end a screen line.
            </summary>
            <remarks>
            <para>
            If this property was set true,
            Azuki tries to avoid placing characters specified by
            <see cref="P:Sgry.Azuki.IWordProc.CharsForbiddenToEndLine">
            CharsForbiddenToEndLine property</see>
            at ends of a screen line.
            This is one of the restriction rules in kinsoku shori.
            </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.IWordProc.CharsForbiddenToEndLine">IWordProc.CharsForbiddenToEndLine property</seealso>
        </member>
        <member name="P:Sgry.Azuki.IWordProc.CharsForbiddenToEndLine">
            <summary>
            Gets or sets characters which are forbidden to end a screen line.
            </summary>
            <remarks>
            <para>
            This property is a set of characters.
            All characters included in the value
            will be avoided to be placed at the end of a screen line.
            </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.IWordProc.EnableLineEndRestriction">IWordProc.EnableLineEndRestriction property</seealso>
        </member>
        <member name="P:Sgry.Azuki.IWordProc.EnableLineHeadRestriction">
            <summary>
            Gets or sets whether to restrict characters which can start a screen line.
            </summary>
            <remarks>
            <para>
            If this property was set true,
            Azuki tries to avoid placing characters specified by
            <see cref="P:Sgry.Azuki.IWordProc.CharsForbiddenToStartLine">
            CharsForbiddenToStartLine property</see>
            at start of a screen line.
            This is one of the restriction rules in kinsoku shori.
            </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.IWordProc.CharsForbiddenToStartLine">IWordProc.CharsForbiddenToStartLine property</seealso>
        </member>
        <member name="P:Sgry.Azuki.IWordProc.CharsForbiddenToStartLine">
            <summary>
            Gets or sets characters which are forbidden to start a screen line.
            </summary>
            <remarks>
            <para>
            This property is a set of characters.
            All characters included in the value
            will be avoided to be placed at start of a screen line.
            </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.IWordProc.EnableLineHeadRestriction">IWordProc.EnableLineHeadRestriction property</seealso>
        </member>
        <member name="P:Sgry.Azuki.IWordProc.EnableCharacterHanging">
            <summary>
            Gets or sets whether to 'hang' specified characters on the end of screen lines.
            </summary>
            <remarks>
            <para>
            This property gets or sets whether to 'hang'
            specified characters on the end of screen lines.
            </para>
            <para>
            The term 'hang' here means placing a character beyond the end of screen line.
            Hanged character will be drawn out of text area
            and not be sent to next screen line.
            </para>
            <para>
            Which characters are hanged is determined by
            <see cref="P:Sgry.Azuki.IWordProc.CharsToBeHanged">CharsToBeHanged property</see>.
            To hang EOL code graphics, use 
            <see cref="P:Sgry.Azuki.IWordProc.EnableEolHanging">EnableEolHanging</see>
            instead.
            </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.IWordProc.CharsToBeHanged">IWordProc.CharsToBeHanged property</seealso>
            <seealso cref="P:Sgry.Azuki.IWordProc.EnableEolHanging">IWordProc.EnableEolHanging property</seealso>
        </member>
        <member name="P:Sgry.Azuki.IWordProc.CharsToBeHanged">
            <summary>
            Gets or sets characters which will be 'hanged' on a screen line.
            </summary>
            <remarks>
            <para>
            This property is a set of characters.
            All characters included in the value
            will be avoided to be placed at start of a screen line,
            and will be 'hanged.'
            The term 'hang' here means placing a character beyond the end of screen line.
            Hanged character will be drawn out of text area
            and will not be the starting character of the next screen line.
            </para>
            <para>
            Note that CR (U+000d) and LF (U+000a)
            must not be included in the value of this property.
            To hang graphics of CR, LF, or CR+LF, use
            <see cref="P:Sgry.Azuki.IWordProc.EnableEolHanging">EnableEolHanging</see>.
            </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.IWordProc.EnableCharacterHanging">IWordProc.EnableCharacterHanging property</seealso>
            <seealso cref="P:Sgry.Azuki.IWordProc.EnableEolHanging">IWordProc.EnableEolHanging property</seealso>
        </member>
        <member name="P:Sgry.Azuki.IWordProc.EnableEolHanging">
            <summary>
            Gets or sets whether to 'hang' EOL characters on the end of screen lines.
            </summary>
            <remarks>
            <para>
            This property gets or sets whether to 'hang'
            EOL graphics on the end of screen lines.
            </para>
            <para>
            The term 'hang' here means placing a character beyond the end of screen line.
            Hanged character will be drawn out of text area
            and will not be the starting character of the next screen line.
            </para>
            <para>
            To hang characters which is not EOL code, use 
            <see cref="P:Sgry.Azuki.IWordProc.EnableCharacterHanging">EnableCharacterHanging</see>
            instead.
            </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.IWordProc.EnableCharacterHanging">IWordProc.EnableCharacterHanging property</seealso>
        </member>
        <member name="M:Sgry.Azuki.DefaultWordProc.NextWordStart(Sgry.Azuki.Document,System.Int32)">
            <summary>
            Searches document for start position of a word.
            </summary>
            <param name="doc">The document in which to search.</param>
            <param name="startIndex">The index to start the search from.</param>
            <returns>Index of start position of a word if found, or length of the document if no word was found.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="doc"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="startIndex"/> is less than 0 or greater than length of the document.
            </exception>
            <seealso cref="M:Sgry.Azuki.IWordProc.NextWordStart(Sgry.Azuki.Document,System.Int32)">IWordProc.NextWordStart method</seealso>
        </member>
        <member name="M:Sgry.Azuki.DefaultWordProc.NextWordEnd(Sgry.Azuki.Document,System.Int32)">
            <summary>
            Searches document for end position of a word.
            </summary>
            <param name="doc">The document in which to search.</param>
            <param name="startIndex">The index to start the search from.</param>
            <returns>Index of end position of a word if found, or length of the document if no word was found.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="doc"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="startIndex"/> is less than 0 or greater than length of the document.
            </exception>
            <seealso cref="M:Sgry.Azuki.IWordProc.NextWordEnd(Sgry.Azuki.Document,System.Int32)">IWordProc.NextWordEnd method</seealso>
        </member>
        <member name="M:Sgry.Azuki.DefaultWordProc.PrevWordStart(Sgry.Azuki.Document,System.Int32)">
            <summary>
            Searches document backward for start position of a word.
            </summary>
            <param name="doc">The document in which to search.</param>
            <param name="startIndex">The index to start the search from.</param>
            <returns>Index of start position of a word if found, or 0 if no word was found.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="doc"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="startIndex"/> is less than 0 or greater than length of the document.
            </exception>
            <seealso cref="M:Sgry.Azuki.IWordProc.PrevWordStart(Sgry.Azuki.Document,System.Int32)">IWordProc.PrevWordStart method</seealso>
        </member>
        <member name="M:Sgry.Azuki.DefaultWordProc.PrevWordEnd(Sgry.Azuki.Document,System.Int32)">
            <summary>
            Searches document backward for end position of a word.
            </summary>
            <param name="doc">The document in which to search.</param>
            <param name="startIndex">The index to start the search from.</param>
            <returns>Index of end position of a word if found, or length of the document if no word was found.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="doc"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="startIndex"/> is less than 0 or greater than length of the document.
            </exception>
            <seealso cref="M:Sgry.Azuki.IWordProc.PrevWordEnd(Sgry.Azuki.Document,System.Int32)">IWordProc.PrevWordEnd method</seealso>
        </member>
        <member name="M:Sgry.Azuki.DefaultWordProc.HandleWordWrapping(Sgry.Azuki.Document,System.Int32)">
            <summary>
            Determines where a screen line should be wrapped at.
            </summary>
            <param name="doc">The document currently rendering.</param>
            <param name="index">The index of character which is to be drawn over the right edge of text area.</param>
            <returns>The index of the character which starts the next screen line.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="doc"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than 0 or greater than length of the document.
            </exception>
            <seealso cref="M:Sgry.Azuki.IWordProc.HandleWordWrapping(Sgry.Azuki.Document,System.Int32)">IWordProc.HandleWordWrapping method</seealso>
        </member>
        <member name="M:Sgry.Azuki.DefaultWordProc.ClassifyChar(Sgry.Azuki.Document,System.Int32)">
            <summary>
            Distinguishs character class and get classification delegate object for the class.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.DefaultWordProc.EnableWordWrap">
            <summary>
            Gets or sets whether to avoid wrapping screen lines
            in the middle of an alphabet word or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.DefaultWordProc.EnableLineEndRestriction">
            <summary>
            Gets or sets whether to restrict characters which can end a screen line.
            </summary>
            <remarks>
            <para>
            If this property was set true,
            Azuki tries to avoid placing characters specified by
            <see cref="P:Sgry.Azuki.DefaultWordProc.CharsForbiddenToEndLine">
            CharsForbiddenToEndLine property</see>
            at ends of a screen line.
            This is one of the restriction rules in kinsoku shori.
            </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.DefaultWordProc.CharsForbiddenToEndLine">DefaultWordProc.CharsForbiddenToEndLine property</seealso>
        </member>
        <member name="P:Sgry.Azuki.DefaultWordProc.CharsForbiddenToEndLine">
            <summary>
            Gets or sets characters which are forbidden to end a screen line.
            </summary>
            <remarks>
            <para>
            This property is a set of characters.
            All characters included in the value
            will be avoided to be placed at the end of a screen line.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Null was specified.</exception>
            <seealso cref="P:Sgry.Azuki.DefaultWordProc.EnableLineEndRestriction">DefaultWordProc.EnableLineEndRestriction property</seealso>
        </member>
        <member name="P:Sgry.Azuki.DefaultWordProc.EnableLineHeadRestriction">
            <summary>
            Gets or sets whether to restrict characters which can start a screen line.
            </summary>
            <remarks>
            <para>
            If this property was set true,
            Azuki tries to avoid placing characters specified by
            <see cref="P:Sgry.Azuki.DefaultWordProc.CharsForbiddenToStartLine">
            CharsForbiddenToStartLine property</see>
            at start of a screen line.
            This is one of the restriction rules in kinsoku shori.
            </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.DefaultWordProc.CharsForbiddenToStartLine">DefaultWordProc.CharsForbiddenToStartLine property</seealso>
        </member>
        <member name="P:Sgry.Azuki.DefaultWordProc.CharsForbiddenToStartLine">
            <summary>
            Gets or sets characters which are forbidden to start a screen line.
            </summary>
            <remarks>
            <para>
            This property is a set of characters.
            All characters included in the value
            will be avoided to be placed at start of a screen line.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Null was specified.</exception>
            <seealso cref="P:Sgry.Azuki.DefaultWordProc.EnableLineHeadRestriction">DefaultWordProc.EnableLineHeadRestriction property</seealso>
        </member>
        <member name="P:Sgry.Azuki.DefaultWordProc.EnableCharacterHanging">
            <summary>
            Gets or sets whether to 'hang' specified characters on the end of screen lines.
            </summary>
            <remarks>
            <para>
            This property gets or sets whether to 'hang'
            specified characters on the end of screen lines.
            </para>
            <para>
            The term 'hang' here means placing a character beyond the end of screen line.
            Hanged character will be drawn out of text area
            and not be sent to next screen line.
            </para>
            <para>
            Which characters are hanged is determined by
            <see cref="P:Sgry.Azuki.DefaultWordProc.CharsToBeHanged">CharsToBeHanged property</see>.
            To hang EOL code graphics, use 
            <see cref="P:Sgry.Azuki.DefaultWordProc.EnableEolHanging">EnableEolHanging</see>
            instead.
            </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.DefaultWordProc.CharsToBeHanged">DefaultWordProc.CharsToBeHanged property</seealso>
            <seealso cref="P:Sgry.Azuki.DefaultWordProc.EnableEolHanging">DefaultWordProc.EnableEolHanging property</seealso>
        </member>
        <member name="P:Sgry.Azuki.DefaultWordProc.CharsToBeHanged">
            <summary>
            Gets or sets characters which will be 'hanged' on a screen line.
            </summary>
            <remarks>
            <para>
            This property is a set of characters.
            All characters included in the value
            will be avoided to be placed at start of a screen line,
            and will be 'hanged.'
            The term 'hang' here means placing a character beyond the end of screen line.
            Hanged character will be drawn out of text area
            and will not be the starting character of the next screen line.
            </para>
            <para>
            Note that CR (U+000d) and LF (U+000a)
            must not be included in the value of this property.
            To hang graphics of CR, LF, or CR+LF, use
            <see cref="P:Sgry.Azuki.DefaultWordProc.EnableEolHanging">EnableEolHanging</see>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Null was specified.</exception>
            <exception cref="T:System.ArgumentException">Specified value contains one or more EOL characters.</exception>
            <seealso cref="P:Sgry.Azuki.DefaultWordProc.EnableCharacterHanging">DefaultWordProc.EnableCharacterHanging property</seealso>
            <seealso cref="P:Sgry.Azuki.DefaultWordProc.EnableEolHanging">DefaultWordProc.EnableEolHanging property</seealso>
        </member>
        <member name="P:Sgry.Azuki.DefaultWordProc.EnableEolHanging">
            <summary>
            Gets or sets whether to 'hang' EOL characters on the end of screen lines.
            </summary>
            <remarks>
            <para>
            This property gets or sets whether to 'hang'
            EOL graphics on the end of screen lines.
            </para>
            <para>
            The term 'hang' here means placing a character beyond the end of screen line.
            Hanged character will be drawn out of text area
            and will not be the starting character of the next screen line.
            </para>
            <para>
            To hang characters which is not EOL code, use 
            <see cref="P:Sgry.Azuki.DefaultWordProc.EnableCharacterHanging">EnableCharacterHanging</see>
            instead.
            </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.DefaultWordProc.EnableCharacterHanging">DefaultWordProc.EnableCharacterHanging property</seealso>
        </member>
        <member name="P:Sgry.Azuki.DefaultWordProc.KinsokuDepth">
            <summary>
            Gets or sets how many times a prohibition rule is applied to each screen line.
            </summary>
            <remarks>
            <para>
            DefaultWordProc executes kinsoku shori on character by character basis.
            This property determines how many times
            the prohibition rules are applied for each characters which ends a screen line.
            </para>
            <para>
            If prohibition rules on character by character basis
            were applied only once, there are many cases that cannot be handled with.
            For example, if an open parenthesis was included in
            <see cref="P:Sgry.Azuki.DefaultWordProc.CharsForbiddenToEndLine">
            CharsForbiddenToEndLine</see>
            and if a screen line ended with two open parentheses,
            applying kinsoku shori (line end restriction) once
            results pushing one open parenthesis to next screen line;
            and thus the screen line ends with an open parenthesis.
            Obviously this is not acceptable result of applying line end restriction.
            To solve this problem, DefaultWordProc applies rules multiple times.
            </para>
            <para>
            The default value of this property is 8.
            </para>
            </remarks>
        </member>
        <member name="T:Sgry.Azuki.CharClass">
            <summary>
            Class of characters for associating logical meaning for each tokens.
            </summary>
            <remarks>
            <para>
            CharClass enumeration specifies the class of characters.
            </para>
            <para>
            The 'class of characters' here is used to classify and associate
            logical meanings to each tokens in document.
            If the document is source code of some programming language,
            there are several types of tokens in it; string literals, comment blocks and so on.
            In this case, CharClass.String should be used to mark each string literals,
            CharClass.Comment should be used to mark each comment blocks/lines.
            If tokens were properly marked by appropriate char-classes,
            the document is programmatically accessible
            so Azuki (View objects) can render each token differently.
            </para>
            <para>
            To classify characters, use
            <see cref="M:Sgry.Azuki.Document.SetCharClass(System.Int32,Sgry.Azuki.CharClass)">Document.SetCharClass</see>
            method.
            </para>
            </remarks>
            <seealso cref="M:Sgry.Azuki.Document.SetCharClass(System.Int32,Sgry.Azuki.CharClass)">Document.SetCharClass method</seealso>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Normal">
            <summary>Normal character.</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Number">
            <summary>Number literal.</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.String">
            <summary>String.</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Comment">
            <summary>Comment.</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.DocComment">
            <summary>Document Comment.</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Keyword">
            <summary>Keyword.</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Keyword2">
            <summary>Additional keyword set.</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Keyword3">
            <summary>Another Additional keyword set.</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Macro">
            <summary>Macro (C/C++, C#, ...).</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Character">
            <summary>Character (C/C++, Java, ...).</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Type">
            <summary>Type (any).</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Regex">
            <summary>Regular expression literal (Perl, Javascript...).</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Annotation">
            <summary>Annotation (Java).</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Selecter">
            <summary>Selector (CSS).</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Property">
            <summary>Property name (CSS).</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Value">
            <summary>Value (CSS, ...).</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.ElementName">
            <summary>Element name (XML).</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Entity">
            <summary>Entity (XML).</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Attribute">
            <summary>Attribute (XML).</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.AttributeValue">
            <summary>Attribute value (XML).</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.EmbededScript">
            <summary>Embedded script block (XML).</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Delimiter">
            <summary>Delimiter.</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.CDataSection">
            <summary>CDATA section. (XML)</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.LatexCommand">
            <summary>LaTeX command. (LaTeX)</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.LatexBracket">
            <summary>Brackets used in LaTeX. (LaTeX)</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.LatexCurlyBracket">
            <summary>Curly brackets used in LaTeX. (LaTeX)</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.LatexEquation">
            <summary>Equation. (LaTeX)</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Heading1">
            <summary>Heading 1 (LaTeX, Wiki, HTML).</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Heading2">
            <summary>Heading 2 (LaTeX, Wiki, HTML).</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Heading3">
            <summary>Heading 3 (LaTeX, Wiki, HTML).</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Heading4">
            <summary>Heading 4 (LaTeX, Wiki, HTML).</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Heading5">
            <summary>Heading 5 (LaTeX, Wiki, HTML).</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Heading6">
            <summary>Heading 6 (LaTeX, Wiki, HTML).</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Function">
            <summary>Function (C, Java, ...)</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Class">
            <summary>Class (C++, Java, ...)</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Variable">
            <summary>Variable (Batch file, ...)</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.Label">
            <summary>Label (Batch file, ...)</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.AddedLine">
            <summary>New line (diff/patch file)</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.RemovedLine">
            <summary>Removed line (diff/patch file)</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.ChangedLine">
            <summary>Changed line (diff/patch file)</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.ChangeCommandLine">
            <summary>Change-command line (diff/patch file)</summary>
        </member>
        <member name="F:Sgry.Azuki.CharClass.IndexLine">
            <summary>Index line (diff/patch file)</summary>
        </member>
        <member name="T:Sgry.Azuki.Document">
            <summary>
            The document of the Azuki editor engine.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Document.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Document.GetLineDirtyState(System.Int32)">
            <summary>
            Gets dirty state of specified line.
            </summary>
            <param name="lineIndex">Index of the line that to get dirty state of.</param>
            <returns>Dirty state of the specified line.</returns>
            <remarks>
              <para>
              This method gets dirty state of specified line.
              Dirty state of lines will changed as below.
              </para>
              <list type="bullet">
                <item>
                  If a line was not modified yet, the dirty state of the line is
                  <see cref="T:Sgry.Azuki.LineDirtyState">LineDirtyState</see>.Clean.
                </item>
                <item>
                  If a line was modified, its dirty state will be changed to
                  <see cref="T:Sgry.Azuki.LineDirtyState">LineDirtyState</see>.Dirty
                </item>
                <item>
                  Setting false to
                  <see cref="P:Sgry.Azuki.Document.IsDirty">Document.IsDirty</see>
                  property will set all states of modified lines to
                  <see cref="T:Sgry.Azuki.LineDirtyState">LineDirtyState</see>.Cleaned.
                </item>
                <item>
                  Calling
                  <see cref="M:Sgry.Azuki.Document.ClearHistory">Document.ClearHistory</see>
                  to reset all states of lines to
                  <see cref="T:Sgry.Azuki.LineDirtyState">LineDirtyState</see>.Clean.
                </item>
              </list>
            </remarks>
            <seealso cref="T:Sgry.Azuki.LineDirtyState">LineDirtyState enum</seealso>
            <seealso cref="P:Sgry.Azuki.Document.IsDirty">Document.IsDirty property</seealso>
            <seealso cref="M:Sgry.Azuki.Document.ClearHistory">Document.ClearHistory method</seealso>
        </member>
        <member name="M:Sgry.Azuki.Document.GetCaretIndex(System.Int32@,System.Int32@)">
            <summary>
            Gets caret location by logical line/column index.
            </summary>
            <param name="lineIndex">line index of where the caret is at</param>
            <param name="columnIndex">column index of where the caret is at</param>
        </member>
        <member name="M:Sgry.Azuki.Document.SetCaretIndex(System.Int32,System.Int32)">
            <summary>
            Sets caret location by logical line/column index.
            Note that calling this method will release selection.
            </summary>
            <param name="lineIndex">new line index of where the caret is at</param>
            <param name="columnIndex">new column index of where the caret is at</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of valid range.</exception>
        </member>
        <member name="M:Sgry.Azuki.Document.SetSelection(System.Int32,System.Int32)">
            <summary>
            Sets selection range.
            </summary>
            <param name="anchor">new index of the selection anchor</param>
            <param name="caret">new index of the caret</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of valid range.</exception>
            <remarks>
              <para>
              This method sets selection range and invokes
              <see cref="E:Sgry.Azuki.Document.SelectionChanged">Document.SelectionChanged</see> event.
              If given index is at middle of an undividable character sequence such as surrogate pair,
              selection range will be automatically expanded to avoid dividing the it.
              </para>
              <para>
              This method always selects text as a sequence of character.
              To select text by lines or by rectangle, use
              <see cref="M:Sgry.Azuki.Document.SetSelection(System.Int32,System.Int32,Sgry.Azuki.IView)">other overload</see>
              method instead.
              </para>
            </remarks>
            <seealso cref="E:Sgry.Azuki.Document.SelectionChanged">Document.SelectionChanged event</seealso>
            <seealso cref="M:Sgry.Azuki.Document.SetSelection(System.Int32,System.Int32,Sgry.Azuki.IView)">Document.SetSelection method (another overloaded method)</seealso>
        </member>
        <member name="M:Sgry.Azuki.Document.SetSelection(System.Int32,System.Int32,Sgry.Azuki.IView)">
            <summary>
            Sets selection range.
            </summary>
            <param name="anchor">new index of the selection anchor.</param>
            <param name="caret">new index of the caret.</param>
            <param name="view">a View object to be used for calculating position/index conversion.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of valid range.</exception>
            <exception cref="T:System.ArgumentNullException">Parameter 'view' is null but current SelectionMode is not TextDataType.Normal.</exception>
            <remarks>
              <para>
              This method sets selection range and invokes
              <see cref="E:Sgry.Azuki.Document.SelectionChanged">Document.SelectionChanged</see> event.
              </para>
              <para>
              How text will be selected depends on the value of current
              <see cref="P:Sgry.Azuki.Document.SelectionMode">SelectionMode</see> as below.
              </para>
              <list type="bullet">
                <item>
                  <para>
                  If SelectionMode is TextDataType.Normal,
                  characters from <paramref name="anchor"/> to <paramref name="caret"/>
                  will be selected.
                  </para>
                  <para>
                  Note that if given index is at middle of an undividable character sequence such as surrogate pair,
                  selection range will be automatically expanded to avoid dividing it.
                  </para>
                </item>
                <item>
                  <para>
                  If SelectionMode is TextDataType.Line, lines between
                  the line containing <paramref name="anchor"/> position
                  and the line containing <paramref name="caret"/> position
                  will be selected.
                  </para>
                  <para>
                  Note that if caret is just at beginning of a line,
                  the line will not be selected.
                  </para>
                </item>
                <item>
                  <para>
                  If SelectionMode is TextDataType.Rectangle,
                  text covered by the rectangle which is graphically made by
                  <paramref name="anchor"/> position and <paramref name="caret"/> position
                  will be selected.
                  </para>
                </item>
              </list>
            </remarks>
            <seealso cref="E:Sgry.Azuki.Document.SelectionChanged">Document.SelectionChanged event</seealso>
            <seealso cref="P:Sgry.Azuki.Document.SelectionMode">Document.SelectionMode property</seealso>
            <seealso cref="T:Sgry.Azuki.TextDataType">TextDataType enum</seealso>
        </member>
        <member name="M:Sgry.Azuki.Document.GetSelection(System.Int32@,System.Int32@)">
            <summary>
            Gets range of current selection.
            Note that this method does not return [anchor, caret) pair but [begin, end) pair.
            </summary>
            <param name="begin">index of where the selection begins.</param>
            <param name="end">index of where the selection ends (selection do not includes the char at this index).</param>
        </member>
        <member name="M:Sgry.Azuki.Document.GetCharAt(System.Int32)">
            <summary>
            Gets a character at specified index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of valid range.</exception>
        </member>
        <member name="M:Sgry.Azuki.Document.GetWordAt(System.Int32)">
            <summary>
            Gets a word at specified index.
            </summary>
            <param name="index">The word at this index will be retrieved.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of valid range.</exception>
        </member>
        <member name="M:Sgry.Azuki.Document.GetWordAt(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets a word at specified index.
            </summary>
            <param name="index">The word at this index will be retrieved.</param>
            <param name="begin">The index of the char which starts the word.</param>
            <param name="end">The index of where the word ends.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of valid range.</exception>
        </member>
        <member name="M:Sgry.Azuki.Document.GetLineLengthFromCharIndex(System.Int32)">
            <summary>
            Gets length of the logical line
            which contains the specified char-index.
            </summary>
            <param name="charIndex">Length of the line which contains this index will be retrieved.</param>
            <returns>Length of the specified logical line in character count.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of valid range.</exception>
            <remarks>
              <para>
              This method retrieves length of logical line.
              Note that this method does not count EOL codes.
              </para>
            </remarks>
            <seealso cref="M:Sgry.Azuki.Document.GetLineLengthFromCharIndex(System.Int32,System.Boolean)">Document.GetLineLengthFromCharIndex(int, bool) method</seealso>
        </member>
        <member name="M:Sgry.Azuki.Document.GetLineLengthFromCharIndex(System.Int32,System.Boolean)">
            <summary>
            Gets length of the logical line
            which contains the specified char-index.
            </summary>
            <param name="charIndex">Length of the line which contains this index will be retrieved.</param>
            <param name="includesEolCode">Whether EOL codes should be count or not.</param>
            <returns>Length of the specified logical line in character count.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of valid range.</exception>
            <remarks>
              <para>
              This method retrieves length of logical line.
              Note that this method does not count EOL codes.
              </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Document.GetLineLength(System.Int32)">
            <summary>
            Gets length of the logical line.
            </summary>
            <param name="lineIndex">Index of the line of which to get the length.</param>
            <returns>Length of the specified line in character count.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of valid range.</exception>
            <remarks>
              <para>
              This method retrieves length of logical line.
              Note that this method does not count EOL codes.
              </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Document.GetLineLength(System.Int32,System.Boolean)">
            <summary>
            Gets length of the logical line.
            </summary>
            <param name="lineIndex">Index of the line of which to get the length.</param>
            <param name="includesEolCode">Whether EOL codes should be count or not.</param>
            <returns>Length of the specified line in character count.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of valid range.</exception>
            <remarks>
              <para>
              This method retrieves length of logical line.
              If <paramref name="includesEolCode"/> was true,
              this method count EOL code as line content.
              </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Document.GetLineContent(System.Int32)">
            <summary>
            Gets content of the logical line.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of valid range.</exception>
        </member>
        <member name="M:Sgry.Azuki.Document.GetLineContentWithEolCode(System.Int32)">
            <summary>
            Gets content of the logical line without trimming EOL code.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of valid range.</exception>
        </member>
        <member name="M:Sgry.Azuki.Document.GetTextInRange(System.Int32,System.Int32)">
            <summary>
            Gets text in the range [begin, end).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of valid range.</exception>
            <remarks>
              <para>
              If given index is at middle of an undividable character sequence such as surrogate pair,
              given range will be automatically expanded to avoid dividing the pair.
              </para>
              <para>
              If expanded range is needed, use <see cref="M:Sgry.Azuki.Document.GetTextInRangeRef(System.Int32@,System.Int32@)"/>.
              </para>
            </remarks>
            <seealso cref="M:Sgry.Azuki.Document.GetTextInRangeRef(System.Int32@,System.Int32@)"/>
        </member>
        <member name="M:Sgry.Azuki.Document.GetTextInRangeRef(System.Int32@,System.Int32@)">
            <summary>
            Gets text in the range [begin, end).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of valid range.</exception>
            <remarks>
              <para>
              If given index is at middle of an undividable character sequence such as surrogate pair,
              given range will be automatically expanded to avoid dividing the pair.
              </para>
              <para>
              This method returns the expanded range by setting parameter
              <paramref name="begin"/> and <paramref name="end"/>
              to actually used values.
              </para>
            </remarks>
            <seealso cref="M:Sgry.Azuki.Document.GetTextInRange(System.Int32,System.Int32)">Document.GetTextInRange(int, int) method</seealso>.
        </member>
        <member name="M:Sgry.Azuki.Document.GetTextInRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets text in the range [ (fromLineIndex, fromColumnIndex), (toLineIndex, toColumnIndex) ).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of valid range.</exception>
        </member>
        <member name="M:Sgry.Azuki.Document.GetCharClass(System.Int32)">
            <summary>
            Gets class of the character at given index.
            </summary>
            <param name="index">The index of character which class is to be determined.</param>
            <returns>The class of the character at specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of valid range.</exception>
        </member>
        <member name="M:Sgry.Azuki.Document.SetCharClass(System.Int32,Sgry.Azuki.CharClass)">
            <summary>
            Sets class of the character at given index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of valid range.</exception>
        </member>
        <member name="M:Sgry.Azuki.Document.Replace(System.String)">
            <summary>
            Replaces current selection.
            </summary>
            <exception cref="T:System.ArgumentNullException">Parameter text is null.</exception>
        </member>
        <member name="M:Sgry.Azuki.Document.Replace(System.String,System.Int32,System.Int32)">
            <summary>
            Replaces specified range [begin, end) of the content into the given string.
            </summary>
            <param name="text">specified range will be replaced with this text</param>
            <param name="begin">begin index of the range to be replaced</param>
            <param name="end">end index of the range to be replaced</param>
            <exception cref="T:System.ArgumentNullException">Parameter text is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of valid range.</exception>
        </member>
        <member name="M:Sgry.Azuki.Document.Mark(System.Int32,System.Int32,System.Int32)">
            <summary>
            Marks up specified text range.
            </summary>
            <param name="begin">The index of where the range begins.</param>
            <param name="end">The index of where the range ends.</param>
            <param name="markingID">ID of marking to be set.</param>
            <returns>Whether the operation changed previous marking data or not.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Parameter <paramref name="begin"/> or <paramref name="end"/> is out of valid range.
              - OR - Parameter <paramref name="markingID"/> is out of valid range.
            </exception>
            <exception cref="T:System.ArgumentException">
              Parameter <paramref name="begin"/> is equal or greater than <paramref name="end"/>.
              - OR - Parameter <paramref name="markingID"/> is not registered to Marking class.
            </exception>
            <remarks>
              <para>
              This method marks up a range of text with ID of 'marking'.
              </para>
              <para>
              For detail of marking feature, please refer to the document of
              <see cref="T:Sgry.Azuki.Marking"/> class.
              </para>
            </remarks>
            <seealso cref="M:Sgry.Azuki.Document.Unmark(System.Int32,System.Int32,System.Int32)">Document.Unmark method</seealso>
            <seealso cref="T:Sgry.Azuki.Marking">Marking class</seealso>
        </member>
        <member name="M:Sgry.Azuki.Document.Unmark(System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes specified type of marking information at specified range.
            </summary>
            <param name="begin">The index of where the range begins.</param>
            <param name="end">The index of where the range ends.</param>
            <param name="markingID">The ID of the marking to be removed.</param>
            <returns>Whether any marking data was removed or not.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Parameter <paramref name="begin"/> or <paramref name="end"/> is out of valid range.
              - OR - Parameter <paramref name="markingID"/> is out of valid range.
            </exception>
            <exception cref="T:System.ArgumentException">
              Parameter <paramref name="begin"/> is equal or greater than <paramref name="end"/>.
              - OR - Parameter <paramref name="markingID"/> is not registered to Marking class.
            </exception>
            <remarks>
              <para>
              This method scans range of [<paramref name="begin"/>, <paramref name="end"/>)
              and removes specified marking ID.
              </para>
              <para>
              For detail of marking feature, please refer to the document of
              <see cref="T:Sgry.Azuki.Marking"/> class.
              </para>
            </remarks>
            <seealso cref="T:Sgry.Azuki.Marking">Marking class</seealso>
            <seealso cref="M:Sgry.Azuki.Document.Mark(System.Int32,System.Int32,System.Int32)">Document.Mark method</seealso>
        </member>
        <member name="M:Sgry.Azuki.Document.GetMarkedRange(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets range of text part which includes specified index
            which is marked with specified ID.
            </summary>
            <param name="index">
              The text range including a character at this index will be retrieved.
            </param>
            <param name="markingID">
              The text range marked with this ID will be retrieved.
            </param>
            <param name="begin">
              When this method returns, contains the beginning index of the text range.
            </param>
            <param name="end">
              When this method returns, contains the ending index of the text range.
            </param>
            <returns>
              Whether a text range marked with specified marking ID was retrieved or not.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Parameter <paramref name="index"/> is out of valid range.
              - OR - Parameter <paramref name="markingID"/> is out of valid range.
            </exception>
            <exception cref="T:System.ArgumentException">
              Parameter <paramref name="markingID"/> is not registered in Marking class.
            </exception>
            <seealso cref="T:Sgry.Azuki.Marking">Marking class</seealso>
        </member>
        <member name="M:Sgry.Azuki.Document.GetMarkedText(System.Int32,System.Int32)">
            <summary>
            Gets text part marked with specified ID at specified index.
            </summary>
            <param name="index">The marked text part at this index will be retrieved.</param>
            <param name="markingID">The text part marked with this ID will be retrieved.</param>
            <returns>The text if found, otherwise null.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Parameter <paramref name="index"/> is out of valid range.
              - OR - Parameter <paramref name="markingID"/> is out of valid range.
            </exception>
            <exception cref="T:System.ArgumentException">
              Parameter <paramref name="markingID"/> is not registered in Marking class.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.Document.IsMarked(System.Int32,System.Int32)">
            <summary>
            Determine whether specified index is marked with specified marking ID or not.
            </summary>
            <param name="index">The index to examine.</param>
            <param name="markingID">
              Whether specified index is marked with this ID will be retrieved.
            </param>
            <returns>
              Whether a character at <paramref name="index"/> is
              marked with <paramref name="markingID"/> or not.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Parameter <paramref name="index"/> is out of valid range.
              - OR - Parameter <paramref name="markingID"/> is out of valid range.
            </exception>
            <exception cref="T:System.ArgumentException">
              Parameter <paramref name="markingID"/> is not registered in Marking class.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.Document.GetMarkingsAt(System.Int32)">
            <summary>
            List up all markings at specified index and returns their IDs as an array.
            </summary>
            <param name="index">The index of the position to examine.</param>
            <returns>Array of marking IDs if any marking found, or an empty array if no marking found.</returns>
            <remarks>
              <para>
              This method does not throw exception
              but returns an empty array if end index of the document
              (index equal to length of document) was specified.
              </para>
            </remarks>
            <seealso cref="T:Sgry.Azuki.Marking">Marking class</seealso>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Parameter <paramref name="index"/> is out of valid range.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.Document.GetMarkingBitMaskAt(System.Int32)">
            <summary>
            Gets marking IDs at specified index as a bit mask (internal representation).
            </summary>
            <param name="index">The marking IDs put on the character at this index will be returned.</param>
            <returns>Bit mask represents markings which covers the character.</returns>
            <remarks>
              <para>
              This method gets a bit-masked integer representing
              which marking IDs are put on that position.
              </para>
              <para>
              For detail of marking feature, please refer to the document of
              <see cref="T:Sgry.Azuki.Marking"/> class.
              </para>
            </remarks>
            <seealso cref="T:Sgry.Azuki.Marking">Marking class</seealso>
            <seealso cref="M:Sgry.Azuki.Document.GetMarkingsAt(System.Int32)">Document.GetMarkingsAt method</seealso>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Parameter <paramref name="index"/> is out of valid range.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.Document.BeginUndo">
            <summary>
            Begins grouping up editing actions into a single UNDO action.
            </summary>
            <remarks>
              <para>
              Call of this method creates a new group of actions in UNDO history
              and collect modification to this document until call of
              <see cref="M:Sgry.Azuki.Document.EndUndo">EndUndo method</see>.
              </para>
              <para>
              If no actions has been executed between call of BeginUndo and EndUndo,
              an UNDO action which do nothing will be stored in UNDO history.
              After call of this method, this method does nothing until EndUndo method was called
              so calling this method multiple times in a row happens nothing.
              </para>
            </remarks>
            <seealso cref="M:Sgry.Azuki.Document.EndUndo">Document.EndUndo method</seealso>
        </member>
        <member name="M:Sgry.Azuki.Document.EndUndo">
            <summary>
            Ends grouping up editing actions.
            </summary>
            <remarks>
              <para>
              Call of this method stops grouping up editing actions.
              After call of this method,
              this method does nothing until
              <see cref="M:Sgry.Azuki.Document.BeginUndo">BeginUndo</see>.
              method was called.
              </para>
            </remarks>
            <seealso cref="M:Sgry.Azuki.Document.BeginUndo">Document.BeginUndo method</seealso>
        </member>
        <member name="M:Sgry.Azuki.Document.Undo">
            <summary>
            Executes UNDO.
            </summary>
            <remarks>
              <para>
              This method reverses the effect of lastly done modification to this document.
              If there is no UNDOable action, this method will do nothing.
              </para>
              <para>
              To get whether any UNDOable action exists or not,
              use <see cref="P:Sgry.Azuki.Document.CanUndo">CanUndo</see> property.
              </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.Document.CanUndo">Document.CanUndo property</seealso>
        </member>
        <member name="M:Sgry.Azuki.Document.ClearHistory">
            <summary>
            Clears all stacked edit histories.
            </summary>
            <remarks>
              <para>
              This method clears all editing histories for
              UNDO or REDO action in this document.
              </para>
              <para>
              Note that calling this method will not invalidate graphics.
              To update graphic, use IUserInterface.ClearHistory or update manually.
              </para>
            </remarks>
            <seealso cref="M:Sgry.Azuki.IUserInterface.ClearHistory">IUserInterface.ClearHistory method</seealso>
        </member>
        <member name="M:Sgry.Azuki.Document.Redo">
            <summary>
            Executes REDO.
            </summary>
            <remarks>
              <para>
              This method 'replays' the lastly UNDOed action if available.
              If there is no REDOable action, this method will do nothing.
              </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Document.GetLineHeadIndex(System.Int32)">
            <summary>
            Gets index of the first character in specified logical line.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Specified index is out of valid range.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.Document.GetLineHeadIndexFromCharIndex(System.Int32)">
            <summary>
            Gets index of the first char in the logical line
            which contains the specified char-index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Specified index is out of valid range.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.Document.GetLineEndIndexFromCharIndex(System.Int32)">
            <summary>
            Gets index of the end position of the line
            which contains a character at the specified index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Specified index is out of valid range.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.Document.GetLineIndexFromCharIndex(System.Int32)">
            <summary>
            Calculates logical line index from char-index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Specified index is out of valid range.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.Document.GetLineColumnIndexFromCharIndex(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Calculates logical line/column index from char-index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Specified index is out of valid range.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.Document.GetCharIndexFromLineColumnIndex(System.Int32,System.Int32)">
            <summary>
            Calculates char-index from logical line/column index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Specified index is out of valid range.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.Document.FindNext(System.String,System.Int32)">
            <summary>
            Finds a text pattern.
            </summary>
            <param name="value">The String to find.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>Search result object if found, otherwise null if not found.</returns>
            <exception cref="T:System.ArgumentNullException">
              Parameter <paramref name="value"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Parameter <paramref name="startIndex"/> is greater than character count in this document.
            </exception>
            <remarks>
              <para>
              This method finds the first occurrence of the pattern for the range of
              [<paramref name="startIndex"/>, EOD) where EOD means the end-of-document.
              The text matching process continues for the document end
              and does not stop at line ends nor null-characters.
              If the search range should end before EOD,
              use <see cref="M:Sgry.Azuki.Document.FindNext(System.String,System.Int32,System.Int32)">
              other overload method</see>.
              </para>
              <para>
              This method searches the text pattern case-sensitively.
              If the matching should be case-insensitively,
              use <see cref="M:Sgry.Azuki.Document.FindNext(System.String,System.Int32,System.Boolean)">
              other overload method</see>.
              </para>
              <para>
              If parameter <paramref name="value"/> is an empty string,
              search result will be the range of
              [<paramref name="startIndex"/>, <paramref name="startIndex"/>).
              </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Document.FindNext(System.String,System.Int32,System.Int32)">
            <summary>
            Finds a text pattern.
            </summary>
            <param name="value">The String to find.</param>
            <param name="begin">The search starting position.</param>
            <param name="end">The search terminating position.</param>
            <returns>Search result object if found, otherwise null if not found.</returns>
            <exception cref="T:System.ArgumentNullException">
              Parameter <paramref name="value"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Parameter <paramref name="begin"/> or <paramref name="end"/> is
              out of valid range.
            </exception>
            <remarks>
              <para>
              This method finds the first occurrence of the pattern in the range of
              [<paramref name="begin"/>, <paramref name="end"/>).
              The text matching process continues for the document end
              and does not stop at line ends nor null-characters.
              </para>
              <para>
              This method searches the text pattern case-sensitively.
              If the matching should be case-insensitively,
              use <see cref="M:Sgry.Azuki.Document.FindNext(System.String,System.Int32,System.Int32,System.Boolean)">
              other overload method</see>.
              </para>
              <para>
              If parameter <paramref name="value"/> is an empty string,
              search result will be the range of
              [<paramref name="startIndex"/>, <paramref name="startIndex"/>).
              </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Document.FindNext(System.String,System.Int32,System.Boolean)">
            <summary>
            Finds a text pattern.
            </summary>
            <param name="value">The String to find.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="matchCase">Whether the search should be case-sensitive or not.</param>
            <returns>Search result object if found, otherwise null if not found.</returns>
            <exception cref="T:System.ArgumentNullException">
              Parameter <paramref name="value"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Parameter <paramref name="startIndex"/> is greater than character count in this document.
            </exception>
            <remarks>
              <para>
              This method finds the first occurrence of the pattern for the range of
              [<paramref name="startIndex"/>, EOD) where EOD means the end-of-document.
              The text matching process continues for the document end
              and does not stop at line ends nor null-characters.
              If the search range should end before EOD,
              use <see cref="M:Sgry.Azuki.Document.FindNext(System.String,System.Int32,System.Int32,System.Boolean)">
              other overload method</see>.
              </para>
              <para>
              If <paramref name="matchCase"/> is true,
              the text pattern will be matched case-sensitively
              otherwise case will be ignored.
              </para>
              <para>
              If parameter <paramref name="value"/> is an empty string,
              search result will be the range of
              [<paramref name="startIndex"/>, <paramref name="startIndex"/>).
              </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Document.FindNext(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Finds a text pattern.
            </summary>
            <param name="value">The string to find.</param>
            <param name="begin">The search starting position.</param>
            <param name="end">The search terminating position.</param>
            <param name="matchCase">Whether the search should be case-sensitive or not.</param>
            <returns>Search result object if found, otherwise null if not found.</returns>
            <exception cref="T:System.ArgumentNullException">
              Parameter <paramref name="value"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Parameter <paramref name="begin"/> or <paramref name="end"/> is
              out of valid range.
            </exception>
            <remarks>
              <para>
              This method finds the first occurrence of the pattern in the range of
              [<paramref name="begin"/>, <paramref name="end"/>).
              The text matching process continues for the index specified by <paramref name="end"/> parameter
              and does not stop at line ends nor null-characters.
              </para>
              <para>
              If <paramref name="matchCase"/> is true,
              the text pattern will be matched case-sensitively
              otherwise case will be ignored.
              </para>
              <para>
              If parameter <paramref name="value"/> is an empty string,
              search result will be the range of [<paramref name="begin"/>, <paramref name="begin"/>).
              </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Document.FindNext(System.Text.RegularExpressions.Regex,System.Int32)">
            <summary>
            Finds a text pattern by regular expression.
            </summary>
            <param name="regex">A Regex object expressing the text pattern.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>Search result object if found, otherwise null if not found.</returns>
            <exception cref="T:System.ArgumentException">
              Parameter <paramref name="regex"/> is a Regex object with RegexOptions.RightToLeft option.
            </exception>
            <exception cref="T:System.ArgumentNullException">
              Parameter <paramref name="regex"/> is null.
            </exception>
            <remarks>
              <para>
              This method finds a text pattern
              expressed by a regular expression in the range of
              [<paramref name="startIndex"/>, EOD) where EOD means the end-of-document.
              The text matching process continues for the index
              specified with the <paramref name="end"/> parameter
              and does not stop at line ends nor null-characters.
              If the search range should end before EOD,
              use <see cref="M:Sgry.Azuki.Document.FindNext(System.Text.RegularExpressions.Regex,System.Int32,System.Int32)">
              other overload method</see>.
              </para>
              <para>
              <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
              RegexOptions.RightToLeft</see> option MUST NOT be set to
              the Regex object given as parameter <paramref name="regex"/>
              otherwise an ArgumentException will be thrown.
              </para>
              <para>
              If an empty string was used for a regular expression pattern,
              search result will be the range of [<paramref name="startIndex"/>, <paramref name="startIndex"/>).
              The text matching process continues for the end of document
              and does not stop at line ends nor null-characters.
              </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Document.FindNext(System.Text.RegularExpressions.Regex,System.Int32,System.Int32)">
            <summary>
            Finds a text pattern by regular expression.
            </summary>
            <param name="regex">A Regex object expressing the text pattern to find.</param>
            <param name="begin">The begin index of the search range.</param>
            <param name="end">The end index of the search range.</param>
            <returns>Search result object if found, otherwise null if not found.</returns>
            <exception cref="T:System.ArgumentException">
              Parameter <paramref name="regex"/> is a Regex object with RegexOptions.RightToLeft option.
            </exception>
            <exception cref="T:System.ArgumentNullException">
              Parameter <paramref name="regex"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Parameter <paramref name="begin"/> or <paramref name="end"/> is out of valid range.
            </exception>
            <remarks>
              <para>
              This method finds the first ocurrence of a pattern
              expressed by a regular expression in the range of
              [<paramref name="begin"/>, <paramref name="end"/>).
              The text matching process continues for the index
              specified with the <paramref name="end"/> parameter
              and does not stop at line ends nor null-characters.
              </para>
              <para>
              <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
              RegexOptions.RightToLeft</see> option MUST NOT be set to
              the Regex object given as parameter <paramref name="regex"/>
              otherwise an ArgumentException will be thrown.
              </para>
              <para>
              If an empty string was used for a regular expression pattern,
              search result will be the range of [<paramref name="begin"/>, <paramref name="begin"/>).
              </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Document.FindPrev(System.String,System.Int32)">
            <summary>
            Finds a text pattern backward.
            </summary>
            <param name="value">The string to find.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>Search result object if found, otherwise null if not found.</returns>
            <exception cref="T:System.ArgumentNullException">
              Parameter <paramref name="value"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Parameter <paramref name="startIndex"/> is out of valid range.
            </exception>
            <remarks>
              <para>
              This method finds the last occurrence of the pattern in the range
              of [0, <paramref name="startIndex"/>).
              The text matching process continues for the document head
              and does not stop at line ends nor null-characters.
              If the search range should end before document head,
              use <see cref="M:Sgry.Azuki.Document.FindPrev(System.String,System.Int32,System.Int32)">
              other overload method</see>.
              </para>
              <para>
              This method searches the text pattern case-sensitively.
              If the matching should be case-insensitively,
              use <see cref="M:Sgry.Azuki.Document.FindPrev(System.String,System.Int32,System.Boolean)">
              other overload method</see>.
              </para>
              <para>
              If parameter <paramref name="value"/> is an empty string,
              search result will be the range of [<paramref name="startIndex"/>, <paramref name="startIndex"/>).
              </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Document.FindPrev(System.String,System.Int32,System.Boolean)">
            <summary>
            Finds a text pattern backward.
            </summary>
            <param name="value">The string to find.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="matchCase">Whether the search should be case-sensitive or not.</param>
            <returns>Search result object if found, otherwise null if not found.</returns>
            <exception cref="T:System.ArgumentNullException">
              Parameter <paramref name="value"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Parameter <paramref name="startIndex"/> is out of valid range.
            </exception>
            <remarks>
              <para>
              This method finds the last occurrence of the pattern in the range
              of [0, <paramref name="startIndex"/>).
              The text matching process continues for the document head
              and does not stop at line ends nor null-characters.
              If the search range should end before document head,
              use <see cref="M:Sgry.Azuki.Document.FindPrev(System.String,System.Int32,System.Int32)">
              other overload method</see>.
              </para>
              <para>
              If <paramref name="matchCase"/> is true,
              the text pattern will be matched case-sensitively
              otherwise case will be ignored.
              </para>
              <para>
              If parameter <paramref name="value"/> is an empty string,
              search result will be the range of [<paramref name="startIndex"/>, <paramref name="startIndex"/>).
              </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Document.FindPrev(System.String,System.Int32,System.Int32)">
            <summary>
            Finds a text pattern backward.
            </summary>
            <param name="value">The string to find.</param>
            <param name="begin">The begin index of the search range.</param>
            <param name="end">The end index of the search range.</param>
            <returns>Search result object if found, otherwise null if not found.</returns>
            <exception cref="T:System.ArgumentNullException">
              Parameter <paramref name="value"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Parameter <paramref name="begin"/> or <paramref name="end"/> is out of valid range.
            </exception>
            <remarks>
              <para>
              This method finds the last occurrence of the pattern in the range
              of [<paramref name="begin"/>, <paramref name="end"/>).
              The text matching process continues for the document head
              and does not stop at line ends nor null-characters.
              If the search range should end before document head,
              use <see cref="M:Sgry.Azuki.Document.FindPrev(System.String,System.Int32,System.Int32)">
              other overload method</see>.
              </para>
              <para>
              This method searches the text pattern case-sensitively.
              If the matching should be case-insensitively,
              use <see cref="M:Sgry.Azuki.Document.FindPrev(System.String,System.Int32,System.Int32,System.Boolean)">
              other overload method</see>.
              </para>
              <para>
              If parameter <paramref name="value"/> is an empty string,
              search result will be the range of [<paramref name="startIndex"/>, <paramref name="startIndex"/>).
              </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Document.FindPrev(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Finds a text pattern backward.
            </summary>
            <param name="value">The string to find.</param>
            <param name="begin">The begin index of the search range.</param>
            <param name="end">The end index of the search range.</param>
            <param name="matchCase">Whether the search should be case-sensitive or not.</param>
            <returns>Search result object if found, otherwise null if not found.</returns>
            <exception cref="T:System.ArgumentNullException">
              Parameter <paramref name="value"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Parameter <paramref name="begin"/> or <paramref name="end"/> is out of valid range.
            </exception>
            <remarks>
              <para>
              This method finds the last occurrence of the pattern in the range of
              [<paramref name="begin"/>, <paramref name="end"/>).
              The text matching process continues for the index specified by <paramref name="begin"/> parameter
              and does not stop at line ends nor null-characters.
              </para>
              <para>
              If <paramref name="matchCase"/> is true,
              the text pattern will be matched case-sensitively
              otherwise case will be ignored.
              </para>
              <para>
              If parameter <paramref name="value"/> is an empty string,
              search result will be a range of [<paramref name="end"/>, <paramref name="end"/>).
              </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Document.FindPrev(System.Text.RegularExpressions.Regex,System.Int32)">
            <summary>
            Finds a text pattern backward by regular expression.
            </summary>
            <param name="regex">A Regex object expressing the text pattern.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>Search result object if found, otherwise null if not found.</returns>
            <exception cref="T:System.ArgumentException">
              Parameter <paramref name="regex"/> is a Regex object without RegexOptions.RightToLeft option.
            </exception>
            <exception cref="T:System.ArgumentNullException">
              Parameter <paramref name="regex"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Parameter <paramref name="startIndex"/> is out of valid range.
            </exception>
            <remarks>
              <para>
              This method finds the last occurrence of a pattern
              expressed by a regular expression in the range of
              [0, <paramref name="startIndex"/>).
              The text matching process continues for the document head
              and does not stop at line ends nor null-characters.
              If the search range should end before EOD,
              use <see cref="M:Sgry.Azuki.Document.FindPrev(System.Text.RegularExpressions.Regex,System.Int32,System.Int32)">
              other overload method</see>.
              </para>
              <para>
              <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
              RegexOptions.RightToLeft</see> option MUST be set to
              the Regex object given as parameter <paramref name="regex"/>
              otherwise an ArgumentException will be thrown.
              </para>
              <para>
              If an empty string was used for a regular expression pattern,
              search result will be a range of [<paramref name="end"/>, <paramref name="end"/>).
              </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Document.FindPrev(System.Text.RegularExpressions.Regex,System.Int32,System.Int32)">
            <summary>
            Finds a text pattern backward by regular expression.
            </summary>
            <param name="regex">A Regex object expressing the text pattern.</param>
            <param name="begin">The begin index of the search range.</param>
            <param name="end">The end index of the search range.</param>
            <returns>Search result object if found, otherwise null if not found.</returns>
            <exception cref="T:System.ArgumentException">
              Parameter <paramref name="regex"/> is a Regex object without RegexOptions.RightToLeft option.
            </exception>
            <exception cref="T:System.ArgumentNullException">
              Parameter <paramref name="regex"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Parameter <paramref name="begin"/> or <paramref name="end"/> is out of valid range.
            </exception>
            <remarks>
              <para>
              This method finds the last occurrence of a pattern
              expressed by a regular expression in the range of
              [<paramref name="begin"/>, <paramref name="end"/>).
              The text matching process continues for the index
              specified with the <paramref name="begin"/> parameter
              and does not stop at line ends nor null-characters.
              </para>
              <para>
              <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
              RegexOptions.RightToLeft</see> option MUST be set to
              the Regex object given as parameter <paramref name="regex"/>
              otherwise an ArgumentException will be thrown.
              </para>
              <para>
              If an empty string was used for a regular expression pattern,
              search result will be a range of [<paramref name="end"/>, <paramref name="end"/>).
              </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Document.FindMatchedBracket(System.Int32)">
            <summary>
            Finds matched bracket from specified index.
            </summary>
            <param name="index">The index to start searching matched bracket.</param>
            <returns>Index of the matched bracket if found. Otherwise -1.</returns>
            <remarks>
              <para>
              This method searches the matched bracket from specified index.
              If the character at specified index was not a sort of bracket,
              or if specified index points to a character
              which has no meaning on grammar (such as comment block, string literal, etc.),
              this method returns -1.
              </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Document.FindMatchedBracket(System.Int32,System.Int32)">
            <summary>
            Finds matched bracket from specified index.
            </summary>
            <param name="index">The index to start searching matched bracket.</param>
            <param name="maxSearchLength">Maximum number of characters to search matched bracket for.</param>
            <returns>Index of the matched bracket if found. Otherwise -1.</returns>
            <remarks>
              <para>
              This method searches the matched bracket from specified index.
              If the character at specified index was not a sort of bracket,
              or if specified index points to a character
              which has no meaning on grammar (such as comment block, string literal, etc.),
              this method returns -1.
              </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Document.IsCDATA(System.Int32)">
            <summary>
            Gets whether the character at specified index
            is just a data without meaning on grammar.
            </summary>
            <param name="index">The index of the character to examine.</param>
            <returns>Whether the character is part of a character data or not.</returns>
            <remarks>
              <para>
              This method gets whether the character at specified index
              is just a character data without meaning on grammar.
              'Character data' here means text data which is not a part of the grammar.
              Example of character data is comment or string literal in programming languages.
              </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Document.NextGraphemeClusterIndex(System.Int32)">
            <summary>
            Gets index of next grapheme cluster.
            </summary>
            <param name="index">The index to start the search from.</param>
            <returns>The index of the character which starts next grapheme cluster.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Parameter '<paramref name="index"/>' is out of valid range.</exception>
            <remarks>
              <para>
              This method searches document for a grapheme cluster
              from given <paramref name="index"/> forward.
              Note that this method always return an index greater than given '<paramref name="index"/>'.
              </para>
              <para>
              'Grapheme cluster' is a sequence of characters
              which consists one 'user perceived character'
              such as sequence of U+0041 and U+0300; a capital 'A' with grave (À).
              In most cases, such sequence should not be divided unless user wishes to do so.
              </para>
              <para>
              This method determines an index pointing the middle of character sequences next as undividable:
              </para>
              <list type="bullet">
                <item>CR+LF</item>
                <item>Surrogate pair</item>
                <item>Combining character sequence</item>
              </list>
            </remarks>
            <seealso cref="M:Sgry.Azuki.Document.PrevGraphemeClusterIndex(System.Int32)">Document.PrevGraphemeClusterIndex method</seealso>
            <seealso cref="M:Sgry.Azuki.Document.IsNotDividableIndex(System.Int32)">Document.IsNotDividableIndex method</seealso>
        </member>
        <member name="M:Sgry.Azuki.Document.PrevGraphemeClusterIndex(System.Int32)">
            <summary>
            Gets index of previous grapheme cluster.
            </summary>
            <param name="index">The index to start the search from.</param>
            <returns>The index of the character which starts previous grapheme cluster.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Parameter '<paramref name="index"/>' is out of valid range.</exception>
            <remarks>
              <para>
              This method searches document for a grapheme cluster
              from given <paramref name="index"/> backward.
              Note that this method always return an index less than given '<paramref name="index"/>'.
              </para>
              <para>
              'Grapheme cluster' is a sequence of characters
              which consists one 'user perceived character'
              such as sequence of U+0041 and U+0300; a capital 'A' with grave (À).
              In most cases, such sequence should not be divided unless user wishes to do so.
              </para>
              <para>
              This method determines an index pointing the middle of character sequences next as undividable:
              </para>
              <list type="bullet">
                <item>CR+LF</item>
                <item>Surrogate pair</item>
                <item>Combining character sequence</item>
              </list>
            </remarks>
            <seealso cref="M:Sgry.Azuki.Document.PrevGraphemeClusterIndex(System.Int32)">Document.PrevGraphemeClusterIndex method</seealso>
            <seealso cref="M:Sgry.Azuki.Document.IsNotDividableIndex(System.Int32)">Document.IsNotDividableIndex method</seealso>
        </member>
        <member name="M:Sgry.Azuki.Document.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets content enumerator.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Document.GetEnumerator">
            <summary>
            Gets content enumerator.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Document.IsNotDividableIndex(System.Int32)">
            <summary>
            Determines whether text can not be divided at given index or not.
            </summary>
            <param name="index">The index to determine whether it points to middle of an undividable character sequence or not.</param>
            <returns>Whether charcter sequence can not be divided at the index or not.</returns>
            <remarks>
              <para>
              This method determines whether text can not be divided at given index or not.
              To seek document through grapheme cluster by grapheme cluster,
              please consider to use
              <see cref="M:Sgry.Azuki.Document.NextGraphemeClusterIndex(System.Int32)">Document.NextGraphemeClusterIndex method</see>
              or
              <see cref="M:Sgry.Azuki.Document.PrevGraphemeClusterIndex(System.Int32)">Document.PrevGraphemeClusterIndex method</see>.
              </para>
              <para>
              This method determines an index pointing the middle of character sequences next as undividable:
              </para>
              <para>
              'Grapheme cluster' is a sequence of characters
              which consists one 'user perceived character'
              such as sequence of U+0041 and U+0300; a capital 'A' with grave (À).
              In most cases, such sequence should not be divided unless user wishes to do so.
              </para>
              <list type="bullet">
                <item>CR+LF</item>
                <item>Surrogate pair</item>
                <item>Combining character sequence</item>
              </list>
            </remarks>
            <seealso cref="M:Sgry.Azuki.Document.NextGraphemeClusterIndex(System.Int32)">Document.NextGraphemeClusterIndex method</seealso>
            <seealso cref="M:Sgry.Azuki.Document.PrevGraphemeClusterIndex(System.Int32)">Document.PrevGraphemeClusterIndex method</seealso>
        </member>
        <member name="M:Sgry.Azuki.Document.IsNotDividableIndex(System.String,System.Int32)">
            <summary>
            Determines whether text can not be divided at given index or not.
            </summary>
            <param name="text">The text to be examined.</param>
            <param name="index">The index to determine whether it points to middle of an undividable character sequence or not.</param>
            <remarks>
              <para>
              This method determines whether a string can not be divided at given index or not.
              This is only an utility method.
              Please refer to the document of
              <see cref="M:Sgry.Azuki.Document.IsNotDividableIndex(System.Int32)">Document.IsNotDividableIndex instance method</see>
              for detail.
              </para>
            </remarks>
            <seealso cref="M:Sgry.Azuki.Document.IsNotDividableIndex(System.Int32)">Document.IsNotDividableIndex method</seealso>
        </member>
        <member name="M:Sgry.Azuki.Document.IsNotDividableIndex(System.Char,System.Char)">
            <summary>
            Determines whether text can not be divided at given index or not.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Document.IsHighSurrogate(System.Char)">
            <summary>
            Determines whether given char is a high surrogate or not.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Document.IsLowSurrogate(System.Char)">
            <summary>
            Determines whether given char is a low surrogate or not.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Document.IsCombiningCharacter(System.Int32)">
            <summary>
            Determines whether given character is a combining character or not.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Document.IsCombiningCharacter(System.String,System.Int32)">
            <summary>
            Determines whether given character is a combining character or not.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Document.IsCombiningCharacter(System.Char)">
            <summary>
            Determines whether given character is a combining character or not.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Document.IsMatchedBracket(System.Int32)">
            <summary>
            Returnes whether the index points to one of the paired matching bracket or not.
            Note that matching bracket position is not maintaned by Document but by UiImpl.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Document.IsDirty">
            <summary>
            Gets or sets whether any unsaved modifications exist or not.
            </summary>
            <remarks>
              <para>
              This property will be true if there is any unsaved modifications.
              Although Azuki maintains almost all modification history in itself,
              it cannot detect when the content was saved
              because saving content to file or other means is done outside of it;
              done by the application using Azuki.
              Because of this, application is responsible to set this property to False
              on saving content manually.
              </para>
              <para>
              Note that attempting to set this property True by application code
              will raise an InvalidOperationException.
              Because any document cannot be turned 'dirty' without modification,
              and modification by Document.Replace automatically set this property True
              so doing so in application code is not needed.
              </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              True was set as a new value.
              - OR -
              Modified while grouping UNDO actions.
            </exception>
        </member>
        <member name="P:Sgry.Azuki.Document.IsRecordingHistory">
            <summary>
            Gets or sets whether this document is recording edit actions or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Document.IsReadOnly">
            <summary>
            Gets or sets whether this document is read-only or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Document.CanUndo">
            <summary>
            Gets whether an available UNDO action exists or not.
            </summary>
            <remarks>
              <para>
              This property gets whether one or more UNDOable action exists or not.
              </para>
              <para>
              To execute UNDO, use <see cref="M:Sgry.Azuki.Document.Undo">Undo</see> method.
              </para>
            </remarks>
            <seealso cref="M:Sgry.Azuki.Document.Undo">Document.Undo method</seealso>
        </member>
        <member name="P:Sgry.Azuki.Document.CanRedo">
            <summary>
            Gets whether an available REDO action exists or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Document.Capacity">
            <summary>
            Gets or sets the size of the internal buffer.
            </summary>
            <exception cref="T:System.OutOfMemoryException">There is no enough memory to expand buffer.</exception>
        </member>
        <member name="P:Sgry.Azuki.Document.LastModifiedTime">
            <summary>
            Gets the time when this document was last modified.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Document.WatchPatterns">
            <summary>
            Gets the list of watching patterns.
            </summary>
            <remarks>
              <para>
              Please refer to the
              <see cref="T:Sgry.Azuki.WatchPattern">document of WatchPattern class</see>
              for details.
              </para>
            </remarks>
            <seealso cref="T:Sgry.Azuki.WatchPattern">WatchPattern class</seealso>
            <seealso cref="T:Sgry.Azuki.WatchPatternSet">WatchPatternSet class</seealso>
        </member>
        <member name="P:Sgry.Azuki.Document.ViewParam">
            <summary>
            Gets view specific parameters associated with this document.
            </summary>
            <remarks>
              <para>
              There are some parameters that are dependent on each document
              but are not parameters about document content.
              This property contains such parameters.
              </para>
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.Document.CaretIndex">
            <summary>
            Gets index of where the caret is at (in char-index).
            </summary>
            <remarks>
              <para>
              This property gets the index of the 'caret;' the text insertion point.
              </para>
              <para>
              In Azuki, selection always exists and is expressed by the range from anchor index to caret index.
              If there is nothing selected, it means that both anchor index and caret index is set to same value.
              </para>
              <para>
              To set value of anchor or caret, use
              <see cref="M:Sgry.Azuki.Document.SetSelection(System.Int32,System.Int32)">Document.SetSelection</see> method.
              </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.Document.AnchorIndex">Document.AnchorIndex Property</seealso>
            <seealso cref="M:Sgry.Azuki.Document.SetSelection(System.Int32,System.Int32)">Document.SetSelection Method</seealso>
        </member>
        <member name="P:Sgry.Azuki.Document.AnchorIndex">
            <summary>
            Gets index of the position where the selection starts (in char-index).
            </summary>
            <remarks>
              <para>
              This property gets the index of the 'selection anchor;' where the selection starts.
              </para>
              <para>
              In Azuki, selection always exists and is expressed by the range from anchor index to caret index.
              If there is nothing selected, it means that both anchor index and caret index is set to same value.
              </para>
              <para>
              To set value of anchor or caret, use
              <see cref="M:Sgry.Azuki.Document.SetSelection(System.Int32,System.Int32)">Document.SetSelection</see> method.
              </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.Document.CaretIndex">Document.CaretIndex Property</seealso>
            <seealso cref="M:Sgry.Azuki.Document.SetSelection(System.Int32,System.Int32)">Document.SetSelection Method</seealso>
        </member>
        <member name="P:Sgry.Azuki.Document.SelectionManager">
            <summary>
            Gets selection manager object associated with this document.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Document.RectSelectRanges">
            <summary>
            Gets or sets text ranges selected by rectangle selection.
            </summary>
            <remarks>
              <para>
              (This property is basically for internal use only.
              Using this method from outside of Azuki assembly is not recommended.)
              </para>
              <para>
              The value of this method is an array of text indexes
              that is consisted with beginning index of first text range (row),
              ending index of first text range,
              beginning index of second text range,
              ending index of second text range and so on.
              </para>
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.Document.Text">
            <summary>
            Gets or sets currently inputted text.
            </summary>
            <remarks>
              <para>
              Getting text content through this property
              will copy all characters from internal buffer
              to a string object and returns it.
              </para>
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.Document.Length">
            <summary>
            Gets number of characters currently held in this document.
            Note that a surrogate pair or combining characters will be counted as two characters.
            </summary>
            <remarks>
              <para>
              This property is the number of characters currently held in this document.
              Since Azuki stores characters in form of UTF-16,
              surrogate pairs or combining characters will not be counted as
              "1 character" in this property.
              </para>
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.Document.LineCount">
            <summary>
            Gets number of the logical lines.
            </summary>
            <remarks>
              <para>
              Through this property,
              number of the logical lines in this document can be retrieved.
              "Logical line" here means a string simply separated by EOL codes.
              and differs from "screen line" (a text line drawn as a graphc).
              To retrieve count of the logical lines,
              use <see cref="P:Sgry.Azuki.IView.LineCount">IView.LineCount</see> or
              <see cref="P:Sgry.Azuki.IUserInterface.LineCount">
              IUserInterface.LineCount</see> instead.
              </para>
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.Document.MarksUri">
            <summary>
            Gets or sets whether URIs in this document
            should be marked automatically with built-in URI marker or not.
            </summary>
            <remarks>
              <para>
              Note that built-in URI marker marks URIs in document
              and then Azuki shows the URIs as 'looks like URI,'
              but (1) clicking mouse button on them, or
              (2) pressing keys when the caret is at middle of a URI,
              makes NO ACTION BY DEFAULT.
              To define action on such event,
              programmer must implement such action as a part of
              event handler of standard mouse event or keyboard event.
              Please refer to the
              <see cref="T:Sgry.Azuki.Marking">document of marking feature</see> for details.
              </para>
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.Document.EolCode">
            <summary>
            Gets or sets default EOL Code of this document.
            </summary>
            <exception cref="T:System.InvalidOperationException">Specified EOL code is not supported.</exception>
            <remarks>
              <para>
              This value will be used when an Enter key was pressed,
              but setting this property itself does nothing to the content.
              </para>
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.Document.SelectionMode">
            <summary>
            Gets or sets how to select text.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Document.Highlighter">
            <summary>
            Gets or sets highlighter object to highlight currently active document
            or null to disable highlighting.
            </summary>
            <remarks>
              <para>
              This property gets or sets highlighter for this document.
              </para>
              <para>
              Highlighter objects are used to highlight syntax of documents.
              They implements
              <see cref="T:Sgry.Azuki.Highlighter.IHighlighter">IHighlighter</see>
              interface and called
              <see cref="M:Sgry.Azuki.Highlighter.IHighlighter.Highlight(Sgry.Azuki.Document,System.Int32@,System.Int32@)">Highlight</see>
              method every time slightly after user input stopped to execute own highlighting logic.
              If null was set to this property, highlighting feature will be disabled.
              </para>
              <para>
              Azuki provides some built-in highlighters. See
              <see cref="T:Sgry.Azuki.Highlighter.Highlighters">Highlighter.Highlighters</see>
              class members.
              </para>
              <para>
              User can create and use custom highlighter object.
              If you want to create a keyword-based highlighter,
              you can extend
              <see cref="T:Sgry.Azuki.Highlighter.KeywordHighlighter">KeywordHighlighter</see>.
              If you want to create not a keyword based one,
              create a class which implements
              <see cref="T:Sgry.Azuki.Highlighter.IHighlighter">IHighlighter</see>
              and write your own highlighting logic.
              </para>
              <para>
              Note that setting new value to this property will not invalidate graphics.
              To update graphic, set value via IUserInterface.Highlighter.
              </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.IUserInterface.Highlighter">IUserInterface.Highlighter</seealso>
        </member>
        <member name="P:Sgry.Azuki.Document.WordProc">
            <summary>
            Gets or sets word processor object which determines how Azuki handles 'words.'
            </summary>
            <remarks>
              <para>
              This property gets or sets word processor object.
              Please refer to the document of IWordProc interface for detail.
              </para>
            </remarks>
            <seealso cref="T:Sgry.Azuki.IWordProc">IWordProc interface</seealso>
            <seealso cref="T:Sgry.Azuki.DefaultWordProc">DefaultWordProc class</seealso>
        </member>
        <member name="E:Sgry.Azuki.Document.SelectionChanged">
            <summary>
            Occurs when the selection was changed.
            </summary>
        </member>
        <member name="E:Sgry.Azuki.Document.ContentChanged">
            <summary>
            Occurs when the document content was changed.
            ContentChangedEventArgs contains the old (replaced) text,
            new text, and index indicating the replacement occured.
            </summary>
        </member>
        <member name="E:Sgry.Azuki.Document.DirtyStateChanged">
            <summary>
            Occurs when IsDirty property has changed.
            </summary>
        </member>
        <member name="E:Sgry.Azuki.Document.SelectionModeChanged">
            <summary>
            Occures soon after selection mode was changed.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Document.Tag">
            <summary>
            Gets or sets an object associated with this document.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Document.MemoryUsage">
            <summary>
            Gets estimated memory size used by this document.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Document.Item(System.Int32)">
            <summary>
            Gets one character at given index.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.SelectionChangedEventHandler">
            <summary>
            Event handler for SelectionChanged event.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.SelectionChangedEventArgs">
            <summary>
            Event information about selection change.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SelectionChangedEventArgs.#ctor(System.Int32,System.Int32,System.Int32[],System.Boolean)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.SelectionChangedEventArgs.OldAnchor">
            <summary>
            Anchor index (in current text) of the previous selection.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.SelectionChangedEventArgs.OldCaret">
            <summary>
            Caret index (in current text) of the previous selection.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.SelectionChangedEventArgs.OldRectSelectRanges">
            <summary>
            Text ranges selected by previous rectangle selection (indexes are valid in current text.)
            </summary>
        </member>
        <member name="P:Sgry.Azuki.SelectionChangedEventArgs.ByContentChanged">
            <summary>
            This value will be true if this event has been occured because the document was modified.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.ContentChangedEventHandler">
            <summary>
            Event handler for ContentChanged event.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.ContentChangedEventArgs">
            <summary>
            Event information about content change.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.ContentChangedEventArgs.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.ContentChangedEventArgs.Index">
            <summary>
            Gets index of the position where the replacement occured.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.ContentChangedEventArgs.OldText">
            <summary>
            Gets replaced text.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.ContentChangedEventArgs.NewText">
            <summary>
            Gets newly inserted text.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.ContentChangedEventArgs.RedrawStartIndex">
            <summary>
            Gets or sets starting index of the range to be redrawn after this event.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.ContentChangedEventArgs.RedrawEndIndex">
            <summary>
            Gets or sets ending index of the range to be redrawn after this event.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.EditAction">
            <summary>
            History object for UNDO/REDO that keeps information about one text replacement action.
            </summary>
            <remarks>
            <para>
            Note that all text editing action can be described as a replacement
            so this is the only undo object used in Azuki.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.EditAction.#ctor(Sgry.Azuki.Document,System.Int32,System.String,System.String,System.Int32,System.Int32,Sgry.Azuki.LineDirtyStateUndoInfo)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="doc">document that the replacement has occured</param>
            <param name="index">index indicatating where the replacement has occured</param>
            <param name="deletedText">deleted text by the replacement</param>
            <param name="insertedText">inserted text by the replacement</param>
            <param name="oldAnchorIndex">index of the selection anchor at when the replacement has occured</param>
            <param name="oldCaretIndex">index of the caret at when the replacement has occured</param>
            <param name="ldsUndoInfo">line dirty states before the replacement</param>
        </member>
        <member name="M:Sgry.Azuki.EditAction.Undo">
            <summary>
            UNDO this replacement action.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.EditAction.Redo">
            <summary>
            REDO this replacement action.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.EditAction.HasNoEffect">
            <summary>
            Gets whether this EditAction has no effect on a document or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.EditAction.DeletedText">
            <summary>
            Gets the text deleted by this action.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.EditAction.InsertedText">
            <summary>
            Gets the text newly inserted by this action.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.EditAction.Next">
            <summary>
            Changed action.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.EditHistory">
            <summary>
            Stack object to hold editing actions.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.EditHistory.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.EditHistory.Add(Sgry.Azuki.EditAction)">
            <summary>
            Pushes new action to the stack.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.EditHistory.GetUndoAction">
            <summary>
            Gets the action most recently done and remove it from stack.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.EditHistory.GetRedoAction">
            <summary>
            Gets the action most recently done and remove it from stack.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.EditHistory.Clear">
            <summary>
            Clears all containing actions.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.EditHistory.BeginUndo">
            <summary>
            Begins grouping up editing actions into a single UNDO action.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.EditHistory.EndUndo">
            <summary>
            Ends grouping up editing actions.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.EditHistory.CanUndo">
            <summary>
            Whether an available UNDO action exists or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.EditHistory.CanRedo">
            <summary>
            Whether an available REDO action exists or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.EditHistory.IsGroupingActions">
            <summary>
            Whether group UNDO/REDO is executing or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.EditHistory.MemoryUsage">
            <summary>
            Gets estimated memory size used by this object.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.LineDirtyState">
            <summary>
            State of 'dirtiness' of each logical line in document.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.LineDirtyState.Clean">
            <summary>
            The line is not modified yet.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.LineDirtyState.Dirty">
            <summary>
            The line was modified.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.LineDirtyState.Cleaned">
            <summary>
            The line was modified but it is now marked as 'not modified.'
            </summary>
        </member>
        <member name="T:Sgry.Azuki.MarkingInfo">
            <summary>
            Information of marking.
            </summary>
            <remarks>
              <para>
              This class is a collection of non-graphical information about a marking type.
              How marked text parts should be drawn is
              determined not by this class but by <see cref="T:Sgry.Azuki.ColorScheme"/> class.
              </para>
              <para>
              Please refer to document of
              <see cref="T:Sgry.Azuki.Marking"/> class
              for detail about the marking feature of Azuki.
              </para>
            </remarks>
            <seealso cref="T:Sgry.Azuki.Marking">MarkingInfo class</seealso>
            <seealso cref="T:Sgry.Azuki.ColorScheme">ColorScheme class</seealso>
        </member>
        <member name="M:Sgry.Azuki.MarkingInfo.#ctor(System.Int32,System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="id">ID of the marking to be registered.</param>
            <param name="name">Name of the marking.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Parameter '<paramref name="id"/>' is out of valid range.
            </exception>
            <exception cref="T:System.ArgumentNullException">
              Parameter '<paramref name="name"/>' is null.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.MarkingInfo.#ctor(System.Int32,System.String,Sgry.Azuki.MouseCursor)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="id">ID of the marking to be registered.</param>
            <param name="name">Name of the marking.</param>
            <param name="cursor">
              This type of mouse cursor will be used
              when user puts cursor on the text with marking ID
              specified by <paramref name="id"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Parameter '<paramref name="id"/>' is out of valid range.
            </exception>
            <exception cref="T:System.ArgumentNullException">
              Parameter '<paramref name="name"/>' is null.
            </exception>
        </member>
        <member name="P:Sgry.Azuki.MarkingInfo.ID">
            <summary>
            Gets or sets ID of this marking.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.MarkingInfo.Name">
            <summary>
            Gets or sets name of this marking.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.MarkingInfo.MouseCursor">
            <summary>
            Gets or sets type of mouse cursor associated with this marking.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.Marking">
            <summary>
            Manager of marking information
            which is to indicate attributes apart from syntax or grammar.
            </summary>
            <remarks>
              <para>
              The 'marking' feature is provided for putting
              additional (meta) information on text ranges
              which is not related to syntax or grammar of document type
              such as XML file or C/C++ source file.
              One of the typical usages is to mark (put meta information on)
              misspelled words as 'this word seems to be misspelled.'
              Another typical usage is to mark
              words at where compile error was detected as
              'compile error has been occurred here.'
              </para>
              <para>
              Multiple markings can be put on any text part independently.
              To mark up text parts or remove already marked IDs from text parts,
              use <see cref="M:Sgry.Azuki.Document.Mark(System.Int32,System.Int32,System.Int32)">Document.Mark method</see>
              and <see cref="M:Sgry.Azuki.Document.Unmark(System.Int32,System.Int32,System.Int32)">Document.Unmark method</see>.
              Once a text part was marked, it will graphically be decorated
              as specified by <see cref="T:Sgry.Azuki.ColorScheme"/> class.
              To get or set how marked text will be decorated, use methods next.
              </para>
              <list type="bullet">
                <item>
                  <see cref="M:Sgry.Azuki.ColorScheme.GetMarkingDecorations(System.Int32[])">
                  ColorScheme.GetMarkingDecorations(int[]) method
              	  </see>
                </item>
                <item>
                  <see cref="M:Sgry.Azuki.ColorScheme.SetMarkingDecoration(System.Int32,Sgry.Azuki.TextDecoration)">
                  ColorScheme.SetMarkingDecoration method
                  </see>
                </item>
              </list>
              <para>
              Internally, marking IDs set for each character are stored as bit mask
              (currently 32-bit).
              Although all operations can be done without minding it,
              in some cases, using internal bit mask directly
              is more efficient than using array of IDs.
              To handle bit mask directly, use
              <see cref="M:Sgry.Azuki.Document.GetMarkingBitMaskAt(System.Int32)">
              Document.GetMarkingBitMaskAt method</see> and
              <see cref="M:Sgry.Azuki.ColorScheme.GetMarkingDecorations(System.UInt32)">
              ColorScheme.GetMarkingDecorations(uint) method</see>.
              </para>
              <para>
              Note that marking ID '31' is used by built-in URI marker to mark URIs.
              Although the meaning of ID 31 can be overwritten
              with <see cref="M:Sgry.Azuki.Marking.Register(Sgry.Azuki.MarkingInfo)">Register</see> method,
              doing so is discouraged
              unless the programmer wants to create and use URI marker by his/her own.
              </para>
            </remarks>
            <seealso cref="T:Sgry.Azuki.MarkingInfo">MarkingInfo class</seealso>
            <seealso cref="T:Sgry.Azuki.ColorScheme">ColorScheme class</seealso>
        </member>
        <member name="F:Sgry.Azuki.Marking.MaxID">
            <summary>
            Maximum number of marking IDs currently supported.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Marking.Register(Sgry.Azuki.MarkingInfo)">
            <summary>
            Registers a marking ID.
            </summary>
            <param name="info">The information of the marking.</param>
            <remarks>
              <para>
              This method registers a marking ID and its information.
              If specified ID was already registered, existing information will be overwritten.
              </para>
              <para>
              Note that marking ID '31' is used by built-in URI marker to mark URIs.
              Although the meaning of ID 31 can be overwritten
              with this method,
              doing so is discouraged
              unless the programmer wants to create and use URI marker by his/her own.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
              Parameter <paramref name="info"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              ID of parameter <paramref name="info"/> is out of valid range.
            </exception>
            <seealso cref="M:Sgry.Azuki.Marking.Unregister(System.Int32)">Marking.Unregister method</seealso>
        </member>
        <member name="M:Sgry.Azuki.Marking.Unregister(System.Int32)">
            <summary>
            Removes registation of a marking ID.
            </summary>
            <param name="id">The ID of the marking to be removed.</param>
            <remarks>
              <para>
              This method removes registration of a marking information.
              To register new marking information,
              use <see cref="M:Sgry.Azuki.Marking.Register(Sgry.Azuki.MarkingInfo)">Register</see> method.
              </para>
              <para>
              This method cannot remove reserved marking IDs.
              </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              ID of parameter <paramref name="info"/> is out of valid range.
            </exception>
            <seealso cref="M:Sgry.Azuki.Marking.Register(Sgry.Azuki.MarkingInfo)">Marking.Register method</seealso>
        </member>
        <member name="M:Sgry.Azuki.Marking.GetMarkingInfo(System.Int32)">
            <summary>
            Gets information about marking specified by ID.
            </summary>
            <returns>Information about specified marking.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="id"/> is out of valid range.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.Marking.GetEnumerator">
            <summary>
            Gets an enumerator to list up all registered marking information.
            </summary>
            <returns>An enumerator for marking information.</returns>
        </member>
        <member name="P:Sgry.Azuki.Marking.Uri">
            <summary>
            ID of URI marking type.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.RleArray`1">
            <summary>
            Array of items which compresses contents with RLE compression method.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.RleArray`1.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.RleArray`1.#ctor(System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.RleArray`1.IndexOf(`0)">
            <summary>
            Searches this array for the specified item and returns the index of the found one.
            </summary>
            <returns>
            The index of the specified item found firstly, othewise -1.
            </returns>
        </member>
        <member name="M:Sgry.Azuki.RleArray`1.Insert(System.Int32,`0,System.Int32)">
            <summary>
            Insert specified amount of specific value.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Parameter <paramref name="index"/> is out of valid range.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.RleArray`1.Insert(System.Int32,`0)">
            <summary>
            Insert the specified value at specified index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
              Parameter <paramref name="index"/> is out of valid range.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.RleArray`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item at specified index.
            </summary>
            <param name="index">Index of the item to be removed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index"/> is out of valid range.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.RleArray`1.Add(`0)">
            <summary>
            Add the specified value.
            </summary>
            <param name='value'>The value to add.</param>
        </member>
        <member name="M:Sgry.Azuki.RleArray`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.RleArray`1.Contains(`0)">
            <summary>
            Gets whether this array contains the specified value or not.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.RleArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the items of this object to an array, starting at the specified index.
            </summary>
            <param name="array">
              An array the items will be copied to.
            </param>
            <param name="arrayIndex">
              The index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="arrayIndex"/> is less than zero.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.RleArray`1.Remove(`0)">
            <summary>
            Removes the specified item which was firstly found in the array.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.RleArray`1.GetEnumerator">
            <summary>
            THIS METHOD IS NOT SUPPORTED.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.RleArray`1.ToString">
            <summary>
            Returns a string that represents this object.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.RleArray`1.Item(System.Int32)">
            <summary>
            Gets or sets an item at the specified index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="P:Sgry.Azuki.RleArray`1.Count">
            <summary>
            Gets total number of items stored in this array.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.RleArray`1.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
              <c>false</c> always since this class can not be read-only.
            </value>
        </member>
        <member name="T:Sgry.Azuki.SearchResult">
            <summary>
            Result of a text search.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SearchResult.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SearchResult.ToString">
            <summary>
            Gets a string that represents the found range by a search.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.SearchResult.Begin">
            <summary>
            Begin index of the search pattern found.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.SearchResult.End">
            <summary>
            End index of the search pattern found.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.SelectionManager">
            <summary>
            Internal class to manage text selection range.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SelectionManager.IsInSelection(System.Int32)">
            <summary>
            Distinguishes whether specified index is in selection or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.SelectionManager.CaretIndex">
            <summary>
            Gets or sets current position of the caret.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.SelectionManager.AnchorIndex">
            <summary>
            Gets or sets current position of selection anchor.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.SelectionManager.OriginalAnchorIndex">
            <summary>
            Gets originally set position of selection anchor.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.SplitArray`1">
            <summary>
            The array structure with 'gap' for efficient insertion/deletion.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.#ctor(System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.ToArray">
            <summary>
            Creates a copy of the content as an array.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.GetAt(System.Int32)">
            <summary>
            Gets an element at specified index.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.CopyTo(`0[])">
            <summary>
            Copies items to other array object.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies items to other array object.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.CopyTo(System.Int32,System.Int32,`0[])">
            <summary>
            Copies items to other array object.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.CopyTo(System.Int32,System.Int32,`0[],System.Int32)">
            <summary>
            Copies items to other array object.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.SetAt(`0,System.Int32)">
            <summary>
            Overwrites an element at specified index.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.Add(`0)">
            <summary>
            Adds an element.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.Add(`0[])">
            <summary>
            Adds elements.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element at specified index.
            </summary>
            <exception cref="T:System.ArgumentException">invalid index was given</exception>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.Insert(System.Int32,`0[])">
            <summary>
            Inserts elements at specified index.
            </summary>
            <param name="insertIndex">target location of insertion</param>
            <param name="values">the elements to be inserted</param>
            <exception cref="T:System.ArgumentOutOfRangeException">invalid index was given</exception>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.Insert(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Inserts elements at specified index.
            </summary>
            <param name="insertIndex">target location of insertion</param>
            <param name="values">elements which contains the elements to be inserted</param>
            <param name="valueBegin">index of the first elements to be inserted</param>
            <param name="valueEnd">index of the end position (one after last elements)</param>
            <exception cref="T:System.ArgumentOutOfRangeException">invalid index was given</exception>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.Replace(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Overwrites elements from "replaceIndex" with specified range [valueBegin, valueEnd) of values.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.Remove(`0)">
            <summary>
            Removes an element.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.RemoveAt(System.Int32)">
            <summary>
            Removes an element at specified range [index, index+1).
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes elements at specified range [begin, end).
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.Clear">
            <summary>
            Deletes all elements.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.IndexOf(`0)">
            <summary>
            Finds the specified item and returns found index, or -1 if not found.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.BinarySearch(`0)">
            <summary>
            Search for an item using binary-search algorithm
            (using Comparer&lt;T&gt;.Default as a comparer.)
            </summary>
            <returns>
            The index of the 'item' if found, otherwise bit-reversed value of
            the index of the first element which was greater than the 'item.'
            </returns>
            <exception cref="T:System.ArgumentException">
            Comparer&lt;T&gt;.Default does not know how to compare elements of
            type T.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.BinarySearch(`0,System.Comparison{`0})">
            <summary>
            Search for an item using binary-search algorithm.
            </summary>
            <returns>
            The index of the 'item' if found, otherwise bit-reversed value of
            the index of the first element which was greater than the 'item.'
            </returns>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.Contains(`0)">
            <summary>
            Distinguishes whether specified item exists in this collection or not.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.MoveGapTo(System.Int32)">
            <summary>
            Moves 'gap' to specified location.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.EnsureSpaceForInsertion(System.Int32)">
            <summary>
            Ensures the buffer is capable to insert data.
            </summary>
            <exception cref="T:System.OutOfMemoryException">There is no enough memory to expand buffer.</exception>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.GetEnumerator">
            <summary>
            Retrieves an enumerator.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Retrieves an enumerator.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.ResizeArray(`0[]@,System.Int32)">
            <exception cref="T:System.OutOfMemoryException">There is no enough memory to expand buffer.</exception>
        </member>
        <member name="M:Sgry.Azuki.SplitArray`1.ToString">
            <summary>
            ToString for debug.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.SplitArray`1.Count">
            <summary>
            Gets count of the elements currently stored.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.SplitArray`1.Capacity">
            <summary>
            Gets or sets the size of the internal buffer.
            </summary>
            <exception cref="T:System.OutOfMemoryException">There is no enough memory to expand buffer.</exception>
        </member>
        <member name="P:Sgry.Azuki.SplitArray`1.IsReadOnly">
            <summary>
            (Returns false always.)
            </summary>
        </member>
        <member name="P:Sgry.Azuki.SplitArray`1.Item(System.Int32)">
            <summary>
            Gets an element at specified index.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.SplitArrayEnumerator`1">
            <summary>
            The enumerator class for the SplitArray.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArrayEnumerator`1.#ctor(Sgry.Azuki.SplitArray{`0})">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArrayEnumerator`1.Dispose">
            <summary>
            Disposes resources.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.SplitArrayEnumerator`1.MoveNext">
            <summary>
            Moves location to next.
            </summary>
            <returns>true if successfuly moved to next</returns>
        </member>
        <member name="M:Sgry.Azuki.SplitArrayEnumerator`1.Reset">
            <summary>
            Resets location of this enumerator
            </summary>
        </member>
        <member name="P:Sgry.Azuki.SplitArrayEnumerator`1.Current">
            <summary>
            Retrieves the element at where this enumerator points.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.SplitArrayEnumerator`1.System#Collections#IEnumerator#Current">
            <summary>
            Retrieves the element at where this enumerator points.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.TextBuffer">
            <summary>
            Specialized SplitArray for char with text search feature without copying content.
            This is the core data structure of Azuki.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.TextBuffer.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.TextBuffer.ClearCharClasses">
            <summary>
            Clears class information from all characters.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.TextBuffer.GetCharClassAt(System.Int32)">
            <summary>
            Gets class of the character at specified index.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.TextBuffer.SetCharClassAt(System.Int32,Sgry.Azuki.CharClass)">
            <summary>
            Sets class of the character at specified index.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.TextBuffer.Insert(System.Int32,System.Char)">
            <summary>
            Inserts an element at specified index.
            </summary>
            <exception cref="T:System.ArgumentException">invalid index was given</exception>
        </member>
        <member name="M:Sgry.Azuki.TextBuffer.Insert(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Inserts elements at specified index.
            </summary>
            <param name="insertIndex">target location of insertion</param>
            <param name="values">elements which contains the elements to be inserted</param>
            <param name="valueBegin">index of the first elements to be inserted</param>
            <param name="valueEnd">index of the end position (one after last elements)</param>
            <exception cref="T:System.ArgumentOutOfRangeException">invalid index was given</exception>
        </member>
        <member name="M:Sgry.Azuki.TextBuffer.Replace(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Overwrites elements from "replaceIndex" with specified range [valueBegin, valueEnd) of values.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.TextBuffer.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Deletes elements at specified range [begin, end).
            </summary>
        </member>
        <member name="M:Sgry.Azuki.TextBuffer.Clear">
            <summary>
            Deletes all elements.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.TextBuffer.FindNext(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Finds a text pattern.
            </summary>
            <param name="value">The String to find.</param>
            <param name="begin">Begin index of the search range.</param>
            <param name="end">End index of the search range.</param>
            <param name="matchCase">Whether the search should be case-sensitive or not.</param>
            <returns>Search result object if found, otherwise null if not found.</returns>
        </member>
        <member name="M:Sgry.Azuki.TextBuffer.FindPrev(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Finds previous occurrence of a text pattern.
            </summary>
            <param name="value">The String to find.</param>
            <param name="begin">The begin index of the search range.</param>
            <param name="end">The end index of the search range.</param>
            <param name="matchCase">Whether the search should be case-sensitive or not.</param>
            <returns>Search result object if found, otherwise null if not found.</returns>
        </member>
        <member name="M:Sgry.Azuki.TextBuffer.FindNext(System.Text.RegularExpressions.Regex,System.Int32,System.Int32)">
            <summary>
            Find a text pattern by regular expression.
            </summary>
            <param name="regex">A Regex object expressing the text pattern.</param>
            <param name="begin">The search starting position.</param>
            <param name="end">Index of where the search must be terminated</param>
            <returns></returns>
            <remarks>
            This method find a text pattern
            expressed by a regular expression in the current content.
            The text matching process continues for the index
            specified with the <paramref name="end"/> parameter
            and does not stop at line ends nor null-characters.
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.TextBuffer.Capacity">
            <summary>
            Gets or sets the size of the internal buffer.
            </summary>
            <exception cref="T:System.OutOfMemoryException">There is no enough memory to expand buffer.</exception>
        </member>
        <member name="T:Sgry.Azuki.TextDataType">
            <summary>
            Specifies type of text data.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.TextDataType.Normal">
            <summary>
            Normal text data; a stream of characters.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.TextDataType.Words">
            <summary>
            Word text data; a stream of characters which starts and ends at word boundaries.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.TextDataType.Line">
            <summary>
            Line text data; not a stream but a line.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.TextDataType.Rectangle">
            <summary>
            Rectangle text data; graphically layouted text.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.UriMarker">
            <summary>
            Parser to mark URIs up in Azuki document.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.UriMarker.#cctor">
            <summary>
            Initializes static members.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.UriMarker.MarkOrUnmarkOneLine(Sgry.Azuki.Document,System.Int32,System.Boolean)">
            <summary>
            Marks URIs in a logical line.
            </summary>
            <returns>Whether specified line should be redrawn or not.</returns>
        </member>
        <member name="P:Sgry.Azuki.UriMarker.Schemes">
            <summary>
            Gets or sets list of URI scheme to trigger URI parsing;
            "http://" for instance.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.UriMarker.Inst">
            <summary>
            Gets the singleton instance of UriMarker.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.ViewParam">
            <summary>
            Parameters associated with each document used internally by View and UiImpl.
            </summary>
            <remarks>
            This class is a set of parameters that are dependent on each document
            but are not parameters about document content
            (mainly used for drawing text or user interaction.)
            </remarks>
        </member>
        <member name="F:Sgry.Azuki.ViewParam.H_IsInvalid">
            <summary>Indicates wherther the document contains any characters which should be highlighted.</summary>
        </member>
        <member name="F:Sgry.Azuki.ViewParam.H_InvalidRangeBegin">
            <summary>Beginning position of the range to be highlighted.</summary>
        </member>
        <member name="F:Sgry.Azuki.ViewParam.H_InvalidRangeEnd">
            <summary>Ending position of the range to be highlighted.</summary>
        </member>
        <member name="F:Sgry.Azuki.ViewParam.H_ValidRangeBegin">
            <summary>Beginning position of the range which was already highlighted.</summary>
        </member>
        <member name="F:Sgry.Azuki.ViewParam.H_ValidRangeEnd">
            <summary>Ending position of the range which was already highlighted.</summary>
        </member>
        <member name="F:Sgry.Azuki.ViewParam.MatchedBracketIndex1">
            <summary>Index of the bracket at caret position used to redraw (erase) previously highlighted bracket.</summary>
        </member>
        <member name="F:Sgry.Azuki.ViewParam.MatchedBracketIndex2">
            <summary>Index of the lastly found matched bracket used to redraw previously highlighted bracket.</summary>
        </member>
        <member name="F:Sgry.Azuki.ViewParam.MarksUri">
            <summary>Whether to mark URIs in the document with built-in URI marker or not.</summary>
        </member>
        <member name="M:Sgry.Azuki.ViewParam.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.ViewParam.DesiredColumnX">
            <summary>
            Gets or sets current X-coordinate of the "desired column."
            </summary>
        </member>
        <member name="P:Sgry.Azuki.ViewParam.FirstVisibleLine">
            <summary>
            Gets or sets index of the line which is displayed at top of the view.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.ViewParam.ScrollPosX">
            <summary>
            Gets or sets x-coordinate of the view's origin currently displayed.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.ViewParam.MaxLineNumber">
            <summary>
            Gets or sets maximum line number.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.ViewParam.PrevHRulerVirX">
            <summary>
            Gets or sets lastly drawn horizontal ruler bar position.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.WatchPatternSet">
            <summary>
            Set of WatchPattern objects.
            </summary>
            <see cref="T:Sgry.Azuki.WatchPattern">WatchPattern class</see>
        </member>
        <member name="M:Sgry.Azuki.WatchPatternSet.Register(Sgry.Azuki.WatchPattern)">
            <summary>
            Registers a text pattern to be watched and automatically marked.
            </summary>
            <param name="pattern">The pattern of the text to be watched and automatically marked.</param>
            <exception cref="T:System.ArgumentNullException">The argument 'pattern' was null.</exception>
            <seealso cref="M:Sgry.Azuki.WatchPatternSet.Unregister(System.Int32)">Unregister method</seealso>
        </member>
        <member name="M:Sgry.Azuki.WatchPatternSet.Unregister(System.Int32)">
            <summary>
            Unregister a watch-pattern by markingID.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WatchPatternSet.Get(System.Int32)">
            <summary>
            Gets a watch-pattern by marking ID.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WatchPatternSet.GetEnumerator">
            <summary>
            Gets the enumerator that iterates through the WatchPatternSet.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WatchPatternSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator that iterates through the WatchPatternSet.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.WatchPattern">
            <summary>
            Text pattern to be watched and marked automatically.
            </summary>
            <remarks>
              <para>
              This class represents a text pattern which should always be watched by Azuki.
              By registering these watching patterns to
              <see cref="P:Sgry.Azuki.Document.WatchPatterns">Document.WatchPatterns</see>,
              such patterns will be automatically marked by Azuki as soon as it is graphically drawn
              so that such patterns will be able to distinguished visually and logically too.
              </para>
              <para>
              Most typical usage of this feature is emphasizing text patterns
              visually which the user is currently searching for.
              </para>
            </remarks>
            <example>
              <para>
              Next example code illustrates how to use WatchPattern
              to emphasize text search results in a document.
              </para>
              <para>
              Firstly of all, register how the matched patterns should be
              decorated in initialization part.
              </para>
              <code lang="C#">
              // Use yellow background for the text pattern
              // which matched to the text search criteria
              // (using marking ID 30.)
              Marking.Register( new MarkingInfo(30, "Search result") );
              azukiControl.ColorScheme.SetMarkingDecoration(
                      30, new BgColorTextDecoration( Color.Yellow )
                  );
              </code>
              <para>
              Secondly, update the WatchPattern every time the search criteria
              was changed.
              </para>
              <code lang="C#">
              // Show a dialog to let user input the pattern to search
              Regex pattern;
              DialogResult result = ShowFindDialog( out pattern );
              if( result != DialogResult.OK )
                  return;
              
              // Update the text patterns to be watched
              doc.WatchPatterns.Register(
                      new WatchPattern( 30, pattern )
                  );
              </code>
            </example>
        </member>
        <member name="M:Sgry.Azuki.WatchPattern.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WatchPattern.#ctor(System.Int32,System.Text.RegularExpressions.Regex)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="markingID">
              The marking ID to be marked for each found matching patterns.
            </param>
            <param name="patternToBeWatched">
              The pattern to be watched and to be marked with '<paramref name="markingID"/>.'
            </param>
            <exception cref="T:System.ArgumentException">
              Parameter '<paramref name="markingID"/>' is invalid or not registered.
            </exception>
        </member>
        <member name="P:Sgry.Azuki.WatchPattern.MarkingID">
            <summary>
            The marking ID to be marked for each found matching patterns.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WatchPattern.Pattern">
            <summary>
            The pattern to be watched and to be marked automatically.
            (accepts null.)
            </summary>
            <remarks>
              <para>
              This property gets or sets the pattern to be watched.
              If the pattern is null or regular expression is an empty string,
              Azuki simply ignores the watch pattern.
              </para>
            </remarks>
        </member>
        <member name="T:Sgry.Azuki.WatchPatternMarker">
            <summary>
            Parser to mark up specific watching text patterns in Azuki document.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WatchPatternMarker.MarkOneLine(Sgry.Azuki.Document,System.Int32,System.Boolean)">
            <summary>
            Marks patterns in a logical line.
            </summary>
            <returns>Whether specified line should be redrawn or not.</returns>
        </member>
        <member name="T:Sgry.Azuki.Highlighter.KeywordHighlighter">
            <summary>
            A keyword-based highlighter which can highlight keywords, text parts
            enclosed with specific patterns, line comment, and regular expressions.
            </summary>
            <remarks>
            <para>
            KeywordHighlighter highlights keywords, enclosed parts, and regular
            expressions. To make basic syntax highlighter, you can create an
            instance and register highlighting targets, or make a child class and
            register highlighting targets.
            </para>
            <para>
            KeywordHighlighter can highlight four types of text patterns.
            </para>
            <list type="number">
            	<item>Keyword set</item>
            	<item>Line highlight</item>
            	<item>Enclosure</item>
            	<item>Regular expression</item>
            </list>
            <para>
            Keyword set is a set of keywords.
            KeywordHighlighter searches a document for registered keywords and
            applies char-class associated with the keyword set.
            For example, you may create two keyword sets for highlighting C# source
            code. One of the them contains every keywords of C# and is associated
            with <see cref="T:Sgry.Azuki.CharClass"/>.Keyword. Another one contains every
            preprocessor macro keywords and is associated with <see cref="T:Sgry.Azuki.CharClass"/>.Macro. To register keyword sets, use <see cref="M:Sgry.Azuki.Highlighter.KeywordHighlighter.AddKeywordSet(System.String[],Sgry.Azuki.CharClass,System.Boolean)">AddKeywordSet</see>
            method.
            </para>
            <para>
            Line highlight is a feature to highlight text patterns which begins
            with particular pattern and continues until the end of line.
            This feature is designed to highlight single line comment found in
            many programming language. To register targets of line highlight, use
            <see cref="M:Sgry.Azuki.Highlighter.KeywordHighlighter.AddLineHighlight(System.String,Sgry.Azuki.CharClass,System.Boolean)">AddLineHighlight</see> method.
            </para>
            <para>
            Enclosure is a text pattern that is enclosed with particular patterns.
            Typical example of enclosure type is "string literal" and
            "multiple line comment" found in many programming languages.
            To register enclosure target, use <see cref="M:Sgry.Azuki.Highlighter.KeywordHighlighter.AddEnclosure(System.String,System.String,Sgry.Azuki.CharClass,System.Boolean,System.Char,System.Boolean)">AddEnclosure</see> method.
            </para>
            <para>
            Regular expression is one of the most flexible and popular method to
            express character sequence pattern. To register a regular expression
            to specify highlighting targets, give <see cref="M:Sgry.Azuki.Highlighter.KeywordHighlighter.AddRegex(System.String,System.Boolean,Sgry.Azuki.CharClass)">AddRegex</see> method a
            regular expression and a <see cref="T:Sgry.Azuki.CharClass"/>.
            Note that there is another overloaded method <see cref="M:Sgry.Azuki.Highlighter.KeywordHighlighter.AddRegex(System.String,System.Boolean,System.Collections.Generic.IList{Sgry.Azuki.CharClass})"/>
            which takes not a CharClass but a list of them. This version applies
            the char-classes to each group captured in every matched patterns.
            If you need to highlight complex patterns consisting of sub-patterns
            each of which should be highlighted differently, this method will be
            useful.
            </para>
            <para>
            Here are some notes about highlighting with regular expressions.
            </para>
            <list type="bullet">
            	<item>
            	If you need to specify preceding or following text patterns for
            	specifying highlighting targets strictly, consider using
            	zero-width assertions such as <c>(?=...)</c> and <c>(?!...)</c>.
            	For example, regular expression literals used in Perl may be
            	specified as <c>(?&lt;!\w\s*)/([^/\\]|\\.)+/[a-z]*</c>,
            	which uses a negative lookbehind assertion to prevent highlighting
            	patterns look like <c>/.../</c> whose preceding non-whitespace
            	character is a letter or digit. By the assertion, <c>/3+2/</c>
            	inside <c>$x=/3+2/;</c> will be highlighted but <c>$x=1/3+2/3;</c>
            	will not be highlighted.
            	</item>
            	<item>
            	The back-end of this feature is System. Text. RegularExpressions.
            	Regex, which is provided by .NET Framework. For detail of regular
            	expression, refer to the reference manual of that class.
            	</item>
            </list>
            <para>
            There is one more note about this class. KeywordHighlighter highlights
            numeric literals like 3.14 or 0xFFFE by default. To disable this
            feature, set false to <see cref="P:Sgry.Azuki.Highlighter.KeywordHighlighter.HighlightsNumericLiterals"/> property.
            There is no customization option for this feature so if you want to
            highlight numeric literals in a way different from this class's,
            disable this feature and define regular expressions for numeric
            literals by your own. For more detail of this feature, see the document
            of <see cref="P:Sgry.Azuki.Highlighter.KeywordHighlighter.HighlightsNumericLiterals"/> property.
            </para>
            </remarks>
            <example>
            <para>
            Next example creates a highlighter object to highlight C# source code.
            </para>
            <code lang="C#">
            KeywordHighlighter kh = new KeywordHighlighter();
            
            // Registering keyword set
            kh.AddKeywordSet( new string[]{
            	"abstract", "as", "base", "bool", ...
            }, CharClass.Keyword );
            
            // Registering pre-processor keywords
            string[] words = new string[] {
            	"define", "elif", "else", "endif", "endregion", "error", "if",
            	"line", "pragma", "region", "undef", "warning"
            };
            AddRegex( @"^\s*#\s*(" + String.Join(@"\b|", words) + @"\b)",
            		  CharClass.Macro );
            
            // Registering string literals and character literal
            kh.AddEnclosure( "'", "'", CharClass.String, false, '\\' );
            kh.AddEnclosure( "@\"", "\"", CharClass.String, true, '\"' );
            kh.AddEnclosure( "\"", "\"", CharClass.String, false, '\\' );
            
            // Registering comment
            kh.AddEnclosure( "/**", "*/", CharClass.DocComment, true );
            kh.AddEnclosure( "/*", "*/", CharClass.Comment, true );
            kh.AddLineHighlight( "///", CharClass.DocComment );
            kh.AddLineHighlight( "//", CharClass.Comment );
            </code>
            </example>
        </member>
        <member name="T:Sgry.Azuki.Highlighter.IHighlighter">
            <summary>
            Interface of highlighter object for Azuki.
            </summary>
            <remarks>
            <para>
            This interface is commonly used by highlighter objects
            which are used to highlight syntax of documents.
            </para>
            <para>
            If a highlighter object is set for a document,
            <see cref="M:Sgry.Azuki.Highlighter.IHighlighter.Highlight(Sgry.Azuki.Document,System.Int32@,System.Int32@)">IHighlighter.Highlight</see>
            method will be called
            on every time slightly after the user stopped editing.
            Since the method is called with parameters indicating
            where to begin highlighting and where to end highlighting,
            highlighting will not process entire document.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.IHighlighter.Highlight(Sgry.Azuki.Document)">
            <summary>
            Highlights whole part of a document.
            </summary>
            <param name="doc">Document to highlight.</param>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.IHighlighter.Highlight(Sgry.Azuki.Document,System.Int32@,System.Int32@)">
            <summary>
            Highlights a part of a document.
            </summary>
            <param name="doc">Document to highlight.</param>
            <param name="dirtyBegin">Index to start highlighting. On return, start index of the range to be invalidated.</param>
            <param name="dirtyEnd">Index to end highlighting. On return, end index of the range to be invalidated.</param>
        </member>
        <member name="P:Sgry.Azuki.Highlighter.IHighlighter.CanUseHook">
            <summary>
            Gets or sets whether the hook mechanism is supported or not.
            </summary>
            <remarks>
            <para>
            This property gets or sets whether this highlighter object supports
            hook mechanism or not.
            Please refer to the document of
            <see cref="P:Sgry.Azuki.Highlighter.IHighlighter.HookProc">HookProc property</see> about hook mechanism.
            </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.Highlighter.IHighlighter.HookProc">IHighlighter.HookProc property</seealso>
        </member>
        <member name="P:Sgry.Azuki.Highlighter.IHighlighter.HookProc">
            <summary>
            Gets or sets highlighter hook procedure.
            </summary>
            <remarks>
            <para>
            This property gets or sets a hook procedure
            to override highlight logic built into the highlighter object.
            A delegate object set to this property will be called
            when a token is highlighted
            and if the delegate returns true,
            the highlighter will skip highlighting the token;
            so the delegate can highlight tokens differently.
            </para>
            <para>
            It is not needed to implement highlight hook for all highlighters
            so accessing this property may throw a NotSupportedException
            depending on implementations.
            If an implementation of IHighlighter does not provide hook mechanism,
            its CanHook property SHOULD returns false
            and accessing this property SHOULD throw a NotSupportedException.
            </para>
            <para>
            One of the typical usage is
            changing character class for specific keywords for application specific reason.
            Another typical usage is
            expanding logic of a keyword based highlighter
            to consider language syntax a little more
            (example of this usage is built-in C/C++ highlighter
            which uses a hook procedure to expand logic for highlighting
            preprocessor macros whose '#' and keyword parts are separated with spaces.)
            Note that since this functionality is a hook,
            a very little change can be applied to original behavior.
            If needed highlighting result cannot be easily achieved with a hook,
            consider implementing a new IHighlighter from a scratch.
            </para>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            This highlighter does not support hook mechanism.
            </exception>
            <seealso cref="P:Sgry.Azuki.Highlighter.IHighlighter.CanUseHook">IHighlighter.CanUseHook property</seealso>
            <seealso cref="T:Sgry.Azuki.Highlighter.HighlightHook">HighlightHook delegate</seealso>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.KeywordHighlighter.AddEnclosure(System.String,System.String,Sgry.Azuki.CharClass)">
            <summary>
            Adds a pair of strings and character-class
            that characters between the pair will be classified as.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.KeywordHighlighter.AddEnclosure(System.String,System.String,Sgry.Azuki.CharClass,System.Boolean)">
            <summary>
            Adds a pair of strings and character-class
            that characters between the pair will be classified as.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.KeywordHighlighter.AddEnclosure(System.String,System.String,Sgry.Azuki.CharClass,System.Char)">
            <summary>
            Adds a pair of strings and character-class
            that characters between the pair will be classified as.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.KeywordHighlighter.AddEnclosure(System.String,System.String,Sgry.Azuki.CharClass,System.Boolean,System.Char)">
            <summary>
            Adds a pair of strings and character-class
            that characters between the pair will be classified as.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.KeywordHighlighter.AddEnclosure(System.String,System.String,Sgry.Azuki.CharClass,System.Boolean,System.Char,System.Boolean)">
            <summary>
            Adds a pair of strings and character-class
            that characters between the pair will be classified as.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.KeywordHighlighter.ClearEnclosures">
            <summary>
            Clears all registered enclosures.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.KeywordHighlighter.AddLineHighlight(System.String,Sgry.Azuki.CharClass)">
            <summary>
            Adds a line-highlight entry.
            </summary>
            <param name="openPattern">
            Opening pattern of the line-comment.
            </param>
            <param name="klass">
            Class to apply to highlighted text.
            </param>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.KeywordHighlighter.AddLineHighlight(System.String,Sgry.Azuki.CharClass,System.Boolean)">
            <summary>
            Adds a line-highlight entry.
            </summary>
            <param name="openPattern">
            Opening pattern of the line-comment.
            </param>
            <param name="klass">
            Class to apply to highlighted text.
            </param>
            <param name="ignoreCase">
            Whether the opening pattern should be matched case-insensitively.
            </param>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.KeywordHighlighter.ClearLineHighlight">
            <summary>
            Clears all registered line-highlight entries.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.KeywordHighlighter.SetKeywords(System.String[],Sgry.Azuki.CharClass)">
            <summary>
            (Please use AddKeywordSet instead.)
            </summary>
            <remarks>
            <para>
            This method is obsoleted. Please use
            <see cref="M:Sgry.Azuki.Highlighter.KeywordHighlighter.AddKeywordSet(System.String[],Sgry.Azuki.CharClass)"/>
            method instead.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.KeywordHighlighter.AddKeywordSet(System.String[],Sgry.Azuki.CharClass)">
            <summary>
            Adds a set of keywords to be highlighted.
            </summary>
            <param name="keywords">
            Sorted array of keywords.
            </param>
            <param name="klass">
            Char-class to be applied to the keyword set.
            </param>
            <exception cref="T:System.ArgumentException">
            Parameter 'keywords' are not sorted alphabetically.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Parameter 'keywords' is null.
            </exception>
            <remarks>
            <para>
            This method registers a set of keywords to be highlighted.
            </para>
            <para>
            The keywords stored in <paramref name="keywords"/> parameter will
            be highlighted as a character class specified by <paramref name="klass"/> parameter. Please ensure that keywords in <paramref name="keywords"/> parameter must be alphabetically sorted. If they
            are not sorted, <see cref="T:System.ArgumentException"/> will be thrown.
            </para>
            <para>
            The keywords will be matched case sensitively and supposed to be
            consisted with only alphabets, numbers and underscore ('_'). If
            other character must be considered as a part of keyword, use <see cref="P:Sgry.Azuki.Highlighter.KeywordHighlighter.WordCharSet">
            WordCharSet</see> property.
            </para>
            </remarks>
            <seealso cref="M:Sgry.Azuki.Highlighter.KeywordHighlighter.AddKeywordSet(System.String[],Sgry.Azuki.CharClass,System.Boolean)">
            AddKeywordSet method (another overloaded method)
            </seealso>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.KeywordHighlighter.AddKeywordSet(System.String[],Sgry.Azuki.CharClass,System.Boolean)">
            <summary>
            Adds a set of keywords to be highlighted.
            </summary>
            <param name="keywords">Sorted array of keywords.</param>
            <param name="klass">
            Char-class to be applied to the keyword set.
            </param>
            <param name="ignoreCase">
            Whether case of the keywords should be ignored or not.
            </param>
            <exception cref="T:System.ArgumentException">
            Parameter 'keywords' are not sorted alphabetically.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Parameter 'keywords' is null.
            </exception>
            <remarks>
            <para>
            This method registers a set of keywords to be highlighted.
            </para>
            <para>
            The keywords stored in <paramref name="keywords"/> parameter will
            be highlighted as a character class specified by <paramref name="klass"/> parameter. Please ensure that keywords in <paramref name="keywords"/> parameter must be alphabetically sorted. If they
            are not sorted, <see cref="T:System.ArgumentException"/> will be thrown.
            </para>
            <para>
            If <paramref name="ignoreCase"/> is true, KeywordHighlighter
            ignores case of all given keywords on matching. Note that if
            <paramref name="ignoreCase"/> is true, all characters of keywords
            must be in lower case otherwise keywords may not be highlighted
            properly.
            </para>
            <para>
            If other character must be considered as a part of keyword, use
            <see cref="P:Sgry.Azuki.Highlighter.KeywordHighlighter.WordCharSet">WordCharSet</see> property.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.KeywordHighlighter.ClearKeywords">
            <summary>
            Clears registered keywords.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.KeywordHighlighter.AddRegex(System.String,Sgry.Azuki.CharClass)">
            <summary>
            Entry a pattern specified with a regular expression (case
            sensitive) to be highlighted.
            </summary>
            <param name="regex">
            A regular expression expressing a text pattern to be highlighted.
            </param>
            <param name="klass">
            Character class to be assigned for each characters
            consisting the pattern matched with the regular expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Parameter 'regex' was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Parameter 'regex' was not a valid regular expression.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.KeywordHighlighter.AddRegex(System.String,System.Boolean,Sgry.Azuki.CharClass)">
            <summary>
            Entry a pattern specified with a regular expression
            to be highlighted.
            </summary>
            <param name="regex">
            A regular expression expressing a text pattern to be highlighted.
            </param>
            <param name="ignoreCase">
            Whether the regular expression should be matched
            case-insensitively or not.
            </param>
            <param name="klass">
            Character class to be assigned for each characters
            consisting the pattern matched with the regular expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Parameter 'regex' was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Parameter 'regex' was not a valid regular expression.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.KeywordHighlighter.AddRegex(System.Text.RegularExpressions.Regex,Sgry.Azuki.CharClass)">
            <summary>
            Entry a pattern specified with a regular expression
            to be highlighted.
            </summary>
            <param name="regex">
            A regular expression expressing a text pattern to be highlighted.
            </param>
            <param name="klass">
            Character class to be assigned for each characters
            consisting the pattern matched with the regular expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Parameter 'regex' was null.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.KeywordHighlighter.AddRegex(System.String,System.Collections.Generic.IList{Sgry.Azuki.CharClass})">
            <summary>
            Entry a pattern specified with a regular expression (case
            sensitive) containing capturing groups which will be highlighted.
            </summary>
            <param name="regex">
            A regular expression containing capturing groups
            to be highlighted.
            </param>
            <param name="klassList">
            A list of character classes to be assigned,
            for each captured groups in the regular expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Parameter 'regex' or 'klassList' was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Parameter 'regex' was not a valid regular expression.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.KeywordHighlighter.AddRegex(System.String,System.Boolean,System.Collections.Generic.IList{Sgry.Azuki.CharClass})">
            <summary>
            Entry a pattern specified with a regular expression containing
            capturing groups which will be highlighted.
            </summary>
            <param name="regex">
            A regular expression containing capturing groups
            to be highlighted.
            </param>
            <param name="ignoreCase">
            Whether the regular expression should be matched
            case-insensitively or not.
            </param>
            <param name="klassList">
            A list of character classes to be assigned,
            for each captured groups in the regular expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Parameter 'regex' or 'klassList' was null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Parameter 'regex' was not a valid regular expression.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.KeywordHighlighter.AddRegex(System.Text.RegularExpressions.Regex,System.Collections.Generic.IList{Sgry.Azuki.CharClass})">
            <summary>
            Entry a pattern specified with a regular expression containing
            capturing groups which will be highlighted.
            </summary>
            <param name="regex">
            A regular expression containing capturing groups
            to be highlighted.
            </param>
            <param name="klassList">
            A list of character classes to be assigned,
            for each captured groups in the regular expression.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Parameter 'regex' or 'klassList' was null.
            </exception>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.KeywordHighlighter.ClearRegex">
            <summary>
            Removes all entry of patterns specified with a regular expression
            to be highlighted.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.KeywordHighlighter.Highlight(Sgry.Azuki.Document)">
            <summary>
            Parse and highlight keywords.
            </summary>
            <param name="doc">Document to highlight.</param>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.KeywordHighlighter.Highlight(Sgry.Azuki.Document,System.Int32@,System.Int32@)">
            <summary>
            Parse and highlight keywords.
            </summary>
            <param name="doc">Document to highlight.</param>
            <param name="dirtyBegin">
            Index to start highlighting.
            On return, start index of the range to be invalidated.
            </param>
            <param name="dirtyEnd">
            Index to end highlighting.
            On return, end index of the range to be invalidated.
            </param>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.KeywordHighlighter.TryHighlight(Sgry.Azuki.Document,System.Collections.Generic.List{Sgry.Azuki.Highlighter.KeywordHighlighter.KeywordSet},System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Do keyword matching in [startIndex, endIndex) through keyword
            char-tree.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Highlighter.KeywordHighlighter.CanUseHook">
            <summary>
            Gets whether a highlighter hook procedure can be installed or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Highlighter.KeywordHighlighter.HookProc">
            <summary>
            Gets or sets highlighter hook procedure.
            </summary>
            <seealso cref="P:Sgry.Azuki.Highlighter.IHighlighter.CanUseHook">
            IHighlighter.CanUseHook property
            </seealso>
            <seealso cref="T:Sgry.Azuki.Highlighter.HighlightHook">
            HighlightHook delegate
            </seealso>
        </member>
        <member name="P:Sgry.Azuki.Highlighter.KeywordHighlighter.HighlightsNumericLiterals">
            <summary>
            Gets or sets whether to enable built-in logic to recognize numeric
            literals or not.
            </summary>
            <remarks>
            <para>
            By default, KeywordHighlighter recognizes numeric literals (such as
            3.14, 0xfffe) automatically and highlights them. This built-in
            logic highlights:
            </para>
            <list style="bullet">
            	<item>
            	tokens starting with '0x' and every following character are one
            	of '0123456789abcdefABCDEF', and
            	</item>
            	<item>
            	tokens starting with digits or dot (period) and ends with one
            	of 'fijlFIJL'.
            	</item>
            </list>
            <para>
            This feature is a kind of legacy implemented back when this class
            cannot highlight patterns specified with regular expressions.
            Because there is no customization option, if you want to highlight
            numeric literals which cannot be highlighted by this logic, disable
            this feature and define regular expressions for numeric literals by
            your own.
            </para>
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.Highlighter.KeywordHighlighter.WordCharSet">
            <summary>
            Gets or sets word-character set.
            </summary>
            <exception cref="T:System.ArgumentException">
            Characters in value are not sorted alphabetically.
            </exception>
            <remarks>
            <para>
            KeywordHighlighter treats a sequence of characters in a
            word-character set as a word. The word-character set must be an
            alphabetically sorted character sequence. Setting this property to
            a character sequence which is not sorted alphabetically, <see cref="T:System.ArgumentException"/> will be thrown. If this property
            was set to null, KeywordHighlighter uses internally defined default
            word-character set. Default word-character set is <c>0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz</c>.
            </para>
            <para>
            Word-character set affects keyword matching process. If a keyword
            partially matched to a token in a document, KeywordHighlighter
            checks whether the character at the place where the match ended is
            included in the word-character set or not. Then if it was NOT a one
            of the word-character set, KeywordHighlighter determines the token
            which ends there is a keyword and highlight the token. For example,
            if word-character set is "abc_" and document is
            "abc-def abc_def", "abc" of "abc-def"
            will be highlighted but "abc" of "abc_def" will
            NOT be highlighted because following character for former one ('-')
            is not included in the word-character set but one of the latter
            pattern ('_') is included. Note that if there are keywords that
            contain characters not included in the word-character set,
            KeywordHighlighter will not highlight such keywords properly.
            </para>
            </remarks>
        </member>
        <member name="T:Sgry.Azuki.Highlighter.CppHighlighter">
            <summary>
            Highlighter for C/C++ language based on keyword matching.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.CppHighlighter.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.Highlighter.CSharpHighlighter">
            <summary>
            Highlighter for C# language based on keyword matching.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.CSharpHighlighter.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.Highlighter.Highlighters">
            <summary>
            Factory to create built-in highlighter objects.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Highlighter.Highlighters.Latex">
            <summary>
            Gets a new highlighter for LaTeX.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Highlighter.Highlighters.BatchFile">
            <summary>
            Gets a new highlighter for batch file.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Highlighter.Highlighters.Cpp">
            <summary>
            Gets a new highlighter for C/C++.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Highlighter.Highlighters.CSharp">
            <summary>
            Gets a new highlighter for C#.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Highlighter.Highlighters.Diff">
            <summary>
            Gets a new highlighter for Diff format.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Highlighter.Highlighters.Ini">
            <summary>
            Gets a new highlighter for INI.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Highlighter.Highlighters.Java">
            <summary>
            Gets a new highlighter for Java.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Highlighter.Highlighters.Python">
            <summary>
            Gets a new highlighter for Python.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Highlighter.Highlighters.Ruby">
            <summary>
            Gets a new highlighter for Ruby.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Highlighter.Highlighters.JavaScript">
            <summary>
            Gets a new highlighter for JavaScript.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Highlighter.Highlighters.Xml">
            <summary>
            Gets a new highlighter for XML.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.Highlighter.HighlightHook">
            <summary>
            The type of the hook to override
            default procedure to highlight a token.
            </summary>
            <param name="doc">The document to be highlighted.</param>
            <param name="token">The substring to be highlighted.</param>
            <param name="index">The index of where the token is at.</param>
            <param name="klass">The character class which the token is to be classified as, by the highlighter.</param>
            <returns>
            Return true if default behavior of the highlighter should be suppressed,
            otherwise return false.
            </returns>
            <remarks>
            <para>
            Please refer to the document of 
            <see cref="P:Sgry.Azuki.Highlighter.IHighlighter.HookProc">IHighlighter.HookProc property</see> about hook mechanism.
            </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.Highlighter.IHighlighter.HookProc">IHighlighter.HookProc property</seealso>
        </member>
        <member name="T:Sgry.Azuki.Highlighter.JavaHighlighter">
            <summary>
            Highlighter for Java language based on keyword matching.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.JavaHighlighter.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.Highlighter.LatexHighlighter">
            <summary>
            A highlighter to highlight LaTeX.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.LatexHighlighter.Highlight(Sgry.Azuki.Document)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.LatexHighlighter.Highlight(Sgry.Azuki.Document,System.Int32@,System.Int32@)">
            <summary>
            Highlightes a LaTeX document.
            </summary>
            <param name="doc">Document to highlight.</param>
            <param name="dirtyBegin">Index to start highlighting. On return, start index of the range to be invalidated.</param>
            <param name="dirtyEnd">Index to end highlighting. On return, end index of the range to be invalidated.</param>
        </member>
        <member name="P:Sgry.Azuki.Highlighter.LatexHighlighter.CanUseHook">
            <summary>
            Gets or sets whether a highlighter hook procedure can be installed or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Highlighter.LatexHighlighter.HookProc">
            <summary>
            Gets or sets highlighter hook procedure.
            </summary>
            <exception cref="T:System.NotSupportedException">This highlighter does not support hook procedure.</exception>
        </member>
        <member name="T:Sgry.Azuki.Highlighter.RubyHighlighter">
            <summary>
            Highlighter for Ruby language based on keyword matching.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.RubyHighlighter.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.Highlighter.Enclosure">
            <summary>
            Class which expresses an enclosing pair like '[' and ']'.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.Utl.TryHighlight(Sgry.Azuki.Document,System.Collections.Generic.List{Sgry.Azuki.Highlighter.Enclosure},System.Int32,System.Int32,Sgry.Azuki.Highlighter.HighlightHook,System.Int32@)">
            <summary>
            Highlight an enclosed part with specified patterns.
            </summary>
            <returns>
            Whether any characters are highlighted or not.
            </returns>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.Utl.TryHighlight(Sgry.Azuki.Document,Sgry.Azuki.Highlighter.Enclosure,System.Int32,System.Int32,Sgry.Azuki.Highlighter.HighlightHook,System.Int32@)">
            <summary>
            Highlight an enclosed part with specified patterns.
            </summary>
            <returns>
            Whether any characters are highlighted or not.
            </returns>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.Utl.TryHighlightNumberToken(Sgry.Azuki.Document,System.Int32,System.Int32,Sgry.Azuki.Highlighter.HighlightHook)">
            <summary>
            Highlights a token which is regarded as a numeric literals.
            </summary>
            <returns>
            Index of next parsing position if a pair was highlighted otherwise
            '<paramref name="startIndex"/>'.
            </returns>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.Utl.Highlight(Sgry.Azuki.Document,System.Int32,System.Int32,Sgry.Azuki.CharClass,Sgry.Azuki.Highlighter.HighlightHook)">
            <summary>
            Highlights characters in specified range.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.Utl.FindNextToken(Sgry.Azuki.Document,System.Int32,System.String)">
            <summary>
            Find next token beginning position and return it's index.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.Utl.Find(Sgry.Azuki.Document,System.String,System.Int32,System.Int32)">
            <summary>
            Find token.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.Utl.FindLast(Sgry.Azuki.Document,System.String,System.Int32)">
            <summary>
            Finds token backward.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.Utl.FindCloser(Sgry.Azuki.Document,Sgry.Azuki.Highlighter.Enclosure,System.Int32,System.Int32)">
            <summary>
            Returns closer pos or line-end if closer is null.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.Utl.FindCloser(Sgry.Azuki.Document,Sgry.Azuki.Highlighter.Enclosure,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Returns where the enclosing part ends.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.Utl.GetLineEndIndexFromCharIndex(Sgry.Azuki.Document,System.Int32)">
            <summary>
            Gets index of the end position of the line containing given index.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.Utl.StartsWith(Sgry.Azuki.Document,System.String,System.Int32,System.Boolean)">
            <summary>
            Determine whether the token starts with given index in the document.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.Highlighter.XmlHighlighter">
            <summary>
            A highlighter to highlight XML.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.XmlHighlighter.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.XmlHighlighter.Highlight(Sgry.Azuki.Document)">
            <summary>
            Parse and highlight keywords.
            </summary>
            <param name="doc">Document to highlight.</param>
        </member>
        <member name="M:Sgry.Azuki.Highlighter.XmlHighlighter.Highlight(Sgry.Azuki.Document,System.Int32@,System.Int32@)">
            <summary>
            Parse and highlight keywords.
            </summary>
            <param name="doc">Document to highlight.</param>
            <param name="dirtyBegin">Index to start highlighting. On return, start index of the range to be invalidated.</param>
            <param name="dirtyEnd">Index to end highlighting. On return, end index of the range to be invalidated.</param>
        </member>
        <member name="P:Sgry.Azuki.Highlighter.XmlHighlighter.CanUseHook">
            <summary>
            Gets or sets whether a highlighter hook procedure can be installed or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Highlighter.XmlHighlighter.HookProc">
            <summary>
            Gets or sets highlighter hook procedure.
            </summary>
            <exception cref="T:System.NotSupportedException">This highlighter does not support hook procedure.</exception>
        </member>
        <member name="T:Sgry.Azuki.IUserInterface">
            <summary>
            Interface of user interface module.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.ResetKeyBind">
            <summary>
            Reset keybind to default.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.GetKeyBind(System.UInt32)">
            <summary>
            Gets an action which is already associated with given key.
            If no action was associate with given key, returns null.
            </summary>
            <param name="keyCode">key code</param>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.SetKeyBind(System.UInt32,Sgry.Azuki.ActionProc)">
            <summary>
            Sets or removes key-bind entry.
            Note that giving null to action will remove the key-bind.
            </summary>
            <param name="keyCode">key code to set/remove new action</param>
            <param name="action">action to be associated or null in case of removing key-bind.</param>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.UpdateCaretGraphic">
            <summary>
            Updates size and position of the caret graphic.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.UpdateCaretGraphic(System.Drawing.Rectangle)">
            <summary>
            Updates size and position of the caret graphic.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.SetCursorGraphic(Sgry.Azuki.MouseCursor)">
            <summary>
            Sets graphic of mouse cursor.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.Invalidate">
            <summary>
            Invalidate graphic of whole area
            (force to be redrawn by next paint event message).
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.Invalidate(System.Drawing.Rectangle)">
            <summary>
            Invalidate graphic of the specified area
            (force to be redrawn by next paint event message).
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.Undo">
            <summary>
            Execute UNDO.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.ClearHistory">
            <summary>
            Clears all stacked edit histories in currently active document.
            </summary>
            <remarks>
            <para>
            This method clears all editing histories for
            UNDO or REDO action in currently active document.
            </para>
            </remarks>
            <seealso cref="M:Sgry.Azuki.WinForms.AzukiControl.ClearHistory">AzukiControl.ClearHistory method</seealso>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.Redo">
            <summary>
            Executes REDO.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.Cut">
            <summary>
            Executes cut action.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.Copy">
            <summary>
            Executes copy action.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.Paste">
            <summary>
            Executes paste action.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.Delete">
            <summary>
            Executes delete action.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.HandleTextInput(System.String)">
            <summary>
            Processes specified text as an input by user.
            </summary>
            <param name="text">The string to be processed.</param>
            <exception cref="T:System.InvalidOperationException">This object is already disposed.</exception>
            <exception cref="T:System.ArgumentNullException">Parameter 'text' is null.</exception>
            <remarks>
            <para>
            This method processes specified text as an input by user.
            Because this method is the implementation of user input,
            some special pre-processes will be done.
            The example of pre-processes are next:
            </para>
            <list type="bullet">
            	<item>If Document.ReadOnly property is true, this method will do nothing.</item>
            	<item>This method applies AutoIndentHook for each characters in the text.</item>
            	<item>This method applies built-in hook processes such as converting tab to spaces.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.SetSelection(System.Int32,System.Int32)">
            <summary>
            Sets selection range and update the desired column.
            </summary>
            <param name="anchor">the position where the selection begins</param>
            <param name="caret">the position where the caret is</param>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.GetSelection(System.Int32@,System.Int32@)">
            <summary>
            Gets range of current selection.
            Note that this method does not return [anchor, caret) pair but [begin, end) pair.
            </summary>
            <param name="begin">index of where the selection begins.</param>
            <param name="end">index of where the selection ends (selection do not includes the char at this index).</param>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.SelectAll">
            <summary>
            Selects all text.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.GetTextInRange(System.Int32,System.Int32)">
            <summary>
            Gets text in the range [begin, end).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified range was invalid.</exception>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.GetSelectedTextLength">
            <summary>
            Gets number of characters currently selected.
            </summary>
            <returns>Number of characters currently selected.</returns>
            <remarks>
            <para>
            This method gets number of characters currently selected,
            properly even if the selection mode is rectangle selection.
            </para>
            <para>
            Note that the difference between the end of selection and the beginning of selection
            is not a number of selected characters if they are selected by rectangle selection.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.GetSelectedText">
            <summary>
            Gets currently selected text.
            </summary>
            <returns>Currently selected text.</returns>
            <remarks>
            <para>
            This method gets currently selected text.
            </para>
            <para>
            If current selection is rectangle selection,
            return value will be a string that are consisted with selected partial lines (rows)
            joined with CR+LF.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.GetSelectedText(System.String)">
            <summary>
            Gets currently selected text.
            </summary>
            <returns>Currently selected text.</returns>
            <remarks>
            <para>
            This method gets currently selected text.
            </para>
            <para>
            If current selection is rectangle selection,
            return value will be a string that are consisted with selected partial lines (rows)
            joined with specified string.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.GetLineLength(System.Int32)">
            <summary>
            Gets length of the specified line.
            </summary>
            <param name="lineIndex">Index of the line of which to get the length.</param>
            <returns>Length of the specified line in character count.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of valid range.</exception>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.GetIGraphics">
            <summary>
            Gets a graphic interface.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.RescheduleHighlighting">
            <summary>
            (Internal use only.) Make a highlighter run after a little moment.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.GetPositionFromIndex(System.Int32)">
            <summary>
            Calculate screen location of the character at specified index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid index was given.</exception>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.GetPositionFromIndex(System.Int32,System.Int32)">
            <summary>
            Calculate screen location of the character at specified index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid index was given.</exception>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.GetIndexFromPosition(System.Drawing.Point)">
            <summary>
            Get char-index of the char at the point specified by screen location.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.GetLineHeadIndex(System.Int32)">
            <summary>
            Gets the index of the first char in the line.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was invalid.</exception>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.GetLineHeadIndexFromCharIndex(System.Int32)">
            <summary>
            Gets the index of the first char in the screen line
            which contains the specified char-index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was invalid.</exception>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.GetLineIndexFromCharIndex(System.Int32)">
            <summary>
            Calculates screen line index from char-index.
            </summary>
            <param name="charIndex">The index of the line which contains the char at this parameter will be calculated.</param>
            <returns>The index of the line which contains the character at specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.GetLineColumnIndexFromCharIndex(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Calculates screen line/column index from char-index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was invalid.</exception>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.GetCharIndexFromLineColumnIndex(System.Int32,System.Int32)">
            <summary>
            Calculates char-index from screen line/column index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was invalid.</exception>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.InvokeCaretMoved">
            <summary>
            Invokes CaretMoved event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.InvokeIsRectSelectModeChanged">
            <summary>
            Invokes IsRectSelectModeChanged event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.InvokeOverwriteModeChanged">
            <summary>
            Invokes OverwriteModeChanged event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.InvokeLineDrawing(Sgry.Azuki.IGraphics,System.Int32,System.Drawing.Point)">
            <summary>
            Invokes LineDrawing event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.InvokeLineDrawn(Sgry.Azuki.IGraphics,System.Int32,System.Drawing.Point)">
            <summary>
            Invokes LineDrawn event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.InvokeVScroll">
            <summary>
            (Internal use only.) Invokes VScroll event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.InvokeHScroll">
            <summary>
            (Internal use only.) Invokes HScroll event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.Scroll(System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            Scrolls a portion of the window.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.ScrollToCaret">
            <summary>
            Scrolls to where the caret is.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IUserInterface.UpdateScrollBarRange">
            <summary>
            Updates scrollbar's range.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.Document">
            <summary>
            Gets or sets the document which is the current editing target.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.View">
            <summary>
            Gets the associated view object.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.ViewType">
            <summary>
            Gets or sets type of the view.
            View type determine how to render text content.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.TopMargin">
            <summary>
            Gets or sets top margin of the view in pixel.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">A negative number was set.</exception>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.LeftMargin">
            <summary>
            Gets or sets left margin of the view in pixel.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">A negative number was set.</exception>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.HRulerIndicatorType">
            <summary>
            Gets or sets type of the indicator on the horizontal ruler.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.Font">
            <summary>
            Font to be used for displaying text.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.FontInfo">
            <summary>
            Font information to be used for displaying text.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.ColorScheme">
            <summary>
            Color set used for displaying text.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.DrawingOption">
            <summary>
            Gets or sets drawing options.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.ShowsLineNumber">
            <summary>
            Whether to show line number or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.ShowsHScrollBar">
            <summary>
            Whether to show horizontal scroll bar or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.ShowsDirtBar">
            <summary>
            Gets or sets whether to show 'dirt bar' or not.
            </summary>
            <remarks>
            <para>
            This property gets or sets whether to show 'dirt bar' or not.
            The dirt bar is graphically a thin bar at right end of the line number area
            that indicates the dirty state of each text line.
            The state of line is one of the following states.
            </para>
            <list type="bullet">
            	<item>LineDirtyState.Clean: the line is not modified yet.</item>
            	<item>LineDirtyState.Dirty: the line is modified and not saved.</item>
            	<item>LineDirtyState.Cleaned: the line is modified but saved.</item>
            </list>
            <para>
            Color of each line dirty state can be customized by setting
            ColorScheme.DirtyLineBar, ColorScheme.CleanedLineBar.
            </para>
            </remarks>
            <seealso cref="T:Sgry.Azuki.LineDirtyState">LineDirtyState enum</seealso>
            <seealso cref="M:Sgry.Azuki.Document.GetLineDirtyState(System.Int32)">Document.GetLineDirtyState method</seealso>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.HighlightsCurrentLine">
            <summary>
            Gets or sets whether the current line would be drawn with underline or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.HighlightsMatchedBracket">
            <summary>
            Gets or sets whether to highlight matched bracket or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.DrawsSpace">
            <summary>
            Gets or sets whether to show half-width space with special graphic or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.DrawsFullWidthSpace">
            <summary>
            Gets or sets whether to show full-width space with special graphic or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.DrawsTab">
            <summary>
            Gets or sets whether to show tab character with special graphic or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.DrawsEolCode">
            <summary>
            Gets or sets whether to show EOL code with special graphic or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.TabWidth">
            <summary>
            Gets or sets tab width in count of space characters.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.LineHeight">
            <summary>
            Gets height of each lines in pixel.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.LineSpacing">
            <summary>
            Gets distance between lines in pixel.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.ViewWidth">
            <summary>
            Sets width of the content area (including line number area).
            </summary>
            <remarks>
            <para>
            This property gets or sets width by pixel of the whole graphical area
            containing line number area, dirt bar area, left border, and text area.
            </para>
            <para>
            If you want to specify this property not by pixels but by number of characters,
            you can use
            <see cref="P:Sgry.Azuki.IView.HRulerUnitWidth">IView.HRulerUnitWidth</see>
            value as 'reasonable' avarage width of characters.
            </para>
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.IsReadOnly">
            <summary>
            Gets or sets whether this document is read-only or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.IsOverwriteMode">
            <summary>
            Gets or sets whether overwrite mode is enabled or not. In overwrite
            mode, input character will not be inserted but replaces a character
            at where the caret is on.
            </summary>
            <seealso cref="E:Sgry.Azuki.IUserInterface.OverwriteModeChanged">
            IUserInterface.OverwriteModeChanged event
            </seealso>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.ConvertsTabToSpaces">
            <summary>
            Gets or sets whether tab characters are used for indentation,
            instead of space characters.
            </summary>
            <remarks>
            <para>
            This property is a synonym of <see cref="P:Sgry.Azuki.IUserInterface.UsesTabForIndent">UsesTabForIndent
            </see> property.
            </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.IUserInterface.UsesTabForIndent">
            UsesTabForIndent property
            </seealso>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.UsesTabForIndent">
            <summary>
            Gets or sets whether a tab character should be used for indentation
            or not, instead of space characters.
            </summary>
            <remarks>
            <para>
            This property gets or sets whether tab characters are used for
            indentation or not. If this property is false, space characters
            will be used.
            </para>
            <para>
            This property affects every action involving indentation. Next is
            the list of such actions:
            </para>
            <list type="bullet">
            	<item>
            	Inserting an indentation character sequence
            	(hitting the "tab" on your keyboard).
            	</item>
            	<item>
            	Executing block-indent.
            	</item>
            	<item>
            	Executing auto-indentation which requires to indent lines. An
            	example is smart-indentation for C/C++ language. If user hits
            	"Enter" key when the caret is at end of line which
            	ends with a closing curly bracket (<c> } </c>), newly generated
            	line will be indented.
            	</item>
            	<item>
            	Pasting rectangular selection data, under specific condition.
            	An example of the condition is; pasting when (1) a rectangular
            	selection contains two lines, (2) the caret is at the end
            	of a line which is not empty, and (3) the next line is empty.
            	In this case, an appropriate amount of whitespaces are needed
            	to be appended to the the next (empty) line so that the second
            	line in the rectangular selection data will be placed at the
            	same column position as the first line.
            	</item>
            </list>
            </remarks>
            <seealso cref="P:Sgry.Azuki.IUserInterface.TabWidth">
            IUserInterface.TabWidth property
            </seealso>
            <seealso cref="M:Sgry.Azuki.Actions.BlockIndent(Sgry.Azuki.IUserInterface)">
            Actions.BlockIndent action
            </seealso>
            <seealso cref="M:Sgry.Azuki.Actions.BlockUnIndent(Sgry.Azuki.IUserInterface)">
            Actions.BlockUnIndent action
            </seealso>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.ConvertsFullWidthSpaceToSpace">
            <summary>
            Gets or sets whether to automatically convert
            an input full-width space to a space.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.IsRectSelectMode">
            <summary>
            Gets whether Azuki is in rectangle selection mode or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.SelectionMode">
            <summary>
            Gets or sets currently active selection mode.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.IsSingleLineMode">
            <summary>
            Gets or sets whether the content should be limited to a single line.
            </summary>
            <remarks>
            <para>
            This property determines
            whether the content of Azuki should be kept in single line or not.
            </para>
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.UsesStickyCaret">
            <summary>
            Gets or sets whether caret behavior is 'sticky' or not.
            </summary>
            <remarks>
            <para>
            This property determines whether the caret behaves
            'sticky' or not.
            </para>
            <para>
            Sticky caret tries to keep its desired column position unless user
            explicitly changes it (by hitting right or left key, for instance.)
            Non-sticky caret updates 'desired column position' everytime you
            type so moving up or down never change column position of caret.
            On the other hand, sticky caret does not update desired column
            position by typing (because user does not 'explicitly' changed it,)
            so moving up or down restores the column position to the one
            where you start typing text.
            </para>
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.MarksUri">
            <summary>
            Gets or sets whether URIs in the active document
            should be marked automatically with built-in URI marker or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.CanUndo">
            <summary>
            Whether an available undo action exists or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.IsRecordingHistory">
            <summary>
            Whether the edit actions will be recorded or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.CanRedo">
            <summary>
            Gets whether an available REDO action exists or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.CanCut">
            <summary>
            Gets whether cut action can be executed or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.CanCopy">
            <summary>
            Gets whether copy action can be executed or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.CanPaste">
            <summary>
            Gets whether paste action can be executed or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.CaretIndex">
            <summary>
            Gets the index of where the caret is at (in char-index).
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.Text">
            <summary>
            Gets or sets currently inputted text.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.TextLength">
            <summary>
            Gets currently inputted character's count.
            Note that a surrogate pair or a combined character sequence
            will be counted as two characters.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.LineCount">
            <summary>
            Gets number of lines currently inputted.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.Highlighter">
            <summary>
            Gets or sets highlighter object to highlight currently active document
            or null to disable highlighting.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IUserInterface.Focused">
            <summary>
            Gets this component is focused by user or not.
            </summary>
        </member>
        <member name="E:Sgry.Azuki.IUserInterface.CaretMoved">
            <summary>
            Occurs soon after the document's caret was moved.
            </summary>
        </member>
        <member name="E:Sgry.Azuki.IUserInterface.IsRectSelectModeChanged">
            <summary>
            Occures soon after rectangular selection mode was changed.
            </summary>
        </member>
        <member name="E:Sgry.Azuki.IUserInterface.OverwriteModeChanged">
            <summary>
            Occurs soon after the overwrite mode was moved.
            </summary>
            <seealso cref="P:Sgry.Azuki.IUserInterface.IsOverwriteMode">IUserInterface.IsOverwriteMode property</seealso>
        </member>
        <member name="E:Sgry.Azuki.IUserInterface.LineDrawing">
            <summary>
            Occurres before a screen line was drawn.
            </summary>
        </member>
        <member name="E:Sgry.Azuki.IUserInterface.LineDrawn">
            <summary>
            Occurres after a screen line was drawn.
            </summary>
        </member>
        <member name="E:Sgry.Azuki.IUserInterface.VScroll">
            <summary>
            Occurres after vertical scroll happened.
            </summary>
        </member>
        <member name="E:Sgry.Azuki.IUserInterface.HScroll">
            <summary>
            Occurres after vertical scroll happened.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.LineDrawEventHandler">
            <summary>
            Event handler for LineDrawing event or LineDrawn event.
            </summary>
            <param name="sender">The view object which invoked the event.</param>
            <param name="e">Information about the event.</param>
            <seealso cref="E:Sgry.Azuki.IUserInterface.LineDrawing">IUserInterface.LineDrawing event</seealso>
            <seealso cref="E:Sgry.Azuki.IUserInterface.LineDrawn">IUserInterface.LineDrawn event</seealso>
        </member>
        <member name="T:Sgry.Azuki.LineDrawEventArgs">
            <summary>
            Information about LineDrawing event or LineDrawn event.
            </summary>
            <seealso cref="T:Sgry.Azuki.LineDrawEventHandler">LineDrawEventHandler delegate</seealso>
            <seealso cref="E:Sgry.Azuki.IUserInterface.LineDrawing">IUserInterface.LineDrawing event</seealso>
            <seealso cref="E:Sgry.Azuki.IUserInterface.LineDrawn">IUserInterface.LineDrawn event</seealso>
        </member>
        <member name="M:Sgry.Azuki.LineDrawEventArgs.#ctor(Sgry.Azuki.IGraphics,System.Int32,System.Drawing.Point)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.LineDrawEventArgs.Graphics">
            <summary>
            The graphic drawing interface currently used.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.LineDrawEventArgs.LineIndex">
            <summary>
            The index of screen line which is to be drawn, or was drawn.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.LineDrawEventArgs.Position">
            <summary>
            Gets the top-left position of the screen line which is about to be drawn, or was drawn.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.LineDrawEventArgs.ShouldBeRedrawn">
            <summary>
            Gets or sets whether graphic of the entire line
            should be redrawn after the event or not.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.LineLogic">
            <summary>
            Logics to handle line/column in a buffer.
            In this logic, "line" means characters with one EOL code at tail.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.LineLogic.LHI_Insert(Sgry.Azuki.SplitArray{System.Int32},Sgry.Azuki.SplitArray{Sgry.Azuki.LineDirtyState},Sgry.Azuki.TextBuffer,System.String,System.Int32)">
            <summary>
            Maintain line head indexes for text insertion.
            THIS MUST BE CALLED BEFORE ACTUAL INSERTION.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.LineLogic.LHI_Delete(Sgry.Azuki.SplitArray{System.Int32},Sgry.Azuki.SplitArray{Sgry.Azuki.LineDirtyState},Sgry.Azuki.TextBuffer,System.Int32,System.Int32)">
            <summary>
            Maintain line head indexes for text deletion.
            THIS MUST BE CALLED BEFORE ACTUAL DELETION.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.LineLogic.PrevNonEolChar(Sgry.Azuki.TextBuffer,System.Int32)">
            <summary>
            Find non-EOL char from specified index.
            Note that the char at specified index always be skipped.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.IPlatform">
            <summary>
            The interface for invoking Platform API.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IPlatform.MessageBeep">
            <summary>
            Notify user by platform-dependent method
            (may be auditory or graphically.)
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IPlatform.GetClipboardText(Sgry.Azuki.TextDataType@)">
            <summary>
            Gets content of the system clipboard.
            </summary>
            <param name="dataType">The type of the text data in the clipboard</param>
            <returns>Text content retrieved from the clipboard if available. Otherwise null.</returns>
            <remarks>
            This method gets text from the system clipboard.
            If stored text data is a special format (line or rectangle,)
            its data type will be set to <paramref name="dataType"/> parameter.
            </remarks>
            <seealso cref="T:Sgry.Azuki.TextDataType">TextDataType enum</seealso>
        </member>
        <member name="M:Sgry.Azuki.IPlatform.SetClipboardText(System.String,Sgry.Azuki.TextDataType)">
            <summary>
            Sets content of the system clipboard.
            </summary>
            <param name="text">Text data to set.</param>
            <param name="dataType">Type of the data to set.</param>
            <remarks>
            This method set content of the system clipboard.
            If <paramref name="dataType"/> is TextDataType.Normal,
            the text data will be just a character sequence.
            If <paramref name="dataType"/> is TextDataType.Line or TextDataType.Rectangle,
            stored text data would be special format that is compatible with Microsoft Visual Studio.
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.IPlatform.GetGraphics(System.Object)">
            <summary>
            Gets a graphic device context from a window.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IPlatform.DragSize">
            <summary>
            It will be regarded as a drag operation by the system
            if mouse cursor moved beyond this rectangle.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.IGraphics">
            <summary>
            Graphic drawing interface.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IGraphics.BeginPaint(System.Drawing.Rectangle)">
            <summary>
            Begin using off-screen buffer and cache drawing which will be done after.
            </summary>
            <param name="paintRect">painting area (used for creating off-screen buffer).</param>
        </member>
        <member name="M:Sgry.Azuki.IGraphics.EndPaint">
            <summary>
            End using off-screen buffer and flush all drawing results.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IGraphics.SetClipRect(System.Drawing.Rectangle)">
            <summary>
            Select specified rectangle as a clipping region.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IGraphics.RemoveClipRect">
            <summary>
            Remove currently selected clipping region.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IGraphics.DrawText(System.String,System.Drawing.Point@,System.Drawing.Color)">
            <summary>
            Draws a text.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IGraphics.MeasureText(System.String)">
            <summary>
            Measures graphical size of the specified text.
            </summary>
            <param name="text">text to measure</param>
            <returns>size of the text in the graphic device context</returns>
        </member>
        <member name="M:Sgry.Azuki.IGraphics.MeasureText(System.String,System.Int32,System.Int32@)">
            <summary>
            Measures graphical size of the a text within the specified clipping width.
            </summary>
            <param name="text">text to measure</param>
            <param name="clipWidth">width of the clipping area for rendering text (in pixel unit if the context is screen)</param>
            <param name="drawableLength">count of characters which could be drawn within the clipping area width</param>
            <returns>size of the text in the graphic device context</returns>
        </member>
        <member name="M:Sgry.Azuki.IGraphics.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line with foreground color.
            Note that the point where the line extends to will also be painted.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IGraphics.DrawRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle with foreground color.
            Note that right and bottom edge will also be painted.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IGraphics.FillRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills a rectangle with background color.
            Note that right and bottom edge will also be painted.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IGraphics.Font">
            <summary>
            Font used for drawing/measuring text.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IGraphics.FontInfo">
            <summary>
            Font used for drawing/measuring text.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IGraphics.ForeColor">
            <summary>
            Foreground color used by drawing APIs.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IGraphics.BackColor">
            <summary>
            Background color used by drawing APIs.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.FontInfo">
            <summary>
            Information about font.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.FontInfo.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.FontInfo.#ctor(System.String,System.Int32,System.Drawing.FontStyle)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.FontInfo.#ctor(Sgry.Azuki.FontInfo)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.FontInfo.#ctor(System.Drawing.Font)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.FontInfo.ToString">
            <summary>
            Gets user readable text of this font information.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.FontInfo.ToFont">
            <summary>
            Creates new instance of System.Drawing.Font with same information.
            </summary>
            <exception cref="T:System.ArgumentException">Failed to create System.Font object.</exception>
        </member>
        <member name="M:Sgry.Azuki.FontInfo.op_Implicit(Sgry.Azuki.FontInfo)~System.Drawing.Font">
            <summary>
            Creates new instance of System.Drawing.Font with same information.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.FontInfo.Name">
            <summary>
            Font face name of this font.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.FontInfo.Size">
            <summary>
            Size of this font in pt (point).
            </summary>
        </member>
        <member name="P:Sgry.Azuki.FontInfo.Style">
            <summary>
            Style of this font.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.Plat">
            <summary>
            The singleton class of platform API caller.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.Plat.Inst">
            <summary>
            The instance of platform API caller object.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.IMouseEventArgs">
            <summary>
            Describes information about mouse event.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IMouseEventArgs.ButtonIndex">
            <summary>
            Gets the index of the mouse button which invoked this event.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IMouseEventArgs.Index">
            <summary>
            Gets the index of the character at where the mouse cursor points when this event occurred.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IMouseEventArgs.Location">
            <summary>
            Gets the location of the mouse cursor when this event occurred.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IMouseEventArgs.X">
            <summary>
            Gets x-coordinate of the mouse cursor when this event occurred.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IMouseEventArgs.Y">
            <summary>
            Gets y-coordinate of the mouse cursor when this event occurred.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IMouseEventArgs.Shift">
            <summary>
            Gets whether Shift key was pressed down when this event occurred.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IMouseEventArgs.Control">
            <summary>
            Gets whether Control key was pressed down when this event occurred.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IMouseEventArgs.Alt">
            <summary>
            Gets whether Alt key was pressed down when this event occurred.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IMouseEventArgs.Special">
            <summary>
            Gets whether Special key (Windows key) was pressed down when this event occurred.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IMouseEventArgs.Handled">
            <summary>
            If set true by an event handler, Azuki does not execute built-in default action.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.Antialias">
            <summary>
            Methods of Anti-Alias to be used for text rendering.
            </summary>
            <seealso cref="P:Sgry.Azuki.UserPref.Antialias">UserPref.Antialias property</seealso>
        </member>
        <member name="F:Sgry.Azuki.Antialias.Default">
            <summary>Uses system default setting.</summary>
        </member>
        <member name="F:Sgry.Azuki.Antialias.None">
            <summary>Applies no anti-alias process.</summary>
        </member>
        <member name="F:Sgry.Azuki.Antialias.Gray">
            <summary>Uses single color anti-alias.</summary>
        </member>
        <member name="F:Sgry.Azuki.Antialias.Subpixel">
            <summary>Uses sub-pixel rendering.</summary>
        </member>
        <member name="T:Sgry.Azuki.UiImpl">
            <summary>
            User interface logic that independent from platform.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.UiImpl.DefaultCaretWidth">
            <summary>
            Width of default caret graphic.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.UiImpl.HandleKeyDown(System.UInt32)">
            <summary>
            Handles key down event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.UiImpl.HandleKeyPress(System.Char)">
            <summary>
            Handles translated character input event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.UiImpl.HandleTextInput(System.String)">
            <summary>
            Handles text input event.
            </summary>
            <exception cref="T:System.InvalidOperationException">This object is already disposed.</exception>
            <exception cref="T:System.ArgumentNullException">Parameter 'text' is null.</exception>
        </member>
        <member name="M:Sgry.Azuki.UiImpl.GetSelectedTextLength">
            <summary>
            Gets number of characters currently selected.
            </summary>
            <returns>Number of characters currently selected.</returns>
            <remarks>
            <para>
            This method gets number of characters currently selected,
            properly even if the selection mode is rectangle selection.
            </para>
            <para>
            Note that the difference between the end of selection and the beginning of selection
            is not a number of selected characters if they are selected by rectangle selection.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.UiImpl.GetSelectedText">
            <summary>
            Gets currently selected text.
            </summary>
            <returns>Currently selected text.</returns>
            <remarks>
            <para>
            This method gets currently selected text.
            </para>
            <para>
            If current selection is rectangle selection,
            return value will be a string that are consisted with selected partial lines (rows)
            joined with CR+LF.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.UiImpl.GetSelectedText(System.String)">
            <summary>
            Gets currently selected text.
            </summary>
            <returns>Currently selected text.</returns>
            <remarks>
            <para>
            This method gets currently selected text.
            </para>
            <para>
            If current selection is rectangle selection,
            return value will be a string that are consisted with selected partial lines (rows)
            joined with specified string.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.UiImpl.GetTabEquivalentSpaces(Sgry.Azuki.IUserInterface,System.Int32)">
            <summary>
            Makes an array of spaces which is equivalent of a tab character
            in case of inserting it to the position indicated by parameter
            'index'.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.UiImpl.GetNeededPaddingChars(Sgry.Azuki.IUserInterface,System.Drawing.Point,System.Boolean)">
            <summary>
            Generates appropriate padding characters that fills the gap between
            the target position and actual line-end position.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.UiImpl.CanCut">
            <summary>
            Gets whether cut action can be executed or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.UiImpl.CanCopy">
            <summary>
            Gets whether copy action can be executed or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.UiImpl.CanPaste">
            <summary>
            Gets whether paste action can be executed or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.UiImpl.View">
            <summary>
            Gets or sets the associated view object.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.UiImpl.ViewType">
            <summary>
            Gets or sets type of the view.
            View type determines how to render text content.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.UiImpl.IsOverwriteMode">
            <summary>
            Gets or sets whether the input character overwrites the character at where the caret is on.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.UiImpl.UsesTabForIndent">
            <summary>
            Gets or sets whether tab characters are used for indentation, instead of space characters.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.UiImpl.ConvertsFullWidthSpaceToSpace">
            <summary>
            Gets or sets whether to automatically convert
            an input full-width space to a space.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.UiImpl.UsesStickyCaret">
            <summary>
            Gets or sets whether caret behavior is 'sticky' or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.UiImpl.IsSingleLineMode">
            <summary>
            Gets or sets whether the content should be limited to a single line.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.UiImpl.MarksUri">
            <summary>
            Gets or sets whether URIs in the active document
            should be marked automatically with built-in URI marker or not.
            </summary>
            <remarks>
            <para>
            Note that built-in URI marker marks URIs in document
            and then Azuki shows the URIs as 'looks like URI,'
            but (1) clicking mouse button on them, or
            (2) pressing keys when the caret is at middle of a URI,
            makes NO ACTION BY DEFAULT.
            To define action on such event,
            programmer must implement such action as a part of
            event handler of standard mouse event or keyboard event.
            </para>
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.UiImpl.AutoIndentHook">
            <summary>
            Gets or sets hook delegate to execute auto-indentation.
            If null, auto-indentation will not be performed.
            </summary>
            <seealso cref="T:Sgry.Azuki.AutoIndentHooks">AutoIndentHooks</seealso>
        </member>
        <member name="P:Sgry.Azuki.UiImpl.Highlighter">
            <summary>
            Gets or sets highlighter for currently active document.
            Setting null to this property will disable highlighting.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.UserPref">
            <summary>
            User preferences.
            </summary>
            <remarks>
            <para>
            UserPref class is a collection of fields which customizes Azuki's behavior.
            All items customizable with this class affects all Azuki instances.
            </para>
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.UserPref.CopyLineWhenNoSelection">
            <summary>
            If true, cut/copy action targets the current line if nothing selected.
            </summary>
            <remarks>
            <para>
            If this property is set true,
            then copy action without any selection will copy
            the line itself which the caret is on.
            Note that this case copies &quot;a line&quot;
            and the copied data will be slightly different from
            mere text data containing all character sequence of that line.
            If a line was copied by this case,
            pasting it when the caret is at middle of a line
            will insert the copied line before the current line.
            </para>
            <para>
            This property affects both cut and copy action.
            </para>
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.UserPref.AutoScrollNearWindowBorder">
            <summary>
            If true, Azuki automatically scrolls when the caret goes near window border.
            </summary>
            <remarks>
            If true, when the caret is near window border Azuki automatically scrolls
            to ensure that at least one more line is visible between the caret and border.
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.UserPref.AutoScrollMargin">
            <summary>
            Gets or sets how close the caret can come to window borders at top or bottom, in line count.
            </summary>
            <remarks>
            <para>
            When user moves caret with keyboard or mouse,
            Azuki automatically scrolls to ensure the caret always be in screen.
            This property determines
            how many lines the caret is distant at most from top or bottom of the window.
            </para>
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.UserPref.UseTextForEofMark">
            <summary>
            If true, Azuki draws EOF mark as text "[EOF]".
            </summary>
        </member>
        <member name="P:Sgry.Azuki.UserPref.Antialias">
            <summary>
            Gets or sets how Azuki anti-aliases text.
            </summary>
            <remarks>
            <para>
            This property determines the anti-aliase method that Azuki uses
            on rendering text.
            </para>
            </remarks>
        </member>
        <member name="T:Sgry.Azuki.ColorScheme">
            <summary>
            Color set used for drawing text.
            </summary>
            <remarks>
            <para>
            ColorScheme defines color set used for drawing document by Azuki.
            </para>
            <para>
            ColorScheme is consisted with two major parts.
            First part is a set of pairs of foreground color and background color
            associated with each <see cref="T:Sgry.Azuki.CharClass">CharClass</see>.
            The view objects will reference this
            to determine which color should be used for each token by its character-class.
            This set can be accessed through
            <see cref="M:Sgry.Azuki.ColorScheme.GetColor(Sgry.Azuki.CharClass,System.Drawing.Color@,System.Drawing.Color@)">GetColor method</see>
            or <see cref="M:Sgry.Azuki.ColorScheme.SetColor(Sgry.Azuki.CharClass,System.Drawing.Color,System.Drawing.Color)">SetColor method</see>.
            Second part is color values used to draw graphic
            such as selected text, line numbers, control characters and so on.
            Values of this part are defined as
            public properties of this class.
            </para>
            <para>
            Note that if background color for a CharClass except CharClass.Normal
            was set to Color.Transparent,
            Azuki uses the color of
            <see cref="P:Sgry.Azuki.ColorScheme.BackColor">BackColor property</see>
            for drawing tokens of the character-class.
            </para>
            </remarks>
            <seealso cref="T:Sgry.Azuki.CharClass">CharClass enum</seealso>
            <seealso cref="M:Sgry.Azuki.ColorScheme.GetColor(Sgry.Azuki.CharClass,System.Drawing.Color@,System.Drawing.Color@)">GetColor method</seealso>
            <seealso cref="M:Sgry.Azuki.ColorScheme.SetColor(Sgry.Azuki.CharClass,System.Drawing.Color,System.Drawing.Color)">SetColor method</seealso>
        </member>
        <member name="M:Sgry.Azuki.ColorScheme.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.ColorScheme.#ctor(Sgry.Azuki.ColorScheme)">
            <summary>
            Creates a copy of another instance.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.ColorScheme.GetColor(Sgry.Azuki.CharClass,System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
            Gets color pair for a character-class.
            </summary>
            <param name="klass">The color-pair associated with this character-class will be got.</param>
            <param name="fore">Foreground color used to draw characters marked as the character-class.</param>
            <param name="back">Background color used to draw characters marked as the character-class.</param>
            <remarks>
            <para>
            This method gets a pair of colors which is associated with
            CharClass specified by parameter '<paramref name="klass"/>.'
            </para>
            <para>
            Note that, although Azuki does not use actually set background color value
            if it was Color.Transparent,
            this method returns the actually set value (Color.Transparent) in the case.
            </para>
            </remarks>
            <seealso cref="M:Sgry.Azuki.ColorScheme.SetColor(Sgry.Azuki.CharClass,System.Drawing.Color,System.Drawing.Color)">ColorScheme.SetColor method</seealso>
        </member>
        <member name="M:Sgry.Azuki.ColorScheme.SetColor(Sgry.Azuki.CharClass,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Sets color pair for a character-class.
            </summary>
            <param name="klass">The color-pair associated with this character-class will be got.</param>
            <param name="fore">Foreground color used to draw characters marked as the character-class.</param>
            <param name="back">Background color used to draw characters marked as the character-class.</param>
            <exception cref="T:System.ArgumentException">
            	Color.Transparent was set to CharClass.Normal.
            </exception>
            <remarks>
            <para>
            This method sets a pair of colors which is associated with
            CharClass specified by parameter '<paramref name="klass"/>.'
            </para>
            <para>
            Note that if Color.Transparent was set for background color
            of a CharClass except CharClass.Normal,
            Azuki uses the color of
            <see cref="P:Sgry.Azuki.ColorScheme.BackColor">BackColor property</see>
            for drawing tokens of the CharClass.
            </para>
            </remarks>
            <seealso cref="M:Sgry.Azuki.ColorScheme.GetColor(Sgry.Azuki.CharClass,System.Drawing.Color@,System.Drawing.Color@)">ColorScheme.GetColor method</seealso>
        </member>
        <member name="M:Sgry.Azuki.ColorScheme.GetMarkingDecoration(System.Int32)">
            <summary>
            Gets how text marked with specified ID should be decorated.
            </summary>
            <param name="markingID">The ID of the marking.</param>
            <returns>TextDecoration object associated with specified ID, or null.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	Parameter <paramref name="markingID"/> is out of valid range.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Parameter <paramref name="markingID"/> is not registered to Marking class.
            </exception>
            <seealso cref="M:Sgry.Azuki.ColorScheme.GetMarkingDecorations(System.Int32[])">ColorScheme.GetMarkingDecorations(int[]) method</seealso>
            <seealso cref="M:Sgry.Azuki.ColorScheme.GetMarkingDecorations(System.UInt32)">ColorScheme.GetMarkingDecorations(uint) method</seealso>
            <seealso cref="M:Sgry.Azuki.ColorScheme.SetMarkingDecoration(System.Int32,Sgry.Azuki.TextDecoration)">ColorScheme.SetMarkingDecoration method</seealso>
        </member>
        <member name="M:Sgry.Azuki.ColorScheme.GetMarkingDecorations(System.Int32[])">
            <summary>
            Gets multiple TextDecoration at once
            associated with specified marking IDs.
            </summary>
            <param name="markingIDs">The array of marking ID.</param>
            <returns>An array of TextDecoration objects.</returns>
            <exception cref="T:System.ArgumentNullException">
            	Parameter <paramref name="markingIDs"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	Parameter <paramref name="markingIDs"/> contains a value
            	which is out of valid range.
            </exception>
            <exception cref="T:System.ArgumentException">
            	Parameter <paramref name="markingIDs"/> contains a value
            	which is not registered to Marking class.
            </exception>
            <seealso cref="M:Sgry.Azuki.ColorScheme.GetMarkingDecoration(System.Int32)">ColorScheme.GetMarkingDecoration method</seealso>
            <seealso cref="M:Sgry.Azuki.ColorScheme.GetMarkingDecorations(System.UInt32)">ColorScheme.GetMarkingDecorations(uint) method</seealso>
            <seealso cref="M:Sgry.Azuki.ColorScheme.SetMarkingDecoration(System.Int32,Sgry.Azuki.TextDecoration)">ColorScheme.SetMarkingDecoration method</seealso>
        </member>
        <member name="M:Sgry.Azuki.ColorScheme.GetMarkingDecorations(System.UInt32)">
            <summary>
            Gets decorations associated with marking IDs from bit mask (internal representation).
            </summary>
            <param name="markingBitMask">
            	When this method returns,
            	an array of decorations associated with markings
            	represented by this bit mask will be retrieved.
            </param>
            <returns>An array of decoration information, or an empty array.</returns>
            <seealso cref="M:Sgry.Azuki.ColorScheme.GetMarkingDecoration(System.Int32)">ColorScheme.GetMarkingDecoration method</seealso>
            <seealso cref="M:Sgry.Azuki.ColorScheme.GetMarkingDecorations(System.Int32[])">ColorScheme.GetMarkingDecorations(int[]) method</seealso>
            <seealso cref="M:Sgry.Azuki.ColorScheme.SetMarkingDecoration(System.Int32,Sgry.Azuki.TextDecoration)">ColorScheme.SetMarkingDecoration method</seealso>
        </member>
        <member name="M:Sgry.Azuki.ColorScheme.SetMarkingDecoration(System.Int32,Sgry.Azuki.TextDecoration)">
            <summary>
            Sets how text parts marked with specified ID should be decorated.
            </summary>
            <param name="markingID">The marking ID.</param>
            <param name="decoration">
            	TextDecoration object to be associated with <paramref name="markingID"/>.
            	If null was specified, TextDecoration.None will be used internally.
            </param>
            <seealso cref="M:Sgry.Azuki.ColorScheme.GetMarkingDecoration(System.Int32)">ColorScheme.GetMarkingDecoration method</seealso>
            <seealso cref="M:Sgry.Azuki.ColorScheme.GetMarkingDecorations(System.UInt32)">ColorScheme.GetMarkingDecorations(uint) method</seealso>
            <seealso cref="M:Sgry.Azuki.ColorScheme.GetMarkingDecorations(System.Int32[])">ColorScheme.GetMarkingDecorations(int[]) method</seealso>
        </member>
        <member name="F:Sgry.Azuki.ColorScheme.SelectionFore">
            <summary>
            Color of selected text.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.ColorScheme.SelectionBack">
            <summary>
            Background color of selected text.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.ColorScheme.WhiteSpaceColor">
            <summary>
            Color of white-space chars.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.ColorScheme.EolColor">
            <summary>
            Color of EOL chars.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.ColorScheme.EofColor">
            <summary>
            Color of EOF chars.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.ColorScheme.HighlightColor">
            <summary>
            Underline color of the line which the caret is on.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.ColorScheme.LineNumberFore">
            <summary>
            Color of the line number text.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.ColorScheme.LineNumberBack">
            <summary>
            Background color of the line number text.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.ColorScheme.DirtyLineBar">
            <summary>
            Color of the dirt bar at left of a modified line.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.ColorScheme.CleanedLineBar">
            <summary>
            Color of the dirt bar at left of a modified but saved (cleaned) line.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.ColorScheme.RightEdgeColor">
            <summary>
            Color of the right edge of text area (line wrapping edge).
            </summary>
        </member>
        <member name="F:Sgry.Azuki.ColorScheme.MatchedBracketFore">
            <summary>
            Color of the bracket which is matching to the bracket at caret.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.ColorScheme.MatchedBracketBack">
            <summary>
            Background color of the bracket which is matching to the bracket at caret.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.ColorScheme.Default">
            <summary>
            Gets default color scheme.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.ColorScheme.ForeColor">
            <summary>
            Foreground color of normal text.
            </summary>
            <exception cref="T:System.ArgumentException">Color.Transparent was set.</exception>
        </member>
        <member name="P:Sgry.Azuki.ColorScheme.BackColor">
            <summary>
            Background color of normal text.
            </summary>
            <exception cref="T:System.ArgumentException">Color.Transparent was set.</exception>
        </member>
        <member name="T:Sgry.Azuki.DrawingOption">
            <summary>
            Option flags to specify how Azuki draws text area.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.DrawingOption.DrawsSpace">
            <summary>Draws space character.</summary>
        </member>
        <member name="F:Sgry.Azuki.DrawingOption.DrawsFullWidthSpace">
            <summary>Draws full-width space character.</summary>
        </member>
        <member name="F:Sgry.Azuki.DrawingOption.DrawsTab">
            <summary>Draws tab character.</summary>
        </member>
        <member name="F:Sgry.Azuki.DrawingOption.DrawsEol">
            <summary>Draws EOL (End Of Line) code.</summary>
        </member>
        <member name="F:Sgry.Azuki.DrawingOption.HighlightCurrentLine">
            <summary>Shows line number area.</summary>
        </member>
        <member name="F:Sgry.Azuki.DrawingOption.ShowsLineNumber">
            <summary>Shows line number area.</summary>
        </member>
        <member name="F:Sgry.Azuki.DrawingOption.ShowsHRuler">
            <summary>Shows horizontal ruler.</summary>
        </member>
        <member name="F:Sgry.Azuki.DrawingOption.DrawsEof">
            <summary>Draws EOF (End Of File) mark.</summary>
        </member>
        <member name="F:Sgry.Azuki.DrawingOption.ShowsDirtBar">
            <summary>Shows 'dirt bar'.</summary>
        </member>
        <member name="F:Sgry.Azuki.DrawingOption.HighlightsMatchedBracket">
            <summary>Highlights matched bracket.</summary>
        </member>
        <member name="T:Sgry.Azuki.HRulerIndicatorType">
            <summary>
            Type of the indicator on horizontal ruler to indicate caret position.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.HRulerIndicatorType.Position">
            <summary>
            Draws a bar just above the caret position, on the ruler.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.HRulerIndicatorType.Segment">
            <summary>
            Fills a segment of ruler which covers x-coordinate of the caret position.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.HRulerIndicatorType.CharCount">
            <summary>
            Fills a segment of ruler corresponded with how many characters exist at left of the caret.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.IView">
            <summary>
            Interface for view implementations.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IView.GetLineLength(System.Int32)">
            <summary>
            Gets length of the pysical line.
            </summary>
            <param name="lineIndex">Index of the line of which to get the length.</param>
            <returns>Length of the specified line in character count.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of valid range.</exception>
        </member>
        <member name="M:Sgry.Azuki.IView.SetDesiredColumn">
            <summary>
            Sets column index of the current caret position to "desired column" value.
            </summary>
            <remarks>
            <para>
            Normally the caret tries to keep its x-coordinate
            on moving line to line unless user explicitly changes x-coordinate of it.
            The term 'Desired Column' means this x-coordinate which the caret tries to stick close to.
            </para>
            <para>
            Note that the desired column is associated with each document.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.IView.GetDesiredColumn">
            <summary>
            Gets current "desired column" value.
            </summary>
            <remarks>
            <para>
            Normally the caret tries to keep its x-coordinate
            on moving line to line unless user explicitly changes x-coordinate of it.
            The term 'Desired Column' means this x-coordinate which the caret tries to stick close to.
            </para>
            <para>
            Note that the desired column is associated with each document.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.IView.GetVirPosFromIndex(System.Int32)">
            <summary>
            Calculates location in the virtual space of the character at specified index.
            </summary>
            <returns>The location of the character at specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.IView.GetVirPosFromIndex(Sgry.Azuki.IGraphics,System.Int32)">
            <summary>
            Calculates location in the virtual space of the character at specified index.
            </summary>
            <returns>The location of the character at specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.IView.GetVirPosFromIndex(System.Int32,System.Int32)">
            <summary>
            Calculates location in the virtual space of the character at specified index.
            </summary>
            <returns>The location of the character at specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.IView.GetVirPosFromIndex(Sgry.Azuki.IGraphics,System.Int32,System.Int32)">
            <summary>
            Calculates location in the virtual space of the character at specified index.
            </summary>
            <returns>The location of the character at specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.IView.GetIndexFromVirPos(System.Drawing.Point)">
            <summary>
            Gets char-index of the char at the point specified by location in the virtual space.
            </summary>
            <returns>The index of the character at specified location.</returns>
        </member>
        <member name="M:Sgry.Azuki.IView.GetIndexFromVirPos(Sgry.Azuki.IGraphics,System.Drawing.Point)">
            <summary>
            Gets char-index of the char at the point specified by location in the virtual space.
            </summary>
            <returns>The index of the char or -1 if invalid point was specified.</returns>
        </member>
        <member name="M:Sgry.Azuki.IView.VirtualToScreen(System.Drawing.Point@)">
            <summary>
            Converts a coordinate in virtual space to a coordinate in client area.
            </summary>
            <remarks>
            <para>
            Azuki uses two types of coordinate system -
            virtual coordinate system and client coordinate system.
            In client coordinate system,
            all points are relative to origin of upper-left corner of the 'client area.'
            The client area is the entire area used by Azuki
            so coordinate of the origin of text area will change
            depending on whether meta information areas
            (such as line number area) are displayed or not.
            In virtual coordinate system,
            all points are relative to the origin of text area.
            Text area is the main area which displays text content
            and it does not contain areas for displaying meta information.
            </para>
            <para>
            This method converts a coordinate in client coordinate system to
            a coordinate in virtual coordinate system.
            </para>
            </remarks>
            <seealso cref="M:Sgry.Azuki.IView.ScreenToVirtual(System.Drawing.Point@)">ScreenToVirtual property</seealso>
        </member>
        <member name="M:Sgry.Azuki.IView.ScreenToVirtual(System.Drawing.Point@)">
            <summary>
            Converts a coordinate in client area to a coordinate in virtual space.
            </summary>
            <remarks>
            <para>
            Azuki uses two types of coordinate system -
            virtual coordinate system and client coordinate system.
            In client coordinate system,
            all points are relative to origin of upper-left corner of the 'client area.'
            The client area is the entire area used by Azuki
            so coordinate of the origin of text area will change
            depending on whether meta information areas
            (such as line number area) are displayed or not.
            In virtual coordinate system,
            all points are relative to the origin of text area.
            Text area is the main area which displays text content
            and it does not contain areas for displaying meta information.
            </para>
            <para>
            This method converts a coordinate in virtual coordinate system to
            a coordinate in client coordinate system.
            </para>
            </remarks>
            <seealso cref="M:Sgry.Azuki.IView.VirtualToScreen(System.Drawing.Point@)">VirtualToScreen property</seealso>
        </member>
        <member name="M:Sgry.Azuki.IView.GetLineHeadIndex(System.Int32)">
            <summary>
            Gets the index of the first char in the line.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.IView.GetLineHeadIndexFromCharIndex(System.Int32)">
            <summary>
            Gets the index of the first char in the screen line
            which contains the specified char-index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.IView.GetLineIndexFromCharIndex(System.Int32)">
            <summary>
            Calculates screen line index from char-index.
            </summary>
            <param name="charIndex">The index of the line which contains the char at this parameter will be calculated.</param>
            <returns>The index of the line which contains the character at specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.IView.GetLineColumnIndexFromCharIndex(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Calculates screen line/column index from char-index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.IView.GetCharIndexFromLineColumnIndex(System.Int32,System.Int32)">
            <summary>
            Calculates char-index from screen line/column index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.IView.GetRectSelectRanges(System.Drawing.Rectangle)">
            <summary>
            Calculates and returns text ranges that will be selected by specified rectangle.
            </summary>
            <param name="selRect">Rectangle to be used to specify selection target.</param>
            <returns>Array of indexes (1st begin, 1st end, 2nd begin, 2nd end, ...)</returns>
            <remarks>
            <para>
            (This method is basically for internal use.
            I do not recommend to use this from outside of Azuki.)
            </para>
            <para>
            This method calculates text ranges which will be selected by given rectangle.
            Because mapping of character indexes and graphical position (layout) are
            executed by view implementations, the result of this method will be changed
            according to the interface implementation.
            </para>
            <para>
            Return value of this method is an array of text indexes
            that is consisted with beginning index of first text range (row),
            ending index of first text range,
            beginning index of second text range,
            ending index of second text range and so on.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.IView.GetHRulerIndex(System.Int32)">
            <summary>
            Calculates location of character at specified index in horizontal ruler index.
            </summary>
            <param name="charIndex">The index of the character to calculate its location.</param>
            <returns>Horizontal ruler index of the character.</returns>
            <remarks>
            <para>
            This method calculates location of character at specified index
            in horizontal ruler index.
            </para>
            <para>
            'Horizontal ruler index' here means how many small lines drawn on the horizontal ruler
            exist between left-end of the text area
            and the character at index specified by <paramref name="charIndex"/>.
            This value is zero-based index.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.IView.GetHRulerIndex(System.Int32,System.Int32)">
            <summary>
            Calculates location of character at specified index in horizontal ruler index.
            </summary>
            <param name="lineIndex">The line index of the character to calculate its location.</param>
            <param name="columnIndex">The column index of the character to calculate its location.</param>
            <returns>Horizontal ruler index of the character.</returns>
            <remarks>
            <para>
            This method calculates location of character at specified index
            in horizontal ruler index.
            </para>
            <para>
            'Horizontal ruler index' here means how many small lines drawn on the horizontal ruler
            exist between left-end of the text area
            and the character at index specified by <paramref name="charIndex"/>.
            This value is zero-based index.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.IView.ScrollToCaret">
            <summary>
            Scroll to where the caret is.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IView.Scroll(System.Int32)">
            <summary>
            Scroll vertically.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IView.HScroll(System.Int32)">
            <summary>
            Scroll horizontally.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IView.Invalidate">
            <summary>
            Requests to invalidate whole area.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IView.Invalidate(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Requests to invalidate specified area.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IView.Invalidate(System.Drawing.Rectangle)">
            <summary>
            Requests to invalidate specified area.
            </summary>
            <param name="rect">rectangle area to be invalidate (in client area coordinate)</param>
        </member>
        <member name="M:Sgry.Azuki.IView.Invalidate(System.Int32,System.Int32)">
            <summary>
            Requests to invalidate area covered by given text range.
            </summary>
            <param name="beginIndex">Begin text index of the area to be invalidated.</param>
            <param name="endIndex">End text index of the area to be invalidated.</param>
        </member>
        <member name="M:Sgry.Azuki.IView.ZoomIn">
            <summary>
            Sets font size to larger one.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.IView.ZoomOut">
            <summary>
            Sets font size to smaller one.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.Document">
            <summary>
            Gets or sets the document displayed in this view.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.LineCount">
            <summary>
            Gets number of the screen lines.
            </summary>
            <remarks>
            Through this property,
            number of the screen lines in this document can be retrieved.
            "Screen line" here means a text line drawn as a graphc
            and differs from "logical line" (strings simply separated by EOL codes).
            To retrieve count of the logical lines,
            use <see cref="P:Sgry.Azuki.Document.LineCount">Document.LineCount</see>
            instead.
            </remarks>
            <seealso cref="P:Sgry.Azuki.Document.LineCount">Document.LineCount</seealso>
        </member>
        <member name="P:Sgry.Azuki.IView.TopMargin">
            <summary>
            Gets or sets top margin of the view in pixel.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.LeftMargin">
            <summary>
            Gets or sets left margin of the view in pixel.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.HRulerIndicatorType">
            <summary>
            Gets or sets type of the indicator on the horizontal ruler.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.DrawingOption">
            <summary>
            Gets or sets view drawing options flags.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.HighlightsCurrentLine">
            <summary>
            Gets or sets whether the current line would be drawn with underline or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.HighlightsMatchedBracket">
            <summary>
            Gets or sets whether to highlight matched bracket or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.ShowLineNumber">
            <summary>
            Gets or sets whether to show line number or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.ShowsHRuler">
            <summary>
            Gets or sets whether to show horizontal ruler or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.ShowsDirtBar">
            <summary>
            Gets or sets whether to show 'dirt bar' or not.
            </summary>
            <remarks>
            <para>
            This property gets or sets whether to show 'dirt bar' or not.
            The dirt bar is graphically a thin bar at right end of the line number area
            that indicates the dirty state of each text line.
            The state of line is one of the following states.
            </para>
            <list type="bullet">
            	<item>LineDirtyState.Clean: the line is not modified yet.</item>
            	<item>LineDirtyState.Dirty: the line is modified and not saved.</item>
            	<item>LineDirtyState.Cleaned: the line is modified but saved.</item>
            </list>
            <para>
            Color of each line dirty state can be customized by setting
            ColorScheme.DirtyLineBar, ColorScheme.CleanedLineBar.
            </para>
            </remarks>
            <seealso cref="T:Sgry.Azuki.LineDirtyState">LineDirtyState enum</seealso>
            <seealso cref="M:Sgry.Azuki.Document.GetLineDirtyState(System.Int32)">Document.GetLineDirtyState method</seealso>
        </member>
        <member name="P:Sgry.Azuki.IView.DrawsSpace">
            <summary>
            Gets or sets whether to draw half-width space with special graphic or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.DrawsFullWidthSpace">
            <summary>
            Gets or sets whether to draw full-width space with special graphic or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.DrawsTab">
            <summary>
            Gets or sets whether to draw tab character with special graphic or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.DrawsEolCode">
            <summary>
            Gets or sets whether to draw EOL code with special graphic or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.DrawsEofMark">
            <summary>
            Gets or sets whether to draw EOF mark or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.ColorScheme">
            <summary>
            Color set used for displaying text.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.TabWidth">
            <summary>
            Gets or sets tab width in count of space chars.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.TabWidthInPx">
            <summary>
            Gets width of tab character (U+0009) in pixel.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.SpaceWidthInPx">
            <summary>
            Gets width of space character (U+0020) in pixel.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.FirstVisibleLine">
            <summary>
            Gets or sets index of the line which is displayed at top of this view.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.FontInfo">
            <summary>
            Gets or sets the font used for drawing text.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.LineHeight">
            <summary>
            Gets height of each lines in pixel.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.LinePadding">
            <summary>
            Gets or sets size of padding between lines in pixel.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.LineSpacing">
            <summary>
            Gets distance between lines in pixel.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.LineNumAreaWidth">
            <summary>
            Gets width of the line number area in pixel.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.HRulerHeight">
            <summary>
            Gets height of the horizontal ruler.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.HRulerUnitWidth">
            <summary>
            Gets distance between lines on the horizontal ruler.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.TextAreaWidth">
            <summary>
            Gets or sets width of the virtual text area.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">A negative number was set.</exception>
            <remarks>
            <para>
            This property accesses the width of the *virtual* text area.
            Text area indicates the logical space where Azuki draws text content
            and is not the area which is graphically visible;
            visible text area is a portion of the text area.
            </para>
            <para>
            Since Azuki only draws text in the text area,
            width of it affectes how text lines were drawn.
            If <see cref="P:Sgry.Azuki.IUserInterface.ViewType">
            IUserInterface.ViewType</see> was set to
            <see cref="F:Sgry.Azuki.ViewType.Proportional">
            ViewType.Proportional</see>,
            the width will be expanded as needed
            to continue drawing a long logical line.
            If <see cref="P:Sgry.Azuki.IUserInterface.ViewType">
            IUserInterface.ViewType</see> was set to
            <see cref="F:Sgry.Azuki.ViewType.WrappedProportional">
            ViewType.WrappedProportional</see>,
            each logical text lines will be wrapped at right end of the text area.
            </para>
            <para>
            Note that text area does not contain line-number area nor left margin.
            </para>
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.IView.VisibleSize">
            <summary>
            Gets or sets size of the currently visible area.
            This value includes the size of both line-number area and visible text area.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.VisibleTextAreaSize">
            <summary>
            Gets or sets size of the currently visible size of the text area (line number area is not included).
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.ScrollsBeyondLastLine">
            <summary>
            Gets or sets whether to scroll beyond the last line of the document or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.XofLineNumberArea">
            <summary>
            Gets X coordinate in client area of line number area.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.XofDirtBar">
            <summary>
            Gets X coordinate in client area of dirt bar area.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.XofLeftMargin">
            <summary>
            Gets X coordinate in client area of left margin.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.XofTextArea">
            <summary>
            Gets X coordinate in client area of text area.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.YofHRuler">
            <summary>
            Gets Y coordinate in client area of horizontal ruler.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.YofTopMargin">
            <summary>
            Gets Y coordinate in client area of top margin.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.YofTextArea">
            <summary>
            Gets Y coordinate in client area of text area.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.DirtBarRectangle">
            <summary>
            Gets location and size of the dirt bar area.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.LineNumberAreaRectangle">
            <summary>
            Gets location and size of the line number area.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.HRulerRectangle">
            <summary>
            Gets location and size of the horizontal ruler area.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.IView.TextAreaRectangle">
            <summary>
            Gets location and size of the visible text area in screen.
            </summary>
            <remarks>
            <para>
            This property calculates rectangle of currently visible part of the text area.
            Note that, in contrast to this property,
            <see cref="P:Sgry.Azuki.IView.TextAreaWidth">TextAreaWidth</see>
            property calculates 'virtual' size of the text area.
            Since the virtual size is calculated including areas which is not visible,
            these two property are totally different.
            </para>
            </remarks>
        </member>
        <member name="T:Sgry.Azuki.MouseCursor">
            <summary>
            Type of mouse cursor's graphic.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.MouseCursor.Arrow">
            <summary>
            Arrow pointing up and to the left.
            Typically used when none of other cursor type is apropriate to be used.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.MouseCursor.IBeam">
            <summary>
            Graphic of capital alhpabet letter 'I'.
            Typical usage is expressing clicking can set caret to where the cursor is at.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.MouseCursor.Hand">
            <summary>
            Hand pointing up.
            Typical usage is expressing the cursor is on something which can react on click.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.MouseCursor.DragAndDrop">
            <summary>
            Arrow pointing up.
            Typical usage is expressing moving data.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.PropView">
            <summary>
            Platform independent view implementation to display text with proportional font.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.View">
            <summary>
            Platform independent view of Azuki.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.#ctor(Sgry.Azuki.IUserInterface)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="ui">Implementation of the platform dependent UI module.</param>
        </member>
        <member name="M:Sgry.Azuki.View.#ctor(Sgry.Azuki.View)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="other">another view object to inherit settings</param>
        </member>
        <member name="M:Sgry.Azuki.View.Dispose">
            <summary>
            Disposes resources.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.ReCalcRightEndOfTextArea(System.Int32)">
            <summary>
            Re-calculates and updates x-coordinate of the right end of the virtual text area.
            </summary>
            <param name="desiredX">X-coordinate of scroll destination desired.</param>
            <returns>The largest X-coordinate which Azuki can scroll to.</returns>
        </member>
        <member name="M:Sgry.Azuki.View.GetLineLength(System.Int32)">
            <summary>
            Gets length of the pysical line.
            </summary>
            <param name="lineIndex">Index of the line of which to get the length.</param>
            <returns>Length of the specified line in character count.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of valid range.</exception>
        </member>
        <member name="M:Sgry.Azuki.View.SetDesiredColumn">
            <summary>
            Sets column index of the current caret position to "desired column" value.
            </summary>
            <remarks>
            <para>
            When the caret moves up or down,
            Azuki tries to set next caret's column index to this value.
            Note that "desired column" is associated with each document
            so this value may change when Document property was set to another document.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.View.SetDesiredColumn(Sgry.Azuki.IGraphics)">
            <summary>
            Sets column index of the current caret position to "desired column" value.
            </summary>
            <remarks>
            <para>
            Normally the caret tries to keep its x-coordinate
            on moving line to line unless user explicitly changes x-coordinate of it.
            The term 'Desired Column' means this x-coordinate which the caret tries to stick close to.
            </para>
            <para>
            Note that the desired column is associated with each document.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.View.GetDesiredColumn">
            <summary>
            Gets current "desired column" value.
            </summary>
            <remarks>
            <para>
            Normally the caret tries to keep its x-coordinate
            on moving line to line unless user explicitly changes x-coordinate of it.
            The term 'Desired Column' means this x-coordinate which the caret tries to stick close to.
            </para>
            <para>
            Note that the desired column is associated with each document.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.View.GetVirPosFromIndex(System.Int32)">
            <summary>
            Calculates location in the virtual space of the character at specified index.
            </summary>
            <returns>The location of the character at specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.View.GetVirPosFromIndex(Sgry.Azuki.IGraphics,System.Int32)">
            <summary>
            Calculates location in the virtual space of the character at specified index.
            </summary>
            <returns>The location of the character at specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.View.GetVirPosFromIndex(System.Int32,System.Int32)">
            <summary>
            Calculates location in the virtual space of the character at specified index.
            </summary>
            <returns>The location of the character at specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.View.GetVirPosFromIndex(Sgry.Azuki.IGraphics,System.Int32,System.Int32)">
            <summary>
            Calculates location in the virtual space of the character at specified index.
            </summary>
            <returns>The location of the character at specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.View.GetIndexFromVirPos(System.Drawing.Point)">
            <summary>
            Gets char-index of the char at the point specified by location in the virtual space.
            </summary>
            <returns>The index of the char or -1 if invalid point was specified.</returns>
        </member>
        <member name="M:Sgry.Azuki.View.GetIndexFromVirPos(Sgry.Azuki.IGraphics,System.Drawing.Point)">
            <summary>
            Gets char-index of the char at the point specified by location in the virtual space.
            </summary>
            <returns>The index of the char or -1 if invalid point was specified.</returns>
        </member>
        <member name="M:Sgry.Azuki.View.VirtualToScreen(System.Drawing.Point@)">
            <summary>
            Converts a coordinate in virtual space to a coordinate in client area.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.VirtualToScreen(System.Drawing.Rectangle@)">
            <summary>
            Converts a coordinate in virtual space to a coordinate in client area.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.ScreenToVirtual(System.Drawing.Point@)">
            <summary>
            Converts a coordinate in client area to a coordinate in virtual text area.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.GetLineHeadIndex(System.Int32)">
            <summary>
            Gets the index of the first char in the line.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.View.GetLineHeadIndexFromCharIndex(System.Int32)">
            <summary>
            Gets the index of the first char in the screen line
            which contains the specified char-index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.View.GetLineIndexFromCharIndex(System.Int32)">
            <summary>
            Calculates screen line index from char-index.
            </summary>
            <param name="charIndex">The index of the line which contains the char at this parameter will be calculated.</param>
            <returns>The index of the line which contains the character at specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.View.GetLineColumnIndexFromCharIndex(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Calculates screen line/column index from char-index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.View.GetCharIndexFromLineColumnIndex(System.Int32,System.Int32)">
            <summary>
            Calculates char-index from screen line/column index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.View.GetRectSelectRanges(System.Drawing.Rectangle)">
            <summary>
            Calculates and returns text ranges that will be selected by specified rectangle.
            </summary>
            <param name="selRect">Rectangle to be used to specify selection target.</param>
            <returns>Array of indexes (1st begin, 1st end, 2nd begin, 2nd end, ...)</returns>
            <remarks>
            <para>
            (This method is basically for internal use.
            I do not recommend to use this from outside of Azuki.)
            </para>
            <para>
            This method calculates text ranges which will be selected by given rectangle.
            Because mapping of character indexes and graphical position (layout) are
            executed by view implementations, the result of this method will be changed
            according to the interface implementation.
            </para>
            <para>
            Return value of this method is an array of text indexes
            that is consisted with beginning index of first text range (row),
            ending index of first text range,
            beginning index of second text range,
            ending index of second text range and so on.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.View.GetHRulerIndex(System.Int32)">
            <summary>
            Calculates location of character at specified index in horizontal ruler index.
            </summary>
            <param name="charIndex">The index of the character to calculate its location.</param>
            <returns>Horizontal ruler index of the character.</returns>
            <remarks>
            <para>
            This method calculates location of character at specified index
            in horizontal ruler index.
            </para>
            <para>
            'Horizontal ruler index' here means how many small lines drawn on the horizontal ruler
            exist between left-end of the text area
            and the character at index specified by <paramref name="charIndex"/>.
            This value is zero-based index.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.View.GetHRulerIndex(System.Int32,System.Int32)">
            <summary>
            Calculates location of character at specified index in horizontal ruler index.
            </summary>
            <param name="lineIndex">The line index of the character to calculate its location.</param>
            <param name="columnIndex">The column index of the character to calculate its location.</param>
            <returns>Horizontal ruler index of the character.</returns>
            <remarks>
            <para>
            This method calculates location of character at specified index
            in horizontal ruler index.
            </para>
            <para>
            'Horizontal ruler index' here means how many small lines drawn on the horizontal ruler
            exist between left-end of the text area
            and the character at index specified by <paramref name="charIndex"/>.
            This value is zero-based index.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.View.ScrollToCaret">
            <summary>
            Scroll to where the caret is.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.ScrollToCaret(Sgry.Azuki.IGraphics)">
            <summary>
            Scroll to where the caret is.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.Scroll(System.Int32)">
            <summary>
            Scroll vertically.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.HScroll(System.Int32)">
            <summary>
            Scroll horizontally.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.Invalidate">
            <summary>
            Requests to invalidate whole area.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.Invalidate(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Requests to invalidate specified area.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.Invalidate(System.Drawing.Rectangle)">
            <summary>
            Requests to invalidate specified area.
            </summary>
            <param name="rect">rectangle area to be invalidate (in client area coordinate)</param>
        </member>
        <member name="M:Sgry.Azuki.View.Invalidate(System.Int32,System.Int32)">
            <summary>
            Requests to invalidate area covered by given text range.
            </summary>
            <param name="beginIndex">Begin text index of the area to be invalidated.</param>
            <param name="endIndex">End text index of the area to be invalidated.</param>
        </member>
        <member name="M:Sgry.Azuki.View.Invalidate(Sgry.Azuki.IGraphics,System.Int32,System.Int32)">
            <summary>
            Requests to invalidate area covered by given text range.
            </summary>
            <param name="g">graphic drawing interface to be used.</param>
            <param name="beginIndex">Begin text index of the area to be invalidated.</param>
            <param name="endIndex">End text index of the area to be invalidated.</param>
        </member>
        <member name="M:Sgry.Azuki.View.ZoomIn">
            <summary>
            Sets font size to larger one.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.ZoomOut">
            <summary>
            Sets font size to smaller one.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.HandleSizeChanged(System.Drawing.Size)">
            <summary>
            UI module must call this method
            to synchronize visible size between UI module and view.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.HandleDocumentChanged(Sgry.Azuki.Document)">
            <summary>
            Internal use only.
            UI module must call this method
            when the document object was changed to another object.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.HandleSelectionChanged(System.Object,Sgry.Azuki.SelectionChangedEventArgs)">
            <summary>
            This method will be called when the selection was changed.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.HandleDirtyStateChanged(System.Object,System.EventArgs)">
            <summary>
            This method will be called when the 'dirty' state of document was changed.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.HandleContentChanged(System.Object,Sgry.Azuki.ContentChangedEventArgs)">
            <summary>
            This method will be called when the content was changed.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.UpdateLineNumberWidth(Sgry.Azuki.IGraphics)">
            <summary>
            Updates width of the line number area.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.YofLine(System.Int32)">
            <summary>
            Gets Y coordinate in client area of specified line.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.Paint(Sgry.Azuki.IGraphics,System.Drawing.Rectangle)">
            <summary>
            Paints content to a graphic device.
            </summary>
            <param name="g">graphic drawing interface to be used.</param>
            <param name="clipRect">clipping rectangle that covers all invalidated region (in client area coordinate)</param>
        </member>
        <member name="M:Sgry.Azuki.View.DrawToken(Sgry.Azuki.IGraphics,Sgry.Azuki.Document,System.Int32,System.String,Sgry.Azuki.CharClass,System.Drawing.Point@,System.Drawing.Point@,System.Drawing.Rectangle@,System.Boolean)">
            <summary>
            Paints a token including special characters.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.DrawUnderLine(Sgry.Azuki.IGraphics,System.Int32,System.Drawing.Color)">
            <summary>
            Draws underline for the line specified by it's Y coordinate.
            </summary>
            <param name="g">graphic drawing interface to be used.</param>
            <param name="lineTopY">Y-coordinate of the target line.</param>
            <param name="color">Color to be used for drawing the underline.</param>
        </member>
        <member name="M:Sgry.Azuki.View.DrawDirtBar(Sgry.Azuki.IGraphics,System.Int32,System.Int32)">
            <summary>
            Draws dirt bar.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.DrawLeftOfLine(Sgry.Azuki.IGraphics,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draws line number area at specified line.
            </summary>
            <param name="g">graphic drawing interface to be used.</param>
            <param name="lineTopY">Y-coordinate of the target line.</param>
            <param name="lineNumber">line number to be drawn.</param>
            <param name="drawsText">specify true if line number text should be drawn.</param>
        </member>
        <member name="M:Sgry.Azuki.View.DrawHRuler(Sgry.Azuki.IGraphics,System.Drawing.Rectangle)">
            <summary>
            Draws horizontal ruler on top of the text area.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.DrawTopMargin(Sgry.Azuki.IGraphics)">
            <summary>
            Draws top margin.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.DrawEofMark(Sgry.Azuki.IGraphics,System.Drawing.Point@)">
            <summary>
            Draws EOF mark.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.MeasureTokenEndX(Sgry.Azuki.IGraphics,System.String,System.Int32)">
            <summary>
            Calculates x-coordinate of the right end of given token drawed at specified position with specified tab-width.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.MeasureTokenEndX(Sgry.Azuki.IGraphics,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Calculates x-coordinate of the right end of given token
            drawed at specified position with specified tab-width.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.MeasureTokenEndX_TreatSubToken(Sgry.Azuki.IGraphics,System.Int32,System.Text.StringBuilder,System.Int32,System.Int32@,System.Int32@)">
            <returns>true if measured right poisition hit the limit.</returns>
        </member>
        <member name="M:Sgry.Azuki.View.CalcTokenEndAtMost(Sgry.Azuki.Document,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Calculates end index of a drawing token at longest case
            according to selection state etc.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.NextPaintToken(Sgry.Azuki.Document,System.Int32,System.Int32,Sgry.Azuki.CharClass@,System.Boolean@)">
            <summary>
            Gets next token for painting.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.Document">
            <summary>
            Gets or sets the document displayed in this view.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.LineCount">
            <summary>
            Gets number of the screen lines.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.TextAreaWidth">
            <summary>
            Gets or sets width of the virtual text area (line number area is not included).
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.VisibleSize">
            <summary>
            Gets or sets size of the currently visible area (line number area is included).
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.VisibleTextAreaSize">
            <summary>
            Gets or sets size of the currently visible size of the text area (line number area is not included).
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.ScrollsBeyondLastLine">
            <summary>
            Gets or sets whether to scroll beyond the last line of the document or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.FontInfo">
            <summary>
            Gets or sets the font used for drawing text.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.TopMargin">
            <summary>
            Gets or sets top margin of the view in pixel.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">A negative number was set.</exception>
        </member>
        <member name="P:Sgry.Azuki.View.LeftMargin">
            <summary>
            Gets or sets left margin of the view in pixel.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">A negative number was set.</exception>
        </member>
        <member name="P:Sgry.Azuki.View.HRulerIndicatorType">
            <summary>
            Gets or sets type of the indicator on the horizontal ruler.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.DrawingOption">
            <summary>
            Gets or sets view options.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.HighlightsCurrentLine">
            <summary>
            Gets or sets whether the current line would be drawn with underline or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.HighlightsMatchedBracket">
            <summary>
            Gets or sets whether to highlight matched bracket or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.ShowLineNumber">
            <summary>
            Gets or sets whether to show line number or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.ShowsHRuler">
            <summary>
            Gets or sets whether to show horizontal ruler or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.ShowsDirtBar">
            <summary>
            Gets or sets whether to show 'dirt bar' or not.
            </summary>
            <remarks>
            <para>
            This property gets or sets whether to show 'dirt bar' or not.
            The 'dirt bar'
            </para>
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.View.DrawsSpace">
            <summary>
            Gets or sets whether to draw half-width space with special graphic or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.DrawsFullWidthSpace">
            <summary>
            Gets or sets whether to draw full-width space with special graphic or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.DrawsTab">
            <summary>
            Gets or sets whether to draw tab character with special graphic or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.DrawsEolCode">
            <summary>
            Gets or sets whether to draw EOL code with special graphic or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.DrawsEofMark">
            <summary>
            Gets or sets whether to draw EOF mark by special graphic or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.ColorScheme">
            <summary>
            Color set used for displaying text.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.TabWidth">
            <summary>
            Gets or sets tab width in count of space chars.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.TabWidthInPx">
            <summary>
            Gets width of tab character (U+0009) in pixel.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.SpaceWidthInPx">
            <summary>
            Gets width of space character (U+0020) in pixel.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.FirstVisibleLine">
            <summary>
            Gets or sets index of the line which is displayed at top of this view.
            </summary>
            <remarks>
            This property simply accesses Document.ViewParam.FirstVisibleLine property.
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.View.ScrollPosX">
            <summary>
            Gets or sets x-coordinate of the view's origin.
            </summary>
            <remarks>
            This property simply accesses Document.ViewParam.ScrollPosX property.
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.View.LineHeight">
            <summary>
            Gets height of each lines in pixel.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.LinePadding">
            <summary>
            Gets or sets size of padding between lines in pixel.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.LineSpacing">
            <summary>
            Gets distance between lines in pixel.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.LineNumAreaWidth">
            <summary>
            Gets width of the line number area in pixel.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.DirtBarWidth">
            <summary>
            Gets width of the dirt bar in pixel.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.HRulerHeight">
            <summary>
            Gets height of the horizontal ruler.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.HRulerUnitWidth">
            <summary>
            Gets distance between lines on the horizontal ruler.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.XofLineNumberArea">
            <summary>
            Gets X coordinate in client area of line number area.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.XofDirtBar">
            <summary>
            Gets X coordinate in client area of dirt bar area.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.XofLeftMargin">
            <summary>
            Gets X coordinate in client area of left margin.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.XofTextArea">
            <summary>
            Gets X coordinate in client area of text area.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.YofHRuler">
            <summary>
            Gets Y coordinate in client area of horizontal ruler.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.YofTopMargin">
            <summary>
            Gets Y coordinate in client area of top margin.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.YofTextArea">
            <summary>
            Gets Y coordinate in client area of text area.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.DirtBarRectangle">
            <summary>
            Calculates size and location of the dirt bar area.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.LineNumberAreaRectangle">
            <summary>
            Gets location and size of the line number area.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.HRulerRectangle">
            <summary>
            Gets location and size of the horizontal ruler area.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.View.TextAreaRectangle">
            <summary>
            Gets location and size of the visible text area in screen.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.View.Utl">
            <summary>
            Class containing small utilities for class View.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.Utl.ColorFromCharClass(Sgry.Azuki.ColorScheme,Sgry.Azuki.CharClass,System.Boolean,System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
            Gets fore/back color pair from scheme according to char class.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.Utl.CalcNextTabStop(System.Int32,System.Int32)">
            <summary>
            Calculate x-coordinate of the next tab stop.
            </summary>
            <param name="x">calculates next tab stop from this (X coordinate in virtual space)</param>
            <param name="tabWidthInPx">tab width (in pixel)</param>
        </member>
        <member name="M:Sgry.Azuki.View.Utl.IsSpecialChar(System.Char)">
            <summary>
            Distinguishs whether given char is special for painting or not.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.Utl.Min(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets minimum value in four integers.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.View.Utl.Max(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets maximum value in four integers.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.PropView.#ctor(Sgry.Azuki.IUserInterface)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="ui">Implementation of the platform dependent UI module.</param>
        </member>
        <member name="M:Sgry.Azuki.PropView.#ctor(Sgry.Azuki.View)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.PropView.ReCalcRightEndOfTextArea(System.Int32)">
            <summary>
            Re-calculates and updates x-coordinate of the right end of the virtual text area.
            </summary>
            <param name="desiredX">X-coordinate of scroll destination desired.</param>
            <returns>The largest X-coordinate which Azuki can scroll to.</returns>
        </member>
        <member name="M:Sgry.Azuki.PropView.GetVirPosFromIndex(Sgry.Azuki.IGraphics,System.Int32)">
            <summary>
            Calculates location in the virtual space of the character at specified index.
            </summary>
            <returns>The location of the character at specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.PropView.GetVirPosFromIndex(Sgry.Azuki.IGraphics,System.Int32,System.Int32)">
            <summary>
            Calculates location in the virtual space of the character at specified index.
            </summary>
            <returns>The location of the character at specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.PropView.GetIndexFromVirPos(Sgry.Azuki.IGraphics,System.Drawing.Point)">
            <summary>
            Gets char-index of the char at the point specified by location in the virtual space.
            </summary>
            <returns>The index of the character at specified location.</returns>
        </member>
        <member name="M:Sgry.Azuki.PropView.GetLineHeadIndex(System.Int32)">
            <summary>
            Gets the index of the first char in the line.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.PropView.GetLineHeadIndexFromCharIndex(System.Int32)">
            <summary>
            Gets the index of the first char in the screen line
            which contains the specified char-index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.PropView.GetLineColumnIndexFromCharIndex(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Calculates screen line/column index from char-index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.PropView.GetCharIndexFromLineColumnIndex(System.Int32,System.Int32)">
            <summary>
            Calculates char-index from screen line/column index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was invalid.</exception>
        </member>
        <member name="M:Sgry.Azuki.PropView.Invalidate(System.Int32,System.Int32)">
            <summary>
            Requests to invalidate area covered by given text range.
            </summary>
            <param name="beginIndex">Begin text index of the area to be invalidated.</param>
            <param name="endIndex">End text index of the area to be invalidated.</param>
        </member>
        <member name="M:Sgry.Azuki.PropView.Invalidate(Sgry.Azuki.IGraphics,System.Int32,System.Int32)">
            <summary>
            Requests to invalidate area covered by given text range.
            </summary>
            <param name="g">graphic drawing interface to be used.</param>
            <param name="beginIndex">Begin text index of the area to be invalidated.</param>
            <param name="endIndex">End text index of the area to be invalidated.</param>
        </member>
        <member name="M:Sgry.Azuki.PropView.Paint(Sgry.Azuki.IGraphics,System.Drawing.Rectangle)">
            <summary>
            Paints content to a graphic device.
            </summary>
            <param name="g">graphic drawing interface to be used.</param>
            <param name="clipRect">clipping rectangle that covers all invalidated region (in client area coordinate)</param>
        </member>
        <member name="P:Sgry.Azuki.PropView.LineCount">
            <summary>
            Gets number of the screen lines.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.PropWrapView">
            <summary>
            Platform independent view implementation to display wrapped text with proportional font.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.PropWrapView.#ctor(Sgry.Azuki.IUserInterface)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="ui">Implementation of the platform dependent UI module.</param>
        </member>
        <member name="M:Sgry.Azuki.PropWrapView.#ctor(Sgry.Azuki.View)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.PropWrapView.ReCalcRightEndOfTextArea(System.Int32)">
            <summary>
            Re-calculates and updates x-coordinate of the right end of the virtual text area.
            </summary>
            <param name="desiredX">X-coordinate of scroll destination desired.</param>
            <returns>The largest X-coordinate which Azuki can scroll to.</returns>
        </member>
        <member name="M:Sgry.Azuki.PropWrapView.GetVirPosFromIndex(Sgry.Azuki.IGraphics,System.Int32)">
            <summary>
            Calculates location in the virtual space of the character at specified index.
            </summary>
            <returns>The location of the character at specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.PropWrapView.GetVirPosFromIndex(Sgry.Azuki.IGraphics,System.Int32,System.Int32)">
            <summary>
            Calculates location in the virtual space of the character at specified index.
            </summary>
            <returns>The location of the character at specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.PropWrapView.GetIndexFromVirPos(Sgry.Azuki.IGraphics,System.Drawing.Point)">
            <summary>
            Gets char-index of the char at the point specified by location in the virtual space.
            </summary>
            <returns>The index of the character at specified location.</returns>
        </member>
        <member name="M:Sgry.Azuki.PropWrapView.GetLineHeadIndex(System.Int32)">
            <summary>
            Gets the index of the first char in the line.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.PropWrapView.GetLineHeadIndexFromCharIndex(System.Int32)">
            <summary>
            Gets the index of the first char in the screen line
            which contains the specified char-index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.PropWrapView.GetLineColumnIndexFromCharIndex(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Calculates screen line/column index from char-index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.PropWrapView.GetCharIndexFromLineColumnIndex(System.Int32,System.Int32)">
            <summary>
            Calculates char-index from screen line/column index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.PropWrapView.UpdateDirtBar(Sgry.Azuki.IGraphics,System.Int32)">
            <summary>
            Update dirt bar area.
            </summary>
            <param name="g">graphic drawing interface to be used.</param>
            <param name="logLineIndex">dirt bar area for the line indicated by this index will be updated.</param>
        </member>
        <member name="M:Sgry.Azuki.PropWrapView.UpdatePLHI(System.Int32,System.String,System.String)">
            <summary>
            Maintain line head indexes.
            </summary>
            <param name="index">The index of the place where replacement was occurred.</param>
            <param name="oldText">The text which is removed by the replacement.</param>
            <param name="newText">The text which is inserted by the replacement.</param>
        </member>
        <member name="M:Sgry.Azuki.PropWrapView.UpdatePLHI(Sgry.Azuki.IGraphics,System.Int32,System.String,System.String)">
            <summary>
            Maintain line head indexes.
            </summary>
            <param name="g">graphic drawing interface to be used.</param>
            <param name="index">The index of the place where replacement was occurred.</param>
            <param name="oldText">The text which is removed by the replacement.</param>
            <param name="newText">The text which is inserted by the replacement.</param>
        </member>
        <member name="M:Sgry.Azuki.PropWrapView.Paint(Sgry.Azuki.IGraphics,System.Drawing.Rectangle)">
            <summary>
            Paints content to a graphic device.
            </summary>
            <param name="g">graphic drawing interface to be used.</param>
            <param name="clipRect">clipping rectangle that covers all invalidated region (in client area coordinate)</param>
        </member>
        <member name="M:Sgry.Azuki.PropWrapView.DrawUnderLine(Sgry.Azuki.IGraphics,System.Int32,System.Drawing.Color)">
            <summary>
            Draws underline for the line specified by it's Y coordinate.
            </summary>
            <param name="g">graphic drawing interface to be used.</param>
            <param name="lineTopY">Y-coordinate of the target line.</param>
            <param name="color">Color to be used for drawing the underline.</param>
        </member>
        <member name="P:Sgry.Azuki.PropWrapView.LineCount">
            <summary>
            Gets number of the screen lines.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.PropWrapView.TextAreaWidth">
            <summary>
            Gets or sets width of the virtual text area (line number area is not included).
            </summary>
        </member>
        <member name="P:Sgry.Azuki.PropWrapView.TabWidth">
            <summary>
            Gets or sets tab width in count of space chars.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.TextDecoration">
            <summary>
            Represents how text should be decorated graphically.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.TextDecoration.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.TextDecoration.None">
            <summary>
            Text should not be decorated.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.BgColorTextDecoration">
            <summary>
            Represents how text should be decorated with special background color.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.BgColorTextDecoration.#ctor(System.Drawing.Color)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.BgColorTextDecoration.BackgroundColor">
            <summary>
            Gets the background color of decorated tokens.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.UnderlineTextDecoration">
            <summary>
            Represents how text should be decorated with underline.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.UnderlineTextDecoration.#ctor(Sgry.Azuki.LineStyle,System.Drawing.Color)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="lineStyle">Style of the underline.</param>
            <param name="lineColor">
            	The color used to draw the underline.
            	If Color.Transparent is specified, underline will be drawn in same color
            	as the text part.
            </param>
        </member>
        <member name="P:Sgry.Azuki.UnderlineTextDecoration.LineStyle">
            <summary>
            Gets or sets style of underline.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.UnderlineTextDecoration.LineColor">
            <summary>
            Gets or sets color of underline.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.OutlineTextDecoration">
            <summary>
            - EXPERIMENTAL - Decorates text with a transparent rectangle.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.OutlineTextDecoration.#ctor(System.Drawing.Color)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="outlineColor">The color of the outline.</param>
        </member>
        <member name="P:Sgry.Azuki.OutlineTextDecoration.LineColor">
            <summary>
            The color of the outline.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.LineStyle">
            <summary>
            Indicates style of line for text decoration.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.LineStyle.None">
            <summary>Does not draw line.</summary>
        </member>
        <member name="F:Sgry.Azuki.LineStyle.Solid">
            <summary>Solid line.</summary>
        </member>
        <member name="F:Sgry.Azuki.LineStyle.Double">
            <summary>Doubled line.</summary>
        </member>
        <member name="F:Sgry.Azuki.LineStyle.Dashed">
            <summary>Dashed line.</summary>
        </member>
        <member name="F:Sgry.Azuki.LineStyle.Dotted">
            <summary>Line written with many dots.</summary>
        </member>
        <member name="F:Sgry.Azuki.LineStyle.Waved">
            <summary>Waved line.</summary>
        </member>
        <member name="T:Sgry.Azuki.ViewType">
            <summary>
            Type of the text views.
            Each view renders text content differently
            and is optimized for the rendering method.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.ViewType.Proportional">
            <summary>
            View type which renders text as non-wrapped lines with proportional font.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.ViewType.WrappedProportional">
            <summary>
            View type which renders text as wrapped lines with proportional font.
            This type of the view is most versatile but may be *heavy* for portable devices.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.WinForms.AzukiControl">
            <summary>
            Azuki user interface for Windows.Forms framework
            (.NET Compact Framework compatible).
            </summary>
            <remarks>
            <para>
            AzukiControl class is a GUI component class provided for Windows.Forms framework.
            In programming of Windows.Forms framework,
            this class will be the most important class
            and thus very basic operations in Azuki can be done through this class.
            </para>
            <para>
            AzukiControl class is designed to cooperate with Microsoft Visual Studio
            so that it can be added to toolbox of visual designer.
            Once AzukiControl was added to toolbox,
            it can be used like standard GUI components such as System.Windows.Forms.Button;
            placing and layout with drag&amp;drop or resizing by dragging edge of component and so on.
            </para>
            <para>
            AzukiControl is an implementation of IUserInterface
            which expresses the user interface
            (front-end which directly interact with user action)
            of Azuki engine.
            Although currently there is no other implementation for other framework or platform,
            If programmer want to make platform independent program,
            using AzukiControl through IUserInterface will be much appropriate.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by this AzukiControl.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.OnHandleCreated(System.EventArgs)">
            <summary>
            Invokes HandleCreated event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.OnHandleDestroyed(System.EventArgs)">
            <summary>
            Invokes HandleDestroyed event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.ResetKeyBind">
            <summary>
            Reset keybind to default.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.GetKeyBind(System.UInt32)">
            <summary>
            Gets an action which is already associated with given key.
            If no action was associate with given key, returns null.
            </summary>
            <param name="keyCode">key code</param>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.GetKeyBind(System.Windows.Forms.Keys)">
            <summary>
            Gets an action which is already associated with given key.
            If no action was associate with given key, returns null.
            </summary>
            <param name="keyCode">key code</param>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.SetKeyBind(System.UInt32,Sgry.Azuki.ActionProc)">
            <summary>
            Sets or removes key-bind entry.
            Note that giving null to action will remove the key-bind.
            </summary>
            <param name="keyCode">key code to set/remove new action</param>
            <param name="action">action to be associated or null in case of removing key-bind.</param>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.SetKeyBind(System.Windows.Forms.Keys,Sgry.Azuki.ActionProc)">
            <summary>
            Sets or removes key-bind entry.
            Note that giving null to action will remove the key-bind.
            </summary>
            <param name="keyCode">key code to set/remove new action</param>
            <param name="action">action to be associated or null in case of removing key-bind.</param>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.UpdateCaretGraphic">
            <summary>
            Updates size and position of the caret graphic.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.UpdateCaretGraphic(System.Drawing.Rectangle)">
            <summary>
            Updates size and position of the caret graphic.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.SetCursorGraphic(Sgry.Azuki.MouseCursor)">
            <summary>
            Sets graphic of mouse cursor.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.Invalidate">
            <summary>
            Invalidate graphic of whole area
            (force to be redrawn by next paint event message).
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.Invalidate(System.Drawing.Rectangle)">
            <summary>
            Invalidate graphic of the specified area
            (force to be redrawn by next paint event message).
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.Undo">
            <summary>
            Executes UNDO.
            </summary>
            <remarks>
            <para>
            This method restores the modification lastly done for currently active document.
            If there is no UNDOable action, this method will do nothing.
            </para>
            <para>
            To get whether any UNDOable action exists or not,
            use <see cref="P:Sgry.Azuki.WinForms.AzukiControl.CanUndo">CanUndo</see> property.
            </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.WinForms.AzukiControl.CanUndo">AzukiControl.CanUndo property</seealso>
            <seealso cref="M:Sgry.Azuki.Document.Undo">Document.Undo method</seealso>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.ClearHistory">
            <summary>
            Clears all stacked edit histories in currently active document.
            </summary>
            <remarks>
            <para>
            This method clears all editing histories for
            UNDO or REDO action in currently active document.
            </para>
            </remarks>
            <seealso cref="M:Sgry.Azuki.IUserInterface.ClearHistory">IUserInterface.ClearHistory method</seealso>
            <seealso cref="M:Sgry.Azuki.Document.ClearHistory">Document.ClearHistory method</seealso>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.Redo">
            <summary>
            Executes REDO.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.Cut">
            <summary>
            Executes cut action.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.Copy">
            <summary>
            Executes copy action.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.Paste">
            <summary>
            Executes paste action.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.Delete">
            <summary>
            Executes delete action.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.HandleTextInput(System.String)">
            <summary>
            Processes specified text as an input by user.
            </summary>
            <param name="text">The string to be processed.</param>
            <exception cref="T:System.InvalidOperationException">This object is already disposed.</exception>
            <exception cref="T:System.ArgumentNullException">Parameter 'text' is null.</exception>
            <remarks>
            <para>
            This method processes specified text as an input by user.
            Because this method is the implementation of user input,
            some special pre-processes will be done.
            The example of pre-processes are next:
            </para>
            <list type="bullet">
            	<item>If Document.ReadOnly property is true, this method will do nothing.</item>
            	<item>This method applies AutoIndentHook for each characters in the text.</item>
            	<item>This method applies built-in hook processes such as converting tab to spaces.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.SetSelection(System.Int32,System.Int32)">
            <summary>
            Sets selection range and update the desired column.
            </summary>
            <param name="anchor">the position where the selection begins</param>
            <param name="caret">the position where the caret is</param>
            <remarks>
            <para>
            This method sets the selection range and also updates
            the desired column.
            </para>
            <para>
            Normally the caret tries to keep its x-coordinate
            on moving line to line unless user explicitly changes x-coordinate of it.
            The term 'Desired Column' means this x-coordinate which the caret tries to stick close to.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.GetSelection(System.Int32@,System.Int32@)">
            <summary>
            Gets range of current selection.
            Note that this method does not return [anchor, caret) pair but [begin, end) pair.
            </summary>
            <param name="begin">index of where the selection begins.</param>
            <param name="end">index of where the selection ends (selection do not includes the char at this index).</param>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.SelectAll">
            <summary>
            Selects all text.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.GetWordAt(System.Int32)">
            <summary>
            Gets a word at specified index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was invalid.</exception>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.GetTextInRange(System.Int32,System.Int32)">
            <summary>
            Gets text in the range [begin, end).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified range was invalid.</exception>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.GetSelectedTextLength">
            <summary>
            Gets number of characters currently selected.
            </summary>
            <returns>Number of characters currently selected.</returns>
            <remarks>
            <para>
            This method gets number of characters currently selected,
            properly even if the selection mode is rectangle selection.
            </para>
            <para>
            Note that the difference between the end of selection and the beginning of selection
            is not a number of selected characters if they are selected by rectangle selection.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.GetSelectedText">
            <summary>
            Gets currently selected text.
            </summary>
            <returns>Currently selected text.</returns>
            <remarks>
            <para>
            This method gets currently selected text.
            </para>
            <para>
            If current selection is rectangle selection,
            return value will be a string that are consisted with selected partial lines (rows)
            joined with CR+LF.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.GetSelectedText(System.String)">
            <summary>
            Gets currently selected text.
            </summary>
            <returns>Currently selected text.</returns>
            <remarks>
            <para>
            This method gets currently selected text.
            </para>
            <para>
            If current selection is rectangle selection,
            return value will be a string that are consisted with selected partial lines (rows)
            joined with specified string.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.GetLineLength(System.Int32)">
            <summary>
            Gets length of the specified line.
            </summary>
            <param name="lineIndex">Index of the line of which to get the length.</param>
            <returns>Length of the specified line in character count.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index is out of valid range.</exception>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.GetPositionFromIndex(System.Int32)">
            <summary>
            Calculates screen location of the character at specified index.
            </summary>
            <returns>The location of the character at specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid index was given.</exception>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.GetPositionFromIndex(System.Int32,System.Int32)">
            <summary>
            Calculates screen location of the character at specified index.
            </summary>
            <returns>The location of the character at specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid index was given.</exception>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.GetIndexFromPosition(System.Drawing.Point)">
            <summary>
            Gets char-index of the char at the point specified by screen location.
            </summary>
            <returns>The index of the character at specified location.</returns>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.GetHRulerIndex(System.Int32)">
            <summary>
            Calculates location of character at specified index in horizontal ruler index.
            </summary>
            <param name="charIndex">The index of the character to calculate its location.</param>
            <returns>Horizontal ruler index of the character.</returns>
            <remarks>
            <para>
            This method calculates location of character at specified index
            in horizontal ruler index.
            </para>
            <para>
            'Horizontal ruler index' here means how many small lines drawn on the horizontal ruler
            exist between left-end of the text area
            and the character at index specified by <paramref name="charIndex"/>.
            This value is zero-based index.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.GetHRulerIndex(System.Int32,System.Int32)">
            <summary>
            Calculates location of character at specified index in horizontal ruler index.
            </summary>
            <param name="lineIndex">The line index of the character to calculate its location.</param>
            <param name="columnIndex">The column index of the character to calculate its location.</param>
            <returns>Horizontal ruler index of the character.</returns>
            <remarks>
            <para>
            This method calculates location of character at specified index
            in horizontal ruler index.
            </para>
            <para>
            'Horizontal ruler index' here means how many small lines drawn on the horizontal ruler
            exist between left-end of the text area
            and the character at index specified by <paramref name="charIndex"/>.
            This value is zero-based index.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.GetLineHeadIndex(System.Int32)">
            <summary>
            Gets the index of the first char in the line.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was invalid.</exception>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.GetLineHeadIndexFromCharIndex(System.Int32)">
            <summary>
            Gets the index of the first char in the screen line
            which contains the specified char-index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was invalid.</exception>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.GetLineIndexFromCharIndex(System.Int32)">
            <summary>
            Calculates screen line index from char-index.
            </summary>
            <param name="charIndex">The index of the line which contains the char at this parameter will be calculated.</param>
            <returns>The index of the line which contains the character at specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was out of range.</exception>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.GetLineColumnIndexFromCharIndex(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Calculates screen line/column index from char-index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was invalid.</exception>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.GetCharIndexFromLineColumnIndex(System.Int32,System.Int32)">
            <summary>
            Calculates char-index from screen line/column index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Specified index was invalid.</exception>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.InvokeCaretMoved">
            <summary>
            For internal use only. Invokes CaretMoved event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.InvokeIsRectSelectModeChanged">
            <summary>
            For internal use only. Invokes IsRectSelectModeChanged event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.InvokeOverwriteModeChanged">
            <summary>
            For internal use only. Invokes OverwriteModeChanged event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.InvokeLineDrawing(Sgry.Azuki.IGraphics,System.Int32,System.Drawing.Point)">
            <summary>
            Invokes LineDrawing event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.InvokeLineDrawn(Sgry.Azuki.IGraphics,System.Int32,System.Drawing.Point)">
            <summary>
            Invokes LineDrawn event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.InvokeVScroll">
            <summary>
            Invokes VScroll event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.InvokeHScroll">
            <summary>
            Invokes HScroll event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.Scroll(System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            Scrolls a portion of the window.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.ScrollToCaret">
            <summary>
            Scrolls to where the caret is.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.UpdateScrollBarRange">
            <summary>
            Updates scrollbar's range.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.GetIGraphics">
            <summary>
            Gets a graphic interface.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.RescheduleHighlighting">
            <summary>
            (Internal use only.) Make a highlighter run after a little moment.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invokes MouseDown event with additional information through IMouseEventArgs.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invokes MouseUp event with additional information through IMouseEventArgs.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invokes MouseClick event with additional information through IMouseEventArgs.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invokes MouseDoubleClick event with additional information through IMouseEventArgs.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.OnClick(System.EventArgs)">
            <summary>
            Invokes Click event with additional information through IMouseEventArgs.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.OnDoubleClick(System.EventArgs)">
            <summary>
            Invokes DoubleClick event with additional information through IMouseEventArgs.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invokes MouseMove event with additional information through IMouseEventArgs.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.OnGotFocus(System.EventArgs)">
            <summary>
            Invokes GotFocus event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.OnLostFocus(System.EventArgs)">
            <summary>
            Invokes LostFocus event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Invokes KeyDown event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Invokes KeyPress event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.OnResize(System.EventArgs)">
            <summary>
            Invokes Resize event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.IsInputChar(System.Char)">
            <summary>
            This defines the characters which must be treated as input for this control.
            This affects mnemonic key event in a dialog and does not affect to KeyPress (WM_CHAR) event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            This defines the keys which must be treated as input for this control.
            This affects mnemonic key event in a dialog and does not affect to KeyPress (WM_CHAR) event.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.PreProcessMessage(System.Windows.Forms.Message@)">
            <summary>
            Pre-processes window messages to override
            system default behavior.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            This overrides focusing strategy.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.AzukiControl.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Erases background.
            Note that Azuki does nothing on an event of redrawing background
            so just ignores WM_ERASEBKGND message.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.Document">
            <summary>
            Gets or sets the document which is the current editing target.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.View">
            <summary>
            Gets the associated view object.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.ViewType">
            <summary>
            Gets or sets type of the view.
            View type determine how to render text content.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.TopMargin">
            <summary>
            Gets or sets top margin of the view in pixel.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">A negative number was set.</exception>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.LeftMargin">
            <summary>
            Gets or sets left margin of the view in pixel.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">A negative number was set.</exception>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.HRulerIndicatorType">
            <summary>
            Gets or sets type of the indicator on the horizontal ruler.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.Font">
            <summary>
            Gets or sets font to be used for displaying text.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.FontInfo">
            <summary>
            Gets or sets raw font information to be used for displaying text.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.BorderStyle">
            <summary>
            Gets or sets graphical style of border of this control.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.FirstVisibleLine">
            <summary>
            Gets or sets the index of the first visible (graphically top most) line
            of currently active document.
            </summary>
            <remarks>
            <para>
            This property gets or sets the index of the first visible (graphically top most) line
            of currently active document.
            </para>
            <para>
            This property is just a synonym of Document.ViewParam.FirstVisibleLine
            so changing Document property will also changes this property value.
            </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.Document.ViewParam">Document.ViewParam</seealso>
            <seealso cref="P:Sgry.Azuki.ViewParam.FirstVisibleLine">ViewParam.FirstVisibleLine</seealso>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.ColorScheme">
            <summary>
            Color set used for displaying text.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.DrawingOption">
            <summary>
            Gets or sets drawing options.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.ShowsLineNumber">
            <summary>
            Gets or sets whether to show line number or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.ShowsHRuler">
            <summary>
            Gets or sets whether to show horizontal ruler or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.ShowsHScrollBar">
            <summary>
            Whether to show horizontal scroll bar or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.ShowsVScrollBar">
            <summary>
            Whether to show vertical scroll bar or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.ShowsDirtBar">
            <summary>
            Gets or sets whether to show 'dirt bar' or not.
            </summary>
            <remarks>
            <para>
            This property gets or sets whether to show 'dirt bar' or not.
            The dirt bar is graphically a thin bar at right end of the line number area
            that indicates the dirty state of each text line.
            The state of line is one of the following states.
            </para>
            <list type="bullet">
            	<item>LineDirtyState.Clean: the line is not modified yet.</item>
            	<item>LineDirtyState.Dirty: the line is modified and not saved.</item>
            	<item>LineDirtyState.Cleaned: the line is modified but saved.</item>
            </list>
            <para>
            Color of each line dirty state can be customized by setting
            ColorScheme.DirtyLineBar, ColorScheme.CleanedLineBar.
            </para>
            </remarks>
            <seealso cref="T:Sgry.Azuki.LineDirtyState">LineDirtyState enum</seealso>
            <seealso cref="M:Sgry.Azuki.Document.GetLineDirtyState(System.Int32)">Document.GetLineDirtyState method</seealso>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.HighlightsCurrentLine">
            <summary>
            Gets or sets whether the current line would be drawn with underline or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.HighlightsMatchedBracket">
            <summary>
            Gets or sets whether to highlight matched bracket or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.DrawsSpace">
            <summary>
            Gets or sets whether to show half-width space with special graphic or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.DrawsFullWidthSpace">
            <summary>
            Gets or sets whether to show full-width space with special graphic or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.DrawsTab">
            <summary>
            Gets or sets whether to show tab character with special graphic or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.DrawsEofMark">
            <summary>
            Gets or sets whether to show EOF mark or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.DrawsEolCode">
            <summary>
            Gets or sets whether to show EOL code with special graphic or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.TabWidth">
            <summary>
            Gets or sets tab width in count of space characters.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.ScrollsBeyondLastLine">
            <summary>
            Gets or sets whether to scroll beyond the last line of the document or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.LineHeight">
            <summary>
            Gets height of each lines in pixel.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.LinePadding">
            <summary>
            Gets or sets size of padding between lines in pixel.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.LineSpacing">
            <summary>
            Gets distance between lines in pixel.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.ViewWidth">
            <summary>
            Gets or sets width of the content area (including line number area).
            </summary>
            <remarks>
            <para>
            This property gets or sets width by pixel of the whole graphical area
            containing line number area, dirt bar area, left border, and text area.
            </para>
            <para>
            If you want to specify this property not by pixels but by number of characters,
            you can use
            <see cref="P:Sgry.Azuki.IView.HRulerUnitWidth">IView.HRulerUnitWidth</see>
            value as 'reasonable' avarage width of characters.
            </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.WinForms.AzukiControl.View">AzukiControl.View property</seealso>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.IsReadOnly">
            <summary>
            Gets or sets whether this document is read-only or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.IsOverwriteMode">
            <summary>
            Gets or sets whether overwrite mode is enabled or not. In overwrite
            mode, input character will not be inserted but replaces a character
            at where the caret is on.
            </summary>
            <seealso cref="E:Sgry.Azuki.WinForms.AzukiControl.OverwriteModeChanged">
            AzukiControl.OverwriteModeChanged event
            </seealso>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.AutoIndentHook">
            <summary>
            Gets or sets hook delegate to execute auto-indentation.
            If null, auto-indentation will not be performed.
            </summary>
            <remarks>
            <para>
            This property gets or sets a delegate object to execute auto-indentation.
            There are some built-in auto-indentation hook delegates
            declared as members of
            <see cref="T:Sgry.Azuki.AutoIndentHooks">AutoIndentHooks</see> class.
            Use one of the member of AutoIndentHooks or user-made hook to enable auto-indentation,
            otherwise, set null to this property to disable auto-indentation.
            </para>
            </remarks>
            <seealso cref="T:Sgry.Azuki.AutoIndentHooks">AutoIndentHooks</seealso>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.ConvertsTabToSpaces">
            <summary>
            Gets or sets whether tab characters are used for indentation,
            instead of space characters.
            </summary>
            <remarks>
            <para>
            This property is a synonym of <see cref="P:Sgry.Azuki.IUserInterface.UsesTabForIndent">UsesTabForIndent
            </see> property.
            </para>
            </remarks>
            <seealso cref="P:Sgry.Azuki.WinForms.AzukiControl.UsesTabForIndent">
            AzukiControl.UsesTabForIndent property
            </seealso>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.UsesTabForIndent">
            <summary>
            Gets or sets whether tab characters are used for indentation, instead of space characters.
            </summary>
            <remarks>
            <para>
            This property gets or sets whether tab characters are used for indentation,
            instead of space characters.
            </para>
            <para>
            In addition to the case of inserting a new tab character,
            This property affects some other cases like next:
            </para>
            <list type="bullet">
            	<item>
            	When executing block-indent.
            	</item>
            	<item>
            	When additional indent characters are needed.
            	This case is about auto-indentation for specific syntax such as C/C++ language
            	(term <term>smart-indentation</term> is more appropriate here.)
            	In C/C++, if user hits the Enter key on a line
            	that ends with a closing curly bracket (<c> } </c>),
            	newly generated line will be indented one more level
            	by inserting additional indent characters.
            	</item>
            	<item>
            	When pasting rectangle selection data.
            	Let's suppose pasting the text data
            	when the caret is at end of a long line
            	and the lines below is shorter than the line caret is at.
            	In this case, whitespaces will be appended automatically
            	for the lines below as a padding to make pasted result a 'rectangle.'
            	</item>
            </list>
            </remarks>
            <seealso cref="P:Sgry.Azuki.WinForms.AzukiControl.TabWidth">AzukiControl.TabWidth property</seealso>
            <seealso cref="M:Sgry.Azuki.Actions.BlockIndent(Sgry.Azuki.IUserInterface)">Actions.BlockIndent action</seealso>
            <seealso cref="M:Sgry.Azuki.Actions.BlockUnIndent(Sgry.Azuki.IUserInterface)">Actions.BlockUnIndent action</seealso>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.ConvertsFullWidthSpaceToSpace">
            <summary>
            Gets or sets whether to automatically convert
            an input full-width space to a space.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.IsSingleLineMode">
            <summary>
            Gets or sets whether the content will be limited to a single line.
            </summary>
            <remarks>
            The default value is false.
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.AcceptsReturn">
            <summary>
            If this is true, treats Enter key as an input and
            prevent pressing dialog default button.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.AcceptsTab">
            <summary>
            If this is true, treats Tab key as an input and
            prevent moving focus to other control in a dialog.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.IsLineSelectMode">
            <summary>
            Gets whether Azuki is in line selection mode or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.IsRectSelectMode">
            <summary>
            Gets whether Azuki is in rectangle selection mode or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.SelectionMode">
            <summary>
            Gets or sets how to select text.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.UsesStickyCaret">
            <summary>
            Gets or sets whether caret behavior is 'sticky' or not.
            </summary>
            <remarks>
            <para>
            This property determines whether the caret behaves
            'sticky' or not.
            </para>
            <para>
            Sticky caret tries to keep its desired column position
            unless user explicitly changes it, by hitting right or left key for instance.
            Normal caret updates desired column position on typing text
            so if user moves up or down the caret after typing,
            column position of it will be as same as the position
            finally the caret was located.
            On the other hand, sticky caret does not update
            desired column position by typing text
            (because user does not 'explicitly' changed it,)
            so column position will be restored to the position
            where the caret was placed before user typed text.
            </para>
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.MarksUri">
            <summary>
            Gets or sets whether URIs in the active document
            should be marked automatically with built-in URI marker or not.
            </summary>
            <remarks>
            <para>
            Note that built-in URI marker marks URIs in document
            and then Azuki shows the URIs as 'looks like URI,'
            but (1) clicking mouse button on them, or
            (2) pressing keys when the caret is at middle of a URI,
            makes NO ACTION BY DEFAULT.
            To define action on such event,
            programmer must implement such action as a part of 
            event handler of standard mouse event or keyboard event.
            Please refer to the <see cref="T:Sgry.Azuki.Marking">document of marking feature</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.CanUndo">
            <summary>
            Gets whether an available UNDO action exists or not.
            </summary>
            <remarks>
            <para>
            This property gets whether one or more UNDOable action exists or not.
            </para>
            <para>
            To execute UNDO, use <see cref="M:Sgry.Azuki.WinForms.AzukiControl.Undo">Undo</see> method.
            </para>
            </remarks>
            <seealso cref="M:Sgry.Azuki.WinForms.AzukiControl.Undo">AzukiControl.Undo method</seealso>
            <seealso cref="P:Sgry.Azuki.Document.CanUndo">Document.CanUndo property</seealso>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.IsRecordingHistory">
            <summary>
            Gets or sets whether the edit actions will be recorded or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.CanRedo">
            <summary>
            Gets whether an available REDO action exists or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.CanCut">
            <summary>
            Gets whether cut action can be executed or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.CanCopy">
            <summary>
            Gets whether copy action can be executed or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.CanPaste">
            <summary>
            Gets whether paste action can be executed or not.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.CaretIndex">
            <summary>
            Gets the index of where the caret is at (in char-index).
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.Text">
            <summary>
            Gets or sets currently inputted text.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.TextLength">
            <summary>
            Gets currently inputted character's count.
            Note that a surrogate pair or a combining character sequence
            will be counted as two characters.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.LineCount">
            <summary>
            Gets number of lines currently inputted.
            </summary>
        </member>
        <member name="E:Sgry.Azuki.WinForms.AzukiControl.CaretMoved">
            <summary>
            Occurs soon after the document's caret was moved.
            </summary>
        </member>
        <member name="E:Sgry.Azuki.WinForms.AzukiControl.IsRectSelectModeChanged">
            <summary>
            Occures soon after rectangular selection mode was changed.
            </summary>
        </member>
        <member name="E:Sgry.Azuki.WinForms.AzukiControl.OverwriteModeChanged">
            <summary>
            Occurs soon after the overwrite mode was changed.
            </summary>
            <seealso cref="P:Sgry.Azuki.WinForms.AzukiControl.IsOverwriteMode">AzukiControl.IsOverwriteMode property</seealso>
        </member>
        <member name="E:Sgry.Azuki.WinForms.AzukiControl.LineDrawing">
            <summary>
            Occurres before a screen line was drawn.
            </summary>
        </member>
        <member name="E:Sgry.Azuki.WinForms.AzukiControl.LineDrawn">
            <summary>
            Occurres after a screen line was drawn.
            </summary>
        </member>
        <member name="E:Sgry.Azuki.WinForms.AzukiControl.VScroll">
            <summary>
            Occurres after vertical scroll happened.
            </summary>
        </member>
        <member name="E:Sgry.Azuki.WinForms.AzukiControl.HScroll">
            <summary>
            Occurres after norizontal scroll happened.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.Highlighter">
            <summary>
            Gets or sets highlighter object to highlight currently active document
            or null to disable highlighting.
            </summary>
            <remarks>
            <para>
            This property gets or sets highlighter for this document.
            </para>
            <para>
            Highlighter objects are used to highlight syntax of documents.
            They implements
            <see cref="T:Sgry.Azuki.Highlighter.IHighlighter">IHighlighter</see>
            interface and called
            <see cref="M:Sgry.Azuki.Highlighter.IHighlighter.Highlight(Sgry.Azuki.Document,System.Int32@,System.Int32@)">Highlight</see>
            method every time slightly after user input stopped to execute own highlighting logic.
            If null was set to this property, highlighting feature will be disabled.
            </para>
            <para>
            Azuki provides some built-in highlighters.
            See
            <see cref="T:Sgry.Azuki.Highlighter.Highlighters">Highlighter.Highlighters</see>
            class members.
            </para>
            <para>
            User can create and use custom highlighter object.
            If you want to create a keyword-based highlighter,
            you can extend
            <see cref="T:Sgry.Azuki.Highlighter.KeywordHighlighter">KeywordHighlighter</see>.
            If you want ot create not a keyword based one,
            create a class which implements
            <see cref="T:Sgry.Azuki.Highlighter.IHighlighter">IHighlighter</see>
            and write your own highlighting logic.
            </para>
            </remarks>
            <seealso cref="T:Sgry.Azuki.Highlighter.Highlighters">Highlighter.Highlighters</seealso>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.Version">
            <summary>
            Gets version of Azuki.dll.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.ForeColor">
            <summary>
            Gets or sets default text color.
            </summary>
            <remarks>
            This property gets or sets default foreground color.
            Note that this is a synonym of
            <see cref="P:Sgry.Azuki.WinForms.AzukiControl.ColorScheme">AzukiControl.ColorScheme</see>.BackColor
            .
            </remarks>
            <seealso cref="P:Sgry.Azuki.WinForms.AzukiControl.ColorScheme">AzukiControl.ColorScheme</seealso>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.BackColor">
            <summary>
            Gets or sets default background color.
            </summary>
            <remarks>
            This property gets or sets default background color.
            Note that this is a synonym of
            <see cref="P:Sgry.Azuki.WinForms.AzukiControl.ColorScheme">AzukiControl.ColorScheme</see>.BackColor
            .
            </remarks>
            <seealso cref="P:Sgry.Azuki.WinForms.AzukiControl.ColorScheme">AzukiControl.ColorScheme</seealso>
        </member>
        <member name="P:Sgry.Azuki.WinForms.AzukiControl.UseCtrlTabToMoveFocus">
            <summary>
            Gets or sets whether this control uses Ctrl+Tab and Ctrl+Shift+Tab
            for moving focus to other controls in a dialog.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="T:Sgry.Azuki.WinForms.PlatWin">
            <summary>
            Platform API for Windows.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.PlatWin.GetClipboardText(Sgry.Azuki.TextDataType@)">
            <summary>
            Gets content of the system clipboard.
            </summary>
            <param name="dataType">The type of the text data in the clipboard</param>
            <returns>Text content retrieved from the clipboard if available. Otherwise null.</returns>
            <remarks>
            <para>
            This method gets text from the system clipboard.
            If stored text data is a special format (line or rectangle,)
            its data type will be set to <paramref name="dataType"/> parameter.
            </para>
            </remarks>
            <seealso cref="T:Sgry.Azuki.TextDataType">TextDataType enum</seealso>
        </member>
        <member name="M:Sgry.Azuki.WinForms.PlatWin.SetClipboardText(System.String,Sgry.Azuki.TextDataType)">
            <summary>
            Sets content of the system clipboard.
            </summary>
            <param name="text">Text data to set.</param>
            <param name="dataType">Type of the data to set.</param>
            <remarks>
            <para>
            This method set content of the system clipboard.
            If <paramref name="dataType"/> is TextDataType.Normal,
            the text data will be just a character sequence.
            If <paramref name="dataType"/> is TextDataType.Line or TextDataType.Rectangle,
            stored text data would be special format that is compatible with Microsoft Visual Studio.
            </para>
            </remarks>
        </member>
        <member name="M:Sgry.Azuki.WinForms.PlatWin.GetGraphics(System.Object)">
            <summary>
            Gets a graphic device context from a window.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.PlatWin.DragSize">
            <summary>
            It will be regarded as a drag operation by the system
            if mouse cursor moved beyond this rectangle.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.PlatWin.Utl.MyStringToHGlobalUni(System.String)">
            <exception cref="T:System.ArgumentOutOfRangeException">Too long text was given.</exception>
            <exception cref="T:System.OutOfMemoryException">No enough memory.</exception>
        </member>
        <member name="M:Sgry.Azuki.WinForms.GraWin.BeginPaint(System.Drawing.Rectangle)">
            <summary>
            Begin using off-screen buffer and cache drawing which will be done after.
            </summary>
            <param name="paintRect">painting area (used for creating off-screen buffer).</param>
        </member>
        <member name="M:Sgry.Azuki.WinForms.GraWin.EndPaint">
            <summary>
            End using off-screen buffer and flush all drawing results.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.GraWin.SetClipRect(System.Drawing.Rectangle)">
            <summary>
            Select specified rectangle as a clipping region.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.GraWin.RemoveClipRect">
            <summary>
            Remove currently selected clipping region from the offscreen buffer.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.GraWin.DrawText(System.String,System.Drawing.Point@,System.Drawing.Color)">
            <summary>
            Draws a text.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.GraWin.MeasureText(System.String)">
            <summary>
            Measures graphical size of the a text.
            </summary>
            <param name="text">text to measure</param>
            <returns>size of the text in the graphic device context</returns>
        </member>
        <member name="M:Sgry.Azuki.WinForms.GraWin.MeasureText(System.String,System.Int32,System.Int32@)">
            <summary>
            Measures graphical size of the a text within the specified clipping width.
            </summary>
            <param name="text">text to measure</param>
            <param name="clipWidth">width of the clipping area for rendering text (in pixel unit if the context is screen)</param>
            <param name="drawableLength">count of characters which could be drawn within the clipping area width</param>
            <returns>size of the text in the graphic device context</returns>
        </member>
        <member name="M:Sgry.Azuki.WinForms.GraWin.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line with foreground color.
            Note that the point where the line extends to will also be painted.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.GraWin.DrawRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle with foreground color.
            Note that right and bottom edge will also be painted.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.GraWin.FillRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills a rectangle with background color.
            Note that right and bottom edge will also be painted.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.GraWin.FontInfo">
            <summary>
            Font used for drawing/measuring text.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.GraWin.Font">
            <summary>
            Font used for drawing/measuring text.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.GraWin.ForeColor">
            <summary>
            Foreground color used by drawing APIs.
            </summary>
        </member>
        <member name="P:Sgry.Azuki.WinForms.GraWin.BackColor">
            <summary>
            Background color used by drawing APIs.
            </summary>
        </member>
        <member name="T:Sgry.Azuki.WinForms.WinApi">
            <summary>
            Win32API wrapper for modules which is used only in the Windows environment.
            </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.WinApi.SetImeWindowPos(System.IntPtr,System.Drawing.Point)">
            <summary>Sets location of the IME composition window (pre-edit window) </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.WinApi.SetImeWindowPos(System.IntPtr,System.IntPtr,System.Drawing.Point)">
            <summary>Sets location of the IME composition window (pre-edit window) </summary>
        </member>
        <member name="M:Sgry.Azuki.WinForms.WinApi.SetImeWindowFont(System.IntPtr,Sgry.Azuki.FontInfo)">
            <summary>Sets font of the IME composition window (pre-edit window) </summary>
        </member>
        <member name="F:Sgry.Azuki.WinForms.WinApi.RECONVERTSTRING.dwSize">
            <summary>Size of this instance.</summary>
        </member>
        <member name="F:Sgry.Azuki.WinForms.WinApi.RECONVERTSTRING.dwVersion">
            <summary>Version (must be 0).</summary>
        </member>
        <member name="F:Sgry.Azuki.WinForms.WinApi.RECONVERTSTRING.dwStrLen">
            <summary>Length of the string given to IME.</summary>
        </member>
        <member name="F:Sgry.Azuki.WinForms.WinApi.RECONVERTSTRING.dwStrOffset">
            <summary>
            Byte-offset of the string given to IME
            from the memory address of this structure.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.WinForms.WinApi.RECONVERTSTRING.dwCompStrLen">
            <summary>Length of the string that will be able to be reconverted.</summary>
        </member>
        <member name="F:Sgry.Azuki.WinForms.WinApi.RECONVERTSTRING.dwCompStrOffset">
            <summary>
            Byte-offset of the string that will be able to be reconverted
            from the start position of where specified with dwStrOffset.
            </summary>
        </member>
        <member name="F:Sgry.Azuki.WinForms.WinApi.RECONVERTSTRING.dwTargetStrLen">
            <summary>Length of the exact string that will be reconverted.</summary>
        </member>
        <member name="F:Sgry.Azuki.WinForms.WinApi.RECONVERTSTRING.dwTargetStrOffset">
            <summary>
            Byte-offset of the exact string that will be reconverted
            from the start position of where specified with dwStrOffset.
            </summary>
        </member>
    </members>
</doc>
