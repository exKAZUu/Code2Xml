#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.7
# from Racc grammer file "".
#

require 'racc/parser.rb'
class RubyParser < Racc::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-487,357,482,261,262,801,-87,-487,-487,-487,-90,600,398,-487,-487,122',
'-487,410,399,-64,89,563,563,509,3,-487,514,-432,34,-86,-273,-86,122',
'-435,-432,-487,-487,-273,-487,-487,-487,-487,-487,509,482,482,511,-87',
'786,673,618,620,621,625,564,564,-72,-90,700,-85,482,359,361,531,-487',
'-487,-487,-487,-487,-487,-487,-487,-487,-487,-487,-487,-487,-487,-83',
'411,-487,-487,-487,673,544,738,-273,673,-487,652,266,-90,-483,-84,299',
'-487,651,-487,123,-487,-487,-487,-487,-487,-487,-487,-483,-487,-487',
'-487,-86,-82,269,601,484,123,-87,271,-87,261,262,-87,-487,-487,482,-78',
'-274,-487,-87,-86,-78,-487,269,-274,-274,-274,266,271,-274,-274,-274',
'-86,-274,-86,357,269,-86,671,-79,563,271,-84,-274,-274,269,269,484,484',
'122,271,271,-274,-274,-89,-274,-274,-274,-274,-274,-85,269,-85,484,452',
'-85,271,299,-88,-85,269,-428,671,564,269,271,671,752,-428,271,-83,-274',
'-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,359',
'361,-274,-274,-274,-434,563,-274,732,574,-274,-281,-434,-274,-89,-274',
'-350,-274,-281,-274,730,-274,-274,-274,-274,-274,-274,-274,-84,-274',
'269,-274,484,357,755,271,-484,123,357,564,-89,357,729,-280,-274,-274',
'-274,-274,-76,-274,-280,-280,-280,-274,-88,-85,-280,-280,652,-280,-81',
'-434,-429,738,-423,651,-83,-281,-79,-429,-434,-423,-487,759,-80,-77',
'707,-434,-280,-280,-273,-280,-280,-280,-280,-280,-75,-273,261,262,706',
'269,727,359,361,525,271,-326,359,361,392,359,361,536,-326,266,725,-280',
'-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-87',
'-487,-280,-280,-280,-434,545,269,-487,-282,-280,-79,271,-483,-85,-273',
'-282,-280,724,-280,745,-280,-280,-280,-280,-280,-280,-280,-79,-280,357',
'-280,-326,358,-487,-430,595,598,521,425,523,599,-430,594,-280,-280,424',
'-80,-79,-280,764,-88,-79,-280,-484,-484,-484,-487,-484,-433,721,423',
'-484,-484,768,-282,-433,-484,422,-484,-484,-484,-484,-484,-484,-484',
'738,-435,523,-77,-484,-484,-484,-484,-484,-484,-484,433,155,299,359',
'361,596,440,432,426,-484,438,439,-484,-484,-484,-484,-484,-484,-484',
'-484,-484,-484,-426,-484,-484,691,-484,-484,-484,-426,396,-75,771,295',
'102,-83,375,277,280,283,286,101,-82,374,509,269,-90,514,-484,545,271',
'-484,-484,-280,-484,-484,-77,-484,399,-484,-280,-484,-431,-484,131,-484',
'-76,872,-281,-431,-84,-484,710,-77,871,-281,-484,-484,-484,-484,-484',
'-484,263,264,399,-484,-484,-483,-483,-483,103,-483,376,-77,-88,-483',
'-483,-77,509,708,-483,527,-483,-483,-483,-483,-483,-483,-483,-280,801',
'261,262,-483,-483,-483,-483,-483,-483,-483,-282,326,703,873,-281,269',
'269,-282,325,-483,271,271,-483,-483,-483,-483,-483,-483,-483,-483,-483',
'-483,701,-483,-483,452,-483,-483,-483,678,679,692,681,88,92,618,620',
'621,625,395,-481,777,-487,-480,321,269,394,779,-483,705,271,-483,-483',
'-280,-483,-483,-282,-483,321,-483,-280,-483,-281,-483,587,-484,-81,378',
'379,-281,-89,-483,749,738,384,-503,-483,-483,-483,-483,-483,-483,-503',
'-503,-503,-483,-483,-503,-503,-503,-426,-503,-487,-423,-86,396,-280',
'-426,384,-487,-423,-503,-481,-280,-483,-480,551,-261,-484,-280,-503',
'-503,523,-503,-503,-503,-503,-503,-281,621,625,749,738,-481,668,-487',
'-480,616,587,-503,622,627,629,261,262,665,-503,-503,-503,261,262,-503',
'-503,-503,587,-503,-426,-79,-487,-423,-503,-87,-280,550,266,-503,654',
'-503,266,791,303,649,321,-503,-503,-503,648,-503,-503,-503,-503,-503',
'618,620,621,625,616,299,794,622,627,629,616,647,-503,622,627,629,616',
'-72,646,622,627,629,-77,643,804,-503,-85,-503,266,806,-503,299,-503',
'809,299,811,295,-261,299,-503,277,280,630,746,321,-503,299,816,630,618',
'620,621,625,321,321,618,620,621,625,303,299,618,620,621,625,295,-503',
'818,638,277,280,283,286,637,18,22,26,299,37,-503,-262,-503,53,63,-503',
'609,592,82,822,91,95,6,11,17,23,27,587,449,552,321,51,56,60,64,69,73',
'77,528,295,97,828,829,277,280,664,830,39,451,833,48,52,59,67,70,74,78',
'83,88,92,266,9,15,507,25,30,36,299,300,276,279,282,285,288,290,292,294',
'296,487,301,278,486,839,284,287,-63,136,841,732,139,729,732,72,76,845',
'87,453,445,295,444,298,20,277,280,283,286,289,291,293,61,297,853,441',
'855,84,89,93,4,10,16,299,428,858,34,40,269,281,859,-217,427,271,18,22',
'26,31,37,861,409,587,53,63,407,587,405,82,403,91,95,6,11,17,23,27,401',
'400,399,393,51,56,60,64,69,73,77,384,874,97,321,321,313,381,664,29,39',
'44,47,48,52,59,67,70,74,78,83,88,92,881,9,15,266,25,30,36,299,300,276',
'279,282,285,288,290,292,294,296,883,301,278,377,886,284,287,887,43,732',
'353,54,350,334,72,76,303,87,637,96,295,302,298,20,277,280,283,286,289',
'291,293,61,297,587,274,587,84,89,93,4,10,16,266,166,153,34,40,149,281',
'899,128,98,451,14,18,22,26,31,37,587,,,53,63,,,,82,,91,95,6,11,17,23',
'27,,,,,51,56,60,64,69,73,77,,,97,314,315,316,317,318,29,39,44,47,48',
'52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,299,-505,-505,-505,-505,285',
'288,,,-505,-505,314,315,316,317,318,284,287,,43,,,54,,,72,76,,87,,96',
'295,,298,20,277,280,283,286,289,291,293,61,297,,,,84,89,93,4,10,16,',
',,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51',
'56,60,64,69,73,77,,,97,314,315,316,317,318,29,39,44,47,48,52,59,67,70',
'74,78,83,88,92,,9,15,,25,30,36,299,-505,-505,-505,-505,285,288,,,-505',
'-505,,,,,,284,287,,43,,,54,,,72,76,,87,,96,295,,298,20,277,280,283,286',
'289,291,293,61,297,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,',
',53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,',
',29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,299,-505',
'-505,-505,-505,285,288,,,-505,-505,,,,,,284,287,,43,,,54,,,72,76,,87',
',96,295,,298,20,277,280,283,286,289,291,293,61,297,,,,84,89,93,4,10',
'16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,',
',,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,299,,,,,,,,,,,,,,,,284,287,,43,,,54,,,72,76,,87',
',96,295,,298,20,277,280,283,286,,,293,61,297,,,,84,89,93,4,10,16,,,',
'34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56',
'60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,',
'9,15,,25,30,36,299,,,,,,,,,,,,,,,,284,287,,43,,,54,,,72,76,,87,,96,295',
',298,20,277,280,283,286,,,293,61,297,,,,84,89,93,4,10,16,,,,34,40,14',
'18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69',
'73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,299,300,276,279,282,285,288,290,292,294,296,,-505,-505,,,284,287',
',43,,,54,,,72,76,,87,,96,295,,298,20,277,280,283,286,289,291,293,61',
'297,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91',
'95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52',
'59,67,70,74,78,83,88,92,,9,15,,25,30,36,299,-505,-505,-505,-505,285',
'288,,,-505,-505,,,,,,284,287,,43,,,54,,,72,76,,87,,96,295,,298,20,277',
'280,283,286,289,291,293,61,297,,,,84,89,93,4,10,16,,,,34,40,14,18,22',
'26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77',
',,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36',
'299,300,276,279,282,285,288,,,294,296,,,,,,284,287,,43,,,311,,,72,76',
',87,,96,295,,298,20,277,280,283,286,289,291,293,61,297,,,,84,89,93,4',
'10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27',
',,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78',
'83,88,92,,9,15,,25,30,36,299,-505,-505,-505,-505,285,288,,,-505,-505',
',,,,,284,287,,43,,,54,,,72,76,,87,,96,295,,298,20,277,280,283,286,289',
'291,293,61,297,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53',
'63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29',
'39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,299,,,,,,,,,',
',,,,,,284,287,,43,,,54,,,72,76,,87,,96,295,,298,20,277,280,283,286,',
',293,61,297,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63',
',,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39',
'44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,299,-505,-505,-505',
'-505,285,288,,,-505,-505,,,,,,284,287,,43,,,54,,,72,76,,87,,96,295,',
'298,20,277,280,283,286,289,291,293,61,297,,,,84,89,93,4,10,16,,,,34',
'40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60',
'64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,299,,,,,,,,,,,,,,,,284,287,,43,,,54,,,72,76,,87,,96,295,,298',
'20,277,280,283,286,,,293,61,297,,,,84,89,93,4,10,16,,,,34,40,14,18,22',
'26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77',
',,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36',
'299,300,276,279,282,285,288,290,,294,296,,,,,,284,287,,43,,,54,,,72',
'76,,87,,96,295,,298,20,277,280,283,286,289,291,293,61,297,,,,84,89,93',
'4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23',
'27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,299,300,276,279,282,285,288,290,292,294',
'296,,-505,-505,,,284,287,,43,,,54,,,72,76,,87,,96,295,,298,20,277,280',
'283,286,289,291,293,61,297,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26',
'31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,',
',97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,299',
',,,,,,,,,,,,,,,284,287,,43,,,54,,,72,76,,87,,96,295,,298,20,277,280',
'283,286,,,,61,,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53',
'63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29',
'39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,299,,,,,,,,,',
',,,,,,284,287,,43,,,54,,,72,76,,87,,96,295,,,20,277,280,283,286,,,,61',
',,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95',
'6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59',
'67,70,74,78,83,88,92,,9,15,,25,30,36,299,,,,,,,,,,,,,,,,284,287,,43',
',,54,,,72,76,,87,,96,295,,298,20,277,280,283,286,,,,61,,,,,84,89,93',
'4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23',
'27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,43,,,311,,,72,76,,87',
',96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37',
',,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,',
',,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,',
',,,,,,,,,,,,43,,,54,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10',
'16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,',
',,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,43,,,54,,,72,76,,87,,96,,,',
'20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63',
',,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39',
'44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,43,,,54,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34',
'40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60',
'64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,43,,,54,,,72,76,,87,,96,,,,20,,,,,,,,61',
',,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95',
'6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59',
'67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,43,,,54,,,72',
'76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26',
'31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,',
',97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,',
',,,,,,,,,,,,,,,,,,43,,,54,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89',
'93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17',
'23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70',
'74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,43,,,311,,,72,76,',
'87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31',
'37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97',
',,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,',
',,,,,,,,,,,,,,43,,,54,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4',
'10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27',
',,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78',
'83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,43,,,54,,,72,76,,87,,96',
',,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53',
'63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29',
'39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,',
',,,,,,43,,,54,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,',
',,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51',
'56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92',
',9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,43,,,54,,,72,76,,87,,96,,,,20,,,',
',,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91',
'95,6,106,107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59',
'67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,',
'72,76,,87,,146,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73',
'77,,,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,',
',,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93',
'4,10,16,,,,34,40,-251,-251,-251,,-251,,,,-251,-251,,,,-251,,-251,-251',
'-251,-251,-251,-251,-251,,,,,-251,-251,-251,-251,-251,-251,-251,,,,',
',,,,,-251,,,-251,-251,-251,-251,-251,-251,-251,-251,-251,-251,,-251',
'-251,,-251,-251,-251,,,,,,,,,,,,,,,,,,,,-251,,,-251,321,,-251,-251,',
'-251,,-251,,-251,,-251,,,,,,,,-251,,,,,-251,-251,-251,-251,-251,-251',
',,,-251,-251,-480,-480,-480,,-480,,,,-480,-480,,,,-480,,-480,-480,-480',
'-480,-480,-480,-480,,-480,,,-480,-480,-480,-480,-480,-480,-480,,,,,',
',,,,-480,,,-480,-480,-480,-480,-480,-480,-480,-480,-480,-480,,-480,-480',
',-480,-480,-480,,,,,,,,,,,,,,,,,,,,-480,,,-480,-480,,-480,-480,,-480',
',-480,,-480,,-480,,,,,,,,-480,,-480,,,-480,-480,-480,-480,-480,-480',
',,,-480,-480,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51',
'56,60,64,69,73,77,,,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61',
',,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',332,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,-481,-481,-481,',
'-481,,,,-481,-481,,,,-481,,-481,-481,-481,-481,-481,-481,-481,,-481',
',,-481,-481,-481,-481,-481,-481,-481,,,,,,,,,,-481,,,-481,-481,-481',
'-481,-481,-481,-481,-481,-481,-481,,-481,-481,,-481,-481,-481,,,,,,',
',,,,,,,,,,,,,-481,,,-481,-481,,-481,-481,,-481,,-481,,-481,,-481,,,',
',,,,-481,,-481,,,-481,-481,-481,-481,-481,-481,,,,-481,-481,18,22,26',
',37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77',
',,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,',
',,,,,,,,,,,136,,,139,,,72,76,,87,,767,,,,20,,,,,,,,141,,,,,84,89,93',
'4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27',
',,,,114,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92',
',9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,332,,,,20',
',,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82',
',91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48',
'52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,520,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40',
'18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64',
'69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36',
',,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,',
',48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,112,,,48,52,59,67,70,74,78,83,88,92,,9,15,,,,110,,,,',
',,,,,,,,,,,,,,,113,,,54,,,72,76,,87,,96,,,,,,,,,,,,,,,,,84,89,93,4,10',
'16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,112,,,48,52,59,67,70,74,78,83,88,92,,9',
'15,,,,110,,,,,,,,,,,,,,,,,,,,162,,,139,,,72,76,,87,,,,,,,,,,,,,,,,,',
',84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17',
'23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39,,,48,52,59,67,70,74,78',
'83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,',
',,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63',
',,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39,,',
'48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73',
'77,,,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,',
',,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93',
'4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27',
',,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88',
'92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20',
',,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82',
',91,95,6,106,107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,39,,,48,52',
'59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139',
',,72,76,,87,,332,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22',
'26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73',
'77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,',
',,,,,,,,,,,,,,136,,,139,,,72,76,,87,,662,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,39,,,48',
'52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,146,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34',
'40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116',
'64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30',
'36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84',
'89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107',
'23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78',
'83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,',
',,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63',
',,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39,,',
'48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,',
',48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,-251',
'-251,-251,,-251,,,,-251,-251,,,,-251,,-251,-251,-251,-251,-251,-251',
'-251,,,,,-251,-251,-251,-251,-251,-251,-251,,,,,,,,,,-251,,,-251,-251',
'-251,-251,-251,-251,-251,-251,-251,-251,,-251,-251,,-251,-251,-251,',
',,,,,,,,,,,,,,,,,,-251,,,-251,313,,-251,-251,,-251,,-251,,-251,,-251',
',,,,,,,-251,,,,,-251,-251,-251,-251,-251,-251,,,,-251,-251,18,22,26',
',37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97',
',,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,',
',,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16',
',,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,332,,,,20,,,,,,',
',141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95',
'6,106,107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67',
'70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,389',
'76,,87,,146,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22',
'26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73',
'77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,',
',,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93',
'4,10,16,,,,34,40,176,180,185,191,196,201,205,210,,,228,231,232,235,240',
',,169,172,174,182,187,193,197,,,211,215,221,249,252,254,256,241,242',
'244,168,171,173,178,183,189,199,203,207,246,247,248,226,,,255,,,,,,',
',184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,',
',,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,,,237,257,,,18',
'22,26,,37,,,40,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73',
'77,,,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,',
',,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93',
'4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27',
',,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88',
'92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20',
',,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82',
',91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48',
'52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,788,,131,,20,,,,,,,,141,,,,',
'84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107',
'23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,112,,,48,52,59,67,70,74,78',
'83,88,92,,9,15,,,,110,,,,,,,,,,,,,,,,,,,,162,,,163,,,72,76,,87,,164',
',,,,,,,,,,,,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82',
',91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48',
'52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,332,,,,20,,,,,,,,141,,,,,84',
'89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23',
'27,,,,,51,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88',
'92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20',
',,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82',
',91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48',
'52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,763,,,,20,,,,,,,,141,,,,,84',
'89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107',
'23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78',
'83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,',
',,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,31,37,,,,53',
'63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29',
'39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,',
',,,,,,43,,,54,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,',
',,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',865,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37',
',,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,',
',,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,',
',,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10',
'16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,862,,131,,20,,,',
',,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91',
'95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59',
'67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,',
'72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26',
',37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77',
',,,,,,,,,112,,,48,52,418,67,70,74,419,83,88,92,,9,15,,,,110,,,,,,,,',
',,,,,,,,,,,415,,,139,,,72,76,,87,,,,,,,,,,,,,,,,,,,84,89,93,4,10,16',
',,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56',
'60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11',
'17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63',
',,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39',
',,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,591,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34',
'40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64',
'69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36',
',,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,',
',48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,897,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34',
'40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116',
'64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30',
'36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,857,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',112,,,48,52,59,67,70,74,78,83,88,92,,9,15,,,,110,,,,,,,,,,,,,,,,,,',
',162,,,139,,,72,76,,87,,,,,,,,,,,,,,,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,112,,,48,52,418,67,70,74,419,83,88,92,,9,15,,,,110,,',
',,,,,,,,,,,,,,,,,415,,,139,,,72,76,,87,,,,,,,,,,,,,,,,,,,84,89,93,4',
'10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,',
',,114,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92',
',9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,585,,131,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,',
',48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,585',
',131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,112,,,48,52,59,67,70,74,78,83,88,92,,9,15,',
',,110,,,,,,,,,,,,,,,,,,,,113,,,54,,,72,76,,87,,96,,,,,,,,,,,697,,,,',
',84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17',
'23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39,,,48,52,59,67,70,74,78',
'83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,',
',,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63',
',,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39',
',,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,39,,,48',
'52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,332,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40',
'18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69',
'73,77,,,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36',
',,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,572,,131,,20,,,,,,,,61,,,',
',84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39',
',,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73',
'77,,,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,',
',,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93',
'4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27',
',,,,114,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92',
',9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,146,,131,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,112',
',,48,52,59,67,70,74,78,83,88,92,,9,15,,,,110,,,,,,,,,,,,,,,,,,,,850',
',,139,,,72,76,,87,,,,,,,,,,,,,,,,,,,84,89,93,4,10,16,,,,34,40,18,22',
'26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69,73',
'77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,',
',,,,,,,,,,,,,,136,,,139,,,72,76,,87,,332,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,449,,72,76,,87,,',
',,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,176,180,185,191,196,201',
'205,210,,,228,231,232,235,240,,,169,172,174,182,187,193,197,,,211,215',
'221,249,252,254,256,241,242,244,168,171,173,178,183,189,199,203,207',
'246,247,248,226,,,255,,,,,,,,184,190,,200,204,214,219,,227,230,,,239',
',,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206',
'212,216,,225,,,237,257,,,18,22,26,,37,,,40,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,176,180,185,191,196',
'201,205,210,,,228,231,232,235,240,,,169,172,174,182,187,193,197,,,211',
'215,221,249,252,254,256,241,242,244,168,171,173,178,183,189,199,203',
'207,246,247,248,226,253,,255,,,,,,,,184,190,,200,204,214,219,,227,230',
',,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202',
'206,212,216,,225,,,237,257,,,18,22,26,,37,,,40,53,63,,,,82,,91,95,6',
'106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67',
'70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72',
'76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37',
',,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,',
',,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,',
',,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10',
'16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141',
',,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'34,40,-251,-251,-251,,-251,,,,-251,-251,,,,-251,,-251,-251,-251,-251',
'-251,-251,-251,,,,,-251,-251,-251,-251,-251,-251,-251,,,,,,,,,,-251',
',,-251,-251,-251,-251,-251,-251,-251,-251,-251,-251,,-251,-251,,-251',
'-251,-251,,,,,,,,,,,,,,,,,,,,-251,,,-251,321,,-251,-251,,-251,,-251',
',-251,,-251,,,,,,,,-251,,,,,-251,-251,-251,-251,-251,-251,,,,-251,-251',
'176,180,185,191,196,201,205,210,,,228,231,232,235,240,,,169,172,174',
'182,187,193,197,,,211,215,221,249,252,254,256,241,242,244,168,171,173',
'178,183,189,199,203,207,246,247,248,226,,,255,,,,,,,,184,190,,200,204',
'214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175',
'179,188,194,198,202,206,212,216,,225,,,237,257,,,-485,-485,-485,,-485',
',,40,-485,-485,,,,-485,,-485,-485,-485,-485,-485,-485,-485,,,,,-485',
'-485,-485,-485,-485,-485,-485,,,,,,,,,,-485,,,-485,-485,-485,-485,-485',
'-485,-485,-485,-485,-485,,-485,-485,,-485,-485,-485,,,,,,,,,,,,,,,,',
',,,-485,,,-485,-485,,-485,-485,,-485,,-485,,-485,,-485,,,,,,,,-485,',
',,,-485,-485,-485,-485,-485,-485,,,,-485,-485,18,22,26,,37,,,,53,63',
',,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39',
',,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,782,,131,,20,,,,,,,,141,,,,',
'84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107',
'23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78',
'83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,',
',,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63',
',,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39',
',,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,490,72,76,,87,,146,,131,,20,,,,,,,,141,',
',,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11',
'17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63',
',,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39,,',
'48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73',
'77,,,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,',
',,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93',
'4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,',
',,51,56,60,64,69,73,77,,,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92',
',9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,',
',,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,31,37,,,,53,63,,,,82,',
'91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48',
'52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,43,,,54',
',,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22',
'26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69,73',
'77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,',
',,,,,,,,,,,,,,136,,,139,,,72,76,,87,,146,,131,,20,,,,,,,,141,,,,,84',
'89,93,4,10,16,,,,34,40,-486,-486,-486,,-486,,,,-486,-486,,,,-486,,-486',
'-486,-486,-486,-486,-486,-486,,,,,-486,-486,-486,-486,-486,-486,-486',
',,,,,,,,,-486,,,-486,-486,-486,-486,-486,-486,-486,-486,-486,-486,,-486',
'-486,,-486,-486,-486,,,,,,,,,,,,,,,,,,,,-486,,,-486,-486,,-486,-486',
',-486,,-486,,-486,,-486,,,,,,,,-486,,,,,-486,-486,-486,-486,-486,-486',
',,,-486,-486,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51',
'56,60,64,69,73,77,,,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61',
',,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11',
'17,23,27,,,,,51,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78',
'83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,',
',,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63',
',,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,,,,,,,,39,,,48',
'52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,,,,,,,,39,,,48,52',
'59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139',
',,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26',
',37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77',
',,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,',
',,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10',
'16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,785,,131,,20,,,',
',,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91',
'95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67',
'70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72',
'76,,87,,520,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26',
',37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77',
',,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,',
',,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10',
'16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141',
',,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11',
'17,23,27,,,,,51,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78',
'83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,',
',,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63',
',,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39,,',
'48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27',
',,,,51,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92',
',9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,520,,,,20',
',,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82',
',91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48',
'52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,176',
'180,185,191,196,201,205,210,,,228,231,232,235,240,,,169,172,174,182',
'187,193,197,,,211,215,221,249,252,254,256,241,242,244,168,171,173,178',
'183,189,199,203,207,246,247,248,226,340,341,255,342,,,,,,,184,190,,200',
'204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,',
'175,179,188,194,198,202,206,212,216,,225,,,237,176,180,185,191,196,201',
'205,210,,,228,231,232,235,240,,,169,172,174,182,187,193,197,,,211,215',
'221,249,252,254,256,241,242,244,168,171,173,178,183,189,199,203,207',
'246,247,248,226,,,255,,,,,,,,184,190,,200,204,214,219,,227,230,,,239',
',,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206',
'212,216,,225,,,237,176,180,185,191,196,201,205,210,,,228,231,232,235',
'240,,,169,172,174,182,187,193,197,,,211,215,221,249,252,254,256,241',
'242,244,168,171,173,178,183,189,199,203,207,246,247,248,226,340,341',
'255,342,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186',
'192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,,',
'237,176,180,185,191,196,201,205,210,,,228,231,232,235,240,,,169,172',
'174,182,187,193,197,,,211,215,221,224,229,233,236,241,242,244,168,171',
'173,178,183,189,199,203,207,213,218,223,226,70,74,234,83,,,,,,,184,190',
',200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,220,,,,,,,243',
'170,,175,179,188,194,198,202,206,212,216,,225,503,371,237,,504,,,,,',
',,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,',
',,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,,,237,299,300',
'276,279,282,285,288,290,292,294,296,,301,278,,,284,287,,,,-217,,,,,',
',,,,295,,298,,277,280,283,286,289,291,293,,297,,,,,,,576,365,,,577,',
',,,281,,-217,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186',
'192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,578',
'371,237,,579,,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177',
'181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216',
',225,604,365,237,,605,,,,,,,,184,190,,200,204,214,219,,227,230,,,239',
',,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206',
'212,216,,225,606,371,237,,607,,,,,,,,184,190,,200,204,214,219,,227,230',
',,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202',
'206,212,216,,225,891,371,237,,892,,,,,,,,184,190,,200,204,214,219,,227',
'230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198',
'202,206,212,216,,225,889,365,237,,890,,,,,,,,184,190,,200,204,214,219',
',227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188',
'194,198,202,206,212,216,,225,578,371,237,,579,,,,,,,,184,190,,200,204',
'214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175',
'179,188,194,198,202,206,212,216,,225,715,365,237,,716,,,,,,,,184,190',
',200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243',
'170,,175,179,188,194,198,202,206,212,216,,225,557,371,237,,558,,,,,',
',,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,',
',,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,,,237,299,300',
'276,279,282,285,288,290,292,294,296,,301,278,,,284,287,,,,,,,,,,,,,',
'295,,298,,277,280,283,286,289,291,293,,297,,,,,,,576,365,,,577,,,,,281',
',587,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,',
',,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,503,371,237',
',504,,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186',
'192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,554',
'365,237,,555,,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177',
'181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216',
',225,364,365,237,,366,,,,,,,,184,190,,200,204,214,219,,227,230,,,239',
',,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206',
'212,216,,225,503,371,237,,504,,,,,,,,184,190,,200,204,214,219,,227,230',
',,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202',
'206,212,216,,225,370,371,237,,372,,,,,,,,184,190,,200,204,214,219,,227',
'230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198',
'202,206,212,216,,225,503,371,237,,504,,,,,,,,184,190,,200,204,214,219',
',227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188',
'194,198,202,206,212,216,,225,503,371,237,,504,,,,,,,,184,190,,200,204',
'214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175',
'179,188,194,198,202,206,212,216,,225,,,237,299,300,276,279,282,285,288',
'290,292,294,296,,301,278,,,284,287,,,,,,,,,,,,,,295,,298,,277,280,283',
'286,289,291,293,,297,,299,300,276,279,282,285,288,290,292,294,296,,301',
'278,281,642,284,287,,,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293',
',297,299,300,276,279,282,285,288,290,292,294,296,,301,278,,281,284,287',
',,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293,,297,299,300,276',
'279,282,285,288,290,292,294,296,,301,278,,281,284,287,,,,,,,,,,,,,,295',
',298,,277,280,283,286,289,291,293,,297,299,300,276,279,282,285,288,290',
'292,294,296,,301,278,,281,284,287,,,,,,,,,,,,,,295,,298,,277,280,283',
'286,289,291,293,,297,299,300,276,279,282,285,288,290,292,294,296,,301',
'278,266,281,284,287,,,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293',
',297,299,300,276,279,282,285,288,290,292,294,296,,301,278,266,281,284',
'287,,,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293,,297,299,300',
'276,279,282,285,288,290,292,294,296,,301,278,,281,284,287,,,,,,,,,,',
',,,295,,298,,277,280,283,286,289,291,293,,297,299,300,276,279,282,285',
'288,290,292,294,296,,301,278,,281,284,287,,,,,,,,,,,,,,295,,298,,277',
'280,283,286,289,291,293,,297,299,300,276,279,282,285,288,290,292,294',
'296,,301,278,,281,284,287,,,,,,,,,,,,,,295,,298,,277,280,283,286,289',
'291,293,,297,299,300,276,279,282,285,288,290,292,294,296,,301,278,,281',
'284,287,,,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293,,297,299',
'300,276,279,282,285,288,290,292,294,296,,301,278,,281,284,287,,,,,,',
',,,,,,,295,,298,,277,280,283,286,289,291,293,,297,299,300,276,279,282',
'285,288,290,292,294,296,,301,278,,281,284,287,,,,,,,,,,,,,,295,,298',
',277,280,283,286,289,291,293,,297,299,300,276,279,282,285,288,290,292',
'294,296,,301,278,,281,284,287,,,,,,,,,,,,,,295,,298,,277,280,283,286',
'289,291,293,,297,299,300,276,279,282,285,288,290,292,294,296,,301,278',
',281,284,287,,,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293,,297',
'299,300,276,279,282,285,288,290,292,294,296,,301,278,,281,284,287,,',
',,,,,,,,,,,295,,298,,277,280,283,286,289,291,293,,297,,,,,,,,,,,,,,',
',281' ]
        racc_action_table = arr = ::Array.new(23872, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'364,348,765,631,631,730,892,364,364,364,108,417,132,364,364,105,364',
'150,569,647,41,481,561,347,1,364,347,218,41,554,848,889,8,135,218,364',
'364,848,364,364,364,364,364,331,815,324,331,558,708,693,730,730,730',
'730,481,561,647,132,569,891,307,348,348,348,364,364,364,364,364,364',
'364,364,364,364,364,364,364,364,135,150,364,364,364,535,364,636,848',
'539,364,757,631,108,554,708,635,364,757,364,105,364,364,364,364,364',
'364,364,889,364,364,364,554,108,765,417,765,8,892,765,892,32,32,892',
'364,364,812,364,67,364,558,364,554,364,417,67,67,67,757,417,67,67,67',
'889,67,889,390,693,889,693,558,385,693,692,67,67,815,324,815,324,7,815',
'324,67,67,381,67,67,67,67,67,891,307,891,307,400,891,307,634,555,557',
'535,229,535,385,539,535,539,650,229,539,111,67,67,67,67,67,67,67,67',
'67,67,67,67,67,67,390,390,67,67,67,849,386,67,619,390,67,599,849,67',
'400,67,7,67,599,67,617,67,67,67,67,67,67,67,692,67,812,67,812,339,653',
'812,555,7,127,386,381,352,616,366,67,67,67,67,692,67,366,366,366,67',
'555,557,366,366,499,366,381,849,224,655,223,499,111,599,607,224,161',
'223,604,660,555,557,579,161,366,366,159,366,366,366,366,366,111,159',
'639,639,578,792,615,339,339,339,792,79,127,127,127,352,352,352,79,499',
'613,366,366,366,366,366,366,366,366,366,366,366,366,366,366,579,604',
'366,366,366,161,366,600,604,899,366,607,600,604,578,159,899,366,612',
'366,639,366,366,366,366,366,366,366,607,366,99,366,79,99,604,233,413',
'415,335,158,335,415,233,413,366,366,158,366,607,366,667,366,607,366',
'577,577,577,604,577,213,608,156,577,577,670,899,213,577,156,577,577',
'577,577,577,577,577,856,38,856,606,577,577,577,577,577,577,577,208,19',
'462,99,99,413,253,208,158,577,253,253,577,577,577,577,577,577,577,577',
'577,577,234,577,577,552,577,577,577,234,156,38,676,462,5,38,104,462',
'462,462,462,5,19,104,333,337,19,333,577,577,337,577,577,605,577,577',
'606,577,589,577,605,577,236,577,587,605,552,847,874,236,552,577,586',
'606,847,874,577,577,577,577,577,577,36,36,584,577,577,576,576,576,5',
'576,104,606,577,576,576,606,345,580,576,345,576,576,576,576,576,576',
'576,605,841,593,593,576,576,576,576,576,576,576,721,66,573,847,874,713',
'614,721,66,576,713,614,576,576,576,576,576,576,576,576,576,576,570,576',
'576,274,576,576,576,541,541,559,541,541,541,841,841,841,841,130,419',
'696,715,418,556,42,130,699,576,576,42,576,576,716,576,576,721,576,553',
'576,716,576,428,576,702,716,274,110,110,428,274,576,645,645,546,505',
'576,576,576,576,576,576,505,505,505,576,576,505,505,505,419,505,715',
'418,576,130,890,419,542,715,418,505,419,890,715,418,372,533,890,716',
'505,505,524,505,505,505,505,505,428,732,732,876,876,419,522,715,418',
'727,709,502,727,727,727,327,327,519,502,502,502,306,306,502,502,502',
'712,502,419,372,715,418,505,372,890,370,506,502,500,505,498,717,497',
'496,505,505,502,502,489,502,502,502,502,502,727,727,727,727,435,461',
'722,435,435,435,795,488,505,795,795,795,630,487,485,630,630,630,370',
'480,734,505,370,505,735,736,505,477,502,739,465,741,461,743,473,502',
'461,461,435,641,502,502,458,750,795,435,435,435,435,753,754,795,795',
'795,795,756,455,630,630,630,630,465,502,758,447,465,465,465,465,446',
'82,82,82,464,82,502,762,502,82,82,502,429,410,82,766,82,82,82,82,82',
'82,82,406,380,373,362,82,82,82,82,82,82,82,346,464,82,776,778,464,464',
'517,781,82,336,783,82,82,82,82,82,82,82,82,82,82,330,82,82,328,82,82',
'82,517,517,517,517,517,517,517,517,517,517,517,310,517,517,309,793,517',
'517,308,82,796,797,82,801,802,82,82,805,82,275,264,517,263,517,82,517',
'517,517,517,517,517,517,82,517,814,260,817,82,82,82,82,82,82,258,162',
'824,82,82,82,517,825,517,160,82,270,270,270,270,270,827,149,832,270',
'270,147,835,145,270,144,270,270,270,270,270,270,270,143,136,134,128',
'270,270,270,270,270,270,270,121,850,270,120,116,115,113,582,270,270',
'270,270,270,270,270,270,270,270,270,270,270,270,860,270,270,112,270',
'270,270,582,582,582,582,582,582,582,582,582,582,582,863,582,582,109',
'868,582,582,869,270,870,94,270,90,81,270,270,50,270,875,270,582,47,582',
'270,582,582,582,582,582,582,582,270,582,882,43,885,270,270,270,270,270',
'270,39,24,18,270,270,16,582,893,10,3,270,809,809,809,809,809,809,900',
',,809,809,,,,809,,809,809,809,809,809,809,809,,,,,809,809,809,809,809',
'809,809,,,809,58,58,58,58,58,809,809,809,809,809,809,809,809,809,809',
'809,809,809,809,,809,809,,809,809,809,454,454,454,454,454,454,454,,',
'454,454,450,450,450,450,450,454,454,,809,,,809,,,809,809,,809,,809,454',
',454,809,454,454,454,454,454,454,454,809,454,,,,809,809,809,809,809',
'809,,,,809,809,769,769,769,769,769,769,,,,769,769,,,,769,,769,769,769',
'769,769,769,769,,,,,769,769,769,769,769,769,769,,,769,148,148,148,148',
'148,769,769,769,769,769,769,769,769,769,769,769,769,769,769,,769,769',
',769,769,769,457,457,457,457,457,457,457,,,457,457,,,,,,457,457,,769',
',,769,,,769,769,,769,,769,457,,457,769,457,457,457,457,457,457,457,769',
'457,,,,769,769,769,769,769,769,,,,769,769,770,770,770,770,770,770,,',
',770,770,,,,770,,770,770,770,770,770,770,770,,,,,770,770,770,770,770',
'770,770,,,770,,,,,,770,770,770,770,770,770,770,770,770,770,770,770,770',
'770,,770,770,,770,770,770,460,460,460,460,460,460,460,,,460,460,,,,',
',460,460,,770,,,770,,,770,770,,770,,770,460,,460,770,460,460,460,460',
'460,460,460,770,460,,,,770,770,770,770,770,770,,,,770,770,453,453,453',
'453,453,453,,,,453,453,,,,453,,453,453,453,453,453,453,453,,,,,453,453',
'453,453,453,453,453,,,453,,,,,,453,453,453,453,453,453,453,453,453,453',
'453,453,453,453,,453,453,,453,453,453,463,,,,,,,,,,,,,,,,463,463,,453',
',,453,,,453,453,,453,,453,463,,463,453,463,463,463,463,,,463,453,463',
',,,453,453,453,453,453,453,,,,453,453,738,738,738,738,738,738,,,,738',
'738,,,,738,,738,738,738,738,738,738,738,,,,,738,738,738,738,738,738',
'738,,,738,,,,,,738,738,738,738,738,738,738,738,738,738,738,738,738,738',
',738,738,,738,738,738,467,,,,,,,,,,,,,,,,467,467,,738,,,738,,,738,738',
',738,,738,467,,467,738,467,467,467,467,,,467,738,467,,,,738,738,738',
'738,738,738,,,,738,738,540,540,540,540,540,540,,,,540,540,,,,540,,540',
'540,540,540,540,540,540,,,,,540,540,540,540,540,540,540,,,540,,,,,,540',
'540,540,540,540,540,540,540,540,540,540,540,540,540,,540,540,,540,540',
'540,479,479,479,479,479,479,479,479,479,479,479,,479,479,,,479,479,',
'540,,,540,,,540,540,,540,,540,479,,479,540,479,479,479,479,479,479,479',
'540,479,,,,540,540,540,540,540,540,,,,540,540,775,775,775,775,775,775',
',,,775,775,,,,775,,775,775,775,775,775,775,775,,,,,775,775,775,775,775',
'775,775,,,775,,,,,,775,775,775,775,775,775,775,775,775,775,775,775,775',
'775,,775,775,,775,775,775,478,478,478,478,478,478,478,,,478,478,,,,',
',478,478,,775,,,775,,,775,775,,775,,775,478,,478,775,478,478,478,478',
'478,478,478,775,478,,,,775,775,775,775,775,775,,,,775,775,311,311,311',
'311,311,311,,,,311,311,,,,311,,311,311,311,311,311,311,311,,,,,311,311',
'311,311,311,311,311,,,311,,,,,,311,311,311,311,311,311,311,311,311,311',
'311,311,311,311,,311,311,,311,311,311,468,468,468,468,468,468,468,,',
'468,468,,,,,,468,468,,311,,,311,,,311,311,,311,,311,468,,468,311,468',
'468,468,468,468,468,468,311,468,,,,311,311,311,311,311,311,,,,311,311',
'302,302,302,302,302,302,,,,302,302,,,,302,,302,302,302,302,302,302,302',
',,,,302,302,302,302,302,302,302,,,302,,,,,,302,302,302,302,302,302,302',
'302,302,302,302,302,302,302,,302,302,,302,302,302,474,474,474,474,474',
'474,474,,,474,474,,,,,,474,474,,302,,,302,,,302,302,,302,,302,474,,474',
'302,474,474,474,474,474,474,474,302,474,,,,302,302,302,302,302,302,',
',,302,302,521,521,521,521,521,521,,,,521,521,,,,521,,521,521,521,521',
'521,521,521,,,,,521,521,521,521,521,521,521,,,521,,,,,,521,521,521,521',
'521,521,521,521,521,521,521,521,521,521,,521,521,,521,521,521,469,,',
',,,,,,,,,,,,,469,469,,521,,,521,,,521,521,,521,,521,469,,469,521,469',
'469,469,469,,,469,521,469,,,,521,521,521,521,521,521,,,,521,521,698',
'698,698,698,698,698,,,,698,698,,,,698,,698,698,698,698,698,698,698,',
',,,698,698,698,698,698,698,698,,,698,,,,,,698,698,698,698,698,698,698',
'698,698,698,698,698,698,698,,698,698,,698,698,698,472,472,472,472,472',
'472,472,,,472,472,,,,,,472,472,,698,,,698,,,698,698,,698,,698,472,,472',
'698,472,472,472,472,472,472,472,698,472,,,,698,698,698,698,698,698,',
',,698,698,501,501,501,501,501,501,,,,501,501,,,,501,,501,501,501,501',
'501,501,501,,,,,501,501,501,501,501,501,501,,,501,,,,,,501,501,501,501',
'501,501,501,501,501,501,501,501,501,501,,501,501,,501,501,501,466,,',
',,,,,,,,,,,,,466,466,,501,,,501,,,501,501,,501,,501,466,,466,501,466',
'466,466,466,,,466,501,466,,,,501,501,501,501,501,501,,,,501,501,624',
'624,624,624,624,624,,,,624,624,,,,624,,624,624,624,624,624,624,624,',
',,,624,624,624,624,624,624,624,,,624,,,,,,624,624,624,624,624,624,624',
'624,624,624,624,624,624,624,,624,624,,624,624,624,470,470,470,470,470',
'470,470,470,,470,470,,,,,,470,470,,624,,,624,,,624,624,,624,,624,470',
',470,624,470,470,470,470,470,470,470,624,470,,,,624,624,624,624,624',
'624,,,,624,624,265,265,265,265,265,265,,,,265,265,,,,265,,265,265,265',
'265,265,265,265,,,,,265,265,265,265,265,265,265,,,265,,,,,,265,265,265',
'265,265,265,265,265,265,265,265,265,265,265,,265,265,,265,265,265,456',
'456,456,456,456,456,456,456,456,456,456,,456,456,,,456,456,,265,,,265',
',,265,265,,265,,265,456,,456,265,456,456,456,456,456,456,456,265,456',
',,,265,265,265,265,265,265,,,,265,265,821,821,821,821,821,821,,,,821',
'821,,,,821,,821,821,821,821,821,821,821,,,,,821,821,821,821,821,821',
'821,,,821,,,,,,821,821,821,821,821,821,821,821,821,821,821,821,821,821',
',821,821,,821,821,821,471,,,,,,,,,,,,,,,,471,471,,821,,,821,,,821,821',
',821,,821,471,,471,821,471,471,471,471,,,,821,,,,,821,821,821,821,821',
'821,,,,821,821,695,695,695,695,695,695,,,,695,695,,,,695,,695,695,695',
'695,695,695,695,,,,,695,695,695,695,695,695,695,,,695,,,,,,695,695,695',
'695,695,695,695,695,695,695,695,695,695,695,,695,695,,695,695,695,476',
',,,,,,,,,,,,,,,476,476,,695,,,695,,,695,695,,695,,695,476,,,695,476',
'476,476,476,,,,695,,,,,695,695,695,695,695,695,,,,695,695,720,720,720',
'720,720,720,,,,720,720,,,,720,,720,720,720,720,720,720,720,,,,,720,720',
'720,720,720,720,720,,,720,,,,,,720,720,720,720,720,720,720,720,720,720',
'720,720,720,720,,720,720,,720,720,720,475,,,,,,,,,,,,,,,,475,475,,720',
',,720,,,720,720,,720,,720,475,,475,720,475,475,475,475,,,,720,,,,,720',
'720,720,720,720,720,,,,720,720,163,163,163,163,163,163,,,,163,163,,',
',163,,163,163,163,163,163,163,163,,,,,163,163,163,163,163,163,163,,',
'163,,,,,,163,163,163,163,163,163,163,163,163,163,163,163,163,163,,163',
'163,,163,163,163,,,,,,,,,,,,,,,,,,,,163,,,163,,,163,163,,163,,163,,',
',163,,,,,,,,163,,,,,163,163,163,163,163,163,,,,163,163,748,748,748,748',
'748,748,,,,748,748,,,,748,,748,748,748,748,748,748,748,,,,,748,748,748',
'748,748,748,748,,,748,,,,,,748,748,748,748,748,748,748,748,748,748,748',
'748,748,748,,748,748,,748,748,748,,,,,,,,,,,,,,,,,,,,748,,,748,,,748',
'748,,748,,748,,,,748,,,,,,,,748,,,,,748,748,748,748,748,748,,,,748,748',
'826,826,826,826,826,826,,,,826,826,,,,826,,826,826,826,826,826,826,826',
',,,,826,826,826,826,826,826,826,,,826,,,,,,826,826,826,826,826,826,826',
'826,826,826,826,826,826,826,,826,826,,826,826,826,,,,,,,,,,,,,,,,,,',
',826,,,826,,,826,826,,826,,826,,,,826,,,,,,,,826,,,,,826,826,826,826',
'826,826,,,,826,826,837,837,837,837,837,837,,,,837,837,,,,837,,837,837',
'837,837,837,837,837,,,,,837,837,837,837,837,837,837,,,837,,,,,,837,837',
'837,837,837,837,837,837,837,837,837,837,837,837,,837,837,,837,837,837',
',,,,,,,,,,,,,,,,,,,837,,,837,,,837,837,,837,,837,,,,837,,,,,,,,837,',
',,,837,837,837,837,837,837,,,,837,837,840,840,840,840,840,840,,,,840',
'840,,,,840,,840,840,840,840,840,840,840,,,,,840,840,840,840,840,840',
'840,,,840,,,,,,840,840,840,840,840,840,840,840,840,840,840,840,840,840',
',840,840,,840,840,840,,,,,,,,,,,,,,,,,,,,840,,,840,,,840,840,,840,,840',
',,,840,,,,,,,,840,,,,,840,840,840,840,840,840,,,,840,840,139,139,139',
'139,139,139,,,,139,139,,,,139,,139,139,139,139,139,139,139,,,,,139,139',
'139,139,139,139,139,,,139,,,,,,139,139,139,139,139,139,139,139,139,139',
'139,139,139,139,,139,139,,139,139,139,,,,,,,,,,,,,,,,,,,,139,,,139,',
',139,139,,139,,139,,,,139,,,,,,,,139,,,,,139,139,139,139,139,139,,,',
'139,139,852,852,852,852,852,852,,,,852,852,,,,852,,852,852,852,852,852',
'852,852,,,,,852,852,852,852,852,852,852,,,852,,,,,,852,852,852,852,852',
'852,852,852,852,852,852,852,852,852,,852,852,,852,852,852,,,,,,,,,,',
',,,,,,,,,852,,,852,,,852,852,,852,,852,,,,852,,,,,,,,852,,,,,852,852',
'852,852,852,852,,,,852,852,54,54,54,54,54,54,,,,54,54,,,,54,,54,54,54',
'54,54,54,54,,,,,54,54,54,54,54,54,54,,,54,,,,,,54,54,54,54,54,54,54',
'54,54,54,54,54,54,54,,54,54,,54,54,54,,,,,,,,,,,,,,,,,,,,54,,,54,,,54',
'54,,54,,54,,,,54,,,,,,,,54,,,,,54,54,54,54,54,54,,,,54,54,854,854,854',
'854,854,854,,,,854,854,,,,854,,854,854,854,854,854,854,854,,,,,854,854',
'854,854,854,854,854,,,854,,,,,,854,854,854,854,854,854,854,854,854,854',
'854,854,854,854,,854,854,,854,854,854,,,,,,,,,,,,,,,,,,,,854,,,854,',
',854,854,,854,,854,,,,854,,,,,,,,854,,,,,854,854,854,854,854,854,,,',
'854,854,483,483,483,483,483,483,,,,483,483,,,,483,,483,483,483,483,483',
'483,483,,,,,483,483,483,483,483,483,483,,,483,,,,,,483,483,483,483,483',
'483,483,483,483,483,483,483,483,483,,483,483,,483,483,483,,,,,,,,,,',
',,,,,,,,,483,,,483,,,483,483,,483,,483,,,,483,,,,,,,,483,,,,,483,483',
'483,483,483,483,,,,483,483,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,',
',,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,,2,2,2,,,',
',,,,,,,,,,,,,,,,2,,,2,,,2,2,,2,,2,,,,2,,,,,,,,2,,,,,2,2,2,2,2,2,,,,2',
'2,610,610,610,610,610,610,,,,610,610,,,,610,,610,610,610,610,610,610',
'610,,,,,610,610,610,610,610,610,610,,,610,,,,,,610,610,610,610,610,610',
'610,610,610,610,610,610,610,610,,610,610,,610,610,610,,,,,,,,,,,,,,',
',,,,,610,,,610,,,610,610,,610,,610,,,,610,,,,,,,,610,,,,,610,610,610',
'610,610,610,,,,610,610,51,51,51,,51,,,,51,51,,,,51,,51,51,51,51,51,51',
'51,,,,,51,51,51,51,51,51,51,,,,,,,,,,51,,,51,51,51,51,51,51,51,51,51',
'51,,51,51,,51,51,51,,,,,,,,,,,,,,,,,,,,51,,,51,,,51,51,,51,,51,,51,',
'51,,,,,,,,51,,,,,51,51,51,51,51,51,,,,51,51,63,63,63,,63,,,,63,63,,',
',63,,63,63,63,63,63,63,63,,,,,63,63,63,63,63,63,63,,,63,,,,,,,63,,,63',
'63,63,63,63,63,63,63,63,63,,63,63,,63,63,63,,,,,,,,,,,,,,,,,,,,63,,',
'63,,,63,63,,63,,,,,,63,,,,,,,,63,,,,,63,63,63,63,63,63,,,,63,63,60,60',
'60,,60,,,,60,60,,,,60,,60,60,60,60,60,60,60,,,,,60,60,60,60,60,60,60',
',,,,,,,,,60,,,60,60,60,60,60,60,60,60,60,60,,60,60,,60,60,60,,,,,,,',
',,,,,,,,,,,,60,,,60,60,,60,60,,60,,60,,60,,60,,,,,,,,60,,,,,60,60,60',
'60,60,60,,,,60,60,59,59,59,,59,,,,59,59,,,,59,,59,59,59,59,59,59,59',
',59,,,59,59,59,59,59,59,59,,,,,,,,,,59,,,59,59,59,59,59,59,59,59,59',
'59,,59,59,,59,59,59,,,,,,,,,,,,,,,,,,,,59,,,59,59,,59,59,,59,,59,,59',
',59,,,,,,,,59,,59,,,59,59,59,59,59,59,,,,59,59,72,72,72,,72,,,,72,72',
',,,72,,72,72,72,72,72,72,72,,,,,72,72,72,72,72,72,72,,,72,,,,,,,72,',
',72,72,72,72,72,72,72,72,72,72,,72,72,,72,72,72,,,,,,,,,,,,,,,,,,,,72',
',,72,,,72,72,,72,,,,,,72,,,,,,,,72,,,,,72,72,72,72,72,72,,,,72,72,76',
'76,76,,76,,,,76,76,,,,76,,76,76,76,76,76,76,76,,,,,76,76,76,76,76,76',
'76,,,,,,,,,,76,,,76,76,76,76,76,76,76,76,76,76,,76,76,,76,76,76,,,,',
',,,,,,,,,,,,,,,76,,,76,,,76,76,,76,,76,,,,76,,,,,,,,76,,,,,76,76,76',
'76,76,76,,,,76,76,78,78,78,,78,,,,78,78,,,,78,,78,78,78,78,78,78,78',
',78,,,78,78,78,78,78,78,78,,,,,,,,,,78,,,78,78,78,78,78,78,78,78,78',
'78,,78,78,,78,78,78,,,,,,,,,,,,,,,,,,,,78,,,78,78,,78,78,,78,,78,,78',
',78,,,,,,,,78,,78,,,78,78,78,78,78,78,,,,78,78,669,669,669,,669,,,,669',
'669,,,,669,,669,669,669,669,669,669,669,,,,,669,669,669,669,669,669',
'669,,,,,,,,,,669,,,669,669,669,669,669,669,669,669,669,669,,669,669',
',669,669,669,,,,,,,,,,,,,,,,,,,,669,,,669,,,669,669,,669,,669,,,,669',
',,,,,,,669,,,,,669,669,669,669,669,669,,,,669,669,873,873,873,,873,',
',,873,873,,,,873,,873,873,873,873,873,873,873,,,,,873,873,873,873,873',
'873,873,,,,,,,,,,873,,,873,873,873,873,873,873,873,873,873,873,,873',
'873,,873,873,873,,,,,,,,,,,,,,,,,,,,873,,,873,,,873,873,,873,,873,,',
',873,,,,,,,,873,,,,,873,873,873,873,873,873,,,,873,873,637,637,637,',
'637,,,,637,637,,,,637,,637,637,637,637,637,637,637,,,,,637,637,637,637',
'637,637,637,,,,,,,,,,637,,,637,637,637,637,637,637,637,637,637,637,',
'637,637,,637,637,637,,,,,,,,,,,,,,,,,,,,637,,,637,,,637,637,,637,,637',
',,,637,,,,,,,,637,,,,,637,637,637,637,637,637,,,,637,637,642,642,642',
',642,,,,642,642,,,,642,,642,642,642,642,642,642,642,,,,,642,642,642',
'642,642,642,642,,,,,,,,,,642,,,642,642,642,642,642,642,642,642,642,642',
',642,642,,642,642,642,,,,,,,,,,,,,,,,,,,,642,,,642,,,642,642,,642,,',
',,,642,,,,,,,,642,,,,,642,642,642,642,642,642,,,,642,642,87,87,87,,87',
',,,87,87,,,,87,,87,87,87,87,87,87,87,,,,,87,87,87,87,87,87,87,,,,,,',
',,,87,,,87,87,87,87,87,87,87,87,87,87,,87,87,,87,87,87,,,,,,,,,,,,,',
',,,,,,87,,,87,,,87,87,,87,,,,,,87,,,,,,,,87,,,,,87,87,87,87,87,87,,',
',87,87,729,729,729,,729,,,,729,729,,,,729,,729,729,729,729,729,729,729',
',,,,729,729,729,729,729,729,729,,,,,,,,,,729,,,729,729,729,729,729,729',
'729,729,729,729,,729,729,,729,729,729,,,,,,,,,,,,,,,,,,,,729,,,729,',
',729,729,,729,,,,,,729,,,,,,,,729,,,,,729,729,729,729,729,729,,,,729',
'729,6,6,6,,6,,,,6,6,,,,6,,6,6,6,6,6,6,6,,,,,6,6,6,6,6,6,6,,,,,,,,,,6',
',,6,6,6,6,6,6,6,6,6,6,,6,6,,,,6,,,,,,,,,,,,,,,,,,,,6,,,6,,,6,6,,6,,6',
',,,,,,,,,,,,,,,,6,6,6,6,6,6,,,,6,6,96,96,96,,96,,,,96,96,,,,96,,96,96',
'96,96,96,96,96,,,,,96,96,96,96,96,96,96,,,,,,,,,,96,,,96,96,96,96,96',
'96,96,96,96,96,,96,96,,,,96,,,,,,,,,,,,,,,,,,,,96,,,96,,,96,96,,96,',
',,,,,,,,,,,,,,,,,96,96,96,96,96,96,,,,96,96,97,97,97,,97,,,,97,97,,',
',97,,97,97,97,97,97,97,97,,,,,97,97,97,97,97,97,97,,,97,,,,,,,97,,,97',
'97,97,97,97,97,97,97,97,97,,97,97,,97,97,97,,,,,,,,,,,,,,,,,,,,97,,',
'97,,,97,97,,97,,,,,,97,,,,,,,,97,,,,,97,97,97,97,97,97,,,,97,97,719',
'719,719,,719,,,,719,719,,,,719,,719,719,719,719,719,719,719,,,,,719',
'719,719,719,719,719,719,,,719,,,,,,,719,,,719,719,719,719,719,719,719',
'719,719,719,,719,719,,719,719,719,,,,,,,,,,,,,,,,,,,,719,,,719,,,719',
'719,,719,,,,,,719,,,,,,,,719,,,,,719,719,719,719,719,719,,,,719,719',
'749,749,749,,749,,,,749,749,,,,749,,749,749,749,749,749,749,749,,,,',
'749,749,749,749,749,749,749,,,749,,,,,,,749,,,749,749,749,749,749,749',
'749,749,749,749,,749,749,,749,749,749,,,,,,,,,,,,,,,,,,,,749,,,749,',
',749,749,,749,,,,,,749,,,,,,,,749,,,,,749,749,749,749,749,749,,,,749',
'749,897,897,897,,897,,,,897,897,,,,897,,897,897,897,897,897,897,897',
',,,,897,897,897,897,897,897,897,,,,,,,,,,897,,,897,897,897,897,897,897',
'897,897,897,897,,897,897,,897,897,897,,,,,,,,,,,,,,,,,,,,897,,,897,',
',897,897,,897,,,,,,897,,,,,,,,897,,,,,897,897,897,897,897,897,,,,897',
'897,103,103,103,,103,,,,103,103,,,,103,,103,103,103,103,103,103,103',
',,,,103,103,103,103,103,103,103,,,,,,,,,,103,,,103,103,103,103,103,103',
'103,103,103,103,,103,103,,103,103,103,,,,,,,,,,,,,,,,,,,,103,,,103,',
',103,103,,103,,103,,,,103,,,,,,,,103,,,,,103,103,103,103,103,103,,,',
'103,103,511,511,511,,511,,,,511,511,,,,511,,511,511,511,511,511,511',
'511,,,,,511,511,511,511,511,511,511,,,,,,,,,,511,,,511,511,511,511,511',
'511,511,511,511,511,,511,511,,511,511,511,,,,,,,,,,,,,,,,,,,,511,,,511',
',,511,511,,511,,511,,,,511,,,,,,,,511,,,,,511,511,511,511,511,511,,',
',511,511,514,514,514,,514,,,,514,514,,,,514,,514,514,514,514,514,514',
'514,,,,,514,514,514,514,514,514,514,,,,,,,,,,514,,,514,514,514,514,514',
'514,514,514,514,514,,514,514,,514,514,514,,,,,,,,,,,,,,,,,,,,514,,,514',
',,514,514,,514,,,,,,514,,,,,,,,514,,,,,514,514,514,514,514,514,,,,514',
'514,11,11,11,,11,,,,11,11,,,,11,,11,11,11,11,11,11,11,,,,,11,11,11,11',
'11,11,11,,,,,,,,,,11,,,11,11,11,11,11,11,11,11,11,11,,11,11,,11,11,11',
',,,,,,,,,,,,,,,,,,,11,,,11,,,11,11,,11,,11,,11,,11,,,,,,,,11,,,,,11',
'11,11,11,11,11,,,,11,11,865,865,865,,865,,,,865,865,,,,865,,865,865',
'865,865,865,865,865,,,,,865,865,865,865,865,865,865,,,,,,,,,,865,,,865',
'865,865,865,865,865,865,865,865,865,,865,865,,865,865,865,,,,,,,,,,',
',,,,,,,,,865,,,865,,,865,865,,865,,,,,,865,,,,,,,,865,,,,,865,865,865',
'865,865,865,,,,865,865,452,452,452,,452,,,,452,452,,,,452,,452,452,452',
'452,452,452,452,,,,,452,452,452,452,452,452,452,,,,,,,,,,452,,,452,452',
'452,452,452,452,452,452,452,452,,452,452,,452,452,452,,,,,,,,,,,,,,',
',,,,,452,,,452,,,452,452,,452,,,,,,452,,,,,,,,452,,,,,452,452,452,452',
'452,452,,,,452,452,449,449,449,,449,,,,449,449,,,,449,,449,449,449,449',
'449,449,449,,,,,449,449,449,449,449,449,449,,,449,,,,,,,449,,,449,449',
'449,449,449,449,449,449,449,449,,449,449,,449,449,449,,,,,,,,,,,,,,',
',,,,,449,,,449,,,449,449,,449,,,,,,449,,,,,,,,449,,,,,449,449,449,449',
'449,449,,,,449,449,862,862,862,,862,,,,862,862,,,,862,,862,862,862,862',
'862,862,862,,,,,862,862,862,862,862,862,862,,,,,,,,,,862,,,862,862,862',
'862,862,862,862,862,862,862,,862,862,,862,862,862,,,,,,,,,,,,,,,,,,',
',862,,,862,,,862,862,,862,,,,,,862,,,,,,,,862,,,,,862,862,862,862,862',
'862,,,,862,862,857,857,857,,857,,,,857,857,,,,857,,857,857,857,857,857',
'857,857,,,,,857,857,857,857,857,857,857,,,,,,,,,,857,,,857,857,857,857',
'857,857,857,857,857,857,,857,857,,857,857,857,,,,,,,,,,,,,,,,,,,,857',
',,857,,,857,857,,857,,,,,,857,,,,,,,,857,,,,,857,857,857,857,857,857',
',,,857,857,445,445,445,,445,,,,445,445,,,,445,,445,445,445,445,445,445',
'445,,,,,445,445,445,445,445,445,445,,,,,,,,,,445,,,445,445,445,445,445',
'445,445,445,445,445,,445,445,,445,445,445,,,,,,,,,,,,,,,,,,,,445,,,445',
',,445,445,,445,,,,,,445,,,,,,,,445,,,,,445,445,445,445,445,445,,,,445',
'445,56,56,56,,56,,,,56,56,,,,56,,56,56,56,56,56,56,56,,,,,56,56,56,56',
'56,56,56,,,,,,,,,,56,,,56,56,56,56,56,56,56,56,56,56,,56,56,,56,56,56',
',,,,,,,,,,,,,,,,,,,56,,,56,56,,56,56,,56,,56,,56,,56,,,,,,,,56,,,,,56',
'56,56,56,56,56,,,,56,56,53,53,53,,53,,,,53,53,,,,53,,53,53,53,53,53',
'53,53,,,,,53,53,53,53,53,53,53,,,53,,,,,,,53,,,53,53,53,53,53,53,53',
'53,53,53,,53,53,,53,53,53,,,,,,,,,,,,,,,,,,,,53,,,53,,,53,53,,53,,,',
',,53,,,,,,,,53,,,,,53,53,53,53,53,53,,,,53,53,596,596,596,,596,,,,596',
'596,,,,596,,596,596,596,596,596,596,596,,,,,596,596,596,596,596,596',
'596,,,,,,,,,,596,,,596,596,596,596,596,596,596,596,596,596,,596,596',
',596,596,596,,,,,,,,,,,,,,,,,,,,596,,,596,,,596,596,,596,,596,,,,596',
',,,,,,,596,,,,,596,596,596,596,596,596,,,,596,596,124,124,124,,124,',
',,124,124,,,,124,,124,124,124,124,124,124,124,,,,,124,124,124,124,124',
'124,124,,,,,,,,,,124,,,124,124,124,124,124,124,124,124,124,124,,124',
'124,,124,124,124,,,,,,,,,,,,,,,,,,,,124,,,124,,,124,124,,124,,124,,124',
',124,,,,,,,,124,,,,,124,124,124,124,124,124,,,,124,124,444,444,444,',
'444,,,,444,444,,,,444,,444,444,444,444,444,444,444,,,,,444,444,444,444',
'444,444,444,,,,,,,,,,444,,,444,444,444,444,444,444,444,444,444,444,',
'444,444,,444,444,444,,,,,,,,,,,,,,,,,,,,444,,,444,,,444,444,,444,,,',
',,444,,,,,,,,444,,,,,444,444,444,444,444,444,,,,444,444,437,437,437',
'437,437,437,437,437,,,437,437,437,437,437,,,437,437,437,437,437,437',
'437,,,437,437,437,437,437,437,437,437,437,437,437,437,437,437,437,437',
'437,437,437,437,437,437,437,,,437,,,,,,,,437,437,,437,437,437,437,,437',
'437,,,437,,,,,437,437,437,437,,,,,,,,,,,,,437,437,,437,437,437,437,437',
'437,437,437,437,,437,,,437,437,,,436,436,436,,436,,,437,436,436,,,,436',
',436,436,436,436,436,436,436,,,,,436,436,436,436,436,436,436,,,436,',
',,,,,436,,,436,436,436,436,436,436,436,436,436,436,,436,436,,436,436',
'436,,,,,,,,,,,,,,,,,,,,436,,,436,,,436,436,,436,,,,,,436,,,,,,,,436',
',,,,436,436,436,436,436,436,,,,436,436,131,131,131,,131,,,,131,131,',
',,131,,131,131,131,131,131,131,131,,,,,131,131,131,131,131,131,131,',
',,,,,,,,131,,,131,131,131,131,131,131,131,131,131,131,,131,131,,131',
'131,131,,,,,,,,,,,,,,,,,,,,131,,,131,,,131,131,,131,,,,,,131,,,,,,,',
'131,,,,,131,131,131,131,131,131,,,,131,131,591,591,591,,591,,,,591,591',
',,,591,,591,591,591,591,591,591,591,,,,,591,591,591,591,591,591,591',
',,,,,,,,,591,,,591,591,591,591,591,591,591,591,591,591,,591,591,,591',
'591,591,,,,,,,,,,,,,,,,,,,,591,,,591,,,591,591,,591,,,,,,591,,,,,,,',
'591,,,,,591,591,591,591,591,591,,,,591,591,710,710,710,,710,,,,710,710',
',,,710,,710,710,710,710,710,710,710,,,,,710,710,710,710,710,710,710',
',,,,,,,,,710,,,710,710,710,710,710,710,710,710,710,710,,710,710,,710',
'710,710,,,,,,,,,,,,,,,,,,,,710,,,710,,,710,710,,710,,710,,710,,710,',
',,,,,,710,,,,,710,710,710,710,710,710,,,,710,710,21,21,21,,21,,,,21',
'21,,,,21,,21,21,21,21,21,21,21,,,,,21,21,21,21,21,21,21,,,,,,,,,,21',
',,21,21,21,21,21,21,21,21,21,21,,21,21,,,,21,,,,,,,,,,,,,,,,,,,,21,',
',21,,,21,21,,21,,21,,,,,,,,,,,,,,,,,21,21,21,21,21,21,,,,21,21,520,520',
'520,,520,,,,520,520,,,,520,,520,520,520,520,520,520,520,,,,,520,520',
'520,520,520,520,520,,,,,,,,,,520,,,520,520,520,520,520,520,520,520,520',
'520,,520,520,,520,520,520,,,,,,,,,,,,,,,,,,,,520,,,520,,,520,520,,520',
',,,,,520,,,,,,,,520,,,,,520,520,520,520,520,520,,,,520,520,426,426,426',
',426,,,,426,426,,,,426,,426,426,426,426,426,426,426,,,,,426,426,426',
'426,426,426,426,,,,,,,,,,426,,,426,426,426,426,426,426,426,426,426,426',
',426,426,,426,426,426,,,,,,,,,,,,,,,,,,,,426,,,426,,,426,426,,426,,426',
',,,426,,,,,,,,426,,,,,426,426,426,426,426,426,,,,426,426,61,61,61,,61',
',,,61,61,,,,61,,61,61,61,61,61,61,61,,,,,61,61,61,61,61,61,61,,,,,,',
',,,61,,,61,61,61,61,61,61,61,61,61,61,,61,61,,61,61,61,,,,,,,,,,,,,',
',,,,,,61,,,61,,,61,61,,61,,,,,,61,,,,,,,,61,,,,,61,61,61,61,61,61,,',
',61,61,141,141,141,,141,,,,141,141,,,,141,,141,141,141,141,141,141,141',
',,,,141,141,141,141,141,141,141,,,,,,,,,,141,,,141,141,141,141,141,141',
'141,141,141,141,,141,141,,141,141,141,,,,,,,,,,,,,,,,,,,,141,,,141,',
',141,141,,141,,,,,,141,,,,,,,,141,,,,,141,141,141,141,141,141,,,,141',
'141,665,665,665,,665,,,,665,665,,,,665,,665,665,665,665,665,665,665',
',,,,665,665,665,665,665,665,665,,,,,,,,,,665,,,665,665,665,665,665,665',
'665,665,665,665,,665,665,,665,665,665,,,,,,,,,,,,,,,,,,,,665,,,665,',
',665,665,,665,,665,,,,665,,,,,,,,665,,,,,665,665,665,665,665,665,,,',
'665,665,664,664,664,,664,,,,664,664,,,,664,,664,664,664,664,664,664',
'664,,,,,664,664,664,664,664,664,664,,,,,,,,,,664,,,664,664,664,664,664',
'664,664,664,664,664,,664,664,,664,664,664,,,,,,,,,,,,,,,,,,,,664,,,664',
',,664,664,,664,,,,,,664,,,,,,,,664,,,,,664,664,664,664,664,664,,,,664',
'664,14,14,14,14,14,,,,14,14,,,,14,,14,14,14,14,14,14,14,,,,,14,14,14',
'14,14,14,14,,,14,,,,,,14,14,14,14,14,14,14,14,14,14,14,14,14,14,,14',
'14,,14,14,14,,,,,,,,,,,,,,,,,,,,14,,,14,,,14,14,,14,,14,,,,14,,,,,,',
',14,,,,,14,14,14,14,14,14,,,,14,14,146,146,146,,146,,,,146,146,,,,146',
',146,146,146,146,146,146,146,,,,,146,146,146,146,146,146,146,,,,,,,',
',,146,,,146,146,146,146,146,146,146,146,146,146,,146,146,,146,146,146',
',,,,,,,,,,,,,,,,,,,146,,,146,,,146,146,,146,,,,,,146,,,,,,,,146,,,,',
'146,146,146,146,146,146,,,,146,146,833,833,833,,833,,,,833,833,,,,833',
',833,833,833,833,833,833,833,,,,,833,833,833,833,833,833,833,,,,,,,',
',,833,,,833,833,833,833,833,833,833,833,833,833,,833,833,,833,833,833',
',,,,,,,,,,,,,,,,,,,833,,,833,,,833,833,,833,,833,,833,,833,,,,,,,,833',
',,,,833,833,833,833,833,833,,,,833,833,585,585,585,,585,,,,585,585,',
',,585,,585,585,585,585,585,585,585,,,,,585,585,585,585,585,585,585,',
',,,,,,,,585,,,585,585,585,585,585,585,585,585,585,585,,585,585,,585',
'585,585,,,,,,,,,,,,,,,,,,,,585,,,585,,,585,585,,585,,,,,,585,,,,,,,',
'585,,,,,585,585,585,585,585,585,,,,585,585,830,830,830,,830,,,,830,830',
',,,830,,830,830,830,830,830,830,830,,,,,830,830,830,830,830,830,830',
',,,,,,,,,830,,,830,830,830,830,830,830,830,830,830,830,,830,830,,830',
'830,830,,,,,,,,,,,,,,,,,,,,830,,,830,,,830,830,,830,,830,,830,,830,',
',,,,,,830,,,,,830,830,830,830,830,830,,,,830,830,707,707,707,,707,,',
',707,707,,,,707,,707,707,707,707,707,707,707,,,,,707,707,707,707,707',
'707,707,,,,,,,,,,707,,,707,707,707,707,707,707,707,707,707,707,,707',
'707,,707,707,707,,,,,,,,,,,,,,,,,,,,707,,,707,,,707,707,,707,,,,,,707',
',,,,,,,707,,,,,707,707,707,707,707,707,,,,707,707,154,154,154,,154,',
',,154,154,,,,154,,154,154,154,154,154,154,154,,,,,154,154,154,154,154',
'154,154,,,,,,,,,,154,,,154,154,154,154,154,154,154,154,154,154,,154',
'154,,,,154,,,,,,,,,,,,,,,,,,,,154,,,154,,,154,154,,154,,,,,,,,,,,,,',
',,,,,154,154,154,154,154,154,,,,154,154,155,155,155,,155,,,,155,155',
',,,155,,155,155,155,155,155,155,155,,,,,155,155,155,155,155,155,155',
',,,,,,,,,155,,,155,155,155,155,155,155,155,155,155,155,,155,155,,155',
'155,155,,,,,,,,,,,,,,,,,,,,155,,,155,,,155,155,,155,,,,,,155,,,,,,,',
'155,,,,,155,155,155,155,155,155,,,,155,155,412,412,412,,412,,,,412,412',
',,,412,,412,412,412,412,412,412,412,,,,,412,412,412,412,412,412,412',
',,412,,,,,,,412,,,412,412,412,412,412,412,412,412,412,412,,412,412,',
'412,412,412,,,,,,,,,,,,,,,,,,,,412,,,412,,,412,412,,412,,,,,,412,,,',
',,,,412,,,,,412,412,412,412,412,412,,,,412,412,407,407,407,,407,,,,407',
'407,,,,407,,407,407,407,407,407,407,407,,,,,407,407,407,407,407,407',
'407,,,,,,,,,,407,,,407,407,407,407,407,407,407,407,407,407,,407,407',
',407,407,407,,,,,,,,,,,,,,,,,,,,407,,,407,,,407,407,,407,,407,,407,',
'407,,,,,,,,407,,,,,407,407,407,407,407,407,,,,407,407,691,691,691,,691',
',,,691,691,,,,691,,691,691,691,691,691,691,691,,,,,691,691,691,691,691',
'691,691,,,,,,,,,,691,,,691,691,691,691,691,691,691,691,691,691,,691',
'691,,691,691,691,,,,,,,,,,,,,,,,,,,,691,,,691,,,691,691,,691,,,,,,691',
',,,,,,,691,,,,,691,691,691,691,691,691,,,,691,691,767,767,767,,767,',
',,767,767,,,,767,,767,767,767,767,767,767,767,,,,,767,767,767,767,767',
'767,767,,,,,,,,,,767,,,767,767,767,767,767,767,767,767,767,767,,767',
'767,,767,767,767,,,,,,,,,,,,,,,,,,,,767,,,767,,,767,767,,767,,,,,,767',
',,,,,,,767,,,,,767,767,767,767,767,767,,,,767,767,883,883,883,,883,',
',,883,883,,,,883,,883,883,883,883,883,883,883,,,,,883,883,883,883,883',
'883,883,,,,,,,,,,883,,,883,883,883,883,883,883,883,883,883,883,,883',
'883,,883,883,883,,,,,,,,,,,,,,,,,,,,883,,,883,,,883,883,,883,,883,,883',
',883,,,,,,,,883,,,,,883,883,883,883,883,883,,,,883,883,822,822,822,',
'822,,,,822,822,,,,822,,822,822,822,822,822,822,822,,,,,822,822,822,822',
'822,822,822,,,,,,,,,,822,,,822,822,822,822,822,822,822,822,822,822,',
'822,822,,822,822,822,,,,,,,,,,,,,,,,,,,,822,,,822,,,822,822,,822,,822',
',,,822,,,,,,,,822,,,,,822,822,822,822,822,822,,,,822,822,662,662,662',
',662,,,,662,662,,,,662,,662,662,662,662,662,662,662,,,,,662,662,662',
'662,662,662,662,,,,,,,,,,662,,,662,662,662,662,662,662,662,662,662,662',
',662,662,,662,662,662,,,,,,,,,,,,,,,,,,,,662,,,662,,,662,662,,662,,',
',,,662,,,,,,,,662,,,,,662,662,662,662,662,662,,,,662,662,164,164,164',
',164,,,,164,164,,,,164,,164,164,164,164,164,164,164,,,,,164,164,164',
'164,164,164,164,,,,,,,,,,164,,,164,164,164,164,164,164,164,164,164,164',
',164,164,,,,164,,,,,,,,,,,,,,,,,,,,164,,,164,,,164,164,,164,,,,,,,,',
',,,,,,,,,,164,164,164,164,164,164,,,,164,164,165,165,165,,165,,,,165',
'165,,,,165,,165,165,165,165,165,165,165,,,,,165,165,165,165,165,165',
'165,,,,,,,,,,165,,,165,165,165,165,165,165,165,165,165,165,,165,165',
',,,165,,,,,,,,,,,,,,,,,,,,165,,,165,,,165,165,,165,,,,,,,,,,,,,,,,,',
',165,165,165,165,165,165,,,,165,165,654,654,654,,654,,,,654,654,,,,654',
',654,654,654,654,654,654,654,,,,,654,654,654,654,654,654,654,,,,,,,',
',,654,,,654,654,654,654,654,654,654,654,654,654,,654,654,,654,654,654',
',,,,,,,,,,,,,,,,,,,654,,,654,,,654,654,,654,,654,,654,,654,,,,,,,,654',
',,,,654,654,654,654,654,654,,,,654,654,405,405,405,,405,,,,405,405,',
',,405,,405,405,405,405,405,405,405,,,,,405,405,405,405,405,405,405,',
',,,,,,,,405,,,405,405,405,405,405,405,405,405,405,405,,405,405,,405',
'405,405,,,,,,,,,,,,,,,,,,,,405,,,405,,,405,405,,405,,,,,,405,,,,,,,',
'405,,,,,405,405,405,405,405,405,,,,405,405,572,572,572,,572,,,,572,572',
',,,572,,572,572,572,572,572,572,572,,,,,572,572,572,572,572,572,572',
',,,,,,,,,572,,,572,572,572,572,572,572,572,572,572,572,,572,572,,572',
'572,572,,,,,,,,,,,,,,,,,,,,572,,,572,,,572,572,,572,,,,,,572,,,,,,,',
'572,,,,,572,572,572,572,572,572,,,,572,572,403,403,403,,403,,,,403,403',
',,,403,,403,403,403,403,403,403,403,,,,,403,403,403,403,403,403,403',
',,,,,,,,,403,,,403,403,403,403,403,403,403,403,403,403,,403,403,,403',
'403,403,,,,,,,,,,,,,,,,,,,,403,,,403,,,403,403,,403,,403,,403,,403,',
',,,,,,403,,,,,403,403,403,403,403,403,,,,403,403,401,401,401,,401,,',
',401,401,,,,401,,401,401,401,401,401,401,401,,,,,401,401,401,401,401',
'401,401,,,,,,,,,,401,,,401,401,401,401,401,401,401,401,401,401,,401',
'401,,401,401,401,,,,,,,,,,,,,,,,,,,,401,,,401,,,401,401,,401,,,,,,401',
',,,,,,,401,,,,,401,401,401,401,401,401,,,,401,401,564,564,564,,564,',
',,564,564,,,,564,,564,564,564,564,564,564,564,,,,,564,564,564,564,564',
'564,564,,,,,,,,,,564,,,564,564,564,564,564,564,564,564,564,564,,564',
'564,,,,564,,,,,,,,,,,,,,,,,,,,564,,,564,,,564,564,,564,,564,,,,,,,,',
',,564,,,,,,564,564,564,564,564,564,,,,564,564,560,560,560,,560,,,,560',
'560,,,,560,,560,560,560,560,560,560,560,,,,,560,560,560,560,560,560',
'560,,,560,,,,,,,560,,,560,560,560,560,560,560,560,560,560,560,,560,560',
',560,560,560,,,,,,,,,,,,,,,,,,,,560,,,560,,,560,560,,560,,,,,,560,,',
',,,,,560,,,,,560,560,560,560,560,560,,,,560,560,527,527,527,,527,,,',
'527,527,,,,527,,527,527,527,527,527,527,527,,,,,527,527,527,527,527',
'527,527,,,,,,,,,,527,,,527,527,527,527,527,527,527,527,527,527,,527',
'527,,527,527,527,,,,,,,,,,,,,,,,,,,,527,,,527,,,527,527,,527,,,,,,527',
',,,,,,,527,,,,,527,527,527,527,527,527,,,,527,527,399,399,399,,399,',
',,399,399,,,,399,,399,399,399,399,399,399,399,,,,,399,399,399,399,399',
'399,399,,,,,,,,,,399,,,399,399,399,399,399,399,399,399,399,399,,399',
'399,,399,399,399,,,,,,,,,,,,,,,,,,,,399,,,399,,,399,399,,399,,,,,,399',
',,,,,,,399,,,,,399,399,399,399,399,399,,,,399,399,398,398,398,,398,',
',,398,398,,,,398,,398,398,398,398,398,398,398,,,,,398,398,398,398,398',
'398,398,,,,,,,,,,398,,,398,398,398,398,398,398,398,398,398,398,,398',
'398,,398,398,398,,,,,,,,,,,,,,,,,,,,398,,,398,,,398,398,,398,,,,,,398',
',,,,,,,398,,,,,398,398,398,398,398,398,,,,398,398,396,396,396,,396,',
',,396,396,,,,396,,396,396,396,396,396,396,396,,,,,396,396,396,396,396',
'396,396,,,,,,,,,,396,,,396,396,396,396,396,396,396,396,396,396,,396',
'396,,396,396,396,,,,,,,,,,,,,,,,,,,,396,,,396,,,396,396,,396,,396,,',
',396,,,,,,,,396,,,,,396,396,396,396,396,396,,,,396,396,389,389,389,',
'389,,,,389,389,,,,389,,389,389,389,389,389,389,389,,,,,389,389,389,389',
'389,389,389,,,389,,,,,,,389,,,389,389,389,389,389,389,389,389,389,389',
',389,389,,389,389,389,,,,,,,,,,,,,,,,,,,,389,,,389,,,389,389,,389,,389',
',389,,389,,,,,,,,389,,,,,389,389,389,389,389,389,,,,389,389,706,706',
'706,,706,,,,706,706,,,,706,,706,706,706,706,706,706,706,,,,,706,706',
'706,706,706,706,706,,,,,,,,,,706,,,706,706,706,706,706,706,706,706,706',
'706,,706,706,,706,706,706,,,,,,,,,,,,,,,,,,,,706,,,706,,,706,706,,706',
',,,,,706,,,,,,,,706,,,,,706,706,706,706,706,706,,,,706,706,261,261,261',
',261,,,,261,261,,,,261,,261,261,261,261,261,261,261,,,,,261,261,261',
'261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261,261,261,261,261',
'261,,261,261,,261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,261',
',,,,,261,,,,,,,,261,,,,,261,261,261,261,261,261,,,,261,261,262,262,262',
',262,,,,262,262,,,,262,,262,262,262,262,262,262,262,,,,,262,262,262',
'262,262,262,262,,,262,,,,,,,262,,,262,262,262,262,262,262,262,262,262',
'262,,262,262,,262,262,262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262,,262',
',,,,,262,,,,,,,,262,,,,,262,262,262,262,262,262,,,,262,262,17,17,17',
',17,,,,17,17,,,,17,,17,17,17,17,17,17,17,,,,,17,17,17,17,17,17,17,,',
',,,,,,,17,,,17,17,17,17,17,17,17,17,17,17,,17,17,,17,17,17,,,,,,,,,',
',,,,,,,,,,17,,,17,,,17,17,,17,,17,,17,,17,,,,,,,,17,,,,,17,17,17,17',
'17,17,,,,17,17,811,811,811,,811,,,,811,811,,,,811,,811,811,811,811,811',
'811,811,,,,,811,811,811,811,811,811,811,,,,,,,,,,811,,,811,811,811,811',
'811,811,811,811,811,811,,811,811,,,,811,,,,,,,,,,,,,,,,,,,,811,,,811',
',,811,811,,811,,,,,,,,,,,,,,,,,,,811,811,811,811,811,811,,,,811,811',
'376,376,376,,376,,,,376,376,,,,376,,376,376,376,376,376,376,376,,,,',
'376,376,376,376,376,376,376,,,,,,,,,,376,,,376,376,376,376,376,376,376',
'376,376,376,,376,376,,376,376,376,,,,,,,,,,,,,,,,,,,,376,,,376,,,376',
'376,,376,,376,,,,376,,,,,,,,376,,,,,376,376,376,376,376,376,,,,376,376',
'267,267,267,,267,,,,267,267,,,,267,,267,267,267,267,267,267,267,,,,',
'267,267,267,267,267,267,267,,,,,,,,,,267,,,267,267,267,267,267,267,267',
'267,267,267,,267,267,,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,267,',
'267,267,,267,,,,,,267,,,,,,,,267,,,,,267,267,267,267,267,267,,,,267',
'267,31,31,31,31,31,31,31,31,,,31,31,31,31,31,,,31,31,31,31,31,31,31',
',,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31',
'31,,,31,,,,,,,,31,31,,31,31,31,31,,31,31,,,31,,,,,31,31,31,31,,,,,,',
',,,,,,31,31,,31,31,31,31,31,31,31,31,31,,31,,,31,31,,,30,30,30,,30,',
',31,30,30,,,,30,,30,30,30,30,30,30,30,,,,,30,30,30,30,30,30,30,,,,,',
',,,,30,,,30,30,30,30,30,30,30,30,30,30,,30,30,,30,30,30,,,,,,,,,,,,',
',,,,,,,30,,,30,,,30,30,,30,,,,,,30,,,,,,,,30,,,,,30,30,30,30,30,30,',
',,30,30,29,29,29,29,29,29,29,29,,,29,29,29,29,29,,,29,29,29,29,29,29',
'29,,,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29',
'29,29,29,,29,,,,,,,,29,29,,29,29,29,29,,29,29,,,29,,,,,29,29,29,29,',
',,,,,,,,,,,29,29,,29,29,29,29,29,29,29,29,29,,29,,,29,29,,,276,276,276',
',276,,,29,276,276,,,,276,,276,276,276,276,276,276,276,,,,,276,276,276',
'276,276,276,276,,,,,,,,,,276,,,276,276,276,276,276,276,276,276,276,276',
',276,276,,276,276,276,,,,,,,,,,,,,,,,,,,,276,,,276,,,276,276,,276,,',
',,,276,,,,,,,,276,,,,,276,276,276,276,276,276,,,,276,276,277,277,277',
',277,,,,277,277,,,,277,,277,277,277,277,277,277,277,,,,,277,277,277',
'277,277,277,277,,,,,,,,,,277,,,277,277,277,277,277,277,277,277,277,277',
',277,277,,277,277,277,,,,,,,,,,,,,,,,,,,,277,,,277,,,277,277,,277,,',
',,,277,,,,,,,,277,,,,,277,277,277,277,277,277,,,,277,277,278,278,278',
',278,,,,278,278,,,,278,,278,278,278,278,278,278,278,,,,,278,278,278',
'278,278,278,278,,,,,,,,,,278,,,278,278,278,278,278,278,278,278,278,278',
',278,278,,278,278,278,,,,,,,,,,,,,,,,,,,,278,,,278,,,278,278,,278,,',
',,,278,,,,,,,,278,,,,,278,278,278,278,278,278,,,,278,278,279,279,279',
',279,,,,279,279,,,,279,,279,279,279,279,279,279,279,,,,,279,279,279',
'279,279,279,279,,,,,,,,,,279,,,279,279,279,279,279,279,279,279,279,279',
',279,279,,279,279,279,,,,,,,,,,,,,,,,,,,,279,,,279,,,279,279,,279,,',
',,,279,,,,,,,,279,,,,,279,279,279,279,279,279,,,,279,279,280,280,280',
',280,,,,280,280,,,,280,,280,280,280,280,280,280,280,,,,,280,280,280',
'280,280,280,280,,,,,,,,,,280,,,280,280,280,280,280,280,280,280,280,280',
',280,280,,280,280,280,,,,,,,,,,,,,,,,,,,,280,,,280,,,280,280,,280,,',
',,,280,,,,,,,,280,,,,,280,280,280,280,280,280,,,,280,280,281,281,281',
',281,,,,281,281,,,,281,,281,281,281,281,281,281,281,,,,,281,281,281',
'281,281,281,281,,,,,,,,,,281,,,281,281,281,281,281,281,281,281,281,281',
',281,281,,281,281,281,,,,,,,,,,,,,,,,,,,,281,,,281,,,281,281,,281,,',
',,,281,,,,,,,,281,,,,,281,281,281,281,281,281,,,,281,281,282,282,282',
',282,,,,282,282,,,,282,,282,282,282,282,282,282,282,,,,,282,282,282',
'282,282,282,282,,,,,,,,,,282,,,282,282,282,282,282,282,282,282,282,282',
',282,282,,282,282,282,,,,,,,,,,,,,,,,,,,,282,,,282,,,282,282,,282,,',
',,,282,,,,,,,,282,,,,,282,282,282,282,282,282,,,,282,282,283,283,283',
',283,,,,283,283,,,,283,,283,283,283,283,283,283,283,,,,,283,283,283',
'283,283,283,283,,,,,,,,,,283,,,283,283,283,283,283,283,283,283,283,283',
',283,283,,283,283,283,,,,,,,,,,,,,,,,,,,,283,,,283,,,283,283,,283,,',
',,,283,,,,,,,,283,,,,,283,283,283,283,283,283,,,,283,283,284,284,284',
',284,,,,284,284,,,,284,,284,284,284,284,284,284,284,,,,,284,284,284',
'284,284,284,284,,,,,,,,,,284,,,284,284,284,284,284,284,284,284,284,284',
',284,284,,284,284,284,,,,,,,,,,,,,,,,,,,,284,,,284,,,284,284,,284,,',
',,,284,,,,,,,,284,,,,,284,284,284,284,284,284,,,,284,284,285,285,285',
',285,,,,285,285,,,,285,,285,285,285,285,285,285,285,,,,,285,285,285',
'285,285,285,285,,,,,,,,,,285,,,285,285,285,285,285,285,285,285,285,285',
',285,285,,285,285,285,,,,,,,,,,,,,,,,,,,,285,,,285,,,285,285,,285,,',
',,,285,,,,,,,,285,,,,,285,285,285,285,285,285,,,,285,285,286,286,286',
',286,,,,286,286,,,,286,,286,286,286,286,286,286,286,,,,,286,286,286',
'286,286,286,286,,,,,,,,,,286,,,286,286,286,286,286,286,286,286,286,286',
',286,286,,286,286,286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286,286,,286,,',
',,,286,,,,,,,,286,,,,,286,286,286,286,286,286,,,,286,286,287,287,287',
',287,,,,287,287,,,,287,,287,287,287,287,287,287,287,,,,,287,287,287',
'287,287,287,287,,,,,,,,,,287,,,287,287,287,287,287,287,287,287,287,287',
',287,287,,287,287,287,,,,,,,,,,,,,,,,,,,,287,,,287,,,287,287,,287,,',
',,,287,,,,,,,,287,,,,,287,287,287,287,287,287,,,,287,287,288,288,288',
',288,,,,288,288,,,,288,,288,288,288,288,288,288,288,,,,,288,288,288',
'288,288,288,288,,,,,,,,,,288,,,288,288,288,288,288,288,288,288,288,288',
',288,288,,288,288,288,,,,,,,,,,,,,,,,,,,,288,,,288,,,288,288,,288,,',
',,,288,,,,,,,,288,,,,,288,288,288,288,288,288,,,,288,288,289,289,289',
',289,,,,289,289,,,,289,,289,289,289,289,289,289,289,,,,,289,289,289',
'289,289,289,289,,,,,,,,,,289,,,289,289,289,289,289,289,289,289,289,289',
',289,289,,289,289,289,,,,,,,,,,,,,,,,,,,,289,,,289,,,289,289,,289,,',
',,,289,,,,,,,,289,,,,,289,289,289,289,289,289,,,,289,289,290,290,290',
',290,,,,290,290,,,,290,,290,290,290,290,290,290,290,,,,,290,290,290',
'290,290,290,290,,,,,,,,,,290,,,290,290,290,290,290,290,290,290,290,290',
',290,290,,290,290,290,,,,,,,,,,,,,,,,,,,,290,,,290,,,290,290,,290,,',
',,,290,,,,,,,,290,,,,,290,290,290,290,290,290,,,,290,290,291,291,291',
',291,,,,291,291,,,,291,,291,291,291,291,291,291,291,,,,,291,291,291',
'291,291,291,291,,,,,,,,,,291,,,291,291,291,291,291,291,291,291,291,291',
',291,291,,291,291,291,,,,,,,,,,,,,,,,,,,,291,,,291,,,291,291,,291,,',
',,,291,,,,,,,,291,,,,,291,291,291,291,291,291,,,,291,291,292,292,292',
',292,,,,292,292,,,,292,,292,292,292,292,292,292,292,,,,,292,292,292',
'292,292,292,292,,,,,,,,,,292,,,292,292,292,292,292,292,292,292,292,292',
',292,292,,292,292,292,,,,,,,,,,,,,,,,,,,,292,,,292,,,292,292,,292,,',
',,,292,,,,,,,,292,,,,,292,292,292,292,292,292,,,,292,292,293,293,293',
',293,,,,293,293,,,,293,,293,293,293,293,293,293,293,,,,,293,293,293',
'293,293,293,293,,,,,,,,,,293,,,293,293,293,293,293,293,293,293,293,293',
',293,293,,293,293,293,,,,,,,,,,,,,,,,,,,,293,,,293,,,293,293,,293,,',
',,,293,,,,,,,,293,,,,,293,293,293,293,293,293,,,,293,293,294,294,294',
',294,,,,294,294,,,,294,,294,294,294,294,294,294,294,,,,,294,294,294',
'294,294,294,294,,,,,,,,,,294,,,294,294,294,294,294,294,294,294,294,294',
',294,294,,294,294,294,,,,,,,,,,,,,,,,,,,,294,,,294,,,294,294,,294,,',
',,,294,,,,,,,,294,,,,,294,294,294,294,294,294,,,,294,294,295,295,295',
',295,,,,295,295,,,,295,,295,295,295,295,295,295,295,,,,,295,295,295',
'295,295,295,295,,,,,,,,,,295,,,295,295,295,295,295,295,295,295,295,295',
',295,295,,295,295,295,,,,,,,,,,,,,,,,,,,,295,,,295,,,295,295,,295,,',
',,,295,,,,,,,,295,,,,,295,295,295,295,295,295,,,,295,295,296,296,296',
',296,,,,296,296,,,,296,,296,296,296,296,296,296,296,,,,,296,296,296',
'296,296,296,296,,,,,,,,,,296,,,296,296,296,296,296,296,296,296,296,296',
',296,296,,296,296,296,,,,,,,,,,,,,,,,,,,,296,,,296,,,296,296,,296,,',
',,,296,,,,,,,,296,,,,,296,296,296,296,296,296,,,,296,296,297,297,297',
',297,,,,297,297,,,,297,,297,297,297,297,297,297,297,,,,,297,297,297',
'297,297,297,297,,,,,,,,,,297,,,297,297,297,297,297,297,297,297,297,297',
',297,297,,297,297,297,,,,,,,,,,,,,,,,,,,,297,,,297,,,297,297,,297,,',
',,,297,,,,,,,,297,,,,,297,297,297,297,297,297,,,,297,297,298,298,298',
',298,,,,298,298,,,,298,,298,298,298,298,298,298,298,,,,,298,298,298',
'298,298,298,298,,,,,,,,,,298,,,298,298,298,298,298,298,298,298,298,298',
',298,298,,298,298,298,,,,,,,,,,,,,,,,,,,,298,,,298,,,298,298,,298,,',
',,,298,,,,,,,,298,,,,,298,298,298,298,298,298,,,,298,298,299,299,299',
',299,,,,299,299,,,,299,,299,299,299,299,299,299,299,,,,,299,299,299',
'299,299,299,299,,,,,,,,,,299,,,299,299,299,299,299,299,299,299,299,299',
',299,299,,299,299,299,,,,,,,,,,,,,,,,,,,,299,,,299,,,299,299,,299,,',
',,,299,,,,,,,,299,,,,,299,299,299,299,299,299,,,,299,299,300,300,300',
',300,,,,300,300,,,,300,,300,300,300,300,300,300,300,,,,,300,300,300',
'300,300,300,300,,,,,,,,,,300,,,300,300,300,300,300,300,300,300,300,300',
',300,300,,300,300,300,,,,,,,,,,,,,,,,,,,,300,,,300,,,300,300,,300,,',
',,,300,,,,,,,,300,,,,,300,300,300,300,300,300,,,,300,300,301,301,301',
',301,,,,301,301,,,,301,,301,301,301,301,301,301,301,,,,,301,301,301',
'301,301,301,301,,,,,,,,,,301,,,301,301,301,301,301,301,301,301,301,301',
',301,301,,301,301,301,,,,,,,,,,,,,,,,,,,,301,,,301,,,301,301,,301,,',
',,,301,,,,,,,,301,,,,,301,301,301,301,301,301,,,,301,301,368,368,368',
',368,,,,368,368,,,,368,,368,368,368,368,368,368,368,,,,,368,368,368',
'368,368,368,368,,,,,,,,,,368,,,368,368,368,368,368,368,368,368,368,368',
',368,368,,368,368,368,,,,,,,,,,,,,,,,,,,,368,,,368,368,,368,368,,368',
',368,,368,,368,,,,,,,,368,,,,,368,368,368,368,368,368,,,,368,368,633',
'633,633,633,633,633,633,633,,,633,633,633,633,633,,,633,633,633,633',
'633,633,633,,,633,633,633,633,633,633,633,633,633,633,633,633,633,633',
'633,633,633,633,633,633,633,633,633,,,633,,,,,,,,633,633,,633,633,633',
'633,,633,633,,,633,,,,,633,633,633,633,,,,,,,,,,,,,633,633,,633,633',
'633,633,633,633,633,633,633,,633,,,633,633,,,365,365,365,,365,,,633',
'365,365,,,,365,,365,365,365,365,365,365,365,,,,,365,365,365,365,365',
'365,365,,,,,,,,,,365,,,365,365,365,365,365,365,365,365,365,365,,365',
'365,,365,365,365,,,,,,,,,,,,,,,,,,,,365,,,365,365,,365,365,,365,,365',
',365,,365,,,,,,,,365,,,,,365,365,365,365,365,365,,,,365,365,20,20,20',
',20,,,,20,20,,,,20,,20,20,20,20,20,20,20,,,,,20,20,20,20,20,20,20,,',
',,,,,,,20,,,20,20,20,20,20,20,20,20,20,20,,20,20,,20,20,20,,,,,,,,,',
',,,,,,,,,,20,,,20,,,20,20,,20,,,,,,20,,,,,,,,20,,,,,20,20,20,20,20,20',
',,,20,20,700,700,700,,700,,,,700,700,,,,700,,700,700,700,700,700,700',
'700,,,,,700,700,700,700,700,700,700,,,,,,,,,,700,,,700,700,700,700,700',
'700,700,700,700,700,,700,700,,700,700,700,,,,,,,,,,,,,,,,,,,,700,,,700',
',,700,700,,700,,700,,700,,700,,,,,,,,700,,,,,700,700,700,700,700,700',
',,,700,700,788,788,788,,788,,,,788,788,,,,788,,788,788,788,788,788,788',
'788,,,,,788,788,788,788,788,788,788,,,,,,,,,,788,,,788,788,788,788,788',
'788,788,788,788,788,,788,788,,788,788,788,,,,,,,,,,,,,,,,,,,,788,,,788',
',,788,788,,788,,,,,,788,,,,,,,,788,,,,,788,788,788,788,788,788,,,,788',
'788,25,25,25,,25,,,,25,25,,,,25,,25,25,25,25,25,25,25,,,,,25,25,25,25',
'25,25,25,,,,,,,,,,25,,,25,25,25,25,25,25,25,25,25,25,,25,25,,25,25,25',
',,,,,,,,,,,,,,,,,,,25,,,25,,,25,25,,25,,,,,,25,,,,,,,,25,,,,,25,25,25',
'25,25,25,,,,25,25,313,313,313,,313,,,,313,313,,,,313,,313,313,313,313',
'313,313,313,,,,,313,313,313,313,313,313,313,,,,,,,,,,313,,,313,313,313',
'313,313,313,313,313,313,313,,313,313,,313,313,313,,,,,,,,,,,,,,,,,,',
',313,,,313,,313,313,313,,313,,313,,313,,313,,,,,,,,313,,,,,313,313,313',
'313,313,313,,,,313,313,314,314,314,,314,,,,314,314,,,,314,,314,314,314',
'314,314,314,314,,,,,314,314,314,314,314,314,314,,,314,,,,,,,314,,,314',
'314,314,314,314,314,314,314,314,314,,314,314,,314,314,314,,,,,,,,,,',
',,,,,,,,,314,,,314,,,314,314,,314,,,,,,314,,,,,,,,314,,,,,314,314,314',
'314,314,314,,,,314,314,315,315,315,,315,,,,315,315,,,,315,,315,315,315',
'315,315,315,315,,,,,315,315,315,315,315,315,315,,,315,,,,,,,315,,,315',
'315,315,315,315,315,315,315,315,315,,315,315,,315,315,315,,,,,,,,,,',
',,,,,,,,,315,,,315,,,315,315,,315,,,,,,315,,,,,,,,315,,,,,315,315,315',
'315,315,315,,,,315,315,316,316,316,,316,,,,316,316,,,,316,,316,316,316',
'316,316,316,316,,,,,316,316,316,316,316,316,316,,,316,,,,,,,316,,,316',
'316,316,316,316,316,316,316,316,316,,316,316,,316,316,316,,,,,,,,,,',
',,,,,,,,,316,,,316,,,316,316,,316,,,,,,316,,,,,,,,316,,,,,316,316,316',
'316,316,316,,,,316,316,317,317,317,,317,,,,317,317,,,,317,,317,317,317',
'317,317,317,317,,,,,317,317,317,317,317,317,317,,,317,,,,,,,317,,,317',
'317,317,317,317,317,317,317,317,317,,317,317,,317,317,317,,,,,,,,,,',
',,,,,,,,,317,,,317,,,317,317,,317,,,,,,317,,,,,,,,317,,,,,317,317,317',
'317,317,317,,,,317,317,318,318,318,318,318,,,,318,318,,,,318,,318,318',
'318,318,318,318,318,,,,,318,318,318,318,318,318,318,,,318,,,,,,318,318',
'318,318,318,318,318,318,318,318,318,318,318,318,,318,318,,318,318,318',
',,,,,,,,,,,,,,,,,,,318,,,318,,,318,318,,318,,318,,,,318,,,,,,,,318,',
',,,318,318,318,318,318,318,,,,318,318,321,321,321,,321,,,,321,321,,',
',321,,321,321,321,321,321,321,321,,,,,321,321,321,321,321,321,321,,',
',,,,,,,321,,,321,321,321,321,321,321,321,321,321,321,,321,321,,321,321',
'321,,,,,,,,,,,,,,,,,,,,321,,,321,,,321,321,,321,,321,,321,,321,,,,,',
',,321,,,,,321,321,321,321,321,321,,,,321,321,363,363,363,,363,,,,363',
'363,,,,363,,363,363,363,363,363,363,363,,,,,363,363,363,363,363,363',
'363,,,,,,,,,,363,,,363,363,363,363,363,363,363,363,363,363,,363,363',
',363,363,363,,,,,,,,,,,,,,,,,,,,363,,,363,363,,363,363,,363,,363,,363',
',363,,,,,,,,363,,,,,363,363,363,363,363,363,,,,363,363,354,354,354,',
'354,,,,354,354,,,,354,,354,354,354,354,354,354,354,,,,,354,354,354,354',
'354,354,354,,,354,,,,,,,354,,,354,354,354,354,354,354,354,354,354,354',
',354,354,,354,354,354,,,,,,,,,,,,,,,,,,,,354,,,354,,,354,354,,354,,',
',,,354,,,,,,,,354,,,,,354,354,354,354,354,354,,,,354,354,353,353,353',
',353,,,,353,353,,,,353,,353,353,353,353,353,353,353,,,,,353,353,353',
'353,353,353,353,,,,,,,,,,353,,,353,353,353,353,353,353,353,353,353,353',
',353,353,,353,353,353,,,,,,,,,,,,,,,,,,,,353,,,353,,,353,353,,353,,',
',,,353,,,,,,,,353,,,,,353,353,353,353,353,353,,,,353,353,551,551,551',
',551,,,,551,551,,,,551,,551,551,551,551,551,551,551,,,,,551,551,551',
'551,551,551,551,,,,,,,,,,551,,,551,551,551,551,551,551,551,551,551,551',
',551,551,,551,551,551,,,,,,,,,,,,,,,,,,,,551,,,551,,,551,551,,551,,',
',,,551,,,,,,,,551,,,,,551,551,551,551,551,551,,,,551,551,786,786,786',
',786,,,,786,786,,,,786,,786,786,786,786,786,786,786,,,,,786,786,786',
'786,786,786,786,,,,,,,,,,786,,,786,786,786,786,786,786,786,786,786,786',
',786,786,,786,786,786,,,,,,,,,,,,,,,,,,,,786,,,786,,,786,786,,786,,',
',,,786,,,,,,,,786,,,,,786,786,786,786,786,786,,,,786,786,785,785,785',
',785,,,,785,785,,,,785,,785,785,785,785,785,785,785,,,,,785,785,785',
'785,785,785,785,,,,,,,,,,785,,,785,785,785,785,785,785,785,785,785,785',
',785,785,,785,785,785,,,,,,,,,,,,,,,,,,,,785,,,785,,,785,785,,785,,',
',,,785,,,,,,,,785,,,,,785,785,785,785,785,785,,,,785,785,550,550,550',
',550,,,,550,550,,,,550,,550,550,550,550,550,550,550,,,,,550,550,550',
'550,550,550,550,,,,,,,,,,550,,,550,550,550,550,550,550,550,550,550,550',
',550,550,,550,550,550,,,,,,,,,,,,,,,,,,,,550,,,550,,,550,550,,550,,',
',,,550,,,,,,,,550,,,,,550,550,550,550,550,550,,,,550,550,332,332,332',
',332,,,,332,332,,,,332,,332,332,332,332,332,332,332,,,,,332,332,332',
'332,332,332,332,,,,,,,,,,332,,,332,332,332,332,332,332,332,332,332,332',
',332,332,,332,332,332,,,,,,,,,,,,,,,,,,,,332,,,332,,,332,332,,332,,',
',,,332,,,,,,,,332,,,,,332,332,332,332,332,332,,,,332,332,703,703,703',
',703,,,,703,703,,,,703,,703,703,703,703,703,703,703,,,,,703,703,703',
'703,703,703,703,,,,,,,,,,703,,,703,703,703,703,703,703,703,703,703,703',
',703,703,,703,703,703,,,,,,,,,,,,,,,,,,,,703,,,703,,,703,703,,703,,703',
',703,,703,,,,,,,,703,,,,,703,703,703,703,703,703,,,,703,703,334,334',
'334,,334,,,,334,334,,,,334,,334,334,334,334,334,334,334,,,,,334,334',
'334,334,334,334,334,,,,,,,,,,334,,,334,334,334,334,334,334,334,334,334',
'334,,334,334,,334,334,334,,,,,,,,,,,,,,,,,,,,334,,,334,,,334,334,,334',
',334,,,,334,,,,,,,,334,,,,,334,334,334,334,334,334,,,,334,334,545,545',
'545,,545,,,,545,545,,,,545,,545,545,545,545,545,545,545,,,,,545,545',
'545,545,545,545,545,,,,,,,,,,545,,,545,545,545,545,545,545,545,545,545',
'545,,545,545,,545,545,545,,,,,,,,,,,,,,,,,,,,545,,,545,,,545,545,,545',
',,,,,545,,,,,,,,545,,,,,545,545,545,545,545,545,,,,545,545,782,782,782',
',782,,,,782,782,,,,782,,782,782,782,782,782,782,782,,,,,782,782,782',
'782,782,782,782,,,,,,,,,,782,,,782,782,782,782,782,782,782,782,782,782',
',782,782,,782,782,782,,,,,,,,,,,,,,,,,,,,782,,,782,,,782,782,,782,,',
',,,782,,,,,,,,782,,,,,782,782,782,782,782,782,,,,782,782,544,544,544',
',544,,,,544,544,,,,544,,544,544,544,544,544,544,544,,,,,544,544,544',
'544,544,544,544,,,,,,,,,,544,,,544,544,544,544,544,544,544,544,544,544',
',544,544,,544,544,544,,,,,,,,,,,,,,,,,,,,544,,,544,,,544,544,,544,,',
',,,544,,,,,,,,544,,,,,544,544,544,544,544,544,,,,544,544,351,351,351',
',351,,,,351,351,,,,351,,351,351,351,351,351,351,351,,,,,351,351,351',
'351,351,351,351,,,351,,,,,,,351,,,351,351,351,351,351,351,351,351,351',
'351,,351,351,,351,351,351,,,,,,,,,,,,,,,,,,,,351,,,351,,,351,351,,351',
',,,,,351,,,,,,,,351,,,,,351,351,351,351,351,351,,,,351,351,705,705,705',
',705,,,,705,705,,,,705,,705,705,705,705,705,705,705,,,,,705,705,705',
'705,705,705,705,,,,,,,,,,705,,,705,705,705,705,705,705,705,705,705,705',
',705,705,,705,705,705,,,,,,,,,,,,,,,,,,,,705,,,705,,,705,705,,705,,',
',,,705,,,,,,,,705,,,,,705,705,705,705,705,705,,,,705,705,350,350,350',
',350,,,,350,350,,,,350,,350,350,350,350,350,350,350,,,,,350,350,350',
'350,350,350,350,,,,,,,,,,350,,,350,350,350,350,350,350,350,350,350,350',
',350,350,,350,350,350,,,,,,,,,,,,,,,,,,,,350,,,350,,,350,350,,350,,350',
',,,350,,,,,,,,350,,,,,350,350,350,350,350,350,,,,350,350,763,763,763',
',763,,,,763,763,,,,763,,763,763,763,763,763,763,763,,,,,763,763,763',
'763,763,763,763,,,,,,,,,,763,,,763,763,763,763,763,763,763,763,763,763',
',763,763,,763,763,763,,,,,,,,,,,,,,,,,,,,763,,,763,,,763,763,,763,,',
',,,763,,,,,,,,763,,,,,763,763,763,763,763,763,,,,763,763,257,257,257',
'257,257,257,257,257,,,257,257,257,257,257,,,257,257,257,257,257,257',
'257,,,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257',
'257,257,257,257,257,257,257,257,257,257,257,,,,,,,257,257,,257,257,257',
'257,,257,257,,,257,,,,,257,257,257,257,,,,,,,,,,,,,257,257,,257,257',
'257,257,257,257,257,257,257,,257,,,257,611,611,611,611,611,611,611,611',
',,611,611,611,611,611,,,611,611,611,611,611,611,611,,,611,611,611,611',
'611,611,611,611,611,611,611,611,611,611,611,611,611,611,611,611,611',
'611,611,,,611,,,,,,,,611,611,,611,611,611,611,,611,611,,,611,,,,,611',
'611,611,611,,,,,,,,,,,,,611,611,,611,611,611,611,611,611,611,611,611',
',611,,,611,84,84,84,84,84,84,84,84,,,84,84,84,84,84,,,84,84,84,84,84',
'84,84,,,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84',
'84,84,84,84,84,84,84,,,,,,,84,84,,84,84,84,84,,84,84,,,84,,,,,84,84',
'84,84,,,,,,,,,,,,,84,84,,84,84,84,84,84,84,84,84,84,,84,,,84,26,26,26',
'26,26,26,26,26,,,26,26,26,26,26,,,26,26,26,26,26,26,26,,,26,26,26,26',
'26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26',
',,,,,,26,26,,26,26,26,26,,26,26,,,26,,,,,26,26,26,26,,,,,,26,,,,,,,26',
'26,,26,26,26,26,26,26,26,26,26,,26,326,326,26,,326,,,,,,,,326,326,,326',
'326,326,326,,326,326,,,326,,,,,326,326,326,326,,,,,,,,,,,,,326,326,',
'326,326,326,326,326,326,326,326,326,,326,,,326,571,571,571,571,571,571',
'571,571,571,571,571,,571,571,,,571,571,,,,571,,,,,,,,,,571,,571,,571',
'571,571,571,571,571,571,,571,,,,,,,422,422,,,422,,,,,571,,571,422,422',
',422,422,422,422,,422,422,,,422,,,,,422,422,422,422,,,,,,,,,,,,,422',
'422,,422,422,422,422,422,422,422,422,422,,422,423,423,422,,423,,,,,',
',,423,423,,423,423,423,423,,423,423,,,423,,,,,423,423,423,423,,,,,,',
',,,,,,423,423,,423,423,423,423,423,423,423,423,423,,423,424,424,423',
',424,,,,,,,,424,424,,424,424,424,424,,424,424,,,424,,,,,424,424,424',
'424,,,,,,,,,,,,,424,424,,424,424,424,424,424,424,424,424,424,,424,425',
'425,424,,425,,,,,,,,425,425,,425,425,425,425,,425,425,,,425,,,,,425',
'425,425,425,,,,,,,,,,,,,425,425,,425,425,425,425,425,425,425,425,425',
',425,872,872,425,,872,,,,,,,,872,872,,872,872,872,872,,872,872,,,872',
',,,,872,872,872,872,,,,,,,,,,,,,872,872,,872,872,872,872,872,872,872',
'872,872,,872,871,871,872,,871,,,,,,,,871,871,,871,871,871,871,,871,871',
',,871,,,,,871,871,871,871,,,,,,,,,,,,,871,871,,871,871,871,871,871,871',
'871,871,871,,871,395,395,871,,395,,,,,,,,395,395,,395,395,395,395,,395',
'395,,,395,,,,,395,395,395,395,,,,,,,,,,,,,395,395,,395,395,395,395,395',
'395,395,395,395,,395,594,594,395,,594,,,,,,,,594,594,,594,594,594,594',
',594,594,,,594,,,,,594,594,594,594,,,,,,,,,,,,,594,594,,594,594,594',
'594,594,594,594,594,594,,594,375,375,594,,375,,,,,,,,375,375,,375,375',
'375,375,,375,375,,,375,,,,,375,375,375,375,,,,,,,,,,,,,375,375,,375',
'375,375,375,375,375,375,375,375,,375,,,375,836,836,836,836,836,836,836',
'836,836,836,836,,836,836,,,836,836,,,,,,,,,,,,,,836,,836,,836,836,836',
'836,836,836,836,,836,,,,,,,394,394,,,394,,,,,836,,836,394,394,,394,394',
'394,394,,394,394,,,394,,,,,394,394,394,394,,,,,,,,,,,,,394,394,,394',
'394,394,394,394,394,394,394,394,,394,325,325,394,,325,,,,,,,,325,325',
',325,325,325,325,,325,325,,,325,,,,,325,325,325,325,,,,,,,,,,,,,325',
'325,,325,325,325,325,325,325,325,325,325,,325,374,374,325,,374,,,,,',
',,374,374,,374,374,374,374,,374,374,,,374,,,,,374,374,374,374,,,,,,',
',,,,,,374,374,,374,374,374,374,374,374,374,374,374,,374,101,101,374',
',101,,,,,,,,101,101,,101,101,101,101,,101,101,,,101,,,,,101,101,101',
'101,,,,,,,,,,,,,101,101,,101,101,101,101,101,101,101,101,101,,101,652',
'652,101,,652,,,,,,,,652,652,,652,652,652,652,,652,652,,,652,,,,,652',
'652,652,652,,,,,,,,,,,,,652,652,,652,652,652,652,652,652,652,652,652',
',652,102,102,652,,102,,,,,,,,102,102,,102,102,102,102,,102,102,,,102',
',,,,102,102,102,102,,,,,,,,,,,,,102,102,,102,102,102,102,102,102,102',
'102,102,,102,651,651,102,,651,,,,,,,,651,651,,651,651,651,651,,651,651',
',,651,,,,,651,651,651,651,,,,,,,,,,,,,651,651,,651,651,651,651,651,651',
'651,651,651,,651,595,595,651,,595,,,,,,,,595,595,,595,595,595,595,,595',
'595,,,595,,,,,595,595,595,595,,,,,,,,,,,,,595,595,,595,595,595,595,595',
'595,595,595,595,,595,,,595,459,459,459,459,459,459,459,459,459,459,459',
',459,459,,,459,459,,,,,,,,,,,,,,459,,459,,459,459,459,459,459,459,459',
',459,,448,448,448,448,448,448,448,448,448,448,448,,448,448,459,459,448',
'448,,,,,,,,,,,,,,448,,448,,448,448,448,448,448,448,448,,448,537,537',
'537,537,537,537,537,537,537,537,537,,537,537,,448,537,537,,,,,,,,,,',
',,,537,,537,,537,537,537,537,537,537,537,,537,689,689,689,689,689,689',
'689,689,689,689,689,,689,689,,537,689,689,,,,,,,,,,,,,,689,,689,,689',
'689,689,689,689,689,689,,689,512,512,512,512,512,512,512,512,512,512',
'512,,512,512,,689,512,512,,,,,,,,,,,,,,512,,512,,512,512,512,512,512',
'512,512,,512,760,760,760,760,760,760,760,760,760,760,760,,760,760,512',
'512,760,760,,,,,,,,,,,,,,760,,760,,760,760,760,760,760,760,760,,760',
'772,772,772,772,772,772,772,772,772,772,772,,772,772,760,760,772,772',
',,,,,,,,,,,,,772,,772,,772,772,772,772,772,772,772,,772,761,761,761',
'761,761,761,761,761,761,761,761,,761,761,,772,761,761,,,,,,,,,,,,,,761',
',761,,761,761,761,761,761,761,761,,761,683,683,683,683,683,683,683,683',
'683,683,683,,683,683,,761,683,683,,,,,,,,,,,,,,683,,683,,683,683,683',
'683,683,683,683,,683,685,685,685,685,685,685,685,685,685,685,685,,685',
'685,,683,685,685,,,,,,,,,,,,,,685,,685,,685,685,685,685,685,685,685',
',685,687,687,687,687,687,687,687,687,687,687,687,,687,687,,685,687,687',
',,,,,,,,,,,,,687,,687,,687,687,687,687,687,687,687,,687,137,137,137',
'137,137,137,137,137,137,137,137,,137,137,,687,137,137,,,,,,,,,,,,,,137',
',137,,137,137,137,137,137,137,137,,137,420,420,420,420,420,420,420,420',
'420,420,420,,420,420,,137,420,420,,,,,,,,,,,,,,420,,420,,420,420,420',
'420,420,420,420,,420,46,46,46,46,46,46,46,46,46,46,46,,46,46,,420,46',
'46,,,,,,,,,,,,,,46,,46,,46,46,46,46,46,46,46,,46,747,747,747,747,747',
'747,747,747,747,747,747,,747,747,,46,747,747,,,,,,,,,,,,,,747,,747,',
'747,747,747,747,747,747,747,,747,640,640,640,640,640,640,640,640,640',
'640,640,,640,640,,747,640,640,,,,,,,,,,,,,,640,,640,,640,640,640,640',
'640,640,640,,640,,,,,,,,,,,,,,,,640' ]
        racc_action_check = arr = ::Array.new(23872, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    24,  4296,  1028,   nil,   371,  6097,   133,     7,   nil,
   901,  7177,   nil,   nil, 10049,   nil,   898, 13889,   941,   329,
 18185,  9209,   nil,   nil,   895, 18545, 21872,   nil,   nil, 14601,
 14481, 14369,    84,   nil,   nil,   nil,   436,   nil,   318,   897,
   nil,   -92,   455,   958,   nil,   nil, 23660,   890,   nil,   nil,
   966,  4537,   nil,  8137,  3933,   nil,  8017,   nil,  1029,  4897,
  4777,  9569,   nil,  4657,   nil,   nil,   458,   126,   nil,   nil,
   nil,   nil,  5017,   nil,   nil,   nil,  5137,   nil,  5257,   226,
   nil,   861,   776,   nil, 21763,   nil,   nil,  5857,   nil,   nil,
   860,   nil,   nil,   nil,   903,   nil,  6217,  6337,   nil,   298,
   nil, 22804, 22922,  6817,   373,   -10,   nil,   nil,   -14,   956,
   541,   165,   840,   890,   nil,   855,   854,   nil,   nil,   nil,
   853,   844,   nil,   nil,  8377,   nil,   nil,   185,   810,   nil,
   496,  8849,   -72,   nil,   843,   -51,   874, 23572,   nil,  3691,
   nil,  9689,   nil,   797,   793,   832, 10169,   789,  1150,   791,
   -40,   nil,   nil,   nil, 10769, 10889,   311,   nil,   289,   209,
   777,   199,   841,  3086, 11849, 11969,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   337,   nil,
   nil,   nil,   nil,   309,   nil,   nil,   nil,   nil,   -48,   nil,
   nil,   nil,   nil,   193,   191,   nil,   nil,   nil,   nil,   105,
   nil,   nil,   nil,   285,   359,   nil,   399,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   367,   nil,   nil,   nil, 21545,   829,   nil,
   760, 13649, 13769,   808,   806,  2602,   nil, 14249,   nil,   nil,
   902,   nil,   nil,   nil,   473,   761, 14713, 14833, 14953, 15073,
 15193, 15313, 15433, 15553, 15673, 15793, 15913, 16033, 16153, 16273,
 16393, 16513, 16633, 16753, 16873, 16993, 17113, 17233, 17353, 17473,
 17593, 17713,  1997,   nil,   nil,   nil,   636,    48,   770,   766,
   763,  1876,   nil, 18665, 18785, 18905, 19025, 19145, 19265,   nil,
   nil, 19385,   nil,   nil,    33, 22686, 21931,   630,   745,   nil,
   711,   -79, 20345,   334, 20585,   349,   694,   335,   nil,   180,
   nil,   nil,   nil,   nil,   nil,   388,   702,   -99,   -56,   nil,
 21305, 21065,   188, 19745, 19625,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   716, 19505,     0, 18065,   247,   nil, 17833,   nil,
   601,   nil,   554,   711, 22745, 22515, 14129,   nil,   nil,   nil,
   714,   139,   nil,   nil,   nil,    77,   138,   nil,   nil, 13409,
    87,   nil,   nil,   nil, 22627, 22397, 13289,   nil, 13169, 13049,
    89, 12569,   nil, 12449,   nil, 12209,   675, 11129,   nil,   nil,
   664,   nil, 11009,   286,   nil,   313,   nil,    10,   550,   547,
 23616,   nil, 22043, 22102, 22161, 22220,  9449,   nil,   519,   701,
   nil,   nil,   nil,   nil,   nil,   659,  8729,  8617,   nil,   nil,
   nil,   nil,   nil,   nil,  8497,  7897,   770,   763, 23132,  7537,
  1066,   nil,  7417,  1392,  1029,   700,  2602,  1150,   686, 23087,
  1271,   645,   350,  1392,   717,   674,  2360,  1513,  1876,  2118,
  2481,  2723,  2239,   678,  1997,  2965,  2844,   671,  1755,  1634,
   618,   -51,   nil,  4175,   nil,   710,   nil,   596,   627,   610,
   nil,   nil,   nil,   nil,   nil,   nil,   605,   665,   568,   187,
   563,  2360,   661,   nil,   nil,   607,   564,   nil,   nil,   nil,
   nil,  6937, 23264,   nil,  7057,   nil,   nil,   776,   nil,   542,
  9329,  2118,   647,   nil,   628,   nil,   nil, 12929,   nil,   nil,
   nil,   nil,   nil,   514,   nil,    57,   nil, 23176,   nil,    61,
  1634,   510,   537,   nil, 20945, 20705,   513,   nil,   nil,   nil,
 20225, 19865,   353,   503,     5,   153,   489,   154,    23,   472,
 12809,   -50,   nil,   nil, 12689,   nil,   nil,   nil,   nil,   -67,
   466, 21978, 12329,   409,   nil,   nil,   497,   377,   210,   196,
   420,   nil,   902,   nil,   411, 10409,   359,   380,   nil,   385,
   nil,  8969,   nil,   488, 22456, 23040,  8257,   nil,   nil,   140,
   210,   nil,   nil,   nil,   251,   390,   380,   248,   294,   nil,
  4417, 21654,   294,   261,   416,   171,   117,    99,   nil,    87,
   nil,   nil,   nil,   nil,  2481,   nil,   nil,   nil,   nil,   nil,
   671,   -32,   nil, 17953,   112,    30,    71,  5617,   nil,   257,
 23748,   638,  5737,   nil,   nil,   591,   nil,   -69,   nil,   nil,
    98, 22981, 22863,   150, 12089,   253,   nil,   nil,   nil,   nil,
   189,   nil, 11729,   nil,  9929,  9809,   nil,   366,   nil,  5377,
   380,   nil,   nil,   nil,   nil,   nil,   335,   nil,   nil,   nil,
   nil,   nil,   nil, 23440,   nil, 23484,   nil, 23528,   nil, 23220,
   nil, 11249,   127,    23,   nil,  2844,   468,   nil,  2239,   491,
 18305,   nil,   471, 20465,   nil, 21185, 13529, 10649,   -36,   535,
  9089,   nil,   551,   415,   nil,   549,   510,   600,   nil,  6457,
  2965,   457,   701,   nil,   nil,   nil,   nil,   610,   nil,  5977,
   -44,   nil,   555,   nil,   719,   610,   645,   nil,  1513,   729,
   nil,   654,   nil,   616,   nil,   nil,   nil, 23704,  3207,  6577,
   742,   nil,   nil,   670,   671,   nil,   736,    14,   762,   nil,
 23308, 23396,   659, 21425,   nil,   -10,   667, 11369,   nil,  1150,
  1271,   nil, 23352,   nil,   nil,  1755,   805,   nil,   706,   nil,
   nil,   694, 20825,   697,   nil, 20105, 19985,   nil, 18425,   nil,
   nil,   nil,   173,   846,   nil,   665,   735,   736,   nil,   nil,
   nil,   734,   739,   nil,   nil,   779,   nil,   nil,   nil,  1029,
   nil, 14009,   112,   nil,   875,    32,   nil,   798,   nil,   nil,
   nil,  2723, 11609,   nil,   886,   891,  3328,   800,   nil,   nil,
 10529,   nil,   786, 10289,   nil,   790, 22562,  3449,   nil,   nil,
  3570,   473,   nil,   nil,   nil,   nil,   nil,   404,   -45,   134,
   885,   nil,  3812,   nil,  4054,   nil,   387,  7777,   nil,   nil,
   950,   nil,  7657,   852,   nil,  7297,   nil,   nil,   972,   975,
   861, 22338, 22279,  5497,   405,   988,   640,   nil,   nil,   nil,
   nil,   nil,   885, 11489,   nil,   887,   nil,   nil,   nil,    19,
   553,    47,    -6,   935,   nil,   nil,   nil,  6697,   nil,   259,
   911,   nil ]

racc_action_default = [
    -1,  -505,  -503,  -505,  -503,  -505,  -505,  -251,  -291,  -419,
  -503,  -322,   -61,    -2,  -505,  -420,  -503,  -323,  -307,  -273,
  -505,   -65,  -314,  -324,  -505,  -505,  -505,  -325,  -379,  -505,
  -505,  -505,   -34,   -71,  -386,  -381,  -505,  -275,  -434,  -494,
  -413,  -382,  -492,  -505,   -20,  -383,   -40,  -505,  -433,    -5,
   -42,  -285,  -432,  -505,  -503,   -43,  -288,  -266,    -6,  -423,
  -356,  -505,  -267,  -505,  -429,  -380,   -47,  -482,  -268,  -428,
  -425,  -269,  -505,  -430,  -424,  -270,  -503,  -431,  -426,  -216,
  -271,  -505,  -492,  -427,  -503,  -272,   -35,  -503,  -436,  -503,
  -505,  -295,  -437,  -503,  -505,  -298,   -70,  -505,   902,  -505,
  -401,  -505,  -505,  -503,  -505,  -350,  -322,  -323,  -273,  -505,
  -505,  -434,  -494,  -505,  -285,  -288,  -356,  -326,  -338,  -339,
  -505,   -53,  -360,  -357,  -505,  -290,  -292,  -505,  -505,  -391,
  -505,  -505,  -273,  -238,  -261,  -434,  -505,  -217,  -230,  -503,
   -45,  -505,  -477,  -505,  -504,  -505,  -505,  -504,    -8,  -505,
  -505,  -397,   -46,  -310,  -505,  -505,  -505,  -209,  -505,   -82,
   -66,   -75,  -505,  -503,   -68,  -505,   -73,  -193,  -168,  -150,
  -121,  -169,  -139,  -170,  -153,  -108,  -141,  -129,  -171,  -126,
  -152,  -130,  -157,  -172,  -127,  -142,  -117,  -159,  -124,  -136,
  -128,  -165,  -118,  -151,  -123,  -434,  -138,  -144,  -119,  -143,
  -125,  -158,  -120,  -134,  -109,  -148,  -115,  -135,  -505,  -317,
  -147,  -160,  -113,  -132,  -110,  -167,  -106,   -99,  -133,  -111,
  -472,  -162,  -100,   -96,  -161,  -107,   -98,  -114,  -163,  -154,
  -116,  -146,  -145,  -164,   -97,  -140,  -149,  -131,  -471,  -112,
  -166,  -137,  -156,  -122,  -155,  -101,  -132,  -133,   -96,  -161,
  -102,    -9,  -154,  -505,  -164,   -97,  -149,  -505,  -194,  -103,
   -14,  -505,  -505,  -421,  -422,  -503,  -495,  -505,  -384,  -500,
  -493,  -499,  -501,    -4,  -281,  -505,  -505,  -505,  -505,  -505,
  -505,  -505,  -505,  -505,  -505,  -505,  -505,  -505,  -505,  -505,
  -505,  -505,  -505,  -505,  -505,  -505,  -505,  -505,  -505,  -505,
  -505,  -505,  -503,  -344,  -347,   -44,   -41,  -505,   -61,  -505,
  -505,  -503,   -60,  -505,  -505,  -505,  -505,  -505,  -505,   -59,
  -355,  -503,  -208,   -39,  -505,  -505,  -505,  -277,  -505,  -218,
  -494,  -496,  -505,  -496,  -505,  -505,  -493,  -492,  -414,  -505,
  -416,  -415,  -417,  -412,  -474,  -496,  -505,  -496,  -505,  -399,
  -505,  -505,  -505,  -505,  -505,   -69,   -38,  -403,  -388,  -406,
  -402,  -404,  -251,  -489,  -483,  -488,  -484,  -354,  -503,  -486,
  -483,  -485,  -484,  -505,  -505,  -505,  -503,  -304,  -421,  -422,
  -505,  -281,  -351,   -54,   -50,  -503,  -503,  -252,  -253,  -254,
  -505,  -393,  -390,  -389,  -505,  -505,  -503,  -258,  -505,  -505,
  -281,  -505,  -260,  -505,  -231,  -505,  -504,  -505,  -233,  -395,
  -505,  -396,  -505,  -505,  -273,  -505,   -94,  -505,   -91,   -92,
  -182,   -30,  -505,  -505,  -505,  -505,  -503,   -74,   -81,  -505,
   -67,  -315,  -491,  -490,  -319,  -452,  -505,  -505,   -13,   -12,
   -11,  -104,   -36,   -37,  -505,  -505,  -371,  -505,  -214,  -505,
    -7,  -502,  -505,  -503,  -203,  -189,  -184,  -204,  -188,  -505,
  -205,  -185,  -210,  -200,  -186,  -211,  -202,  -201,  -212,  -199,
  -213,  -195,  -206,  -187,  -207,  -196,  -197,  -190,  -198,  -183,
  -505,  -503,  -329,  -503,  -328,  -327,  -279,   -62,  -505,  -505,
  -287,   -15,   -16,   -17,   -18,   -19,  -505,  -230,  -494,  -494,
  -504,  -503,  -251,  -483,  -484,  -251,  -494,  -283,  -219,  -497,
  -220,  -498,  -494,  -222,  -498,   -31,  -261,  -173,   -23,  -505,
  -505,  -503,  -505,  -363,  -505,  -418,  -476,  -498,  -284,  -475,
  -400,  -385,   -33,   -32,   -24,  -505,  -387,  -175,   -25,  -505,
  -503,  -505,   -57,  -353,  -505,  -505,   -55,  -229,  -352,  -228,
  -505,  -505,  -282,  -505,  -487,  -280,  -503,  -483,  -484,  -505,
  -505,  -503,  -361,  -342,  -505,  -340,  -358,  -250,  -256,  -505,
  -505,   -40,  -505,  -504,  -392,  -394,  -487,  -280,  -483,  -484,
  -505,  -479,  -173,  -259,  -262,  -505,  -504,  -505,  -237,  -505,
  -478,  -505,  -398,  -311,  -505,  -505,  -503,   -93,   -91,   -92,
  -505,  -439,  -308,  -438,   -78,   -80,  -483,  -484,  -505,   -72,
  -503,  -505,  -465,  -505,  -505,  -470,  -456,  -470,  -463,  -470,
  -462,  -467,  -454,  -451,  -503,  -466,  -457,  -453,  -460,  -455,
  -452,  -494,   -10,  -505,  -191,  -192,  -503,  -503,  -276,  -505,
  -181,  -505,  -505,   -22,  -345,  -503,  -330,   -62,  -286,  -224,
  -505,  -505,  -505,  -505,  -505,  -503,   -49,  -349,   -48,  -348,
  -505,  -262,  -505,  -223,  -505,  -505,  -265,  -505,  -302,  -505,
  -505,  -332,  -296,  -333,  -331,  -299,  -505,  -411,  -408,  -409,
  -405,  -410,   -58,  -179,   -29,  -180,   -56,  -177,   -27,  -178,
   -28,  -505,  -282,  -505,   -51,  -503,  -505,  -341,  -503,  -505,
  -505,  -255,  -504,  -505,  -243,  -505,  -505,  -505,  -282,  -504,
  -505,  -235,  -504,  -505,   -95,   -91,   -92,  -505,  -441,  -505,
  -503,   -76,  -505,  -320,  -464,  -468,  -443,  -505,  -447,  -505,
  -505,  -449,  -505,  -450,  -505,  -494,  -505,  -105,  -503,  -503,
  -336,  -503,  -373,  -372,  -374,  -289,   -21,  -215,  -503,  -505,
  -505,  -334,  -225,  -503,  -503,  -226,  -505,  -494,  -505,  -278,
  -494,  -174,  -263,  -505,  -303,  -505,  -365,  -505,  -301,  -503,
  -503,  -407,  -176,   -26,  -305,  -503,  -505,  -343,  -505,  -257,
  -240,  -504,  -505,  -504,  -249,  -505,  -505,  -232,  -505,  -234,
  -312,  -282,  -505,  -505,  -316,  -452,  -470,  -470,  -469,  -458,
  -459,  -505,  -470,  -461,  -318,  -505,  -473,  -337,    -3,  -503,
  -378,  -505,  -505,  -376,  -505,  -505,  -293,  -505,  -294,  -221,
  -264,  -503,  -505,  -367,  -505,  -505,  -503,  -505,  -362,  -359,
  -505,  -239,  -504,  -505,  -245,  -504,  -504,  -503,  -440,  -309,
  -503,  -505,  -445,  -446,  -448,  -442,  -377,  -505,   -90,   -83,
  -505,  -375,  -503,  -346,  -503,  -227,  -503,  -505,  -297,  -300,
  -505,   -52,  -505,  -504,  -241,  -505,  -244,  -236,  -505,  -505,
  -470,  -505,  -505,  -503,   -89,  -371,  -503,  -369,  -368,  -364,
  -366,  -306,  -504,  -505,  -246,  -504,  -313,  -321,  -444,  -487,
   -88,  -483,  -484,  -505,  -370,  -335,  -242,  -505,  -247,   -84,
  -504,  -248 ]

clist = [
'137,209,320,522,138,328,137,267,109,157,138,117,483,250,167,250,251',
'119,259,258,636,383,447,623,624,515,117,273,391,501,147,499,373,144',
'739,597,147,362,368,144,137,532,590,148,138,562,566,355,133,657,322',
'121,659,758,133,308,310,797,320,338,802,217,382,750,217,137,217,335',
'672,330,147,99,675,144,417,803,137,795,238,346,380,126,570,100,387,431',
'568,323,133,129,633,160,137,140,602,151,330,775,561,152,312,117,208',
'434,319,265,347,506,510,345,513,351,408,137,769,430,354,138,272,217',
'137,770,526,560,529,826,154,720,412,713,322,837,165,305,610,137,363',
'435,611,699,481,644,748,147,420,386,144,698,385,590,695,339,765,879',
'669,329,741,812,272,117,352,133,268,100,308,429,344,348,349,117,117',
'870,100,275,127,307,390,437,150,680,541,421,329,540,719,324,803,735',
'796,260,270,808,670,799,2,436,1,,,,,,,,337,,388,,,,,,13,,714,,,,623',
',,694,,728,,731,774,733,,,,,338,,,,,,,,,,,,,,,,,530,,,,,878,,448,,,',
',502,505,,309,454,455,456,457,458,459,460,461,462,463,464,465,466,467',
'468,469,470,471,472,473,474,475,476,477,478,479,575,217,,895,,,,508',
'450,657,659,137,,543,559,138,,,,137,556,308,488,497,,,,,,,512,524,517',
',580,,,742,,362,368,147,,,144,,,590,137,147,,537,500,,590,,495,,309',
'133,,,,,608,519,,133,556,518,556,81,,757,137,118,722,,330,,588,519,309',
'81,,534,,571,538,,734,,623,840,137,,420,137,330,582,,137,,537,489,137',
',,,496,,,498,842,843,542,,573,363,844,,546,272,81,137,,,,330,,250,586',
',632,,567,,,363,,,,634,635,,491,492,493,494,,640,682,,,,686,549,,894',
',,,,,329,,363,,363,,,,,565,565,650,653,590,,821,,217,535,660,329,539',
'793,888,,663,,,,,,,,,,,,,603,,543,,,,81,137,,,137,,329,,,,137,,,480',
',,,137,852,590,,854,309,,81,877,717,,,,,,556,,683,685,,,,704,687,689',
',,,7,,656,,,658,,711,,7,,,7,,,7,565,137,,,,,696,,,117,684,,,,137,119',
'688,690,,,137,549,,,549,137,723,753,754,330,,,,7,868,7,7,869,,736,,',
',7,,7,,,,,,674,,,7,674,,250,7,,737,,,,7,81,137,,,363,81,747,,,,549,',
',,7,565,,,137,,7,217,756,,,,760,,761,137,,,,137,519,,,81,641,,,7,784',
'217,,,81,,586,787,329,718,789,81,,772,7,693,,,,,,,137,726,766,137,645',
'683,687,689,7,,137,,,,805,,7,,,,,,655,,,,740,744,773,137,783,,,781,',
'740,817,,,819,,,667,,,740,,,780,,,,,,,,,831,,834,,676,,137,,,,137,,',
',,,,,,,,,,674,,137,,,137,772,,836,,,,,,,,,,,,790,,,,,,,,864,,,866,867',
'893,7,7,,,7,556,,,137,7,81,,,117,,810,137,813,,137,,,,,,884,,,,549,549',
',,,,,,,792,,81,7,,137,896,,863,898,137,,7,137,7,7,7,7,7,7,81,137,7,',
'901,330,,838,,,815,137,,,,7,,,,,81,,,,,137,,,,,,7,7,,7,7,,,,81,,,,,776',
'363,,778,,,,,,,,,,7,,,,,,118,,,,,,,7,,,,740,,,7,,,,,,,,,,807,,,,329',
',7,740,,,814,,,,,,,,,,7,,81,,,,,,,,7,824,825,,,,81,827,,,,,,7,,,,7,',
',,,,,,,,,,,306,,,,,,,,,,306,846,,,,,,7,5,327,,,104,856,,,,130,860,306',
'5,,,130,,7,,158,,,,,,,356,,,81,,,81,,,,875,7,876,,,,,,,,,,,130,,130',
'5,,81,,7,,,130,7,130,,,,,7,7,,,130,,81,,130,,7,,,,130,,81,,,,,,,,,,',
',158,130,,,,,,130,,81,81,,,,,81,,,7,,,,,,,,,,130,,,,7,,,,,,,,,,,5,,',
'7,,,81,,851,,,,,,,413,130,,81,,,,,81,5,158,413,,,,,19,,7,81,108,,81',
',,,,,19,,,,,,81,159,81,,442,443,,,,,,,,,,,,,,,,7,,,,7,,,7,,,,,,19,,',
',,,,,,,,,,,,7,7,,,,,,,306,306,306,306,,,,,,,,7,,,,,130,130,,159,5,7',
'7,,,5,,,,,,,,94,,,,306,,,306,,7,7,,94,,,7,,,,,,,,,5,,,,,19,,,,5,,130',
'130,130,130,130,5,,327,130,414,,,,,7,,,94,19,159,414,130,,,,,7,,,,593',
'7,,,,,,130,130,,130,130,7,,,7,,,,,,,,,631,,,7,,7,,,,130,,,,639,,,,,',
',,,130,,7,,,,,130,,,,,,,,,,,,,,,,130,,,94,,,,,,,,,,,130,,,,,,,19,,,130',
',19,94,,,,,,,,,,130,,,,5,,,,,,,,,,,,,,,,,19,,,,,,,,,19,,,,5,,,19,,,',
',306,,,,,,,,,,5,,,38,,,,111,,,,,,,,38,,,,,5,,161,,,,,195,,,,,,,,,,,',
'5,94,,,130,,94,,,,130,130,,,,,38,,,,130,,,,104,,,,,,,,,,,,,,94,,,,,',
',,,94,,,,,,,94,,130,,161,,,,,,,,,,,,5,,,,,,,,,,,19,,,5,,,,,,,,,,,,,',
',,,38,,,,,,,,,306,19,,,130,,195,,,,,,,,397,38,161,195,,19,,,,,,,,,,406',
'306,,,,,,,,,19,,130,,,,5,,,5,,,,,,,,,,19,677,,,,,,,,,,130,5,,,,,,,,',
'94,,,108,,,,,,5,,,,,,,,,,5,130,,,,,,,,,,94,,,,,,,,38,,5,5,,38,,,5,,94',
'19,,,,,,,,,,,,,,19,,,,,94,,,,,,,38,,,,,5,,847,,38,,,94,,,,38,5,,,,,5',
',,,,,,,,,,5,,,5,,,,,,,,,,,,5,,5,,,,,,,,,19,,,19,516,,,,,,130,,,,,,,',
',,533,,,94,,19,,,,,,,,,,,,94,,,,,,19,,,,,,,,,,19,,,,,,569,,,,,,,,,,581',
',,,584,19,19,,589,,,19,,,,,,,,,,,,38,,,,,,,,,,,,,,,,94,,,94,,,19,,848',
',,,,,38,,,,19,,,,,19,,94,,,,,,,38,,19,,,19,,,,,,94,,,,,,19,,19,38,94',
',,,,,,,,,,,,,,,,,38,,661,94,94,589,,,,94,,666,,,,,,,661,,,,,,111,,,',
',,,,,,,,,,,,,,,94,,,,,,,,,,,,94,,,,,94,,,702,,,,,,,38,94,,,94,,709,',
',,,,712,,38,,94,,94,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,743,,,,,',
',,,,,,,,,,,584,,,,,,,,,,38,762,,38,,516,,,,,,,,,,,,,,,,,,,,38,,,,,,',
',,,,,,,589,,,,38,,,589,,,,,,,38,,,,,,,,,,,,800,,,,,,,,,38,38,,,,,38',
',,,,,,,,,,,,,,,,,,820,,,,823,,,,,,,,,,,38,,849,,832,,,835,,,,,38,,,',
',38,,,,,,,,,,,38,,,38,,,,,,,,,,,,38,661,38,,,,,,,584,,,589,,,,,,,,,',
',,,,,,,,,,,,,,880,,,,,882,,,885,,,,,,,,,,,,,,,,,,589,,,,,,,,,,,,,,900' ]
        racc_goto_table = arr = ::Array.new(2455, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'28,48,58,81,29,21,28,53,82,28,29,54,78,51,28,51,13,18,13,28,5,35,3,140',
'85,23,54,9,128,78,57,32,21,55,6,46,57,33,33,55,28,23,146,11,29,36,36',
'44,61,59,28,34,59,6,61,40,41,138,58,48,138,49,58,79,49,28,49,9,80,29',
'57,125,80,55,47,142,28,105,74,75,53,76,65,10,63,47,62,17,61,10,52,43',
'28,31,83,10,29,38,37,31,34,54,86,87,34,88,57,89,56,55,56,90,60,28,91',
'44,92,29,84,49,28,93,56,94,56,95,96,97,98,99,28,100,101,31,102,28,49',
'103,104,66,107,36,108,57,28,111,55,112,113,146,114,125,115,116,117,10',
'118,119,84,54,125,61,123,10,40,41,10,124,10,54,54,138,10,27,126,15,127',
'26,129,130,131,17,10,132,134,15,142,135,137,14,12,7,81,141,4,145,1,',
',,,,,,15,,31,,,,,,2,,46,,,,140,,,36,,139,,139,80,139,,,,,48,,,,,,,,',
',,,,,,,,128,,,,,6,,28,,,,,33,33,,2,28,28,28,28,28,28,28,28,28,28,28',
'28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,128,49,,79,,,,53,11,59',
'59,28,,58,21,29,,,,28,33,40,41,29,,,,,,,28,9,28,,21,,,23,,33,33,57,',
',55,,,146,28,57,,28,55,,146,,11,,2,61,,,,,21,55,,61,33,17,33,16,,32',
'28,16,3,,29,,60,55,2,16,,17,,28,17,,3,,140,85,28,,28,28,29,28,,28,,28',
'31,28,,,,10,,,31,139,139,34,,57,49,139,,34,84,16,28,,,,29,,51,57,,13',
',61,,,49,,,,28,28,,15,15,15,15,,28,35,,,,35,10,,5,,,,,,10,,49,,49,,',
',,10,10,53,53,146,,78,,49,15,53,10,15,3,139,,53,,,,,,,,,,,,,84,,58,',
',,16,28,,,28,,10,,,,28,,,2,,,,28,78,146,,78,2,,16,81,21,,,,,,33,,28',
'28,,,,60,28,28,,,,39,,34,,,34,,60,,39,,,39,,,39,10,28,,,,,82,,,54,17',
',,,28,18,17,17,,,28,10,,,10,28,48,33,33,29,,,,39,3,39,39,3,,53,,,,39',
',39,,,,,,84,,,39,84,,51,39,,13,,,,39,16,28,,,49,16,28,,,,10,,,,39,10',
',,28,,39,49,29,,,,28,,28,28,,,,28,55,,,16,2,,,39,60,49,,,16,,57,60,10',
'84,60,16,,28,39,15,,,,,,,28,84,55,28,2,28,28,28,39,,28,,,,53,,39,,,',
',,2,,,,10,10,17,28,57,,,55,,10,53,,,53,,,2,,,10,,,61,,,,,,,,,60,,60',
',2,,28,,,,28,,,,,,,,,,,,,84,,28,,,28,28,,28,,,,,,,,,,,,84,,,,,,,,60',
',,60,60,21,39,39,,,39,33,,,28,39,16,,,54,,10,28,10,,28,,,,,,60,,,,10',
'10,,,,,,,,15,,16,39,,28,60,,57,60,28,,39,28,39,39,39,39,39,39,16,28',
'39,,60,29,,84,,,15,28,,,,39,,,,,16,,,,,28,,,,,,39,39,,39,39,,,,16,,',
',,2,49,,2,,,,,,,,,,39,,,,,,16,,,,,,,39,,,,10,,,39,,,,,,,,,,2,,,,10,',
'39,10,,,2,,,,,,,,,,39,,16,,,,,,,,39,2,2,,,,16,2,,,,,,39,,,,39,,,,,,',
',,,,,,25,,,,,,,,,,25,2,,,,,,39,20,25,,,20,2,,,,20,2,25,20,,,20,,39,',
'20,,,,,,,25,,,16,,,16,,,,2,39,2,,,,,,,,,,,20,,20,20,,16,,39,,,20,39',
'20,,,,,39,39,,,20,,16,,20,,39,,,,20,,16,,,,,,,,,,,,20,20,,,,,,20,,16',
'16,,,,,16,,,39,,,,,,,,,,20,,,,39,,,,,,,,,,,20,,,39,,,16,,16,,,,,,,20',
'20,,16,,,,,16,20,20,20,,,,,22,,39,16,22,,16,,,,,,22,,,,,,16,22,16,,25',
'25,,,,,,,,,,,,,,,,39,,,,39,,,39,,,,,,22,,,,,,,,,,,,,,,39,39,,,,,,,25',
'25,25,25,,,,,,,,39,,,,,20,20,,22,20,39,39,,,20,,,,,,,,19,,,,25,,,25',
',39,39,,19,,,39,,,,,,,,,20,,,,,22,,,,20,,20,20,20,20,20,20,,25,20,22',
',,,,39,,,19,22,22,22,20,,,,,39,,,,25,39,,,,,,20,20,,20,20,39,,,39,,',
',,,,,,25,,,39,,39,,,,20,,,,25,,,,,,,,,20,,39,,,,,20,,,,,,,,,,,,,,,,20',
',,19,,,,,,,,,,,20,,,,,,,22,,,20,,22,19,,,,,,,,,,20,,,,20,,,,,,,,,,,',
',,,,,22,,,,,,,,,22,,,,20,,,22,,,,,25,,,,,,,,,,20,,,45,,,,45,,,,,,,,45',
',,,,20,,45,,,,,45,,,,,,,,,,,,20,19,,,20,,19,,,,20,20,,,,,45,,,,20,,',
',20,,,,,,,,,,,,,,19,,,,,,,,,19,,,,,,,19,,20,,45,,,,,,,,,,,,20,,,,,,',
',,,,22,,,20,,,,,,,,,,,,,,,,,45,,,,,,,,,25,22,,,20,,45,,,,,,,,24,45,45',
'45,,22,,,,,,,,,,24,25,,,,,,,,,22,,20,,,,20,,,20,,,,,,,,,,22,22,,,,,',
',,,,20,20,,,,,,,,,19,,,22,,,,,,20,,,,,,,,,,20,20,,,,,,,,,,19,,,,,,,',
'45,,20,20,,45,,,20,,19,22,,,,,,,,,,,,,,22,,,,,19,,,,,,,45,,,,,20,,20',
',45,,,19,,,,45,20,,,,,20,,,,,,,,,,,20,,,20,,,,,,,,,,,,20,,20,,,,,,,',
',22,,,22,24,,,,,,20,,,,,,,,,,24,,,19,,22,,,,,,,,,,,,19,,,,,,22,,,,,',
',,,,22,,,,,,24,,,,,,,,,,24,,,,24,22,22,,24,,,22,,,,,,,,,,,,45,,,,,,',
',,,,,,,,,19,,,19,,,22,,22,,,,,,45,,,,22,,,,,22,,19,,,,,,,45,,22,,,22',
',,,,,19,,,,,,22,,22,45,19,,,,,,,,,,,,,,,,,,45,,24,19,19,24,,,,19,,24',
',,,,,,24,,,,,,45,,,,,,,,,,,,,,,,,,,19,,,,,,,,,,,,19,,,,,19,,,24,,,,',
',,45,19,,,19,,24,,,,,,24,,45,,19,,19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,24,,,,,,,,,,,,,,,,,24,,,,,,,,,,45,24,,45,,24,,,,,,,,,,,,,,,',
',,,,45,,,,,,,,,,,,,,24,,,,45,,,24,,,,,,,45,,,,,,,,,,,,24,,,,,,,,,45',
'45,,,,,45,,,,,,,,,,,,,,,,,,,24,,,,24,,,,,,,,,,,45,,45,,24,,,24,,,,,45',
',,,,45,,,,,,,,,,,45,,,45,,,,,,,,,,,,45,24,45,,,,,,,24,,,24,,,,,,,,,',
',,,,,,,,,,,,,,24,,,,,24,,,24,,,,,,,,,,,,,,,,,,24,,,,,,,,,,,,,,24' ]
        racc_goto_check = arr = ::Array.new(2455, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   196,   210,  -243,   194,  -426,  -602,  -548,   nil,   -15,
    79,    29,   148,   -13,   158,   122,   360,    26,    11,  1300,
  1024,   -71,  1192,  -309,  1557,   955,   -74,   129,   -11,    -7,
   nil,    82,  -290,   -64,    44,  -100,  -340,  -286,  -597,   542,
     1,     2,   nil,    70,   -49,  1526,  -380,   -80,   -25,    35,
   nil,   -16,  -351,   -32,     5,    22,  -223,    19,   -58,  -453,
   -35,    37,  -303,   -40,   nil,  -307,  -429,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    52,    -8,    73,   nil,  -295,  -582,
  -467,  -332,     2,  -323,    76,  -411,    76,  -105,    68,  -220,
    20,  -558,    21,  -554,  -254,  -649,   108,  -475,   -25,  -464,
  -659,   110,  -297,   -72,  -296,  -646,   nil,  -163,  -502,   nil,
   nil,    22,  -419,    26,  -412,  -517,  -703,  -369,  -481,  -584,
   nil,   nil,   nil,   121,    78,    67,   164,    49,   -99,   162,
  -362,  -181,  -176,   nil,  -417,  -443,   nil,  -539,  -670,  -392,
  -412,  -534,  -655,   nil,   nil,   -25,  -365 ]

racc_goto_default = [
   nil,   nil,   446,   nil,   nil,   nil,   751,   nil,    42,   nil,
    49,    58,   336,   nil,   nil,   nil,   143,    86,    90,   145,
   156,   nil,   132,   nil,   134,    32,   nil,   nil,    46,    50,
    55,   nil,    66,   553,   nil,   nil,   nil,   nil,   nil,   105,
    12,   nil,    21,    24,    33,   135,   416,   nil,   245,   369,
   222,    65,   nil,   nil,    79,   331,   nil,   333,   547,   548,
   404,   583,   nil,   nil,   124,   nil,   nil,   402,    57,    62,
    68,    71,    75,    80,    85,   nil,   125,     8,   nil,   nil,
   nil,   nil,   nil,   nil,   485,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   304,   nil,   nil,   367,
   120,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    28,    35,    41,    45,   nil,   nil,   nil,   nil,   360,   nil,
   nil,   nil,   nil,   343,   nil,   614,   615,   617,   619,   nil,
   798,   626,   628,   612,   613,   nil,   142 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 136, :_reduce_1,
  2, 133, :_reduce_2,
  4, 135, :_reduce_3,
  2, 134, :_reduce_4,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  3, 140, :_reduce_7,
  2, 140, :_reduce_8,
  0, 158, :_reduce_9,
  4, 143, :_reduce_10,
  3, 143, :_reduce_11,
  3, 143, :_reduce_12,
  3, 143, :_reduce_13,
  2, 143, :_reduce_14,
  3, 143, :_reduce_15,
  3, 143, :_reduce_16,
  3, 143, :_reduce_17,
  3, 143, :_reduce_18,
  3, 143, :_reduce_19,
  0, 159, :_reduce_20,
  5, 143, :_reduce_21,
  4, 143, :_reduce_22,
  3, 143, :_reduce_23,
  3, 143, :_reduce_24,
  3, 143, :_reduce_25,
  6, 143, :_reduce_26,
  5, 143, :_reduce_27,
  5, 143, :_reduce_28,
  5, 143, :_reduce_29,
  3, 143, :_reduce_30,
  3, 143, :_reduce_31,
  3, 143, :_reduce_32,
  3, 143, :_reduce_33,
  1, 143, :_reduce_none,
  1, 157, :_reduce_none,
  3, 157, :_reduce_36,
  3, 157, :_reduce_37,
  2, 157, :_reduce_38,
  2, 157, :_reduce_39,
  1, 157, :_reduce_none,
  1, 147, :_reduce_41,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  2, 149, :_reduce_44,
  2, 149, :_reduce_45,
  2, 149, :_reduce_46,
  1, 162, :_reduce_none,
  4, 162, :_reduce_48,
  4, 162, :_reduce_49,
  0, 169, :_reduce_50,
  0, 170, :_reduce_51,
  6, 167, :_reduce_52,
  2, 161, :_reduce_53,
  3, 161, :_reduce_54,
  4, 161, :_reduce_55,
  5, 161, :_reduce_56,
  4, 161, :_reduce_57,
  5, 161, :_reduce_58,
  2, 161, :_reduce_59,
  2, 161, :_reduce_60,
  1, 150, :_reduce_none,
  3, 150, :_reduce_62,
  1, 173, :_reduce_none,
  3, 173, :_reduce_64,
  1, 172, :_reduce_65,
  2, 172, :_reduce_66,
  3, 172, :_reduce_67,
  2, 172, :_reduce_68,
  2, 172, :_reduce_69,
  1, 172, :_reduce_70,
  1, 175, :_reduce_none,
  3, 175, :_reduce_72,
  2, 174, :_reduce_73,
  3, 174, :_reduce_74,
  1, 176, :_reduce_75,
  4, 176, :_reduce_76,
  3, 176, :_reduce_77,
  3, 176, :_reduce_78,
  3, 176, :_reduce_79,
  3, 176, :_reduce_80,
  2, 176, :_reduce_81,
  1, 176, :_reduce_82,
  1, 148, :_reduce_83,
  4, 148, :_reduce_84,
  3, 148, :_reduce_85,
  3, 148, :_reduce_86,
  3, 148, :_reduce_87,
  3, 148, :_reduce_88,
  2, 148, :_reduce_89,
  1, 148, :_reduce_90,
  1, 178, :_reduce_91,
  1, 178, :_reduce_none,
  2, 179, :_reduce_93,
  1, 179, :_reduce_94,
  3, 179, :_reduce_95,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_99,
  1, 180, :_reduce_100,
  1, 145, :_reduce_101,
  1, 145, :_reduce_102,
  1, 146, :_reduce_103,
  0, 184, :_reduce_104,
  4, 146, :_reduce_105,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  3, 160, :_reduce_173,
  5, 160, :_reduce_174,
  3, 160, :_reduce_175,
  6, 160, :_reduce_176,
  5, 160, :_reduce_177,
  5, 160, :_reduce_178,
  5, 160, :_reduce_179,
  5, 160, :_reduce_180,
  4, 160, :_reduce_181,
  3, 160, :_reduce_182,
  3, 160, :_reduce_183,
  3, 160, :_reduce_184,
  3, 160, :_reduce_185,
  3, 160, :_reduce_186,
  3, 160, :_reduce_187,
  3, 160, :_reduce_188,
  3, 160, :_reduce_189,
  3, 160, :_reduce_190,
  4, 160, :_reduce_191,
  4, 160, :_reduce_192,
  2, 160, :_reduce_193,
  2, 160, :_reduce_194,
  3, 160, :_reduce_195,
  3, 160, :_reduce_196,
  3, 160, :_reduce_197,
  3, 160, :_reduce_198,
  3, 160, :_reduce_199,
  3, 160, :_reduce_200,
  3, 160, :_reduce_201,
  3, 160, :_reduce_202,
  3, 160, :_reduce_203,
  3, 160, :_reduce_204,
  3, 160, :_reduce_205,
  3, 160, :_reduce_206,
  3, 160, :_reduce_207,
  2, 160, :_reduce_208,
  2, 160, :_reduce_209,
  3, 160, :_reduce_210,
  3, 160, :_reduce_211,
  3, 160, :_reduce_212,
  3, 160, :_reduce_213,
  3, 160, :_reduce_214,
  5, 160, :_reduce_215,
  1, 160, :_reduce_none,
  1, 156, :_reduce_217,
  1, 153, :_reduce_none,
  2, 153, :_reduce_219,
  2, 153, :_reduce_220,
  5, 153, :_reduce_221,
  2, 153, :_reduce_222,
  3, 153, :_reduce_223,
  3, 190, :_reduce_224,
  4, 190, :_reduce_225,
  4, 190, :_reduce_226,
  6, 190, :_reduce_227,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 163, :_reduce_230,
  2, 163, :_reduce_231,
  5, 163, :_reduce_232,
  2, 163, :_reduce_233,
  5, 163, :_reduce_234,
  4, 163, :_reduce_235,
  7, 163, :_reduce_236,
  3, 163, :_reduce_237,
  1, 163, :_reduce_none,
  4, 194, :_reduce_239,
  3, 194, :_reduce_240,
  5, 194, :_reduce_241,
  7, 194, :_reduce_242,
  2, 194, :_reduce_243,
  5, 194, :_reduce_244,
  4, 194, :_reduce_245,
  6, 194, :_reduce_246,
  7, 194, :_reduce_247,
  9, 194, :_reduce_248,
  3, 194, :_reduce_249,
  1, 194, :_reduce_none,
  0, 196, :_reduce_251,
  2, 166, :_reduce_252,
  1, 195, :_reduce_none,
  0, 197, :_reduce_254,
  3, 195, :_reduce_255,
  0, 198, :_reduce_256,
  4, 195, :_reduce_257,
  2, 193, :_reduce_258,
  2, 192, :_reduce_259,
  1, 192, :_reduce_none,
  1, 187, :_reduce_261,
  3, 187, :_reduce_262,
  3, 155, :_reduce_263,
  4, 155, :_reduce_264,
  2, 155, :_reduce_265,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_274,
  0, 220, :_reduce_275,
  4, 186, :_reduce_276,
  0, 221, :_reduce_277,
  5, 186, :_reduce_278,
  3, 186, :_reduce_279,
  3, 186, :_reduce_280,
  2, 186, :_reduce_281,
  4, 186, :_reduce_282,
  3, 186, :_reduce_283,
  3, 186, :_reduce_284,
  1, 186, :_reduce_285,
  4, 186, :_reduce_286,
  3, 186, :_reduce_287,
  1, 186, :_reduce_288,
  5, 186, :_reduce_289,
  2, 186, :_reduce_290,
  1, 186, :_reduce_none,
  2, 186, :_reduce_292,
  6, 186, :_reduce_293,
  6, 186, :_reduce_294,
  0, 222, :_reduce_295,
  0, 223, :_reduce_296,
  7, 186, :_reduce_297,
  0, 224, :_reduce_298,
  0, 225, :_reduce_299,
  7, 186, :_reduce_300,
  5, 186, :_reduce_301,
  4, 186, :_reduce_302,
  5, 186, :_reduce_303,
  0, 226, :_reduce_304,
  0, 227, :_reduce_305,
  9, 186, :_reduce_306,
  0, 228, :_reduce_307,
  0, 229, :_reduce_308,
  7, 186, :_reduce_309,
  0, 230, :_reduce_310,
  0, 231, :_reduce_311,
  0, 232, :_reduce_312,
  9, 186, :_reduce_313,
  0, 233, :_reduce_314,
  0, 234, :_reduce_315,
  6, 186, :_reduce_316,
  0, 235, :_reduce_317,
  6, 186, :_reduce_318,
  0, 236, :_reduce_319,
  0, 237, :_reduce_320,
  9, 186, :_reduce_321,
  1, 186, :_reduce_322,
  1, 186, :_reduce_323,
  1, 186, :_reduce_324,
  1, 186, :_reduce_325,
  1, 152, :_reduce_326,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  2, 210, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 211, :_reduce_none,
  5, 211, :_reduce_335,
  1, 138, :_reduce_none,
  2, 138, :_reduce_337,
  1, 214, :_reduce_none,
  1, 214, :_reduce_339,
  1, 168, :_reduce_none,
  2, 168, :_reduce_341,
  1, 168, :_reduce_342,
  3, 168, :_reduce_343,
  0, 239, :_reduce_344,
  0, 240, :_reduce_345,
  6, 238, :_reduce_346,
  2, 164, :_reduce_347,
  4, 164, :_reduce_348,
  4, 164, :_reduce_349,
  0, 242, :_reduce_350,
  3, 209, :_reduce_351,
  4, 209, :_reduce_352,
  4, 209, :_reduce_353,
  3, 209, :_reduce_354,
  2, 209, :_reduce_355,
  1, 209, :_reduce_356,
  0, 243, :_reduce_357,
  0, 244, :_reduce_358,
  6, 208, :_reduce_359,
  0, 245, :_reduce_360,
  0, 246, :_reduce_361,
  6, 208, :_reduce_362,
  0, 249, :_reduce_363,
  6, 213, :_reduce_364,
  1, 247, :_reduce_none,
  4, 247, :_reduce_366,
  2, 247, :_reduce_367,
  1, 248, :_reduce_none,
  1, 248, :_reduce_none,
  6, 137, :_reduce_370,
  0, 137, :_reduce_371,
  1, 250, :_reduce_372,
  1, 250, :_reduce_none,
  1, 250, :_reduce_none,
  2, 251, :_reduce_375,
  1, 251, :_reduce_none,
  2, 139, :_reduce_377,
  1, 139, :_reduce_none,
  1, 200, :_reduce_379,
  1, 200, :_reduce_380,
  1, 200, :_reduce_none,
  1, 201, :_reduce_382,
  1, 254, :_reduce_none,
  2, 254, :_reduce_384,
  3, 255, :_reduce_385,
  1, 255, :_reduce_386,
  3, 202, :_reduce_387,
  3, 203, :_reduce_388,
  3, 204, :_reduce_389,
  3, 204, :_reduce_390,
  1, 258, :_reduce_391,
  3, 258, :_reduce_392,
  1, 259, :_reduce_none,
  2, 259, :_reduce_394,
  3, 205, :_reduce_395,
  3, 205, :_reduce_396,
  1, 261, :_reduce_397,
  3, 261, :_reduce_398,
  1, 256, :_reduce_399,
  2, 256, :_reduce_400,
  1, 257, :_reduce_401,
  2, 257, :_reduce_402,
  1, 260, :_reduce_403,
  0, 263, :_reduce_404,
  3, 260, :_reduce_405,
  0, 264, :_reduce_406,
  4, 260, :_reduce_407,
  1, 262, :_reduce_408,
  1, 262, :_reduce_409,
  1, 262, :_reduce_410,
  1, 262, :_reduce_none,
  2, 183, :_reduce_412,
  1, 183, :_reduce_413,
  1, 265, :_reduce_none,
  1, 265, :_reduce_none,
  1, 265, :_reduce_none,
  1, 265, :_reduce_none,
  3, 253, :_reduce_418,
  1, 252, :_reduce_none,
  1, 252, :_reduce_none,
  2, 252, :_reduce_421,
  2, 252, :_reduce_422,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_428,
  1, 177, :_reduce_429,
  1, 177, :_reduce_430,
  1, 177, :_reduce_431,
  1, 177, :_reduce_432,
  1, 177, :_reduce_433,
  1, 206, :_reduce_434,
  1, 151, :_reduce_435,
  1, 154, :_reduce_436,
  1, 154, :_reduce_437,
  1, 215, :_reduce_438,
  0, 266, :_reduce_439,
  4, 215, :_reduce_440,
  2, 215, :_reduce_441,
  4, 217, :_reduce_442,
  2, 217, :_reduce_443,
  6, 267, :_reduce_444,
  4, 267, :_reduce_445,
  4, 267, :_reduce_446,
  2, 267, :_reduce_447,
  4, 267, :_reduce_448,
  2, 267, :_reduce_449,
  2, 267, :_reduce_450,
  1, 267, :_reduce_451,
  0, 267, :_reduce_452,
  1, 273, :_reduce_453,
  1, 273, :_reduce_454,
  1, 273, :_reduce_455,
  1, 273, :_reduce_456,
  1, 268, :_reduce_457,
  3, 268, :_reduce_458,
  3, 274, :_reduce_459,
  1, 269, :_reduce_460,
  3, 269, :_reduce_461,
  1, 275, :_reduce_none,
  1, 275, :_reduce_none,
  2, 270, :_reduce_464,
  1, 270, :_reduce_465,
  1, 276, :_reduce_none,
  1, 276, :_reduce_none,
  2, 272, :_reduce_468,
  2, 271, :_reduce_469,
  0, 271, :_reduce_470,
  1, 218, :_reduce_none,
  0, 277, :_reduce_472,
  5, 218, :_reduce_473,
  1, 207, :_reduce_474,
  2, 207, :_reduce_475,
  2, 207, :_reduce_476,
  1, 189, :_reduce_none,
  3, 189, :_reduce_478,
  3, 278, :_reduce_479,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  0, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 185, :_reduce_none,
  1, 185, :_reduce_none,
  0, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 216, :_reduce_499,
  1, 216, :_reduce_none,
  1, 144, :_reduce_none,
  2, 144, :_reduce_502,
  0, 142, :_reduce_503,
  0, 199, :_reduce_504 ]

racc_reduce_n = 505

racc_shift_n = 902

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kRETURN => 28,
  :kYIELD => 29,
  :kSUPER => 30,
  :kSELF => 31,
  :kNIL => 32,
  :kTRUE => 33,
  :kFALSE => 34,
  :kAND => 35,
  :kOR => 36,
  :kNOT => 37,
  :kIF_MOD => 38,
  :kUNLESS_MOD => 39,
  :kWHILE_MOD => 40,
  :kUNTIL_MOD => 41,
  :kRESCUE_MOD => 42,
  :kALIAS => 43,
  :kDEFINED => 44,
  :klBEGIN => 45,
  :klEND => 46,
  :k__LINE__ => 47,
  :k__FILE__ => 48,
  :tIDENTIFIER => 49,
  :tFID => 50,
  :tGVAR => 51,
  :tIVAR => 52,
  :tCONSTANT => 53,
  :tCVAR => 54,
  :tNTH_REF => 55,
  :tBACK_REF => 56,
  :tSTRING_CONTENT => 57,
  :tINTEGER => 58,
  :tFLOAT => 59,
  :tREGEXP_END => 60,
  :tUPLUS => 61,
  :tUMINUS => 62,
  :tUMINUS_NUM => 63,
  :tPOW => 64,
  :tCMP => 65,
  :tEQ => 66,
  :tEQQ => 67,
  :tNEQ => 68,
  :tGEQ => 69,
  :tLEQ => 70,
  :tANDOP => 71,
  :tOROP => 72,
  :tMATCH => 73,
  :tNMATCH => 74,
  :tDOT => 75,
  :tDOT2 => 76,
  :tDOT3 => 77,
  :tAREF => 78,
  :tASET => 79,
  :tLSHFT => 80,
  :tRSHFT => 81,
  :tCOLON2 => 82,
  :tCOLON3 => 83,
  :tOP_ASGN => 84,
  :tASSOC => 85,
  :tLPAREN => 86,
  :tLPAREN2 => 87,
  :tRPAREN => 88,
  :tLPAREN_ARG => 89,
  :tLBRACK => 90,
  :tRBRACK => 91,
  :tLBRACE => 92,
  :tLBRACE_ARG => 93,
  :tSTAR => 94,
  :tSTAR2 => 95,
  :tAMPER => 96,
  :tAMPER2 => 97,
  :tTILDE => 98,
  :tPERCENT => 99,
  :tDIVIDE => 100,
  :tPLUS => 101,
  :tMINUS => 102,
  :tLT => 103,
  :tGT => 104,
  :tPIPE => 105,
  :tBANG => 106,
  :tCARET => 107,
  :tLCURLY => 108,
  :tRCURLY => 109,
  :tBACK_REF2 => 110,
  :tSYMBEG => 111,
  :tSTRING_BEG => 112,
  :tXSTRING_BEG => 113,
  :tREGEXP_BEG => 114,
  :tWORDS_BEG => 115,
  :tAWORDS_BEG => 116,
  :tSTRING_DBEG => 117,
  :tSTRING_DVAR => 118,
  :tSTRING_END => 119,
  :tSTRING => 120,
  :tSYMBOL => 121,
  :tNL => 122,
  :tEH => 123,
  :tCOLON => 124,
  :tCOMMA => 125,
  :tSPACE => 126,
  :tSEMI => 127,
  :tLAST_TOKEN => 128,
  :tEQL => 129,
  :tLOWEST => 130,
  "[" => 131 }

racc_nt_base = 132

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tAWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAST_TOKEN",
  "tEQL",
  "tLOWEST",
  "\"[\"",
  "$start",
  "program",
  "compstmt",
  "bodystmt",
  "@1",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "opt_terms",
  "none",
  "stmt",
  "terms",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "aref_args",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@2",
  "@3",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_var",
  "@4",
  "@5",
  "operation",
  "mlhs_basic",
  "mlhs_entry",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "@6",
  "opt_nl",
  "primary",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@7",
  "@8",
  "@9",
  "none_block_pass",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "awords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "then",
  "if_tail",
  "do",
  "case_body",
  "block_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "do_block",
  "@28",
  "@29",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "when_args",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "dsym",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@36",
  "@37",
  "sym",
  "@38",
  "f_args",
  "f_arg",
  "f_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "f_norm_arg",
  "f_opt",
  "restarg_mark",
  "blkarg_mark",
  "@39",
  "assoc" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_3(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_4(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 5 omitted

# reduce 6 omitted

def _reduce_7(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_8(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_9(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_10(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_12(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_13(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_14(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_16(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_17(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_18(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:rescue, val[0], s(:resbody, s(:array), val[2]))
                    
    result
end

def _reduce_20(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_21(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3] # TODO: add test?
                      result = nil # TODO: since it isn't supposed to go in the AST
                    
    result
end

def _reduce_22(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), nil, val[2]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_26(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_28(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_29(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_30(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_31(val, _values, result)
                      result = self.node_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_32(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_33(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 34 omitted

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_37(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 42 omitted

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = s(:return, ret_args(val[1]))
                    
    result
end

def _reduce_45(val, _values, result)
                      result = s(:break, ret_args(val[1]))
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:next, ret_args(val[1]))
                    
    result
end

# reduce 47 omitted

def _reduce_48(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_49(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_50(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_51(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_52(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      self.env.unextend
                    
    result
end

def _reduce_53(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                    
    result
end

def _reduce_54(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                      if val[2] then
                        if result[0] == :block_pass then
                          raise "both block arg and actual block given"
                        end
                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_55(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                      if val[4] then
                        if result[0] == :block_pass then # REFACTOR
                          raise "both block arg and actual block given"
                        end
                        val[2] << result
                        result = val[2]
                      end
                    
    result
end

def _reduce_59(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

# reduce 61 omitted

def _reduce_62(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_65(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_66(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_67(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_68(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_69(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_70(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_75(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_76(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist))
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist))
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist))
                    
    result
end

def _reduce_80(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_81(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_82(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_83(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_84(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_88(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_89(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_90(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 92 omitted

def _reduce_93(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_94(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

def _reduce_99(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_101(val, _values, result)
 result = s(:lit, val[0].to_sym) 
    result
end

def _reduce_102(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_103(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_104(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_105(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

def _reduce_173(val, _values, result)
                      result = self.node_assign val[0], val[2]
                    
    result
end

def _reduce_174(val, _values, result)
                      result = self.node_assign val[0], s(:rescue, val[2], s(:resbody, s(:array), val[4]))
                      # result.line = val[0].line
                    
    result
end

def _reduce_175(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_176(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                      val[2][0] = :arglist
                    
    result
end

def _reduce_177(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_178(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_179(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                    
    result
end

def _reduce_180(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_181(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_182(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_183(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_184(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_185(val, _values, result)
                      result = new_call val[0], :+, s(:arglist, val[2])
                    
    result
end

def _reduce_186(val, _values, result)
                      result = new_call val[0], :-, s(:arglist, val[2])
                    
    result
end

def _reduce_187(val, _values, result)
                      result = new_call val[0], :*, s(:arglist, val[2])
                    
    result
end

def _reduce_188(val, _values, result)
                      result = new_call val[0], :"/", s(:arglist, val[2])
                    
    result
end

def _reduce_189(val, _values, result)
                      result = new_call val[0], :%, s(:arglist, val[2])
                    
    result
end

def _reduce_190(val, _values, result)
                      result = new_call val[0], :**, s(:arglist, val[2])
                    
    result
end

def _reduce_191(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", s(:arglist, val[3])), :"-@", s(:arglist))
                    
    result
end

def _reduce_192(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", s(:arglist, val[3])), :"-@", s(:arglist))
                    
    result
end

def _reduce_193(val, _values, result)
                      if val[1][0] == :lit then
                        result = val[1]
                      else
                        result = new_call val[1], :"+@", s(:arglist)
                      end
                    
    result
end

def _reduce_194(val, _values, result)
                      result = new_call val[1], :"-@", s(:arglist)
                    
    result
end

def _reduce_195(val, _values, result)
                      result = new_call val[0], :"|", s(:arglist, val[2])
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_call val[0], :"^", s(:arglist, val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_call val[0], :"&", s(:arglist, val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_call val[0], :"<=>", s(:arglist, val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = new_call val[0], :">", s(:arglist, val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_call val[0], :">=", s(:arglist, val[2])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_call val[0], :"<", s(:arglist, val[2])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = new_call val[0], :"<=", s(:arglist, val[2])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = new_call val[0], :"==", s(:arglist, val[2])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = new_call val[0], :"===", s(:arglist, val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      val[0] = value_expr val[0] # TODO: port call_op and clean these
                      val[2] = value_expr val[2]
                      result = s(:not, new_call(val[0], :"==", s(:arglist, val[2])))
                    
    result
end

def _reduce_206(val, _values, result)
                      result = self.get_match_node val[0], val[2]
                    
    result
end

def _reduce_207(val, _values, result)
                      result = s(:not, self.get_match_node(val[0], val[2]))
                    
    result
end

def _reduce_208(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

def _reduce_209(val, _values, result)
                      val[2] = value_expr val[2]
                      result = new_call val[1], :"~", s(:arglist)
                    
    result
end

def _reduce_210(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", s(:arglist, val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", s(:arglist, val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = s(:if, val[0], val[2], val[4])
                    
    result
end

# reduce 216 omitted

def _reduce_217(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 218 omitted

def _reduce_219(val, _values, result)
                      warning 'parenthesize argument(s) for future version'
                      result = s(:array, val[0])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_221(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_222(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                    
    result
end

def _reduce_223(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_224(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_225(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_226(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[1])
                    
    result
end

def _reduce_227(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = val[1].add val[3]
                    
    result
end

# reduce 228 omitted

# reduce 229 omitted

def _reduce_230(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[0])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_232(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                      result = self.arg_blk_pass result, val[4]
                    
    result
end

def _reduce_233(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_234(val, _values, result)
                      result = self.arg_concat s(:array, s(:hash, *val[0].values)), val[3]
                      result = self.arg_blk_pass result, val[4]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = val[0] << s(:hash, *val[2].values)
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_236(val, _values, result)
                      val[0] << s(:hash, *val[2].values)
                      result = self.arg_concat val[0], val[5]
                      result = self.arg_blk_pass result, val[6]
                    
    result
end

def _reduce_237(val, _values, result)
                      result = self.arg_blk_pass s(:splat, val[1]), val[2]
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      args = self.list_prepend val[0], val[2]
                      result = self.arg_blk_pass args, val[3]
                    
    result
end

def _reduce_240(val, _values, result)
                      result = self.arg_blk_pass val[0], val[2]
                    
    result
end

def _reduce_241(val, _values, result)
                      result = self.arg_concat s(:array, val[0]), val[3]
                      result = self.arg_blk_pass result, val[4]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = self.arg_concat s(:array, val[0], s(:hash, *val[2].values)), val[5]
                      result = self.arg_blk_pass result, val[6]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values), val[3])
                      result = self.arg_blk_pass result, val[4]
                    
    result
end

def _reduce_245(val, _values, result)
                      result = s(:array, val[0], s(:hash, *val[2].values))
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_246(val, _values, result)
                      result = s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values))
                      result = self.arg_blk_pass result, val[5]
                    
    result
end

def _reduce_247(val, _values, result)
                      result = self.arg_concat s(:array, val[0]).add(s(:hash, *val[2].values)), val[5]
                      result = self.arg_blk_pass result, val[6]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = self.arg_concat s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values)), val[7]
                      result = self.arg_blk_pass result, val[8]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = self.arg_blk_pass s(:splat, val[1]), val[2]
                    
    result
end

# reduce 250 omitted

def _reduce_251(val, _values, result)
                      result = lexer.cmdarg.stack.dup
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_252(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

# reduce 253 omitted

def _reduce_254(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_255(val, _values, result)
                      warning "don't put space before argument parentheses"
                      result = nil
                    
    result
end

def _reduce_256(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_257(val, _values, result)
                      warning "don't put space before argument parentheses"
                      result = val[1]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_259(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 260 omitted

def _reduce_261(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_262(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_263(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

def _reduce_274(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_275(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_276(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_277(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_278(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
                    
    result
end

def _reduce_279(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_280(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_281(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_282(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_283(val, _values, result)
                      result = val[1] || s(:array)
                    
    result
end

def _reduce_284(val, _values, result)
                      result = s(:hash, *val[1].values)
                    
    result
end

def _reduce_285(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_286(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_287(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_288(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_290(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = new_call(nil, oper.to_sym)
                      iter.insert 1, call
                      result = iter
                      call.line ||= iter.line
                    
    result
end

# reduce 291 omitted

def _reduce_292(val, _values, result)
                      call, iter = val[0], val[1]
                      iter.insert 1, call
                      result = iter
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_295(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_296(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_297(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_298(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_299(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_300(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_301(val, _values, result)
                      result = new_case val[1], val[3]
                    
    result
end

def _reduce_302(val, _values, result)
                      result = new_case nil, val[2]
                    
    result
end

def _reduce_303(val, _values, result)
                      result = new_case nil, val[3]
                    
    result
end

def _reduce_304(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_305(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_306(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_307(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_308(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_309(val, _values, result)
                      result = new_class val
                      self.env.unextend
                    
    result
end

def _reduce_310(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_311(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_312(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_313(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                    
    result
end

def _reduce_314(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_315(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_316(val, _values, result)
                      result = new_module val
                      self.env.unextend
                    
    result
end

def _reduce_317(val, _values, result)
                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      result = lexer.lineno, lexer.src.beginning_of_line?
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_defn val
                      self.env.unextend
                      self.in_def = false
                    
    result
end

def _reduce_319(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_320(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_end # force for args
                    
    result
end

def _reduce_321(val, _values, result)
                      result = new_defs val

                      self.env.unextend
                      self.in_single -= 1
                    
    result
end

def _reduce_322(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_323(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_324(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_325(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_326(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 327 omitted

# reduce 328 omitted

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

def _reduce_335(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 336 omitted

def _reduce_337(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 338 omitted

def _reduce_339(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 340 omitted

def _reduce_341(val, _values, result)
                      result = 0
                    
    result
end

def _reduce_342(val, _values, result)
                      result = 0
                    
    result
end

def _reduce_343(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_344(val, _values, result)
                      self.env.extend :dynamic
                    
    result
end

def _reduce_345(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_346(val, _values, result)
                      vars   = val[2]
                      body   = val[4]
                      result = new_iter nil, vars, body

                      self.env.unextend
                    
    result
end

def _reduce_347(val, _values, result)
                      raise SyntaxError, "Both block arg and actual block given." if
                        val[0] && val[0][0] == :blockpass

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_348(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_349(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_350(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_351(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[2]
                    
    result
end

def _reduce_352(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_353(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_354(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_355(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_356(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_357(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_358(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_359(val, _values, result)
                      # REFACTOR
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.line = val[1]
                    
    result
end

def _reduce_360(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_361(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_362(val, _values, result)
                      args = val[2]
                      body = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.line = val[1]
                    
    result
end

def _reduce_363(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_364(val, _values, result)
                      result = s(:when, val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 365 omitted

def _reduce_366(val, _values, result)
                      result = self.list_append val[0], s(:when, val[3], nil)
                    
    result
end

def _reduce_367(val, _values, result)
                      result = s(:array, s(:when, val[1], nil))
                    
    result
end

# reduce 368 omitted

# reduce 369 omitted

def _reduce_370(val, _values, result)
                      klasses, var, body, rest = val[1], val[2], val[4], val[5]

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = s(:resbody, klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_371(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_372(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 373 omitted

# reduce 374 omitted

def _reduce_375(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      if (val[1] != nil) then
                        result = val[1]
                      else
                        result = s(:nil)
                      end
                    
    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_380(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

# reduce 381 omitted

def _reduce_382(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
                    
    result
end

# reduce 383 omitted

def _reduce_384(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_385(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_386(val, _values, result)
                      result = s(:str, val[0])
                    
    result
end

def _reduce_387(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_388(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_390(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_391(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_392(val, _values, result)
                      word = val[1][0] == :evstr ? s(:dstr, "", val[1]) : val[1]
                      result = val[0] << word
                    
    result
end

# reduce 393 omitted

def _reduce_394(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_395(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_396(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_397(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_398(val, _values, result)
                      result = val[0] << s(:str, val[1])
                    
    result
end

def _reduce_399(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_400(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_401(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_402(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_403(val, _values, result)
                      result = s(:str, val[0])
                    
    result
end

def _reduce_404(val, _values, result)
                      result = lexer.lex_strterm
                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_405(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_406(val, _values, result)
                      result = lexer.lex_strterm
                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                      lexer.cond.push false
                      lexer.cmdarg.push false
                    
    result
end

def _reduce_407(val, _values, result)
                      lexer.lex_strterm = val[1]
                      lexer.cond.lexpop
                      lexer.cmdarg.lexpop

                      case val[2]
                      when Sexp then
                        case val[2][0]
                        when :str, :dstr, :evstr then
                          result = val[2]
                        else
                          result = s(:evstr, val[2])
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        raise "unknown rescue body: #{val[2].inspect}"
                      end
                    
    result
end

def _reduce_408(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_409(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_410(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 411 omitted

def _reduce_412(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_413(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 414 omitted

# reduce 415 omitted

# reduce 416 omitted

# reduce 417 omitted

def _reduce_418(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      yyerror "empty symbol literal" if
                        result.nil? or result.empty?

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.intern)
                      else
                        result = s(:dsym, "", result)
                      end
                    
    result
end

# reduce 419 omitted

# reduce 420 omitted

def _reduce_421(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_422(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 423 omitted

# reduce 424 omitted

# reduce 425 omitted

# reduce 426 omitted

# reduce 427 omitted

def _reduce_428(val, _values, result)
 result = :nil      
    result
end

def _reduce_429(val, _values, result)
 result = :self     
    result
end

def _reduce_430(val, _values, result)
 result = :true     
    result
end

def _reduce_431(val, _values, result)
 result = :false    
    result
end

def _reduce_432(val, _values, result)
 result = :__FILE__ 
    result
end

def _reduce_433(val, _values, result)
 result = :__LINE__ 
    result
end

def _reduce_434(val, _values, result)
                      result = self.gettable val[0]
                    
    result
end

def _reduce_435(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_436(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_437(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_438(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_439(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_440(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_441(val, _values, result)
                      yyerrok
                      result = nil
                    
    result
end

def _reduce_442(val, _values, result)
                      result = val[1]
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_443(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_444(val, _values, result)
                      result = args val[0], val[2], val[4], val[5]
                    
    result
end

def _reduce_445(val, _values, result)
                      result = args val[0], val[2],    nil, val[3]
                    
    result
end

def _reduce_446(val, _values, result)
                      result = args val[0],    nil, val[2], val[3]
                    
    result
end

def _reduce_447(val, _values, result)
                      result = args val[0],    nil,    nil, val[1]
                    
    result
end

def _reduce_448(val, _values, result)
                      result = args    nil, val[0], val[2], val[3]
                    
    result
end

def _reduce_449(val, _values, result)
                      result = args    nil, val[0],    nil, val[1]
                    
    result
end

def _reduce_450(val, _values, result)
                      result = args    nil,    nil, val[0], val[1]
                    
    result
end

def _reduce_451(val, _values, result)
                      result = args    nil,    nil,    nil, val[0]
                    
    result
end

def _reduce_452(val, _values, result)
                      result = args    nil,    nil,    nil,    nil
                    
    result
end

def _reduce_453(val, _values, result)
                      yyerror "formal argument cannot be a constant: #{val[0]}"
                    
    result
end

def _reduce_454(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_455(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

def _reduce_456(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = val[0]
                    
    result
end

def _reduce_457(val, _values, result)
                      result = s(:args)
                      result << val[0].to_sym
                    
    result
end

def _reduce_458(val, _values, result)
                      val[0] << val[2].to_sym
                      result = val[0]
                    
    result
end

def _reduce_459(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_460(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = self.append_to_block val[0], val[2]
                    
    result
end

# reduce 462 omitted

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_465(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 466 omitted

# reduce 467 omitted

def _reduce_468(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = s(:block_arg, identifier.to_sym)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_470(val, _values, result)
                      result = nil
                    
    result
end

# reduce 471 omitted

def _reduce_472(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
                    
    result
end

def _reduce_474(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_475(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_476(val, _values, result)
                      size = val[0].size
                      if (size % 2 != 1) then # != 1 because of leading :array
                        yyerror "Odd number (#{size}) list for Hash. #{val[0].inspect}"
                      end
                      result = val[0]
                    
    result
end

# reduce 477 omitted

def _reduce_478(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                    
    result
end

def _reduce_479(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

# reduce 480 omitted

# reduce 481 omitted

# reduce 482 omitted

# reduce 483 omitted

# reduce 484 omitted

# reduce 485 omitted

# reduce 486 omitted

# reduce 487 omitted

# reduce 488 omitted

# reduce 489 omitted

# reduce 490 omitted

# reduce 491 omitted

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

# reduce 497 omitted

# reduce 498 omitted

def _reduce_499(val, _values, result)
 yyerrok 
    result
end

# reduce 500 omitted

# reduce 501 omitted

def _reduce_502(val, _values, result)
 yyerrok 
    result
end

def _reduce_503(val, _values, result)
 result = nil 
    result
end

def _reduce_504(val, _values, result)
 result = nil 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class RubyParser
